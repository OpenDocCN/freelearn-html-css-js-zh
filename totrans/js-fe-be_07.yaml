- en: '*Chapter 5*: Managing a List with Vue.js'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第五章*：使用 Vue.js 管理列表'
- en: After going through the basic and advanced concepts of Vue.js, with this chapter,
    let’s finish our study of the Vue.js library by building an application to manage
    a list of elements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了 Vue.js 的基本和高级概念之后，通过本章，让我们通过构建一个应用程序来管理元素列表，来完成我们对 Vue.js 库的学习。
- en: Why make this type of application? Quite simply because it allows you to perform
    fairly standard operations on the HTML elements of a page, such as inserting an
    element, modifying it, and deleting it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要制作这种类型的应用程序？很简单，因为它允许你执行对页面 HTML 元素的标准操作，例如插入元素、修改它和删除它。
- en: These are the basic operations that you need to know how to perform, for example,
    to manage the elements in a database. In this chapter, we will learn how to perform
    these operations on the elements displayed on the screen, and in the next part
    (where we study Node.js and MongoDB), we will see how to simultaneously update
    a database.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是你需要知道如何执行的基本操作，例如，在数据库中管理元素。在本章中，我们将学习如何在屏幕上显示的元素上执行这些操作，在下一部分（我们学习 Node.js
    和 MongoDB）中，我们将看到如何同时更新数据库。
- en: 'Here are the topics covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Splitting the application into components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序拆分为组件
- en: Adding an element to the list
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向列表中添加元素
- en: Removing an element from the list
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从列表中删除元素
- en: Modifying an element in the list
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改列表中的元素
- en: But let’s start by discovering the screens of the application that we want to
    create with Vue.js.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们先来发现我们想要用 Vue.js 创建的应用程序的界面。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the code files for this chapter on GitHub at: [https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%205.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%205.zip).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 上找到本章的代码文件：[https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%205.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%205.zip)。
- en: Displaying application screens
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示应用程序屏幕
- en: As mentioned earlier, we’ll be building an application to manage a list of elements.
    Before writing the source code of our application, let’s show the different screens
    of the application by explaining their sequence.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将构建一个用于管理元素列表的应用程序。在编写我们应用程序的源代码之前，让我们通过解释它们的顺序来展示应用程序的不同屏幕。
- en: Initially, the list is empty. The **Add Element** button allows, on each click,
    to insert a new element in the list.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，列表为空。**添加元素**按钮允许在每次点击时向列表中插入一个新元素。
- en: '![Figure 5.1 – Screen when launching the application'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 5.1 – 启动应用程序时的屏幕'
- en: '](img/Figure_5.01_B17416.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 5.01_B17416.jpg](img/Figure_5.01_B17416.jpg)'
- en: Figure 5.1 – Screen when launching the application
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图片 5.1 – 启动应用程序时的屏幕
- en: 'Let’s click the **Add Element** button several times (here, three times):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们多次点击**添加元素**按钮（这里，点击了三次）：
- en: '![Figure 5.2 – After three clicks on the Add Element button'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 5.2 – 点击添加元素按钮三次后的效果'
- en: '](img/Figure_5.02_B17416.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 5.02_B17416.jpg](img/Figure_5.02_B17416.jpg)'
- en: Figure 5.2 – After three clicks on the Add Element button
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图片 5.2 – 点击添加元素按钮三次后的效果
- en: Each element inserted has the index (starting from 1) of the element in the
    list. A **Remove** button and a **Modify** button are inserted after the item
    in the list.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每个插入的元素都有列表中元素的索引（从 1 开始）。在列表项后面插入一个**删除**按钮和一个**修改**按钮。
- en: Let’s click on the **Modify** button on the second line. The item text is replaced
    by an input field, in which the cursor flashes to allow editing.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在第二行点击**修改**按钮。项目文本被替换为一个输入字段，光标闪烁以允许编辑。
- en: '![Figure 5.3 – The second item in the list can be changed'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 5.3 – 列表中的第二个元素可以更改'
- en: '](img/Figure_5.03_B17416.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 5.03_B17416.jpg](img/Figure_5.03_B17416.jpg)'
- en: Figure 5.3 – The second item in the list can be changed
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图片 5.3 – 列表中的第二个元素可以更改
- en: Let’s modify the text in the input field, by typing `New Element 2`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改输入字段中的文本，输入 `New Element 2`。
- en: '![Figure 5.4 – Editing a list item'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 5.4 – 编辑列表项'
- en: '](img/Figure_5.04_B17416.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 5.04_B17416.jpg](img/Figure_5.04_B17416.jpg)'
- en: Figure 5.4 – Editing a list item
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图片 5.4 – 编辑列表项
- en: For the modification of the element to be reflected, you must leave the input
    field, by clicking elsewhere on the page.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要使元素的修改反映出来，你必须通过在页面上其他地方点击来离开输入字段。
- en: '![Figure 5.5 – Taking into account the modification of the element'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 5.5 – 考虑到元素的修改'
- en: '](img/Figure_5.05_B17416.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 5.05_B17416.jpg](img/Figure_5.05_B17416.jpg)'
- en: Figure 5.5 – Taking into account the modification of the element
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图片 5.5 – 考虑到元素的修改
- en: Finally, to remove the first and third elements, click on their corresponding
    **Remove** buttons.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要删除第一和第三个元素，请点击它们对应的**删除**按钮。
- en: '![Figure 5.6 – After deleting the first and last element'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.6 – 删除第一和最后一个元素后'
- en: '](img/Figure_5.06_B17416.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.06_B17416.jpg)'
- en: Figure 5.6 – After deleting the first and last element
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 – 删除第一和最后一个元素后
- en: We have administered here a list of elements on which we have performed basic
    operations, namely, inserting a new element, modifying the element, and deleting
    it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经管理了一个元素列表，并对它执行了基本操作，即插入新元素、修改元素和删除元素。
- en: Using HTTP Protocol
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTTP协议
- en: This application uses a PHP server to work because the import of JavaScript
    modules with the JavaScript `import` statement only works under the HTTP protocol.
    We will see in the next part ([*Chapter 9*](B17416_09_ePub.xhtml#_idTextAnchor165)*,
    Integrating Vue.js with Node.js*) how to use a Node.js server to also make it
    work, by coupling it in addition with a MongoDB database.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用使用PHP服务器来工作，因为只有在使用HTTP协议的情况下，JavaScript模块的导入才能通过JavaScript的`import`语句进行。我们将在下一部分（[*第9章*](B17416_09_ePub.xhtml#_idTextAnchor165)*，将Vue.js与Node.js集成）中看到如何使用Node.js服务器来实现这一点，同时将其与MongoDB数据库结合使用。
- en: We have described the operation of the application, and the sequence of the
    various windows. Now let’s see how to build this application with Vue.js. We first
    explain how the application can be broken down into different components.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经描述了应用的操作以及各种窗口的顺序。现在让我们看看如何使用Vue.js构建这个应用。我们首先解释如何将应用分解为不同的组件。
- en: Splitting the application into components
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用拆分为组件
- en: When you create an application with Vue.js, you have to start by asking yourself
    what components you will need to build it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用Vue.js创建一个应用时，你必须首先问自己你需要哪些组件来构建它。
- en: 'In our case, it would be the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，它将是以下内容：
- en: A `<GlobalApp>` component that groups the whole application. It is this `<GlobalApp>`
    component that will be integrated into our `index.html` page. It will display
    the **Add Element** button as well as the list of elements below.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个将整个应用组合在一起的`<GlobalApp>`组件。正是这个`<GlobalApp>`组件将被集成到我们的`index.html`页面中。它将显示**添加元素**按钮以及下面的元素列表。
- en: An `<Element>` component that displays a list element line, which will include
    the element’s text, the **Remove** button, and the **Modify** button.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个显示列表元素的`<Element>`组件，它将包括元素的文本、**删除**按钮和**修改**按钮。
- en: The list of elements will be associated with a reactive variable named `elements`,
    which will be an array containing, for each element, the displayed text. This
    reactive variable will be registered in the `<GlobalApp>` component. It will be
    modified when adding a new element to the list or when deleting or modifying an
    element in the list.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 元素列表将与一个名为`elements`的反应变量相关联，它将是一个数组，包含每个元素的显示文本。这个反应变量将在`<GlobalApp>`组件中注册。当向列表中添加新元素或删除或修改列表中的元素时，它将被修改。
- en: 'So, the core files of our app are as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们应用的核心文件如下：
- en: The `index.html` file, which is the main file
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`文件，这是主文件'
- en: The `global-app.js` file, which contains the `<GlobalApp>` component, and is
    imported into the `index.html` file
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含`<GlobalApp>`组件的`global-app.js`文件，它被导入到`index.html`文件中
- en: The `element.js` file, which describes an element of the displayed list (the
    `<Element>` component), namely the text of the element, as well as the **Remove**
    and **Modify** buttons
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element.js`文件，它描述了显示列表中的一个元素（即`<Element>`组件），包括元素的文本以及**删除**和**修改**按钮'
- en: 'Here is the content of these files:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是这些文件的内容：
- en: index.html file
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: index.html文件
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `index.html` file displays the `<GlobalApp>` component, which corresponds
    to the main component of the application, which we’ll now describe:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html`文件显示`<GlobalApp>`组件，这是应用的主组件，我们现在将对其进行描述：'
- en: <GlobalApp> component (global-app.js file)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`<GlobalApp>`组件（global-app.js文件）'
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: We find the reactive variable `elements`, as well as the `<ul>` list of elements,
    empty for the moment.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现反应变量`elements`以及元素的`<ul>`列表目前为空。
- en: 'The `<Element>` component is described below. It is empty for the moment and
    will be enriched in the following sections:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是对`<Element>`组件的描述。目前它是空的，将在以下章节中丰富：
- en: <Element> component (element.js file)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Element>`组件（element.js文件）'
- en: '[PRE35]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Using HTTP Protocol
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTTP协议
- en: As the JavaScript code comprises module `import` instructions, it is necessary
    to use a web server accessible by HTTP to display the HTML page corresponding
    to `index.html`. The `file` protocol would not work here.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 JavaScript 代码包含模块 `import` 指令，因此需要使用可通过 HTTP 访问的 Web 服务器来显示与 `index.html`
    对应的 HTML 页面。`file` 协议在这里不起作用。
- en: 'Let’s display the result of this temporary code on the screen:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在屏幕上显示这段临时代码的结果：
- en: '![Figure 5.7 – Result displayed with our startup code'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.7 – 使用我们的启动代码显示的结果'
- en: '](img/Figure_5.07_B17416.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.07_B17416.jpg)'
- en: Figure 5.7 – Result displayed with our startup code
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 使用我们的启动代码显示的结果
- en: In *Figure 5.7*, we see the rendering of the `<GlobalApp>` component, which
    currently only displays the **Add Element** button. Let’s see how to process a
    click on this button in order to insert a new element in the list.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 5.7* 中，我们看到 `<GlobalApp>` 组件的渲染，该组件目前仅显示 **添加元素** 按钮。让我们看看如何处理对该按钮的点击，以便在列表中插入新元素。
- en: Adding an element to the list
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向列表中添加元素
- en: We will start with the functionality to add an item to the list. The `global-app.js`
    file is modified to process a click on the `global-app.js` file).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从向列表中添加项的功能开始。`global-app.js` 文件被修改以处理对 `global-app.js` 文件的点击）。
- en: 'Let’s add the code that should be run when the **Add Element** button is clicked:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加当点击**添加元素**按钮时应运行的代码：
- en: Taking into account the click on the Add Element button (global-app.js file)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到点击“添加元素”按钮（global-app.js 文件）
- en: '[PRE44]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: A click on the `click` event, which calls the `add()` method defined in the
    `methods` section. The `add()` method adds a new element to the reactive variable
    `elements`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 `click` 事件，该事件调用在 `methods` 部分定义的 `add()` 方法。`add()` 方法将新元素添加到响应式变量 `elements`。
- en: The list of elements is updated in the component template. For the moment, we’ll
    use the `<li>` tag to define the list element to insert, but below, we will use
    the `<Element>` component, which will integrate the **Remove** and **Modify**
    buttons.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 元素列表在组件模板中更新。目前，我们将使用 `<li>` 标签来定义要插入的列表元素，但下面，我们将使用 `<Element>` 组件，该组件将集成 **删除**
    和 **修改** 按钮。
- en: Now let’s verify that our modification of the `<GlobalApp>` component works.
    To do this, click several times on the **Add Element** button. List items are
    inserted with each click, as seen in the following figure.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们验证我们对 `<GlobalApp>` 组件的修改是否有效。为此，多次点击 **添加元素** 按钮。每次点击都会插入列表项，如以下图所示。
- en: '![Figure 5.8 – Add Element button clicks'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.8 – 添加元素按钮点击'
- en: '](img/Figure_5.08_B17416.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.08_B17416.jpg)'
- en: Figure 5.8 – Add Element button clicks
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 添加元素按钮点击
- en: The element inserted here is an HTML `<li>` element. But it is interesting to
    replace the element `<li>` with a Vue.js component because it allows using the
    philosophy of Vue.js, which is the maximum use of components. Let’s name this
    new component `<Element>`, which will replace the `<li>` element..
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这里插入的元素是一个 HTML `<li>` 元素。但是，用 Vue.js 组件替换 `<li>` 元素很有趣，因为它允许使用 Vue.js 的哲学，即最大程度地使用组件。让我们将这个新组件命名为
    `<Element>`，它将替换 `<li>` 元素。
- en: Using the <Element> component
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 <Element> 组件
- en: Next, let’s use the `<Element>` component, instead of the previous `<li>` element.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们使用 `<Element>` 组件，而不是之前的 `<li>` 元素。
- en: 'The `<GlobalApp>` component is modified to integrate the `<Element>` component:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`<GlobalApp>` 组件被修改以集成 `<Element>` 组件：'
- en: Using <Element> component in list (global-app.js file)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表中使用 <Element> 组件（global-app.js 文件）
- en: '[PRE70]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: The text to display in the list item is passed as an attribute (via `props`)
    to the `<Element>` component, which will display it in its template. We use the
    `text` attribute (or any other attribute name) for this.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要在列表项中显示的文本作为属性（通过 `props`）传递给 `<Element>` 组件，该组件将在其模板中显示它。我们使用 `text` 属性（或任何其他属性名称）来做到这一点。
- en: 'The `<Element>` component is modified to consider the `text` attribute passed
    and display the list element. The two buttons **Remove** and **Modify** are inserted
    after the text:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Element>` 组件被修改以考虑传递的 `text` 属性并显示列表元素。在文本之后插入两个按钮 **删除** 和 **修改**：'
- en: Using the text attribute and buttons (element.js file)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文本属性和按钮（element.js 文件）
- en: '[PRE96]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Let’s check that the result is equivalent to the previous one (with the addition
    of the **Remove** and **Modify** buttons).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查结果是否与之前的结果相同（添加了 **删除** 和 **修改** 按钮）。
- en: '![Figure 5.9 – Using the <Element> component in the list'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.9 – 在列表中使用 <Element> 组件'
- en: '](img/Figure_5.09_B17416.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.09_B17416.jpg)'
- en: Figure 5.9 – Using the <Element> component in the list
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 在列表中使用 <Element> 组件
- en: Clicking on the **Remove** and **Modify** buttons in the list does not work
    yet but will soon, in the following sections.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 点击列表中的 **移除** 和 **修改** 按钮目前不起作用，但将在接下来的章节中实现。
- en: The **Remove** and **Modify** buttons are placed side by side, with no spacing.
    Let’s add some CSS code to better lay them out on the screen.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**移除** 和 **修改** 按钮并排放置，没有间隔。让我们添加一些CSS代码来更好地在屏幕上布局它们。'
- en: Changing the appearance of the list using CSS code
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CSS代码更改列表的外观
- en: Before handling button clicks in the list, let’s use some CSS to display the
    list items in a nicer way.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理列表中的按钮点击之前，让我们使用一些CSS以更美观的方式显示列表项。
- en: 'The CSS code is indicated directly in the `index.html` file:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: CSS代码直接在 `index.html` 文件中指示：
- en: Using CSS code to display the list (index.html file)
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CSS代码显示列表（index.html 文件）
- en: '[PRE111]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: We can see that the appearance of the list is now more pleasant.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，列表的外观现在更加令人愉悦。
- en: '![Figure 5.10 – List of elements improved with CSS code'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.10 – 使用CSS代码改进的元素列表'
- en: '](img/Figure_5.10_B17416.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.10_B17416.jpg)'
- en: Figure 5.10 – List of elements improved with CSS code
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10 – 使用CSS代码改进的元素列表
- en: The displayed list now has a look that suits us! We must now manage clicks on
    the **Remove** and **Modify** buttons. Let’s start with the **Remove** button.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的列表现在有了我们想要的样式！我们现在必须管理对 **移除** 和 **修改** 按钮的点击。让我们从 **移除** 按钮开始。
- en: Removing an element from the list
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从列表中删除元素
- en: Now let’s deal with a click on the `elements`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们处理对 `elements` 的点击。
- en: Note
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Indeed, the variable `elements` being reactive, any modification of this variable
    will lead to the re-display of the list.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，变量 `elements` 是响应式的，任何对这个变量的修改都将导致列表的重新显示。
- en: 'To do this, a click on the `remove()` method defined in the `<Element>` component
    on each click:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，在每次点击时，在 `<Element>` 组件中定义的 `remove()` 方法上点击：
- en: Taking into account the click on the Remove button (element.js file)
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到对移除按钮的点击（element.js 文件）
- en: '[PRE138]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: The process involved in clicking on the **Remove** button is discussed later
    in the chapter.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章后面将讨论点击 **移除** 按钮涉及的过程。
- en: Note
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To process the click on the `elements`, but since this is located in the parent
    component `<GlobalApp>`, we must send an event to this parent component to ask
    it to remove the element in the variable `elements`.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理对 `elements` 的点击，但由于这位于父组件 `<GlobalApp>` 中，我们必须向这个父组件发送一个事件，请求它从变量 `elements`
    中移除元素。
- en: To indicate the element to be deleted, it must be referenced by its index. For
    this, we need to indicate the index of the element when creating the `<Element>`
    component. We, therefore, create a new attribute (named `"index"`) in this component.
    Thus the `remove()` method sends a `"remove"` event to the `<GlobalApp>` parent
    component, indicating in the parameters the index of the element to be removed
    from the list.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 要指明要删除的元素，必须通过其索引来引用。为此，我们需要在创建 `<Element>` 组件时指明元素的索引。因此，我们在这个组件中创建了一个新的属性（命名为
    `"index"`）。因此，`remove()` 方法向 `<GlobalApp>` 父组件发送一个 `"remove"` 事件，在参数中指明要从列表中删除的元素的索引。
- en: 'The `<Element>` component becomes as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Element>` 组件变为以下形式：'
- en: Handling the click on the Remove button (element.js file)
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 处理移除按钮的点击（element.js 文件）
- en: '[PRE158]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: 'The `<GlobalApp>` component is modified to process the reception of the `"remove"`
    event sent when clicking on the **Remove** button:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`<GlobalApp>` 组件被修改以处理接收当点击 **移除** 按钮时发送的 `"remove"` 事件：'
- en: Handling the reception of the “remove” event (global-app.js file)
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 处理“remove”事件的接收（global-app.js 文件）
- en: '[PRE180]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: We have indicated in the `<Element>` component the new attribute `index`, which
    will allow knowing the index of the element in the list.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `<Element>` 组件中指出了新的属性 `index`，这将允许知道元素在列表中的索引。
- en: 'Let’s add three items to the list (see *Figure 5.11*), then click the **Remove**
    button for the item on the second line (see *Figure 5.12*):'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在列表中添加三个项目（见 *图5.11*），然后点击第二行的 **移除** 按钮见 *图5.12*）：
- en: '![Figure 5.11 – Adding three elements to the list'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.11 – 向列表中添加三个元素'
- en: '](img/Figure_5.11_B17416.jpg)'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.11_B17416.jpg)'
- en: Figure 5.11 – Adding three elements to the list
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11 – 向列表中添加三个元素
- en: 'Here’s what we will see after clicking the **Remove** button:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **移除** 按钮后，我们将看到以下内容：
- en: '![Figure 5.12 – Deleting item Element 2 from the list'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.12 – 从列表中删除元素2'
- en: '](img/Figure_5.12_B17416.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.12_B17416.jpg)'
- en: Figure 5.12 – Deleting item Element 2 from the list
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.12 – 从列表中删除元素2
- en: By clicking on the **Remove** button, **Element 2** has been removed from the
    list. Let’s now see how to manage the modification of an element, following a
    click on the **Modify** button.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击 **删除** 按钮，**元素 2** 已从列表中删除。现在让我们看看如何通过点击 **修改** 按钮来管理元素的修改。
- en: Modifying an element in the list
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改列表中的元素
- en: 'Modifying a list element is done in several steps:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 修改列表元素分为几个步骤：
- en: Following a click on the `<span>` element) into an HTML `<input>` element initialized
    with the text of the element.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `<span>` 元素后) 转换为初始化为元素文本的 HTML `<input>` 元素。
- en: Then we manage the exit of the input field, by retrieving the value entered
    in the field, then by replacing the input field with a `<span>` element with the
    new content.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们处理输入字段的退出，通过检索字段中输入的值，然后通过用包含新内容的 `<span>` 元素替换输入字段来处理。
- en: Finally, we improve the input by allowing the input control to automatically
    have the focus after clicking on the **Modify** button.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们通过允许输入控件在点击 **修改** 按钮后自动获得焦点来改进输入。
- en: Let’s see these different steps in depth.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨这些不同的步骤。
- en: Transforming the <span> element into an <input> element
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 <span> 元素转换为 <input> 元素
- en: 'The first step is to transform the `<span>` element into an `<input>` element,
    which will allow the text of the element to be modified. To do this, we will add
    a new reactive variable (named `"input"`) in the `<Element>` component. It indicates
    whether to display a text as a `<span>` element (if `input` is `false`) or whether
    to display an `<input>` input field (if `input` is `true`). By default, the `input`
    variable is set to `false` (the text is displayed). It will change to `true` when
    clicking on the **Modify** button:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将 `<span>` 元素转换为 `<input>` 元素，这将允许修改元素的文本。为此，我们将在 `<Element>` 组件中添加一个新的响应式变量（命名为
    `"input"`）。它表示是否将文本显示为 `<span>` 元素（如果 `input` 为 `false`）或者是否显示 `<input>` 输入字段（如果
    `input` 为 `true`）。默认情况下，`input` 变量设置为 `false`（文本显示）。当点击 **修改** 按钮时，它将变为 `true`：
- en: Turning a <span> element into an <input> element (element.js file)
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 将 <span> 元素转换为 <input> 元素（element.js 文件）
- en: '[PRE214]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: Note
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `v-if` and `v-else` directives are used to display the text of the element
    as a `<span>` element or as an `<input>` element.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `v-if` 和 `v-else` 指令来显示元素的文本作为 `<span>` 元素或 `<input>` 元素。
- en: 'After inserting three items into the list, let’s edit the second item:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在向列表中插入三个项目后，让我们编辑第二个项目：
- en: '![Figure 5.13 – Editing the second item in the list'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.13 – 编辑列表中的第二个项目'
- en: '](img/Figure_5.13_B17416.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.13_B17416.jpg)'
- en: Figure 5.13 – Editing the second item in the list
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – 编辑列表中的第二个项目
- en: We now need to show how to leave the input field and redisplay the text as a
    list element.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要展示如何离开输入字段并重新显示文本作为列表元素。
- en: Exiting from the input field
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 离开输入字段
- en: Once the edit control has been modified, you must retrieve the value entered
    to display it instead of the edit control. To do this, in the `<Element>` component,
    we use the `blur` event, which indicates that we have left the input field.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编辑控件被修改，必须检索输入的值以显示它而不是编辑控件。为此，在 `<Element>` 组件中，我们使用 `blur` 事件，这表示我们已经离开了输入字段。
- en: During the processing of this event, the value of the input field is retrieved,
    which is transmitted to the parent `<GlobalApp>` component by means of an event
    named `"modify"`, for example. The `<GlobalApp>` component modifies the element
    value in the `elements` variable when processing the received `modify` event.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理此事件的过程中，检索输入字段的值，通过名为 `"modify"` 的事件将其传输给父 `<GlobalApp>` 组件，例如。当处理接收到的 `modify`
    事件时，`<GlobalApp>` 组件在 `elements` 变量中修改元素值。
- en: Note
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The modification of a reactive variable located in a parent component must be
    done by sending an event to the parent component, which will have to process it.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在父组件中定位的响应式变量的修改必须通过向父组件发送一个事件来完成，父组件将需要处理该事件。
- en: Finally, the transformation of the input field into text is done by modifying
    the reactive variable `input` defined in the `<Element>` component by positioning
    it again to `false`.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过在 `<Element>` 组件中重新定位响应式变量 `input` 到 `false`，将输入字段转换为文本。
- en: 'The `<Element>` component is modified as shown here:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Element>` 组件的修改方式如下所示：'
- en: Taking into account the output of the input field (element.js file)
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到输入字段的输出（element.js 文件）
- en: '[PRE238]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: 'The `<GlobalApp>` component is also modified to process the reception of the
    `"modify"` event and thus modify the list displayed:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '`<GlobalApp>` 组件也被修改，以处理接收 `"modify"` 事件并因此修改显示的列表：'
- en: Processing the modify event (global-app.js file)
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 处理修改事件（global-app.js文件）
- en: '[PRE270]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: The following figure shows the result after editing the second list item.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了编辑第二个列表项后的结果。
- en: '![Figure 5.14 – Editing a list item'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 5.14 – 编辑列表项'
- en: '](img/Figure_5.14_B17416.jpg)'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 5.14 – Editing a list item](img/Figure_5.14_B17416.jpg)'
- en: Figure 5.14 – Editing a list item
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 5.14 – 编辑列表项
- en: A final improvement that we can make to our program is to give focus to the
    input field directly after clicking on the **Modify** button. Let’s see how to
    proceed.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对程序进行的最后一次改进是在点击**修改**按钮后直接将焦点放在输入字段上。让我们看看如何进行。
- en: Giving focus to the input field
  id: totrans-463
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将焦点放在输入字段上
- en: Giving focus to the input field requires using the `focus()` method, which is
    defined in the **Document Object Model** (**DOM**). The DOM is an internal API
    (in the JavaScript language) implemented in browsers.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 将焦点放在输入字段需要使用定义在**文档对象模型**（**DOM**）中的`focus()`方法。DOM是在浏览器中实现的JavaScript语言中的内部API。
- en: Vue.js makes it possible to make a relationship between the components defined
    in Vue.js and the HTML elements used by the DOM. For this, we use the `ref` attribute,
    which makes it possible to make a correspondence between the two systems.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js使得可以在Vue.js定义的组件和DOM使用的HTML元素之间建立关系。为此，我们使用`ref`属性，它使得这两个系统之间可以建立对应关系。
- en: Note
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This `ref` attribute can be used for each HTML element defined in our component
    templates. But it should be used only for necessary cases, such as here, to use
    the `focus()` method defined in the DOM, which otherwise would be inaccessible.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`ref`属性可以用于我们组件模板中定义的每个HTML元素。但应该仅在必要的情况下使用，例如在这里，使用DOM中定义的`focus()`方法，否则将无法访问。
- en: 'Once the `ref` attribute has been positioned (here, on the `<input>` element
    allowing input), all that remains is to use it to give focus to the input field.
    The question then is: in which method of our component should we call the `focus()`
    method?'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`ref`属性已经定位（在这里，是在允许输入的`<input>`元素上），剩下的就是使用它来将焦点放在输入字段上。那么问题是：我们应该在组件的哪个方法中调用`focus()`方法？
- en: We must use a method in which we are sure that the input field is created. The
    template written in the component must be transformed into HTML code and integrated
    into the memory of the browser (in the DOM), which can then display it. So, we
    see that a transformation process takes place, which takes some time to execute.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须使用一个确保输入字段已创建的方法。组件中编写的模板必须转换为HTML代码并集成到浏览器的内存中（在DOM中），然后才能显示。因此，我们看到有一个转换过程发生，这个过程需要一些时间来执行。
- en: Vue.js has defined a number of methods that are called automatically when using
    components. In the previous chapter, we saw a method called `created()`. There
    are other methods, in particular, the `mounted()` and `updated()` methods.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js定义了一系列方法，当使用组件时，这些方法会自动被调用。在上一章中，我们看到了一个名为`created()`的方法。还有其他方法，特别是`mounted()`和`updated()`方法。
- en: 'Here are the specifics of these three methods:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是这三个方法的具体细节：
- en: The `created()` method is called when creating the component. This is the first
    method called.
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当创建组件时，会调用`created()`方法。这是第一个被调用的方法。
- en: The `mounted()` method is called when the component is transformed into HTML
    elements and integrated into the DOM. We can therefore have access, in this method,
    to HTML elements with the DOM API.
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当组件转换为HTML元素并集成到DOM中时，会调用`mounted()`方法。因此，我们可以在这个方法中使用DOM API访问HTML元素。
- en: The `updated()` method is called when a modification is made in the component.
    For example, when a `<span>` element is replaced by an `<input>` element following
    a click on the `<input>` element turns back into a `<span>` element (when leaving
    the input field).
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当组件中发生修改时，会调用`updated()`方法。例如，当在`<input>`元素上点击后，该元素变为`<span>`元素（当离开输入字段时）。
- en: 'We see that the `updated()` method is the method in which we can do the processing
    giving focus to the input field. But as this method is called both when transforming
    into an input field or simple text, it will be necessary to check that the `<input>`
    element associated with the reference indicated in the `ref` attribute exists.
    Otherwise, an error visible in the console will occur:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，`updated()`方法是我们可以在其中执行将焦点放在输入字段上的处理的方法。但是，由于这个方法在转换为输入字段或简单文本时都会被调用，因此需要检查与`ref`属性中指示的引用相关联的`<input>`元素是否存在。否则，将在控制台中发生可见的错误：
- en: Giving focus to the input field as soon as it appears (element.js file)
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入字段出现时立即将其聚焦（element.js文件）
- en: '[PRE308]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: When using the `ref` attribute in a template, Vue.js stores it in the component’s
    internal `$refs` variable. We can therefore access the corresponding HTML element
    using `this.$refs.refInput` if we wrote `ref="refInput"` in the component template.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 当在模板中使用`ref`属性时，Vue.js将其存储在组件的内部`$refs`变量中。因此，如果我们在一个组件模板中写入了`ref="refInput"`，我们可以使用`this.$refs.refInput`来访问相应的HTML元素。
- en: Let’s check (see the following figure) that the edit control gets the focus
    directly when clicking on the **Modify** button.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查（见下图）当点击**修改**按钮时，编辑控件是否直接获得焦点。
- en: '![Figure 5.15 – The input field gets the focus directly'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.15 – 输入字段直接获得焦点'
- en: '](img/Figure_5.15_B17416.jpg)'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 5.15 – The input field gets the focus directly'
- en: Figure 5.15 – The input field gets the focus directly
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15 – 输入字段直接获得焦点
- en: This brings us to the end of the chapter.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 这章内容就到这里结束了。
- en: Summary
  id: totrans-519
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter and the example discussed in it shows that it is very easy to manage
    the elements of an HTML page interactively without leaving the page.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 本章以及其中讨论的示例表明，在不离开页面的情况下，交互式管理HTML页面上的元素是非常容易的。
- en: Here, we first decomposed the application into different components, then we
    assembled them, making them communicate through events and `props` attributes.
    We have learned, thanks to this complete example, how to manage a list of elements
    to carry out the main operations, which are the insertion, the modification, and
    the deletion of an element.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先将应用分解为不同的组件，然后我们将它们组装起来，通过事件和`props`属性使它们进行通信。通过这个完整的示例，我们学习了如何管理元素列表以执行主要操作，这些操作包括元素的插入、修改和删除。
- en: In the next few chapters, we will see how to use Node.js to connect our application
    to a MongoDB database and thus be able to store the elements of the list in a
    database. We will begin by learning how to work with node.js modules in the next
    chapter.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将看到如何使用Node.js将我们的应用程序连接到MongoDB数据库，从而能够将列表中的元素存储在数据库中。我们将在下一章学习如何与node.js模块一起工作。
