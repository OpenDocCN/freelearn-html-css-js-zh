- en: '*Chapter 5*: Managing a List with Vue.js'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After going through the basic and advanced concepts of Vue.js, with this chapter,
    let’s finish our study of the Vue.js library by building an application to manage
    a list of elements.
  prefs: []
  type: TYPE_NORMAL
- en: Why make this type of application? Quite simply because it allows you to perform
    fairly standard operations on the HTML elements of a page, such as inserting an
    element, modifying it, and deleting it.
  prefs: []
  type: TYPE_NORMAL
- en: These are the basic operations that you need to know how to perform, for example,
    to manage the elements in a database. In this chapter, we will learn how to perform
    these operations on the elements displayed on the screen, and in the next part
    (where we study Node.js and MongoDB), we will see how to simultaneously update
    a database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Splitting the application into components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an element to the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing an element from the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying an element in the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But let’s start by discovering the screens of the application that we want to
    create with Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the code files for this chapter on GitHub at: [https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%205.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%205.zip).'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying application screens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, we’ll be building an application to manage a list of elements.
    Before writing the source code of our application, let’s show the different screens
    of the application by explaining their sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Initially, the list is empty. The **Add Element** button allows, on each click,
    to insert a new element in the list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Screen when launching the application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.01_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Screen when launching the application
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s click the **Add Element** button several times (here, three times):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – After three clicks on the Add Element button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.02_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – After three clicks on the Add Element button
  prefs: []
  type: TYPE_NORMAL
- en: Each element inserted has the index (starting from 1) of the element in the
    list. A **Remove** button and a **Modify** button are inserted after the item
    in the list.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s click on the **Modify** button on the second line. The item text is replaced
    by an input field, in which the cursor flashes to allow editing.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – The second item in the list can be changed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.03_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – The second item in the list can be changed
  prefs: []
  type: TYPE_NORMAL
- en: Let’s modify the text in the input field, by typing `New Element 2`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Editing a list item'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.04_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – Editing a list item
  prefs: []
  type: TYPE_NORMAL
- en: For the modification of the element to be reflected, you must leave the input
    field, by clicking elsewhere on the page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Taking into account the modification of the element'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.05_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – Taking into account the modification of the element
  prefs: []
  type: TYPE_NORMAL
- en: Finally, to remove the first and third elements, click on their corresponding
    **Remove** buttons.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – After deleting the first and last element'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.06_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – After deleting the first and last element
  prefs: []
  type: TYPE_NORMAL
- en: We have administered here a list of elements on which we have performed basic
    operations, namely, inserting a new element, modifying the element, and deleting
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Using HTTP Protocol
  prefs: []
  type: TYPE_NORMAL
- en: This application uses a PHP server to work because the import of JavaScript
    modules with the JavaScript `import` statement only works under the HTTP protocol.
    We will see in the next part ([*Chapter 9*](B17416_09_ePub.xhtml#_idTextAnchor165)*,
    Integrating Vue.js with Node.js*) how to use a Node.js server to also make it
    work, by coupling it in addition with a MongoDB database.
  prefs: []
  type: TYPE_NORMAL
- en: We have described the operation of the application, and the sequence of the
    various windows. Now let’s see how to build this application with Vue.js. We first
    explain how the application can be broken down into different components.
  prefs: []
  type: TYPE_NORMAL
- en: Splitting the application into components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create an application with Vue.js, you have to start by asking yourself
    what components you will need to build it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, it would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A `<GlobalApp>` component that groups the whole application. It is this `<GlobalApp>`
    component that will be integrated into our `index.html` page. It will display
    the **Add Element** button as well as the list of elements below.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `<Element>` component that displays a list element line, which will include
    the element’s text, the **Remove** button, and the **Modify** button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list of elements will be associated with a reactive variable named `elements`,
    which will be an array containing, for each element, the displayed text. This
    reactive variable will be registered in the `<GlobalApp>` component. It will be
    modified when adding a new element to the list or when deleting or modifying an
    element in the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the core files of our app are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `index.html` file, which is the main file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `global-app.js` file, which contains the `<GlobalApp>` component, and is
    imported into the `index.html` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `element.js` file, which describes an element of the displayed list (the
    `<Element>` component), namely the text of the element, as well as the **Remove**
    and **Modify** buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the content of these files:'
  prefs: []
  type: TYPE_NORMAL
- en: index.html file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `index.html` file displays the `<GlobalApp>` component, which corresponds
    to the main component of the application, which we’ll now describe:'
  prefs: []
  type: TYPE_NORMAL
- en: <GlobalApp> component (global-app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: We find the reactive variable `elements`, as well as the `<ul>` list of elements,
    empty for the moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<Element>` component is described below. It is empty for the moment and
    will be enriched in the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: <Element> component (element.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Using HTTP Protocol
  prefs: []
  type: TYPE_NORMAL
- en: As the JavaScript code comprises module `import` instructions, it is necessary
    to use a web server accessible by HTTP to display the HTML page corresponding
    to `index.html`. The `file` protocol would not work here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s display the result of this temporary code on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Result displayed with our startup code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.07_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.7 – Result displayed with our startup code
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 5.7*, we see the rendering of the `<GlobalApp>` component, which
    currently only displays the **Add Element** button. Let’s see how to process a
    click on this button in order to insert a new element in the list.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an element to the list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start with the functionality to add an item to the list. The `global-app.js`
    file is modified to process a click on the `global-app.js` file).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add the code that should be run when the **Add Element** button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: Taking into account the click on the Add Element button (global-app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: A click on the `click` event, which calls the `add()` method defined in the
    `methods` section. The `add()` method adds a new element to the reactive variable
    `elements`.
  prefs: []
  type: TYPE_NORMAL
- en: The list of elements is updated in the component template. For the moment, we’ll
    use the `<li>` tag to define the list element to insert, but below, we will use
    the `<Element>` component, which will integrate the **Remove** and **Modify**
    buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s verify that our modification of the `<GlobalApp>` component works.
    To do this, click several times on the **Add Element** button. List items are
    inserted with each click, as seen in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Add Element button clicks'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.08_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.8 – Add Element button clicks
  prefs: []
  type: TYPE_NORMAL
- en: The element inserted here is an HTML `<li>` element. But it is interesting to
    replace the element `<li>` with a Vue.js component because it allows using the
    philosophy of Vue.js, which is the maximum use of components. Let’s name this
    new component `<Element>`, which will replace the `<li>` element..
  prefs: []
  type: TYPE_NORMAL
- en: Using the <Element> component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, let’s use the `<Element>` component, instead of the previous `<li>` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<GlobalApp>` component is modified to integrate the `<Element>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Using <Element> component in list (global-app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: The text to display in the list item is passed as an attribute (via `props`)
    to the `<Element>` component, which will display it in its template. We use the
    `text` attribute (or any other attribute name) for this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<Element>` component is modified to consider the `text` attribute passed
    and display the list element. The two buttons **Remove** and **Modify** are inserted
    after the text:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the text attribute and buttons (element.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Let’s check that the result is equivalent to the previous one (with the addition
    of the **Remove** and **Modify** buttons).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Using the <Element> component in the list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.09_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.9 – Using the <Element> component in the list
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the **Remove** and **Modify** buttons in the list does not work
    yet but will soon, in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: The **Remove** and **Modify** buttons are placed side by side, with no spacing.
    Let’s add some CSS code to better lay them out on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the appearance of the list using CSS code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before handling button clicks in the list, let’s use some CSS to display the
    list items in a nicer way.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CSS code is indicated directly in the `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: Using CSS code to display the list (index.html file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the appearance of the list is now more pleasant.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – List of elements improved with CSS code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.10_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.10 – List of elements improved with CSS code
  prefs: []
  type: TYPE_NORMAL
- en: The displayed list now has a look that suits us! We must now manage clicks on
    the **Remove** and **Modify** buttons. Let’s start with the **Remove** button.
  prefs: []
  type: TYPE_NORMAL
- en: Removing an element from the list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let’s deal with a click on the `elements`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, the variable `elements` being reactive, any modification of this variable
    will lead to the re-display of the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, a click on the `remove()` method defined in the `<Element>` component
    on each click:'
  prefs: []
  type: TYPE_NORMAL
- en: Taking into account the click on the Remove button (element.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: The process involved in clicking on the **Remove** button is discussed later
    in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To process the click on the `elements`, but since this is located in the parent
    component `<GlobalApp>`, we must send an event to this parent component to ask
    it to remove the element in the variable `elements`.
  prefs: []
  type: TYPE_NORMAL
- en: To indicate the element to be deleted, it must be referenced by its index. For
    this, we need to indicate the index of the element when creating the `<Element>`
    component. We, therefore, create a new attribute (named `"index"`) in this component.
    Thus the `remove()` method sends a `"remove"` event to the `<GlobalApp>` parent
    component, indicating in the parameters the index of the element to be removed
    from the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<Element>` component becomes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Handling the click on the Remove button (element.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: 'The `<GlobalApp>` component is modified to process the reception of the `"remove"`
    event sent when clicking on the **Remove** button:'
  prefs: []
  type: TYPE_NORMAL
- en: Handling the reception of the “remove” event (global-app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: We have indicated in the `<Element>` component the new attribute `index`, which
    will allow knowing the index of the element in the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add three items to the list (see *Figure 5.11*), then click the **Remove**
    button for the item on the second line (see *Figure 5.12*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Adding three elements to the list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.11_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.11 – Adding three elements to the list
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what we will see after clicking the **Remove** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Deleting item Element 2 from the list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.12_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.12 – Deleting item Element 2 from the list
  prefs: []
  type: TYPE_NORMAL
- en: By clicking on the **Remove** button, **Element 2** has been removed from the
    list. Let’s now see how to manage the modification of an element, following a
    click on the **Modify** button.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying an element in the list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Modifying a list element is done in several steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Following a click on the `<span>` element) into an HTML `<input>` element initialized
    with the text of the element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we manage the exit of the input field, by retrieving the value entered
    in the field, then by replacing the input field with a `<span>` element with the
    new content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we improve the input by allowing the input control to automatically
    have the focus after clicking on the **Modify** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s see these different steps in depth.
  prefs: []
  type: TYPE_NORMAL
- en: Transforming the <span> element into an <input> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to transform the `<span>` element into an `<input>` element,
    which will allow the text of the element to be modified. To do this, we will add
    a new reactive variable (named `"input"`) in the `<Element>` component. It indicates
    whether to display a text as a `<span>` element (if `input` is `false`) or whether
    to display an `<input>` input field (if `input` is `true`). By default, the `input`
    variable is set to `false` (the text is displayed). It will change to `true` when
    clicking on the **Modify** button:'
  prefs: []
  type: TYPE_NORMAL
- en: Turning a <span> element into an <input> element (element.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `v-if` and `v-else` directives are used to display the text of the element
    as a `<span>` element or as an `<input>` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'After inserting three items into the list, let’s edit the second item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Editing the second item in the list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.13_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.13 – Editing the second item in the list
  prefs: []
  type: TYPE_NORMAL
- en: We now need to show how to leave the input field and redisplay the text as a
    list element.
  prefs: []
  type: TYPE_NORMAL
- en: Exiting from the input field
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the edit control has been modified, you must retrieve the value entered
    to display it instead of the edit control. To do this, in the `<Element>` component,
    we use the `blur` event, which indicates that we have left the input field.
  prefs: []
  type: TYPE_NORMAL
- en: During the processing of this event, the value of the input field is retrieved,
    which is transmitted to the parent `<GlobalApp>` component by means of an event
    named `"modify"`, for example. The `<GlobalApp>` component modifies the element
    value in the `elements` variable when processing the received `modify` event.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The modification of a reactive variable located in a parent component must be
    done by sending an event to the parent component, which will have to process it.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the transformation of the input field into text is done by modifying
    the reactive variable `input` defined in the `<Element>` component by positioning
    it again to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<Element>` component is modified as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: Taking into account the output of the input field (element.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: 'The `<GlobalApp>` component is also modified to process the reception of the
    `"modify"` event and thus modify the list displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: Processing the modify event (global-app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: The following figure shows the result after editing the second list item.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Editing a list item'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.14_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.14 – Editing a list item
  prefs: []
  type: TYPE_NORMAL
- en: A final improvement that we can make to our program is to give focus to the
    input field directly after clicking on the **Modify** button. Let’s see how to
    proceed.
  prefs: []
  type: TYPE_NORMAL
- en: Giving focus to the input field
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Giving focus to the input field requires using the `focus()` method, which is
    defined in the **Document Object Model** (**DOM**). The DOM is an internal API
    (in the JavaScript language) implemented in browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js makes it possible to make a relationship between the components defined
    in Vue.js and the HTML elements used by the DOM. For this, we use the `ref` attribute,
    which makes it possible to make a correspondence between the two systems.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This `ref` attribute can be used for each HTML element defined in our component
    templates. But it should be used only for necessary cases, such as here, to use
    the `focus()` method defined in the DOM, which otherwise would be inaccessible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the `ref` attribute has been positioned (here, on the `<input>` element
    allowing input), all that remains is to use it to give focus to the input field.
    The question then is: in which method of our component should we call the `focus()`
    method?'
  prefs: []
  type: TYPE_NORMAL
- en: We must use a method in which we are sure that the input field is created. The
    template written in the component must be transformed into HTML code and integrated
    into the memory of the browser (in the DOM), which can then display it. So, we
    see that a transformation process takes place, which takes some time to execute.
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js has defined a number of methods that are called automatically when using
    components. In the previous chapter, we saw a method called `created()`. There
    are other methods, in particular, the `mounted()` and `updated()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the specifics of these three methods:'
  prefs: []
  type: TYPE_NORMAL
- en: The `created()` method is called when creating the component. This is the first
    method called.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `mounted()` method is called when the component is transformed into HTML
    elements and integrated into the DOM. We can therefore have access, in this method,
    to HTML elements with the DOM API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `updated()` method is called when a modification is made in the component.
    For example, when a `<span>` element is replaced by an `<input>` element following
    a click on the `<input>` element turns back into a `<span>` element (when leaving
    the input field).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We see that the `updated()` method is the method in which we can do the processing
    giving focus to the input field. But as this method is called both when transforming
    into an input field or simple text, it will be necessary to check that the `<input>`
    element associated with the reference indicated in the `ref` attribute exists.
    Otherwise, an error visible in the console will occur:'
  prefs: []
  type: TYPE_NORMAL
- en: Giving focus to the input field as soon as it appears (element.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: When using the `ref` attribute in a template, Vue.js stores it in the component’s
    internal `$refs` variable. We can therefore access the corresponding HTML element
    using `this.$refs.refInput` if we wrote `ref="refInput"` in the component template.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s check (see the following figure) that the edit control gets the focus
    directly when clicking on the **Modify** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – The input field gets the focus directly'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.15_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.15 – The input field gets the focus directly
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter and the example discussed in it shows that it is very easy to manage
    the elements of an HTML page interactively without leaving the page.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we first decomposed the application into different components, then we
    assembled them, making them communicate through events and `props` attributes.
    We have learned, thanks to this complete example, how to manage a list of elements
    to carry out the main operations, which are the insertion, the modification, and
    the deletion of an element.
  prefs: []
  type: TYPE_NORMAL
- en: In the next few chapters, we will see how to use Node.js to connect our application
    to a MongoDB database and thus be able to store the elements of the list in a
    database. We will begin by learning how to work with node.js modules in the next
    chapter.
  prefs: []
  type: TYPE_NORMAL
