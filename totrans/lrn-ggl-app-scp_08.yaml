- en: Chapter 8. Building a Workflow Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned to create interactive web pages using `ContentService`,
    `HtmlService`, `doGet`, and `doPost` functions. You also built RSS feed and timesheet
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: To create a workflow application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The workflow involved in an order processing system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Google Sheet holds all data, needed to create a workflow application, on various
    steps. It acts as the backbone of the order processing system.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While working on published web applications, keep in mind that the following
    script code versions are independent of each other:'
  prefs: []
  type: TYPE_NORMAL
- en: The already saved versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The published version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last saved codes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So remember to publish the App every time you make updates to the code.
  prefs: []
  type: TYPE_NORMAL
- en: Order processing workflow – steps explained
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the steps involved in the order processing workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: The user opens an online form and sends an order by mentioning the item, quantity,
    delivery address, and mode of payment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Google Sheet sends a confirmation e-mail to both the **User** and **Accounts**
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Accounts** section verifies the payment and forwards it to the **Order
    Processing** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Order Processing** section dispatches the order to the delivery address
    and updates shipment details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user confirms the delivery.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also refer to the pictorial representation of these steps in the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Order processing workflow – steps explained](img/B05010_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring Google Sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Various forms, e-mails, and their components are explained here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'User form:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Item
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit price
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantity
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Total price (calculated)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivery address
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Phone
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: E-mail
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Payment details
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Upon the order submission, the script sends confirmation e-mails to both the
    **User** and **Accounts** section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Confirmation e-mail to the user:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order number
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Item
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit price
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantity
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Total price
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivery address
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Phone number
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Payment details
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'E-mail to the **Accounts** section:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is same as the user confirmation e-mail; however, an additional link to the
    dispatch form is included.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: On receiving order e-mails, the **Accounts** section verifies if the payment
    details are okay, and then forwards that e-mail to the **Order Processing** section.
    The **Order Processing**/**Dispatch** section clicks on the link to open the dispatch
    form, fills in shipment details, and submits the form.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The dispatch form:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order number
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Item
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantity
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivery address
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Shipment details
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: On the dispatch form submission, the script updates shipment details in the
    spreadsheet and sends a dispatch notification e-mail to the user.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Post-dispatch e-mail to the user:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order number
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivery address
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Shipment details
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Acknowledge the delivery (link)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The user clicks on the acknowledgement link, and then the script updates the
    delivery date corresponding to the order number row in the spreadsheet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, create a new Google Sheet with two Sheets/tabs named `Orders` and `Stock`.
    Format the `Orders` Sheet column headers as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Google Sheets](img/B05010_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Format the `Stock` Sheet columns and populate the test data in it as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Google Sheets](img/B05010_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The items and corresponding unit prices will be populated in the `Orders` form.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Order form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `Code.gs` file, define the following global variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `doGet` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding function returns the `Order` form from the `Order.html` template.
    Create a new HTML file named `Order` and enter the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Publish the script using the following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the app as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Me** (your e-mail ID)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Who has access to the app:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Anyone, even anonymous**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on the **Deploy** button, authorize if asked. The rendered application
    will be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Order form](img/B05010_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This form is a basic one and not fancy. The item's selections are hard coded;
    only five fixed items. The user may not know the items which are currently available
    with the supplier, any new items that have been added to the list, or the current
    unit price for each item. Above all, we did not add any functionality to the **Submit**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing the Order form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To enhance the `Order` form, update the `doGet` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The price list is assigned to the template as a 2-dimensional array and is
    returned by the function shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Order.html` file, update the `select` tag markup as shown in this code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The drop-down items will reflect whatever is included or updated in the `Stock`
    Sheet. The default item will be the top-most or the first item in the list. So
    we have to put a default unit price for that item. Hence, update the **Unit price**
    input field as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `Order` form users are not going to enter the unit price, so it can be read
    only. We set default value for `quantity` as `1` and the default value for the
    total price as the unit price.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `body` tag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `select` element, we need an `onchange` event handler so that, if the
    user selects any item, the corresponding unit price should be retrieved from the
    spreadsheet and displayed in the **Unit price** input field. At the same time,
    the total price should be calculated as per quantity and unit price. Add script
    handlers along with the CSS style sheet in the `head` element. Update the code
    for the `head` tag as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `getPrice` server function needs to recognize the selected item index as
    an argument, so we will update it as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, this function works when called from the `doGet` function as well as from
    the preceding HTML client code. When called from the `doGet` function, it returns
    the complete price list, otherwise just the unit price of a selected item.
  prefs: []
  type: TYPE_NORMAL
- en: 'This helper function validates an e-mail. Returns `true` if valid otherwise
    `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add a form submission handler function (`postOrder`). If the order is
    placed, then this handler should update the spreadsheet and send an e-mail confirmation
    to the user as well as to the **Accounts** department:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember to publish the script again with a new version. Now, the form should
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enhancing the Order form](img/B05010_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The sample submitted data in the spreadsheet looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enhancing the Order form](img/B05010_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The sample content of the user e-mail looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enhancing the Order form](img/B05010_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The only difference of the e-mail content to the **Accounts** section is an
    additional link (which you can see in the sample e-mail content screenshot as
    follows) of the dispatch form (we will create this form next).
  prefs: []
  type: TYPE_NORMAL
- en: '![Enhancing the Order form](img/B05010_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Up to this point, what we have set up is:'
  prefs: []
  type: TYPE_NORMAL
- en: The user can submit the `Order` form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Script appends the submitted data to the spreadsheet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Script sends confirmation e-mails both to the user and the **Accounts** department
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the dispatch form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned earlier, we will create the dispatch form now. Create a new HTML
    file named as `Dispatch` and enter the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The script handlers are a subset of the `Order` form handlers, and most of
    the HTML elements are read-only, except the shipment details. The dispatch form
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the dispatch form](img/B05010_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can use only one `doGet` function in a script project or web application,
    but we have to use two forms with the same published URL. How can we open two
    different forms with the same published URL?
  prefs: []
  type: TYPE_NORMAL
- en: 'You remember that we appended the order number to the published URL in the
    `postOrder` handler. An example of the dispatch URL with the order number as a
    query string will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The preceding URL is nothing but the published URL with the order number appended
    as a query string.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will update the `doGet` function to parse this query string. If the order
    number is present, then return the dispatch form; otherwise, return the `Order`
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, the `doGet` function can handle both situations.
  prefs: []
  type: TYPE_NORMAL
- en: Dispatching the articles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As soon as the dispatch person enters the shipment details in the dispatch
    form and submits it, the script should update the shipment details in the spreadsheet
    and should send a notification e-mail to the user. So, we will add the `dispatchOrder`
    server function to handle these tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'A sample dispatch notification e-mail content is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dispatching the articles](img/B05010_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enabling the user to acknowledge the article delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the user receives the items, then he/she clicks on the link to acknowledge.
    The same published URL is used this time too with an additional delivered query
    string.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To handle this query, the `doGet` function should be updated again as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Another handler, the `updateDelivery` function, should be added as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This function updates the current date as the delivered date. A sample spreadsheet
    with the `Delivered on` column updated is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling the user to acknowledge the article delivery](img/B05010_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You have created a full-blown, real-world order processing
    workflow application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned and created a useful real-world order processing
    application. In the next chapter, you will learn to overcome script in maximum
    execution time and learn to use script code from other script files or libraries
    including OAuth library. You will also learn to create add-ons.
  prefs: []
  type: TYPE_NORMAL
