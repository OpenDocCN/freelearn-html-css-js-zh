["```js\n$ ionic start LazyLoading blank\n$ cd LazyLoading\n```", "```js\nimport { NgModule } from \"@angular/core\";\nimport { IonicPageModule } from \"ionic-angular\";\nimport { HomePage } from \"./home\";\n@NgModule({\n declarations: [HomePage],\n imports: [IonicPageModule.forChild(HomePage)]\n})\nexport class HomePageModule {}\n```", "```js\nimport { Component } from \"@angular/core\";\nimport { NavController, IonicPage } from \"ionic-angular\";\n\n@IonicPage()\n@Component({\n  selector: \"page-home\",\n  templateUrl: \"home.html\"\n})\nexport class HomePage {\n  constructor(public navCtrl: NavController) {}\n}\n```", "```js\nimport { Component } from \"@angular/core\";\nimport { IonicPage, NavController, NavParams } from \"ionic-angular\";\n\n@IonicPage()\n@Component({\n  selector: \"page-second\",\n  templateUrl: \"second.html\"\n})\nexport class SecondPage {\n  constructor(public navCtrl: NavController, public navParams: NavParams) {}\n}\n```", "```js\n<ion-header>\n  <ion-navbar>\n    <ion-title>Second</ion-title>\n  </ion-navbar>\n</ion-header>\n\n<ion-content padding>\n</ion-content>\n```", "```js\nimport { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { SecondPage } from './second';\n\n@NgModule({\n  declarations: [\n    SecondPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(SecondPage),\n  ],\n})\nexport class SecondPageModule {}\n```", "```js\nrootPage: any = \"HomePage\";\n```", "```js\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { ErrorHandler, NgModule } from \"@angular/core\";\nimport { IonicApp, IonicErrorHandler, IonicModule } from \"ionic-angular\";\nimport { SplashScreen } from \"@ionic-native/splash-screen\";\nimport { StatusBar } from \"@ionic-native/status-bar\";\n\nimport { MyApp } from \"./app.component\";\n\n@NgModule({\n  declarations: [MyApp],\n  imports: [BrowserModule, IonicModule.forRoot(MyApp)],\n  bootstrap: [IonicApp],\n  entryComponents: [MyApp],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    { provide: ErrorHandler, useClass: IonicErrorHandler }\n  ]\n})\nexport class AppModule {}\n```", "```js\n$ ionic serve\n```", "```js\nimport { NgModule } from \"@angular/core\";\nimport { IonicPageModule } from \"ionic-angular\";\nimport { HomePage } from \"./home\";\n@NgModule({\n declarations: [HomePage],\n imports: [IonicPageModule.forChild(HomePage)]\n})\nexport class HomePageModule {}\n```", "```js\n...\nimport { IonicPage } from 'ionic-angular';\n\n@IonicPage()\n@Component({..})\nexport class HomePage {}\n```", "```js\n$ ionic start TranslateApp blank\n$ cd TranslateApp\n```", "```js\nnpm install @ngx-translate/core @ngx-translate/http-loader --save\n```", "```js\n{\n  \"Hello\": \"Hello\",\n  \"Good Morning\": \"Good Morning\"\n}\n```", "```js\n{\n  \"Hello\": \"Hallo\",\n  \"Good Morning\": \"Guten Morgen\"\n}\n```", "```js\n<ion-header>\n  <ion-navbar>\n    <ion-title>\n      Ionic Language\n    </ion-title>\n  </ion-navbar>\n</ion-header>\n\n<ion-content padding>\n  <ion-item>\n    {{'Hello' | translate }}, {{ 'Good Morning' | translate }}\n  </ion-item>\n  <ion-item>\n    <ion-label>Language</ion-label>\n    <ion-select [(ngModel)]=\"language\" (ionChange)=\"setLang()\">\n      <ion-option value=\"en\">English</ion-option>\n      <ion-option value=\"de\">Deutsch</ion-option>\n    </ion-select>\n  </ion-item>\n</ion-content>\n```", "```js\nimport { Component } from \"@angular/core\";\nimport { NavController } from \"ionic-angular\";\nimport { TranslateService } from \"@ngx-translate/core\";\n\n@Component({\n  selector: \"page-home\",\n  templateUrl: \"home.html\"\n})\nexport class HomePage {\n  language: string = \"en\";\n  constructor(\n    public navCtrl: NavController,\n    private translate: TranslateService\n  ) {\n    translate.setDefaultLang(\"en\");\n    translate.use(\"en\");\n  }\n\n  setLang() {\n    console.log(this.language);\n    this.translate.use(this.language);\n  }\n}\n```", "```js\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { ErrorHandler, NgModule } from \"@angular/core\";\nimport { IonicApp, IonicErrorHandler, IonicModule } from \"ionic-angular\";\nimport { SplashScreen } from \"@ionic-native/splash-screen\";\nimport { StatusBar } from \"@ionic-native/status-bar\";\n\nimport { MyApp } from \"./app.component\";\nimport { HomePage } from \"../pages/home/home\";\n\nimport { TranslateModule, TranslateLoader } from \"@ngx-translate/core\";\nimport { TranslateHttpLoader } from \"@ngx-translate/http-loader\";\nimport { HttpClientModule, HttpClient } from \"@angular/common/http\";\n\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http);\n}\n\n@NgModule({\n  declarations: [MyApp, HomePage],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    }),\n    IonicModule.forRoot(MyApp)\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [MyApp, HomePage],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    { provide: ErrorHandler, useClass: IonicErrorHandler }\n  ]\n})\nexport class AppModule {}\n```", "```js\n$ ionic serve\n```", "```js\n{\n  \"Hello\": \"Hello\",\n  \"Good Morning\": \"Good Morning\"\n}\n```", "```js\n\n{\n  \"Hello\": \"Hallo\",\n  \"Good Morning\": \"Guten Morgen\"\n}\n```", "```js\n {{'Hello' | translate }}, {{ 'Good Morning' | translate }}\n```", "```js\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http);\n}\n```", "```js\n  TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n  })\n```", "```js\n$ ionic start DocApp blank\n$ cd DocApp\n```", "```js\n$ npm install --save-dev gulp gulp-connect gulp-typedoc typedoc\n```", "```js\nvar gulp = require(\"gulp\");\nvar connect = require(\"gulp-connect\");\nvar typedoc = require(\"gulp-typedoc\");\nvar config = {\n  root: \"docs/\"\n};\n\ngulp.task(\"typedoc\", function() {\n  return gulp.src([\"src/**/*.ts\"]).pipe(\n    typedoc({\n      module: \"commonjs\",\n      target: \"es6\",\n      experimentalDecorators: true,\n      out: config.root,\n      name: \"DocApp\",\n      readme: \"./README.md\"\n    })\n  );\n});\n\ngulp.task(\"serve:docs\", [\"typedoc\"], function() {\n  connect.server({\n    root: config.root,\n    livereload: true\n  });\n});\n```", "```js\nimport { Component } from \"@angular/core\";\nimport { NavController } from \"ionic-angular\";\n\n@Component({\n  selector: \"page-home\",\n  templateUrl: \"home.html\"\n})\nexport class HomePage {\n  constructor(public navCtrl: NavController) {}\n\n  /**\n   * Following is the way you write documentation\n   *\n   * @param username Username of the user\n   * @returns It returns a string value\n   */\n  dummyFunction(username: string) {\n    return username;\n  }\n}\n```", "```js\n$ gulp serve:docs\n```", "```js\n /**\n   * Following is the way you write documentation\n   *\n   * @param username Username of the user\n   * @returns It returns a string value\n   */\n  dummyFunction(username: string) {\n    return username;\n  }\n```"]