- en: Chapter 8. Creating Custom Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an alias task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a basic task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing project configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking for required configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking for the successful execution of other tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running non-blocking code in a task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failing a task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using command-line parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enqueuing tasks to run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a multi-task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using options in a task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using files in a task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To truly begin appreciating the power and flexibility of Grunt, we have to delve
    into the creation of our own tasks.
  prefs: []
  type: TYPE_NORMAL
- en: On top of the vast array of plugins at our disposal, each of the tasks provided
    by them can be configured in a variety of ways that should cover most of our requirements.
    If, however, we do encounter a problem we cannot solve using an existing task
    and configuration combination, we can easily create a new task to fill in the
    gap.
  prefs: []
  type: TYPE_NORMAL
- en: We should also view the creation of tasks as the first stepping stone to creating
    plugins of our own. The methods of creating tasks discussed in this chapter will
    provide us with a simple laboratory, where we can build tasks that can eventually
    be transferred directly to a plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following two URLs provide a wealth of information on creating tasks and
    the tools Grunt makes available to build them. It is highly recommended that you
    go through these links if you are serious about creating tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://gruntjs.com/creating-tasks](http://gruntjs.com/creating-tasks)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://gruntjs.com/api/inside-tasks](http://gruntjs.com/api/inside-tasks)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an alias task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The tasks we configured for our project tend to perform a single function and
    nothing more. As a project grows, we will probably start to identify groups of
    tasks that we tend to run together, in a specific order. It is at this point that
    an alias task can become quite helpful to us as it allows us to group a set of
    tasks together under a new task name.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe also contains an example that makes use of the *Setting up a basic
    web server* and the *Watching files for changes* recipe of [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*, and the
    *Rendering Jade templates* recipe in [Chapter 3](part0031.xhtml#aid-TI1E1 "Chapter 3. Templating
    Engines"), *Templating Engines* in one setup. Be sure to refer to these if you'd
    like to gain a deeper understanding of each of these aspects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through building a basic website development
    setup that continuously renders HTML files from templates, serves them using a
    basic web server, and ensures a clean environment before starting by removing
    all previously rendered templates:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the packages that contains the `contrib-clean`, `contrib-connect`,
    `contrib-jade`, and `contrib-watch` plugins as per the instructions provided in
    the *Installing a plugin* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting
    Started with Grunt"), *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we''ll create a simple Jade template called `index.jade` in the `templates`
    directory, and provide it with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can add tasks to watch, render, serve, and clean our configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With all our tasks in place, we can now create an alias task called `run`,
    which ties them all together in the appropriate order. This is done by adding
    the following to the end of the main function in our Grunt configurations file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now run the alias task just like a regular task by using the `grunt
    run` command, which should produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see from the output, our configured tasks have all run as per the
    order specified in the `run` task, and we are now serving the rendered `index.jade`
    template. To test the setup, we can navigate to `http://localhost:8000` in the
    browser, which will display the rendered template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There may be situations where we have a specific task that we'd like to run
    much more than others, so much so that we may come to think of it as the default
    task. In such a case, we can make use of the `default` task alias. This alias
    is called when there is no specific task indicated along with the `grunt` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can modify our main recipe to make use of the `default` task by changing
    the alias task declaration to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If we now run the `grunt` command in our project without a task name following
    it, which should run all the tasks in the same way as it did in the previous section
    of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Despite the large array of plugins available to Grunt users, situations might
    still arise where we would want to create tasks of our own. These situations are
    well provided for by Grunt, as it provides a set of utilities that make creating
    new ones quite simple.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps will take us through creating a simple task that prints
    the current system date and time.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll register our task with the name `datetime` and provide it with
    a description and an empty function as a placeholder. The following code shows
    the entire Grunt file with the task registration code highlighted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the task registered, we can now provide it with the code that will actually
    print the current date and time. The following code shows the task registration
    with the newly added code highlighted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This bit of code makes use of the standard JavaScript `Date` object and Grunt's
    `grunt.log` utility, which is specifically made available to tasks for logging
    all types of messages.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can read more about the `grunt.log` utility at the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://gruntjs.com/api/grunt.log](http://gruntjs.com/api/grunt.log)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now try out a newly created task by running the `grunt datetime` command,
    which should produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the output of the task has presented us with the current system date and
    time, we have successfully created and executed our simple custom task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accessing project configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order for a task to function appropriately within a project, it often needs
    a way to get specific details about it. The standard practice for Grunt projects
    is to supply project-specific details in the configuration object provided in
    the `grunt.initConfig` function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a basic task* recipe provided earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps will take us through creating a task that prints out a message
    determined by the project's configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll add some sample project configuration using the `grunt.initConfig`
    function. The following code shows the contents of the entire Grunt file with
    the configuration highlighted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note the use of a template string in the `datetime` configuration. The following
    URL provides more information on using template strings in configuration values:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://gruntjs.com/configuring-tasks#templates](http://gruntjs.com/configuring-tasks#templates)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we''ll register our task with the name `describe` and provide it with
    a description and an empty function as a placeholder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the task registered, we can fill the empty function with the following
    code, which retrieves some project configurations and uses it when printing our
    message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, we make use of the `grunt.config` function to fetch data from the configuration
    object provided in the `grunt.initConfig` function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that dot notation can be used when retrieving the properties from objects
    in the configuration object, as demonstrated with the `projectName` variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Another concept demonstrated with the `datetime` variable is that values retrieved
    using the `grunt.config` function are rendered, meaning that any string containing
    templates will be parsed and rendered. If, for some reason, we'd like to fetch
    the un-rendered value, we can do so by making use of the `grunt.config.getRaw`
    function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now try out our custom task by running the `grunt describe` command,
    which should produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the output of the task has presented us with a message containing the values
    we supplied in our project configuration, we have successfully created and executed
    a task that makes use of the project configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checking for required configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's quite common for tasks to require a minimum set of configurations in order
    for them to function properly. The Grunt framework provides the `grunt.config.requires`
    function specifically for this case, failing a task if the indicated configuration
    is not found.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a basic task* recipe provided earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through creating two tasks: the first will
    check for the required configurations that we will supply and the second will
    check for the configurations we will not supply.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll add some sample project configurations using the `grunt.initConfig`
    function. The following code shows the contents of the entire Grunt file with
    the configurations highlighted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll register a task called `complete` that checks for the configurations
    that we supplied, by adding the following code after our `grunt.initConfig` call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can register a task called `incomplete`, which checks for a configuration
    that we have not supplied, by adding the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our tasks added, we''ll first run the task that will succeed by using
    the `grunt complete` command, which should produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can run the task that should fail by using the `grunt incomplete`
    command, which should produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see from the output of the last task, it failed due to the `missing`
    configuration property not being found.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checking for the successful execution of other tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to it being detrimental to the reusability of a task, it's not at all common
    to have tasks depending on one another, due to it being detrimental to the reusability
    of a task. If tasks are so tightly coupled that they can't run independently,
    it should strongly be considered to combine them into a single task.
  prefs: []
  type: TYPE_NORMAL
- en: That being said, there are always exceptions, and Grunt provides for this by
    way of the `grunt.task.requires` function. When called, this function will check
    whether the task with the specified name has been successfully executed. If it
    finds that this is not the case, it will fail the current task.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a basic task* recipe provided earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps will take us through creating two tasks. The first task
    will print a simple message, and the second task will check whether the first
    one has been successfully executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll register a task called `independent` that can run without any
    tasks having been run, and prints a message when it has done so. This is done
    by adding the following code to the main function in our Grunt file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll register a task called `dependent`, which will fail if the `independent`
    task did not run successfully. This is done by adding the following code to the
    main function in our Grunt file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To test this setup, we can first run the `dependent` task using the `grunt
    dependent` command, which should produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see from the output, this task has failed due to the `independent`
    task not having been executed successfully before attempting to run the `dependent`
    task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, we can run the two tasks we created in succession using the `grunt
    independent dependent` command, which should produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This time around we can see that both the tasks ran without encountering any
    problems, and printed their respective messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running non-blocking code in a task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The majority of libraries available in the Node.js sphere tend to be implemented
    in such a way as to be non-blocking. This means that calling a function provided
    by a library will usually continue to execute the next line of code after being
    called, even though it has not fulfilled its intended purpose.
  prefs: []
  type: TYPE_NORMAL
- en: These types of functions tend to use either, or both, the event-driven approach
    or callback functions to indicate their progress. In either of these situations,
    we will require a function we can call once a task has been completed and for
    this purpose, Grunt provides us with the `this.async` utility.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a basic task* recipe provided earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps will take us through creating a task that prints the current
    system time every second for 5 seconds and then exits.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll register a task named `clock` with a description and an empty
    placeholder function by adding the following code to the end of the main function
    in our Grunt file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll define some variables inside our placeholder function that we''ll
    be using in our time-printing code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `done` variable is the focus of this recipe as it demonstrates the usage
    of the `this.async` function. It is assigned the function that is returned by
    calling the `this.async` function. This returned function can be called to indicate
    whether the task has been completed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `count` variable will be used to keep track of the number of times the system
    time has been printed out. It will be decremented every time we print the date
    and time, and we'll stop printing the time when it reaches a value of `0`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `interval` variable is used to store the ID of the **timer interval** that
    is started at the end of the task function. We need this ID to stop the timer
    interval from running once the `count` variable reaches a value of `0`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With all the required variables in place, we can now define the function that
    will print the current system date and time, and also stop the timer once it has
    run its course. The following code should be added immediately after the previous
    variable definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, we make use of the `grunt.log` utility to print the current system date
    and time by providing it with a newly created built-in JavaScript `Date` object,
    which, by default, will always contain the current date and time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We also decrement the count variable and check whether it is less than or equal
    to `zero`. If we find that it is lower than or equal to zero, we make use of the
    built-in `clearInterval` function to stop the running of the timer interval. We'll
    be assigning the timer interval ID to the `interval` variable in the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once we see that the counter has reached `0` and we've stopped the time interval,
    we can use the `done` function returned to us by the `this.async` function to
    indicate that the task has finished running.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we''ll start a timer interval that runs the function defined in our
    previous step every `1000` milliseconds by adding the following code immediately
    after our `printTime` function definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our task now containing all the necessary code, we can try it out by running
    the `grunt clock` command, which should produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As can be seen in the output of the task, it has printed the current system
    date and time five times, and then stopped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Failing a task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The success or failure of a task can be used to indicate whether a task was
    completed without issue, or if a problem was encountered before it could perform
    its intended function. By default, Grunt will assume that a task has succeeded
    but it also provides us with a simple way to indicate whether a task has failed
    and pass on the reason for its failure.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Accessing project configuration* recipe provided earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through creating a task whose success is based
    on the value of a project configuration property:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by registering a task called `check` with a description and an
    empty placeholder function by adding the following code to the end of the main
    function in our Grunt file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the task registered, we can now fill the empty function with code that
    retrieves a project configuration property and uses it to decide whether it should
    fail the task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we return a newly created `Error` object containing a message to indicate
    that the task has failed. If we simply wanted to fail the task without any message,
    we can just return the `false` value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With our task ready, we can add the required configuration property to indicate
    that it should not fail. The following code shows the entire `grunt.initConfig`
    call with the new configuration highlighted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can run the task for the first time to see whether it succeeds as expected.
    This is done by using the `grunt check` command, which should produce output similar
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we''ve seen the task succeed, we can change our configuration to indicate
    that we''d like for it to fail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now run the task again using the `grunt check` command, it should produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see from the output, the task has failed as expected when setting
    the `shouldFail` configuration property to `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since a task comes in a variety of types and structures, there are a variety
    of ways in which we'd like to indicate their failure. We'll now look at failing
    a non-blocking task and aborting a task immediately on failure.
  prefs: []
  type: TYPE_NORMAL
- en: Failing a non-blocking task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the case that we've made use of the `this.async` function to indicate whether
    our task should run in a non-blocking way, the return value of the task function
    becomes meaningless.
  prefs: []
  type: TYPE_NORMAL
- en: If we'd like to fail a non-blocking task, we can do so using the first parameter
    of the function returned from the call to the `this.async` method. Providing either
    `false` or an `Error` object using this parameter will indicate that the task
    has failed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we altered the task from our main recipe to run in
    a non-blocking way, and fail appropriately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Aborting a task immediately on failure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At times, we might want to have a failing task abort the entire Grunt process
    as soon as a failure is encountered. This type of behavior is usually associated
    with what is commonly known as a fatal error.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example makes use of the `grunt.fail.fatal` utility to indicate
    that a fatal error has occurred, and that the Grunt process should exit without
    any further delay:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Using command-line parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the case that a configurable aspect of a task needs to change quite often,
    it can be inefficient to add it to the project configuration. This is where the
    use of command-line parameters can be useful as they provide us with a way to
    easily provide options to our task, without having to alter our configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a basic task* recipe provided earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through creating a task that receives two
    strings using command-line parameters and uses them to print a message:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by registering a task called `welcome` with a description and
    an empty placeholder function by adding the following code to the end of the main
    function in our Grunt file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the task registration setup, we can now fill the empty function with code
    that receives the command-line parameters and uses them to print a message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can run the task using some example parameters. This is done by using
    the `grunt welcome:Aaron:London` command, which should produce output similar
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that if your task makes use of targets, the first parameter will always
    be assumed to be the name of the target, and will not be passed on to the task
    function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As we can see from the output, the task has successfully received the parameters
    we supplied to it and used them to display a welcome message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enqueuing tasks to run
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There might come a time that we would like to enqueue the running of the existing
    tasks from within our own task. This practice is not recommended because a well-designed
    task should usually be focused on a particular function and remain loosely coupled
    from other tasks. Tasks designed in this fashion generally tend to be more robust
    and useful in a larger variety of situations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a basic task* recipe provided earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through creating two simple tasks that print
    a string with one of the tasks enqueuing the other inside itself:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by registering a task called `first` that prints out a string.
    This can be done by adding the following code to the end of the main function
    in our Grunt file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll register another task after the one we just added called `second`.
    This task will also print a string and then proceed to enqueue the `first` task
    for running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we''ve created our two tasks, we can try them out by running the `grunt
    second` command, which should produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see from the output, the `second` task that we ran enqueued the `first`
    task, which also ran.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a multi-task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Task configurations provide the most common way of tweaking the functionality
    of the tasks that we use in our project. With configurations, we can set up a
    task to fulfill our specific needs, and it also allows us to use the same task
    in various ways within a single project. The different configurations applied
    to the same task are called **task targets**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a basic task* recipe provided earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through creating a simple task that prints
    the name of the target configuration and the data supplied to it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by registering a multi-task called `display` using the `registerMultiTask`
    function by adding the following code to the end of the main function in our Grunt
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the task registered, we can fill the empty function with the following
    code that prints a message containing the name of the specified target and the
    data provided for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that it's only inside the scope of task functions registered using `registerMultiTask`
    that `this.target` and `this.data` will be populated with the target name and
    configuration data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we have a registered and functional task, we can set up some sample
    configuration to our `grunt.initConfig` call, which we''ll use to demonstrate
    the task''s behavior:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our task created and configured, we can try it out by running the `grunt
    display` command, which should produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now also try to indicate that we''d like to use only the `foo` configuration
    target by running the `grunt display:foo` command, which should produce output
    similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using options in a task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most common way of tweaking the functionality of a task is by providing
    options in the project configurations. Options can be specified by providing an
    object to the `options` property at either the task or target levels. If an option
    is provided at both the task and target levels, the one provided at the target
    level will take precedence.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a multi-task* recipe provided earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through creating a multi-task that prints
    out the value of an option provided at the two available levels in two different
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by registering a multi-task called `display` using the `registerMultiTask`
    function by adding the following code to the end of the main function in our Grunt
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the task registered, we can fill the empty function with the following
    code that prints a message containing the value of the `foo` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `this.options` method provided in the scope of the task function
    will automatically merge the task and target options, overriding the task options
    if they are provided in the target.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For more information about the `this.options` method, visit the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://gruntjs.com/api/inside-tasks#this.options](http://gruntjs.com/api/inside-tasks#this.options)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we have a registered and functional task, we can set up some sample
    configuration, which we''ll use to demonstrate the task''s behavior:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our task created and supplied with a sample configuration, we can try
    it out with the `first` target by running the `grunt display:first` command, which
    should provide output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we''ve seen how the `first` target behaves, we can try it out with
    the `second` target by running the `grunt display:second` command, which should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using files in a task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tasks are commonly required to access a specific set of files, either using
    the data they contain, or altering it in some way. Grunt provides a uniform way
    of specifying sets of files using the `src`, `dest`, and `files` properties that
    can be used at either the task or target levels.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll be working with the basic project structure we created
    in the *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: If any of the steps in this recipe seem hard to follow, be sure to check out
    the *Creating a multi-task* recipe provided earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through creating some sample data files and
    a simple task that prints their contents:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating two sample files called `one.dat` and `two.dat` in
    a new directory called `data` and providing them with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll register a multi-task called `display` using the `registerMultiTask`
    function by adding the following code to the end of the main function in our Grunt
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the task registered, we can now fill the empty function with the following
    code that iterates over the indicated files and prints out their contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `this.files` property is only provided inside the scope of a multi-task's
    function. It provides a normalized list of all file configurations provided at
    both the task and target levels.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For more information about the `this.files` property, visit the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://gruntjs.com/api/inside-tasks#this.files](http://gruntjs.com/api/inside-tasks#this.files)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In order to demonstrate our task, we can now add some configuration to our
    `grunt.initConfig` call, which will target all the files contained in the `data`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With everything set up, we can now give the task a try by running the `grunt
    display` command, which should produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apart from just reading from files, we will probably reach a point where we''d
    like to write to a file. The following steps alter the previous recipe in such
    a way as to write the contents of the indicated files to a destination file instead
    of printing it to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll change the code in the function of the `display` task we registered
    earlier to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll alter the project configuration to indicate a destination file
    that the output should be written to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now try out our modified task by running the `grunt display` command
    again, which should produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A file named `output.dat` with the following contents should now be present
    in our project folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
