["```js\nvar angle = 0.0;\nvar radius = 10.0;\nscene.registerBeforeRender(() => {\n  angle += 0.01; // Increment the angle\n  // Set the new position of the box\n  box.position.x = radius * Math.cos(angle);\n  box.position.z = radius * Math.sin(angle);\n});\n```", "```js\nvar createAnimation = function(node) {\n  var angle = 0.0;\n  var radius = 10.0;\n  scene.registerBeforeRender(() => {\n    angle += 0.01; // Increment the angle\n    // Set the new position of the box\n    node.position.x = radius * Math.cos(angle);\n    node.position.z = radius * Math.sin(angle);\n  });\n}\n```", "```js\nvar simpleAnimation = new BABYLON.Animation(\n  \"simpleAnimation\", // Name of the animation\n  \"rotation\", // The property to modify (node.rotation)\n  1, // Frames per second\n  BABYLON.Animation.ANIMATIONTYPE_VECTOR3, // The type of property\n  BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE // The loop mode\n);\n```", "```js\n{\n  frame: number;\n  value: any;\n}\n```", "```js\nvar keys = [\n{\n  frame: 0,\n  value: new BABYLON.Vector3(0, 0, 0)\n},\n{\n  frame: 20,\n  value: new BABYLON.Vector3(10, 10, 10)\n}\n];\n```", "```js\nsimpleAnimation.setKeys(keys);\n```", "```js\n// Add animation to the box\n// Every BABYLON.Node object has the \".animations\" property\nbox.animations.push(simpleAnimation);\n// Start animation\nscene.beginAnimation(\n  box, // Start animation(s) of the box\n  0, // Start key. Here 0\n  20, // End key. Here 20\n  true, // Loop the animation\n  1, // Speed ratio. Controls the speed of animation\n  () => { // Callback. Called when animation finished\n    console.log(\"Finished\");\n}\n);\n```", "```js\n// Create animation\nvar complexAnimation = new BABYLON.Animation(\n  \"boxAnimationComplex\",\n  \"position\",\n  60, // 60 frames per second\n  BABYLON.Animation.ANIMATIONTYPE_VECTOR3,\n  BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n);\n// Create keys\nvar complexKeys = [];\nfor (var i=0; i < 360; i++) {\n  // Transform the degrees into radians\n  var angle = BABYLON.Tools.ToRadians(i);\n  complexKeys.push({\n    frame: i,\n    value: new BABYLON.Vector3(10 * Math.cos(angle),\n    2.5,\n    10 * Math.sin(angle))\n  });\n}\n// Set the keys\ncomplexAnimation.setKeys(complexKeys);\n// Finally run the animation(s)\nscene.beginAnimation(this._box, 0, 360, false, 1.0, () => {\n  console.log(\"Animation Finished\");\n});\n```", "```js\nvar anim = scene.beginAnimation(this._box, 0, 360, false, 1.0, () => {\n  console.log(\"Animation Finished\");\n});\n// Pause animation\nanim.pause();\n// Start the animation (when stopped or paused)\nanim.start();\n// Restart animation\nanim.restart();\n// Stop animation\nanim.stop();\n// Go to a specific frame\nanim.goToFrame(180);\n```", "```js\nvar anim: BABYLON.Animation = BABYLON.Animation.CreateAndStartAnimation(\n  \"quickAnimation\", // name of the animation\n  box, // The mesh to animate\n  \"position\", // The property to animate\n  1, // frames per second\n  20, // number of frames of the animation\n  new BABYLON.Vector3(0, 0, 0), // The start value\n  new BABYLON.Vector3(10, 10, 10), // The end value\n  BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE // The loop mode\n);\n```", "```js\nvar event = new BABYLON.AnimationEvent(\n  180, // The frame when the callback will be called\n  () => { // The function executed when the current frame is 180\n    console.log(\"My event was called!\");\n  },\n  false // Only once? False, we want to call the callback every ti  me// the frame is reached\n);\n// Add the event to the animation\ncomplexAnimation.addEvent(event);\n```", "```js\n// Create and set easing function (circle ease)\nvar ease = new BABYLON.CircleEase();\neasingAnimation.setEasingFunction(ease);\n```", "```js\n// Create animation\nvar easingAnimation = new BABYLON.Animation(\n  \"easingAnimation\", \n  \"rotation.x\", // Modify the .x property of rotation\n  10, // 10 frames per second\n  BABYLON.Animation.ANIMATIONTYPE_VECTOR3,\n  BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n);\n// Create keys\nvar simpleKeys = [\n  {\n    frame: 0,\n    value: 0\n  },\n  {\n    frame: 20,\n    value: Math.PI\n  },\n  {\n    frame: 40,\n    value: 0\n  }\n];\n// Set keys\neasingAnimation.setKeys(simpleKeys);\n// Push animation\nthis._box.animations.push(easingAnimation);\n// Create and set easing function (circle ease)\nvar ease = new BABYLON.CircleEase();\neasingAnimation.setEasingFunction(ease);\n// Finally, start the animation(s) of the box\nthis._scene.beginAnimation(box, 0, 40, true, 1.0, () => {\n  console.log(\"Animation Finished\");\n});\n```", "```js\n// Create and set easing function (circle ease)\nvar ease = new BABYLON.CircleEase();\nease.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);\neasingAnimation.setEasingFunction(ease);\n```", "```js\nexport class PowerEase extends BABYLON.EasingFunction\n{\n  constructor(public power: number = 2) {\n    // Call constructor of BABYLON.EasingFunction\n    super();\n  }\n  public easeInCore(gradient: number): number {\n    var y = Math.max(0.0, this.power);\n    return Math.pow(gradient, y);\n  }\n}\nSomewhere in your code:\n// Create and set easing function (circle ease)\nvar customEase = new BABYLON.PowerEase(4);\ncustomEase.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);\neasingAnimation.setEasingFunction(customEase);\n```", "```js\nuniform mat4 bones[NUMBER_OF_BONES]; // Sent by Babylon.js\nmat4 boneTransform1 = bones[matricesIndices[0]] * matricesWeights[0];\nmat4 boneTransform2 = bones[matricesIndices[1]] * matricesWeights[1];\nmat4 boneTransform3 = bones[matricesIndices[2]] * matricesWeights[2];\nmat4 boneTransform4 = bones[matricesIndices[3]] * matricesWeights[3];\nmat4 finalTransform = transformedVertex * (\n  boneTransform1 + boneTransform2 +\n    boneTransform3 + boneTransform4\n);\n```", "```js\n(meshes: AbstractMesh [], particleSystems: ParticleSystem[], skeletons: Skeleton[]) => void;\n```", "```js\n// myAnimated3DModel is a BABYLON.Mesh;\nvar skeleton = myAnimated3DModel.skeleton; // get the skeleton\nscene.beginAnimation(\n  skeleton, // Target to animate\n  0, // The start frame\n  150, // The end frame\n  true, // Loop ?\n  1.0, // Speed ratio\n  () => { // Animation end callback\n    console.log(\"Animation of skeleton finished!\");\n  }\n);\n```", "```js\n// Import an animated 3D model\nBABYLON.SceneLoader.ImportMesh(\n  \"\", // Names of the specific\n  \"./\", // The root URL\n  \"dude.babylon\", // The name of the scene containing the meshes\n  scene, // The scene where to add the meshes\n  (meshes, particleSystems, skeletons) => { // callback success\n    // Simply start the animations of the skeleton associated\n    // To the mesh\n    this._scene.beginAnimation(skeletons[0], 0, 150, true, 1.0);\n  }\n);\n```", "```js\nBABYLON.SceneLoader.Append(\n  \"./\", // The root url\n  \"dude.babylon\", // The name of the scene\n  scene, // The scene where to append\n  (scene) => { // The success callback\n    // Get the skeleton\n    var skeleton = this._scene.getSkeletonByName(\"Skeleton0\");\n    // Simply animate the skeleton\n    scene.beginAnimation(skeleton, 0, 150, true, 1.0);\n  }\n);\n```"]