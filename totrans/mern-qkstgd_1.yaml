- en: Introduction to the MERN Stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The MVC architectural pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing NPM packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will be required to have an IDE, Visual Studio Code, Node.js and MongoDB.
    You will also need to install Git, in order use the Git repository of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files of this chapter can be found on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter01](https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter01)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://goo.gl/1zwc6F](https://goo.gl/1zwc6F)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MERN stack is a solution composed of four main components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MongoDB**: A database that uses a document-oriented data model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ExpressJS**: A web application framework for building web applications and
    APIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ReactJS**: A declarative, component-based, and isomorphic JavaScript library
    for building user interfaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js**: A cross-platform JavaScript runtime environment built on Chrome''s
    V8 JavaScript engine allows developers to build diverse tools, servers, and applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These fundamental components that comprise the MERN stack are open source, and
    are thus maintained and developed by a great community of developers. What ties
    these components together is a common language, JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter will mainly focus on setting up a development environment
    to work with a MERN stack.
  prefs: []
  type: TYPE_NORMAL
- en: You are free to use the code editor or IDE of your choice. However, I would
    suggest you give Visual Studio Code a try if you have trouble deciding which IDE
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: The MVC architectural pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most modern web applications implement the MVC architectural pattern. It consists
    of three interconnected parts that separate the internal representation of information
    in a web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: Manages the business logic of an application that determines how
    data should be stored, created, and modified'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: Any visual representation of the data or information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller**: Interprets user-generated events and transforms them into commands
    for the model and view to update accordingly:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/8af28448-da9c-4fb3-84e8-ec8f0177ba72.png)'
  prefs: []
  type: TYPE_IMG
- en: The **Separation of Concern** (**SoC**) design pattern separates frontend from
    backend code. Following the MVC architectural pattern, developers are able to
    adhere to the SoC design pattern, resulting in a consistent and manageable application
    structure.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in the following chapters implement this architectural pattern to
    separate the frontend and the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The official MongoDB website provides up-to-date packages containing binaries
    for installing MongoDB on Linux, OS X, and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visit the official website of MongoDB at [https://www.mongodb.com/download-center](https://www.mongodb.com/download-center),
    select Community Server, and then select your preferred operating system version
    of the software and download it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB and configuring it may require additional steps.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visit the documentation website of MongoDB at [https://docs.mongodb.com/master/installation/](https://docs.mongodb.com/master/installation/)
    for instructions and check the Tutorials section for your specific platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, an instance of `mongod-`, the daemon process for `MongoDB-`,
    can be started in a standalone fashion:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new Terminal
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `data`, which will contain the Mongo database
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `mongod --port 27017 --dbpath /data/` to start a new instance and create
    a database
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open another Terminal
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `mongo --port 27017` to connect a Mongo shell to the instance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an alternative, you can opt to use a **Database as a service** (**DBaaS**)
    such as MongoDB Atlas, which, at the time of writing, allows you to create a free
    cluster with 512 MB of storage. Another simple alternative is mLab, although there
    are many other options.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The official Node.js website provides two packages containing LTS and Current
    (containing the latest features) binaries to install Node.js on Linux, OS X, and
    Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the purpose of this book, we will install Node.js v10.1.x.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To download the latest version of Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the official website at [https://nodejs.org/en/download/](https://nodejs.org/en/download/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Current | Latest Features
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the binary for your preferred platform or **operating system** (**OS**)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you prefer to install Node.js via package manager, visit [https://nodejs.org/en/download/package-manager/](https://nodejs.org/en/download/package-manager/)
    and select your preferred platform or OS.
  prefs: []
  type: TYPE_NORMAL
- en: Installing npm packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The installation of Node.js includes a package manager called `npm`, which is
    the default and most widely used package manager for installing JavaScript/Node.js
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: NPM packages are listed in the NPM registry at [https://registry.npmjs.org/](https://registry.npmjs.org/),
    where you can search for packages and even publish your own.
  prefs: []
  type: TYPE_NORMAL
- en: There are other alternatives to NPM as well, such as Yarn, which is compatible
    with the public NPM registry. You are free to use the package manager of your
    choice; however, for the purpose of this book, the package manager used in the
    recipes will be NPM.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NPM expects to find a `package.json` file at the root of your `project` folder.
    This is a configuration file that describes the details of your project, such
    as its dependencies, the name of the project, and the author of the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you''re able to install any packages in your project, you must create
    a `package.json` file. These are the steps you will usually take to create a project:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `project` folder in your preferred location and either name it
    `mern-cookbook` or give it another name of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a new Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the current directory to the new folder you just created. This is usually
    done with the `cd` command in your Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `npm init` to create a new `package.json` file, following the steps displayed
    in the Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, you should have a `package.json` file that will look something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After this, you will be able to use NPM to install new packages for your project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a new Terminal
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the current directory to where your newly created `project` folder is
    located
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following line to install the `chalk` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you will be able to use the package in your project via require in Node.js.
    Go through the following steps to see how you can use it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named `index.js` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open a new Terminal and run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NPM will connect to and look in the NPM registry for the package named react,
    and will download it and install it if it exists.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some useful flags that you can use NPM with:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--save`: This will install and add the package name and version in the `dependencies`
    section of your `package.json` file. These dependencies are modules that your
    project will use while in production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--save-dev`: This works in the same way as the `--save` flag. It will install
    and add the package name in the `devDependencies` section of the `package.json`
    file. These dependencies are modules that your project will use during development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--save-exact`: This keeps the original version of the installed package. This
    means, if you share your project with other people, they will be able to install
    the exact same version of the package that you use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While this book will provide you with a step-by-step guide to installing the
    necessary packages in every recipe, you are encouraged to visit the NPM documentation
    website at [https://docs.npmjs.com/getting-started/using-a-package.json](https://docs.npmjs.com/getting-started/using-a-package.json)[ ](https://docs.npmjs.com/getting-started/using-a-package.json)to
    learn more.
  prefs: []
  type: TYPE_NORMAL
