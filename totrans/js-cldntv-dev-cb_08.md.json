["```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch8/timeout-retry --path cncb-timeout-retry\n```", "```js\nservice: cncb-timeout-retry\n...\nfunctions:\n  command:\n    handler: handler.command\n    timeout: 6\n    memorySize: 1024\n...\n```", "```js\nmodule.exports.command = (request, context, callback) => {\n  const db = new aws.DynamoDB.DocumentClient({\n    httpOptions: { timeout: 1000 },\n    logger: console,\n  });\n...\n  db.put(params, callback);\n};\n```", "```js\n$ sls invoke -f command -r us-east-1 -s $MY_STAGE -d '{\"name\":\"thing one\"}'\n```", "```js\n$ sls logs -f command -r us-east-1 -s $MY_STAGE\n\n2018-07-14 23:41:14.229 (-04:00) ... [AWS dynamodb 200 0.063s 0 retries] putItem({ TableName: 'john-cncb-timeout-retry-things',\n  Item:\n   { id: { S: 'c22f3ce3-551a-4999-b750-a20e33c3d53b' },\n     name: { S: 'thing one' } } })   \n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch8/backpressure-ratelimit --path cncb-backpressure-ratelimit\n```", "```js\nservice: cncb-backpressure-ratelimit\n...\nfunctions:\n  listener:\n    handler: handler.listener\n    timeout: 240 # headroom for retries\n    events:\n      - stream:\n          batchSize: 1000 # / (timeout / 2) < write capacity\n          ...\n    environment:\n      WRITE_CAPACITY_UNITS: 10\n      SHARD_COUNT: 1\n...\nresources:\n  Resources:\n    Table:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        ...\n        ProvisionedThroughput:\n          ...\n          WriteCapacityUnits: ${self:functions.listener.environment.WRITE_CAPACITY_UNITS}\n```", "```js\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToUow)\n    .filter(forPurple)\n    .ratelimit(Number(process.env.WRITE_CAPACITY) / \n      Number(process.env.SHARD_COUNT) / 10, 100)\n    .flatMap(put)\n    .collect()\n    .toCallback(cb);\n};\n\nconst put = uow => {\n  const params = { ... };\n  const db = new aws.DynamoDB.DocumentClient({\n    httpOptions: { timeout: 1000 },\n    // default values:\n    // maxRetries: 10,\n    // retryDelayOptions: {\n    //   base: 50,\n    // },\n    logger: console,\n  });\n\n  return _(db.put(params).promise()\n    .then(() => uow)\n  );\n};\n```", "```js\n$ sls invoke -f simulate -r us-east-1 -s $MY_STAGE\n[\n    {\n        \"total\": 4775,\n        \"blue\": 1221,\n        \"green\": 1190,\n        \"purple\": 1202,\n```", "```js\n        \"orange\": 1162\n    }\n]\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter 'event count' 2018-07-15 22:53:29 ... event count: 1000\n2018-07-15 22:54:00 ... event count: 1000\n2018-07-15 22:54:33 ... event count: 1000\n2018-07-15 22:55:05 ... event count: 425\n2018-07-15 22:55:19 ... event count: 1000\n2018-07-15 22:55:51 ... event count: 350$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter 'Duration' REPORT ... Duration: 31011.59 ms ...\nREPORT ... Duration: 33038.58 ms ...\nREPORT ... Duration: 32399.91 ms ...\nREPORT ... Duration: 13999.56 ms ...\nREPORT ... Duration: 31670.86 ms ...\nREPORT ... Duration: 12856.77 ms ...\n\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter 'retries' ...\n2018-07-15 22:55:49 ... [AWS dynamodb 200 0.026s 0 retries] putItem({ TableName: '...',\n  Item:\n   { id: { S: '686dc03a-88a3-11e8-829c-67d049599dd2' },\n     type: { S: 'purple' },\n     timestamp: { N: '1531709604787' },\n     partitionKey: { S: '3' },\n     tags: { M: { region: { S: 'us-east-1' } } } },\n  ReturnConsumedCapacity: 'TOTAL' })\n2018-07-15 22:55:50 ... [AWS dynamodb 200 0.013s 0 retries] putItem({ TableName: '...',\n  Item:\n   { id: { S: '686d4b14-88a3-11e8-829c-67d049599dd2' },\n     type: { S: 'purple' },\n     timestamp: { N: '1531709604784' },\n     partitionKey: { S: '4' },\n     tags: { M: { region: { S: 'us-east-1' } } } },\n  ReturnConsumedCapacity: 'TOTAL' })\n...\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch8/handling-faults --path cncb-handling-faults\n```", "```js\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToUow)\n    .filter(forThingCreated)\n    .tap(validate)\n    .tap(randomError)\n    .flatMap(save)\n    .errors(errors)\n    .collect().toCallback(cb);\n};\n\nconst validate = uow => {\n  if (uow.event.thing.name === undefined) {\n    const err = new Error('Validation Error: name is required');\n    // handled\n    err.uow = uow;\n    throw err;\n  }\n};\n\nconst randomError = () => {\n  if (Math.floor((Math.random() * 5) + 1) === 3) {\n    // unhandled\n    throw new Error('Random Error');\n  }\n};\n\nconst save = uow => {\n ...\n return _(db.put(uow.params).promise()\n   .catch(err => {\n     // handled\n     err.uow = uow;\n     throw err;\n   }));\n};\n\nconst errors = (err, push) => {\n  if (err.uow) {\n    // handled exceptions are adorned with the uow in error\n    push(null, publish({\n      type: 'fault',\n      timestamp: Date.now(),\n      tags: {\n        functionName: process.env.AWS_LAMBDA_FUNCTION_NAME,\n      },\n      err: {\n        name: err.name,\n        message: err.message,\n        stack: err.stack,\n      },\n      uow: err.uow,\n    }));\n  } else {\n    // rethrow unhandled errors to stop processing\n    push(err);\n  }\n};\n```", "```js\n$ sls invoke -f simulate -r us-east-1 -s $MY_STAGE\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter 'publishing fault' ... {\"type\":\"fault\",\"timestamp\":...,\"tags\":{\"functionName\":\"cncb-handling-faults-john-listener\"},\"err\":{\"name\":\"Error\",\"message\":\"Validation Error: name is required\" ...\n\n... {\"type\":\"fault\",\"timestamp\":...,\"tags\":{\"functionName\":\"cncb-handling-faults-john-listener\"},\"err\":{\"name\":\"ValidationException\",\"message\":\"...Missing the key id...\" ...\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch8/resubmitting-faults/monitor --path cncb-resubmitting-faults-monitor\n\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch8/resubmitting-faults/cli --path cncb-resubmitting-faults-cli\n\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch8/resubmitting-faults/simulator --path cncb-resubmitting-faults-simulator\n```", "```js\n$ cd ../cncb-resubmitting-faults-monitor\n$ npm install\n$ npm test -- -s $MY_STAGE\n$ npm run dp:lcl -- -s $MY_STAGE\n\n  Stack Outputs\n BucketName: cncb-resubmitting-faults-monitor-john-bucket-1llq835xdczd8\n\n$ cd ../cncb-resubmitting-faults-simulator\n$ npm install\n$ npm test -- -s $MY_STAGE\n$ npm run dp:lcl -- -s $MY_STAGE\n```", "```js\n$ sls invoke -f simulate -r us-east-1 -s $MY_STAGE\n```", "```js\nexports.command = 'resubmit [bucket] [prefix]'\nexports.desc = 'Resubmit the faults in [bucket] for [prefix]'\n...\nconst invoke = (lambda, options, event) => {\n  const Payload = JSON.stringify({\n      Records: [event.uow.record],\n  });\n\n  const params = {\n    FunctionName: event.tags.functionName,\n    ...\n    Payload: Buffer.from(Payload),\n  };\n\n  return _(lambda.invoke(params).promise());\n}\n```", "```js\n$ cd ../cncb-resubmitting-faults-cli\n$ npm install\n$ node index.js resubmit -b cncb-resubmitting-faults-monitor-$MY_STAGE-bucket-<suffix> -p <s3-path> --dry false\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch8/idempotence-inverse-oplock --path cncb-idempotence-inverse-oplock\n```", "```js\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToUow)\n    .filter(forThingSaved)\n    .flatMap(save)\n    .collect().toCallback(cb);\n};\n\nconst save = uow => {\n  const params = {\n    TableName: process.env.TABLE_NAME,\n    Item: {\n      ...uow.event.thing,\n      oplock: uow.event.timestamp,\n    },\n    ConditionExpression: 'attribute_not_exists(#oplock) OR #oplock < :timestamp',\n    ...\n  };\n\n  const db = new aws.DynamoDB.DocumentClient({\n    httpOptions: { timeout: 1000 },\n    logger: console,\n  });\n\n  return _(db.put(params).promise()\n    .catch(handleConditionalCheckFailedException)\n    .then(() => uow)\n  );\n}\n\nconst handleConditionalCheckFailedException = (err) => {\n  if (err.code !== 'ConditionalCheckFailedException') {\n    err.uow = uow;\n    throw err;\n  }\n};\n```", "```js\n$ sls invoke -f simulate -r us-east-1 -s $MY_STAGE\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE\n\n... [AWS dynamodb 200 0.098s 0 retries] putItem({ TableName: '...',\n  Item:\n   { id: { S: '3022eaeb-45b7-46d5-b0a1-696c0eb9aa25' },\n     oplock: { N: '1531628180237' } },\n...\n... [AWS dynamodb 400 0.026s 0 retries] putItem({ TableName: '...',\n  Item:\n   { id: { S: '3022eaeb-45b7-46d5-b0a1-696c0eb9aa25' },\n     oplock: { N: '1531628180237' } },\n...\n... { ConditionalCheckFailedException: The conditionalrequest failed\n    at Request.extractError ...\n...\n message: 'The conditional request failed',\n  code: 'ConditionalCheckFailedException',\n  time: 2018-07-15T04:16:21.202Z,\n  requestId: '36BB14IGTPGM8DE8CFQJS0ME3VVV4KQNSO5AEMVJF66Q9ASUAAJG',\n  statusCode: 400,\n retryable: false,\n  retryDelay: 20.791698133966396 }\n\n... [AWS dynamodb 200 0.025s 0 retries] putItem({ TableName: '...',\n  Item:\n   { id: { S: '3022eaeb-45b7-46d5-b0a1-696c0eb9aa25' },\n     oplock: { N: '1531628181237' } },\n...\n... [AWS dynamodb 400 0.038s 0 retries] putItem({ TableName: '...',\n  Item:\n   { id: { S: '3022eaeb-45b7-46d5-b0a1-696c0eb9aa25' },\n     oplock: { N: '1531628180237' } },\n...\n... { ConditionalCheckFailedException: The conditionalrequest failed\n    at Request.extractError ...\n...    \n  message: 'The conditional request failed',\n...\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch8/idempotence-es --path cncb-idempotence-es\n```", "```js\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToUow)\n    .filter(forThingSaved)\n    .flatMap(saveEvent)\n    .collect().toCallback(cb);\n};\n\nconst saveEvent = uow => {\n  const params = {\n    TableName: process.env.EVENTS_TABLE_NAME,\n    Item: {\n id: uow.event.thing.id,\n sequence: uow.event.id,\n      event: uow.event,\n    }\n  };\n\n  const db = new aws.DynamoDB.DocumentClient({\n    httpOptions: { timeout: 1000 },\n    logger: console,\n  });\n\n  return _(db.put(params).promise()\n    .then(() => uow)\n  );\n}\n```", "```js\n$ sls invoke -f simulate -r us-east-1 -s $MY_STAGE\n```", "```js\n$ sls logs -f trigger -r us-east-1 -s $MY_STAGE\n\n... record: { ... \"Keys\":{\"sequence\":{\"S\":\"3fdb8c10-87ea-11e8-9cf5-0b6c5b83bdcb\"},\"id\":{\"S\":\"8c083ef9-d180-48b8-a773-db0f61815f38\"}}, ...\n\n... record: { ... \"Keys\":{\"sequence\":{\"S\":\"3fdb8c11-87ea-11e8-9cf5-0b6c5b83bdcb\"},\"id\":{\"S\":\"8c083ef9-d180-48b8-a773-db0f61815f38\"}}, ...\n\n```"]