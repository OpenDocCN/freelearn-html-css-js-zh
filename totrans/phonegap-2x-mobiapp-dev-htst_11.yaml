- en: Appendix A. Quick Design Pattern Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While it is important that your app be unique and stand out from the crowd,
    it is also important to realize that some things are already pretty standardized,
    and that there is no need to re-invent the wheel. For example, when building a
    login screen, you know that you need to ask for a username or an e-mail and a
    password; that's because this has become a pretty standard design pattern, and
    users are familiar with it from their various experiences with websites and other
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The patterns presented in this appendix are quick sketches. There''s no code
    attached, though where applicable, we''ve pointed out the projects in which the
    patterns were used. The appearance of each sketch is based on iOS, but there are
    parallels for each pattern in most mobile platforms. If you want some really great
    patterns along with apps that use them, you might want to consider Theresa Neil''s
    book, *Mobile Design Pattern Gallery: UI Patterns for Mobile Applications* published
    by *O''Reilly*. She also has a website that has some great information at [http://www.mobiledesignpatterngallery.com](http://www.mobiledesignpatterngallery.com).
    Some other useful sites that contain lots of real examples of various patterns
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.mobile-patterns.com/](http://www.mobile-patterns.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://inspired-ui.com/](http://inspired-ui.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://pttrns.com/](http://pttrns.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.mobiletuxedo.com/category/ui-patterns/](http://www.mobiletuxedo.com/category/ui-patterns/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't forget to follow the **Human interface guidelines** (**HIG**) for your
    platform. On some platforms (such as Apple's iOS and Microsoft's Windows Phone
    7 and 8), failure to follow the HIG is bounds for rejection of your app entirely.
    No matter what, the HIG is designed to ensure that all apps have some degree of
    consistency and user friendliness. The HIG isn't there to pound you into submission;
    the guidelines are there for legitimately good reasons.
  prefs: []
  type: TYPE_NORMAL
- en: 'See these guides for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Apple iOS HIG: [http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/MobileHIG/Introduction/Introduction.html](http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/MobileHIG/Introduction/Introduction.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Android''s UI guidelines: [http://developer.android.com/guide/practices/ui_guidelines/index.html](http://developer.android.com/guide/practices/ui_guidelines/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows Phone guidelines: [http://msdn.microsoft.com/en-us/library/windowsphone/design/hh202915(v=vs.92).aspx](http://msdn.microsoft.com/en-us/library/windowsphone/design/hh202915(v=vs.92).aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The navigation list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The navigation list is a simple navigation pattern for your app. If you have
    a few items that you want your user to perform, you can use this pattern to present
    a menu of choices to them. This pattern works well when each topic in your app
    is different from every other topic. In the following example, getting a quote,
    making a payment, and reporting an incident would all be very different workflows.
  prefs: []
  type: TYPE_NORMAL
- en: '![The navigation list](img/9403_A_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can take the opportunity to style the screen to a large degree, but be careful
    *not* to obscure the list items themselves. By all means, include icons and such,
    but always make sure the text is nice and readable.
  prefs: []
  type: TYPE_NORMAL
- en: If the user needs to log in for any particular item, be sure to keep them logged
    for any of the other items, if they are used within the same session. (That is,
    if I make a payment, I shouldn't then have to log in again to report an incident.)
  prefs: []
  type: TYPE_NORMAL
- en: In general, the number of items in this list should be kept to a minimum. If
    you have to scroll, you might want to rethink your application's hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: The grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The grid is a very recognizable navigation pattern for users, and works really
    well for images and videos (think back to our `Imgn` and `Mem'ry` apps in [Project
    6](ch06.html "Chapter 6. Say Cheese!"), *Say Cheese!* and [Project 7](ch07.html
    "Chapter 7. Let's Go to the Movies!"), *Let's Go to the Movies!* respectively).
  prefs: []
  type: TYPE_NORMAL
- en: '![The grid](img/9403_A_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Be sure to display the thumbnails at a large enough scale so that details can
    be seen. If you want to display a caption, it should appear below the image.
  prefs: []
  type: TYPE_NORMAL
- en: Tapping the thumbnail will generally show the thumbnail at a larger scale. However,
    if you're using this navigation pattern for, say, sections of your app, each thumbnail
    would be an icon, and tapping that icon would take you to the appropriate part
    of the app. In this case, be certain that your icons are all distinct and recognizable.
  prefs: []
  type: TYPE_NORMAL
- en: Using this pattern works best for images and videos, and less so for sections
    of your app. Although apps have used this pattern in the past (such as an older
    version of Facebook), most have trended towards using some other mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: When dealing with images and videos, *long pressing* on the thumbnail will typically
    result in some pop-up list of actions, such as deleting, and moving *or* the app
    will allow the user to re-order the list (think of the wiggly home screen on iOS
    devices).
  prefs: []
  type: TYPE_NORMAL
- en: Carousel 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many different uses for carousels. In the following example, we're
    displaying a series of documents in a horizontal carousel. Each image below the
    primary image is an *action*. The user can tap them to do something particular
    with that document. Also, the *name* of the document (below the primary image)
    is typically tappable, and will allow the user to rename the document. If you
    recall, we used this pattern in [Project 3](ch03.html "Chapter 3. Being Productive"),
    *Being Productive* and [Project 10](ch10.html "Chapter 10. Scaling Up"), *Scaling
    Up*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Carousel 1](img/9403_A_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sometimes the action buttons may not be inside the carousel itself; they may
    be on a toolbar or navigation bar instead. Use whatever fits best for your user.
  prefs: []
  type: TYPE_NORMAL
- en: If more than one document is available, it is a good idea to make sure that
    part of one of the other documents is visible on the sides of the screen; this
    helps the user clue-in that the carousel can be scrolled.
  prefs: []
  type: TYPE_NORMAL
- en: The large images should generally be representations of the actual document,
    typically, a representation of the first page or sheet of a document.
  prefs: []
  type: TYPE_NORMAL
- en: Carousel 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This carousel is a little different than the last one. It is more typically
    used to display large images one-by-one or to display tours of an app in a friendly
    interface. It is also often used to display different sets of information or options
    in a limited space.
  prefs: []
  type: TYPE_NORMAL
- en: '![Carousel 2](img/9403_A_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The circles below the main content are optional; if you're viewing an image,
    users often know to swipe left or right to see the previous or next image. If
    you're viewing a tour of the app, or different sets of information, however, it
    is better to display the circles (or the platform's equivalent) so that the user
    has a good idea of how many *pages* of content there are.
  prefs: []
  type: TYPE_NORMAL
- en: When displaying the circles, it's best to keep the number of pages to no more
    than seven or eight. Go beyond this number, and the circles themselves can be
    distracting and detract from the content.
  prefs: []
  type: TYPE_NORMAL
- en: The login screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most apps have them and although they are sometimes the bane of a user's existence
    (primarily because the password is hard to type on a small screen), they're also
    critically important.
  prefs: []
  type: TYPE_NORMAL
- en: '![The login screen](img/9403_A_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's est, if possible, to use an e-mail for the user's unique name. This is
    a piece of information they already know and have at hand. If that's not possible,
    however, replace **Email** with *Username*.
  prefs: []
  type: TYPE_NORMAL
- en: Always have the **Password** field obscure the characters. This is typically
    done with dots that replace each character as they are typed. The last character
    can be displayed, but should only be shown for a short time. Most platforms will
    give this to you for free as long as you specify that the input field is a **Password**
    field.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, it's acceptable to have an option to show the password in its entirety.
    This is typically offered as a checkbox or toggle below the **Password** field.
    It's not used very often, and only in circumstances where the password itself
    may be very complicated. One good example is when entering Wi-Fi information;
    some devices allow you to see the password as you type it without obscuring the
    letters since Wi-Fi passwords are painfully complex.
  prefs: []
  type: TYPE_NORMAL
- en: Make the **Login** or **Sign in** button obvious. It should beg to be tapped.
    Give it a different color, larger text—anything to draw the user's attention to
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to give the user a way to reset or retrieve their password (and
    their username, if you don't use their e-mail). If your app doesn't provide this
    mechanism, you'll be left with some very upst users.
  prefs: []
  type: TYPE_NORMAL
- en: If it makes sense for your app, you might also want to consider a **Remember
    Me** option. This is often used in apps where security isn't quite as important
    as, say, a bank application. If you don't want to have the app remember the user
    forever, it's often acceptable to remember the user for a couple of weeks or a
    month. If you do add this feature, be sure to warn the user about the dangers
    of using this feature on shared devices and on networks they don't trust.
  prefs: []
  type: TYPE_NORMAL
- en: 'One final note: use SSL. That is, the login process should be over a secure
    connection.'
  prefs: []
  type: TYPE_NORMAL
- en: The sign-up form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The corollary to the login form is the sign-up form. If at all possible, include
    this form if a user needs to sign in to use your app and provide an option on
    the log-in form to display this form. Some platforms restrict your ability to
    display forms like these (especially if payment outside of the platform's app
    store is possible), but if at all possible, include it for the sake of your user.
    Nothing's worse than finding a log-in screen, but no way to create a brand new
    account.
  prefs: []
  type: TYPE_NORMAL
- en: '![The sign-up form](img/9403_A_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Keep it short and sweet. Don't ask for the user's life story and if you must
    ask for lots and lots of fields, use a multi-part form. It is best to keep the
    number of questions to less than seven or eight. The fewer things you ask, the
    more likely users will sign up.
  prefs: []
  type: TYPE_NORMAL
- en: When asking for e-mail or passwords, it is a good idea to confirm those inputs
    with a second field. It's all too easy to type an e-mail or password incorrectly;
    and if no confirmation is in place, the user might continue on having no clue
    what they did wrong. Then when they can't log in, they'll blame your app.
  prefs: []
  type: TYPE_NORMAL
- en: If you have to ask for personal information, don't forget to explain how you
    handle the user's private data. Link to your privacy policy. And don't forget
    to use SSL for the sign-up form.
  prefs: []
  type: TYPE_NORMAL
- en: Make your **Sign** **Up** button such that it just begs to be tapped on. Give
    it a pretty color, a large font; it needs to be noticed. Also, if at all possible,
    provide a **No Thanks** button that allows the user to use your app *without an
    account*. For some apps, there's a lot of content that can be browsed without
    a sign in, and some users will use this as a way to *demo* your service. That
    is, they'll use it to see if they want to create an account or not. Don't put
    your content behind a login wall if you don't have to.
  prefs: []
  type: TYPE_NORMAL
- en: The table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tables are everywhere. We've used them in most of our apps, Projects 2 to 7,
    and also Projects 9 to 10\. These can be styled nearly to the point where they're
    not recognizable as a table, but essentially any repeatable content is a table.
    So a list of tweets, list of e-mails, or a contact list is a table.
  prefs: []
  type: TYPE_NORMAL
- en: '![The table](img/9403_A_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tables should provide information in a reasonably succinct form. Important text
    should stand out, while supplementary information should be in a lighter color
    or smaller font. If an image is provided, be sure that it is large enough to be
    useful, and that the text wraps nicely around it. Think carefully about the position
    of the image; the position might convey important information (for example, in
    a messaging app images on the left might refer to messages being sent to you,
    while your image on the right might refer to messages that you sent out).
  prefs: []
  type: TYPE_NORMAL
- en: For those platforms that support disclosure icons (arrows, checkmarks, and so
    on), be sure to put them in the correct place for your platform. If tapping them
    does something other than the action that would occur by tapping the row, be sure
    to give enough of a tappable area for the user to target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some apps have added lots of gestures to table rows. TweetBot is a good example
    where swiping one direction will do one action, while swiping another direction
    will do another. Generally this is pretty novel, and users aren''t going to do
    a lot of swiping on table rows, except if it looks like the content is deletable.
    In this case, they might swipe right-to-left to attempt to delete a row. (If the
    row is in fact something that can be deleted, then the appearance of a **Delete**
    button would be appropriate.) An example of this is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The table](img/9403_A_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The list of choices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These appear in a lot of forms, but they all boil down to the same thing: the
    app wants you to pick something from a list. The list can be single selection;
    that is, only one item can be selected, or it can allow multiple selections (which
    is usually represented with a radio button, check mark, or other similar icon).'
  prefs: []
  type: TYPE_NORMAL
- en: '![The list of choices](img/9403_A_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The appearance can vary drastically, from a *Select* list on IOS, to an iOS
    *ActionSheet*, to an Android menu. Pick whatever works best for the situation
    and the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Don't use these to pick numbers, unless there are very few. No one wants to
    scroll through a hundred rows numbered 1-100 just to pick 97\. Use an input field
    for that. But if the possible values are 25, 50, 75, and 100, then this is okay
    (though it might be wise to spell the numbers out).
  prefs: []
  type: TYPE_NORMAL
- en: Doing things in bulk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many different ways to do actions in bulk, but the following example
    is a very common pattern. We used something similar in [Project 7](ch07.html "Chapter 7. Let's
    Go to the Movies!"), *Let's Go to the Movies!* and [Project 8](ch08.html "Chapter 8. Playing
    Around"), *Playing Around*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Doing things in bulk](img/9403_A_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding pattern, tapping on an item will mark that item as selected.
    This can be by placing a checkmark by it, changing the border color (which is
    what we used), or by highlighting it using some other method. As long as it is
    obvious what items are selected and what items aren't, there are a lot of possibilities
    here.
  prefs: []
  type: TYPE_NORMAL
- en: Once the selection is made, then the actions at the bottom of this pattern come
    into play. The user might delete the items, or they might want to do something
    else. If you decide to use icons and not words, be sure to use icons that users
    already understand, for example, a trashcan works well in place of *delete*.
  prefs: []
  type: TYPE_NORMAL
- en: Do try to keep the number of actions possible to the absolute minimum, especially
    when dealing with the limited real estate of a mobile phone.
  prefs: []
  type: TYPE_NORMAL
- en: Searching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your app displays a lot of data, it's almost inevitable that you'll need
    to provide a mechanism for searching through that data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Searching](img/9403_A_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding pattern is one of the most common on most platforms. The user
    can type in the **Search** field and the results will appear in a table below
    the **Search** field. The **Cancel** button is not always present. Sometimes,
    it's just a small icon, but this depends on the app and the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Whether or not the search occurs while the user is typing or it requires them
    to tap the **Search** button in their onscreen keyboard is up to you. If you can
    quickly search the dataset, it might be wise to display search results as the
    user types. This way they can quickly see the result set being whittled down to
    what they want.
  prefs: []
  type: TYPE_NORMAL
- en: If, however, it takes a long time to search, then it is better to wait until
    the user types what they want and then tells you when to search. Then you can
    take your time (don't forget to display some sort of notice that your app is thinking),
    and then display the results when the search is complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another common pattern when searching is the need to scope the search, as in
    the following pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Searching](img/9403_A_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, the buttons below the search bar are segmented buttons, something typical
    of iOS. There are equivalents for most platforms. If one of them is tapped, it
    is highlighted, and the search only occurs within the displayed scope.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, if the user tapped **To**, then the search would only occur
    for the **To** portion of each item.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to searching, there are also often requests to sort and filter
    the data as well. You can usually accommodate these by using a toolbar with the
    sort and filter buttons on it, and then display a menu listing the various options.
    For example, tapping a **Sort** button could display a menu of first name, last
    name, account number, and so on. There are various patterns that one could use
    to implement more complex sorting and filtering, but if possible, keep it simple.
  prefs: []
  type: TYPE_NORMAL
- en: Some things to keep in mind
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Often, the details are what matter. Here are some tips to help make sure you
    have not only a great-looking app, but a great-feeling app as well:'
  prefs: []
  type: TYPE_NORMAL
- en: Avoid novel or undiscoverable interactions. Or, if you do want to use such interactions,
    try to also provide a second discoverable method for achieving the same thing.
    One could argue that the slide menu a la Facebook could be considered novel, but
    should the gesture not be discovered, the button that triggers the menu is highly
    visible and likely to be tapped.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Respect your user's expectations of what UI elements and gestures do. At first
    this seems obvious; you wouldn't send an e-mail by clicking on a trashcan. That
    said, there are plenty of ways you can do things that the user didn't expect,
    even in a subtle manner. Your user's expectations are highly specific according
    to the platform, so following your platform's HIG will help out significantly
    in this area.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do blend in. By this I mean that your app should look like it belongs on your
    user's device. This means that your app should respect the HIG for the platform.
    It also means your app should give the appearance of being a native app. Failing
    to do so may cause your users to feel like your app is a second-class citizen
    on the device. By giving the appearance of being native, your app should also
    do its best to feel native – that is it should have speed and response close to
    that of a native app. (It may not always be easy, or even possible, on some platforms
    using PhoneGap. In this case, you should try to get as close as you can without
    impacting your project and its timeline.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be a perfectionist. By this I mean that you should make sure that all your objects
    align nicely, your textures blend seamlessly, images are scaled correctly (especially
    according to aspect ratio), and so on. This requires painstaking attention to
    detail, but in the end your app will look and feel better for it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be responsive. Whenever possible, avoid freezing the user interface. If you
    must freeze the UI, then put up an indicator to the user so they know their inputs
    will be ignored. When it comes to being responsive, this isn't simply being responsive
    to a tap on a button, but also with regards to scrolling performance. If an app
    scrolls in a herky-jerky fashion, the app will feel slow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sip your data. While your app may often be used on a Wi-Fi connection, don't
    forget about your users who may have to deal with a cellular connection instead.
    Not only might their connection itself be slower, but they are usually under pretty
    onerous data caps. Cache extensively. Avoid downloading what you've already downloaded.
    If it can be compressed, by all means, compress it. Alternatively, give your user
    an *out* – if your app is going to use a lot of data no matter what, you might
    want to let them disable the portions of your app that use a lot of data when
    on a cellular connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are only a few of the myriad design patterns available. When possible,
    do some research and see if there is a pattern for what you're trying to do in
    your app. Yes, sometimes, your app will require that you do something totally
    unique, but more often than not you'll find a successful pattern that many apps
    already use. Your app will be more usable, and your user will thank you for that.
    You'll also field fewer support calls about how to use your app.
  prefs: []
  type: TYPE_NORMAL
