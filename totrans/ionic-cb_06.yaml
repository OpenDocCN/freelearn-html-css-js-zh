- en: User Authentication and Push Notifications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户身份验证和推送通知
- en: 'In this chapter, we will cover the following tasks related to authenticating
    users, and register and receiving push notification messages:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖与身份验证用户、注册和接收推送通知消息相关的以下任务：
- en: Registering and authenticating users using Auth0
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Auth0注册和验证用户
- en: Building an iOS app to receive push notifications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个iOS应用以接收推送通知
- en: Building an Android app to receive push notifications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个Android应用以接收推送通知
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Tracking and engaging users are key features necessary for your app to grow.
    That means you should be able to register and authenticate users. Once the users
    start using the app, you also need to segment the users so that you can customize
    their interactions. Then, you can send push notifications to encourage users to
    revisit the app.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪和吸引用户是您应用增长的关键功能。这意味着您应该能够注册和验证用户。一旦用户开始使用应用，您还需要对用户进行细分，以便您可以定制他们的互动。然后，您可以发送推送通知来鼓励用户重新访问应用。
- en: 'There are two components that you need to use for your project, as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您的项目需要使用以下两个组件：
- en: '**Auth0**: Auth0 is a cloud-based authentication service. The whole idea is
    that you delegate authentication of your application to Auth0\. Auth0 supports
    many frameworks, including Ionic2+, and also supports many social providers for
    authentication such as Google and Facebook. On the top of that, they have excellent
    documentation.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Auth0**：Auth0是一个基于云的身份验证服务。整个想法是将您应用的认证委托给Auth0。Auth0支持许多框架，包括Ionic2+，并且支持许多用于身份验证的社会提供者，如Google和Facebook。更重要的是，他们拥有优秀的文档。'
- en: '**OneSignal**: OneSignal is a service that allows us to send the push notification
    to both iOS and Android. As a matter of fact, it supports other platforms such
    as Windows, Web Push Notifications, Amazon Fire, and so on. The best part is,
    in general, we need different code for adding push notifications. But because
    of Cordova and OneSignal''s abstract API, we only need to write push notification
    code once for both platforms.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OneSignal**：OneSignal是一个服务，允许我们向iOS和Android发送推送通知。实际上，它支持其他平台，如Windows、Web推送通知、Amazon
    Fire等。最好的部分是，通常我们为添加推送通知需要不同的代码。但由于Cordova和OneSignal的抽象API，我们只需为两个平台编写一次推送通知代码。'
- en: Registering and authenticating users using Auth0
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Auth0注册和验证用户
- en: '**Auth0** can provide all of the user management and authentication capabilities
    out of the box. There are lots of providers supported by Auth0\. Following are
    some famous providers that are supported by Auth0:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**Auth0**可以提供开箱即用的用户管理和身份验证功能。Auth0支持许多提供者。以下是Auth0支持的某些著名提供者：'
- en: Email/password
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件/密码
- en: Facebook
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Facebook
- en: Google
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google
- en: Twitter
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter
- en: Instagram
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Instagram
- en: LinkedIn
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LinkedIn
- en: GitHub
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub
- en: Depending on the app, you may not need to use all of these authentication methods.
    For example, it would make more sense to use a LinkedIn authentication for an
    app focusing on a working professional to narrow down the audiences who fit the
    user profile of the app.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用的不同，您可能不需要使用所有这些身份验证方法。例如，对于专注于职业人士的应用，使用LinkedIn身份验证可能更有意义，以缩小符合应用用户画像的受众范围。
- en: 'In this chapter, we will try to simplify the authentication concept as much
    as possible. You will learn how to do the following things:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将尽可能简化身份验证概念。您将学习如何执行以下操作：
- en: Registering a new user
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册新用户
- en: Logging in and logging out a user
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户登录和登出
- en: Showing a user's profile information
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示用户的个人资料信息
- en: Getting ready
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need the device to test the app because we are using Cordova plugins for
    authentication, which requires either device or simulator to run the app.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要设备来测试应用，因为我们使用Cordova插件进行身份验证，这需要设备或模拟器来运行应用。
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will do it in two ways:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将有两种方法：
- en: Creating an app in the Auth0 dashboard
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Auth0仪表板中创建应用
- en: Coding our Ionic app
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写我们的Ionic应用
- en: Creating our app in the Auth0 dashboard
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Auth0仪表板中创建我们的应用
- en: 'In this section, we are going to learn how we can create an app in the Auth0
    dashboard. Do the following steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何在Auth0仪表板中创建应用。请按照以下步骤操作：
- en: Go to [https://auth0.com](https://auth0.com) and create an account there.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://auth0.com](https://auth0.com)并创建账户。
- en: After creating an account, it will open Auth0 dashboard. There is a New Application
    button. Click on it, and it will open the following dialog:![](img/e8c4129a-4228-4511-888b-5fd5cb203982.png)Choose
    a Name for your client and select the client type as Native.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建账户后，它将打开 Auth0 仪表板。有一个“新建应用”按钮。点击它，将打开以下对话框![图片](img/e8c4129a-4228-4511-888b-5fd5cb203982.png)为你的客户端选择一个名称，并将客户端类型选择为
    Native。
- en: 'Now, in the side menu Dashboard, click on Applications and select the Application
    that you created. You will see the following page:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在侧边菜单仪表板中，点击“应用”并选择你创建的应用。你将看到以下页面：
- en: '![](img/8cfb6246-1615-496b-8d1f-cd26d8c434da.png)We need Domain and Client
    ID later in the app, so save them somewhere.'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/8cfb6246-1615-496b-8d1f-cd26d8c434da.png)在应用中稍后需要域名和客户端 ID，所以请将它们保存在某个地方。'
- en: On the same page, in the Allowed Callback URLs input, add `YOUR_PACKAGE_ID://YOUR_DOMAIN/cordova/YOUR_PACKAGE_ID/callback`.
    Replace YOUR_PACKAGE_ID with the package ID of your app, and `*YOUR_DOMAIN*` is
    the domain that you saved in the previous step.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一页面上，在“允许的回调 URL”输入中添加 `YOUR_PACKAGE_ID://YOUR_DOMAIN/cordova/YOUR_PACKAGE_ID/callback`。将
    `YOUR_PACKAGE_ID` 替换为你的应用包 ID，`*YOUR_DOMAIN*` 是你在上一步中保存的域名。
- en: Also, in the Allowed Origins(CORS) input, add `file://`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，在“允许的来源（CORS）”输入中添加 `file://`。
- en: With the latest Ionic, they are using WKWebView plugin by default, which servers
    the app from a local web server at [https://localhost:8080](https://localhost:8080).
    So you have to add it too in the Allowed Origin(CORS) section. If you are not
    going to use WKWebView, you don't have to add it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最新的 Ionic，他们默认使用 WKWebView 插件，该插件从本地 Web 服务器 [https://localhost:8080](https://localhost:8080)
    为应用提供服务。因此，你也需要在“允许的来源（CORS）”部分中添加它。如果你不打算使用 WKWebView，则无需添加。
- en: Hit Save Changes.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“保存更改”。
- en: Let's code
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们开始编码
- en: 'Now that we have already created our app in the Auth0 dashboard, it''s time
    to write the code for it. Take the following steps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经在 Auth0 仪表板中创建了我们的应用，现在是时候为其编写代码了。请按照以下步骤操作：
- en: 'Now, create a new `MySimpleAuth` app using the `blank` template, as shown in
    the following code, and go to the `MySimpleAuth` folder:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用 `blank` 模板创建一个新的 `MySimpleAuth` 应用，如下所示，并进入 `MySimpleAuth` 文件夹：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install `auth0.js` and `auth0/cordova` npm packages, which are required for
    Auth0 authentication:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `auth0.js` 和 `auth0/cordova` npm 包，这些包是 Auth0 认证所必需的：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We also need to install the following `Cordova` plugin:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要安装以下 `Cordova` 插件：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should change `{YOUR_PACKAGE_ID}` to your app's package ID, and `{YOUR_DOMAIN}`
    to your domain from Auth0 that you saved earlier in the third step.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该将 `{YOUR_PACKAGE_ID}` 替换为你的应用包 ID，并将 `{YOUR_DOMAIN}` 替换为你在第三步中保存的 Auth0 域名。
- en: 'You also have to add the following line to `config.xml`:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还必须在 `config.xml` 中添加以下行：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a file at `./src/providers/auth/auth.ts` with the following code:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `./src/providers/auth/auth.ts` 创建一个文件，并使用以下代码：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Make sure to use your own value for `clientID`, `domain`, and `packageIdentifier`
    for `auth0Config` in `auth.ts`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在 `auth.ts` 中的 `auth0Config` 使用你自己的 `clientID`、`domain` 和 `packageIdentifier`
    值。
- en: 'Open and edit `./src/app/app.module.ts` with the following code:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑 `./src/app/app.module.ts`，使用以下代码：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Edit and replace `./src/pages/home/home.html` with the following code:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑并替换 `./src/pages/home/home.html` 为以下代码：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These are just your basic `login` and `logout` templates. It's all in a single
    page to keep things simple.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是基本的 `login` 和 `logout` 模板。所有内容都在一个页面上，以保持简单。
- en: 'Open and edit `./src/pages/home/home.ts` with the following code:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑 `./src/pages/home/home.ts`，使用以下代码：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then run this in the device using the following command in CLI:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在设备上使用以下 CLI 命令运行此命令：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理
- en: There are certain things that we need to know before digging more into code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入代码之前，有一些事情我们需要了解。
- en: Auth0 uses **JWT** (**JSON Web Token**), which is a compact way of sharing information
    between two parties via JSON. In simple terms, when the user is authenticated,
    Auth0 sends us JWTs, which have information about the user and also allow the
    user to access authenticated routes/URLs. Auth0 sends back an `access_token`,
    which is required for accessing authenticated routes, and it also sends us an
    `id_token`, which contains the user's profile information such as their username,
    profile picture, and so on. Both of these tokens have a short lifespan and then
    they expire. But along with that, Auth0 also sends us a `refresh_token`, which
    has a long expiry date and can be used to get a new `id_token` and `access_token`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Auth0使用**JWT**（**JSON Web Token**），这是一种通过JSON在双方之间共享信息的紧凑方式。简单来说，当用户认证成功后，Auth0会发送JWT给我们，其中包含有关用户的信息，并允许用户访问受保护的路线/URL。Auth0会发送一个`access_token`，这是访问受保护路线所必需的，它还会发送一个`id_token`，其中包含用户的个人资料信息，如用户名、个人资料图片等。这两个令牌都有短暂的生存期，然后它们会过期。但是，除了这些，Auth0还会发送一个`refresh_token`，它有一个较长的有效期，可以用来获取新的`id_token`和`access_token`。
- en: We configured the Callback URL in our app. This is the URL where Auth0 redirects
    the user after authentication. A callback URL includes the app's package ID, and
    that's why we need to mention it while installing the plugin. We also need to
    add `file://` in **CORS** (**Cross-Origin Resource Sharing**), because the Ionic
    app makes an HTTP request from `file://` origin.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的应用中配置了回调URL。这是Auth0在认证后重定向用户的URL。回调URL包括应用的包ID，这就是为什么在安装插件时我们需要提到它。我们还需要在**CORS**（**跨源资源共享**）中添加`file://`，因为Ionic应用会从`file://`源发起HTTP请求。
- en: If you are using Ionic's WKWebView. It runs a local webserver inside the app.
    So you have to whitelist http://localhost:8080 for CORS in Auth0 Dashboard
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Ionic的WKWebView。它会在应用内部运行一个本地web服务器。因此，您必须在Auth0仪表板中将http://localhost:8080列入CORS白名单。
- en: 'Most of the work is in `AuthService`. AuthService allows us to log in/log out.
    It uses the `auth0.js` and `auth0/cordova` library for authentication. First,
    we are creating an `auth0Config` object. This object looks like the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分工作都在`AuthService`中。AuthService允许我们登录/登出。它使用`auth0.js`和`auth0/cordova`库进行认证。首先，我们创建了一个`auth0Config`对象。这个对象看起来如下所示：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, you can see that `clientID` and `clientId` have the same
    value. It is the value that we saved earlier. The first is used by `auth0.js`,
    and the latter is used by `auth0/cordova`.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前面的代码中，您可以看到`clientID`和`clientId`具有相同的值。这就是我们之前保存的值。前者由`auth0.js`使用，后者由`auth0/cordova`使用。
- en: The `domain` is also our **Auth0 Domain** used for authentication. We saved
    it earlier when we created our app on the Auth0 dashboard.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domain`也是我们用于认证的**Auth0域**。我们在创建Auth0仪表板上的应用时已经保存了它。'
- en: '`callbackURL` will always be `location.href`.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callbackURL`将始终是`location.href`。'
- en: '`packageIdentifier` is the package ID of your app, same as in your `config.xml`.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packageIdentifier`是您应用的包ID，与您的`config.xml`中相同。'
- en: We are then passing this config to both `Auth0.WebAuth` constructor function,
    and `Auth0Cordova` constructor function.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将这个配置传递给`Auth0.WebAuth`构造函数和`Auth0Cordova`构造函数。
- en: In the `login` function, we initiate authentication by calling Auth0Cordova's
    `authorize` function. It is important to notice that we are passing an `option`
    object with `scope` key into an `authorize` function as the parameter. This scope
    key tells Auth0 to return certain data like an email and profile after authentication
    is completed. We are also passing a callback function as the second parameter,
    which fires when authentication is completed. When authentication is initiated,
    Auth0Cordova opens the OS browser and redirects us to our Auth0 Domain. Here,
    the user can log in and register. By default, email/password authentication is
    configured for the app. But you can enable Google, Facebook, and GitHub authentication,
    and they will also appear along with email/password authentication. When the user
    is authenticated, the browser redirects us to our app via the **Custom URL Scheme.**
    Then, we store `idToken` and `accessToken` in **localstorage** and also get profile
    information using the `auth0.client.userInfo` function. Then later in the login
    method, we also save this information to **localstorage**.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在`login`函数中，我们通过调用Auth0Cordova的`authorize`函数来启动认证。需要注意的是，我们将带有`scope`键的`option`对象作为参数传递给`authorize`函数。这个`scope`键告诉Auth0在认证完成后返回某些数据，如电子邮件和配置文件。我们还传递了一个回调函数作为第二个参数，该函数在认证完成后触发。当启动认证时，Auth0Cordova打开操作系统浏览器并将我们重定向到我们的Auth0域。在这里，用户可以登录和注册。默认情况下，应用已配置为电子邮件/密码认证。但您也可以启用Google、Facebook和GitHub认证，它们也会与电子邮件/密码认证一起出现。当用户认证成功后，浏览器通过**自定义URL方案**将我们重定向到我们的应用。然后，我们在**localStorage**中存储`idToken`和`accessToken`，并使用`auth0.client.userInfo`函数获取配置文件信息。然后在登录方法中，我们也将这些信息保存到**localStorage**中。
- en: In the `logout` function, we are just removing `idToken`, `accessToken`, token
    Expiration information, and Profile data from localstorage and also resetting
    the AuthService class.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在`logout`函数中，我们只是从localStorage中删除`idToken`、`accessToken`、令牌过期信息和配置文件数据，并重置AuthService类。
- en: In `home.html`, we show a Log In button when the user is not authenticated;
    when the user is authenticated, we show a profile picture and the username of
    the user, along with the LOGOUT button. These `login` and `logout` methods in
    `home.ts` call `AuthService`'s login and logout function respectively.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在`home.html`中，当用户未认证时，我们显示一个登录按钮；当用户认证后，我们显示用户的配置文件图片和用户名，以及LOGOUT按钮。这些在`home.ts`中的`login`和`logout`方法分别调用`AuthService`的登录和注销函数。
- en: 'Here is how our app looks when the user is not authenticated:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用户未认证时我们的应用看起来是这样的：
- en: '![](img/30cca472-7afe-4fa0-8914-c4e5dced4754.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/30cca472-7afe-4fa0-8914-c4e5dced4754.png)'
- en: 'When the user clicks on, it opens a web page for authenticating the user. It
    looks like the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击时，它打开一个用于认证用户的网页。它看起来如下：
- en: '![](img/8a0d6940-4d67-4ba3-aa40-92e7709253d2.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8a0d6940-4d67-4ba3-aa40-92e7709253d2.png)'
- en: 'Here is how our app looks when the user is authenticated:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用户认证后我们的应用看起来是这样的：
- en: '![](img/bb01a7f3-3ce1-47b2-807c-3823b3079537.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bb01a7f3-3ce1-47b2-807c-3823b3079537.png)'
- en: There's more...
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can secure your custom backend using Auth0, and access the backend inside
    Ionic app using the `angular2-jwt` library. Take a look at [https://github.com/auth0/angular2-jwt](https://github.com/auth0/angular2-jwt).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Auth0来保护您的自定义后端，并使用`angular2-jwt`库在Ionic应用中访问后端。请参阅[https://github.com/auth0/angular2-jwt](https://github.com/auth0/angular2-jwt)。
- en: Building an iOS app to receive push notifications
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建iOS应用以接收推送通知
- en: A **push notification** is an important feature to engage users frequently,
    especially when the users are not using the app. Many people download an app,
    but only open it a few times. If you send them a push notification message, it
    will encourage them to open the app to get involved in a new activity. Implementing
    push notifications is very complex if you have to build everything from scratch;
    however, OneSignal makes it very simple. A push notification provider is a server
    that can communicate with the **Apple Push Notification service** (**APNs**),
    or Google's **Firebase Cloud Messaging** (**FCM**). You can set up your own provider
    server using existing open sources, but you have to maintain this server separately
    and keep up with potential changes from the APN APIs.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**推送通知**是一个重要的功能，可以频繁地吸引用户，尤其是在用户没有使用应用的时候。许多人下载了应用，但只打开了几次。如果您向他们发送推送通知消息，这将鼓励他们打开应用参与新的活动。如果您必须从头开始构建一切，实现推送通知非常复杂；然而，OneSignal使它变得非常简单。推送通知提供者是一个可以与**苹果推送通知服务（APNs**）或谷歌的**Firebase云消息（FCM**）通信的服务器。您可以使用现有的开源软件设置自己的提供者服务器，但您必须单独维护此服务器并跟上APN
    API的潜在变化。'
- en: 'In this section, you will learn how to do the following things:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习以下内容：
- en: Set up OneSignal for iOS push notification
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为iOS推送通知设置OneSignal
- en: Configure an iOS app, certificates (app and push), and provisioning profile
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置iOS应用、证书（应用和推送）以及配置文件
- en: Write code to receive push notifications
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写代码以接收推送通知
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: It's required to have a physical iOS device available in order to test for notification
    messages.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试通知消息，需要有一个可用的物理iOS设备。
- en: You must also register for the **A****pple Developer Program (ADP**) in order
    to access [https://developer.apple.com](https://developer.apple.com) and [https://itunesconnect.apple.com](https://itunesconnect.apple.com),
    because these websites will require an approved account.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您还必须注册**苹果开发者计划（ADP**），以便访问[https://developer.apple.com](https://developer.apple.com)和[https://itunesconnect.apple.com](https://itunesconnect.apple.com)，因为这些网站将需要经过批准的账户。
- en: In addition to that, you must have an Apple Mac and Xcode installed.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还需要拥有苹果Mac和已安装的Xcode。
- en: How to do it
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'You need the device to see the push notification. We will be doing this in
    multiple steps:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要设备来查看推送通知。我们将分多步进行：
- en: Creating an Apple Signing Certificate
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建苹果签名证书
- en: Adding devices and creating a provisioning profile
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加设备和创建配置文件
- en: Creating push certificates for use in the OneSignal dashboard
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为OneSignal仪表板创建推送证书
- en: Configuring app in OneSignal dashboard
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在OneSignal仪表板中配置应用
- en: Coding the application
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写应用程序代码
- en: Let's create an Apple signing certificate
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们创建一个苹果签名证书
- en: 'Follow the instructions to create apple signging certficiates:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 按照说明创建苹果签名证书：
- en: Visit the **Apple Developer** website at [https://developer.apple.com](https://developer.apple.com)
    and log in with your credentials.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问**苹果开发者**网站[https://developer.apple.com](https://developer.apple.com)并使用您的凭据登录。
- en: 'Click on Certificates, Identifiers &amp; Profiles, as illustrated in the following
    screenshot:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**证书、标识符和配置文件**，如图所示：
- en: '![](img/189f60ec-21a6-4832-87ca-2e3e25b2a0fd.png)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/189f60ec-21a6-4832-87ca-2e3e25b2a0fd.png)'
- en: Select the correct device platform you are targeting. In this case, it will
    be iOS, tvOS, watchOS as shown in the following screenshot:![](img/69fccd5c-b67a-4d78-acc4-ae1e4875a253.png)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您要针对的正确设备平台。在本例中，它将是iOS、tvOS、watchOS，如下面的截图所示：![](img/69fccd5c-b67a-4d78-acc4-ae1e4875a253.png)
- en: 'Navigate to **Identifiers** | **App IDs** to create an app ID, as illustrated
    in the following screenshot:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**标识符** | **应用ID**以创建应用ID，如图所示：
- en: '![](img/e9b70cb7-7fd3-4182-9af3-ff731012c199.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9b70cb7-7fd3-4182-9af3-ff731012c199.png)'
- en: 'Click on the plus (**+**) button in the top-right corner of the screen, as
    shown in the following screenshot:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕右上角的加号（**+**），如图所示：
- en: '![](img/512a5a81-883e-4c5a-bc5e-af233a243372.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/512a5a81-883e-4c5a-bc5e-af233a243372.png)'
- en: 'Fill in the form to register your app ID. The `Name` field could be anything.
    You can provide the name of your project (that is, `MyiOSPush`) to keep things
    simple, as shown:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写表格以注册您的应用ID。`名称`字段可以是任何内容。您可以为您的项目（即`MyiOSPush`）提供名称以保持简单，如图所示：
- en: '![](img/810b191b-deda-4f9d-bec9-458c501f56e9.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/810b191b-deda-4f9d-bec9-458c501f56e9.png)'
- en: 'The important part that you need to do correctly here is the **Bundle ID**,
    because it must match your bundle identifier in the `./config.xml` file or Xcode,
    as illustrated:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里您需要正确完成的重要部分是**包标识符**，因为它必须与`./config.xml`文件或Xcode中的包标识符匹配，如图所示：
- en: '![](img/6e16669b-0f5d-4bed-9b9d-dfc7d28c12fd.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6e16669b-0f5d-4bed-9b9d-dfc7d28c12fd.png)'
- en: 'To enable push notifications, you need to check the **Push Notifications**
    service on the following page:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启用推送通知，您需要在以下页面上的**推送通知**服务上勾选：
- en: '![](img/564d0e89-2135-4c03-b57a-2e6646f35e60.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/564d0e89-2135-4c03-b57a-2e6646f35e60.png)'
- en: 'Select **Register**, as shown:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**注册**，如图所示：
- en: '![](img/fcabbfc8-002a-4e51-9294-0300e1e6b061.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![输入信息](img/fcabbfc8-002a-4e51-9294-0300e1e6b061.png)'
- en: 'Select **Done** to complete the step to create an app ID, as follows:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**完成**以完成创建应用ID的步骤，如下所示：
- en: '![](img/94b8ba8b-9319-44d7-b432-4ce6f654462a.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![加号按钮](img/94b8ba8b-9319-44d7-b432-4ce6f654462a.png)'
- en: 'To start with certificate creation, you will need to generate a certificate
    signing request file locally on your Mac OSX using **Keychain Access**. Navigate
    to the Keychain Access in the top-left menu, and navigate to Certificate Assistant
    | Request a Certificate From a Certificate Authority..., as illustrated:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始创建证书，您需要在您的Mac OSX上使用**钥匙串访问**生成证书签名请求文件。在左上角菜单中导航到钥匙串访问，然后导航到证书助手 | 从证书颁发机构请求证书...，如图所示：
- en: '![](img/b3953ec7-f9ce-487f-b163-67bd7742e677.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![完成按钮](img/b3953ec7-f9ce-487f-b163-67bd7742e677.png)'
- en: Enter your User Email Address and Common Name. Leave the CA Email Address field
    blank and check Saved to disk, as shown:![](img/e204b005-ef88-41be-a30a-b428546a89a8.png)
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的用户电子邮件地址和通用名称。留空CA电子邮件地址字段并勾选保存到磁盘，如图所示：![输入信息](img/e204b005-ef88-41be-a30a-b428546a89a8.png)
- en: Save your `CertificateSigningRequest.certSigningRequest` file, as follows:![](img/34b57ad2-3b58-4973-b3ad-e440f8562772.png)
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的`CertificateSigningRequest.certSigningRequest`文件，如下所示：![保存文件](img/34b57ad2-3b58-4973-b3ad-e440f8562772.png)
- en: Navigate to the **Apple Developer** website, and navigate to Certificates |
    All, as shown:![](img/d4b8d8cf-0c7f-4b1c-bf30-bbe17480bf92.png)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**苹果开发者**网站，然后导航到证书 | 所有，如图所示：![苹果开发者网站](img/d4b8d8cf-0c7f-4b1c-bf30-bbe17480bf92.png)
- en: Click on the plus (**+**) button in the top-right corner to start creating a
    certificate,
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右上角点击加号（**+**）按钮以开始创建证书，
- en: as follows:![](img/724946ee-fa34-45f0-8982-0989d7bf8e95.png)
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下所示：![示例](img/724946ee-fa34-45f0-8982-0989d7bf8e95.png)
- en: Now, you just have to go through the steps on the website to fill out the necessary
    information. In this example, you will select the Development version instead
    of Production, as illustrated:![](img/ef1ebdb8-e041-47dd-b984-f8fc8ecfbac9.png)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您只需按照网站上的步骤填写必要的信息。在此示例中，您将选择开发版本而不是生产版本，如图所示：![选择开发版本](img/ef1ebdb8-e041-47dd-b984-f8fc8ecfbac9.png)
- en: Click on the Continue button, as follows, to proceed:![](img/47496f99-10a3-4845-aef6-29e6756b61a0.png)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击继续按钮，操作如下：![继续按钮](img/47496f99-10a3-4845-aef6-29e6756b61a0.png)
- en: Click on the Choose File... button, as shown in the following screenshot, to
    upload your signing request file that you saved earlier:![](img/8cb24d68-5fb7-4bed-9fb0-12cd07886fff.png)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击如图所示的“选择文件...”按钮，上传您之前保存的签名请求文件：![选择文件按钮](img/8cb24d68-5fb7-4bed-9fb0-12cd07886fff.png)
- en: Click on the Continue button, as illustrated, to proceed:![](img/6d68fb1b-cbf5-4895-8195-52acc72ca269.png)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击如图所示的继续按钮，以继续操作：![继续按钮](img/6d68fb1b-cbf5-4895-8195-52acc72ca269.png)
- en: Click on the Download button to download your iOS Development certificate file:![](img/f3ee9595-ccba-4ce1-b42b-15a600155427.png)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下载按钮以下载您的iOS开发证书文件：![下载按钮](img/f3ee9595-ccba-4ce1-b42b-15a600155427.png)
- en: Click on the `.cer` file you downloaded, as shown so that it can be imported
    to Keychain Access:![](img/e1ef7063-9090-45d6-8b7c-8d519ed1275b.png)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击您下载的`.cer`文件，如图所示，以便将其导入钥匙串访问：![导入证书](img/e1ef7063-9090-45d6-8b7c-8d519ed1275b.png)
- en: It is very important to remember that you have to install the signing certificate
    on the Mac because when you will build the app, it will be used to sign the app.
    Just double-click the downloaded `.cer` file to install it.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的是要记住，您必须在Mac上安装签名证书，因为当您构建应用时，它将用于签名应用。只需双击下载的`.cer`文件即可安装它。
- en: Adding a device and creating the provisioning profile
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加设备和创建配置文件
- en: If you need to push the app to a specific device, you must register the device.
    Go to Devices | All:![](img/28a7a9cb-2753-4f43-a24e-f707a02b2652.png)
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您需要将应用推送到特定设备，您必须注册该设备。转到设备 | 所有设备：![设备注册](img/28a7a9cb-2753-4f43-a24e-f707a02b2652.png)
- en: Click on the plus (**+**) button:![](img/f31dfd0b-1eda-46d4-b0b6-81426e905b6e.png)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击加号（**+**）按钮：![加号按钮](img/f31dfd0b-1eda-46d4-b0b6-81426e905b6e.png)
- en: Provide the device a UDID and save to register the device. Observe the following
    screenshot:![](img/8da506f1-d400-4620-a8b8-95c3073af1f2.png)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为设备提供一个UDID并保存以注册设备。观察以下截图:![](img/8da506f1-d400-4620-a8b8-95c3073af1f2.png)
- en: You'll need a provisioning profile. Navigate to Provisioning Profiles | All:![](img/7e947195-f5b2-412b-bb7b-69509b2ffeb2.png)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要一个配置文件。导航到配置文件 | 所有：![](img/7e947195-f5b2-412b-bb7b-69509b2ffeb2.png)
- en: Click on the plus (**+**) button:![](img/0c8f45ac-a17f-48b7-bb63-89a760f8a18b.png)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击加号（**+**）按钮:![](img/0c8f45ac-a17f-48b7-bb63-89a760f8a18b.png)
- en: Select iOS App Development as your provisioning profile, since this example
    is for the development version only:![](img/ab64001d-c36b-477c-9c80-72a8f0f7d5be.png)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 iOS 应用开发作为你的配置文件，因为此示例仅针对开发版本：
- en: 'Click on the Continue button:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击继续按钮：
- en: '![](img/94a9f328-b9f5-4629-a095-4587741fa569.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94a9f328-b9f5-4629-a095-4587741fa569.png)'
- en: 'Select the correct App ID in the drop-down menu, and save to finalize your
    provisioning profile creation:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在下拉菜单中选择正确的应用程序标识符，并保存以完成配置文件创建:'
- en: '![](img/bf178e13-acb5-4ed4-b851-e4937f4a19a3.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf178e13-acb5-4ed4-b851-e4937f4a19a3.png)'
- en: 'Click on the Continue button:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击继续按钮：
- en: '![](img/d7d1596b-a0f0-4d54-af35-e20fd7d4f1ac.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7d1596b-a0f0-4d54-af35-e20fd7d4f1ac.png)'
- en: 'Select the iOS Development certificate you created earlier, as shown in the
    following screenshot:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你之前创建的 iOS 开发证书，如图所示：
- en: '![](img/729f9d7f-cf74-42d9-acca-8337e810d90c.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/729f9d7f-cf74-42d9-acca-8337e810d90c.png)'
- en: 'As illustrated, select at least one device that you want to be able to install
    the app for testing:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如上图所示，选择至少一个你想要安装应用程序进行测试的设备：
- en: '![](img/f1b2b79d-7bdf-4a57-9676-52b5937b87f5.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1b2b79d-7bdf-4a57-9676-52b5937b87f5.png)'
- en: Provide a **Profile Name** to your provisioning profile, as shown:![](img/08b92673-f21b-4388-a707-50dad9143990.png)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的配置文件提供一个**配置文件名称**，如图所示:![](img/08b92673-f21b-4388-a707-50dad9143990.png)
- en: 'Click on the Download button to download the provisioning profile file (that
    is, `MyiOSPush_Provisioning_Profile.mobileprovision`):'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击下载按钮以下载配置文件文件（即 `MyiOSPush_Provisioning_Profile.mobileprovision`）:'
- en: '![](img/99d1e0d0-8bcf-4d0d-bfcb-7ce2c1987638.png)'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/99d1e0d0-8bcf-4d0d-bfcb-7ce2c1987638.png)'
- en: Click on `MyiOSPush_Provisioning_Profile.mobileprovision`, which you just downloaded,
    in order to import it into Xcode:![](img/ac50f4a8-caa3-42ac-9cfe-68f4b4725abb.png)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击你刚刚下载的 `MyiOSPush_Provisioning_Profile.mobileprovision`，以便将其导入到 Xcode 中:![](img/ac50f4a8-caa3-42ac-9cfe-68f4b4725abb.png)
- en: This step is very important, because if you don't import it into Xcode, your
    app cannot be built successfully. If your app failed to build because of an invalid
    provisioning profile, it's best to check the provisioning profile status in the
    Developer Console.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤非常重要，因为如果你没有将其导入到 Xcode 中，你的应用程序将无法成功构建。如果你的应用程序因为无效的配置文件而无法构建，最好在开发者控制台中检查配置文件的状态。
- en: Creating a push certificate
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建推送证书
- en: 'Follow the steps to create push certificates for iOS application:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 按照步骤为 iOS 应用程序创建推送证书：
- en: To enable the Push Notification feature, you must request a Push Certificate,
    which is different from the app certificate. Select the App ID that you created
    earlier (that is, `MyiOSPush`):![](img/f2dfc9bf-df8f-469e-9760-3f0ef2e6ad7c.png)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启用推送通知功能，你必须请求推送证书，这与应用程序证书不同。选择你之前创建的应用程序标识符（即 `MyiOSPush`）:![](img/f2dfc9bf-df8f-469e-9760-3f0ef2e6ad7c.png)
- en: Click on the Edit button at the bottom of the page:![](img/f34b3df3-d84a-4b09-833e-b9c05f85ac6a.png)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的编辑按钮:![](img/f34b3df3-d84a-4b09-833e-b9c05f85ac6a.png)
- en: The Push Notifications must show the Configurable state. Otherwise, your app
    is not available for push notifications.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 推送通知必须显示可配置状态。否则，你的应用程序将无法使用推送通知。
- en: 'Click on the Create Certificates... button under the **Push Notifications |
    Development SSL Certificate** section:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在 **推送通知 | 开发 SSL 证书**部分下点击创建证书...按钮:'
- en: '![](img/e7f7a436-9165-465f-8c01-9ad2b0759e47.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7f7a436-9165-465f-8c01-9ad2b0759e47.png)'
- en: 'You will be taken to a new page to create your CSR file. Click on the Continue
    button:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将被带到新页面以创建你的 CSR 文件。点击继续按钮：
- en: '![](img/be1e422c-ab7d-4231-a06f-32d390547458.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be1e422c-ab7d-4231-a06f-32d390547458.png)'
- en: 'Click on the Choose File... button:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击选择文件...按钮：
- en: '![](img/4f69b393-e402-46a6-9882-d2848483eb0d.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f69b393-e402-46a6-9882-d2848483eb0d.png)'
- en: 'Locate the `CertificateSigningRequest.certSigningRequest` file that you created
    earlier:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位你之前创建的 `CertificateSigningRequest.certSigningRequest` 文件：
- en: '![](img/21fe30d5-bc16-40ca-bfe8-905681719851.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21fe30d5-bc16-40ca-bfe8-905681719851.png)'
- en: You must upload the same `.certSigningRequest` file as you did for the app certificate.
    Otherwise, your app will not receive push notifications, and it's very hard to
    debug.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须上传与应用证书相同的 `.certSigningRequest` 文件。否则，您的应用将无法接收推送通知，调试起来非常困难。
- en: 'Click on the Continue button:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击继续按钮：
- en: '![](img/6a3c48aa-4a9a-48cf-a4e1-150cb3b42eb0.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a3c48aa-4a9a-48cf-a4e1-150cb3b42eb0.png)'
- en: 'Click on the Download button to download the certificate file. You can name
    it `aps_certificate.cer` to avoid overwriting to the earlier `.cer` file:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下载按钮下载证书文件。您可以将其命名为 `aps_certificate.cer` 以避免覆盖之前的 `.cer` 文件：
- en: '![](img/5d77d4a4-f945-40cd-a1c5-910b872f6d81.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d77d4a4-f945-40cd-a1c5-910b872f6d81.png)'
- en: 'Once your `.cer` file is downloaded, you need to click on it to import it to
    **Keychain Access**:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完 `.cer` 文件后，您需要点击它将其导入到 **钥匙串访问**：
- en: '![](img/de2a67f9-393e-4fa4-8d87-d6a2aabca780.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de2a67f9-393e-4fa4-8d87-d6a2aabca780.png)'
- en: 'Locate the new push services certificate in Keychain Access and select it,
    as illustrated in the following screenshot:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在钥匙串访问中找到新的推送服务证书并选择它，如图所示：
- en: '![](img/265ba748-1788-4c52-a989-dee7750310bd.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/265ba748-1788-4c52-a989-dee7750310bd.png)'
- en: 'Right-click on the certificate and select Export:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击证书并选择导出：
- en: '![](img/dfdd9afe-1e19-487c-af1e-e45586dc67c9.png)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/dfdd9afe-1e19-487c-af1e-e45586dc67c9.png)'
- en: 'Give it a new name to avoid overwriting it to the app certificate. This process
    is, basically, to convert from a `.cer` to `.p12` file for OneSignal:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给它一个新的名称以避免覆盖应用证书。这个过程基本上是将 `.cer` 文件转换为 `.p12` 文件用于 OneSignal：
- en: '![](img/7ef57e72-8452-4587-a4cf-b95684daf287.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ef57e72-8452-4587-a4cf-b95684daf287.png)'
- en: Provide a password for this `.p12` file to protect it:![](img/1c53f8e6-abbb-473e-aa14-3db591775edb.png)
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此 `.p12` 文件提供密码以保护它：![](img/1c53f8e6-abbb-473e-aa14-3db591775edb.png)
- en: A password for the `.p12` file is not mandatory for OneSignal, but it is in
    the best interest to secure it.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 OneSignal，`.p12` 文件的密码不是必需的，但出于最佳安全考虑，最好保护它。
- en: Now let's configure OneSignal
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在，让我们配置 OneSignal
- en: 'Follow the below steps to configure OneSignal for sending push notifications:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤配置 OneSignal 以发送推送通知：
- en: Go to [https://onesignal.com](https://onesignal.com) and create an account.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://onesignal.com](https://onesignal.com) 并创建一个账户。
- en: 'In the dashboard, click on Add a new app. You will see the following dialog:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仪表板中，点击“添加新应用”。您将看到以下对话框：
- en: '![](img/b3a9ea6a-07ca-45e3-9ba3-66181649f1ba.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3a9ea6a-07ca-45e3-9ba3-66181649f1ba.png)'
- en: 'Fill it with the name that you want and click on Create. It will open the following
    dialog:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填入您想要的名称并点击创建。它将打开以下对话框：
- en: '![](img/ca40af39-a8cc-4dd5-9e27-887215c920fa.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca40af39-a8cc-4dd5-9e27-887215c920fa.png)'
- en: 'Select **Apple iOS** and Hit Next. You will see the following:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Apple iOS** 并点击下一步。您将看到以下内容：
- en: '![](img/6580cb88-b414-4da6-afed-ef7260c802e7.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6580cb88-b414-4da6-afed-ef7260c802e7.png)'
- en: Select Upload optional sandbox certificate and upload the `.p12` file for the
    **push certificate** that you created earlier. Also, fill in the password for
    the `.p12` file. Then hit Save.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择上传可选沙盒证书并上传您之前创建的 **推送证书** 的 `.p12` 文件。同时，填写 `.p12` 文件的密码。然后点击保存。
- en: 'Now in the top main menu, click on Keys &amp; ID. You will see OneSignal App
    ID, as shown below:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在顶部主菜单中，点击“密钥与ID”。您将看到 OneSignal 应用 ID，如下所示：
- en: '![](img/80f75dd8-6954-4fe0-aa73-7b87d35ebd43.png)'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/80f75dd8-6954-4fe0-aa73-7b87d35ebd43.png)'
- en: Note down the OneSignal App ID somewhere; we need this to configure our app.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 将 OneSignal 应用 ID 记录下来；我们需要这个信息来配置我们的应用。
- en: Let's code
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们开始编码
- en: 'Follow the below steps to create the example app:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建示例应用：
- en: 'Now, create a new `MyiOSPush` app using the `blank` template, as shown, and
    go to the `MyiOSPush` folder:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用 `blank` 模板创建一个新的 `MyiOSPush` 应用，如图所示，并转到 `MyiOSPush` 文件夹：
- en: '[PRE10]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Install the Cordova plugin and **Ionic Native** wrapper for **OneSignal**:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Cordova 插件和 **Ionic Native** 包装器以支持 **OneSignal**：
- en: '[PRE11]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We need to add this `ionic-native` plugin to `app.module.ts`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将此 `ionic-native` 插件添加到 `app.module.ts`。
- en: 'We also need to install `cocoapods`. Go to **Terminal**, and install it as
    follows:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要安装 `cocoapods`。转到 **终端**，并按照以下方式安装：
- en: '[PRE12]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Open and edit `./src/app/app.module.ts` with the following content:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容打开并编辑 `./src/app/app.module.ts`：
- en: '[PRE13]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You need to modify your home page code in order to receive notification messages.
    Open and edit `./src/pages/home/home.html` and paste the given code:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要修改主页代码以接收通知消息。打开并编辑 `./src/pages/home/home.html` 并粘贴给定的代码：
- en: '[PRE14]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Replace the content of the `home.ts` file, in the same folder, with the following
    code:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将同一文件夹中的 `home.ts` 文件的内容替换为以下代码：
- en: '[PRE15]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the `startInit` function, you have to pass your own **OneSignal App ID**,
    which you created earlier.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `startInit` 函数中，您必须传递您自己的 **OneSignal 应用 ID**，这是您之前创建的。
- en: 'Replace `home.scss`, also in the `/home` folder, with the given code:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `/home` 文件夹中的 `home.scss` 替换为给定的代码：
- en: '[PRE16]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Connect your physical iPhone to the Mac via a USB connection.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 USB 连接将您的物理 iPhone 连接到 Mac。
- en: 'Ensure that you are in the app folder, and build the app for the iOS platform,
    as follows:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您位于应用文件夹中，并按照以下步骤为 iOS 平台构建应用：
- en: '[PRE17]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The OS will prompt to allow codesign to sign using the iOS Developer certificate.
    You must accept this to allow access in order to build the app and upload it to
    your device:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作系统将提示允许 codesign 使用 iOS 开发者证书进行签名。您必须接受此提示以允许访问，以便构建应用并将其上传到设备：
- en: '![](img/998e5337-2dbc-46d4-ac56-0730820c66b8.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/998e5337-2dbc-46d4-ac56-0730820c66b8.png)'
- en: 'Verify that the app has been running successfully on the device. At this point,
    you have completed the push notification setup and coding. The next step is to
    send the push notification via the **OneSignal dashboard**. Here are the instructions:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证应用是否在设备上成功运行。在此阶段，您已经完成了推送通知的设置和编码。下一步是通过 **OneSignal 控制台**发送推送通知。以下是说明：
- en: 'After selecting your app in OneSignal, you will see following side menu:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 OneSignal 中选择您的应用后，您将看到以下侧边菜单：
- en: '![](img/9fe68e62-8f9a-4087-9013-bcf938357fd6.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fe68e62-8f9a-4087-9013-bcf938357fd6.png)'
- en: 'Click on New Message. You will see a screen like the following:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **新建消息**。您将看到一个如下所示的屏幕：
- en: '![](img/d67fd5f6-d3c9-4d40-b743-468188271e4f.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d67fd5f6-d3c9-4d40-b743-468188271e4f.png)'
- en: Select `Send to Everyone`, since at this point only you will be using the app.
    Then click **Next**. The following page will appear:![](img/4e413845-d213-44a5-88db-2b3fcf14e033.png)
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **发送给所有人**，因为在这个阶段只有您会使用这个应用。然后点击 **下一步**。将出现以下页面：![](img/4e413845-d213-44a5-88db-2b3fcf14e033.png)
- en: Type your Title and Message.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的标题和消息。
- en: In the top menu, you will see the following links. At this moment, we are at
    **Message**:![](img/f8c033c8-65b5-45f7-b48f-4b7364bd5865.png)
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部菜单中，您将看到以下链接。此时，我们处于 **消息**：![](img/f8c033c8-65b5-45f7-b48f-4b7364bd5865.png)
- en: If you want to do some configuration and scheduling, you can do it in the following
    sections. Otherwise, you can jump to **Confirm** link and you will see following
    buttons on the top right of the page:![](img/3476abad-7405-4dc0-88ed-727158f82d96.png)
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想进行一些配置和调度，您可以在以下部分进行。否则，您可以跳转到 **确认** 链接，您将在页面右上角看到以下按钮：![](img/3476abad-7405-4dc0-88ed-727158f82d96.png)
- en: Just hit SEND MESSAGE, and OneSignal will deliver your push notification.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需点击 **发送消息**，OneSignal 就会将您的推送通知发送出去。
- en: How it works
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: 'To understand how the entire process works, let''s summarize what you have
    done, as shown in the following section:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解整个流程是如何工作的，让我们总结一下您所做的工作，如下所示：
- en: 'Set up your Apple Developer account by doing the following things:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤设置您的 Apple 开发者账户：
- en: Creating an app ID
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建应用 ID
- en: Creating an app certificate (after creating a signing request locally via Keychain
    Access)
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建应用证书（在通过 Keychain Access 本地创建签名请求之后）
- en: Creating a provisioning profile
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建配置文件
- en: Creating a push certificate
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建推送证书
- en: Set up your OneSignal App
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 设置您的 OneSignal 应用
- en: Now, let's focus on the coding portion itself to understand how this works.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们专注于编码部分本身，以了解它是如何工作的。
- en: Inside `NgModul`, we added an **Ionic Native** wrapper for OneSignal in the
    providers array.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `NgModul` 中，我们在 providers 数组中添加了一个 **Ionic Native** 包装器用于 OneSignal。
- en: 'Then, in `home.ts`, In the constructor we initialized OneSignal by calling
    the `oneSignalConfig()` function. In the `oneSignalConfig()` function, we called
    the `startInit` function, which initiated the push notification registration process.
    We have to pass a OneSignal App ID to this function. Then, we subscribe to the
    `handleNotificationReceived` observable. It is fired each time the user gets a
    notification. In it, we are pushing each received push notification into `this.messages`
    array, and then we stop the initialization process with the `endInit` function,
    as shown in the following code:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 `home.ts` 中，我们在构造函数中通过调用 `oneSignalConfig()` 函数初始化 OneSignal。在 `oneSignalConfig()`
    函数中，我们调用了 `startInit` 函数，该函数启动了推送通知注册过程。我们必须向此函数传递一个 OneSignal 应用 ID。然后，我们订阅了
    `handleNotificationReceived` 可观察对象。每当用户收到通知时，它都会被触发。在其中，我们将每个接收到的推送通知推入 `this.messages`
    数组，然后使用 `endInit` 函数停止初始化过程，如下面的代码所示：
- en: '[PRE18]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It is important to call change Detector's `detectChanges` function, otherwise,
    the UI will not be updated since this process is outside the scope of Angular's
    Change Detection.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 调用变更检测器的`detectChanges`函数非常重要，否则由于这个过程超出了Angular的变更检测范围，UI将不会更新。
- en: 'In the `home.html` template, the messages will be displayed via the `messages`
    object, as shown in the following code:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在`home.html`模板中，消息将通过`messages`对象显示，如下面的代码所示：
- en: '[PRE19]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, each `message` item has the `title` and `text` fields.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，每个`message`项都有`title`和`text`字段。
- en: If the user doesn't open the app, you will see that the notification appears
    in the notification area.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户没有打开应用，你将看到通知出现在通知区域。
- en: 'This is how the app looks on an iPhone:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是应用在iPhone上的样子：
- en: '![](img/74b6e01e-b216-4bf4-9e5c-3b8428b83f00.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/74b6e01e-b216-4bf4-9e5c-3b8428b83f00.png)'
- en: There's more...
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: For more information about the APNs, you can visit the official documentation
    at [https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html)
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 关于APNs的更多信息，您可以访问官方文档[https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html)。
- en: For more information about OneSignal setup, take a look at [https://onesignal.com/ionic](https://onesignal.com/ionic).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 关于OneSignal设置的更多信息，请查看[https://onesignal.com/ionic](https://onesignal.com/ionic)。
- en: Building an Android app to receive push notifications
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个用于接收推送通知的Android应用
- en: A push notification works in the same way as iOS for Google; however, instead
    of using the Apple Notification Service, you will be working through the FCM server,
    which is a new replacement for **Google Cloud Messaging** (**GCM**). However,
    OneSignal abstracts this process so that you don't have to code using a different
    API. You will be using the same push object as for the iOS app.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 推送通知在Google上与iOS的工作方式相同；然而，您将不会使用Apple通知服务，而是通过FCM服务器进行操作，这是**Google Cloud Messaging**（**GCM**）的新替代品。但是OneSignal抽象了这个过程，因此您不需要使用不同的API进行编码。您将使用与iOS应用相同的推送对象。
- en: For more information about the differences between FCM and GCM, visit the FAQs
    at [https://firebase.google.com/support/faq](https://firebase.google.com/support/faq).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 关于FCM和GCM之间差异的更多信息，请访问[https://firebase.google.com/support/faq](https://firebase.google.com/support/faq)的常见问题解答。
- en: 'In this section, you will learn how to do the following things:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习以下内容：
- en: Set up OneSignal for Android push notification
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置OneSignal以接收Android推送通知
- en: Configure the Firebase project for the push API
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Firebase项目以使用推送API
- en: Write code to receive push notifications on Android
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写代码以在Android上接收推送通知
- en: You will be using the same code base as your iOS push notification example.
    The main difference is the process to set up in your Firebase and OneSignal account.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用与iOS推送通知示例相同的代码库。主要区别在于在您的Firebase和OneSignal账户中设置的过程。
- en: Getting ready
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You can test the Android push notification using the Android emulator. So, there
    is no need to have a physical Android device available.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Android模拟器测试Android推送通知。因此，您不需要有物理Android设备。
- en: In order to gain access, you must also register for Firebase at [https://console.firebase.google.com](https://console.firebase.google.com).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得访问权限，您还必须在[https://console.firebase.google.com](https://console.firebase.google.com)注册Firebase。
- en: In addition to your current setup, you need to install **Android Studio**.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 除了您当前的设置外，您还需要安装**Android Studio**。
- en: 'Observe the following screenshot:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下截图：
- en: '[![](img/a6608fa6-dbe4-4e5a-8cbf-22f68f5e5050.png)](https://software.intel.com/en-us/android/articles/installation-instructions-for-intel-hardware-accelerated-execution-manager-windows)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/a6608fa6-dbe4-4e5a-8cbf-22f68f5e5050.png)[链接](https://software.intel.com/en-us/android/articles/installation-instructions-for-intel-hardware-accelerated-execution-manager-windows)'
- en: 'Android SDK Tools, Build Tools, Platform Tools and Intel **Hardware Accelerated
    Execution Manager** (**HAXM**) ([https://software.intel.com/en-us/android/articles/installation-instructions-for-intel-hardware-accelerated-execution-manager-windows](https://software.intel.com/en-us/android/articles/installation-instructions-for-intel-hardware-accelerated-execution-manager-windows)).Observe
    the following screenshot:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android SDK工具、构建工具、平台工具和英特尔**硬件加速执行管理器**（**HAXM**）([https://software.intel.com/en-us/android/articles/installation-instructions-for-intel-hardware-accelerated-execution-manager-windows](https://software.intel.com/en-us/android/articles/installation-instructions-for-intel-hardware-accelerated-execution-manager-windows))。观察以下截图：
- en: '![](img/4addcf93-a11b-4297-a8dd-34ab100f6a84.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4addcf93-a11b-4297-a8dd-34ab100f6a84.png)'
- en: 'At least one **Android Virtual Device** (**AVD**) has been created (use the
    **`$ android avd`** command line to open AVD Manager). Observe the following screenshot:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至少已创建一个**Android虚拟设备**（**AVD**）（使用**`$ android avd`**命令行打开AVD管理器）。观察以下截图：
- en: '![](img/d80c5a17-dcff-4b53-8473-c28667309f58.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d80c5a17-dcff-4b53-8473-c28667309f58.png)'
- en: How to do it
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作
- en: First, we are going to configure push notifications in Firebase console and
    then we are going to code the example app.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在Firebase控制台中配置推送通知，然后我们将编写示例应用。
- en: Configuring Firebase for push notifications
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Firebase以推送通知
- en: 'Here are the instructions for configuring firebase console:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是配置Firebase控制台的说明：
- en: You will need a Firebase project number and a Firebase server ID in order to
    receive push notifications. First, let's log into the Firebase console at [https://console.firebase.google.com](https://console.firebase.google.com).
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要一个Firebase项目编号和一个Firebase服务器ID以接收推送通知。首先，让我们登录到Firebase控制台[https://console.firebase.google.com](https://console.firebase.google.com)。
- en: 'Click on the CREATE NEW PROJECT button, and fill in a project name (that is,
    `MyAndroidPush`):'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建新项目**按钮，并填写项目名称（即`MyAndroidPush`）：
- en: '![](img/0fc7dccd-0fbe-4b38-b610-ac2cbc822e00.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0fc7dccd-0fbe-4b38-b610-ac2cbc822e00.png)'
- en: 'Navigate to Grow | Notifications in the left navigation menu:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中导航到**增长 | 通知**：
- en: '![](img/a814fd9d-3712-402e-b9b7-b1969bae39a2.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a814fd9d-3712-402e-b9b7-b1969bae39a2.png)'
- en: 'Select the Android icon:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Android图标：
- en: '![](img/71e03402-0764-4816-8662-49cfae476a3f.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/71e03402-0764-4816-8662-49cfae476a3f.png)'
- en: The FCM service also supports the iOS app. So, it's possible that you can use
    FCM for both the iOS and Android projects.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: FCM服务也支持iOS应用。因此，您可能可以在iOS和Android项目中都使用FCM。
- en: 'Provide the **Package name** in the form. You can copy and paste the Package
    name from your app project at `./config.xml`:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表格中提供**包名**。您可以从应用项目的`./config.xml`中复制并粘贴包名：
- en: '![](img/1371966d-f1e2-4621-aa43-226375baf2dc.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1371966d-f1e2-4621-aa43-226375baf2dc.png)'
- en: 'Select CONTINUE, and save the JSON file somewhere. You will not need this JSON
    file for the Ionic project:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**继续**，并将JSON文件保存到某个位置。您不需要在Ionic项目中使用此JSON文件：
- en: '![](img/0714cffa-cfc8-4ac5-af4c-afcdff9b5aee.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0714cffa-cfc8-4ac5-af4c-afcdff9b5aee.png)'
- en: Click on the FINISH button to complete setting up of the notification service:![](img/41f115c3-1523-435c-a441-a3320aff3717.png)
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**完成**按钮以完成通知服务的设置：![图片](img/41f115c3-1523-435c-a441-a3320aff3717.png)
- en: Now, you will need the Server key and Sender ID. Navigate to the gear icon in
    the top-left corner and select the Project settings menu item:![](img/4b6f36bf-d056-4f3e-8129-16a7833d4296.png)
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将需要服务器密钥和发送者ID。导航到左上角的齿轮图标，并选择项目设置菜单项：![图片](img/4b6f36bf-d056-4f3e-8129-16a7833d4296.png)
- en: 'Select the CLOUD MESSAGING tab:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**云消息**选项卡：
- en: . ![](img/d9a82e78-c2de-454e-b5e9-4af939cd59ed.png)
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: . ![图片](img/d9a82e78-c2de-454e-b5e9-4af939cd59ed.png)
- en: Copy both the **Server key** and Sender ID (the same as Project ID if using
    GCM):![](img/97dd7004-1a2d-43b7-a9b5-53f7d3bd37a7.png)
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制**服务器密钥**和发送者ID（如果使用GCM，则与项目ID相同）：![图片](img/97dd7004-1a2d-43b7-a9b5-53f7d3bd37a7.png)
- en: Configuring OneSignal
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置OneSignal
- en: 'Here are the instructions to configure OneSignal:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是配置OneSignal的说明：
- en: 'In your **OneSignal dashboard**, open your previously created app for iOS and
    click on **App Settings**. You will see the following page:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的**OneSignal仪表板**中，打开之前创建的iOS应用，然后点击**应用设置**。您将看到以下页面：
- en: '![](img/6a145702-47d9-4743-bf9b-a41225412e8c.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6a145702-47d9-4743-bf9b-a41225412e8c.png)'
- en: 'Click on the CONFIGURE button parallel to **Google Android Platform**. You
    will see the following dialog:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击与**Google Android平台**平行的**配置**按钮。您将看到以下对话框：
- en: '![](img/1bdb356a-96bd-494c-a7f9-f6f6b027088d.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1bdb356a-96bd-494c-a7f9-f6f6b027088d.png)'
- en: Enter the **Server API Key** and **Project Number** (also called a **Sender
    ID**) to their appropriate fields, and hit **Save**.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**服务器API密钥**和**项目编号**（也称为**发送者ID**）输入到相应的字段中，然后点击**保存**。
- en: Let's code now
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们开始编码
- en: 'Here are the instructions for creating example app:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是创建示例应用的说明：
- en: 'Create a new `MyAndroidPush` app using the `blank` template, as follows, and
    go to the `MyAndroidPush` folder:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`blank`模板创建一个新的`MyAndroidPush`应用，如下所示，然后进入`MyAndroidPush`文件夹：
- en: '[PRE20]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Install the Cordova plugin and Ionic native wrapper for OneSignal:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Cordova插件和OneSignal的Ionic原生包装器：
- en: '[PRE21]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Open and edit `./src/app/app.module.ts` with the following content:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容打开并编辑`./src/app/app.module.ts`：
- en: '[PRE22]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The code for your home page is very similar to the iOS push example. Open and
    edit `./src/pages/home/home.html`, and paste the following code:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的主页代码与iOS推送示例非常相似。打开并编辑`./src/pages/home/home.html`，并粘贴以下代码：
- en: '[PRE23]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Replace the content of the `home.ts` file, in the same folder, with the following
    code:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将同一文件夹中的`home.ts`文件的内容替换为以下代码：
- en: '[PRE24]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you take notice, for Android, a call to `startInit` has two parameters instead
    of one parameter. The first parameter is **OneSignal App ID**, and the second
    parameter is **Google Project Number/Sender ID**.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到了，对于Android，`startInit`的调用有两个参数而不是一个参数。第一个参数是**OneSignal App ID**，第二个参数是**Google项目编号/发送者ID**。
- en: 'Replace `home.scss`, also in the `/home` folder, with the following code:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`home.scss`替换为以下代码，同样在`/home`文件夹中：
- en: '[PRE25]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Ensure that you are in the app folder and build for the Android platform, as
    follows:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你处于应用文件夹中，并按照以下方式为Android平台构建：
- en: '[PRE26]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The process of sending push notifications is exactly the same as iOS.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 发送推送通知的过程与iOS完全相同。
- en: How it works
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: The process is almost the same as iOS. The reason is, OneSignal abstracts lots
    of things for us. The difference is that, instead of sending push notification
    requests to APNS, it is now sending push notification requests to Google's FCM
    servers. Then, it forwards the push notification to the actual device.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程几乎与iOS相同。原因是OneSignal为我们抽象了很多东西。不同之处在于，它现在不是向APNS发送推送通知请求，而是向Google的FCM服务器发送推送通知请求。然后，它将推送通知转发到实际设备。
- en: 'You will see the notification in the Android phone as follows:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在Android手机上看到如下通知：
- en: '![](img/4af930b7-46f2-4e3c-8535-ab9533ef612b.png)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4af930b7-46f2-4e3c-8535-ab9533ef612b.png)'
- en: By Default, it will use app icon as a notification icon, but you can customize
    that for Android. Take a look at [https://documentation.onesignal.com/docs/customize-notification-icons](https://documentation.onesignal.com/docs/customize-notification-icons).
    On iOS, you can't customize the icon.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，它将使用应用图标作为通知图标，但你可以为Android自定义它。查看[https://documentation.onesignal.com/docs/customize-notification-icons](https://documentation.onesignal.com/docs/customize-notification-icons)。在iOS上，你不能自定义图标。
- en: 'When you open the app, you will see notifications in the app as follows:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开应用时，你将看到如下通知：
- en: '![](img/ac92decd-d4a0-4805-92fd-16387923f41a.png)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac92decd-d4a0-4805-92fd-16387923f41a.png)'
- en: There's more...
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: For more information about the **Firebase Notification** service, you can visit
    the official documentation at [https://firebase.google.com/docs/cloud-messaging/](https://firebase.google.com/docs/cloud-messaging/.).
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 关于**Firebase通知**服务的更多信息，你可以访问官方文档[https://firebase.google.com/docs/cloud-messaging/](https://firebase.google.com/docs/cloud-messaging/)。
