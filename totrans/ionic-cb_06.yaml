- en: User Authentication and Push Notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following tasks related to authenticating
    users, and register and receiving push notification messages:'
  prefs: []
  type: TYPE_NORMAL
- en: Registering and authenticating users using Auth0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an iOS app to receive push notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an Android app to receive push notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tracking and engaging users are key features necessary for your app to grow.
    That means you should be able to register and authenticate users. Once the users
    start using the app, you also need to segment the users so that you can customize
    their interactions. Then, you can send push notifications to encourage users to
    revisit the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two components that you need to use for your project, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Auth0**: Auth0 is a cloud-based authentication service. The whole idea is
    that you delegate authentication of your application to Auth0\. Auth0 supports
    many frameworks, including Ionic2+, and also supports many social providers for
    authentication such as Google and Facebook. On the top of that, they have excellent
    documentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OneSignal**: OneSignal is a service that allows us to send the push notification
    to both iOS and Android. As a matter of fact, it supports other platforms such
    as Windows, Web Push Notifications, Amazon Fire, and so on. The best part is,
    in general, we need different code for adding push notifications. But because
    of Cordova and OneSignal''s abstract API, we only need to write push notification
    code once for both platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering and authenticating users using Auth0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Auth0** can provide all of the user management and authentication capabilities
    out of the box. There are lots of providers supported by Auth0\. Following are
    some famous providers that are supported by Auth0:'
  prefs: []
  type: TYPE_NORMAL
- en: Email/password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instagram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LinkedIn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the app, you may not need to use all of these authentication methods.
    For example, it would make more sense to use a LinkedIn authentication for an
    app focusing on a working professional to narrow down the audiences who fit the
    user profile of the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will try to simplify the authentication concept as much
    as possible. You will learn how to do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Registering a new user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging in and logging out a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing a user's profile information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need the device to test the app because we are using Cordova plugins for
    authentication, which requires either device or simulator to run the app.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will do it in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an app in the Auth0 dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding our Ionic app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our app in the Auth0 dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn how we can create an app in the Auth0
    dashboard. Do the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://auth0.com](https://auth0.com) and create an account there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After creating an account, it will open Auth0 dashboard. There is a New Application
    button. Click on it, and it will open the following dialog:![](img/e8c4129a-4228-4511-888b-5fd5cb203982.png)Choose
    a Name for your client and select the client type as Native.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, in the side menu Dashboard, click on Applications and select the Application
    that you created. You will see the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8cfb6246-1615-496b-8d1f-cd26d8c434da.png)We need Domain and Client
    ID later in the app, so save them somewhere.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the same page, in the Allowed Callback URLs input, add `YOUR_PACKAGE_ID://YOUR_DOMAIN/cordova/YOUR_PACKAGE_ID/callback`.
    Replace YOUR_PACKAGE_ID with the package ID of your app, and `*YOUR_DOMAIN*` is
    the domain that you saved in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, in the Allowed Origins(CORS) input, add `file://`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the latest Ionic, they are using WKWebView plugin by default, which servers
    the app from a local web server at [https://localhost:8080](https://localhost:8080).
    So you have to add it too in the Allowed Origin(CORS) section. If you are not
    going to use WKWebView, you don't have to add it.
  prefs: []
  type: TYPE_NORMAL
- en: Hit Save Changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have already created our app in the Auth0 dashboard, it''s time
    to write the code for it. Take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now,Â create a new `MySimpleAuth` app using the `blank` template, as shown in
    the following code, and go to the `MySimpleAuth` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Install `auth0.js` and `auth0/cordova` npm packages, which are required for
    Auth0 authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to install the following `Cordova` plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You should change `{YOUR_PACKAGE_ID}` to your app's package ID, and `{YOUR_DOMAIN}`
    to your domain from Auth0 that you saved earlier in the third step.
  prefs: []
  type: TYPE_NORMAL
- en: 'You also have to add the following line to `config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file at `./src/providers/auth/auth.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Make sure to use your own value for `clientID`, `domain`, and `packageIdentifier`
    for `auth0Config` in `auth.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open and edit `./src/app/app.module.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit and replace `./src/pages/home/home.html` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: These are just your basic `login` and `logout` templates. It's all in a single
    page to keep things simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open and edit `./src/pages/home/home.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run this in the device using the following command in CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are certain things that we need to know before digging more into code.
  prefs: []
  type: TYPE_NORMAL
- en: Auth0 uses **JWT** (**JSON Web Token**), which is a compact way of sharing information
    between two parties via JSON. In simple terms, when the user is authenticated,
    Auth0 sends us JWTs, which have information about the user and also allow the
    user to access authenticated routes/URLs. Auth0 sends back an `access_token`,
    which is required for accessing authenticated routes, and it also sends us an
    `id_token`, which contains the user's profile information such as their username,
    profile picture, and so on. Both of these tokens have a short lifespan and then
    they expire. But along with that, Auth0 also sends us a `refresh_token`, which
    has a long expiry date and can be used to get a new `id_token` and `access_token`.
  prefs: []
  type: TYPE_NORMAL
- en: We configured the Callback URL in our app. This is the URL where Auth0 redirects
    the user after authentication. A callback URL includes the app's package ID, and
    that's why we need to mention it while installing the plugin. We also need to
    add `file://` in **CORS** (**Cross-Origin Resource Sharing**), because the Ionic
    app makes an HTTP request from `file://` origin.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Ionic's WKWebView. It runs a local webserver inside the app.
    So you have to whitelist http://localhost:8080 for CORS in Auth0 Dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the work is in `AuthService`. AuthService allows us to log in/log out.
    It uses the `auth0.js` and `auth0/cordova` library for authentication. First,
    we are creating an `auth0Config` object. This object looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you can see that `clientID` and `clientId` have the same
    value. It is the value that we saved earlier. The first is used by `auth0.js`,
    and the latter is used by `auth0/cordova`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `domain` is also our **Auth0 Domain** used for authentication. We saved
    it earlier when we created our app on the Auth0 dashboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`callbackURL` will always be `location.href`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`packageIdentifier` is the package ID of your app, same as in your `config.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are then passing this config to both `Auth0.WebAuth` constructor function,
    and `Auth0Cordova` constructor function.
  prefs: []
  type: TYPE_NORMAL
- en: In the `login` function, we initiate authentication by calling Auth0Cordova's
    `authorize` function. It is important to notice that we are passing an `option`
    object with `scope` key into an `authorize` function as the parameter. This scope
    key tells Auth0 to return certain data like an email and profile after authentication
    is completed. We are also passing a callback function as the second parameter,
    which fires when authentication is completed. When authentication is initiated,
    Auth0Cordova opens the OS browser and redirects us to our Auth0 Domain. Here,
    the user can log in and register. By default, email/password authentication is
    configured for the app. But you can enable Google, Facebook, and GitHub authentication,
    and they will also appear along with email/password authentication. When the user
    is authenticated, the browser redirects us to our app via the **Custom URL Scheme.**
    Then, we store `idToken` and `accessToken` in **localstorage** and also get profile
    information using the `auth0.client.userInfo` function. Then later in the login
    method, we also save this information to **localstorage**.
  prefs: []
  type: TYPE_NORMAL
- en: In the `logout` function, we are just removing `idToken`, `accessToken`, token
    Expiration information, and Profile data from localstorage and also resetting
    the AuthService class.
  prefs: []
  type: TYPE_NORMAL
- en: In `home.html`, we show a Log In button when the user is not authenticated;
    when the user is authenticated, we show a profile picture and the username of
    the user, along with the LOGOUTÂ button. These `login` and `logout` methods in
    `home.ts` call `AuthService`'s login and logout function respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how our app looks when the user is not authenticated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30cca472-7afe-4fa0-8914-c4e5dced4754.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user clicks on, it opens a web page for authenticating the user. It
    looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a0d6940-4d67-4ba3-aa40-92e7709253d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is how our app looks when the user is authenticated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb01a7f3-3ce1-47b2-807c-3823b3079537.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can secure your custom backend using Auth0, and access the backend inside
    Ionic app using the `angular2-jwt` library. Take a look at [https://github.com/auth0/angular2-jwt](https://github.com/auth0/angular2-jwt).
  prefs: []
  type: TYPE_NORMAL
- en: Building an iOS app to receive push notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **push notification** is an important feature to engage users frequently,
    especially when the users are not using the app. Many people download an app,
    but only open it a few times. If you send them a push notification message, it
    will encourage them to open the app to get involved in a new activity. Implementing
    push notifications is very complex if you have to build everything from scratch;
    however, OneSignal makes it very simple. A push notification provider is a server
    that can communicate with the **Apple Push Notification service** (**APNs**),
    or Google's **Firebase Cloud Messaging** (**FCM**). You can set up your own provider
    server using existing open sources, but you have to maintain this server separately
    and keep up with potential changes from the APN APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up OneSignal for iOS push notification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure an iOS app, certificates (app and push), and provisioning profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write code to receive push notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's required to have a physical iOS device available in order to test for notification
    messages.
  prefs: []
  type: TYPE_NORMAL
- en: You must also register for the **A****pple Developer Program (ADP**) in order
    to access [https://developer.apple.com](https://developer.apple.com) and [https://itunesconnect.apple.com](https://itunesconnect.apple.com),
    because these websites will require an approved account.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to that, you must have an Apple Mac and Xcode installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need the device to see the push notification. We will be doing this in
    multiple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Apple Signing Certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding devices and creating a provisioning profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating push certificates for use in the OneSignal dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring app in OneSignal dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's create an Apple signing certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the instructions to create apple signging certficiates:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the **Apple Developer** website at [https://developer.apple.com](https://developer.apple.com)
    and log in with your credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Certificates, Identifiers &amp; Profiles, as illustrated in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/189f60ec-21a6-4832-87ca-2e3e25b2a0fd.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Select the correct device platform you are targeting. In this case, it will
    be iOS, tvOS, watchOS as shown in the following screenshot:![](img/69fccd5c-b67a-4d78-acc4-ae1e4875a253.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to **Identifiers** | **App IDs** to create an app ID, as illustrated
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e9b70cb7-7fd3-4182-9af3-ff731012c199.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the plus (**+**) button in the top-right corner of the screen, as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/512a5a81-883e-4c5a-bc5e-af233a243372.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fill in the form to register your app ID. The `Name` field could be anything.
    You can provide the name of your project (that is, `MyiOSPush`) to keep things
    simple, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/810b191b-deda-4f9d-bec9-458c501f56e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The important part that you need to do correctly here is the **Bundle ID**,
    because it must match your bundle identifier in the `./config.xml` file or Xcode,
    as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6e16669b-0f5d-4bed-9b9d-dfc7d28c12fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To enable push notifications, you need to check the **Push Notifications**
    service on the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/564d0e89-2135-4c03-b57a-2e6646f35e60.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select **Register**, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fcabbfc8-002a-4e51-9294-0300e1e6b061.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select **Done** to complete the step to create an app ID, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/94b8ba8b-9319-44d7-b432-4ce6f654462a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To start with certificate creation, you will need to generate a certificate
    signing request file locally on your Mac OSX using **Keychain Access**. Navigate
    to the Keychain Access in the top-left menu, and navigate to Certificate Assistant
    | Request a Certificate From a Certificate Authority..., as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b3953ec7-f9ce-487f-b163-67bd7742e677.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter your User Email Address and Common Name. Leave the CA Email Address field
    blank and check Saved to disk, as shown:![](img/e204b005-ef88-41be-a30a-b428546a89a8.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your `CertificateSigningRequest.certSigningRequest` file, as follows:![](img/34b57ad2-3b58-4973-b3ad-e440f8562772.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Apple Developer** website, and navigate to Certificates |
    All, as shown:![](img/d4b8d8cf-0c7f-4b1c-bf30-bbe17480bf92.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus (**+**) button in the top-right corner to start creating a
    certificate,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: as follows:![](img/724946ee-fa34-45f0-8982-0989d7bf8e95.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, you just have to go through the steps on the website to fill out the necessary
    information. In this example, you will select the Development version instead
    of Production, as illustrated:![](img/ef1ebdb8-e041-47dd-b984-f8fc8ecfbac9.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Continue button, as follows, to proceed:![](img/47496f99-10a3-4845-aef6-29e6756b61a0.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Choose File... button, as shown in the following screenshot, to
    upload your signing request file that you saved earlier:![](img/8cb24d68-5fb7-4bed-9fb0-12cd07886fff.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Continue button, as illustrated, to proceed:![](img/6d68fb1b-cbf5-4895-8195-52acc72ca269.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Download button to download your iOS Development certificate file:![](img/f3ee9595-ccba-4ce1-b42b-15a600155427.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `.cer` file you downloaded, as shown so that it can be imported
    to Keychain Access:![](img/e1ef7063-9090-45d6-8b7c-8d519ed1275b.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is very important to remember that you have to install the signing certificate
    on the Mac because when you will build the app, it will be used to sign the app.
    Just double-click the downloaded `.cer` file to install it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a device and creating the provisioning profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to push the app to a specific device, you must register the device.
    Go to Devices | All:![](img/28a7a9cb-2753-4f43-a24e-f707a02b2652.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus (**+**) button:![](img/f31dfd0b-1eda-46d4-b0b6-81426e905b6e.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the device a UDID and save to register the device. Observe the following
    screenshot:![](img/8da506f1-d400-4620-a8b8-95c3073af1f2.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll need a provisioning profile. Navigate to Provisioning Profiles | All:![](img/7e947195-f5b2-412b-bb7b-69509b2ffeb2.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus (**+**) button:![](img/0c8f45ac-a17f-48b7-bb63-89a760f8a18b.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select iOS App Development as your provisioning profile, since this example
    is for the development version only:![](img/ab64001d-c36b-477c-9c80-72a8f0f7d5be.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Continue button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/94a9f328-b9f5-4629-a095-4587741fa569.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the correct App ID in the drop-down menu, and save to finalize your
    provisioning profile creation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bf178e13-acb5-4ed4-b851-e4937f4a19a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Continue button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d7d1596b-a0f0-4d54-af35-e20fd7d4f1ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the iOS Development certificate you created earlier, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/729f9d7f-cf74-42d9-acca-8337e810d90c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As illustrated, select at least one device that you want to be able to install
    the app for testing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f1b2b79d-7bdf-4a57-9676-52b5937b87f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Provide a **Profile Name** to your provisioning profile, as shown:![](img/08b92673-f21b-4388-a707-50dad9143990.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Download button to download the provisioning profile file (that
    is, `MyiOSPush_Provisioning_Profile.mobileprovision`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/99d1e0d0-8bcf-4d0d-bfcb-7ce2c1987638.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click on `MyiOSPush_Provisioning_Profile.mobileprovision`, which you just downloaded,
    in order to import it into Xcode:![](img/ac50f4a8-caa3-42ac-9cfe-68f4b4725abb.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This step is very important, because if you don't import it into Xcode, your
    app cannot be built successfully. If your app failed to build because of an invalid
    provisioning profile, it's best to check the provisioning profile status in the
    Developer Console.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a push certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the steps to create push certificates for iOS application:'
  prefs: []
  type: TYPE_NORMAL
- en: To enable the Push Notification feature, you must request a Push Certificate,
    which is different from the app certificate. Select the App ID that you created
    earlier (that is, `MyiOSPush`):![](img/f2dfc9bf-df8f-469e-9760-3f0ef2e6ad7c.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Edit button at the bottom of the page:![](img/f34b3df3-d84a-4b09-833e-b9c05f85ac6a.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Push Notifications must show the Configurable state. Otherwise, your app
    is not available for push notifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Create Certificates... button under the **Push Notifications |
    Development SSL Certificate** section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e7f7a436-9165-465f-8c01-9ad2b0759e47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be taken to a new page to create your CSR file. Click on the Continue
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/be1e422c-ab7d-4231-a06f-32d390547458.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Choose File... button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f69b393-e402-46a6-9882-d2848483eb0d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Locate the `CertificateSigningRequest.certSigningRequest` file that you created
    earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/21fe30d5-bc16-40ca-bfe8-905681719851.png)'
  prefs: []
  type: TYPE_IMG
- en: You must upload the same `.certSigningRequest` file as you did for the app certificate.
    Otherwise, your app will not receive push notifications, and it's very hard to
    debug.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Continue button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6a3c48aa-4a9a-48cf-a4e1-150cb3b42eb0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Download button to download the certificate file. You can name
    it `aps_certificate.cer` to avoid overwriting to the earlier `.cer` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d77d4a4-f945-40cd-a1c5-910b872f6d81.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once your `.cer` file is downloaded, you need to click on it to import it to
    **Keychain Access**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de2a67f9-393e-4fa4-8d87-d6a2aabca780.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Locate the new push services certificate in Keychain Access and select it,
    as illustrated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/265ba748-1788-4c52-a989-dee7750310bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Right-click on the certificate and select Export:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dfdd9afe-1e19-487c-af1e-e45586dc67c9.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Give it a new name to avoid overwriting it to the app certificate. This process
    is, basically, to convert from a `.cer` to `.p12` file for OneSignal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ef57e72-8452-4587-a4cf-b95684daf287.png)'
  prefs: []
  type: TYPE_IMG
- en: Provide a password for this `.p12` file to protect it:![](img/1c53f8e6-abbb-473e-aa14-3db591775edb.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A password for the `.p12` file is not mandatory for OneSignal, but it is in
    the best interest to secure it.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's configure OneSignal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the below steps to configure OneSignal for sending push notifications:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://onesignal.com](https://onesignal.com) and create an account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the dashboard, click on Add a new app. You will see the following dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b3a9ea6a-07ca-45e3-9ba3-66181649f1ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fill it with the name that you want and click on Create. It will open the following
    dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ca40af39-a8cc-4dd5-9e27-887215c920fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select **Apple iOS** and Hit Next. You will see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6580cb88-b414-4da6-afed-ef7260c802e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Select Upload optional sandbox certificate and upload the `.p12` file for the
    **push certificate** that you created earlier. Also, fill in the password for
    the `.p12` file. Then hit Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now in the top main menu, click on Keys &amp; ID. You will see OneSignal App
    ID, as shown below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/80f75dd8-6954-4fe0-aa73-7b87d35ebd43.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note down the OneSignal App ID somewhere; we need this to configure our app.
  prefs: []
  type: TYPE_NORMAL
- en: Let's code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the below steps to create the example app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a new `MyiOSPush` app using the `blank` template, as shown, and
    go to the `MyiOSPush` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the Cordova plugin and **Ionic Native** wrapper for **OneSignal**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We need to add this `ionic-native` plugin to `app.module.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to install `cocoapods`. Go to **Terminal**, and install it as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Open and edit `./src/app/app.module.ts` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to modify your home page code in order to receive notification messages.
    Open and edit `./src/pages/home/home.html` and paste the given code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the content of the `home.ts` file, in the same folder, with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the `startInit` function, you have to pass your own **OneSignal App ID**,
    which you created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace `home.scss`, also in the `/home` folder, with the given code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Connect your physical iPhone to the Mac via a USB connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that you are in the app folder, and build the app for the iOS platform,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The OS will prompt to allow codesign to sign using the iOS Developer certificate.
    You must accept this to allow access in order to build the app and upload it to
    your device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/998e5337-2dbc-46d4-ac56-0730820c66b8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify that the app has been running successfully on the device. At this point,
    you have completed the push notification setup and coding. The next step is to
    send the push notification via the **OneSignal dashboard**. Here are the instructions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After selecting your app in OneSignal, you will see following side menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9fe68e62-8f9a-4087-9013-bcf938357fd6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on New Message. You will see a screen like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d67fd5f6-d3c9-4d40-b743-468188271e4f.png)'
  prefs: []
  type: TYPE_IMG
- en: Select `Send to Everyone`, since at this point only you will be using the app.
    Then click **Next**. The following page will appear:![](img/4e413845-d213-44a5-88db-2b3fcf14e033.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type your Title and Message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top menu, you will see the following links. At this moment, we are at
    **Message**:![](img/f8c033c8-65b5-45f7-b48f-4b7364bd5865.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to do some configuration and scheduling, you can do it in the following
    sections. Otherwise, you can jump to **Confirm** link and you will see following
    buttons on the top right of the page:![](img/3476abad-7405-4dc0-88ed-727158f82d96.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just hit SEND MESSAGE, and OneSignal will deliver your push notification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To understand how the entire process works, let''s summarize what you have
    done, as shown in the following section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up your Apple Developer account by doing the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an app ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an app certificate (after creating a signing request locally via Keychain
    Access)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a provisioning profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a push certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up your OneSignal App
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's focus on the coding portion itself to understand how this works.
  prefs: []
  type: TYPE_NORMAL
- en: Inside `NgModul`, we added an **Ionic Native** wrapper for OneSignal in the
    providers array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in `home.ts`, In the constructor we initialized OneSignal by calling
    the `oneSignalConfig()` function. In the `oneSignalConfig()` function, we called
    the `startInit` function, which initiated the push notification registration process.
    We have to pass a OneSignal App ID to this function. Then, we subscribe to the
    `handleNotificationReceived` observable. It is fired each time the user gets a
    notification. In it, we are pushing each received push notification into `this.messages`
    array, and then we stop the initialization process with the `endInit` function,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: It is important to call change Detector's `detectChanges` function, otherwise,
    the UI will not be updated since this process is outside the scope of Angular's
    Change Detection.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `home.html` template, the messages will be displayed via the `messages`
    object, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Here, each `message` item has the `title` and `text` fields.
  prefs: []
  type: TYPE_NORMAL
- en: If the user doesn't open the app, you will see that the notification appears
    in the notification area.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the app looks on an iPhone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/74b6e01e-b216-4bf4-9e5c-3b8428b83f00.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about the APNs, you can visit the official documentation
    at [https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html)
  prefs: []
  type: TYPE_NORMAL
- en: For more information about OneSignal setup, take a look at [https://onesignal.com/ionic](https://onesignal.com/ionic).
  prefs: []
  type: TYPE_NORMAL
- en: Building an Android app to receive push notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A push notification works in the same way as iOS for Google; however, instead
    of using the Apple Notification Service, you will be working through the FCM server,
    which is a new replacement for **Google Cloud Messaging** (**GCM**). However,
    OneSignal abstracts this process so that you don't have to code using a different
    API. You will be using the same push object as for the iOS app.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the differences between FCM and GCM, visit the FAQs
    at [https://firebase.google.com/support/faq](https://firebase.google.com/support/faq).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up OneSignal for Android push notification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Firebase project for the push API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write code to receive push notifications on Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will be using the same code base as your iOS push notification example.
    The main difference is the process to set up in your Firebase and OneSignal account.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can test the Android push notification using the Android emulator. So, there
    is no need to have a physical Android device available.
  prefs: []
  type: TYPE_NORMAL
- en: In order to gain access, you must also register for Firebase at [https://console.firebase.google.com](https://console.firebase.google.com).
  prefs: []
  type: TYPE_NORMAL
- en: In addition to your current setup, you need to install **Android Studio**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[![](img/a6608fa6-dbe4-4e5a-8cbf-22f68f5e5050.png)](https://software.intel.com/en-us/android/articles/installation-instructions-for-intel-hardware-accelerated-execution-manager-windows)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Android SDK Tools, Build Tools, Platform Tools and Intel **Hardware Accelerated
    Execution Manager** (**HAXM**) ([https://software.intel.com/en-us/android/articles/installation-instructions-for-intel-hardware-accelerated-execution-manager-windows](https://software.intel.com/en-us/android/articles/installation-instructions-for-intel-hardware-accelerated-execution-manager-windows)).Observe
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4addcf93-a11b-4297-a8dd-34ab100f6a84.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At least one **Android Virtual Device** (**AVD**) has been created (use the
    **`$ android avd`** command line to open AVD Manager). Observe the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d80c5a17-dcff-4b53-8473-c28667309f58.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we are going to configure push notifications in Firebase console and
    then we are going to code the example app.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Firebase for push notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the instructions for configuring firebase console:'
  prefs: []
  type: TYPE_NORMAL
- en: You will need a Firebase project number and a Firebase server ID in order to
    receive push notifications. First, let's log into the Firebase console at [https://console.firebase.google.com](https://console.firebase.google.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the CREATE NEW PROJECT button, and fill in a project name (that is,
    `MyAndroidPush`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0fc7dccd-0fbe-4b38-b610-ac2cbc822e00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to Grow | Notifications in the left navigation menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a814fd9d-3712-402e-b9b7-b1969bae39a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Android icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/71e03402-0764-4816-8662-49cfae476a3f.png)'
  prefs: []
  type: TYPE_IMG
- en: The FCM service also supports the iOS app. So, it's possible that you can use
    FCM for both the iOS and Android projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide the **Package name** in the form. You can copy and paste the Package
    name from your app project at `./config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1371966d-f1e2-4621-aa43-226375baf2dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select CONTINUE, and save the JSON file somewhere. You will not need this JSON
    file for the Ionic project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0714cffa-cfc8-4ac5-af4c-afcdff9b5aee.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the FINISH button to complete setting up of the notification service:![](img/41f115c3-1523-435c-a441-a3320aff3717.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you will need the Server key and Sender ID. Navigate to the gear icon in
    the top-left corner and select the Project settings menu item:![](img/4b6f36bf-d056-4f3e-8129-16a7833d4296.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the CLOUD MESSAGING tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: . ![](img/d9a82e78-c2de-454e-b5e9-4af939cd59ed.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Copy both the **Server key** and Sender ID (the same as Project ID if using
    GCM):![](img/97dd7004-1a2d-43b7-a9b5-53f7d3bd37a7.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring OneSignal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the instructions to configure OneSignal:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your **OneSignal dashboard**, open your previously created app for iOS and
    click on **App Settings**. You will see the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6a145702-47d9-4743-bf9b-a41225412e8c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the CONFIGURE button parallel to **Google Android Platform**. You
    will see the following dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1bdb356a-96bd-494c-a7f9-f6f6b027088d.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter the **Server API Key** and **Project Number** (also called a **Sender
    ID**) to their appropriate fields, and hit **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's code now
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the instructions for creating example app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `MyAndroidPush` app using the `blank` template, as follows, and
    go to the `MyAndroidPush` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the Cordova plugin and Ionic native wrapper for OneSignal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Open and edit `./src/app/app.module.ts` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for your home page is very similar to the iOS push example. Open and
    edit `./src/pages/home/home.html`, and paste the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the content of the `home.ts` file, in the same folder, with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: If you take notice, for Android, a call to `startInit` has two parameters instead
    of one parameter. The first parameter is **OneSignal App ID**, and the second
    parameter is **Google Project Number/Sender ID**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace `home.scss`, also in the `/home` folder, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that you are in the app folder and build for the Android platform, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The process of sending push notifications is exactly the same as iOS.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process is almost the same as iOS. The reason is, OneSignal abstracts lots
    of things for us. The difference is that, instead of sending push notification
    requests to APNS, it is now sending push notification requests to Google's FCM
    servers. Then, it forwards the push notification to the actual device.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the notification in the Android phone as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4af930b7-46f2-4e3c-8535-ab9533ef612b.png)'
  prefs: []
  type: TYPE_IMG
- en: By Default, it will use app icon as a notification icon, but you can customize
    that for Android. Take a look at [https://documentation.onesignal.com/docs/customize-notification-icons](https://documentation.onesignal.com/docs/customize-notification-icons).
    On iOS, you can't customize the icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you open the app, you will see notifications in the app as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac92decd-d4a0-4805-92fd-16387923f41a.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about the **Firebase Notification** service, you can visit
    the official documentation at [https://firebase.google.com/docs/cloud-messaging/](https://firebase.google.com/docs/cloud-messaging/.).
  prefs: []
  type: TYPE_NORMAL
