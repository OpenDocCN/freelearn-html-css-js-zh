["```js\n<html>\n<head>\n  <title>Real-Time 3D Graphics with WebGL 2</title>\n  <link rel=\"shortcut icon\" type=\"image/png\" \n   href=\"/common/images/favicon.png\" />\n\n  <!-- libraries -->\n <link rel=\"stylesheet\" href=\"/common/lib/normalize.css\">\n <script type=\"text/javascript\" src=\"img/dat.gui.js\"></script>\n <script type=\"text/javascript\" src=\"img/gl-matrix.js\"></script>\n\n <!-- modules -->\n <script type=\"text/javascript\" src=\"img/utils.js\"></script>\n <script type=\"text/javascript\" src=\"img/EventEmitter.js\"></script>\n <script type=\"text/javascript\" src=\"img/Camera.js\"></script>\n <script type=\"text/javascript\" src=\"img/Clock.js\"></script>\n <script type=\"text/javascript\" src=\"img/Controls.js\"></script>\n <script type=\"text/javascript\" src=\"img/Floor.js\"></script>\n <script type=\"text/javascript\" src=\"img/Light.js\"></script>\n <script type=\"text/javascript\" src=\"img/Program.js\"></script>\n <script type=\"text/javascript\" src=\"img/Scene.js\"></script>\n <script type=\"text/javascript\" src=\"img/Texture.js\"></script>\n <script type=\"text/javascript\" src=\"img/Transforms.js\"></script>\n</head>\n<body>\n</body>\n</html>\n```", "```js\n<canvas id=\"webgl-canvas\">\n Your browser does not support the HTML5 canvas element.\n</canvas>\n```", "```js\n<script id=\"vertex-shader\" type=\"x-shader/x-vertex\">\n  #version 300 es\n  precision mediump float;\n\n  void main(void) {}\n</script>\n\n<script id=\"fragment-shader\" type=\"x-shader/x-fragment\">\n  #version 300 es\n  precision mediump float;\n\n  void main(void) {}\n</script>\n```", "```js\n<script type=\"text/javascript\">\n  'use strict';\n\n  let gl, program, scene, clock;\n\n  function configure() {\n    const canvas = utils.getCanvas('webgl-canvas');\n    utils.autoResizeCanvas(canvas);\n\n    gl = utils.getGLContext(canvas);\n    gl.clearColor(0.9, 0.9, 0.9, 1);\n    gl.clearDepth(1);\n    gl.enable(gl.DEPTH_TEST);\n    gl.depthFunc(gl.LESS);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    program = new Program(gl, 'vertex-shader', 'fragment-shader');\n\n    scene = new Scene(gl, program);\n\n    clock = new Clock();\n  }\n\n  function draw() {\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  }\n\n  function init() {\n    configure();\n    clock.on('tick', draw);\n  }\n\n  window.onload = init;\n</script>\n```", "```js\nlet gl, program, scene, clock;\n```", "```js\nfunction init() {\n  configure();\n  clock.on('tick', draw);\n}\n\nwindow.onload = init;\n```", "```js\nfunction configure() {\n  const canvas = utils.getCanvas('webgl-canvas');\n  utils.autoResizeCanvas(canvas);\n\n  gl = utils.getGLContext(canvas);\n  gl.clearColor(0.9, 0.9, 0.9, 1);\n  gl.clearDepth(1);\n  gl.enable(gl.DEPTH_TEST);\n  gl.depthFunc(gl.LESS);\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n  program = new Program(gl, 'vertex-shader', 'fragment-shader');\n\n  scene = new Scene(gl, program);\n\n  clock = new Clock();\n}\n```", "```js\nfunction draw() {\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n}\n```", "```js\nconst int numLights = 4;\n```", "```js\n<script id=\"vertex-shader\" type=\"x-shader/x-vertex\">\n  #version 300 es\n  precision mediump float;\n\n  const int numLights = 4;\n\n  uniform mat4 uModelViewMatrix;\n  uniform mat4 uProjectionMatrix;\n  uniform mat4 uNormalMatrix;\n  uniform vec3 uLightPosition[numLights];\n\n  in vec3 aVertexPosition;\n  in vec3 aVertexNormal;\n\n  out vec3 vNormal;\n  out vec3 vLightRay[numLights];\n  out vec3 vEye[numLights];\n\n  void main(void) {\n    vec4 vertex = uModelViewMatrix * vec4(aVertexPosition, 1.0);\n    vec4 lightPosition = vec4(0.0);\n\n    for(int i= 0; i < numLights; i++) {\n      lightPosition = vec4(uLightPosition[i], 1.0);\n      vLightRay[i] = vertex.xyz - lightPosition.xyz;\n      vEye[i] = -vec3(vertex.xyz);\n    }\n\n    vNormal = vec3(uNormalMatrix * vec4(aVertexNormal, 1.0));\n    gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n  }\n</script>\n```", "```js\n<script id=\"fragment-shader\" type=\"x-shader/x-fragment\">\n  #version 300 es\n  precision mediump float;\n\n  const int numLights = 4;\n\n  uniform vec3 uLd[numLights];\n  uniform vec3 uLs[numLights];\n  uniform vec3 uLightPosition[numLights];\n  uniform vec3 uKa;\n  uniform vec3 uKd;\n  uniform vec3 uKs;\n  uniform float uNs;\n  uniform float uD;\n  uniform int uIllum;\n  uniform bool uWireframe;\n\n  in vec3 vNormal;\n  in vec3 vLightRay[numLights];\n  in vec3 vEye[numLights];\n\n  out vec4 fragColor;\n\n  void main(void) {\n    if (uWireframe || uIllum == 0) {\n      fragColor = vec4(uKd, uD);\n      return;\n    }\n\n    vec3 color = vec3(0.0);\n    vec3 light = vec3(0.0);\n    vec3 eye = vec3(0.0);\n    vec3 reflection = vec3(0.0);\n    vec3 normal = normalize(vNormal);\n\n    if (uIllum == 1) {\n      for (int i = 0; i < numLights; i++) {\n        light = normalize(vLightRay[i]);\n        normal = normalize(vNormal);\n        color += (uLd[i] * uKd * clamp(dot(normal, -light), 0.0, 1.0));\n      }\n    }\n\n    if (uIllum == 2) {\n      for (int i = 0; i < numLights; i++) {\n        eye = normalize(vEye[i]);\n        light = normalize(vLightRay[i]);\n        reflection = reflect(light, normal);\n        color += (uLd[i] * uKd * clamp(dot(normal, -light), 0.0, 1.0));\n        color += (uLs[i] * uKs * pow(max(dot(reflection, eye), 0.0), uNs) * \n         4.0);\n      }\n    }\n\n    fragColor =  vec4(color, uD);\n  }\n</script>\n```", "```js\nlet gl, program, scene, clock, camera, transforms, lights,\n  floor, selectedCar, lightPositions, carModelData,\n  clearColor = [0.9, 0.9, 0.9, 1];\n\nfunction configure() {\n // ...\n}\n```", "```js\nfunction configure() {\n  canvas = utils.getCanvas('webgl-canvas');\n  utils.autoResizeCanvas(canvas);\n  gl = utils.getGLContext(canvas);\n\n  // ...\n}\n```", "```js\nclock = new Clock();\nprogram = new Program(gl, 'vertex-shader', 'fragment-shader');\nscene = new Scene(gl, program); \n```", "```js\ngl.clearColor(...clearColor);\ngl.clearDepth(1);\ngl.enable(gl.DEPTH_TEST);\ngl.depthFunc(gl.LESS);\ngl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n```", "```js\ncamera = new Camera(Camera.ORBITING_TYPE);\n```", "```js\nnew Controls(camera, canvas);\n\n```", "```js\ntransforms = new Transforms(gl, program, camera, canvas);\n```", "```js\nlights = new LightsManager();\n```", "```js\nlightPositions = {\n  farLeft: [-1000, 1000, -1000],\n  farRight: [1000, 1000, -1000],\n  nearLeft: [-1000, 1000, 1000],\n  nearRight: [1000, 1000, 1000]\n};\n\nObject.keys(lightPositions).forEach(key => {\n  const light = new Light(key);\n  light.setPosition(lightPositions[key]);\n  light.setDiffuse([0.4, 0.4, 0.4]);\n  light.setSpecular([0.8, 0.8, 0.8]);\n  lights.add(light)\n});\n```", "```js\nconst attributes = [\n  'aVertexPosition',\n  'aVertexNormal',\n  'aVertexColor'\n];\n\nconst uniforms = [\n  'uProjectionMatrix',\n  'uModelViewMatrix',\n  'uNormalMatrix',\n  'uLightPosition',\n  'uWireframe',\n  'uLd',\n  'uLs',\n  'uKa',\n  'uKd',\n  'uKs',\n  'uNs',\n  'uD',\n  'uIllum'\n];\n\nprogram.load(attributes, uniforms);\n```", "```js\ngl.uniform3fv(program.uLightPosition, lights.getArray('position'));\ngl.uniform3fv(program.uLd, lights.getArray('diffuse'));\ngl.uniform3fv(program.uLs, lights.getArray('specular'));\n```", "```js\ngl.uniform3fv(program.uKa, [1, 1, 1]);\ngl.uniform3fv(program.uKd, [1, 1, 1]);\ngl.uniform3fv(program.uKs, [1, 1, 1]);\ngl.uniform1f(program.uNs, 1);\n```", "```js\nfloor = new Floor(200, 2);\n\ncarModelData = {\n  'BMW i8': {\n    paintAlias: 'BMW',\n    partsCount: 25,\n    path: '/common/models/bmw-i8/part'\n  }\n};\n```", "```js\nfunction configure() {\n  const canvas = utils.getCanvas('webgl-canvas');\n  utils.autoResizeCanvas(canvas);\n\n  gl = utils.getGLContext(canvas);\n  gl.clearColor(...clearColor);\n  gl.clearDepth(1);\n  gl.enable(gl.DEPTH_TEST);\n  gl.depthFunc(gl.LESS);\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n  program = new Program(gl, 'vertex-shader', 'fragment-shader');\n\n  const attributes = [\n    'aVertexPosition',\n    'aVertexNormal',\n    'aVertexColor'\n  ];\n\n  const uniforms = [\n    'uProjectionMatrix',\n    'uModelViewMatrix',\n    'uNormalMatrix',\n    'uLightPosition',\n    'uWireframe',\n    'uLd',\n    'uLs',\n    'uKa',\n    'uKd',\n    'uKs',\n    'uNs',\n    'uD',\n    'uIllum'\n  ];\n\n  program.load(attributes, uniforms);\n\n  scene = new Scene(gl, program);\n  clock = new Clock();\n\n  camera = new Camera(Camera.ORBITING_TYPE);\n  new Controls(camera, canvas);\n\n  transforms = new Transforms(gl, program, camera, canvas);\n\n  lights = new LightsManager();\n\n  lightPositions = {\n    farLeft: [-1000, 1000, -1000],\n    farRight: [1000, 1000, -1000],\n    nearLeft: [-1000, 1000, 1000],\n    nearRight: [1000, 1000, 1000]\n  };\n\n  Object.keys(lightPositions).forEach(key => {\n    const light = new Light(key);\n    light.setPosition(lightPositions[key]);\n    light.setDiffuse([0.4, 0.4, 0.4]);\n    light.setSpecular([0.8, 0.8, 0.8]);\n    lights.add(light)\n  });\n\n  gl.uniform3fv(program.uLightPosition, lights.getArray('position'));\n  gl.uniform3fv(program.uLd, lights.getArray('diffuse'));\n  gl.uniform3fv(program.uLs, lights.getArray('specular'));\n\n  gl.uniform3fv(program.uKa, [1, 1, 1]);\n  gl.uniform3fv(program.uKd, [1, 1, 1]);\n  gl.uniform3fv(program.uKs, [1, 1, 1]);\n  gl.uniform1f(program.uNs, 1);\n\n  floor = new Floor(200, 2);\n\n  carModelData = {\n    'BMW i8': {\n      paintAlias: 'BMW',\n      partsCount: 25,\n      path: '/common/models/bmw-i8/part'\n    }\n  };\n}\n```", "```js\n# Blender v2.62 (sub 0) OBJ\nFile: 'squares.blend'\n# www.blender.org\n```", "```js\nmtllib square.mtl\n```", "```js\no squares_mesh\n```", "```js\nv  1.0  0.0 -2.0\nv  1.0  0.0  0.0\nv -1.0  0.0  0.0\nv -1.0  0.0 -2.0\nv  0.0  0.0  0.0\nv  0.0  0.0 -2.0\nvn 0.0  1.0  0.0\n```", "```js\ng squares_mesh_blue\n```", "```js\nusemtl blue\n```", "```js\ns off\n```", "```js\nf i1 i2 i3...\n```", "```js\nf i1/t1 i2/t2 i3/t3...\n```", "```js\nf i1/t1/n1 i2/t2/n2 i3/t3/n3...\n```", "```js\nf i1//n1 i2//n2 i3//n3...\n```", "```js\nf 6//1 4//1 3//1\nf 6//1 3//1 5//1\n```", "```js\ng squares_mesh_red\nusemtl red\nf 1//1 6//1 5//1\nf 1//1 5//1 2//1\n```", "```js\nobj-parser.py arg1 arg2\n```", "```js\nobj-parser.py square.obj square.mtl\n```", "```js\nfunction goHome() {\n  camera.goHome([0, 0.5, 10]);\n  camera.setFocus([0, 0, 0]);\n  camera.setAzimuth(25);\n  camera.setElevation(-11);\n}\n\nfunction load() {\n  goHome();\n  loadCar('BMW i8');\n}\n```", "```js\nfunction loadCar(model) {\n  scene.objects = [];\n  scene.add(floor);\n  const { path, partsCount } = carModelData[model];\n  scene.loadByParts(path, partsCount);\n  selectedCar = model;\n}\n```", "```js\nfunction draw() {\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  transforms.updatePerspective();\n\n  // ...\n}\n```", "```js\ntry {\n  scene.traverse(object => {\n    if (!object.visible) return;\n\n    transforms.calculateModelView();\n    transforms.push();\n    transforms.setMatrixUniforms();\n    transforms.pop();\n\n    gl.uniform3fv(program.uKa, object.Ka);\n    gl.uniform3fv(program.uKd, object.Kd);\n    gl.uniform3fv(program.uKs, object.Ks);\n    gl.uniform1f(program.uNs, object.Ns);\n    gl.uniform1f(program.uD, object.d);\n    gl.uniform1i(program.uIllum, object.illum);\n\n    // Bind\n    gl.bindVertexArray(object.vao);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, object.ibo);\n\n    if (object.wireframe) {\n      gl.uniform1i(program.uWireframe, 1);\n      gl.drawElements(gl.LINES, object.indices.length, gl.UNSIGNED_SHORT, \n       0);\n    }\n    else {\n      gl.uniform1i(program.uWireframe, 0);\n      gl.drawElements(gl.TRIANGLES, object.indices.length, \n       gl.UNSIGNED_SHORT, 0);\n    }\n\n    // Clean\n    gl.bindVertexArray(null);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n  });\n}\ncatch (error) {\n  console.error(error);\n}\n```", "```js\n<html>\n<head>\n  <title>Real-Time 3D Graphics with WebGL2</title>\n  <link rel=\"shortcut icon\" type=\"image/png\" \n   href=\"/common/images/favicon.png\" />\n\n  <!-- libraries -->\n  <link rel=\"stylesheet\" href=\"/common/lib/normalize.css\">\n  <script type=\"text/javascript\" src=\"img/dat.gui.js\"></script>\n  <script type=\"text/javascript\" src=\"img/gl-matrix.js\"></script>\n\n  <!-- modules -->\n  <script type=\"text/javascript\" src=\"img/utils.js\"></script>\n  <script type=\"text/javascript\" src=\"img/EventEmitter.js\"></script>\n  <script type=\"text/javascript\" src=\"img/Camera.js\"></script>\n  <script type=\"text/javascript\" src=\"img/Clock.js\"></script>\n  <script type=\"text/javascript\" src=\"img/Controls.js\"></script>\n  <script type=\"text/javascript\" src=\"img/Floor.js\"></script>\n  <script type=\"text/javascript\" src=\"img/Light.js\"></script>\n  <script type=\"text/javascript\" src=\"img/Program.js\"></script>\n  <script type=\"text/javascript\" src=\"img/Scene.js\"></script>\n  <script type=\"text/javascript\" src=\"img/Texture.js\"></script>\n  <script type=\"text/javascript\" src=\"img/Transforms.js\"></script>\n\n```", "```js\n  <script id=\"vertex-shader\" type=\"x-shader/x-vertex\">\n    #version 300 es\n    precision mediump float;\n\n    const int numLights = 4;\n\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n    uniform mat4 uNormalMatrix;\n    uniform vec3 uLightPosition[numLights];\n\n    in vec3 aVertexPosition;\n    in vec3 aVertexNormal;\n\n    out vec3 vNormal;\n    out vec3 vLightRay[numLights];\n    out vec3 vEye[numLights];\n\n    void main(void) {\n      vec4 vertex = uModelViewMatrix * vec4(aVertexPosition, 1.0);\n      vec4 lightPosition = vec4(0.0);\n\n      for(int i= 0; i < numLights; i++) {\n        lightPosition = vec4(uLightPosition[i], 1.0);\n        vLightRay[i] = vertex.xyz - lightPosition.xyz;\n        vEye[i] = -vec3(vertex.xyz);\n      }\n\n      vNormal = vec3(uNormalMatrix * vec4(aVertexNormal, 1.0));\n      gl_Position = uProjectionMatrix * uModelViewMatrix * \n       vec4(aVertexPosition, 1.0);\n    }\n  </script>\n```", "```js\n  <script id=\"fragment-shader\" type=\"x-shader/x-fragment\">\n    #version 300 es\n    precision mediump float;\n\n    const int numLights = 4;\n\n    uniform vec3 uLd[numLights];\n    uniform vec3 uLs[numLights];\n    uniform vec3 uLightPosition[numLights];\n    uniform vec3 uKa;\n    uniform vec3 uKd;\n    uniform vec3 uKs;\n    uniform float uNs;\n    uniform float uD;\n    uniform int uIllum;\n    uniform bool uWireframe;\n\n    in vec3 vNormal;\n    in vec3 vLightRay[numLights];\n    in vec3 vEye[numLights];\n\n    out vec4 fragColor;\n\n    void main(void) {\n      if (uWireframe || uIllum == 0) {\n        fragColor = vec4(uKd, uD);\n        return;\n      }\n\n      vec3 color = vec3(0.0);\n      vec3 light = vec3(0.0);\n      vec3 eye = vec3(0.0);\n      vec3 reflection = vec3(0.0);\n      vec3 normal = normalize(vNormal);\n\n      if (uIllum == 1) {\n        for (int i = 0; i < numLights; i++) {\n          light = normalize(vLightRay[i]);\n          normal = normalize(vNormal);\n          color += (uLd[i] * uKd * clamp(dot(normal, -light), 0.0, 1.0));\n        }\n      }\n\n      if (uIllum == 2) {\n        for (int i = 0; i < numLights; i++) {\n          eye = normalize(vEye[i]);\n          light = normalize(vLightRay[i]);\n          reflection = reflect(light, normal);\n          color += (uLd[i] * uKd * clamp(dot(normal, -light), 0.0, 1.0));\n          color += (uLs[i] * uKs * pow(max(dot(reflection, eye), 0.0), uNs) \n           * 4.0);\n        }\n      }\n\n      fragColor =  vec4(color, uD);\n    }\n  </script>\n\n```", "```js\n  <script type=\"text/javascript\">\n    'use strict';\n\n    let gl, program, scene, clock, camera, transforms, lights,\n      floor, selectedCar, lightPositions, carModelData,\n      clearColor = [0.9, 0.9, 0.9, 1];\n\n```", "```js\n\n    function configure() {\n      const canvas = utils.getCanvas('webgl-canvas');\n      utils.autoResizeCanvas(canvas);\n\n      gl = utils.getGLContext(canvas);\n      gl.clearColor(...clearColor);\n      gl.clearDepth(1);\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LESS);\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n      program = new Program(gl, 'vertex-shader', 'fragment-shader');\n\n      const attributes = [\n        'aVertexPosition',\n        'aVertexNormal',\n        'aVertexColor'\n      ];\n\n      const uniforms = [\n        'uProjectionMatrix',\n        'uModelViewMatrix',\n        'uNormalMatrix',\n        'uLightPosition',\n        'uWireframe',\n        'uLd',\n        'uLs',\n        'uKa',\n        'uKd',\n        'uKs',\n        'uNs',\n        'uD',\n        'uIllum'\n      ];\n\n      program.load(attributes, uniforms);\n\n      scene = new Scene(gl, program);\n      clock = new Clock();\n\n      camera = new Camera(Camera.ORBITING_TYPE);\n      new Controls(camera, canvas);\n\n      transforms = new Transforms(gl, program, camera, canvas);\n\n      lights = new LightsManager();\n\n      lightPositions = {\n        farLeft: [-1000, 1000, -1000],\n        farRight: [1000, 1000, -1000],\n        nearLeft: [-1000, 1000, 1000],\n        nearRight: [1000, 1000, 1000]\n      };\n\n      Object.keys(lightPositions).forEach(key => {\n        const light = new Light(key);\n        light.setPosition(lightPositions[key]);\n        light.setDiffuse([0.4, 0.4, 0.4]);\n        light.setSpecular([0.8, 0.8, 0.8]);\n        lights.add(light)\n      });\n\n      gl.uniform3fv(program.uLightPosition, lights.getArray('position'));\n      gl.uniform3fv(program.uLd, lights.getArray('diffuse'));\n      gl.uniform3fv(program.uLs, lights.getArray('specular'));\n\n      gl.uniform3fv(program.uKa, [1, 1, 1]);\n      gl.uniform3fv(program.uKd, [1, 1, 1]);\n      gl.uniform3fv(program.uKs, [1, 1, 1]);\n      gl.uniform1f(program.uNs, 1);\n\n      floor = new Floor(200, 2);\n\n      carModelData = {\n        'BMW i8': {\n          paintAlias: 'BMW',\n          partsCount: 25,\n          path: '/common/models/bmw-i8/part'\n        }\n      };\n    }\n\n    function goHome() {\n      camera.goHome([0, 0.5, 5]);\n      camera.setFocus([0, 0, 0]);\n      camera.setAzimuth(25);\n      camera.setElevation(-10);\n    }\n```", "```js\n    function loadCar(model) {\n      scene.objects = [];\n      scene.add(floor);\n      const { path, partsCount } = carModelData[model];\n      scene.loadByParts(path, partsCount);\n      selectedCar = model;\n    }\n\n    function load() {\n      goHome();\n      loadCar('BMW i8');\n    }\n```", "```js\n    function draw() {\n      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      transforms.updatePerspective();\n\n      try {\n        scene.traverse(object => {\n          if (!object.visible) return;\n\n          transforms.calculateModelView();\n          transforms.push();\n          transforms.setMatrixUniforms();\n          transforms.pop();\n\n          gl.uniform3fv(program.uKa, object.Ka);\n          gl.uniform3fv(program.uKd, object.Kd);\n          gl.uniform3fv(program.uKs, object.Ks);\n          gl.uniform1f(program.uNs, object.Ns);\n          gl.uniform1f(program.uD, object.d);\n          gl.uniform1i(program.uIllum, object.illum);\n\n          // Bind\n          gl.bindVertexArray(object.vao);\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, object.ibo);\n\n          if (object.wireframe) {\n            gl.uniform1i(program.uWireframe, 1);\n            gl.drawElements(gl.LINES, object.indices.length, \n             gl.UNSIGNED_SHORT, 0);\n          }\n          else {\n            gl.uniform1i(program.uWireframe, 0);\n            gl.drawElements(gl.TRIANGLES, object.indices.length, \n             gl.UNSIGNED_SHORT, 0);\n          }\n\n          // Clean\n          gl.bindVertexArray(null);\n          gl.bindBuffer(gl.ARRAY_BUFFER, null);\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        });\n      }\n      catch (error) {\n        console.error(error);\n      }\n    }\n```", "```js\n    function init() {\n      configure();\n      load();\n      clock.on('tick', draw);\n    }\n\n    window.onload = init;\n\n  </script>\n</head>\n\n<body>\n\n  <canvas id=\"webgl-canvas\">\n    Your browser does not support the HTML5 canvas element.\n  </canvas>\n\n</body>\n</html>\n```"]