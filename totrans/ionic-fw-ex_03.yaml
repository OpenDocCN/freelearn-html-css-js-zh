- en: Chapter 3. Running Ionic Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to learn how to test and run our Ionic application
    using various methods. We will start by learning to test our application using
    the simplest Ionic technique: by serving our app to the Chrome browser using the
    `ionic serve` command. We will then go ahead and use the Ionic view mobile app
    for iOS/Android to see how we can test our application on a mobile device. Lastly,
    we will learn to run and deploy our Ionic application to a mobile device using
    the traditional build system of the native SDKs of our respective platforms.'
  prefs: []
  type: TYPE_NORMAL
- en: Running our todo app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we created our first Ionic application using the Ionic
    blank template. We worked on the application further, and made a to-do list app.
    We wrote some Angular code and had some initial exposure to some Ionic code. However,
    we did not get to see our application in action. There are many ways by which
    we can run an Ionic app, and the first technique we will be learning is the `ionic
    serve` technique.
  prefs: []
  type: TYPE_NORMAL
- en: The ionic serve technique
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ionic serve` technique is the simplest way to see your app in action. It
    requires no extra setup after the Ionic CLI, and only requires you to have a web
    browser. We are now going to test our `todo` application, which we created in
    the preceding chapter using the `ionic serve` technique. To test your application
    with this technique, simply open a new command-line window and follow the following
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Browser choice**'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is advisable that you use Google Chrome as your default browser. Google
    Chrome has some very powerful development tools and all exercises in this book
    expect that you have Google Chrome installed as your default browser. You can
    download a copy of Google Chrome by visiting this URL: [http://www.google.com/chrome](http://www.google.com/chrome).'
  prefs: []
  type: TYPE_NORMAL
- en: From your terminal, navigate to the root directory of your Ionic `todo` application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command in your command-line window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In case you are prompted to select an IP address, you can select any one from
    the list prompted and press *Enter* to initiate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you followed the steps correctly, you should see a browser window come up
    with your app running in it. You will also notice that the command-line window
    where you typed the command has some things going on within it.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have successfully served our application to the browser and can
    test our Ionic application like any other web application on Chrome. The great
    thing about this technique is the fact that no extra setup is required, and all
    you need is just Ionic CLI and the Chrome browser installed on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Emulating with Chrome
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even though our application is served on the Chrome browser, it is fullscreen
    and is served like a normal fullscreen web app. This is not ideal for us, as our
    application is a mobile application. Luckily, Chrome has a neat emulation tool
    that lets you emulate your application as if it were running on a normal mobile
    phone.
  prefs: []
  type: TYPE_NORMAL
- en: To use Chrome's emulation feature, follow the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These steps assume that you already have your app served on the Chrome browser
    and you are currently on the tab that it is served on.
  prefs: []
  type: TYPE_NORMAL
- en: Click the Chrome menu icon, as shown in the following screenshot:![Emulating
    with Chrome](img/00011.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the **More Tools** options and select the **Developer Tools**
    option, as shown in the following screenshot:![Emulating with Chrome](img/00012.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Device Mode** toggle icon, as shown in the following screenshot:![Emulating
    with Chrome](img/00013.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This should bring up the Chrome emulator window with your app running on it.
    You might need to refresh the page for it to render the app correctly. If you
    have a look at the window, you will see a dropdown menu on the upper-left corner
    that has a list of devices that you can emulate. I normally recommend using the
    Nexus 5 for testing Android and the iPhone 6 for iOS. The reason for this is that
    the resolution of the Nexus 5 eclipses many of the Android phones available today
    so using it as a basis makes a lot of sense. The same goes for the iPhone 6 as
    well; since it is Apple's flagship device at the time of writing, it makes sense
    to use it for emulation.
  prefs: []
  type: TYPE_NORMAL
- en: '![Emulating with Chrome](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can fully interact with your app as if it were running in an emulator. You
    also have the full power of the Chrome developer tools to inspect elements and
    see how the code of your application is represented. Why don't you have a go with
    your app and try and add some to-do list items and see them populating.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic serve labs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is another flavor in the `ionic serve` technique that lets us see our
    app the way it looks on both iOS and Android simultaneously. This technique is
    called the Ionic labs technique.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This technique should only be used to view your app and is not intended to be
    used for debugging.
  prefs: []
  type: TYPE_NORMAL
- en: To view your app using the Ionic labs technique, simply follow the following
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are already viewing your app using the `ionic serve` technique, simply
    press *Q* to quit the current session or close the command-line window and open
    a new one.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you are in the root folder of your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command in your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Ionic serve labs](img/00015.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Running this should bring up a new browser window the same way as it did the
    first time when we ran the `ionic serve` command; only that this time, you will
    see two emulations for your app, one for iOS and one for Android, as shown in
    the preceding screenshot. This is a really nice way to see your app running in
    action on both platforms simultaneously. Ionic has a term called **Continuum**
    which you will see in action in later chapters. This phenomenon refers to the
    fact that certain elements look different on different platforms. For example,
    tabs on iOS are normally placed on the bottom, while on Android, they are traditionally
    positioned on the top. Ionic offers us these features out of the box with a further
    way to override these behaviors. The `ionic serve` technique is a great way to
    see the features like the tab positioned differently on different platforms simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: The Ionic view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another technique to view an Ionic app is by using the Ionic view application.
    The Ionic view app is a mobile application created by Ionic with Ionic framework
    available on iOS and Android. The application is used to view any Ionic application
    you are developing and works hand-in-hand with the Ionic IO platform. The Ionic
    IO platform is a suite of tools that Ionic provides for some extra services like
    push notifications, analytics, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Testing todo app with the Ionic view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to use the Ionic view app, you must have an iOS or Android device.
    You must also possess an Ionic IO account. Navigate to [http://apps.ionic.io](http://apps.ionic.io)
    to create your Ionic IO account. Go ahead and download the Ionic view app by visiting
    [http://view.ionic.io](http://view.ionic.io) on your mobile device and downloading
    the correct version for your mobile device.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to test our `todo` application, follow the following steps to test
    it with the Ionic view app:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal window and navigate to the root folder of your `todo` application
    from `Chapter 2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Simply enter the following command on your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will request the e-mail and password details of your Ionic IO account.
    Enter these details when prompted and if the app uploaded correctly, you should
    see a message saying `Successfully Uploaded (APP_ID)`, where `APP_ID` is an auto-generated
    identifier for you app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you are ready to view the app on your mobile device. To do this, simply
    open your Ionic view app on your phone and login with the same Ionic IO account
    you uploaded your app to. You should see your application in a similar fashion
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing todo app with the Ionic view](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From here, you simply tap the `todo` app and a prompt will come up with a number
    of options. You should select the **download files** option. After this has finished,
    you can simply click the **View App** option. If you followed the instructions
    correctly, the `todo` app should replace your current view and you should see
    it running within the Ionic view app.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can simply tap the screen with three fingers to go back to the Ionic view
    menu at any time.
  prefs: []
  type: TYPE_NORMAL
- en: The Ionic view is a good way to view your application, and is extremely useful
    when you want to share progress with your friends, clients, or your boss about
    an app. It has a feature that lets you share to people's e-mails and you can find
    these documented in the Ionic official documentation. You can also manage the
    apps you upload to Ionic view from within the app or online via the Ionic IO website
    at [http://apps.ionic.io](http://apps.ionic.io).
  prefs: []
  type: TYPE_NORMAL
- en: Device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also test your Ionic application by running it on a physical device.
    To do this, however, you must have the native SDK for each platform installed
    on your computer. Let's take a brief look at how you can run an Ionic app on your
    device.
  prefs: []
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To run an Ionic app on a physical device, first you simply ensure that you have
    your Android device plugged in via USB. You also need to ensure that you have
    developer mode enabled in your computer with USB debugging on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This step assumes that you have already set up the Android SDK on your computer
    and you also have Cordova and Ionic set up on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that you are in the root folder of your project in a terminal window
    and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If you have everything set up correctly, this command will build your app and
    run it on the device plugged into the computer automatically.
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To run an Ionic app on an iOS device, first you need to ensure that you have
    the `iOS-deploy` package installed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can only deploy your app to an iOS device using a Mac computer. This step
    also assumes that you have the iOS SDK set up correctly alongside X-Code on your
    Mac computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not have the `iOS-deploy` package installed, you can install it via
    NPM by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Plug in your device to your Mac computer and ensure that it does not have the
    lock screen enabled. Simply run the following command to deploy your Ionic app
    to your device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This command should build and run your application automatically on your plugged
    iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned the various ways to test and deploy our app. We
    started off by using the `ionic serve` command to deploy our app to the browser
    using Chrome. We then had a look at how we can also serve our application using
    Ionic labs. We then went ahead to use the Ionic view application to see how we
    can run our app on an iOS and Android device with the Ionic view app installed
    in it. Lastly, we touched on how we can actually run our Ionic application on
    a real Android or iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to dive into some more complex Ionic controls,
    and we will get to use Angular's `$http` service to see how we can make Ajax calls
    and retrieve data within our Ionic application.
  prefs: []
  type: TYPE_NORMAL
