- en: Chapter 8. Basic Security Approaches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing iOS data protection in Titanium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AES encryption using JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic authentication using Ti.Network.HTTPClient
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a cross-platform passcode screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with protected ZIP files on iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security, privacy, and safeguards for intellectual property are at the front
    of the minds of those of us building Titanium Enterprise apps. Titanium allows
    you to combine the underlying platform tools and third-party JavaScript libraries
    to help meet your security requirements.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter provides a series of approaches on how to leverage JavaScript,
    Titanium modules, and the underlying platform to enable you to create a layered
    security approach to assist you in meeting your organization's overall secure
    development goals. Each recipe is designed to provide building blocks to help
    you implement your industry's existing security and privacy standards.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing iOS data protection in Titanium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting with iOS 4, Apple introduced the ability for apps to use the data protection
    feature to add an additional level of security for data stored on disk. Data protection
    uses the built-in hardware encryption to encrypt files stored on the device. This
    feature is available when the user's device is locked and protected with a passcode
    lock. During this time, all files are protected and inaccessible until the user
    explicitly unlocks the device.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the device is locked, no app can access protected files. This even applies
    to the app that created the file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the `securely` native module for enhanced security functionality.
    This module and other code assets can be downloaded from the source provided by
    the book. Installing these in your project is straightforward. Simply copy the
    `modules` folder into your project as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After copying the mentioned folder, you will need to click on your **tiapp.xml**
    file in Titanium Studio and add a reference to the `bencoding.securely` module
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enabling data protection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This recipe requires your iOS device to have data protection enabled. You will
    need a device as the simulator does not support data protection. The following
    steps cover how to enable this feature on your device:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Settings** | **General** | **Passcode**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the prompts to set up a passcode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After adding a passcode, scroll to the bottom of the screen and verify that
    the text **Data protection is enabled** is visible as shown in the following screenshot:![Enabling
    data protection](img/5343_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: iOS device browser
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A third-party iOS device browser is needed to verify that data protection for
    the example recipe app has successfully been enabled. This recipe discusses how
    to verify data protection using the popular iExplorer app. An evaluation version
    of the iExplorer app can be used to follow along with this recipe. For more information
    and to download iExplorer, please visit [http://www.macroplant.com/iexplorer](http://www.macroplant.com/iexplorer).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To enable iOS data protection, the `DataProtectionClass` and `com.apple.developer.default-data-protection`
    keys need to be added to your `tiapp.xml` as demonstrated in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: First, add the `ios` configuration node if your project does not already contain
    this element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then at the top of the `dict` node, add the following highlighted keys.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After saving the updates to your `tiapp.xml`, you must clean your Titanium project
    in order to have the updates take effect. This can be done in Titanium Studio
    by selecting **Project** | **Clean**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the namespace and imports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have added the `securely` module and added the `tiapp.xml` updates
    to your project, you need to create your application namespace in the `app.js`
    file and use `require` to import the module into your code as the following code
    snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating the recipe UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following steps outline how to create the UI used in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: First, a `Ti.UI.Window` is created to attach all UI elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, a `Ti.UI.Button` is added to the `Ti.UI.Window`. This will be used to
    trigger our example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a file to verify data protection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To verify if data protection is enabled in the app, the recipe creates a time-stamped
    file in the `Ti.Filesystem.applicationDataDirectory` directory. Using an iOS device
    browser, we can verify if the test file is protected when the device is locked.
    The following steps describe how the recipe creates this test file:'
  prefs: []
  type: TYPE_NORMAL
- en: The `click` event for `button1` creates a time-stamped file that allows us to
    verify if data protection has been correctly enabled for the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next the `isProtectedDataAvailable` method is called on `securely`. This provides
    a Boolean result indicating that data protection allows the app to read from or
    write to the filesystem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To ensure there is a unique identifier in the file, a token is created using
    the current date and time. This token is then added to the following message template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The message created in step 3 is then written to the `test.txt` file located
    in the `Ti.Filesystem.applicationDataDirectory` directory. If the file already
    exists, it is removed so that the latest message will be available for testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once the `test.txt` file is written to the device, a message is displayed to
    the user notifying them to lock their device and use an iOS device browser to
    confirm data protection is enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After the `DataProtectionClass` and `com.apple.developer.default-data-protection`
    keys have been added to your `tiapp.xml`, the iOS device handles protecting your
    files when the device is locked. The following steps discuss how to test that
    this recipe has correctly implemented data protection:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step in the validation process is to build and deploy the recipe app
    to your iOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the app has been loaded onto your device, open the app and press the **Create
    Test File** button.![How it works...](img/5343_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have received an alert message indicating the test file has been created,
    press the home button and lock your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plug your device into a computer with iExplorer installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open iExplorer and navigate so that you can view the apps on your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **DataProtection** app as marked with the red box in the following
    screenshot. Then right-click on the **test.txt** file located in the **Documents**
    folder and select **Quick Look** as marked with the green box in the following
    screenshot:![How it works...](img/5343_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After **Quick Look** is selected, iExplorer will try to open the `test.txt`
    file. Since it is protected, it cannot be opened and **Quick Look** will show
    the progress indicator until a timeout has been reached.![How it works...](img/5343_08_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can then unlock your device and repeat the preceding steps to open the file
    in **Quick Look**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AES encryption using JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Advanced Encryption Standard** (**AES**) is a specification for the encryption
    of electronic data established by the U.S. NIST in 2001\. This encryption algorithm
    is used for securing sensitive, but unclassified material by U.S. Government agencies.
    AES has been widely adopted by enterprise and has become a de facto encryption
    standard for many commercially sensitive transactions.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe discusses how AES can be implemented in JavaScript and incorporated
    into your Titanium Enterprise app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the `Ti.SlowAES` CommonJS module as a wrapper around the `SlowAES`
    open source project. This module and other code assets can be downloaded from
    the source provided by the book, or individually through the links provided in
    the *See also* section at the end of this recipe. Installing these in your project
    is straightforward. Simply copy the `SlowAES` folder into the `Resources` folder
    of your project as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added the `SlowAES` folder to your project, next you need to
    create your application namespace in the `app.js` file and use `require` to import
    the module into your code as the following code snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Creating the recipe UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe demonstrates the usage of the `Ti.SlowAES` CommonJS module through
    a sample app using two `Ti.UI.TextField` controls for input.
  prefs: []
  type: TYPE_NORMAL
- en: First, a `Ti.UI.Window` is created to attach all UI elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Creating the recipe UI](img/5343_08_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Next, a `Ti.UI.TextField` control is added to the `Ti.UI.Window` to gather the
    secret from the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Another `Ti.UI.TextField` is added to the `Ti.UI.Window` to gather the string
    to encrypt from the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next a `Ti.UI.Label` is added to the `Ti.UI.Window`. This `Ti.UI.Label` will
    be used to display the encrypted value to the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally a `Ti.UI.Button` is added to the `Ti.UI.Window`. This `Ti.UI.Button`
    will be used later in the recipe to perform the encryption test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Encrypting and decrypting values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This section demonstrates how to use the `Ti.SlowAES` module to use the secret
    entered in the `txtSecret`, `Ti.UI.TextField` to encrypt the contents of the `txtToEncrypt`,
    `Ti.UI.TextField`. Once completed, the encrypted value is then decrypted and compared
    against the original input. The results are displayed to the user in an alert
    message as shown in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Encrypting and decrypting values](img/5343_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The encryption test is performed when the click event for the `btnEncrypt`
    control is fired as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The first step in the encryption process is to create a new instance of the
    `SlowAES` module as shown in this code snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next using the encrypt function, the secret provided in the `txtSecret` control
    is used to encrypt the value in the `txtToEncrypt` control. The encrypted results
    are then returned to the `encryptedValue` as demonstrated in the following statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `encryptedLabel.text` property is then updated to display the encrypted
    value to the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, the `decrypt` method is used to demonstrate how to decrypt the string
    value encrypted earlier. This method requires the encrypted string value and the
    secret as shown in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, the original input value is compared against the decrypted value to
    ensure our encryption test was successful. The results of this test are then displayed
    to the user through a message alert and the Titanium Studio console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also refer to the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: It is important to understand some of the weaknesses of JavaScript Cryptography.
    When deciding on an encryption approach, I would recommend reading the Matasano
    Security article on this subject available at [http://www.matasano.com/articles/javascript-cryptography](http://www.matasano.com/articles/javascript-cryptography).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe uses the `SlowAES` project to implement the AES algorithm. To read
    the license and to learn more about the `SlowAES` project, please visit [http://code.google.com/p/slowaes](http://code.google.com/p/slowaes).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To download the `Ti.SlowAES` CommonJS module and learn more about how to implement
    its functionality visit [https://github.com/benbahrenburg/Ti.SlowAES](https://github.com/benbahrenburg/Ti.SlowAES).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic authentication using Ti.Network.HTTPClient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most enterprise sites or services provide access to content through basic access
    authentication. Basic authentication is a method for a HTTP user agent to provide
    a username and password when making a request. It is important to remember that
    basic authentication base64 encodes your credentials, not encrypts them. For this
    reason, it is advised that HTTPS is used when creating network connections.
  prefs: []
  type: TYPE_NORMAL
- en: Titanium provides full support for basic authentication using the SDK's `Ti.Network`
    functionality. This recipe describes how to use the `Ti.Network.HTTPClient` proxy
    to connect to a website using basic authentication headers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the `Ti.BA` CommonJS module as an assist to Titanium''s native
    `Ti.Network.HTTPClient`. This module and other code assets can be downloaded from
    the source provided by the book. Installing this module in your project is straightforward.
    Simply copy the `Ti.BA.js` file into `Resources` folder of your project as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added the `Ti.BA.js` file to your project, you need to create
    your application namespace in the `app.js` file and use `require` to import the
    module into your code as the following code snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Creating the recipe UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This recipe uses a simple UI to illustrate how to establish a basic authenticated
    network connection. The code snippets in this section walkthrough how to construct
    the basic authentication testing app shown in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the recipe UI](img/5343_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, a `Ti.UI.Window` is created to attach all UI elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next the `txtUsername Ti.UI.TextField` is added to the `Ti.UI.Window`. The default
    value is set to `test` since it is the default for the `browserspy.dk` test site
    used to create our mock test connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `txtPassword Ti.UI.TextField` is then added to the `Ti.UI.Window`. The default
    value is set to `test` since it is the default for the `browserspy.dk` test site
    used to create our mock test connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next the `txtUrl Ti.UI.TextField` is added to the `Ti.UI.Window`. The default
    value is set to `"http://browserspy.dk/password-ok"`. The value for `txtUrl` can
    be updated to any service requiring basic authentication. For demonstration purposes,
    the recipe uses the `browserspy.dk` test site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally the `btnConnect Ti.UI.Button` is added to the `Ti.UI.Window`. Later
    in this recipe, the `btnConnect` control will be used to initialize the authenticated
    network connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a service connection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With the sample UI now in place, the next step in the recipe is to perform
    a secure network connection using basic authentication. The following snippets
    are used to create a network connection and display the results shown in the following
    screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a service connection](img/5343_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A basic authenticated test network connection is performed when the `click`
    event for the `btnConnect` control is fired as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: First, the `Ti.Network.online` property is checked to ensure the device has
    a network connection. If no network connection is available, the user is alerted
    and the function is exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next the `onDone` function is created. This function is used as a callback for
    the results of the authentication network connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When in the `onDone` function, the first action performed is to check the results
    provided in the `d.success` property. If this property is `true`, the network
    connection was successfully completed. Otherwise, the `d.error` message is printed
    to the console and the user is notified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `credentials` object is then created. This contains the username and password
    to be used when creating our authenticated connection. Please note these values
    should be in plain text as demonstrated in taking the values directly from the
    `Ti.UI.TextField` controls on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Ti.BA module` allows you to configure all of the `Ti.Network.HTTPClient`
    options along with controlling and specifying the service's output format. The
    following snippet demonstrates how to configure the request to set the timeout
    to 9 seconds, and specify the `responseText` be the returned response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally a new instance of the `Ti.BA` module is created and the following are
    provided:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Method**: The `GET` or `POST` action is performed. In the case of this sample,
    the `POST` method is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**URL**: The URL the module uses to connect.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Credentials**: The `credentials` object contains the username and password
    that will be used to create the basic authenticated connection.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Callback**: This parameter requires a callback method to be provided. In
    this sample, the `onDone` method is provided to the module and will return the
    connection response.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Options**: These are the configuration options for the `Ti.Network.HTTPClient`
    and result type to be returned. If none is provided, the module''s default values
    are returned.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Implementing a cross-platform passcode screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Password and passcode screens are common verification instruments for enterprise
    apps. These screens provide interaction patterns that help solve both authentication
    and confirmation scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates how to implement a cross-platform passcode screen similar
    to those seen on iOS and in the Android networking screens.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the `Ti.Passcode` CommonJS module to implement a cross-platform
    passcode screen. This module and other code assets can be downloaded from the
    source provided by the book, or individually through the links provided in the
    *See also* section at the end of this recipe. Installing this module in your project
    is straightforward. Simply copy the `Ti.Passcode.js` file into the `Resources`
    folder of your project as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added the `Ti.Passcode.js` file to your project, you need to
    create your application namespaces in the `app.js` file and use `require` to import
    the module into your code as the following code demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Creating the recipe UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe uses `Ti.UI.Windows` to present information to the user. The code
    used to create the first `Ti.UI.Window` is discussed in this section. This section
    details how to launch the `Ti.Passcode` module and provides a code to have it
    verified.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the recipe UI](img/5343_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, a `Ti.UI.Window` is created to attach all UI elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next the `txtPasscode Ti.UI.TextField` is added to the `Ti.UI.Window`. This
    control is used to collect the passcode that the `Ti.Passcode` module will verify
    against.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally the `bntRunPasscode Ti.UI.Button` is added to the `Ti.UI.Window`. This
    button will be used later in the recipe to launch the passcode screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Launching the passcode screen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The second `Ti.UI.Window` in this recipe is created by the `Ti.Passcode` module.
    This `Ti.UI.Window` is responsible for the presentation and verification of the
    application passcode. This section describes how to configure, create, and confirm
    your app passcode using this module''s display element shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching the passcode screen](img/5343_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The passcode verification screen is launched when the user taps the `btnRunPasscode
    Ti.UI.Button` and triggers the `click` event to be fired. The following code snippet
    discusses the actions performed after the `click` event is fired:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The first code block in the `click` event of the `btnRunPasscode` button is
    to create our configuration and other variables. The `options` object contains
    all of the settings needed to configure the `Ti.Passcode` window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `window` configuration element allows for all of the standard `Ti.UI.Window`
    properties to be used. The following snippet shows how to set the `backgroudnColor`
    and `navBarHidden` properties on the passcode window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `view` configuration element allows for the configuration of a majority
    of the components displayed in the `Ti.Passcode` window. The following snippet
    demonstrates how to set the `passcode` title property and code for displaying
    the error message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Please review the `Ti.Passcode` module for a complete list of the configuration
    properties available.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next the `onCompleted` callback function is defined. This function will be used
    as the callback method provided to the `Ti.Passcode` module. The passcode verification
    results will be provided as a dictionary to the `d` input parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `d` argument is an object with the verification results. The `d.success`
    property provides an indicator if the entered passcode matches the passcode provided
    on launch. The following code snippet alerts the user if they have entered the
    correct passcode or if they need to try the process again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step in this section of the recipe is to create a new instance of
    the passcode module. The following snippet demonstrates how to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `createWindow` method is then called on the new passcode instance. This
    method provides the passcode to verify from the `txtPasscode` control, and also
    provides the callback and options objects created earlier. This method then returns
    a `Ti.UI.Window`. Once the passcode has been entered, the callback method `onCompleted`
    will send the verification results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Ti.UI.Window` returned by the `createWindow` method is then opened with
    a modal flag. The passcode `Ti.UI.Window` will remain open until closed by the
    `onCompleted` callback method as discussed earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following screenshots illustrate how this section of the code looks on the
    device after the user has successfully entered his/her passcode.
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching the passcode screen](img/5343_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the `Ti.Passcode` CommonJS module. To read the documentation
    and to learn more about this project, please visit [https://github.com/benbahrenburg/Ti.Passcode](https://github.com/benbahrenburg/Ti.Passcode).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with protected ZIP files on iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Protected zip files are a common way to exchange, store, and transmit enterprise
    data. ZIP files are often used to bundle several files together for transmission
    or storage. As an extra layer of security, all such files should always be protected
    with a strong password.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe discusses how to create and unzip protected compressed
    files on iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the `bencoding.zip` native module to work with protected zip
    files. This module and other code assets can be downloaded from the source provided
    by the book, or individually through the links provided in the *See also* section
    at the end of this recipe. Installing this module in your project is straightforward.
    Simply copy the `modules` folder into the root of your project, and then copy
    the `data` folder into the `Resources` directory of your project as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After copying the mentioned folders, you will need to click on your **tiapp.xml**
    file in Titanium Studio and add a reference to the `bencoding.zip` module as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added the `modules` and `data` folders to your project, you need
    to create your application namespaces in the `app.js` file and use `require` to
    import the module into your code as the following code snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Creating the recipe UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This recipe uses a simple UI to illustrate how to create (zip) and unzip protected
    ZIP files. The code discussed in this section walks through how to construct the
    recipe''s UI shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the recipe UI](img/5343_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following steps outline how to create the recipe''s UI:'
  prefs: []
  type: TYPE_NORMAL
- en: First, a `Ti.UI.Window` is created to attach all UI elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next add the `txtPassword Ti.UI.TextField` control. This control will be used
    to provide the password to create protected ZIP files or to unzip them. The default
    is set to `foo123`. This is also the password for the included sample file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then the `btnZip Ti.UI.Button` is added to the `Ti.UI.Window`. This button will
    be used to demonstrate how to create a protected ZIP file later in the discussion
    of this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next the `btnUnzip Ti.UI.Button` is added to the `Ti.UI.Window`. This button
    will be used to demonstrate how to unzip a protected ZIP file later in the discussion
    of this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a password-protected ZIP file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This section of this recipe demonstrates how to create a protected ZIP file.
    The following screenshot shows this recipe in action, creating a protected ZIP
    file and alerting the user of the output file path:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a password-protected ZIP file](img/5343_08_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The created ZIP file is executed when the user clicks on the `btnZip Ti.UI.Button`
    and triggers the `click` event to be fired. The following code snippet discusses
    the actions performed after the `click` event is fired:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The first step in the zip process is to create the `onZipCompleted` callback
    method. When the zip process is completed, the module will send the results to
    this callback method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `d` method parameter provides the results from the module. The first step
    in processing the module results is to check the `d.success` property to see if
    the zip process was successful. If so, the user is alerted of the path of the
    completed ZIP file. Otherwise, the user is alerted to the error generated in creating
    the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next the `writeToZip` and `inputDirectory` variables are created. The `writeToZip`
    variable contains the path to the `taxforms`.ZIP output file in the app's `Documents`
    directory. The `inputDirectory` creates a reference to the `Resources/data` created
    during the *Getting ready* section of this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally the `zip` method is called and this method provides the parameters built
    earlier in the `click` event handler. Once completed, the `zip` method provides
    results to the provided `onZipCompleted` callback method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `files` parameter provides an array of files using the `inputDirectory`
    variable. In this example, the files included are the `w2.pdf` and `w4.pdf` files
    included in the `Resources/data` folder created during the *Getting ready* section
    of this recipe.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Unzipping a protected ZIP file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This section of the current recipe demonstrates how to unzip a protected ZIP
    file. The following screenshot shows this recipe in action, unzipping the contents
    of a protected file into the app''s `Documents` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Unzipping a protected ZIP file](img/5343_08_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The unzip example is executed when the user taps on the `btnUnzip Ti.UI.Button`
    and triggers the `click` event to be fired. The following code snippet discusses
    the actions performed after the `click` event is fired.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The first step in the unzip process is to create the `onUnzipCompleted` callback
    method. When the unzip process is completed, the module will send the results
    to this callback method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `d` method parameter provides the results from the module. The first step
    in processing the module results is to check the `d.success` property to see if
    the unzip process was successful. If so, the user is alerted of the directory
    path of the unzipped file. Otherwise, the user is alerted to the error generating
    the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `outputDirectory` and `zipFileName` variables are created next. The `outputDirectory`
    variable contains the path to the output directory in the app's `Documents` directory.
    The `zipFileName` creates a reference to the `Resources/data/taxform.zip` file
    created during the *Getting ready* section of this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, the `unzip` method is called and this method provides the parameters
    built earlier in the `click` event handler. Once completed, the `unzip` method
    provides results to the provided `onUnzipCompleted` callback method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: All files contained within the `zipFileName` ZIP file will be unzipped to the
    root of the directory provided in the `outputDirectory` parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the `benCoding.Zip` native module. To read the documentation
    and to learn more about this project, please visit [https://github.com/benbahrenburg/Zipper](https://github.com/benbahrenburg/Zipper).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
