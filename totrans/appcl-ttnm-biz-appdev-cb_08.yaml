- en: Chapter 8. Basic Security Approaches
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章.基本安全方法
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Implementing iOS data protection in Titanium
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Titanium中实现iOS数据保护
- en: AES encryption using JavaScript
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript进行AES加密
- en: Basic authentication using Ti.Network.HTTPClient
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ti.Network.HTTPClient进行基本身份验证
- en: Implementing a cross-platform passcode screen
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现跨平台密码屏幕
- en: Working with protected ZIP files on iOS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在iOS上处理受保护的ZIP文件
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Security, privacy, and safeguards for intellectual property are at the front
    of the minds of those of us building Titanium Enterprise apps. Titanium allows
    you to combine the underlying platform tools and third-party JavaScript libraries
    to help meet your security requirements.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性、隐私和知识产权保护是我们这些构建Titanium企业应用的人心中的首要任务。Titanium允许您结合底层平台工具和第三方JavaScript库，以帮助您满足您的安全需求。
- en: This chapter provides a series of approaches on how to leverage JavaScript,
    Titanium modules, and the underlying platform to enable you to create a layered
    security approach to assist you in meeting your organization's overall secure
    development goals. Each recipe is designed to provide building blocks to help
    you implement your industry's existing security and privacy standards.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了一系列方法，介绍如何利用JavaScript、Titanium模块和底层平台，帮助您创建分层安全方法，以协助您实现组织整体安全开发目标。每个配方都旨在提供构建块，帮助您实现您所在行业的现有安全和隐私标准。
- en: Implementing iOS data protection in Titanium
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Titanium中实现iOS数据保护
- en: Starting with iOS 4, Apple introduced the ability for apps to use the data protection
    feature to add an additional level of security for data stored on disk. Data protection
    uses the built-in hardware encryption to encrypt files stored on the device. This
    feature is available when the user's device is locked and protected with a passcode
    lock. During this time, all files are protected and inaccessible until the user
    explicitly unlocks the device.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从iOS 4开始，苹果引入了应用使用数据保护功能以在磁盘上存储的数据添加额外安全层的能力。数据保护使用内置的硬件加密来加密设备上存储的文件。当用户的设备被锁定并使用密码锁保护时，此功能可用。在此期间，所有文件都受到保护且无法访问，直到用户明确解锁设备。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When the device is locked, no app can access protected files. This even applies
    to the app that created the file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当设备被锁定时，没有任何应用可以访问受保护的文件。这甚至适用于创建该文件的应用。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'This recipe uses the `securely` native module for enhanced security functionality.
    This module and other code assets can be downloaded from the source provided by
    the book. Installing these in your project is straightforward. Simply copy the
    `modules` folder into your project as shown in the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用`securely`原生模块以增强安全性功能。此模块和其他代码资产可以从本书提供的源代码中下载。将这些安装到您的项目中很简单。只需将`modules`文件夹复制到您的项目中，如图所示：
- en: '![Getting ready](img/5343_08_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5343_08_01.jpg)'
- en: 'After copying the mentioned folder, you will need to click on your **tiapp.xml**
    file in Titanium Studio and add a reference to the `bencoding.securely` module
    as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制提到的文件夹后，您需要在Titanium Studio中点击您的**tiapp.xml**文件，并将对`bencoding.securely`模块的引用添加到其中，如图所示：
- en: '![Getting ready](img/5343_08_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5343_08_02.jpg)'
- en: Enabling data protection
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用数据保护
- en: 'This recipe requires your iOS device to have data protection enabled. You will
    need a device as the simulator does not support data protection. The following
    steps cover how to enable this feature on your device:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方需要您的iOS设备启用数据保护。您需要一个设备，因为模拟器不支持数据保护。以下步骤涵盖了如何在您的设备上启用此功能：
- en: Go to **Settings** | **General** | **Passcode**.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**设置** | **通用** | **密码**。
- en: Follow the prompts to set up a passcode.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按提示设置密码。
- en: After adding a passcode, scroll to the bottom of the screen and verify that
    the text **Data protection is enabled** is visible as shown in the following screenshot:![Enabling
    data protection](img/5343_08_03.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加密码后，滚动到屏幕底部并验证是否可以看到如图所示的文本**数据保护已启用**：![启用数据保护](img/5343_08_03.jpg)
- en: iOS device browser
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: iOS设备浏览器
- en: A third-party iOS device browser is needed to verify that data protection for
    the example recipe app has successfully been enabled. This recipe discusses how
    to verify data protection using the popular iExplorer app. An evaluation version
    of the iExplorer app can be used to follow along with this recipe. For more information
    and to download iExplorer, please visit [http://www.macroplant.com/iexplorer](http://www.macroplant.com/iexplorer).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一个第三方iOS设备浏览器来验证示例配方应用的数据保护是否已成功启用。本配方讨论了如何使用流行的iExplorer应用来验证数据保护。可以使用iExplorer应用的评估版本来跟随本配方。有关更多信息以及下载iExplorer，请访问[http://www.macroplant.com/iexplorer](http://www.macroplant.com/iexplorer)。
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To enable iOS data protection, the `DataProtectionClass` and `com.apple.developer.default-data-protection`
    keys need to be added to your `tiapp.xml` as demonstrated in the following code
    snippet:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用iOS数据保护，需要将`DataProtectionClass`和`com.apple.developer.default-data-protection`键添加到你的`tiapp.xml`中，如下代码片段所示：
- en: First, add the `ios` configuration node if your project does not already contain
    this element.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，如果你的项目中还没有包含这个元素，请添加`ios`配置节点。
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then at the top of the `dict` node, add the following highlighted keys.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在`dict`节点顶部添加以下突出显示的键。
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After saving the updates to your `tiapp.xml`, you must clean your Titanium project
    in order to have the updates take effect. This can be done in Titanium Studio
    by selecting **Project** | **Clean**.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在保存`tiapp.xml`的更新后，你必须清理你的Titanium项目，以便更新生效。这可以在Titanium Studio中通过选择**项目** |
    **清理**来完成。
- en: Creating the namespace and imports
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建命名空间和导入
- en: 'Once you have added the `securely` module and added the `tiapp.xml` updates
    to your project, you need to create your application namespace in the `app.js`
    file and use `require` to import the module into your code as the following code
    snippet demonstrates:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你添加了`securely`模块并更新了项目中的`tiapp.xml`，你需要在`app.js`文件中创建你的应用程序命名空间，并使用`require`将模块导入到你的代码中，如下代码片段所示：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating the recipe UI
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建配方UI
- en: 'The following steps outline how to create the UI used in this recipe:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤概述了如何创建本配方中使用的UI：
- en: First, a `Ti.UI.Window` is created to attach all UI elements.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个`Ti.UI.Window`来附加所有UI元素。
- en: '[PRE3]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, a `Ti.UI.Button` is added to the `Ti.UI.Window`. This will be used to
    trigger our example.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，向`Ti.UI.Window`中添加一个`Ti.UI.Button`。这将用于触发我们的示例。
- en: '[PRE4]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating a file to verify data protection
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个文件以验证数据保护
- en: 'To verify if data protection is enabled in the app, the recipe creates a time-stamped
    file in the `Ti.Filesystem.applicationDataDirectory` directory. Using an iOS device
    browser, we can verify if the test file is protected when the device is locked.
    The following steps describe how the recipe creates this test file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证应用中是否启用了数据保护，该配方会在`Ti.Filesystem.applicationDataDirectory`目录中创建一个带时间戳的文件。使用iOS设备浏览器，我们可以验证当设备锁定时测试文件是否受到保护。以下步骤描述了配方如何创建这个测试文件：
- en: The `click` event for `button1` creates a time-stamped file that allows us to
    verify if data protection has been correctly enabled for the app.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`button1`的`click`事件创建一个带时间戳的文件，使我们能够验证应用是否已正确启用了数据保护。'
- en: '[PRE5]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next the `isProtectedDataAvailable` method is called on `securely`. This provides
    a Boolean result indicating that data protection allows the app to read from or
    write to the filesystem.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`securely`上调用`isProtectedDataAvailable`方法。这提供了一个布尔结果，指示数据保护允许应用从或向文件系统读写。
- en: '[PRE6]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To ensure there is a unique identifier in the file, a token is created using
    the current date and time. This token is then added to the following message template:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确保文件中有一个唯一的标识符，使用当前日期和时间创建了一个令牌。然后，将此令牌添加到以下消息模板中：
- en: '[PRE7]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The message created in step 3 is then written to the `test.txt` file located
    in the `Ti.Filesystem.applicationDataDirectory` directory. If the file already
    exists, it is removed so that the latest message will be available for testing.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第3步创建的消息随后被写入到位于`Ti.Filesystem.applicationDataDirectory`目录中的`test.txt`文件。如果文件已存在，则将其删除，以便最新的消息可用于测试。
- en: '[PRE8]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once the `test.txt` file is written to the device, a message is displayed to
    the user notifying them to lock their device and use an iOS device browser to
    confirm data protection is enabled.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦将`test.txt`文件写入设备，就会向用户显示一条消息，通知他们锁定设备并使用iOS设备浏览器来确认数据保护已启用。
- en: '[PRE9]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'After the `DataProtectionClass` and `com.apple.developer.default-data-protection`
    keys have been added to your `tiapp.xml`, the iOS device handles protecting your
    files when the device is locked. The following steps discuss how to test that
    this recipe has correctly implemented data protection:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 `tiapp.xml` 文件中添加了 `DataProtectionClass` 和 `com.apple.developer.default-data-protection`
    键之后，当设备锁定时，iOS 设备将处理保护您的文件。以下步骤讨论了如何测试此食谱是否正确实现了数据保护：
- en: The first step in the validation process is to build and deploy the recipe app
    to your iOS device.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证过程的第一步是在您的 iOS 设备上构建和部署食谱应用程序。
- en: Once the app has been loaded onto your device, open the app and press the **Create
    Test File** button.![How it works...](img/5343_08_04.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦应用程序已加载到您的设备上，打开应用程序并点击 **创建测试文件** 按钮。![工作原理...](img/5343_08_04.jpg)
- en: Once you have received an alert message indicating the test file has been created,
    press the home button and lock your device.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦收到表示测试文件已创建的警报消息，请按主页按钮并锁定您的设备。
- en: Plug your device into a computer with iExplorer installed.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的设备连接到已安装 iExplorer 的计算机。
- en: Open iExplorer and navigate so that you can view the apps on your device.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 iExplorer 并导航，以便您可以在设备上查看应用程序。
- en: Select the **DataProtection** app as marked with the red box in the following
    screenshot. Then right-click on the **test.txt** file located in the **Documents**
    folder and select **Quick Look** as marked with the green box in the following
    screenshot:![How it works...](img/5343_08_05.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下截图中的红色方框中标记的 **DataProtection** 应用程序中选择。然后右键单击位于 **Documents** 文件夹中的 **test.txt**
    文件，并选择与绿色方框中标记的 **Quick Look** 相同的选项：![工作原理...](img/5343_08_05.jpg)
- en: After **Quick Look** is selected, iExplorer will try to open the `test.txt`
    file. Since it is protected, it cannot be opened and **Quick Look** will show
    the progress indicator until a timeout has been reached.![How it works...](img/5343_08_06.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Quick Look** 后，iExplorer 将尝试打开 `test.txt` 文件。由于它受到保护，无法打开，**Quick Look**
    将显示进度指示器，直到达到超时。![工作原理...](img/5343_08_06.jpg)
- en: You can then unlock your device and repeat the preceding steps to open the file
    in **Quick Look**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您可以解锁您的设备并重复前面的步骤以在 **Quick Look** 中打开文件。
- en: AES encryption using JavaScript
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JavaScript 进行 AES 加密
- en: The **Advanced Encryption Standard** (**AES**) is a specification for the encryption
    of electronic data established by the U.S. NIST in 2001\. This encryption algorithm
    is used for securing sensitive, but unclassified material by U.S. Government agencies.
    AES has been widely adopted by enterprise and has become a de facto encryption
    standard for many commercially sensitive transactions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**高级加密标准** (**AES**) 是美国国家标准与技术研究院（NIST）于 2001 年建立的电子数据加密规范。此加密算法用于美国政府机构保护敏感但未分类的材料。AES
    已被企业广泛采用，并已成为许多商业敏感交易的事实上的加密标准。'
- en: This recipe discusses how AES can be implemented in JavaScript and incorporated
    into your Titanium Enterprise app.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱讨论了如何在 JavaScript 中实现 AES 并将其集成到您的 Titanium 企业应用程序中。
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe uses the `Ti.SlowAES` CommonJS module as a wrapper around the `SlowAES`
    open source project. This module and other code assets can be downloaded from
    the source provided by the book, or individually through the links provided in
    the *See also* section at the end of this recipe. Installing these in your project
    is straightforward. Simply copy the `SlowAES` folder into the `Resources` folder
    of your project as shown in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱使用 `Ti.SlowAES` CommonJS 模块作为 `SlowAES` 开源项目的包装器。此模块和其他代码资产可以从本书提供的源代码中下载，或者通过此食谱末尾的
    *另请参阅* 部分的链接单独下载。将这些内容安装到您的项目中很简单。只需将 `SlowAES` 文件夹复制到您的项目中的 `Resources` 文件夹，如下面的截图所示：
- en: '![Getting ready](img/5343_08_07.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5343_08_07.jpg)'
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once you have added the `SlowAES` folder to your project, next you need to
    create your application namespace in the `app.js` file and use `require` to import
    the module into your code as the following code snippet demonstrates:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将 `SlowAES` 文件夹添加到您的项目中，接下来您需要在 `app.js` 文件中创建您的应用程序命名空间，并使用 `require` 将模块导入到您的代码中，如下面的代码片段所示：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating the recipe UI
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建食谱 UI
- en: This recipe demonstrates the usage of the `Ti.SlowAES` CommonJS module through
    a sample app using two `Ti.UI.TextField` controls for input.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱通过一个示例应用程序展示了如何使用 `Ti.SlowAES` CommonJS 模块，该应用程序使用两个 `Ti.UI.TextField` 控件进行输入。
- en: First, a `Ti.UI.Window` is created to attach all UI elements.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个 `Ti.UI.Window` 来附加所有 UI 元素。
- en: '[PRE11]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Creating the recipe UI](img/5343_08_08.jpg)'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建食谱 UI](img/5343_08_08.jpg)'
- en: Next, a `Ti.UI.TextField` control is added to the `Ti.UI.Window` to gather the
    secret from the user.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着，在 `Ti.UI.Window` 中添加了一个 `Ti.UI.TextField` 控件，用于收集用户的密钥。
- en: '[PRE12]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Another `Ti.UI.TextField` is added to the `Ti.UI.Window` to gather the string
    to encrypt from the user.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外添加了一个 `Ti.UI.TextField` 到 `Ti.UI.Window` 中，用于从用户那里收集要加密的字符串。
- en: '[PRE13]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next a `Ti.UI.Label` is added to the `Ti.UI.Window`. This `Ti.UI.Label` will
    be used to display the encrypted value to the user.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 `Ti.UI.Window` 中添加了一个 `Ti.UI.Label`。这个 `Ti.UI.Label` 将用于向用户显示加密值。
- en: '[PRE14]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Finally a `Ti.UI.Button` is added to the `Ti.UI.Window`. This `Ti.UI.Button`
    will be used later in the recipe to perform the encryption test.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 `Ti.UI.Window` 中添加了一个 `Ti.UI.Button`。这个 `Ti.UI.Button` 将在后面的菜谱中用于执行加密测试。
- en: '[PRE15]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Encrypting and decrypting values
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加密和解密值
- en: 'This section demonstrates how to use the `Ti.SlowAES` module to use the secret
    entered in the `txtSecret`, `Ti.UI.TextField` to encrypt the contents of the `txtToEncrypt`,
    `Ti.UI.TextField`. Once completed, the encrypted value is then decrypted and compared
    against the original input. The results are displayed to the user in an alert
    message as shown in the following screenshots:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 本节演示了如何使用 `Ti.SlowAES` 模块，通过在 `txtSecret`、`Ti.UI.TextField` 中输入的密钥来加密 `txtToEncrypt`、`Ti.UI.TextField`
    中的内容。一旦完成，加密值随后被解密并与原始输入进行比较。结果以警报消息的形式显示给用户，如下述截图所示：
- en: '![Encrypting and decrypting values](img/5343_08_09.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![加密和解密值](img/5343_08_09.jpg)'
- en: 'The encryption test is performed when the click event for the `btnEncrypt`
    control is fired as shown in the following code snippet:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `btnEncrypt` 控件的点击事件触发时执行加密测试，如下述代码片段所示：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The first step in the encryption process is to create a new instance of the
    `SlowAES` module as shown in this code snippet.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加密过程的第一步是创建 `SlowAES` 模块的新实例，如以下代码片段所示。
- en: '[PRE17]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next using the encrypt function, the secret provided in the `txtSecret` control
    is used to encrypt the value in the `txtToEncrypt` control. The encrypted results
    are then returned to the `encryptedValue` as demonstrated in the following statement:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用加密函数，将 `txtSecret` 控件中提供的密钥用于加密 `txtToEncrypt` 控件中的值。加密结果随后返回到 `encryptedValue`，如下述语句所示：
- en: '[PRE18]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `encryptedLabel.text` property is then updated to display the encrypted
    value to the user.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将 `encryptedLabel.text` 属性更新以向用户显示加密值。
- en: '[PRE19]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, the `decrypt` method is used to demonstrate how to decrypt the string
    value encrypted earlier. This method requires the encrypted string value and the
    secret as shown in the following snippet:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着，使用 `decrypt` 方法演示如何解密之前加密的字符串值。此方法需要加密的字符串值和密钥，如下述代码片段所示：
- en: '[PRE20]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Finally, the original input value is compared against the decrypted value to
    ensure our encryption test was successful. The results of this test are then displayed
    to the user through a message alert and the Titanium Studio console.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将原始输入值与解密值进行比较，以确保我们的加密测试成功。测试结果随后通过消息警报和 Titanium Studio 控制台显示给用户。
- en: '[PRE21]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: See also
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'You can also refer to the following resources:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以参考以下资源：
- en: It is important to understand some of the weaknesses of JavaScript Cryptography.
    When deciding on an encryption approach, I would recommend reading the Matasano
    Security article on this subject available at [http://www.matasano.com/articles/javascript-cryptography](http://www.matasano.com/articles/javascript-cryptography).
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 JavaScript 加密的一些弱点是很重要的。在决定加密方法时，我建议阅读 Matasano Security 在此主题上的文章，该文章可在 [http://www.matasano.com/articles/javascript-cryptography](http://www.matasano.com/articles/javascript-cryptography)
    找到。
- en: This recipe uses the `SlowAES` project to implement the AES algorithm. To read
    the license and to learn more about the `SlowAES` project, please visit [http://code.google.com/p/slowaes](http://code.google.com/p/slowaes).
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本菜谱使用 `SlowAES` 项目实现 AES 算法。要阅读许可证并了解更多关于 `SlowAES` 项目的信息，请访问 [http://code.google.com/p/slowaes](http://code.google.com/p/slowaes)。
- en: To download the `Ti.SlowAES` CommonJS module and learn more about how to implement
    its functionality visit [https://github.com/benbahrenburg/Ti.SlowAES](https://github.com/benbahrenburg/Ti.SlowAES).
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要下载 `Ti.SlowAES` CommonJS 模块并了解更多关于如何实现其功能的信息，请访问 [https://github.com/benbahrenburg/Ti.SlowAES](https://github.com/benbahrenburg/Ti.SlowAES)。
- en: Basic authentication using Ti.Network.HTTPClient
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ti.Network.HTTPClient 进行基本身份验证
- en: Most enterprise sites or services provide access to content through basic access
    authentication. Basic authentication is a method for a HTTP user agent to provide
    a username and password when making a request. It is important to remember that
    basic authentication base64 encodes your credentials, not encrypts them. For this
    reason, it is advised that HTTPS is used when creating network connections.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数企业网站或服务都通过基本访问认证提供内容访问。基本认证是一种 HTTP 用户代理在请求时提供用户名和密码的方法。重要的是要记住，基本认证将您的凭据
    base64 编码，而不是加密它们。因此，建议在创建网络连接时使用 HTTPS。
- en: Titanium provides full support for basic authentication using the SDK's `Ti.Network`
    functionality. This recipe describes how to use the `Ti.Network.HTTPClient` proxy
    to connect to a website using basic authentication headers.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Titanium 通过 SDK 的 `Ti.Network` 功能完全支持基本认证。本配方描述了如何使用 `Ti.Network.HTTPClient`
    代理通过基本认证头连接到网站。
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'This recipe uses the `Ti.BA` CommonJS module as an assist to Titanium''s native
    `Ti.Network.HTTPClient`. This module and other code assets can be downloaded from
    the source provided by the book. Installing this module in your project is straightforward.
    Simply copy the `Ti.BA.js` file into `Resources` folder of your project as shown
    in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用 `Ti.BA` CommonJS 模块作为 Titanium 的原生 `Ti.Network.HTTPClient` 的辅助工具。此模块和其他代码资源可以从本书提供的源代码中下载。在您的项目中安装此模块很简单。只需将
    `Ti.BA.js` 文件复制到项目中的 `Resources` 文件夹，如图所示：
- en: '![Getting ready](img/5343_08_10.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5343_08_10.jpg)'
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once you have added the `Ti.BA.js` file to your project, you need to create
    your application namespace in the `app.js` file and use `require` to import the
    module into your code as the following code snippet demonstrates:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将 `Ti.BA.js` 文件添加到您的项目中，您需要在 `app.js` 文件中创建您的应用程序命名空间，并使用 `require` 将模块导入到您的代码中，如下代码片段所示：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Creating the recipe UI
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建配方 UI
- en: 'This recipe uses a simple UI to illustrate how to establish a basic authenticated
    network connection. The code snippets in this section walkthrough how to construct
    the basic authentication testing app shown in the following screenshots:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用简单的用户界面来展示如何建立基本的认证网络连接。本节中的代码片段说明了如何构建以下截图所示的基本认证测试应用程序：
- en: '![Creating the recipe UI](img/5343_08_11.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![创建配方 UI](img/5343_08_11.jpg)'
- en: 'Now perform the following steps:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在执行以下步骤：
- en: First, a `Ti.UI.Window` is created to attach all UI elements.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个 `Ti.UI.Window` 来附加所有 UI 元素。
- en: '[PRE23]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Next the `txtUsername Ti.UI.TextField` is added to the `Ti.UI.Window`. The default
    value is set to `test` since it is the default for the `browserspy.dk` test site
    used to create our mock test connection.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将 `txtUsername Ti.UI.TextField` 添加到 `Ti.UI.Window` 中。默认值设置为 `test`，因为它是用于创建我们的模拟测试连接的
    `browserspy.dk` 测试网站的默认值。
- en: '[PRE24]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `txtPassword Ti.UI.TextField` is then added to the `Ti.UI.Window`. The default
    value is set to `test` since it is the default for the `browserspy.dk` test site
    used to create our mock test connection.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将 `txtPassword Ti.UI.TextField` 添加到 `Ti.UI.Window` 中。默认值设置为 `test`，因为它是用于创建我们的模拟测试连接的
    `browserspy.dk` 测试网站的默认值。
- en: '[PRE25]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Next the `txtUrl Ti.UI.TextField` is added to the `Ti.UI.Window`. The default
    value is set to `"http://browserspy.dk/password-ok"`. The value for `txtUrl` can
    be updated to any service requiring basic authentication. For demonstration purposes,
    the recipe uses the `browserspy.dk` test site.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将 `txtUrl Ti.UI.TextField` 添加到 `Ti.UI.Window` 中。默认值设置为 `"http://browserspy.dk/password-ok"`。`txtUrl`
    的值可以更新为任何需要基本认证的服务。为了演示目的，此配方使用 `browserspy.dk` 测试网站。
- en: '[PRE26]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Finally the `btnConnect Ti.UI.Button` is added to the `Ti.UI.Window`. Later
    in this recipe, the `btnConnect` control will be used to initialize the authenticated
    network connection.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将 `btnConnect Ti.UI.Button` 添加到 `Ti.UI.Window` 中。在本配方后面的部分，将使用 `btnConnect`
    控件来初始化认证网络连接。
- en: '[PRE27]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Creating a service connection
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建服务连接
- en: 'With the sample UI now in place, the next step in the recipe is to perform
    a secure network connection using basic authentication. The following snippets
    are used to create a network connection and display the results shown in the following
    screenshots:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在放置好示例 UI 之后，本配方下一步是执行使用基本认证的安全网络连接。以下代码片段用于创建网络连接并显示以下截图所示的结果：
- en: '![Creating a service connection](img/5343_08_12.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![创建服务连接](img/5343_08_12.jpg)'
- en: 'A basic authenticated test network connection is performed when the `click`
    event for the `btnConnect` control is fired as shown in the following code snippet:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `btnConnect` 控件的 `click` 事件触发时，执行基本认证测试网络连接，如下面的代码片段所示：
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: First, the `Ti.Network.online` property is checked to ensure the device has
    a network connection. If no network connection is available, the user is alerted
    and the function is exit.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，检查 `Ti.Network.online` 属性以确保设备有网络连接。如果没有网络连接，则提醒用户并退出函数。
- en: '[PRE29]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Next the `onDone` function is created. This function is used as a callback for
    the results of the authentication network connection.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来创建 `onDone` 函数。此函数用作认证网络连接结果的回调。
- en: '[PRE30]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: When in the `onDone` function, the first action performed is to check the results
    provided in the `d.success` property. If this property is `true`, the network
    connection was successfully completed. Otherwise, the `d.error` message is printed
    to the console and the user is notified.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在 `onDone` 函数中时，首先执行的操作是检查 `d.success` 属性提供的结果。如果此属性为 `true`，则网络连接成功完成。否则，将
    `d.error` 消息打印到控制台，并通知用户。
- en: '[PRE31]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `credentials` object is then created. This contains the username and password
    to be used when creating our authenticated connection. Please note these values
    should be in plain text as demonstrated in taking the values directly from the
    `Ti.UI.TextField` controls on the screen.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后创建 `credentials` 对象。此对象包含在创建我们的认证连接时使用的用户名和密码。请注意，这些值应与从屏幕上的 `Ti.UI.TextField`
    控件直接获取的值一样为纯文本。
- en: '[PRE32]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `Ti.BA module` allows you to configure all of the `Ti.Network.HTTPClient`
    options along with controlling and specifying the service's output format. The
    following snippet demonstrates how to configure the request to set the timeout
    to 9 seconds, and specify the `responseText` be the returned response.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Ti.BA 模块` 允许您配置所有 `Ti.Network.HTTPClient` 选项，并控制和服务输出格式。以下代码片段演示了如何配置请求以将超时设置为
    9 秒，并指定 `responseText` 为返回的响应。'
- en: '[PRE33]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Finally a new instance of the `Ti.BA` module is created and the following are
    provided:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后创建 `Ti.BA` 模块的新实例，并提供以下内容：
- en: '**Method**: The `GET` or `POST` action is performed. In the case of this sample,
    the `POST` method is provided.'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法**：执行 `GET` 或 `POST` 操作。在本示例中，提供了 `POST` 方法。'
- en: '**URL**: The URL the module uses to connect.'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL**：模块用于连接的 URL。'
- en: '**Credentials**: The `credentials` object contains the username and password
    that will be used to create the basic authenticated connection.'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**凭据**：`credentials` 对象包含用于创建基本认证连接的用户名和密码。'
- en: '**Callback**: This parameter requires a callback method to be provided. In
    this sample, the `onDone` method is provided to the module and will return the
    connection response.'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回调**：此参数需要提供一个回调方法。在本示例中，将 `onDone` 方法提供给模块，并将返回连接响应。'
- en: '**Options**: These are the configuration options for the `Ti.Network.HTTPClient`
    and result type to be returned. If none is provided, the module''s default values
    are returned.'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选项**：这是 `Ti.Network.HTTPClient` 和要返回的结果类型的配置选项。如果没有提供，则返回模块的默认值。'
- en: '[PRE34]'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Implementing a cross-platform passcode screen
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现跨平台通行码屏幕
- en: Password and passcode screens are common verification instruments for enterprise
    apps. These screens provide interaction patterns that help solve both authentication
    and confirmation scenarios.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 密码和通行码屏幕是企业应用中常见的验证工具。这些屏幕提供交互模式，有助于解决认证和确认场景。
- en: This recipe demonstrates how to implement a cross-platform passcode screen similar
    to those seen on iOS and in the Android networking screens.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方演示了如何实现类似于在 iOS 和 Android 网络屏幕上看到的跨平台通行码屏幕。
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe uses the `Ti.Passcode` CommonJS module to implement a cross-platform
    passcode screen. This module and other code assets can be downloaded from the
    source provided by the book, or individually through the links provided in the
    *See also* section at the end of this recipe. Installing this module in your project
    is straightforward. Simply copy the `Ti.Passcode.js` file into the `Resources`
    folder of your project as shown in the following screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用 `Ti.Passcode` CommonJS 模块来实现跨平台通行码屏幕。此模块和其他代码资产可以从本书提供的源代码下载，或者通过此配方末尾的
    *也见* 部分的链接单独下载。在项目中安装此模块很简单。只需将 `Ti.Passcode.js` 文件复制到项目中的 `Resources` 文件夹，如下面的截图所示：
- en: '![Getting ready](img/5343_08_13.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/5343_08_13.jpg)'
- en: How to do it...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once you have added the `Ti.Passcode.js` file to your project, you need to
    create your application namespaces in the `app.js` file and use `require` to import
    the module into your code as the following code demonstrates:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Ti.Passcode.js`文件添加到您的项目后，您需要在`app.js`文件中创建您的应用程序命名空间，并使用`require`将模块导入到您的代码中，如下面的代码所示：
- en: '[PRE35]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Creating the recipe UI
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建食谱UI
- en: This recipe uses `Ti.UI.Windows` to present information to the user. The code
    used to create the first `Ti.UI.Window` is discussed in this section. This section
    details how to launch the `Ti.Passcode` module and provides a code to have it
    verified.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱使用`Ti.UI.Windows`向用户展示信息。本节讨论了创建第一个`Ti.UI.Window`的代码。本节详细介绍了如何启动`Ti.Passcode`模块，并提供了验证它的代码。
- en: '![Creating the recipe UI](img/5343_08_14.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![创建食谱UI](img/5343_08_14.jpg)'
- en: 'Now perform the following steps:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在执行以下步骤：
- en: First, a `Ti.UI.Window` is created to attach all UI elements.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个`Ti.UI.Window`来附加所有UI元素。
- en: '[PRE36]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Next the `txtPasscode Ti.UI.TextField` is added to the `Ti.UI.Window`. This
    control is used to collect the passcode that the `Ti.Passcode` module will verify
    against.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`txtPasscode Ti.UI.TextField`添加到`Ti.UI.Window`中。此控件用于收集`Ti.Passcode`模块将验证的密码。
- en: '[PRE37]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Finally the `bntRunPasscode Ti.UI.Button` is added to the `Ti.UI.Window`. This
    button will be used later in the recipe to launch the passcode screen.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将`bntRunPasscode Ti.UI.Button`添加到`Ti.UI.Window`中。此按钮将在食谱中稍后用于启动密码屏幕。
- en: '[PRE38]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Launching the passcode screen
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动密码屏幕
- en: 'The second `Ti.UI.Window` in this recipe is created by the `Ti.Passcode` module.
    This `Ti.UI.Window` is responsible for the presentation and verification of the
    application passcode. This section describes how to configure, create, and confirm
    your app passcode using this module''s display element shown in the following
    screenshot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中的第二个`Ti.UI.Window`是由`Ti.Passcode`模块创建的。此`Ti.UI.Window`负责展示和验证应用程序密码。本节描述了如何使用此模块的显示元素配置、创建和确认您的应用程序密码，以下截图显示了该模块：
- en: '![Launching the passcode screen](img/5343_08_15.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![启动密码屏幕](img/5343_08_15.jpg)'
- en: 'The passcode verification screen is launched when the user taps the `btnRunPasscode
    Ti.UI.Button` and triggers the `click` event to be fired. The following code snippet
    discusses the actions performed after the `click` event is fired:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击`btnRunPasscode Ti.UI.Button`并触发`click`事件时，会启动密码验证屏幕。以下代码片段讨论了在`click`事件触发后执行的操作：
- en: '[PRE39]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The first code block in the `click` event of the `btnRunPasscode` button is
    to create our configuration and other variables. The `options` object contains
    all of the settings needed to configure the `Ti.Passcode` window.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`btnRunPasscode`按钮的`click`事件中的第一个代码块是创建我们的配置和其他变量。`options`对象包含配置`Ti.Passcode`窗口所需的所有设置。
- en: '[PRE40]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `window` configuration element allows for all of the standard `Ti.UI.Window`
    properties to be used. The following snippet shows how to set the `backgroudnColor`
    and `navBarHidden` properties on the passcode window.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`window`配置元素允许使用所有标准的`Ti.UI.Window`属性。以下片段展示了如何在密码验证窗口上设置`backgroudnColor`和`navBarHidden`属性。'
- en: '[PRE41]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The `view` configuration element allows for the configuration of a majority
    of the components displayed in the `Ti.Passcode` window. The following snippet
    demonstrates how to set the `passcode` title property and code for displaying
    the error message:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`view`配置元素允许配置`Ti.Passcode`窗口中显示的大多数组件。以下片段演示了如何设置`passcode`标题属性和显示错误信息的代码。'
- en: '[PRE42]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Tip
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Please review the `Ti.Passcode` module for a complete list of the configuration
    properties available.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请查阅`Ti.Passcode`模块以获取完整的配置属性列表。
- en: Next the `onCompleted` callback function is defined. This function will be used
    as the callback method provided to the `Ti.Passcode` module. The passcode verification
    results will be provided as a dictionary to the `d` input parameters.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义`onCompleted`回调函数。此函数将用作提供给`Ti.Passcode`模块的回调方法。密码验证结果将作为字典提供给`d`输入参数。
- en: '[PRE43]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `d` argument is an object with the verification results. The `d.success`
    property provides an indicator if the entered passcode matches the passcode provided
    on launch. The following code snippet alerts the user if they have entered the
    correct passcode or if they need to try the process again.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`d`参数是一个包含验证结果的对象。`d.success`属性提供了一个指示器，表示输入的密码是否与启动时提供的密码匹配。以下代码片段会在用户输入正确的密码或需要再次尝试过程时提醒用户。'
- en: '[PRE44]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The next step in this section of the recipe is to create a new instance of
    the passcode module. The following snippet demonstrates how to do this:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本食谱这一部分的下一步是创建一个新的密码模块实例。以下代码片段展示了如何完成此操作：
- en: '[PRE45]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `createWindow` method is then called on the new passcode instance. This
    method provides the passcode to verify from the `txtPasscode` control, and also
    provides the callback and options objects created earlier. This method then returns
    a `Ti.UI.Window`. Once the passcode has been entered, the callback method `onCompleted`
    will send the verification results.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在新的密码实例上调用 `createWindow` 方法。此方法提供了从 `txtPasscode` 控制器验证的密码，并提供了之前创建的回调和选项对象。然后此方法返回一个
    `Ti.UI.Window`。一旦输入密码，回调方法 `onCompleted` 将发送验证结果。
- en: '[PRE46]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The `Ti.UI.Window` returned by the `createWindow` method is then opened with
    a modal flag. The passcode `Ti.UI.Window` will remain open until closed by the
    `onCompleted` callback method as discussed earlier.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`createWindow` 方法返回的 `Ti.UI.Window` 然后以模态标志打开。密码 `Ti.UI.Window` 将保持打开状态，直到被前面讨论的
    `onCompleted` 回调方法关闭。'
- en: '[PRE47]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The following screenshots illustrate how this section of the code looks on the
    device after the user has successfully entered his/her passcode.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图说明了用户成功输入其密码后，代码的这一部分在设备上的外观：
- en: '![Launching the passcode screen](img/5343_08_16.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![启动密码屏幕](img/5343_08_16.jpg)'
- en: See also
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: This recipe uses the `Ti.Passcode` CommonJS module. To read the documentation
    and to learn more about this project, please visit [https://github.com/benbahrenburg/Ti.Passcode](https://github.com/benbahrenburg/Ti.Passcode).
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本食谱使用 `Ti.Passcode` CommonJS 模块。要阅读文档并了解更多关于此项目的信息，请访问 [https://github.com/benbahrenburg/Ti.Passcode](https://github.com/benbahrenburg/Ti.Passcode)。
- en: Working with protected ZIP files on iOS
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 iOS 上处理受保护的 ZIP 文件
- en: Protected zip files are a common way to exchange, store, and transmit enterprise
    data. ZIP files are often used to bundle several files together for transmission
    or storage. As an extra layer of security, all such files should always be protected
    with a strong password.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 受保护的 ZIP 文件是交换、存储和传输企业数据的一种常见方式。ZIP 文件通常用于将多个文件捆绑在一起以进行传输或存储。作为额外的一层安全措施，所有此类文件都应该始终使用强密码进行保护。
- en: The following recipe discusses how to create and unzip protected compressed
    files on iOS.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下食谱讨论了如何在 iOS 上创建和解压受保护的压缩文件。
- en: Getting ready
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe uses the `bencoding.zip` native module to work with protected zip
    files. This module and other code assets can be downloaded from the source provided
    by the book, or individually through the links provided in the *See also* section
    at the end of this recipe. Installing this module in your project is straightforward.
    Simply copy the `modules` folder into the root of your project, and then copy
    the `data` folder into the `Resources` directory of your project as shown in the
    following screenshot:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱使用 `bencoding.zip` 本地模块来处理受保护的 ZIP 文件。此模块和其他代码资源可以从本书提供的源代码下载，或者通过本食谱末尾的
    *参见* 部分的链接单独下载。在您的项目中安装此模块很简单。只需将 `modules` 文件夹复制到项目的根目录，然后将 `data` 文件夹复制到项目的
    `Resources` 目录中，如图下所示：
- en: '![Getting ready](img/5343_08_17.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/5343_08_17.jpg)'
- en: 'After copying the mentioned folders, you will need to click on your **tiapp.xml**
    file in Titanium Studio and add a reference to the `bencoding.zip` module as shown
    in the following screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制提到的文件夹后，您需要在 Titanium Studio 中点击您的 **tiapp.xml** 文件，并添加对 `bencoding.zip`
    模块的引用，如图下所示：
- en: '![Getting ready](img/5343_08_18.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/5343_08_18.jpg)'
- en: How to do it...
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once you have added the `modules` and `data` folders to your project, you need
    to create your application namespaces in the `app.js` file and use `require` to
    import the module into your code as the following code snippet demonstrates:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将 `modules` 和 `data` 文件夹添加到您的项目中，您需要在 `app.js` 文件中创建您的应用程序命名空间，并使用 `require`
    将模块导入到您的代码中，如下代码片段所示：
- en: '[PRE48]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Creating the recipe UI
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建食谱 UI
- en: 'This recipe uses a simple UI to illustrate how to create (zip) and unzip protected
    ZIP files. The code discussed in this section walks through how to construct the
    recipe''s UI shown in the following screenshot:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱使用简单的 UI 来说明如何创建（压缩）和解压受保护的 ZIP 文件。本节讨论的代码展示了如何构建如图下所示的食谱 UI：
- en: '![Creating the recipe UI](img/5343_08_19.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![创建食谱 UI](img/5343_08_19.jpg)'
- en: 'The following steps outline how to create the recipe''s UI:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤概述了如何创建食谱的 UI：
- en: First, a `Ti.UI.Window` is created to attach all UI elements.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个 `Ti.UI.Window` 以附加所有 UI 元素。
- en: '[PRE49]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Next add the `txtPassword Ti.UI.TextField` control. This control will be used
    to provide the password to create protected ZIP files or to unzip them. The default
    is set to `foo123`. This is also the password for the included sample file.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后添加 `txtPassword Ti.UI.TextField` 控件。此控件将用于提供创建受保护 ZIP 文件或解压它们的密码。默认设置为 `foo123`。这也是包含的示例文件的密码。
- en: '[PRE50]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Then the `btnZip Ti.UI.Button` is added to the `Ti.UI.Window`. This button will
    be used to demonstrate how to create a protected ZIP file later in the discussion
    of this recipe.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将 `btnZip Ti.UI.Button` 添加到 `Ti.UI.Window`。此按钮将用于在讨论本食谱时演示如何创建受保护的 ZIP 文件。
- en: '[PRE51]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Next the `btnUnzip Ti.UI.Button` is added to the `Ti.UI.Window`. This button
    will be used to demonstrate how to unzip a protected ZIP file later in the discussion
    of this recipe.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来将 `btnUnzip Ti.UI.Button` 添加到 `Ti.UI.Window`。此按钮将用于在讨论本食谱时演示如何解压受保护的 ZIP
    文件。
- en: '[PRE52]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Creating a password-protected ZIP file
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建密码保护的 ZIP 文件
- en: 'This section of this recipe demonstrates how to create a protected ZIP file.
    The following screenshot shows this recipe in action, creating a protected ZIP
    file and alerting the user of the output file path:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的这一部分演示了如何创建受保护的 ZIP 文件。以下截图显示了本食谱的实际操作，创建受保护的 ZIP 文件并提示用户输出文件路径：
- en: '![Creating a password-protected ZIP file](img/5343_08_20.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![创建密码保护的 ZIP 文件](img/5343_08_20.jpg)'
- en: 'The created ZIP file is executed when the user clicks on the `btnZip Ti.UI.Button`
    and triggers the `click` event to be fired. The following code snippet discusses
    the actions performed after the `click` event is fired:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 `btnZip Ti.UI.Button` 并触发 `click` 事件时，执行创建的 ZIP 文件。以下代码片段讨论了在 `click`
    事件触发后执行的操作：
- en: '[PRE53]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The first step in the zip process is to create the `onZipCompleted` callback
    method. When the zip process is completed, the module will send the results to
    this callback method:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 压缩过程的第一步是创建 `onZipCompleted` 回调方法。当压缩过程完成时，模块将结果发送到这个回调方法：
- en: '[PRE54]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The `d` method parameter provides the results from the module. The first step
    in processing the module results is to check the `d.success` property to see if
    the zip process was successful. If so, the user is alerted of the path of the
    completed ZIP file. Otherwise, the user is alerted to the error generated in creating
    the file.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`d` 方法参数提供了模块的结果。处理模块结果的第一步是检查 `d.success` 属性，以查看压缩过程是否成功。如果是这样，用户会收到完成 ZIP
    文件的路径提示。否则，用户会收到创建文件时生成的错误提示。'
- en: '[PRE55]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Next the `writeToZip` and `inputDirectory` variables are created. The `writeToZip`
    variable contains the path to the `taxforms`.ZIP output file in the app's `Documents`
    directory. The `inputDirectory` creates a reference to the `Resources/data` created
    during the *Getting ready* section of this recipe.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来创建 `writeToZip` 和 `inputDirectory` 变量。`writeToZip` 变量包含应用 `Documents` 目录中
    `taxforms.ZIP` 输出文件的路径。`inputDirectory` 创建了对在食谱的 *准备就绪* 部分创建的 `Resources/data`
    的引用。
- en: '[PRE56]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Finally the `zip` method is called and this method provides the parameters built
    earlier in the `click` event handler. Once completed, the `zip` method provides
    results to the provided `onZipCompleted` callback method.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后调用 `zip` 方法，并在此方法中提供在 `click` 事件处理程序中构建的参数。一旦完成，`zip` 方法将结果提供给提供的 `onZipCompleted`
    回调方法。
- en: '[PRE57]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Tip
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `files` parameter provides an array of files using the `inputDirectory`
    variable. In this example, the files included are the `w2.pdf` and `w4.pdf` files
    included in the `Resources/data` folder created during the *Getting ready* section
    of this recipe.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`files` 参数使用 `inputDirectory` 变量提供了一个文件数组。在本例中，包含的文件是 `Resources/data` 文件夹中的
    `w2.pdf` 和 `w4.pdf` 文件，这些文件是在食谱的 *准备就绪* 部分创建的。'
- en: Unzipping a protected ZIP file
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解压受保护的 ZIP 文件
- en: 'This section of the current recipe demonstrates how to unzip a protected ZIP
    file. The following screenshot shows this recipe in action, unzipping the contents
    of a protected file into the app''s `Documents` directory:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的这一部分演示了如何解压受保护的 ZIP 文件。以下截图显示了本食谱的实际操作，将受保护文件的文件内容解压到应用的 `Documents` 目录中：
- en: '![Unzipping a protected ZIP file](img/5343_08_21.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![解压受保护的 ZIP 文件](img/5343_08_21.jpg)'
- en: The unzip example is executed when the user taps on the `btnUnzip Ti.UI.Button`
    and triggers the `click` event to be fired. The following code snippet discusses
    the actions performed after the `click` event is fired.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 `btnUnzip Ti.UI.Button` 并触发 `click` 事件时，执行解压示例。以下代码片段讨论了在 `click` 事件触发后执行的操作。
- en: '[PRE58]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The first step in the unzip process is to create the `onUnzipCompleted` callback
    method. When the unzip process is completed, the module will send the results
    to this callback method.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压过程的第一步是创建 `onUnzipCompleted` 回调方法。当解压过程完成后，模块会将结果发送到这个回调方法。
- en: '[PRE59]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The `d` method parameter provides the results from the module. The first step
    in processing the module results is to check the `d.success` property to see if
    the unzip process was successful. If so, the user is alerted of the directory
    path of the unzipped file. Otherwise, the user is alerted to the error generating
    the file.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`d` 方法参数提供了模块的结果。处理模块结果的第一步是检查 `d.success` 属性，以查看解压过程是否成功。如果是这样，用户会收到解压文件目录路径的提示。否则，用户会收到生成文件的错误提示。'
- en: '[PRE60]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The `outputDirectory` and `zipFileName` variables are created next. The `outputDirectory`
    variable contains the path to the output directory in the app's `Documents` directory.
    The `zipFileName` creates a reference to the `Resources/data/taxform.zip` file
    created during the *Getting ready* section of this recipe.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来创建 `outputDirectory` 和 `zipFileName` 变量。`outputDirectory` 变量包含应用 `Documents`
    目录中输出目录的路径。`zipFileName` 变量创建了对在食谱的 *准备就绪* 部分创建的 `Resources/data/taxform.zip`
    文件的引用。
- en: '[PRE61]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Finally, the `unzip` method is called and this method provides the parameters
    built earlier in the `click` event handler. Once completed, the `unzip` method
    provides results to the provided `onUnzipCompleted` callback method.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，调用 `unzip` 方法，并在此方法中提供在 `click` 事件处理程序中先前构建的参数。一旦完成，`unzip` 方法将结果提供给提供的 `onUnzipCompleted`
    回调方法。
- en: '[PRE62]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Note
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All files contained within the `zipFileName` ZIP file will be unzipped to the
    root of the directory provided in the `outputDirectory` parameter.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`zipFileName` ZIP 文件中包含的所有文件都将解压到 `outputDirectory` 参数提供的目录根目录中。'
- en: See also
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: This recipe uses the `benCoding.Zip` native module. To read the documentation
    and to learn more about this project, please visit [https://github.com/benbahrenburg/Zipper](https://github.com/benbahrenburg/Zipper).
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本食谱使用 `benCoding.Zip` 原生模块。要阅读文档并了解更多关于这个项目的信息，请访问 [https://github.com/benbahrenburg/Zipper](https://github.com/benbahrenburg/Zipper)。
