- en: Chapter 4. Packaged Components in Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Components in Bootstrap can be understood as a collection of related HTML elements
    each associated with predefined CSS classes in order to generate a particular
    functionality and UI affect. In the previous chapter, we saw how each HTML element
    is styled by Bootstrap CSS; in this chapter, we will see how a few elements, each
    powered by some CSS classes, together can create a new control and generate a
    full functionality—a new complex component.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you have always created components in HTML such as navigation bar,
    pagination control, progress bar, alerts, and notifications. Also, you know that
    each of these are actually a collection of a number of HTML elements grouped together.
    Most of the times you have used some third-party libraries, or have built the
    component yourself using lots of HTML, CSS, and JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: Now it is the time to use Bootstrap components that are pretty straightforward,
    simple to use, and most importantly with lesser number of code lines to implement.
    Of course, all are by default mobile friendly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will go through some major components packaged and provided
    by Bootstrap framework:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with Glyphicons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the navigation bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing the badges, toolbars, and button groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing up alerts and warnings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing contents with panels and wells
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling navigation with pagination and breadcrumbs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The page header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First thing you would want in your page is a good-looking header at the top
    of the page. This is a simple HTML heading wrapped on a `div` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code we have used in our application''s home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you fancy a message along with the header, you can use the `<small>` element
    inside. For example, have a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Glyphicons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As per [http://glyphicons.com/](http://glyphicons.com/), the original vendor
    of Glyphicons, "*this is a library of precisely prepared monochromatic icons and
    symbols, created with an emphasis on simplicity and easy orientation*." In simple
    terms, these are icon fonts to depict and symbolize easy and common behaviors
    and contexts. For example, if you want to have a hyperlink for home page, you
    can add an icon depicting this link. Shopping cart has a most common icon; similar
    examples are login button/link or logout button/link.
  prefs: []
  type: TYPE_NORMAL
- en: These icons are very common in today's web design, and many a times only icons
    suffice, you may not need to write a text after that. Until now, you will have
    used small icon images for this purpose; however, now we would use Glyphicons
    that are very small in size, quick to render, and efficient in mobile devices
    as well. In addition, they can scale and change color easily, minimizes number
    of HTTP calls because we are replacing image icons by using these.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to use Glyphicons in Bootstrap, you just simply add a `span` element
    with the CSS class that would be appropriate for your icon. For example, have
    a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you note that we have used this in our page header on the home page, and
    it has generated the **Home** icon ahead of the page header text. There is a wealth
    of Glyphicons available in Bootstrap library, which are listed at [http://getbootstrap.com/components/#glyphicons](http://getbootstrap.com/components/#glyphicons).
  prefs: []
  type: TYPE_NORMAL
- en: You might recall that in the folder structure of Bootstrap, there was a `fonts`
    folder—files of this folder are responsible for all functionalities of Glyphicons.
  prefs: []
  type: TYPE_NORMAL
- en: The navigation bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the page header, the next important thing is to have a navigation bar
    for the user to browse through different pages of your website.
  prefs: []
  type: TYPE_NORMAL
- en: Our application pages, as of now, do not have a navigation bar. We have though
    two pages in our application—let's have a navigation bar for these.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a basic and preliminary code for the navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](https://www.packtpub.com/)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](https://www.packtpub.com/books/content/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'We include this code in our index page just under the main `div` container.
    This renders as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The navigation bar](img/B03987_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In case of smaller devices such as mobile phones, it would look as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The navigation bar](img/B03987_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Most important thing to note here is that the navigation menu has automatically
    transformed into the hamburger or sandwich icon, as this being the most popular
    and standard way of displayed menus in mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's add a few more interesting features to our navigation bar. For example,
    if you vertically scroll down the home page, the navigation bar disappears at
    the top. We will just add another Bootstrap class to make it fixed at the top.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will fix the menu bar at the top of your browser and will always be visible
    to the user even if you have a long page and user scrolls down.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'However, you will note that the actual body contents are being overlaid under
    this fixed navigation bar. In order to rectify this, we need to add a certain
    top padding to the `body` element. We have added this in the `body` tag, however,
    it is of course suggested to put this in a CSS class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next thing we want to do is to beautify our menu with some icons. For that,
    we will add Glyphicons for each of the menu items, using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need a login link in the top menu so that the user can log in/log out
    from the menu itself. We just add another `UL` link in the navigation menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, a search box to enable users to search for any products from our store
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you notice, we have added this search box only for medium- and large-sized
    devices. Here is the final source code of the navigation bar. We have added another
    link (`browse.html`) for a page to display all the products we have in our store.
    We will create this page later. We have also added a link to see the user''s shopping
    cart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the current look of our navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The navigation bar](img/B03987_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Badges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Badges are simple indicators to show count of the items you want to highlight.
    Very simple use cases are showing number of unread notifications, e-mails, messages,
    and many more. We will add this in our navigation bar to show the number of items
    in the shopping cart. This is the updated line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'It looks like in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Badges](img/B03987_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, you just simply add a `span` element with `badge` class, and
    put the text inside in order to highlight it.
  prefs: []
  type: TYPE_NORMAL
- en: Alerts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use alerts to provide communicative information to the user; for example,
    showing the status of an operation user is trying to do, showing some system information,
    showing user any warning messages, showing any error messages or status, and much
    more. Showing basic alerts is pretty simple—just create a `div` element with the
    `.alert` class in Bootstrap. For example, have a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can use any of these classes to show contextual information—`alert-info`,
    `alert-warning`, `alert-success`, or `alert-danger`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Putting links inside `alert` would require you to add the `.alert-link` in
    the `anchor` tag. This will ensure that the links will also be displayed in the
    corresponding contextual color. As an example, we have added this alert into the
    last section of our home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are some other features offered in the Bootstrap alert module, which we
    will discuss in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Toolbars and button groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For grouping a number of buttons together, we would use the `.btn-group` class.
    This class creates a group of buttons; however, each of these buttons must have
    the `.btn` class associated. For example, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what the preceding code will generate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Toolbars and button groups](img/B03987_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can club a number of button groups together to generate a toolbar. Let''s
    be a little innovative and use the Glyphicons in the buttons (instead of button
    text). Here is the code for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how our toolbar looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Toolbars and button groups](img/B03987_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can also use button groups, toolbars, and dropdowns together to generate
    richer user experience. We will explore those in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Panels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You, of course, want to segregate your web page and contents in to different
    sections and subsections. It is like you see in normal portal frameworks or was
    popularized during the days of iGoogle. We have used this model in our homepage
    also where we had created three different sections—**Latest Additions**, **Most
    Popular Products**, and **You Recently Visited**.
  prefs: []
  type: TYPE_NORMAL
- en: In Bootstrap, panels can be used to create these sections. Panels in Bootstrap
    have two separate placeholders—namely header and body—with classes `.panel-heading`
    and `.panel-body`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Just like many other components in Bootstrap, panels also have five different
    modes— `.panel-info`, `.panel-success`, `.panel-primary`, `.panel-warning`, and
    `.panel-danger`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, in our code, we have used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: It is also advised to use the `.panel-title` class inside `.panel-heading` in
    order to retain pre-styled headings and display contextual colors of hyperlinks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the panel heading, you can also use `.panel-footer` to create the
    footer section of the panel. Thus, a full panel code can appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: One interesting aspect is to show tables inside a panel. Bootstrap is intelligent
    enough to merge all the paddings and borders and will unify these two controls
    seamlessly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Panels](img/B03987_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the table and its borders are seamlessly adjoined with the panel,
    giving a cohesive look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: Wells
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wells are almost similar to panels, but with very less features and functionalities.
    This will generate a container element for you so that a group of logically related
    HTML contents can be rendered in that container.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, just recap our **Contact Us** page, which we created in the
    last chapter. Let''s put this form inside a well. This is how the page looks like
    now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wells](img/B03987_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The full source code for the page can be downloaded from [https://www.packtpub.com/](https://www.packtpub.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from adding the navigation bar, we can also add a new `div` element with
    class `.well` and wrap the **Contact Us** form inside that well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We will now have an entirely different look of our page.
  prefs: []
  type: TYPE_NORMAL
- en: Jumbotron
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An interesting addition in Bootstrap is **Jumbotron**. This is a component
    that optionally captures the whole viewport and renders the contents inside. We
    can use this component when we want to showcase some contents, or in some pages
    with very less content but important message to be displayed. One good example
    use of this can be a 404 page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Jumbotron](img/B03987_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the section has captured full width of the available screen
    space. However, if you don''t want that, here is another variation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Jumbotron](img/B03987_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The difference between the two variances is only that, in the first case, the
    `jumbotron` code block is placed outside the main container element, and in the
    second case, the code block is placed inside the main container element.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, in the first case, it was capturing the full width of the screen, and
    in the second variation, it is rendered as a fixed width view.
  prefs: []
  type: TYPE_NORMAL
- en: Breadcrumbs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a simple component to generate the breadcrumb in your web page. Just
    add the `.breadcrumb` class in an `OL` element, and all the `LI` elements inside
    it will be rendered as each breadcrumb stage. Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the generated breadcrumb:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Breadcrumbs](img/B03987_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Paginations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two patterns of pagination controls offered by Bootstrap, shown as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Paginations](img/B03987_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, both the patterns are simple UL controls with different Bootstrap
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how Bootstrap can be extended by using several CSS classes
    in a group of HTML controls to create different packaged components. By that process,
    we have almost all the commonly used controls that are required to design a flexible
    web page. All these components are built using CSS classes only. In the next chapter,
    we will explore the JavaScript components of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
