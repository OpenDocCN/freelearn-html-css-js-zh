["```js\n<script type=\"text/javascript\"> \n    var width = 600, \n        height = 500; \n\n    var svg = d3.select(\"body\").append(\"svg\"); \n\n    svg.attr(\"height\", height) \n        .attr(\"width\", width);     \n\n    svg.append(\"line\") // <-A \n        .attr(\"x1\", 0) \n        .attr(\"y1\", 200) \n        .attr(\"x2\", 100) \n        .attr(\"y2\", 100); \n\n    svg.append(\"circle\") // <-B \n        .attr(\"cx\", 200) \n        .attr(\"cy\", 150) \n        .attr(\"r\", 50); \n\n    svg.append(\"rect\") \n        .attr(\"x\", 300) // <-C \n        .attr(\"y\", 100) \n        .attr(\"width\", 100) // <-D \n        .attr(\"height\", 100) \n        .attr(\"rx\", 5); // <-E \n\n    svg.append(\"polygon\") \n        .attr(\"points\", \"450,200 500,100 550,200\"); // <-F \n</script> \n\n```", "```js\n    svg.append(\"polygon\") \n        .attr(\"points\", \"450,200 500,100 550,200\"); // <-F \n\n```", "```js\n<script type=\"text/javascript\"> \n    var width = 500, \n        height = 500, \n        margin = 50, \n        x = d3.scaleLinear() // <-A \n            .domain([0, 10]) \n            .range([margin, width - margin]), \n        y = d3.scaleLinear() // <-B \n            .domain([0, 10]) \n            .range([height - margin, margin]); \n\n    var data = [ // <-C \n        [ \n            {x: 0, y: 5},{x: 1, y: 9},{x: 2, y: 7}, \n            {x: 3, y: 5},{x: 4, y: 3},{x: 6, y: 4}, \n            {x: 7, y: 2},{x: 8, y: 3},{x: 9, y: 2} \n        ], \n\n        d3.range(10).map(function(i){ \n            return {x: i, y: Math.sin(i) + 5}; \n        }) \n    ]; \n\nvar line = d3.line() // <-D \n            .x(function(d){return x(d.x);}) \n            .y(function(d){return y(d.y);}); \n\n    var svg = d3.select(\"body\").append(\"svg\"); \n\n    svg.attr(\"height\", height) \n        .attr(\"width\", width); \n\n     svg.selectAll(\"path.line\") \n            .data(data) \n        .enter() \n            .append(\"path\") // <-E \n            .attr(\"class\", \"line\")             \n            .attr(\"d\", function(d){return line(d);}); // <-F \n\n    // Axes related code omitted \n    ...         \n</script> \n\n```", "```js\nvar data = [ // <-C \n        [ \n            {x: 0, y: 5},{x: 1, y: 9},{x: 2, y: 7}, \n            {x: 3, y: 5},{x: 4, y: 3},{x: 6, y: 4}, \n            {x: 7, y: 2},{x: 8, y: 3},{x: 9, y: 2} \n        ], \n\n        d3.range(10).map(function(i){ \n            return {x: i, y: Math.sin(i) + 5}; \n        }) \n]; \n\n```", "```js\nvar line = d3.line() // <-D \n            .x(function(d){return x(d.x);}) \n            .y(function(d){return y(d.y);}); \n\n```", "```js\nsvg.selectAll(\"path.line\") \n            .data(data) \n        .enter() \n            .append(\"path\") // <-E \n            .attr(\"class\", \"line\")             \n            .attr(\"d\", function(d){return line(d);}); // <-F \n\n```", "```js\n<script type=\"text/javascript\"> \nvar width = 500, \n        height = 500, \n        margin = 30, \n        x = d3.scaleLinear() \n            .domain([0, 10]) \n            .range([margin, width - margin]), \n        y = d3.scaleLinear() \n            .domain([0, 10]) \n            .range([height - margin, margin]); \n\n    var data = [ \n        [ \n            {x: 0, y: 5},{x: 1, y: 9},{x: 2, y: 7}, \n            {x: 3, y: 5},{x: 4, y: 3},{x: 6, y: 4}, \n            {x: 7, y: 2},{x: 8, y: 3},{x: 9, y: 2} \n        ], \n        d3.range(10).map(function(i){ \n            return {x: i, y: Math.sin(i) + 5}; \n        }) \n    ]; \n\n    var svg = d3.select(\"body\").append(\"svg\"); \n\n    svg.attr(\"height\", height) \n        .attr(\"width\", width); \n\n    renderAxes(svg); \n\n    render(d3.curveLinear); \n\n    renderDots(svg); \n\n    function render(mode){ \n        var line = d3.line() \n                .x(function(d){return x(d.x);}) \n                .y(function(d){return y(d.y);}) \n                .curve(mode); // <-A \n\n        svg.selectAll(\"path.line\") \n                .data(data) \n            .enter() \n                .append(\"path\") \n                .attr(\"class\", \"line\"); \n\n        svg.selectAll(\"path.line\") \n                .data(data) \n            .attr(\"d\", function(d){return line(d);}); \n    } \n\n    function renderDots(svg){ // <-B \n        data.forEach(function(list){ \n             svg.append(\"g\").selectAll(\"circle\") \n                .data(list) \n              .enter().append(\"circle\") // <-C \n                .attr(\"class\", \"dot\") \n                .attr(\"cx\", function(d) { return x(d.x); }) \n                .attr(\"cy\", function(d) { return y(d.y); }) \n                .attr(\"r\", 4.5); \n        }); \n    } \n// Axes related code omitted \n... \n</script> \n\n<h4>Interpolation Mode:</h4> \n<div class=\"control-group\"> \n<button onclick=\"render(d3.curveLinear)\">linear</button> \n<button onclick=\"render(d3.curveLinearClosed)\">linear closed</button> \n<button onclick=\"render(d3.curveStepBefore)\">step before</button> \n<button onclick=\"render(d3.curveStepAfter)\">step after</button> \n<button onclick=\"render(d3.curveBasis)\">basis</button> \n<button onclick=\"render(d3.curveBasisOpen)\">basis open</button> \n</div> \n... \n\n```", "```js\nvar line = d3.line() \n                .x(function(d){return x(d.x);}) \n                .y(function(d){return y(d.y);}) \n                .curve(mode); // <-A \n\n```", "```js\nfunction renderDots(svg){ // <-B \n        data.forEach(function(set){ \n             svg.append(\"g\").selectAll(\"circle\") \n                .data(set) \n              .enter().append(\"circle\") // <-C \n                .attr(\"class\", \"dot\") \n                .attr(\"cx\", function(d) { return x(d.x); }) \n                .attr(\"cy\", function(d) { return y(d.y); }) \n                .attr(\"r\", 4.5); \n        }); \n} \n\n```", "```js\n<script type=\"text/javascript\"> \n    var width = 500, \n        height = 500, \n        margin = 30, \n        duration = 500,     \n        x = d3.scaleLinear() \n            .domain([0, 10]) \n            .range([margin, width - margin]), \n        y = d3.scaleLinear() \n            .domain([0, 1]) \n            .range([height - margin, margin]); \n\nvar data = d3.range(10).map(function(i){ \n            return {x: i, y: (Math.sin(i * 3) + 1) / 2}; \n        }); \n\n    var svg = d3.select(\"body\").append(\"svg\"); \n\n    svg.attr(\"height\", height) \n        .attr(\"width\", width); \n\n    renderAxes(svg); \n\n    render(1); \n\n    function render(tension){ \n        var line = d3.line() \n                .curve(d3.curveCardinal.tension(tension)) // <-A \n                .x(function(d){return x(d.x);}) \n                .y(function(d){return y(d.y);}); \n\n        svg.selectAll(\"path.line\") \n                .data([tension]) \n            .enter() \n                .append(\"path\") \n                .attr(\"class\", \"line\"); \n\nsvg.selectAll(\"path.line\") \n                .data([tension])  \n            .transition().duration(duration) \n               .ease(d3.easeLinear) // <-B \n            .attr(\"d\", function(d){ \n                return line(data); // <-C \n            }); \n\n        svg.selectAll(\"circle\") \n            .data(data) \n          .enter().append(\"circle\") \n            .attr(\"class\", \"dot\") \n            .attr(\"cx\", function(d) { return x(d.x); }) \n            .attr(\"cy\", function(d) { return y(d.y); }) \n            .attr(\"r\", 4.5); \n    } \n// Axes related code omitted \n    ... \n</script> \n<h4>Line Tension:</h4> \n<div class=\"control-group\"> \n<button onclick=\"render(0)\">0</button> \n<button onclick=\"render(0.2)\">0.2</button> \n<button onclick=\"render(0.4)\">0.4</button> \n<button onclick=\"render(0.6)\">0.6</button> \n<button onclick=\"render(0.8)\">0.8</button> \n<button onclick=\"render(1)\">1</button> \n</div> \n\n```", "```js\nvar line = d3.line() \n                .curve(d3.curveCardinal.tension(tension)) // <-A  \n                .x(function(d){return x(d.x);}) \n                .y(function(d){return y(d.y);}); \n\n```", "```js\n<script type=\"text/javascript\"> \n    var width = 500, \n        height = 500, \n        margin = 30, \n        duration = 500, \n        x = d3.scaleLinear() // <-A \n            .domain([0, 10]) \n            .range([margin, width - margin]), \n        y = d3.scaleLinear() \n            .domain([0, 10]) \n            .range([height - margin, margin]); \n\n    var data = d3.range(11).map(function(i){ // <-B \n            return {x: i, y: Math.sin(i)*3 + 5}; \n        }); \n\n    var svg = d3.select(\"body\").append(\"svg\"); \n\n    svg.attr(\"height\", height) \n        .attr(\"width\", width);         \n\n    renderAxes(svg); \n\n    render();     \n\n    renderDots(svg); \n\n    function render(){ \n        var line = d3.line() \n                .x(function(d){return x(d.x);}) \n                .y(function(d){return y(d.y);}); \n\n        svg.selectAll(\"path.line\") \n                .data([data]) \n            .enter() \n                .append(\"path\") \n                .attr(\"class\", \"line\");                 \n\n        svg.selectAll(\"path.line\") \n                .data([data])        \n            .attr(\"d\", function(d){return line(d);});         \n\n        var area = d3.area() // <-C \n            .x(function(d) { return x(d.x); }) // <-D \n            .y0(y(0)) // <-E \n            .y1(function(d) { return y(d.y); }); // <-F \n\n        svg.selectAll(\"path.area\") // <-G \n                .data([data]) \n            .enter() \n                .append(\"path\") \n                .attr(\"class\", \"area\") \n                .attr(\"d\", function(d){return area(d);}); // <-H \n    } \n\n    // Dots rendering code omitted \n\n    // Axes related code omitted \n    ... \n</script> \n\n```", "```js\n        x = d3.scaleLinear() // <-A \n            .domain([0, 10]) \n            .range([margin, width - margin]), \n        y = d3.scaleLinear() \n            .domain([0, 10]) \n            .range([height - margin, margin]); \n\n    var data = d3.range(11).map(function(i){ // <-B \n            return {x: i, y: Math.sin(i)*3 + 5}; \n        }); \n\n```", "```js\nvar area = d3.area() // <-C \n            .x(function(d) { return x(d.x); }) // <-D \n            .y0(y(0)) // <-E \n            .y1(function(d) { return y(d.y); }); // <-F \n\n```", "```js\nsvg.selectAll(\"path.area\") // <-G \n                .data([data]) \n            .enter() \n                .append(\"path\") \n                .attr(\"class\", \"area\") \n                .attr(\"d\", function(d){return area(d);}); // <-H \n\n```", "```js\nvar width = 500, \n        height = 500, \n        margin = 30, \n        x = d3.scaleLinear() \n            .domain([0, 10]) \n            .range([margin, width - margin]), \n        y = d3.scaleLinear() \n            .domain([0, 10]) \n            .range([height - margin, margin]); \n\n    var data = d3.range(11).map(function(i){ \n        return {x: i, y: Math.sin(i)*3 + 5}; \n    }); \n\n    var svg = d3.select(\"body\").append(\"svg\"); \n\n    svg.attr(\"height\", height) \n        .attr(\"width\", width);         \n\n    renderAxes(svg); \n\n    render(d3.curveLinear); \n\n    renderDots(svg); \n\n    function render(mode){ \n        var line = d3.line() \n                .x(function(d){return x(d.x);}) \n                .y(function(d){return y(d.y);}) \n                .curve(mode); // <-A \n\n        svg.selectAll(\"path.line\") \n                .data([data]) \n            .enter() \n                .append(\"path\") \n                .attr(\"class\", \"line\");                 \n\n        svg.selectAll(\"path.line\") \n                .data([data])        \n            .attr(\"d\", function(d){return line(d);});         \n\n        var area = d3.area() \n            .x(function(d) { return x(d.x); }) \n            .y0(y(0)) \n            .y1(function(d) { return y(d.y); }) \n            .curve(mode); // <-B \n\n        svg.selectAll(\"path.area\") \n                .data([data]) \n            .enter() \n                .append(\"path\") \n                .attr(\"class\", \"area\") \n\n        svg.selectAll(\"path.area\") \n            .data([data]) \n            .attr(\"d\", function(d){return area(d);});         \n    } \n// Dots and Axes related code omitted \n\n```", "```js\nvar line = d3.line() \n                .x(function(d){return x(d.x);}) \n                .y(function(d){return y(d.y);}) \n                .curve(mode); // <-A \n\nvar area = d3.area() \n            .x(function(d) { return x(d.x); }) \n            .y0(y(0)) \n            .y1(function(d) { return y(d.y); }) \n            .curve(mode); // <-B \n\n```", "```js\n<script type=\"text/javascript\"> \n    var width = 400, \n        height = 400, \n        fullAngle = 2 * Math.PI, // <-A \n        colors =  d3.scaleOrdinal(d3.schemeCategory20); \n\n    var svg = d3.select(\"body\").append(\"svg\") \n                .attr(\"class\", \"pie\") \n                .attr(\"height\", height) \n                .attr(\"width\", width);     \n\n    function render(innerRadius, endAngle){ \n        if(!endAngle) endAngle = fullAngle; \n\n        var data = [ // <-B \n            {startAngle: 0, endAngle: 0.1 * endAngle}, \n            {startAngle: 0.1 * endAngle, endAngle: 0.2 * endAngle}, \n            {startAngle: 0.2 * endAngle, endAngle: 0.4 * endAngle}, \n            {startAngle: 0.4 * endAngle, endAngle: 0.6 * endAngle},   \n            {startAngle: 0.6 * endAngle, endAngle: 0.7 * endAngle},   \n            {startAngle: 0.7 * endAngle, endAngle: 0.9 * endAngle},   \n            {startAngle: 0.9 * endAngle, endAngle: endAngle} \n        ]; \n\n        var arc = d3.arc().outerRadius(200) // <-C \n                        .innerRadius(innerRadius); \n\n        svg.select(\"g\").remove(); \n\n        svg.append(\"g\") \n                .attr(\"transform\", \"translate(200,200)\") \n        .selectAll(\"path.arc\") \n                .data(data) \n            .enter() \n                .append(\"path\") \n                    .attr(\"class\", \"arc\") \n                    .attr(\"fill\", function(d, i){ \n      return colors(i); \n        }) \n                    .attr(\"d\", function(d, i){ \n                        return arc(d, i); // <-D \n                    }); \n    } \n\n    render(0); \n</script> \n\n<div class=\"control-group\"> \n<button onclick=\"render(0)\">Circle</button> \n<button onclick=\"render(100)\">Annulus(Donut)</button> \n<button onclick=\"render(0, Math.PI)\">Circular Sector</button> \n<button onclick=\"render(100, Math.PI)\">Annulus Sector</button> \n</div> \n\n```", "```js\nvar data = [ // <-B \n        {startAngle: 0, endAngle: 0.1 * endAngle}, \n        {startAngle: 0.1 * endAngle, endAngle: 0.2 * endAngle}, \n        {startAngle: 0.2 * endAngle, endAngle: 0.4 * endAngle}, \n        {startAngle: 0.4 * endAngle, endAngle: 0.6 * endAngle},    \n        {startAngle: 0.6 * endAngle, endAngle: 0.7 * endAngle},    \n        {startAngle: 0.7 * endAngle, endAngle: 0.9 * endAngle},   \n        {startAngle: 0.9 * endAngle, endAngle: endAngle} \n]; \n\n```", "```js\nvar arc = d3.arc().outerRadius(200) // <-C \n                    .innerRadius(innerRadius);  \n\n```", "```js\nsvg.append(\"g\") \n            .attr(\"transform\", \"translate(200,200)\") \n    .selectAll(\"path.arc\") \n            .data(data) \n        .enter() \n            .append(\"path\") \n                .attr(\"class\", \"arc\") \n                .attr(\"fill\", function(d, i){return colors(i);}) \n                .attr(\"d\", function(d, i){ \n                    return arc(d, i); // <-D \n                }); \n\n```", "```js\n<script type=\"text/javascript\"> \n    var width = 400, \n            height = 400, \n            endAngle = 2 * Math.PI, \n            colors = d3.scaleOrdinal(d3.schemeCategory20c); \n\n    var svg = d3.select(\"body\").append(\"svg\") \n            .attr(\"class\", \"pie\") \n            .attr(\"height\", height) \n            .attr(\"width\", width); \n\n    function render(innerRadius) { \n\n        var data = [ \n            {startAngle: 0, endAngle: 0.1 * endAngle}, \n            {startAngle: 0.1 * endAngle, endAngle: 0.2 * endAngle}, \n            {startAngle: 0.2 * endAngle, endAngle: 0.4 * endAngle}, \n            {startAngle: 0.4 * endAngle, endAngle: 0.6 * endAngle}, \n            {startAngle: 0.6 * endAngle, endAngle: 0.7 * endAngle}, \n            {startAngle: 0.7 * endAngle, endAngle: 0.9 * endAngle}, \n            {startAngle: 0.9 * endAngle, endAngle: endAngle} \n        ]; \n\n        var arc = d3.arc() \n                .outerRadius(200).innerRadius(innerRadius); \n\n        svg.select(\"g\").remove(); \n\n        svg.append(\"g\") \n            .attr(\"transform\", \"translate(200,200)\") \n            .selectAll(\"path.arc\") \n                .data(data) \n            .enter() \n                .append(\"path\") \n                .attr(\"class\", \"arc\") \n                .attr(\"fill\", function (d, i) { \n                    return colors(i); \n                }) \n                .transition().duration(1000) \n                .attrTween(\"d\", function (d) { \n                  var start = {startAngle: 0, endAngle: 0}; // <-A \n                  var interpolate = d3.interpolate(start, d); // <-B \n                  return function (t) { \n                      return arc(interpolate(t)); // <-C \n                  }; \n                }); \n    } \n\n    render(100); \n</script> \n\n```", "```js\nsvg.append(\"g\") \n        .attr(\"transform\", \"translate(200,200)\") \n        .selectAll(\"path.arc\") \n            .data(data) \n        .enter() \n            .append(\"path\") \n            .attr(\"class\", \"arc\") \n            .attr(\"fill\", function (d, i) { \n                return colors(i); \n            }) \n            .attr(\"d\", function(d){ \n               return arc({startAngle: 0, endAngle: 0}); \n             }) \n            .transition().duration(1000) \n            .attr(\"d\", function(d){return arc(d);}); \n\n```", "```js\nd=\"M1.2246063538223773e-14,-200A200,200 0 0,1 1.2246063538223773e- \n14,-200L6.123031769111886e-15,-100A100,100 0 0,0  \n6.123031769111886e-15,-100Z\" \n\n```", "```js\nd=\"M1.2246063538223773e-14,-200A200,200 0 0,1 117.55705045849463,- \n161.80339887498948L58.778525229247315,-80.90169943749474A100,100 0  \n0,0 6.123031769111886e-15,-100Z\" \n\n```", "```js\nsvg.append(\"g\") \n        .attr(\"transform\", \"translate(200,200)\") \n        .selectAll(\"path.arc\") \n            .data(data) \n        .enter() \n            .append(\"path\") \n            .attr(\"class\", \"arc\") \n            .attr(\"fill\", function (d, i) { \n                return colors(i); \n            }) \n            .transition().duration(1000) \n            .attrTween(\"d\", function (d) { // <-A \n                var start = {startAngle: 0, endAngle: 0}; // <-B \n                var interpolate = d3.interpolate(start, d); // <-C \n                return function (t) { \n                    return arc(interpolate(t)); // <-D \n                }; \n            }); \n\n```"]