["```js\n    test('edits a birthday', async ({ page }) => {\n      await page.goto('/birthdays');\n      // add a birthday using the form\n      await page.getByLabel('Name').fill('Ares');\n      await page\n        .getByLabel('Date of birth')\n        .fill('1985-01-01');\n      await page\n        .getByRole('button', { name: 'Save' })\n        .click();\n    });\n    ```", "```js\n    await page\n      .getByRole('listitem')\n      .filter({ hasText: 'Ares' })\n      .getByRole('button', { name: 'Edit' })\n      .click();\n    ```", "```js\n    await page\n      .getByLabel('Date of birth')\n      .fill('1995-01-01');\n    await page\n      .getByRole('button', { name: 'Save' })\n      .click();\n    ```", "```js\n    // check that the original text doesn't appear\n    await expect(\n      page\n        .getByRole('listitem')\n        .filter({ hasText: 'Ares' })\n    ).not.toContainText('1985-01-01');\n    // check that the new text does appear\n    await expect(\n      page\n        .getByRole('listitem')\n        .filter({ hasText: 'Ares' })\n    ).toContainText('1995-01-01');\n    ```", "```js\n    await page.getByRole('button').click();\n    ```", "```js\nawait page.getByRole('button',\n{ name: 'Save' }\n).click();\n```", "```js\nTest timeout of 30000ms exceeded.\n...\nwaiting for getByRole('listitem').filter({ hasText: 'Ares' }).getByRole('button', { name: 'Edit' })\n```", "```js\n    it('saves unique ids onto each new birthday', async () => {\n      const request = createFormDataRequest({\n        name: 'Zeus',\n        dob: '2009-02-02'\n      });\n      await actions.default({ request });\n      await actions.default({ request });\n      expect(birthdayRepository.getAll()[0].id).not\n      .toEqual(birthdayRepository.getAll()[1].id);\n    });\n    ```", "```js\n    import { randomUUID } from 'crypto';\n    ```", "```js\n    export const addNew = (item) =>\n      db.push({ ...item, id: randomUUID() });\n    ```", "```js\n    it('returns a fixture of two items', () => {\n      const result = load();\n      expect(result.birthdays).toEqual([\n        expect.objectContaining({\n          name: 'Hercules',\n          dob: '1994-02-02'\n        }),\n        expect.objectContaining({\n          name: 'Athena',\n          dob: '1989-01-01'\n        })\n      ]);\n    });\n    ```", "```js\n    const storedId = () =>\n      birthdayRepository.getAll()[0].id;\n    it('updates an entry that shares the same id', async () => {\n      let request = createFormDataRequest({\n        name: 'Zeus',\n        dob: '2009-02-02'\n      });\n      await actions.default({ request });\n      request = createFormDataRequest({\n        id: storedId(),\n        name: 'Zeus Ex',\n        dob: '2007-02-02'\n      });\n      await actions.default({ request });\n      expect(birthdayRepository.getAll()).toHaveLength(1);\n      expect(birthdayRepository.getAll()).toContainEqual({\n        id: storedId(),\n        name: 'Zeus Ex',\n        dob: '2007-02-02'\n      });\n    });\n    ```", "```js\n    it.skip('updates an entry that shares the same id', async () => {\n      ...\n    });\n    ```", "```js\n    const db = new Map();\n    export const addNew = (item) => {\n      const id = randomUUID();\n      db.set(id, { ...item, id });\n    };\n    export const getAll = () => Array.from(db.values());\n    export const clear = () => db.clear();\n    ```", "```js\n    it('updates an entry that shares the same id', async () => {\n      ...\n    });\n    ```", "```js\n    export const replace = (id, item) =>\n      db.set(id, { ...item, id });\n    ```", "```js\n    import {\n      addNew,\n      getAll,\n      replace\n    } from '$lib/server/birthdayRepository.js';\n    ```", "```js\n    export const actions = {\n      default: async ({ request }) => {\n        const data = await request.formData();\n        const id = data.get('id');\n        ...\n        if (id) {\n          replace(id, {\n            name,\n            dob\n          });\n        } else {\n          addNew({ name, dob });\n        }\n      }\n    };\n    ```", "```js\n    describe('when the id is unknown', () => {\n      let result;\n      beforeEach(async () => {\n        const request = createFormDataRequest({\n          id: 'unknown',\n          name: 'Hercules',\n          dob: '2009-01-02'\n        });\n        result = await actions.default({\n          request\n        });\n      });\n      it('does not save the birthday', () => {\n        expect(load().birthdays).not.toContainEqual(\n          expect.objectContaining({\n            name: 'Hercules',\n            dob: 'unknown'\n          })\n        );\n      });\n      it('returns a 422', () => {\n        expect(result.status).toEqual(422);\n      });\n      it('returns a useful message', () => {\n        expect(result.data.error).toEqual(\n          'An unknown ID was provided.'\n        );\n      });\n    });\n    ```", "```js\n    export const has = (id) => db.has(id);\n    ```", "```js\n    import {\n      addNew,\n      getAll,\n      replace,\n      has\n    } from '$lib/server/birthdayRepository.js';\n    ```", "```js\n    if (id && !has(id)) {\n      return fail(422, {\n        error: 'An unknown ID was provided.'\n      });\n    }\n    ```", "```js\nif (empty(name)) {\n  return fail(422, {\nid,\n    dob,\n    error: 'Please provide a name.'\n  });\n}\n```", "```js\nbeforeEach(async () => {\n  const request = createFormDataRequest({\n    id: '123',\n    name: 'Hercules'\n  });\n});\n```", "```js\n    describe('when replacing an item', () => {\n      beforeEach(async () => {\n        let request = createFormDataRequest({\n          name: 'Zeus',\n          dob: '2009-02-02'\n        });\n        await actions.default({ request });\n      });\n    });\n    ```", "```js\n    it('returns the id when an empty name is provided', async () => {\n      const request = createFormDataRequest({\n        id: storedId(),\n        name: '',\n        dob: '1982-05-01'\n      });\n      const result = await actions.default({\n        request\n      });\n      expect(result.data).toContain({ id: storedId() });\n    });\n    ```", "```js\n    if (empty(name)) {\n      return fail(422, {\n        id,\n        dob,\n        error: 'Please provide a name.'\n      });\n    }\n    ```", "```js\n    it('returns the id when an empty date of birth is provided', async () => {\n      const request = createFormDataRequest({\n        id: storedId(),\n        name: 'Hercules',\n        dob: ''\n      });\n      const result = await actions.default({\n        request\n      });\n      expect(result.data).toContain({ id: storedId() });\n    });\n    ```", "```js\n    if (invalidDob(dob)) {\n      return fail(422, {\n        id,\n        name,\n        dob,\n        error:\n          'Please provide a date of birth in the YYYY-MM-DD format.'\n      });\n    }\n    ```", "```js\n    describe('id field', () => {\n      it('contains a hidden field for the id if an id is\n      given', () => {\n        render(BirthdayForm, { form: { id: '123' } });\n        expect(\n          document.forms.birthday.elements.id.value\n        ).toEqual('123');\n      });\n    });\n    ```", "```js\n    <form method=\"post\" name=\"birthday\">\n      <input type=\"hidden\" name=\"id\" value={form?.id} />\n    </form>\n    ```", "```js\n    it('does not include the id field if no id is present', () => {\n      render(BirthdayForm);\n      expect(\n        document.forms.birthday.elements.id\n      ).not.toBeDefined();\n    });\n    ```", "```js\n    <form method=\"post\" name=\"birthday\">\n      {#if form?.id}\n        <input type=\"hidden\" name=\"id\" value={form.id} />\n      {/if}\n    </form>\n    ```", "```js\n    it('displays an Edit button for each birthday in the list', () => {\n      render(Page, { data: { birthdays } });\n      expect(\n        screen.queryAllByRole('button', {\n          name: 'Edit'\n        })\n      ).toHaveLength(2);\n    });\n    ```", "```js\n    <ol>\n      {#each data.birthdays as birthday}\n        <li>\n          <Birthday {...birthday} />\n          <button>Edit</button>\n        </li>\n      {/each}\n    </ol>\n    ```", "```js\n    import {\n      describe,\n      it,\n      expect,\n      beforeEach\n    } from 'vitest';\n    import { click } from '@testing-library/user-event';\n    ```", "```js\n    describe('when editing an existing birthday', () => {\n      beforeEach(() =>\n        render(Page, { data: { birthdays } })\n      );\n      const firstEditButton = () =>\n        screen.queryAllByRole('button', {\n          name: 'Edit'\n        })[0];\n      it('hides the existing birthday information', async\n      () => {\n        await click(firstEditButton());\n        expect(\n          screen.queryByText('Hercules')\n        ).toBeNull();\n      });\n    });\n    ```", "```js\n    <script>\n      ...\n      let editing = null;\n    </script>\n    ```", "```js\n    <ol>\n      {#each data.birthdays as birthday}\n        <li>\n          {#if editing !== birthday}\n            <Birthday {...birthday} />\n          {/if}\n            <button\n              on:click={() => (editing = birthday)}>\n                Edit</button>\n        </li>\n      {/each}\n    </ol>\n    ```", "```js\n    it('hides the birthday form for adding new birthdays', async () => {\n      await click(firstEditButton());\n      expect(\n        screen.queryByRole('heading', {\n          name: 'Add a new birthday'\n        })\n      ).toBeNull();\n    });\n    ```", "```js\n    {#if !editing}\n      <h1>Add a new birthday</h1>\n      <div>\n        <BirthdayForm {form} />\n      </div>\n    {/if}\n    ```", "```js\n    it('displays a heading for \"Add a new birthday\"', () => {\n      render(Page, { data: { birthdays } });\n      expect(\n        screen.queryByRole('heading', {\n          name: 'Add a new birthday'\n        })\n      ).toBeVisible();\n    });\n    ```", "```js\n    it('shows the birthday form for editing', async () => {\n      await click(firstEditButton());\n      expect(\n        screen.getByLabelText('Name')\n      ).toHaveValue('Hercules');\n    });\n    ```", "```js\n    <ol>\n      {#each data.birthdays as birthday}\n        <li>\n          {#if editing == birthday}\n            <BirthdayForm form={editing} />\n          {:else}\n            <Birthday {...birthday} />\n          {/if}\n          ...\n        </li>\n      {/each}\n    </ol>\n    ```", "```js\n    it('hides all the Edit buttons', async () => {\n      await click(firstEditButton());\n      expect(\n        screen.queryByRole('button', {\n          name: 'Edit'\n        })\n      ).toBeNull();\n    });\n    ```", "```js\n    {#if !editing}\n      <button\n        on:click={() => (editing = birthday)}>\n          Edit</button>\n    {/if}\n    ```", "```js\n    it('opens the form in editing mode if a form id is passed in', () => {\n      render(Page, {\n        data: {\n          birthdays: [\n            {\n              id: '123',\n              name: 'Hercules',\n              dob: '1994-02-02'\n            }\n          ]\n        },\n        form: {\n          id: '123',\n          name: 'Hercules',\n          dob: 'bad dob',\n          error: 'An error'\n        }\n      });\n      expect(\n        screen.queryByRole('heading', {\n          name: 'Add a new birthday'\n        })\n      ).toBeNull();\n    });\n    ```", "```js\n    let editing = form?.id ? form : null;\n    ```", "```js\n    {#if editing?.id === birthday.id}\n      ...\n    {/if}\n    ```", "```js\n    const birthdays = [\n      {\n        id: '123',\n        name: 'Hercules',\n        dob: '1994-02-02'\n      },\n      {\n    id: '234',\n        name: 'Athena',\n        dob: '1989-01-01'\n      }\n    ];\n    ```"]