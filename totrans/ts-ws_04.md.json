["```js\n    const values = [8, 42, 99, 161];\n    let total = 0;\n    for(let i = 0; i < values.length; i++) {\n        total += values[i];\n    }\n    const average = total/values.length;\n    console.log(average);\n    ```", "```js\n    77.5\\. \n    ```", "```js\n    const calcAverage = (values: number[]): number =>     (values.reduce((prev, curr) =>     prev + curr, 0) / values.length);\n    const values = [8, 42, 99, 161];\n    const average = calcAverage(values);\n    console.log(average);\n    ```", "```js\n    77.5\\. \n    ```", "```js\nExample01_std_dev.ts\n1  const values = [8, 42, 99, 161];\n2  let total = 0;\n3  for (let i = 0; i < values.length; i++) {\n4      total += values[i];\n5  }\n6  const average = total / values.length;\n7  const squareDiffs = [];\n8  for (let i = 0; i < values.length; i++) {\n9      const diff = values[i] - average;\n10    squareDiffs.push(diff * diff)\n11 }\n12 total = 0;\n13 for (let i = 0; i < squareDiffs.length; i++) {\n14     total += squareDiffs[i];\n15 }\n16 const standardDeviation = Math.sqrt(total / squareDiffs.length);\n17 console.log(standardDeviation);\nLink to the preceding example: https://packt.link/YdTYD\n```", "```js\n58.148516748065035\n```", "```js\nExample02_std_dev.ts\n1  const calcAverage = (values: number[]): number =>\n2  (values.reduce((prev, curr) => prev + curr, 0) / values.length);\n3  const calcStandardDeviation = (values: number[]): number => {\n4    const average = calcAverage(values);\n5    const squareDiffs = values.map((value: number): number => {\n6      const diff = value - average;\n7      return diff * diff;\n8    });\n9    return Math.sqrt(calcAverage(squareDiffs));\n10 }\n11 const values = [8, 42, 99, 161];\n12 console.log(calcStandardDeviation(values));\nLink to the preceding example: https://packt.link/smsxT\n```", "```js\n58.148516748065035\n```", "```js\nfunction myFunction() {\n  console.log('Hello world!');\n}\n```", "```js\nfunction myFunction(): void {\n  console.log('Hello world!');\n}\n```", "```js\nExample03.ts\n1 function myFunction(name: string): string {\n2   return `Hello ${name}!`;\n3 }\n```", "```js\n4 const message = myFunction('world');\n5 console.log(message);\nLink to the preceding example: https://packt.link/ITlEU\n```", "```js\nHello world!\n```", "```js\nconsole.log(myFunction('world'));\n```", "```js\nHello world!\n```", "```js\nconst message = myFunction();\n```", "```js\nconst message = myFunction(5);\n```", "```js\nExample04.ts\n1 function myFunction(name?: string): string {\n2   return `Hello ${name}!`;\n3 }\n```", "```js\n4 const message = myFunction();\n5 console.log(message);\nLink to the preceding example: https://packt.link/cnW4c\n```", "```js\nHello undefined!\n```", "```js\nExample05.ts\n1 function myFunction(name: string = 'world'): string {\n2   return `Hello ${name}!`;\n3 }\nLink to the preceding example: https://packt.link/zS5Ej\n```", "```js\n4 const message = myFunction();\n5 console.log(message);\n```", "```js\nHello world!\n```", "```js\nconst message = myFunction('reader');\nconsole.log(message);\n```", "```js\nHello reader!\n```", "```js\nExample06.ts\n1 function readBook(title: string, ...chapters: number[]): void {\n2   console.log(`Starting to read ${title}...`);\n3   chapters.forEach(chapter => {\n4     console.log(`Reading chapter ${chapter}.`);\n5   });\n6   console.log('Done reading.');\n7 }\nLink to the preceding example: https://packt.link/Fw2iC\n```", "```js\nreadBook('The TypeScript Workshop', 1, 2, 3);\n```", "```js\nStarting to read The TypeScript Book...\nReading chapter 1.\nReading chapter 2.\nReading chapter 3.\nDone reading.\n```", "```js\nExample07.ts\n1 function readBook(title: string, chapters: number[]): void {\n2   console.log(`Starting to read ${title}...`);\n3   chapters.forEach(chapter => {\n4     console.log(`Reading chapter ${chapter}.`);\n5   });\n6   console.log('Done reading.');\n7 }\nLink to the preceding example: https://packt.link/AvInF\n```", "```js\nreadBook('The TypeScript Book', [1, 2, 3]);\n```", "```js\nStarting to read The TypeScript Book...\nReading chapter 1.\nReading chapter 2.\nReading chapter 3.\nDone reading.\n```", "```js\nExample08.ts\n1 function paritySort(...numbers: number[]): { evens: number[], odds: 2 number[] } {\n3   return {\n4     evens: numbers.filter(n => n % 2 === 0),\n5     odds: numbers.filter(n => n % 2 === 1)\n6   };\n7 }\nLink to the preceding example: https://packt.link/SHkuW\n```", "```js\nconst { evens, odds } = paritySort(1, 2, 3, 4);\nconsole.log(evens); \nconsole.log(odds);\n```", "```js\n[2, 4]\n[1, 3]\n```", "```js\n    const arrayone = [7, 6, 8, 9, 2, 25];\n    const arraytwo = [6, 8, 9, 2, 25];\n    const arraythree = [6, 8, 9, 2, 25, 7];\n    function arrayCompare(a1: number[], a2: number[]): boolean {\n      return true;\n    }\n    console.log(\n      `Are ${arrayone} and ${arraytwo} equal?`,\n      arrayCompare(arrayone, arraytwo)\n    );\n    console.log(\n      `Are ${arrayone} and ${arraythree} equal?`,\n      arrayCompare(arrayone, arraythree)\n    );\n    console.log(\n      `Are ${arraytwo} and ${arraythree} equal?`,\n      arrayCompare(arraytwo, arraythree)\n    );\n    ```", "```js\n    function arrayCompare(a1: number[], a2: number[]): boolean {\n      if(a1.length !== a2.length) {\n        return false;\n      }\n      return true;\n    }\n    ```", "```js\n    function arrayCompare(a1: number[], a2: number[]): boolean {\n      if(a1.length !== a2.length) {\n        return false;\n      }\n      a1.sort();\n      a2.sort();\n      return true;\n    }\n    ```", "```js\n    function arrayCompare(a1: number[], a2: number[]): boolean {\n      if(a1.length !== a2.length) {\n        return false;\n      }\n      a1.sort();\n      a2.sort();\n      for (let i = 0; i < a1.length; i++) {\n        if (a1[i] !== a2[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    ```", "```js\n    npx ts-node array-equal.ts\n    ```", "```js\n    Are 7,6,8,9,2,25 and 6,8,9,2,25,8 equal? false\n    Are 2,25,6,7,8,9 and 6,8,9,2,25,7 equal? true\n    Are 2,25,6,8,8,9 and 2,25,6,7,8,9 equal? False\n    ```", "```js\nExample09.ts\n1 const myFunction = function(name: string): string {\n2   return `Hello ${name}!`;\n3 };\n4 console.log(myFunction('function expression'));\nLink to the preceding example: https://packt.link/2JeGQ\n```", "```js\nHello function expression!\n```", "```js\nfunction myFunction(name: string = 'world'): string {\n  return `Hello ${name}!`;\n}\n```", "```js\nExample10.ts\n1 const numbers = [1, 3, 2];\n2 const filtered = numbers.filter(function(val) {return val < 3});\n3 console.log(filtered);\nLink to the preceding example: https://packt.link/aJyhj\n```", "```js\n[1, 2]\n```", "```js\nconst filtered = numbers.filter(function myFilterFunc(val) {return val < 3});\n```", "```js\nExample11.ts\n1 (function () {\n2    console.log('Immediately invoked!');\n3 })();\nLink to the preceding example: https://packt.link/iQoSX\n```", "```js\n \"Immediately invoked!\"\n```", "```js\nconst myFunction = (name: string): string => {\n  return `Hello ${name}!`;\n};\n```", "```js\nconst myFunction = (name: string): string => `Hello ${name}!`;\n```", "```js\nExample12.ts\n1 const numbers = [1, 3, 2];\n2 const filtered = numbers.filter((val) => val < 3);\n2 console.log(filtered);\nLink to the preceding example: https://packt.link/lUTCm\n```", "```js\n[1, 2]\n```", "```js\nconst myFunction = (name: string): string => `Hello ${name}!`;\nconst numbers = [1, 3, 2];\nconst filtered = numbers.filter((val) => val < 3);\nconsole.log(filtered);\n```", "```js\n[1, 2]\n```", "```js\nExample13.ts\n1 const numbers = [1, 3, 2];\n2 const filtered = numbers.filter(val => val < 3);\n3 console.log(filtered);\nLink to the preceding example: https://packt.link/hvbsc\n```", "```js\n[1, 2]\n```", "```js\n    export const sentence = (\n      subject: string,\n      verb: string,\n      ...objects: string[]\n    ): string => {\n      return 'Meow, implement me!';\n    };\n    console.log(sentence('the cat', 'ate', 'apples', 'cheese', 'pancakes'));\n    console.log(sentence('the cat', 'slept', 'all day'));\n    console.log(sentence('the cat', 'sneezed'));\n    ```", "```js\n    export const sentence = (\n      subject: string,\n      verb: string,\n      ...objects: string[]\n    ): string => {\n      return `${subject} ${verb} ${objects}.`;\n    };\n    ```", "```js\n    the cat ate apples,cheese,pancakes.\n    the cat slept all day.\n    the cat sneezed .\n    ```", "```js\n    export const arrayToObjectSegment = (words: string[]): string => {\n      if (words.length < 1) {\n        return '';\n      }\n      if (words.length === 1) {\n        return ` ${words[0]}`;\n      }\n      ...\n    };\n    ```", "```js\n    export const arrayToObjectSegment = (words: string[]): string => {\n      if (words.length < 1) {\n        return '';\n      }\n      if (words.length === 1) {\n        return ` ${words[0]}`;\n      }\n      let segment = '';\n      for (let i = 0; i < words.length; i++) {\n        if (i === words.length - 1) {\n          segment += ` and ${words[i]}`;\n        } else {\n          segment += ` ${words[i]},`;\n        }\n      }\n      return segment;\n    };\n    ```", "```js\n    the cat ate apples, cheese, and pancakes.\n    the cat slept all day.\n    the cat sneezed.\n    ```", "```js\n    export const capitalize = (sentence: string): string => {\n      return `${sentence.charAt(0).toUpperCase()}${sentence\n        .slice(1)\n        .toLowerCase()}`;\n    };\n    ```", "```js\n    The cat ate apples, cheese, and pancakes.\n    The cat slept all day.\n    The cat sneezed.\n    ```", "```js\nconst person = {\n    name: 'Ahmed',\n    sayHello: function () {\n        return `Hello, ${this.name}!`\n    }\n}\nconsole.log(person.sayHello());\n```", "```js\nconst arrayFilter = {\n    max: 3,\n    filter: function (...numbers: number[]) {\n        return numbers.filter(function (val) {\n            return val <= this.max;\n        });\n    }\n}\nconsole.log(arrayFilter.filter(1, 2, 3, 4));\n```", "```js\nExample14.ts\n1 const arrayFilter = {\n2     max: 3,\n3     filter: function(...numbers: number[]) {\n4         return numbers.filter(val => {\n5             return val <= this.max;\n6         });\n7     }\n8 }\n9 console.log(arrayFilter.filter(1, 2, 3, 4));\nLink to the preceding example: https://packt.link/90JSJ\n```", "```js\n[1, 2, 3]\n```", "```js\n    export const account = {\n      due: 1000,\n      paid: 0,\n      status: 'OPEN',\n      payAccount: function (amount: number): string {\n        return 'unimplemented!';\n      },\n      printStatus: function (): string {\n        return 'unimplemented!';\n      },\n    };\n    console.log(account.printStatus());\n    console.log(account.payAccount(1500));\n    console.log(account.payAccount(500));\n    console.log(account.payAccount(500));\n    ```", "```js\n      printStatus: function (): string {\n        return `$${this.paid} has been paid and $${\n          this.due - this.paid\n        } is outstanding. This account is ${this.status}.`;\n      },\n    ```", "```js\n      payAccount: function (amount: number): string {\n        if (amount > this.due - this.paid) {\n          return `$${amount} is more than the outstanding balance of $${\n            this.due - this.paid\n          }.`;\n        }\n        this.paid += amount;\n        if (this.paid === this.due) {\n          this.status = 'CLOSED';\n        }\n        return this.printStatus();\n      },\n    ```", "```js\n    $0 has been paid and $1000 is outstanding. This account is OPEN.\n    $1500 is more than the outstanding balance of $1000.\n    $500 has been paid and $500 is outstanding. This account is OPEN.\n    $1000 has been paid and $0 is outstanding. This account is CLOSED\n    ```", "```js\nExample15.ts\n1 const outer = (): void => {\n2     const hello = 'Hello';\n3     const inner = (): void => {\n4         const world = 'world!';\n5         console.log(`${hello} ${world}`);\n6     }\n7     inner();\n8 \n9     console.log(`${hello} ${world}`);\n10 }\n11 outer();\nLink to the preceding example: https://packt.link/USZ74\n```", "```js\nHello world!\nReferenceError: world is not defined\n```", "```js\nExample16.ts\n1  const outer = (): void => {\n2      const hello = 'Hello';\n3      let world;\n4      const inner = (): void => {\n5          const world = 'world!';\n6          console.log(`${hello} ${world}`);\n7      }\n8      inner();\n8 \n9      console.log(`${hello} ${world}`);\n10  }\n11  outer();\nLink to the preceding example: https://packt.link/yC0Zq\n```", "```js\nHello world!\nHello undefined!\n```", "```js\nExample17.ts\n1  const outer = (): void => {\n2      const hello = 'Hello';\n3      let world;\n4      const inner = (): void => {\n5          world = 'world!';\n6          console.log(`${hello} ${world}`);\n7      }\n8      inner();\n9  \n10     console.log(`${hello} ${world}`);\n11 }\n12 \n13 outer();\nLink to the preceding example: https://packt.link/fCsaY\n```", "```js\nHello world!\nHello world!\n```", "```js\nExample_Fibbonacci_1.ts\n1 let next = 0;\n2 let inc = 1;\n3 let current = 0; \n4 \n5 for (let i = 0; i < 10; i++) {\n6     [current, next, inc] = [next, inc, next + inc];\n7     console.log(current);\n8 }\nLink to the preceding example: https://packt.link/17Hda\n```", "```js\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n```", "```js\nExample_Fibbonacci_2.ts\n1  const getNext = (): number => {\n2      let next = 0;\n3      let inc = 1;\n4      let current = 0;\n5      [current, next, inc] = [next, inc, next + inc];\n6      return current;\n7  };\n8  \n9  for (let i = 0; i < 10; i++) {\n10     console.log(getNext());\n11 }\nLink to the preceding example: https://packt.link/rfDuz\n```", "```js\n0\n0\n//...\n```", "```js\nExample_Fibbonacci_3.ts\n1  let next = 0;\n2  let inc = 1;\n3  let current = 0;\n4  \n5  const getNext = (): number => {\n6      [current, next, inc] = [next, inc, next + inc];\n7      return current;\n8  };\n9  \n10 for (let i = 0; i < 10; i++) {\n11     console.log(getNext());\n12 }\nLink to the preceding example: https://packt.link/mAEds\n```", "```js\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n```", "```js\nExample_Fibbonacci_4.ts\n1  const fibonacci = () => {\n2      let next = 0;\n3      let inc = 1;\n4      let current = 0;\n5      return () => {\n6          [current, next, inc] = [next, inc, next + inc];\n7          return current;\n8      };\n9  };\n10 const getNext = fibonacci();\n11 for (let i = 0; i < 10; i++) {\n12     console.log(getNext());\n13 }\nLink to the preceding example: https://packt.link/CdKte\n```", "```js\n0\n1\n1\n2\n3\n//...\n```", "```js\nExample_Fibbonacci_5.ts\n1  const fibonacci = () => {\n2     let next = 0;\n3     let inc = 1;\n4      let current = 0;\n5      return () => {\n6          [current, next, inc] = [next, inc, next + inc];\n7          return current;\n8      };\n9  };\n10 const getNext = fibonacci();\n11 const getMoreFib = fibonacci();\n12 for (let i = 0; i < 10; i++) {\n13     console.log(getNext());\n14 }\n15 for (let i = 0; i < 10; i++) {\n16     console.log(getMoreFib());\n17 }\nLink to the preceding example: https://packt.link/0nGph\n```", "```js\n0\n1\n1\n2\n//…\n21\n34\n0\n1\n1\n2\n//…\n```", "```js\n    interface Order {\n      id: number;\n      color: string;\n      size: string;\n    }\n    export const createOrder = (\n      color: string,\n      size: string,\n      quantity: number\n    ): Order[] => {\n      let id = 0;\n      const orders = [];\n      for (let i = 0; i < quantity; i++) {\n        orders.push({ id: id++, color, size });\n      }\n      return orders;\n    };\n    const orderOne = createOrder('red', 'M', 4);\n    console.log(orderOne);\n    const orderTwo = createOrder('blue', 'S', 7);\n    console.log(orderTwo);\n    ```", "```js\n    [\n      { id: 0, color: 'red', size: 'M' },\n      { id: 1, color: 'red', size: 'M' },\n      { id: 2, color: 'red', size: 'M' },\n      { id: 3, color: 'red', size: 'M' }\n    ]\n    [\n      { id: 0, color: 'blue', size: 'S' },\n      { id: 1, color: 'blue', size: 'S' },\n      { id: 2, color: 'blue', size: 'S' },\n      { id: 3, color: 'blue', size: 'S' },\n      { id: 4, color: 'blue', size: 'S' },\n      { id: 5, color: 'blue', size: 'S' },\n      { id: 6, color: 'blue', size: 'S' }\n    ]\n    ```", "```js\n    export const orderFactory = (): ((\n      color: string,\n      size: string,\n      qty: number\n    ) => Order[]) => {\n      let id = 0;\n      return (color: string, size: string, qty: number): Order[] => {\n        const orders = [];\n        for (let i = 0; i < qty; i++) {\n          orders.push({ id: id++, color, size });\n        }\n        return orders;\n      };\n    };\n    ```", "```js\n    const createOrder = orderFactory();\n    ```", "```js\n    [\n      { id: 0, color: 'red', size: 'M' },\n      { id: 1, color: 'red', size: 'M' },\n      { id: 2, color: 'red', size: 'M' },\n      { id: 3, color: 'red', size: 'M' }\n    ]\n    [\n      { id: 4, color: 'blue', size: 'S' },\n      { id: 5, color: 'blue', size: 'S' },\n      { id: 6, color: 'blue', size: 'S' },\n      { id: 7, color: 'blue', size: 'S' },\n      { id: 8, color: 'blue', size: 'S' },\n      { id: 9, color: 'blue', size: 'S' },\n      { id: 10, color: 'blue', size: 'S' }\n    ]\n    ```", "```js\nExample_Currying_1.ts\n1 const addTwoNumbers = (a: number, b: number): number => a + b;\n2 console.log(addTwoNumbers(3, 4));\nLink to the preceding example: https://packt.link/InDVT\n```", "```js\n7\n```", "```js\nExample_Currying_2.ts\n1 const addTwoNumbers = (a: number): ((b: number) => number) => (b: \n2 number): number => a + b;\n3 console.log(addTwoNumbers(3)(4));\nLink to the preceding example: https://packt.link/975cf\n```", "```js\n7\n```", "```js\nExample_Currying_3.ts\n1 const addTwoNumbers = (a: number): ((b: number) => number) => {\n2     return (b: number): number => {\n3         return a + b;\n4     }\n5 }\n6 \n7 const addFunction = addTwoNumbers(3);\n8 \n9 console.log(addFunction(4));\nLink to the preceding example: https://packt.link/TgC17\n```", "```js\n7\n```", "```js\n    interface Order {\n      id: number;\n      color: string;\n      size: string;\n    }\n    export const orderFactory = (): ((\n      color: string,\n      size: string,\n      qty: number\n    ) => Order[]) => {\n      let id = 0;\n      return (color: string, size: string, qty: number): Order[] => {\n        const orders = [];\n        for (let i = 0; i < qty; i++) {\n          orders.push({ id: id++, color, size });\n        }\n        return orders;\n      };\n    };\n    const createOrder = orderFactory();\n    const orderOne = createOrder('red', 'M', 4);\n    console.log(orderOne);\n    const orderTwo = createOrder('blue', 'S', 7);\n    console.log(orderTwo);\n    ```", "```js\n    export const orderFactory = () => {\n      let id = 0;\n      return (color: string) => (size: string) => (qty: number) => {\n        const orders = [];\n        for (let i = 0; i < qty; i++) {\n          orders.push({ id: id++, color, size });\n        }\n        return orders;\n      };\n    };\n    ```", "```js\n    export const orderFactory = (): ((\n      color: string\n    ) => (size: string) => (qty: number) => Order[]) => {\n      let id = 0;\n      return (color: string): ((size: string) => (qty: number) => Order[]) => (\n        size: string\n      ) => (qty: number): Order[] => {\n        const orders = [];\n        for (let i = 0; i < qty; i++) {\n          orders.push({ id: id++, color, size });\n        }\n        return orders;\n      };\n    };\n    ```", "```js\n    const redLine = createOrder('red');\n    ```", "```js\n    const redSmall = redLine('S');\n    const redMedium = redLine('M');\n    ```", "```js\n    const blueSmall = createOrder('blue')('S')\n    ```", "```js\n    const orderOne = redMedium(4);\n    console.log(orderOne);\n    const orderTwo = blueSmall(7);\n    console.log(orderTwo);\n    const orderThree = redSmall(11);\n    console.log(orderThree);\n    ```", "```js\n    [\n      { id: 0, color: 'red', size: 'M' },\n      { id: 1, color: 'red', size: 'M' },\n      { id: 2, color: 'red', size: 'M' },\n      { id: 3, color: 'red', size: 'M' }\n    ]\n    //...\n    ```", "```js\nExample_Functional_1.ts\n1 let importantNumber = 3;\n2\n3 const addFive = (): void => {\n4     importantNumber += 5;\n5 };\n6 \n7 addFive();\n8 \n9 console.log(importantNumber);\nLink to the preceding example: https://packt.link/CTn1X\n```", "```js\n8\n```", "```js\nExample_Functional_2.ts\n1 let importantNumber = 3;\n2\n3 const addFive = (num: number): number => {\n4     return num + 5;\n5 };\n6 \n7 importantNumber = addFive(importantNumber);\n8 \n9 console.log(importantNumber);\nLink to the preceding example: https://packt.link/6fWcF.\n```", "```js\n8\n```", "```js\nExample_Functional_3.ts\n1 const customer = {id: 1234, name: 'Amalgamated Materials'}\n2 \n3 const formatForPrint = ()=> {\n4   customer.name = `${customer.name} id: ${customer.id}`;\n5 };\n6 \n7 formatForPrint();\n8 \n9 console.log(customer.name);\nLink to the preceding example: https://packt.link/TX81Z\n```", "```js\nAmalgamated Materials id: 1234\n```", "```js\nconst customer = {id: 1234, name: 'Amalgamated Materials'}\nconst formatForPrint = ()=> {\n  return `${customer.name} id: ${customer.id}`;\n};\nconsole.log(formatForPrint());\n```", "```js\nAmalgamated Materials id: 1234\n```", "```js\nExample_OrganizingFuncs_1.ts\n1 function addTwoNumbers(a: number, b: number) { return a + b; }\n```", "```js\n2 const mathUtils = {\n3     addTwoNumbers\n4 };\n5 \n6 console.log(mathUtils.addTwoNumbers(3, 4));\nLink to the preceding example: https://packt.link/qX1QO\n```", "```js\n7\n```", "```js\nExample_OrganizingFuncs_2.ts\n5 const mathUtils = {\n6     addTwoNumbers: addTwoNumbers\n7 };\n```", "```js\n5 const mathUtils = {\n6     addTwoNumbers: function(a: number, b: number) { return a + b; }\n7 };\nLink to the preceding example: https://packt.link/Ew4vi\n```", "```js\n7\n```", "```js\nclass MathUtils {\n    addTwoNumbers(a: number, b: number) { return a + b; }\n};\n```", "```js\nconst mathUtils = new MathUtils();\nconsole.log(mathUtils.addTwoNumbers(3, 4));\n```", "```js\n7\n```", "```js\n    var PI = 3.14;\n    function getCircleArea(radius) {\n      return radius * radius * PI;\n    }\n    //...\n    ```", "```js\n    const PI = 3.14;\n    interface Shape {\n      area?: number;\n      type: 'circle' | 'rectangle' | 'rightTriangle' | 'square';\n    }\n    interface Circle extends Shape {\n      radius: number;\n      type: 'circle';\n    }\n    interface Rectangle extends Shape {\n      length: number;\n      type: 'rectangle';\n      width: number;\n    }\n    interface RightTriangle extends Shape {\n      base: number;\n      height: number;\n      type: 'rightTriangle';\n    }\n    interface Square extends Shape {\n      type: 'square';\n      width: number;\n    }\n    ```", "```js\n    const getArea = (shape: Shape) => {\n      switch (shape.type) {\n        case 'circle':\n          return getCircleArea(shape as Circle);\n        case 'rectangle':\n          return getRectangleArea(shape as Rectangle);\n        case 'rightTriangle':\n          return getRightTriangleArea(shape as RightTriangle);\n        case 'square':\n          return getSquareArea(shape as Square);\n      }\n    };\n    ```", "```js\n    const getCircleArea = (circle: Circle): number => {\n      const { radius } = circle;\n      return radius * radius * PI;\n    };\n    const getRectangleArea = (rectangle: Rectangle): number => {\n      const { length, width } = rectangle;\n      return length * width;\n    };\n    const getSquareArea = (square: Square): number => {\n      const { width } = square;\n      return getRectangleArea({ length: width, type: 'rectangle', width });\n    };\n    const getRightTriangleArea = (rightTriangle: RightTriangle): number => {\n      const { base, height } = rightTriangle;\n      return (base * height) / 2;\n    };\n    ```", "```js\n    const circle: Circle = { radius: 4, type: 'circle' };\n    console.log({ ...circle, area: getArea(circle) });\n    const rectangle: Rectangle = { type: 'rectangle', length: 7, width: 4 };\n    console.log({ ...rectangle, area: getArea(rectangle) });\n    const square: Square = { type: 'square', width: 5 };\n    console.log({ ...square, area: getArea(square) });\n    const rightTriangle: RightTriangle = {\n      type: 'rightTriangle',\n      base: 9,\n      height: 4,\n    };\n    console.log({ ...rightTriangle, area: getArea(rightTriangle) });\n    ```", "```js\n    { radius: 4, type: 'circle', area: 50.24 }\n    { type: 'rectangle', length: 7, width: 4, area: 28 }\n    { type: 'square', width: 5, area: 25 }\n    { type: 'rightTriangle', base: 9, height: 4, area: 18 }\n    ```", "```js\n// utils.ts\nexport const PI = 3.14;\nexport const addTwoNumbers = (a: number, b: number): number => a + b;\n```", "```js\nExample_Import_Exports/utils.ts\n1 // utils.ts\n2 const PI = 3.14;\n3 \n4 const addTwoNumbers = (a: number, b: number): number => a + b;\n5\n6 export { PI, addTwoNumbers };\n7 // module syntax:\n8 // module.exports = { PI, addTwoNumbers };\nLink to the preceding example: https://packt.link/3FEbm\n```", "```js\nExample_Import_Exports/app.ts\n1 // app.ts\n2 import { PI, addTwoNumbers } from './utils';\n3 // require syntax:\n4 // const { PI, addTwoNumbers } = require('./utils');\n5 console.log(PI);\n6 console.log(addTwoNumbers(3, 4));\nLink to the preceding example: https://packt.link/ozz9N\n```", "```js\n3.14\n7\n```", "```js\nExample_Import_Export_2/utils.ts\n1 // utils.ts\n2 const PI = 3.14;\n3 const addTwo = (a: number, b: number): number => {\n4   return a + b;\n5 };\n6 const fetcher = () => {\n7   console.log('it is fetched!');\n8 };\n9 export default { addTwo, fetcher, PI };\nLink to the preceding example: https://packt.link/h3R4r\n```", "```js\n1 // app.ts\n2 import utils from './utils';\n3 console.log(utils.addTwo(3, 4));\nLink to the preceding example: https://packt.link/oamFn\n```", "```js\n7\n```", "```js\n    const PI = 3.14;\n    interface Shape {\n      area?: number;\n      type: 'circle' | 'rectangle' | 'rightTriangle' | 'square';\n    }\n    export interface Circle extends Shape {\n      radius: number;\n      type: 'circle';\n    }\n    export interface Rectangle extends Shape {\n      length: number;\n      type: 'rectangle';\n      width: number;\n    }\n    export interface RightTriangle extends Shape {\n      base: number;\n      height: number;\n      type: 'rightTriangle';\n    }\n    export interface Square extends Shape {\n      type: 'square';\n      width: number;\n    }\n    ```", "```js\n    export const getArea = (shape: Shape) => {\n      switch (shape.type) {\n        case 'circle':\n          return getCircleArea(shape as Circle);\n        case 'rectangle':\n          return getRectangleArea(shape as Rectangle);\n        case 'rightTriangle':\n          return getRightTriangleArea(shape as RightTriangle);\n        case 'square':\n          return getSquareArea(shape as Square);\n      }\n    };\n    ```", "```js\n    import {\n      Circle,\n      getArea,\n      Rectangle,\n      RightTriangle,\n      Square,\n    } from './shapes-lib-solution';\n    ```", "```js\n    { radius: 4, type: 'circle', area: 50.24 }\n    { type: 'rectangle', length: 7, width: 4, area: 28 }\n    { type: 'square', width: 5, area: 25 }\n    { type: 'rightTriangle', base: 9, height: 4, area: 18 }\n    ```", "```js\n    Booked to Lagos {\n      bookingNumber: 1,\n      flight: {\n        destination: 'Lagos',\n        flightNumber: 1,\n        seatsHeld: 0,\n        seatsRemaining: 29,\n        time: '5:30'\n      },\n      paid: true,\n      seatsHeld: 0,\n      seatsReserved: 1\n    //...\n    ```", "```js\nnpm install -D jest ts-jest @types/jest\n```", "```js\nnpx ts-jest config:init\n```", "```js\ndescribe(\"test suite for `sentence`\", () => {\n  test(\"dummy test\", () => {\n    expect(true).toBeTruthy();\n  });\n});\n```", "```js\nnpm test\n> ex1@1.0.0 test /Users/mattmorgan/typescript/function-chapter/exercises\n> echo \"Error: no test specified\" && exit 1\nError: no test specified\nnpm ERR! Test failed.  See above for more details.\n```", "```js\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n```", "```js\n  \"scripts\": {\n    \"test\": \"jest\"\n  },\n```", "```js\nnpm test\n> ex1@1.0.0 test /Users/mattmorgan/typescript/function-chapter/exercises\n> jest\n PASS  ./example.spec.ts\n  test suite for `sentence`\n    ✓ dummy test (1ms)\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        1.449s\nRan all test suites\n```", "```js\nexport const arrayToAnd = (words: string[]) => {\n  return words.reduce((prev, curr, index) => {\n    if (words.length === 1) {\n      return ` ${curr}`;\n    }\n    if (words.length - 1 === index) {\n      return `${prev} and ${curr}`;\n    }\n    return `${prev} ${curr},`;\n  }, \"\");\n};\nexport const capitalize = (sentence: string) => {\n  return `${sentence.charAt(0).toUpperCase()}${sentence\n    .slice(1)\n    .toLowerCase()}`;\n};\nexport const sentence = (\n  subject: string,\n  verb: string,\n  ...objects: string[]\n): string => {\n  return capitalize(`${subject} ${verb}${arrayToAnd(objects)}.`);\n};\n```", "```js\nimport { capitalize } from './arrow-cat-solution'; \n```", "```js\ndescribe(\"test suite for `sentence`\", () => {\n  test(\"capitalize\", () => {\n    expect(capitalize(\"HELLO\")).toBe(\"Hello\");\n  });\n});\n```", "```js\nnpm test\n> ex1@1.0.0 test /Users/mattmorgan/typescript/function-chapter/exercises\n> jest\n PASS  ./example.spec.ts\n  test suite for `sentence`\n    ✓ capitalize (1ms)\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.502s, estimated 2s\nRan all test suites.\n```", "```js\n  it(\"should capitalize the string\", () => {\n    expect(capitalize(\"HELLO\")).toBe(\"Hello\");\n  });\n```", "```js\nconst divide = (numerator: number, denominator: number) => {\n    return numerator / denominator;\n}\n```", "```js\nconst divide = (numerator: number, denominator: number) => {\n    if(denominator === 0) {\n        throw 'Cannot divide by zero!'\n    }\n    return numerator / denominator;\n}\n```"]