["```js\n<script src=\"img/react-with-addons.js\"></script>\n<script src=\"img/jquery.js\"></script>\n```", "```js\ndescribe(\"InvestmentListItem\", function() {\n\n  beforeEach(function() {\n    // render the React component\n  });\n\nit(\"should render\", function() {\n expect(component.$el).toEqual('li.investment-list-item');\n });\n});\n```", "```js\nit(\"should render\", function() {\n  expect(component.getDOMNode()).toEqual('li.investment-list-item');\n});\n```", "```js\ndescribe(\"InvestmentListItem\", function() {\n  var component;\n\n  beforeEach(function() {\n\n setFixtures('<div id=\"application-container\"></div>');\n var container = document.getElementById('application-container');\n\n var element = React.createElement(InvestmentListItem);\n component = React.render(element, container);\n  });\n\n  it(\"should render\", function() {\n    expect(component.getDOMNode()).toEqual('li.investment-list-item');\n  });\n});\n```", "```js\n        var element = React.createElement(InvestmentListItem);\n        ```", "```js\n        component = React.render(element, container);\n        ```", "```js\n    ReferenceError: InvestmentListItem is not defined.\n    ```", "```js\n    (function (React) {\n      var InvestmentListItem = React.createClass({\n\n    render: function () {\n          return React.createElement('li', { className: 'investment-list-item' }, 'Investment');\n        }\n      });\n\n      this.InvestmentListItem = InvestmentListItem;\n    })(React);\n    ```", "```js\n    React.createElement('li', { className: 'investment-list-item' }, 'Investment')\n    ```", "```js\n<li class=\"investment-list-item\">Investment</li>\n```", "```js\nReact.createElement('li', { className: 'investment-list-item' }, 'Investment');\n```", "```js\nvar NewInvestment = React.createClass({\n  render: function () {\n    return React.createElement(\"form\", {className: \"new-investment\"},\n      React.createElement(\"h1\", null, \"New investment\"),\n      React.createElement(\"label\", null,\n        \"Symbol:\",\n        React.createElement(\"input\", {type: \"text\", className: \"new-investment-stock-symbol\", maxLength: \"4\"})\n      ),\n      React.createElement(\"label\", null,\n        \"Shares:\",\n        React.createElement(\"input\", {type: \"number\", className: \"new-investment-shares\"})\n      ),\n      React.createElement(\"label\", null,\n        \"Share price:\",\n        React.createElement(\"input\", {type: \"number\", className: \"new-investment-share-price\"})\n      ),\n      React.createElement(\"input\", {type: \"submit\", className: \"new-investment-submit\", value: \"Add\"})\n    );\n  }\n});\n```", "```js\nvar NewInvestment = React.createClass({\n  render: function () {\n    return <form className=\"new-investment\">\n      <h1>New investment</h1>\n      <label>\n        Symbol:\n        <input type=\"text\" className=\"new-investment-stock-symbol\" maxLength=\"4\" />\n      </label>\n      <label>\n        Shares:\n        <input type=\"number\" className=\"new-investment-shares\" />\n      </label>\n      <label>\n        Share price:\n        <input type=\"number\" className=\"new-investment-share-price\" />\n      </label>\n      <input type=\"submit\" className=\"new-investment-submit\" value=\"Add\" />\n    </form>;\n  }\n});\n```", "```js\n<script src=\"img/strong>\" type=\"text/jsx\"></script>\n<script src=\"img/strong>\" type=\"text/jsx\"></script>\n```", "```js\n<script src=\"img/react-with-addons.js\"></script>\n<script src=\"img/JSXTransformer.js\"></script>\n\n```", "```js\nwindow.onload = function() {\n  if (currentWindowOnload) {\n    currentWindowOnload();\n  }\n  htmlReporter.initialize();\n\n// delays execution so that JSX files can be loaded\n // env.execute();\n};\n```", "```js\n/**\n  Custom boot file that actually runs the tests.\n  The code below was extracted and commented out from the original boot.js file.\n */\n(function() {\n\n  var env = jasmine.getEnv();\n  env.execute();\n\n}());\n```", "```js\n\n<!-- After all JSX files were loaded and processed, the tests can finally run -->\n <script src=\"img/boot-exec.js\" type=\"text/jsx\"></script>\n\n</head>\n```", "```js\ndescribe(\"InvestmentListItem\", function() {\n  var TestUtils = React.addons.TestUtils;\n\n  describe(\"given an Investment\", function() {\n    var investment, component;\n\n    beforeEach(function() {\n      investment = new Investment({\n        stock: new Stock({ symbol: 'peto', sharePrice: 0.25 }),\n        shares: 100,\n        sharePrice: 0.20\n      });\n\n      component = TestUtils.renderIntoDocument(\n        <InvestmentListItem investment={investment}/>\n      );\n    });\n\n    it(\"should render the return of investment as a percentage\", function() {\n      var roi = TestUtils.findRenderedDOMComponentWithClass(component, 'roi');\n      expect(roi.getDOMNode()).toHaveText('25%');\n    });\n  });\n});\n```", "```js\nvar roi = TestUtils.findRenderedDOMComponentWithClass(component, 'roi');\nexpect(roi.getDOMNode()).toHaveText('25%');\n```", "```js\n(function (React) {\n  var InvestmentListItem = React.createClass({\n    render: function () {\n      var investment = this.props.investment;\n\n      return <li className=\"investment-list-item\">\n        <article>\n          <span className=\"roi\">{formatPercentage(investment.roi())}</span>\n        </article>\n      </li>;\n    }\n  });\n\n  function formatPercentage (number) {\n    return (number * 100).toFixed(0) + '%';\n  }\n\n  this.InvestmentListItem = InvestmentListItem;\n})(React);\n```", "```js\n<span className=\"roi\">{formatPercentage(investment.roi())}</span>\n```", "```js\nReact.createElement(\"span\", {className: \"roi\"}, formatPercentage(investment.roi()))\n```", "```js\ndescribe(\"InvestmentListItem\", function() {\n  var TestUtils = React.addons.TestUtils;\n\n  describe(\"given an Investment\", function() {\n    var investment, component, onClickDelete;\n\n    beforeEach(function() {\n      investment = new Investment({\n        stock: new Stock({ symbol: 'peto', sharePrice: 0.25 }),\n        shares: 100,\n        sharePrice: 0.20\n      });\n\n      onClickDelete = jasmine.createSpy('onClickDelete');\n\n      component = TestUtils.renderIntoDocument(\n        <InvestmentListItem investment={investment} onClickDelete={onClickDelete}/>\n      );\n    });\n\n    it(\"should notify an observer onClickDelete when the delete button is clicked\", function() {\n      var deleteButton = TestUtils.findRenderedDOMComponentWithTag(component, 'button');\n      TestUtils.Simulate.click(deleteButton);\n      expect(onClickDelete).toHaveBeenCalled();\n    });\n\n  });\n});\n```", "```js\nonClickDelete = jasmine.createSpy('onClickDelete');\n\ncomponent = TestUtils.renderIntoDocument(\n  <InvestmentListItem investment={investment} onClickDelete={onClickDelete}\n/>\n);\n```", "```js\nvar deleteButton = TestUtils.findRenderedDOMComponentWithTag(component, 'button');\nTestUtils.Simulate.click(deleteButton);\nexpect(onClickDelete).toHaveBeenCalled();\n```", "```js\nTestUtils.Simulate.**click**(node);\nTestUtils.Simulate.**change**(node, {target: {value: 'Hello, world'}});\nTestUtils.Simulate.**keyDown**(node, {key: \"Enter\"});\n```", "```js\n(function (React) {\n  var InvestmentListItem = React.createClass({\n    render: function () {\n      var investment = this.props.investment;\n      **var onClickDelete = this.props.onClickDelete;**\n\n      return <li className=\"investment-list-item\">\n        <article>\n          <span className=\"roi\">{formatPercentage(investment.roi())}</span>\n          <button className=\"delete-investment\" **onClick={onClickDelete}**>Delete</button>\n        </article>\n      </li>;\n    }\n  });\n\n  function formatPercentage (number) {\n    return (number * 100).toFixed(0) + '%';\n  }\n\n  this.InvestmentListItem = InvestmentListItem;\n})(React);\n```", "```js\ndescribe(\"NewInvestment\", function() {\n  var TestUtils = React.addons.TestUtils;\n  var component, onCreateSpy;\n\n  function findNodeWithClass (className) {\n    return TestUtils.findRenderedDOMComponentWithClass(component, className).getDOMNode();\n  }\n\n  beforeEach(function() {\n    onCreateSpy = jasmine.createSpy('onCreateSpy');\n    component = TestUtils.renderIntoDocument(\n      <NewInvestment onCreate={onCreateSpy}/>\n    );\n  });\n\n  describe(\"with its inputs correctly filled\", function() {\n    beforeEach(function() {\n      var stockSymbol = findNodeWithClass('new-investment-stock-symbol');\n      var shares = findNodeWithClass('new-investment-shares');\n      var sharePrice = findNodeWithClass('new-investment-share-price');\n\n      TestUtils.Simulate.change(stockSymbol, { target: { value: 'AOUE' }});\n      TestUtils.Simulate.change(shares, { target: { value: '100' }});\n      TestUtils.Simulate.change(sharePrice, { target: { value: '20' }});\n    });\n\n    describe(\"when its form is submitted\", function() {\n      beforeEach(function() {\n        var form = component.getDOMNode();\n        TestUtils.Simulate.submit(form);\n      });\n\n      it(\"should invoke the 'onCreate' callback with the investment attributes\", function() {\n        var investmentAttributes = { stockSymbol: 'AOUE', shares: '100', sharePrice: '20' };\n\n        expect(onCreateSpy).toHaveBeenCalledWith(investmentAttributes);\n      });\n    });\n  });\n});\n```", "```js\nvar NewInvestment = React.createClass({\n getInitialState: function () {\n return {\n stockSymbol: '',\n shares: 0,\n sharePrice: 0\n };\n\n},\n\n  render: function () {\n var state = this.state;\n\n    return <form className=\"new-investment\">\n      <h1>New investment</h1>\n      <label>\n        Symbol:\n        <input type=\"text\" ref=\"stockSymbol\" className=\"new-investment-stock-symbol\" value={state.stockSymbol} maxLength=\"4\"/>\n      </label>\n      <label>\n        Shares:\n        <input type=\"number\" className=\"new-investment-shares\" value={state.shares}/>\n      </label>\n      <label>\n        Share price:\n        <input type=\"number\" className=\"new-investment-share-price\" value={state.sharePrice}/>\n      </label>\n      <input type=\"submit\" className=\"new-investment-submit\" value=\"Add\"/>\n    </form>;\n  }\n});\n```", "```js\n<input type=\"text\" ref=\"stockSymbol\" className=\"new-investment-stock-symbol\" value={state.stockSymbol} maxLength=\"4\" onChange={this._handleStockSymbolChange}/>\n```", "```js\nvar NewInvestment = React.createClass({\n  getInitialState: function () {\n    // ... Method implementation\n  },\n\n  render: function () {\n    // ... Method implementation\n  },\n\n_handleStockSymbolChange: function (event) {\n this.setState({ stockSymbol: event.target.value });\n }\n});\n```", "```js\nvar NewInvestment = React.createClass({\n\nmixins: [React.addons.LinkedStateMixin],\n\n  // ...\n\n  render: function () {\n    // ...\n    <input type=\"text\" ref=\"stockSymbol\" className=\"new-investment-stock-symbol\" valueLink={this.linkState('stockSymbol')} maxLength=\"4\" />\n    // ...\n  }\n});\n```", "```js\n/**\n  Uses jasmine-jquery fixtures to actually render in the document.\n  React.TestUtils.renderIntoDocument renders in a detached node.\n\n  This was required to test the focus behavior.\n */\nfunction actuallyRender (component) {\n  setFixtures('<div id=\"application-container\"></div>');\n  var container = document.getElementById('application-container');\n  return React.render(component, container);\n}\n\ndescribe(\"NewInvestment\", function() {\n  var TestUtils = React.addons.TestUtils;\n  var component, stockSymbol;\n\n  function findNodeWithClass (className) {\n    return TestUtils.findRenderedDOMComponentWithClass(component, className).getDOMNode();\n  }\n\n  beforeEach(function() {\n    component = actuallyRender(<NewInvestment onCreate={onCreateSpy}/>);\n    stockSymbol = findNodeWithClass('new-investment-stock-symbol');\n  });\n\n  it(\"should have its stock symbol input on focus\", function() {\n    expect(stockSymbol).toBeFocused();\n  });\n});\n```", "```js\n<input type=\"text\" ref=\"stockSymbol\" className=\"new-investment-stock-symbol\" valueLink={this.linkState('stockSymbol')} maxLength=\"4\" />\n```", "```js\nvar NewInvestment = React.createClass({\n  // ...\n\ncomponentDidMount: function () {\n this.refs.stockSymbol.getDOMNode().focus();\n }\n,\n  // ...\n});\n```", "```js\nvar InvestmentList = React.createClass({\n  render: function () {\n    var onClickDelete = this.props.onClickDelete;\n\n    var listItems = this.props.investments.map(function (investment) {\n      return <InvestmentListItem investment={investment}\n                  onClickDelete={onClickDelete.bind(null, investment)}/>;\n    });\n\n    return <ul className=\"investment-list\">{listItems}</ul>;\n  }\n});\n```"]