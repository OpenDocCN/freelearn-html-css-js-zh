["```js\nconst trim = (s: string) => s.trim();\nconst capitalize = (s: string) => s.toUpperCase();\n```", "```js\nconst trimAndCapitalize = (s: string) => capitalize(trim(s));\n```", "```js\ntrimAndCapitalize(\"   hello world   \"); // \"HELLO WORLD\"\n```", "```js\nconst compose = <T>(f: (x: T) => T, g: (x: T) => T) => (x: T) => f(g(x));\n```", "```js\nconst trimAndCapitalize = compose(trim, capitalize);\n```", "```js\ntrimAndCapitalize(\"   hello world   \"); // \"HELLO WORLD\"\n```", "```js\nconst compose = <T1, T2, T3>( f: (x: T2) => T3, g: (x: T1) => T2) => (x: T1) => f(g(x));\n```", "```js\nconst composed1 = compose(func1, func2);\nconst composed2 = compose(func1, func2);\nconst composed3 = compose(composed1, composed2);\n```", "```js\nconst compose3 = <T1, T2, T3, T4>(\n    f: (x: T3) => T4,\n    g: (x: T2) => T3,\n    h: (x: T1) => T2\n) => (x: T1) => f(g(h(x)));\n```", "```js\nconst composed1 = composeMany(func1, func2, func3);\n```", "```js\nconst composeMany = <T>(...functions: Array<(arg: T) => T>) =>\n    (arg: any) =>\n        functions.reduce((prev, curr) => {\n            return curr(prev);\n        }, arg);\n```", "```js\nconst composed1 = composeMany(func1, func2, func3, func4);\nconst composed2 = composeMany(func1, func2, func3, func4, func5);\n```", "```js\nfunction add(a: number, b: number) {\n    return a + b;\n}\n\nconst result = add(5, 5); // All arguments are provided at the same time\nconsole.log(result); // 10\n```", "```js\nfunction add(a: number) {\n return (b: number) => {\n return a + b;\n };\n}\n\nconst add5 = add(5); // The 1st argument is provided\nconst result = add5(5); // The 2nd argument is provided later\nconsole.log(result); // 10\n```", "```js\nfunction add(a: number, b?: number) {\n    if (b !== undefined) {\n        return a + b;\n    } else {\n        return (b2: number) => {\n            return a + b2;\n        };\n    }\n}\n\nconst result1 = add(5, 5); // All arguments are\nconsole.log(result1); // 10\nconst add5 = add(5) as (b: number) => number; // The 1st passed\nconst result2 = add5(5); // The 2nd argument is passed later\nconsole.log(result2); // 10\n```", "```js\nconst trim = (s: string) => s.trim();\nconst capitalize = (s: string) => s.toUpperCase();\nconst trimAndCapitalize = compose(trim, capitalize);\n```", "```js\nconst replace = (s: string, f: string, r: string) => s.split(f).join(r);\n```", "```js\nconst trimCapitalizeAndReplace = compose(trimAndCapitalize, replace); // Error\n```", "```js\nconst replace = (f: string, r: string) => (s: string) => s.split(f).join(r);\n```", "```js\nconst trimCapitalizeAndReplace = compose(trimAndCapitalize, replace(\"/\", \"-\"));\ntrimCapitalizeAndReplace(\" 13/feb/1989 \"); // \"13-FEB-1989\"\n```", "```js\nfunction curry2<T1, T2, T3>(fn: (a: T1, b: T2) => T3) {\n return (a: T1) => (b: T2) => fn(a, b);\n}\n```", "```js\nfunction add(a: number, b: number) {\n return a + b;\n}\n\nconst curriedAdd = curry2(add);\nconst add5 = curriedAdd(5);\nconst addResult = add5(5);\nconsole.log(addResult); // 10\n```", "```js\nfunction multiply(a: number, b: number) {\n return a * b;\n}\n\nconst curriedMultiply = curry2(multiply);\nconst multiplyBy5 = curriedMultiply(5);\nconst multiplyResult = multiplyBy5(5);\nconsole.log(multiplyResult); // 25\n```", "```js\nconst replace = (f: string, r: string) => (s: string) => s.split(f).join(r);\n\nconst trimCapitalizeAndReplace = compose(\n    trimAndCapitalize,\n    replace(\"/\", \"-\")\n);\n```", "```js\nfunction curry3<T1, T2, T3, T4>(fn: (a: T1, b: T2, c: T3) => T4) {\n    return (a: T1) => (b: T2) => (c: T3) => fn(a, b, c);\n}\n```", "```js\nconst replace = (s: string, f: string, r: string) => s.split(f).join(r);\n\nconst curriedReplace = curry3(replace);\n\nconst trimCapitalizeAndReplace = compose(\n    trimAndCapitalize,\n    curriedReplace(\"/\")(\"-\")\n);\n```", "```js\nconst replace = (s: string, f: string, r: string) => s.split(f).join(r);\nconst replaceForwardSlash = replace.bind(replace, \"/\");\nconst replaceForwardSlashWithDash = replaceForwardSlash.bind(replaceForwardSlash, \"-\");\nreplaceForwardSlashWithDash(\"13/feb/1989\");\n```", "```js\nconst compose = <T1, T2, T3>( f: (x: T2) => T3, g: (x: T1) => T2) => (x: T1) => f(g(x));\nconst trim = (s: string) => s.trim();\nconst capitalize = (s: string) => s.toUpperCase();\nconst trimAndCapitalize = compose(trim, capitalize);\nconst replace = (s: string, f: string, r: string) => s.split(f).join(r);\nconst replaceForwardSlashWithDash = replace.bind(replace, \"/\", \"-\");\nconst trimCapitalizeAndReplace = compose(trimAndCapitalize, replaceForwardSlashWithDash);\nconst result = trimCapitalizeAndReplace(\" 13/feb/1989 \");\nconsole.log(result); // \"13-FEB-1989\"\n```", "```js\nconst pipe = <T>(...fns: Array<(arg: T) => T>) =>\n    (value: T) =>\n        fns.reduce((acc, fn) => fn(acc), value);\n```", "```js\nconst trim = (s: string) => s.trim();\nconst capitalize = (s: string) => s.toUpperCase();\n\nconst replace = curry3(\n (s: string, f: string, r: string) => s.split(f).join(r)\n);\n```", "```js\nconst trimCapitalizeAndReplace = pipe(\n    trim,\n    capitalize,\n    replace(\"/\")(\"-\")\n);\n\ntrimCapitalizeAndReplace(\" 13/feb/1989 \"); // \"13-FEB-1989\"\n```", "```js\nconst result = \" 13/feb/1989 \"\n  |> trim\n  |> capitalize\n  |> replace(\"/\")(\"-\");\n```", "```js\ninterface Person {\n age: number;\n birthCountry: string;\n naturalizationDate: Date;\n}\n\nconst OUR_COUNTRY = \"Ireland\";\nconst wasBornInCountry = (person: Person) => person.birthCountry === OUR_COUNTRY;\nconst wasNaturalized = (person: Person) => Boolean(person.naturalizationDate);\nconst isOver18 = (person: Person) => person.age >= 18;\nconst isCitizen = (person: Person) => wasBornInCountry(person) || wasNaturalized(person);\nconst isEligibleToVote = (person: Person) => isOver18(person) && isCitizen(person);\n\nisEligibleToVote({\n    age: 27,\n    birthCountry: \"Ireland\",\n    naturalizationDate: new Date(),\n});\n```", "```js\nconst either = <T1>(\n funcA: (a: T1) => boolean,\n funcB: (a: T1) => boolean\n) => (arg: T1) => funcA(arg) || funcB(arg);\n\nconst both = <T1>(\n funcA: (a: T1) => boolean,\n funcB: (a: T1) => boolean\n) => (arg: T1) => funcA(arg) && funcB(arg);\n\ninterface Person {\n age: number;\n birthCountry: string;\n naturalizationDate: Date;\n}\n\nconst OUR_COUNTRY = \"Ireland\";\nconst wasBornInCountry = (person: Person) => person.birthCountry === OUR_COUNTRY;\nconst wasNaturalized = (person: Person) => Boolean(person.naturalizationDate);\nconst isOver18 = (person: Person) => person.age >= 18;\n\n// Point-free style\n\nconst isCitizen = either(wasBornInCountry, wasNaturalized);\nconst isEligibleToVote = both(isOver18, isCitizen);\n\nisEligibleToVote({\n age: 27,\n birthCountry: \"Ireland\",\n naturalizationDate: new Date(),\n});\n```", "```js\nconst isCitizen = (person: Person) => wasBornInCountry(person) || wasNaturalized(person);\n```", "```js\nconst isCitizen = either(wasBornInCountry, wasNaturalized);\n```", "```js\nconst factorial = (n: number): number => (n === 0) ? 1 : (n * factorial(n - 1));\n```", "```js\nfactorial(5); // 120\n```", "```js\nconst enum ShapeKind {\n    circle = \"circle\",\n    square = \"square\",\n    rectangle = \"rectangle\",\n}\n\ntype Circle = { kind: ShapeKind.circle, radius: number };\ntype Square = { kind: ShapeKind.square, size: number };\ntype Rectangle = { kind: ShapeKind.rectangle, w: number, h: number };\ntype Shape = Circle | Square | Rectangle;\n```", "```js\nfunction area(shape: Shape) {\n    switch(shape.kind) {\n        case ShapeKind.circle:\n            return shape.radius ** 2;\n        case ShapeKind.square:\n            return shape.size ** 2;\n        case ShapeKind.rectangle:\n            return shape.w * shape.h;\n        default:\n            throw new Error(\"Invalid shape!\"); \n    }\n}\n```"]