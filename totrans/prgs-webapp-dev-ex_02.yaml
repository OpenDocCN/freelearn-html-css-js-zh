- en: Creating a Home Screen Experience with a Web Manifest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Progressive web apps make a website feel like a native app. For a business
    stakeholder, this gives them the opportunity to use a free app store to engage
    customers. For real users, it means that the sites they routinely visit can be
    installed without any friction. Either way, it is a marketing opportunity to increase
    engagement by delivering a better user experience and an natural way to place
    their brand''s icon in the customer''s most important location: their homescreen.'
  prefs: []
  type: TYPE_NORMAL
- en: Each platform (operating system and browser) implements a homescreen and how
    the application is launched in their own way, but most involve some sort of bookmarking
    process and opening experience driven by the web manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: Chrome for Android places installed PWAs in the application shelf and allows
    PWAs to be managed like a native app in the device settings. Microsoft leverages
    the Windows Store and is formulating a free store installation process for future
    releases. Apple is still figuring out how they will implement these experiences,
    but they are building on their legacy experiences.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter goes over how to create a web manifest file to describe your application
    to the platform and how you can programmatically prompt the user to add a PWA
    to their homescreen. You'll see me refer to the process of add to homescreen throughout
    this chapter, but it is only a name that refers to more. The term add to homescreen
    has sort of grown to be the de facto way of describing how PWAs are installed
    on the user's device.
  prefs: []
  type: TYPE_NORMAL
- en: The reality is more diverse as there is no official common specification for
    this process. On Android, you add application icons to the homescreen, and since
    this is where PWAs first saw adoption, this is how the term originated. Today,
    each browser and platform handles this process differently. Even unique browsers
    on Android vary from what Chrome has been practicing. During the writing of this
    chapter, Microsoft Edge required you go through the Windows Store to install progressive
    web apps, but even that is in flux.
  prefs: []
  type: TYPE_NORMAL
- en: As this chapter progresses, you will see how this concept applies to different
    browsers and platforms, and learn how to describe your PWA to the platforms using
    a web manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The web manifest file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the add to homescreen process works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use legacy features to *Polyfil* the add to homescreen experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why add to homescreen is important
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reengagement is a key advantage that native applications have enjoyed over websites.
    The presence of their icon on the user's homescreen and app shelves provides quick,
    visual access to the brand's experience. It's subtle, but that icon is a constant
    visual reminder of the customer's relationship to the brand.
  prefs: []
  type: TYPE_NORMAL
- en: Browsers have provided a built-in mechanism for us to bookmark websites using
    favorites for years now, but these lists have become cluttered messes we often
    forget about. We have also been able to add bookmarks to the desktop, start menu,
    and even the windows task bar, but the process is manual, and most consumers do
    not know that it exists.
  prefs: []
  type: TYPE_NORMAL
- en: More modern browsers have started logging pages that you frequently visit and
    providing bookmarks to these common destinations when you open a new tab. This
    is an example of making the user more productive without asking them to *bookmark*
    a URL.
  prefs: []
  type: TYPE_NORMAL
- en: These bookmarks do not offer the same native experience that the progressive
    web app's add to homescreen experience does. Chrome on Android is leading the
    way with the most advanced PWA installation benefits by making all installed PWAs
    a WebAPK.
  prefs: []
  type: TYPE_NORMAL
- en: WebAPKs are a technical way to say that Chrome on Android will silently upgrade
    progressive web apps to an almost native app by packaging them as an APK (Android
    executable) during the installation process. They are still limited because they
    do not have access to Android-specific APIs like native Android apps do.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you submit your PWA to the Windows Store and the customer installs
    it from the Windows Store, your progressive web app is a native app. It will enjoy
    all the benefits and capabilities as native apps do on Windows, including file
    system access and the ability to integrate with features like Cortana.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ability to earn a place on a customer''s home screen is important. Both
    native and web applications have mechanisms, but both have friction that reduces
    success and increase costs. There are 6-8 steps which you must use to coax a potential
    customer to install your app on mobile platforms. In 2012, *Gabor Cselle* estimated
    that each of these steps eliminates 20% of the mobile user''s interested in installing
    your app ([https://blog.gaborcselle.com/2012/10/every-step-costs-you-20-of-users.html](https://blog.gaborcselle.com/2012/10/every-step-costs-you-20-of-users.html)).
    This means for a 6-step installation process that only 26% of users remain, as
    illustrated in the following diagram. That number falls to less than 17% if there
    are 8 steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00011.gif)'
  prefs: []
  type: TYPE_IMG
- en: Of course, a user only starts the app installation process if they know how
    to/can find you in the app store. This means that your company must invest time
    and money driving traffic and brand awareness. Recent research reveals that this
    would cost between $8-14 on iOS and slightly less on Android.
  prefs: []
  type: TYPE_NORMAL
- en: Yet, for a few pennies paid per click, Facebook, **pay-per-click** (**PPC**),
    or banner ad campaigns can drive the same engagement to a website. Even better,
    if your page has a good, organic SEO profile, you can drive volumes of targeted
    traffic for free! However, earning a place on the customer's homescreen is not
    as easy. That's because it is not an obvious process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rewinding to the original iPhone launch, third-party apps were not available
    till 6 months later. At WWDC, Steve Jobs announced the third-party app solution HTML5
    + AJAX ([https://www.apple.com/newsroom/2007/06/11iPhone-to-Support-Third-Party-Web-2-0-Applications/](https://www.apple.com/newsroom/2007/06/11iPhone-to-Support-Third-Party-Web-2-0-Applications/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Developers can create Web 2.0 applications which look and behave just like
    the applications built into iPhone, and which can seamlessly access iPhone''s
    services, including making a phone call, sending an email, and displaying a location
    in Google Maps. Third-party applications created using Web 2.0 standards can extend
    iPhone''s capabilities without compromising its reliability or security."*'
  prefs: []
  type: TYPE_NORMAL
- en: With that proclamation, Apple provided a simple, and sort of hacky, way to drive
    the homescreen experience on iOS. The non-standard techniques required adding
    iOS Safari specific META tags to each page and having appropriate sized homescreen
    images.
  prefs: []
  type: TYPE_NORMAL
- en: Making your PWA iOS web app capable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Apple introduced iOS, the original app recommendation was to use HTML5,
    CSS3, and JavaScript to create rich client-side user experiences. Apple has not
    removed web app support and has enhanced some capabilities over time. The iOS
    web app experience is driven by custom metadata that's added to a web page's `HEAD`.
  prefs: []
  type: TYPE_NORMAL
- en: Much of the Apple meta data has served as a model for the modern web manifest
    specification. Before the web manifest specification was created, Chrome on Android
    integrated support for the Apple meta data to drive a similar experience.
  prefs: []
  type: TYPE_NORMAL
- en: The web app experience on iOS is triggered when your website contains Apple-specific
    META tags, corresponding icons, and when the user has added your site to their
    homescreen.
  prefs: []
  type: TYPE_NORMAL
- en: The first piece you need is a png file as the default homescreen icon. The file
    should be named `apple-touch-icon.png` and it should be present in your site's
    root folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Individual pages can have a unique icon with a `link` reference in the `HEAD`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It is even better to specify icons for different screen sizes and densities.
    The platform will determine which icon works best for the device. If no icon is
    specified, the root folder is searched for icons with the `apple-touch-icon` prefix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When the required meta data is supplied, you must then coax the user to initiate
    the iOS add to homescreen process. This starts when they press Safari''s share
    icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00012.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'This triggers the Safari share menu, which contains more than just options
    to share the URL: it contains icons to bookmarks and saves the site to the home
    screen, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Similar to the home screen icon, the Launch screen image can be specified.
    Think of this as a splash screen. This is done with a LINK element and a reference
    to the startup image. If no image is specified, a screenshot of the last time
    the app was launched is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The application title is set with another META tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is similar to the name and short name manifest properties I''ll discuss
    in detail in the the *web manifest* section. If no META value is supplied, the
    `title` element value is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the output in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you should control how your web app appears to the user. iOS allows you
    to either launch the app in the browser or as a standalone mode. Standalone mode
    removes the browser, but retains the iOS status bar across the top of the screen.
    Check the following code for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When in standalone mode, there is no address bar, so you may need to adjust
    your UI to allow customers to copy URLs and go back to previous screens. The navigation
    concerns are the same that native application designers negotiate, and every application
    has different requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The status bar can also be styled with the `apple-mobile-web-app-bar-style`
    value. This value is only used when your app is launched in standalone mode. You
    can change the default grey to either black or translucent black.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, you cannot theme the color to match your application theme or
    hide it altogether:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you have done everything according to Apple's specifications, when a user
    launches the 2048 game, it should consume the entire screen, as demonstrated in
    the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Apple may have paved the way for a more intimate relationship with web brands
    on iOS, but their approach was never a common standard. This has changed in the
    era of progressive web apps as the W3C standardized, which is a meta data format
    to describe your web app to the platform.
  prefs: []
  type: TYPE_NORMAL
- en: The web manifest specification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Web Manifest describes the progressive web applications with meta data and
    JSON formatting. Browsers parse the manifest file to create the add to homescreen
    icon and launch the experiences.
  prefs: []
  type: TYPE_NORMAL
- en: Now, instead of polluting each page's `HEAD` with extra meta data, the browser
    can load an external file containing standard properties and values formatted
    using JSON.
  prefs: []
  type: TYPE_NORMAL
- en: The web manifest specification ([https://w3c.github.io/manifest/](https://w3c.github.io/manifest/))
    provides some guidelines for browsers to establish an add to homescreen experience.
    How browsers implement the experience is left open ended, making an avenue for
    creativeness. I will cover this topic in more detail after reviewing the manifest
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Referencing the web manifest file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The web manifest file must be referenced in the document''s HEAD, as mentioned
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Manifests should be served using the `application/manifest+json` MIME type.
    This is an important setting because it is often overlooked.
  prefs: []
  type: TYPE_NORMAL
- en: You should research how to define or add MIME types in your web server of choice.
  prefs: []
  type: TYPE_NORMAL
- en: Many servers block requests to files based on their type by default. This often
    leads to manifest files returning 404 or 403 type status codes. I see similar
    issues raised when PDF documents need to be served. You may need to coordinate
    with your network administrators or devops team to make sure that your servers
    are properly configured.
  prefs: []
  type: TYPE_NORMAL
- en: Do not cache the web manifest file using your service worker. You may not be
    able to update the file without updating your service worker. They should remain
    decoupled.
  prefs: []
  type: TYPE_NORMAL
- en: Web manifest properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Owning your application's appearance is vital to ensuring the best user experience.
    Every application has unique use cases, eliminating the idea that one size fits
    all for progressive web applications. While most applications will want to copy
    a native application full screen experience, some will want to maintain a visible
    address bar. A standardized manifest file provides brand owners a communication
    channel with the browser to deliver the best branded experience.
  prefs: []
  type: TYPE_NORMAL
- en: The manifest should contain a series of properties, including `name`, `short_name`,
    `description`, `icons`, `orientation`, colors, and a default page. These are used
    for the homescreen and launch experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'A minimal list of manifest properties is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`short_name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icons`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`orientation`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme_color`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`background_color`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start_url`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are additional official properties which you can specify within the manifest,
    but their use cases are limited. I would also point out that because the document
    uses JSON, a mutable data structure notation, it is extensible, and some browsers
    are experimenting with proprietary properties. Don't worry if you are using a
    non-standard property – you won't break other browsers because they just ignore
    those values.
  prefs: []
  type: TYPE_NORMAL
- en: There are two name properties; `name` and `short_name`. The `short_name` is
    used with the homescreen icon and other places where spaced is constrained. Where
    space allows, the `name` property is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the first four properties look like in the 2048 app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `start_url` defines the initial URL that's loaded when the homescreen icon
    is selected. This eliminates the scenario where the user adds the PWA to the homescreen
    from a deep link, like a news article. In the past, the icon would be a bookmark
    to that article, not the home page.
  prefs: []
  type: TYPE_NORMAL
- en: The `start_url` can be any URL within the application's scope. It does not need
    to be the public home page; it can be a special PWA home page. You can also use
    QueryString values to drive additional tracking and dynamic behavior from the
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the `icons` property is an array of `icon` objects defining the URL to
    an icon, the MIME type, and dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: While different image types are supported, I recommend using .png as Chrome
    is looking for at least one `.png` of 144 x 144 dimensions. You should include
    at least four icons, one being at least 144 x 144, but 192 x 192 is better. In
    [Chapter 10](part0222.html#6JMSS0-f12cdcca08b54960b3d271452dc7667d), *Service
    Worker Tools*, I'll show you how to use [https://www.pwabuilder.com/](https://www.pwabuilder.com/) to
    help you automate the process of creating a full set of images.
  prefs: []
  type: TYPE_NORMAL
- en: My rule of thumb is to include a dozen or more icon variations to account for
    differences in potential platform requirements and opportunities. Windows Live
    Tiles can be 600 pixels wide and can be scaled down to less than 70 pixels wide.
  prefs: []
  type: TYPE_NORMAL
- en: It is also a good idea to use some art direction when creating icons. Some logos
    do not work well in smaller situations. If you add your icon to the homescreen
    and find it difficult to locate, chances are your customers will too.
  prefs: []
  type: TYPE_NORMAL
- en: A splash screen image is drawn from the icons array. Chrome chooses the image
    that is closest to 128dp for the device. The title is simply pulled from the name
    member. Specify the background color using the appropriately named `background_color`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows how the Flipkart.com site''s colors and logo icon
    are used to create a brief splash as the web app is loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Reference your PWAs icons as URLs using an array. Each item in the array is
    an object that describes the icon. Include the src URL, the sizes property, and
    MIME type. I recommend using .png files since Chrome currently requires this format.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the launch style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The manifest has properties which are used by the platform to know how to launch
    the application. The `display` property allows you to control how the Chrome browser
    is rendered. The default value is `browser`, which launches the PWA in a browser,
    with Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: The `minimal-ui` option launches the PWA as an application, but with a minimal
    set of navigation UI.
  prefs: []
  type: TYPE_NORMAL
- en: '`standalone` launches the PWA as a full screen application. The application
    takes up most of the screen, but some browser elements, like the status bar, may
    be rendered. Check the following code to understand the properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`fullscreen` mode launches the application in full screen and application mode
    without any browser elements. To the end user, it feels like they have opened
    a native app.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The values currently supported for the display are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fullscreen`: Launches the application in full screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`standalone`: Similar to fullscreen, but may have a system UI visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minimal-ui`: Adds some minimal browser navigation UI components to the standalone
    view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`browser`: Opens the PWA as a regular web page in the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`orientation`: This property defines what angle the application renders. The
    primary choices are landscape and portrait. The values should be self-explanatory.
    No, you cannot render your app at a 45 degree tilt!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The full set of orientation options are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`any`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`natural`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`` `landscape` ``'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`` `portrait` ``'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`portrait-primary`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`portrait-secondary`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`landscape-primary`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`landscape-secondary`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `theme_color` and `background_color` are used to represent the app and
    provide the default background color. The difference between these two colors
    is in how they are applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The background color refers the default background color of the `BODY` elements.
    This is typically set in the site's CSS. If not, it defaults back to the browser's
    default. Today, the de facto background color is white, but in the early days,
    it was grey.
  prefs: []
  type: TYPE_NORMAL
- en: The `theme_color` defines what color the operating system uses to visualize
    the application. This includes the task switching experience. Each platform offers
    different user experiences related to how apps are presented, so application of
    the theme color will vary.
  prefs: []
  type: TYPE_NORMAL
- en: If your application uses a language that is right to left, you can specify that
    using the `dir` property. The direction is then applied to the `name`, `short_name`,
    and `description` fields.
  prefs: []
  type: TYPE_NORMAL
- en: The `lang` property relates to `dir` because it designates what language the
    site uses. It is also applied to the text properties. The value should be a standard
    language tag ([https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang))
    consisting of a 2 or 3 character code followed by an optional subtag, for example,
    `en-US` or `en-GB`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you happen to have a native app available that provides functionality not
    available in your PWA, you can indicate its availability using the `prefer_related_applications`
    field and setting it as either true or false. Use this in conjunction with the
    `related_applications` value to hint at how to install the native app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Chrome recently added support for the manifest scope property, adding more control
    over how a PWA and the pages it links to are rendered. I will review how Chrome
    specifically uses this property within the concept of the WebAPK or *improved
    add to homescreen experience* section later.
  prefs: []
  type: TYPE_NORMAL
- en: The `scope` property defines the web application's context or range of URLs
    that are considered to be part of the progressive web application. Platforms can
    use this as they see fit, but the consensus is that if the user navigates within
    the scope, the browser will render PWA according to the manifest's `display` property.
    Any navigation outside of this scope results in the page being rendered with the
    full Chrome browser.
  prefs: []
  type: TYPE_NORMAL
- en: Apple Safari web manifest support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since Apple released the iOS 11.3 and Safari 13 updates, basic support for
    the web manifest specification was included. There are some limitations to the
    current usage and support of the web manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: The home screen icon is still referenced from the `apple-touch-icon`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transparent icons are not supported
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No 3D touch menu support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No splash screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can't lock orientation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display `fullscreen` and `minimal-ui` not supported properly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple still has work left so that they fully support using the web manifest,
    but it is a start. I believe that over the coming months we should see support
    being improved. One thing browser vendors struggle with is turning the ship to
    support modern ways of providing functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating from a 10-year-old way of providing user experience like touch icons
    and mobile web app capable features to a different mechanism is tough. If they
    do it too fast, they can and will break many sites, which is something all browser
    vendors fear. So, expect the transition to be gradual.
  prefs: []
  type: TYPE_NORMAL
- en: I would also like to point out that the PWA support, especially relating to
    service workers, is not yet supported in webviews used by many native apps. This
    also means that any hybrid applications will not have access to these features
    as a PWA, including the service worker.
  prefs: []
  type: TYPE_NORMAL
- en: Pseudo browsers like Chrome, Edge, and FireFox on iOS also do not support any
    progressive web app functionality on iOS. These browsers use the webview to render
    pages and not their own engines. So, for now, they are also limited.
  prefs: []
  type: TYPE_NORMAL
- en: The positive news is that Safari supports all major browsers on all major platforms,
    and nows support basic web manifest consumption.
  prefs: []
  type: TYPE_NORMAL
- en: Validating web manifest files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The web manifest is a simple JSON document, but it's easy to make typos or forget
    things. If your site is not properly registering the manifest file, you will need
    to troubleshoot the issue. Fortunately, there are a few resources to help you
    validate your file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Google hosts a simple online validator ([https://manifest-validator.appspot.com](https://manifest-validator.appspot.com))
    where you can enter either a URL or just paste the manifest code into the page.
    It will parse your manifest and let you know if there is an issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The nodejs Web Manifest Validator ([https://github.com/san650/web-app-manifest-validator](https://github.com/san650/web-app-manifest-validator))
    is a module you can include in your automated testing workflow to validate a manifest
    file. It is a couple of years old, so you may need to fork the project and update
    it if you are using newer manifest features. Remember that the manifest specification
    is not final and can and will change over time.
  prefs: []
  type: TYPE_NORMAL
- en: These are not the only tools. There are a few other node modules available as
    well as Lighthouse and Sonar. I will cover those tools in [Chapter 10](part0222.html#6JMSS0-f12cdcca08b54960b3d271452dc7667d),
    *Service Worker Tools*, along with PWA Builder, which can generate your manifest.
  prefs: []
  type: TYPE_NORMAL
- en: The Chrome improved add to homescreen experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some time in 2017, the Chrome team announced changes to the PWA installation
    experience called the improved add to homescreen experience. At the time, it was
    not as much about the automatic prompt, but that has been part of the change.
    It has more to do with how PWAs behave on Android and that it is more like a native
    application.
  prefs: []
  type: TYPE_NORMAL
- en: These changes were multifaceted and start with the web manifest scope property.
    This property is relatively new but allows the browser to know how to limit PWA
    functionality on an origin (domain name).
  prefs: []
  type: TYPE_NORMAL
- en: When you set the scope value to `/`, you are telling the platform that the progressive
    web application's capabilities apply to all paths within the origin. This may
    not always be the case, especially on larger sites and enterprise applications.
    Often, these sites are segmented into different applications.
  prefs: []
  type: TYPE_NORMAL
- en: If you changed the scope to say `/hr/`, then only URLs under the `/hr/` folder
    would be part of the PWA's scope. This means that those URLs will be opened according
    to the web manifest file configuration. URLs not within the `/hr/` folder will
    open normally in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: When a PWA is installed using Chrome on Android, it automatically creates an
    unsigned WebAPK, which makes the PWA a native app. Within the WebAPK, an Android
    manifest is created, which includes intent filters.
  prefs: []
  type: TYPE_NORMAL
- en: Intent filters tell Android how URLs within the origin should be opened. For
    PWAs, this means that the app is launched according to the manifest configuration
    or directly in the browser if outside of its scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what these intent filters look like in the WebAPK:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `pathPrefix` value changes to match the web manifest scope value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: These changes have not stopped with Android as recent updates have also been
    applied to Chrome OS and are in the near future for desktop Chrome. Google is
    in the process of replacing the Chrome OS apps with progressive web apps, giving
    similar capabilities to the previous web apps that are available on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Chrome is also bringing more of the add to homescreen experience to desktops
    as well. However, this will vary by operating system as there are different user
    expectations on each platform.
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that if you make good progressive web applications, you will
    just benefit from these changes.
  prefs: []
  type: TYPE_NORMAL
- en: The add to homescreen experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The emergence of an automatic prompt to a visitor to add your progressive web
    app to their homescreen is exciting. In the past, Chrome would eventually display
    a prompt to install a progressive web app, but that has changed recently. The
    rules determining when the prompt triggers are still valid, but now only trigger
    the `beforeinstallprompt` event.
  prefs: []
  type: TYPE_NORMAL
- en: How the user prompt triggers is where each browser can choose a different path.
    Some of the requirements are defined in the web manifest specification, but the
    experience is left open ended for browsers to implement as they see fit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right now, Chrome has the most mature process. They established the following
    criteria to automatically trigger the add to homescreen experience:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Has a web app manifest file with:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `short_name` (used on the homescreen)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A name (used in the banner)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A 144 x 144 .png icon (the icon declarations must include a mime type of image/png)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Astart_url` that loads'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Has a service worker registered on your site:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has a fetch event handler
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Fetch event handler cannot be a noop function, it must do something
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Is served over HTTPS (a requirement for using service worker)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Is visited at least twice, with at least five minutes between visits
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: FireFox, Samsung, and Opera have similar requirements. FireFox will trigger
    the experience on Android, but not the desktop. You can allow the experience on
    desktop, but it is hidden behind a flag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These browsers typically provide a simple visual queue in the browser''s address
    bar. Here is how FireFox on Android displays the indicator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Notice how it uses a house with a `+` to indicate that the site can be installed.
    To its right, you will also see an Android logo silhouette. The little Android
    head indicates that an app is available. In this case, it is detecting the PWA
    I installed from Chrome, which created a WebAPK.
  prefs: []
  type: TYPE_NORMAL
- en: The Chrome add to homescreen experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The clear leader in the progressive web application experience is Chrome. They
    should be, since they created the concept. They have also had time to experiment
    with the concept to see what works, what doesn't, and what consumers and developers
    expect.
  prefs: []
  type: TYPE_NORMAL
- en: This has led them to continually improve the process to the point that Chrome
    on Android creates a WebAPK when the app is installed, elevating the app to a
    similar level as native apps. Recently, they extended this functionality to Windows
    and ChromeOS, with plans to implement it on macOS soon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can see some recently installed progressive web apps in my Windows
    Start menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So, what exactly is a **WebAPK** and the **enhanced add to homescreen experience**?
  prefs: []
  type: TYPE_NORMAL
- en: 'I have already explained this: it is where the Chrome packages progressive
    web apps in an apk package is called a **WebAPK**. If you are not familiar with
    Android native application development, all of the assets are packaged in a single
    file called an apk.'
  prefs: []
  type: TYPE_NORMAL
- en: As an oversimplification, this is just a zip file containing the application's
    assets. Windows does something similar with the appx format. What Chrome does
    when it creates a WebAPK is akin to using Cordova to generate a native application
    from a website.
  prefs: []
  type: TYPE_NORMAL
- en: The Chrome team instead decided to create a duplicate channel to maintain and
    give PWAs similar control, as native apps implementing this hybrid approach was
    most efficient. They first shipped this capability in Chrome 57\. The big difference
    between a native Android application and an installed progressive web app is no
    access to platform APIs.
  prefs: []
  type: TYPE_NORMAL
- en: The application appears like any Play Store installed application on the device.
    The icon can be placed on the homescreen, is visible in the app shelf, and can
    be managed through the Android platform settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how the 2048 PWA is surfaced in the Android application management
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As Chrome implements this functionality on other platforms, you may or may not
    find the same level of control. For example, you still can't manage a Chrome installed
    PWA from the control panel on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: The application uses the same storage settings as the web page. Clearing storage
    for the domain will also clear the storage for the installed PWA. This means that
    cookies and cached content will be removed.
  prefs: []
  type: TYPE_NORMAL
- en: Another benefit is when the web manifest file is updated to reference a new
    icon or change the name value. This will be updated on the homescreen icon.
  prefs: []
  type: TYPE_NORMAL
- en: Google is not hoarding this functionality to themselves. They have provided
    documentation and reference for other user agents (browsers) to implement similar
    functionality ([https://chromium.googlesource.com/chromium/src/+/master/chrome/android/webapk](https://chromium.googlesource.com/chromium/src/+/master/chrome/android/webapk)).
    This means that we could see FireFox, Samsung Internet, UC Browser, and so on
    implement similar functionality soon.
  prefs: []
  type: TYPE_NORMAL
- en: Your add to homescreen responsibilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At Google I/O 2018, it was announced that Chrome on Android will no longer include
    an automated add to homescreen prompt. Instead, it is your responsibility to create
    the user experience. Ultimately, the Chrome team decided to fall more in line
    with how other browser vendors are crafting their experiences.
  prefs: []
  type: TYPE_NORMAL
- en: The manifest specification takes time to define skeleton rules and minimal requirements
    for the add to homescreen experience. Rather than limiting all browsers to the
    same rules, the specification defines *instalability signals* that can be used
    as part of the add to homescreen prompt algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: The prompt sequence should honor a modicum of privacy considerations and wait
    for the document to be fully loaded before issuing a prompt. The process should
    also allow the user to inspect the application name, icon, start URL, origin,
    and other properties. It is also recommended that the end user be allowed to modify
    some of the values. For example, changing the application name on their homescreen.
  prefs: []
  type: TYPE_NORMAL
- en: This is where the `beforeinstallprompt` event comes into play. This is your
    hook to a proper signal to prompt the user to install your progressive web app.
  prefs: []
  type: TYPE_NORMAL
- en: This event triggers when heuristics are met to trigger an add to homescreen
    experience. But instead of a native or built-in prompt from Chrome, you are responsible
    to prompt the user at an appropriate time after this event triggers.
  prefs: []
  type: TYPE_NORMAL
- en: Why did they change this? I am not 100% certain, though personally I thought
    it was a good idea to help promote web app installs. But this is somewhat intrusive
    and does not fall in line with other best practices. For example, when we look
    at enabling push notifications later in this book, you should not automatically
    pester the visitor to enable notifications.
  prefs: []
  type: TYPE_NORMAL
- en: There should be a little courtship before asking for the next level of engagement.
    I hate to use this analogy, but it has become canonical at this point; you can't
    just walk up to every pretty girl and ask them to marry you. It is a much longer
    process, where mutual trust must be earned.
  prefs: []
  type: TYPE_NORMAL
- en: Asking a visitor to add your icon to their homescreen is not exactly the same
    as marriage, but is more like asking them to go steady or be exclusively dating.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the `beforeinstallprompt` event, add an event listener callback in your
    site''s JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: There are a few moving parts I need to review. First is that the event object
    `(e)` has two unique properties, platforms, and `userChoice`. Platforms are arrays
    indicating if the user can install a native app or a progressive web app. The
    `userChoice` property resolves a promise indicating if the user chose to install
    the app or not.
  prefs: []
  type: TYPE_NORMAL
- en: The other piece used in this code is the `deferredPrompt` variable. This is
    declared outside the event handler, so it can be used at a later time, in this
    case within the `showAddToHomeScreen` logic.
  prefs: []
  type: TYPE_NORMAL
- en: The `showAddToHomeScreen` method is called as soon as the event fires in this
    example, but a better practice is to defer the action to an appropriate time.
    Think about a user in the middle of an important application task. A sudden prompt
    to install the app would be a confusing distraction. It would serve you and the
    user better if you deferred the prompt till the action completes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `showAddToHomeScreen` method displays a special overlay, asking the user
    to install the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'I added a simple overlay to the 2048 application that slides up when made visible.
    Check out the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the prompt is accepted, the user is presented with the native add to homescreen
    prompt, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, the `addToHomeScreen` method utilizes the `deferredPrompt` variable
    that we saved a reference to in the `beforeinstallprompt` event handler. It calls
    the prompt method, which displays the built-in dialog that''s pictured in the
    preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The method then uses the `userChoice` method to perform tasks based on the choice.
    Here, I am just logging the choice to the console. You could persist a token indicating
    the state, or cascade additional logic to perform additional tasks.
  prefs: []
  type: TYPE_NORMAL
- en: I think this is a good opportunity to initiate a thank you or onboarding experience.
  prefs: []
  type: TYPE_NORMAL
- en: The 2048 application is a very simple add to homescreen experience. You can
    expand this functionality to educate the user or tell them the benefits of adding
    your app to their homescreen. Flipkart has a neat educational sequence that explains
    how to install the app and why they should. It is a good experience to model and
    one of the reasons why they have been successful in using progressive web apps.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling the homescreen prompt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `beforeinstallprompt` event can also be used to suppress Chrome''s automatic
    prompt. This time, like breaking the default form submission, call the `preventDefault`
    function and return false:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This will block the behavior in Chrome. Right now, I don't know how to suppress
    the prompt on other platforms as they do not support the `beforeinstallprompt`
    event yet.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking homescreen installs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the homescreen install prompt displays, the user can choose to add the
    PWA to their homescreen, or ignore the prompt. Businesses should track and measure
    everything possible to make better decisions. Knowing how many homescreen installs
    there have been and what rate customers install their PWA provides insight into
    their marketing and technology investments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chrome supports the `beforeinstallprompt` event, which can be used to track
    this activity. You can add a handler to this event and log each user''s choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You can POST the user's choice to your analytics system. This could be a custom
    API to your internal analytics or even tied to your third-party service, like
    Google Analytics.
  prefs: []
  type: TYPE_NORMAL
- en: The `beforeinstallprompt` is part of the web manifest specification, but at
    the time of writing this book, it is only supported by Chrome. Hopefully, other
    browsers will add support soon.
  prefs: []
  type: TYPE_NORMAL
- en: Browsers that don't support `beforeinstallprompt` can also provide feedback.
    The web manifest's `start_url` can be set either to a special start URL, or a
    custom querystring value appended to the default URL. You will need to add logic
    to your log analyzer to track this behavior. Besides just knowing how many homescreen
    installs you have, you can also track how many times users have launched your
    PWA as opposed to those who have not installed your PWA.
  prefs: []
  type: TYPE_NORMAL
- en: Polyfiling the homescreen experience on iOS and other legacy browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common question developers and business owners ask is how to enable progressive
    web application features on iOS and older browsers like Internet Explorer. While
    all features cannot be hacked in these browsers, much of it can.
  prefs: []
  type: TYPE_NORMAL
- en: When the iPhone was released, the initial application model was the web. They
    created an advanced experience for web apps that included the add to homescreen
    experience. Unfortunately, they did not make an automatic prompt experience. Who
    knows how advanced this might be today if developers did not cry out for the native
    app model.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we can do is still leverage this capability and use Matteo Spinelli''s
    add to homescreen library ([http://cubiq.org/add-to-home-screen](http://cubiq.org/add-to-home-screen))
    in combination with Apple''s guidelines. Doing so allows your web apps to launch
    from user''s home screens, with or without Chrome. This is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It is important that you avoid duplicating homescreen prompts by not loading
    the Add to Home Screen library unless needed. The simplest way I have found to
    determine if the polyfil is needed is by using feature detecting service worker
    support. I chose this since browsers supporting service workers have some sort
    of add to homescreen experience. This may or may not remain true in the future,
    so be ready to change criteria if things change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Without going into details, I like to dynamically load JavaScript references
    when a page is loaded. This process involves a series of feature detections to
    polyfil various requirements like Promises and the Fetch API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can read more about dynamically loading scripts in *Jake Archibald's article **(*[https://www.html5rocks.com/en/tutorials/speed/script-loading](https://www.html5rocks.com/en/tutorials/speed/script-loading)*)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also need to dynamically add the add to homescreen stylesheet. This
    time, add a feature detection script to your document''s `HEAD`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Users have been able to install web apps like this since the iPhone was released,
    but the process is manual and largely unknown by end users and developers alike.
    The lack of an automated prompt has been a key missing component of this feature.
    The experience it creates seems to be a model that the Chrome team and other platforms
    modeled to surface the progressive web application homescreen prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Matteo's library only prompts the user and starts them down the manual process.
    but there are still a few extra steps that aren't intuitive that users must complete.
    The new native add to homescreen process has a pseudo automatic pipeline you can
    integrate. I think the add to homescreen library may serve as a good reference
    for designing your experience, so it is worth your time to look at it.
  prefs: []
  type: TYPE_NORMAL
- en: Should you polyfil response caching?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Request caching can also be polyfiled using IndexedDB. However, now that most
    browsers support service workers and caching, I don't think this approach has
    a wise use of resources. Outside of mobile use, Internet Explorer is the main
    browser without service worker support. At the time of writing this book, IE should
    really be used primarily in enterprises when their line of business applications
    have not been upgraded to modern standards.
  prefs: []
  type: TYPE_NORMAL
- en: This means a very small percentage of potential users that may open your PWA
    will do so in a browser without service worker support. When they do, it is pretty
    safe to say that they are most likely on a desktop of some sort with a reliable
    network connection.
  prefs: []
  type: TYPE_NORMAL
- en: Despite developing hundreds of applications using an early implementation of
    client-side asset caching, I have officially deprecated this approach from my
    recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Edge and Internet Explorer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Windows 8 shipped, Microsoft quietly shipped support for what they called
    a **Hosted Web App** (**HWA**). These are websites that reference a valid web
    manifest file and are served via HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: HWAs were an early precursor to progressive web apps. The obvious difference
    is no service worker requirement, which you would expect since the concept of
    a service worker had not be created yet.
  prefs: []
  type: TYPE_NORMAL
- en: To be a HWA, you would create a `.appx` file for your application containing
    the manifest file and a reference to the public URL. Then, you would submit the
    HWA appx to the Windows Store and consumers could install the HWA from the store.
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of being a HWA is that these web apps have full access to all
    the Windows platform APIs, just like any native application. The reason that they
    have this privilege is that once installed, they form the store and are full blown
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: The main difference is that the UI components and business logic are all just
    web pages. This gives you the benefit of also being able to update the application
    immediately, without going through the audit delays that plague all mobile app
    stores.
  prefs: []
  type: TYPE_NORMAL
- en: In many ways, this is a cross between a traditional native app and the WebAPK
    functionality supported by Chrome on Android.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft even created an online tool called Manifoldjs to help with the HWA
    creation and submission process. In recent years, Manifold has been remodeled
    and has a new name, PWA Builder ([https://pwabuilder.com](https://pwabuilder.com)).
  prefs: []
  type: TYPE_NORMAL
- en: Today, PWA Builder takes any public website and provides the resources to convert
    it into a Progressive Web Application and submit it not only to the Windows Store,
    but also compile Cordova apps for the Apple and Google Play stores.
  prefs: []
  type: TYPE_NORMAL
- en: If you are wondering, there are many HWA and PWAs already in the Windows Store.
    Twitter and Pandora are a pair of high profile Windows progressive web apps. In
    fact, Twitter is in the process of deprecating all their native apps to PWA in
    the future.
  prefs: []
  type: TYPE_NORMAL
- en: I will go into more detail about PWA Builder in [Chapter 10](part0222.html#6JMSS0-f12cdcca08b54960b3d271452dc7667d),
    *Service Worker Tools*. Trust me, you will not want to skip this chapter, as PWA
    Builder and the other tools we have mentioned have all become staples of my PWA
    workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Today, Microsoft Edge supports service workers, which means that the concept
    of HWA has evolved into the consumption of progressive web apps. The same process
    applies to store submission and you still have full, native application capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Windows 8 and Internet Explorer also support native Live Tiles for web applications
    pinned to the start screen. When Edge and Windows 10 were released, Live Tile
    support did not make the cut. This does not mean you cannot add websites to the
    start menu, though.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Microsoft Edge, the user can open the menu via the `...` icon in the top
    right corner. This exposes a menu of many options, one being pin this page to
    Start. Another option is to add the page to the taskbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you may recall, Internet Explorer supported a rich pinned site feature in
    the Windows 7 era. Recently, support for the pinned sites has returned. Like iOS,
    you can customize this experience via `meta` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Pinned sites still work from Internet Explorer, but as enterprises upgrade to
    Windows 10, the use of Internet Explorer as a primary browser is quickly fading.
    This does not mean you should skip the pinned site meta data. I still include
    it, for now.
  prefs: []
  type: TYPE_NORMAL
- en: I don't want to put these solutions in a negative space because they are both
    good first attempts to advance the web platform to give users a better user experience.
    Maybe you can see how these attempts have served as a reference for the modern
    web manifest specification.
  prefs: []
  type: TYPE_NORMAL
- en: Now that Microsoft Edge has shipped service workers, the team is busy working
    on what their add to start menu (my term, not theirs) will look like. They provided
    some early protypes at the 2018 Build conference, but at the time of writing this
    book, there is nothing definitive.
  prefs: []
  type: TYPE_NORMAL
- en: My best guess is that some time in the late summer or early fall we may see
    something more concrete from Redmond at their annual Edge Developer Summit.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits await without Polyfils
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even if you don't polyfil the add to homescreen behavior, your web application
    will see user engagement gains on iOS and other non-PWA platforms. Many companies
    are publicly sharing their improvements in various progressive web application
    case studies.
  prefs: []
  type: TYPE_NORMAL
- en: Wego, an online air travel booking service, reported a 50% increase in conversions
    and 35% longer sessions on iOS. Mynet increased page views by 15%, and a 23% lower
    bounce rate on iOS. Lancôme increased iOS sessions by 53%. These are just a small
    sampling of positive progressive web application case studies.
  prefs: []
  type: TYPE_NORMAL
- en: These companies are reaping the rewards of PWAs on iOS because, by nature, properly
    architected websites perform better. Plus, creating a progressive web application
    forces you to put the customer first, not the developer. When you do this, you
    create a better user experience, which directly correlates to improved key performance
    indicators.
  prefs: []
  type: TYPE_NORMAL
- en: Following progressive web application guidelines forces you to deliver a user
    first experience that works across all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the add to homescreen experience in Chrome
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The developer experience would not be complete without the ability to test the
    add to homescreen experience. Chrome has added tooling which allows you to see
    how your web manifest file is interpreted and manually trigger the prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch Chrome''s developer tools by using *F12* and select the Application
    tab. There are many choices to help you debug various aspects of a progressive
    web application. Under Application, there is a Manifest choice. This will display
    the properties of your web manifest file, including each icon. This is a quick
    way for you to determine if your manifest is interpreted correctly, as you can
    see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00025.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'There is also a link to manually trigger the Add to Home Screen experience.
    Check out the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00026.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking the link in the developer tools will trigger the Add to homescreen
    prompt. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The best way to test your experience is to deploy your progressive web app to
    the cloud, with HTTPS enabled. Open your site in a PWA supporting browser and
    do your best to adhere to the rules to trigger the add to homescreen prompt.
  prefs: []
  type: TYPE_NORMAL
- en: It is always a best practice to test your site across multiple devices. I recommend
    at least one iPhone, Android, and desktop with multiple browsers. Having these
    real user experiences available gives you confidence that your deployed PWA works
    as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The line between native and progressive web applications is very blurred, thanks
    in part to the web manifest and add to home screen experience. No longer is the
    homescreen reserved to native applications; the web is welcomed by all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Today, most browsers provide a first-class app experience for progressive web
    applications, and while Apple has yet to adopt the progressive web application
    standards, they were the first to make the web into an app experience. It is up
    to developers and businesses to adopt and implement the rich add to homescreen
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Triggering the add to homescreen experience is the first step in levelling up
    your web presence.
  prefs: []
  type: TYPE_NORMAL
- en: Even if the user has not added your PWA to their homescreen, you can still take
    advantage of progressive web app features. However, before we dive into service
    workers, let's take a look at adding SSL to your website.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter covers security or use of HTTPS, which is one of the three
    primary technical requirements so that an app can be a Progressive Web App.
  prefs: []
  type: TYPE_NORMAL
