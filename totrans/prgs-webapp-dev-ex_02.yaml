- en: Creating a Home Screen Experience with a Web Manifest
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用网页清单创建主屏幕体验
- en: 'Progressive web apps make a website feel like a native app. For a business
    stakeholder, this gives them the opportunity to use a free app store to engage
    customers. For real users, it means that the sites they routinely visit can be
    installed without any friction. Either way, it is a marketing opportunity to increase
    engagement by delivering a better user experience and an natural way to place
    their brand''s icon in the customer''s most important location: their homescreen.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 进阶式网页应用让网站感觉就像原生应用一样。对于企业利益相关者来说，这给了他们使用免费应用商店来吸引客户的机会。对于真实用户来说，这意味着他们经常访问的网站可以无缝安装。无论哪种方式，这都是一个通过提供更好的用户体验和自然地将品牌图标放置在用户最重要的位置（即他们的主屏幕）来增加参与度的营销机会。
- en: Each platform (operating system and browser) implements a homescreen and how
    the application is launched in their own way, but most involve some sort of bookmarking
    process and opening experience driven by the web manifest file.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个平台（操作系统和浏览器）都以自己的方式实现主屏幕和应用程序的启动，但大多数都涉及某种形式的书签过程和由网页清单文件驱动的打开体验。
- en: Chrome for Android places installed PWAs in the application shelf and allows
    PWAs to be managed like a native app in the device settings. Microsoft leverages
    the Windows Store and is formulating a free store installation process for future
    releases. Apple is still figuring out how they will implement these experiences,
    but they are building on their legacy experiences.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome for Android将安装的PWA放置在应用架中，并允许在设备设置中将PWA像原生应用一样进行管理。Microsoft利用Windows
    Store，并为未来的版本制定了一个免费商店安装流程。Apple仍在探索他们将如何实现这些体验，但他们正在基于他们的遗留体验进行构建。
- en: This chapter goes over how to create a web manifest file to describe your application
    to the platform and how you can programmatically prompt the user to add a PWA
    to their homescreen. You'll see me refer to the process of add to homescreen throughout
    this chapter, but it is only a name that refers to more. The term add to homescreen
    has sort of grown to be the de facto way of describing how PWAs are installed
    on the user's device.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍如何创建网页清单文件来描述你的应用程序给平台，以及你如何可以通过编程方式提示用户将PWA添加到他们的主屏幕。你将看到我在本章中多次提到添加到主屏幕的过程，但它只是一个指代更多内容的名称。添加到主屏幕这个术语已经逐渐成为描述PWA如何在用户设备上安装的默认方式。
- en: The reality is more diverse as there is no official common specification for
    this process. On Android, you add application icons to the homescreen, and since
    this is where PWAs first saw adoption, this is how the term originated. Today,
    each browser and platform handles this process differently. Even unique browsers
    on Android vary from what Chrome has been practicing. During the writing of this
    chapter, Microsoft Edge required you go through the Windows Store to install progressive
    web apps, but even that is in flux.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，情况更为复杂，因为目前还没有官方的共同规范来定义这个过程。在Android上，你将应用图标添加到主屏幕，由于这是PWA首次被采用的地方，因此术语就是这样产生的。如今，每个浏览器和平台都以不同的方式处理这个过程。即使是Android上的独特浏览器，其做法也与Chrome有所不同。在撰写本章时，Microsoft
    Edge要求你通过Windows Store来安装进阶式网页应用，但即使是这一点也在变化中。
- en: As this chapter progresses, you will see how this concept applies to different
    browsers and platforms, and learn how to describe your PWA to the platforms using
    a web manifest file.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 随着本章的深入，你将看到这一概念如何应用于不同的浏览器和平台，并学习如何使用网页清单文件来向平台描述你的PWA。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The web manifest file
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页清单文件
- en: How the add to homescreen process works
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加到主屏幕的过程是如何工作的
- en: How to use legacy features to *Polyfil* the add to homescreen experience
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用遗留功能来*Polyfil*添加到主屏幕体验
- en: Why add to homescreen is important
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么将应用添加到主屏幕很重要
- en: Reengagement is a key advantage that native applications have enjoyed over websites.
    The presence of their icon on the user's homescreen and app shelves provides quick,
    visual access to the brand's experience. It's subtle, but that icon is a constant
    visual reminder of the customer's relationship to the brand.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 重新参与是原生应用程序相对于网站所享有的关键优势。它们图标出现在用户的主屏幕和应用架上，提供了快速、直观的品牌体验访问。这是微妙的，但那个图标是客户与品牌关系的持续视觉提醒。
- en: Browsers have provided a built-in mechanism for us to bookmark websites using
    favorites for years now, but these lists have become cluttered messes we often
    forget about. We have also been able to add bookmarks to the desktop, start menu,
    and even the windows task bar, but the process is manual, and most consumers do
    not know that it exists.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器已经为我们提供了内置机制，多年来我们可以使用收藏夹来书签网站，但这些列表已经变成了杂乱无章的混乱，我们经常忘记它们。我们还可以将书签添加到桌面、开始菜单，甚至任务栏，但这个过程是手动的，大多数消费者都不知道它的存在。
- en: More modern browsers have started logging pages that you frequently visit and
    providing bookmarks to these common destinations when you open a new tab. This
    is an example of making the user more productive without asking them to *bookmark*
    a URL.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 更现代的浏览器已经开始记录你经常访问的页面，并在你打开新标签页时提供这些常见目的地的书签。这是一个在不要求用户*书签*网址的情况下提高用户生产力的例子。
- en: These bookmarks do not offer the same native experience that the progressive
    web app's add to homescreen experience does. Chrome on Android is leading the
    way with the most advanced PWA installation benefits by making all installed PWAs
    a WebAPK.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些书签并不能提供渐进式网络应用添加到首页体验的相同原生体验。Android上的Chrome通过将所有已安装的PWA作为WebAPK来提供最先进的PWA安装优势，引领了这一领域。
- en: WebAPKs are a technical way to say that Chrome on Android will silently upgrade
    progressive web apps to an almost native app by packaging them as an APK (Android
    executable) during the installation process. They are still limited because they
    do not have access to Android-specific APIs like native Android apps do.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: WebAPKs是一种技术术语，表示Android上的Chrome会在安装过程中将渐进式网络应用打包成APK（Android可执行文件）以实现几乎原生的应用升级。由于它们无法访问像原生Android应用那样的Android特定API，因此它们仍然有限。
- en: However, if you submit your PWA to the Windows Store and the customer installs
    it from the Windows Store, your progressive web app is a native app. It will enjoy
    all the benefits and capabilities as native apps do on Windows, including file
    system access and the ability to integrate with features like Cortana.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你将你的PWA提交到Windows Store，并且客户从Windows Store安装它，那么你的渐进式网络应用就是一个原生应用。它将享受与原生应用在Windows上相同的所有好处和能力，包括文件系统访问和与Cortana等功能的集成能力。
- en: 'The ability to earn a place on a customer''s home screen is important. Both
    native and web applications have mechanisms, but both have friction that reduces
    success and increase costs. There are 6-8 steps which you must use to coax a potential
    customer to install your app on mobile platforms. In 2012, *Gabor Cselle* estimated
    that each of these steps eliminates 20% of the mobile user''s interested in installing
    your app ([https://blog.gaborcselle.com/2012/10/every-step-costs-you-20-of-users.html](https://blog.gaborcselle.com/2012/10/every-step-costs-you-20-of-users.html)).
    This means for a 6-step installation process that only 26% of users remain, as
    illustrated in the following diagram. That number falls to less than 17% if there
    are 8 steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户首页上获得位置的能力很重要。原生和Web应用都有机制，但两者都有摩擦，这降低了成功率并增加了成本。你必须使用6-8个步骤来诱导潜在客户在移动平台上安装你的应用。2012年，*加博尔·塞勒*估计，每个步骤都会消除20%对安装你应用感兴趣的移动用户（[https://blog.gaborcselle.com/2012/10/every-step-costs-you-20-of-users.html](https://blog.gaborcselle.com/2012/10/every-step-costs-you-20-of-users.html)）。这意味着对于6步安装过程，只有26%的用户保留，如下面的图表所示。如果步骤有8步，这个数字将下降到不到17%：
- en: '![](img/00011.gif)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00011.gif)'
- en: Of course, a user only starts the app installation process if they know how
    to/can find you in the app store. This means that your company must invest time
    and money driving traffic and brand awareness. Recent research reveals that this
    would cost between $8-14 on iOS and slightly less on Android.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，用户只有在知道如何在/能够找到你应用商店的情况下才会开始应用安装过程。这意味着你的公司必须投资时间和金钱来驱动流量和品牌知名度。最近的研究表明，这将在iOS上花费8-14美元，在Android上稍微少一些。
- en: Yet, for a few pennies paid per click, Facebook, **pay-per-click** (**PPC**),
    or banner ad campaigns can drive the same engagement to a website. Even better,
    if your page has a good, organic SEO profile, you can drive volumes of targeted
    traffic for free! However, earning a place on the customer's homescreen is not
    as easy. That's because it is not an obvious process.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，只需为每次点击支付几便士，Facebook、**按点击付费**（**PPC**）或横幅广告活动就能将相同的参与度带到网站上。更好的是，如果你的页面有一个良好的、自然的SEO档案，你可以免费驱动大量目标流量！然而，在客户的首页上获得一个位置并不容易。这是因为它不是一个明显的过程。
- en: 'Rewinding to the original iPhone launch, third-party apps were not available
    till 6 months later. At WWDC, Steve Jobs announced the third-party app solution HTML5
    + AJAX ([https://www.apple.com/newsroom/2007/06/11iPhone-to-Support-Third-Party-Web-2-0-Applications/](https://www.apple.com/newsroom/2007/06/11iPhone-to-Support-Third-Party-Web-2-0-Applications/)):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '回顾到原始iPhone发布时，第三方应用直到6个月后才可用。在WWDC上，史蒂夫·乔布斯宣布了第三方应用解决方案HTML5 + AJAX ([https://www.apple.com/newsroom/2007/06/11iPhone-to-Support-Third-Party-Web-2-0-Applications/](https://www.apple.com/newsroom/2007/06/11iPhone-to-Support-Third-Party-Web-2-0-Applications/)):'
- en: '*"Developers can create Web 2.0 applications which look and behave just like
    the applications built into iPhone, and which can seamlessly access iPhone''s
    services, including making a phone call, sending an email, and displaying a location
    in Google Maps. Third-party applications created using Web 2.0 standards can extend
    iPhone''s capabilities without compromising its reliability or security."*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*"开发者可以创建看起来和表现就像iPhone内置应用一样的Web 2.0应用，并且可以无缝访问iPhone的服务，包括打电话、发送电子邮件以及在谷歌地图中显示位置。使用Web
    2.0标准创建的第三方应用可以在不损害其可靠性和安全性的情况下扩展iPhone的功能。"*'
- en: With that proclamation, Apple provided a simple, and sort of hacky, way to drive
    the homescreen experience on iOS. The non-standard techniques required adding
    iOS Safari specific META tags to each page and having appropriate sized homescreen
    images.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这一声明，苹果公司提供了一种简单且有点黑客式的方法来驱动iOS上的主屏幕体验。非标准技术需要为每个页面添加iOS Safari特定的META标签，并拥有适当大小的主屏幕图片。
- en: Making your PWA iOS web app capable
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使你的PWA iOS网络应用具备功能
- en: When Apple introduced iOS, the original app recommendation was to use HTML5,
    CSS3, and JavaScript to create rich client-side user experiences. Apple has not
    removed web app support and has enhanced some capabilities over time. The iOS
    web app experience is driven by custom metadata that's added to a web page's `HEAD`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当苹果推出iOS时，原始的应用推荐是使用HTML5、CSS3和JavaScript来创建丰富的客户端用户体验。苹果没有移除Web应用支持，并且随着时间的推移增强了一些功能。iOS
    Web应用体验是由添加到网页`HEAD`中的自定义元数据驱动的。
- en: Much of the Apple meta data has served as a model for the modern web manifest
    specification. Before the web manifest specification was created, Chrome on Android
    integrated support for the Apple meta data to drive a similar experience.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分苹果元数据已成为现代Web清单规范的模式。在创建Web清单规范之前，Android上的Chrome集成了对苹果元数据的支持，以驱动类似的经验。
- en: The web app experience on iOS is triggered when your website contains Apple-specific
    META tags, corresponding icons, and when the user has added your site to their
    homescreen.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的网站包含苹果特定的META标签、相应的图标，并且用户已将你的网站添加到他们的主屏幕时，iOS上的Web应用体验被触发。
- en: The first piece you need is a png file as the default homescreen icon. The file
    should be named `apple-touch-icon.png` and it should be present in your site's
    root folder.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要的第一件东西是一个png文件作为默认的主屏幕图标。文件应命名为`apple-touch-icon.png`，并且应位于你网站的根目录中。
- en: 'Individual pages can have a unique icon with a `link` reference in the `HEAD`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 单个页面可以有一个独特的图标，在`HEAD`中的`link`引用：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It is even better to specify icons for different screen sizes and densities.
    The platform will determine which icon works best for the device. If no icon is
    specified, the root folder is searched for icons with the `apple-touch-icon` prefix:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 更好地是，为不同的屏幕尺寸和密度指定图标。平台将确定哪个图标最适合设备。如果没有指定图标，则搜索根目录中带有`apple-touch-icon`前缀的图标：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When the required meta data is supplied, you must then coax the user to initiate
    the iOS add to homescreen process. This starts when they press Safari''s share
    icon:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供了所需的元数据后，你必须诱导用户启动iOS添加到主屏幕的过程。这始于他们按下Safari的分享图标：
- en: '![](img/00012.gif)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00012.gif)'
- en: 'This triggers the Safari share menu, which contains more than just options
    to share the URL: it contains icons to bookmarks and saves the site to the home
    screen, as shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这触发了Safari分享菜单，其中不仅包含分享URL的选项：它还包含书签图标，并将网站保存到主屏幕，如下面的截图所示：
- en: '![](img/00013.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00013.jpeg)'
- en: 'Similar to the home screen icon, the Launch screen image can be specified.
    Think of this as a splash screen. This is done with a LINK element and a reference
    to the startup image. If no image is specified, a screenshot of the last time
    the app was launched is used:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 与主屏幕图标类似，启动屏幕图像也可以指定。将其视为启动画面。这是通过一个LINK元素和一个对启动图像的引用来完成的。如果没有指定图像，则使用上次启动应用时的截图：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The application title is set with another META tag
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序标题通过另一个META标签设置
- en: 'This is similar to the name and short name manifest properties I''ll discuss
    in detail in the the *web manifest* section. If no META value is supplied, the
    `title` element value is used:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我在*网络清单*部分将详细讨论的名称和短名称清单属性相似。如果没有提供META值，则使用`title`元素值：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Check the output in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 检查以下截图中的输出：
- en: '![](img/00014.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00014.jpeg)'
- en: 'Next, you should control how your web app appears to the user. iOS allows you
    to either launch the app in the browser or as a standalone mode. Standalone mode
    removes the browser, but retains the iOS status bar across the top of the screen.
    Check the following code for this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您应该控制您的Web应用如何呈现给用户。iOS允许您在浏览器中启动应用或以独立模式启动。独立模式移除了浏览器，但保留了屏幕顶部的iOS状态栏。以下代码展示了这一点：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When in standalone mode, there is no address bar, so you may need to adjust
    your UI to allow customers to copy URLs and go back to previous screens. The navigation
    concerns are the same that native application designers negotiate, and every application
    has different requirements.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在独立模式下，没有地址栏，因此您可能需要调整您的UI以允许客户复制URL并返回到之前的屏幕。导航问题与本地应用程序设计师协商的问题相同，每个应用程序都有不同的要求。
- en: The status bar can also be styled with the `apple-mobile-web-app-bar-style`
    value. This value is only used when your app is launched in standalone mode. You
    can change the default grey to either black or translucent black.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 状态栏也可以使用`apple-mobile-web-app-bar-style`值进行样式化。此值仅在您的应用以独立模式启动时使用。您可以将默认的灰色更改为黑色或半透明黑色。
- en: 'Unfortunately, you cannot theme the color to match your application theme or
    hide it altogether:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，您无法将颜色主题化以匹配您的应用程序主题或完全隐藏它：
- en: '![](img/00015.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00015.jpeg)'
- en: If you have done everything according to Apple's specifications, when a user
    launches the 2048 game, it should consume the entire screen, as demonstrated in
    the preceding screenshot.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已按照苹果的规范完成所有操作，当用户启动2048游戏时，它应该占用整个屏幕，如前一个截图所示。
- en: Apple may have paved the way for a more intimate relationship with web brands
    on iOS, but their approach was never a common standard. This has changed in the
    era of progressive web apps as the W3C standardized, which is a meta data format
    to describe your web app to the platform.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果可能在iOS上为与网络品牌建立更亲密的关系铺平了道路，但他们的方法从未成为通用标准。随着W3C的标准化，这种变化发生在渐进式Web应用时代，这是一个元数据格式，用于向平台描述您的Web应用。
- en: The web manifest specification
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络清单规范
- en: The Web Manifest describes the progressive web applications with meta data and
    JSON formatting. Browsers parse the manifest file to create the add to homescreen
    icon and launch the experiences.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 网络清单描述了渐进式Web应用，使用元数据和JSON格式。浏览器解析清单文件以创建添加到主屏幕的图标并启动体验。
- en: Now, instead of polluting each page's `HEAD` with extra meta data, the browser
    can load an external file containing standard properties and values formatted
    using JSON.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，不再需要在每个页面的`HEAD`中添加额外的元数据，浏览器可以加载一个包含使用JSON格式化的标准属性和值的外部文件。
- en: The web manifest specification ([https://w3c.github.io/manifest/](https://w3c.github.io/manifest/))
    provides some guidelines for browsers to establish an add to homescreen experience.
    How browsers implement the experience is left open ended, making an avenue for
    creativeness. I will cover this topic in more detail after reviewing the manifest
    file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 网络清单规范([https://w3c.github.io/manifest/](https://w3c.github.io/manifest/))为浏览器提供了一些建立添加到主屏幕体验的指南。浏览器如何实现这一体验是开放的，为创造性开辟了途径。我将在审查清单文件后更详细地介绍这一主题。
- en: Referencing the web manifest file
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引用网络清单文件
- en: 'The web manifest file must be referenced in the document''s HEAD, as mentioned
    in the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 网络清单文件必须在文档的HEAD中引用，如以下代码所示：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Manifests should be served using the `application/manifest+json` MIME type.
    This is an important setting because it is often overlooked.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 清单应该使用`application/manifest+json` MIME类型提供服务。这是一个重要的设置，因为它经常被忽视。
- en: You should research how to define or add MIME types in your web server of choice.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该研究如何在您选择的Web服务器中定义或添加MIME类型。
- en: Many servers block requests to files based on their type by default. This often
    leads to manifest files returning 404 or 403 type status codes. I see similar
    issues raised when PDF documents need to be served. You may need to coordinate
    with your network administrators or devops team to make sure that your servers
    are properly configured.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 许多服务器默认根据文件类型阻止对文件的请求。这通常导致清单文件返回404或403类型状态代码。我在PDF文档需要被服务时看到类似的问题被提出。您可能需要与您的网络管理员或devops团队协调，以确保您的服务器配置正确。
- en: Do not cache the web manifest file using your service worker. You may not be
    able to update the file without updating your service worker. They should remain
    decoupled.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使用您的服务工作者缓存网络清单文件。您可能无法在不更新服务工作者的情况下更新文件。它们应该保持解耦。
- en: Web manifest properties
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络清单属性
- en: Owning your application's appearance is vital to ensuring the best user experience.
    Every application has unique use cases, eliminating the idea that one size fits
    all for progressive web applications. While most applications will want to copy
    a native application full screen experience, some will want to maintain a visible
    address bar. A standardized manifest file provides brand owners a communication
    channel with the browser to deliver the best branded experience.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有您应用程序的外观对于确保最佳用户体验至关重要。每个应用程序都有独特的用例，消除了渐进式Web应用程序“一刀切”的想法。虽然大多数应用程序将想要复制全屏的原生应用程序体验，但有些将想要保持可见的地址栏。标准化的清单文件为品牌所有者提供了一个与浏览器通信的渠道，以提供最佳品牌体验。
- en: The manifest should contain a series of properties, including `name`, `short_name`,
    `description`, `icons`, `orientation`, colors, and a default page. These are used
    for the homescreen and launch experience.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 清单应包含一系列属性，包括`name`、`short_name`、`description`、`icons`、`orientation`、颜色和默认页面。这些用于主屏幕和启动体验。
- en: 'A minimal list of manifest properties is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最小化的清单属性列表如下：
- en: '`name`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`'
- en: '`short_name`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`short_name`'
- en: '`description`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`'
- en: '`icons`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`icons`'
- en: '`orientation`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orientation`'
- en: '`theme_color`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`theme_color`'
- en: '`background_color`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`background_color`'
- en: '`start_url`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start_url`'
- en: There are additional official properties which you can specify within the manifest,
    but their use cases are limited. I would also point out that because the document
    uses JSON, a mutable data structure notation, it is extensible, and some browsers
    are experimenting with proprietary properties. Don't worry if you are using a
    non-standard property – you won't break other browsers because they just ignore
    those values.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在清单中指定其他官方属性，但它们的使用案例有限。我还想指出，由于文档使用JSON，这是一种可变的数据结构表示法，因此它是可扩展的，一些浏览器正在尝试专有属性。如果您使用非标准属性，请不要担心——您不会破坏其他浏览器，因为它们只是忽略那些值。
- en: There are two name properties; `name` and `short_name`. The `short_name` is
    used with the homescreen icon and other places where spaced is constrained. Where
    space allows, the `name` property is used.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个名称属性；`name`和`short_name`。`short_name`用于主屏幕图标和其他空间受限的地方。在允许空间的地方，使用`name`属性。
- en: 'This is what the first four properties look like in the 2048 app:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在2048应用中前四个属性的外观：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `start_url` defines the initial URL that's loaded when the homescreen icon
    is selected. This eliminates the scenario where the user adds the PWA to the homescreen
    from a deep link, like a news article. In the past, the icon would be a bookmark
    to that article, not the home page.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`start_url`定义了当选择主屏幕图标时加载的初始URL。这消除了用户从深度链接（如新闻文章）将PWA添加到主屏幕的情况。在过去，图标将是该文章的书签，而不是主页。'
- en: The `start_url` can be any URL within the application's scope. It does not need
    to be the public home page; it can be a special PWA home page. You can also use
    QueryString values to drive additional tracking and dynamic behavior from the
    server.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`start_url`可以是应用范围内的任何URL。它不需要是公共主页；它可以是特殊的PWA主页。您还可以使用查询字符串值从服务器驱动额外的跟踪和动态行为。'
- en: 'Next, the `icons` property is an array of `icon` objects defining the URL to
    an icon, the MIME type, and dimensions:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`icons`属性是一个包含`icon`对象的数组，这些对象定义了图标的URL、MIME类型和尺寸：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: While different image types are supported, I recommend using .png as Chrome
    is looking for at least one `.png` of 144 x 144 dimensions. You should include
    at least four icons, one being at least 144 x 144, but 192 x 192 is better. In
    [Chapter 10](part0222.html#6JMSS0-f12cdcca08b54960b3d271452dc7667d), *Service
    Worker Tools*, I'll show you how to use [https://www.pwabuilder.com/](https://www.pwabuilder.com/) to
    help you automate the process of creating a full set of images.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然支持不同的图像类型，但我建议使用.png，因为Chrome至少需要一张144 x 144像素的`.png`图像。你应该至少包含四个图标，其中至少一个是144
    x 144像素，但192 x 192像素更好。在[第10章](part0222.html#6JMSS0-f12cdcca08b54960b3d271452dc7667d)，“服务工作者工具”中，我将向你展示如何使用[https://www.pwabuilder.com/](https://www.pwabuilder.com/)来帮助你自动化创建完整图像集的过程。
- en: My rule of thumb is to include a dozen or more icon variations to account for
    differences in potential platform requirements and opportunities. Windows Live
    Tiles can be 600 pixels wide and can be scaled down to less than 70 pixels wide.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我的经验法则是包含一打或更多的图标变体，以应对潜在的平台需求和机会。Windows Live Tiles宽度可达600像素，可以缩小到小于70像素宽。
- en: It is also a good idea to use some art direction when creating icons. Some logos
    do not work well in smaller situations. If you add your icon to the homescreen
    and find it difficult to locate, chances are your customers will too.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建图标时使用一些艺术指导也是一个好主意。有些标志在小尺寸下效果不佳。如果你将图标添加到主屏幕并发现难以定位，那么你的客户可能也会如此。
- en: A splash screen image is drawn from the icons array. Chrome chooses the image
    that is closest to 128dp for the device. The title is simply pulled from the name
    member. Specify the background color using the appropriately named `background_color`
    property.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 启动画面图像是从图标数组中绘制的。Chrome会选择与设备128dp最接近的图像。标题直接从名称成员中提取。使用名为`background_color`的属性指定背景颜色。
- en: 'The following image shows how the Flipkart.com site''s colors and logo icon
    are used to create a brief splash as the web app is loaded:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了Flipkart.com网站的颜色和标志图标如何用于在加载Web应用程序时创建简短的启动画面：
- en: '![](img/00016.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00016.jpeg)'
- en: Reference your PWAs icons as URLs using an array. Each item in the array is
    an object that describes the icon. Include the src URL, the sizes property, and
    MIME type. I recommend using .png files since Chrome currently requires this format.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数组引用你的PWA图标作为URL。数组中的每个项目都是一个描述图标的对象。包括src URL、sizes属性和MIME类型。我建议使用.png文件，因为Chrome目前要求此格式。
- en: Controlling the launch style
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制启动样式
- en: The manifest has properties which are used by the platform to know how to launch
    the application. The `display` property allows you to control how the Chrome browser
    is rendered. The default value is `browser`, which launches the PWA in a browser,
    with Chrome.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 清单具有平台用于了解如何启动应用程序的属性。`display`属性允许你控制Chrome浏览器如何渲染。默认值是`browser`，它将在浏览器中启动PWA，带有Chrome。
- en: The `minimal-ui` option launches the PWA as an application, but with a minimal
    set of navigation UI.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`minimal-ui`选项将PWA作为应用程序启动，但带有最小的一组导航UI。'
- en: '`standalone` launches the PWA as a full screen application. The application
    takes up most of the screen, but some browser elements, like the status bar, may
    be rendered. Check the following code to understand the properties:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`standalone`模式将PWA作为全屏应用程序启动。应用程序占据大部分屏幕，但一些浏览器元素，如状态栏，可能会被渲染。查看以下代码以了解属性：'
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`fullscreen` mode launches the application in full screen and application mode
    without any browser elements. To the end user, it feels like they have opened
    a native app.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`fullscreen`模式在无任何浏览器元素的全屏和应用模式下启动应用程序。对于最终用户来说，感觉就像他们打开了一个原生应用程序。'
- en: 'The values currently supported for the display are as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当前支持的显示值如下：
- en: '`fullscreen`: Launches the application in full screen.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fullscreen`：在全屏中启动应用程序。'
- en: '`standalone`: Similar to fullscreen, but may have a system UI visible.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`standalone`：类似于全屏，但可能有一个可见的系统UI。'
- en: '`minimal-ui`: Adds some minimal browser navigation UI components to the standalone
    view.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minimal-ui`：向独立视图添加一些最小浏览器导航UI组件。'
- en: '`browser`: Opens the PWA as a regular web page in the browser.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`browser`：在浏览器中以常规网页形式打开PWA。'
- en: '`orientation`: This property defines what angle the application renders. The
    primary choices are landscape and portrait. The values should be self-explanatory.
    No, you cannot render your app at a 45 degree tilt!'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orientation`：此属性定义应用程序渲染的角度。主要选择是横屏和竖屏。值应该是自解释的。不，你不能以45度倾斜渲染你的应用程序！'
- en: 'The full set of orientation options are as follows:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的定位选项如下：
- en: '`any`'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`any`'
- en: '`natural`'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`自然`'
- en: '`` `landscape` ``'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `横屏` ``'
- en: '`` `portrait` ``'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `竖屏` ``'
- en: '`portrait-primary`'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`竖屏-主要`'
- en: '`portrait-secondary`'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`竖屏-次要`'
- en: '`landscape-primary`'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`横屏-主要`'
- en: '`landscape-secondary`'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`横屏-次要`'
- en: 'The `theme_color` and `background_color` are used to represent the app and
    provide the default background color. The difference between these two colors
    is in how they are applied:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`theme_color`和`background_color`用于表示应用并提供默认背景颜色。这两种颜色之间的区别在于它们的应用方式：'
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The background color refers the default background color of the `BODY` elements.
    This is typically set in the site's CSS. If not, it defaults back to the browser's
    default. Today, the de facto background color is white, but in the early days,
    it was grey.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 背景颜色指的是`BODY`元素的默认背景颜色。这通常在网站的CSS中设置。如果没有设置，则默认回浏览器默认值。今天，事实上的背景颜色是白色，但在早期，它是灰色。
- en: The `theme_color` defines what color the operating system uses to visualize
    the application. This includes the task switching experience. Each platform offers
    different user experiences related to how apps are presented, so application of
    the theme color will vary.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`theme_color`定义了操作系统用于可视化的颜色。这包括任务切换体验。每个平台都提供不同的用户体验，与如何展示应用程序相关，因此主题颜色的应用会有所不同。'
- en: If your application uses a language that is right to left, you can specify that
    using the `dir` property. The direction is then applied to the `name`, `short_name`,
    and `description` fields.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序使用的是从右到左的语言，你可以使用`dir`属性来指定。然后这个方向会被应用到`name`、`short_name`和`description`字段。
- en: The `lang` property relates to `dir` because it designates what language the
    site uses. It is also applied to the text properties. The value should be a standard
    language tag ([https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang))
    consisting of a 2 or 3 character code followed by an optional subtag, for example,
    `en-US` or `en-GB`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`lang`属性与`dir`相关，因为它指定了网站使用的语言。它也应用于文本属性。值应该是一个标准的语言标签（[https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang)），由2或3个字符代码后跟一个可选的子标签组成，例如，`en-US`或`en-GB`。'
- en: 'If you happen to have a native app available that provides functionality not
    available in your PWA, you can indicate its availability using the `prefer_related_applications`
    field and setting it as either true or false. Use this in conjunction with the
    `related_applications` value to hint at how to install the native app:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你恰好有一个提供在PWA中不可用功能的原生应用程序，你可以使用`prefer_related_applications`字段来指示其可用性，并将其设置为true或false。与`related_applications`值一起使用，以提示如何安装原生应用程序：
- en: '[PRE10]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Chrome recently added support for the manifest scope property, adding more control
    over how a PWA and the pages it links to are rendered. I will review how Chrome
    specifically uses this property within the concept of the WebAPK or *improved
    add to homescreen experience* section later.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome最近增加了对清单范围属性的支持，这增加了对PWA及其链接页面的渲染方式的更多控制。我将在WebAPK或*改进添加到主屏幕体验*部分中稍后回顾Chrome如何具体使用此属性。
- en: The `scope` property defines the web application's context or range of URLs
    that are considered to be part of the progressive web application. Platforms can
    use this as they see fit, but the consensus is that if the user navigates within
    the scope, the browser will render PWA according to the manifest's `display` property.
    Any navigation outside of this scope results in the page being rendered with the
    full Chrome browser.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`scope`属性定义了Web应用程序的上下文或被认为是渐进式Web应用程序一部分的URL范围。平台可以根据需要使用它，但共识是，如果用户在范围内导航，浏览器将根据清单的`display`属性渲染PWA。任何超出此范围的导航都会导致页面使用完整的Chrome浏览器渲染。'
- en: Apple Safari web manifest support
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持Apple Safari网络清单
- en: 'Since Apple released the iOS 11.3 and Safari 13 updates, basic support for
    the web manifest specification was included. There are some limitations to the
    current usage and support of the web manifest:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 自从苹果发布了iOS 11.3和Safari 13更新以来，对网络清单规范的基本支持被包括在内。当前的使用和支持存在一些限制：
- en: The home screen icon is still referenced from the `apple-touch-icon`
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主屏幕图标仍然引用自`apple-touch-icon`
- en: Transparent icons are not supported
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 透明图标不受支持
- en: No 3D touch menu support
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持3D触控菜单
- en: No splash screen
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有启动画面
- en: Can't lock orientation
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法锁定方向
- en: Display `fullscreen` and `minimal-ui` not supported properly
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不正确地支持`fullscreen`和`minimal-ui`
- en: Apple still has work left so that they fully support using the web manifest,
    but it is a start. I believe that over the coming months we should see support
    being improved. One thing browser vendors struggle with is turning the ship to
    support modern ways of providing functionality.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果还有工作要做，以便完全支持使用web清单，但这是一个开始。我相信在接下来的几个月里，我们应该会看到支持得到改善。浏览器供应商面临的一个挑战是转向支持提供功能的新方法。
- en: Migrating from a 10-year-old way of providing user experience like touch icons
    and mobile web app capable features to a different mechanism is tough. If they
    do it too fast, they can and will break many sites, which is something all browser
    vendors fear. So, expect the transition to be gradual.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 从提供用户体验的10年旧方式（如触摸图标和移动Web应用功能）迁移到不同的机制是困难的。如果他们做得太快，他们可能会破坏许多网站，这是所有浏览器供应商都害怕的事情。因此，预计过渡将是渐进的。
- en: I would also like to point out that the PWA support, especially relating to
    service workers, is not yet supported in webviews used by many native apps. This
    also means that any hybrid applications will not have access to these features
    as a PWA, including the service worker.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我还想指出，PWA支持，特别是与服务工作者相关，在许多原生应用使用的webview中尚未得到支持。这也意味着任何混合应用程序作为PWA将无法访问这些功能，包括服务工作者。
- en: Pseudo browsers like Chrome, Edge, and FireFox on iOS also do not support any
    progressive web app functionality on iOS. These browsers use the webview to render
    pages and not their own engines. So, for now, they are also limited.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS上的伪浏览器，如Chrome、Edge和Firefox，也不支持任何渐进式Web应用功能。这些浏览器使用webview来渲染页面，而不是它们自己的引擎。因此，目前它们也受到限制。
- en: The positive news is that Safari supports all major browsers on all major platforms,
    and nows support basic web manifest consumption.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，Safari支持所有主要平台上的所有主要浏览器，并且现在支持基本的web清单消费。
- en: Validating web manifest files
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证web清单文件
- en: The web manifest is a simple JSON document, but it's easy to make typos or forget
    things. If your site is not properly registering the manifest file, you will need
    to troubleshoot the issue. Fortunately, there are a few resources to help you
    validate your file.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: web清单是一个简单的JSON文档，但很容易出错或忘记某些内容。如果您的网站没有正确注册清单文件，您将需要调试问题。幸运的是，有一些资源可以帮助您验证文件。
- en: 'Google hosts a simple online validator ([https://manifest-validator.appspot.com](https://manifest-validator.appspot.com))
    where you can enter either a URL or just paste the manifest code into the page.
    It will parse your manifest and let you know if there is an issue:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Google托管了一个简单的在线验证器([https://manifest-validator.appspot.com](https://manifest-validator.appspot.com))，您可以在其中输入URL或直接将清单代码粘贴到页面中。它将解析您的清单并告知是否存在问题：
- en: '![](img/00017.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00017.jpeg)'
- en: The nodejs Web Manifest Validator ([https://github.com/san650/web-app-manifest-validator](https://github.com/san650/web-app-manifest-validator))
    is a module you can include in your automated testing workflow to validate a manifest
    file. It is a couple of years old, so you may need to fork the project and update
    it if you are using newer manifest features. Remember that the manifest specification
    is not final and can and will change over time.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: nodejs Web清单验证器([https://github.com/san650/web-app-manifest-validator](https://github.com/san650/web-app-manifest-validator))是一个可以包含在您的自动化测试工作流程中的模块，用于验证清单文件。它已经有一年多了，所以如果您使用的是较新的清单功能，您可能需要分叉项目并更新它。请记住，清单规范尚未最终确定，并且随着时间的推移可能会发生变化。
- en: These are not the only tools. There are a few other node modules available as
    well as Lighthouse and Sonar. I will cover those tools in [Chapter 10](part0222.html#6JMSS0-f12cdcca08b54960b3d271452dc7667d),
    *Service Worker Tools*, along with PWA Builder, which can generate your manifest.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具并非只有这些。还有一些其他node模块，以及Lighthouse和Sonar。我将在[第10章](part0222.html#6JMSS0-f12cdcca08b54960b3d271452dc7667d)，“服务工作者工具”，以及PWA
    Builder中介绍这些工具，PWA Builder可以生成您的清单。
- en: The Chrome improved add to homescreen experience
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chrome改进的添加到主屏幕体验
- en: Some time in 2017, the Chrome team announced changes to the PWA installation
    experience called the improved add to homescreen experience. At the time, it was
    not as much about the automatic prompt, but that has been part of the change.
    It has more to do with how PWAs behave on Android and that it is more like a native
    application.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在2017年某个时候，Chrome团队宣布了对PWA安装体验的更改，称为改进的添加到主屏幕体验。当时，这不仅仅关于自动提示，但这已经成为了变化的一部分。它更多地与PWAs在Android上的行为有关，它更像是原生应用程序。
- en: These changes were multifaceted and start with the web manifest scope property.
    This property is relatively new but allows the browser to know how to limit PWA
    functionality on an origin (domain name).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变化是多方面的，始于Web清单的作用域属性。这个属性相对较新，但允许浏览器知道如何限制源（域名）上的PWA功能。
- en: When you set the scope value to `/`, you are telling the platform that the progressive
    web application's capabilities apply to all paths within the origin. This may
    not always be the case, especially on larger sites and enterprise applications.
    Often, these sites are segmented into different applications.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当你设置作用域值为`/`时，你是在告诉平台，渐进式Web应用的能力适用于源内的所有路径。这并不总是如此，尤其是在较大的网站和企业应用中。通常，这些网站被分割成不同的应用。
- en: If you changed the scope to say `/hr/`, then only URLs under the `/hr/` folder
    would be part of the PWA's scope. This means that those URLs will be opened according
    to the web manifest file configuration. URLs not within the `/hr/` folder will
    open normally in the browser.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将作用域更改为`/hr/`，那么只有`/hr/`文件夹下的URL将包含在PWA的作用域内。这意味着这些URL将根据Web清单文件配置打开。不在`/hr/`文件夹内的URL将在浏览器中正常打开。
- en: When a PWA is installed using Chrome on Android, it automatically creates an
    unsigned WebAPK, which makes the PWA a native app. Within the WebAPK, an Android
    manifest is created, which includes intent filters.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Chrome在Android上安装PWA时，它会自动创建一个未签名的WebAPK，这使得PWA成为一个原生应用。在WebAPK中，会创建一个Android清单文件，其中包含intent过滤器。
- en: Intent filters tell Android how URLs within the origin should be opened. For
    PWAs, this means that the app is launched according to the manifest configuration
    or directly in the browser if outside of its scope.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Intent过滤器告诉Android如何打开源内的URL。对于PWA，这意味着应用将根据清单配置启动，或者如果在其作用域之外，则直接在浏览器中打开。
- en: 'Here is what these intent filters look like in the WebAPK:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是这些intent过滤器在WebAPK中的样子：
- en: '[PRE12]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `pathPrefix` value changes to match the web manifest scope value:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`pathPrefix`的值会改变以匹配Web清单的作用域值：'
- en: '[PRE13]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: These changes have not stopped with Android as recent updates have also been
    applied to Chrome OS and are in the near future for desktop Chrome. Google is
    in the process of replacing the Chrome OS apps with progressive web apps, giving
    similar capabilities to the previous web apps that are available on the platform.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变化并没有停止在Android上，因为最近的更新也已经应用于Chrome OS，并且不久的将来也将应用于桌面Chrome。谷歌正在用渐进式Web应用替换Chrome
    OS应用，为平台上的先前Web应用提供类似的功能。
- en: Chrome is also bringing more of the add to homescreen experience to desktops
    as well. However, this will vary by operating system as there are different user
    expectations on each platform.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome还将更多添加到主屏幕体验的功能引入桌面。然而，这会因操作系统而异，因为每个平台都有不同的用户期望。
- en: The good news is that if you make good progressive web applications, you will
    just benefit from these changes.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，如果你制作了好的渐进式Web应用，你将直接受益于这些变化。
- en: The add to homescreen experience
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加到主屏幕体验
- en: The emergence of an automatic prompt to a visitor to add your progressive web
    app to their homescreen is exciting. In the past, Chrome would eventually display
    a prompt to install a progressive web app, but that has changed recently. The
    rules determining when the prompt triggers are still valid, but now only trigger
    the `beforeinstallprompt` event.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 出现自动提示访客将你的渐进式Web应用添加到他们的主屏幕上是非常令人兴奋的。在过去，Chrome最终会显示一个提示安装渐进式Web应用，但最近这已经改变了。触发提示的规则仍然有效，但现在只触发`beforeinstallprompt`事件。
- en: How the user prompt triggers is where each browser can choose a different path.
    Some of the requirements are defined in the web manifest specification, but the
    experience is left open ended for browsers to implement as they see fit.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 用户提示触发的机制是每个浏览器可以选择不同路径的地方。一些要求在Web清单规范中定义，但体验被留给浏览器根据需要实现。
- en: 'Right now, Chrome has the most mature process. They established the following
    criteria to automatically trigger the add to homescreen experience:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Chrome拥有最成熟的过程。他们建立了以下标准来自动触发添加到主屏幕体验：
- en: 'Has a web app manifest file with:'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个Web应用清单文件：
- en: A `short_name` (used on the homescreen)
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`short_name`（用于主屏幕）
- en: A name (used in the banner)
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名称（用于横幅）
- en: A 144 x 144 .png icon (the icon declarations must include a mime type of image/png)
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个144 x 144 .png图标（图标声明必须包含image/png的MIME类型）
- en: '`Astart_url` that loads'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Astart_url`加载'
- en: 'Has a service worker registered on your site:'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的网站上注册了service worker：
- en: Has a fetch event handler
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有fetch事件处理器
- en: The Fetch event handler cannot be a noop function, it must do something
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fetch事件处理器不能是一个空操作函数，它必须做些什么
- en: Is served over HTTPS (a requirement for using service worker)
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过HTTPS（使用service worker的要求）提供服务
- en: Is visited at least twice, with at least five minutes between visits
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少访问两次，两次访问之间至少有五分钟
- en: FireFox, Samsung, and Opera have similar requirements. FireFox will trigger
    the experience on Android, but not the desktop. You can allow the experience on
    desktop, but it is hidden behind a flag.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FireFox、三星和Opera有类似的要求。FireFox将在Android上触发体验，但不在桌面版上。你可以允许桌面版上的体验，但它被隐藏在标志后面。
- en: 'These browsers typically provide a simple visual queue in the browser''s address
    bar. Here is how FireFox on Android displays the indicator:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这些浏览器通常在浏览器的地址栏中提供简单的视觉提示。以下是Android上的Firefox如何显示指示器：
- en: '![](img/00018.jpeg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00018.jpeg)'
- en: Notice how it uses a house with a `+` to indicate that the site can be installed.
    To its right, you will also see an Android logo silhouette. The little Android
    head indicates that an app is available. In this case, it is detecting the PWA
    I installed from Chrome, which created a WebAPK.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 注意它如何使用带有`+`的房屋图标来表示该网站可以安装。在其右侧，你也会看到一个Android轮廓标志。小Android头像表示有应用可用。在这种情况下，它正在检测我从Chrome安装的PWA，它创建了一个WebAPK。
- en: The Chrome add to homescreen experience
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chrome添加到主屏幕体验
- en: The clear leader in the progressive web application experience is Chrome. They
    should be, since they created the concept. They have also had time to experiment
    with the concept to see what works, what doesn't, and what consumers and developers
    expect.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在渐进式Web应用体验方面，Chrome无疑是当之无愧的领导者。他们应该如此，因为他们创造了这一概念。他们也有时间对这个概念进行实验，看看什么有效，什么无效，以及消费者和开发者有什么期望。
- en: This has led them to continually improve the process to the point that Chrome
    on Android creates a WebAPK when the app is installed, elevating the app to a
    similar level as native apps. Recently, they extended this functionality to Windows
    and ChromeOS, with plans to implement it on macOS soon.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致他们不断改进流程，使得在Android上安装应用时Chrome会创建一个WebAPK，将应用提升到与原生应用相似的水平。最近，他们扩展了这一功能到Windows和ChromeOS，并计划很快在macOS上实现。
- en: 'Here, you can see some recently installed progressive web apps in my Windows
    Start menu:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，你可以看到我Windows开始菜单中最近安装的一些渐进式Web应用：
- en: '![](img/00019.jpeg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00019.jpeg)'
- en: So, what exactly is a **WebAPK** and the **enhanced add to homescreen experience**?
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，**WebAPK**和**增强型添加到主屏幕体验**究竟是什么？
- en: 'I have already explained this: it is where the Chrome packages progressive
    web apps in an apk package is called a **WebAPK**. If you are not familiar with
    Android native application development, all of the assets are packaged in a single
    file called an apk.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经解释过了：Chrome将渐进式Web应用打包到apk包中，这种打包方式被称为**WebAPK**。如果你不熟悉Android原生应用开发，所有的资源都打包在一个名为apk的单个文件中。
- en: As an oversimplification, this is just a zip file containing the application's
    assets. Windows does something similar with the appx format. What Chrome does
    when it creates a WebAPK is akin to using Cordova to generate a native application
    from a website.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，这只是一个包含应用资源的zip文件。Windows使用appx格式做类似的事情。Chrome创建WebAPK时所做的类似于使用Cordova从网站生成原生应用。
- en: The Chrome team instead decided to create a duplicate channel to maintain and
    give PWAs similar control, as native apps implementing this hybrid approach was
    most efficient. They first shipped this capability in Chrome 57\. The big difference
    between a native Android application and an installed progressive web app is no
    access to platform APIs.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome团队决定创建一个重复的通道来维护并给予PWAs类似的控制，因为采用这种混合方法的原生应用效率最高。他们首先在Chrome 57中推出了这一功能。原生Android应用与已安装的渐进式Web应用之间的主要区别是无法访问平台API。
- en: The application appears like any Play Store installed application on the device.
    The icon can be placed on the homescreen, is visible in the app shelf, and can
    be managed through the Android platform settings.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 应用看起来就像设备上安装的任何Play Store应用一样。图标可以放置在主屏幕上，在应用托盘上可见，并且可以通过Android平台设置进行管理。
- en: 'Here is how the 2048 PWA is surfaced in the Android application management
    interface:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何在Android应用管理界面中呈现2048 PWA的：
- en: '![](img/00020.jpeg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00020.jpeg)'
- en: As Chrome implements this functionality on other platforms, you may or may not
    find the same level of control. For example, you still can't manage a Chrome installed
    PWA from the control panel on Windows.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Chrome 在其他平台上实现此功能时，您可能会或可能不会发现相同级别的控制。例如，您仍然无法从 Windows 的控制面板中管理已安装的 PWA。
- en: The application uses the same storage settings as the web page. Clearing storage
    for the domain will also clear the storage for the installed PWA. This means that
    cookies and cached content will be removed.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序使用与网页相同的存储设置。清除域的存储也将清除已安装 PWA 的存储。这意味着将删除 cookie 和缓存内容。
- en: Another benefit is when the web manifest file is updated to reference a new
    icon or change the name value. This will be updated on the homescreen icon.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个好处是当 Web 清单文件更新以引用新的图标或更改名称值时。这将更新主屏幕图标。
- en: Google is not hoarding this functionality to themselves. They have provided
    documentation and reference for other user agents (browsers) to implement similar
    functionality ([https://chromium.googlesource.com/chromium/src/+/master/chrome/android/webapk](https://chromium.googlesource.com/chromium/src/+/master/chrome/android/webapk)).
    This means that we could see FireFox, Samsung Internet, UC Browser, and so on
    implement similar functionality soon.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Google 并没有将此功能据为己有。他们为其他用户代理（浏览器）提供了文档和参考以实现类似的功能([https://chromium.googlesource.com/chromium/src/+/master/chrome/android/webapk](https://chromium.googlesource.com/chromium/src/+/master/chrome/android/webapk))。这意味着我们可能会看到
    Firefox、Samsung Internet、UC 浏览器等很快实现类似的功能。
- en: Your add to homescreen responsibilities
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您添加到主屏幕的责任
- en: At Google I/O 2018, it was announced that Chrome on Android will no longer include
    an automated add to homescreen prompt. Instead, it is your responsibility to create
    the user experience. Ultimately, the Chrome team decided to fall more in line
    with how other browser vendors are crafting their experiences.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2018 年的 Google I/O 上，宣布 Chrome 在 Android 上将不再包含自动添加到主屏幕的提示。相反，您有责任创建用户体验。最终，Chrome
    团队决定更符合其他浏览器供应商构建体验的方式。
- en: The manifest specification takes time to define skeleton rules and minimal requirements
    for the add to homescreen experience. Rather than limiting all browsers to the
    same rules, the specification defines *instalability signals* that can be used
    as part of the add to homescreen prompt algorithm.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 清单规范需要时间来定义添加到主屏幕体验的骨架规则和最小要求。而不是将所有浏览器限制在相同的规则下，该规范定义了可以作为添加到主屏幕提示算法一部分使用的
    *安装信号*。
- en: The prompt sequence should honor a modicum of privacy considerations and wait
    for the document to be fully loaded before issuing a prompt. The process should
    also allow the user to inspect the application name, icon, start URL, origin,
    and other properties. It is also recommended that the end user be allowed to modify
    some of the values. For example, changing the application name on their homescreen.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 提示序列应尊重一定的隐私考虑，并在发出提示之前等待文档完全加载。该过程还应允许用户检查应用程序名称、图标、起始 URL、来源和其他属性。还建议允许最终用户修改一些值。例如，更改他们主屏幕上的应用程序名称。
- en: This is where the `beforeinstallprompt` event comes into play. This is your
    hook to a proper signal to prompt the user to install your progressive web app.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 `beforeinstallprompt` 事件发挥作用的地方。这是您将用户引导至安装您的渐进式 Web 应用的正确信号的钩子。
- en: This event triggers when heuristics are met to trigger an add to homescreen
    experience. But instead of a native or built-in prompt from Chrome, you are responsible
    to prompt the user at an appropriate time after this event triggers.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当满足触发添加到主屏幕体验的启发式条件时，将触发此事件。但不是来自 Chrome 的原生或内置提示，您需要在事件触发后适当时机提示用户。
- en: Why did they change this? I am not 100% certain, though personally I thought
    it was a good idea to help promote web app installs. But this is somewhat intrusive
    and does not fall in line with other best practices. For example, when we look
    at enabling push notifications later in this book, you should not automatically
    pester the visitor to enable notifications.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 他们为什么改变这个？我并不是 100% 确定，尽管我个人认为这是一个好主意，有助于推广 Web 应用程序的安装。但这有点侵扰性，并且不符合其他最佳实践。例如，当我们在这本书的后面部分查看启用推送通知时，您不应该自动打扰访客启用通知。
- en: There should be a little courtship before asking for the next level of engagement.
    I hate to use this analogy, but it has become canonical at this point; you can't
    just walk up to every pretty girl and ask them to marry you. It is a much longer
    process, where mutual trust must be earned.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在请求下一阶段的交往之前，应该有一些小小的求爱过程。我并不喜欢用这个比喻，但到了这个阶段，它已经变得很经典了；你不能只是走到每一个漂亮的女孩面前，就请求她们嫁给你。这是一个更长的过程，其中必须赢得双方的信任。
- en: Asking a visitor to add your icon to their homescreen is not exactly the same
    as marriage, but is more like asking them to go steady or be exclusively dating.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 请求访客将你的图标添加到他们的主屏幕上，并不完全等同于婚姻，但更像是请求他们开始稳定交往或独家约会。
- en: 'To use the `beforeinstallprompt` event, add an event listener callback in your
    site''s JavaScript:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`beforeinstallprompt`事件，在你的网站JavaScript中添加一个事件监听器回调：
- en: '[PRE14]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There are a few moving parts I need to review. First is that the event object
    `(e)` has two unique properties, platforms, and `userChoice`. Platforms are arrays
    indicating if the user can install a native app or a progressive web app. The
    `userChoice` property resolves a promise indicating if the user chose to install
    the app or not.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要审查几个移动部件。首先是事件对象`(e)`有两个独特的属性，`platforms`和`userChoice`。`platforms`是一个数组，表示用户是否可以安装原生应用或渐进式Web应用。`userChoice`属性解决了一个承诺，表示用户是否选择了安装应用。
- en: The other piece used in this code is the `deferredPrompt` variable. This is
    declared outside the event handler, so it can be used at a later time, in this
    case within the `showAddToHomeScreen` logic.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码中使用的另一个元素是`deferredPrompt`变量。这个变量是在事件处理程序外部声明的，因此可以在稍后使用，在这种情况下是在`showAddToHomeScreen`逻辑中。
- en: The `showAddToHomeScreen` method is called as soon as the event fires in this
    example, but a better practice is to defer the action to an appropriate time.
    Think about a user in the middle of an important application task. A sudden prompt
    to install the app would be a confusing distraction. It would serve you and the
    user better if you deferred the prompt till the action completes.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`showAddToHomeScreen`方法会在事件触发时立即被调用，但更好的做法是将操作推迟到适当的时间。想想一个正在执行重要应用任务的用户。突然的安装应用提示将会是一个令人困惑的干扰。如果你将提示推迟到操作完成，这将对你和用户都有好处。
- en: 'The `showAddToHomeScreen` method displays a special overlay, asking the user
    to install the app:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`showAddToHomeScreen`方法显示一个特殊的覆盖层，请求用户安装应用：'
- en: '[PRE15]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'I added a simple overlay to the 2048 application that slides up when made visible.
    Check out the following screenshot:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我在2048应用中添加了一个简单的覆盖层，当可见时它会向上滑动。查看以下截图：
- en: '![](img/00021.jpeg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00021.jpeg)'
- en: 'Once the prompt is accepted, the user is presented with the native add to homescreen
    prompt, as shown in the following screenshot:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦接受提示，用户将看到原生添加到主屏幕的提示，如下面的截图所示：
- en: '![](img/00022.jpeg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00022.jpeg)'
- en: 'Finally, the `addToHomeScreen` method utilizes the `deferredPrompt` variable
    that we saved a reference to in the `beforeinstallprompt` event handler. It calls
    the prompt method, which displays the built-in dialog that''s pictured in the
    preceding screenshot:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`addToHomeScreen`方法利用了我们保存在`beforeinstallprompt`事件处理程序中的`deferredPrompt`变量。它调用提示方法，显示前面截图所示的内置对话框：
- en: '[PRE16]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The method then uses the `userChoice` method to perform tasks based on the choice.
    Here, I am just logging the choice to the console. You could persist a token indicating
    the state, or cascade additional logic to perform additional tasks.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 然后该方法使用`userChoice`方法根据选择执行任务。在这里，我只是将选择记录到控制台。你可以持久化一个表示状态的令牌，或者级联额外的逻辑来执行其他任务。
- en: I think this is a good opportunity to initiate a thank you or onboarding experience.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这是一个启动感谢或入职体验的好机会。
- en: The 2048 application is a very simple add to homescreen experience. You can
    expand this functionality to educate the user or tell them the benefits of adding
    your app to their homescreen. Flipkart has a neat educational sequence that explains
    how to install the app and why they should. It is a good experience to model and
    one of the reasons why they have been successful in using progressive web apps.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 2048应用是一个非常简单的添加到主屏幕体验。你可以扩展这个功能来教育用户或告诉他们添加你的应用到他们主屏幕上的好处。Flipkart有一个很棒的教育序列，解释了如何安装应用以及为什么应该这样做。这是一个很好的体验模式，也是他们成功使用渐进式Web应用的原因之一。
- en: Disabling the homescreen prompt
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 禁用主屏幕提示
- en: 'The `beforeinstallprompt` event can also be used to suppress Chrome''s automatic
    prompt. This time, like breaking the default form submission, call the `preventDefault`
    function and return false:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`beforeinstallprompt`事件也可以用来抑制Chrome的自动提示。这次，就像打破默认表单提交一样，调用`preventDefault`函数并返回false：'
- en: '[PRE17]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will block the behavior in Chrome. Right now, I don't know how to suppress
    the prompt on other platforms as they do not support the `beforeinstallprompt`
    event yet.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在Chrome中阻止该行为。目前，我不知道如何在其他平台上抑制提示，因为它们还没有支持`beforeinstallprompt`事件。
- en: Tracking homescreen installs
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪主屏幕安装
- en: Once the homescreen install prompt displays, the user can choose to add the
    PWA to their homescreen, or ignore the prompt. Businesses should track and measure
    everything possible to make better decisions. Knowing how many homescreen installs
    there have been and what rate customers install their PWA provides insight into
    their marketing and technology investments.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦显示主屏幕安装提示，用户可以选择将PWA添加到他们的主屏幕，或者忽略提示。企业应该跟踪和衡量所有可能的事情，以做出更好的决策。了解有多少主屏幕安装以及客户安装他们的PWA的速率，可以提供对他们的营销和技术投资的洞察。
- en: 'Chrome supports the `beforeinstallprompt` event, which can be used to track
    this activity. You can add a handler to this event and log each user''s choice:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome支持`beforeinstallprompt`事件，可以用来跟踪这项活动。你可以添加一个处理程序到这个事件，并记录每个用户的选项：
- en: '[PRE18]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can POST the user's choice to your analytics system. This could be a custom
    API to your internal analytics or even tied to your third-party service, like
    Google Analytics.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将用户的选项POST到你的分析系统中。这可能是一个自定义API到你的内部分析，甚至可以绑定到你的第三方服务，如Google Analytics。
- en: The `beforeinstallprompt` is part of the web manifest specification, but at
    the time of writing this book, it is only supported by Chrome. Hopefully, other
    browsers will add support soon.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`beforeinstallprompt`是Web清单规范的一部分，但在撰写本书时，它只由Chrome支持。希望其他浏览器很快会添加支持。'
- en: Browsers that don't support `beforeinstallprompt` can also provide feedback.
    The web manifest's `start_url` can be set either to a special start URL, or a
    custom querystring value appended to the default URL. You will need to add logic
    to your log analyzer to track this behavior. Besides just knowing how many homescreen
    installs you have, you can also track how many times users have launched your
    PWA as opposed to those who have not installed your PWA.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 不支持`beforeinstallprompt`的浏览器也可以提供反馈。Web清单的`start_url`可以设置为特殊起始URL，或者追加到默认URL的自定义查询字符串值。你需要添加逻辑到你的日志分析器中，以跟踪这种行为。除了知道你有多少主屏幕安装之外，你还可以跟踪用户启动你的PWA的次数，以及那些没有安装你的PWA的用户。
- en: Polyfiling the homescreen experience on iOS and other legacy browsers
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在iOS和其他旧浏览器上多文件化主屏幕体验
- en: A common question developers and business owners ask is how to enable progressive
    web application features on iOS and older browsers like Internet Explorer. While
    all features cannot be hacked in these browsers, much of it can.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者和企业主经常问的一个问题是，如何在iOS和像Internet Explorer这样的旧浏览器上启用渐进式Web应用功能。虽然这些浏览器中所有功能都不能被破解，但大部分是可以的。
- en: When the iPhone was released, the initial application model was the web. They
    created an advanced experience for web apps that included the add to homescreen
    experience. Unfortunately, they did not make an automatic prompt experience. Who
    knows how advanced this might be today if developers did not cry out for the native
    app model.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当iPhone发布时，最初的应用模型是网页。他们为Web应用创建了一个高级体验，包括添加到主屏幕的体验。不幸的是，他们没有制作自动提示体验。谁知道如果开发者没有呼吁原生应用模型，今天这个体验可能会多么先进。
- en: 'What we can do is still leverage this capability and use Matteo Spinelli''s
    add to homescreen library ([http://cubiq.org/add-to-home-screen](http://cubiq.org/add-to-home-screen))
    in combination with Apple''s guidelines. Doing so allows your web apps to launch
    from user''s home screens, with or without Chrome. This is shown in the following
    screenshot:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做的仍然是利用这种能力，并使用Matteo Spinelli的添加到主屏幕库([http://cubiq.org/add-to-home-screen](http://cubiq.org/add-to-home-screen))与Apple的指南相结合。这样做可以让你的Web应用从用户的首页启动，无论是否有Chrome。这在上面的屏幕截图中有展示：
- en: '![](img/00023.jpeg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00023.jpeg)'
- en: It is important that you avoid duplicating homescreen prompts by not loading
    the Add to Home Screen library unless needed. The simplest way I have found to
    determine if the polyfil is needed is by using feature detecting service worker
    support. I chose this since browsers supporting service workers have some sort
    of add to homescreen experience. This may or may not remain true in the future,
    so be ready to change criteria if things change.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 避免重复加载主屏幕提示非常重要，除非需要，不要加载“添加到主屏幕”库。我发现确定是否需要polyfil的最简单方法是通过使用功能检测服务工作者支持。我选择这样做是因为支持服务工作者的浏览器有一些添加到主屏幕的体验。这在未来可能或可能不会保持不变，所以如果情况发生变化，请准备好更改标准。
- en: 'Without going into details, I like to dynamically load JavaScript references
    when a page is loaded. This process involves a series of feature detections to
    polyfil various requirements like Promises and the Fetch API:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 不深入细节，我喜欢在页面加载时动态加载JavaScript引用。这个过程涉及一系列功能检测，以polyfil各种要求，如Promises和Fetch API：
- en: '[PRE19]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can read more about dynamically loading scripts in *Jake Archibald's article **(*[https://www.html5rocks.com/en/tutorials/speed/script-loading](https://www.html5rocks.com/en/tutorials/speed/script-loading)*)*.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在*Jake Archibald的文章中了解更多关于动态加载脚本的信息**（[https://www.html5rocks.com/en/tutorials/speed/script-loading](https://www.html5rocks.com/en/tutorials/speed/script-loading)）*。
- en: 'You will also need to dynamically add the add to homescreen stylesheet. This
    time, add a feature detection script to your document''s `HEAD`:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要动态添加添加到主屏幕样式表。这次，在文档的`HEAD`中添加一个功能检测脚本：
- en: '[PRE20]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Users have been able to install web apps like this since the iPhone was released,
    but the process is manual and largely unknown by end users and developers alike.
    The lack of an automated prompt has been a key missing component of this feature.
    The experience it creates seems to be a model that the Chrome team and other platforms
    modeled to surface the progressive web application homescreen prompt.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 自从iPhone发布以来，用户就可以安装这样的Web应用，但这个过程是手动的，并且对最终用户和开发者来说都 largely unknown。缺乏自动提示一直是该功能的关键缺失组件。它创造出的体验似乎是Chrome团队和其他平台模仿以显示渐进式Web应用主屏幕提示的模型。
- en: Matteo's library only prompts the user and starts them down the manual process.
    but there are still a few extra steps that aren't intuitive that users must complete.
    The new native add to homescreen process has a pseudo automatic pipeline you can
    integrate. I think the add to homescreen library may serve as a good reference
    for designing your experience, so it is worth your time to look at it.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Matteo的库只提示用户并开始手动过程，但用户仍需完成一些不太直观的额外步骤。新的原生添加到主屏幕过程有一个伪自动管道可以集成。我认为添加到主屏幕库可以作为设计您体验的良好参考，所以花时间看看它是值得的。
- en: Should you polyfil response caching?
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你应该polyfil响应缓存吗？
- en: Request caching can also be polyfiled using IndexedDB. However, now that most
    browsers support service workers and caching, I don't think this approach has
    a wise use of resources. Outside of mobile use, Internet Explorer is the main
    browser without service worker support. At the time of writing this book, IE should
    really be used primarily in enterprises when their line of business applications
    have not been upgraded to modern standards.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 请求缓存也可以使用IndexedDB进行polyfile。然而，现在大多数浏览器都支持服务工作者和缓存，我认为这种方法并没有明智地利用资源。在移动使用之外，Internet
    Explorer是主要没有服务工作者支持的浏览器。在撰写本书时，IE应该主要用于企业，当他们的业务线应用程序尚未升级到现代标准时。
- en: This means a very small percentage of potential users that may open your PWA
    will do so in a browser without service worker support. When they do, it is pretty
    safe to say that they are most likely on a desktop of some sort with a reliable
    network connection.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着可能只有极少数潜在用户会在没有服务工作者支持的浏览器中打开您的PWA。当这种情况发生时，可以说他们很可能是某种桌面电脑，并且拥有可靠的网络连接。
- en: Despite developing hundreds of applications using an early implementation of
    client-side asset caching, I have officially deprecated this approach from my
    recommendations.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我使用早期实现的客户端资产缓存开发了数百个应用程序，但我已经正式从我的推荐中弃用了这种方法。
- en: Microsoft Edge and Internet Explorer
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微软Edge和Internet Explorer
- en: When Windows 8 shipped, Microsoft quietly shipped support for what they called
    a **Hosted Web App** (**HWA**). These are websites that reference a valid web
    manifest file and are served via HTTPS.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当Windows 8发布时，微软悄悄地发布了他们所谓的**托管Web应用**（**HWA**）的支持。这些是引用有效web清单文件的网站，并通过HTTPS提供服务。
- en: HWAs were an early precursor to progressive web apps. The obvious difference
    is no service worker requirement, which you would expect since the concept of
    a service worker had not be created yet.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: HWA是渐进式网络应用的早期前身。明显的区别是无需服务工作者要求，这是预料之中的，因为服务工作者这个概念当时还没有被创造出来。
- en: To be a HWA, you would create a `.appx` file for your application containing
    the manifest file and a reference to the public URL. Then, you would submit the
    HWA appx to the Windows Store and consumers could install the HWA from the store.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 要成为HWA，你需要为你的应用程序创建一个包含清单文件和公共URL引用的`.appx`文件。然后，你将HWA appx提交到Windows Store，消费者可以从商店安装HWA。
- en: The advantage of being a HWA is that these web apps have full access to all
    the Windows platform APIs, just like any native application. The reason that they
    have this privilege is that once installed, they form the store and are full blown
    applications.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 成为HWA的优势在于这些网络应用可以完全访问所有Windows平台API，就像任何原生应用一样。它们拥有这种特权的原因是，一旦安装，它们就构成了商店，并且是完整的应用程序。
- en: The main difference is that the UI components and business logic are all just
    web pages. This gives you the benefit of also being able to update the application
    immediately, without going through the audit delays that plague all mobile app
    stores.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 主要区别在于UI组件和业务逻辑都是网页。这让你能够立即更新应用程序，而无需经历所有移动应用商店都面临的审核延迟。
- en: In many ways, this is a cross between a traditional native app and the WebAPK
    functionality supported by Chrome on Android.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，这就像是传统原生应用和Chrome在Android上支持的WebAPK功能之间的结合。
- en: Microsoft even created an online tool called Manifoldjs to help with the HWA
    creation and submission process. In recent years, Manifold has been remodeled
    and has a new name, PWA Builder ([https://pwabuilder.com](https://pwabuilder.com)).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 微软甚至创建了一个名为Manifoldjs的在线工具，以帮助进行HWA创建和提交过程。近年来，Manifold已经重新设计，并有了新的名字，PWA Builder([https://pwabuilder.com](https://pwabuilder.com))。
- en: Today, PWA Builder takes any public website and provides the resources to convert
    it into a Progressive Web Application and submit it not only to the Windows Store,
    but also compile Cordova apps for the Apple and Google Play stores.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，PWA Builder可以将任何公共网站转换为渐进式网络应用，并提供资源将其提交到Windows Store，同时还能编译适用于Apple和Google
    Play商店的Cordova应用。
- en: If you are wondering, there are many HWA and PWAs already in the Windows Store.
    Twitter and Pandora are a pair of high profile Windows progressive web apps. In
    fact, Twitter is in the process of deprecating all their native apps to PWA in
    the future.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有所疑问，Windows Store中已经有很多HWA和PWA了。Twitter和Pandora是一对知名Windows渐进式网络应用。事实上，Twitter正在逐步淘汰所有原生应用，未来将全部转向PWA。
- en: I will go into more detail about PWA Builder in [Chapter 10](part0222.html#6JMSS0-f12cdcca08b54960b3d271452dc7667d),
    *Service Worker Tools*. Trust me, you will not want to skip this chapter, as PWA
    Builder and the other tools we have mentioned have all become staples of my PWA
    workflow.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在第10章[第10章](part0222.html#6JMSS0-f12cdcca08b54960b3d271452dc7667d)，*服务工作者工具*中详细介绍PWA
    Builder。相信我，你不会想跳过这一章，因为PWA Builder和我们所提到的其他工具都已经成为了我的PWA工作流程的基石。
- en: Today, Microsoft Edge supports service workers, which means that the concept
    of HWA has evolved into the consumption of progressive web apps. The same process
    applies to store submission and you still have full, native application capabilities.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，Microsoft Edge支持服务工作者，这意味着HWA的概念已经演变为渐进式网络应用的消费。同样的过程适用于商店提交，你仍然拥有完整、原生的应用功能。
- en: Windows 8 and Internet Explorer also support native Live Tiles for web applications
    pinned to the start screen. When Edge and Windows 10 were released, Live Tile
    support did not make the cut. This does not mean you cannot add websites to the
    start menu, though.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 8和Internet Explorer也支持将网络应用固定到开始屏幕的本地Live Tiles。当Edge和Windows 10发布时，Live
    Tile支持并未被包含在内。但这并不意味着你不能将网站添加到开始菜单。
- en: 'In Microsoft Edge, the user can open the menu via the `...` icon in the top
    right corner. This exposes a menu of many options, one being pin this page to
    Start. Another option is to add the page to the taskbar:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在Microsoft Edge中，用户可以通过右上角的`...`图标打开菜单。这会显示一个包含许多选项的菜单，其中一个是将此页面固定到开始菜单。另一个选项是将页面添加到任务栏：
- en: '![](img/00024.jpeg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00024.jpeg)'
- en: 'As you may recall, Internet Explorer supported a rich pinned site feature in
    the Windows 7 era. Recently, support for the pinned sites has returned. Like iOS,
    you can customize this experience via `meta` tags:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，在 Windows 7 时代，Internet Explorer 支持丰富的锁定网站功能。最近，对锁定网站的支持已经恢复。就像 iOS 一样，你可以通过
    `meta` 标签自定义此体验：
- en: '[PRE21]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Pinned sites still work from Internet Explorer, but as enterprises upgrade to
    Windows 10, the use of Internet Explorer as a primary browser is quickly fading.
    This does not mean you should skip the pinned site meta data. I still include
    it, for now.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 锁定网站仍然可以通过 Internet Explorer 使用，但随着企业升级到 Windows 10，作为主要浏览器的 Internet Explorer
    使用率正在迅速下降。这并不意味着你应该跳过锁定网站的元数据。目前我仍然包括它。
- en: I don't want to put these solutions in a negative space because they are both
    good first attempts to advance the web platform to give users a better user experience.
    Maybe you can see how these attempts have served as a reference for the modern
    web manifest specification.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我不想将这些解决方案放在负面空间，因为它们都是将网络平台推进以提供更好用户体验的良好首次尝试。也许你可以看到这些尝试如何作为现代网络清单规范参考的依据。
- en: Now that Microsoft Edge has shipped service workers, the team is busy working
    on what their add to start menu (my term, not theirs) will look like. They provided
    some early protypes at the 2018 Build conference, but at the time of writing this
    book, there is nothing definitive.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，随着 Microsoft Edge 发布了服务工作者，团队正忙于研究他们的添加到开始菜单（我的术语，不是他们的）将是什么样子。他们在 2018 年
    Build 大会上提供了一些早期原型，但在撰写本书时，还没有确定的东西。
- en: My best guess is that some time in the late summer or early fall we may see
    something more concrete from Redmond at their annual Edge Developer Summit.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我最好的猜测是在夏末或初秋，我们可能会在 Redmond 的年度 Edge 开发者峰会上看到一些更具体的内容。
- en: Benefits await without Polyfils
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无需 Polyfils 即可享受好处
- en: Even if you don't polyfil the add to homescreen behavior, your web application
    will see user engagement gains on iOS and other non-PWA platforms. Many companies
    are publicly sharing their improvements in various progressive web application
    case studies.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你没有 polyfil 添加到主屏幕的行为，你的网络应用在 iOS 和其他非 PWA 平台上也会看到用户参与度的提升。许多公司正在公开分享他们在各种渐进式网络应用案例研究中的改进。
- en: Wego, an online air travel booking service, reported a 50% increase in conversions
    and 35% longer sessions on iOS. Mynet increased page views by 15%, and a 23% lower
    bounce rate on iOS. Lancôme increased iOS sessions by 53%. These are just a small
    sampling of positive progressive web application case studies.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在线航空预订服务 Wego 报告称，在 iOS 上的转化率提高了 50%，会话时间延长了 35%。Mynet 页面浏览量增加了 15%，iOS 上的跳出率降低了
    23%。兰蔻的 iOS 会话增加了 53%。这些都是积极的渐进式网络应用案例研究的小样本。
- en: These companies are reaping the rewards of PWAs on iOS because, by nature, properly
    architected websites perform better. Plus, creating a progressive web application
    forces you to put the customer first, not the developer. When you do this, you
    create a better user experience, which directly correlates to improved key performance
    indicators.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这些公司正在享受 iOS 上 PWAs 的好处，因为从本质上讲，正确架构的网站性能更佳。此外，创建渐进式网络应用迫使你将客户放在首位，而不是开发者。当你这样做时，你会创造更好的用户体验，这直接关联到关键性能指标的改善。
- en: Following progressive web application guidelines forces you to deliver a user
    first experience that works across all platforms.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循渐进式网络应用指南迫使你提供跨所有平台工作的以用户为中心的体验。
- en: Testing the add to homescreen experience in Chrome
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Chrome 中测试添加到主屏幕的体验
- en: The developer experience would not be complete without the ability to test the
    add to homescreen experience. Chrome has added tooling which allows you to see
    how your web manifest file is interpreted and manually trigger the prompt.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 没有测试添加到主屏幕的体验，开发者的体验将不完整。Chrome 添加了工具，允许你查看你的网页清单文件是如何被解释的，并手动触发提示。
- en: 'Launch Chrome''s developer tools by using *F12* and select the Application
    tab. There are many choices to help you debug various aspects of a progressive
    web application. Under Application, there is a Manifest choice. This will display
    the properties of your web manifest file, including each icon. This is a quick
    way for you to determine if your manifest is interpreted correctly, as you can
    see in the following screenshot:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 *F12* 启动 Chrome 的开发者工具并选择应用程序标签页。有许多选择可以帮助你调试渐进式网络应用的各个方面。在应用程序下，有一个“清单”选项。这将显示你的网页清单文件属性，包括每个图标。这是一个快速确定你的清单是否被正确解释的方法，如下面的截图所示：
- en: '![](img/00025.gif)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00025.gif)'
- en: 'There is also a link to manually trigger the Add to Home Screen experience.
    Check out the following screenshot:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个链接可以手动触发添加到主屏幕体验。查看以下截图：
- en: '![](img/00026.gif)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00026.gif)'
- en: 'Clicking the link in the developer tools will trigger the Add to homescreen
    prompt. Take a look at the following screenshot:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 点击开发者工具中的链接将触发添加到主屏幕提示。请看以下截图：
- en: '![](img/00027.jpeg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00027.jpeg)'
- en: The best way to test your experience is to deploy your progressive web app to
    the cloud, with HTTPS enabled. Open your site in a PWA supporting browser and
    do your best to adhere to the rules to trigger the add to homescreen prompt.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 测试您的最佳方式是将您的渐进式Web应用部署到云端，并启用HTTPS。在支持PWA的浏览器中打开您的网站，并尽可能遵守规则以触发添加到主屏幕提示。
- en: It is always a best practice to test your site across multiple devices. I recommend
    at least one iPhone, Android, and desktop with multiple browsers. Having these
    real user experiences available gives you confidence that your deployed PWA works
    as expected.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在多个设备上测试您的网站始终是一个最佳实践。我建议至少有一部iPhone、一部Android手机和一台配备多个浏览器的桌面电脑。拥有这些真实用户体验可以让您有信心，您部署的PWA按预期工作。
- en: Summary
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The line between native and progressive web applications is very blurred, thanks
    in part to the web manifest and add to home screen experience. No longer is the
    homescreen reserved to native applications; the web is welcomed by all platforms.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Web清单和添加到主屏幕体验，原生和渐进式Web应用之间的界限变得非常模糊。主屏幕不再仅限于原生应用；Web被所有平台所欢迎。
- en: Today, most browsers provide a first-class app experience for progressive web
    applications, and while Apple has yet to adopt the progressive web application
    standards, they were the first to make the web into an app experience. It is up
    to developers and businesses to adopt and implement the rich add to homescreen
    capabilities.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，大多数浏览器都为渐进式Web应用提供了高级应用体验，尽管苹果公司尚未采用渐进式Web应用标准，但他们却是第一个将Web体验转变为应用体验的公司。开发者和企业需要采用并实施丰富的添加到主屏幕功能。
- en: Triggering the add to homescreen experience is the first step in levelling up
    your web presence.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 触发添加到主屏幕体验是提升您的网络存在感的第一步。
- en: Even if the user has not added your PWA to their homescreen, you can still take
    advantage of progressive web app features. However, before we dive into service
    workers, let's take a look at adding SSL to your website.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 即使用户尚未将您的PWA添加到他们的主屏幕，您仍然可以利用渐进式Web应用的功能。然而，在我们深入探讨服务工作者之前，让我们看看如何将SSL添加到您的网站上。
- en: The next chapter covers security or use of HTTPS, which is one of the three
    primary technical requirements so that an app can be a Progressive Web App.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍安全性或HTTPS的使用，这是使应用成为渐进式Web应用的三项主要技术要求之一。
