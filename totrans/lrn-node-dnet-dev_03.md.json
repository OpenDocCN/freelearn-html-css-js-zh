["```js\nvar myVariable = 0; \nconsole.log(typeof myVariable); // Prints \"number\"\nmyVariable = \"1\";\nconsole.log(typeof myVariable); // Prints \"string\"\n```", "```js\nconsole.log(2 == \"2\"); // Prints \"true\"\n```", "```js\nconsole.log(2 === \"2\"); // Prints \"false\"\nconsole.log(2 !== \"2\"); // Prints \"true\"\n```", "```js\nvar singleQuoted = '\"Hey\", I said, \"I\\'m a string\"';\nvar doubleQuoted = \"\\\"Hey\\\", I said, \\\"I'm a string\\\"\";\nconsole.log(doubleQuoted === singleQuoted); // Prints \"true\"\n\nvar expression = 'Hey';\nvar templated = `\"${expression}\", I said, \"I'm a string\"`;\nconsole.log(templated === singleQuoted); // Prints \"true\"\n```", "```js\nconsole.log(1 / 0); // Prints \"Infinity\"\nconsole.log(Infinity + 1); // Prints \"Infinity\" \nconsole.log((1 / 0) === (2 / 0)); // Prints \"true\"\n\nvar notANumber = parseInt(\"foo\");\nconsole.log(notANumber); // Prints \"NaN\"\nconsole.log(notANumber === NaN); // Prints \"false\"\nconsole.log(isNaN(notANumber)); // Prints \"true\"\n```", "```js\nvar declared;\nconsole.log(typeof declared); // Prints \"undefined\"\nconsole.log(declared === undefined); // Prints \"true\"\n\nconsole.log(typeof undeclared); // Prints \"undefined\"\nconsole.log(undeclared === undefined); // throws ReferenceError\n```", "```js\nvar numbers = [1,2,3,4,5,6,7,8];\n\nvar filteredImperatively = [];\nfor (var i = 0; i < numbers.length; ++i) {\n    var number = numbers[i];\n    if (number % 2 === 0) {\n        filteredImperatively.push(number);\n    }\n}\nconsole.log(filteredImperatively); // Prints [2, 4, 6, 8]\n\nvar filteredFunctionally =\n    numbers.filter(function(x) { return x % 2 === 0; });\nconsole.log(filteredFunctionally); // Prints [2, 4, 6, 8]\n```", "```js\nvar numbers = [1,2,3,4,5,6,7,8];\nvar filteredFunctionally = numbers.filter(x => x % 2 === 0);\nconsole.log(filteredFunctionally); // Prints [2, 4, 6, 8]\n```", "```js\nvar max = (a, b) => {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n};\n```", "```js\nfunction scopeDemo() {\n    for (var i = 0; i < 10; ++i) {\n        var j = i * 2;\n    }\n    console.log(i, j);\n}\nscopeDemo();\n```", "```js\nfunction scopeDemo() {\n    var i, j;\n    for (i = 0; i < 10; ++i) {\n        j = i * 2;\n    }\n    console.log(i, j);\n}\nscopeDemo();\n```", "```js\nfunction scopeDemo() {\n    \"use strict\";\n    for (let i = 0; i < 10; ++i) {\n        let j = i * 2;\n    }\n    console.log(i, j); // Throws ReferenceError: i is not defined\n}\nscopeDemo();\n```", "```js\nvar myObject = {\n    myProperty: \"myValue\",\n    myMethod: function() {\n        return `myProperty has value \"${this.myProperty}\"`;\n    }\n};\nconsole.log(myObject.myMethod());\n```", "```js\nfunction createPoint(x, y) {\n    return {\n        x: x,\n        y: y,\n        isAboveDiagonal: function() {\n            return this.y > this.x;\n        }\n    };\n}\n\nvar myPoint = createPoint(1, 2);\nconsole.log(myPoint.isAboveDiagonal()); // Prints \"true\"\n```", "```js\nvar pointPrototype = {\n    isAboveDiagonal: function() {\n        return this.y > this.x;\n    }\n};\n\nfunction createPoint(x, y) {\n    var newPoint = Object.create(pointPrototype);\n    newPoint.x = x;\n    newPoint.y = y;\n    return newPoint;\n}\n\nvar myPoint = createPoint(1, 2); \nconsole.log(myPoint.isAboveDiagonal()); // Prints \"true\"\n```", "```js\nvar pointPrototype = {\n    isAboveDiagonal: function() {\n        return this.y > this.x;\n    }\n}\n\nfunction Point(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\nfunction createPoint(x, y) {\n    var newPoint = Object.create(pointPrototype);\n Point.apply(newPoint, arguments);\n    return newPoint;\n}\n\nvar myPoint = createPoint(1, 2);\n```", "```js\nfunction Point(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\nPoint.prototype.isAboveDiagonal = function() {\n    return this.y > this.x;\n}\n\nfunction createPoint(x, y) {\n var newPoint = Object.create(Point.prototype);\n    Point.apply(newPoint, arguments);\n    return newPoint;\n}\n\nvar myPoint = createPoint(1, 2);\n```", "```js\nfunction Point(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\nPoint.prototype.isAboveDiagonal = function() {\n    return this.y > this.x;\n}\n\nvar myPoint = new Point(1, 2);\n```", "```js\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    isAboveDiagonal() {\n        return this.y > this.x;\n    }\n}\n\nvar myPoint = new Point(1, 2);\n```", "```js\nclass UncertainPoint extends Point {\n    constructor(x, y, uncertainty) {\n        super(x, y);\n        this.uncertainty = uncertainty;\n    }\n\n    upperLimit() {\n        return this.y + this.uncertainty;\n    }\n\n    lowerLimit() {\n        return this.y - this.uncertainty;\n    }\n}\n\nvar myUncertainPoint = new Point(1, 2, 0.5);\n```"]