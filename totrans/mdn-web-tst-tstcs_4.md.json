["```js\n    $ cd test-project/\n    $ mkdir tests\n    ```", "```js\n    $ cd tests/\n    $ touch basic-tests.js\n    ```", "```js\n    const { Selector } = require('testcafe');\n    ```", "```js\n    const { Selector } = require('testcafe'); fixture('My first set of tests');\n    ```", "```js\n    const { Selector } = require('testcafe'); fixture('My first set of tests'); test('My first test', async (t) => {    // Your test code });\n    ```", "```js\n    const { Selector } = require('testcafe');fixture('My first set of tests')    .page('http://demo.redmine.org/');test('My first test', async (t) => {    // Your test code });\n    ```", "```js\n$ npx testcafe chrome tests/basic-tests.js\n```", "```js\n$ npx testcafe\n```", "```js\nconst { Selector } = require('testcafe');fixture('My first set of tests')    .page('http://demo.redmine.org/');test('My first test', async (t) => {    await t.click('.login');});\n```", "```js\nconst { Selector } = require('testcafe');fixture('My first set of tests')    .page('http://demo.redmine.org/');test('My first test', async (t) => {    await t.click('.login-wrong');});\n```", "```js\n$ npx testcafe chrome tests/basic-test-wrong.js\n```", "```js\nconst { Selector } = require('testcafe');fixture('My first set of tests')    .page('http://demo.redmine.org/');test('My first test', async (t) => {    await t.debug().click('.login-wrong');});\n```", "```js\n$ npx testcafe chrome tests/basic-test-wrong.js --debug-mode\n```", "```js\n$ npx testcafe chrome tests/basic-test-wrong.js --debug-on-fail\n```", "```js\n    const { Selector } = require('testcafe');fixture('My first set of tests')    .page('http://demo.redmine.org/');test('My first test', async (t) => {    debugger;    await t.click('.login-wrong');});\n    ```", "```js\n    $ npx testcafe --inspect-brk chrome tests/basic-test-wrong.js\n    ```", "```js\nconst { Selector } = require('testcafe');fixture('Redmine log in tests')    .page('http://demo.redmine.org/');test('Create a new user', async (t) => {\n```", "```js\n        await t.click('.register')\n    ```", "```js\n            .typeText('#user_login','test_user_testcafe_poc1234@sharklasers.com')\n    ```", "```js\n            .typeText('#user_password','test_user_testcafe_poc')\n    ```", "```js\n            .typeText('#user_password_confirmation', 'test_user_testcafe_poc')\n    ```", "```js\n            .typeText('#user_firstname','test_user')\n    ```", "```js\n            .typeText('#user_lastname','testcafe_poc')\n    ```", "```js\n            .typeText('#user_mail', 'test_user_testcafe_poc1234@sharklasers.com')\n    ```", "```js\n            .click('[value=\"Submit\"]');});\n    ```", "```js\n$ npm install js-automation-tools --save-dev\n```", "```js\nconst { Selector } = require('testcafe');const { stamp } = require('js-automation-tools');const randomDigits = stamp.getTimestamp();fixture('Redmine log in tests')    .page('http://demo.redmine.org/');test('Create a new user', async (t) => {    await t.click('.register');        .typeText('#user_login', `test_user_testcafe_    poc${randomDigits}@sharklasers.com`)        .typeText('#user_password', 'test_user_testcafe_poc')        .typeText('#user_password_confirmation', 'test_user_testcafe_poc')        .typeText('#user_firstname', 'test_user')        .typeText('#user_lastname', 'testcafe_poc')        .typeText('#user_mail', `test_user_testcafe_poc${randomDigits}@sharklasers.com`)        .click('[value=\"Submit\"]');});\n```", "```js\nconst { Selector } = require('testcafe');const { stamp } = require('js-automation-tools');const randomDigits = stamp.getTimestamp();fixture('Redmine log in tests')    .page('http://demo.redmine.org/');test('Create a new user', async (t) => {    await t.click('.register');        .typeText('#user_login', `test_user_testcafe_poc${randomDigits}@sharklasers.com`)        .typeText('#user_password', 'test_user_testcafe_poc')        .typeText('#user_password_confirmation', 'test_user_testcafe_poc')        .typeText('#user_firstname', 'test_user')        .typeText('#user_lastname', 'testcafe_poc')        .typeText('#user_mail', `test_user_testcafe_poc${randomDigits}@sharklasers.com`)        .click('[value=\"Submit\"]');});test('Log in', async (t) => {\n```", "```js\n        await t.click('.login')\n    ```", "```js\n            .typeText('#username', `test_user_testcafe_poc${randomDigits}@sharklasers.com`)\n    ```", "```js\n            .typeText('#password', 'test_user_testcafe_poc')\n    ```", "```js\n            .click('[name=\"login\"]');});\n    ```", "```js\nconst { Selector } = require('testcafe');const { stamp } = require('js-automation-tools');const randomDigits = stamp.getTimestamp();fixture('Redmine log in tests')    .page('http://demo.redmine.org/');test('Create a new user', async (t) => {    await t.click('.register');        .typeText('#user_login', `test_user_testcafe_poc${randomDigits}@sharklasers.com`)        .typeText('#user_password', 'test_user_testcafe_poc')        .typeText('#user_password_confirmation', 'test_user_testcafe_poc')        .typeText('#user_firstname', 'test_user')        .typeText('#user_lastname', 'testcafe_poc')        .typeText('#user_mail', `test_user_testcafe_poc${randomDigits}@sharklasers.com`)        .click('[value=\"Submit\"]')        .expect(Selector('#flash_notice').innerText).eql('Your account has been activated. You can now log in.');});\n```", "```js\ntest('Log in', async (t) => {    await t.click('.login')        .typeText('#username', `test_user_testcafe_poc${randomDigits}@sharklasers.com`)        .typeText('#password', 'test_user_testcafe_poc')        .click('[name=\"login\"]')        .expect(Selector('#loggedas').exists).ok();});\n```", "```js\nconst { Selector } = require('testcafe');const { stamp } = require('js-automation-tools');const randomDigits = stamp.getTimestamp();fixture('Redmine log in tests')    .page('http://demo.redmine.org/');// ...test('Log out', async (t) => {    await t.click('.login')        .typeText('#username', `test_user_testcafe_poc${randomDigits}@sharklasers.com`)        .typeText('#password', 'test_user_testcafe_poc')        .click('[name=\"login\"]')        .click('.logout')        .expect(Selector('#loggedas').exists).notOk()        .expect(Selector('.login').exists).ok();});\n```", "```js\nconst { Selector, ClientFunction } = require('testcafe');const { stamp } = require('js-automation-tools');const randomDigits = stamp.getTimestamp();const getPageUrl = ClientFunction(() => {    return window.location.href;});fixture('Redmine log in tests')    .page('http://demo.redmine.org/');// ...fixture('Redmine entities creation tests')    .page('http://demo.redmine.org/');test('Create a new project', async (t) => {\n```", "```js\n        await t.click('.login')        .typeText('#username', `test_user_testcafe_poc${randomDigits}@sharklasers.com`)        .typeText('#password', 'test_user_testcafe_poc')        .click('[name=\"login\"]')\n    ```", "```js\n            .click('#top-menu .projects')\n    ```", "```js\n            .click('.icon-add')\n    ```", "```js\n            .typeText('#project_name', `test_project${randomDigits}`)\n    ```", "```js\n            .click('[value=\"Create\"]')\n    ```", "```js\n            .expect(Selector('#flash_notice').innerText).eql('Successful creation.')\n    ```", "```js\n            .expect(getPageUrl()).contains(`/projects/test_project${randomDigits}/settings`);});\n    ```", "```js\nconst { Selector, ClientFunction } = require('testcafe');const { stamp } = require('js-automation-tools');\n```", "```js\nconst randomDigits1 = stamp.getTimestamp();const randomDigits2 = stamp.resetTimestamp();const getPageUrl = ClientFunction(() => {    return window.location.href;});fixture('Redmine log in tests')    .page('http://demo.redmine.org/');// ...fixture('Redmine entities creation tests')    .page('http://demo.redmine.org/');test('Create a new project', async (t) => {    await t.click('.login')        .typeText('#username', `test_user_testcafe_poc${randomDigits1}@sharklasers.com`)        .typeText('#password', 'test_user_testcafe_poc')        .click('[name=\"login\"]')        .click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_project${randomDigits1}`)        .click('[value=\"Create\"]')        .expect(Selector('#flash_notice').innerText).eql('Successful creation.')        .expect(getPageUrl()).contains(`/projects/test_project${randomDigits1}/settings`);});test('Create a new issue', async (t) => {\n```", "```js\n        await t.click('.login')        .typeText('#username', `test_user_testcafe_poc${randomDigits1}@sharklasers.com`)        .typeText('#password', 'test_user_testcafe_poc')        .click('[name=\"login\"]')\n    ```", "```js\n            .click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_        project${randomDigits2}`).click('[value=\"Create\"]')\n    ```", "```js\n            .click('#top-menu .projects')\n    ```", "```js\n            .click(`[href*=\"/projects/test_  project${randomDigits2}\"]`)\n    ```", "```js\n            .click('.new-issue')\n    ```", "```js\n            .typeText('#issue_subject', `Test issue ${randomDigits2}`)\n    ```", "```js\n            .typeText('#issue_description', `Test issue description ${randomDigits2}`)\n    ```", "```js\n            .click('#issue_priority_id')        .click('#issue_priority_id option[value=\"5\"]')\n    ```", "```js\n            .click('[value=\"Create\"]')\n    ```", "```js\n            .expect(Selector('#flash_notice').innerText).contains('created.');});\n    ```", "```js\nconst { Selector, ClientFunction } = require('testcafe');const { stamp } = require('js-automation-tools');const randomDigits1 = stamp.getTimestamp();const randomDigits2 = stamp.resetTimestamp();const randomDigits3 = stamp.resetTimestamp();// ...test('Verify that the issue is displayed on a project page', async (t) => {\n```", "```js\n        await t.click('.login')        .typeText('#username', `test_user_testcafe_poc${randomDigits1}@sharklasers.com`)        .typeText('#password', 'test_user_testcafe_poc')        .click('[name=\"login\"]')\n    ```", "```js\n            .click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_project${randomDigits3}`)        .click('[value=\"Create\"]')\n    ```", "```js\n            .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits3}\"]`)        .click('.new-issue')        .typeText('#issue_subject', `Test issue ${randomDigits3}`)        .typeText('#issue_description', `Test issue description ${randomDigits3}`)        .click('#issue_priority_id')        .click('#issue_priority_id option[value=\"5\"]')        .click('[value=\"Create\"]')\n    ```", "```js\n            .click('#top-menu .projects')\n    ```", "```js\n            .click(`[href*=\"/projects/test_project${randomDigits3}\"]`)\n    ```", "```js\n            .click('#main-menu .issues')\n    ```", "```js\n            .expect(Selector('.subject a').innerText).contains(`Test issue ${randomDigits3}`);});\n    ```", "```js\nconst { Selector, ClientFunction } = require('testcafe');const { stamp } = require('js-automation-tools');const randomDigits1 = stamp.getTimestamp();const randomDigits2 = stamp.resetTimestamp();const randomDigits3 = stamp.resetTimestamp();const randomDigits4 = stamp.resetTimestamp();// ...fixture('Redmine entities editing tests')    .page('http://demo.redmine.org/');test('Edit the issue', async (t) => {\n```", "```js\n        await t.click('.login')        .typeText('#username', `test_user_testcafe_  poc${randomDigits1}@sharklasers.com`)        .typeText('#password', 'test_user_testcafe_poc')        .click('[name=\"login\"]')\n    ```", "```js\n            .click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_project${randomDigits4}`)        .click('[value=\"Create\"]')\n    ```", "```js\n            .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits4}\"]`)        .click('.new-issue')        .typeText('#issue_subject', `Test issue ${randomDigits4}`)        .typeText('#issue_description', `Test issue description ${randomDigits4}`)        .click('#issue_priority_id')        .click(Selector('#issue_priority_id option').withText('High'))        .click('[value=\"Create\"]')\n    ```", "```js\n            .click('#top-menu .projects')\n    ```", "```js\n            .click(`[href*=\"/projects/test_project${randomDigits4}\"]`)\n    ```", "```js\n            .click('#main-menu .issues')\n    ```", "```js\n            .click(Selector('.subject a').withText(`Test issue ${randomDigits4}`))\n    ```", "```js\n            .click('.icon-edit')\n    ```", "```js\n            .selectText('#issue_subject')        .pressKey('delete')        .typeText('#issue_subject', `Issue ${randomDigits4} updated`)\n    ```", "```js\n            .click('#issue_priority_id')        .click(Selector('#issue_priority_id option').withText('Normal'))\n    ```", "```js\n            .click('[value=\"Submit\"]')\n    ```", "```js\n            .expect(Selector('#flash_notice').innerText).eql('Successful update.');});\n    ```", "```js\nconst { Selector, ClientFunction } = require('testcafe');const { stamp } = require('js-automation-tools');const randomDigits1 = stamp.getTimestamp();const randomDigits2 = stamp.resetTimestamp();const randomDigits3 = stamp.resetTimestamp();const randomDigits4 = stamp.resetTimestamp();const randomDigits5 = stamp.resetTimestamp();// ...test('Verify that the updated issue is displayed on a project page', async (t) => {\n```", "```js\n        await t.click('.login')        .typeText('#username', `test_user_testcafe_poc${randomDigits1}@sharklasers.com`)        .typeText('#password', 'test_user_testcafe_poc')        .click('[name=\"login\"]')\n    ```", "```js\n            .click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_project${randomDigits5}`)        .click('[value=\"Create\"]')\n    ```", "```js\n            .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits5}\"]`)        .click('.new-issue')        .typeText('#issue_subject', `Test issue ${randomDigits5}`)        .typeText('#issue_description', `Test issue \n             description ${randomDigits5}`)        .click('#issue_priority_id')        .click(Selector('#issue_priority_id option').withText('High'))        .click('[value=\"Create\"]')\n    ```", "```js\n            .click('#top-menu .projects')\n    ```", "```js\n            .click(`[href*=\"/projects/test_project${randomDigits5}\"]`)\n    ```", "```js\n            .click('#main-menu .issues')\n    ```", "```js\n            .click(Selector('.subject a').withText(`Test issue ${randomDigits5}`))\n    ```", "```js\n            .click('.icon-edit')\n    ```", "```js\n            .selectText('#issue_subject')        .pressKey('delete')        .typeText('#issue_subject', `Issue ${randomDigits5} updated`)\n    ```", "```js\n            .click('#issue_priority_id')        .click(Selector('#issue_priority_id option').withText('Normal'))\n    ```", "```js\n            .click('[value=\"Submit\"]')\n    ```", "```js\n            .click('#main-menu .issues')\n    ```", "```js\n            .expect(Selector('.subject a').innerText).eql(`Issue ${randomDigits5} updated`);});\n    ```", "```js\nconst { Selector, ClientFunction } = require('testcafe');const { stamp } = require('js-automation-tools');const randomDigits1 = stamp.getTimestamp();const randomDigits2 = stamp.resetTimestamp();const randomDigits3 = stamp.resetTimestamp();const randomDigits4 = stamp.resetTimestamp();const randomDigits5 = stamp.resetTimestamp();const randomDigits6 = stamp.resetTimestamp();// ...test('Search for the issue', async (t) => {\n```", "```js\n        await t.click('.login')        .typeText('#username', `test_user_testcafe_poc${randomDigits1}@sharklasers.com`)        .typeText('#password', 'test_user_testcafe_poc')        .click('[name=\"login\"]')\n    ```", "```js\n            .click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_project${randomDigits6}`)        .click('[value=\"Create\"]')\n    ```", "```js\n            .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits6}\"]`)        .click('.new-issue')        .typeText('#issue_subject', `Test issue ${randomDigits6}`)        .typeText('#issue_description', `Test issue description ${randomDigits6}`)        .click('#issue_priority_id')        .click(Selector('#issue_priority_id option').withText('High'))        .click('[value=\"Create\"]')\n    ```", "```js\n            .navigateTo('http://demo.redmine.org/search')\n    ```", "```js\n            .typeText('#search-input', `Test issue ${randomDigits6}`)\n    ```", "```js\n            .click('[value=\"Submit\"]')\n    ```", "```js\n            .expect(Selector('#search-results').innerText).contains(`Test issue ${randomDigits6}`);});\n    ```", "```js\nconst { Selector, ClientFunction } = require('testcafe');const { stamp } = require('js-automation-tools');const randomDigits1 = stamp.getTimestamp();const randomDigits2 = stamp.resetTimestamp();const randomDigits3 = stamp.resetTimestamp();const randomDigits4 = stamp.resetTimestamp();const randomDigits5 = stamp.resetTimestamp();const randomDigits6 = stamp.resetTimestamp();const randomDigits7 = stamp.resetTimestamp();// ...test('Delete the issue', async (t) => {\n```", "```js\n        await t.click('.login')        .typeText('#username', `test_user_testcafe_poc${randomDigits1}@sharklasers.com`)        .typeText('#password', 'test_user_testcafe_poc')        .click('[name=\"login\"]')\n    ```", "```js\n            .click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_project${randomDigits7}`)        .click('[value=\"Create\"]')\n    ```", "```js\n            .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits7}\"]`)        .click('.new-issue')        .typeText('#issue_subject', `Test issue ${randomDigits7}`)        .typeText('#issue_description', `Test issue description ${randomDigits7}`)        .click('#issue_priority_id')        .click(Selector('#issue_priority_id option').withText('High'))        .click('[value=\"Create\"]')\n    ```", "```js\n            .click('#top-menu .projects')\n    ```", "```js\n            .click(`[href*=\"/projects/test_project${randomDigits7}\"]`)\n    ```", "```js\n            .click('#main-menu .issues')\n    ```", "```js\n            .click(Selector('.subject a').withText(`Test issue ${randomDigits7}`))\n    ```", "```js\n            .setNativeDialogHandler(() => true)        .click('.icon-del')\n    ```", "```js\n            .expect(Selector('.subject a').withText(`Test issue ${randomDigits7}`).exists).notOk()\n    ```", "```js\n            .expect(Selector('.nodata').innerText).eql('No data to display');});\n    ```", "```js\n$ mkdir -p tests/uploads\n$ echo 'test' > uploads/test-file.txt\n```", "```js\nconst { Selector, ClientFunction } = require('testcafe');const { stamp } = require('js-automation-tools');const randomDigits1 = stamp.getTimestamp();const randomDigits2 = stamp.resetTimestamp();const randomDigits3 = stamp.resetTimestamp();const randomDigits4 = stamp.resetTimestamp();const randomDigits5 = stamp.resetTimestamp();const randomDigits6 = stamp.resetTimestamp();const randomDigits7 = stamp.resetTimestamp();const randomDigits8 = stamp.resetTimestamp();// ...test('Upload a file', async (t) => {\n```", "```js\n        await t.click('.login')        .typeText('#username', `test_user_testcafe_poc${randomDigits1}@sharklasers.com`)        .typeText('#password', 'test_user_testcafe_poc')        .click('[name=\"login\"]')\n    ```", "```js\n            .click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_project${randomDigits8}`)        .click('[value=\"Create\"]')\n    ```", "```js\n            .click('#top-menu .projects')\n    ```", "```js\n            .click(`[href*=\"/projects/test_project${randomDigits8}\"]`)\n    ```", "```js\n            .click('.files')\n    ```", "```js\n            .click('.icon-add')\n    ```", "```js\n            .setFilesToUpload('input.file_selector', './uploads/test-file.txt')\n    ```", "```js\n            .click('[value=\"Add\"]')\n    ```", "```js\n            .expect(Selector('.filename').innerText).eql('test-file.txt')\n    ```", "```js\n            .expect(Selector('.digest').innerText).eql('d8e8fca2dc0f896fd7cb4cb0031ba249');});\n    ```", "```js\nconst { Selector, ClientFunction } = require('testcafe');const { stamp } = require('js-automation-tools');const randomDigits1 = stamp.getTimestamp();const randomDigits2 = stamp.resetTimestamp();const randomDigits3 = stamp.resetTimestamp();const randomDigits4 = stamp.resetTimestamp();const randomDigits5 = stamp.resetTimestamp();const randomDigits6 = stamp.resetTimestamp();const randomDigits7 = stamp.resetTimestamp();const randomDigits8 = stamp.resetTimestamp();const randomDigits9 = stamp.resetTimestamp();// ...test('Delete the file', async (t) => {\n```", "```js\n        await t.click('.login')        .typeText('#username', `test_user_testcafe_poc${randomDigits1}@sharklasers.com`)        .typeText('#password', 'test_user_testcafe_poc')        .click('[name=\"login\"]')\n    ```", "```js\n            .click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_project${randomDigits9}`)        .click('[value=\"Create\"]')\n    ```", "```js\n            .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits9}\"]`)        .click('.files')        .click('.icon-add')        .setFilesToUpload('input.file_selector', './uploads/test-file.txt')        .click('[value=\"Add\"]')\n    ```", "```js\n            .click('#top-menu .projects')\n    ```", "```js\n            .click(`[href*=\"/projects/test_project${randomDigits9}\"]`)\n    ```", "```js\n            .click('.files')\n    ```", "```js\n            .setNativeDialogHandler(() => true)        .click(Selector('.filename a').withText('test-file.txt').parent('.file').find('.buttons a').withAttribute('data-method', 'delete'))\n    ```", "```js\n            .expect(Selector('.filename').withText('test-file.txt').exists).notOk()\n    ```", "```js\n            .expect(Selector('.digest').withText('d8e8fca2dc0f896fd7cb4cb0031ba249').exists).notOk();});\n    ```"]