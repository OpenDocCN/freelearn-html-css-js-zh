- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Accessibility with Transitions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用过渡实现无障碍
- en: In the past two chapters, we learned how to use transitions in Svelte. Transitions,
    when used correctly, can enhance the user experience, guiding a user’s attention,
    providing feedback, and adding a layer of polish to the interface. However, for
    users with vestibular disorders, these animations can be uncomfortable or even
    debilitating. Therefore, it is essential to strike a balance between creating
    engaging animations and ensuring that they do not negatively impact users with
    specific needs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去两章中，我们学习了如何在Svelte中使用过渡。当正确使用时，过渡可以增强用户体验，引导用户的注意力，提供反馈，并为界面增添一层光泽。然而，对于患有前庭功能障碍的用户来说，这些动画可能会感到不适，甚至可能造成伤害。因此，在创造引人入胜的动画和确保它们不会对有特定需求的用户产生负面影响之间取得平衡是至关重要的。
- en: In this chapter, we will dive into the techniques available to make web transition
    more accessible for users with a vestibular disorder, exploring CSS and JavaScript
    approaches to respect a user’s preferences regarding motion.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨使网络过渡对患有前庭功能障碍的用户更加无障碍的技术，探索尊重用户对运动偏好的CSS和JavaScript方法。
- en: By the end of this chapter, you will have a better understanding of web accessibility
    and how to create more inclusive web applications that cater to all users, regardless
    of their specific needs or preferences.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将更好地理解网络无障碍以及如何创建更包容的Web应用程序，以满足所有用户的具体需求或偏好。
- en: 'In this chapter, we will cover the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: What is web accessibility?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是网络无障碍？
- en: Understanding user preference with `prefers-reduced-motion`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`prefers-reduced-motion`理解用户偏好
- en: Reducing motion for a Svelte transition
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少Svelte过渡的运动
- en: Having an alternative transition for inaccessible users
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为无法访问的用户提供替代过渡
- en: Let’s start by exploring what web accessibility is.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从探讨什么是网络无障碍开始。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All the code in this chapter can be found at the following link: [https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter15/01-accessible-transition](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter15/01-accessible-transition)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码都可以在以下链接找到：[https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter15/01-accessible-transition](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter15/01-accessible-transition)
- en: What is web accessibility?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是网络无障碍？
- en: Accessibility is the design of products, devices, services, or environments
    to be usable by as many people as possible, regardless of any physical, sensory,
    or cognitive disabilities they may have.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 无障碍是指产品、设备、服务或环境的设计，以便尽可能多的人可以使用，无论他们可能有什么物理、感官或认知障碍。
- en: It is vital to ensure that websites are accessible to all users. There are many
    disabilities that can potentially affect a user’s experience on a website. Ensuring
    a website’s accessibility allows everyone, regardless of their abilities, to have
    equal access to the same services and information that are available to everyone.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 确保网站对所有用户都无障碍至关重要。有许多残疾可能会影响用户在网站上的体验。确保网站的无障碍性使得所有人，无论他们的能力如何，都能平等地访问到其他人可用的相同服务和信息。
- en: One of the many disabilities that can hinder a website’s user experience is
    a vestibular disorder. In this chapter, we will specifically focus on enhancing
    accessibility for individuals with vestibular disorders.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 许多可能妨碍网站用户体验的残疾中，前庭功能障碍是其中之一。在本章中，我们将特别关注提高患有前庭功能障碍的人士的无障碍性。
- en: Vestibular disorders are conditions that affect the inner ear and brain, and
    they can cause difficulties with balance, spatial orientation, and movement perception.
    Imagine that your body’s natural sense of balance isn’t working right. It’s like
    being dizzy or feeling tipsy. The ground under your feet doesn’t feel stable,
    and the things you see around you seem to move on their own, even if you’re standing
    still.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 前庭功能障碍是影响内耳和大脑的疾病，它们可能导致平衡、空间定位和运动感知困难。想象一下，你身体的自然平衡感不正常。这就像头晕或感觉不稳。你脚下的地面感觉不稳定，你周围看到的东西似乎在移动，即使你站着不动。
- en: For individuals with vestibular disorders, certain visual stimuli, such as moving
    or flashing content on a web page, can trigger symptoms such as dizziness, nausea,
    or migraines.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于患有前庭功能障碍的人来说，某些视觉刺激，如网页上移动或闪烁的内容，可能会引发头晕、恶心或偏头痛等症状。
- en: We learned how to add transitions in [*Chapter 13*](B18887_13.xhtml#_idTextAnchor187)
    and [*Chapter 14*](B18887_14.xhtml#_idTextAnchor202) to make our application more
    engaging for users. However, for users with vestibular disorders, these transitions
    can inadvertently provide a negative experience. Most operating systems provide
    accessibility settings, enabling users with vestibular disorders to reduce or
    remove animation. These accessibility preferences can be used by web applications
    to create an inclusive user experience.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [*第 13 章*](B18887_13.xhtml#_idTextAnchor187) 和 [*第 14 章*](B18887_14.xhtml#_idTextAnchor202)
    中学习了如何添加过渡，以使我们的应用程序对用户更具吸引力。然而，对于有前庭功能障碍的用户，这些过渡可能会无意中提供负面的体验。大多数操作系统提供可访问性设置，使用户能够减少或删除动画。这些可访问性偏好可以被网络应用程序用来创建包容性的用户体验。
- en: So, let’s explore how a web application accesses a user’s accessibility preference.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们探索一个网络应用程序如何访问用户的可访问性偏好。
- en: Understanding user preference with prefers-reduced-motion
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `prefers-reduced-motion` 理解用户偏好
- en: Most operating systems offer accessibility settings that allow users to disable
    animation effects. For instance, in Windows 11, you can navigate to **Settings**
    | **Accessibility** | **Visual Effects** | **Animation Effects** and uncheck the
    **Animation Effects** option to turn off animations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数操作系统都提供可访问性设置，允许用户禁用动画效果。例如，在 Windows 11 中，您可以导航到 **设置** | **可访问性** | **视觉效果**
    | **动画效果**，取消选中 **动画效果** 选项以关闭动画。
- en: 'igure 15.1: The Animation effects option in Window 11'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1：Windows 11 中的动画效果选项
- en: In web applications, you can use the `prefers-reduced-motion` CSS media query
    to determine whether a user has activated a setting on their device to reduce
    or eliminate non-essential motion.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络应用程序中，您可以使用 `prefers-reduced-motion` CSS 媒体查询来确定用户是否在他们的设备上激活了减少或消除非必要运动的设置。
- en: 'Here is an example of how to use the `prefers-reduced-motion` CSS media query:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用 `prefers-reduced-motion` CSS 媒体查询的示例：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding code snippet, if a user has indicated a preference for reduced
    motion, we set the CSS `animation` property to `none` to remove animation from
    the `<``div>` element.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，如果用户表示偏好减少运动，我们将 CSS `animation` 属性设置为 `none`，以从 `<div>` 元素中移除动画。
- en: Alternatively, besides using CSS, you can also use JavaScript to determine a
    user’s preference for reduced motion. The `window.matchMedia` method lets you
    check whether the web page matches a given media query string.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，除了使用 CSS 之外，您还可以使用 JavaScript 来确定用户对减少运动的偏好。`window.matchMedia` 方法允许您检查网页是否匹配给定的媒体查询字符串。
- en: 'In the following code snippet, we use `window.matchMedia` to test whether the
    `prefers-reduced-motion` CSS media query is matched:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，我们使用 `window.matchMedia` 来测试 `prefers-reduced-motion` CSS 媒体查询是否匹配：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If the user prefers reduced motion, then the value of `matches` in the preceding
    code snippet will be `true`; otherwise, the value of `matches` will be `false`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户偏好减少运动，则前面代码片段中 `matches` 的值将为 `true`；否则，`matches` 的值将为 `false`。
- en: 'A user might change their accessibility preferences while browsing a web page.
    To get notified whenever the user alters their preference for reduced motion,
    we can listen to the `change` event of the media query. Here’s how:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 用户在浏览网页时可能会更改他们的可访问性偏好。为了在用户更改对减少运动的偏好时得到通知，我们可以监听媒体查询的 `change` 事件。以下是方法：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code snippet, whenever a user changes their preference for
    reduced motion, the listener function passed into the `change` event handler will
    be invoked. It will evaluate the updated user preferences through `mediaQuery.matches`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，每当用户更改他们对减少运动的偏好时，传递给 `change` 事件处理器的监听函数将被调用。它将通过 `mediaQuery.matches`
    评估更新的用户偏好。
- en: Now that we’ve learned how to determine user preferences for reduced motion
    through `prefers-reduced-motion`, let us take a look at how we can use it to reduce
    Svelte’s transition for users with vestibular disorders.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经学会了如何通过 `prefers-reduced-motion` 确定用户对减少运动的偏好，让我们看看我们如何可以使用它来减少有前庭功能障碍用户的
    Svelte 过渡。
- en: Reducing motion for Svelte transition
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减少 Svelte 过渡中的运动
- en: After learning how to obtain a user’s preference for reduced motion, let’s now
    respect that preference by reducing unnecessary motions in our transitions, which
    could potentially trigger vestibular discomfort.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习了如何获取用户对减少运动的偏好之后，现在让我们通过减少过渡中的不必要的动作来尊重这一偏好，这可能会引发前庭不适。
- en: 'In the following code block, there is an example of our Svelte component, which
    has a `fly` transition applied to the list items:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码块中，有一个我们Svelte组件的示例，该组件将`fly`过渡应用于列表项：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code, whenever a new item is added to the list, a new `<li>`
    element will fly in from the right and be inserted into the list. This flying
    motion could be a trigger for users with vestibular disorders.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，每当向列表中添加新项目时，一个新的`<li>`元素将从右侧飞入并插入到列表中。这种飞行运动可能成为前庭功能障碍用户的触发因素。
- en: However, the flying transition is not essential because the application will
    still function correctly without it. Therefore, if a user has indicated a preference
    for reduced motion in the system settings, we should respect that preference by
    reducing or removing the flying transition.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，飞行过渡并非必需，因为即使没有它，应用程序仍然可以正常工作。因此，如果用户在系统设置中表明了偏好减少运动，我们应该通过减少或移除飞行过渡来尊重这一偏好。
- en: One way to achieve this is by setting the duration of the `fly` transition to
    `0`. This way, the transition will take no time to play and complete and, in effect,
    will not be played at all.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一点的办法是将`fly`过渡的持续时间设置为`0`。这样，过渡将不会花费任何时间来播放和完成，实际上将不会播放。
- en: 'Here’s the modified version of the previous Svelte component, which does not
    play the `fly` transition if the user prefers reduced motion:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是之前Svelte组件的修改版本，如果用户偏好减少运动，则不会播放`fly`过渡：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding code snippet, we determine whether a user prefers reduced
    motion by checking whether the CSS media query, `prefers-reduced-motion: reduce`,
    is matched, and we store this information in a variable named `prefersReducedMotion`.
    If `prefersReducedMotion` is `true` (meaning the user prefers reduced motion),
    then we set the duration of the `fly` transition to `0`. The user will not see
    any flying motion when a new item is added to the list.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的代码片段中，我们通过检查CSS媒体查询`prefers-reduced-motion: reduce`是否匹配来确定用户是否偏好减少运动，并将此信息存储在名为`prefersReducedMotion`的变量中。如果`prefersReducedMotion`为`true`（表示用户偏好减少运动），则我们将`fly`过渡的持续时间设置为`0`。当向列表中添加新项目时，用户将看不到任何飞行运动。'
- en: On the other hand, if the user does not have a vestibular disorder and has not
    expressed a preference for reduced motion effects, then `prefersReducedMotion`
    will be `false`. In this case, the duration for the `fly` transition will be set
    to `400 ms`, and a flying transition will be displayed for every new item added
    to the list.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果用户没有前庭功能障碍，并且没有表达对减少运动效果的偏好，那么`prefersReducedMotion`将为`false`。在这种情况下，`fly`过渡的持续时间将被设置为`400
    ms`，并且每当向列表中添加新项目时，都会显示飞行过渡。
- en: However, not all transitions act as triggers for vestibular motion disturbances.
    For instance, the `fade` transition, being a subtler animation, isn’t as disruptive
    to users with vestibular disorders. Instead of entirely eliminating transitions
    by setting their duration to `0`, we can opt to replace more intense transitions
    with milder ones. We’ll delve into this approach in the following section.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有过渡都会触发前庭运动障碍。例如，`fade`过渡作为一种更微妙的动画，对前庭功能障碍用户的影响较小。我们不必通过将它们的持续时间设置为`0`来完全消除过渡，而是可以选择用更温和的过渡来替换更强烈的过渡。我们将在下一节中深入探讨这种方法。
- en: Having alternative transitions for inaccessible users
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为无法访问的用户提供替代过渡
- en: Users with vestibular disorders may feel discomfort when exposed to motion-based
    animations, such as scaling or panning large objects. However, they are generally
    less affected by subtler animations, such as fading.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前庭功能障碍用户在接触到基于运动的动画，如缩放或平移大对象时可能会感到不适。然而，他们通常受更微妙的动画，如淡入，的影响较小。
- en: Switching all transitions to fading for users with vestibular disorders is not
    a one-size-fits-all solution. It is always better to seek feedback from the users
    themselves.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有过渡设置为淡入效果以适应前庭功能障碍用户并非万能的解决方案。最好总是寻求用户自身的反馈。
- en: We will continue using the same example from the previous section and explore
    how we can switch from the `fly` transition to a `fade` transition when a user
    prefers reduced motion.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用上一节中的相同示例，并探讨当用户偏好减少运动时，如何从`fly`过渡切换到`fade`过渡。
- en: One thing to note is that, in Svelte, you are not allowed to apply more than
    one transition to an element.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一点是，在Svelte中，不允许对一个元素应用超过一个过渡。
- en: 'For example, the following code is invalid and will result in a build error:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码是无效的，会导致构建错误：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This means we can’t apply two transitions to an element and then decide which
    one to use. We must find a way to switch between different transitions while applying
    only one transition to an element.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们不能将两个过渡应用于一个元素，然后决定使用哪一个。我们必须找到一种方法，在只对一个元素应用一个过渡的同时，在不同的过渡之间切换。
- en: As we learned in [*Chapter 14*](B18887_14.xhtml#_idTextAnchor202) about creating
    custom transitions, a transition in Svelte is a function that follows a transition
    contract. The return value from the function determines how the transition will
    play out.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[*第14章*](B18887_14.xhtml#_idTextAnchor202)中学习到的创建自定义过渡，Svelte 中的过渡是一个遵循过渡契约的函数。函数的返回值决定了过渡将如何执行。
- en: So, one approach to having a transition that switches between two transitions,
    based on a condition, is to create a custom transition that returns different
    transition configurations, based on the condition.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，实现一个根据条件在两个过渡之间切换的过渡的一种方法，是创建一个自定义过渡，该过渡根据条件返回不同的过渡配置。
- en: 'Our custom transition would look something like the following code, returning
    different transition configurations based on whether a user prefers reduced motion:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的自定义过渡可能看起来像以下代码，根据用户是否偏好减少运动返回不同的过渡配置：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code snippet, we defined an `accessibleFly` transition, which
    is a more accessible `fly` transition that will switch to a `fade` transition
    if a user prefers reduced motion.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们定义了一个 `accessibleFly` 过渡，这是一个更易于访问的 `fly` 过渡，如果用户偏好减少运动，它将切换到 `fade`
    过渡。
- en: Now, we need to determine what to return in each of the conditional cases within
    our custom `accessibleFly` transition.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要确定在我们的自定义 `accessibleFly` 过渡中的每个条件情况下应该返回什么。
- en: It’s important to recall that a transition in Svelte is a JavaScript function.
    Therefore, we can call both the `fly` and `fade` transitions as functions, and
    the return value will be the transition configuration for each respective transition.
    By doing this, we can return these values from our `accessibleFly` transition,
    effectively allowing our transition to be either a `fly` or `fade` transition,
    based on a user’s preference.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，在 Svelte 中，过渡是一个 JavaScript 函数。因此，我们可以将 `fly` 和 `fade` 过渡都作为函数来调用，并且返回值将是每个相应过渡的过渡配置。通过这样做，我们可以从我们的
    `accessibleFly` 过渡中返回这些值，从而有效地使我们的过渡可以是 `fly` 或 `fade` 过渡，具体取决于用户的偏好。
- en: 'Here’s the updated `accessibleFly` transition:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是更新后的 `accessibleFly` 过渡：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code snippet, we return the value either from the `fade` or
    `fly` transition, depending on a user’s preference. We pass the `node` and `params`
    values that are given to our `accessibleFly` transition into both the `fade` and
    `fly` transitions. The `node` and `params` values specify which element the transition
    is applied to and provide user parameters, such as `duration` and `delay`. These
    are useful for the `fade` and `fly` transitions to determine how the transitions
    should be executed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们根据用户的偏好从 `fade` 或 `fly` 过渡中返回值。我们将传递给我们的 `accessibleFly` 过渡的 `node`
    和 `params` 值传递给 `fade` 和 `fly` 过渡。`node` 和 `params` 值指定了过渡应用于哪个元素，并提供了用户参数，例如
    `duration` 和 `delay`。这些对于 `fade` 和 `fly` 过渡来说很有用，可以确定过渡应该如何执行。
- en: With the preceding code changes, we now have an accessible `fly` transition
    named `accessibleFly`, which, by default, will cause an element to fly as part
    of the transition. However, the `accessibleFly` transition will cause the element
    to fade if a user has indicated a preference for reduced motion.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前面的代码更改，我们现在有一个名为 `accessibleFly` 的可访问 `fly` 过渡，默认情况下，它将使元素在过渡过程中飞出。然而，如果用户表示偏好减少运动，`accessibleFly`
    过渡将使元素淡出。
- en: And there you have it–a transition that is engaging and appealing to most users,
    while still being considerate of those who prefer reduced motion.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由此，我们得到了一个既吸引大多数用户又考虑那些偏好减少运动的人的过渡。
- en: You can find the code for the `accessibleFly` transition at [https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter15/01-accessible-transition](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter15/01-accessible-transition).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter15/01-accessible-transition](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter15/01-accessible-transition)找到
    `accessibleFly` 过渡的代码。
- en: Summary
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the importance of accessibility in web design and
    how to implement transitions that consider the preferences of users with vestibular
    disorders. By understanding the impact of motion-based animations on users with
    vestibular disorders, we can create more inclusive and user-friendly web applications.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了无障碍访问在网页设计中的重要性以及如何实现考虑前庭功能障碍用户偏好的过渡效果。通过了解基于运动的动画对前庭功能障碍用户的影响，我们可以创建更包容和用户友好的网络应用程序。
- en: We learned about the `prefers-reduced-motion` media query, which allows us to
    detect whether a user has indicated a preference for reduced motion in their system
    settings. Using this media query, we can adjust our transitions to be less motion-heavy
    or remove them altogether for users who prefer reduced motion.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了关于`prefers-reduced-motion`媒体查询的知识，它允许我们检测用户是否在其系统设置中表明了对减少运动的需求。使用这个媒体查询，我们可以调整我们的过渡效果以减少运动量，或者完全移除对偏好减少运动的用户。
- en: We also discussed how to create custom transitions in Svelte for accessibility.
    We looked at an example of a custom transition, named `accessibleFly`, that switches
    between a `fly` and a `fade` transition, based on a user’s preferences for reduced
    motion. This custom transition is considerate of users with vestibular disorders
    while still providing engaging and interesting transitions for other users.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了如何在Svelte中创建自定义过渡以实现无障碍访问。我们查看了一个名为`accessibleFly`的自定义过渡示例，它根据用户的减少运动偏好在`fly`和`fade`过渡之间切换。这个自定义过渡考虑到了患有前庭功能障碍的用户，同时为其他用户提供吸引人和有趣的过渡效果。
- en: In summary, accessibility is crucial in web design, and transitions are no exception.
    By considering the preferences and needs of all users, including those with vestibular
    disorders, we can create more inclusive and user-friendly web applications.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，无障碍访问在网页设计中至关重要，过渡效果也不例外。通过考虑所有用户的偏好和需求，包括前庭功能障碍用户，我们可以创建更包容和用户友好的网络应用程序。
