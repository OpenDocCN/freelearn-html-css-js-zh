- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Accessibility with Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the past two chapters, we learned how to use transitions in Svelte. Transitions,
    when used correctly, can enhance the user experience, guiding a user’s attention,
    providing feedback, and adding a layer of polish to the interface. However, for
    users with vestibular disorders, these animations can be uncomfortable or even
    debilitating. Therefore, it is essential to strike a balance between creating
    engaging animations and ensuring that they do not negatively impact users with
    specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will dive into the techniques available to make web transition
    more accessible for users with a vestibular disorder, exploring CSS and JavaScript
    approaches to respect a user’s preferences regarding motion.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a better understanding of web accessibility
    and how to create more inclusive web applications that cater to all users, regardless
    of their specific needs or preferences.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is web accessibility?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding user preference with `prefers-reduced-motion`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducing motion for a Svelte transition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having an alternative transition for inaccessible users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by exploring what web accessibility is.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the code in this chapter can be found at the following link: [https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter15/01-accessible-transition](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter15/01-accessible-transition)'
  prefs: []
  type: TYPE_NORMAL
- en: What is web accessibility?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Accessibility is the design of products, devices, services, or environments
    to be usable by as many people as possible, regardless of any physical, sensory,
    or cognitive disabilities they may have.
  prefs: []
  type: TYPE_NORMAL
- en: It is vital to ensure that websites are accessible to all users. There are many
    disabilities that can potentially affect a user’s experience on a website. Ensuring
    a website’s accessibility allows everyone, regardless of their abilities, to have
    equal access to the same services and information that are available to everyone.
  prefs: []
  type: TYPE_NORMAL
- en: One of the many disabilities that can hinder a website’s user experience is
    a vestibular disorder. In this chapter, we will specifically focus on enhancing
    accessibility for individuals with vestibular disorders.
  prefs: []
  type: TYPE_NORMAL
- en: Vestibular disorders are conditions that affect the inner ear and brain, and
    they can cause difficulties with balance, spatial orientation, and movement perception.
    Imagine that your body’s natural sense of balance isn’t working right. It’s like
    being dizzy or feeling tipsy. The ground under your feet doesn’t feel stable,
    and the things you see around you seem to move on their own, even if you’re standing
    still.
  prefs: []
  type: TYPE_NORMAL
- en: For individuals with vestibular disorders, certain visual stimuli, such as moving
    or flashing content on a web page, can trigger symptoms such as dizziness, nausea,
    or migraines.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to add transitions in [*Chapter 13*](B18887_13.xhtml#_idTextAnchor187)
    and [*Chapter 14*](B18887_14.xhtml#_idTextAnchor202) to make our application more
    engaging for users. However, for users with vestibular disorders, these transitions
    can inadvertently provide a negative experience. Most operating systems provide
    accessibility settings, enabling users with vestibular disorders to reduce or
    remove animation. These accessibility preferences can be used by web applications
    to create an inclusive user experience.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s explore how a web application accesses a user’s accessibility preference.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding user preference with prefers-reduced-motion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most operating systems offer accessibility settings that allow users to disable
    animation effects. For instance, in Windows 11, you can navigate to **Settings**
    | **Accessibility** | **Visual Effects** | **Animation Effects** and uncheck the
    **Animation Effects** option to turn off animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'igure 15.1: The Animation effects option in Window 11'
  prefs: []
  type: TYPE_NORMAL
- en: In web applications, you can use the `prefers-reduced-motion` CSS media query
    to determine whether a user has activated a setting on their device to reduce
    or eliminate non-essential motion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of how to use the `prefers-reduced-motion` CSS media query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, if a user has indicated a preference for reduced
    motion, we set the CSS `animation` property to `none` to remove animation from
    the `<``div>` element.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, besides using CSS, you can also use JavaScript to determine a
    user’s preference for reduced motion. The `window.matchMedia` method lets you
    check whether the web page matches a given media query string.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code snippet, we use `window.matchMedia` to test whether the
    `prefers-reduced-motion` CSS media query is matched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If the user prefers reduced motion, then the value of `matches` in the preceding
    code snippet will be `true`; otherwise, the value of `matches` will be `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A user might change their accessibility preferences while browsing a web page.
    To get notified whenever the user alters their preference for reduced motion,
    we can listen to the `change` event of the media query. Here’s how:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, whenever a user changes their preference for
    reduced motion, the listener function passed into the `change` event handler will
    be invoked. It will evaluate the updated user preferences through `mediaQuery.matches`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve learned how to determine user preferences for reduced motion
    through `prefers-reduced-motion`, let us take a look at how we can use it to reduce
    Svelte’s transition for users with vestibular disorders.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing motion for Svelte transition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After learning how to obtain a user’s preference for reduced motion, let’s now
    respect that preference by reducing unnecessary motions in our transitions, which
    could potentially trigger vestibular discomfort.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code block, there is an example of our Svelte component, which
    has a `fly` transition applied to the list items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, whenever a new item is added to the list, a new `<li>`
    element will fly in from the right and be inserted into the list. This flying
    motion could be a trigger for users with vestibular disorders.
  prefs: []
  type: TYPE_NORMAL
- en: However, the flying transition is not essential because the application will
    still function correctly without it. Therefore, if a user has indicated a preference
    for reduced motion in the system settings, we should respect that preference by
    reducing or removing the flying transition.
  prefs: []
  type: TYPE_NORMAL
- en: One way to achieve this is by setting the duration of the `fly` transition to
    `0`. This way, the transition will take no time to play and complete and, in effect,
    will not be played at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the modified version of the previous Svelte component, which does not
    play the `fly` transition if the user prefers reduced motion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code snippet, we determine whether a user prefers reduced
    motion by checking whether the CSS media query, `prefers-reduced-motion: reduce`,
    is matched, and we store this information in a variable named `prefersReducedMotion`.
    If `prefersReducedMotion` is `true` (meaning the user prefers reduced motion),
    then we set the duration of the `fly` transition to `0`. The user will not see
    any flying motion when a new item is added to the list.'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, if the user does not have a vestibular disorder and has not
    expressed a preference for reduced motion effects, then `prefersReducedMotion`
    will be `false`. In this case, the duration for the `fly` transition will be set
    to `400 ms`, and a flying transition will be displayed for every new item added
    to the list.
  prefs: []
  type: TYPE_NORMAL
- en: However, not all transitions act as triggers for vestibular motion disturbances.
    For instance, the `fade` transition, being a subtler animation, isn’t as disruptive
    to users with vestibular disorders. Instead of entirely eliminating transitions
    by setting their duration to `0`, we can opt to replace more intense transitions
    with milder ones. We’ll delve into this approach in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Having alternative transitions for inaccessible users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users with vestibular disorders may feel discomfort when exposed to motion-based
    animations, such as scaling or panning large objects. However, they are generally
    less affected by subtler animations, such as fading.
  prefs: []
  type: TYPE_NORMAL
- en: Switching all transitions to fading for users with vestibular disorders is not
    a one-size-fits-all solution. It is always better to seek feedback from the users
    themselves.
  prefs: []
  type: TYPE_NORMAL
- en: We will continue using the same example from the previous section and explore
    how we can switch from the `fly` transition to a `fade` transition when a user
    prefers reduced motion.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to note is that, in Svelte, you are not allowed to apply more than
    one transition to an element.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code is invalid and will result in a build error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This means we can’t apply two transitions to an element and then decide which
    one to use. We must find a way to switch between different transitions while applying
    only one transition to an element.
  prefs: []
  type: TYPE_NORMAL
- en: As we learned in [*Chapter 14*](B18887_14.xhtml#_idTextAnchor202) about creating
    custom transitions, a transition in Svelte is a function that follows a transition
    contract. The return value from the function determines how the transition will
    play out.
  prefs: []
  type: TYPE_NORMAL
- en: So, one approach to having a transition that switches between two transitions,
    based on a condition, is to create a custom transition that returns different
    transition configurations, based on the condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our custom transition would look something like the following code, returning
    different transition configurations based on whether a user prefers reduced motion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we defined an `accessibleFly` transition, which
    is a more accessible `fly` transition that will switch to a `fade` transition
    if a user prefers reduced motion.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we need to determine what to return in each of the conditional cases within
    our custom `accessibleFly` transition.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to recall that a transition in Svelte is a JavaScript function.
    Therefore, we can call both the `fly` and `fade` transitions as functions, and
    the return value will be the transition configuration for each respective transition.
    By doing this, we can return these values from our `accessibleFly` transition,
    effectively allowing our transition to be either a `fly` or `fade` transition,
    based on a user’s preference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the updated `accessibleFly` transition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we return the value either from the `fade` or
    `fly` transition, depending on a user’s preference. We pass the `node` and `params`
    values that are given to our `accessibleFly` transition into both the `fade` and
    `fly` transitions. The `node` and `params` values specify which element the transition
    is applied to and provide user parameters, such as `duration` and `delay`. These
    are useful for the `fade` and `fly` transitions to determine how the transitions
    should be executed.
  prefs: []
  type: TYPE_NORMAL
- en: With the preceding code changes, we now have an accessible `fly` transition
    named `accessibleFly`, which, by default, will cause an element to fly as part
    of the transition. However, the `accessibleFly` transition will cause the element
    to fade if a user has indicated a preference for reduced motion.
  prefs: []
  type: TYPE_NORMAL
- en: And there you have it–a transition that is engaging and appealing to most users,
    while still being considerate of those who prefer reduced motion.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code for the `accessibleFly` transition at [https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter15/01-accessible-transition](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter15/01-accessible-transition).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the importance of accessibility in web design and
    how to implement transitions that consider the preferences of users with vestibular
    disorders. By understanding the impact of motion-based animations on users with
    vestibular disorders, we can create more inclusive and user-friendly web applications.
  prefs: []
  type: TYPE_NORMAL
- en: We learned about the `prefers-reduced-motion` media query, which allows us to
    detect whether a user has indicated a preference for reduced motion in their system
    settings. Using this media query, we can adjust our transitions to be less motion-heavy
    or remove them altogether for users who prefer reduced motion.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed how to create custom transitions in Svelte for accessibility.
    We looked at an example of a custom transition, named `accessibleFly`, that switches
    between a `fly` and a `fade` transition, based on a user’s preferences for reduced
    motion. This custom transition is considerate of users with vestibular disorders
    while still providing engaging and interesting transitions for other users.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, accessibility is crucial in web design, and transitions are no exception.
    By considering the preferences and needs of all users, including those with vestibular
    disorders, we can create more inclusive and user-friendly web applications.
  prefs: []
  type: TYPE_NORMAL
