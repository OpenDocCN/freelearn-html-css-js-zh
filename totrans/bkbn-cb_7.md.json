["```js\n    var appConfig = {\n      baseURL: 'https://api.mongolab.com/api/1/databases/billing-app/collections/',\n\n      addURL: '?apiKey=kNCrqJUqB4n1S_qW7wnXH43NH9XKjdIL'\n    }\n    ```", "```js\n      var InvoiceModel = Backbone.Model.extend({\n        url: function() {\n          if (_.isUndefined(this.id)) {\n            return appConfig.baseURL +\n              'invoices' + appConfig.addURL;\n          }\n          else {\n            return appConfig.baseURL + 'invoices/' +\n              encodeURIComponent(this.id) + appConfig.addURL;\n          }\n        },\n      });\n    ```", "```js\n      var InvoiceModel = Backbone.Model.extend({\n        urlRoot: appConfig.baseURL;\n      });\n    ```", "```js\n      var InvoiceCollection = Backbone.Collection.extend({\n        model: InvoiceModel,\n        url: appConfig.baseURL +'invoices' + appConfig.addURL\n      });\n    ```", "```js\n      var collection = new InvoiceCollection();\n\n      collection.fetch({\n        success: function(collection, response, options) {\n          $('body').html(\n            new View({ collection: collection}).render().el\n          );\n        },\n        error: function(collection, response, options) {\n          alert('error!');\n        }\n      });\n    ```", "```js\n      var model = new InvoieModel();\n\n      model.id = '5176396ce4b0c62bf3e53d79';\n      model.fetch(\n        success: function(model, response, options) {\n          // success\n        },\n        error: function(collection, response, options) {\n          // error\n        }\n      );\n    ```", "```js\n      model.save();\n    ```", "```js\n      model.save({ status: 'complete'}, {patch: true});\n    ```", "```js\n      model.save(null, {wait: true});\n    ```", "```js\n      var model = collection.create(\n        { referenceNumber: '123', status: complete },\n        { wait: true }\n      );\n    ```", "```js\n      model.save(null, {\n        success: function(model, response, options) {\n          // success\n        },\n        wait: true\n     });\n    ```", "```js\n{ \n    \"_id\": { \n        \"$oid\": \"516eb001e4b0799160e0e864\" \n    }, \n}\n```", "```js\nBackbone.Model.prototype.parse = function(resp, options) {\n  if (_.isObject(resp._id)) {\n    resp[this.idAttribute] = resp._id.$oid;\n      delete resp._id;\n  }\n  return resp;\n},\n\n```", "```js\n// Convert regular JSON into MongoDB extended one.\n  Backbone.Model.prototype.toExtendedJSON= function() {\n    var attrs = this.attributes;\n\n    var attrs = _.omit(attrs, this.idAttribute);\n    if (!_.isUndefined(this[this.idAttribute])) {\n      attrs._id = { $oid: this[this.idAttribute] };\n    }\n\n    return attrs;\n  },\n\n// Substute toJSON method when performing synchronization.\n  Backbone.Model.prototype.sync = function() {\n    var toJSON = this.toJSON;\n    this.toJSON = this.toExtendedJSON;\n\n    var ret = Backbone.sync.apply(this, arguments);\n\n    this.toJSON = toJSON;\n\n    return ret;\n  }\n\n```", "```js\n      // Convert MongoDB Extended JSON into regular JSON.\n      Backbone.Model.prototype.parse = function(resp, options) {\n        if (_.isObject(resp._id)) {\n          resp[this.idAttribute] = resp._id.$oid;\n          delete resp._id;\n        }\n\n        return resp;\n      },\n\n      // Convert regular JSON into MongoDB extended one.\n      Backbone.Model.prototype.toExtendedJSON= function() {\n        var attrs = this.attributes;\n\n        var attrs = _.omit(attrs, this.idAttribute);\n        if (!_.isUndefined(this[this.idAttribute])) {\n          attrs._id = { $oid: this[this.idAttribute] };\n        }\n\n        return attrs;\n      },\n\n      // Substute toJSON method when performing synchronization.\n      Backbone.Model.prototype.sync = function() {\n        var toJSON = this.toJSON;\n        this.toJSON = this.toExtendedJSON;\n\n        var ret = Backbone.sync.apply(this, arguments);\n\n        this.toJSON = toJSON;\n\n        return ret;\n      }\n    This allows Backbone to work correctly with data IDs in a format like this:\n    { \n        \"_id\": { \n            \"$oid\": \"516eb001e4b0799160e0e864\" \n        }, \n    }\n\n    ```", "```js\n    { \n        \"_id\": { \n            \"$oid\": \"516eb001e4b0799160e0e864\" \n        }, \n    }\n    ```", "```js\n    var appConfig = {\n      baseURL: 'https://api.mongolab.com/api/1/databases/billing-app/collections/',\n\n      addURL: '?apiKey=kNCrqJUqB4n1S_qW7wnXH43NH9XKjdIL'\n    }\n    ```", "```js\n      var InvoiceModel = Backbone.Model.extend({\n        url: function() {\n          if (_.isUndefined(this.id)) {\n            return appConfig.baseURL +\n              'invoices' + appConfig.addURL;\n          }\n          else {\n            return appConfig.baseURL + 'invoices/' +\n              encodeURIComponent(this.id) + appConfig.addURL;\n          }\n        },\n      });\n    ```", "```js\n      var InvoiceCollection = Backbone.Collection.extend({\n        model: InvoiceModel,\n        url: function() {\n          return appConfig.baseURL +\n            'invoices' + appConfig.addURL;\n        },\n      });\n    ```", "```js\n      // Define router object.\n      var Workspace = Backbone.Router.extend({\n        initialize: function() {\n\n          //  Create collection.\n          this.collection = new InvoiceCollection();\n\n          // Create new layout.\n          this.layout = new Backbone.Layout({\n              // Attach the layout to the main container.\n              el: 'body',\n\n              // Set template selector.\n              template: '#layout',\n\n              // Declaratively bind a nested View to the layout.\n              views: {\n                '#first-pane': new InvoiceListPane({\n                  collection: this.collection\n                }),\n              },\n          });\n\n          // Render whole layout for the first time.\n          this.layout.render();\n        },\n      });\n    ```", "```js\n      <script class=\"template\" type=\"template\" id=\"layout\">\n        <h1>Billing application</h1>\n        <div id=\"links-pane\">\n          <a href=\"#invoice/add\">+ Add an invoice</a>\n        </div>\n        <div id=\"first-pane\"></div>\n        <div id=\"second-pane\"></div>\n      </script>\n    ```", "```js\n        routes: {\n          '': 'invoicePage',\n          'invoice': 'invoicePage',\n          'invoice/add': 'addInvoicePage',\n          'invoice/:id/edit': 'editInvoicePage',\n          'invoice/:id/delete': 'deleteInvoicePage',\n          'invoice/:id': 'invoicePage',\n        },\n\n        // Page callbacks.\n        invoicePage: function(id) {\n          this.switchPane('InvoicePane', id);\n        },\n        addInvoicePage: function() {\n          this.switchPane('EditInvoicePane', null);\n        },\n        editInvoicePage: function(id) {\n          this.switchPane('EditInvoicePane', id);\n        },\n        deleteInvoicePage: function(id) {\n          this.switchPane('DeleteInvoicePane', id);\n        },\n    ```", "```js\n        switchPane: function(pane_name, id) {\n\n          // Define panes array.\n          // This will allow use to create new object from string. \n          var panes = {\n            InvoicePane: InvoicePane,\n            EditInvoicePane: EditInvoicePane,\n            DeleteInvoicePane: DeleteInvoicePane \n          };\n\n          // Update collection.\n          this.collection.fetch({ success: function(collection) {\n\n            // Get model by id or take first model\n            // from collection.\n            var model = _.isUndefined(id) ?\n              collection.at(0) : collection.get(id);\n\n            // Create new pane and pass model and collection.\n            pane = new panes[pane_name] ({\n              model: model, collection: collection\n            });\n\n            // Render pane.\n            pane.render();\n\n            // Switch views.\n            window.workspace.layout.removeView('#second-pane');\n            window.workspace.layout.setView('#second-pane', pane);\n\n          }, reset: true });\n        },\n    ```", "```js\n      var InvoiceListPane = Backbone.Layout.extend({\n\n        // Returns selector for template.\n        template: '#invoice-list-pane',\n\n        // Set selector for template.\n        serialize: function() {\n          return { invoices: _.chain(this.collection.models) };\n        },\n\n        // Bind callbacks to collection event.\n        initialize: function() {\n          this.listenTo(this.collection, 'reset', this.render);\n        }\n      });\n    ```", "```js\n     <script class=\"template\" type=\"template\" id=\"invoice-list-pane\">\n        <h3>Invoices:</h3>\n        <ul>\n          <% invoices.each(function(invoice) { %>\n            <li>\n              <a href=\"#invoice/<%= invoice.id %>\">\n                <%= invoice.get('referenceNumber') %>\n              </a>\n            </li>\n          <% }); %>\n        </ul>\n      </script>\n    ```", "```js\n      var InvoicePane = Backbone.Layout.extend({\n\n        // Set selector for template.\n        template: '#invoice-pane',\n\n        // Returns data for template.\n        serialize: function() {\n          return { invoice: this.model };\n        },\n\n        // Bind callbacks to model events.\n        initialize: function() {\n          this.listenTo(this.model, 'change', this.render);\n        }\n      });\n    ```", "```js\n      <script class=\"template\" type=\"template\" id=\"invoice-pane\">\n        <h3>Invoice details:</h3>\n        Reference Number:\n          <%= invoice.get('referenceNumber') %><br>\n        Date: <%= invoice.get('date') %><br>\n        Status: <%= invoice.get('status') %><br>\n        <br>\n        <a href=\"#invoice/<%= invoice.id %>/edit\" class=\"btn\">\n          Edit\n        </a>\n        <a href=\"#invoice/<%= invoice.id %>/delete\" class=\"btn\">\n          Delete\n        </a>\n      </script>\n    ```", "```js\n      var EditInvoicePane = Backbone.Layout.extend({\n\n        // Set selector for template.\n        template: '#edit-invoice-pane',\n\n        // Returns data for template.\n        serialize: function() {\n\n          // Create new model if no model is given.\n          return {\n            invoice:\n              _.isEmpty(this.model) ?\n                new InvoiceModel() : this.model\n          };\n        },\n\n        // Bind callbacks form events.\n        events: {\n          \"click .submit\": \"save\"\n        },\n\n        // Save model\n        save: function() {\n          var data = {\n            referenceNumber: \n              this.$el.find('.referenceNumber').val(),\n            date: this.$el.find('.date').val(),\n            status: this.$el.find('.status').val(),\n          };\n\n          var success = function(model, response, options) {\n            window.workspace.navigate('#invoice/' + model.id, {\n              trigger: true\n            });\n          };\n\n          // Run appropriate method.\n          if (_.isEmpty(this.model)) {\n            this.collection.create(data, {success: success});\n          }\n          else {\n            this.model.save(data, { success: success});\n          }\n        }\n      });\n    ```", "```js\n      <script class=\"template\" type=\"template\"\n          id=\"edit-invoice-pane\">\n        <h3>Enter invoice details:</h3>\n        Reference Number:<br>\n        <input class=\"referenceNumber\" type=\"text\"\n              value=\"<%= invoice.get('referenceNumber') %>\"><br>\n        Date:<br>\n        <input class=\"date\" type=\"text\"\n              value=\"<%= invoice.get('date') %>\"><br>\n        Status:<br>\n        <input class=\"status\" type=\"text\"\n              value=\"<%= invoice.get('status') %>\"><br>\n        <button class=\"btn btn-primary submit\">Save</button>\n      </script>\n    ```", "```js\n      var DeleteInvoicePane = Backbone.Layout.extend({\n\n        // Set selector for template.\n        template: '#delete-invoice-pane',\n\n        // Returns data for template.\n        serialize: function() {\n          return { invoice: this.model };\n        },\n\n        // Bind callbacks to form events.\n        events: {\n          \"click .submit\": \"delete\"\n        },\n\n        // Delete model.\n        delete: function() {\n          this.model.destroy({\n            success: function(model, response) {\n              window.workspace.navigate('#invoice', {\n                trigger: true \n            });\n          }});\n        }\n      });\n    ```", "```js\n    <script class=\"template\" type=\"template\"\n        id=\"delete-invoice-pane\">\n      <h3>Are you sure you want to delete invoice\n      <%= invoice.get('referenceNumber') %>?</h3>\n      <button class=\"btn submit btn-primary\">Yes</button>\n      <a href=\"#invoice/<%= invoice.id %>\" class=\"btn\">No</a>\n    </script>\n    ```", "```js\n      // Create the workspace.\n      window.workspace = new Workspace();\n\n      // Start the application.\n      Backbone.history.start();\n    ```", "```js\ncollection.fetch({\n  success: function(collection, response, options){\n    // success behavior\n  },\n\n  error: function(collection, response, options){\n    // fall back behavior\n  }\n })\n```", "```js\n    // Convert MongoDB Extended JSON into regular JSON.\n  Backbone.Model.prototype.parse = function(resp, options) {\n    if (_.isObject(resp._id)) {\n      resp[this.idAttribute] = resp._id.$oid;\n      delete resp._id;\n    }\n\n    return resp;\n  },\n\n  // Convert regular JSON into MongoDB extended one.\n  Backbone.Model.prototype.toExtendedJSON= function() {\n    var attrs = this.attributes;\n\n    var attrs = _.omit(attrs, this.idAttribute);\n    if (!_.isUndefined(this[this.idAttribute])) {\n      attrs._id = { $oid: this[this.idAttribute] };\n    }\n\n    return attrs;\n  },\n\n  // Substute toJSON method when performing synchronization.\n  Backbone.Model.prototype.sync = function() {\n    var toJSON = this.toJSON;\n    this.toJSON = this.toExtendedJSON;\n\n    var ret = Backbone.sync.apply(this, arguments);\n\n    this.toJSON = toJSON;\n\n    return ret;\n  }\n\n```", "```js\n      var PollingCollection = Backbone.Collection.extend({\n        polling: false,\n\n        // Set default interval in seconds.\n        interval: 1,\n\n        // Make all object methods to work from its own context.\n        initialize: function() {\n          _.bindAll(this);\n        },\n\n        // Starts polling.\n        startPolling: function(interval) {\n          this.polling = true;\n\n          if (interval) {\n            this.interval = interval;\n          }\n          this.executePolling();\n        },\n\n        // Stops polling.\n        stopPolling: function() {\n          this.polling = false;\n        },\n\n        // Executes polling.\n        executePolling: function() {\n          this.fetch({\n            success: this.onFetch, error: this.onFetch\n          });\n        },\n\n        // Runs recursion.\n        onFetch: function() {\n          setTimeout(this.executePolling, 1000 * this.interval)\n        },\n      });\n    ```", "```js\n      var appConfig = {\n        baseURL:'https://api.mongolab.com/api/1/databases/billing-app/collections/',\n        addURL: '?apiKey=kNCrqJUqB4n1S_qW7wnXH43NH9XKjdIL'\n      }\n    Define a model and a collection.\n      var InvoiceModel = Backbone.Model.extend({\n        url: function() {\n          if (_.isUndefined(this.id)) {\n            return appConfig.baseURL + 'invoices' +\n              appConfig.addURL;\n          }\n          else {\n            return appConfig.baseURL + 'invoices/' +\n              encodeURIComponent(this.id) + appConfig.addURL;\n          }\n        },\n      });\n\n      var InvoiceCollection = PollingCollection.extend({\n        model: InvoiceModel,\n        url: function() {\n          return appConfig.baseURL + 'invoices' +\n            appConfig.addURL;\n        },\n      });\n    ```", "```js\n      var InvoiceView = Backbone.View.extend({\n\n        // Define element tag name.\n        tagName: 'li',\n\n        // Define template.\n        template: _.template('Invoice #<%= referenceNumber %>.'),\n\n        // Render view.\n        render: function() {\n          $(this.el).html(this.template(this.model.toJSON()));\n\n          return this;\n        },\n\n        // Bind callback to the model events.\n        initialize: function() {\n          this.listenTo(this.model, 'change', this.render, this);\n          this.listenTo(this.model, 'destroy', this.remove, this);\n        }\n      });\n    ```", "```js\n      var InvoiceListView = Backbone.View.extend({\n\n        // Define element tag name.\n        tagName: 'ul',\n\n        // Render view.\n        render: function() {\n          $(this.el).empty();\n\n          // Append table  with a row.\n          _.each(this.collection.models, function(model, key) {\n            this.append(model);\n          }, this);\n\n          return this;\n        },\n\n        // Add invoice item row to the table.\n        append: function(model) {\n          $(this.el).append(\n             new InvoiceView({ model: model }).render().el\n          );\n        },\n\n        // Remove model from collection.\n        remove: function(model) {\n          model.trigger('destroy');\n        },\n\n        // Bind callbacks to the collection events.\n        initialize: function() {\n         this.listenTo(this.collection,'reset',this.render,this);     \n         this.listenTo(this.collection,'add',this.appen,this);\n         this.listenTo(this.collection,'remove',this.remove,this);\n        },\n      });\n    ```", "```js\n        collection = new InvoiceCollection();\n\n        $('body').append('<h3>Invoices</h3>')\n        $('body').append(new InvoiceListView({\n          collection: collection,\n        }).render().el);\n    ```", "```js\n        collection.startPolling();\n    ```", "```js\n  var InvoiceCollection = Backbone.Collection.extend({\n    model: InvoiceModel,\n\n    // Use local storage.\n    localStorage:\n      new Backbone.LocalStorage(\"InvoiceCollection\")\n  });\n```"]