["```js\n$ mkdir making-requests\n$ cd making-requests\n$ touch requests.js\n```", "```js\n    const http = require('node:http');\n    ```", "```js\n    http.get('http://example.com', (res) =>\n      res.pipe(process.stdout));\n    ```", "```js\n    $ node requests.js\n    ```", "```js\n    // http.get('http://example.com', (res) =>\n      res.pipe(process.stdout));\n    ```", "```js\n    const payload = JSON.stringify({\n        'name': 'Laddie',\n        'breed': 'Rough Collie'\n    });\n    ```", "```js\n    const opts = {\n      method: 'POST',\n      hostname: 'postman-echo.com',\n      path: '/post',\n      headers: {\n        'Content-Type': 'application/json',\n        'Content-Length': Buffer.byteLength(payload)\n      }\n    };\n    ```", "```js\n    const req = http.request(opts, (res) => {\n      process.stdout.write('Status Code: ' +\n        res.statusCode + '\\n');\n      process.stdout.write('Body: ');\n      res.pipe(process.stdout);\n    });\n    ```", "```js\n    req.on('error', (err) => console.error('Error: ',\n      err));\n    ```", "```js\n    req.end(payload);\n    ```", "```js\n    $ node requests.js\n    Status Code: 200\n    Body: {\n      \"args\": {},\n      \"data\": {\n        \"name\": \"Laddie\",\n        \"breed\": \"Rough Collie\"\n      },\n      \"files\": {},\n      \"form\": {},\n      \"headers\": {\n        \"x-forwarded-proto\": \"http\",\n        \"x-forwarded-port\": \"80\",\n        \"host\": \"postman-echo.com\",\n        \"x-amzn-trace-id\": \"Root=1-656ddcfe-\n          52b1cf7a1671685c6985fa59\",\n        \"content-length\": \"53\",\n        \"content-type\": \"application/json\"\n      },\n      \"json\": {\n        \"name\": \"Laddie\",\n        \"breed\": \"Rough Collie\"\n      },\n      \"url\": \"http://postman-echo.com/post\"\n    }%\n    ```", "```js\nreq.on('error', (err) => console.error('Error: ', err));\n```", "```js\nconst http = require('node:http');\nfunction httpGet (url) {\n  return new Promise((resolve, reject) => {\n    http\n      .get(url, (res) => {\n        let data = '';\n        res.on('data', (chunk) => {\n          data += chunk;\n        });\n        res.on('end', () => {\n          resolve(data);\n        });\n      })\n      .on('error', (err) => {\n        reject(err);\n      });\n  });\n}\nconst run = async () => {\n  const res = await httpGet('http://example.com');\n  console.log(res);\n};\nrun();\n```", "```js\nconst https = require('node:https');\nhttps.get('https://example.com', ...);\nhttps.request('https://example.com', ...);\n```", "```js\n    $ touch fetchGet.js fetchPost.js\n    ```", "```js\n    async function performGetRequest() {\n      const url = 'https://api.github.com/orgs/nodejs';\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status:\n            ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('GET request successful:', data);\n      } catch (error) {\n        console.error('Error during GET request:',\n          error);\n      }\n    }\n    performGetRequest();\n    ```", "```js\n    $ node fetchGet.js\n    GET request successful: {\n      login: 'nodejs',\n      id: 9950313,\n      ...\n    }\n    ```", "```js\n    async function performPostRequest() {\n      const url = 'https://postman-echo.com/post';\n      const postData = {\n        name: 'Laddie',\n        breed: 'Rough Collie'\n      };\n      try {\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(postData)\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status:\n            ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('POST request successful:', data);\n      } catch (error) {\n        console.error('Error during POST request:',\n          error);\n      }\n    }\n    performPostRequest();\n    ```", "```js\n    $ node fetchPost.js\n    POST request successful: {\n      args: {},\n      data: { name: 'Laddie', breed: 'Rough Collie' },\n    ...\n    ```", "```js\n$ mkdir http-server\n$ cd http-server\n$ touch server.js\n```", "```js\n    const http = require('node:http');\n    ```", "```js\n    const HOSTNAME = process.env.HOSTNAME || '0.0.0.0';\n    const PORT = process.env.PORT || 3000;\n    ```", "```js\n    const server = http.createServer((req, res) => {\n      if (req.method !== 'GET') return error(res, 405);\n      if (req.url === '/todo') return todo(res);\n      if (req.url === '/') return index(res);\n      error(res, 404);\n    });\n    ```", "```js\n    function error (res, code) {\n      res.statusCode = code;\n      res.end(`{\"error\":\n        \"${http.STATUS_CODES[code]}\"}`);\n    }\n    ```", "```js\n    function todo (res) {\n      res.end('[{\"task_id\": 1, \"description\": \"walk the\n        dog\"}]}');\n    }\n    ```", "```js\n    function index (res) {\n      res.end('{\"name\": \"todo-server\"}');\n    }\n    ```", "```js\n    server.listen(PORT, HOSTNAME, () => {\n      console.log(`Server listening on port\n        ${server.address().port}`);\n    });\n    ```", "```js\n    $ node server.js\n    Server listening on port 3000\n    ```", "```js\n    $ curl http://localhost:3000/\n    {\"name\": \"todo-server\"}%\n    $ curl http://localhost:3000/todo\n    [{\"task_id\": 1, \"description\": \"walk the dog\"}]}%\n    $ curl -X DELETE http://localhost:3000/\n    {\"error\": \"Method Not Allowed\"}%\n    $ curl http://localhost:3000/not-an-endpoint\n    {\"error\": \"Not Found\"}%\n    ```", "```js\n  if (req.method !== 'GET') return error(res, 405);\n```", "```js\n  if (req.url === '/todo') return todo(res);\n  if (req.url === '/') return index(res);\n```", "```js\nconst HOSTNAME = process.env.HOSTNAME || '0.0.0.0';\nconst PORT = process.env.PORT || 3000;\n```", "```js\nconst PORT = process.env.PORT || 0;\n```", "```js\nHOSTNAME='0.0.0.0'\nPORT=3000\n```", "```js\n$ node --env-file=.env server.js\n```", "```js\n    $ mkdir post-server\n    $ cd post-server\n    $ touch server.js\n    ```", "```js\n    $ mkdir public\n    $ touch public/form.html\n    ```", "```js\n    <form method=\"POST\">\n        <label for=\"forename\">Forename:</label>\n        <input id=\"forename\" name=\"forename\">\n        <label for=\"surname\">Surname:</label>\n        <input id=\"surname\" name=\"surname\">\n        <input type=\"submit\" value=\"Submit\">\n    </form>\n    ```", "```js\n    const http = require('node:http');\n    const fs = require('node:fs');\n    const path = require('node:path');\n    ```", "```js\n    const form = fs.readFileSync(path.join(__dirname, 'public', 'form.html'));\n    ```", "```js\n    http\n      .createServer((req, res) => {\n        if (req.method === 'GET') {\n          get(res);\n          return;\n        }\n        error(405, res);\n      })\n      .listen(3000, () => console.log('Server running on\n        http://localhost:3000/'));\n    function get (res) {\n      res.writeHead(200, {\n        'Content-Type': 'text/html'\n      });\n      res.end(form);\n    }\n    function error (code, res) {\n      res.statusCode = code;\n      res.end(http.STATUS_CODES[code]);\n    }\n    ```", "```js\n    $ node server.js\n    ```", "```js\n      if (req.method === 'POST') {\n          post(req, res);\n          return;\n        }\n    ```", "```js\n    function post (req, res) {\n      if (req.headers['content-type'] !==\n        'application/x-www-form-urlencoded') {\n        error(415, res);\n        return;\n      }\n      let input = '';\n      req.on('data', (chunk) => {\n        input += chunk.toString();\n      });\n      req.on('end', () => {\n        console.log(input);\n        res.end(http.STATUS_CODES[200]);\n      });\n    }\n    ```", "```js\n    $ node server.js\n    forename=Ada&surname=Lovelace\n    ```", "```js\nhttp\n  .createServer((req, res) => {\n    if (req.method === 'GET') {\n      get(res);\n      return;\n    }\n    if (req.method === 'POST') {\n      post(req, res);\n      return;\n    }\n    error(405, res);\n  })\n  .listen(3000);\n```", "```js\n    $ cp server.js json-server.js\n    ```", "```js\n    function post (req, res) {\n      if (req.headers['content-type'] !==\n        'application/json') {\n          error(415, res);\n          return;\n        }\n    ...\n    ```", "```js\n      req.on('end', () => {\n        try {\n          const parsed = JSON.parse(input);\n          console.log('Received data: ', parsed);\n          res.end('{\"data\": ' + input + '}');\n        } catch (err) {\n          error(400, res);\n        }\n      });\n    ```", "```js\n    $ node json-server.js\n    ```", "```js\n    $ curl --header \"Content-Type: application/json\" \\\n      --request POST \\\n      --data '{\"forename\":\"Ada\",\"surname\":\"Lovelace\"}' \\\n      http://localhost:3000/\n    {\"data\": {\"forename\":\"Ada\",\"surname\":\"Lovelace\"}}%\n    ```", "```js\n    <script>\n      document.forms[0].addEventListener(\"submit\", (event) => {\n        event.preventDefault();\n        let data = {\n          forename:\n            document.getElementById(\"forename\").value,\n          surname:\n            document.getElementById(\"surname\").value,\n        };\n        console.log(\"data\", data);\n        fetch(\"http://localhost:3000\", {\n          method: \"post\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(data),\n        }).then(function (response) {\n          console.log(response);\n          return response.json();\n        });\n      });\n    </script>\n    ```", "```js\n    $ mkdir file-upload\n    $ cd file-upload\n    $ touch server.js\n    ```", "```js\n    $ npm init --yes\n    ```", "```js\n    $ mkdir public\n    $ mkdir uploads\n    ```", "```js\n    <form method=\"POST\" enctype=\"multipart/form-data\">\n        <label for=\"userfile\">File:</label>\n        <input type=\"file\" id=\"userfile\"\n          name=\"userfile\"><br>\n        <input type=\"submit\">\n    </form>\n    ```", "```js\n    $ npm install formidable\n    ```", "```js\n    const fs = require('node:fs');\n    const http = require('node:http');\n    const path = require('node:path');\n    const form = fs.readFileSync(path.join(__dirname,\n      'public', 'form.html'));\n    const { formidable } = require('formidable');\n    ```", "```js\n    http\n      .createServer((req, res) => {\n        if (req.method === 'GET') {\n          get(res);\n          return;\n        }\n        if (req.method === 'POST') {\n          post(req, res);\n          return;\n        }\n        error(405, res);\n      })\n     .listen(3000, () => {\n        console.log('Server listening on\n          http://localhost:3000');\n      });\n    function get (res) {\n      res.writeHead(200, {\n        'Content-Type': 'text/html'\n      });\n      res.end(form);\n    }\n    function error (code, res) {\n      res.statusCode = code;\n      res.end(http.STATUS_CODES[code]);\n    }\n    ```", "```js\n    function post (req, res) {\n      if (!/multipart\\/form-\n        data/.test(req.headers['content-type'])) {\n          error(415, res);\n          return;\n      }\n      const form = formidable({\n        keepExtensions: true,\n        uploadDir: './uploads'\n      });\n      form.parse(req, (err, fields, files) => {\n        if (err) return error(400, err);\n        res.writeHead(200, {\n          'Content-Type': 'application/json'\n        });\n        res.end(JSON.stringify({ fields, files }));\n      });\n    }\n    ```", "```js\n    $ node server.js\n    Server listening on http://localhost:3000\n    ```", "```js\n    {\n      \"fields\": {\n      },\n      \"files\": {\n        \"userfile\": [\n          {\n            \"size\": 21,\n            \"filepath\": \"/Users/beth/Node.js-\n    Cookbook/Chapter04/file-upload/uploads/ac36e936ec65f3b0699442f00.txt\",\n            \"newFilename\":\n               \"ac36e936ec65f3b0699442f00.txt\",\n            \"mimetype\": \"text/plain\",\n            \"mtime\": \"2024-04-15T02:52:18.886Z\",\n            \"originalFilename\": \"file.txt\"\n          }\n        ]\n      }\n    }\n    ```", "```js\n    $ ls uploads\n    ac36e936ec65f3b0699442f00.txt\n    ```", "```js\n  const form = formidable({\n    keepExtensions: true,\n    uploadDir: './uploads'\n  });\n```", "```js\n<form method=\"POST\" enctype=\"multipart/form-data\">\n    <label for=\"userfile\">File:</label>\n    <input type=\"file\" id=\"userfile\" name=\"userfile\"\n      multiple><br>\n    <input type=\"submit\">\n</form>\n```", "```js\n{\n  \"fields\": {},\n  \"files\": {\n    \"userfile\": [\n      {\n        \"size\": 334367,\n        \"filepath\": \"/Users/beth/Node.js-Cookbook/Chapter04/file-upload/uploads/8bcdb0be88a49a8e1aec95e00.jpg\",\n        \"newFilename\":\n          \"8bcdb0be88a49a8e1aec95e00.jpg\",\n        \"mimetype\": \"image/jpeg\",\n        \"mtime\": \"2024-04-15T02:57:23.589Z\",\n        \"originalFilename\": \"photo.jpg\"\n      },\n      {\n        \"size\": 21,\n        \"filepath\": \"/Users/beth/Node.js-Cookbook/Chapter04/file-upload/uploads/8bcdb0be88a49a8e1aec95e01.txt\",\n        \"newFilename\":\n          \"8bcdb0be88a49a8e1aec95e01.txt\",\n        \"mimetype\": \"text/plain\",\n        \"mtime\": \"2024-04-15T02:57:23.589Z\",\n        \"originalFilename\": \"file.txt\"\n      }\n    ]\n  }\n}\n```", "```js\n<form method=\"POST\" enctype=\"multipart/form-data\">\n    <label for=\"user\">User:</label>\n    <input type=\"text\" id=\"user\" name=\"user\"><br>\n    <label for=\"userfile\">File:</label>\n    <input type=\"file\" id=\"userfile\" name=\"userfile\"><br>\n    <input type=\"submit\">\n</form>\n```", "```js\n{\n  \"fields\": { \"user\" : [\"Beth\"] },\n  \"files\": {\n    \"userfile\": [\n      {\n        \"size\": 21,\n        \"filepath\": \"/Users/beth/Node.js-Cookbook/Chapter04/file-upload/uploads/659d0cc8a8898fce93231aa00.txt\",\n        \"newFilename\": \"659d0cc8a8898fce93231aa00.txt\",\n        \"mimetype\": \"text/plain\",\n        \"mtime\": \"2024-04-15T02:59:22.633Z\",\n        \"originalFilename\": \"file.txt\"\n      }\n    ]\n  }\n}\n```", "```js\n    $ mkdir websocket-server\n    $ cd websocket-server\n    $ touch client.js\n    $ touch server.js\n    ```", "```js\n    $ mkdir public\n    $ touch public/index.html\n    ```", "```js\n    $ npm init --yes\n    ```", "```js\n    $ npm install ws\n    ```", "```js\n    const WebSocket = require('ws');\n    ```", "```js\n    const WebSocketServer = new WebSocket.Server({\n      port: 3000\n    });\n    ```", "```js\n    WebSocketServer.on('connection', (socket) => {\n      socket.on('message', (msg) => {\n        console.log('Received:', msg.toString());\n        if (msg.toString() === 'Hello')\n          socket.send('World!');\n      });\n    });\n    ```", "```js\n    const fs = require('node:fs');\n    const http = require('node:http');\n    const index = fs.readFileSync('public/index.html');\n    const server = http.createServer((req, res) => {\n      res.setHeader('Content-Type', 'text/html');\n      res.end(index);\n    });\n    server.listen(8080);\n    ```", "```js\n    <h1>Communicating with WebSockets</h1>\n    <input id=\"msg\" /><button id=\"send\">Send</button>\n    <div id=\"output\"></div>\n    <script>\n        const ws = new WebSocket('ws://localhost:3000');\n        const output =\n          document.getElementById('output');\n        const send = document.getElementById('send');\n        send.addEventListener('click', () => {\n            const msg =\n              document.getElementById('msg').value;\n            ws.send(msg);\n            output.innerHTML += log('Sent', msg);\n        });\n        function log(event, msg) {\n            return '<p>' + event + ': ' + msg + '</p>';\n        }\n        ws.onmessage = function (e) {\n            output.innerHTML += log('Received', e.data);\n        };\n        ws.onclose = function (e) {\n            output.innerHTML += log('Disconnected',\n              e.code);\n        };\n        ws.onerror = function (e) {\n            output.innerHTML += log('Error', e.data);\n        };\n    </script>\n    ```", "```js\n    $ node server.js\n    $ node client.js\n    ```", "```js\nconst WebSocketServer = new WebSocket.Server({\n  port: 3000,\n});\n```", "```js\n    const ws = new WebSocket('ws://localhost:3000');\n```", "```js\n    ws.onmessage = function (e) {\n        output.innerHTML += log('Received', e.data);\n    };\n    ws.onclose = function (e) {\n        output.innerHTML += log('Disconnected', e.code);\n    };\n    ws.onerror = function (e) {\n        output.innerHTML += log('Error', e.data);\n    };\n```", "```js\n    $ touch node-client.js\n    ```", "```js\n    const WebSocket = require('ws');\n    const ws = new WebSocket('ws://localhost:3000');\n    ```", "```js\n    ws.on('open', () => {\n      console.log('Connected');\n    });\n    ws.on('close', () => {\n      console.log('Disconnected');\n    });\n    ws.on('message', (message) => {\n      console.log('Received:', message.toString());\n    });\n    ```", "```js\n    setInterval(() => {\n      ws.send('Hello');\n    }, 3000);\n    ```", "```js\n    $ node server.js\n    $ node node-client.js\n    ```", "```js\n    Connected\n    Received: World!\n    Received: World!\n    Received: World!\n    ```", "```js\n$ mkdir server-smtp\n$ cd server-smtp\n$ touch server.js\n```", "```js\n$ npm init --yes\n```", "```js\n    $ npm install smtp-server\n    ```", "```js\n    const SMTPServer = require('smtp-\n      server').SMTPServer;\n    ```", "```js\n    const PORT = 4321;\n    ```", "```js\n    const server = new SMTPServer({\n      disabledCommands: ['STARTTLS', 'AUTH'],\n      logger: true\n    });\n    ```", "```js\n    server.on('error', (err) => {\n      console.error(err);\n    });\n    ```", "```js\n    server.listen(PORT);\n    ```", "```js\n    $ node server.js\n    [2020-04-27 21:57:51] INFO  SMTP Server listening on [::]:4321\n    ```", "```js\n    $ telnet localhost 4321\n    $ nc -c localhost 4321\n    ```", "```js\nconst server = new SMTPServer({\n  disabledCommands: ['STARTTLS', 'AUTH'],\n  logger: true\n});\n```", "```js\n    $ npm install nodemailer\n    ```", "```js\n    $ touch send-email.js\n    ```", "```js\n    const nodemailer = require('nodemailer');\n    ```", "```js\n    const transporter = nodemailer.createTransport({\n      host: 'localhost',\n      port: 4321,\n    });\n    ```", "```js\n    transporter.sendMail(\n      {\n        from: 'beth@example.com',\n        to: 'laddie@example.com',\n        subject: 'Hello',\n        text: 'Hello world!',\n      },\n      (err, info) => {\n        if (err) {\n          console.log(err);\n        }\n        console.log(\"Message Sent:\", info);\n      }\n    );\n    ```", "```js\n    $ node server.js\n    ```", "```js\n    $ node send-email.js\n    ```", "```js\n    [2020-04-27 23:05:44] INFO  [#cifjnbwdwbhcf54a] Connection from [127.0.0.1]\n    [2020-04-27 23:05:44] DEBUG [#cifjnbwdwbhcf54a] S: 220 Beths-MBP.lan ESMTP\n    [2020-04-27 23:05:44] DEBUG [#cifjnbwdwbhcf54a] C: EHLO Beths-MBP.lan\n    [2020-04-27 23:05:44] DEBUG [#cifjnbwdwbhcf54a] S: 250-Beths-MBP.lan Nice to meet you, [127.0.0.1]\n    [2020-04-27 23:05:44] DEBUG [#cifjnbwdwbhcf54a] 250-PIPELINING\n    [2020-04-27 23:05:44] DEBUG [#cifjnbwdwbhcf54a] 250-8BITMIME\n    [2020-04-27 23:05:44] DEBUG [#cifjnbwdwbhcf54a] 250 SMTPUTF8\n    [2020-04-27 23:05:44] DEBUG [#cifjnbwdwbhcf54a] C: MAIL FROM:<beth@example.com>\n    [2020-04-27 23:05:44] DEBUG [#cifjnbwdwbhcf54a] S: 250 Accepted\n    [2020-04-27 23:05:44] DEBUG [#cifjnbwdwbhcf54a] C: RCPT TO:<laddie@example.com>\n    [2020-04-27 23:05:44] DEBUG [#cifjnbwdwbhcf54a] S: 250 Accepted\n    [2020-04-27 23:05:44] DEBUG [#cifjnbwdwbhcf54a] C: DATA\n    [2020-04-27 23:05:44] DEBUG [#cifjnbwdwbhcf54a] S: 354 End data with <CR><LF>.<CR><LF>\n    [2020-04-27 23:05:44] INFO  <received 261 bytes>\n    [2020-04-27 23:05:44] DEBUG [#cifjnbwdwbhcf54a] C: <261 bytes of DATA>\n    [2020-04-27 23:05:44] DEBUG [#cifjnbwdwbhcf54a] S: 250 OK: message queued\n    [2020-04-27 23:05:44] INFO  [#cifjnbwdwbhcf54a] Connection closed to [127.0.0.1]\n    ```", "```js\n    Message Sent: { accepted: [ 'laddie@example.com' ],\n      rejected: [],\n      ehlo: [ 'PIPELINING', '8BITMIME', 'SMTPUTF8' ],\n      envelopeTime: 4,\n      messageTime: 2,\n      messageSize: 279,\n      response: '250 OK: message queued',\n      envelope: { from: 'beth@example.com', to: [\n        'laddie@example.com' ] },\n      messageId: '<fde460ce-f83a-95e2-5f8a-\n        76dd11f6e61f@example.com>' }\n    ```"]