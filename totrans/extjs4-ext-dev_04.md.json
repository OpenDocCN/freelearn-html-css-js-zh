["```js\nExt.define('Examples.ux.LabeledSpinner', {\n  extend : 'Ext.form.field.Spinner',\n  alias : 'widget.labeledspinner',\n\n  onSpinUp : function() {\n    this.setValue(++this.value);\n  },\n\n  onSpinDown : function() {\n    this.setValue(--this.value);\n  }\n});\n```", "```js\nExt.define('Examples.ux.LabeledSpinner', {\n  extend : 'Ext.form.field.Spinner',\n  alias : 'widget.labeledspinner',\n\n  config : {\n    labelText : \",\n    minValue: 0,\n    value: 0\n  },\n\n  onSpinUp : function() {\n    var value = parseFloat(this.getValue().split(' ')[0]);\n    this.setValue(++value);\n  },\n\n  onSpinDown : function() {\n    var value = parseFloat(this.getValue().split(' ')[0]);\n    this.setValue(--value);\n  },\n\n  setValue : function(value) {\n    value = (value ||this.minValue) + ' ' +this.getLabelText();\n    this.callParent(arguments);\n  }\n}); \n```", "```js\nExt.define('Examples.ux.LabeledSpinner', {\n  extend : 'Ext.form.field.Spinner',\n  alias : 'widget.labeledspinner',\n\n  config : {\n    labelText : '',\n    minValue : 0,\n    maxValue : Number.MAX_VALUE,\n    step : 1,\n    value : 0\n  },\n\n  onBlur : function() {\n    if (isNaN(this.getValue())) {\n      this.setValue(this.getLabeledValue(this.getMinValue()));\n    }\n    else{\n      this.setValue(this.getLabeledValue());\n    }\n  },\n\n  onSpinUp : function() {\n    var val = this.getValue() || this.getMinValue();\n    this.setChangedValue(val + this.step);\n  },\n\n  onSpinDown : function() {\n    var val = this.getValue() || this.getMinValue();\n\n    this.setChangedValue(val - this.step);\n  },\n\n  getLabeledValue : function(value) {\n    value = Ext.isDefined(value) ? value : this.getValue();\n    if (value.toString().indexOf(this.getLabelText()) == -1) {\n      return value + ' ' + this.getLabelText();\n    } else {\n      return value;\n    }\n  },\n\n  setValue : function(value) {\n    if(!this.readOnly){\n      value = this.getLabeledValue(value);\n    }\n    this.callParent(arguments);\n  },\n\n  getValue : function() {\n    var me = this, \n    val = me.rawToValue(me.processRawValue(me.getRawValue()));\n\n    val = parseFloat(val.split(' ')[0]);\n    return val;\n  },\n\n  setChangedValue : function(value){        \n    if(!isNaN(value)){\n      this.setValue(Ext.Number.constrain(value, \n        this.getMinValue(), this.getMaxValue()));\n    }\n  }\n\n}); \n```"]