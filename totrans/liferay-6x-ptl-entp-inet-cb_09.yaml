- en: Chapter 9. Liferay Workflow Capability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The Kaleo Web installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Single Approver workflow for the user creation process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The web content creation and the fork-join workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kaleo conditions in a message board example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kaleo timers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A workflow is a series of activities necessary to complete a task. In other
    words, a workflow consists of a sequence of states connected by transition. Each
    state has a specific step before it and a specific step after it. In general,
    it''s a linear-defined process, which describes the flow between states. The term
    workflow indicates how people do their work and how they handle information. To
    understand workflow definitions, let''s define its specific vocabulary:'
  prefs: []
  type: TYPE_NORMAL
- en: '**State**: This term describes a unique state that will execute a specific
    action (or many actions) on a work item. For instance, new, approved, commit,
    done, remove, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Task**: This defines an activity to be done on a work item between states.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transition**: This defines how a transition rules from one state to another.
    It means that transition describes a list of tasks, which have to be done to transform
    items from one state to another.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liferay Portal includes a workflow engine called Kaleo. This engine provides
    functionalities to define and deploy workflow definitions. Kaleo is an external
    web plugin, which needs to be deployed like other plugins. The current version
    of Kaleo is available on the Liferay marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: The Kaleo Web Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The workflow engine called Kaleo is defined as a web plugin. Briefly, a web
    plugin is a normal web application, which also provides the ability to use the
    Liferay service layer that is built on Service Builder and other Liferay plugins,
    such as hooks, portlets, and so on. In general, it's a hybrid between a typical
    servlet application and Liferay-specific plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To correctly install Liferay plugins, it's required to create an account on
    the official Liferay site. This account allows you to download plugins on the
    marketplace, discuss on a message board, creates blogs, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the Liferay 6.1.1 GA2 version, Liferay provides a marketplace portlet to
    install all its available plugins. In Liferay 6.2 marketplace portlet is already
    installed, so the installation of the Kaleo plugin is really simple. In order
    to install the Kaleo workflow, go through the following set of steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in as an administrator on the intranet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Admin** | **Control Panel**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Store** option in the **Apps** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Authenticate yourself by entering the Liferay login and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If Liferay provides a new marketplace portlet, there will be a wizard that updates
    a portlet and downloads the newest one.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the marketplace search form, type `Kaleo Workflow CE` and select the proper
    result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Free** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select or create a new project for the purchase; read and accept the terms of
    use. Fill **Legal Entity Name** and click on the **Purchase** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The system should display the following message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Thank You!**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Your receipt ID number is <RECEIPT_ID>**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**A confirmation email for this order was sent to your inbox.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Click on "See Purchased" to view and manage your purchases online, or you
    may go to the Marketplace through your Liferay Portal instance and manage your
    purchases from there.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to **See Purchased Apps** and click on the **Install** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that a **Workflow** tab is in the **Control Panel** | **Configuration**
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Liferay uses its own product for the workflow implementation. All Kaleo entities
    are generated by the service-builder mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: 'It means that `service.xml` defines a set of entities: Kaleo Action, Kaleo
    Condition, Kaleo Definition, Kaleo Instance, Kaleo Instance Token, Kaleo Log,
    Kaleo Node, Kaleo Notification, Kaleo Notification Recipient, Kaleo Task, Kaleo
    Task Assignment, KaleoTask Assignment Instance, Kaleo Task Instance Token, Kaleo
    Timer, Kaleo Timer Instance Token, and Kaleo Transition. It''s not necessary to
    know the meaning of all these entities and their relations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After successful installation, there are a couple of new options in the Liferay
    environment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Workflow** option in the **Control Panel** | **Configuration** section:
    This is a global workflow configuration, which allows you to define newer workflow
    definitions and manage default workflows between assets (for instance, web content
    articles, users, blogs, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workflow configuration** in the **Admin** | **Site Administration** | **Configuration**:
    This defines workflows for the current site'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **My Workflow tasks** tab in the **{USERNAME}** | **My account** section:
    This functionality lists all pending and complete workflows tasks assigned to
    a specific user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**My Submission** in the **{USERNAME}** | **My account** section: This provides
    the list of assets submitted for the review process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Furthermore, Kaleo added specific roles, which can be used in workflow definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: The organization content reviewer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The portal content reviewer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The site content reviewer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on how to manage files or web contents, refer to
  prefs: []
  type: TYPE_NORMAL
- en: '*Managing files in Liferay using Documents and Media portlet* recipe in [Chapter
    6](part0050.xhtml#aid-1FLS41 "Chapter 6. Documents and Media in Liferay"), *Documents
    and Media in Liferay*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Managing and displaying web contents* recipe in [Chapter 7](part0055.xhtml#aid-1KEEU1
    "Chapter 7. Working with Content"), *Working with Content*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Single Approver workflow for the user creation process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Kaleo Workflow provides a Single Approver definition. This workflow
    requires one approval state before any asset is published.
  prefs: []
  type: TYPE_NORMAL
- en: We will show you how to use this workflow for the user creation process.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enabling the Single Approver definition is an easy process. To activate workflow
    for the user creation, perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **Admin** | **Control Panel** | **Configuration** | **Workflow**
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Default Configuration** tab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the **User** resource and select the **Single Approver (version 1)** definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To check how Single Approver works, try to create a new account in the Sign
    In portlet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the Sign In portlet page. By default, it is on the main page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Create Account** option and fill in the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After submitting the form, the system should display the following message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Thank you for creating an account. You will be notified via email at your-mail@example.com
    when your account has been approved.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The last thing in this process is to approve a new user. In order to achieve
    this, run through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in as an administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **My Account** | **My Workflow** tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find a pending task with the review status and edit it by clicking on the hyperlink
    in the table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Assigned to Me** option next to **Assign to** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Approve** the user (in the dialog box, it''s possible to write a comment).![How
    to do it…](img/image00362.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Completed** tab and check the result. The approved user should be
    on the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Only a user with an assigned task can transfer it to the next task or state.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand this process, let''s examine the Single Approver definition (`single-approver-definition.xml`
    located in `webapps/kaleo-web/WEB-INF/classes/META-INF/definitions`). This definition
    can be drawn as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00363.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: State
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The starting point of this flow is a state called created. The definition of
    this state is present at the beginning of the `single-approver-definition.xml`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The state node contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This is the name of a state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initial`: This flag represents the initial state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'List of `transitions`: In this example, there is only one transition called
    review'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The transition node can define:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This is the name of a transition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target`: This is the name of the target state or task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default`: This is a flag which marks transition as default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next step of our flow is a `review` task, which is defined by a transition
    called `review`. Tasks are the most complex structures in a flow definition. The
    task review is the place where users can decide whether to approve an asset or
    reject it. The definition of this task is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The main attributes of task are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This is the name of the task, for instance, review.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actions`: This specifies the list of action elements or notification elements.
    In this example, actions contain only e-mail notifications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assignments`: This specifies the list of roles or users to whom the specific
    task is assigned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transitions`: This specifies the list of transition elements, which describe
    all possible ways to change the state or task. In this example, it''s approved
    or rejected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s look deeper into the actions definition. As we mentioned earlier, actions
    can contain notification elements and/or action elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The notification node has the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This is the name of the notification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`template`: This defines the notification''s message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`template-language`: This is one of the three options: freemarker, velocity,
    and text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`notification-type`: This specifies the e-mail, IM, private-message, or user-notification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution-type`: This specifies one of the three options: `onAssignment` (a
    notification is sent when a specific user is assigned to a specific asset), `onExit`
    (a notification is sent when a specific asset leaves a state or task), and `onEntry`
    (a notification is sent when a specific asset enters the state)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The IM type and the private-message type are placeholders for now. This means
    that the Kaleo Web doesn't support these types.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The second possibility is to define an action, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'An action element has a simple structure, but it''s a powerful tool to invoke
    every piece of code from Liferay. Action contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This specifies the name of the action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script`: This specifies the script definition. In this section, it''s possible
    to write a code, which will be invoked on defining the execution type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script-language`: This defines the language which will be used in the script,
    for instance, Groovy, BeanShell, DRL, JavaScript, Python, Ruby. The most commonly
    used is the BeanShell one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution-type`: This specifies one of the three options: `onAssignment` (a
    notification is sent when a specific user is assigned to a specific asset), `onExit`
    (a notification is sent when a specific asset leaves a state or task), and `onEntry`
    (a notification is sent when a specific asset enters some state).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The web content creation and the fork-join workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume that our goal is to create a Kaleo definition in order to publish
    articles with the following requirements. Everyone can write an article and submit
    it to reviewers. The review stage has two independent (parallel) steps:'
  prefs: []
  type: TYPE_NORMAL
- en: UI quality reviewing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content quality reviewing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only after these steps, it's possible to publish an article. In this recipe,
    we will show how to use the fork and join functionality in order to create the
    Kaleo definition. Forks and joins are used for parallel processing purposes. Thus,
    they will be a good solution to our problem.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, let''s visualize workflow and define states, tasks, and transitions.
    This diagram will help us understand the whole process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00364.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the preceding diagram, in our workflow there are following components:'
  prefs: []
  type: TYPE_NORMAL
- en: The **created** and **approved** state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **UI quality review** and **content quality review** tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fork and join functionality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second step is to write a prototype, which defines states, tasks, and transitions
    listed previously:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is only a draft of the real definition. You will find the working definition
    in the code files for this chapter along with this book.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The third step is to complete the preceding definition by specifying each node.
    It can be done by copying parts from the Single Approver definition.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to upload this definition in the Kaleo workflow configuration,
    which is placed in the **Admin** | **Control Panel** | **Configuration** | **Workflow**
    section. After uploading the Kaleo definition, there should be a successful message.
    Now, the new definition will be visible in the **Definitions** tab.
  prefs: []
  type: TYPE_NORMAL
- en: The final step is to enable a new workflow definition for the web content article.
    This step was described in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This definition uses the fork and join functionality for web content articles.
    In general, when the author adds a new web content and submits it for publication,
    Kaleo workflow creates two tasks: UI Quality Review and Content Quality Review.
    Only after acceptance of these two tasks, the article status changes to approved.
    When the reviewing process is in progress, an article has a pending status.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's look deeply into fork and join definitions.
  prefs: []
  type: TYPE_NORMAL
- en: The fork element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Fork has a similar structure as a state element. The main function of fork
    is to create a list of tasks in a parallel way. The main elements are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This specifies the name of the fork used in a transition definition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transitions`: This specifies the list of transitions (tasks or states)to be
    created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fork element has many other functionalities and elements, such as scripts,
    timers, actions, and so on. It can have a really complex structure with a huge
    number of functionalities. In this recipe, we described only the basic function
    of this element.
  prefs: []
  type: TYPE_NORMAL
- en: The join element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Join is an eternal partner of fork. This pair is always together. The main
    responsibility of this element is waiting unless all parallel tasks are performed
    and accepted. The join element has the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This specifies the name of the join, which is used in a transition
    definition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transitions`: This specifies the list of transitions. It''s usually one transition,
    which describes a state or task after the joining process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join has exactly the same structure as fork. It can have a very complex structure
    with a whole bunch of functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of the `join` element, it's possible to use the `join-xor` element.
    The main difference between join and `join-xor` is that join waits for the completion
    of all parallel tasks, but `join-xor` waits only for the first complete task.
  prefs: []
  type: TYPE_NORMAL
- en: Join-xor element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `join-xor` element has the same definition as join:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This specifies the name of the join used in a transition definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transitions`: This specifies the list of transitions. It''s usually one transition,
    which describes a state or task after the joining process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on managing the web content, refer to *Managing and displaying
    web contents* recipe in [Chapter 7](part0055.xhtml#aid-1KEEU1 "Chapter 7. Working
    with Content"), *Working with Content*.
  prefs: []
  type: TYPE_NORMAL
- en: Kaleo conditions in a message board example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kaleo workflow contains conditions. It's possible to use conditions to branch
    workflows and execute different tasks. Let's assume that we are message board
    moderators. In our company, there is a user who must accept new threads and many
    users who accept replies in threads. It's possible to achieve this functionality
    that allows message boards to work this way using Kaleo workflow conditions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This definition is similar to the fork and join workflow, but there is a great
    difference. There is no parallel workflow task. Instead, there is a condition,
    which moves an entity to a different state. Obviously, workflow is the same: the
    user creates a new entity and the moderator accepts it. There is little difference
    seen between roles, which are defined for a particular task.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the previous example, let''s visualize workflow and define states,
    tasks, and transitions. The following diagram will help you understand the whole
    process in a better way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00365.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding diagram contains following components:'
  prefs: []
  type: TYPE_NORMAL
- en: The **created** and **approved** state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Normal Review** and **Main Thread Review** tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The condition statement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s define these definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After defining Kaleo, let''s write a conditional script which represents our
    Kaleo condition. In this example, we will use the Groovy script, which will be
    placed in the `<script>` tag in the `<condition>` definition. So, let''s define
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the preceding example, we explained the workflow definition, which can be
    applied for all types of asset (for instance, user, web content article, message
    board, and so on). In every type, there is a typical flow: **Created** | **Normal
    Review Task** | **Approved**. However, if we apply this workflow for a message
    board entity, it will have a different flow: **Created** | **Main Thread Review**
    | **Approved**.'
  prefs: []
  type: TYPE_NORMAL
- en: Why does this happen? Groovy script defines a condition and determines the complete
    flow.
  prefs: []
  type: TYPE_NORMAL
- en: The first line gets a `className` definition. Next, the if statement checks
    whether this is a `MBMessage` entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next couple of lines get the specific `mbMessage` object and check whether
    this object is a root of `MBMessage`. It''s worth noting that there are predefined
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`returnValue`: This contains the transition''s target'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`workflowContext`: This object implements the `WorflowContext` interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Condition statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `<condition>` tag has the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This is the name of the condition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script`: This defines a condition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`script-language`: This defines the language which will be used in the script,
    for instance: Groovy, BeanShell, DRL, JavaScript, Python, Ruby. The most common
    use is the BeanShell one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transitions`: This specifies the list of transitions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kaleo timers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This last recipe concerns timers. This functionality allows users to define
    specific actions, which should be performed after a certain period of time. Let's
    modify our previous recipe a little with the condition example and add a timer
    definition. Our assumption is that the task called Main Thread Review shouldn't
    wait more than one hour for assignment to any user. After one hour, this task
    should be assigned to a user with the `test@liferay.com` e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, open the previous definition and find the Main Thread Review
    task. Between the assignments tag and the transitions tag, enter the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Kaleo web plugin gives users the possibility to react to the user's action
    after a specific time period. It allows you to assign tasks to specific users,
    send notifications, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<task-timers>` tag has the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`task-timer`: This specifies complex type with the timer''s definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This specifies the timer''s name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delay`: This specifies the delay definition and defines how much time the
    timer will wait until its actions are executed. For instance 1 hour, 5 minutes,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recurrence` (not used in this example): This triggers the action several times
    depending on the argument specified. For instance, for every 1 hour, definition
    invokes a specific action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`blocking`: If this is true, stop the workflow engine execution until the timer
    is executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timer actions`: This specifies the list of actions to be done after the delay
    definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
