["```js\n$ vue init webpack vuex-tutorial\n```", "```js\n$ cd vuex-tutorial\n```", "```js\n$ npm install\n```", "```js\n$ npm run dev\n```", "```js\n$ npm install --save vuex\n```", "```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n```", "```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nconst state = {\n count: 0\n}\n\nexport const store = new Vuex.Store({\n state\n})\n```", "```js\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport App from './App'\nimport { store } from './store/store'\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  store,\n  components: { App },\n  template: '<App/>'\n})\n```", "```js\n<template>\n  <div class=\"hello\">\n <h1>{{ $store.state.count }}</h1>\n </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App'\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n</style>\n```", "```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nconst state = {\n  count: 0\n}\n\nconst getters = {\n fetchCount: state => state.count\n}\n\nexport const store = new Vuex.Store({\n  state,\n  getters\n})\n```", "```js\n<template>\n  <div class=\"hello\">\n <h1>The count is: {{ fetchCount }}</h1>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nexport default {\n  name: 'HelloWorld',\n  computed: mapGetters([\n 'fetchCount'\n ])\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n</style>\n```", "```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nconst state = {\n  count: 0\n}\n\nconst getters = {\n  fetchCount: state => state.count\n}\n\nconst mutations = {\n increment: state => state.count++,\n decrement: state => state.count--\n}\n\nexport const store = new Vuex.Store({\n  state,\n  getters,\n  mutations\n})\n```", "```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nconst state = {\n  count: 0\n}\n\nconst getters = {\n  fetchCount: state => state.count\n}\n\nconst mutations = {\n  increment: state => state.count++,\n  decrement: state => state.count--\n}\n\nconst actions = {\n increment: ({ commit }) => commit('increment'),\n decrement: ({ commit }) => commit('decrement')\n}\n\nexport const store = new Vuex.Store({\n  state,\n  getters,\n  mutations,\n  actions\n})\n```", "```js\n<template>\n  <div class=\"hello\">\n    <h1>The count is: {{ fetchCount }}</h1>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nexport default {\n  name: 'HelloWorld',\n  computed: mapGetters([\n    'fetchCount'\n  ]),\n  methods: mapActions([\n 'increment',\n 'decrement'\n ])\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n</style>\n```", "```js\n<template>\n  <div class=\"hello\">\n    <h1>The count is: {{ fetchCount }}</h1>\n    <button class=\"btn btn-primary\" @click=\"increment\">Increase</button>\n <button class=\"btn btn-primary\" @click=\"decrement\">Decrease</button>\n  </div>\n</template>\n...\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <!-- Latest compiled and minified CSS -->\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\">\n    <title>vuex-tutorial</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n```", "```js\n$ cd movie_rating_app\n$ npm run build\n$ nodemon server.js\n```", "```js\n$ mongod\n```", "```js\n$ npm install --save vuex\n```", "```js\n...\n\"vue-router\": \"^3.0.1\",\n    \"vue-swal\": \"0.0.6\",\n    \"vue-template-compiler\": \"^2.5.14\",\n    \"vuetify\": \"^0.17.6\",\n    \"vuex\": \"^3.0.1\"\n  },\n...\n```", "```js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\n\nVue.use(Vuex);\n\nexport const store = new Vuex.Store({\n})\n```", "```js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\n\nVue.use(Vuex);\n\nexport const store = new Vuex.Store({\n  state: {\n movies: []\n },\n})\n```", "```js\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-vue/dist/bootstrap-vue.css';\n\nimport BootstrapVue from 'bootstrap-vue';\nimport Vue from 'vue';\nimport Vuetify from 'vuetify';\nimport VueSwal from 'vue-swal';\nimport App from './App';\nimport router from './router';\nimport { store } from './store/store';\n\nVue.use(BootstrapVue);\nVue.use(Vuetify);\nVue.use(VueSwal);\n\nVue.config.productionTip = false;\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  store,\n  router,\n  components: { App },\n  template: '<App/>',\n});\n```", "```js\n<script>\nexport default {\n  name: 'Movies',\n  computed: {\n movies() {\n return this.$store.getters.fetchMovies;\n }\n },\n mounted() {\n this.$store.dispatch(\"fetchMovies\");\n },\n};\n</script>\n```", "```js\n<template>\n  <v-layout row wrap>\n <v-flex xs4 v-for=\"movie in movies\" :key=\"movie._id\">\n      <v-card>\n        <v-card-title primary-title>\n        ...\n```", "```js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\n\nVue.use(Vuex);\n\nexport const store = new Vuex.Store({\n  state: {\n    movies: []\n  },\n  actions: {\n fetchMovies: (context, payload) => {\n axios({\n method: 'get',\n url: '/movies',\n })\n .then((response) => {\n context.commit(\"MOVIES\", response.data.movies);\n })\n .catch(() => {\n });\n }\n }\n})\n```", "```js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\n\nVue.use(Vuex);\n\nexport const store = new Vuex.Store({\n  state: {\n    movies: []\n  },\n  mutations: {\n MOVIES: (state, payload) => {\n state.movies = payload;\n }\n },\n  actions: {\n    fetchMovies: (context, payload) => {\n      axios({\n        method: 'get',\n        url: '/movies',\n      })\n        .then((response) => {\n          context.commit(\"MOVIES\", response.data.movies);\n        })\n        .catch(() => {\n        });\n    }\n  }\n})\n```", "```js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\n\nVue.use(Vuex);\n\nexport const store = new Vuex.Store({\n  state: {\n    movies: []\n  },\n  getters: {\n fetchMovies: state => state.movies,\n },\n  mutations: {\n    MOVIES: (state, payload) => {\n      state.movies = payload;\n    }\n  },\n  actions: {\n    fetchMovies: (context, payload) => {\n      axios({\n        method: 'get',\n        url: '/movies',\n      })\n        .then((response) => {\n          context.commit(\"MOVIES\", response.data.movies);\n        })\n        .catch(() => {\n        });\n    }\n  }\n})\n```", "```js\n<script>\nexport default {\n  data: () => ({\n    movie: null,\n    valid: true,\n    name: '',\n    description: '',\n    genre: '',\n    release_year: '',\n    nameRules: [\n      v => !!v || 'Movie name is required',\n    ],\n    genreRules: [\n      v => !!v || 'Movie genre year is required',\n      v => (v && v.length <= 80) || 'Genre must be less than equal to \n      80 characters.',\n    ],\n    releaseRules: [\n      v => !!v || 'Movie release year is required',\n    ],\n    select: null,\n    years: [\n      '2018',\n      '2017',\n      '2016',\n      '2015',\n    ],\n  }),\n  methods: {\n    submit() {\n if (this.$refs.form.validate()) {\n const movie = {\n name: this.name,\n description: this.description,\n release_year: this.release_year,\n genre: this.genre,\n }\n this.$store.dispatch(\"addMovie\", movie);\n this.$refs.form.reset();\n this.$router.push({ name: 'Home' });\n }\n return true;\n },\n    clear() {\n      this.$refs.form.reset();\n    },\n  },\n};\n</script>\n```", "```js\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\n\nVue.use(Vuex);\n\nexport const store = new Vuex.Store({\n  state: {\n    movies: []\n  },\n  getters: {\n    fetchMovies: state => state.movies,\n  },\n  mutations: {\n    ADD_MOVIE: (state, payload) => {\n state.movies.unshift(payload);\n },\n    MOVIES: (state, payload) => {\n      state.movies = payload;\n    }\n  },\n  actions: {\n    addMovie: (context, payload) => {\n return axios({\n method: 'post',\n data: payload,\n url: '/movies',\n headers: {\n 'Content-Type': 'application/json',\n },\n })\n .then((response) => {\n context.commit(\"ADD_MOVIE\", response.data)\n this.$swal(\n 'Great!',\n 'Movie added successfully!',\n 'success',\n );\n })\n .catch(() => {\n this.$swal(\n 'Oh oo!',\n 'Could not add the movie!',\n 'error',\n );\n });\n },\n    fetchMovies: (context, payload) => {\n      axios({\n        method: 'get',\n        url: '/movies',\n      })\n        .then((response) => {\n          context.commit(\"MOVIES\", response.data.movies);\n        })\n        .catch(() => {\n        });\n    }\n  }\n})\n```", "```js\n$ npm run build\n```"]