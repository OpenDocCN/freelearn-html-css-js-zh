["```js\n    var status = null;\n    if(typeof status != \"undefined\") {\n        console.log(\"status is defined\");\n    } else {\n        console.log(\"status is not defined\");\n    }\n    ```", "```js\nnpm install jasmine-node -g\n\n```", "```js\nThe quick brown fox jumps over the lazy dog.\n```", "```js\ndescribe(\"Testing the reading of the file's content.\", function() {\n  // ...\n});\n```", "```js\ndescribe(\"Testing the reading of the file's content.\", function() {\n  it(\"should create an instance of app.js\", function(done) {\n    var app = require(\"../app.js\");\n    expect(app).toBeDefined();\n    done();\n  });\n  it(\"should read the file\", function(done) {\n    var app = require(\"../app.js\");\n    var content = app.read(\"./file.txt\");\n    expect(content).toBe(\"The quick brown fox jumps over the lazy dog.\");\n    done();\n  });\n});\n```", "```js\nmodule.exports = {\n  read: function(filePath) {\n\n  }\n}\n```", "```js\nvar fs = require('fs');\nmodule.exports = {\n  read: function(filePath) {\n    return fs.readFileSync(filePath).toString();\n  }\n}\n```", "```js\ndescribe(\"Testing if the file contains certain words\", function() {\n  it(\"should contains 'brown'\", function(done) {\n    var app = require(\"../app.js\");\n    var found = app.check(\"brown\", \"The quick brown fox jumps over the lazy dog.\");\n    expect(found).toBe(true);\n    done();\n  });\n});\n```", "```js\nvar fs = require('fs');\nmodule.exports = {\n  read: function(filePath) {\n    return fs.readFileSync(filePath).toString();\n  },\n  check: function(word, content) {\n    return content.indexOf(word) >= 0 ? true : false;\n  }\n}\n```", "```js\ndescribe(\"Testing the whole module\", function() {\n  it(\"read the file and search for 'lazy'\", function(done) {\n    var app = require(\"../app.js\");\n    app.read(\"./file.txt\")\n    expect(app.check(\"lazy\")).toBe(true);\n    done();\n  });\n});\n```", "```js\nvar fs = require('fs');\nmodule.exports = {\n  fileContent: '',\n  read: function(filePath) {\n    var content = fs.readFileSync(filePath).toString();\n    this.fileContent = content;\n    return content;\n  },\n  check: function(word, content) {\n    content = content || this.fileContent;\n    return content.indexOf(word) >= 0 ? true : false;\n  }\n}\n```", "```js\nnpm install -g mocha\n\n```", "```js\ndescribe(\"Testing if the file contains certain words\", function() {\n  it(\"should contains 'brown'\", function(done) {\n    var app = require(\"../app.js\");\n    var found = app.check(\"brown\", \"The quick brown fox jumps over the lazy dog.\");\n    assert.equal(found, true);\n    done();\n  });\n});\ndescribe(\"Testing the whole module\", function() {\n  it(\"read the file and search for 'lazy'\", function(done) {\n    var app = require(\"../app.js\");\n    app.read(\"./file.txt\")\n    assert.equal(app.check(\"lazy\"), true);\n    done();\n  });\n});\n```", "```js\nvar http = require('http');\nvar url = require('url');\nvar port = 3000;\nvar pageA = '\\\n  <h1>First page</h1>\\\n  <form>\\\n    <input type=\"text\" name=\"title\" />\\\n    <input type=\"submit\" />\\\n  </form>\\\n';\nvar pageB = '\\\n  <h1>{title}</h1>\\\n  <a href=\"/\">back</a>\\\n';\nhttp.createServer(function (req, res) {\n  var urlParts = url.parse(req.url, true);\n  var query = urlParts.query;\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  if(query.title) {\n    res.end(pageB.replace('{title}', query.title));\n  } else {\n    res.end(pageA);\n  }\n}).listen(port, '127.0.0.1');\nconsole.log('Server running at http://127.0.0.1:' + port);\n```", "```js\nvar test = function(description, callback) {\n  console.log(description);\n  callback(function(subject) {\n    return {\n      toBe: function(value) {\n        if(subject !== value) {\n          console.log(\"! Expect '\" + subject + \"' to be '\" + value + \"'.\")\n        }\n      },\n      toBeDefined: function() {\n        if(typeof subject === 'undefined') {\n          console.log(\"! Expect '\" + subject + \"' to be defined\")\n          }\n      }\n    }\n  });\n}\n```", "```js\ntest(\"make a simple test\", function(expect) {\n  var variable = { property: 'value' };\n  expect(true).toBe(true);\n  expect(1).toBe(0);\n  expect(variable.property).toBeDefined()\n  expect(variable.missing).toBeDefined()\n});\n```", "```js\nvar page = require('webpage').create();\nvar url = 'http://127.0.0.1:3000';\npage.onConsoleMessage = function(msg) {\n  // ...\n};\npage.onLoadFinished = function(status) {\n  // ...\n};\npage.open(url);\n```", "```js\nvar page = require('webpage').create();\nvar url = 'http://127.0.0.1:3000';\npage.onConsoleMessage = function(msg) {\n  console.log(\"\\t\" + msg);\n};\npage.onLoadFinished = function(status) {\n  console.log(\"phantom: load finished\");\n  page.injectJs('./framework.js');\n   phantom.exit();\n};\npage.open(url);\n```", "```js\npage.onLoadFinished = function(status) {\n  console.log(\"phantom: load finished\");\n  page.injectJs('./framework.js');\n  page.evaluate(function() {\n    test(\"should open the first page\", function(expect) {\n      expect(document).toBeDefined();\n      expect(document.querySelector('h1').innerHTML).toBe('First page');\n      document.querySelector('input[type=\"text\"]').value = 'Phantom test';\n      document.querySelector('form').submit();\n    });\n  });\n  phantom.exit();\n};\n```", "```js\nvar steps = [\n  function() {\n    test(\"should open the first page\", function(expect) {\n      expect(document).toBeDefined();\n      expect(document.querySelector('h1').innerHTML).toBe('First page');\n      document.querySelector('input[type=\"text\"]').value = 'Phantom test';\n      document.querySelector('form').submit();\n    });\n  },\n  function() {\n    test(\"should land on the second page\", function(expect) {\n      expect(document).toBeDefined();\n      expect(document.querySelector('h1').innerHTML).toBe('Phantom test');\n        var link = document.querySelector('a');\n        var event = document.createEvent('MouseEvents');\n        event.initMouseEvent('click', true, true, window, 1, 0, 0);\n        link.dispatchEvent(event);\n    });\n  },\n  function() {\n    test(\"should return to the home page\", function(expect) {\n      expect(document.querySelector('h1').innerHTML).toBe('First page');\n    });\n  }\n];\npage.onLoadFinished = function(status) {\n  console.log(\"phantom: load finished\");\n  page.injectJs('./framework.js');\n  page.evaluate(steps.shift());\n  if(steps.length == 0) {\n    console.log(\"phantom: browser terminated\");\n    phantom.exit();\n  }\n};\n```", "```js\nnpm install -g dalek-cli\n\n```", "```js\npackage.json file looks:\n```", "```js\n{\n  \"name\": \"project\",\n  \"description\": \"description\",\n  \"version\": \"0.0.1\",\n  \"devDependencies\": {\n    \"dalekjs\": \"*\",\n    \"dalek-browser-chrome\": \"*\"\n  }\n}\n```", "```js\nvar url = 'http://127.0.0.1:3000';\nvar title = 'DalekJS test';\nmodule.exports = {\n  'should interact with the application': function (test) {\n    test\n    .open(url)\n    .assert.text('h1', 'First page', 'The title is \"First page\"')\n    .type('input[type=\"text\"]', title)\n    .submit('form')\n    .assert.text('h1', title, 'The title is \"' + title + '\"')\n    .click('a')\n    .assert.text('h1', 'First page', 'We are again on the home page')\n    .done()\n  }\n};\n```", "```js\ndalek .\\tests\\dalek.js -b chrome\n\n```", "```js\ntest\n.open(url)\n.assert.text('h1', 'First page', 'The title is \"First page\"')\n.type('input[type=\"text\"]', title)\n.submit('form')\n.assert.text('h1', title, 'The title is \"' + title + '\"')\n.screenshot('./screen.jpg')\n.click('a')\n.assert.text('h1', 'First page', 'We are again on the home page')\n.done()\n```"]