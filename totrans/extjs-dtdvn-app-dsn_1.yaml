- en: Chapter 1. Data Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book will take you step-by-step through the process of building a clear
    and user-friendly sales management database in Ext JS using information from an
    existing database.
  prefs: []
  type: TYPE_NORMAL
- en: This book is intended for intermediate Ext JS developers with operational knowledge
    of MySQL and who want to improve their programming skills and create a higher-level
    application.
  prefs: []
  type: TYPE_NORMAL
- en: The finished application will give you a working sales management database.
    However, the true value of this book is the hands-on process of creating the application,
    and the opportunity to easily transfer and incorporate features introduced in
    this book in your own future applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The standout features we will look at while building this application are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**History-supported back button functionality**: We will customize the Ext
    JS function to create a lighter method to scroll forwards and backwards while
    staying on a single page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More efficient screen management**: We''ll learn how simply registering a
    screen and naming conventions can help you cut down on the screen change processes;
    meaning you can focus more on the implementation behind each screen. Also, it
    will be easier to interact with the history just by conforming to this architecture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Communication methods with Ext.Direct**: Ext.Direct has a close affinity
    with Ext applications which makes for easier connection, easier maintenance, and
    removes the need for the client side to change the URL. Also, if you use Ext.Direct,
    you can reduce the stress on the server side as it combines multiple server requests
    into just one request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data display methods with charts**: In Ext JS, by simply adjusting the store
    and the data structure set to display in a grid, we can display the data graphically
    in a chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter will give you the basic building blocks of your database. In this
    chapter of the book, you will write the SQL code and and create tables in MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of the application – User, Customer, Quotation, Quotations, Bill,
    and Bills
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let's look at the structure of the application we're about to build.
    This is a sales management application built for the user to register customers,
    send quotations for orders, and finally to invoice the customer with a bill.
  prefs: []
  type: TYPE_NORMAL
- en: The user can input data in to the `Customer` table. The customer can be an individual
    or a company, either way, each customer receives a unique ID.
  prefs: []
  type: TYPE_NORMAL
- en: The `Quotation` table represents the final quotation sent to the customer. The
    `Quotations` table contains the individual items being ordered in the quotation.
  prefs: []
  type: TYPE_NORMAL
- en: A bill is the final invoice sent to the customer. As with the `Quotations` table,
    the `Bills` table refers to the individual items ordered by the customer.
  prefs: []
  type: TYPE_NORMAL
- en: The user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The user data is a simple structure that is used to log in to a system. It has
    an e-mail address, a password, and a name.
  prefs: []
  type: TYPE_NORMAL
- en: Do not delete the user data and physically manage it with a flag. It is connected
    to other data structures with joint ownership, recording the date and time when
    it was created along with the updated date and time.
  prefs: []
  type: TYPE_NORMAL
- en: When we design a table with a model of MySQL, it looks similar to the following
    table. After having carried out MD5, we perform SHA1\. Then, we will have 40 characters
    and can store the password.
  prefs: []
  type: TYPE_NORMAL
- en: '![The user](img/5446OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The customer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The customer data contains the name and address of the company or client. It
    lets the `Quotation` and `Bill` tables perform a relation of this data and use
    the data. Being the master data, adding to and deleting from the user interface
    is not available at this time. However, as you develop the application, you eventually
    should be able to edit this data.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the input fields for registering a customer.
    The sections under the `Name` column are the fields that need to be filled in
    for each customer. The `Type` column refers to the type of data to be entered,
    such as words, numbers, and dates. The `Key` column allows data to be referenced
    between different tables.
  prefs: []
  type: TYPE_NORMAL
- en: '![The customer](img/5446OS_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Quotation and Quotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Quotation` and `Quotations` tables have a 1-N relationship.
  prefs: []
  type: TYPE_NORMAL
- en: In `Quotation`, you can save the basic information of the document, and in `Quotations`
    you can store each item being ordered.
  prefs: []
  type: TYPE_NORMAL
- en: Quotation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This following screenshot shows the fields necessary for `Quotation`. The table
    headings are the same as in the `Customer` table explained previously, so let's
    fill this out accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Quotation](img/5446OS_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Quotations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the same as before, so let's go ahead and fill this out. The parent
    refers to the overall quotation that the `Quotations` (individual items) table
    belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: '![Quotations](img/5446OS_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bill and Bills
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Bill` table is almost the same as the `Quotation` table. However, the `Bill`
    table can sometimes contain the ID of an associated `Quotation` table.
  prefs: []
  type: TYPE_NORMAL
- en: Bill
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following screenshot shows the `Bill` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bill](img/5446OS_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bills
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to `Quotations`, in `Bills` you can store each item that is ordered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bills](img/5446OS_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating and dealing with the customer structure tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using MySQL, and the database character is set to `utf8` and collation
    is set to `utf8_bin`. When SQL describes the details of what we defined previously,
    each of these components are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: The User table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `User` table we prepared earlier becomes operational when the following
    code is executed. It''s important to remember to include `AUTO_INCREMENT` in the
    `id` column; otherwise, you have to input it manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Customer table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the following code is executed, the `Customer` table becomes operational:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is the foundation of creating an initial set of tables that can later be
    populated with data.
  prefs: []
  type: TYPE_NORMAL
- en: The Quotation table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the corresponding code for the `Quotation` table. As with the `Customer`
    table, this code snippet will lay the foundation of our table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The Bill table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with the previous two code snippets, the following code for the `Bill` table
    is very similar to the `Quotation` table, so this can be found in the source file
    under `04_bill_table.sql`.
  prefs: []
  type: TYPE_NORMAL
- en: These are all the tables we need for this database. Now let's move on to testing
    after creating each operation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating each operation and testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because we will use PHP in later stages, let's prepare each operation now. Here,
    we will insert some temporary data.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to check that the acquisition and update operations are working properly.
  prefs: []
  type: TYPE_NORMAL
- en: User authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These are some SQL code you can use to develop your database.
  prefs: []
  type: TYPE_NORMAL
- en: You can look for a user by inputting an e-mail address and password. You can
    assume it was successful if the count is `1`.
  prefs: []
  type: TYPE_NORMAL
- en: For increased password security, after having carried out MD5 encryption, you
    should store the password as a character string of 40 characters after being put
    through SHA1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Selecting the user list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is used when you want to collect data for use in a grid. Make note of
    the fact that we are not performing the limit operation with `PagingToolbar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Adding users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a user, put the current time in `created` and `modified`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Updating the user information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every time the `modified` file should be set to `NOW()` for it to be used as
    a time stamp. Other fields should be updated as needed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Deleting users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deletion from this system is not a hard purge where the user data is permanently
    deleted. Instead we will use a soft purge, where the user data is not displayed
    after deletion but remains in the system. Therefore, note that we will use `UPDATE`,
    not `DELETE`. In the following code, `status=9` denotes that the user has been
    deleted but not displayed. (`status=1` will denote that the user is active).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The Customers table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although `Add`, `Update`, and `Delete` are necessary operations, we'll come
    to these in the later chapter, so we can leave it out at this time.
  prefs: []
  type: TYPE_NORMAL
- en: The customer information list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we are preparing the SQL code to pull information about customers later
    on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Selecting the quotation list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next comes the code for selecting the `Quotation` lists. This is similar to
    what we saw for the customer information list. For the code, please refer to the
    source file under `11_s` `electing_quotation_list.sql`.
  prefs: []
  type: TYPE_NORMAL
- en: Items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The code for items will select the quotation items from the database. This
    will pick up items where `quotations.status` is `1` and `quotation.parent` is
    `1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As this is similar to `Customers`, you can again leave out `Add`, `Update`,
    and `Delete` for now.
  prefs: []
  type: TYPE_NORMAL
- en: The Bill table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Again let's leave out `Add`, `Update` and `Delete` for now because the `Bill`
    table is similar to what preceded this.
  prefs: []
  type: TYPE_NORMAL
- en: It's straightforward to say that once a quotation has been accepted, a bill
    is produced. Therefore, in data structures such as ours, `Quotation` and `Bill`
    are related. The only difference is that `Bill` contains the extra `Quotation`
    ID to create the relationship between the two.
  prefs: []
  type: TYPE_NORMAL
- en: Also, remember the customer information list is almost the same as the quotation
    list.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have defined the structure of the database we will use in
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: You might have your own databases that you want to present in Ext JS. This is
    just a sample database that we can build on in the coming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will begin the process of building the whole application.
    Don't worry, we'll explain each step.
  prefs: []
  type: TYPE_NORMAL
