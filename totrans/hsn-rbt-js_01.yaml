- en: Setting Up Your Development Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome! This book is designed to get you started with writing robotics code
    in JavaScript using the Raspberry Pi, Node.js, and the Johnny-Five framework.
    This chapter will fill in the details of what the Raspberry Pi is and how we're
    going to use it, and will also help you get your development environment ready.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: What is the Raspberry Pi
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How we will use the Raspberry Pi
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the operating system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up SSH and hardware interfaces
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Node.js
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Johnny-Five and Raspi-IO
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to get started, you''ll need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '**A Raspberry Pi 3**: Either the original or model B is fine.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A power supply**: Plugging the Raspberry Pi into a USB port on your computer
    can cause serious issues because it cannot supply enough power to allow the Raspberry
    Pi to function properly, so you''ll need a proper wall wart power supply.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MicroSD card**: This needs to have at least 8 GB to hold the Raspbian OS
    and the code we''re going to write. You''ll also need a way to write to the SD
    card from your computer—either a full SD card adapter or a USB card reader.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A PC9685 GPIO expansion board**: There are expansion boards that require
    assembly on Adafruit ([https://www.adafruit.com/product/815](https://www.adafruit.com/product/815)),
    but if you''re not confident in your soldering, then there are plenty of preassembled
    ones available on Amazon if you search for `PC9685`.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text editor**: Your code editor will be fine; we just need to edit a few
    files on the SD card once we''ve burned the OS image onto it.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If this is your first foray into a hardware project, I suggest getting a kit
    that contains at least the following items, as it will help you finish many of
    the projects in this book, and will provide you with the parts to create your
    own designs:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Pi Cobbler
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resistors
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LEDs
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A servo
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A motor
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buttons
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other sensors and peripherals
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are some good examples of these items (at the time of writing):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '**The Raspberry Pi 3 B+ starter kit**: [https://www.sparkfun.com/products/14644](https://www.sparkfun.com/products/14644)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Adafruit Raspberry Pi 3 Model B Starter Pack**: [https://www.adafruit.com/product/2380](https://www.adafruit.com/product/2380)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**If you already have a Pi, they sell the kit without the Pi as well**: [https://www.adafruit.com/product/3241](https://www.adafruit.com/product/3241)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the Raspberry Pi?
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, now you''ve got this green, credit-card-sized object with a bunch of ports
    that you recognize, and a bunch of pins, as shown in the following diagram. You
    can see some chips, and some parts you might not recognize. Before we talk about
    the power contained in this rather inconspicuous board, we need to clear up some
    vocabulary that we''ll be using throughout the book:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc70eef4-da36-4b73-9d2a-796df9676467.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: Microcontrollers
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Microcontroller** is a term that encapsulates a bunch of devices. It''s a
    term used to describe a device that contains a processor, memory, and input/output
    peripherals (or ways to interact with those peripherals) that is meant for a particular
    type of task. One extremely common microcontroller is the Arduino Uno, and the
    Raspberry Pi technically falls into this category as well.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: General-Purpose Input/Output (GPIO) pins
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microcontrollers interface with devices such as sensors, LEDs, and buttons using
    electrical signals that are sent and received through pins designed for input
    and/or output signals. These pins can be broken into multiple subcategories, as
    we'll find out in subsequent chapters, but you can address them as GPIO pins as
    a whole. We'll use that abbreviation throughout the book.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Debian and Raspbian
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debian is a distribution of Linux that is considered extremely user friendly
    for those new to using Linux. It contains many utilities that are commonly used
    while working with Linux preinstalled, and is compatible with a lot of the peripherals
    that you would use with a computer, such as Wi-Fi cards and USB devices.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Raspbian is a modified version of Debian specifically designed to run on Raspberry
    Pi devices. There are drivers for the GPIO pins, USB Wi-Fi devices, and expansion
    slots on the Pi that allow you to attach a specific display and camera.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: There are two flavors of Raspbian—Raspbian Full and Raspbian Lite. Full has
    a graphical desktop with programs aimed at educational programming and development.
    Lite (which we will be using for the projects in this book) only has a command-line
    interface, but still has full functionality when it comes to Raspberry Pi peripherals.
    As of the time of writing, the current version of Raspbian is 4.14, nicknamed
    **Stretch**.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Johnny-Five and Raspi-IO
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Back in 2012, Rick Waldron wrote a *node-serialport* program to operate an Arduino
    Uno with Node.js, and formed a library around it called Johnny-Five. Since then,
    the Johnny-Five library has grown to over 100 contributors, and can control over
    40 platforms, including the Raspberry Pi! It can also control many kinds of sensors
    and peripherals that you can use to create the robotics project you've been dreaming
    of in Node.js!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: One of the ways the Johnny-Five library has grown to support so many platforms
    is by creating what are called IO plugins. You create an IO plugin for each type
    of board you wish to control. For example, we will be installing and using the
    Raspi-IO plugin to use Johnny-Five with the Raspberry Pi.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: What is great about this system is that the code you write in this book can
    be used on any other platform that Johnny-Five supports (you just need to change
    PIN numbers)! Writing code for Node.js botnets is much easier when you're using
    the same APIs for any devices you might use.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: So, the Pi is technically a microcontroller...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get back to the question of what the Raspberry Pi is. In short, it is
    a microcontroller. It has dozens of GPIO pins and can be used to interface with
    many physical peripherals in order to achieve specialized tasks. The low cost
    and small size allows the Raspberry Pi to be a versatile device, but the power
    involved allows you to use it for tasks that other microcontrollers may not pack
    the punch for.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到树莓派是什么的问题。简而言之，它是一个微控制器。它拥有数十个GPIO引脚，可以用来与许多物理外围设备接口，以实现特定的任务。低成本和小尺寸使得树莓派成为一个多功能的设备，但它的功率允许你用它来完成其他微控制器可能无法胜任的任务。
- en: '...but it is also a computer!'
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '...但它也是一个计算机！'
- en: An interesting fact about the Raspberry Pi is that, while it is a microcontroller,
    it can also be used as a fully fledged computer! While it certainly isn't the
    most powerful hardware, with full Raspbian installed, a Raspberry Pi attached
    to a monitor, keyboard, and mouse creates a great machine for kids and adults
    to learn programming on! The original intent of the Raspberry Pi was to create
    a low-cost educational machine to teach programming, and it exceeded every expectation
    in that regard. The fact that it's also a great microcontroller for the world
    of makers is a great bonus!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 关于树莓派的一个有趣的事实是，虽然它是一个微控制器，但它也可以用作一台完整的计算机！虽然它当然不是最强大的硬件，但安装了完整的Raspbian系统后，连接到显示器、键盘和鼠标的树莓派可以成为孩子们和成人学习编程的绝佳机器！树莓派最初的目的是创建一个低成本的教育机器来教授编程，它在这一点上远远超出了所有人的预期。它同时也是为创客世界提供的一款优秀的微控制器，这是一个巨大的额外优势！
- en: How we will use the Raspberry Pi
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们将如何使用树莓派
- en: So, we've established that the Raspberry Pi is a very versatile and powerful
    machine for its size, but with so many options, it can be hard to figure out where
    to get started. Luckily, we have a plan that will walk you through your first
    Raspberry Pi and Johnny-Five projects so that you can keep up, but which will
    also empower you to build your way into advanced robotics projects.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经确定树莓派（Raspberry Pi）对于其体积来说是一个非常灵活且强大的机器，但鉴于有如此多的选择，确定从哪里开始可能会有些困难。幸运的是，我们有一个计划，将引导你完成你的第一个树莓派和Johnny-Five项目，这样你就可以跟上进度，同时也会赋予你构建高级机器人项目的能力。
- en: Taking advantage of all that the Raspberry Pi has to offer!
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 充分利用树莓派所能提供的一切！
- en: The projects we will build will take advantage of the fact that the Raspberry
    Pi is both a microcontroller and a computer. We'll use the Linux operating system,
    via the Raspbian distribution, and leverage it to run our projects in Node.js.
    We'll also use Johnny-Five and Raspi-IO to leverage the GPIO of the Raspberry
    Pi in order to create robotics projects in a way that makes the code easy to understand
    and portable to many different hardware platforms.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要构建的项目将利用树莓派既是微控制器又是计算机的事实。我们将通过Raspbian发行版使用Linux操作系统，并利用它来在Node.js中运行我们的项目。我们还将使用Johnny-Five和Raspi-IO来利用树莓派的GPIO，以便以易于理解和可移植到许多不同硬件平台的方式创建机器人项目。
- en: Johnny-Five – letting us code hardware in Node.js
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Johnny-Five – 让我们能够在Node.js中编写硬件
- en: In the past, when you thought of robotics projects, it meant writing in C or
    C++, usually through the Arduino IDE and APIs. However, as microcontrollers have
    gotten more powerful, they are capable of running other programming languages,
    even scripting languages, such as subsets of Python and JavaScript.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，当你想到机器人项目时，意味着用C或C++编写代码，通常是通过Arduino IDE和API。然而，随着微控制器的变得更加强大，它们能够运行其他编程语言，甚至是脚本语言，如Python和JavaScript的子集。
- en: 'And, of course, with computer/microcontroller hybrids, such as the Raspberry
    Pi, you''re able to run stock Node.js, allowing you to create even advanced robotics
    projects without having to deal with any low-level languages. There are quite
    a few benefits to being able to code robotics projects in Node.js:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有了像树莓派这样的计算机/微控制器混合体，你能够运行标准的Node.js，这样你就可以在不处理任何底层语言的情况下创建甚至高级的机器人项目。能够在Node.js中编写机器人项目有很多好处：
- en: '**Event-based systems**:In the Arduino and C/C++ level of robotics programming,
    you will need to check the state of everything through each iteration of a loop,
    and act accordingly. This can create monolithic functions and code paths. With
    Node.js and Johnny-Five, we can use event emitters and systems, which fit in surprisingly
    well as they can read sensors and interact with peripherals in the real world,
    where things take time. This will help you to organize code in a way that reflects
    the asynchronous way the world works.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Garbage collection/automatic memory management**:While Arduino and C++ handle
    most memory management for you, programming in microcontrollers that use C requires
    strict memory management. While you may need to bear the resource constraints
    of the Raspberry Pi in mind from time to time, it is much easier than the days
    of 20K SRAM.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using a language you already know**:Instead of trying to remember the way
    things work in a new language, it will accelerate your learning in the field of
    electronics and robotics if you focus on learning fewer things at once. Using
    Node.js can help you focus on learning the wide and varied world of electronics,
    instead of adding on the extra work of remembering whether it''s `uint8_t` or
    `uint16_t`.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the operating system
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to get started with Johnny-Five and the Raspberry Pi, we will need
    to set up the Raspbian operating system by burning it to a microSD card. Then,
    we'll need to edit some files on the SD card in order for the Raspberry Pi to
    boot with Wi-Fi and the ability to SSH in. Lastly, we'll need to boot up the Raspberry
    Pi and get some settings in place before finally installing Node.js, Johnny-Five,
    and Raspi-IO.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Raspbian Lite
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps will show you how to download Raspbian Lite:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is downloading the Raspbian Lite image so we can burn it to
    our microSD card. The best place to get the image from is [https://www.raspberrypi.org/downloads/raspbian/](https://www.raspberrypi.org/downloads/raspbian/),
    as shown in the following screenshot:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ed6fe723-213e-4069-a77b-80979b1f2a7f.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: A screenshot of the Raspbian download page, with both Full and Lite download
    links
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Select RASPBIAN STRETCH LITE (or whichever version is the current one), which
    will replace the word STRETCH. Give yourself some time for this step to complete;
    although Raspbian Lite is much smaller than Raspbian Full, it is still several
    hundred megabytes, and can take time to download!
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you're preparing to run a class, hackathon, or some other event using the
    Raspberry Pi and Raspbian, it's best to predownload it and place it on a flash
    drive to hand around, as conference and event Wi-Fi can be a bit slower than normal,
    or even drop in and out, so be prepared!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Burning the image to an SD card
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Luckily, the tools for burning OS images to SD cards have evolved arcane command-line
    tools that can overwrite your computer''s hard drive as easily as it can the SD
    card. My current favorite is called **Etcher**, and it can be downloaded for any
    platform at [https://etcher.io/](https://etcher.io/), as shown in the following
    steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: The free version is more than enough for our needs, so download and install
    it as you download Raspbian Lite.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once they are both downloaded, you''ll want to place the micro SD card in your
    computer, either by placing it into a full-sized SD adapter and then into a slot
    on your computer, or by using a USB-to-micro-SD adapter. Whichever you use, make
    sure your computer can see the volume as a drive before continuing. Then, boot
    up Etcher. The following screenshot shows Etcher running on a Mac:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f67ea05-49b6-48e6-8d2b-b4aca898ffa6.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: A screenshot of the Etcher program running on a Mac
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Once you see a window similar to the preceding screenshot, you'll need to select
    the Raspbian Lite image you just downloaded. You don't even need to unzip the
    `.zip` file—Etcher can handle that outright! Once you've selected the image, Etcher
    should select your micro SD card drive, so long as your machine can see it! Once
    you've ensured that the image and micro SD card drive are properly selected, hit
    Flash! to begin the process.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sometimes, with larger micro SD cards, you'll get a warning from Etcher about
    the drive being very large (this happens to me when I use 64 GB cards). This is
    to prevent you from overwriting your computer's hard drive. You can bypass the
    warning by going through a confirmation window—just be absolutely sure that your
    micro SD card drive is selected first!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: A few minutes will pass as Etcher burns the image to your micro SD card, then
    verifies that it is present on the card. Once this is done, **remove and reinsert** **the
    micro SD card so that your computer recognizes it as a drive again**; the drive
    should be named `boot`. We're not quite done editing the image files yet, so Etcher's
    polite attempt to eject the micro SD card drive needs to be ignored.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Editing files on the SD card
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to edit and create some files on our Raspberry Pi''s image in order
    to be able to access it with SSH when we turn on the Raspberry Pi. First, we''ll
    set up the Wi-Fi using the following steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: If you're using an Ethernet cable and port to connect the Raspberry Pi to the
    internet, you can skip this step. If this doesn't get the Wi-Fi to work, you'll
    want to look at the information box under the section *Booting up the Pi* for
    troubleshooting steps and an alternative (if clunkier) way to set this up.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to set up the Wi-Fi, you''ll want to create a file in the root of
    the micro SD card drive called `wpa_supplicant.conf` that contains the following
    text:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Replace `yourNetworkSSID` with the SSID of the Wi-Fi network you wish to connect
    to, and then replace `yourNetworkPasswd` with that Wi-Fi's network password.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Raspberry Pi's Wi-Fi chip can only connect to 2.4 GHz networks at the time
    of writing, so you need to make sure that you input a network that operates on
    that bandwidth or your Raspberry Pi will not be able to connect!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'After you''ve set up the Wi-Fi network, you''ll want to tell the Raspberry
    Pi to allow you to SSH into it. To do this, you''ll want to create a file called
    `ssh` in the same `root` folder as the `wpa_supplicant.conf` file. Make sure that
    the `ssh` file is empty and has no extension. When you''re all done, the `root`
    directory of the micro SD card drive will look similar to the following screenshot:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/877a3ed9-5770-40fc-bdd8-dc52681208fd.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: A list of files on the micro SD drive, once I've made my edits
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Once this is all done, fully eject the microSD drive, take the microSD card
    and insert it into the Raspberry Pi. We're now ready to boot up the Raspberry
    Pi and start installing software.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Booting up the Pi
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the micro SD card is inserted, plug your power source into your Raspberry
    Pi. A red and green LED should light up. The red LED should be solid—this is the
    power indicator. The green light will flicker on and off—this is the LED that
    indicates activity. The Raspberry Pi should take a maximum of a minute or so to
    boot up once you've plugged it in. Next, we'll SSH in.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: SSHing from a Linux or Mac
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re on a Mac or Linux machine, you''ll open up a Terminal and type the
    following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you''re successful, you''ll see a question appear, asking about the authenticity
    of the host. Respond by typing `yes` and hitting *Enter*. You''ll then be asked
    for a password, which is `raspberry`, as shown in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9466d77e-c5e3-4b92-9928-2b0138d851e2.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: Successful SSH into a Raspberry Pi from a Mac Terminal
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve entered the password, you should see the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/613e5e15-c251-4acd-9f0c-6b0375dc21c8.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: Successful login to a Raspberry Pi via SSH from a Mac
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: SSHing from Windows
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to SSH from a Windows machine, you''ll need to use a program called
    PuTTY. You can get it on [https://putty.org/](https://putty.org/). But first,
    you''ll want your Raspberry Pi''s IP address. You''ll need a monitor, an HDMI
    cable, and a USB keyboard. Once you have these, go through the following steps:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Plug the monitor, HDMI cable, and USB keyboard into the Raspberry Pi **before
    booting it up**. Then plug in the power supply.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When it prompts you for a username, type `pi`. When it asks for a password,
    enter `raspberry`. Once you are logged in, type `ifconfig`. You should see a lot
    of information appear.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look for the `wlan0` section and the `inet` address under that heading. For
    the following output, the IP is `192.168.1.106`, as shown in the following screenshot.
    Write this IP down. Then, you can unplug the display and the keyboard—you won''t
    need them again:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e84dc231-edd5-4697-97a4-440241f188fc.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: Getting the IP address from the Terminal
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the IP address for your Raspberry Pi, you can boot up PuTTY.
    The window that opens is the configuration window, as shown in the following screenshot:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/322759a7-915e-4b72-be8b-a729faca8c2b.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: The PuTTY configuration window
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the IP address that you obtained into the field labeled Host Name (or
    IP address) and click the Open button. You''ll be asked about the authenticity
    of the host (only the first time you connect). Select Yes. Then enter `Pi` as
    the username and `raspberry` as the password when prompted. Once that''s done,
    you should see the following:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d5b4faa-4895-4b3b-bfd7-cf7bbbaab0e4.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: Successful login to the Raspberry Pi with PuTTY
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Now that everyone's logged in, let's set up our Raspberry Pi for our projects!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your password and hardware interfaces
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our Raspberry Pi connected to the Wi-Fi and we're SSHed in,
    we need to make a few changes before we install Node.js and get started with our
    coding.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: First things first – change your password!
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you log in, your Raspberry Pi will warn you that having SSH enabled with
    the default username and password isn't very secure, and it's absolutely right!
    The first step is to change our password.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do so, in your SSH window, type in `passwd` and hit *Enter*. You''ll
    be prompted for your current password (`raspberry`) and a new password. Type in
    whatever you like (just don''t forget it)! You''ll be asked to confirm it, and
    voila! The new password is set, as shown in the following screenshot. Your Raspberry
    Pi will be much more secure:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3421257f-7ce8-4a96-afcb-90c2d33eb1f5.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: Changing your Pi password
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Raspberry Pi
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, you''ll make sure that the Raspberry Pi is updated and ready to go by
    running the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will take a while, but it's worth it to make sure everything is properly
    updated.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Turning on the hardware interfaces
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we''ll set up the Raspberry Pi so that our hardware code can run. Run
    the following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You''ll be greeted with a graphical menu with lots of different options, as
    shown in the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc5aad01-edeb-4be9-9aa0-9bec59d417d8.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: The raspi-config menu
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: You'll want to use the arrow keys to select `Interfacing Options`, and then
    select `I2C` and `Yes` to turn it on. Repeat for SPI, then use *Tab* to close
    the menu. When it prompts you to reboot, say `Yes`, then SSH back in, because
    you're ready to install Node.js, Johnny-Five, and Raspi-IO!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js, Johnny-Five, and Raspi-IO
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, now that our Raspbian OS is installed and set up, it's time to install Node.js
    (which comes bundled with npm), Johnny-Five, and Raspi-IO!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js and npm
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In days past, you would have to compile the Node.js source on your Pi, to varying
    degrees of success because of the nonexistence of binaries for the ARM processor
    that Raspberry Pi uses. Luckily now, because of a rousing amount of third-party
    support in the past few years, you can easily download the binary from the [https://nodejs.org/en/](https://nodejs.org/en/)
    website! But how are we going to do this from the command line of our Raspberry
    Pi?
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Detecting your version of ARM processor
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re using the Raspberry Pi 3 Model B recommended by this book, you''re
    most likely on ARM v8 (the Raspberry Pi 3 original is ARMv7, which is fine too!).
    But you should always double-check (doubly so if you''re using a different Raspberry
    Pi, such as the Pi Zero or Pi 2/1 series). To check the ARM version on your Raspberry
    Pi, run the following in your SSH Terminal:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You''ll see a return message that looks like `armv#`, where `#` is a number
    (possibly followed by a letter). That number is what is important, because that
    number tells us which Node.js binary we will need. Once you have your ARM version,
    go through the following steps:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'Head to the Node.js download page at [https://nodejs.org/en/download/](https://nodejs.org/en/download/),
    as shown in the following screenshot:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c387da8b-63cb-48e4-b65a-bb786db1bbf9.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
- en: A snapshot of the Node.js binary download page
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the ARM version link you need and copy the URL. Then, run the
    following in your Raspberry Pi''s SSH Terminal:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Replace `<binary-download-url>` (carats, too!) with the URL you copied from
    the Node.js download website. Once it''s downloaded, we need to extract the archive
    using the following code:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The asterisks will differ depending on the current LTS version of Node.js and
    your ARM version. The Raspberry Pi will spit out a lot of filenames to the console,
    then give you back your shell prompt. This means that the binaries have been extracted
    into your `home` folder. We need to place them into the `/usr/local` folder. To
    do that, run the following:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will move all of the precompiled binaries to their new homes on your Raspberry
    Pi. Once this is done, run the following:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You should see something like the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/57b83d29-8436-4d22-aa78-438b410727e8.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
- en: Successful Node.js installation results
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'If that''s all well and good, you now have Node.js and npm installed! Let''s
    wrap this up with Johnny-Five and Raspi-IO! Note that you can absolutely clean
    up the binary downloads by running the following:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Some of you with more Debian experience may be asking, *well, why can't we just
    use* *apt-get*? The short answer is that the package with the name `node` was
    taken a very long time ago, and because that is the case, and because `sudo apt-get
    install nodejs` is outdated (at the time of writing, using this command will install `v4` when
    we need `v8+`, if it installs Node.js at all), we need to download the binaries
    and move them ourselves.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Installing Johnny-Five and Raspi-IO
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Johnny-Five, once you''ve made sure Node.js and npm are installed,
    run the following command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Johnny-Five，一旦你确认已经安装了Node.js和npm，运行以下命令：
- en: '[PRE10]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This installs the libraries globally; you won't have to reinstall it every new
    project. And that's it! You're ready to start developing Node.js robotics projects
    on the Raspberry Pi with Johnny-Five!
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这将全局安装库；你不需要在每个新项目中重新安装它。就这样！你现在可以开始使用Johnny-Five在树莓派上开发Node.js机器人项目了！
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: It feels like a lot, but you've now completed everything you need to have a
    fully-fledged development environment for the projects in this book, and you've
    taken your first steps toward building robots with JavaScript. You've learned
    more about what the Raspberry Pi is and why we're using it, and how to get the
    operating system image ready to go!
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 感觉好像有很多，但现在你已经完成了构建这本书中项目所需的完整开发环境，并且你已经迈出了用JavaScript构建机器人的第一步。你了解了更多关于树莓派是什么以及为什么我们使用它，以及如何准备操作系统镜像！
- en: Questions
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the common operating system for the Raspberry Pi that we'll be using
    in the projects in this book, and what Linux distribution is it based on?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在本书的项目中使用哪种常见的树莓派操作系统，以及它是基于哪个Linux发行版的？
- en: What does GPIO stand for?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GPIO代表什么？
- en: Who originally started the Johnny-Five project, and what did they use it to
    control?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 谁最初启动了Johnny-Five项目，他们用它来控制什么？
- en: What command do you run on the Raspberry Pi to find out what ARM architecture
    it uses?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你在树莓派上运行什么命令来找出它使用的ARM架构？
- en: Why is changing the default Raspberry Pi password important?
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么更改树莓派的默认密码很重要？
- en: What are two benefits of using JavaScript and Node.js for robotics code?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用JavaScript和Node.js进行机器人代码有哪些好处？
- en: Why do we have to download the Node.js binaries instead of using Raspbian's
    package manager?
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们必须下载Node.js的二进制文件而不是使用Raspbian的包管理器？
- en: Further reading
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can use the following sources for further reading relating to the topics
    covered in this chapter:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下资源进一步阅读本章涉及的主题：
- en: '**Learn more about the Raspberry Pi from the website of the Raspberry Pi organization**:
    [https://www.raspberrypi.org/](https://www.raspberrypi.org/)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从树莓派组织的网站了解更多关于树莓派的信息**：[https://www.raspberrypi.org/](https://www.raspberrypi.org/)'
- en: '**Learn more about Johnny-Five from the main project page for Johnny-Five (we''ll
    be seeing a lot of this site as we use their documentation to complete many of
    the book''s projects)**: [http://johnny-five.io/](http://johnny-five.io/)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从Johnny-Five的主项目页面了解更多关于Johnny-Five的信息（随着我们使用他们的文档来完成本书的许多项目，我们将看到很多这个网站）**：[http://johnny-five.io/](http://johnny-five.io/)'
- en: '**Learn more about the Raspbian operating system from the Raspbian website**:
    [https://www.raspberrypi.org/documentation/raspbian](https://www.raspberrypi.org/documentation/raspbian/)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从Raspbian网站了解更多关于Raspbian操作系统的信息**：[https://www.raspberrypi.org/documentation/raspbian](https://www.raspberrypi.org/documentation/raspbian/)'
