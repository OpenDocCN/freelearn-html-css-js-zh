["```js\nFROM openjdk:8-jdk-alpine\nVOLUME /tmp\nEXPOSE 8082\nARG JAR_FILE=build/libs/message-service-1.0-SNAPSHOT.jar\nADD ${JAR_FILE} app.jar\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]\n```", "```js\n$ docker build . -t message-service:0.1.1\n```", "```js\n$ docker run -p 0.0.0.0:8082:8082 message-service:0.1.1\n```", "```js\nFROM openjdk:8-jdk-alpine\nVOLUME /tmp\nEXPOSE 8082\nARG JAR_FILE=build/libs/authentication-service-1.0-SNAPSHOT.jar\nADD ${JAR_FILE} app.jar\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]\n```", "```js\nversion: '3'\nservices:\n authentication:\n build: .\n ports:\n - \"8081:8081\"\n links:\n - docker-mysql\n environment:\n DATABASE_HOST: 'docker-mysql'\n DATABASE_USER: 'root'\n DATABASE_PASSWORD: 'root'\n DATABASE_NAME: 'user_credentials'\n DATABASE_PORT: 3306\n docker-mysql:\n ports:\n - \"3306:3306\"\n image: mysql\n restart: always\n environment:\n MYSQL_ROOT_PASSWORD: 'root'\n MYSQL_DATABASE: 'user_credentials'\n MYSQL_ROOT_HOST: '%'\n```", "```js\nserver:\n port: 8081\n\nspring:\n jpa.hibernate.ddl-auto: create\n datasource.url: jdbc:mysql://docker-mysql:3306/user_credentials\n datasource.username: root\n datasource.password: root\n\nhibernate.dialect: org.hibernate.dialect.MySQLInnoDBDialect\n\nsecretKey: supers3cr3t\n```", "```js\n$ docker-compose up\nStarting authentication-service_docker-mysql_1 ...\n```", "```js\n$ brew install minikube\n```", "```js\n$ brew install kubernetes-cli\n```", "```js\n$ minikube start\nStarting local Kubernetes v1.10.0 cluster...\nStarting VM...\nGetting VM IP address...\nMoving files into cluster...\nSetting up certs...\nConnecting to cluster...\nSetting up kubeconfig...\nStarting cluster components...\nKubectl is now configured to use the cluster.\nLoading cached images from config file\n```", "```js\n$ kubectl config use-context minikube\nSwitched to context \"minikube\".\n```", "```js\n$ kubectl cluster-info\nKubernetes master is running at https://192.168.99.100:8443\nKubeDNS is running at https://192.168.99.100:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n```", "```js\n$ minikube dashboard\nWaiting, endpoint for service is not ready yet...\nOpening kubernetes dashboard in default browser...\n```", "```js\n$ eval $(minikube docker-env)\n```", "```js\n$ docker build -t message-service:0.1.1\n```", "```js\n$ kubectl run message-service --image=message-service:0.1.1 --port=8082 --image-pull-policy=Never\n```", "```js\n$ kubectl get pods\nNAME READY STATUS RESTARTS AGE\nmessage-service-87d85dd58-svzmj 1/1 Running 0 3s\n```", "```js\n$ kubectl expose deployment message-service --type=LoadBalancer\nservice/message-service exposed\n```", "```js\n$ kubectl get services\n\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE\nkubernetes ClusterIP 10.96.0.1 <none> 443/TCP 59d\nmessage-service LoadBalancer 10.105.73.177 <pending> 8082:30382/TCP 4s\n```", "```js\n$ minikube service list message-service\n|-------------|----------------------|-----------------------------|\n| NAMESPACE | NAME | URL |\n|-------------|----------------------|-----------------------------|\n| default | kubernetes | No node port |\n| default | message-service | http://192.168.99.100:30382 |\n| kube-system | kube-dns | No node port |\n| kube-system | kubernetes-dashboard | http://192.168.99.100:30000 |\n|-------------|----------------------|-----------------------------|\n```", "```js\nFROM openjdk:8-jdk-alpine\nVOLUME /tmp\nEXPOSE 8082\nARG JAR_FILE=build/libs/message-service-1.0-SNAPSHOT.jar\nADD ${JAR_FILE} app.jar\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]\n```", "```js\npackage com.packtpub.microservices.ch09.message.controllers;\n\nimport com.packtpub.microservices.ch09.message.MessageRepository;\nimport com.packtpub.microservices.ch09.message.clients.SocialGraphClient;\nimport com.packtpub.microservices.ch09.message.exceptions.MessageNotFoundException;\nimport com.packtpub.microservices.ch09.message.exceptions.MessageSendForbiddenException;\nimport com.packtpub.microservices.ch09.message.models.Message;\nimport com.packtpub.microservices.ch09.message.models.UserFriendships;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\nimport java.net.URI;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\n\n@RestController\npublic class MessageController {\n\n    @Autowired\n    private MessageRepository messagesStore;\n\n    @Autowired\n    private SocialGraphClient socialGraphClient;\n\n    @RequestMapping(path = \"/{id}\", method = RequestMethod.GET, produces = \"application/json\")\n    public Message get(@PathVariable(\"id\") String id) throws MessageNotFoundException {\n        return messagesStore.get(id);\n    }\n\n    @RequestMapping(path = \"/ping\", method = RequestMethod.GET)\n    public String readinessProbe() {\n        return \"ok\";\n    }\n\n    @RequestMapping(path = \"/\", method = RequestMethod.POST, produces = \"application/json\")\n    public ResponseEntity<Message> send(@RequestBody Message message) throws MessageSendForbiddenException {\n        List<String> friendships = socialGraphClient.getFriendships(message.getSender());\n\n        if (!friendships.contains(message.getRecipient())) {\n            throw new MessageSendForbiddenException(\"Must be friends to send message\");\n        }\n\n        Message saved = messagesStore.save(message);\n        URI location = ServletUriComponentsBuilder\n                .fromCurrentRequest().path(\"/{id}\")\n                .buildAndExpand(saved.getId()).toUri();\n        return ResponseEntity.created(location).build();\n    }\n\n    @RequestMapping(path = \"/user/{userId}\", method = RequestMethod.GET, produces = \"application/json\")\n    public ResponseEntity<List<Message>> getByUser(@PathVariable(\"userId\") String userId) throws MessageNotFoundException  {\n        List<Message> inbox = messagesStore.getByUser(userId);\n        if (inbox.isEmpty()) {\n            throw new MessageNotFoundException(\"No messages found for user: \" + userId);\n        }\n        return ResponseEntity.ok(inbox);\n    }\n\n    @Async\n    public CompletableFuture<Boolean> isFollowing(String fromUser, String toUser) {\n        String url = String.format(\n                \"http://localhost:4567/followings?user=%s&filter=%s\",\n                fromUser, toUser);\n\n        RestTemplate template = new RestTemplate();\n        UserFriendships followings = template.getForObject(url, UserFriendships.class);\n\n        return CompletableFuture.completedFuture(\n                followings.getFriendships().isEmpty()\n        );\n    }\n}\n```", "```js\n$ docker run -d -p 5000:5000 --restart=always --name registry registry:2\n```", "```js\n$ minikube start --insecure-registry 127.0.0.1\n```", "```js\n$ docker build . -t message-service:0.1.1\n...\n$ docker tag message-service:0.1.1 localhost:5000/message-service\n...\n$ docker push localhost:5000/message-service\n```", "```js\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: message-service\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: \"message-service\"\n        track: \"stable\"\n    spec:\n      containers:\n        - name: \"message-service\"\n          image: \"localhost:5000/message-service\"\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: 8082\n          livenessProbe:\n            httpGet:\n              path: /ping\n              port: 8082\n              scheme: HTTP\n            initialDelaySeconds: 10\n            periodSeconds: 30\n            timeoutSeconds: 1\n```", "```js\n$ kubectl create -f deployment.yaml\n```", "```js\n$ kubectl get pods\n```", "```js\n$ docker build . -t message-service:0.1.2\n...\n$ docker tag message-service:0.1.2 localhost:5000/message-service\n$ docker push localhost:5000/message-service\n```"]