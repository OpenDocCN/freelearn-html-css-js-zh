["```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nexport const handler = async (req: IncomingMessage, resp: ServerResponse) => {\n    resp.end(\"Hello, World\");\n}; \n```", "```js\nimport { createServer } from \"http\";\nimport { handler } from \"./handler\";\nconst port = 5000;\nconst server = createServer();\nserver.on(\"request\", handler);\nserver.listen(port);\nserver.on(\"listening\", () => {\n    console.log(`(Event) Server listening on port ${port}`);\n}); \n```", "```js\nnpm start \n```", "```js\n`listen(port)` \n```", "```js\n`close()` \n```", "```js\n`requestTimeout` \n```", "```js\n`listening` \n```", "```js\n`request` \n```", "```js\n`error` \n```", "```js\nimport { createServer } from \"http\";\nimport { handler } from \"./handler\";\nconst port = 5000;\n**const server = createServer(handler);**\n**//server.on(\"request\", handler);**\n**server.listen(port,**\n **() => console****.log(`(Event) Server listening on port ${port}`));**\n**// server.on(\"listening\", () => {**\n**//     console.log(`(Event) Server listening on port ${port}`);**\n**// });** \n```", "```js\n...\nexport const handler = async (**req: IncomingMessage, resp: ServerResponse**) => {\n    resp.end(\"Hello, World\");\n};\n... \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nexport const handler = async (req: IncomingMessage, resp: ServerResponse) => {\n    **console.log(`---- HTTP Method: ${req.method}, URL: ${req.url}`);**\n **console.log(`host: ${req.headers.host}`);**\n **console****.log(`accept: ${req.headers.accept}`);**\n **console.log(`user-agent: ${req.headers[\"user-agent\"]}`)**\n    resp.end(\"Hello, World\");\n}; \n```", "```js\n...\nconsole.log(`host: ${**req.headers.host**}`);\n... \n```", "```js\n...\nconsole.log(`user-agent: ${**req.headers[\"user-agent\"]**}`)\n... \n```", "```js\n...\n---- HTTP Method: GET, URL: /\nhost: localhost:5000\naccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,...\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (...\n---- HTTP Method: GET, URL: /favicon.ico\nhost: localhost:5000\naccept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (...\n... \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { URL } from \"url\";\nexport const handler = async (req: IncomingMessage, resp: ServerResponse) => {\n    console.log(`---- HTTP Method: ${req.method}, URL: ${req.url}`);\n    **// console.log(`host: ${req.headers.host}`);**\n **// console.log(`accept: ${req.headers.accept}`);**\n **// console.log(`user-agent: ${req.headers[\"user-agent\"]}`)**\n **const parsedURL = new** **URL(req.url ?? \"\", `http://${req.headers.host}`);**\n **console.log(`protocol: ${parsedURL.protocol}`);**\n **console.****log(`hostname: ${parsedURL.hostname}`);**\n **console.log(`port: ${parsedURL.port}`);**\n **console.log(`pathname: ${parsedURL.pathname}****`);**\n **parsedURL.searchParams.forEach((val, key) => {**\n **console.log(`Search param: ${key}: ${val}`)**\n **});**\n\n    resp.end(\"Hello, World\");\n}; \n```", "```js\n...\nconst parsedURL = new URL(req.url ?? \"\", `http://${**req.headers.host**}`);\n... \n```", "```js\n---- HTTP Method: GET, URL: /myrequest?first=Bob&last=Smith\nprotocol: http:\nhostname: localhost\nport: 5000\npathname: /myrequest\nSearch param: first: Bob\nSearch param: last: Smith\n---- HTTP Method: GET, URL: /favicon.ico\nprotocol: http:\nhostname: localhost\nport: 5000\npathname: /favicon.ico \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { URL } from \"url\";\nexport const handler = async (req: IncomingMessage, resp: ServerResponse) => {\n    **const** **parsedURL = new URL(req.url ?? \"\", `http://${req.headers.host}`);**\n **if (req.method !== \"GET\" || parsedURL.pathname** **== \"/favicon.ico\") {**\n **resp.writeHead(404, \"Not Found\");**\n **resp.end();**\n **return;**\n **} else {**\n **resp.writeHead(200, \"OK\"****);**\n **if (!parsedURL.searchParams.has(\"keyword\")) {**\n **resp.write(\"Hello, HTTP\");**\n **} else {**\n **resp.write(`Hello, ${parsedURL.searchParams.get(\"keyword\"****)}`);**\n **}**\n **resp.end();**\n **return;** \n **}**\n}; \n```", "```js\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 3650 -nodes \n```", "```js\n...\nCountry Name (2 letter code) [AU]:\nState or Province Name (full name) [Some-State]:\nLocality Name (eg, city) []:\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:\n... \n```", "```js\nimport { createServer } from \"http\";\nimport { handler } from \"./handler\";\n**import { createServer as createHttpsServer } from \"https\";**\n**import { readFileSync } from** **\"fs\";**\nconst port = 5000;\n**const https_port = 5500;**\nconst server = createServer(handler);\nserver.listen(port,\n    () => console.log(`(Event) Server listening on port ${port}`));\n**const httpsConfig = {**\n **key: readFileSync(\"key.pem\"),**\n **cert: readFileSync****(\"cert.pem\")**\n**};** \n**const httpsServer = createHttpsServer(httpsConfig, handler);**\n**httpsServer.listen(https_port,**\n **() => console.log(`HTTPS Server listening on port ${https_port}****`));** \n```", "```js\n...\nimport { createServer **as createHttpsServer** } from \"https\";\n... \n```", "```js\n...\nconst httpsConfig = {\n    **key**: readFileSync(\"key.pem\"),\n    **cert**: readFileSync(\"cert.pem\")\n};\n... \n```", "```js\n`...`\n`readFile(\"key.pem\", (err, keyBuffer) => {`\n `readFile(\"cert.pem\", (err, certBuffer) => {`\n `const server = createServer(handler);`\n\n `server.listen(port,`\n ``() => console.log(`HTTP Server listening on port ${port}`));``\n\n `const httpsServer = createHttpsServer({`\n `key: keyBuffer, cert: certBuffer` \n `}, handler);`\n\n `httpsServer.listen(https_port,`\n `() => console.log(`\n `` `HTTPS Server listening on port ${https_port}`)); `` \n `});`\n`});`\n`...` \n```", "```js\n...\nconst httpsServer = **createHttpsServer**(httpsConfig, handler);\nhttpsServer.**listen**(https_port,\n    () => console.log(`HTTPS Server listening on port ${https_port}`));\n... \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\n**import { TLSSocket } from \"tls\";**\nimport { URL } from \"url\";\n**export const isHttps = (req: IncomingMessage) : boolean => {**\n **return req.socket instanceof TLSSocket** **&& req.socket.encrypted;**\n**}**\nexport const handler = (req: IncomingMessage, resp: ServerResponse) => {\n **const protocol = isHttps(req) ? \"https\" : \"http\"****;**\n **const parsedURL =**\n **new URL(req.url ?? \"\", `${protocol}://${req.headers.host}`);**\n    if (req.method !== \"GET\" || parsedURL.pathname == \"/favicon.ico\") {\n        resp.writeHead(404, \"Not Found\");\n        resp.end();\n        return;\n    } else {\n        resp.writeHead(200, \"OK\");\n        if (!parsedURL.searchParams.has(\"keyword\")) {\n            **resp.write(`Hello, ${protocol.toUpperCase()}`);**\n        } else {\n            resp.write(`Hello, ${parsedURL.searchParams.get(\"keyword\")}`);           \n        }\n        resp.end();\n        return;       \n    }\n}; \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { TLSSocket } from \"tls\";\nimport { URL } from \"url\";\n**export const isHttps = (req: IncomingMessage) : boolean** **=> {**\n **return req.socket instanceof TLSSocket && req.socket.encrypted;**\n**}**\n**export const redirectionHandler**\n **= (****req: IncomingMessage, resp: ServerResponse) => {**\n **resp.writeHead(302, {**\n **\"Location\": \"https://localhost:5500\"**\n **});**\n **resp.end();**\n}\nexport const handler = (req: IncomingMessage, resp: ServerResponse) => {\n    // ...statements omitted for brevity...\n}; \n```", "```js\nimport { createServer } from \"http\";\n**import { handler, redirectionHandler } from** **\"./handler\";**\nimport { createServer as createHttpsServer } from \"https\";\nimport { readFileSync } from \"fs\";\nconst port = 5000;\nconst https_port = 5500;\n**const server = createServer(redirectionHandler);**\nserver.listen(port,\n    () => console.log(`(Event) Server listening on port ${port}`));\nconst httpsConfig = {\n    key: readFileSync(\"key.pem\"),\n    cert: readFileSync(\"cert.pem\")\n};   \nconst httpsServer = createHttpsServer(httpsConfig, handler);\nhttpsServer.listen(https_port,\n    () => console.log(`HTTPS Server listening on port ${https_port}`)); \n```", "```js\nnpm install express@4.18.2\nnpm install --save-dev @types/express@4.17.20 \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { TLSSocket } from \"tls\";\nimport { URL } from \"url\";\nexport const isHttps = (req: IncomingMessage) : boolean => {\n    return req.socket instanceof TLSSocket && req.socket.encrypted;\n}\nexport const redirectionHandler\n        = (req: IncomingMessage, resp: ServerResponse) => {\n    resp.writeHead(302, {\n        \"Location\": \"https://localhost:5500\"\n    });\n    resp.end();\n}\nexport const handler = (req: IncomingMessage, resp: ServerResponse) => {\n    const protocol = isHttps(req) ? \"https\" : \"http\";\n    const parsedURL\n        = new URL(req.url ?? \"\", `${protocol}://${req.headers.host}`);\n    if (req.method !== \"GET\" || parsedURL.pathname == \"/favicon.ico\") {\n        resp.writeHead(404, \"Not Found\");\n        resp.end();\n        return;\n    } else {\n        resp.writeHead(200, \"OK\");\n        **if (parsedURL.pathname == \"/newurl\") {**\n **resp.write(\"Hello, New URL\");**\n **} else if (!parsedURL.searchParams.****has(\"keyword\")) {**\n            resp.write(`Hello, ${protocol.toUpperCase()}`);\n        } else {\n            resp.write(`Hello, ${parsedURL.searchParams.get(\"keyword\")}`);           \n        }\n        resp.end();\n        return;       \n    }\n}; \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { TLSSocket } from \"tls\";\nimport { URL } from \"url\";\nexport const isHttps = (req: IncomingMessage) : boolean => {\n    return req.socket instanceof TLSSocket && req.socket.encrypted;\n}\nexport const redirectionHandler\n        = (req: IncomingMessage, resp: ServerResponse) => {\n    resp.writeHead(302, {\n        \"Location\": \"https://localhost:5500\"\n    });\n    resp.end();\n}\n**export const** **notFoundHandler**\n **= (req: IncomingMessage, resp: ServerResponse) => {**\n **resp.writeHead(404, \"Not Found\");**\n **resp.end();**\n**}**\n**export const newUrlHandler**\n **= (****req: IncomingMessage, resp: ServerResponse) => {**\n **resp.writeHead(200, \"OK\");** \n **resp.write(\"Hello, New URL\");**\n **resp.end();**\n**}**\n**export const defaultHandler**\n **= (req: IncomingMessage, resp: ServerResponse) => {**\n **resp.writeHead(200, \"OK\");**\n **const protocol = isHttps(req) ? \"https\" : \"http\";**\n **const parsedURL = new** **URL(req.url ?? \"\",**\n **`${protocol}://${req.headers.host}`);** \n **if (!parsedURL.searchParams.has(\"keyword\"****)) {**\n **resp.write(`Hello, ${protocol.toUpperCase()}`);**\n **} else {**\n **resp.write(`Hello, ${parsedURL.searchParams.get(\"keyword\")}`);** \n **}**\n **resp.end();**\n**}** \n```", "```js\nimport { createServer } from \"http\";\n**import { redirectionHandler, newUrlHandler, defaultHandler,**\n **notFoundHandler } from \"./handler\";**\nimport { createServer as createHttpsServer } from \"https\";\nimport { readFileSync } from \"fs\";\n**import express, { Express } from \"express\";**\nconst port = 5000;\nconst https_port = 5500;\nconst server = createServer(redirectionHandler);\nserver.listen(port,\n    () => console.log(`(Event) Server listening on port ${port}`));\nconst httpsConfig = {\n    key: readFileSync(\"key.pem\"),\n    cert: readFileSync(\"cert.pem\")\n};   \n**const** **expressApp: Express = express();**\n**expressApp.get(\"/favicon.ico\", notFoundHandler);**\n**expressApp.get(\"/newurl\", newUrlHandler);**\n**expressApp.get(\"*\", defaultHandler);**\n**const** **httpsServer = createHttpsServer(httpsConfig, expressApp);**\nhttpsServer.listen(https_port,\n    () => console.log(`HTTPS Server listening on port ${https_port}`)); \n```", "```js\n...\nimport **express**, { Express } from \"express\";\n... \n```", "```js\n`get(path, handler)` \n```", "```js\n`post(path, handler)` \n```", "```js\n`put(path, handler)` \n```", "```js\n`delete(path, handler)` \n```", "```js\n`all(path, handler)` \n```", "```js\n`use(handler)` \n```", "```js\n...\nexpressApp.**get**(\"/favicon.ico\", notFoundHandler);\nexpressApp.**get**(\"/newurl\", newUrlHandler);\nexpressApp.**get**(\"*\", defaultHandler);\n... \n```", "```js\n...\nexpressApp.get(**\"*\"**, defaultHandler);\n... \n```", "```js\n...\nconst httpsServer = createHttpsServer(httpsConfig, **expressApp**);\n... \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\n**//import { TLSSocket } from \"tls\";**\n**//import { URL } from \"url\";**\n**import** **{ Request, Response } from \"express\";**\n**// export const isHttps = (req: IncomingMessage) : boolean => {**\n**//     return req.socket instanceof TLSSocket && req.socket.encrypted;**\n**// }**\nexport const redirectionHandler\n        = (req: IncomingMessage, resp: ServerResponse) => {\n    resp.writeHead(302, {\n        \"Location\": \"https://localhost:5500\"\n    });\n    resp.end();\n}\n**export const notFoundHandler = (req: Request, resp: Response) => {**\n **resp.sendStatus(****404);**\n**}**\n**export const newUrlHandler = (req: Request, resp: Response) => {**\n **resp.send(\"Hello, New URL\");**\n**}**\n**export const** **defaultHandler = (req: Request, resp: Response) => {**\n **if (req.query.keyword) {**\n **resp.send(`Hello, ${req.query.keyword}`);** \n **} else {**\n **resp.send(****`Hello, ${req.protocol.toUpperCase()}`);**\n **}**\n**}** \n```", "```js\n...\nconst expressApp: Express = express();\nexpressApp.get(\"/favicon.ico\", notFoundHandler);\n**expressApp.get(\"/newurl/:message?\", newUrlHandler);**\nexpressApp.get(\"*\", defaultHandler);\n... \n```", "```js\n...\nexport const newUrlHandler = (req: Request, resp: Response) => {\n    **const msg = req.params.message ?? \"(No Message)\";**\n **resp.send(`Hello, ${msg}`);**\n}\n... \n```"]