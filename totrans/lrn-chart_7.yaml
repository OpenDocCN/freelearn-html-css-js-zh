- en: Advanced Chart.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create data visualizations with Chart.js, most of the work you will
    have involves preparing the data so that it can be loaded and used by a chart
    instance. You don't have to worry much about fonts, padding, axes, screen resizing,
    or responsiveness, since new charts are preconfigured with defaults intended for
    optimal presentation and interactivity. In the last chapter, we learned how to
    adjust colors, labels, animations, and other typical configurations in different
    types of charts. In this chapter, we will explore configuration topics that you
    won’t use as frequently, and that may require additional coding, extensions, and
    integration with other libraries, such as tooltip behavior configuration, label
    generation, scripting, creating mixed charts, creating plugins, using the Chart.js
    API, and using HTML Canvas with Chart.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'What you will learn in this chapter includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Tooltip configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced legend configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying multiple charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending Chart.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tooltip configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tooltips are the main feature used by Chart.js to reveal quantitative details
    about data. While some context comes from the grid, the only way to natively display
    data right next to the data point is using a tooltip. Of course, you can label
    the value points as we saw in the previous chapter, but that requires extensions
    or plugins, and may clutter your chart if used in excess. Chart.js visualizations
    rely on interactivity to show details. In this section, we will learn how to configure
    the way these details are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tooltips can be configured for each chart using the tooltips key in the `options`
    object. They can also be configured for all charts using `Chart.defaults.global.tooltips`.
    The properties of these objects that you can configure are listed in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Object** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `titleSpacing` | Number | Space before and after each *title* line. Default
    is `2`. |'
  prefs: []
  type: TYPE_TB
- en: '| `bodySpacing` | Number | Space before and after each *tooltip* item. Default
    is `2`. |'
  prefs: []
  type: TYPE_TB
- en: '| `footerSpacing` | Number | Space before and after each *footer* line. Default
    is `2`. |'
  prefs: []
  type: TYPE_TB
- en: '| `titleMarginBottom` | Number | Margin after the `title` in pixels. Default
    is `6`. |'
  prefs: []
  type: TYPE_TB
- en: '| `footerMarginTop` | Number | Margin before the `footer` in pixels. Default
    is `6`. |'
  prefs: []
  type: TYPE_TB
- en: '| `xPadding` | Number | Vertical padding in pixels. Default is `6`. |'
  prefs: []
  type: TYPE_TB
- en: '| `yPadding` | Number | Horizontal padding in pixels. Default is `6`. |'
  prefs: []
  type: TYPE_TB
- en: '| `enabled` | `true` or `false` | Turns tooltips on or off. Default is `true`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `intersect` | `true` or `false` | If `true`, the tooltip interaction mode
    will only be applied when the cursor hovers exactly over the point (inside the
    `pointHitRadius`). If `false`, it will be applied at all times. Global default
    is `true`, but changes depending on the type of chart. |'
  prefs: []
  type: TYPE_TB
- en: '| `mode` | `nearest`, `index`, `dataset`, `x`, `y`. Deprecated values are `label`
    (same as `index`), and `single` (behaves like `nearest` when intersect: `true`).
    | Selects the tooltip interaction mode. `nearest` displays the value of the nearest
    point (includes one item per tooltip), `index` displays values of all the points
    with the same index (will include an item for each `dataset` in the same tooltip),
    `dataset` will display the entire `dataset` in a tooltip. Two other modes are
    available for cartesian scales only: `x` will include in the tooltip all items
    that share the same `x` coordinate value, and `y` will include all items that
    share the same `y` coordinate value. `index` mode, which in Cartesian scales defaults
    to the `x` indexes, can also be set for the `y` indexes by adding the property
    `axis`: `y`. The global default is `nearest` but it changes depending on the type
    of chart. |'
  prefs: []
  type: TYPE_TB
- en: '| `position` | `average`, `nearest`, or a custom position | Defines where the
    tooltip is positioned in relation to the value point. The default is `average`.
    (You can define your own custom position creating an entry in the `Chart.Tooltip.positioners`
    map that returns an object with *x* and *y* coordinates.) |'
  prefs: []
  type: TYPE_TB
- en: '| `titleFontFamily`, `titleFontStyle`, `titleFontColor`, `titleFontSize` |
    `String` and `Number` | Font attributes for `title` (which is configured using
    `callbacks`). |'
  prefs: []
  type: TYPE_TB
- en: '| `bodyFontFamily`, `bodyFontStyle`, `bodyFontColor`, `bodyFontSize` | `String`
    and `Number` | Font attributes for `body` (which is configured using `callbacks`).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `footerFontFamily`, `footerFontStyle`, `footerFontColor`, `footerFontSize`
    | `String` and `Number` | Font attributes for `footer` (which is configured using
    `callbacks`). |'
  prefs: []
  type: TYPE_TB
- en: '| `caretSize` | `Number` | Size in pixels of the tooltip arrow. Default is
    `5`. |'
  prefs: []
  type: TYPE_TB
- en: '| `caretPadding` | `Number` | Distance of the arrow tip from the tooltip position
    (example: the value point). Default is `2`. |'
  prefs: []
  type: TYPE_TB
- en: '| `cornerRadius` | `Number` | The radius of the rounded rectangle in pixels.
    Default is `6`. |'
  prefs: []
  type: TYPE_TB
- en: '| `backgroundColor` | CSS color | The background color of the tooltip. Default
    is `rgba(0,0,0,0.8)`. |'
  prefs: []
  type: TYPE_TB
- en: '| `multiKeyBackground` | CSS color | The background of the colored box (won''t
    be visible if the `dataset` color is opaque). Default is `#fff`. |'
  prefs: []
  type: TYPE_TB
- en: '| `borderColor` | CSS color | The border color of the tooltip. Default is `rgba(0,0,0,0)`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `borderWidth` | Number | The border width of the tooltip. Default is 0. |'
  prefs: []
  type: TYPE_TB
- en: '| `displayColors` | `true` or `false` | If `false`, hides color boxes. Default
    is `true`. |'
  prefs: []
  type: TYPE_TB
- en: '| `callbacks` | Object | An object containing several callback functions. See
    the *Tooltip callbacks* section on tooltip `callbacks` in this chapter. |'
  prefs: []
  type: TYPE_TB
- en: Static properties for tooltips (used in the *options.tooltips* key)
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, several default style properties were changed for
    the tooltips of a chart instance. Each tooltip will have a gray background, a
    yellow 3-pixel border, a pink 16-pixel title, an italic body, and a 10-pixel arrow,
    distant 10 pixels from the data point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The full code is in `Tooltips/tooltip-1.html`. The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2a97dd6-cfd2-4e4a-b4ac-2f06d89a9627.png)'
  prefs: []
  type: TYPE_IMG
- en: Tooltip with modified border color and width, background color, title font size
    and color, body font style,
  prefs: []
  type: TYPE_NORMAL
- en: 'caret arrow size, and padding (distance from value point). Code: *Tooltips/tooltip-1.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Hovering interactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tooltips respond to hover events. The next table lists properties of the `hover`
    object, which can be configured globally using `Chart.defaults.global.hover` or
    locally using `options.hover`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Object** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `intersect` | `true` or `false` | Same behavior as `tooltip.intersect`. Tooltips
    can respond to different intersect states when hovering. |'
  prefs: []
  type: TYPE_TB
- en: '| `mode` | `nearest`, `index`, `dataset`, `x`, `y`. Deprecated values are `label`
    (same as `index`), and `single` (behaves like `nearest` when `intersect: true`).
    | Same behavior as `tooltip.mode`. Tooltips can respond to a different mode when
    hovering. |'
  prefs: []
  type: TYPE_TB
- en: '| `axis` | `x`, `y`, `xy` | Selects parameters that are used to calculate the
    distance from the value point to the cursor during a hover event. The default
    is `x`. Horizontal bar charts override this to `y` so that `mode:index` can select
    different bars. |'
  prefs: []
  type: TYPE_TB
- en: '| `animationDuration` | `Number` | The duration of the animation. This affects
    any hovering events, including tooltips. |'
  prefs: []
  type: TYPE_TB
- en: Configuration options for the hover object
  prefs: []
  type: TYPE_NORMAL
- en: Both the `hover` and the tooltip objects support the mode and intersect properties.
    They are similar, but the `hover` property also applies to non-tooltip events
    (configured with the optional `onHover` callback).
  prefs: []
  type: TYPE_NORMAL
- en: If the `intersect` property is `true`, the event will only be fired if the mouse
    is directly over a bar or pie slice, or within a certain radius from the value
    point (for line, scatter, and bubble charts). If `intersect` is `false`, the event
    may be fired before the mouse is over the value point.
  prefs: []
  type: TYPE_NORMAL
- en: The `mode` property selects the data values related to the event. If `intersect`
    is `false`, and `mode` is `nearest`, it will select the nearest point.
  prefs: []
  type: TYPE_NORMAL
- en: 'When used in tooltips, the `mode` property also determines which items appear
    in a tooltip. If `nearest`, it will show the value that is nearest to the point
    where the mouse is (typical in scatter and bubble charts). The property can also
    have the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`point`, showing only items that actually intersect the point (typical inline
    charts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index`, showing all the points at the same index (typical in a bar or pie
    chart)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataset`, listing all points in the dataset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are also two more modes that are exclusive to Cartesian scales: *x* and
    *y*, which selects all points with the same values of *x* and *y*, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `Tooltips/tooltip-3-modes.html` file and experiment with different
    modes. The following screenshots show some tooltip modes applied to a line chart
    with three datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b1434ae-e560-4368-87f4-7ef4b269bb4a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Tooltip interaction modes: (a) displays single value point; (b) displays items
    with same index (or x value in this case);'
  prefs: []
  type: TYPE_NORMAL
- en: '(c) displays items with same y value; (d) displays all items in a dataset.
    Code: *Tooltips/tooltip-3-modes.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Scriptable properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tooltips have three properties that receive functions. One allows you to replace
    the Canvas-generated tooltips with your own custom HTML tooltips. The other two
    allow sorting of tooltip items (when several items appear in a single tooltip)
    and filtering. These properties are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Object** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `custom` | (`tooltipModel`) | Used to generate custom HTML tooltips. See
    the *Custom HTML tooltips* section on HTML tooltips in this chapter. |'
  prefs: []
  type: TYPE_TB
- en: '| `filter` | `(item, data)`; array of datasets in `data.datasets`; array of
    labels in `data.labels`; `item.x` and `item.y` contain coordinates of the value
    point, `item.xLabel` and `item.yLabel` the labels in each axis, `item.index` is
    the index of the item in the dataset, and `item.datasetIndex` is the index of
    its dataset. | A function that returns `true` or `false` and is called before
    rendering a tooltip item. If it returns `false`, the item will not be rendered.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `itemSort` | `(item1, item2)`; each parameter is an item object with the
    following properties: `x`, `y`, `xLabel`, `yLabel`, `index`, `dataSetIndex`. |
    Sorts items (in tooltips that contain multiple items). The function returns a
    number. If `item1 < item2` the function should return negative value, if `item1
    > item2` a positive value should be returned, and zero should be returned if they
    are equal. |'
  prefs: []
  type: TYPE_TB
- en: Scriptable properties for tooltips
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see some examples. In the following code (`Tooltip/tooltip-4-script-filter.html`),
    the filtering function ignores all items that contain *y* values greater than
    `20`. Additionally, the `events` key was used to reduce the events the tooltips
    respond to. In this example, they are only activated with clicks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the result of clicking near the values points
    of `index` 1\. Since one of the three points is greater than `20`, it doesn''t
    show up in the tooltip:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73b0319d-9e66-4862-80f2-b972576742dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Tooltip with mode: index filtering only items that have a y value less than
    20\. Code: *Tooltip/tooltip-4-script-filter.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This other example (`Tooltip/tooltip-5-script-sort.html`) configures item sorting
    in *ascending* order by the *y* value, in the same chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows. Note that the tooltip items are ordered by their
    *y* value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94b914d9-fb05-4b9f-9143-10fba32087f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Tooltip with mode: ‘index’ sorting items by their *y* value. Code: *Tooltip/tooltip-5-script-sort.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Tooltip callbacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With `callbacks`, you can dynamically generate the text contents and colors
    of the items displayed in a tooltip based on data values and other accessible
    attributes. The `Callbacks` are properties of the `tooltips.callbacks` object,
    which can be configured globally (`Chart.defaults.global.tooltips.callbacks`)
    or locally per chart instance (`options.tooltips.callbacks`). They are listed
    in the table as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Object** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeTitle`, `title`, `afterTitle` | `(item[], data)`; array of datasets
    in `data.datasets`; array of labels in `data.labels`; each item element contains
    the following properties: `x`, `y`, `xLabel`, `yLabel`, `index`, `dataSetIndex`.
    | The `title` function returns the text for the tooltip title. You can also implement
    other functions to include text above or below it. |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeBody`, `body`, `afterBody` | The `body` function returns the text
    for the tooltip body (including labels). You can also implement other functions
    to include text above or below it. |  |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeFooter`, `footer`, `afterFooter` | The `footer` function returns the
    text for the tooltip footer. You can also implement other functions to include
    text before or after it. |  |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeLabel`, `label`, `afterLabel` | `(item,data)`; array of datasets in
    `data.datasets`; array of labels in `data.labels`; `item.x` and `item.y` contain
    coordinates of the value point, `item.xLabel` and `item.yLabel` the labels in
    each axis, `item.index` is the index of the item in the dataset, `item.datasetIndex`
    is the index of its dataset. | The `label` function returns the text for this
    label. You can also implement other functions to include text above or below one
    or more labels. |'
  prefs: []
  type: TYPE_TB
- en: '| `labelColor` | `(item, chart)` | The function returns the color of the text
    box of an individual item label |'
  prefs: []
  type: TYPE_TB
- en: '| `labelTextColor` | `(item, chart)` | The function returns the color of the
    text for an individual item label |'
  prefs: []
  type: TYPE_TB
- en: Callbacks to create and change the text contents of tooltips
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example (`Tooltips/tooltip-6-callback.html`) uses `callbacks`
    to add extra text to the title, insert separator characters above and below the
    item labels, and append a `footer` containing the average of all the value points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1098f2c7-7876-4a8c-a7fe-03ab830c698b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Tooltip with a footer, extra text in title, and separators before and after
    body created with callbacks. Code: *Tooltips/tooltip-6-callback.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Custom HTML tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Chart.defaults.global.tooltips.custom` (or `options.tooltips.custom`) property
    receives a function that should build an HTML tooltip and connect it to a tooltip
    *model* object passed as a parameter. The tooltip model is a native object that
    responds to tooltip events and stores tooltip properties. Its properties can be
    copied and reused inside the HTML tooltip if desired.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example (`Tooltips/tooltip-7-custom.html`) shows how to create
    a simple custom HTML tooltip containing an image. The custom tooltip can be created
    using HTML as shown in the following snippet, or programmatically using DOM, and
    should initially be hidden (`opacity: 0`). When a `hover` event activates a tooltip,
    the model’s opacity changes and the custom tooltip uses this state to make itself
    visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The code extracts the title and filename from the tooltip model’s `title`,
    and the value from the model’s `body`. The custom tooltip also used the model’s
    coordinates to decide where it would be placed. The result is as follows. If you
    hover over the labels in the *x-*axis or the bars, the HTML tooltip will be shown
    above each bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2cedb051-ab16-446d-835b-1dc75707acc5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Bar chart with a custom HTML tooltip that appears when the mouse hovers over
    a bar or label. Code: *Tooltips/tooltip-7-custom.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Positioning tooltips in pie charts is a bit more complex. For more examples
    on how to create custom HTML tooltips, check the samples page in the official
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced legend configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chart.js provides default presentation and behavior for legends and labels.
    In the previous chapter, we saw some examples of how to change the default behavior
    by programming the `onClick` event handler callback. In this section, we will
    see how to generate individual labels and, if you need even more control, how
    to create custom HTML legends.
  prefs: []
  type: TYPE_NORMAL
- en: Generating labels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Labels can be generated with the `generateLabels` callback property. They should
    return an item object (the same object that is passed to an `onClick` function),
    which contains the properties listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Object** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `text` | String | The text of the label |'
  prefs: []
  type: TYPE_TB
- en: '| `datasetIndex` | Number | The index of the label |'
  prefs: []
  type: TYPE_TB
- en: '| `fillStyle`, `strokeStyle`, `lineCap`, `lineJoin`,'
  prefs: []
  type: TYPE_NORMAL
- en: '`lineDash`, `lineWidth`, `lineDashOffset` | The same values as the corresponding
    Canvas commands | Fill and stroke attributes for the legend box |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `pointStyle` | `circle`, `cross`, `crossRot`, `dash`, `line`, `rect`, `rectRounded`,
    `rectRot`, `star`, `triangle` | If `legend.labels.usePointStyle` is `true`, the
    label will use the same point style as the chart. This allows you to set a different
    point style for the legend labels. |'
  prefs: []
  type: TYPE_TB
- en: '| `hidden` | Boolean | If `true,` chart elements related to the dataset will
    not be rendered |'
  prefs: []
  type: TYPE_TB
- en: Properties of a legend label object (received by onClick and returned by generateLabels)
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows configuration for legend labels (`Legend/legend-1-gen-labels.html`)
    using a `generateLabels` callback. The colored box is configured as a rotated
    rectangle with `pointStyle`. The label’s `fontSize` controls the size of the font
    and point. The border color of each dataset is the fill for each label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e53681a3-8787-492b-9981-fe3cbf0a5925.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Generated labels with different symbols for legends. Code: *Legend/legend-1-gen-labels.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: HTML legends
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have a very complex legend or wish to display a legend outside the Canvas
    mixed with the HTML in your page, you can generate custom HTML legends. To create
    them, you need an empty `<div>` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: So, the legend can be attached to the page’s body. Then, you implement a `callback`
    function for the `Chart.defaults.global.legendCallback` property or `options.legendCallback`
    that returns the HTML for the legend. You can create the content dynamically and
    apply CSS styles with property values copied from the chart. The HTML is generated
    with `chart.generateLegend()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s easier with an example. The following code implements a simple HTML legend
    from an HTML list. You can run the full code in `Legend/legend-2-html-callback.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The new legend doesn’t replace the default label. Unless you wish to display
    both legends, you should hide the default legend using `display: false`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'No behaviors are included in these HTML legends. You need to implement them
    yourself using JavaScript events. The following screenshot shows the result of
    the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff5d2f80-b5d7-40bb-a014-ad4dc9075c58.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Legends created with HTML. Code: *Legend/legend-1-gen-labels.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying multiple charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many times, you need to display more than one chart in a page to present different
    sets of data, or different views of the same data using different chart types.
    You may also wish to draw multiple charts over the same axes, so they can be compared.
    Another possibility is to use Canvas to draw over or under a chart and add context
    or additional data. All these scenarios are possible in Chart.js, but they require
    different strategies.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering many charts on one page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can render several different charts on the same page by simply drawing a
    separate Canvas for each one.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example displays four charts on one page that share the same
    data. First, we need to set up the canvases using HTML and CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The JavaScript code is shown in the following code. The chart initially loads
    some static data, but every time the button is pressed, the data changes and the
    charts are updated. The `updateData()` function was created to simulate new random
    data that is loaded into each chart every time the button is pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the following result. Run the full code from `Multiple/ multiple-1-canvas.html`.
    Press the button and observe all the charts changing at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/339846e3-e8bd-4408-9346-66e8eeb55f77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Displaying and updating multiple charts in one page. Code: *Multiple/multiple-1-canvas.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Mixed charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mixed charts are charts of different types that share the same axes. A typical
    example is to overlay a bar chart with one or more line charts. In Chart.js, this
    is achieved simply by adding a different `type` property in one or more datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example (`Multiple/ multiple-2-mixed.html`), a bar chart is
    used to display a set of values and a line chart is used to show the accumulated
    average:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Since `bar` is the default type, it doesn’t need a `type` property. There could
    also be additional datasets for each type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55756f96-cdf8-4df9-998d-127aa5030b65.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A mixed bar/line chart. Code: *Multiple/multiple-2-mixed.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Overlaying a canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way to draw text and graphics on a chart is to draw on the same canvas *after*
    the chart is completely loaded. You can do that implementing your code in a function
    assigned to the `animation.onComplete` property. You can also write a simple plugin.
    Another way to draw over or under a chart is to draw on top of another canvas,
    and position it *exactly* over or under your chart canvas. This is easy to do
    if you won’t be resizing your page. If you do any resizing, you will have to write
    additional scripts to scale your canvas content to keep it in sync with the chart
    (in this case, a plugin would be a better solution).
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let''s use the `GeoJSON` world map we loaded and rendered in
    [Chapter 2](25edc904-3528-40cc-8865-75ccf1fc78eb.xhtml),* Technology Fundamentals*,
    and place it under the bubble chart with the city populations we created in [Chapter
    4,](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml)* Creating Charts*. Since the map
    uses a simple cylindrical projection, we just have to make them both the same
    size, and use CSS absolute positioning to stack one over the other:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The drawings also have to start on the same point and use the same scales.
    The code uses four functions from `JavaScript/canvasmap.js`: a simple script that
    draws a map from GeoJSON data:'
  prefs: []
  type: TYPE_NORMAL
- en: '`map.setCanvas(canvas)`: receives the background canvas where the map will
    be drawn'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`map.drawMap(geodata)`: receives an array of GeoJSON features and draws the
    map'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`map.scaleX(longitude)` and `map.scaleY(latitude)`: converts latitudes and
    longitudes into pixel coordinates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code obtains the `canvas` context for the map and sets its fill
    and stroke styles, loads and parses a GeoJSON file containing shapes for a world
    map, and a CSV containing city names, populations, latitudes, and longitudes.
    It then calls functions to draw the map and the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The radius of each bubble will be somewhat proportional to the population.
    This function will return a value that fits well in the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `drawChart()` function uses the parsed CSV datasets to generate an array
    of location objects, each containing *name* and the required bubble chart properties:
    `r` radius and *x*, *y* coordinates. The generated `locations` array is used as
    the `dataset` for the bubble chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `options` configuration object must configure scales so that there are
    no margins. Setting `min` and `max` properties for the ticks, removing legends
    and making `responsive:false` will guarantee this. Tooltips were also configured
    to show name and population (this is not shown here, but you can see the full
    code in `Multiple/multiple-3-overlay.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The final result is as follows. The chart is interactive; you can hover over
    a large city and get details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f36f79f-5421-4145-9677-03d88aa42503.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Two stacked HTML Canvases: one draws an SVG GeoJSON map, the other draws a
    bubble chart with Chart.js.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Code: *Multiple/multiple-3-overlay.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Since we used very large files in this example, it takes a while to load the
    chart and the tooltips may run a bit slow on some systems. A quick way to optimize
    it is to reduce the data files previously before loading them. You can also filter
    and only use the large cities, drawing the small ones separately with Canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Chart.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several ways to extend Chart.js. You may use the prototype methods,
    callbacks, and event handlers and interact with the rendering process; you can
    create plugins, which have their own life cycle and are easier to reuse in other
    charts; and you can extend Chart.js from existing charts or even create new charts
    and scales.
  prefs: []
  type: TYPE_NORMAL
- en: Prototype methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Prototype methods are automatically called during rendering and updates. You
    can also call them directly if you need to interfere with the rendering process.
    They are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `destroy()` | Destroys a chart instance. This can be used if you wish to
    reuse the canvas, or remove the chart completely. |'
  prefs: []
  type: TYPE_TB
- en: '| `reset()` | Restores the chart to its initial state (after layout and before
    its initial animation). A new animation can be triggered with `render()` or `update()`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `stop()` | Stops an animation loop. This is usually called in an `onProgress`
    callback. Calling `render()` or `update()` will resume the animation. |'
  prefs: []
  type: TYPE_TB
- en: '| `clear()` | Clears the chart canvas (effective after the chart has finished
    rendering). You can call `render()` or `update()` to draw it again. |'
  prefs: []
  type: TYPE_TB
- en: '| `resize()` | Resizes the chart. Called automatically every time the canvas
    is resized. |'
  prefs: []
  type: TYPE_TB
- en: '| `update(config)` | Updates the chart. This should be called after any changes
    in the datasets. You can include a configuration object with the following properties:
    *duration* (Number) to control the redraw animation duration, *lazy* (boolean)
    to decide if the animation can be interrupted by others, and *easing* (String),
    to select an easing function. |'
  prefs: []
  type: TYPE_TB
- en: '| `render(config)` | Redraws all chart elements but does not update the chart
    elements for new data. |'
  prefs: []
  type: TYPE_TB
- en: '| `toBase64Image()` | Generates the chart as a new base64-encoded PNG image.
    It can be displayed in an HTML page, or converted into a blob for download. |'
  prefs: []
  type: TYPE_TB
- en: '| `generateLegend()` | Returns the contents of the `options.legendCallback`
    property (an HTML legend) when called. |'
  prefs: []
  type: TYPE_TB
- en: '| `getElementAtEvent(e)` | Used in event handlers to obtain the element at
    an event. |'
  prefs: []
  type: TYPE_TB
- en: '| `getElementsAtEvent(e)` | Used in event handlers to obtain all elements with
    the same data index at an event. |'
  prefs: []
  type: TYPE_TB
- en: '| `getDatasetAtEvent(e)` | Used in event handlers to obtain an array of elements
    that belong to a dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| `getDatasetMeta(index)` | Returns the metadata for the dataset corresponding
    to the index. |'
  prefs: []
  type: TYPE_TB
- en: Chart.js prototype methods
  prefs: []
  type: TYPE_NORMAL
- en: Some of these methods are used to trigger the execution of life cycle callbacks
    in plugins. Many are already called automatically and may not be effective in
    all stages of an animation, since other stages may call methods that undo the
    desired effect.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we saw an example with `generateLabels()`, and in the previous
    chapter, we used `update()`. Event methods are common in event handlers, which
    receive a JavaScript event.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `toBase64Image()` method generates a Base64 image string. Call it in `animation.onComplete`
    or in any `callback` function that is invoked only when the chart is fully drawn
    (otherwise it may generate a partially drawn or blank image). It returns a string
    that can be assigned to the `src` attribute of an HTML image for rendering on
    an HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use it to create an image for download with a blob function. Use
    the `b64-to-blob` function available from [www.npmjs.com/package/b64-to-blob](http://www.npmjs.com/package/b64-to-blob)
    or via CDN by adding the following line to your page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following tag where you want the download link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, place this code in the `animation.onComplete` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: After the chart loads, it will create a link that, when clicked, will download
    a PNG image of the chart. The full code is in `Extensions/ext-1-prototype.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plugins are the most efficient way to extend Chart.js. A plugin can insert code
    before and after different phases of the rendering cycle of a chart. At each phase,
    it can access the chart object and read configurable options. This can be used
    to change practically any property or behavior of the chart.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins are designed to be reusable. During the previous chapters, we used several
    popular plugins to extend Chart.js in different ways. They are great to encapsulate
    complexity, but simple plugins can also be very useful.
  prefs: []
  type: TYPE_NORMAL
- en: In the last example, we created a download link for a PNG version of the chart.
    If you tried it, you may have noticed that the image has a transparent background.
    This is OK if your background is white, but if it isn’t, the chart may be hard
    to read. A naïve approach to fixing the problem would be painting the canvas white
    using CSS or fill commands. But, it won’t work because Chart.js redraws the canvas
    during its render cycle. You also need to deal with any animations, resizing,
    updates, and other events that might reset the background *after* you changed
    its color. This is a case for a plugin. With a plugin, you can insert code during
    the render cycle, draw the background after the canvas is initialized, and before
    the chart is drawn.
  prefs: []
  type: TYPE_NORMAL
- en: 'The render life cycle of Chart.js is illustrated as follows. When the chart
    is loaded for the first time, it performs the **init**, **update**, and **render**
    steps. Every time the page is resized, **update**and **render** are executed,
    and on **events**, the **render** step is performed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6355f83-f594-4472-bf17-2002499a25ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Chart.js life cycle. Each phase can be intercepted by plugin callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on your plugin, you may need to intercept one or more of these steps.
    The following table lists the callbacks that are available for plugins. Each `callback`
    function contains at least two parameters: a reference to the chart instance and
    an `options` object (configured under a plugin ID key, in `options.plugins`).
    Some callbacks may have additional parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeInit` `afterInit` | (*chart, options*) | Called before and after *new*
    `Chart()` is invoked |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeUpdate` `afterUpdate` | (*chart, options*) | Called before and after
    the *update* stage |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeLayout` `afterLayout` | (*chart, options*) | Called before and after
    the *layout* stage |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeDatasetsUpdate` `afterDatasetsUpdate` | (*chart, options*) | Called
    before and after updating all datasets |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeDatasetUpdate` `afterDatasetUpdate` | (*chart, dataset, options*)
    | Called before and after updating each dataset |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeRender` `afterRender` | (*chart, options*) | Called before and after
    the *render* stage |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeDraw` `afterDraw` | (*chart, easing, options*) | Called before and
    after the *draw* stage |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeDatasetsDraw` `afterDatasetsDraw` | (*chart, easing, options*) | Called
    before and after drawing all datasets |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeDatasetDraw` `afterDatasetDraw` | (*chart, dataset, options*) | Called
    before and after drawing each dataset |'
  prefs: []
  type: TYPE_TB
- en: '| `beforeEvent` `afterEvent` | (*chart, event, options*) | Called before and
    after *events* |'
  prefs: []
  type: TYPE_TB
- en: '| `resize` | (*chart, dimensions, options*) | Called after resizing |'
  prefs: []
  type: TYPE_TB
- en: '| `destroy` | (*chart, options*) | Called after `chart.destroy()` is called
    |'
  prefs: []
  type: TYPE_TB
- en: Life cycle callbacks that can be used in plugins
  prefs: []
  type: TYPE_NORMAL
- en: To see a demonstration of these methods, run the `Extensions/ext-2-plugin-lifecycle.html`
    file. It logs every life cycle event while a chart with three plugins is rendered
    and destroyed.
  prefs: []
  type: TYPE_NORMAL
- en: 'A plugin is a simple object. An `id` property is not necessary unless you plan
    to configure the plugin in the *options* object. You can include just the callback
    properties you need. The following code will create a simple configurable plugin
    that will draw a blue square in front of the chart, and a red one in front of
    the axes but behind the bars (`Extensions/ext-3-simple-plugin.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This effect is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5f87689-359b-4489-9cec-4b5916306048.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The blue and red squares were drawn in the chart using simple plugins. Code:
    *Extensions/ext-3-simple-plugin.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are writing a plugin locally and have multiple charts, you can include
    a list of plugins to add to each chart using the *plugins* key in the `Chart()`
    constructor. It takes an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Plugins should be reusable whenever possible. Reusable plugins are normally
    created in separate `.js` files and made automatically available to all charts.
    In this case, they should be registered globally with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Let’s create a plugin for the last example so that the image and the chart have
    an opaque background. Plugins should have configurable options. There are greater
    chances you will reuse this plugin if you can configure the background color for
    each chart. We could also add the possibility of drawing a background image. The
    plugin will be stored in a separate JavaScript file, `JavaScript/chartback.js`,
    which creates the plugin object and registers it globally. The `id` is necessary
    so that a chart can identify the plugin and configure its options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the image needs to be redrawn every time the chart is resized or updated,
    the best place to draw it is in the `beforeDraw` callback. This code will also
    place the image behind the axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the plugin, import it into the HTML file where the chart will be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This plugin''s configuration options can be set in the `options.plugins.chartback`
    key (`chartback` is the plugin''s ID). This code is in `Extensions/ext-4-chartback.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The chart will be drawn with an image behind. If you don’t want the image,
    you can just set the `backgroundColor` and have a chart with an opaque background.
    The following screenshot shows a web page with the chart and the `.png` file loaded
    by an image viewer application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8db602bd-6610-4ab1-b5fd-c7d955f100fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using a plugin that places a background image behind the chart. Code: *Extensions/ext-4-chartback.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Chart.js extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides plugins, Chart.js also includes an advanced extensions API where you
    can extend charts and axes. With this API, you can derive from existing chart
    types or create entirely new chart types by implementing the provided interfaces.
    This topic is beyond the scope of this book, but you can try out the examples
    provided in the official documentation or perhaps use some of the many popular
    extensions already available. A selection is listed in the official documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored several advanced Chart.js topics that you may rarely
    need, but give you more control over the look and feel of your charts, allowing
    a high degree of customization and the possibility of integrating it with standard
    web technologies and frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to configure tooltip and legend presentation and behavior using
    native Canvas options and custom HTML extensions, and how to create pages with
    multiple charts, mixed charts, and overlaying charts with other graphics using
    Canvas. We also wrote extensions for Chart.js using its programming API to generate
    a PNG version of a chart, and to create a simple plugin that adds a background
    image to a chart.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Books and websites**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chart.js official documentation and samples: [https://www.chartjs.org/docs/latest/](https://www.chartjs.org/docs/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Palette.js Color schemes: [http://google.github.io/palette.js/](http://google.github.io/palette.js/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Color brewer 2.0 by Cynthia Brewer: [http://colorbrewer2.org/](http://colorbrewer2.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Patternomaly plugin: [https://github.com/ashiguruma/patternomaly](https://github.com/ashiguruma/patternomaly)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Datalabels plugin: [https://github.com/chartjs/chartjs-plugin-datalabels](https://github.com/chartjs/chartjs-plugin-datalabels)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Outlabels plugin: [https://github.com/Neckster/chartjs-plugin-piechart-outlabels](https://github.com/Neckster/chartjs-plugin-piechart-outlabels)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data sources**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Volumes of the World’s Oceans (based on ETOPO1): `Chapter03/Pages/BarChart1.html`
    and others. [https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html](https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Geographical database: `Chapter02/Data/cities1000.csv`. GeoNames geographical
    database: [www.geonames.org](http://www.geonames.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GeoJSON map of the world: `Chapter02/Data/world.geojson`. Simplified version
    adapted from [https://www.naturalearthdata.com](https://www.naturalearthdata.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
