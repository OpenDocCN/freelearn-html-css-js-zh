- en: Advanced Chart.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级 Chart.js
- en: When you create data visualizations with Chart.js, most of the work you will
    have involves preparing the data so that it can be loaded and used by a chart
    instance. You don't have to worry much about fonts, padding, axes, screen resizing,
    or responsiveness, since new charts are preconfigured with defaults intended for
    optimal presentation and interactivity. In the last chapter, we learned how to
    adjust colors, labels, animations, and other typical configurations in different
    types of charts. In this chapter, we will explore configuration topics that you
    won’t use as frequently, and that may require additional coding, extensions, and
    integration with other libraries, such as tooltip behavior configuration, label
    generation, scripting, creating mixed charts, creating plugins, using the Chart.js
    API, and using HTML Canvas with Chart.js.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用 Chart.js 创建数据可视化时，您的大部分工作将涉及准备数据，以便它可以被图表实例加载和使用。您不必过多担心字体、内边距、坐标轴、屏幕调整大小或响应性，因为新图表预先配置了默认值，旨在实现最佳展示和交互性。在上一个章节中，我们学习了如何调整不同类型图表的颜色、标签、动画和其他典型配置。在本章中，我们将探讨您不太经常使用且可能需要额外编码、扩展以及与其他库（如提示信息行为配置、标签生成、脚本、创建混合图表、创建插件、使用
    Chart.js API 和使用 HTML Canvas 与 Chart.js）集成的配置主题。
- en: 'What you will learn in this chapter includes the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章您将学习以下内容：
- en: Tooltip configuration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示信息配置
- en: Advanced legend configuration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级图例配置
- en: Displaying multiple charts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示多个图表
- en: Extending Chart.js
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展 Chart.js
- en: Tooltip configuration
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示信息配置
- en: Tooltips are the main feature used by Chart.js to reveal quantitative details
    about data. While some context comes from the grid, the only way to natively display
    data right next to the data point is using a tooltip. Of course, you can label
    the value points as we saw in the previous chapter, but that requires extensions
    or plugins, and may clutter your chart if used in excess. Chart.js visualizations
    rely on interactivity to show details. In this section, we will learn how to configure
    the way these details are displayed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 提示信息是 Chart.js 用于揭示数据定量细节的主要功能。虽然一些上下文来自网格，但要在数据点旁边原生显示数据，唯一的方法是使用提示信息。当然，您也可以像我们在上一章中看到的那样标记值点，但这需要扩展或插件，并且如果过度使用可能会使图表显得杂乱。Chart.js
    可视化依赖于交互性来显示细节。在本节中，我们将学习如何配置这些细节的显示方式。
- en: 'Tooltips can be configured for each chart using the tooltips key in the `options`
    object. They can also be configured for all charts using `Chart.defaults.global.tooltips`.
    The properties of these objects that you can configure are listed in the following
    table:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `options` 对象中的 `tooltips` 键为每个图表配置提示信息。也可以使用 `Chart.defaults.global.tooltips`
    为所有图表配置。您可以配置的这些对象的属性列在以下表格中：
- en: '| **Object** | **Value** | **Description** |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| **对象** | **值** | **描述** |'
- en: '| `titleSpacing` | Number | Space before and after each *title* line. Default
    is `2`. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `titleSpacing` | 数字 | 每一行 *标题* 前后的空格。默认值是 `2`。 |'
- en: '| `bodySpacing` | Number | Space before and after each *tooltip* item. Default
    is `2`. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `bodySpacing` | 数字 | 每一个 *提示信息* 项目前后的空格。默认值是 `2`。 |'
- en: '| `footerSpacing` | Number | Space before and after each *footer* line. Default
    is `2`. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `footerSpacing` | 数字 | 每一行 *页脚* 前后的空格。默认值是 `2`。 |'
- en: '| `titleMarginBottom` | Number | Margin after the `title` in pixels. Default
    is `6`. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `titleMarginBottom` | 数字 | 在 `title` 之后的边距（像素）。默认值是 `6`。 |'
- en: '| `footerMarginTop` | Number | Margin before the `footer` in pixels. Default
    is `6`. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `footerMarginTop` | 数字 | 在 `footer` 之前的边距（像素）。默认值是 `6`。 |'
- en: '| `xPadding` | Number | Vertical padding in pixels. Default is `6`. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `xPadding` | 数字 | 像素单位的垂直内边距。默认值是 `6`。 |'
- en: '| `yPadding` | Number | Horizontal padding in pixels. Default is `6`. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `yPadding` | 数字 | 像素单位的水平内边距。默认值是 `6`。 |'
- en: '| `enabled` | `true` or `false` | Turns tooltips on or off. Default is `true`.
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `enabled` | `true` 或 `false` | 打开或关闭提示信息。默认值是 `true`。 |'
- en: '| `intersect` | `true` or `false` | If `true`, the tooltip interaction mode
    will only be applied when the cursor hovers exactly over the point (inside the
    `pointHitRadius`). If `false`, it will be applied at all times. Global default
    is `true`, but changes depending on the type of chart. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `intersect` | `true` 或 `false` | 如果为 `true`，则提示交互模式仅在光标正好悬停在点（在 `pointHitRadius`
    内）上时应用。如果为 `false`，则始终应用。全局默认值是 `true`，但根据图表类型可能会有所变化。 |'
- en: '| `mode` | `nearest`, `index`, `dataset`, `x`, `y`. Deprecated values are `label`
    (same as `index`), and `single` (behaves like `nearest` when intersect: `true`).
    | Selects the tooltip interaction mode. `nearest` displays the value of the nearest
    point (includes one item per tooltip), `index` displays values of all the points
    with the same index (will include an item for each `dataset` in the same tooltip),
    `dataset` will display the entire `dataset` in a tooltip. Two other modes are
    available for cartesian scales only: `x` will include in the tooltip all items
    that share the same `x` coordinate value, and `y` will include all items that
    share the same `y` coordinate value. `index` mode, which in Cartesian scales defaults
    to the `x` indexes, can also be set for the `y` indexes by adding the property
    `axis`: `y`. The global default is `nearest` but it changes depending on the type
    of chart. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `mode` | `nearest`, `index`, `dataset`, `x`, `y`。已弃用的值是 `label`（与 `index`
    相同），和 `single`（当 `intersect: true` 时，行为类似于 `nearest`）。 | 选择工具提示交互模式。`nearest`
    显示最近点的值（每个工具提示包含一个项目），`index` 显示具有相同索引的所有点的值（每个 `dataset` 在同一个工具提示中都有一个项目），`dataset`
    将整个 `dataset` 显示在工具提示中。仅对笛卡尔尺度提供两种其他模式：`x` 将包含所有具有相同 `x` 坐标值的项，`y` 将包含所有具有相同 `y`
    坐标值的项。在笛卡尔尺度中，`index` 模式默认为 `x` 索引，也可以通过添加属性 `axis`: `y` 来设置 `y` 索引。全局默认值为 `nearest`，但根据图表类型而变化。
    |'
- en: '| `position` | `average`, `nearest`, or a custom position | Defines where the
    tooltip is positioned in relation to the value point. The default is `average`.
    (You can define your own custom position creating an entry in the `Chart.Tooltip.positioners`
    map that returns an object with *x* and *y* coordinates.) |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `position` | `average`, `nearest`, 或自定义位置 | 定义工具提示相对于值点的位置。默认为 `average`。（您可以通过在
    `Chart.Tooltip.positioners` 映射中创建一个返回包含 *x* 和 *y* 坐标对象的条目来自定义自己的自定义位置。） |'
- en: '| `titleFontFamily`, `titleFontStyle`, `titleFontColor`, `titleFontSize` |
    `String` and `Number` | Font attributes for `title` (which is configured using
    `callbacks`). |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `titleFontFamily`, `titleFontStyle`, `titleFontColor`, `titleFontSize` |
    `String` 和 `Number` | `title` 的字体属性（使用 `callbacks` 进行配置）。 |'
- en: '| `bodyFontFamily`, `bodyFontStyle`, `bodyFontColor`, `bodyFontSize` | `String`
    and `Number` | Font attributes for `body` (which is configured using `callbacks`).
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `bodyFontFamily`, `bodyFontStyle`, `bodyFontColor`, `bodyFontSize` | `String`
    和 `Number` | `body` 的字体属性（使用 `callbacks` 进行配置）。 |'
- en: '| `footerFontFamily`, `footerFontStyle`, `footerFontColor`, `footerFontSize`
    | `String` and `Number` | Font attributes for `footer` (which is configured using
    `callbacks`). |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `footerFontFamily`, `footerFontStyle`, `footerFontColor`, `footerFontSize`
    | `String` 和 `Number` | `footer` 的字体属性（使用 `callbacks` 进行配置）。 |'
- en: '| `caretSize` | `Number` | Size in pixels of the tooltip arrow. Default is
    `5`. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `caretSize` | `Number` | 工具提示箭头的大小（以像素为单位）。默认为 `5`。 |'
- en: '| `caretPadding` | `Number` | Distance of the arrow tip from the tooltip position
    (example: the value point). Default is `2`. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `caretPadding` | `Number` | 箭头尖端与工具提示位置（例如值点）的距离。默认为 `2`。 |'
- en: '| `cornerRadius` | `Number` | The radius of the rounded rectangle in pixels.
    Default is `6`. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `cornerRadius` | `Number` | 圆角矩形的半径（以像素为单位）。默认为 `6`。 |'
- en: '| `backgroundColor` | CSS color | The background color of the tooltip. Default
    is `rgba(0,0,0,0.8)`. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `backgroundColor` | CSS 颜色 | 工具提示的背景颜色。默认为 `rgba(0,0,0,0.8)`。 |'
- en: '| `multiKeyBackground` | CSS color | The background of the colored box (won''t
    be visible if the `dataset` color is opaque). Default is `#fff`. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `multiKeyBackground` | CSS 颜色 | 着色框的背景（如果 `dataset` 颜色不透明则不可见）。默认为 `#fff`。
    |'
- en: '| `borderColor` | CSS color | The border color of the tooltip. Default is `rgba(0,0,0,0)`.
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `borderColor` | CSS 颜色 | 工具提示的边框颜色。默认为 `rgba(0,0,0,0)`。 |'
- en: '| `borderWidth` | Number | The border width of the tooltip. Default is 0. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `borderWidth` | Number | 工具提示的边框宽度。默认为 0。 |'
- en: '| `displayColors` | `true` or `false` | If `false`, hides color boxes. Default
    is `true`. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `displayColors` | `true` 或 `false` | 如果为 `false`，则隐藏颜色框。默认为 `true`。 |'
- en: '| `callbacks` | Object | An object containing several callback functions. See
    the *Tooltip callbacks* section on tooltip `callbacks` in this chapter. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `callbacks` | Object | 包含多个回调函数的对象。请参阅本章中工具提示 `callbacks` 的 *Tooltip callbacks*
    部分。 |'
- en: Static properties for tooltips (used in the *options.tooltips* key)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 工具提示的静态属性（用于 *options.tooltips* 键）
- en: 'In the following example, several default style properties were changed for
    the tooltips of a chart instance. Each tooltip will have a gray background, a
    yellow 3-pixel border, a pink 16-pixel title, an italic body, and a 10-pixel arrow,
    distant 10 pixels from the data point:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，更改了图表实例的提示框的几个默认样式属性。每个提示框将具有灰色背景、黄色3像素边框、粉色16像素标题、斜体正文和10像素箭头，距离数据点10像素：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The full code is in `Tooltips/tooltip-1.html`. The result is as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 完整代码在`Tooltips/tooltip-1.html`中。结果如下：
- en: '![](img/f2a97dd6-cfd2-4e4a-b4ac-2f06d89a9627.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2a97dd6-cfd2-4e4a-b4ac-2f06d89a9627.png)'
- en: Tooltip with modified border color and width, background color, title font size
    and color, body font style,
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 带有修改过的边框颜色和宽度、背景颜色、标题字体大小和颜色、正文字体样式的提示框，
- en: 'caret arrow size, and padding (distance from value point). Code: *Tooltips/tooltip-1.html.*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 带有刻度箭头大小和填充（从值点到箭头的距离）。代码：*Tooltips/tooltip-1.html.*
- en: Hovering interactions
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 悬停交互
- en: 'Tooltips respond to hover events. The next table lists properties of the `hover`
    object, which can be configured globally using `Chart.defaults.global.hover` or
    locally using `options.hover`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 提示框响应悬停事件。下表列出了`hover`对象的属性，可以通过`Chart.defaults.global.hover`全局配置或通过`options.hover`局部配置：
- en: '| **Object** | **Value** | **Description** |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| **Object** | **Value** | **描述** |'
- en: '| `intersect` | `true` or `false` | Same behavior as `tooltip.intersect`. Tooltips
    can respond to different intersect states when hovering. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `intersect` | `true`或`false` | 与`tooltip.intersect`相同的行为。提示框可以响应悬停时的不同交叉状态。|'
- en: '| `mode` | `nearest`, `index`, `dataset`, `x`, `y`. Deprecated values are `label`
    (same as `index`), and `single` (behaves like `nearest` when `intersect: true`).
    | Same behavior as `tooltip.mode`. Tooltips can respond to a different mode when
    hovering. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `mode` | `nearest`、`index`、`dataset`、`x`、`y`。已弃用的值是`label`（与`index`相同），以及`single`（当`intersect:
    true`时，行为类似于`nearest`）。| 与`tooltip.mode`相同的行为。提示框可以响应悬停时的不同模式。|'
- en: '| `axis` | `x`, `y`, `xy` | Selects parameters that are used to calculate the
    distance from the value point to the cursor during a hover event. The default
    is `x`. Horizontal bar charts override this to `y` so that `mode:index` can select
    different bars. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `axis` | `x`、`y`、`xy` | 选择用于在悬停事件期间计算值点到光标距离的参数。默认为`x`。水平条形图覆盖此为`y`，以便`mode:index`可以选中不同的条形。|'
- en: '| `animationDuration` | `Number` | The duration of the animation. This affects
    any hovering events, including tooltips. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `animationDuration` | `Number` | 动画持续时间。这会影响任何悬停事件，包括提示框。|'
- en: Configuration options for the hover object
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 悬停对象的配置选项
- en: Both the `hover` and the tooltip objects support the mode and intersect properties.
    They are similar, but the `hover` property also applies to non-tooltip events
    (configured with the optional `onHover` callback).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`hover`和提示框对象都支持模式（mode）和交叉（intersect）属性。它们很相似，但`hover`属性还适用于非提示框事件（通过可选的`onHover`回调配置）。'
- en: If the `intersect` property is `true`, the event will only be fired if the mouse
    is directly over a bar or pie slice, or within a certain radius from the value
    point (for line, scatter, and bubble charts). If `intersect` is `false`, the event
    may be fired before the mouse is over the value point.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`intersect`属性为`true`，则只有在鼠标直接位于条形或饼图块上，或位于值点的一定半径内时（对于线形、散点图和气泡图），事件才会触发。如果`intersect`为`false`，则事件可能在鼠标未位于值点之前触发。
- en: The `mode` property selects the data values related to the event. If `intersect`
    is `false`, and `mode` is `nearest`, it will select the nearest point.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`mode`属性选择与事件相关的数据值。如果`intersect`为`false`，且`mode`为`nearest`，则将选择最近的点。'
- en: 'When used in tooltips, the `mode` property also determines which items appear
    in a tooltip. If `nearest`, it will show the value that is nearest to the point
    where the mouse is (typical in scatter and bubble charts). The property can also
    have the following values:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当在提示框中使用时，`mode`属性还确定哪些项目出现在提示框中。如果为`nearest`，它将显示鼠标所在点最近的价值。该属性还可以有以下值：
- en: '`point`, showing only items that actually intersect the point (typical inline
    charts)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`point`，仅显示实际与点相交的项目（典型的内联图表）'
- en: '`index`, showing all the points at the same index (typical in a bar or pie
    chart)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`，显示相同索引处的所有点（在柱状图或饼图中很常见）'
- en: '`dataset`, listing all points in the dataset'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataset`，列出数据集中的所有点'
- en: 'There are also two more modes that are exclusive to Cartesian scales: *x* and
    *y*, which selects all points with the same values of *x* and *y*, respectively.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 还有两种仅适用于笛卡尔刻度的模式：*x*和*y*，分别选择具有相同*x*和*y*值的所有点。
- en: 'Edit the `Tooltips/tooltip-3-modes.html` file and experiment with different
    modes. The following screenshots show some tooltip modes applied to a line chart
    with three datasets:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `Tooltips/tooltip-3-modes.html` 文件并尝试不同的模式。以下截图显示了应用于具有三个数据集的折线图的某些提示信息模式：
- en: '![](img/7b1434ae-e560-4368-87f4-7ef4b269bb4a.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b1434ae-e560-4368-87f4-7ef4b269bb4a.png)'
- en: 'Tooltip interaction modes: (a) displays single value point; (b) displays items
    with same index (or x value in this case);'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 提示信息交互模式： (a) 显示单个值点； (b) 显示具有相同索引（或在此情况下为 x 值）的项目；
- en: '(c) displays items with same y value; (d) displays all items in a dataset.
    Code: *Tooltips/tooltip-3-modes.html.*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: (c) 显示具有相同 *y* 值的项目； (d) 显示数据集中的所有项目。代码：*Tooltips/tooltip-3-modes.html.*
- en: Scriptable properties
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可脚本化属性
- en: 'Tooltips have three properties that receive functions. One allows you to replace
    the Canvas-generated tooltips with your own custom HTML tooltips. The other two
    allow sorting of tooltip items (when several items appear in a single tooltip)
    and filtering. These properties are listed as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 提示信息有三个属性接收函数。一个允许你用你自己的自定义 HTML 提示信息替换 Canvas 生成的提示信息。其他两个允许对提示信息项进行排序（当多个项出现在单个提示信息中）和过滤。以下列出了这些属性：
- en: '| **Object** | **Parameters** | **Description** |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| **对象** | **参数** | **描述** |'
- en: '| `custom` | (`tooltipModel`) | Used to generate custom HTML tooltips. See
    the *Custom HTML tooltips* section on HTML tooltips in this chapter. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `custom` | (`tooltipModel`) | 用于生成自定义 HTML 提示信息。请参阅本章中 HTML 提示信息的 *自定义 HTML
    提示信息* 部分。 |'
- en: '| `filter` | `(item, data)`; array of datasets in `data.datasets`; array of
    labels in `data.labels`; `item.x` and `item.y` contain coordinates of the value
    point, `item.xLabel` and `item.yLabel` the labels in each axis, `item.index` is
    the index of the item in the dataset, and `item.datasetIndex` is the index of
    its dataset. | A function that returns `true` or `false` and is called before
    rendering a tooltip item. If it returns `false`, the item will not be rendered.
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `filter` | `(item, data)`; `data.datasets` 中的数据集数组；`data.labels` 中的标签数组；`item.x`
    和 `item.y` 包含值点的坐标，`item.xLabel` 和 `item.yLabel` 是每个轴上的标签，`item.index` 是数据集中项目的索引，`item.datasetIndex`
    是其数据集的索引。 | 一个返回 `true` 或 `false` 的函数，在渲染提示信息项之前被调用。如果返回 `false`，则该项将不会被渲染。 |'
- en: '| `itemSort` | `(item1, item2)`; each parameter is an item object with the
    following properties: `x`, `y`, `xLabel`, `yLabel`, `index`, `dataSetIndex`. |
    Sorts items (in tooltips that contain multiple items). The function returns a
    number. If `item1 < item2` the function should return negative value, if `item1
    > item2` a positive value should be returned, and zero should be returned if they
    are equal. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `itemSort` | `(item1, item2)`; 每个参数都是一个具有以下属性的项对象：`x`，`y`，`xLabel`，`yLabel`，`index`，`dataSetIndex`。
    | 对项目（在包含多个项的提示信息中）进行排序。该函数返回一个数字。如果 `item1 < item2`，则函数应返回负值；如果 `item1 > item2`，则应返回正值；如果它们相等，则返回零。
    |'
- en: Scriptable properties for tooltips
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 提示信息的可脚本化属性
- en: 'Let’s see some examples. In the following code (`Tooltip/tooltip-4-script-filter.html`),
    the filtering function ignores all items that contain *y* values greater than
    `20`. Additionally, the `events` key was used to reduce the events the tooltips
    respond to. In this example, they are only activated with clicks:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些示例。在以下代码 (`Tooltip/tooltip-4-script-filter.html`) 中，过滤函数忽略了所有 *y* 值大于
    `20` 的项目。此外，使用了 `events` 键来减少提示信息响应的事件。在此示例中，它们仅在点击时被激活：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot shows the result of clicking near the values points
    of `index` 1\. Since one of the three points is greater than `20`, it doesn''t
    show up in the tooltip:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了点击 `index` 1 附近的值点时的结果。由于三个点中的一个大于 `20`，因此它没有显示在提示信息中：
- en: '![](img/73b0319d-9e66-4862-80f2-b972576742dd.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73b0319d-9e66-4862-80f2-b972576742dd.png)'
- en: 'Tooltip with mode: index filtering only items that have a y value less than
    20\. Code: *Tooltip/tooltip-4-script-filter.html.*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 带有模式：仅过滤具有小于 20 的 *y* 值的项目的提示信息。代码：*Tooltip/tooltip-4-script-filter.html.*
- en: 'This other example (`Tooltip/tooltip-5-script-sort.html`) configures item sorting
    in *ascending* order by the *y* value, in the same chart:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例 (`Tooltip/tooltip-5-script-sort.html`) 配置了按 *y* 值的 *升序* 对项目进行排序，在同一图表中：
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result is as follows. Note that the tooltip items are ordered by their
    *y* value:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下。请注意，提示信息项是按其 *y* 值排序的：
- en: '![](img/94b914d9-fb05-4b9f-9143-10fba32087f9.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94b914d9-fb05-4b9f-9143-10fba32087f9.png)'
- en: 'Tooltip with mode: ‘index’ sorting items by their *y* value. Code: *Tooltip/tooltip-5-script-sort.html.*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 带有模式：'index' 的提示信息按其 *y* 值排序。代码：*Tooltip/tooltip-5-script-sort.html.*
- en: Tooltip callbacks
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示信息回调函数
- en: 'With `callbacks`, you can dynamically generate the text contents and colors
    of the items displayed in a tooltip based on data values and other accessible
    attributes. The `Callbacks` are properties of the `tooltips.callbacks` object,
    which can be configured globally (`Chart.defaults.global.tooltips.callbacks`)
    or locally per chart instance (`options.tooltips.callbacks`). They are listed
    in the table as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`callbacks`，您可以根据数据值和其他可访问属性动态生成工具提示中显示的项目文本内容和颜色。`Callbacks`是`tooltips.callbacks`对象的属性，可以在全局（`Chart.defaults.global.tooltips.callbacks`）或每个图表实例本地配置（`options.tooltips.callbacks`）。它们在表中按以下方式列出：
- en: '| **Object** | **Parameters** | **Description** |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| **对象** | **参数** | **描述** |'
- en: '| `beforeTitle`, `title`, `afterTitle` | `(item[], data)`; array of datasets
    in `data.datasets`; array of labels in `data.labels`; each item element contains
    the following properties: `x`, `y`, `xLabel`, `yLabel`, `index`, `dataSetIndex`.
    | The `title` function returns the text for the tooltip title. You can also implement
    other functions to include text above or below it. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `beforeTitle`, `title`, `afterTitle` | `(item[], data)`；`data.datasets`中的数据集数组；`data.labels`中的标签数组；每个项目元素包含以下属性：`x`，`y`，`xLabel`，`yLabel`，`index`，`dataSetIndex`。
    | `title`函数返回工具提示标题的文本。您还可以实现其他函数以包含其上或其下的文本。 |'
- en: '| `beforeBody`, `body`, `afterBody` | The `body` function returns the text
    for the tooltip body (including labels). You can also implement other functions
    to include text above or below it. |  |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `beforeBody`, `body`, `afterBody` | `body`函数返回工具提示主体的文本（包括标签）。您还可以实现其他函数以包含其上或其下的文本。
    |  |'
- en: '| `beforeFooter`, `footer`, `afterFooter` | The `footer` function returns the
    text for the tooltip footer. You can also implement other functions to include
    text before or after it. |  |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `beforeFooter`, `footer`, `afterFooter` | `footer`函数返回工具提示脚注的文本。您还可以实现其他函数以包含其前或其后的文本。
    |  |'
- en: '| `beforeLabel`, `label`, `afterLabel` | `(item,data)`; array of datasets in
    `data.datasets`; array of labels in `data.labels`; `item.x` and `item.y` contain
    coordinates of the value point, `item.xLabel` and `item.yLabel` the labels in
    each axis, `item.index` is the index of the item in the dataset, `item.datasetIndex`
    is the index of its dataset. | The `label` function returns the text for this
    label. You can also implement other functions to include text above or below one
    or more labels. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `beforeLabel`, `label`, `afterLabel` | `(item,data)`；`data.datasets`中的数据集数组；`data.labels`中的标签数组；`item.x`和`item.y`包含值点的坐标，`item.xLabel`和`item.yLabel`是每个轴的标签，`item.index`是项目在数据集中的索引，`item.datasetIndex`是其数据集的索引。
    | `label`函数返回此标签的文本。您还可以实现其他函数以包含一个或多个标签上或其下的文本。 |'
- en: '| `labelColor` | `(item, chart)` | The function returns the color of the text
    box of an individual item label |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `labelColor` | `(item, chart)` | 该函数返回单个项目标签文本框的颜色 |'
- en: '| `labelTextColor` | `(item, chart)` | The function returns the color of the
    text for an individual item label |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `labelTextColor` | `(item, chart)` | 该函数返回单个项目标签文本的颜色 |'
- en: Callbacks to create and change the text contents of tooltips
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 用于创建和更改工具提示文本内容的回调函数
- en: 'The following example (`Tooltips/tooltip-6-callback.html`) uses `callbacks`
    to add extra text to the title, insert separator characters above and below the
    item labels, and append a `footer` containing the average of all the value points:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例（`Tooltips/tooltip-6-callback.html`）使用`callbacks`向标题添加额外文本，在项目标签上下插入分隔符字符，并附加包含所有值点的平均值的`footer`：
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The result is as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![](img/1098f2c7-7876-4a8c-a7fe-03ab830c698b.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1098f2c7-7876-4a8c-a7fe-03ab830c698b.png)'
- en: 'Tooltip with a footer, extra text in title, and separators before and after
    body created with callbacks. Code: *Tooltips/tooltip-6-callback.html.*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用回调函数创建具有脚注、标题中额外文本以及主体前后分隔符的工具提示。代码：*Tooltips/tooltip-6-callback.html.*
- en: Custom HTML tooltips
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义HTML工具提示
- en: The `Chart.defaults.global.tooltips.custom` (or `options.tooltips.custom`) property
    receives a function that should build an HTML tooltip and connect it to a tooltip
    *model* object passed as a parameter. The tooltip model is a native object that
    responds to tooltip events and stores tooltip properties. Its properties can be
    copied and reused inside the HTML tooltip if desired.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chart.defaults.global.tooltips.custom`（或`options.tooltips.custom`）属性接收一个函数，该函数应构建一个HTML工具提示并将其连接到作为参数传递的工具提示*模型*对象。工具提示模型是一个原生对象，它响应工具提示事件并存储工具提示属性。如果需要，其属性可以在HTML工具提示内部复制和重用。'
- en: 'The following example (`Tooltips/tooltip-7-custom.html`) shows how to create
    a simple custom HTML tooltip containing an image. The custom tooltip can be created
    using HTML as shown in the following snippet, or programmatically using DOM, and
    should initially be hidden (`opacity: 0`). When a `hover` event activates a tooltip,
    the model’s opacity changes and the custom tooltip uses this state to make itself
    visible:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '以下示例（`Tooltips/tooltip-7-custom.html`）展示了如何创建一个包含图像的简单自定义HTML提示框。自定义提示框可以使用HTML创建，如以下片段所示，或者通过DOM编程创建，并且最初应该隐藏（`opacity:
    0`）。当`hover`事件激活提示框时，模型的透明度会改变，自定义提示框会利用这种状态使自己可见：'
- en: '[PRE4]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The code extracts the title and filename from the tooltip model’s `title`,
    and the value from the model’s `body`. The custom tooltip also used the model’s
    coordinates to decide where it would be placed. The result is as follows. If you
    hover over the labels in the *x-*axis or the bars, the HTML tooltip will be shown
    above each bar:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 代码从提示框模型的`title`中提取标题和文件名，从模型的`body`中提取值。自定义提示框还使用了模型的坐标来决定其放置的位置。结果如下。如果您将鼠标悬停在*x*轴的标签或条形上，HTML提示框将显示在每个条形的上方：
- en: '![](img/2cedb051-ab16-446d-835b-1dc75707acc5.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2cedb051-ab16-446d-835b-1dc75707acc5.png)'
- en: 'Bar chart with a custom HTML tooltip that appears when the mouse hovers over
    a bar or label. Code: *Tooltips/tooltip-7-custom.html.*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标悬停在条形或标签上时，会出现自定义HTML提示框的条形图。代码：*Tooltips/tooltip-7-custom.html.*
- en: Positioning tooltips in pie charts is a bit more complex. For more examples
    on how to create custom HTML tooltips, check the samples page in the official
    documentation.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在饼图中定位提示框要复杂一些。有关如何创建自定义HTML提示框的更多示例，请查看官方文档中的示例页面。
- en: Advanced legend configuration
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级图例配置
- en: Chart.js provides default presentation and behavior for legends and labels.
    In the previous chapter, we saw some examples of how to change the default behavior
    by programming the `onClick` event handler callback. In this section, we will
    see how to generate individual labels and, if you need even more control, how
    to create custom HTML legends.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Chart.js为图例和标签提供了默认的呈现和行为。在前一章中，我们看到了一些如何通过编程`onClick`事件处理程序回调来更改默认行为的例子。在本节中，我们将看到如何生成单个标签，如果您需要更多的控制，我们将看到如何创建自定义HTML图例。
- en: Generating labels
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成标签
- en: 'Labels can be generated with the `generateLabels` callback property. They should
    return an item object (the same object that is passed to an `onClick` function),
    which contains the properties listed as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 标签可以通过`generateLabels`回调属性生成。它们应该返回一个项目对象（与传递给`onClick`函数的对象相同），该对象包含以下列出的属性：
- en: '| **Object** | **Value** | **Description** |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| **对象** | **值** | **描述** |'
- en: '| `text` | String | The text of the label |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `text` | 字符串 | 标签的文本 |'
- en: '| `datasetIndex` | Number | The index of the label |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `datasetIndex` | 数字 | 标签的索引 |'
- en: '| `fillStyle`, `strokeStyle`, `lineCap`, `lineJoin`,'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '| `fillStyle`, `strokeStyle`, `lineCap`, `lineJoin`,'
- en: '`lineDash`, `lineWidth`, `lineDashOffset` | The same values as the corresponding
    Canvas commands | Fill and stroke attributes for the legend box |'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`lineDash`, `lineWidth`, `lineDashOffset` | 与相应的Canvas命令相同的值 | 图例框的填充和描边属性
    |'
- en: '| `pointStyle` | `circle`, `cross`, `crossRot`, `dash`, `line`, `rect`, `rectRounded`,
    `rectRot`, `star`, `triangle` | If `legend.labels.usePointStyle` is `true`, the
    label will use the same point style as the chart. This allows you to set a different
    point style for the legend labels. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `pointStyle` | `circle`, `cross`, `crossRot`, `dash`, `line`, `rect`, `rectRounded`,
    `rectRot`, `star`, `triangle` | 如果`legend.labels.usePointStyle`为`true`，则标签将使用与图表相同的点样式。这允许您为图例标签设置不同的点样式。
    |'
- en: '| `hidden` | Boolean | If `true,` chart elements related to the dataset will
    not be rendered |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `hidden` | 布尔值 | 如果`true`，则与数据集相关的图表元素将不会渲染 |'
- en: Properties of a legend label object (received by onClick and returned by generateLabels)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图例标签对象的属性（由`onClick`接收并由`generateLabels`返回）
- en: 'The following code shows configuration for legend labels (`Legend/legend-1-gen-labels.html`)
    using a `generateLabels` callback. The colored box is configured as a rotated
    rectangle with `pointStyle`. The label’s `fontSize` controls the size of the font
    and point. The border color of each dataset is the fill for each label:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了使用`generateLabels`回调配置图例标签（`Legend/legend-1-gen-labels.html`）的配置。彩色框配置为旋转矩形，带有`pointStyle`。标签的`fontSize`控制字体和点的大小。每个数据集的边框颜色是每个标签的填充：
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The result is as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![](img/e53681a3-8787-492b-9981-fe3cbf0a5925.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e53681a3-8787-492b-9981-fe3cbf0a5925.png)'
- en: 'Generated labels with different symbols for legends. Code: *Legend/legend-1-gen-labels.html.*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为图例生成具有不同符号的标签。代码：*Legend/legend-1-gen-labels.html.*
- en: HTML legends
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML图例
- en: 'If you have a very complex legend or wish to display a legend outside the Canvas
    mixed with the HTML in your page, you can generate custom HTML legends. To create
    them, you need an empty `<div>` block:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个非常复杂的图例或者希望在Canvas之外显示图例，与页面中的HTML混合，你可以生成自定义HTML图例。要创建它们，你需要一个空的`<div>`块：
- en: '[PRE6]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So, the legend can be attached to the page’s body. Then, you implement a `callback`
    function for the `Chart.defaults.global.legendCallback` property or `options.legendCallback`
    that returns the HTML for the legend. You can create the content dynamically and
    apply CSS styles with property values copied from the chart. The HTML is generated
    with `chart.generateLegend()`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，图例可以附加到页面的主体上。然后，你为`Chart.defaults.global.legendCallback`属性或`options.legendCallback`实现一个`callback`函数，该函数返回图例的HTML。你可以动态创建内容，并使用从图表复制的属性值应用CSS样式。HTML是通过`chart.generateLegend()`生成的。
- en: 'It’s easier with an example. The following code implements a simple HTML legend
    from an HTML list. You can run the full code in `Legend/legend-2-html-callback.html`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过示例更容易理解。以下代码从一个HTML列表实现了一个简单的HTML图例。你可以在`Legend/legend-2-html-callback.html`中运行完整代码：
- en: '[PRE7]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The new legend doesn’t replace the default label. Unless you wish to display
    both legends, you should hide the default legend using `display: false`.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '新图例不会替换默认标签。除非你希望显示两个图例，否则你应该使用`display: false`来隐藏默认图例。'
- en: 'No behaviors are included in these HTML legends. You need to implement them
    yourself using JavaScript events. The following screenshot shows the result of
    the previous code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这些HTML图例中不包含任何行为。你需要自己使用JavaScript事件来实现它们。以下截图显示了之前代码的结果：
- en: '![](img/ff5d2f80-b5d7-40bb-a014-ad4dc9075c58.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ff5d2f80-b5d7-40bb-a014-ad4dc9075c58.png)'
- en: 'Legends created with HTML. Code: *Legend/legend-1-gen-labels.html.*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTML创建的图例。代码：*Legend/legend-1-gen-labels.html.*
- en: Displaying multiple charts
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示多个图表
- en: Many times, you need to display more than one chart in a page to present different
    sets of data, or different views of the same data using different chart types.
    You may also wish to draw multiple charts over the same axes, so they can be compared.
    Another possibility is to use Canvas to draw over or under a chart and add context
    or additional data. All these scenarios are possible in Chart.js, but they require
    different strategies.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 许多时候，你需要在同一页面上显示多个图表，以展示不同的数据集，或者使用不同的图表类型来展示相同数据的不同视角。你也可能希望在同一轴上绘制多个图表，以便进行比较。另一种可能性是使用Canvas在图表之上或之下绘制，以添加上下文或额外数据。所有这些场景在Chart.js中都是可能的，但它们需要不同的策略。
- en: Rendering many charts on one page
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在一个页面上渲染多个图表
- en: You can render several different charts on the same page by simply drawing a
    separate Canvas for each one.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过为每个图表绘制一个单独的Canvas来在同一页面上渲染多个不同的图表。
- en: 'The following example displays four charts on one page that share the same
    data. First, we need to set up the canvases using HTML and CSS:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例在一个页面上显示了四个共享相同数据的图表。首先，我们需要使用HTML和CSS设置画布：
- en: '[PRE8]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The JavaScript code is shown in the following code. The chart initially loads
    some static data, but every time the button is pressed, the data changes and the
    charts are updated. The `updateData()` function was created to simulate new random
    data that is loaded into each chart every time the button is pressed:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了JavaScript代码。图表最初加载一些静态数据，但每次按下按钮时，数据都会改变，图表也会更新。`updateData()`函数被创建用来模拟每次按钮按下时加载到每个图表中的新随机数据：
- en: '[PRE9]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can see the following result. Run the full code from `Multiple/ multiple-1-canvas.html`.
    Press the button and observe all the charts changing at once:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到以下结果。运行`Multiple/ multiple-1-canvas.html`中的完整代码。按下按钮并观察所有图表同时改变：
- en: '![](img/339846e3-e8bd-4408-9346-66e8eeb55f77.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/339846e3-e8bd-4408-9346-66e8eeb55f77.png)'
- en: 'Displaying and updating multiple charts in one page. Code: *Multiple/multiple-1-canvas.html.*'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个页面上显示和更新多个图表。代码：*Multiple/multiple-1-canvas.html.*
- en: Mixed charts
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合图表
- en: Mixed charts are charts of different types that share the same axes. A typical
    example is to overlay a bar chart with one or more line charts. In Chart.js, this
    is achieved simply by adding a different `type` property in one or more datasets.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 混合图表是不同类型的图表，它们共享相同的轴。一个典型的例子是将柱状图与一个或多个折线图叠加。在Chart.js中，这可以通过在数据集的一个或多个中添加不同的`type`属性来实现。
- en: 'In the following example (`Multiple/ multiple-2-mixed.html`), a bar chart is
    used to display a set of values and a line chart is used to show the accumulated
    average:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例（`Multiple/ multiple-2-mixed.html`）中，使用条形图显示一组值，并使用折线图显示累积平均值：
- en: '[PRE10]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Since `bar` is the default type, it doesn’t need a `type` property. There could
    also be additional datasets for each type.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`bar`是默认类型，因此不需要`type`属性。每种类型也可能有额外的数据集。
- en: 'The result is as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![](img/55756f96-cdf8-4df9-998d-127aa5030b65.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/55756f96-cdf8-4df9-998d-127aa5030b65.png)'
- en: 'A mixed bar/line chart. Code: *Multiple/multiple-2-mixed.html.*'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 混合条形图/折线图。代码：*Multiple/multiple-2-mixed.html.*
- en: Overlaying a canvas
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在画布上叠加
- en: One way to draw text and graphics on a chart is to draw on the same canvas *after*
    the chart is completely loaded. You can do that implementing your code in a function
    assigned to the `animation.onComplete` property. You can also write a simple plugin.
    Another way to draw over or under a chart is to draw on top of another canvas,
    and position it *exactly* over or under your chart canvas. This is easy to do
    if you won’t be resizing your page. If you do any resizing, you will have to write
    additional scripts to scale your canvas content to keep it in sync with the chart
    (in this case, a plugin would be a better solution).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在图表上绘制文本和图形的一种方法是在图表完全加载后在其相同的画布上绘制。您可以通过将代码实现为分配给`animation.onComplete`属性的函数来完成此操作。您还可以编写一个简单的插件。另一种在图表上方或下方绘制的方法是在另一个画布上绘制，并将其定位在您的图表画布的*正好*上方或下方。如果您不会调整页面大小，这很容易做到。如果您进行任何调整大小，您将不得不编写额外的脚本以缩放画布内容，以保持与图表（在这种情况下，插件将是一个更好的解决方案）同步。
- en: 'As an example, let''s use the `GeoJSON` world map we loaded and rendered in
    [Chapter 2](25edc904-3528-40cc-8865-75ccf1fc78eb.xhtml),* Technology Fundamentals*,
    and place it under the bubble chart with the city populations we created in [Chapter
    4,](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml)* Creating Charts*. Since the map
    uses a simple cylindrical projection, we just have to make them both the same
    size, and use CSS absolute positioning to stack one over the other:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们使用我们在[第2章](25edc904-3528-40cc-8865-75ccf1fc78eb.xhtml)中加载和渲染的`GeoJSON`世界地图，*技术基础*，并将其放置在[第4章](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml)中创建的气泡图下，*创建图表*的城市人口。由于地图使用简单的圆柱投影，我们只需使它们大小相同，并使用CSS绝对定位将一个堆叠在另一个之上：
- en: '[PRE11]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The drawings also have to start on the same point and use the same scales.
    The code uses four functions from `JavaScript/canvasmap.js`: a simple script that
    draws a map from GeoJSON data:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图也必须从相同的位置开始，并使用相同的比例。代码使用了`JavaScript/canvasmap.js`中的四个函数：一个简单的脚本，用于从GeoJSON数据绘制地图：
- en: '`map.setCanvas(canvas)`: receives the background canvas where the map will
    be drawn'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`map.setCanvas(canvas)`：接收将要绘制地图的背景画布'
- en: '`map.drawMap(geodata)`: receives an array of GeoJSON features and draws the
    map'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`map.drawMap(geodata)`：接收一个GeoJSON特征的数组并绘制地图'
- en: '`map.scaleX(longitude)` and `map.scaleY(latitude)`: converts latitudes and
    longitudes into pixel coordinates'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`map.scaleX(longitude)`和`map.scaleY(latitude)`：将经纬度转换为像素坐标'
- en: 'The following code obtains the `canvas` context for the map and sets its fill
    and stroke styles, loads and parses a GeoJSON file containing shapes for a world
    map, and a CSV containing city names, populations, latitudes, and longitudes.
    It then calls functions to draw the map and the chart:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码获取地图的`canvas`上下文，并设置其填充和描边样式，加载并解析包含世界地图形状的GeoJSON文件，以及包含城市名称、人口、纬度和经度的CSV文件。然后调用函数绘制地图和图表：
- en: '[PRE12]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The radius of each bubble will be somewhat proportional to the population.
    This function will return a value that fits well in the map:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 每个气泡的半径将与人口数量成一定比例。此函数将返回一个适合在地图上显示的值：
- en: '[PRE13]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `drawChart()` function uses the parsed CSV datasets to generate an array
    of location objects, each containing *name* and the required bubble chart properties:
    `r` radius and *x*, *y* coordinates. The generated `locations` array is used as
    the `dataset` for the bubble chart:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`drawChart()`函数使用解析的CSV数据集生成一个包含位置对象的数组，每个对象包含*名称*和气泡图所需的属性：`r`半径和*x*，*y*坐标。生成的`locations`数组用作气泡图的`dataset`：'
- en: '[PRE14]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `options` configuration object must configure scales so that there are
    no margins. Setting `min` and `max` properties for the ticks, removing legends
    and making `responsive:false` will guarantee this. Tooltips were also configured
    to show name and population (this is not shown here, but you can see the full
    code in `Multiple/multiple-3-overlay.html`):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`options` 配置对象必须配置刻度，以确保没有边距。设置刻度的 `min` 和 `max` 属性，移除图例，并设置 `responsive:false`
    将保证这一点。工具提示也被配置为显示名称和人口（这里没有显示，但可以在 `Multiple/multiple-3-overlay.html` 中看到完整的代码）：'
- en: '[PRE15]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The final result is as follows. The chart is interactive; you can hover over
    a large city and get details:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果是如下。图表是交互式的；你可以悬停在大型城市上以获取详细信息：
- en: '![](img/5f36f79f-5421-4145-9677-03d88aa42503.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f36f79f-5421-4145-9677-03d88aa42503.png)'
- en: 'Two stacked HTML Canvases: one draws an SVG GeoJSON map, the other draws a
    bubble chart with Chart.js.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 两个堆叠的 HTML Canvas：一个绘制 SVG GeoJSON 地图，另一个使用 Chart.js 绘制气泡图。
- en: 'Code: *Multiple/multiple-3-overlay.html.*'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 代码：*Multiple/multiple-3-overlay.html.*
- en: Since we used very large files in this example, it takes a while to load the
    chart and the tooltips may run a bit slow on some systems. A quick way to optimize
    it is to reduce the data files previously before loading them. You can also filter
    and only use the large cities, drawing the small ones separately with Canvas.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在这个示例中使用了非常大的文件，加载图表需要一些时间，并且在某些系统上工具提示可能运行得有点慢。一种快速优化方法是，在加载之前减少数据文件的大小。也可以过滤并仅使用大城市，用
    Canvas 分别绘制小城市。
- en: Extending Chart.js
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 Chart.js
- en: There are several ways to extend Chart.js. You may use the prototype methods,
    callbacks, and event handlers and interact with the rendering process; you can
    create plugins, which have their own life cycle and are easier to reuse in other
    charts; and you can extend Chart.js from existing charts or even create new charts
    and scales.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以扩展 Chart.js。可以使用原型方法、回调和事件处理器与渲染过程交互；可以创建插件，它们有自己的生命周期，并且更容易在其他图表中重用；还可以从现有图表或甚至创建新的图表和刻度扩展
    Chart.js。
- en: Prototype methods
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原型方法
- en: 'Prototype methods are automatically called during rendering and updates. You
    can also call them directly if you need to interfere with the rendering process.
    They are listed in the following table:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 原型方法在渲染和更新过程中自动调用。如果需要干扰渲染过程，也可以直接调用它们。它们列在以下表中：
- en: '| **Method** | **Description** |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** |'
- en: '| `destroy()` | Destroys a chart instance. This can be used if you wish to
    reuse the canvas, or remove the chart completely. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `destroy()` | 销毁图表实例。如果希望重用画布或完全删除图表，可以使用此方法。|'
- en: '| `reset()` | Restores the chart to its initial state (after layout and before
    its initial animation). A new animation can be triggered with `render()` or `update()`.
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `reset()` | 将图表恢复到其初始状态（布局之后和初始动画之前）。可以使用 `render()` 或 `update()` 触发新的动画。|'
- en: '| `stop()` | Stops an animation loop. This is usually called in an `onProgress`
    callback. Calling `render()` or `update()` will resume the animation. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `stop()` | 停止动画循环。这通常在 `onProgress` 回调中调用。调用 `render()` 或 `update()` 将继续动画。|'
- en: '| `clear()` | Clears the chart canvas (effective after the chart has finished
    rendering). You can call `render()` or `update()` to draw it again. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `clear()` | 清除图表画布（在图表完成渲染后生效）。可以调用 `render()` 或 `update()` 重新绘制它。|'
- en: '| `resize()` | Resizes the chart. Called automatically every time the canvas
    is resized. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `resize()` | 调整图表大小。每当画布大小调整时自动调用。|'
- en: '| `update(config)` | Updates the chart. This should be called after any changes
    in the datasets. You can include a configuration object with the following properties:
    *duration* (Number) to control the redraw animation duration, *lazy* (boolean)
    to decide if the animation can be interrupted by others, and *easing* (String),
    to select an easing function. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `update(config)` | 更新图表。在数据集有任何更改后应调用此方法。可以包含一个具有以下属性的配置对象：*duration*（数字）用于控制重绘动画的持续时间，*lazy*（布尔值）用于决定动画是否可以被其他动画中断，以及
    *easing*（字符串），用于选择缓动函数。|'
- en: '| `render(config)` | Redraws all chart elements but does not update the chart
    elements for new data. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `render(config)` | 重新绘制所有图表元素，但不更新新数据对应的图表元素。|'
- en: '| `toBase64Image()` | Generates the chart as a new base64-encoded PNG image.
    It can be displayed in an HTML page, or converted into a blob for download. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `toBase64Image()` | 将图表生成一个新的 base64 编码的 PNG 图像。它可以在 HTML 页面上显示，或转换为 blob
    以供下载。|'
- en: '| `generateLegend()` | Returns the contents of the `options.legendCallback`
    property (an HTML legend) when called. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `generateLegend()` | 当调用时，返回 `options.legendCallback` 属性的内容（一个 HTML 图例）。|'
- en: '| `getElementAtEvent(e)` | Used in event handlers to obtain the element at
    an event. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `getElementAtEvent(e)` | 在事件处理程序中使用，以获取事件中的元素。 |'
- en: '| `getElementsAtEvent(e)` | Used in event handlers to obtain all elements with
    the same data index at an event. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `getElementsAtEvent(e)` | 在事件处理程序中使用，以获取在事件中具有相同数据索引的所有元素。 |'
- en: '| `getDatasetAtEvent(e)` | Used in event handlers to obtain an array of elements
    that belong to a dataset. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `getDatasetAtEvent(e)` | 在事件处理程序中使用，以获取属于数据集的元素数组。 |'
- en: '| `getDatasetMeta(index)` | Returns the metadata for the dataset corresponding
    to the index. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `getDatasetMeta(index)` | 返回与索引对应的数据集的元数据。 |'
- en: Chart.js prototype methods
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Chart.js 原型方法
- en: Some of these methods are used to trigger the execution of life cycle callbacks
    in plugins. Many are already called automatically and may not be effective in
    all stages of an animation, since other stages may call methods that undo the
    desired effect.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些方法用于触发插件中生命周期回调的执行。许多方法已经被自动调用，并且可能不是在动画的所有阶段都有效，因为其他阶段可能会调用取消所需效果的方法。
- en: In this chapter, we saw an example with `generateLabels()`, and in the previous
    chapter, we used `update()`. Event methods are common in event handlers, which
    receive a JavaScript event.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了 `generateLabels()` 的一个示例，在前一章中，我们使用了 `update()`。事件方法在事件处理程序中很常见，这些处理程序接收一个
    JavaScript 事件。
- en: 'The `toBase64Image()` method generates a Base64 image string. Call it in `animation.onComplete`
    or in any `callback` function that is invoked only when the chart is fully drawn
    (otherwise it may generate a partially drawn or blank image). It returns a string
    that can be assigned to the `src` attribute of an HTML image for rendering on
    an HTML page:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`toBase64Image()` 方法生成一个 Base64 图片字符串。在 `animation.onComplete` 或在任何仅当图表完全绘制时调用的
    `callback` 函数中调用它（否则可能会生成部分绘制的或空白图片）。它返回一个字符串，可以分配给 HTML 图像的 `src` 属性，以便在 HTML
    页面上进行渲染：'
- en: '[PRE16]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can also use it to create an image for download with a blob function. Use
    the `b64-to-blob` function available from [www.npmjs.com/package/b64-to-blob](http://www.npmjs.com/package/b64-to-blob)
    or via CDN by adding the following line to your page:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用它通过 blob 函数创建用于下载的图片。使用从 [www.npmjs.com/package/b64-to-blob](http://www.npmjs.com/package/b64-to-blob)
    可用的 `b64-to-blob` 函数，或者通过在您的页面上添加以下行通过 CDN 使用：
- en: '[PRE17]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the following tag where you want the download link:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在您想要下载链接的位置添加以下标签：
- en: '[PRE18]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, place this code in the `animation.onComplete` function:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将此代码放置在 `animation.onComplete` 函数中：
- en: '[PRE19]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: After the chart loads, it will create a link that, when clicked, will download
    a PNG image of the chart. The full code is in `Extensions/ext-1-prototype.html`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在图表加载后，它将创建一个链接，点击该链接将下载图表的 PNG 图片。完整的代码位于 `Extensions/ext-1-prototype.html`。
- en: Creating plugins
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建插件
- en: Plugins are the most efficient way to extend Chart.js. A plugin can insert code
    before and after different phases of the rendering cycle of a chart. At each phase,
    it can access the chart object and read configurable options. This can be used
    to change practically any property or behavior of the chart.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是扩展 Chart.js 的最高效方式。插件可以在图表渲染周期的不同阶段之前和之后插入代码。在每个阶段，它可以访问图表对象并读取可配置的选项。这可以用来更改图表的几乎所有属性或行为。
- en: Plugins are designed to be reusable. During the previous chapters, we used several
    popular plugins to extend Chart.js in different ways. They are great to encapsulate
    complexity, but simple plugins can also be very useful.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 插件被设计成可重用的。在前几章中，我们使用了几个流行的插件以不同的方式扩展了 Chart.js。它们非常适合封装复杂性，但简单的插件也非常有用。
- en: In the last example, we created a download link for a PNG version of the chart.
    If you tried it, you may have noticed that the image has a transparent background.
    This is OK if your background is white, but if it isn’t, the chart may be hard
    to read. A naïve approach to fixing the problem would be painting the canvas white
    using CSS or fill commands. But, it won’t work because Chart.js redraws the canvas
    during its render cycle. You also need to deal with any animations, resizing,
    updates, and other events that might reset the background *after* you changed
    its color. This is a case for a plugin. With a plugin, you can insert code during
    the render cycle, draw the background after the canvas is initialized, and before
    the chart is drawn.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个例子中，我们为图表的 PNG 版本创建了一个下载链接。如果你尝试过，你可能已经注意到图像有一个透明的背景。如果你的背景是白色的，这没问题，但如果不是，图表可能难以阅读。解决这个问题的天真方法是用
    CSS 或填充命令将画布涂成白色。但是，这不会起作用，因为 Chart.js 在其渲染周期中会重新绘制画布。你还需要处理任何动画、调整大小、更新和其他可能在你更改颜色后重置背景的事件。这是一个插件用例。使用插件，你可以在渲染周期中插入代码，在初始化画布之后、绘制图表之前绘制背景。
- en: 'The render life cycle of Chart.js is illustrated as follows. When the chart
    is loaded for the first time, it performs the **init**, **update**, and **render**
    steps. Every time the page is resized, **update**and **render** are executed,
    and on **events**, the **render** step is performed:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Chart.js 的渲染生命周期如下所示。当图表首次加载时，它执行 **init**、**update** 和 **render** 步骤。每次页面调整大小，都会执行
    **update** 和 **render**，在 **events** 上，执行 **render** 步骤：
- en: '![](img/f6355f83-f594-4472-bf17-2002499a25ca.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6355f83-f594-4472-bf17-2002499a25ca.png)'
- en: Chart.js life cycle. Each phase can be intercepted by plugin callbacks.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Chart.js 生命周期。每个阶段都可以被插件回调拦截。
- en: 'Depending on your plugin, you may need to intercept one or more of these steps.
    The following table lists the callbacks that are available for plugins. Each `callback`
    function contains at least two parameters: a reference to the chart instance and
    an `options` object (configured under a plugin ID key, in `options.plugins`).
    Some callbacks may have additional parameters:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的插件，你可能需要拦截这些步骤中的一个或多个。以下表格列出了插件可用的回调函数。每个 `callback` 函数至少包含两个参数：对图表实例的引用和一个
    `options` 对象（在 `options.plugins` 下的插件 ID 键配置）。一些回调可能还有其他参数：
- en: '| **Method** | **Parameters** | **Description** |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **参数** | **描述** |'
- en: '| `beforeInit` `afterInit` | (*chart, options*) | Called before and after *new*
    `Chart()` is invoked |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `beforeInit` `afterInit` | (*chart, options*) | 在调用新的 `Chart()` 之前和之后调用 |'
- en: '| `beforeUpdate` `afterUpdate` | (*chart, options*) | Called before and after
    the *update* stage |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `beforeUpdate` `afterUpdate` | (*chart, options*) | 在 *update* 阶段之前和之后调用
    |'
- en: '| `beforeLayout` `afterLayout` | (*chart, options*) | Called before and after
    the *layout* stage |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `beforeLayout` `afterLayout` | (*chart, options*) | 在 *layout* 阶段之前和之后调用
    |'
- en: '| `beforeDatasetsUpdate` `afterDatasetsUpdate` | (*chart, options*) | Called
    before and after updating all datasets |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `beforeDatasetsUpdate` `afterDatasetsUpdate` | (*chart, options*) | 在更新所有数据集之前和之后调用
    |'
- en: '| `beforeDatasetUpdate` `afterDatasetUpdate` | (*chart, dataset, options*)
    | Called before and after updating each dataset |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `beforeDatasetUpdate` `afterDatasetUpdate` | (*chart, dataset, options*)
    | 在更新每个数据集之前和之后调用 |'
- en: '| `beforeRender` `afterRender` | (*chart, options*) | Called before and after
    the *render* stage |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `beforeRender` `afterRender` | (*chart, options*) | 在 *render* 阶段之前和之后调用
    |'
- en: '| `beforeDraw` `afterDraw` | (*chart, easing, options*) | Called before and
    after the *draw* stage |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `beforeDraw` `afterDraw` | (*chart, easing, options*) | 在 *draw* 阶段之前和之后调用
    |'
- en: '| `beforeDatasetsDraw` `afterDatasetsDraw` | (*chart, easing, options*) | Called
    before and after drawing all datasets |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `beforeDatasetsDraw` `afterDatasetsDraw` | (*chart, easing, options*) | 在绘制所有数据集之前和之后调用
    |'
- en: '| `beforeDatasetDraw` `afterDatasetDraw` | (*chart, dataset, options*) | Called
    before and after drawing each dataset |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `beforeDatasetDraw` `afterDatasetDraw` | (*chart, dataset, options*) | 在绘制每个数据集之前和之后调用
    |'
- en: '| `beforeEvent` `afterEvent` | (*chart, event, options*) | Called before and
    after *events* |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `beforeEvent` `afterEvent` | (*chart, event, options*) | 在 *events* 之前和之后调用
    |'
- en: '| `resize` | (*chart, dimensions, options*) | Called after resizing |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `resize` | (*chart, dimensions, options*) | 在调整大小后调用 |'
- en: '| `destroy` | (*chart, options*) | Called after `chart.destroy()` is called
    |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `destroy` | (*chart, options*) | 在调用 `chart.destroy()` 之后调用 |'
- en: Life cycle callbacks that can be used in plugins
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在插件中使用的生命周期回调
- en: To see a demonstration of these methods, run the `Extensions/ext-2-plugin-lifecycle.html`
    file. It logs every life cycle event while a chart with three plugins is rendered
    and destroyed.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这些方法的演示，运行`Extensions/ext-2-plugin-lifecycle.html`文件。它会在渲染和销毁具有三个插件的图表时记录每个生命周期事件。
- en: 'A plugin is a simple object. An `id` property is not necessary unless you plan
    to configure the plugin in the *options* object. You can include just the callback
    properties you need. The following code will create a simple configurable plugin
    that will draw a blue square in front of the chart, and a red one in front of
    the axes but behind the bars (`Extensions/ext-3-simple-plugin.html`):'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是一个简单的对象。除非您计划在`*options*`对象中配置插件，否则不需要`id`属性。您可以仅包含所需的回调属性。以下代码将创建一个简单的可配置插件，该插件将在图表前绘制一个蓝色方块，并在坐标轴前绘制一个红色方块，但位于条形图后面（`Extensions/ext-3-simple-plugin.html`）：
- en: '[PRE20]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This effect is shown here:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 此效果在此处显示：
- en: '![](img/d5f87689-359b-4489-9cec-4b5916306048.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5f87689-359b-4489-9cec-4b5916306048.png)'
- en: 'The blue and red squares were drawn in the chart using simple plugins. Code:
    *Extensions/ext-3-simple-plugin.html.*'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在图表中使用简单的插件绘制了蓝色和红色方块。代码：*Extensions/ext-3-simple-plugin.html.*
- en: 'If you are writing a plugin locally and have multiple charts, you can include
    a list of plugins to add to each chart using the *plugins* key in the `Chart()`
    constructor. It takes an array:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在本地编写插件并且有多个图表，您可以使用`Chart()`构造函数中的`*plugins*`键包含要添加到每个图表的插件列表。它接受一个数组：
- en: '[PRE21]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Plugins should be reusable whenever possible. Reusable plugins are normally
    created in separate `.js` files and made automatically available to all charts.
    In this case, they should be registered globally with the following:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 应尽可能使插件可重用。可重用插件通常在单独的`.js`文件中创建，并自动对所有图表可用。在这种情况下，它们应使用以下方式全局注册：
- en: '[PRE22]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Let’s create a plugin for the last example so that the image and the chart have
    an opaque background. Plugins should have configurable options. There are greater
    chances you will reuse this plugin if you can configure the background color for
    each chart. We could also add the possibility of drawing a background image. The
    plugin will be stored in a separate JavaScript file, `JavaScript/chartback.js`,
    which creates the plugin object and registers it globally. The `id` is necessary
    so that a chart can identify the plugin and configure its options.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为最后一个示例创建一个插件，以便图片和图表都有不透明的背景。插件应具有可配置的选项。如果您可以为每个图表配置背景颜色，那么重用此插件的可能性更大。我们还可以添加绘制背景图片的可能性。该插件将存储在单独的JavaScript文件`JavaScript/chartback.js`中，该文件创建插件对象并将其全局注册。`id`是必要的，这样图表就可以识别插件并配置其选项。
- en: 'Since the image needs to be redrawn every time the chart is resized or updated,
    the best place to draw it is in the `beforeDraw` callback. This code will also
    place the image behind the axes:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每次图表大小调整或更新时都需要重新绘制图片，因此最佳绘制位置是在`beforeDraw`回调中。此代码还将图片放置在坐标轴后面：
- en: '[PRE23]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To use the plugin, import it into the HTML file where the chart will be created:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此插件，将其导入到将创建图表的HTML文件中：
- en: '[PRE24]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This plugin''s configuration options can be set in the `options.plugins.chartback`
    key (`chartback` is the plugin''s ID). This code is in `Extensions/ext-4-chartback.html`:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件的可配置选项可以在`options.plugins.chartback`键（`chartback`是插件的ID）中设置。此代码位于`Extensions/ext-4-chartback.html`：
- en: '[PRE25]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The chart will be drawn with an image behind. If you don’t want the image,
    you can just set the `backgroundColor` and have a chart with an opaque background.
    The following screenshot shows a web page with the chart and the `.png` file loaded
    by an image viewer application:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图表将带有背景图片绘制。如果您不想显示图片，只需设置`backgroundColor`，就可以得到一个具有不透明背景的图表。以下截图显示了包含图表和由图片查看器应用程序加载的`.png`文件的网页：
- en: '![](img/8db602bd-6610-4ab1-b5fd-c7d955f100fd.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8db602bd-6610-4ab1-b5fd-c7d955f100fd.png)'
- en: 'Using a plugin that places a background image behind the chart. Code: *Extensions/ext-4-chartback.html.*'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个将背景图片放置在图表后面的插件。代码：*Extensions/ext-4-chartback.html.*
- en: Chart.js extensions
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chart.js 扩展
- en: Besides plugins, Chart.js also includes an advanced extensions API where you
    can extend charts and axes. With this API, you can derive from existing chart
    types or create entirely new chart types by implementing the provided interfaces.
    This topic is beyond the scope of this book, but you can try out the examples
    provided in the official documentation or perhaps use some of the many popular
    extensions already available. A selection is listed in the official documentation.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 除了插件，Chart.js 还包括一个高级扩展 API，你可以使用它来扩展图表和坐标轴。使用此 API，你可以通过实现提供的接口从现有的图表类型派生，或者创建全新的图表类型。这个主题超出了本书的范围，但你可以在官方文档中尝试提供的示例，或者可能使用一些已经广泛可用的许多流行扩展。官方文档中列出了其中的一些。
- en: Summary
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored several advanced Chart.js topics that you may rarely
    need, but give you more control over the look and feel of your charts, allowing
    a high degree of customization and the possibility of integrating it with standard
    web technologies and frameworks.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了几个你可能很少需要但能让你对图表的外观和感觉有更多控制的 Chart.js 高级主题，允许高度定制，并有可能将其与标准 Web 技术和框架集成。
- en: We learned how to configure tooltip and legend presentation and behavior using
    native Canvas options and custom HTML extensions, and how to create pages with
    multiple charts, mixed charts, and overlaying charts with other graphics using
    Canvas. We also wrote extensions for Chart.js using its programming API to generate
    a PNG version of a chart, and to create a simple plugin that adds a background
    image to a chart.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用原生 Canvas 选项和自定义 HTML 扩展来配置工具提示和图例的展示和行为，以及如何使用 Canvas 创建包含多个图表、混合图表和与其他图形叠加的图表页面。我们还使用
    Chart.js 的编程 API 编写了扩展，以生成图表的 PNG 版本，并创建了一个简单的插件，该插件可以向图表添加背景图片。
- en: References
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '**Books and websites**:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**书籍和网站**:'
- en: 'Chart.js official documentation and samples: [https://www.chartjs.org/docs/latest/](https://www.chartjs.org/docs/latest/)'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chart.js 官方文档和示例：[https://www.chartjs.org/docs/latest/](https://www.chartjs.org/docs/latest/)
- en: 'Palette.js Color schemes: [http://google.github.io/palette.js/](http://google.github.io/palette.js/)'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Palette.js 颜色方案：[http://google.github.io/palette.js/](http://google.github.io/palette.js/)
- en: 'Color brewer 2.0 by Cynthia Brewer: [http://colorbrewer2.org/](http://colorbrewer2.org/)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cynthia Brewer 的 Color brewer 2.0：[http://colorbrewer2.org/](http://colorbrewer2.org/)
- en: 'Patternomaly plugin: [https://github.com/ashiguruma/patternomaly](https://github.com/ashiguruma/patternomaly)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Patternomaly 插件：[https://github.com/ashiguruma/patternomaly](https://github.com/ashiguruma/patternomaly)
- en: 'Datalabels plugin: [https://github.com/chartjs/chartjs-plugin-datalabels](https://github.com/chartjs/chartjs-plugin-datalabels)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Datalabels 插件：[https://github.com/chartjs/chartjs-plugin-datalabels](https://github.com/chartjs/chartjs-plugin-datalabels)
- en: 'Outlabels plugin: [https://github.com/Neckster/chartjs-plugin-piechart-outlabels](https://github.com/Neckster/chartjs-plugin-piechart-outlabels)'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Outlabels 插件：[https://github.com/Neckster/chartjs-plugin-piechart-outlabels](https://github.com/Neckster/chartjs-plugin-piechart-outlabels)
- en: '**Data sources**:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据来源**:'
- en: 'Volumes of the World’s Oceans (based on ETOPO1): `Chapter03/Pages/BarChart1.html`
    and others. [https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html](https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html)'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 世界海洋的体积（基于 ETOPO1）：`Chapter03/Pages/BarChart1.html` 及其他。[https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html](https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html)
- en: 'Geographical database: `Chapter02/Data/cities1000.csv`. GeoNames geographical
    database: [www.geonames.org](http://www.geonames.org)'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理数据库：`Chapter02/Data/cities1000.csv`。GeoNames 地理数据库：[www.geonames.org](http://www.geonames.org)
- en: 'GeoJSON map of the world: `Chapter02/Data/world.geojson`. Simplified version
    adapted from [https://www.naturalearthdata.com](https://www.naturalearthdata.com)'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 世界 GeoJSON 地图：`Chapter02/Data/world.geojson`。简化版本改编自 [https://www.naturalearthdata.com](https://www.naturalearthdata.com)
