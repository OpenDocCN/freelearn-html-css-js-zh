["```js\nconst node = document.getElementById(\"mySpecialDiv\");\n```", "```js\nconst node = $(\"#mySpecialDiv\");\n```", "```js\n<html>\n  <head>\n    <title>Simple React Example</title>\n    <script src=\"img/react.development.js\"></script>\n    <script src=\"img/react-dom.development.js\"></script>\n    <script src=\"img/babel.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"text/babel\" src=\"img/react-greeting.js\"></script>\n    <script type=\"text/babel\" src=\"img/react.js\"></script>\n  </body>\n</html>\n```", "```js\nnpm init\n```", "```js\nnpm install --save-dev http-server\n```", "```js\nnpx http-server\n```", "```js\nhttp://localhost:8081/react.html\n```", "```js\nunpkg.com/<package>@<version>/<file>\n```", "```js\nconst RootComponent = () => {\n  const [ count, setCount ] = React.useState(0);\n  return (\n    <div>\n      <GreetingComponent textColor=\"red\" />\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n      <p>Count: {count}</p>\n    </div>\n  );\n}\nReactDOM.render(<RootComponent />, document.getElementById(\"root\"));\n```", "```js\nconst state = React.useState(0);\nconst count = state[0];\nconst setCount = state[1];\n```", "```js\nconst GreetingComponent = ({textColor}) => {\n  return (\n    <div>\n      <p style={{ color: textColor }}>I am a React app! There are many like it, but this one is mine!!</p>\n    </div>\n  );\n}\n```", "```js\n<html>\n  <head>\n    <title>Simple Vue Example</title>\n    <script src=\"img/vue.js\"></script>\n  </head>\n  <body>\n    <div id=\"app\">\n      <example-component></example-component>\n    </div>\n    <script src=\"img/vue.js\"></script>\n  </body>\n</html>\n```", "```js\nVue.component(\"example-component\", {\n  data: function () {\n    return {\n      message: \"I am a Vue app! There are many like it, but this one is mine!!\",\n      count: 0,\n      color: \"red\"\n    }\n  },\n  template: `\n    <div>\n      <p :style=\"{color}\">{{message}}</p>\n      <button v-on:click=\"count++\">Increment</button>\n      <p>Count: {{count}}</p>\n    </div>`\n});\nnew Vue({ el: \"#app\" });\n```", "```js\n<html>\n  <head>\n    <title>Simple Angular Example</title>\n    <script src=\"img/angular.min.js\"></script>\n    <script src=\"img/angular.js\"></script>\n  </head>\n  <body ng-app=\"app\">\n    <root-component></root-component>\n  </body>\n</html>\n```", "```js\nvar app = angular.module(\"app\", []);\napp.component(\"rootComponent\", {\n  template: '<p style=\"color:{{textColor}}\">{{message}}</p><button ng-click=\"count=count+1\">Increment</button><p>Count: {{count }}</p>',\n  controller: function($scope) {\n    $scope.message = \"I am an Angular app! There are many like it, but this one is mine!!\";\n    $scope.count = 0;\n    $scope.textColor = \"red\";\n  }\n});\n```", "```js\n<html>\n  <head>\n    <title>A simple Bootstrap example</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\">\n    <script src=\"img/bootstrap.bundle.min.js\"></script>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h2>My First Bootstrap Example</h2>\n      <button type=\"button\" class=\"btn btn-info\" data-bs-toggle=\"collapse\" data-bs-target=\"#text\">Show Text</button>\n      <div id=\"text\" class=\"collapse\">\n        It was the dawn of the third age of mankind, ten years after the Earth/Minbari war. The Babylon Project was a\n        dream given form. Its goal: to prevent another war by creating a place where humans and aliens could work out\n        their differences peacefully. It's a port of call, home away from home for diplomats, hustlers, entrepreneurs,\n        and wanderers. Humans and aliens wrapped in two million, five hundred thousand tons of spinning metal, all alone\n        in the night. It can be a dangerous place, but it's our last best hope for peace. This is the story of the last\n        of the Babylon stations. The year is 2258\\. The name of the place is Babylon 5.\n      </div>\n    </div>\n  </body>\n</html>\n```", "```js\n<html>\n  <head>\n    <title>A simple Tailwind example</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.0.1/dist/tailwind.min.css\" rel=\"stylesheet\">\n  </head>\n  <body class=\"bg-gray-100\">\n    <div class=\"container mx-auto p-4\">\n      <h2 class=\"text-2xl font-bold mb-4\">My First Tailwind Example</h2>\n      <button id=\"toggleButton\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n        onClick=\"document.getElementById('text').classList.toggle('hidden')\">\n        Show Text\n      </button>\n      <div id=\"text\" class=\"mt-4 hidden\">\n        It was the dawn of the third age of mankind, ten years after the Earth/Minbari war. The Babylon Project was a\n        dream given form. Its goal: to prevent another war by creating a place where humans and aliens could work out\n        their differences peacefully. It's a port of call, home away from home for diplomats, hustlers, entrepreneurs,\n        and wanderers. Humans and aliens wrapped in two million, five hundred thousand tons of spinning metal, all alone\n        in the night. It can be a dangerous place, but it's our last best hope for peace. This is the story of the last\n        of the Babylon stations. The year is 2258\\. The name of the place is Babylon 5.\n      </div>\n    </div>\n  </body>\n</html>\n```", "```js\nlet myVar = \"abc\";\nmyVar.toUpperCase();\nmyVar = 123;\nmyVar.toUpperCase();\n```", "```js\nString myVar = \"abc\";\nmyVar.toUpperCase();\nmyVar = 123;\nmyVar.toUpperCase();\n```", "```js\nif (running_in_chrome) {\n  myVar.toUpperCase();\n} else {\n  myOwnFunctionToDoUpperCase(myVar);\n}\n```", "```js\nnpm install --save-dev typescript\n```", "```js\nnpx tsc example.ts\n```", "```js\nnode example.js\n```", "```js\nclass Person {\n  name: string;\n  age: number;\n  constructor(inName: string, inAge: number) {\n    this.name = inName;\n    this.age = inAge;\n  }\n  speak(wisdom: string) {\n    console.log(`Hello! My name is ${this.name} and I am ${this.age} years old. A bit of wisdom for you: ${wisdom}.`);\n  }\n}\nlet p: Person = new Person(\"Xander\", 36);\np.speak(\"Man has not evolved an inch from the primordial slime that spawned him\");\n```", "```js\nvar Person = /** @class */ (function () {\n    function Person(inName, inAge) {\n        this.name = inName;\n        this.age = inAge;\n    }\n    Person.prototype.speak = function (wisdom) {\n        console.log(\"Hello! My name is \".concat(this.name, \" and I am \").concat(this.age, \" years old. A bit of wisdom for you: \").concat(wisdom, \".\"));\n    };\n    return Person;\n}());\nvar p = new Person(\"Xander\", 36);\np.speak(\"Man has not evolved an inch from the primordial slime that spawned him\");\n```", "```js\n(function() {\n  // Do something\n}());\n```", "```js\np = \"abc\";\n```"]