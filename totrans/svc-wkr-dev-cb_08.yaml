- en: Chapter 8. Experimenting with Web Push
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a simple push notification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing rich push notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the notification tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing push clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subscribing to push notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing push notification quotas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Push notifications have been popular with the features in mobile phone applications
    for the last few years. Regardless of whether you have an app opened, running
    in the foreground, or not running at all, push notifications will pop a message
    on your mobile phone. Similar to this, there is a new API available for the web
    called **Push API**, which is an experimental technology at the time of writing.
    In order to make Push API work, we need to have an active service worker running
    and must have subscribed to push notifications.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start off this chapter by looking at how to implement a simple push notification.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a simple push notification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fetching remote resources can be done in different ways. In this recipe, we
    are going to look at two standard ways of fetching a remote resource using a service
    worker with and without **cross-origin HTTP requests** (**CORS**).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to learn more about CORS, follow this link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the *Setting up service workers* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the *Setting up GitHub pages for
    SSL* recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service Worker Basics"),
    *Learning Service Worker Basics*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, `manifest.json`, `server.js`,
    `package.json`, and `style.css` files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/08/01/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/08/01/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `npm install` from the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://console.developers.google.com/project](https://console.developers.google.com/project)
    and create an API project. Obtain a sender ID (project number) and replace `gcm_sender_id`
    in the `manifest.json` file. Also replace the `<GCM API KEY>` placeholder in the
    `server.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `npm start` to kick off a server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a browser and go to `index.html`. Make sure that you don't open the browser
    in the incognito mode. Click on the **Send Notification!** button to send a notification.![How
    to do it...](img/B05381_08_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Developer Toolbar (*Cmd* + *Alt* + *I* or *F12*). Now refresh the page
    and look at the messages in the console. You will see that the fetch requests
    are logged out into the console.![How to do it...](img/B05381_08_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be prompted by your browser to allow notifications.![How to do it...](img/B05381_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Soon you will receive the notification. (It might also take some time depending
    on your configuration.)![How to do it...](img/B05381_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the beginning of the `index.js` file, we specify the base URL we use for
    the server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next, in order to get the user subscription to the push service, we use `pushManager`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If a subscription was found, it will be returned. Otherwise, the user is subscribed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will send subscription details to the server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will make the server send a notification to the client.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We will add a section to the `index.html` file for the input fields for the
    delay as well as the active time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We will use a `manifest.json` file for Google Chrome support.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the `service-worker.js` file, we will add an event listener for registering
    the push event.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Showing rich notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rich push notifications can send images, vibration patterns, and localized notifications.
    Let's look at how we can achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the *Setting up service workers* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the *Setting up GitHub pages for
    SSL* recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service Worker Basics"),
    *Learning Service Worker Basics*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, `manifest.json`, `server.js`,
    `package.json`, `amazon-logo.png`, and `style.css` files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/08/03/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/08/03/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can change the delay time as well as the active time by changing them in
    the input fields.![How to do it...](img/B05381_08_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may be prompted to allow push notifications.![How to do it...](img/B05381_08_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Soon you will receive the notification. (It might also take some time depending
    on your configuration.)![How to do it...](img/B05381_08_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Developer Toolbar (*Cmd* + *Alt* + *I* or *F12*). Now refresh the page
    and look at the messages in the console.![How to do it...](img/B05381_08_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `index.js` file, we will handle the click event when the user clicks
    on the button.
  prefs: []
  type: TYPE_NORMAL
- en: This will make the server send a notification to the client.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the `service-worker.js` file, we will add an event listener to register the
    push event.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Using the notification tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to replace old notifications, we can use the notification tag. This
    will help us show up-to-date information to the user.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to manage a queue of notifications and discard
    previous notifications or merge them into a single notification.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the *Setting up GitHub pages for
    SSL* recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service Worker Basics"),
    *Learning Service Worker Basics*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, `manifest.json`, `server.js`,
    `package.json`, and `style.css` files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/08/04/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/08/04/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_08_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Soon you will receive the notification. (It might also take some time depending
    on your configuration.)![How to do it...](img/B05381_08_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `service-worker.js` file, we will add an event listener to register the
    push event. Note the `tag` element passed into the `showNotification` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Implementing push clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Push clients enables us to focus on the tab that our app is running on when
    the user clicks on a notification message. We can even reopen our app if it was
    closed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*, *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, `manifest.json`, `server.js`,
    `package.json`, and `style.css` files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/08/05/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/08/05/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `npm install` from the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://console.developers.google.com/project](https://console.developers.google.com/project)
    and create an API project. Obtain a sender ID (project number) and replace `gcm_sender_id`
    in the `manifest.json` file. Also replace the `<GCM API KEY>` placeholder in the
    `server.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `npm start` to kick off a server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a browser and go to `index.html`. Make sure that you don't open the browser
    in the incognito mode. Insert some text in the **Payload** field and click on
    the **Send Notification!** button to send a notification.![How to do it...](img/B05381_08_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Developer Toolbar (*Cmd* + *Alt* + *I* or *F12*). Now refresh the page
    and look at the messages in the console. You will see that the fetch requests
    are logged out into the console.![How to do it...](img/B05381_08_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be prompted by your browser to allow notifications.![How to do it...](img/B05381_08_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Soon you will start to receive notifications. (It might also take some time
    depending on your configuration.)![How to do it...](img/B05381_08_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on this first notification will take you to the page your app is running.![How
    to do it...](img/B05381_08_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on the second notification will not do anything.![How to do it...](img/B05381_08_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on the third notification will open a new page with your app running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the beginning of the `index.js` file, we will specify the base URL we use
    for the server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next, in order to get the user subscription to the push service, we use `pushManager`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If a subscription was found, this will be returned. Otherwise the user will
    be subscribed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will send subscription details to the server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `send` button enables the server to send a notification to the client with
    the payload we specified in the form.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We will add a section to the `index.html` file for instructing the user about
    the notification messages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We use a `manifest.json` file for Google Chrome support.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the `service-worker.js` file, we will receive the payload and add an event
    listener for registering the push event.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Subscribing to push notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will teach you how to use push notifications with subscription management,
    enabling users to subscribe for features that your app will expose to keep in
    touch.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*, *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, `manifest.json`, `server.js`,
    `package.json`, and `style.css` files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/08/06/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/08/06/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `npm install` from the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://console.developers.google.com/project](https://console.developers.google.com/project)
    and create an API project. Obtain a sender ID (project number) and replace `gcm_sender_id`
    in the `manifest.json` file. Also replace the `<GCM API KEY>` placeholder in the
    `server.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `npm start` to kick off a server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a browser and go to `index.html`. Make sure that you don't open the browser
    in the incognito mode. Click on the **Subscribe** button. The button will change
    into **Unsubscribe**.![How to do it...](img/B05381_08_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Developer Toolbar (*Cmd* + *Alt* + *I* or *F12*). Now refresh the page
    and look at the messages in the console. You will see that the fetch requests
    are logged out into the console.![How to do it...](img/B05381_08_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You might be prompted by your browser to allow notifications.![How to do it...](img/B05381_08_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Soon you will receive notifications. (It might also take some time depending
    on your configuration.) Once you click on the **Unsubscribe** button, the notifications
    will no longer appear.![How to do it...](img/B05381_08_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the beginning of the `index.js` file, we will specify the base URL we use
    for the server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Next, in order to get the user subscription to the push service, we use `pushManager`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If a subscription was found, it will be returned. Otherwise the user is subscribed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will send subscription details to the server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The button enables the server to send a notification to the client with the
    payload we specified in the form.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In order to manage subscriptions we will add toggle logic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We will add a section to the `index.html` file for instructing the user about
    the notification messages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We will use a `manifest.json` file for Google Chrome support.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In the `service-worker.js` file, we will receive the payload and add an event
    listener for registering the push event.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the `server.js` file, we will send notifications to the push service.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: For the purpose of demonstration, we will simulate the event that has occurred
    by sending a notification in every `pushInterval` to the registered end point.
    So, you will see notifications coming in rapidly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Managing push notification quotas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to experiment with the quota management policies
    of different browsers. We will attempt to send as many notifications as possible
    to test against opened and closed tabs, clicking on notifications as well as ignoring
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the *Setting up service workers* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, `manifest.json`, `server.js`,
    `package.json`, and `style.css` files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/08/07/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/08/07/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `npm install` from the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://console.developers.google.com/project](https://console.developers.google.com/project)
    and create an API project. Obtain a sender ID (project number) and replace `gcm_sender_id`
    in the `manifest.json` file. Also, replace the `<GCM API KEY>` placeholder in
    the `server.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `npm start` to kick off a server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a browser and go to `index.html`. Make sure that you don't open the browser
    in the incognito mode. Click on either the **Visible notifications** or **Invisible
    notifications** button.![How to do it...](img/B05381_08_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Developer Toolbar (*Cmd* + *Alt* + *I* or *F12*). Now refresh the page
    and look at the messages in the console. You will see that the fetch requests
    are logged out into the console.![How to do it...](img/B05381_08_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may be prompted by your browser to allow notifications.![How to do it...](img/B05381_08_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the beginning of the `index.js` file, we will specify the base URL we use
    for the server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Next, in order to get the user subscription to the push service, we use `pushManager`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: If a subscription was found, that will be returned. Otherwise the user is subscribed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We will also retrieve the user's public key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will send subscription details to the server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We will ask the server to send the client a notification for testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The `clear` button clears the notification cache, which stores the number of
    notifications received.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Update the UI by reading the number of notifications received.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Also, update the number of notifications received periodically.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: We will add a section to the `index.html` file for instructing the user about
    the notification messages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: We will use a `manifest.json` file for Google Chrome support.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: In the `service-worker.js` file, we keep the service worker alive until the
    notifications cache is updated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: We will create a notifications cache to store the notifications received.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In the `server.js` file, we will send notifications to the push service.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
