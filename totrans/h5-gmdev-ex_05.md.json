["```js\n    <script src=\"img/untangle.levels.js\"></script>\n    <script src=\"img/untangle.game.js\"></script>\n    ```", "```js\n    <p>Puzzle <span id=\"level\">0</span>, Completeness: <span id=\"progress\">0</span>%</p>\n    ```", "```js\n    if (untangleGame === undefined) {\n      var untangleGame = {};\n    }\n    untangleGame.levels = [\n      {\n        circles : [\n              {x : 400, y : 156},\n              {x : 381, y : 241},\n              {x : 84, y : 233},\n              {x : 88, y : 73}],\n        relationship : [\n              {connectedPoints : [1,2]},\n              {connectedPoints : [0,3]},\n              {connectedPoints : [0,3]},\n              {connectedPoints : [1,2]}\n        ]\n      },\n      {\n        circles : [\n              {x : 401, y : 73},\n              {x : 400, y : 240},\n              {x : 88, y : 241},\n              {x : 84, y : 72}],\n        relationship : [\n              {connectedPoints : [1,2,3]},\n              {connectedPoints : [0,2,3]},\n              {connectedPoints : [0,1,3]},\n              {connectedPoints : [0,1,2]}\n        ]\n      },\n      {\n        circles : [\n              {x : 192, y : 155},\n              {x : 353, y : 109},\n              {x : 493, y : 156},\n              {x : 490, y : 236},\n              {x : 348, y : 276},\n              {x : 195, y : 228}],\n        relationship : [\n              {connectedPoints : [2,3,4]},\n              {connectedPoints : [3,5]},\n              {connectedPoints : [0,4,5]},\n              {connectedPoints : [0,1,5]},\n              {connectedPoints : [0,2]},\n              {connectedPoints : [1,2,3]}\n        ]\n      }\n    ];\n    ```", "```js\n    if (untangleGame === undefined) {\n      var untangleGame = {};\n    }\n    ```", "```js\n    untangleGame.currentLevel = 0;\n    untangleGame.levelProgress = 0;\n    ```", "```js\n    untangleGame.setupCurrentLevel = function() {\n      untangleGame.circles = [];\n      var level = untangleGame.levels[untangleGame.currentLevel];\n      for (var i=0; i<level.circles.length; i++) {\n        untangleGame.circles.push(new untangleGame.Circle(level.circles[i].x, level.circles[i].y, 10));\n      }\n\n      untangleGame.levelProgress = 0;\n\n      untangleGame.connectCircles();\n      untangleGame.updateLineIntersection();\n      untangleGame.checkLevelCompleteness();\n      untangleGame.updateLevelProgress();\n    }\n    ```", "```js\n    untangleGame.checkLevelCompleteness = function () {\n      if (untangleGame.levelProgress === 100) {\n        if (untangleGame.currentLevel+1 < untangleGame.levels.length) {\n          untangleGame.currentLevel+=1;\n        }\n        untangleGame.setupCurrentLevel();\n      }\n    }\n    ```", "```js\n    untangleGame.updateLevelProgress = function() {\n      // check the untangle progress of the level\n      var progress = 0;\n      for (var i=0; i<untangleGame.lines.length; i++) {\n        if (untangleGame.lines[i].thickness === untangleGame.thinLineThickness) {\n\n          progress+=1;\n        }\n      }\n      var progressPercentage = Math.floor(progress/untangleGame.lines.length*100);\n\n      untangleGame.levelProgress = progressPercentage;\n      $(\"#progress\").text(progressPercentage);\n\n      // display the current level\n      $(\"#level\").text(untangleGame.currentLevel);\n    }\n    ```", "```js\n    untangleGame.updateLevelProgress();\n    ```", "```js\n    untangleGame.checkLevelCompleteness();\n    ```", "```js\n    untangleGame.setupCurrentLevel();\n    ```", "```js\n    untangleGame.connectCircles = function() {\n      // set up all lines based on the circles relationship\n      var level = untangleGame.levels[untangleGame.currentLevel];\n      untangleGame.lines.length = 0;\n      for (var i in level.relationship) {\n        var connectedPoints = level.relationship[i].connectedPoints;\n        var startPoint = untangleGame.circles[i];\n        for (var j in connectedPoints) {\n          var endPoint = untangleGame.circles[connectedPoints[j]];\n          untangleGame.lines.push(new untangleGame.Line(startPoint, endPoint, untangleGame.thinLineThickness));\n        }\n      }\n    }\n    ```", "```js\n{\"connectedPoints\" : [1,2]}\n```", "```js\nvar progress = 0;\nfor (var i in untangleGame.lines) {\n  if (untangleGame.lines[i].thickness === untangleGame.thinLineThickness) {\n    progress+=1;\n  }\n}\nvar progressPercentage = Math.floor(progress/untangleGame.lines.length * 100);\n```", "```js\n<p>Puzzle <span id=\"level\">0</span>, Completeness: <span id=\"progress\">0</span>%</p>\n```", "```js\n$(\"#progress\").text(progressPercentage);\n```", "```js\n    untangleGame.drawLevelProgress = function() {\n      var ctx = untangleGame.ctx;\n      ctx.font = \"26px Arial\";\n      ctx.fillStyle = \"WHITE\";\n      ctx.textAlign = \"left\";\n      ctx.textBaseline = \"bottom\";\n      ctx.fillText(\"Puzzle \"+untangleGame.currentLevel+\", Completeness: \" + untangleGame.levelProgress + \"%\", 60, ctx.canvas.height-60);\n    }\n    ```", "```js\n    untangleGame.drawLevelProgress();\n    ```", "```js\nfillText(string, x, y);\n```", "```js\nctx.font = \"bold 20px Arial\";\n```", "```js\n    <link href='http://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>\n    ```", "```js\n    ctx.font = \"26px 'Rock Salt'\";\n    ```", "```js\n    untangleGame.loadImages = function() {\n      // load the background image\n      untangleGame.background = new Image();\n\n      untangleGame.background.onerror = function() {\n        console.log(\"Error loading the image.\");\n      }\n      untangleGame.background.src = \"images/board.png\";\n    };\n    ```", "```js\n    untangleGame.drawBackground = function() {\n      // draw the image background\n      untangleGame.ctx.drawImage(untangleGame.background, 0, 0);\n    };\n    ```", "```js\n    untangleGame.loadImages();\n    ```", "```js\n    untangleGame.drawBackground();\n    ```", "```js\n<img id=\"board\" src=\"img/board.png\">\n```", "```js\nvar img = document.getElementById('board');\ncontext.drawImage(img, x, y);\n```", "```js\nvar board = new Image();\nboard.onload = function() {\n  context.drawImage(board, x, y);\n}\nboard.src = \"images/board.png\";\n```", "```js\nuntangleGame.background.onerror = function() {\n  console.log(\"Error loading the image.\");\n}\n```", "```js\n    <section id=\"page\">\n      <header>\n        <h1>Untangle Puzzle Game in Canvas</h1>\n      </header>\n\n      <canvas id=\"game\" width=\"768\" height=\"400\">\n        This is an interactive game with circles and lines connecting them.\n      </canvas>\n      <p>Puzzle <span id=\"level\">0</span>, Completeness: <span id=\"progress\">0</span>%</p>\n\n      <footer>\n        <p>This is an example of Untangle Puzzle Game in Canvas.</p>\n      </footer>\n    </section>\n    ```", "```js\n    html, body {\n      background: url(../images/title_bg.png) 50% 0 no-repeat, \n          url(../images/bg_repeat.png) 50% 0 repeat-y #889ba7;\n      margin: 0;\n      color: #111;\n    }\n\n    #game{\n      position:relative;\n    }\n\n    #page {\n      width: 820px;\n      min-height: 800px;\n      margin: 0 auto;\n      padding: 0;\n      text-align: center;\n      text-shadow: 0 1px 5px rgba(60,60,60,.6);\n    }\n\n    header {\n      height: 88px;\n      padding-top: 36px;\n      margin-bottom: 50px;\n      font-family: \"Rock Salt\", Arial, sans-serif;\n      font-size: 14px16px;\n      text-shadow: 0 1px 0 rgba(200,200,200,.5);\n      color: #121;\n    }\n    ```", "```js\n    // load the guide sprite image\n    untangleGame.guide = new Image();\n    untangleGame.guide.onload = function() {\n      // setup timer to switch the display frame of the guide sprite\n      untangleGame.guideFrame = 0;\n      setInterval(untangleGame.guideNextFrame, 500);\n    }\n    untangleGame.guide.src = \"images/guide_sprite.png\";\n    ```", "```js\n    untangleGame.guideNextFrame = function() {\n      untangleGame.guideFrame++;\n      // there are only 6 frames (0-5) in the guide animation.\n      // we loop back the frame number to frame 0 after frame 5.\n      if (untangleGame.guideFrame > 5) {\n        untangleGame.guideFrame = 0;\n      }\n    }\n    ```", "```js\n    untangleGame.drawGuide = function() {\n      var ctx = untangleGame.ctx;\n      // draw the guide animation\n      if (untangleGame.currentLevel === 0) {\n        // the dimension of each frame is 80x130.\n        var nextFrameX = untangleGame.guideFrame * 80;\n        ctx.drawImage(untangleGame.guide, nextFrameX, 0, 80, 130, 325, 130, 80, 130);\n      }\n    };\n    ```", "```js\n    untangleGame.drawGuide();\n    ```", "```js\nvar nextFrameX = untangleGame.guideFrame * 80;\nctx.drawImage(untangleGame.guide, nextFrameX, 0, 80, 130, 325, 130, 80, 130);\n```", "```js\nuntangleGame.guideNextFrame = function() {\n  untangleGame.guideFrame += 1;\n  // there are only 6 frames (0-5) in the guide animation.\n  // we loop back the frame number to frame 0 after frame 5.\n  if (untangleGame.guideFrame > 5) {\n     untangleGame.guideFrame = 0;\n  }\n}\n```", "```js\n    <section id=\"layers\">\n      <canvas id=\"bg\" width=\"768\" height=\"440\">\n        This is an interactive game with circles and lines connecting them.\n      </canvas>\n      <canvas id=\"guide\" width=\"768\" height=\"440\"></canvas>\n      <canvas id=\"game\" width=\"768\" height=\"440\"></canvas>\n      <canvas id=\"ui\" width=\"768\" height=\"440\"></canvas>\n    </section>\n    ```", "```js\n    #layers {\n      position: relative;\n      margin: 0 auto;\n      width:768px;\n      height: 440px;\n    }\n    #layers canvas{\n      top: 0;\n      left: 0;\n      position: absolute;\n    }\n    #guide {\n      opacity: 0.7;\n      transition: opacity 0.5s ease-out;\n    }\n    #guide.fadeout {\n      opacity: 0; \n    }\n    #ui {\n      transition: opacity 0.3s ease-out;\n    }\n    #ui.dim {\n      opacity: 0.3;\n    }\n    ```", "```js\n    untangleGame.layers = [];\n    ```", "```js\n    var canvas = document.getElementById(\"game\");\n    untangleGame.ctx = canvas.getContext(\"2d\");\n    ```", "```js\n    // prepare layer 0 (bg)\n    var canvas_bg = document.getElementById(\"bg\");\n    untangleGame.layers[0] = canvas_bg.getContext(\"2d\");\n\n    // prepare layer 1 (guide)\n    var canvas_guide = document.getElementById(\"guide\");\n    untangleGame.layers[1] = canvas_guide.getContext(\"2d\");\n\n    // prepare layer 2 (game)\n    var canvas = document.getElementById(\"game\");    \n    var ctx = canvas.getContext(\"2d\");\n    untangleGame.layers[2] = ctx;\n\n    // prepare layer 3 (ui)\n    var canvas_ui = document.getElementById(\"ui\");\n    untangleGame.layers[3] = canvas_ui.getContext(\"2d\");\n    ```", "```js\n    untangleGame.clear = function(layerIndex) {\n      var ctx = untangleGame.layers[layerIndex];\n      ctx.clearRect(0,0,ctx.canvas.width,ctx.canvas.height);\n    };\n    ```", "```js\n    var ctx = untangleGame.layers[2];\n    ```", "```js\n    var ctx = untangleGame.layers[3];\n    ```", "```js\n    untangleGame.drawBackground = function() {\n      // draw the image background\n      var ctx = untangleGame.layers[0];\n      ctx.drawImage(untangleGame.background, 0, 0);\n    };\n    ```", "```js\n    untangleGame.background.onload = function() {\n      untangleGame.drawBackground();\n    }\n    ```", "```js\n    var ctx = untangleGame.layers[1];\n    ```", "```js\n    untangleGame.drawGuide = function() {\n      var ctx = untangleGame.layers[1];\n      // draw the guide animation\n      if (untangleGame.currentLevel < 2) {\n        // the dimension of each frame is 80x130.\n        var nextFrameX = untangleGame.guideFrame * 80;\n        ctx.drawImage(untangleGame.guide, nextFrameX, 0, 80, 130, 325,\n        130, 80, 130);\n      }\n\n      // fade out the guideline after level 0\n      if (untangleGame.currentLevel === 1)   {\n        $(\"#guide\").addClass('fadeout');\n      }\n    };\n    ```", "```js\n    untangleGame.clear(1);\n    untangleGame.drawGuide();\n    ```", "```js\n    untangleGame.dimUILayerIfNeeded = function() {\n      // get all circles,\n      // check if the ui overlap with the game objects\n      var isOverlappedWithCircle = false;\n      for(var i in untangleGame.circles) {\n        var point = untangleGame.circles[i];\n        if (point.y > 280) {\n          isOverlappedWithCircle = true;\n        }\n      }\n      if (isOverlappedWithCircle) {\n        $(\"#ui\").addClass('dim');\n      } else {\n        $(\"#ui\").removeClass('dim');\n      }\n    };\n    ```", "```js\n    function gameloop() {\n      // clear the canvas before re-drawing.\n      untangleGame.clear(2);\n      untangleGame.clear(3);\n\n      untangleGame.drawAllLines();\n      untangleGame.drawAllCircles();\n      untangleGame.drawLevelProgress();\n      untangleGame.dimUILayerIfNeeded();\n    }\n    ```", "```js\n    $(\"#layers\"). bind(\"mousedown touchstart\", function(e){\n      // existing code that handles mousedown and touchstart.\n    });\n    $(\"#layers\"). bind(\"mousemove touchmove\", function(e) {\n      // existing code that handles mousemove and touchmove.\n    });\n    $(\"#layers\"). bind(\"mouseup touchend\", function(e){\n      // existing code that handles mouseup and touchend.\n    });\n    ```", "```js\nif (untangleGame.currentLevel === 1) {\n  $(\"#guide\").addClass('fadeout');\n}\n```"]