- en: Chapter 4. Performing Animation and Transforming Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have learned how to work with events and callbacks in the previous
    chapter, it's time to move ahead and work with the Animation and Transforming
    function. This chapter is supposed to be more interactive than the previous chapter,
    because we are going to talk about and use the Animation and Transforming function
    of CreateJS. In this chapter, we use *TweenJS* and *EaselJS* to create basic animation
    in browsers. You can then use these functions to create more innovative animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating animations with CreateJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding TweenJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the TweenJS API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating simple animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transforming shapes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Sprite Sheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing animations using Sprite Sheet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating animations with CreateJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may already know, creating animations in web browsers during web development
    is a difficult job because you have to write code that has to work in all browsers;
    this is called *browser compatibility*. The good news is that CreateJS provides
    modules to write and develop animations in web browsers without thinking about
    browser compatibility. CreateJS modules can do this job very well and all you
    need to do is work with *CreateJS API*.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding TweenJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TweenJS is one of the modules of CreateJS that helps you develop animations
    in web browsers. We will now introduce TweenJS.
  prefs: []
  type: TYPE_NORMAL
- en: The TweenJS JavaScript library provides a simple but powerful tweening interface.
    It supports tweening of both numeric object properties and CSS style properties,
    and allows you to chain tweens and actions together to create complex sequences.—TweenJS
    API Documentation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For more information on TweenJS, please refer to the official documentation
    at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.createjs.com/Docs/TweenJS/modules/TweenJS.html](http://www.createjs.com/Docs/TweenJS/modules/TweenJS.html)'
  prefs: []
  type: TYPE_NORMAL
- en: What is tweening?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us understand precisely what tweening means:'
  prefs: []
  type: TYPE_NORMAL
- en: Inbetweening or tweening is the process of generating intermediate frames between
    two images to give the appearance that the first image evolves smoothly into the
    second image.—Wikipedia
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For more information on tweening, visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Tweening](http://en.wikipedia.org/wiki/Tweening)'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is tweening?](img/0260OS_4_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The same as other CreateJS subsets, TweenJS contains many functions and methods;
    however, we are going to work with and create examples for specific basic methods,
    based on which you can read the rest of the documentation of TweenJS to create
    more complex animations.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding API and methods of TweenJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to create animations in TweenJS, you don''t have to work with a lot
    of methods. There are a few functions that help you to create animations. Following
    are all the methods with a brief description:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get`: It returns a new tween instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to`: It queues a tween from the current values to the target properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set`: It queues an action to set the specified properties on the specified
    target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wait`: It queues a wait (essentially an empty tween).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`call`: It queues an action to call the specified function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`play`: It queues an action to play (un-pause) the specified tween.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pause`: It queues an action to pause the specified tween.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is an example of using the Tweening API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous example will create a tween, which:'
  prefs: []
  type: TYPE_NORMAL
- en: Tweens the target to an `x` value of `300` with duration `400`ms and sets its
    `label` to `hello!`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Waits `500`ms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tweens the target's `alpha` property to `0` with duration `1`s and sets the
    `visible` property to `false`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, calls the `onCom``plete` function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it's time to create our simplest animation with TweenJS. It is a simple
    but powerful API, which gives you the ability to develop animations with *method
    chaining*.
  prefs: []
  type: TYPE_NORMAL
- en: Scenario
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The animation has a red ball that comes from the top of the `Canvas` element
    and then drops down.
  prefs: []
  type: TYPE_NORMAL
- en: '![Scenario](img/0260OS_4_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, you can see all the steps of our simple animation;
    consequently, you can predict what we need to do to prepare this animation. In
    our animation, we are going to use two methods: `get` and `to`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the complete source code for our animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the second and third line of the JavaScript code snippet, two variables are
    declared, namely; the `canvas` and `stage` objects. In the next line, the `ball`
    variable is declared, which contains our `shape` object. In the following line,
    we drew a red circle with the `drawCircle` method (we have discussed about the
    `drawCircle` method in the previous chapter). Then, in order to set the coordinates
    of our shape object outside the viewport, we set the `x` axis to `-50` px.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we created a `tween` variable, which holds the `Tween` object; then,
    using the TweenJS method chaining, the `to` method is called with duration of
    `1500` ms and the `y` property set to `300` px. The third parameter of the `to`
    method represents the `ease` function of `tween`, which we set to `bounceOut`
    in this example.
  prefs: []
  type: TYPE_NORMAL
- en: In the following lines, the `ball` variable is added to `Stage` and the `tick`
    event is added to the `Ticker` class to keep `Stage` updated while the animation
    is playing. You can also find the `Canvas` element in line 30, using which all
    animations and shapes are rendered in this element.
  prefs: []
  type: TYPE_NORMAL
- en: Transforming shapes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CreateJS provides some functions to transform shapes easily on `Stage`. Each
    `DisplayObject` has a `setTransform` method that allows the transforming of a
    `DisplayObject` (like a circle).
  prefs: []
  type: TYPE_NORMAL
- en: The following shortcut method is used to quickly set the transform properties
    on the display object. All its parameters are optional. Omitted parameters will
    have the default value set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This was taken from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.createjs.com/Docs/EaselJS/classes/Shape.html#method_setTransform](http://www.createjs.com/Docs/EaselJS/classes/Shape.html#method_setTransform)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, you can change all the properties via `DisplayObject` directly
    (like `scaleY` and `scaleX`) as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: An example of Transforming function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As an instance of using the shape transforming feature with CreateJS, we are
    going to extend our previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we have a red circle, similar to the previous example of tweening.
    We set the coordinates of the circle to `200` and `300` and added the circle to
    the `stage` object. In the next line, we have a `tick` function that transforms
    the shape of the circle. Inside this function, we have an `angle` variable that
    increases with each call. We then set the `ballX` and `ballY` coordinates to the
    cosine of the `angle` variable. The transforming done is similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An example of Transforming function](img/0260OS_4_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a basic example of transforming shapes in CreateJS, but obviously you
    can develop and create better transforming by playing with a shape's properties
    and values.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Sprite Sheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss about the EaselJS feature to make an animation
    using a series of images. This feature is called **Sprite Sheet**. A Sprite Sheet
    combines a series of images or frames of an animation to produce 2D or 3D animation.
    For instance, if you want to animate a hero that is walking, we can combine all
    frames of the walking character into a single image, and then make the animation
    using the Sprite Sheet feature of EaselJS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a series of images (animation frames) that are combined into
    a single image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding Sprite Sheet](img/0260OS_4_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, you will learn how to use the Sprite Sheet feature to develop
    animations.
  prefs: []
  type: TYPE_NORMAL
- en: Developing animations using Sprite Sheet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start by understanding the `SpriteSheet` class. This class is used to
    initialize the Sprite Sheet feature and encapsulate its properties and configurations.
    After creating the `SpriteSheet` class, we can use its methods to control the
    animation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic configuration of this class has three mandatory properties:'
  prefs: []
  type: TYPE_NORMAL
- en: The image or images to use for animation frames.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The position of each image, which can be defined using a single value for all
    frames or even with an individual configuration for each frame.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The representation of the animation, which can be defined by a start and end
    frame or with individual values for each frame.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a code snippet defines the configuration for the `SpriteSheet`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a sample configuration for the `SpriteSheet` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This is explained more in detail at: [http://www.createjs.com/Docs/EaselJS/classes/SpriteSheet.html](http://www.createjs.com/Docs/EaselJS/classes/SpriteSheet.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will develop a simple walking animation using Sprite Sheets. The following
    is our sprite image that will be used for the animation frames:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing animations using Sprite Sheet](img/0260OS_4_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sprite image
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to configure our `SpriteSheet` class. The following is the
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We have a total of 16 frames for our animation; hence, the *run* frameset that
    defines the frames of the animation, starts from `0` and extends till `15`. We
    defined the path of the sprite image. We then defined the configuration of the
    frames with height `70`, width `51` (this is the width of each individual image),
    and a count of 16 that refers to the number of frames.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the complete source code for the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As seen in previous examples, first we defined the stage using the `Stage` class.
    After that, the `SpriteSheet` class was initiated using the configuration, and
    then we passed the object to the `Sprite` class to start the animation. The second
    parameter for the `Sprite` class defines the starting frameset for animation.
    Finally, we added the `Sprite` object to the stage with the `addChild` method.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to add the `tick` event to the `Ticker` class and pass the `Stage`
    object to it to start the animation; otherwise, you will see a blank screen. Furthermore,
    using the `Ticker` class and `setFPS` method, we can control the ratio of rendering
    the animation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows a preview of our Sprite Sheet example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing animations using Sprite Sheet](img/0260OS_4_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to develop and create animations with TweenJS
    and EaselJS. We discussed in detail about working with chaining methods in TweenJS,
    callback functions in animations, and also how to change a shape's properties
    with TweenJS functions. We then learned how to transform with EaselJS in order
    to change a shape's properties like rotation or scale. We then went on to learn
    about utilizing the Sprite Sheet feature to create animated characters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss about caching techniques in CreateJS and
    how to improve the performance of applications using cache.
  prefs: []
  type: TYPE_NORMAL
