- en: Chapter 4. Performing Animation and Transforming Function
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：执行动画和变换功能
- en: Now that you have learned how to work with events and callbacks in the previous
    chapter, it's time to move ahead and work with the Animation and Transforming
    function. This chapter is supposed to be more interactive than the previous chapter,
    because we are going to talk about and use the Animation and Transforming function
    of CreateJS. In this chapter, we use *TweenJS* and *EaselJS* to create basic animation
    in browsers. You can then use these functions to create more innovative animations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经在前一章学习了如何处理事件和回调，现在是时候继续前进并处理动画和变换功能了。本章预计比前一章更具互动性，因为我们将要讨论并使用 CreateJS
    的动画和变换功能。在本章中，我们使用 *TweenJS* 和 *EaselJS* 在浏览器中创建基本动画。然后您可以使用这些功能创建更创新的动画。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating animations with CreateJS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CreateJS 创建动画
- en: Understanding TweenJS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 TweenJS
- en: Understanding the TweenJS API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 TweenJS API
- en: Creating simple animations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建简单动画
- en: Transforming shapes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变换形状
- en: Understanding Sprite Sheets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解精灵表单
- en: Developing animations using Sprite Sheet
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用精灵表单开发动画
- en: Creating animations with CreateJS
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CreateJS 创建动画
- en: As you may already know, creating animations in web browsers during web development
    is a difficult job because you have to write code that has to work in all browsers;
    this is called *browser compatibility*. The good news is that CreateJS provides
    modules to write and develop animations in web browsers without thinking about
    browser compatibility. CreateJS modules can do this job very well and all you
    need to do is work with *CreateJS API*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经知道，在网页开发过程中在网页浏览器中创建动画是一项困难的工作，因为您必须编写必须在所有浏览器中工作的代码；这被称为 *浏览器兼容性*。好消息是
    CreateJS 提供了模块来在网页浏览器中编写和开发动画，而无需考虑浏览器兼容性。CreateJS 模块可以很好地完成这项工作，您需要做的就是与 *CreateJS
    API* 一起工作。
- en: Understanding TweenJS
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 TweenJS
- en: TweenJS is one of the modules of CreateJS that helps you develop animations
    in web browsers. We will now introduce TweenJS.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: TweenJS 是 CreateJS 的模块之一，它帮助您在网页浏览器中开发动画。我们现在将介绍 TweenJS。
- en: The TweenJS JavaScript library provides a simple but powerful tweening interface.
    It supports tweening of both numeric object properties and CSS style properties,
    and allows you to chain tweens and actions together to create complex sequences.—TweenJS
    API Documentation
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: TweenJS JavaScript 库提供了一个简单但强大的缓动接口。它支持数字对象属性和 CSS 样式属性的缓动，并允许您将缓动和动作链接在一起以创建复杂的序列。——TweenJS
    API 文档
- en: 'For more information on TweenJS, please refer to the official documentation
    at:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多关于 TweenJS 的信息，请参阅官方文档：
- en: '[http://www.createjs.com/Docs/TweenJS/modules/TweenJS.html](http://www.createjs.com/Docs/TweenJS/modules/TweenJS.html)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.createjs.com/Docs/TweenJS/modules/TweenJS.html](http://www.createjs.com/Docs/TweenJS/modules/TweenJS.html)'
- en: What is tweening?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是缓动？
- en: 'Let us understand precisely what tweening means:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们精确地了解什么是缓动：
- en: Inbetweening or tweening is the process of generating intermediate frames between
    two images to give the appearance that the first image evolves smoothly into the
    second image.—Wikipedia
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 中间帧或缓动是生成两个图像之间中间帧的过程，以使第一个图像看起来平滑地演变到第二个图像。——维基百科
- en: 'For more information on tweening, visit:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多关于缓动的信息，请访问：
- en: '[http://en.wikipedia.org/wiki/Tweening](http://en.wikipedia.org/wiki/Tweening)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Tweening](http://en.wikipedia.org/wiki/Tweening)'
- en: '![What is tweening?](img/0260OS_4_1.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![什么是缓动？](img/0260OS_4_1.jpg)'
- en: The same as other CreateJS subsets, TweenJS contains many functions and methods;
    however, we are going to work with and create examples for specific basic methods,
    based on which you can read the rest of the documentation of TweenJS to create
    more complex animations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他 CreateJS 子集一样，TweenJS 包含许多函数和方法；然而，我们将使用并创建特定基本方法的示例，基于这些示例，您可以阅读 TweenJS
    的其余文档以创建更复杂的动画。
- en: Understanding API and methods of TweenJS
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 TweenJS 的 API 和方法
- en: 'In order to create animations in TweenJS, you don''t have to work with a lot
    of methods. There are a few functions that help you to create animations. Following
    are all the methods with a brief description:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 TweenJS 中创建动画，您不需要处理很多方法。有一些函数可以帮助您创建动画。以下都是带有简要描述的方法：
- en: '`get`: It returns a new tween instance.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get`: 它返回一个新的缓动实例。'
- en: '`to`: It queues a tween from the current values to the target properties.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to`: 它从当前值到目标属性排队一个缓动。'
- en: '`set`: It queues an action to set the specified properties on the specified
    target.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set`：它排队一个动作来设置指定目标上的指定属性。'
- en: '`wait`: It queues a wait (essentially an empty tween).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wait`：它排队等待（本质上是一个空的补间动画）。'
- en: '`call`: It queues an action to call the specified function.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`call`：它排队一个动作来调用指定的函数。'
- en: '`play`: It queues an action to play (un-pause) the specified tween.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`play`：它排队一个动作来播放（暂停）指定的补间。'
- en: '`pause`: It queues an action to pause the specified tween.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pause`：它排队一个动作来暂停指定的补间。'
- en: 'The following is an example of using the Tweening API:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用补间 API 的示例：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The previous example will create a tween, which:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例将创建一个补间，它：
- en: Tweens the target to an `x` value of `300` with duration `400`ms and sets its
    `label` to `hello!`.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将目标补间到 `x` 值为 `300`，持续时间为 `400` 毫秒，并将其 `label` 设置为 `hello!`。
- en: Waits `500`ms.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待 `500` 毫秒。
- en: Tweens the target's `alpha` property to `0` with duration `1`s and sets the
    `visible` property to `false`.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将目标的 `alpha` 属性补间到 `0`，持续时间为 `1` 秒，并将 `visible` 属性设置为 `false`。
- en: Finally, calls the `onCom``plete` function.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，调用 `onCom` 完成函数。
- en: Creating a simple animation
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建简单动画
- en: Now, it's time to create our simplest animation with TweenJS. It is a simple
    but powerful API, which gives you the ability to develop animations with *method
    chaining*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候使用 TweenJS 创建我们最简单的动画了。它是一个简单但功能强大的 API，它赋予你使用 *方法链式调用* 开发动画的能力。
- en: Scenario
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景
- en: The animation has a red ball that comes from the top of the `Canvas` element
    and then drops down.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 动画有一个从 `Canvas` 元素顶部开始并落下的红色球。
- en: '![Scenario](img/0260OS_4_2.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![场景](img/0260OS_4_2.jpg)'
- en: 'In the preceding screenshot, you can see all the steps of our simple animation;
    consequently, you can predict what we need to do to prepare this animation. In
    our animation, we are going to use two methods: `get` and `to`.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，你可以看到我们简单动画的所有步骤；因此，你可以预测我们需要做什么来准备这个动画。在我们的动画中，我们将使用两种方法：`get` 和
    `to`。
- en: 'The following is the complete source code for our animation:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们动画的完整源代码：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the second and third line of the JavaScript code snippet, two variables are
    declared, namely; the `canvas` and `stage` objects. In the next line, the `ball`
    variable is declared, which contains our `shape` object. In the following line,
    we drew a red circle with the `drawCircle` method (we have discussed about the
    `drawCircle` method in the previous chapter). Then, in order to set the coordinates
    of our shape object outside the viewport, we set the `x` axis to `-50` px.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 代码片段的第二行和第三行中，声明了两个变量，即 `canvas` 和 `stage` 对象。在下一行中，声明了 `ball`
    变量，它包含我们的 `shape` 对象。在接下来的行中，我们使用 `drawCircle` 方法（我们已在上一章讨论过 `drawCircle` 方法）绘制了一个红色圆圈。然后，为了将我们的形状对象坐标设置在视口外，我们将
    `x` 轴设置为 `-50` 像素。
- en: After this, we created a `tween` variable, which holds the `Tween` object; then,
    using the TweenJS method chaining, the `to` method is called with duration of
    `1500` ms and the `y` property set to `300` px. The third parameter of the `to`
    method represents the `ease` function of `tween`, which we set to `bounceOut`
    in this example.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们创建了一个 `tween` 变量，它包含 `Tween` 对象；然后，使用 TweenJS 方法链，调用 `to` 方法，持续时间为 `1500`
    毫秒，并将 `y` 属性设置为 `300` 像素。`to` 方法的第三个参数代表 `tween` 的 `ease` 函数，在这个例子中我们将其设置为 `bounceOut`。
- en: In the following lines, the `ball` variable is added to `Stage` and the `tick`
    event is added to the `Ticker` class to keep `Stage` updated while the animation
    is playing. You can also find the `Canvas` element in line 30, using which all
    animations and shapes are rendered in this element.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下行中，将 `ball` 变量添加到 `Stage`，并将 `tick` 事件添加到 `Ticker` 类，以在动画播放时保持 `Stage` 更新。你还可以在
    30 行找到 `Canvas` 元素，使用它渲染所有动画和形状。
- en: Transforming shapes
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变换形状
- en: CreateJS provides some functions to transform shapes easily on `Stage`. Each
    `DisplayObject` has a `setTransform` method that allows the transforming of a
    `DisplayObject` (like a circle).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: CreateJS 提供了一些函数，可以在 `Stage` 上轻松变换形状。每个 `DisplayObject` 都有一个 `setTransform`
    方法，允许变换 `DisplayObject`（如圆形）。
- en: The following shortcut method is used to quickly set the transform properties
    on the display object. All its parameters are optional. Omitted parameters will
    have the default value set.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个快捷方法，用于快速设置显示对象的变换属性。所有参数都是可选的。省略的参数将使用默认值设置。
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This was taken from:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从：
- en: '[http://www.createjs.com/Docs/EaselJS/classes/Shape.html#method_setTransform](http://www.createjs.com/Docs/EaselJS/classes/Shape.html#method_setTransform)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.createjs.com/Docs/EaselJS/classes/Shape.html#method_setTransform](http://www.createjs.com/Docs/EaselJS/classes/Shape.html#method_setTransform)'
- en: 'Furthermore, you can change all the properties via `DisplayObject` directly
    (like `scaleY` and `scaleX`) as shown in the following example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以通过`DisplayObject`直接更改所有属性（如`scaleY`和`scaleX`），如下例所示：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: An example of Transforming function
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Transforming函数的示例
- en: 'As an instance of using the shape transforming feature with CreateJS, we are
    going to extend our previous example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 作为使用CreateJS的形状转换功能的实例，我们将扩展我们之前的示例：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this example, we have a red circle, similar to the previous example of tweening.
    We set the coordinates of the circle to `200` and `300` and added the circle to
    the `stage` object. In the next line, we have a `tick` function that transforms
    the shape of the circle. Inside this function, we have an `angle` variable that
    increases with each call. We then set the `ballX` and `ballY` coordinates to the
    cosine of the `angle` variable. The transforming done is similar to the following
    screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有一个红色圆圈，类似于之前的缓动示例。我们将圆圈的坐标设置为`200`和`300`，并将其添加到`stage`对象中。在下一行，我们有一个`tick`函数，它转换圆圈的形状。在这个函数内部，我们有一个`angle`变量，它在每次调用时增加。然后我们将`ballX`和`ballY`坐标设置为`angle`变量的余弦值。所进行的转换类似于以下截图：
- en: '![An example of Transforming function](img/0260OS_4_3.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![Transforming函数的示例](img/0260OS_4_3.jpg)'
- en: This is a basic example of transforming shapes in CreateJS, but obviously you
    can develop and create better transforming by playing with a shape's properties
    and values.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在CreateJS中转换形状的基本示例，但显然你可以通过调整形状的属性和值来开发更好的转换。
- en: Understanding Sprite Sheet
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解精灵图集
- en: In this section, we will discuss about the EaselJS feature to make an animation
    using a series of images. This feature is called **Sprite Sheet**. A Sprite Sheet
    combines a series of images or frames of an animation to produce 2D or 3D animation.
    For instance, if you want to animate a hero that is walking, we can combine all
    frames of the walking character into a single image, and then make the animation
    using the Sprite Sheet feature of EaselJS.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论使用一系列图像制作动画的EaselJS功能。这个功能称为**精灵图集**。精灵图集将一系列图像或动画帧组合成一个2D或3D动画。例如，如果你想为一个正在行走的英雄制作动画，我们可以将行走角色的所有帧组合成单个图像，然后使用EaselJS的精灵图集功能制作动画。
- en: 'The following is a series of images (animation frames) that are combined into
    a single image:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一系列图像（动画帧）的组合成单个图像：
- en: '![Understanding Sprite Sheet](img/0260OS_4_4.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![理解精灵图集](img/0260OS_4_4.jpg)'
- en: In the next section, you will learn how to use the Sprite Sheet feature to develop
    animations.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习如何使用精灵图集功能开发动画。
- en: Developing animations using Sprite Sheet
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用精灵图集开发动画
- en: Let's start by understanding the `SpriteSheet` class. This class is used to
    initialize the Sprite Sheet feature and encapsulate its properties and configurations.
    After creating the `SpriteSheet` class, we can use its methods to control the
    animation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先了解`SpriteSheet`类。这个类用于初始化精灵图集功能并封装其属性和配置。创建`SpriteSheet`类后，我们可以使用其方法来控制动画。
- en: 'The basic configuration of this class has three mandatory properties:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类的基本配置有三个强制属性：
- en: The image or images to use for animation frames.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于动画帧的图像或图像。
- en: The position of each image, which can be defined using a single value for all
    frames or even with an individual configuration for each frame.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个图像的位置，可以使用单个值定义所有帧，甚至可以为每个帧定义单独的配置。
- en: The representation of the animation, which can be defined by a start and end
    frame or with individual values for each frame.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画的表现，可以通过起始帧和结束帧定义，或者为每个帧定义单独的值。
- en: 'The following is a code snippet defines the configuration for the `SpriteSheet`
    class:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个定义`SpriteSheet`类配置的代码片段：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following is a sample configuration for the `SpriteSheet` class:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为`SpriteSheet`类提供的示例配置：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is explained more in detail at: [http://www.createjs.com/Docs/EaselJS/classes/SpriteSheet.html](http://www.createjs.com/Docs/EaselJS/classes/SpriteSheet.html)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这在[http://www.createjs.com/Docs/EaselJS/classes/SpriteSheet.html](http://www.createjs.com/Docs/EaselJS/classes/SpriteSheet.html)中有更详细的解释。
- en: 'Now, we will develop a simple walking animation using Sprite Sheets. The following
    is our sprite image that will be used for the animation frames:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用精灵图集开发一个简单的行走动画。以下是我们将用于动画帧的精灵图像：
- en: '![Developing animations using Sprite Sheet](img/0260OS_4_5.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![使用精灵图集开发动画](img/0260OS_4_5.jpg)'
- en: Sprite image
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 精灵图像
- en: 'The next step is to configure our `SpriteSheet` class. The following is the
    configuration:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是配置我们的 `SpriteSheet` 类。以下是其配置：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have a total of 16 frames for our animation; hence, the *run* frameset that
    defines the frames of the animation, starts from `0` and extends till `15`. We
    defined the path of the sprite image. We then defined the configuration of the
    frames with height `70`, width `51` (this is the width of each individual image),
    and a count of 16 that refers to the number of frames.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们动画总共有 16 帧；因此，定义动画帧的 *run* 帧集从 `0` 开始，扩展到 `15`。我们定义了精灵图像的路径。然后我们定义了帧的配置，高度为
    `70`，宽度为 `51`（这是每个单独图像的宽度），以及一个表示帧数的 `16`。
- en: 'The following is the complete source code for the animation:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为动画提供的完整源代码：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As seen in previous examples, first we defined the stage using the `Stage` class.
    After that, the `SpriteSheet` class was initiated using the configuration, and
    then we passed the object to the `Sprite` class to start the animation. The second
    parameter for the `Sprite` class defines the starting frameset for animation.
    Finally, we added the `Sprite` object to the stage with the `addChild` method.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如前文示例所示，首先我们使用 `Stage` 类定义了舞台。之后，使用配置信息初始化了 `SpriteSheet` 类，然后将对象传递给 `Sprite`
    类以开始动画。`Sprite` 类的第二个参数定义了动画的起始帧集。最后，我们使用 `addChild` 方法将 `Sprite` 对象添加到舞台中。
- en: It's important to add the `tick` event to the `Ticker` class and pass the `Stage`
    object to it to start the animation; otherwise, you will see a blank screen. Furthermore,
    using the `Ticker` class and `setFPS` method, we can control the ratio of rendering
    the animation.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 向 `Ticker` 类添加 `tick` 事件并将 `Stage` 对象传递给它以启动动画是很重要的；否则，你将看到一个空白的屏幕。此外，使用 `Ticker`
    类和 `setFPS` 方法，我们可以控制动画渲染的比率。
- en: 'The following image shows a preview of our Sprite Sheet example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像展示了我们的精灵图集示例的预览：
- en: '![Developing animations using Sprite Sheet](img/0260OS_4_6.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![使用精灵图集开发动画](img/0260OS_4_6.jpg)'
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to develop and create animations with TweenJS
    and EaselJS. We discussed in detail about working with chaining methods in TweenJS,
    callback functions in animations, and also how to change a shape's properties
    with TweenJS functions. We then learned how to transform with EaselJS in order
    to change a shape's properties like rotation or scale. We then went on to learn
    about utilizing the Sprite Sheet feature to create animated characters.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 TweenJS 和 EaselJS 开发和创建动画。我们详细讨论了在 TweenJS 中使用链式方法、动画中的回调函数，以及如何使用
    TweenJS 函数更改形状的属性。然后我们学习了如何使用 EaselJS 进行变换，以更改形状的属性，如旋转或缩放。接着我们学习了如何利用精灵图集功能来创建动画角色。
- en: In the next chapter, we will discuss about caching techniques in CreateJS and
    how to improve the performance of applications using cache.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论 CreateJS 中的缓存技术以及如何通过缓存来提高应用程序的性能。
