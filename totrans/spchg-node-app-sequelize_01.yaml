- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction to Sequelize and ORM in Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing database drivers, managing schematics, maintaining a business’ workflow,
    and validating data can be daunting for any programmer. Along with perpetually
    changing business requirements, organizing the business logic into database models
    can be cumbersome. This usually entails the programmer finding all applicable
    references and updating queries manually. This could be an expensive operation
    for both the project and the programmer; without proper testing, the modifications
    could result in errors within the application or erroneous logic, leaving the
    programmer, the business, and the customer in a state of confusion.
  prefs: []
  type: TYPE_NORMAL
- en: This book will help guide you through the process of installing, building, maintaining,
    upgrading, extending, querying, and applying database schematics using an **object-relational
    mapping** (**ORM**) framework in a Node.js application using the Node.js runtime
    environment. The book can be read from start to finish in a sequential manner,
    or if you are more experienced, you can read the chapters that interest you directly.
    Each chapter complements the previous chapter since we will be creating an entire
    application from scratch. However, more experienced programmers can skip between
    chapters with the understanding that there may be “gaps” within their data model
    and what is shown within the chapter. The concepts and methodologies taught in
    each chapter, regardless of your data’s structure, will still be applicable.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this chapter is to help you become familiar with what Sequelize
    is and which capabilities are offered to you from using Sequelize. We will go
    over the necessary prerequisite steps for installing applicable libraries, frameworks,
    runtime engines, and **database management systems** (**DBMS**). By the end of
    this chapter, you will have acquired the knowledge and skillset of installing,
    configuring, and running an application, under the Node.js runtime with Sequelize,
    from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first chapter of this book will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Sequelize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advantages of using Sequelize over other alternatives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the necessary applications, frameworks, and tools to help get you
    started
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Sequelize within an Express application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we embark on our journey of developing an application with Sequelize,
    there are a few prerequisites. We will need to install the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A DBMS such as MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Node.js runtime library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A few Node.js packages: Sequelize, Express, and a MySQL driver'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Sequelize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Sequelize** (also known as **SequelizeJS**) is an ORM framework that helps
    connect and correspond your Node.js application to a database. Sequelize has been
    in development since 2010 by Sascha Depold and is used extensively within *Fortune
    100* companies. Throughout the years, the framework has grown to nearly 25,000
    *stargazers* on GitHub, with over 900 contributors, and is used by over 300,000
    open sourced projects. Sequelize has been *battle-tested* for performance and
    security for over a decade and has performed without issues for major retail stores
    and web agencies (such as Walmart and Bitnami) even during their highest traffic
    times of the year.'
  prefs: []
  type: TYPE_NORMAL
- en: What started out as a master’s thesis turned into a major integral building
    block of Node.js’ ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: An ORM is a methodology of associating database structures and information using
    **object-oriented** (**OO**) decorations and patterns. An ORM’s purpose is to
    help alleviate the differences between DBMSs and to offer some form of abstraction
    for querying and manipulating data more ergonomically. Typically, an ORM will
    also come with helper functions to help manage the state of connections, pre-validation
    of data, and workflows.
  prefs: []
  type: TYPE_NORMAL
- en: 'The framework follows a **promise-based** approach, which allows programmers
    to invoke data asynchronously. The promise-based approach offers a more convenient
    way of managing returned values, or errors, within your application without waiting
    for the result(s) to return immediately. To learn more about promises and how
    to program with them, refer to the following link: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).'
  prefs: []
  type: TYPE_NORMAL
- en: What is asynchronous?
  prefs: []
  type: TYPE_NORMAL
- en: Think of asynchronous as a way to perform tasks without having to wait for a
    response before continuing on with another task. When you text message someone,
    you do not have to wait for their response in order to continue with your day.
    After you send a message, you usually would not warrant any attention to the correspondence
    until you receive a signal that there was a response or that the message had failed
    to send.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, Sequelize supports the following DBMSs: MySQL, MariaDB, Postgres,
    **Microsoft SQL Server** (**MSSQL**), Snowflake, **Database 2** (**DB2**), and
    SQLite. An ORM offers more than just a connector to your database. ORMs often
    offer features such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Tooling for migrating schemas and data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adapter/plugin support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection pooling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eager loading of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managed transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we understand *what* Sequelize is and its basic capabilities, we will
    go over *why* we should use an ORM such as Sequelize over alternative methods
    such as **data access objects** (**DAOs**) or querying the database directly.
    Some of the advantageous capabilities include being able to handle and organize
    queries within transactions or migrating schematic changes to a database.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of using Sequelize over other alternatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many alternative ways of querying the database from your application.
    There are ORMs, DAOs, raw database drivers, and so on. Each methodology has its
    pros and cons and caters to different programming styles and conventions. Typically,
    those who favor *convention over configuration* tend to gravitate toward ORMs,
    while those who favor configuration tend to use DAO frameworks or raw database
    drivers.
  prefs: []
  type: TYPE_NORMAL
- en: An ORM can handle data validation, similar to DAOs, with additional features
    such as reading and writing from a database using a driver. With ORMs, you would
    not need to manage query statements manually, which could save you time over the
    DAO or raw connection methods.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: An ORM is not mutually exclusive to DAOs. You can think of DAOs as being explicit
    as opposed to being implicit and presumptuous. A DAO only provides an *interface*
    for your data. It does not involve how/where you read or write the data (the database
    driver), nor will it concern itself with the data’s integrity unless the application
    manually invokes some form of data validation outside of the DAO’s scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using an ORM such as Sequelize, you will have the following features without
    any additional code:'
  prefs: []
  type: TYPE_NORMAL
- en: Transaction handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection pooling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model/data validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data integrity (outside of DBMS’ scope of **foreign keys** (**FKs**), unique
    constraints, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eager loading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Schematic migration and cascading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimistic locking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a DAO or a raw database driver will forfeit these features, and you will
    have to build these solutions yourself. Using an ORM such as Sequelize will help
    you build your project with more efficiency and efficacy.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have covered the *what* and *why* for Sequelize; now, we will be
    going over the *how* for installing the necessary prerequisites for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the necessary applications, frameworks, and tools to help get you
    started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our application will require customers to view information from a centralized
    source, and we will need to capture information that they have entered into our
    database. Usually, customers can either view your product/services via an application
    that they install on their machine or they can use a browser to visit our website.
    Node.js is a good choice for building web applications, which is what we’ll be
    building throughout this book, due to its **central processing unit** (**CPU**)-bound
    limitations and ease of context switching between *frontend development* (what
    is displayed to the end user) and *backend development* (what the end user does
    not see but still invokes) owing to Node.js being JavaScript. We will need to
    install the following applications/programs in order to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: A DBMS (we will be installing MySQL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js runtime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sequelize and Express
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing MySQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This next section will go over the installation process for MySQL on three
    different operating system distributions: Microsoft Windows, macOS, and Linux.
    MySQL was chosen due to the ease of installation (no need to mess with configurations
    or **access-control lists** (**ACLs**)). Do not let those points discourage you
    from using a different database. For the most part, Sequelize will be able to
    gracefully translate from one DBMS to another, and the majority of this book will
    use common/standard **Structured Query Language** (**SQL**) methods.'
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The MySQL installer for Microsoft Windows can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dev.mysql.com/downloads/mysql/5.7.xhtml](https://dev.mysql.com/downloads/mysql/5.7.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The default `8.0.26`. This book uses version `5.7`, but other versions of MySQL
    should still work appropriately as long as the Node.js MySQL driver is compatible
    with that version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we are finished downloading and opening the installer application, you
    will be greeted with the **Choosing a Setup Type** screen. We will want to select
    the **Developer Default** and **Install all products** options, as illustrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 1.1 – Windows MySQL Installer: Choosing a Setup Type ](img/Figure_1.1_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1 – Windows MySQL Installer: Choosing a Setup Type'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have Python or Visual Studio installed on your computer, you may be
    greeted with a **Check Requirements** step (see *Figure 1.2*). If you are using
    Visual Studio as your **integrated development environment** (**IDE**), then you
    may install the necessary products, but it is not a requirement. Throughout your
    projects, you may come across a utility that is written in Python that interacts
    with your database (for example, most data science-related libraries/frameworks).
    By selecting the **Connector/Python** option shown in the following screenshot,
    we can avoid potential headaches in the future:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Windows MySQL Installer: Check Requirements ](img/Figure_1.2_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.2 – Windows MySQL Installer: Check Requirements'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next section should be the **Download** step. The main products that we
    will be required for the contents of this book are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MySQL Server**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MySQL Workbench** (for a **graphical user interface** (**GUI**) to our database)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MySQL Shell**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can see the aforementioned products in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Windows MySQL Installer: Download ](img/Figure_1.3_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.3 – Windows MySQL Installer: Download'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to MySQL, it may be a good idea to download the **MySQL Documentation**
    and **Samples and Examples** packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we have finished downloading our packages, we will be entering our configuration
    details for each applicable selected product (for example, **MySQL Server** and
    **Samples and Examples**). For the majority of the configuration settings, we
    will be using the default values; however, there will be some steps that will
    require your intervention. You can see an overview of this in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Windows MySQL Installer: Type and Networking ](img/Figure_1.4_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.4 – Windows MySQL Installer: Type and Networking'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the **MySQL Server** configuration wizard, we will want the following
    settings (as shown in *Figure 1.4*):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Config Type**: **Development Computer**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TCP/IP**: Checked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3306`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Windows Firewall port for network access**: Optional'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next part of the MySQL Server configuration step is to declare your MySQL
    root password and user accounts. Make sure to keep this information in a safe
    place in case you run into administration issues throughout your projects. If
    you forget the MySQL root password, there are several methods for resetting the
    password, as explained here: [https://dev.mysql.com/doc/mysql-windows-excerpt/5.7/en/resetting-permissions-windows.xhtml](https://dev.mysql.com/doc/mysql-windows-excerpt/5.7/en/resetting-permissions-windows.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: 'For setting up a MySQL user account with a role, you will be greeted with the
    following **Accounts and Roles** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Windows MySQL Installer: Accounts and Roles ](img/Figure_1.5_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.5 – Windows MySQL Installer: Accounts and Roles'
  prefs: []
  type: TYPE_NORMAL
- en: Within the **MySQL User Accounts** section, you will need to click on the **Add
    User** button (near the right side of the window, as shown in *Figure 1.5*) and
    type in a username and password that you will memorize for when we initialize
    our Node.js application. When you are finished adding the appropriate root password
    and MySQL user account(s), we can proceed to the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the installation process will offer a **Configure MySQL Server as a Windows
    Service** option, as illustrated in the following screenshot. **Windows Service**
    is a **process control system** (**PCS**) that will also orchestrate background
    processes (in the Unix/Linux world, these are referred to as *daemons*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Windows MySQL Installer: Windows Service ](img/Figure_1.6_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.6 – Windows MySQL Installer: Windows Service'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will want to ensure the following parameters are configured (as shown in
    *Figure 1.6*):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configure MySQL Server as a Windows Service**: Checked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start the MySQL Server at System Startup**: Checked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard System Account** selected under the **Run Windows Service as...**
    section'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Next >** to apply our configurations for the MySQL server. If you
    selected additional packages to install earlier, you may be prompted with additional
    screens asking for more configuration settings and parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you selected the **MySQL Router** package from the previous section, the
    installation process will ask you for information on how you would like to set
    up a cluster environment. It is not recommended to install this package unless
    you are a database administrator or you are setting up a production environment.
    Simply uncheck the **Bootstrap MySQL Router for use with InnoDB cluster** option
    and click **Finish** to proceed without installing MySQL under a cluster environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the **Samples and Examples** package was selected for installation, we will
    be prompted with a screen that will allow us to enter our MySQL username and password.
    You may use your *root credentials* for the username and password input fields
    and click on the **Next >** button to continue. An overview of the screen is provided
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Windows MySQL Installer: Connect To Server ](img/Figure_1.7_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.7 – Windows MySQL Installer: Connect To Server'
  prefs: []
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a couple of ways to install MySQL on a macOS machine. The first way
    is to download and install MySQL from a **Disk iMaGe** (**DMG**) file, while another
    method is by using a package manager such as Homebrew. We will explore both options.
  prefs: []
  type: TYPE_NORMAL
- en: Installing from disk image
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can find the appropriate disk image from the following URL: [https://dev.mysql.com/downloads/mysql/](https://dev.mysql.com/downloads/mysql/)
    (x86 for Intel CPUs and **Advanced RISC Machine** (**ARM**) for M1 CPUs).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you cannot find version 5.7 for MySQL, you will find the appropriate DMG
    file from MySQL’s archive link: [https://downloads.mysql.com/archives/community](https://downloads.mysql.com/archives/community).'
  prefs: []
  type: TYPE_NORMAL
- en: However, the macOS installation packages may not be available to download for
    the most recent 5.7 versions. At the time of writing this book, versions 5.7.34,
    5.7.33, and 5.7.32 are not available as a DMG package (5.7.31 is available to
    download). Any applicable 5.7 version should be compatible with this book’s instructions
    and installation procedures.
  prefs: []
  type: TYPE_NORMAL
- en: If you are asked about installing a preference panel throughout the installation
    process, we recommend you do so. Otherwise, we will need to consult the **Installing
    a MySQL Launch Daemon** page, located at [https://dev.mysql.com/doc/refman/5.7/en/macos-installation-launchd.xhtml](https://dev.mysql.com/doc/refman/5.7/en/macos-installation-launchd.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: 'After downloading and opening the DMG file, we will want to open the **package**
    (**pkg**) file, which will start our installation process. Depending on your macOS
    version, you may be prompted with a **“[package name]” can’t be opened because
    Apple cannot check it for malicious software** screen, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Apple cannot identify the package for maliciousness ](img/Figure_1.8_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – Apple cannot identify the package for maliciousness
  prefs: []
  type: TYPE_NORMAL
- en: 'If this is the case for you, go to **Apple** | **Security & Privacy**, and
    the window should have an **Open Anyway** button next to **“mysql….pkg” was blocked
    from use because it is not from an identified developer.**, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Bypassing unidentified package installations ](img/Figure_1.9_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – Bypassing unidentified package installations
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the installation package opens again, you may be prompted with another
    alert from Apple. Click on **Open** to continue with the installation process.
    After continuing and reading the **software license agreement** (**SLA**), you
    may select the default installation location. Clicking on **Install** may prompt
    for your administrative password, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10 – MySQL installation asking for administrative permission ](img/Figure_1.10_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – MySQL installation asking for administrative permission
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the MySQL installer finishes, an alert dialog will appear with a temporary
    password. An example is shown in the following screenshot. Make sure to take note
    of the temporary password for when we log in to the MySQL server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.11 – MySQL installation providing a temporary root password ](img/Figure_1.11_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – MySQL installation providing a temporary root password
  prefs: []
  type: TYPE_NORMAL
- en: Installing from Homebrew
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Using Homebrew over traditional package installers can help keep your packages
    up to date without manual intervention, along with validating package installations
    and binaries. To install MySQL through Homebrew, we will need to install Homebrew
    on our local machine. Within the terminal (located in **Applications** > **Utilities**),
    simply type in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is always a good idea to double-check an external script’s contents before
    running commands from it. A web page can redirect to anywhere, including malicious
    scripts that could lead to data breaches or something more nefarious.
  prefs: []
  type: TYPE_NORMAL
- en: 'When installing Homebrew, you may come across the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see an illustration of this in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Installing Homebrew on macOS ](img/Figure_1.12_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – Installing Homebrew on macOS
  prefs: []
  type: TYPE_NORMAL
- en: You can either enter in your password here or before installing Homebrew, run
    `sudo <anything>` (for example, `sudo ls`), enter in your password, and then run
    the installation command. The user must have administrator access before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this book, we will install MySQL version 5.7\. Other versions of MySQL
    should be compatible with the book’s code base, as previously noted. To install
    version 5.7 explicitly, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'There may be additional steps and commands to run in order to set up your instance
    properly, as illustrated in the following screenshot. The book’s contents will
    not require library/header files for compilation, nor for `pkg-config` to be configured.
    As a general rule, it is recommended to run `mysql_secure_installation` and go
    through the prompts for adding a root password, but it is not a requirement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.13 – Installing MySQL with Homebrew on macOS ](img/Figure_1.13_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.13 – Installing MySQL with Homebrew on macOS
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will need a way to manage our MySQL service. There are two options
    available to us, as outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Manually create launch daemon configuration files. More information on how
    this can be achieved is available here: [https://dev.mysql.com/doc/refman/5.7/en/macos-installation-launchd.xhtml](https://dev.mysql.com/doc/refman/5.7/en/macos-installation-launchd.xhtml).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can use a Homebrew extension known as `services` to manage launch configurations
    automatically by executing the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order to start the MySQL service, we need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you prefer a GUI version of managing your services, there is an application
    called `brew-services-menubar` that can be installed via Homebrew’s Cask extension,
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer to use a GUI when interfacing/querying databases, there is a
    free application called Sequel Pro that is available for downloading here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.sequelpro.com/](http://www.sequelpro.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are numerous distributions of Linux; for this book, we will be using
    Ubuntu (any Debian distribution should be applicable with the same commands).
    If you are using a different distribution, please refer to this page for instructions
    on how to install MySQL for your operating system: [https://dev.mysql.com/doc/refman/5.7/en/linux-installation.xhtml](https://dev.mysql.com/doc/refman/5.7/en/linux-installation.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the terminal, run the following commands (these are also shown in the
    screenshot that follows):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 1.14 – Installing MySQL Server on Ubuntu ](img/Figure_1.14_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.14 – Installing MySQL Server on Ubuntu
  prefs: []
  type: TYPE_NORMAL
- en: After MySQL has finished its installation, we will need to initialize a database
    to store all of our model’s schemas and information. Some ORMs and DBMSs will
    refer to databases as “schemas” (not to be confused with a model’s schema, which
    is referred to as “attributes” in Sequelize specifically).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have finished installing the MySQL DBMS engine on our local machine,
    we can start creating a database with some tables. Before creating tables, we
    will need to go over the various types of MySQL engines. Luckily for us, the following
    is applicable to all operating systems in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, MySQL will create an InnoDB database type (or, in MySQL terms,
    engine). Database engines are associated with the database’s table on MySQL (and
    not the entire database itself). This is useful when you know the trade-offs between
    a read-heavy table with no constraints (for example, news articles) and a write-heavy
    table (for example, a chatroom). For the sake of brevity, we will go over the
    main three database engines, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**InnoDB**: A database engine with transactional queries and FK support. Transactional
    queries are useful for executing a query, or several queries, with atomicity.
    We will go into further details about transactions and FKs in a later chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MyISAM**: If the majority of your database’s operations are read-related
    and you do not require any data constraints, this would be a preferred database
    engine to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HEAP**: The data stored within these tables is contained within the machine’s
    memory. This database engine is useful if you had to query against temporary data
    quickly. MySQL will not manage memory allocations for you, so it is important
    to remember to delete tables when they are no longer in use (and that the data
    fits into the machine’s available memory).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can always check your local MySQL server’s default engine type by entering
    the following command within a MySQL client: `SELECT @@default_storage_engine;`.'
  prefs: []
  type: TYPE_NORMAL
- en: You may skip this section and use the Sequelize `db:create` command, as long
    as the applicable MySQL user has the appropriate permissions. For the intent of
    becoming familiar with the terminal, we will create the database using command
    lines, as shown in the next screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the MySQL server with the following command (you may be prompted
    to enter in a password, or the additional `-p` parameter is required to enter
    in a password):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create our database by executing the following SQL command within the
    MySQL client Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: For Windows users
  prefs: []
  type: TYPE_NORMAL
- en: Most of these commands are executable via the Command Prompt or PowerShell applications.
    These applications can be accessed from the **Start** menu (for example, **Start**
    > **All Programs** > **Accessories** > **Windows PowerShell**).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.15 – Creating a database ](img/Figure_1.15_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.15 – Creating a database
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using a Windows machine, you may use any terminal application of
    your choice (Command Prompt, PowerShell, and so on), or you can use MySQL Workbench,
    as shown in the following screenshot, which we installed in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.16 – MySQL Workbench: Creating a database ](img/Figure_1.16_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.16 – MySQL Workbench: Creating a database'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To execute a query using MySQL Workbench, there is a *thunderbolt* icon within
    the query’s toolbar (the icon is usually next to the *save* icon). Your query’s
    results will appear at the bottom of your screen in the **Output** section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the time of writing this book, the **long-term support** (**LTS**) version
    of Node.js is 16\. Throughout this book, we will be using this version of Node.js,
    but the code base should still execute without issues using other releases. All
    of the corresponding operating system installations of Node.js can be found here:
    [https://nodejs.org/en/download/](https://nodejs.org/en/download/).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If the LTS version of Node.js is no longer version 16 and you want to use the
    same version as this book, you can download previous Node.js versions here: [https://nodejs.org/en/download/releases/](https://nodejs.org/en/download/releases/).'
  prefs: []
  type: TYPE_NORMAL
- en: For managing multiple Node.js versions on one machine, there is an application
    called **Node Version Manager** (**NVM**) that can handle and maintain several
    versions of Node.js on the same machine. For more information, you can visit their
    repository at [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm).
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After we are done downloading and opening the Node.js Windows installer, we
    will be prompted with the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.17 – Windows Node.js installer: Destination Folder ](img/Figure_1.17_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.17 – Windows Node.js installer: Destination Folder'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on **Next** will bring us to the **Custom Setup** step of the installation.
    Ensure that you are installing/configuring the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js runtime**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**npm package manager**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add to PATH**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can see an overview of this screen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.18 – Windows Node.js installer: Custom Setup ](img/Figure_1.18_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.18 – Windows Node.js installer: Custom Setup'
  prefs: []
  type: TYPE_NORMAL
- en: 'After the **Custom Setup** step, we will be brought to a **Tools for Native
    Modules** section. By default, the checkbox for installing the necessary tools
    is unchecked. For development purposes, we will want to make sure that the automatic
    installation option is checked, as depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.19 – Windows Node.js installer: Tools for Native Modules ](img/Figure_1.19_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.19 – Windows Node.js installer: Tools for Native Modules'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the automatic tool installation will prompt a PowerShell window to
    appear, as illustrated in the next screenshot, showing you the status of installation
    progress for Chocolatey, .NET packages, Python dependencies, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.20 – Windows Node.js installation: additional tools ](img/Figure_1.20_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.20 – Windows Node.js installation: additional tools'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Chocolatey is a package manager for Microsoft’s Windows operating system. If
    you are familiar with the macOS environment, this would be similar to Homebrew
    or Apt on a Debian Linux distribution. For more information on Chocolatey, please
    refer to the following link: [https://chocolatey.org/](https://chocolatey.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can install Node.js for macOS via its package image, which is located at
    [https://nodejs.org/en/download/](https://nodejs.org/en/download/), or you can
    install it with Homebrew by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To confirm that your machine is using the correct “node” binary, we can always
    check the version by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For Ubuntu/Debian Linux distributions, we can use a specific repository to
    install Node.js 14, as illustrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After the repository has been added, we can install Node.js and check the version,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: So far, we have finished installing MySQL as our DBMS, applicable package managers,
    and the Node.js runtime library; we can now begin to scaffold our project and
    install the necessary Node.js packages for Sequelize and Express.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Sequelize within an Express application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After we have installed our development tools and database, we can begin installing
    and configuring our application with Sequelize and **Express**. Express is a minimal
    web framework for Node.js runtime applications. Our Node.js application will use
    Sequelize to correspond with the database, and Express will relay those query
    results to the browser. More information on Express, along with a complete reference,
    can be found here: [https://expressjs.com](https://expressjs.com).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within Command Prompt, PowerShell, or the terminal, enter the following commands
    for initializing our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a directory called `airline`; then, we will change our working
    directory to the `airline` folder, and we will run an initialization script from
    the `npm` command will create a `package.json` file that contains a bare configuration
    for npm to use on this project. After that, we will need to install the minimum
    required Node.js modules for our application, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an online resource that you may refer to for a complete list of options
    for npm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.npmjs.com/cli/v7/commands](https://docs.npmjs.com/cli/v7/commands)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sequelize has a companion executable to help us initialize our project, manage
    updates to our schema, and handle database migrations. We can install it as a
    global (`--location=global`) binary within our userspace by entering the following
    command in our terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'For a full list of commands available to you, the CLI has documentation built
    in that can be exposed using the `-h` or `--help` flags, as illustrated in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.21 – Sequelize CLI installation and help guide ](img/Figure_1.21_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.21 – Sequelize CLI installation and help guide
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to initialize a generic template that Sequelize provides for
    us from the CLI. This will generate several directories for configuration, migration,
    seed, and model files. Here’s the code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following list offers a brief explanation of the directories created by
    the CLI in our project’s directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`config`: A directory that contains a database connection configuration file
    in `sequelize-cli` tool uses this configuration file to migrate schema and data
    files, but these configuration settings could also be used for our Node.js application
    as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`migrations`: A directory containing Node.js files with instructions for Sequelize
    on how to scaffold your database’s schema and structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`models`: A collection of Node.js files with Sequelize schema definitions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`seeders`: Similar to the `migrations` directory but instead of defining our
    database’s schema, we will define our database’s data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have the initial foundation of our application, we can edit our
    Sequelize configuration file located in `config/config.json`. Depending on which
    installation instructions you followed, the username and password values may be
    different than the book’s code base. The code is illustrated in the following
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do not wish to keep usernames and passwords in a file (which is a good
    idea for production environments or version control repositories), there is an
    alternative form for the configuration file that can accept an environment key
    with a connection `mysql://root:password@127.0.0.1:3306/airline`), as illustrated
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If we wanted to use the `development` configuration, our Node.js application
    would know to look for the connection parameters/URI from an environment variable
    called `DB_DEV_ENV` (you may use the same environment variable for any stage).
    For more options and configuration settings for the Sequelize CLI, refer to this
    resource: [https://github.com/sequelize/cli/blob/master/docs/README.md](https://github.com/sequelize/cli/blob/master/docs/README.md).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can toggle between which environment you would like your application to
    be in by setting a `NODE_ENV` environment variable. The default value is `development`
    but if we wanted to use our `production` environment, we would set the environment
    like so: `NODE_ENV=production`.'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting Sequelize with Express
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can now begin building our Node.js application by creating an `index.js`
    file within the project’s directory and opening the file in our IDE of choice.
    Let us begin by typing in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We begin by declaring our Express/web application variables (`express` and `app`)
    with the first two lines of the code. The next line is shorthand for invoking
    the `./models/index.js` file that was created by the Sequelize CLI from earlier
    (we will go into details of that file in the next chapter). The following line
    runs the Sequelize `sync()` command, which will synchronize your model definitions
    with a database by creating the necessary tables, indices, and so on. It will
    also establish associations/relations, execute sync-related hooks/events, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `sync()` command offers several options that are encapsulated within an
    object as the first parameter, as outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`force`: A Boolean value that will drop your database’s tables before re-creating
    them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`match`: A `force` option within a production environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logging`: A Boolean or function value. `true` (the default) will use `console.log`
    when executing queries for logging. `false` will disable entirely, and a function
    can be used to send logs and context to another adapter. This book will go into
    detail about this option in a later chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema`: A string value for defining which database to operate in. Useful
    for when you are using a DBMS such as Postgres, which allows you to separate tables
    by not only a database (which MySQL calls a “schema”) but also by a namespace
    (which Postgres calls “schema”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`searchPath`: A string value to define the default `search_path` for Postgres
    databases only. This option will not pertain to this book’s code base or content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hooks`: A Boolean value (defaults to `true`) to execute several hooks/events
    that are related to sync events (`beforeSync`, `afterSync`, `beforeBulkSync`,
    and `afterBulkSync`). `false` will disable events from executing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alter`: An object with the following parameter:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drop`: A Boolean value that prevents any `drop` statements from being executed
    when Sequelize needs to run `ALTER` commands within the database.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can define these options like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is *not* recommended by the Sequelize community to run the `force` option
    as `true` within a production environment. This could have unintentional consequences
    such as deleting vital customer/user information. The `force` option is for when
    you are still prototyping your application and want to start your application
    on a clean slate per iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next command, `app.get(...)`, instructs the Express framework to route
    the `"/"` (root) path of our web application to the scoped function (in this case,
    we are sending text back to the browser, as shown in *Figure 1.22*). After that,
    we start the Express server by calling `app.listen(...)`, which will tell our
    application to listen for `3000`, which can be accessed in our browser via `http://localhost:3000`
    or `http://127.0.0.1:3000`, depending on your network interface settings. For
    starting our application, we can run the following command within our terminal/PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see text displayed on your screen indicating the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Express has started
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A SQL query was executed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database has been synced
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Sequelize will automatically execute a `SELECT 1+1 AS result` query as a method
    for checking on the database connection’s health. Not all DBMSs offer a way of
    sending a `ping` packet to check whether a connection is successful or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when you open your browser and visit the previously mentioned URL, you
    should see a page similar to what is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.22 – Welcome page ](img/Figure_1.22_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.22 – Welcome page
  prefs: []
  type: TYPE_NORMAL
- en: 'Every time we make a change to our application, we will need to terminate our
    current process (*Ctrl* + *C*) within the terminal. This will send a `SIGINT`
    signal to the process, which will send an interrupt signal to the process in order
    to begin cleaning up and then exit/stop. To avoid having to restart our process
    manually after every change, we can install a separate process to help facilitate
    this for us called Nodemon (more information can be found here: [https://nodemon.io/](https://nodemon.io/)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nodemon may be installed as a global binary by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You can confirm if the installation was successful by typing in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This should start our Node.js application while simultaneously watching for
    changed files within our project’s directory. Once we have made a modification
    to the project, we should see Nodemon automatically restarting our process, as
    illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.23 – Nodemon automatically restarting the application ](img/Figure_1.23_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.23 – Nodemon automatically restarting the application
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step for this chapter is to make a few adjustments to our `package.json`
    file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `"private": true` under the `"name": "airline,"` line. This adjustment
    will prevent us (or anyone else on the team) from publishing our project to the
    public npm registry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Look for the `scripts` object and replace whatever content is there with `"start":
    "nodemon index.js"`. This will allow us to start our application by running the
    following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final `package.json` file should look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced the benefits of using an ORM and what Sequelize
    has to offer. We learned how to set up our development/local environment to run
    a DBMS (MySQL) and the Node.js runtime. We then scaffolded a project using npm
    and the Sequelize CLI and integrated the Sequelize library with the Express web
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will begin inserting data into our database and define
    Sequelize models.
  prefs: []
  type: TYPE_NORMAL
