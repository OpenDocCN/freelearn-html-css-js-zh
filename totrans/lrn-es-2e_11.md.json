["```js\n// thread 1 - pseudo program code\nif variable == 5:\n    asyncOperationWhichTakes200MS()\n    // just here thread 2 modifies variable to 10\n    res = variable * 5\n    // res is now 50 instead of 25\n    // unpredicatable behavior ahead\n```", "```js\nif(typeof window.Worker !== \"function\") {\n    // worker not available\n} else {\n    // good to go\n}\n```", "```js\n// script.js loaded on index.html\n\nconst awesomeWorker = new Worker('myworker.js');\n```", "```js\n// myworker.js\nconsole.log('Hello world!');\n```", "```js\n// script.js\n\nconst awesomeworker = new Worker('myworker.js');\nawesomeworker.addEventListener('message', e => {\n    console.log(e.data); // data sent by worker\n});\n```", "```js\n// myworker.js\n\nself.addEventListener('message', e => {\n    console.log(e.data); // data sent by main script\n});\n```", "```js\n// script.js\n\nconst awesomeworker = new Worker('myworker.js');\nawesomeworker.addEventListener('message', e => {\n    console.log(e.data); // data sent by worker\n});\n\nconst data = {task: \"add\", nums: [5, 10, 15, 20]};\n\n// lets send this data\nawesomeworker.postMessage(data);\n```", "```js\n// myworker.js\n\nself.addEventListener('message', e => {\n    if(e.data.task == \"add\") {\n        const res = e.data.nums.reduce((sum, num) => sum+num, 0);\n        // do something with res\n    }\n});\n```", "```js\n// myworker.js\n\naddEventListener('message', e => {\n    if(e.data.task == \"add\") {\n        const res = e.data.nums.reduce((sum, num) => sum+num, 0);\n        postMessage({task: \"add\", result: res}); // self.postMessage will also work\n    }\n});\n```", "```js\n// script.js\n\nconst awesomeworker = new Worker('myworker.js');\nawesomeworker.addEventListener('message', e => {\n    if(e.data.task == \"add\") { \n    // task completed. do something with result\n        document.write(e.data.result);\n    }\n});\n\nconst data = {task: \"add\", nums: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]};\nawesomeworker.postMessage(data);\n```", "```js\n// script.js\n\nconst awesomeworker = new Worker('myworker.js');\nawesomeworker.postMessage({task: \"divide\", num1: 5, num2: 0})\n\nawesomeworker.addEventListener('error', e => {\n    console.log(e); // information of ErrorEvent\n});\n```", "```js\n// myworker.js\n\nself.addEventListener('message', e => {\n    if(e.data.num2 == 0) {\n        throw \"Cannot divide by 0\";\n    } else {\n        postMessage({task: \"divide\", result: e.data.num1/e.data.num2 });\n    }\n});\n```", "```js\n// myworker.js\n\naddEventListener('message', e => {\n    if(e.data.message == \"doAjaxAndDie\") {\n        fetch(...).then(data => {\n            postMessage(data);\n            close(); // or self.close();\n        });\n    }\n});\n```", "```js\n// script.js\n\nconst awesomeworker = new Worker('myworker.js');\n\nawesomeworker.addEventListener('message', e => {\n    if(e.data.message == \"killme\") {\n        awesomeworker.terminate(); // bye bye\n        console.log(\"Worker terminated\");\n    }\n});\n```", "```js\n// myworker.js\n// .. some work\npostMessage({message: \"killme\"});\n```", "```js\nconst ab = new ArrayBuffer(100);\n\n// add data to this arraybuffer\nconsole.log(ab.byteLength); // 100\nworker.postMessage(ab, [ab]);\nconsole.log(ab.byteLength); // 0 - ownership lost\n```", "```js\nconst awesomeworker = new SharedWorker('myworker.js');\n```", "```js\n// myworker.js\nconsole.log('Hello world!');\n```", "```js\n// script.js\n\nconst awesomeworker = new SharedWorker('myworker.js');\nawesomeworker.port.start(); // important\nawesomeworker.port.addEventListener('message', e => { // notice the .port\n    console.log('Shared worker says .. ', e.data);\n});\n```", "```js\n// myworker.js\naddEventListener('connect', e => {\n    console.log(e.ports);\n    const port = e.ports[0];\n    port.start();\n    port.addEventListener('message', event => {\n        console.log('Some calling script says.. ', event.data);\n    });\n});\n```", "```js\n// script.js\n\nconst awesomeworker = new SharedWorker('myworker.js');\nawesomeworker.port.start();\nawesomeworker.port.postMessage(\"Hello from the other side!\");\n```", "```js\n// myworker.js\naddEventListener('connect', e => {\n    console.log(e.ports);\n    const port = e.ports[0];\n    port.start();\n    port.addEventListener('message', event => {\n        console.log('Some calling script says.. ', event.data); // logs\n        \"Hello from the other side!\"\n    });\n});\n```", "```js\n// myworker.js\naddEventListener('connect', e => {\n    console.log(e.ports);\n    const port = e.ports[0];\n    port.start();\n    port.addEventListener('message', event => {\n        console.log('Some calling script says.. ', event.data); \n        // some work\n        port.postMessage(\"Hello ;)\");\n    });\n});\n```", "```js\n// myworker.js\n\nconst ports = [];\n\naddEventListener('connect', e => {\n    const port = e.ports[0];\n    ports.push(port); // assemble all connections\n    port.start();\n    // .. other info\n});\n\naddEventListener('error', e => {\n    console.log(e); // Info about error\n    ports.forEach(port => port.postMessage({type: 'error', res: e}));\n});\n```", "```js\n// script.js\n\nconst awesomeworker = new SharedWorker('myworker.js');\nawesomeworker.port.start(); \n\n// some processing and some work\n\nawesomeworker.port.close();\nawesomeworker.port.postMessage(\"Are you still alive?\"); // does not work | no effect\n```", "```js\n// script.js\n\nconst awesomeworker = new SharedWorker('myworker.js');\nawesomeworker.port.start();\n\nawesomeworker.port.postMessage({type: 'cmd', action: 'die'});\n```", "```js\n// myworker.js\n\naddEventListener('connect', e => {\n    const port = e.ports[0];\n    port.start();\n    port.addEventListener('message', event => {\n        if(event.data.type == 'cmd' && event.data.action == 'die') {\n            self.close(); // terminates worker\n        }\n    });\n});\n```", "```js\nconst blob = new Blob(['(',\nfunction() {\n    // web worker code here\n}.toString(),\n')()'], { type: 'application/javascript' }));\n\nconst url = URL.createObjectURL(blob); // gives a url of kind blob:http://....\nconst awesomeworker = new Worker(url);\n```", "```js\nif('serviceWorker' in navigator) {\n    // service worker available\n    // lets code\n}\n```", "```js\nnavigator.serviceWorker.register('/sw.js')\n.then(reg => console.log(reg))\n.catch(err => console.log(err));\n```", "```js\n// sw.js\n\nself.addEventListener('install', e => {\n    e.waitUntil(async function() {\n        const cache = await caches.open('cacheArea');\n        await cache.addAll(['/', '/styles/main.css', '/styles/about.css']);\n    }());\n});\n```", "```js\nself.addEventListener('fetch', e => {\n    e.respondWith(async function() {\n        const response = await caches.match(e.request);\n        if(response) {\n            return response;\n        }\n        return fetch(e.request);\n  }());\n});\n```"]