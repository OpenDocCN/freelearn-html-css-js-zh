- en: Chapter 6. Using Filters in EaselJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the great features of CreateJS is the ability to play with filters and
    apply various filters to pictures and shapes easily. CreateJS makes it easy by
    providing a `Filter` class and `filters` property for `DisplayObject`; accordingly,
    we can simply create instances of the `Filter` class and apply them to the objects.
    In this chapter, we will have a look at CreateJS filters and some basic examples
    of working with the `Filter` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the `Filter` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use built-in EaselJS filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the Filter class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: EaselJS comes with a `Filter` class, which is the base class for all other filters,
    and other filter classes should inherit from this class. Filters need to be applied
    to objects that have been cached using the `cache` method; after that, if the
    object gets changed again, we should use the `cache` or `updateCache` methods
    to update the shape.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of applying filters to an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we have created a shape object; in the next line, we have
    created a circle with the color red. The next line contains the filter configurations,
    and in the last line we have cached the object using the `cache` function.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `cache` method in examples with filtering will not only boost performance
    but will also apply the filter to the shape and make it work.
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the Filter class](img/0260OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'EaselJS contains several basic filters, such as `blur` or `color` filters,
    that you can use easily. Here is a list of built-in filters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AlphaMapFilter`: This is used to map a grayscale image to the alpha channel
    of a display object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AlphaMaskFilter`: This is used to map the alpha channel of an image to the
    alpha channel of a display object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BlurFilter`: This applies vertical and horizontal blur to a display object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ColorFilter`: This color transforms a display object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ColorMatrixFilter`: This transforms an image using a `ColorMatrix`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will discuss all these filters in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Using the AlphaMapFilter class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `AlphaMapFilter` is an built-in filter is used for applying a grayscale
    alpha map image (or canvas) to the target. To be clearer, the alpha channel of
    the result will be copied from the red channel of the map and the RGB channels
    will be copied from the target object.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, it is recommended that you use `AlphaMaskFilter`, because it has
    much better performance.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This has been taken from: [http://www.createjs.com/Docs/EaselJS/classes/AlphaMapFilter.html](http://www.createjs.com/Docs/EaselJS/classes/AlphaMapFilter.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet is the definition for this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`alphaMap` | `Image` | `HTMLCanvasElement`'
  prefs: []
  type: TYPE_NORMAL
- en: We have used the grayscale image or the canvas as the alpha channel. It should
    be of the same dimensions as the target.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is an example of using the `AlphaMapFilter` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the first few lines of the code, we created a rectangle created with a linear
    gradient and then cached the object using `cache` method. The reason for caching
    the object is to use it in the filter parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we created the `box2` variable; it's our parent shape. This shape is the
    same as the first one, but the gradient color is different. We have changed the
    colors for the start and end of the linear gradient. Afterward, we added `AlphaMapFilter`
    to the `box2` filters and the `box` variable as the parameter of the filter. Then,
    in to order apply the filter to the shape, we cached the shape using the `cache`
    method and added it to the stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'A preview of the previous example is shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the AlphaMapFilter class](img/0260OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the AlphaMaskFilter class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This filter is similar in usage to the `AlphaMapFilter` class, but we will briefly
    talk about this filter as well. As per the CreateJS documentation, it's recommended
    that you use this filter instead of `AlphaMapFilter` because it has much better
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: '`AlphaMaskFilter` applies the alpha mask from the mask image (or canvas) to
    the target. The alpha channel of the result will be derived from the mask, and
    the RGB channels will be copied from the target object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how we define the `AlphaMaskFilter` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The parameters in this code snippet are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mask` | `Image`'
  prefs: []
  type: TYPE_NORMAL
- en: This class is an instance of the `Image` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of using this filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the usage of this filter is almost the same as `AlphaMapFilter`.
  prefs: []
  type: TYPE_NORMAL
- en: The example source code is divided into two functions, `init` and `handleimg`.
    In order to load the image properly, we used the `Image` class and the `onload`
    event. We then used the `handleimg` function for the `onload` event callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Inside `init` function, `stage` class is created. We also configured the `Image`
    class and assigned the `handleimg` function to the `onload` event. A major part
    of the example's source code is inside the `handleimg` function. In the first
    few lines, we created a rectangle with a linear gradient background. The reason
    for using the `rgba` function to define color is to change the alpha channel of
    the gradient so that the filter will derive this alpha channel for the final result.
    Finally, we cached the shape using the `cache` method.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we loaded an image using the `Bitmap` function and also applied it to
    the `bmp` variable with the `filters` property. We also cached this image in order
    to apply the filter changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates the result of our example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the AlphaMaskFilter class](img/0260OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Implementing the BlurFilter class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Blur filter is one of usable filters for creating innovative animations
    and drawings. In this section, we will have a discussion about using the `BlurFilter`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This filter applies a **blur box** to `DisplayObject`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This filter is CPU intensive, particularly if the quality is set to higher than
    1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the definition of the `BlurFilter` class and its parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The parameters included in this code snippet are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[blurX=0]` | `Number`: It is an optional parameter. It is used to set the
    horizontal blur radius in pixels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[blurY=0]` | `Number`: It is an optional parameter. It is used to set the
    vertical blur radius in pixels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[quality=1]` | `Number`: It is an optional parameter. It is used to set the
    number of blur iterations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example of using the Blur filter with a red circle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we have the `shape` variable, which is the variable for our
    shape, a circle. In the next line, we filled the circle with the red color and
    finished drawing the shape using the `drawCircle` function.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we created the blur filter using three parameters and applied it to the
    `shape` object with the `filters` property. In order to find the dimension of
    the caching area, we used the `getBounds` function because, as you know, the blur
    filter has some more padding after applying the `getBounds` function.
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the BlurFilter class](img/0260OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Utilizing the ColorFilter class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This filter applies a color transform to `DisplayObject`. This filter comes
    handy when you need to play with colors in EaselJS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code snippet, you can see the definition of this filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The various parameters in this code snippet are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[redMultiplier=1]`– `Number`: It is an optional parameter. It sets the value
    to multiply with the red channel. The value should be between 0 and 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[greenMultiplier=1]`– `Number`: It is an optional parameter. It sets the value
    to multiply with the green channel. The value should be between 0 and 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[blueMultiplier=1]`– `Number`: It is an optional parameter. It sets the value
    to multiply with the blue channel. The value should be between 0 and 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[alphaMultiplier=1]`– `Number`: It is an optional parameter. It sets the value
    to multiply with the alpha channel. The value should be between 0 and 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[redOffset=0]`– `Number`: It is an optional parameter. It sets the value to
    add to the red channel after it has been multiplied. The value should be between
    -255 and 255.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[greenOffset=0]`– `Number`: It is an optional parameter. It sets the value
    to add to the green channel after it has been multiplied. The value should be
    between -255 and 255.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[blueOffset=0]`– `Number`: It is an optional parameter. It sets the value
    to add to the blue channel after it has been multiplied. The value should be between
    -255 and 255\.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[alphaOffset=0]`– `Number`: It is an optional parameter. It sets the value
    to add to the alpha channel after it has been multiplied. The value should be
    between -255 and 255.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example of using this filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we created a red circle and then changed its color to blue
    using `ColorFilter`. This is done by multiplying all the channels with 0 (except
    for the alpha channel, which is set to 1) and then adding the value 255 to the
    blue channel and 0 to the other channels.
  prefs: []
  type: TYPE_NORMAL
- en: '![Utilizing the ColorFilter class](img/0260OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the ColorMatrixFilter class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this filter, you can play with complex color operations, such as saturation,
    brightness, or inversion. This filter uses the `ColorMatrix` class to perform
    the action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet defines this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The parameters present in this code snippet are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`matrix– Array`: A 4x5 matrix describing the color operation to perform using
    the `ColorMatrix` class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example of using this filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the preceeding example, we created a red circle and then inverted the hue
    and changed the saturation to 100\. We started by creating the `stage` class in
    the first line. Then, we created a circle using the `drawCircle` function. To
    place the circle in the viewport of the `canvas` element, we used the `set` function
    to change the `x` and `y` values.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we initiated the `matrix` variable using the `ColorMatrix` class. We used
    the `adjustHue` and `adjustSaturation` functions to change the hue and saturation
    of the circle. An acceptable value for `adjustHue` is between -180 to 180\. This
    value for `adjustSaturation` is between -100 and 100\. We set the hue value to
    180 and saturation value to 100 in our example to see the difference better.
  prefs: []
  type: TYPE_NORMAL
- en: We applied all using the `filter` property of the `shape` variable. Finally,
    we cached the shape using the `cache` method and updated the stage using `update`
    method to apply the changes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the ColorMatrixFilter class](img/0260OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use the built-in filters in EaselJS to change
    `DisplayObject` properties such as color, hue, saturation, and so on. We also
    discussed the definition and basic usage of the filters with interactive examples
    and screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the creation of a web-based painting application
    using all the methods and functions that we have learned up to now.
  prefs: []
  type: TYPE_NORMAL
