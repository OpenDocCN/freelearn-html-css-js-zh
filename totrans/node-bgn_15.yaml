- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Securing Web Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to explore how to improve the security of our
    web applications. We will start by discussing the impact of a security incident
    on businesses and how to get started with security in our day-to-day work. Then
    we will explore key resources such as the OWASP Top 10, the **Common Weakness
    Enumeration** (**CWE**), and the **Common Vulnerabilities and Exposures** (**CVE**)
    to improve our understanding of security in modern web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will explore the Node.js threat model and the official Node.js best
    practices to improve the security of our applications. We will apply this knowledge
    to create a checklist that we can use to improve the security of our existing
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will explore how to take advantage of our security knowledge to
    become an ethical hacker and how to skill up while participating in community
    events and bug bounty programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up, here are the main topics that we will explore in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where to start with security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving the security of our applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Becoming an ethical hacker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code files for the chapter can be found at [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners).
  prefs: []
  type: TYPE_NORMAL
- en: The importance of security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Historically, the security of applications was not considered a priority by
    developers. The main reason was that the security culture was not present in the
    developers’ mindset as the main goal was to deliver features as soon as possible
    and, historically, the systems that we built were not critical for the business
    or exposed to the internet 24/7 as they are today.
  prefs: []
  type: TYPE_NORMAL
- en: '“There are only two types of companies: those that have been hacked, and those
    that will be.”'
  prefs: []
  type: TYPE_NORMAL
- en: – Robert Mueller, FBI Director, 2012
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, we depend on a lot of third-party libraries and services that we don’t
    control, and we don’t know whether they are secure or not. We build very complex
    systems with many layers beyond our own business logic, and we need to be aware
    of the risks that we are taking and how to mitigate them.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the day, it is up to us as individuals to be aware of the risks,
    and the security of our applications is our responsibility. Quite often, we assume
    that security is someone else’s responsibility but that is not true. Even in organizations
    with a security team, developers are the first line of defense and the ones that
    need to be aware of the risks and how to mitigate them.
  prefs: []
  type: TYPE_NORMAL
- en: Social engineering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I love Hollywood hacker movies that use super sophisticated tools to hack fictional
    systems, but the reality is that the most common attack vector is social engineering.
    It is easier to trick a human than to hack a system, which is why social engineering
    is the most common attack vector. There are many techniques (phishing, pretexting,
    baiting, and so on) and they evolve and get more sophisticated over time. All
    these types of attacks have psychological manipulation in common. This can include
    the use of authoritative roles (such as the attacker pretending to be a police
    officer), or the attacker using scarcity tactics (such as saying there are only
    five devices left at an ultra-cheap price in a special offer, which is a scam
    offer). These are just two examples but many more tactics use the weaknesses/desires
    that we all share as human beings.
  prefs: []
  type: TYPE_NORMAL
- en: “Social engineering bypasses all technologies, including firewalls.”
  prefs: []
  type: TYPE_NORMAL
- en: – Kevin Mitnick
  prefs: []
  type: TYPE_NORMAL
- en: We all have received emails that claim to be from our bank or from a service
    that we use, asking us to click on a very suspicious link or to download a file.
    Most of these emails are phishing attacks that your email provider will detect
    and classify as spam. As technologists, we think that we are not going to fall
    for these kinds of attacks but the reality is that there are more and more sophisticated
    attacks that are targeting developers and that are very difficult to detect.
  prefs: []
  type: TYPE_NORMAL
- en: Let me introduce to you the `lodash` package but you make a typo and instead
    install the `lodahs` package.
  prefs: []
  type: TYPE_NORMAL
- en: Two of the malicious activities that this can do are search for `.env` files
    in your project and send them to the attacker’s server or install a backdoor in
    your application. There are many more activities, too.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen this kind of attack in the past; for example, the popular `cross-env`
    package ([https://www.npmjs.com/package/cross-env](https://www.npmjs.com/package/cross-env)),
    which is used to set environment variables in a cross-platform way, has a malicious
    version called `crossenv` ([https://snyk.io/advisor/npm-package/crossenv](https://snyk.io/advisor/npm-package/crossenv))
    that contains a malicious payload.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more details about this kind of attack at [https://snyk.io/blog/typosquatting-attacks/](https://snyk.io/blog/typosquatting-attacks/).
  prefs: []
  type: TYPE_NORMAL
- en: Information
  prefs: []
  type: TYPE_NORMAL
- en: Currently, npm has policies that prevent you from publishing packages with similar
    names to ones that have been previously published in order to prevent this kind
    of attack ([https://docs.npmjs.com/threats-and-mitigations#by-typosquatting--dependency-confusion](https://docs.npmjs.com/threats-and-mitigations#by-typosquatting--dependency-confusion)).
  prefs: []
  type: TYPE_NORMAL
- en: Risks in the supply chain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For many years, I was evangelizing about the importance of security in the supply
    chain. It is sometimes hard to understand the risks because the supply chain is
    not visible to us and the impact on our code is not as clear as a SQL injection
    or a memory leak.
  prefs: []
  type: TYPE_NORMAL
- en: In 2020, I wrote a blog post discussing how we can build a backdoor in a Node.js
    application using a malicious package from npm ([https://snyk.io/blog/what-is-a-backdoor/](https://snyk.io/blog/what-is-a-backdoor/)).
    A backdoor is a piece of code that will allow us to take control of the application
    remotely. Basically, we have remote access to the operating system terminal to
    execute any command that we want with the privileges of the user who is running
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: To make it more realistic, I created a malicious Express middleware that allows
    us to execute any command that we want in the operating system terminal. Then,
    I published the package in npm to make it available to the community. The package
    was called `browser-redirect` and the expected behavior was to redirect any user
    who was not using a Chromium-based browser to [https://browsehappy.com/](https://browsehappy.com/).
    To do that, you only need to use the package as a middleware in your Express application.
    The package performed the expected behavior but it also did more malicious things
    in the background, including adding specific headers to the HTTP response that
    helps find infected servers across the internet with tools such as Shodan ([https://www.shodan.io/](https://www.shodan.io/))
    and executing commands in the operating system terminal when certain conditions
    were met. This code didn’t require any external library to perform any of the
    malicious activities, so the malicious payload was not easily recognizable when
    running scanning tools.
  prefs: []
  type: TYPE_NORMAL
- en: Information
  prefs: []
  type: TYPE_NORMAL
- en: You can find the blog post in the Snyk blog ([https://snyk.io/blog/what-is-a-backdoor/](https://snyk.io/blog/what-is-a-backdoor/))
    with a detailed explanation of the code execution, mitigation strategies, and
    much more.
  prefs: []
  type: TYPE_NORMAL
- en: The business impact
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any security incident has a direct impact on the business. We can lose our reputation
    and the trust of our customers. Also, the incident can directly affect our clients;
    for example, if we suffer a ransomware attack and we cannot provide the service
    to our customers or, even worse, if we lose the data of our customers, that can
    lead to legal problems and additional attacks directly targeting our customers.
  prefs: []
  type: TYPE_NORMAL
- en: Data breaches are so common that we don’t even pay attention to them in the
    mass media. However, the impact on users can be very high. In recent years, we
    have seen many data breaches that have affected millions of users, providing access
    to information such as passwords, credit card details, payment logs, sexual orientation,
    criminal records, geolocation records, and so on. You can find a detailed ranking
    at [https://www.upguard.com/blog/biggest-data-breaches](https://www.upguard.com/blog/biggest-data-breaches).
  prefs: []
  type: TYPE_NORMAL
- en: In 2013, Troy Hunt ([https://www.troyhunt.com/about/](https://www.troyhunt.com/about/))
    created the website [https://haveibeenpwned.com/](https://haveibeenpwned.com/)
    where you can check whether your email address has been compromised in a data
    breach. You can also set up an alert to be notified if your email address appears
    in a new data breach.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen the importance of security in the business, let’s see
    where we can start to learn more about security in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Where to start with security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is a vast topic, and it will require several books to cover all the
    aspects; even then, it will require more resources to keep it up to date. In this
    section, we will explore some resources to start learning but with a limited scope
    to the Node.js ecosystem and web application development.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn about the OWASP Top 10, CVE, and CWE so we can have a clear compass
    to navigate through the security world as beginners.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP Top 10 overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many possible attacks can affect our applications and we cannot cover all of
    them, so the task becomes overwhelming. To prioritize the most common attacks,
    the **Open Web Application Security Project** (**OWASP**) foundation created a
    list of the 10 most common attacks that affect web applications, and this is updated
    every few years. You can find the list at [https://owasp.org/www-project-top-ten](https://owasp.org/www-project-top-ten).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see the list of the OWASP Top 10 for 2021:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A01:2021 Broken** **Access Control**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A02:2021** **Cryptographic Failures**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A03:2021 Injection**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A04:2021** **Insecure Design**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A05:2021** **Security Misconfiguration**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A06:2021 Vulnerable and** **Outdated Components**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A07:2021 Identification and** **Authentication Failures**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A08:2021 Software and Data** **Integrity Failures**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A09:2021 Security Logging and** **Monitoring Failures**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A10:2021 Server Side Request** **Forgery (SSRF)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I suggest you read the OWASP Top 10 carefully and try to find what the attacks
    have in common so you can understand the root cause of the attacks to help you
    define better strategies to mitigate them.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we can see that **A05 Security Misconfiguration** and **A06 -
    Vulnerable and Outdated Components** have a relationship with how we install and
    configure dependencies and how we keep them up to date. So, we can start to think
    about how to improve our CI/CD pipeline to automate the installation and updating
    of the dependencies and we can discuss whether we need a deeper understanding
    of the dependencies that we rely on. In a very specific case, this can be that
    we have an NGINX (reverse proxy) instance that is not properly configured and
    is outdated, and we need to put some effort into improving the configuration and
    updating the NGINX version regularly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another good way to understand the OWASP Top 10 is to compare the list over
    the years. For example, let’s compare the OWASP Top 10 for 2017 with the OWASP
    Top 10 for 2021:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – Comparing OWASP TOP 10 from 2017 with 2021 (source: OWASP)](img/B21678_15_ForCEing_FS_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.1 – Comparing OWASP TOP 10 from 2017 with 2021 (source: OWASP)'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there are some additions, deletions, and merges but, overall,
    the list is very similar with some changes in the order. This makes it easier
    to refresh your knowledge every few years when the list is updated.
  prefs: []
  type: TYPE_NORMAL
- en: CWE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Owasp Top 10 includes references to the CWE, which is a community-developed
    list of common software and hardware weaknesses. You can find the list at [https://cwe.mitre.org/data/definitions/699.html](https://cwe.mitre.org/data/definitions/699.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The CWE is a very extensive list and covers a lot of topics, so it is very
    difficult to read it all. However, it is a great resource to find more information
    about a specific topic. For example, let’s look at **CWE-798: Use of Hard-coded
    Credentials** at [https://cwe.mitre.org/data/definitions/798.html](https://cwe.mitre.org/data/definitions/798.html),
    which will show us a description, relationship with other CWEs, consequences,
    and much more.'
  prefs: []
  type: TYPE_NORMAL
- en: CVE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The CVE is a list of publicly disclosed cybersecurity vulnerabilities. You can
    find the list at [https://cve.mitre.org/](https://cve.mitre.org/). This list is
    different from the CWE as it is a list of vulnerabilities that have been discovered
    in specific software products and not a list of possible weaknesses.
  prefs: []
  type: TYPE_NORMAL
- en: In simple words, the CWE is a list of possible weaknesses, and the CVE is a
    list of vulnerabilities that have been discovered in the wild. We need to be very
    aware of the CVE that can potentially affect our applications and mitigate them
    as soon as possible. One common strategy is to subscribe to the security mailing
    list of the dependencies that we use in our applications so we can be notified
    when a new CVE is discovered, or use an automated tool such as Snyk ([https://snyk.io/](https://snyk.io/))
    that will notify us when a new CVE is discovered in our dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: If we don’t have a clear strategy to mitigate the CVE, we will feel overwhelmed
    very easily by the number of CVE that are discovered every day, especially in
    the Node.js ecosystem, where it is very common to have a lot of dependencies in
    our applications.
  prefs: []
  type: TYPE_NORMAL
- en: CVE in Node.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we visit [https://www.cvedetails.com/vulnerability-list/vendor_id-12113/Nodejs.html](https://www.cvedetails.com/vulnerability-list/vendor_id-12113/Nodejs.html),
    we can see the list of CVE that have been discovered in Node.js over the years.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – CVE list](img/B21678_15_ForCEing_FS_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – CVE list
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we are going to pick the most recent one (**CVE-2023-45143**)
    and we are going to explore it in detail at [https://www.cvedetails.com/cve/CVE-2023-45143/](https://www.cvedetails.com/cve/CVE-2023-45143/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – CVE details](img/B21678_15_ForCEing_FS_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – CVE details
  prefs: []
  type: TYPE_NORMAL
- en: We should find a clear description of the vulnerability and references to the
    publication date. This will help us to determine whether we are affected by the
    vulnerability or not. Also, we can see the vulnerability category (in this case,
    **Information leak**) and the probability of exploitation activity in the next
    30 days (in this case, **1.37%**). This will help us prioritize the mitigation
    of vulnerability, and the overall score will help us to determine the severity
    of the vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: With these things in mind, we can make a fast decision about the need for mitigation.
    Also, we can find a list of references that will help us to understand the vulnerability
    in more detail and also the CWEs that are related to the vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: It is up to us to decide how to mitigate the vulnerability. In some cases, we
    can just update the dependency to include the fix; in other cases, there is no
    fix available, and we need to find a workaround or remove the dependency. In other
    cases, we can just ignore the vulnerability as it is not relevant to our application
    because it has no impact.
  prefs: []
  type: TYPE_NORMAL
- en: As a recommendation, I suggest you perform the analysis with more colleagues
    so you can have different points of view and you can make a solid team decision.
  prefs: []
  type: TYPE_NORMAL
- en: Information
  prefs: []
  type: TYPE_NORMAL
- en: Node.js is doing a great job of keeping the CVE under control. You can find
    more information about each CVE in the Node.js blog. For example, **CVE-2023-45143**
    is described at [https://nodejs.org/en/blog/vulnerability/october-2023-security-releases](https://nodejs.org/en/blog/vulnerability/october-2023-security-releases).
  prefs: []
  type: TYPE_NORMAL
- en: If you are developing modern frontend applications, you will probably use several
    libraries to build the application. Commonly, this becomes a great source of CVE
    because we have many transitive dependencies that we don’t control. Also, it is
    not easy to upgrade the dependencies because we need to wait for the maintainers
    to update them and the compatibility with other dependencies. So, please evaluate
    carefully the dependencies that you use in your applications and divide them between
    the ones that are part of the running application and the ones that are part of
    the build process only. This will simplify the review process a lot.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js threat model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Node.js has a threat model that is a great resource to understand how Node.js
    assesses the review of the vulnerabilities reported by the community. You can
    find the threat model at [https://github.com/nodejs/node/blob/main/SECURITY.md#the-nodejs-threat-model](https://github.com/nodejs/node/blob/main/SECURITY.md#the-nodejs-threat-model),
    which we elaborated on in the Node.js Security Working Group ([https://github.com/nodejs/security-wg](https://github.com/nodejs/security-wg)).
  prefs: []
  type: TYPE_NORMAL
- en: One clear idea that we can extract from the threat model is that the Node.js
    project trusts many things by default, such as the dependencies that we use in
    our applications, our own code, or the infrastructure that we use to run our applications.
    This means that we are responsible for knowing what code is running in our applications
    (ours or from third parties) and ensuring that the infrastructure is secure.
  prefs: []
  type: TYPE_NORMAL
- en: The Node.js official recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Aside from the threat model, in the Node.js Security Working Group, we have
    created a reference document that intends to extend the current threat model and
    provide extensive guidelines on how to secure a Node.js application. It includes
    a list of best practices that we recommend following to improve the security of
    your Node.js applications. We used a list of CWEs as the starting point with detailed
    mitigation strategies and recommendations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Denial of Service of HTTP** **Server (CWE-400)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DNS** **Rebinding (CWE-346)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP Request** **Smuggling (CWE-444)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Information Exposure through Timing** **Attacks (CWE-208)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Malicious Third-Party** **Modules (CWE-1357)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory Access** **Violation (CWE-284)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monkey** **Patching (CWE-349)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prototype Pollution** **Attacks (CWE-1321)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Uncontrolled Search Path** **Element (CWE-427)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the list at [https://nodejs.org/en/guides/security/](https://nodejs.org/en/guides/security/).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also find other popular community-built resources to get a better understanding
    of security in Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Node.js Best Practices* by Yoni Goldberg ([https://github.com/goldbergyoni/nodebestpractices](https://github.com/goldbergyoni/nodebestpractices))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Awesome Node.js Security resources* by Liran Tal ([https://github.com/lirantal/awesome-nodejs-security](https://github.com/lirantal/awesome-nodejs-security))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have a better understanding of security in Node.js, let’s see how
    to improve the security of our web applications in more detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the security of our applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The tools and techniques that we are going to explore in this section are evolving
    very quickly, so I suggest you keep an eye on the Node.js Security Working Group
    ([https://github.com/nodejs/security-wg](https://github.com/nodejs/security-wg))
    and the community to be aware of the latest trends. However, here is a solid checklist
    that you can use to improve the security of your applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bcrypt` library ([https://www.npmjs.com/package/bcrypt](https://www.npmjs.com/package/bcrypt))
    to encrypt the user’s password in our project:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`validator` ([https://www.npmjs.com/package/validator](https://www.npmjs.com/package/validator))
    or `joi` ([https://www.npmjs.com/package/joi](https://www.npmjs.com/package/joi))
    to validate the data. For example, you can validate an email easily as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`helmet` ([https://helmetjs.github.io/](https://helmetjs.github.io/)) to increase
    the security of our applications. You can find a great guide on how to implement
    `helmet` at [https://blog.ulisesgascon.com/how-to-use-helmet-in-express](https://blog.ulisesgascon.com/how-to-use-helmet-in-express).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pino` ([https://getpino.io/](https://getpino.io/)) to keep logs securely and
    we can use this information to audit the application and abuse from third parties.
    You can find a great guide on how to implement `pino` with Express in the official
    documentation ([https://getpino.io/#/docs/web?id=pino-with-express](https://getpino.io/#/docs/web?id=pino-with-express)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitor**: We need to understand what is going on with the application once
    it is deployed and exposed to the internet. Monitoring the application will help
    us detect downtimes, performance issues, and much more. We can include alerts
    to understand whether we are having issues in real time. We can use New Relic
    ([https://newrelic.com/](https://newrelic.com/)), Datadog ([https://www.datadoghq.com/](https://www.datadoghq.com/)),
    or Sentry ([https://sentry.io/welcome/](https://sentry.io/welcome/)). You can
    find a great guide on how to implement Sentry with Express in the official documentation
    ([https://docs.sentry.io/platforms/node/guides/express/](https://docs.sentry.io/platforms/node/guides/express/)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Track your dependencies**: You need to know your dependencies and keep them
    up to date. You can use Snyk ([https://snyk.io/](https://snyk.io/)) or Socket
    ([https://socket.dev/](https://socket.dev/)) to monitor the dependencies, be notified
    when a new CVE is discovered, and even automate the update of the dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backup and recovery**: You need to have a backup for your critical information
    and to have a recovery plan in case of a disaster. Even if you don’t suffer from
    a security incident, you could suffer from a natural disaster such as a fire or
    a flood in the data center where your information is stored. If you are depending
    on a cloud provider, you need to understand how multi-region replication works
    and how to recover the data in the case of a disaster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reduce the attack surface**: Sometimes, we code much more than is required
    by the business logic inside the core of our business. Each line of code that
    we write is a potential risk, so we can reduce the attack surface by using APIs
    in the areas that are security-critical. For example, we can use Auth0 ([https://auth0.com/](https://auth0.com/))
    to handle the authentication and authorization for us or Stripe ([https://stripe.com/](https://stripe.com/))
    to handle the payments. This will reduce the amount of code that we need to write
    and maintain, and sensitive information such as credit card numbers will be handled
    by a third party that is an expert in the area. Of course, we need to trust the
    third party and understand the cost of the service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enforce Two-factor authentication (2FA) in your services**: We need to enforce
    2FA in all the services that we use to run our company activities (Slack, GSuite,
    and so on) and the infrastructure that we use to run our applications (Github,
    AWS, Azure, and so on). This will reduce the risk of a social engineering attack.
    Also, it would be great if we could implement 2FA in our own applications to mitigate
    the risk of a stolen password from a user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Review the secrets**: Leaking secrets is a very common mistake that we can
    make. We can use tools such as GitGuardian ([https://www.gitguardian.com/](https://www.gitguardian.com/))
    to scan our repositories and be notified if we have leaked secrets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implement good practices**: There are many good practices that we can follow
    as a team to improve the security of our applications. For example, use a control
    version, use pull requests to review the changes, use a CI/CD tool to automate
    the review of the code, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automation**: Once you have a CI/CD tool in place, you can automate many
    tasks, even those related to infrastructure. For example, you can use Terraform
    ([https://www.terraform.io/](https://www.terraform.io/)) to automate the creation
    of the infrastructure and to reduce human errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keep learning**: Security is no different from any other technical topic;
    it is evolving very fast and we need to keep learning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use a secure protocol**: We need to use secure protocols such as HTTPS to
    protect the communication between the client and the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put it into practice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have a checklist and a better understanding of security in Node.js,
    I suggest you go through the application that we built in the previous chapters
    and review the application to find possible improvements to make it more secure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some ideas to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Review the dependencies and check whether there are any known vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a linter to enforce the code style
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a static code analysis tool to find possible bugs, such as SonarQube or
    CodeQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add key libraries to improve security, such as `helmet` or `validator`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a control version system and use a CI/CD tool to automate the review of
    the code, such as Github Actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a control version system to review the changes in pull requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will explore how we can take advantage of our security
    knowledge to become an ethical hacker.
  prefs: []
  type: TYPE_NORMAL
- en: Becoming an ethical hacker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we think about hackers, we tend to think about cyber criminals who are
    trying to steal our data or take control of our systems. In reality, it is not
    that simple. Let’s read the definition of a hacker from the paper *How Hackers
    Think: A Study of Cybersecurity Experts and Their Mental* *Models* ([https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2326634](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2326634)):'
  prefs: []
  type: TYPE_NORMAL
- en: “Regardless of what type of hacker a person is, identifying system weaknesses
    requires logical reasoning and the ability to systematically think through possible
    actions, alternatives, and potential conclusions. This combination of reasoning
    and systematic thinking implies the use of mental models. Hacking is a cognitive
    activity that requires exceptional technical and reasoning abilities.”
  prefs: []
  type: TYPE_NORMAL
- en: So, basically, we are talking about a person with high technical skills who
    is doing things by thinking out of the box. The problem is not the activity itself
    but the intention behind the activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today, we define an ethical hacker as a hacker who does things with good intentions.
    For example, when you are doing a penetration test on your own application to
    find possible vulnerabilities, you are doing ethical hacking. Sometimes, you end
    up discovering vulnerabilities in other applications/libraries/services that you
    don’t own. In those cases, we can face two different scenarios: doing a **coordinated
    vulnerability disclosure** (previously known as a **responsible disclosure**)
    or trying a **bug** **bounty program**.'
  prefs: []
  type: TYPE_NORMAL
- en: Coordinated vulnerability disclosure (CVD)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you discover a vulnerability in a third-party application/library/service,
    you can contact the owner of the application/library/service and explain the vulnerability
    and how to mitigate it. While the process seems simple, it is not always easy.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, an unknown vulnerability can affect many users, companies, and
    services. So, you need to be very careful about how you communicate the vulnerability
    and to whom. Also, this will require a validation process to ensure that the vulnerability
    is real and that it is not a false positive. Then, it is expected that a patch
    will be developed and made available to the affected services before the public
    disclosure is done.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the process easier, many companies and open source projects have a
    security policy that explains how to report a vulnerability and what to expect
    from the process. For example, you can find the Node.js security policy at [https://nodejs.org/en/security/](https://nodejs.org/en/security/):'
  prefs: []
  type: TYPE_NORMAL
- en: “Normally your report will be acknowledged within 5 days, and you’ll receive
    a more detailed response to your report within 10 days indicating the next steps
    in handling your submission. These timelines may extend when our triage volunteers
    are away on holiday, particularly at the end of the year.
  prefs: []
  type: TYPE_NORMAL
- en: After the initial reply to your report, the security team will endeavor to keep
    you informed of the progress being made towards a fix and full announcement, and
    may ask for additional information or guidance surrounding the reported issue.”
  prefs: []
  type: TYPE_NORMAL
- en: Other companies, such as Google, have a dedicated website to report vulnerabilities
    in their products ([https://www.google.com/about/appsecurity/](https://www.google.com/about/appsecurity/)).
  prefs: []
  type: TYPE_NORMAL
- en: Bounty programs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some companies and open source projects have a bounty program that will reward
    you for finding vulnerabilities in their applications/libraries/services. Actually,
    the scenario is very similar to CVD but, in this case, you have clear rules regarding
    engagement and boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see the Node.js bounty program at [https://hackerone.com/nodejs](https://hackerone.com/nodejs)
    to get a better understanding of the process. We also have a hacktivity page ([https://hackerone.com/nodejs/hacktivity](https://hackerone.com/nodejs/hacktivity))
    where we can see the reports that have been submitted and the status of the reports
    with plenty of details, including the rewards.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Node.js bug bounty program](img/B21678_15_ForCEing_FS_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.4 – Node.js bug bounty program
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the figure, there is a list of disclosure information that
    leads, in many cases, to security patches. Feel free to explore them and see how
    the communication was made and how the process worked in each case. You can learn
    a lot from these disclosed reports.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the skills
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Building software is different from breaking software. The are many skills that
    you need to learn and some tools to get familiar with. One great overview of the
    skills that you need to learn is [https://roadmap.sh/](https://roadmap.sh/), which
    has a section dedicated to cybersecurity ([https://roadmap.sh/cyber-security](https://roadmap.sh/cyber-security)).
  prefs: []
  type: TYPE_NORMAL
- en: In order to get more practical skills, you can use the *Hack the Box* platform
    ([https://www.hackthebox.eu/](https://www.hackthebox.eu/)), which will allow you
    to practice your skills in a safe environment. The challenges in *Hack the Box*
    are used as a learning tool by many hackers and security professionals in the
    community, so you can find a lot of write-ups on the internet that will help you
    to solve the challenges when you get stuck.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the importance of security in modern web applications
    and the impact that a security incident can have on the business. Then, we learned
    how to get started with security in our day-to-day work by using OWASP, CWE, CVE,
    the Node.js threat model, and the official Node.js best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we learned how we can raise the security of our applications by
    using a simple checklist and how to apply it in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how to take advantage of our security knowledge to become
    an ethical hacker.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn how to deploy our application to
    the internet and local devices in a different way.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*CVE-2020-19909 is everything that is wrong with* *CVEs*: [https://daniel.haxx.se/blog/2023/08/26/cve-2020-19909-is-everything-that-is-wrong-with-cves/](https://daniel.haxx.se/blog/2023/08/26/cve-2020-19909-is-everything-that-is-wrong-with-cves/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Auditing package dependencies for security* *vulnerabilities*: [https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities](https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OWASP NPM Security best* *practices*: [https://cheatsheetseries.owasp.org/cheatsheets/NPM_Security_Cheat_Sheet.html#npm-security-best-practices](https://cheatsheetseries.owasp.org/cheatsheets/NPM_Security_Cheat_Sheet.html#npm-security-best-practices)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*DEFCON – The Full* *Documentary*: [https://www.youtube.com/watch?v=3ctQOmjQyYg](https://www.youtube.com/watch?v=3ctQOmjQyYg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*State of Open Source Security* *2023*: [https://snyk.io/reports/open-source-security/](https://snyk.io/reports/open-source-security/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Threats and* *Mitigations*: [https://docs.npmjs.com/threats-and-mitigations#by-typosquatting--dependency-confusion](https://docs.npmjs.com/threats-and-mitigations#by-typosquatting--dependency-confusion)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part 5: Mastering Node.js Deployment and Portability'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Part 5*, we will deploy our application to the public internet. We will
    learn how to decide the best approach based on our requirements, then we will
    use virtual machines in DigitalOcean to deploy the application using PM2, and
    we will also learn how to dockerize our application for better portability.
  prefs: []
  type: TYPE_NORMAL
- en: We will use GitHub to store our application code, and we will learn how to create
    a continuous deployment pipeline for our projects.
  prefs: []
  type: TYPE_NORMAL
- en: Our last step in the journey will be to use Cloudflare to manage our domain
    and the SSL certificates and we will explore the Twelve-Factor App principles.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B21678_16.xhtml#_idTextAnchor416), *Deploying Node.js Applications*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 17*](B21678_17.xhtml#_idTextAnchor436), *Dockerizing a Node.js Application*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
