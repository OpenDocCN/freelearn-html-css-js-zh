- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Securing Web Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护Web应用程序
- en: In this chapter, we are going to explore how to improve the security of our
    web applications. We will start by discussing the impact of a security incident
    on businesses and how to get started with security in our day-to-day work. Then
    we will explore key resources such as the OWASP Top 10, the **Common Weakness
    Enumeration** (**CWE**), and the **Common Vulnerabilities and Exposures** (**CVE**)
    to improve our understanding of security in modern web applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何提高我们Web应用程序的安全性。我们将从讨论安全事件对业务的影响以及如何在日常工作中开始考虑安全开始。然后我们将探讨关键资源，如OWASP
    Top 10、**常见弱点枚举**（**CWE**）和**常见漏洞和暴露**（**CVE**），以加深我们对现代Web应用程序安全性的理解。
- en: Then, we will explore the Node.js threat model and the official Node.js best
    practices to improve the security of our applications. We will apply this knowledge
    to create a checklist that we can use to improve the security of our existing
    applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将探讨Node.js威胁模型和官方Node.js最佳实践，以提高我们应用程序的安全性。我们将应用这些知识来创建一个清单，我们可以使用它来提高现有应用程序的安全性。
- en: Finally, we will explore how to take advantage of our security knowledge to
    become an ethical hacker and how to skill up while participating in community
    events and bug bounty programs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将探讨如何利用我们的安全知识成为道德黑客，以及如何在参与社区活动和漏洞赏金计划中提升技能。
- en: 'To sum up, here are the main topics that we will explore in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，以下是本章我们将探讨的主要主题：
- en: The importance of security
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全的重要性
- en: Where to start with security
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从哪里开始考虑安全
- en: Improving the security of our applications
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高我们应用程序的安全性
- en: Becoming an ethical hacker
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成为道德黑客
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code files for the chapter can be found at [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在[https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)找到。
- en: The importance of security
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全的重要性
- en: Historically, the security of applications was not considered a priority by
    developers. The main reason was that the security culture was not present in the
    developers’ mindset as the main goal was to deliver features as soon as possible
    and, historically, the systems that we built were not critical for the business
    or exposed to the internet 24/7 as they are today.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，开发者并没有将应用程序的安全性视为优先事项。主要原因在于，安全文化并没有在开发者的思维中占据主导地位，因为主要目标是尽快交付功能，而历史上我们构建的系统对业务来说并非至关重要，也没有像今天这样全天候暴露在互联网上。
- en: '“There are only two types of companies: those that have been hacked, and those
    that will be.”'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “只有两种公司：那些已经被黑客攻击的公司，以及那些将要被攻击的公司。”
- en: – Robert Mueller, FBI Director, 2012
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: – 罗伯特·穆勒，FBI局长，2012年
- en: Nowadays, we depend on a lot of third-party libraries and services that we don’t
    control, and we don’t know whether they are secure or not. We build very complex
    systems with many layers beyond our own business logic, and we need to be aware
    of the risks that we are taking and how to mitigate them.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们依赖于许多第三方库和服务，我们无法控制它们，也不知道它们是否安全。我们构建了非常复杂的系统，这些系统包含许多超出我们自身业务逻辑的层级，我们需要意识到我们承担的风险以及如何减轻这些风险。
- en: At the end of the day, it is up to us as individuals to be aware of the risks,
    and the security of our applications is our responsibility. Quite often, we assume
    that security is someone else’s responsibility but that is not true. Even in organizations
    with a security team, developers are the first line of defense and the ones that
    need to be aware of the risks and how to mitigate them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们作为个人需要意识到风险，我们应用程序的安全性是我们的责任。很多时候，我们假设安全是别人的责任，但这并不正确。即使在拥有安全团队的组织中，开发者也是第一道防线，他们需要意识到风险以及如何减轻这些风险。
- en: Social engineering
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社会工程
- en: I love Hollywood hacker movies that use super sophisticated tools to hack fictional
    systems, but the reality is that the most common attack vector is social engineering.
    It is easier to trick a human than to hack a system, which is why social engineering
    is the most common attack vector. There are many techniques (phishing, pretexting,
    baiting, and so on) and they evolve and get more sophisticated over time. All
    these types of attacks have psychological manipulation in common. This can include
    the use of authoritative roles (such as the attacker pretending to be a police
    officer), or the attacker using scarcity tactics (such as saying there are only
    five devices left at an ultra-cheap price in a special offer, which is a scam
    offer). These are just two examples but many more tactics use the weaknesses/desires
    that we all share as human beings.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: “Social engineering bypasses all technologies, including firewalls.”
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: – Kevin Mitnick
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: We all have received emails that claim to be from our bank or from a service
    that we use, asking us to click on a very suspicious link or to download a file.
    Most of these emails are phishing attacks that your email provider will detect
    and classify as spam. As technologists, we think that we are not going to fall
    for these kinds of attacks but the reality is that there are more and more sophisticated
    attacks that are targeting developers and that are very difficult to detect.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Let me introduce to you the `lodash` package but you make a typo and instead
    install the `lodahs` package.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Two of the malicious activities that this can do are search for `.env` files
    in your project and send them to the attacker’s server or install a backdoor in
    your application. There are many more activities, too.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: We have seen this kind of attack in the past; for example, the popular `cross-env`
    package ([https://www.npmjs.com/package/cross-env](https://www.npmjs.com/package/cross-env)),
    which is used to set environment variables in a cross-platform way, has a malicious
    version called `crossenv` ([https://snyk.io/advisor/npm-package/crossenv](https://snyk.io/advisor/npm-package/crossenv))
    that contains a malicious payload.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: You can find more details about this kind of attack at [https://snyk.io/blog/typosquatting-attacks/](https://snyk.io/blog/typosquatting-attacks/).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Information
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Currently, npm has policies that prevent you from publishing packages with similar
    names to ones that have been previously published in order to prevent this kind
    of attack ([https://docs.npmjs.com/threats-and-mitigations#by-typosquatting--dependency-confusion](https://docs.npmjs.com/threats-and-mitigations#by-typosquatting--dependency-confusion)).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Risks in the supply chain
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For many years, I was evangelizing about the importance of security in the supply
    chain. It is sometimes hard to understand the risks because the supply chain is
    not visible to us and the impact on our code is not as clear as a SQL injection
    or a memory leak.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: In 2020, I wrote a blog post discussing how we can build a backdoor in a Node.js
    application using a malicious package from npm ([https://snyk.io/blog/what-is-a-backdoor/](https://snyk.io/blog/what-is-a-backdoor/)).
    A backdoor is a piece of code that will allow us to take control of the application
    remotely. Basically, we have remote access to the operating system terminal to
    execute any command that we want with the privileges of the user who is running
    the application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在2020年，我撰写了一篇博客文章，讨论了如何使用npm上的恶意包在Node.js应用程序中构建后门（[https://snyk.io/blog/what-is-a-backdoor/](https://snyk.io/blog/what-is-a-backdoor/)）。后门是一段代码，将允许我们远程控制应用程序。基本上，我们有了对操作系统终端的远程访问权限，可以以运行应用程序的用户的权限执行任何我们想要的命令。
- en: To make it more realistic, I created a malicious Express middleware that allows
    us to execute any command that we want in the operating system terminal. Then,
    I published the package in npm to make it available to the community. The package
    was called `browser-redirect` and the expected behavior was to redirect any user
    who was not using a Chromium-based browser to [https://browsehappy.com/](https://browsehappy.com/).
    To do that, you only need to use the package as a middleware in your Express application.
    The package performed the expected behavior but it also did more malicious things
    in the background, including adding specific headers to the HTTP response that
    helps find infected servers across the internet with tools such as Shodan ([https://www.shodan.io/](https://www.shodan.io/))
    and executing commands in the operating system terminal when certain conditions
    were met. This code didn’t require any external library to perform any of the
    malicious activities, so the malicious payload was not easily recognizable when
    running scanning tools.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其更真实，我创建了一个恶意的Express中间件，允许我们在操作系统终端中执行任何我们想要的命令。然后，我将这个包发布到npm上，使其对社区可用。这个包被命名为`browser-redirect`，预期行为是将任何未使用基于Chromium的浏览器的用户重定向到[https://browsehappy.com/](https://browsehappy.com/)。为此，你只需将这个包作为中间件在你的Express应用程序中使用。这个包执行了预期的行为，但在后台还做了更多恶意的事情，包括向HTTP响应中添加特定的头信息，这有助于使用Shodan（[https://www.shodan.io/](https://www.shodan.io/)）等工具在互联网上找到受感染的服务器，并在满足某些条件时在操作系统终端中执行命令。这段代码不需要任何外部库来执行任何恶意活动，因此恶意负载在运行扫描工具时不易被识别。
- en: Information
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: You can find the blog post in the Snyk blog ([https://snyk.io/blog/what-is-a-backdoor/](https://snyk.io/blog/what-is-a-backdoor/))
    with a detailed explanation of the code execution, mitigation strategies, and
    much more.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Snyk博客（[https://snyk.io/blog/what-is-a-backdoor/](https://snyk.io/blog/what-is-a-backdoor/)）中找到这篇博客文章，其中详细解释了代码执行、缓解策略等内容。
- en: The business impact
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 商业影响
- en: Any security incident has a direct impact on the business. We can lose our reputation
    and the trust of our customers. Also, the incident can directly affect our clients;
    for example, if we suffer a ransomware attack and we cannot provide the service
    to our customers or, even worse, if we lose the data of our customers, that can
    lead to legal problems and additional attacks directly targeting our customers.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 任何安全事件都会对业务产生直接影响。我们可能会失去我们的声誉和客户的信任。此外，事件可能会直接影响到我们的客户；例如，如果我们遭受勒索软件攻击，我们无法向客户提供服务，或者更糟糕的是，如果我们丢失了客户的资料，这可能导致法律问题以及直接针对我们的客户的额外攻击。
- en: Data breaches are so common that we don’t even pay attention to them in the
    mass media. However, the impact on users can be very high. In recent years, we
    have seen many data breaches that have affected millions of users, providing access
    to information such as passwords, credit card details, payment logs, sexual orientation,
    criminal records, geolocation records, and so on. You can find a detailed ranking
    at [https://www.upguard.com/blog/biggest-data-breaches](https://www.upguard.com/blog/biggest-data-breaches).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 数据泄露事件如此普遍，以至于我们在大众媒体上甚至都不太关注它们。然而，对用户的影响可能非常高。近年来，我们目睹了许多影响数百万用户的数据泄露事件，泄露了诸如密码、信用卡详情、支付日志、性取向、犯罪记录、地理位置记录等信息。你可以在[https://www.upguard.com/blog/biggest-data-breaches](https://www.upguard.com/blog/biggest-data-breaches)找到详细的排名。
- en: In 2013, Troy Hunt ([https://www.troyhunt.com/about/](https://www.troyhunt.com/about/))
    created the website [https://haveibeenpwned.com/](https://haveibeenpwned.com/)
    where you can check whether your email address has been compromised in a data
    breach. You can also set up an alert to be notified if your email address appears
    in a new data breach.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen the importance of security in the business, let’s see
    where we can start to learn more about security in the next section.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Where to start with security
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is a vast topic, and it will require several books to cover all the
    aspects; even then, it will require more resources to keep it up to date. In this
    section, we will explore some resources to start learning but with a limited scope
    to the Node.js ecosystem and web application development.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: We will learn about the OWASP Top 10, CVE, and CWE so we can have a clear compass
    to navigate through the security world as beginners.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: OWASP Top 10 overview
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many possible attacks can affect our applications and we cannot cover all of
    them, so the task becomes overwhelming. To prioritize the most common attacks,
    the **Open Web Application Security Project** (**OWASP**) foundation created a
    list of the 10 most common attacks that affect web applications, and this is updated
    every few years. You can find the list at [https://owasp.org/www-project-top-ten](https://owasp.org/www-project-top-ten).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see the list of the OWASP Top 10 for 2021:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '**A01:2021 Broken** **Access Control**'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A02:2021** **Cryptographic Failures**'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A03:2021 Injection**'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A04:2021** **Insecure Design**'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A05:2021** **Security Misconfiguration**'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A06:2021 Vulnerable and** **Outdated Components**'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A07:2021 Identification and** **Authentication Failures**'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A08:2021 Software and Data** **Integrity Failures**'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A09:2021 Security Logging and** **Monitoring Failures**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A10:2021 Server Side Request** **Forgery (SSRF)**'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I suggest you read the OWASP Top 10 carefully and try to find what the attacks
    have in common so you can understand the root cause of the attacks to help you
    define better strategies to mitigate them.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we can see that **A05 Security Misconfiguration** and **A06 -
    Vulnerable and Outdated Components** have a relationship with how we install and
    configure dependencies and how we keep them up to date. So, we can start to think
    about how to improve our CI/CD pipeline to automate the installation and updating
    of the dependencies and we can discuss whether we need a deeper understanding
    of the dependencies that we rely on. In a very specific case, this can be that
    we have an NGINX (reverse proxy) instance that is not properly configured and
    is outdated, and we need to put some effort into improving the configuration and
    updating the NGINX version regularly.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'Another good way to understand the OWASP Top 10 is to compare the list over
    the years. For example, let’s compare the OWASP Top 10 for 2017 with the OWASP
    Top 10 for 2021:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – Comparing OWASP TOP 10 from 2017 with 2021 (source: OWASP)](img/B21678_15_ForCEing_FS_1.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.1 – Comparing OWASP TOP 10 from 2017 with 2021 (source: OWASP)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there are some additions, deletions, and merges but, overall,
    the list is very similar with some changes in the order. This makes it easier
    to refresh your knowledge every few years when the list is updated.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: CWE
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Owasp Top 10 includes references to the CWE, which is a community-developed
    list of common software and hardware weaknesses. You can find the list at [https://cwe.mitre.org/data/definitions/699.html](https://cwe.mitre.org/data/definitions/699.html).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'The CWE is a very extensive list and covers a lot of topics, so it is very
    difficult to read it all. However, it is a great resource to find more information
    about a specific topic. For example, let’s look at **CWE-798: Use of Hard-coded
    Credentials** at [https://cwe.mitre.org/data/definitions/798.html](https://cwe.mitre.org/data/definitions/798.html),
    which will show us a description, relationship with other CWEs, consequences,
    and much more.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: CVE
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The CVE is a list of publicly disclosed cybersecurity vulnerabilities. You can
    find the list at [https://cve.mitre.org/](https://cve.mitre.org/). This list is
    different from the CWE as it is a list of vulnerabilities that have been discovered
    in specific software products and not a list of possible weaknesses.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: In simple words, the CWE is a list of possible weaknesses, and the CVE is a
    list of vulnerabilities that have been discovered in the wild. We need to be very
    aware of the CVE that can potentially affect our applications and mitigate them
    as soon as possible. One common strategy is to subscribe to the security mailing
    list of the dependencies that we use in our applications so we can be notified
    when a new CVE is discovered, or use an automated tool such as Snyk ([https://snyk.io/](https://snyk.io/))
    that will notify us when a new CVE is discovered in our dependencies.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: If we don’t have a clear strategy to mitigate the CVE, we will feel overwhelmed
    very easily by the number of CVE that are discovered every day, especially in
    the Node.js ecosystem, where it is very common to have a lot of dependencies in
    our applications.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: CVE in Node.js
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we visit [https://www.cvedetails.com/vulnerability-list/vendor_id-12113/Nodejs.html](https://www.cvedetails.com/vulnerability-list/vendor_id-12113/Nodejs.html),
    we can see the list of CVE that have been discovered in Node.js over the years.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – CVE list](img/B21678_15_ForCEing_FS_2.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – CVE list
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we are going to pick the most recent one (**CVE-2023-45143**)
    and we are going to explore it in detail at [https://www.cvedetails.com/cve/CVE-2023-45143/](https://www.cvedetails.com/cve/CVE-2023-45143/):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – CVE details](img/B21678_15_ForCEing_FS_3.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – CVE details
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: We should find a clear description of the vulnerability and references to the
    publication date. This will help us to determine whether we are affected by the
    vulnerability or not. Also, we can see the vulnerability category (in this case,
    **Information leak**) and the probability of exploitation activity in the next
    30 days (in this case, **1.37%**). This will help us prioritize the mitigation
    of vulnerability, and the overall score will help us to determine the severity
    of the vulnerability.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该找到对漏洞的明确描述和发布日期的引用。这将帮助我们确定我们是否受到该漏洞的影响。此外，我们可以看到漏洞类别（在这种情况下，**信息泄露**）和未来30天内利用活动的可能性（在这种情况下，**1.37**%）。这将帮助我们优先考虑缓解漏洞，而整体评分将帮助我们确定漏洞的严重性。
- en: With these things in mind, we can make a fast decision about the need for mitigation.
    Also, we can find a list of references that will help us to understand the vulnerability
    in more detail and also the CWEs that are related to the vulnerability.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些因素，我们可以快速决定是否需要缓解。此外，我们可以找到一份参考文献列表，这将帮助我们更详细地了解漏洞，以及与漏洞相关的CWEs。
- en: It is up to us to decide how to mitigate the vulnerability. In some cases, we
    can just update the dependency to include the fix; in other cases, there is no
    fix available, and we need to find a workaround or remove the dependency. In other
    cases, we can just ignore the vulnerability as it is not relevant to our application
    because it has no impact.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如何缓解漏洞取决于我们。在某些情况下，我们只需更新依赖项以包含修复即可；在其他情况下，没有可用的修复，我们需要找到一种解决方案或删除依赖项。在其他情况下，我们可以简单地忽略漏洞，因为它与我们应用程序不相关，因为它没有影响。
- en: As a recommendation, I suggest you perform the analysis with more colleagues
    so you can have different points of view and you can make a solid team decision.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 作为建议，我建议您与更多同事一起进行分析，这样您就可以有不同的观点，并做出坚实的团队决策。
- en: Information
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: Node.js is doing a great job of keeping the CVE under control. You can find
    more information about each CVE in the Node.js blog. For example, **CVE-2023-45143**
    is described at [https://nodejs.org/en/blog/vulnerability/october-2023-security-releases](https://nodejs.org/en/blog/vulnerability/october-2023-security-releases).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js在控制CVE方面做得很好。您可以在Node.js博客中找到有关每个CVE的更多信息。例如，**CVE-2023-45143**在[https://nodejs.org/en/blog/vulnerability/october-2023-security-releases](https://nodejs.org/en/blog/vulnerability/october-2023-security-releases)中进行了描述。
- en: If you are developing modern frontend applications, you will probably use several
    libraries to build the application. Commonly, this becomes a great source of CVE
    because we have many transitive dependencies that we don’t control. Also, it is
    not easy to upgrade the dependencies because we need to wait for the maintainers
    to update them and the compatibility with other dependencies. So, please evaluate
    carefully the dependencies that you use in your applications and divide them between
    the ones that are part of the running application and the ones that are part of
    the build process only. This will simplify the review process a lot.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在开发现代前端应用程序，您可能会使用几个库来构建应用程序。通常，这会成为CVE的一个大来源，因为我们有许多我们不控制的间接依赖。而且，升级依赖项并不容易，因为我们需要等待维护者更新它们，并且需要与其他依赖项兼容。因此，请仔细评估您在应用程序中使用的依赖项，并将它们分为运行应用程序的部分和仅作为构建过程的一部分。这将大大简化审查过程。
- en: Node.js threat model
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node.js威胁模型
- en: Node.js has a threat model that is a great resource to understand how Node.js
    assesses the review of the vulnerabilities reported by the community. You can
    find the threat model at [https://github.com/nodejs/node/blob/main/SECURITY.md#the-nodejs-threat-model](https://github.com/nodejs/node/blob/main/SECURITY.md#the-nodejs-threat-model),
    which we elaborated on in the Node.js Security Working Group ([https://github.com/nodejs/security-wg](https://github.com/nodejs/security-wg)).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js有一个威胁模型，这是一个很好的资源，可以帮助理解Node.js如何评估社区报告的漏洞。您可以在[https://github.com/nodejs/node/blob/main/SECURITY.md#the-nodejs-threat-model](https://github.com/nodejs/node/blob/main/SECURITY.md#the-nodejs-threat-model)找到威胁模型，我们已在Node.js安全工作组([https://github.com/nodejs/security-wg](https://github.com/nodejs/security-wg))中进行了详细阐述。
- en: One clear idea that we can extract from the threat model is that the Node.js
    project trusts many things by default, such as the dependencies that we use in
    our applications, our own code, or the infrastructure that we use to run our applications.
    This means that we are responsible for knowing what code is running in our applications
    (ours or from third parties) and ensuring that the infrastructure is secure.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: The Node.js official recommendations
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Aside from the threat model, in the Node.js Security Working Group, we have
    created a reference document that intends to extend the current threat model and
    provide extensive guidelines on how to secure a Node.js application. It includes
    a list of best practices that we recommend following to improve the security of
    your Node.js applications. We used a list of CWEs as the starting point with detailed
    mitigation strategies and recommendations:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '**Denial of Service of HTTP** **Server (CWE-400)**'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DNS** **Rebinding (CWE-346)**'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP Request** **Smuggling (CWE-444)**'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Information Exposure through Timing** **Attacks (CWE-208)**'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Malicious Third-Party** **Modules (CWE-1357)**'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory Access** **Violation (CWE-284)**'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monkey** **Patching (CWE-349)**'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prototype Pollution** **Attacks (CWE-1321)**'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Uncontrolled Search Path** **Element (CWE-427)**'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the list at [https://nodejs.org/en/guides/security/](https://nodejs.org/en/guides/security/).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also find other popular community-built resources to get a better understanding
    of security in Node.js:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '*Node.js Best Practices* by Yoni Goldberg ([https://github.com/goldbergyoni/nodebestpractices](https://github.com/goldbergyoni/nodebestpractices))'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Awesome Node.js Security resources* by Liran Tal ([https://github.com/lirantal/awesome-nodejs-security](https://github.com/lirantal/awesome-nodejs-security))'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have a better understanding of security in Node.js, let’s see how
    to improve the security of our web applications in more detail in the next section.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Improving the security of our applications
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The tools and techniques that we are going to explore in this section are evolving
    very quickly, so I suggest you keep an eye on the Node.js Security Working Group
    ([https://github.com/nodejs/security-wg](https://github.com/nodejs/security-wg))
    and the community to be aware of the latest trends. However, here is a solid checklist
    that you can use to improve the security of your applications:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '`bcrypt` library ([https://www.npmjs.com/package/bcrypt](https://www.npmjs.com/package/bcrypt))
    to encrypt the user’s password in our project:'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`validator` ([https://www.npmjs.com/package/validator](https://www.npmjs.com/package/validator))
    or `joi` ([https://www.npmjs.com/package/joi](https://www.npmjs.com/package/joi))
    to validate the data. For example, you can validate an email easily as follows:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`helmet` ([https://helmetjs.github.io/](https://helmetjs.github.io/)) to increase
    the security of our applications. You can find a great guide on how to implement
    `helmet` at [https://blog.ulisesgascon.com/how-to-use-helmet-in-express](https://blog.ulisesgascon.com/how-to-use-helmet-in-express).'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `helmet` ([https://helmetjs.github.io/](https://helmetjs.github.io/)) 来提高我们应用程序的安全性。您可以在
    [https://blog.ulisesgascon.com/how-to-use-helmet-in-express](https://blog.ulisesgascon.com/how-to-use-helmet-in-express)
    找到如何实现 `helmet` 的优秀指南。
- en: '`pino` ([https://getpino.io/](https://getpino.io/)) to keep logs securely and
    we can use this information to audit the application and abuse from third parties.
    You can find a great guide on how to implement `pino` with Express in the official
    documentation ([https://getpino.io/#/docs/web?id=pino-with-express](https://getpino.io/#/docs/web?id=pino-with-express)).'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `pino` ([https://getpino.io/](https://getpino.io/)) 来安全地保存日志，我们可以使用这些信息来审计应用程序和来自第三方的滥用。您可以在官方文档中找到如何使用
    Express 实现 `pino` 的优秀指南 ([https://getpino.io/#/docs/web?id=pino-with-express](https://getpino.io/#/docs/web?id=pino-with-express))。
- en: '**Monitor**: We need to understand what is going on with the application once
    it is deployed and exposed to the internet. Monitoring the application will help
    us detect downtimes, performance issues, and much more. We can include alerts
    to understand whether we are having issues in real time. We can use New Relic
    ([https://newrelic.com/](https://newrelic.com/)), Datadog ([https://www.datadoghq.com/](https://www.datadoghq.com/)),
    or Sentry ([https://sentry.io/welcome/](https://sentry.io/welcome/)). You can
    find a great guide on how to implement Sentry with Express in the official documentation
    ([https://docs.sentry.io/platforms/node/guides/express/](https://docs.sentry.io/platforms/node/guides/express/)).'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控**：一旦应用程序部署并暴露在互联网上，我们需要了解其运行情况。监控应用程序将帮助我们检测停机时间、性能问题等。我们可以设置警报以实时了解是否存在问题。我们可以使用
    New Relic ([https://newrelic.com/](https://newrelic.com/))、Datadog ([https://www.datadoghq.com/](https://www.datadoghq.com/))
    或 Sentry ([https://sentry.io/welcome/](https://sentry.io/welcome/))。您可以在官方文档中找到如何使用
    Express 实现 Sentry 的优秀指南 ([https://docs.sentry.io/platforms/node/guides/express/](https://docs.sentry.io/platforms/node/guides/express/))。'
- en: '**Track your dependencies**: You need to know your dependencies and keep them
    up to date. You can use Snyk ([https://snyk.io/](https://snyk.io/)) or Socket
    ([https://socket.dev/](https://socket.dev/)) to monitor the dependencies, be notified
    when a new CVE is discovered, and even automate the update of the dependencies.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跟踪依赖项**：您需要了解您的依赖项并保持它们更新。您可以使用 Snyk ([https://snyk.io/](https://snyk.io/))
    或 Socket ([https://socket.dev/](https://socket.dev/)) 来监控依赖项，当发现新的 CVE 时会收到通知，甚至可以自动化依赖项的更新。'
- en: '**Backup and recovery**: You need to have a backup for your critical information
    and to have a recovery plan in case of a disaster. Even if you don’t suffer from
    a security incident, you could suffer from a natural disaster such as a fire or
    a flood in the data center where your information is stored. If you are depending
    on a cloud provider, you need to understand how multi-region replication works
    and how to recover the data in the case of a disaster.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**备份和恢复**：您需要为您的关键信息进行备份，并在发生灾难时制定恢复计划。即使您没有遭受安全事件，您也可能遭受自然灾害，例如火灾或洪水，这些灾害可能发生在存储您信息的数据中心。如果您依赖于云服务提供商，您需要了解多区域复制的工作原理以及如何在灾难发生时恢复数据。'
- en: '**Reduce the attack surface**: Sometimes, we code much more than is required
    by the business logic inside the core of our business. Each line of code that
    we write is a potential risk, so we can reduce the attack surface by using APIs
    in the areas that are security-critical. For example, we can use Auth0 ([https://auth0.com/](https://auth0.com/))
    to handle the authentication and authorization for us or Stripe ([https://stripe.com/](https://stripe.com/))
    to handle the payments. This will reduce the amount of code that we need to write
    and maintain, and sensitive information such as credit card numbers will be handled
    by a third party that is an expert in the area. Of course, we need to trust the
    third party and understand the cost of the service.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少攻击面**：有时，我们在业务逻辑的核心部分编写的代码比业务逻辑本身所需的要多。我们编写的每一行代码都是一个潜在的风险，因此我们可以通过在安全关键区域使用
    API 来减少攻击面。例如，我们可以使用 Auth0 ([https://auth0.com/](https://auth0.com/)) 来处理我们的身份验证和授权，或者使用
    Stripe ([https://stripe.com/](https://stripe.com/)) 来处理支付。这将减少我们需要编写和维护的代码量，并且敏感信息，如信用卡号码，将由该领域的专家第三方处理。当然，我们需要信任第三方并了解服务的成本。'
- en: '**Enforce Two-factor authentication (2FA) in your services**: We need to enforce
    2FA in all the services that we use to run our company activities (Slack, GSuite,
    and so on) and the infrastructure that we use to run our applications (Github,
    AWS, Azure, and so on). This will reduce the risk of a social engineering attack.
    Also, it would be great if we could implement 2FA in our own applications to mitigate
    the risk of a stolen password from a user.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Review the secrets**: Leaking secrets is a very common mistake that we can
    make. We can use tools such as GitGuardian ([https://www.gitguardian.com/](https://www.gitguardian.com/))
    to scan our repositories and be notified if we have leaked secrets.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implement good practices**: There are many good practices that we can follow
    as a team to improve the security of our applications. For example, use a control
    version, use pull requests to review the changes, use a CI/CD tool to automate
    the review of the code, and so on.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automation**: Once you have a CI/CD tool in place, you can automate many
    tasks, even those related to infrastructure. For example, you can use Terraform
    ([https://www.terraform.io/](https://www.terraform.io/)) to automate the creation
    of the infrastructure and to reduce human errors.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keep learning**: Security is no different from any other technical topic;
    it is evolving very fast and we need to keep learning.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use a secure protocol**: We need to use secure protocols such as HTTPS to
    protect the communication between the client and the server.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put it into practice
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have a checklist and a better understanding of security in Node.js,
    I suggest you go through the application that we built in the previous chapters
    and review the application to find possible improvements to make it more secure.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some ideas to get started:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Review the dependencies and check whether there are any known vulnerabilities
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a linter to enforce the code style
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a static code analysis tool to find possible bugs, such as SonarQube or
    CodeQL
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add key libraries to improve security, such as `helmet` or `validator`
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a control version system and use a CI/CD tool to automate the review of
    the code, such as Github Actions
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a control version system to review the changes in pull requests
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will explore how we can take advantage of our security
    knowledge to become an ethical hacker.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Becoming an ethical hacker
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we think about hackers, we tend to think about cyber criminals who are
    trying to steal our data or take control of our systems. In reality, it is not
    that simple. Let’s read the definition of a hacker from the paper *How Hackers
    Think: A Study of Cybersecurity Experts and Their Mental* *Models* ([https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2326634](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2326634)):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: “Regardless of what type of hacker a person is, identifying system weaknesses
    requires logical reasoning and the ability to systematically think through possible
    actions, alternatives, and potential conclusions. This combination of reasoning
    and systematic thinking implies the use of mental models. Hacking is a cognitive
    activity that requires exceptional technical and reasoning abilities.”
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: “无论一个人是哪种类型的黑客，识别系统弱点都需要逻辑推理和系统地思考可能采取的行动、替代方案和潜在结论的能力。这种推理和系统思维的组合意味着使用心智模型。黑客是一种需要非凡技术和推理能力的认知活动。”
- en: So, basically, we are talking about a person with high technical skills who
    is doing things by thinking out of the box. The problem is not the activity itself
    but the intention behind the activity.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，基本上，我们是在谈论一个具有高度技术技能的人，他们通过跳出思维定势来做事情。问题不在于活动本身，而在于活动的意图。
- en: 'Today, we define an ethical hacker as a hacker who does things with good intentions.
    For example, when you are doing a penetration test on your own application to
    find possible vulnerabilities, you are doing ethical hacking. Sometimes, you end
    up discovering vulnerabilities in other applications/libraries/services that you
    don’t own. In those cases, we can face two different scenarios: doing a **coordinated
    vulnerability disclosure** (previously known as a **responsible disclosure**)
    or trying a **bug** **bounty program**.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们将道德黑客定义为具有良好意图做事的人。例如，当您在自己的应用程序上进行渗透测试以寻找可能存在的漏洞时，您正在进行道德黑客活动。有时，您最终会发现您不拥有的其他应用程序/库/服务中的漏洞。在这些情况下，我们可能会面临两种不同的场景：进行**协调漏洞披露**（以前称为**负责任披露**）或尝试**漏洞赏金计划**。
- en: Coordinated vulnerability disclosure (CVD)
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 协调漏洞披露（CVD）
- en: When you discover a vulnerability in a third-party application/library/service,
    you can contact the owner of the application/library/service and explain the vulnerability
    and how to mitigate it. While the process seems simple, it is not always easy.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当您发现第三方应用程序/库/服务中的漏洞时，您可以联系应用程序/库/服务的所有者，并解释漏洞以及如何缓解它。虽然这个过程看起来很简单，但并不总是容易。
- en: First of all, an unknown vulnerability can affect many users, companies, and
    services. So, you need to be very careful about how you communicate the vulnerability
    and to whom. Also, this will require a validation process to ensure that the vulnerability
    is real and that it is not a false positive. Then, it is expected that a patch
    will be developed and made available to the affected services before the public
    disclosure is done.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，一个未知的漏洞可能会影响许多用户、公司和服务。因此，您需要非常小心地沟通漏洞以及向谁沟通。此外，这还需要一个验证过程，以确保漏洞是真实的，并且它不是一个误报。然后，预计在公开披露之前，将开发补丁并将其提供给受影响的服务。
- en: 'To make the process easier, many companies and open source projects have a
    security policy that explains how to report a vulnerability and what to expect
    from the process. For example, you can find the Node.js security policy at [https://nodejs.org/en/security/](https://nodejs.org/en/security/):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使过程更容易，许多公司和开源项目都有一个安全策略，解释如何报告漏洞以及可以期待的过程。例如，您可以在[https://nodejs.org/en/security/](https://nodejs.org/en/security/)找到Node.js的安全策略：
- en: “Normally your report will be acknowledged within 5 days, and you’ll receive
    a more detailed response to your report within 10 days indicating the next steps
    in handling your submission. These timelines may extend when our triage volunteers
    are away on holiday, particularly at the end of the year.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: “通常，您的报告将在5天内得到确认，您将在10天内收到对您的报告的更详细回应，表明处理您的提交的下一步行动。当我们的分级志愿者休假时，这些时间表可能会延长，尤其是在年底时。”
- en: After the initial reply to your report, the security team will endeavor to keep
    you informed of the progress being made towards a fix and full announcement, and
    may ask for additional information or guidance surrounding the reported issue.”
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在对您的报告进行初步回复后，安全团队将努力让您了解修复和全面公告的进展情况，并可能要求提供有关报告问题的额外信息或指导。
- en: Other companies, such as Google, have a dedicated website to report vulnerabilities
    in their products ([https://www.google.com/about/appsecurity/](https://www.google.com/about/appsecurity/)).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 其他公司，如谷歌，有一个专门的网站来报告其产品中的漏洞（[https://www.google.com/about/appsecurity/](https://www.google.com/about/appsecurity/))。
- en: Bounty programs
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 奖金计划
- en: Some companies and open source projects have a bounty program that will reward
    you for finding vulnerabilities in their applications/libraries/services. Actually,
    the scenario is very similar to CVD but, in this case, you have clear rules regarding
    engagement and boundaries.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see the Node.js bounty program at [https://hackerone.com/nodejs](https://hackerone.com/nodejs)
    to get a better understanding of the process. We also have a hacktivity page ([https://hackerone.com/nodejs/hacktivity](https://hackerone.com/nodejs/hacktivity))
    where we can see the reports that have been submitted and the status of the reports
    with plenty of details, including the rewards.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Node.js bug bounty program](img/B21678_15_ForCEing_FS_4.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
- en: Figure 15.4 – Node.js bug bounty program
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the figure, there is a list of disclosure information that
    leads, in many cases, to security patches. Feel free to explore them and see how
    the communication was made and how the process worked in each case. You can learn
    a lot from these disclosed reports.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Getting the skills
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Building software is different from breaking software. The are many skills that
    you need to learn and some tools to get familiar with. One great overview of the
    skills that you need to learn is [https://roadmap.sh/](https://roadmap.sh/), which
    has a section dedicated to cybersecurity ([https://roadmap.sh/cyber-security](https://roadmap.sh/cyber-security)).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: In order to get more practical skills, you can use the *Hack the Box* platform
    ([https://www.hackthebox.eu/](https://www.hackthebox.eu/)), which will allow you
    to practice your skills in a safe environment. The challenges in *Hack the Box*
    are used as a learning tool by many hackers and security professionals in the
    community, so you can find a lot of write-ups on the internet that will help you
    to solve the challenges when you get stuck.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the importance of security in modern web applications
    and the impact that a security incident can have on the business. Then, we learned
    how to get started with security in our day-to-day work by using OWASP, CWE, CVE,
    the Node.js threat model, and the official Node.js best practices.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we learned how we can raise the security of our applications by
    using a simple checklist and how to apply it in our application.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how to take advantage of our security knowledge to become
    an ethical hacker.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn how to deploy our application to
    the internet and local devices in a different way.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*CVE-2020-19909 is everything that is wrong with* *CVEs*: [https://daniel.haxx.se/blog/2023/08/26/cve-2020-19909-is-everything-that-is-wrong-with-cves/](https://daniel.haxx.se/blog/2023/08/26/cve-2020-19909-is-everything-that-is-wrong-with-cves/)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Auditing package dependencies for security* *vulnerabilities*: [https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities](https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities)'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*审计软件包依赖以查找安全* *漏洞*: [https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities](https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities)'
- en: '*OWASP NPM Security best* *practices*: [https://cheatsheetseries.owasp.org/cheatsheets/NPM_Security_Cheat_Sheet.html#npm-security-best-practices](https://cheatsheetseries.owasp.org/cheatsheets/NPM_Security_Cheat_Sheet.html#npm-security-best-practices)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*OWASP NPM 安全* *最佳实践*: [https://cheatsheetseries.owasp.org/cheatsheets/NPM_Security_Cheat_Sheet.html#npm-security-best-practices](https://cheatsheetseries.owasp.org/cheatsheets/NPM_Security_Cheat_Sheet.html#npm-security-best-practices)'
- en: '*DEFCON – The Full* *Documentary*: [https://www.youtube.com/watch?v=3ctQOmjQyYg](https://www.youtube.com/watch?v=3ctQOmjQyYg)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*DEFCON – 完整* *纪录片*: [https://www.youtube.com/watch?v=3ctQOmjQyYg](https://www.youtube.com/watch?v=3ctQOmjQyYg)'
- en: '*State of Open Source Security* *2023*: [https://snyk.io/reports/open-source-security/](https://snyk.io/reports/open-source-security/)'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开源安全状态* *2023*: [https://snyk.io/reports/open-source-security/](https://snyk.io/reports/open-source-security/)'
- en: '*Threats and* *Mitigations*: [https://docs.npmjs.com/threats-and-mitigations#by-typosquatting--dependency-confusion](https://docs.npmjs.com/threats-and-mitigations#by-typosquatting--dependency-confusion)'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*威胁和* *缓解措施*: [https://docs.npmjs.com/threats-and-mitigations#by-typosquatting--dependency-confusion](https://docs.npmjs.com/threats-and-mitigations#by-typosquatting--dependency-confusion)'
- en: 'Part 5: Mastering Node.js Deployment and Portability'
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5部分：掌握 Node.js 部署和可移植性
- en: In *Part 5*, we will deploy our application to the public internet. We will
    learn how to decide the best approach based on our requirements, then we will
    use virtual machines in DigitalOcean to deploy the application using PM2, and
    we will also learn how to dockerize our application for better portability.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第5部分* 中，我们将把我们的应用程序部署到公共互联网。我们将学习如何根据我们的需求决定最佳方法，然后我们将使用 DigitalOcean 中的虚拟机来使用
    PM2 部署应用程序，并且我们还将学习如何将我们的应用程序 docker 化以提高可移植性。
- en: We will use GitHub to store our application code, and we will learn how to create
    a continuous deployment pipeline for our projects.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 GitHub 来存储我们的应用程序代码，并且我们将学习如何为我们的项目创建持续部署管道。
- en: Our last step in the journey will be to use Cloudflare to manage our domain
    and the SSL certificates and we will explore the Twelve-Factor App principles.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们旅程的最后一步将是使用 Cloudflare 来管理我们的域名和 SSL 证书，并且我们将探索十二要素应用原则。
- en: 'This part has the following chapters:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 16*](B21678_16.xhtml#_idTextAnchor416), *Deploying Node.js Applications*'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第16章*](B21678_16.xhtml#_idTextAnchor416)，*部署 Node.js 应用程序*'
- en: '[*Chapter 17*](B21678_17.xhtml#_idTextAnchor436), *Dockerizing a Node.js Application*'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第17章*](B21678_17.xhtml#_idTextAnchor436)，*将 Node.js 应用程序 docker 化*'
