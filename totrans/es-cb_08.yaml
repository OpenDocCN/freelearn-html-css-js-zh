- en: Inheritance and Composition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Extending a class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning additional properties with constructor arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overriding parent class instance methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overriding parent class static methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling super methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using composition rather than inheritance to add behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using mix-ins to add behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing a class as an argument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking class inheritance with Object.getPrototypeOf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using throw to simulate abstract classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw how to use the new class syntax to implement
    behavior that was only slightly more difficult to implement directly with a prototype.
    A developer could be excused for thinking that this complexity of the language
    was not worth it. After all, it's only a line (or perhaps a character) or two
    extra to get the same behavior.
  prefs: []
  type: TYPE_NORMAL
- en: The real advantage of using the new ES6 class syntax to create object prototypes
    is revealed when more complicated structures and techniques are used. In essence,
    we'll see that it's much easier to understand code when the behavior is defined
    with keywords, rather than context-sensitive operators.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll look at how to implement some more sophisticated behaviors
    using classes.
  prefs: []
  type: TYPE_NORMAL
- en: Extending a class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extending classes can be used to allow for new behaviors, while adhering to
    common interfaces. While it's not always the best way to organize relationships
    between objects, there are many situations where extension (sometimes called inheritance)
    is the most effective way to structure behavior.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see a very simple example of extension.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-01-extending-classes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates instances of both classes and logs out
    their names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see output like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/34960f81-4db0-4ab7-b4cf-59a0521933b9.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `classInactiveRocket` extends `Rocket`. This means that all of the properties
    on the prototype of `Rocket` end up on the instance of `InactiveRocket` unless
    they are overridden. The constructor is special, but it is also a property on
    the `Rocket` prototype. Therefore, when the two instances are created, the `Rocket`
    class constructor is executed for both the `Rocket` and `InactiveRocket` instances.
    So, we see the `name` property assigned on both instances.
  prefs: []
  type: TYPE_NORMAL
- en: We'll see how to override methods and other behaviors in future recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning additional properties with constructor arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we are extending a class, we'll want it to be a little bit different. Otherwise,
    what's the point of extending it? In this recipe we'll differentiate a child class
    by adding additional properties.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-02-additional-constructor-args`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class, and
    assigns an additional `lastFlown` property in the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates instances of both classes and logs out
    their names, and the `lastFlown` property of the `InactiveRocket`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b8e2d1cd-fe69-487a-87a6-17e37c415772.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe differs from the previous simple extension example. By implementing
    a constructor on `InactiveRocket`, we are able to pass a different set of arguments.
    The `lastFlown` property is unique to `InactiveRocket`. Thus, we see that property
    on instances of `InactiveRocket`, but not on instances of `Rocket`.
  prefs: []
  type: TYPE_NORMAL
- en: You'll notice that the `super` method is called in the constructor of `InactiveRocket`.
    This manually executes the `Rocket` constructor for the current instance. That
    is why the `name` property is also attached. If we did not execute `super`, then
    the `Rocket` constructor would not have been called.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, we've kept the properties from the parent class `Rocket` as well
    as adding an additional property to the `InactiveRocket` child class.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding parent class instance methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ideally, classes contain more than just properties. Well-designed classes also
    define behavior. Thus, sub-classes should also be extending behavior, not just
    adding additional properties.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to override methods from a parent class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-03-defining-methods`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket`**.** Add a
    constructor that takes a constructor argument `name` and assigns it to an instance
    property. Then, define a simple `print` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class and assigns
    an additional `lastFlow` property in the constructor. Then, override the `print`
    method to include the new property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates instances of both classes and calls the
    `print` method of both:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Start you Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ff3f5923-208c-480d-850d-71842d757873.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding methods to the body of a class definition is the same as attaching properties
    to the prototype of a function, with functions as their values. This means that
    those properties are added as properties to the instance of the new object. When
    these methods are called, the context (the value of `this`) is the current instance.
  prefs: []
  type: TYPE_NORMAL
- en: This is similar to the *Defining function properties as methods on a plain object*
    recipe in [Chapter 6](0ff0c6a3-a324-4346-8ba5-37275e85aa1b.xhtml), *Plain Objects*.
    In that recipe, we overrode methods by direct assignment. By contrast, in this
    recipe, we are doing this on the prototype. That means that this override applies
    to every instance of the `InactiveRocket` subclass.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding parent class static methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen previously that behaviors are not limited to class instances but
    are also attached to the classes themselves. These `static` methods can also be
    overridden by subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to override static methods.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-04-checking-with-instanceof`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create two objects `rocketMap` and `inactiveRocketMap`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a new class named `Rocket`. Add a constructor. Use the name to assign
    the instance to the `rocketMap` and define a simple `print` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a static `find` method that retrieves an instance from the `rocketMap`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class and assigns
    an additional `lastFlow` property in the constructor. Use the `name` to assign
    the instance to the `inactiveRocketMap` and override the `print` method to include
    the new property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a static `find` method that retrieves an instance from the `rocketMap`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates instances of both classes and try to
    retrieve the instances from the maps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b9d04b51-a108-4f0f-876e-1d1103705a64.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like the instance methods, static methods defined on the child override
    those on the parent class. We created the `Rocket` class with a static method
    that locates a `Rocket` instance based on its name. We also created an `InactiveRocket`
    class with its own `find` method that searches in a different map. Because the
    `InactiveRocket` class calls `super` in its constructor, instances of both classes
    are added to the map used by the `Rocket` class's `find` method. While only instances
    of `InactiveRocket` are added to the map used in that class's `find` method.
  prefs: []
  type: TYPE_NORMAL
- en: When we call `find` on the `Rocket` class we are able to retrieve instances
    of both classes. You'll notice that we are unable to locate instances of the `base`
    class using the `InactiveRocket` class's find method.
  prefs: []
  type: TYPE_NORMAL
- en: Calling super methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overriding methods is awesome for extending behavior. However, we sometimes
    want to continue to use behavior from a parent class. This is possible by using
    the `super` keyboard to access parent class methods.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use this keyword to access those methods.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-05-getters-read-only`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket`. Add a constructor
    that takes a constructor argument `name` and assigns it to an instance property.
    Then, define a simple `print` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class and assigns
    an additional `lastFlow` property in the constructor. Then, override the `print`
    method and call `super.print`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates instances of both classes and calls their
    `print` method of both:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/870ebdea-fff4-403e-bb04-7863f3868ccc.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because we overrode the `print` method in the `InactiveRocket` class, calling
    that method will execute the code defined in that class, rather than the parents.
    The `super` keyword allows us to reference the prototype of the parent class.
    So, when the `print` method is called on the `super` keyword, the method as defined
    on the parent prototype is executed. Thus, we see the output of both `print` methods
    for the `saturnV` instance.
  prefs: []
  type: TYPE_NORMAL
- en: Using composition rather than inheritance to add behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've seen how to use inheritance to add behavior and compose larger
    structures. This is not always the ideal approach. In many situations, it's better
    to use a method known as composition instead. This involves using distinct classes
    in connection without establishing a hierarchical relationship. The chief advantage
    here is code clarity and flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use composition.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-06-using-composition-instead-of-inherritence`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket`. Add a constructor
    that takes a constructor argument `name` and assigns it to an instance property.
    Then, define a simple `print` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class and assigns
    an additional `lastFlow` property in the constructor. Then, override the `print`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `Launcher` that takes a constructor argument `rocket`.
    Add a method, named `prepareForLaunch`, that aborts if the rocket is inactive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates two instances of `Launcher`; one for
    each class of rocket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b9830c81-fb99-498a-88f4-f0a8bf881308.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we've added an instance of one class (one of the two `Rocket`
    classes) and used it within the instance of another class (`Launcher`), that isn't
    related via inheritance. It would be possible to add this launch functionality
    through a `LaunchableRocket` class, but that would become cumbersome as the kinds
    of rockets and their relationships change.
  prefs: []
  type: TYPE_NORMAL
- en: In general, adding behaviors through inheritance is constricting; it should
    be limited to small changes and they should not differ in public interface. The
    **Dependency Inversion Principle **(**DIP**) is an important concept when considering
    inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit the following link to learn more about the DIP: [https://en.wikipedia.org/wiki/Dependency_inversion_principle](https://en.wikipedia.org/wiki/Dependency_inversion_principle).'
  prefs: []
  type: TYPE_NORMAL
- en: Using mix-ins to add behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how to use inheritance and composition to add behavior. There is
    a different method of composition that appends behavior onto existing classes
    without inheritance. Using mix-ins attaches properties to an object instance at
    runtime.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use the mix-ins to add shared behavior to classes
    without inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-08-using-mixins`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket`. In the constructor,
    extend the current instance with an object named `Launcher`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class and assigns
    an additional `lastFlow` property in the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an object named `Launcher` that defines a method named `prepareForLaunch`,
    which aborts if the rocket is inactive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates instances of each class of `Rocket` and
    calls `prepareForLaunch` on each:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7351290c-c83a-48a2-9cd7-8df703152dad.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Object.assign` adds all the properties from one object to another. Assigning
    all of the properties from the `Launcher` onto the new instance makes those available
    after the object is created. Remember that methods on `this` are simply properties
    on the prototype with function values. So, adding methods this way is the equivalent
    of defining these methods on the prototype.'
  prefs: []
  type: TYPE_NORMAL
- en: Thus, after applying this mix-in with `Object.assign` we can call methods defined
    as properties on `Launcher` as instance methods of  `Rocket` and `InactiveRocket`.
  prefs: []
  type: TYPE_NORMAL
- en: Passing a class as an argument
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Classes, like functions, are first class citizens in JavaScript. This means
    that they can be returned from functions or passed as arguments. In this recipe,
    we'll see how to use the latter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-08-passing-class-as-an-argument`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class and assigns
    a `name` and a `lastFlow` property in the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a function `isA` that takes an instance and a `klass` argument and returns
    `true` if the constructor is the passed class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates an instance of `InactiveRocket`. Call
    `isA` to compare the instance against both `Rocket` classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/721847f1-9c2f-413f-9dda-a7ab9f72ca3e.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `isA` function compares the identity of the `instance` constructor property
    against the passed `klass`. This will be `true` if the `instance` argument is
    an instance of `klass` (in this case we are comparing an instance of the `InactiveRocket`
    class). It will return `false` for any other class, including `Rocket`.
  prefs: []
  type: TYPE_NORMAL
- en: Because we are comparing the constructor to the class directly, inheritance
    is not taken into account. If we were to use `instanceOf`, the function would
    return `true` for `Rocket` as well.
  prefs: []
  type: TYPE_NORMAL
- en: Checking class inheritance with Object.getPrototypeOf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how to check for inheritance and identity of the instantiated class
    as a Boolean expression. We might want to also see the full ancestry of an instance
    at once. In this recipe, we'll see how to do just that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-09-checking-class-inheritance`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines three new `Rocket` classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a function `listInheritance` that takes an instance and uses `Object.getPrototypeOf`
    to get the names of all the classes until you reach the null type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates an instance of `OrbitingRocket` and lists
    its inheritance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser: `http://localhost:8000/`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f1e5408-4f1d-407d-b95d-6d1880d722d8.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All JavaScript prototypes exist in a hierarchy. This means each prototype is
    extended from another, which in turn extends from another. At the top of the hierarchy
    is the null type. `Object.getPrototypeOf` traverses up this inheritance tree and
    climbs its way from the prototype of the instance, all the way to the null type.
    We can then use the `name` property of each, which will give us the name of that
    prototype (or class in our case).
  prefs: []
  type: TYPE_NORMAL
- en: Using throw to simulate abstract classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've seen how to create and combine classes into a variety of different
    shapes. Sometimes, however, we want to be able to prevent the creation of a class
    and only allow instances of extending classes. Other languages provide a facility
    known as abstract classes. In this recipe, we'll see how to simulate this by throwing
    errors.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-10-use-throw-to-simulate-abstract-class`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket`. In the constructor,
    check the constructor of the instance, if it''s `Rocket`, then throw an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Create two child classes of `Rocket`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates instances of each class of rocket. Notice
    that the `Rocket` class can''t be instantiated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3ea7105c-7f1f-424d-a82a-1518b25fecc9.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this was to force users of the class to extend the `Rocket` class,
    rather than instantiate it directly. However, we still want to be able to define
    behavior in the `base` class. In the constructor of the `Rocket` class you can
    see how this is done. By comparing the constructor property of the instance with
    `Rocket` we can see if this has been instantiated directly. If the class is extended,
    then this comparison will evaluate `false` and the error will not be throw. Thus,
    we can create `ActiveRocket` and `InactiveRocket` instances.
  prefs: []
  type: TYPE_NORMAL
- en: When creating an instance of `Rocket` directly, the constructor comparison evaluates
    to `true` and the error is thrown. Thus, we can't create instances of the `Rocket`
    class, only it's sub-classes.
  prefs: []
  type: TYPE_NORMAL
