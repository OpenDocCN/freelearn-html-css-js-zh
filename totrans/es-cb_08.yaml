- en: Inheritance and Composition
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Extending a class
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning additional properties with constructor arguments
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overriding parent class instance methods
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overriding parent class static methods
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling super methods
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using composition rather than inheritance to add behavior
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using mix-ins to add behavior
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing a class as an argument
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking class inheritance with Object.getPrototypeOf
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using throw to simulate abstract classes
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw how to use the new class syntax to implement
    behavior that was only slightly more difficult to implement directly with a prototype.
    A developer could be excused for thinking that this complexity of the language
    was not worth it. After all, it's only a line (or perhaps a character) or two
    extra to get the same behavior.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: The real advantage of using the new ES6 class syntax to create object prototypes
    is revealed when more complicated structures and techniques are used. In essence,
    we'll see that it's much easier to understand code when the behavior is defined
    with keywords, rather than context-sensitive operators.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll look at how to implement some more sophisticated behaviors
    using classes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Extending a class
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extending classes can be used to allow for new behaviors, while adhering to
    common interfaces. While it's not always the best way to organize relationships
    between objects, there are many situations where extension (sometimes called inheritance)
    is the most effective way to structure behavior.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see a very simple example of extension.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-01-extending-classes`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a `main` function that creates instances of both classes and logs out
    their names:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see output like the following:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/34960f81-4db0-4ab7-b4cf-59a0521933b9.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `classInactiveRocket` extends `Rocket`. This means that all of the properties
    on the prototype of `Rocket` end up on the instance of `InactiveRocket` unless
    they are overridden. The constructor is special, but it is also a property on
    the `Rocket` prototype. Therefore, when the two instances are created, the `Rocket`
    class constructor is executed for both the `Rocket` and `InactiveRocket` instances.
    So, we see the `name` property assigned on both instances.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: We'll see how to override methods and other behaviors in future recipes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Assigning additional properties with constructor arguments
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we are extending a class, we'll want it to be a little bit different. Otherwise,
    what's the point of extending it? In this recipe we'll differentiate a child class
    by adding additional properties.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-02-additional-constructor-args`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class, and
    assigns an additional `lastFlown` property in the constructor:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a `main` function that creates instances of both classes and logs out
    their names, and the `lastFlown` property of the `InactiveRocket`:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b8e2d1cd-fe69-487a-87a6-17e37c415772.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe differs from the previous simple extension example. By implementing
    a constructor on `InactiveRocket`, we are able to pass a different set of arguments.
    The `lastFlown` property is unique to `InactiveRocket`. Thus, we see that property
    on instances of `InactiveRocket`, but not on instances of `Rocket`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: You'll notice that the `super` method is called in the constructor of `InactiveRocket`.
    This manually executes the `Rocket` constructor for the current instance. That
    is why the `name` property is also attached. If we did not execute `super`, then
    the `Rocket` constructor would not have been called.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: In this way, we've kept the properties from the parent class `Rocket` as well
    as adding an additional property to the `InactiveRocket` child class.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Overriding parent class instance methods
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ideally, classes contain more than just properties. Well-designed classes also
    define behavior. Thus, sub-classes should also be extending behavior, not just
    adding additional properties.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to override methods from a parent class.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-03-defining-methods`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket`**.** Add a
    constructor that takes a constructor argument `name` and assigns it to an instance
    property. Then, define a simple `print` method:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class and assigns
    an additional `lastFlow` property in the constructor. Then, override the `print`
    method to include the new property:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a `main` function that creates instances of both classes and calls the
    `print` method of both:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Start you Python web server and open the following link in your browser:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ff3f5923-208c-480d-850d-71842d757873.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding methods to the body of a class definition is the same as attaching properties
    to the prototype of a function, with functions as their values. This means that
    those properties are added as properties to the instance of the new object. When
    these methods are called, the context (the value of `this`) is the current instance.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: This is similar to the *Defining function properties as methods on a plain object*
    recipe in [Chapter 6](0ff0c6a3-a324-4346-8ba5-37275e85aa1b.xhtml), *Plain Objects*.
    In that recipe, we overrode methods by direct assignment. By contrast, in this
    recipe, we are doing this on the prototype. That means that this override applies
    to every instance of the `InactiveRocket` subclass.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Overriding parent class static methods
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen previously that behaviors are not limited to class instances but
    are also attached to the classes themselves. These `static` methods can also be
    overridden by subclasses.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to override static methods.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-04-checking-with-instanceof`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create two objects `rocketMap` and `inactiveRocketMap`:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Define a new class named `Rocket`. Add a constructor. Use the name to assign
    the instance to the `rocketMap` and define a simple `print` method:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add a static `find` method that retrieves an instance from the `rocketMap`:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class and assigns
    an additional `lastFlow` property in the constructor. Use the `name` to assign
    the instance to the `inactiveRocketMap` and override the `print` method to include
    the new property:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add a static `find` method that retrieves an instance from the `rocketMap`:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a `main` function that creates instances of both classes and try to
    retrieve the instances from the maps:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b9d04b51-a108-4f0f-876e-1d1103705a64.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like the instance methods, static methods defined on the child override
    those on the parent class. We created the `Rocket` class with a static method
    that locates a `Rocket` instance based on its name. We also created an `InactiveRocket`
    class with its own `find` method that searches in a different map. Because the
    `InactiveRocket` class calls `super` in its constructor, instances of both classes
    are added to the map used by the `Rocket` class's `find` method. While only instances
    of `InactiveRocket` are added to the map used in that class's `find` method.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: When we call `find` on the `Rocket` class we are able to retrieve instances
    of both classes. You'll notice that we are unable to locate instances of the `base`
    class using the `InactiveRocket` class's find method.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Calling super methods
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overriding methods is awesome for extending behavior. However, we sometimes
    want to continue to use behavior from a parent class. This is possible by using
    the `super` keyboard to access parent class methods.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use this keyword to access those methods.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-05-getters-read-only`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket`. Add a constructor
    that takes a constructor argument `name` and assigns it to an instance property.
    Then, define a simple `print` method:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class and assigns
    an additional `lastFlow` property in the constructor. Then, override the `print`
    method and call `super.print`:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a `main` function that creates instances of both classes and calls their
    `print` method of both:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/870ebdea-fff4-403e-bb04-7863f3868ccc.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because we overrode the `print` method in the `InactiveRocket` class, calling
    that method will execute the code defined in that class, rather than the parents.
    The `super` keyword allows us to reference the prototype of the parent class.
    So, when the `print` method is called on the `super` keyword, the method as defined
    on the parent prototype is executed. Thus, we see the output of both `print` methods
    for the `saturnV` instance.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Using composition rather than inheritance to add behavior
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've seen how to use inheritance to add behavior and compose larger
    structures. This is not always the ideal approach. In many situations, it's better
    to use a method known as composition instead. This involves using distinct classes
    in connection without establishing a hierarchical relationship. The chief advantage
    here is code clarity and flexibility.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use composition.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-06-using-composition-instead-of-inherritence`.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket`. Add a constructor
    that takes a constructor argument `name` and assigns it to an instance property.
    Then, define a simple `print` method:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class and assigns
    an additional `lastFlow` property in the constructor. Then, override the `print`
    method:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a class named `Launcher` that takes a constructor argument `rocket`.
    Add a method, named `prepareForLaunch`, that aborts if the rocket is inactive:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a `main` function that creates two instances of `Launcher`; one for
    each class of rocket:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b9830c81-fb99-498a-88f4-f0a8bf881308.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we've added an instance of one class (one of the two `Rocket`
    classes) and used it within the instance of another class (`Launcher`), that isn't
    related via inheritance. It would be possible to add this launch functionality
    through a `LaunchableRocket` class, but that would become cumbersome as the kinds
    of rockets and their relationships change.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: In general, adding behaviors through inheritance is constricting; it should
    be limited to small changes and they should not differ in public interface. The
    **Dependency Inversion Principle **(**DIP**) is an important concept when considering
    inheritance.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit the following link to learn more about the DIP: [https://en.wikipedia.org/wiki/Dependency_inversion_principle](https://en.wikipedia.org/wiki/Dependency_inversion_principle).'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Using mix-ins to add behavior
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how to use inheritance and composition to add behavior. There is
    a different method of composition that appends behavior onto existing classes
    without inheritance. Using mix-ins attaches properties to an object instance at
    runtime.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use the mix-ins to add shared behavior to classes
    without inheritance.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-08-using-mixins`.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket`. In the constructor,
    extend the current instance with an object named `Launcher`:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class and assigns
    an additional `lastFlow` property in the constructor:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create an object named `Launcher` that defines a method named `prepareForLaunch`,
    which aborts if the rocket is inactive:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a `main` function that creates instances of each class of `Rocket` and
    calls `prepareForLaunch` on each:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7351290c-c83a-48a2-9cd7-8df703152dad.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Object.assign` adds all the properties from one object to another. Assigning
    all of the properties from the `Launcher` onto the new instance makes those available
    after the object is created. Remember that methods on `this` are simply properties
    on the prototype with function values. So, adding methods this way is the equivalent
    of defining these methods on the prototype.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Thus, after applying this mix-in with `Object.assign` we can call methods defined
    as properties on `Launcher` as instance methods of  `Rocket` and `InactiveRocket`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Passing a class as an argument
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Classes, like functions, are first class citizens in JavaScript. This means
    that they can be returned from functions or passed as arguments. In this recipe,
    we'll see how to use the latter.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-08-passing-class-as-an-argument`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket`:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a class named `InactiveRocket` that extends the `Rocket` class and assigns
    a `name` and a `lastFlow` property in the constructor:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a function `isA` that takes an instance and a `klass` argument and returns
    `true` if the constructor is the passed class:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a `main` function that creates an instance of `InactiveRocket`. Call
    `isA` to compare the instance against both `Rocket` classes:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/721847f1-9c2f-413f-9dda-a7ab9f72ca3e.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `isA` function compares the identity of the `instance` constructor property
    against the passed `klass`. This will be `true` if the `instance` argument is
    an instance of `klass` (in this case we are comparing an instance of the `InactiveRocket`
    class). It will return `false` for any other class, including `Rocket`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Because we are comparing the constructor to the class directly, inheritance
    is not taken into account. If we were to use `instanceOf`, the function would
    return `true` for `Rocket` as well.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Checking class inheritance with Object.getPrototypeOf
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how to check for inheritance and identity of the instantiated class
    as a Boolean expression. We might want to also see the full ancestry of an instance
    at once. In this recipe, we'll see how to do just that.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-09-checking-class-inheritance`.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines three new `Rocket` classes:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create a function `listInheritance` that takes an instance and uses `Object.getPrototypeOf`
    to get the names of all the classes until you reach the null type:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a `main` function that creates an instance of `OrbitingRocket` and lists
    its inheritance:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Start your Python web server and open the following link in your browser: `http://localhost:8000/`.'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see output like the following:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f1e5408-4f1d-407d-b95d-6d1880d722d8.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All JavaScript prototypes exist in a hierarchy. This means each prototype is
    extended from another, which in turn extends from another. At the top of the hierarchy
    is the null type. `Object.getPrototypeOf` traverses up this inheritance tree and
    climbs its way from the prototype of the instance, all the way to the null type.
    We can then use the `name` property of each, which will give us the name of that
    prototype (or class in our case).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Using throw to simulate abstract classes
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've seen how to create and combine classes into a variety of different
    shapes. Sometimes, however, we want to be able to prevent the creation of a class
    and only allow instances of extending classes. Other languages provide a facility
    known as abstract classes. In this recipe, we'll see how to simulate this by throwing
    errors.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to your workspace.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `08-10-use-throw-to-simulate-abstract-class`.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket`. In the constructor,
    check the constructor of the instance, if it''s `Rocket`, then throw an error:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.js`文件，该文件定义一个名为`Rocket`的新类。在构造函数中，检查实例的构造函数，如果是`Rocket`，则抛出错误：
- en: '[PRE33]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create two child classes of `Rocket`:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Rocket`的两个子类：
- en: '[PRE34]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a `main` function that creates instances of each class of rocket. Notice
    that the `Rocket` class can''t be instantiated:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main`函数，该函数创建每个火箭类实例。注意，`Rocket`类不能被实例化：
- en: '[PRE35]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器，并在你的浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see output like the following:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![](img/3ea7105c-7f1f-424d-a82a-1518b25fecc9.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3ea7105c-7f1f-424d-a82a-1518b25fecc9.png)'
- en: How it works...
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The goal of this was to force users of the class to extend the `Rocket` class,
    rather than instantiate it directly. However, we still want to be able to define
    behavior in the `base` class. In the constructor of the `Rocket` class you can
    see how this is done. By comparing the constructor property of the instance with
    `Rocket` we can see if this has been instantiated directly. If the class is extended,
    then this comparison will evaluate `false` and the error will not be throw. Thus,
    we can create `ActiveRocket` and `InactiveRocket` instances.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的目的是强制用户扩展`Rocket`类，而不是直接实例化它。然而，我们仍然希望能够在`base`类中定义行为。在`Rocket`类的构造函数中，你可以看到这是如何实现的。通过比较实例的构造函数属性与`Rocket`，我们可以看到这个类是否被直接实例化。如果类被扩展，那么这个比较将评估为`false`，错误将不会抛出。因此，我们可以创建`ActiveRocket`和`InactiveRocket`实例。
- en: When creating an instance of `Rocket` directly, the constructor comparison evaluates
    to `true` and the error is thrown. Thus, we can't create instances of the `Rocket`
    class, only it's sub-classes.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当直接创建`Rocket`实例时，构造函数比较结果为`true`，错误被抛出。因此，我们无法创建`Rocket`类的实例，只能创建它的子类实例。
