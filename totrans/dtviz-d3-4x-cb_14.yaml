- en: Chapter Appendix. Building Interactive Analytics in Minutes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录章节。在几分钟内构建交互式分析
- en: 'In this appendix we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将介绍：
- en: Learning Crossfilter.js library
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习 Crossfilter.js 库
- en: Charting with dimensions using dc.js
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 dc.js 进行维度图表
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'Congratulations! You have finished an entire book on data visualization with
    D3\. Together we have explored various topics and techniques. At this point you
    will probably agree that building interactive, accurate, and aesthetically appealing
    data visualization is not a trivial matter even with the help of a powerful library
    like D3\. It typically takes days or even weeks to finish a professional data
    visualization project even without counting the effort usually required on the
    backend. What if you need to build an interactive visualization quickly, or a
    proof-of-concept before a full-fledged visualization project can be commenced,
    and you need to do just that not in weeks or days, but minutes. In this appendix
    we will introduce you to two interesting JavaScript libraries that allow you to
    do just that: building quick in-browser interactive multidimensional data visualization
    in minutes.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经完成了一本关于数据可视化的 D3 整本书。我们一起探讨了各种主题和技术。此时你可能会同意，即使在像 D3 这样强大的库的帮助下，构建交互式、准确且美观的数据可视化也不是一件简单的事情。即使不考虑通常在后台所需的工作量，完成一个专业的数据可视化项目通常也需要几天甚至几周的时间。如果你需要快速构建交互式可视化，或者在一个完整可视化项目开始之前的一个概念验证，而你只需要在几分钟内完成，那么会怎样呢？在本附录中，我们将介绍两个有趣的
    JavaScript 库，允许你做到这一点：在几分钟内构建快速在浏览器中的交互式多维数据可视化。
- en: The crossfilter.js library
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: crossfilter.js 库
- en: Crossfilter is also a library created by D3's author *Mike Bostock*, initially
    used to power analytics for Square Register.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Crossfilter 还是由 D3 的作者 *Mike Bostock* 创建的库，最初用于为 Square Register 提供分析功能。
- en: '*Crossfilter is a JavaScript library for exploring large multivariate datasets
    in browser. Crossfilter supports extremely fast (<30ms) interaction with coordinated
    views, even with datasets containing a million or more records.*'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Crossfilter 是一个用于在浏览器中探索大型多元数据集的 JavaScript 库。Crossfilter 支持与协调视图的极快（<30ms）交互，即使是在包含数百万或更多记录的数据集中也能如此。*'
- en: '*-Crossfilter Wiki (August 2013)*'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*-Crossfilter Wiki（2013 年 8 月）*'
- en: 'In other words, Crossfilter is a library that you can use to generate data
    dimensions on large and typically flat multivariate datasets. So what is a data
    dimension? A data dimension can be considered as a type of data grouping or categorization
    while each dimensional data element is a categorical variable. Since this is still
    a pretty abstract concept, let''s take a look at the following JSON dataset and
    see how it can be transformed into dimensional dataset using Crossfilter. Assume
    that we have the following flat dataset in JSON describing payment transactions
    in a bar:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，Crossfilter 是一个库，你可以用它在大型的通常平坦的多元数据集上生成数据维度。那么什么是数据维度呢？数据维度可以被视为一种数据分组或分类，而每个维度的数据元素是一个分类变量。由于这仍然是一个相当抽象的概念，让我们看一下以下
    JSON 数据集，看看它是如何使用 Crossfilter 转换为维度数据集的。假设我们有一个以下扁平的 JSON 数据集，描述酒吧中的支付交易：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Sample dataset borrowed from Crossfilter Wiki: [https://github.com/square/crossfilter/wiki/API-Reference](https://github.com/square/crossfilter/wiki/API-Reference)
    .'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Crossfilter Wiki 借用的样本数据集：[https://github.com/square/crossfilter/wiki/API-Reference](https://github.com/square/crossfilter/wiki/API-Reference)。
- en: 'How many dimensions do we see here in this sample dataset? The answer is: it
    has as many dimensions as the number of different ways that you can categorize
    the data. For example, since this data is about customer payment, which is observation
    on time series, obviously the `date` is a dimension. Secondly, the payment type
    is naturally a way to categorize data; therefore, `type` is also a dimension.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个样本数据集中，我们看到了多少个维度？答案是：它有与你可以对数据进行分类的不同方式一样多的维度。例如，由于这些数据是关于客户支付，这是时间序列的观察，显然
    `date` 是一个维度。其次，支付类型是自然地对数据进行分类的方式；因此，`type` 也是一个维度。
- en: 'The next dimension is bit tricky since technically we can model any of the
    field in the dataset as dimension or its derivatives; however, we don''t want
    to make something as a dimension if it does not help us slice the data more efficiently
    or provide more insight into what the data is trying to say. The total and tip
    fields have very high cardinality, which usually is an indicator for poor dimension
    unless we group them into different buckets (though tip/total, that is, tip in
    percentage could be an interesting dimension); however, the `quantity` field is
    likely to have a relatively small cardinality assuming people don''t buy thousands
    of drinks in this bar, therefore, we choose to use quantity as our third dimension.
    Now, here is what the dimensional logical model looks like:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '![The crossfilter.js library](img/image_65_001.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
- en: Dimensional Dataset
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'These dimensions allow us to look at the data from a different angle, and if
    combined will allow us to ask some pretty interesting questions, for example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Are customers who pay by tab more likely to buy in larger quantity?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are customers more likely to buy larger quantity on Friday night?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are customers more likely to tip when using tab versus cash?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, you can see why dimensional dataset is such a powerful idea. Essentially,
    each dimension gives you a different lens to view your data, and when combined,
    they can quickly turn raw data into knowledge. A good analyst can quickly use
    this kind of tool to formulate a hypothesis, hence gaining knowledge from data.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we understand why we would want to establish dimensions with our dataset;
    let''s see how this can be done using Crossfilter:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As shown in the preceding section, creating dimensions and groups are quite
    straight-forward in Crossfilter. First step before we can create anything is to
    feed our JSON dataset, loaded using D3, through Crossfilter by calling the `crossfilter`
    function (line `A`). Once that''s done, you can create your dimension by calling
    the `dimension` function and pass in an accessor function that will retrieve the
    data element that can be used to define the dimension. In the case for `type`
    we will simply pass in `function(d){return d.type;}`. You can also perform data
    formatting or other task in dimension function (for example, date formatting on
    line `B`). After creating the dimensions, we can perform the categorization or
    grouping by using the dimension, so `totalByHour` is a grouping that sums up total
    amount of the sale for each hour, while `salesByQuantity` is a grouping of counting
    the number of transactions by quantity. To better understand how `group` works,
    we will take a look at what the group object looks like. If you invoke the `all`
    function on the `transactionsByType` group you will get the following objects
    back:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/5530_App_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: Crossfilter group objects
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: We can clearly see that `transactionByType` group is essentially a grouping
    of the data element by its type while counting the total number of data elements
    within each group since we had called `reduceCount` function when creating the
    group.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the description for functions we used in this example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '`crossfilter`: Creates a new crossfilter with given records if specified. Records
    can be any array of objects or primitives.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dimension`: Creates a new dimension using the given value accessor function.
    The function must return naturally-ordered values, that is, values that behave
    correctly with respect to JavaScript''s `<`, `<=`, `>=`, and `>` operators. This
    typically means primitives: Booleans, numbers, or strings.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dimension.group`: Creates a new grouping for the given dimension, based on
    the given `groupValue` function, which takes a dimension value as input and returns
    the corresponding rounded value.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group.all`: Returns all groups, in ascending natural order by key.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group.reduceCount`: A shortcut function to count the records; returns this
    group.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group.reduceSum`: A shortcut function to sum records using the specified value
    accessor function.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have only touched a very limited number of Crossfilter functions. Crossfilter
    provides a lot more capability when it comes to how dimension and group can be
    created; for more information please check out its API reference: [https://github.com/square/crossfilter/wiki/API-Reference](https://github.com/square/crossfilter/wiki/API-Reference)
    .'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Data Dimension: [http://en.wikipedia.org/wiki/Dimension_(data_warehouse)](http://en.wikipedia.org/wiki/Dimension_(data_warehouse))'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cardinality: [http://en.wikipedia.org/wiki/Cardinality](http://en.wikipedia.org/wiki/Cardinality)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this point we have everything we want to analyze. Now, let's see how this
    can be done in minutes instead of hours or days.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Dimensional charting - dc.js
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visualizing Crossfilter dimensions and groups is precisely the reason why `dc.js`
    was created. This handy JavaScript library was created by your humble author and
    is designed to allow you to visualize Crossfilter dimensional dataset easily and
    quickly. This library was originally created by your humble author now maintained
    by a group of community contributor led by Gordon Woodhull.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: dc.js version 2.0 beta that we used in this chapter has not yet been upgrade
    to D3 v4.x therefore you will notice usage and references to old D3 v3 API which
    is somewhat different from what we have witnessed so far in this book.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file as reference:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/appendix-a/dc.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/appendix-a/dc.html)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example we will create three charts:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: A line chart for visualizing total amount of transaction on time series
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pie chart to visualize number of transactions by payment type
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A bar chart showing number of sales by purchase quantity
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is what the code looks like:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This generates a group of coordinated interactive charts:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_65_003.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: Interactive dc.js charts
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click or drag your mouse across these charts you will see the underlying
    Crossfilter dimensions being filtered accordingly on all charts:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_65_004.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: Filtered dc.js charts
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have seen through this example, `dc.js` is designed to generate standard
    chart-based visualization on top of Crossfilter. Each `dc.js` chart is designed
    to be interactive so user can apply dimensional filter by simply interacting with
    the chart. `dc.js` is built entirely on D3, therefore, its API is very D3-like
    and I am sure with the knowledge you have gained from this book you will feel
    quite at home when using `dc.js`. Charts are usually created in the following
    steps.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'First step creates a chart object by calling one of the chart creation functions
    while passing in a D3 selection for its anchor element, which in our example is
    the `div` element to host the chart:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then we set the `width`, `height`, `dimension`, and `group` for each chart:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For coordinate charts rendered on a Cartesian plane you also need to set the
    `x` and `y` scale:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this first case, we explicitly set the x axis scale while letting the chart
    automatically calculate the y-scale for us. While in the next case we set both
    x and y scale explicitly.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There's more...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Different charts have different functions for customizing their look-and-feel
    and you can see the complete API reference at [https://github.com/dc-js/dc.js/blob/master/web/docs/api-latest.md](https://github.com/dc-js/dc.js/blob/master/web/docs/api-latest.md)
    .
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Leveraging `crossfilter.js` and `dc.js` allows you to build sophisticated data
    analytics dashboard fairly quickly. The following is a demo dashboard for analyzing
    the NASDAQ 100 Index for the last 20 years [https://dc-js.github.io/dc.js/](https://dc-js.github.io/dc.js/)
    :'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/image_65_006.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: dc.js NASDAQ demo
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing this book, `dc.js` supports the following chart types:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Bar chart (stackable)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line chart (stackable)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Area chart (stackable)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pie chart
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bubble chart
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composite chart
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choropleth map
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boxplot
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heatmap
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sparkline
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bubble overlay chart
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And many more, see this page for a complete list of supported chart types [http://dc-js.github.io/dc.js/examples/](http://dc-js.github.io/dc.js/examples/)
    . For more information on the `dc.js` 'library please check out our Wiki page
    at [https://github.com/dc-js/dc.js](https://github.com/dc-js/dc.js) .
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are some other useful D3 based reusable charting libraries. Although,
    unlike `dc.js` they are not designed to work with Crossfilter natively nevertheless
    they tend to be richer and more flexible when tackling general visualization challenges:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'NVD3: [http://nvd3.org/](http://nvd3.org/)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rickshaw: [http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '黄包车: [http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/)'
