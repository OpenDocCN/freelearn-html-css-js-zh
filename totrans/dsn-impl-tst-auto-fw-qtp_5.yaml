- en: Chapter 5. Deploying and Maintaining Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter we learned how to design and create a test framework.
    The key considerations while deploying the framework are portability and configuration
    for the underlying environment. Debugging is an important pre deployment activity.
    In this chapter we will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Script debugging techniques in QTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre deployment review checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing logs and filtering log messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining the frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predeployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the testing of the framework is complete and the bugs have been raised,
    we will start with debugging. This process tries to find what went wrong in the
    framework by looking at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How it failed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where it failed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to fix the bugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plan the debugging from the design phase and implement it by developing custom
    and error logs. Provide the mechanism to filter, enable, and disable the logs
    and features. This helps to debug the scripts both in the development and maintenance
    phases of framework designing. QTP provides various options for debugging scripts,
    actions, and functional libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with QTP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: QTP provides various ways to debug scripts that are a part of functional libraries
    or actions. To debug the script, execute it from the start to a certain step in
    the script or from a certain step to the end of the script or action. The following
    section describes the various techniques provided by QTP to debug the script.
    Ensure that the application is open at the relevant location before starting to
    debug the scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Run to step
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When this option is clicked on, it runs the test from the beginning of the script
    or action (**Expert View** only) to the current location in the test or action,
    and stops the execution at a particular step. To run the test from the beginning,
    navigate to **Resources** | **Run to Step** or press *Ctrl* + *F10*.
  prefs: []
  type: TYPE_NORMAL
- en: Debug from step
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To debug from a step, instead of the beginning of the script or action, use
    the **Debug from Step** option; it allows you to debug from a specific step in
    the test or action. To debug from a specific step, navigate to **Resources** |
    **Debug from Step**.
  prefs: []
  type: TYPE_NORMAL
- en: Run from step
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instruct QTP to run the action from a particular step instead of from the beginning
    of the script or action. To do this, navigate to **Resources** | **Run from Step**.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Expert View**, the **Run from Step** option runs the test from the
    selected script to the end of the action (or until it reaches a breakpoint). Using
    the **Run from Step** option in this mode ignores any iteration. However, if the
    action contains nested actions, QTP runs the nested actions for the defined number
    of iterations of the nested action.
  prefs: []
  type: TYPE_NORMAL
- en: Run from action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This option runs the test from the beginning of the script to the beginning
    of the selected action and then pauses the run session. Navigate to the **Test
    Flow** pane and right-click on **Run from Action**.
  prefs: []
  type: TYPE_NORMAL
- en: Debug from action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instruct QTP to begin a debug session and pause it at the beginning of the selected
    action. Navigate to the **Test Flow** pane and right-click on **Debug from Action**.
  prefs: []
  type: TYPE_NORMAL
- en: Run to action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instruct QTP to start a run session from the beginning of the selected action.
    Navigate to the **Test Flow** pane and right-click on **Run to Action**.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging a functional library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Creating a framework requires creating separate function libraries. For better
    maintenance, the steps to debug the functional library are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Associate the function library with a test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your test, insert a call to at least one of the functions defined in the
    function library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the test, suspend the run session, and debug the function library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: During a debug session, all documents are read-only and cannot be edited. To
    edit a document during a debug session, we have to stop the debug session.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The execution marker may not be displayed correctly when the test script uses
    the `ExecuteFile` statement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Reviewing the checklist for predeployment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before deployment, ensure that we review the following points (that exist in
    scripts or are taken care of) for lower maintenance cost of the framework:'
  prefs: []
  type: TYPE_NORMAL
- en: The test should always have a known start point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should always end with the same start point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The test should start from a specific point and ensure that the entire infrastructure
    is ready for execution. It would be ideal if we create the script to check the
    resources that are placed for test execution. For example, if the script starts
    its execution by starting the AUT and closes the application at the end of execution,
    the next iteration or test will start from the start point for opening an application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The test should clean up the resources: for example, closing MS Excel, closing
    files, closing tests, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configure the values instead of hardcoding; use the environment variables as
    shown in the code snippet that follows, or use dictionary objects:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Appropriate comments and script header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The header allows us to read a brief description about the function or script
    as shown. This helps to make scripts and functions readable and maintainable:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Readability and appropriate documentation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Script should be maintainable and easy to modify
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script and function header improve readability and allow modification of
    the code with ease, since it reveals key information and reduces maintenance time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Error handling and snapshot for errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the script contains the code to capture the snapshot using custom
    libraries, the `CaptureBitmap` method, or the `CaptureBitmap` of desktop utility.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The test should reveal maximum information in case an error occurs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The error messages should be clear and concise.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Logging utilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The logging utilities are a must to provide information and error logs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Code should have proper synchronization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the code has the ability to deal with synchronization issues by
    using `wait`, `wait` property, `exist`, `enable`, and `sync.`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Graceful exit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the code appropriately allows graceful exit using `Exit` `Function`,
    `Exit` `For`, `Exit` `Test`, and `Exit` `Action`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Custom logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All of the given techniques are useful to test the scripts but when we design
    the framework, there must be some abstraction and a set of layers to reach the
    actual point of error. The custom logs reveal information about how and where
    the error condition has occurred. A good logging mechanism displays the relevant
    message and snapshots of the error as well. Custom logs should provide the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling logging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The simplest way to debug is to use the `print` or `MsgBox` statements. The
    `Print` statement displays the message in the QTP log window and `MsgBox` displays
    the message box where the user needs to click on **OK** explicitly. It is not
    usually appreciable to use the `MsgBox` option since it requires human intervention,
    but it helps to fix the issues quickly in a few cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The debug version of the framework allows us to print or display messages to
    reveal the information required to find issues. QTP also provides the `Reporter`
    object to report the messages into the **Run Result** window. Apart from the `print`
    and `MsgBox` statements, logging is an important tool for debugging. The example
    that follows demonstrates how to enable or disable logging:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `Filter` property of the `Reporter` object with the `rfEnableAll` option
    to display all the messages using the `Reporter` object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `Debug` variable in the environment to turn the log messages `ON`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `MsgBox` statement to display the message in the window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `print` statement to print the values in QTP's print log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Disabling logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Disabling the log messages does just the opposite of enabling the messages:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `Filter` property of the `Reporter` object with the `rfDisableAll` option
    to display all the messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `Debug` variable in the environment to turn the log messages `OFF`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comment using the `MsgBox` statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comment using the `print` statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The log message displays one of the following statuses when a test step has
    been executed:'
  prefs: []
  type: TYPE_NORMAL
- en: Error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Done or Info
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In some cases, Fatal is also a category for the log message type.
  prefs: []
  type: TYPE_NORMAL
- en: 'QTP''s `Reporter` object allows us to display four types of messages using
    the `ReportEvent` method. The syntax for `ReportEvent` is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `ReportEvent` method reports an event to the **Run Result** window. This
    method allows us to notify the user for various events.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the status of the **Run Result** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Event status | Action |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `0` or `micPass` | This reports the passed message to the **Run Result**
    window |'
  prefs: []
  type: TYPE_TB
- en: '| `1` or `micFail` | This reports the failed message to the **Run Result**
    window |'
  prefs: []
  type: TYPE_TB
- en: '| `2` or `micDone` | This reports the completion of the step in the **Run Result**
    window |'
  prefs: []
  type: TYPE_TB
- en: '| `3` or `micWarning` | This sends a warning message to the **Run Result**
    window |'
  prefs: []
  type: TYPE_TB
- en: 'The following is an example of using the `ReportEvent` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the `ReportEvent` method is executed, the result is shown in the **Run
    Result** window. The following screenshot shows the icon along with the message
    to indicate the possible results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Filtering logs](img/1027EN_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table lists the `Filter` options in the `Reporter` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '| EventStatus | Action |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `0` or `rfEnableAll` | Reports all the events to the **Run Result** window
    |'
  prefs: []
  type: TYPE_TB
- en: '| `1` or `rfEnableErrorsAndWarnings` | Reports the warning and failed status
    to the **Run Result** window |'
  prefs: []
  type: TYPE_TB
- en: '| `2` or `rfEnableErrorsOnly` | Reports the failed status to the **Run Result**
    window |'
  prefs: []
  type: TYPE_TB
- en: '| `3` or `rfDisableAll` | Does not report any status to the **Run Result**
    window |'
  prefs: []
  type: TYPE_TB
- en: The test version versus the debug version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the framework test automation, we write the debug support code (debug code)
    that will not be released in the final program. The debug code makes sure that
    the code is correct at a certain point, or that it has correct values. The debug
    code can also be commented and uncommented on as well. This may be time consuming,
    therefore we prefer ON/OFF debugging. The debug code is not executed in the test
    version, but in case we need to debug the code we can enable the debug code. This
    becomes the debug version. The following sample code shows how we can enable and
    disable logging:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Deployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After the test automation framework is completed and tested, it needs to be
    released for automation engineers, SMEs, or even business users. The release activity
    follows from the completed development process. It includes all the operations
    to prepare a system for assembly and transfer it for use. Therefore, it must determine
    the resources required to operate and collect information for carrying out subsequent
    activities of the deployment process. Deployment is a process that starts after
    release. In the release process, the following artifacts are delivered but may
    vary based on the project''s need:'
  prefs: []
  type: TYPE_NORMAL
- en: Release notes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping document (traceability matrix)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design/architecture document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment is a set of activities that makes scripts (frameworks) available
    for use. During the process of deployment, make sure that the QTP-required patches
    and add-ins are installed. Ensure that all the required parameters are configured.
    After deployment, the test automation repository is created in the local drive's
    folder or in the test management tool.
  prefs: []
  type: TYPE_NORMAL
- en: Maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Maintenance includes error corrections, enhancement of capabilities, deletion
    of obsolete capabilities, and optimization. It is a process of evaluating, controlling,
    and making modifications that lead to changes in the code, GUI and flows of the
    application, and automation scripts. In a typical software project life cycle,
    maintenance leads to enhancement. A common perception of maintenance is that it
    merely involves fixing defects. All maintenance activities can be categorized
    into four classes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adaptive**: This modifies the system to cope with changes in the environment
    or AUT.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Perfective**: This implements new or changed user requirements, which concern
    functional enhancements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Corrective**: This involves diagnosing and fixing errors, possibly the ones
    found by users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Preventive**: This increases software maintainability or reliability to prevent
    problems in the future.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One or more of the following are kept up-to-date as the AUT is updated over
    time:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Test objects:** When a new version or patch is released it may be required
    to change test objects, their properties, and adding or removing the test objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parameters in OR:** It may be required to change the OR parameters that reflect
    the changes in the AUT. Update the object descriptions as the object properties
    may change; this can be done in the following two ways:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually change the object properties
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the test in the **Update Run** mode or **Maintenance Run** mode
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Both of these modes are explained in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: We can delete, change, or add new releases of the test object; this results
    in the removal or addition of test objects. The test objects are added or removed
    and redistributed to the OR with changes.
  prefs: []
  type: TYPE_NORMAL
- en: Script/library maintenance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With changes in the flow, the addition of functionality and modification in
    the scripts and libraries needs to be updated. While designing the framework,
    consider how the scripts and functional libraries should be changed. In the design
    phase, make sure that the design is robust enough to accommodate minimal changes
    or no changes at all.
  prefs: []
  type: TYPE_NORMAL
- en: Automation test repository maintenance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To maintain the frameworks, we need to periodically clean up the obsolete resources
    or documents, such as log files, result folders, and test data.
  prefs: []
  type: TYPE_NORMAL
- en: QTP provides two options for maintaining scripts. These are explained in the
    following section.
  prefs: []
  type: TYPE_NORMAL
- en: The Maintenance Run mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the script runs in the **Maintenance Run** mode and the object has changed,
    it offers to update the properties and steps or keep the original object and step
    intact. If QTP fails to recognize the test object, it asks the user to point the
    object in the AUT and then provide the option to update the properties or keep
    the original object or step. If the changed checkpoint values are not updated,
    they will fail in the case of a mismatch.
  prefs: []
  type: TYPE_NORMAL
- en: The Update Run mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Update Run** mode allows us to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Update the test object descriptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the checkpoints and output values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the active screen images and values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decide on what is required to update and select the option(s) as shown in the
    preceding list. In the case that QTP fails to recognize the object, it will throw
    an error. It updates the object if the object has changed without intimating the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Enhancement starts with the analysis and assessment of the impact of changes
    on the scripts. Enhance the test, debug it, and then release it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key steps in the enhancement process are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Understand the changes and their impact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the scripts and document them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debug and fix errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The overall goal is to achieve low maintenance cost. The issues in the maintenance
    phase are both managerial and technical. Test automation faces various managerial
    issues such as estimating costs, changing customer priorities, and staffing, whereas
    examples of technical issues are working with limited understanding, impact analysis,
    and testing. The framework allows low maintenance costs due to its test automation
    repository structure and standard ways to add, remove, and modify the scripts
    and libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter places emphasis on the techniques required in maintaining the framework.
    Debugging is an important technique for identifying and fixing the issue quickly.
    The next chapter talks about using JavaScript, which allows interaction with the
    DOM in the web page and uses XPath to create the script.
  prefs: []
  type: TYPE_NORMAL
