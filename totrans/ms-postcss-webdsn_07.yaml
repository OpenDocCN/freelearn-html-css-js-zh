- en: Chapter 7. Animating Elements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 动画元素
- en: 'A question: if you had the choice of three websites: one static, one with badly
    done animation, and one which has been enhanced with subtle use of animation,
    which would you choose? Well, my hope is the answer to that question should be
    number three: animation can really make a site stand out if done well, or fail
    miserably if done badly!'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一个问题：如果你有三个网站的选择：一个静态网站，一个动画做得不好的网站，以及一个通过微妙地使用动画增强的网站，你会选择哪一个？嗯，我的希望是那个问题的答案应该是第三个：如果做得好，动画真的可以使网站脱颖而出，如果做得不好，则可能彻底失败！
- en: 'So far, our content has been relatively static, save for the use of media queries.
    It''s time, though, to take a look at how PostCSS can help make animating content
    a little easier. We''ll begin with a quick recap on the basics of animation, before
    exploring the route to moving away from pure animation, through to SASS, and finally,
    across to PostCSS. We will cover a number of topics throughout this chapter, which
    will include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的内容相对静态，除了使用媒体查询。然而，现在是时候看看PostCSS如何帮助使动画内容变得更容易一些了。我们将在快速回顾动画的基本知识之后，探索从纯动画转向SASS，最终转向PostCSS的路径。在本章中，我们将涵盖多个主题，包括：
- en: 'A recap on the use of jQuery to animate content:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jQuery动画内容的回顾：
- en: Switching to CSS-based animation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切换到基于CSS的动画
- en: Exploring the use of pre-built libraries such as `Animate.css`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索使用预构建库（如`Animate.css`）的应用
- en: Exploring the options available when making the change to using PostCSS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索在切换到使用PostCSS时的可用选项
- en: Working through creating an animation-based demo, using PostCSS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PostCSS创建基于动画的演示
- en: Learning how to optimize animations using PostCSS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用PostCSS优化动画
- en: Let's make a start…!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧…！
- en: Revisiting basic animations
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾基本动画
- en: Animation is quickly becoming king in web development, more and more websites
    are using animations to help bring life and keep content fresh. If done correctly,
    they add an extra layer of experience for the end user; done badly, and the website
    will soon lose more custom than water through a sieve!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 动画正迅速成为Web开发的王者，越来越多的网站正在使用动画来帮助使内容生动并保持新鲜。如果做得正确，它们将为最终用户添加一个额外的体验层次；如果做得不好，网站很快就会失去比筛子更多的客户！
- en: Throughout the course of the chapter, we'll take a look at making the change
    from writing standard animation, through to using processors such as SASS, and
    finally, switching to using PostCSS. I can't promise you that we'll be creating
    complex JavaScript-based demos such as the *Caaaat* animation ([http://roxik.com/cat/](http://roxik.com/cat/)—try
    resizing the window!), but we will see that using PostCSS is really easy when
    creating animations for the browser.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的整个过程中，我们将探讨从编写标准动画到使用处理器（如SASS），最后切换到使用PostCSS的转变。我不能保证我们会创建像*Caaaat*动画（[http://roxik.com/cat/](http://roxik.com/cat/)—尝试调整窗口大小！）这样的复杂基于JavaScript的演示，但我们将看到，在为浏览器创建动画时使用PostCSS实际上是非常容易的。
- en: To kick off our journey, we'll start with a quick look at the traditional animation—how
    many times have you had to use `.animate()` in jQuery, over the years? Thankfully,
    we have the power of CSS3 to help with simple animations, but there was a time
    when we had to animate content using jQuery.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始我们的旅程，我们将快速回顾传统的动画——这些年来你有多少次不得不在jQuery中使用`.animate()`？幸运的是，我们有CSS3的力量来帮助我们处理简单的动画，但曾经有一段时间，我们必须使用jQuery来动画化内容。
- en: 'As a quick reminder, try running `animate.html` from the `T34 – Basic animation
    using jQuery animate()` folder. It''s not going to set the world on fire, but
    is a nice reminder of times gone by, when we didn''t know any better:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 作为快速提醒，尝试从`T34 – 使用jQuery animate()的基本动画`文件夹中运行`animate.html`。它可能不会让世界着火，但它是一个美好的提醒，让我们想起那些我们不知道更好的时光：
- en: '![Revisiting basic animations](img/BO5194_07_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![回顾基本动画](img/BO5194_07_01.jpg)'
- en: 'If we take a look at a profile of this animation from within a DOM inspector
    from within a browser such as Firefox, it would look something like this screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从浏览器（如Firefox）的DOM检查器中查看这个动画的轮廓，它看起来可能就像这个截图：
- en: '![Revisiting basic animations](img/BO5194_07_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![回顾基本动画](img/BO5194_07_02.jpg)'
- en: Whilst the numbers aren't critical, the key point here is the two dotted green
    lines, and that the results show a high degree of inconsistent activity. This
    is a good indicator that activity is erratic, with a low frame count, resulting
    in animations that are jumpy and less than 100% smooth.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: The great thing, though, is that there are options available to help provide
    smoother animations; we'll take a brief look at some of the options available,
    before making the change to using PostCSS. For now though, let's make that first
    step to moving away from using jQuery, beginning with a look at the options available
    for reducing dependency on the use of `.animate()` or jQuery.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Moving away from jQuery
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Animating content can be a contentious subject, particularly if jQuery or JavaScript
    is used—if we were to take a straw poll of 100 people and ask which they used,
    it is very likely that we would get mixed answers! A key answer of *it depends*
    is likely to feature at or near the top of the list of responses; many will argue
    that animating content should be done using CSS, while others will affirm that
    JavaScript-based solutions still have value.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'Leaving aside that…shall we say…lively debate, if we''re looking to move away
    from using jQuery, and in particular `.animate()`, then we have some options available
    to us:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Upgrade your version of jQuery! Yes—this might sound at odds with the theme
    of this chapter, but the most recent versions of jQuery introduced the use of
    `requestAnimationFrame`, which improved performance, particularly on mobile devices.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A quick and dirty route is to use the jQuery Animate Enhanced plugin, available
    from [http://playground.benbarnett.net/jquery-animate-enhanced/](http://playground.benbarnett.net/jquery-animate-enhanced/);
    although a little old, it still serves a useful purpose. It will (where possible)
    convert `.animate()` calls into CSS3 equivalents; it isn't able to convert all,
    so any that are not converted will remain as `.animate()` calls.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the same principle, we can even take advantage of the JavaScript animation
    library, GSAP—the Greensock team have made available a plugin (from [https://greensock.com/jquery-gsap-plugin](https://greensock.com/jquery-gsap-plugin)),
    that replaces `jQuery.animate()` with their own GSAP library. The latter is reputed
    to be 20 times faster than standard jQuery! With a little effort, we can look
    to rework our existing code—in place of using `.animate()`, we can add the equivalent
    CSS3 style(s) into our stylesheet and replace existing calls to `.animate()` with
    either `.removeClass()` or `.addClass()`, as appropriate.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can switch to using libraries such as Transit ([http://ricostacruz.com/jquery.transit/](http://ricostacruz.com/jquery.transit/)),
    it still requires the use of jQuery, but gives better performance than using the
    standard `.animate()` command.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another alternative is Velocity JS by Jonathan Shapiro, available from [http://julian.com/research/velocity/](http://julian.com/research/velocity/);
    this has the benefit of not having jQuery as a dependency. There is even talk
    of incorporating all or part of the library into jQuery, as a replacement for
    `.animate()`—for more details, check out the issue log at [https://github.com/jquery/jquery/issues/2053](https://github.com/jquery/jquery/issues/2053).
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many people automatically assume that CSS animations are faster than JavaScript
    (or even jQuery). After all, we don't need to call an external library (jQuery);
    we can use styles that are already baked into the browser, right? The truth is
    not as straightforward as this—in short, the right use of either will depend on
    your requirements and the limits of each method. For example, CSS animations are
    great for simple state changes, but if sequencing is required, then you *may*
    have to resort to using the JavaScript route.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: The key, however, is less in the method used, and more in how many frames per
    second are displayed on screen. Most people cannot distinguish above 60FPS—this
    produces a very smooth experience. Anything less than around 25FPS will produce
    blur and occasionally appear jerky—it's up to us to select the best method available,
    that produces the most effective solution.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see the difference in frame rate, take a look at [https://frames-per-second.appspot.com/](https://frames-per-second.appspot.com/)—the
    animations on this page can be controlled; it's easy to see why 60FPS produces
    a superior experience!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: So, which route should we take? Well, over the next few pages, we'll take a
    brief look at each of these options. At this point, you may well be asking, "How
    is this relevant to PostCSS though, given that this is the subject of this book?"
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: In a nutshell, they are all methods that either improve how animations run,
    or allow us to remove the dependency on `.animate()`, which we know is not very
    efficient! True, some of these alternatives still use jQuery, but the key here
    is that your existing code could be using any or a mix of these methods. Later
    in this chapter, we'll take a look at how we can begin to remove jQuery, and focus
    more on using CSS3 animations, using the PostCSS plugin system.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A small word of note, all of the demos over the next few pages were run at the
    same time as a YouTube video was being run; this was to help simulate a little
    load and get a more realistic comparison. Running animations under load means
    less graphics processing power is available, which results in a lower FPS count.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Let's kick off with a look at our first option, the `Transit.js` library.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Animating content with Transit.js
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In an ideal world, any project we build will have as few dependencies as possible;
    this applies equally to JavaScript or jQuery-based content as it does to CSS styling.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'To help with reducing dependencies, we can use libraries such as TransitJS
    or Velocity to construct our animations. The key here is to make use of the animations
    that these libraries create, as a basis for applying styles we can then manipulate
    using `.addClass()` or `.removeClass()`. To see what I mean, let''s explore this
    concept with a simple demo:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by opening up a copy of `animate.html`—to make it easier, we need
    to change the reference to `square-small` from a class to a selector:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, go ahead and add in a reference to the Transit library, immediately before
    the closing `</head>` tag:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The Transit library uses a slightly different syntax, so go ahead and update
    the call to `.animate()` as indicated:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Save the file, then try previewing the results in a browser—if all is well,
    we should see no material change in the demo:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating content with Transit.js](img/BO5194_07_03.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: 'However, the animation will be significantly smoother—the frame count is higher,
    at 44.28FPS, with fewer dips:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating content with Transit.js](img/BO5194_07_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: Let's compare this with the same profile screenshot taken for the *Revisiting
    basic animations* section, earlier in this chapter—notice anything?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'Profiling browser activity can be complex, but there are only two things we
    need to concern ourselves with here: the FPS value and the state of the green
    line. The FPS value, or Frames Per Second, is over three times higher, and for
    a large part, the green line is more consistent, with fewer, more short-lived
    dips.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: This means that we have a smoother, more consistent performance; at approximately
    44FPS, the average frame rate is significantly better than using standard jQuery—but
    we're still using jQuery!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a difference, though—libraries such as Transit or Velocity convert
    animations, where possible, to CSS3 equivalents—if we take a peek under the covers,
    we can see this in the flesh:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating content with Transit.js](img/BO5194_07_05.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: We can use this to our advantage, by removing the need to use `.animate()` and
    simply use `.addClass()` or `.removeClass()`—we'll see this in action later in
    this chapter, in the *Switching classes using jQuery* section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to compare our simple animation when using Transit or Velocity,
    there are examples available in the code download, as demos `T35A` and `T35B`,
    respectively.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: To take it to the next step, we can use the Velocity library to create a version
    of our demo using plain JavaScript—we'll see how as part of the next demo. Beware
    though—this isn't an excuse to still use JavaScript; as we'll see, there is little
    difference in the frame count!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Animating with plain JavaScript
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many developers are used to working with jQuery—after all, it makes it a cinch
    to reference just about any element on a page! Sometimes though, it is preferable
    to work in native JavaScript; this could be for speed. If we only need to support
    newer browsers (such as IE11 or Edge, and recent versions of Chrome or Firefox),
    then adding jQuery as a dependency isn't always necessary.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'The beauty about libraries such as Transit (or Velocity) means that we don''t
    always have to use jQuery to still achieve the same effect; as we''ll see shortly,
    removing jQuery can help improve matters! Let''s put this to the test, and adapt
    our earlier demo to work without using jQuery:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by extracting a copy of the `T35B` folder from the code download
    that accompanies this book. Save this to the root of our project area.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to edit a copy of `animate.html` within this folder—go ahead
    and remove the link to jQuery, then remove the link to `velocity.ui.min.js`; we
    should be left with this in the `<head>` of our file:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A little further down, alter the `<script>` block as shown:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the file, then preview the results in a browser—if we monitor the performance
    of our demo using a DOM Inspector, we can see a similar frame rate being recorded
    in our demo:![Animating with plain JavaScript](img/BO5194_07_06.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With jQuery as a dependency no longer in the picture, we can clearly see that
    the frame rate has improved; the downside, though, is that support is reduced
    for some browsers, such as IE8 or 9\. This may not be an issue for your site—both
    Microsoft and the jQuery Core Team have announced changes to drop support for
    `IE8` - `10` and `IE8` respectively, which will help encourage users to upgrade
    to newer browsers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: It has to be said though, that while using CSS3 is preferable for speed and
    keeping our pages as lightweight as possible, using Velocity does provide a raft
    of extra opportunities that may be of use to your projects. The key here, though,
    is to carefully consider if you really do need them, or whether CSS3 will suffice,
    and allow you to use PostCSS.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Switching classes using jQuery
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, there is one question that comes to mind: what about using class-based
    animation? By this, I mean dropping any dependency on external animation libraries,
    and switching to using plain jQuery with either `.addClass()` or `.removeClass()`
    methods.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'In theory, it sounds like a great idea—we can remove the need to use `.animate()`,
    and simply swap classes as needed, right? Well, it''s an improvement, but it is
    still lower than using a combination of pure JavaScript and switching classes.
    It all boils down to a trade-off between using the ease of jQuery to reference
    elements, against pure JavaScript for speed:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by opening a copy of `animate.html` from the previous exercise—first,
    go ahead and replace the call to Velocity.JS with this line, within the `<head>`
    of our document:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, remove the code between the `<script>` tags, and replace it with this:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Save the file—if we preview the results in a browser, we should see no apparent
    change in how the demo appears, but the transition is marginally more performant
    than using a combination of jQuery and Transit:![Switching classes using jQuery](img/BO5194_07_07.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The real change in our code, though, will be apparent if we take a peek under
    the covers using a DOM Inspector:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![Switching classes using jQuery](img/BO5194_07_08.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: Instead of using `.animate()`, we are using CSS3 animation styles to move our
    square-small `<div>`. Most browsers will accept the use of transition and transform,
    but it is worth running our code through a process such as Autocomplete, to ensure
    we apply the right vendor prefixes to our code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: The beauty of using CSS3 here is that, while it might not suit large, complex
    animations, we can at least begin to incorporate the use of external stylesheets
    such as `Animate.css`, or even use a preprocessor such as SASS to create our styles.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: It's an easy change to make, so without further ado, and as the next step on
    our journey to using PostCSS, let's take a look at this in more detail.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to create custom keyframe-based animations, then take a look
    at [http://cssanimate.com/](http://cssanimate.com/), which provides a GUI-based
    interface for designing them, and will pipe out the appropriate code when requested.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Making use of pre-built libraries
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point, all of our animations have had one thing in common—they are
    individually created, and stored within the same stylesheet as other styles for
    each project.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: This will work perfectly well, but we can do better—after all, it's possible
    that we may well create animations that others have already built! Over time,
    we may also build up a series of animations that can form the basis of a library
    that can be reused for future projects.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: A number of developers have already done this. One example of note is the `Animate.css`
    library, created by Dan Eden. It's worth getting to know this library, as we will
    use it later in this book in the guise of the postcss-animation plugin for PostCSS.
    In the meantime, let's run through a quick demo of how it works, as a precursor
    to working with it in PostCSS.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The images used in this demo are referenced directly from the LoremPixem site,
    as placeholder images.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a start:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by extracting a copy of the `T37` folder from the code download
    that accompanies this book—save the folder to our project area.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, open a new file and add the following code:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save this as `style.css` in the `css` subfolder within the `T37` folder.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go ahead and preview the results in a browser—if all is well, then we should
    see something akin to this screenshot:![Making use of pre-built libraries](img/BO5194_07_09.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we run the demo, we should see images run through different types of animation—there
    is nothing special or complicated here; the question is, though, how does it all
    fit in with PostCSS?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Well, there's a good reason for this—there will be some developers who have
    used `Animate.css` in the past, and will be familiar with how it works; we will
    also be using the `postcss-animation` plugin later, in *Updating code to use PostCSS*,
    which is based on the `Animate.css` stylesheet library. For those of you who are
    not familiar with the stylesheet library though, let's quickly run through how
    it works, within the context of our demo.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Dissecting the code for our demo
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The effects used in our demo are quite striking—indeed, one might be forgiven
    for thinking that they required a lot of complex JavaScript!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'This, however, could not be further from the truth—the `Animate.css` file contains
    a number of `@keyframe` based animations, similar to this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We pull in the animations using the usual call to the library, within the `<head>`
    section of our code. We can then call any animation by name from within our code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You will notice the addition of the `.animated` class in our code—this controls
    the duration and timing of the animation, and is set according to which animation
    name has been added to the code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: The downside of not using JavaScript (or jQuery for that matter) means that
    the animation will only run once when the demo is loaded; we can set it to run
    continuously by adding the `.infinite` class to the element being animated (this
    is part of the Animate library). We can fake a click option in CSS, but it is
    an experimental hack, which is not supported across all browsers—to effect any
    form of control, we really need to use JavaScript (or even jQuery)!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are interested in the details of the hack, then take a look at this response
    on Stack Overflow, at [http://stackoverflow.com/questions/13630229/can-i-have-an-onclick-effect-in-css/32721572#32721572](http://stackoverflow.com/questions/13630229/can-i-have-an-onclick-effect-in-css/32721572#32721572).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, onwards we go: we''ve covered the basic use of pre-built libraries, such
    as Animate. It''s time to step up a gear, and make the transition to PostCSS.
    As a start, we will use Gulp as our task runner of choice, with SASS. The latter
    is a perfect choice, as it fits in with the plugin we will use later in this chapter.
    Let''s take a look at what is involved in laying the groundwork for our conversion
    to PostCSS.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Switching to using SASS
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a developer or designer, if our development workflow includes the use of
    SASS, then the temptation is to use mixins such as this to construct our styles:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: There's nothing wrong with this, but it will take effort to manage our mixins
    if we need to use more than just a small handful! The easier option is to explore
    using a pre-built animation library, as a way of reducing our development effort.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of developers who have created mixin libraries to handle
    animations; a perfect example is the SASS port of Animate, by Geoff Graham, which
    is available for download at [https://github.com/geoffgraham/animate.scss](https://github.com/geoffgraham/animate.scss).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'There is something, though, that we have to be mindful of when working with
    mixins—it''s all too easy to use them to manage vendor prefixes, such as this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Although it will add the relevant vendor prefixes when the code is compiled,
    it's **not** considered best practice.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: The onus is on us to ensure that each animation includes all of the relevant
    vendor prefixes—with the best will in the world, it's a challenge to keep up!
    There is also the issue of adding rules that won't have any effect—for example,
    there is no point in adding `–o` as a prefix for transition; this prefix is no
    longer needed.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, there is a better way to handle prefixes—we can use Autoprefixer
    (from [https://twitter.com/autoprefixer](https://twitter.com/autoprefixer)) to
    automatically handle vendor prefixes for us. The great thing about Autoprefixer
    is that it uses the Can I Use ([http://www.caniuse.com](http://www.caniuse.com))
    database to keep details up to date.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: There are various plugins available that allow us to use task runners such as
    Grunt or Gulp. We can of course use a standalone GUI-based compiler for this purpose,
    but why run something like this when we can tie in much more functionality when
    using a task runner? We can even use any one of several plugins to remove vendor
    prefixes, prior to running a new compilation—this will ensure any redundant prefixes
    are removed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: With this in mind, let's get practical. For our next demo, we're going to construct
    a simple gallery effect, which showcases the same animations we saw earlier, but
    this time using the SASS version of `Animate.css`. We'll use Gulp as our task
    runner to compile the SASS code, before adding a source map, checking our code
    for consistency, adding vendor prefixes, and so on. You get the idea!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Suffice to say that we can do a lot using a task runner, so without further
    ado, let's get started with constructing our gallery.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Creating an animated gallery
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Animating content can be a double-edged sword. Added with care, it can really
    lift a site to the next level. If it is done badly, then patronage of the site
    is likely to drop like a stone!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: In our last demo, we constructed a simple gallery effect—this was more to show
    off the different types of animated effects we can add, rather than produce something
    that would win awards. Over the next few pages, we'll continue with our demo,
    but this time reconfigure it to use the SASS version of `Animate.css`. We will
    also introduce the use of a task runner to compile our code—as this is a requirement
    for using PostCSS, it seems a perfect point to start using it, as the final part
    of our transition to working with animation and PostCSS.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The files for this tutorial are available in the `T38` folder in the accompanying
    code download.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'Without further ado, let''s add the changes to our previous demo:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: We need to download the SASS version of Animate—it's available from [https://github.com/geoffgraham/animate.scss/archive/master.zip](https://github.com/geoffgraham/animate.scss/archive/master.zip).
    Go ahead and extract the contents of `Animate.scss-master` into the `src` folder
    at the root of our project area.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `src` folder, rename the `Animate.scss` file to `_animate.scss`—this
    is to indicate that it is a **partial**, which prevents it being compiled as a
    separate file by the SASS compiler.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `src` folder, go ahead and rename it as `style.scss`—this changes it
    to a SASS file, which is required for compilation later in the exercise. We should
    have something akin to this screenshot in our `src` folder:![Creating an animated
    gallery](img/BO5194_07_10.jpg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go ahead and open up the `style.scss` file. At the bottom, add this line at
    the top of the stylesheet:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, add the following additional lines at the end of the stylesheet—these
    pull in the animations from the SASS version of `Animate.css`; the timing has
    also been extended to five seconds, as the original example was too quick:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save the file, then copy the contents of the `src` folder under `T38` to the
    `src` folder at the root of our project area—we will be compiling this file shortly.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a new file, go ahead and add the following code, then save it as `gulpfile.js`
    to the root of our project area—this will form our gulp file, which we will use
    to compile our code:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We also need a `package.json` file—this will store details of the plugins we
    will be using. For now, we will limit ourselves to using `gulp-sass`, but this
    will soon change! Go ahead and add the following lines to a new file, saving it
    as `package.json` in the root of our project area:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The keen-eyed among you should spot that we''ve not installed the gulp-sass
    plugin. Let''s fix that now by firing up a Node.js command prompt, then changing
    the working directory to the project area. Go ahead and run this command from
    the prompt:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: At the prompt, enter `gulp` then press Enter—Gulp will now go away and compile
    our file; if all is well, we should see a compiled style sheet appear in the `dest`
    folder of our project area.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, try running `animate.html` in a browser—if all is well, we should
    see no change to our gallery effect, but can be safe in the knowledge that we're
    now using the SASS version of `Animate.css`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our demo has now been converted to using `Animate.scss`—we could easily have
    chosen to use any one of several compilers (such as Koala—[http://www.koala-app.com](http://www.koala-app.com)),
    but instead chose to use Gulp. It acts as a perfect route into making the transition
    to using PostCSS—as we've seen in earlier demos, we've already used a task runner
    in the form of Gulp for this purpose. This allows us to make that gradual transition—when
    all of the SASS elements have been converted, we simply drop the task from within
    our gulp file to complete the transition.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Adding the finishing touches
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, what next? We've created a basic gulp task file, which we used to compile
    our SASS code to valid styles.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: But this is just a small part of the story; we need to add a lot more to make
    our compilation process useful and ready for conversion to using PostCSS.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'The first change we need to make is in the `package.json` file—go ahead and
    add the lines as highlighted:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we need to configure our gulp file with some additional tasks—the first
    task is to add references to some additional plugins that we''ve already used
    from earlier in the book. Go ahead and add the following highlighted lines:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With the additional plugin references added, we now need to add in our extra
    tasks—immediately below the SASS task, add in this task; this manages the linting
    of our code, for consistency:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add this next task immediately below the previous step—this renames the files
    as part of the minification process:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Our next gulp task manages the generation of source maps—this can be done within
    SASS automatically, but using a separate plugin allows flexibility during compilation.
    Go ahead and add this task immediately below the previous one:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We''re almost at the end—go ahead and alter these lines as indicated:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Save the file. Go ahead and fire up a Node.js command prompt, then change the
    working folder to our project area.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the prompt, type in `gulp` then press *Enter*—Gulp will go away and compile
    our file.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we take a look in the `dest` folder, we should see the same compiled `style.css`
    file, but this time with accompanying minified versions of the source map and
    style sheet:![Adding the finishing touches](img/BO5194_07_11.jpg)
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we preview the results of our work, we should see no change in functionality
    within the demo, but can be safe in the knowledge that we now have minified versions
    of our files available for use—after all, it is always better to use minified
    files in a production environment!
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: We've now laid the groundwork for our conversion to using PostCSS—the keen-eyed
    among you should spot that the plugin reference for PostCSS has already been added
    to our gulp file, ready for the next stage in our conversion process. Everything
    is now in place in our gulp file, save for the SASS task – at the appropriate
    point we will remove the SASS task and replace it with a PostCSS equivalent; this
    will take place in our next exercise. Before we do so, it's worth taking a little
    time to explore what is available within the PostCSS ecosystem—although there
    isn't a great deal on offer, we can still produce usable code for compilation
    within PostCSS.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Making the switch to PostCSS
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay…it's time to make that change to PostCSS!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Before we get stuck into exploring what is available, there is a key question
    that I am sure you will be asking—how come we've been exploring animation using
    JavaScript, when this book is clearly about PostCSS?
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a very good answer for this—not only are we exploring the different
    routes we might take to transition to PostCSS, but at a more basic level, whether
    we can make the change. This might sound contradictory, so let me explain all:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: A key limitation of animation is the FPS count, or Frames Per Second—jQuery's
    standard `.animate()` method is notoriously slow, and has not been optimized for
    speed. The FPS count on our animation at the start of this chapter was significantly
    lower than that of Velocity. The same applies for the alternative Transit library
    that we also covered earlier in this chapter.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Making the switch to using CSS will improve the frame rate, but CSS-based animation
    is not yet sufficiently powerful to manage complex animations. It means that we
    as developers have to assess any requirements for a project, and weigh up whether
    CSS-based animation will work, or if we have to fall back to using JavaScript-based
    libraries.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: This translates through to using PostCSS—it may be tempting to use CSS-based
    animation for a project, but this will only work if our animation requirements
    are such that it is not going to result in an overly complex, difficult to manage,
    solution.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Exploring plugin options within PostCSS
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assuming the use of CSS3 animations will be suitable for our project, it's at
    this point that we can begin to make the transition to using PostCSS.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re expecting to see an array of plugins, then I''m sorry to disappoint—at
    present, there are only four plugins for use with animations:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '**Animation**: Available at [https://github.com/zhouwenbin/postcss-animation](https://github.com/zhouwenbin/postcss-animation),
    this adds `@keyframes` from `Animate.css`. This plugin uses [https://github.com/zhouwenbin/postcss-animation-data](https://github.com/zhouwenbin/postcss-animation-data),
    which hosts the converted animations.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PostCSS Easings**: Downloadable from [https://github.com/postcss/postcss-easings](https://github.com/postcss/postcss-easings),
    this plugin converts easing names from [http://www.easings.net](http://www.easings.net)
    to `cubic-bezier()` equivalent values.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PostCSS Transform Shortcuts**: This plugin allows us to specify individual
    values when creating transform statements—the source for this plugin is available
    from [https://github.com/jonathantneal/postcss-transform-shortcut](https://github.com/jonathantneal/postcss-transform-shortcut).'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PostCSS MQ Keyframes**: This plugin will move any keyframes from inside media
    queries to the bottom of our CSS file.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One could be forgiven for wondering what is possible with such a small range
    of plugins! We will add to the list a little later on though. Toward the end of
    the chapter, we will create a version of the `postcss-animation-data` plugin that
    allows us to use the Magic animations from [http://www.minimamente.com/example/magic_animations/](http://www.minimamente.com/example/magic_animations/).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, let''s put some of these to use: time for a demo!'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Updating code to use PostCSS
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the PostCSS ecosystem doesn't yet have a plentiful selection of animation-based
    plugins, this should not stop us from using it to compile our animation styles.
    To prove this, we're going to modify the jQuery and .add/remove class version
    of our previous demo—we'll use PostCSS to add an animation easing from the `Animate.css`
    library created by Dan Eden.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: The plugin we require is the `postcss-animation` plugin, which is available
    from [https://github.com/zhouwenbin/postcss-animation](https://github.com/zhouwenbin/postcss-animation)
    and uses the `postcss-animation-data` plugin from [https://github.com/zhouwenbin/postcss-animation-data](https://github.com/zhouwenbin/postcss-animation-data).
    It's a cinch to install the plugin, which uses the same method as all of the other
    plugins we've installed to date.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started on the demo:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the `postcss-animation` plugin—for this, go ahead
    and open a Node.js session, then change the working directory to our project area.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompt, enter this command and press Enter:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If all is well, we should see the plugin install:'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Updating code to use PostCSS](img/BO5194_07_12.jpg)'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: From the code download that accompanies this book, extract and save a copy of
    the contents of the `T39` folder to our project area—we'll use this as a basis
    for converting to PostCSS.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `style.css` from the `css` sub-folder of the tutorial folder, then at
    the bottom, modify the `.move` rule as indicated:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Save this file into the `src` folder, then fire up a Node.js command prompt
    and change the working folder to our project area.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the prompt, enter `gulp` then press Enter—if all is well, we should see these
    files appear in the `dest` folder:![Updating code to use PostCSS](img/BO5194_07_13.jpg)
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last step is to copy the contents of this folder into the `css` folder within
    the `T39` folder.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point we're good to test our demo—if we try previewing the results of
    our work, we should see no change in appearance of our demo, but can be safe in
    the knowledge that we're now compiling our code using PostCSS.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Testing our altered code
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we may not see any change in the appearance of our demo, there will
    clearly be a difference in how it behaves. To view this, we need to take a look
    under the covers of our demo, at the code.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'For this demo, we added an animation-name property, and assigned it the name
    `bounce`; when compiled, PostCSS adds in the appropriate `@keyframes` rules to
    the code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing our altered code](img/BO5194_07_14.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
- en: 'So, if we were to take a look at the performance, how does it compare? Even
    with the extra animation property assigned, it still pulls a respectable frame
    rate of 48.29FPS, when compared to using standard `.animate()`:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing our altered code](img/BO5194_07_16.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
- en: This helps reinforce that where possible, we can improve performance by removing
    any dependency on using `.animate()` in our code. The use of CSS styling to animate
    content isn't quite ready to replace JavaScript, but it is slowly getting there!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, onwards we go: we''ve briefly looked at the various ways to animate content;
    it''s time to make that final transition to using PostCSS. How many times have
    you seen forms that display the label above, or to the left of, each field? Sure,
    it gets boring after a while, seeing the same old design! It''s easy to change,
    so there is no excuse for not doing so. To prove this, we''re going to use PostCSS
    to slide each label up when that field has focus. Yes, you heard me right…*slide
    up*. Let''s take a look at how we can provide a new take on that venerable piece
    of functionality for any site.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Creating a demo in PostCSS
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an afterthought to the previous exercise, I posed the question, "How many
    times have you seen forms that display labels above, or to the right of, fields?"
    If I were to collect a dime for each answer, I suspect I would be off on some
    exotic island, rich, and without a care in the world—I've lost count of the number
    of times I've seen such forms, let alone anyone else who uses the Internet!
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no excuse for plain, boring forms. To prove this, we''re going to
    create a simple demo using the `postcss-transform-shortcut` plugin by Jonathan
    Neal, available from [https://github.com/jonathantneal/postcss-transform-shortcut](https://github.com/jonathantneal/postcss-transform-shortcut).
    It''s a straightforward plugin that allows us to specify single properties, which
    the plugin combines into a single line of code within our style sheet. Let''s
    quickly install it:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: First, go ahead and fire up a Node.js command prompt session, then change the
    working folder to our project area.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompt, enter this command, then press Enter:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Node will now install the plugin—it will return back to a flashing prompt when
    this is complete.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is no need to configure it, although there is a small task we have to
    complete before we can use it.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Updating the plugin
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While researching for this book, I came across an issue in the current release
    (1.0.0), whereby style sheets weren't compiling properly if they had multiple
    rules within; there are occasions when plugins may or may not work for your environment,
    and this is one of them!
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'Thankfully, this is an easy fix—if we take a look within the `postcss-transform-shortcut`
    folder within the `node_modules` folder in our project area, we should see this:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating the plugin](img/BO5194_07_17.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
- en: Simply copy the contents of the file at [https://raw.githubusercontent.com/pc035860/postcss-transform-shortcut/07af8a78d1fb5e7fdeebc8c7f56c0c9ecdd83efb/index.js](https://raw.githubusercontent.com/pc035860/postcss-transform-shortcut/07af8a78d1fb5e7fdeebc8c7f56c0c9ecdd83efb/index.js)
    and paste straight over the top of `index.js`; this should resolve the issue.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This has been logged as an issue in the developer's GitHub site, at [https://github.com/jonathantneal/postcss-transform-shortcut/issues/4](https://github.com/jonathantneal/postcss-transform-shortcut/issues/4),
    if you would like to see more details about the issue.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Building our demo
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have our updated plugin in place, we can get on with building our
    demo! The next exercise will take the form of a simple credit card form—*I don't*
    suggest you use it in a production environment, as it is purely designed to show
    the animation effects *only*, and does not have any security attached to the form!
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'That aside, here''s a screenshot of what we''re going to produce, using PostCSS:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '![Building our demo](img/BO5194_07_18.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
- en: It's a simple demo, based on a codepen created by Michael Arestad, which you
    can view at [http://codepen.io/MichaelArestad/pen/ohLIa](http://codepen.io/MichaelArestad/pen/ohLIa)—I've
    simplified and reworked the demo to illustrate how we can use PostCSS to compile
    the code into valid CSS styles.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, let''s make a start with setting up our demo:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by extracting a copy of the `T40 – Creating a demo in PostCSS` folder
    from the code download that accompanies this book; save it to our project area.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From within the folder, move the `package.json` and `gulpfile.js` files up a
    level to the root of our project area.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `css – completed versions` folder, copy `style – pre-compile version.css`
    to the `src` folder, and rename as `style.css`.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, fire up a Node.js command prompt session, then change the working folder
    to our project area.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the prompt, enter gulp, then press Enter—PostCSS will go away and compile
    our code; if all is well, we should see our compiled style sheet files and `source
    maps` appear in the `dest` folder.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of the `dest` folder to the `css` folder within the original
    `T40 – Creating a demo in PostCSS` folder.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go ahead and preview the results—if all is well, we should see something akin
    to the screenshot shown at the start of our exercise.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a simple demo, but it shows off how we can use animations perfectly—it
    adds a subtle effect to the label, and doesn't spoil the overall use of our form.
    The use of the plugin does raise a couple of useful points, so let's take a moment
    to explore what we've just created in more detail.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Dissecting our demo in more detail
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The key to a successful plugin in PostCSS is one that follows the *1:1* principle—one
    plugin for one task. The `postcss-transform-shortcut` plugin is no exception:
    it takes the various elements that make up a transition rule, and puts them together
    in the right order. To see what we mean, take a look at these lines from within
    our style sheet before it is compiled:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '![Dissecting our demo in more detail](img/BO5194_07_19.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: 'Where''s our `transform:` statement? Well, when using this plugin, it''s not
    needed—instead, we can simply specify the various attributes, thus:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The plugin is set to recognize these four attributes and compile them into
    one single rule, as shown in this code excerpt:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Any gaps in the attributes will be automatically filled in with default values
    from within the plugin. We can even use this plugin as the basis for an equivalent
    for transitions—we will do this toward the end of the next chapter.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing our animations
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with animations, there may be occasions when we need to use custom
    effects; one way to achieve this is through the use of `@keyframes`. Trouble is,
    some browsers don't support their use within media queries (yes, I'm looking at
    you, `IE10` and `IE11`!).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: How does this affect us, I hear you ask? Well, if you're building any responsive
    sites, then this is absolutely something we need to bear in mind; media queries
    form the basic structure for any responsive functionality.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: It's an easy fix though—the developer, Andy Walpole, has created a simple PostCSS
    plugin called `mq-keyframes`, which is available at [https://github.com/TCotton/postcss-mq-keyframes](https://github.com/TCotton/postcss-mq-keyframes).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine we have code such as this in our style sheet:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'All the plugin does is move the code to the bottom of our style sheets, which
    makes it easier to read, and allows IE to continue working correctly:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This is probably one of the simplest plugins to use in PostCSS, particularly
    where animating content is concerned; it's worth using if you have to support
    these versions of Internet Explorer! The plugin can be installed in the same way
    as most other plugins for PostCSS, and does not require any additional attributes
    as part of the configuration process.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a challenge, how about trying out the demo available at [http://urbaninfluence.com/2015/05/make-a-background-image-slider-with-css-keyframes/](http://urbaninfluence.com/2015/05/make-a-background-image-slider-with-css-keyframes/)?
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Using our own animation plugin
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the course of this chapter, we've used the small number of animation-based
    plugins that are available for PostCSS, and demonstrated some of the effects possible.
    This is all well and good, but one can't help but feel that this is a little limiting—and
    can we do something about it?
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Absolutely, the beauty of PostCSS is that if there is a need for a plugin, then
    we can create something to fill that gap. A perfect example of this is the lack
    of CSS-based animation plugins available; at present, all we have is `postcss-animations`,
    which inserts animations from the `Animate.css` style sheet created by Dan Eden.
    I've used this as a basis for a new plugin—we'll use the same framework, but convert
    it to use the Magic set of animations, available from [http://www.minimamente.com/example/magic_animations/](http://www.minimamente.com/example/magic_animations/).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the construction of plugins in more detail in [Chapter 8](ch08.html
    "Chapter 8. Creating PostCSS Plugins"), *Creating PostCSS Plugins*. Let''s make
    a start:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: From the code download that accompanies this book, go ahead and extract a copy
    of the `T41` folder, and save the contents to the root of our project area.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `postcss-animation` and `postcss-animation-data` folders to the `node_modules`
    folder within our project area.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `gulpfile.js` and `package.json` files to the root of our project area—if
    any are already present, replace them (or take copies for safekeeping).
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Crack open your text editor and add the following code, saving it as `style.css`
    in the `src` folder of our project area:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Fire up a Node.js folder, then change the working folder to our project area.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the prompt, enter `gulp`, then press Enter—PostCSS will go away and compile
    the code; if all is well, we should see the `@keyframes` code added to our compiled
    style sheet (in the `dest` folder), as shown in this screenshot:![Using our own
    animation plugin](img/BO5194_07_20.jpg)
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Although our example only shows the single style, this doesn't matter—any style
    sheet that uses animation-name can be used, provided the animation-name value
    used matches one in the `postcss-animation-data` plugin. There are a few key points,
    though, that we should cover, so let's take a moment to explore these in more
    detail.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the plugin in more detail
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our new plugin is a perfect example of how we can adapt an existing framework
    to use different values—there are a few key points we should note when using this
    plugin:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: 'A key point to consider when constructing any plugin: don''t worry about adding
    vendor prefixes. These should be added as part of the compilation stage when the
    plugin is used within your projects; this will take care of any vendor prefixes
    that are required.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At present, the plugin only lists two animation types from the Magic Animations
    library as examples—the full list of original animations is available from the
    Magic Animations GitHub repository at [https://github.com/miniMAC/magic/blob/master/magic.css](https://github.com/miniMAC/magic/blob/master/magic.css).
    We can easily add in any that we need, using the format of `"<name of animation>"
    : "<keyframe to use>"`, as shown in this screenshot:![Exploring the plugin in
    more detail](img/BO5194_07_21.jpg)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an experiment, how about trying to convert the animations from the Motion
    UI library at [http://zurb.com/playground/motion-ui](http://zurb.com/playground/motion-ui),
    for example? Or we can try the animations for AngularJS at [http://www.justinaguilar.com/animations/#](http://www.justinaguilar.com/animations/#)
    - it's entirely up to you!
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Alternatively, it's worth applying the same principles to the `postcss-easings`
    plugin available from [https://github.com/postcss/postcss-easings](https://github.com/postcss/postcss-easings);
    this has some well-known easings built in, but they can easily be replaced. A
    great tool for this purpose is the site at [http://www.cubic-bezier.com](http://www.cubic-bezier.com).
    For example, if we take the `easeInExpo` easing, we create a Bezier curve that
    looks something like this:![Exploring the plugin in more detail](img/BO5194_07_22.jpg)
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This translates to a value of `cubic-bezier(.95,.05,.79,.35)`, which we can
    use in our code. It's worth noting that some sites will show this easing as `(0.05,
    0.795, 0.035)`—[http://cubic-bezier.com/](http://cubic-bezier.com/) only shows
    values to two decimal places.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: There are plenty of ways we can extend, modify, or create new plugins—the key
    to any should be that they are kept simple, limited to one task only, and that
    where possible, you should use the PostCSS plugin boilerplate as the basis for
    creating the plugins. The plugin we used in this exercise was created manually—this
    isn't an issue if you are creating it for your own needs, and don't intend to
    publish the plugin. In the next chapter, we will explore how easy it is to create
    something using the boilerplate code—it avoids a lot of issues at a later date!
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Animating content is an almost de facto part of building modern sites – this
    can be something as simple as providing subtle effects on form labels, right through
    to providing a complex background slider. We've covered a lot of useful tips and
    tricks throughout this chapter, so let's take a moment to review what we've learned.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: The theme for this chapter has been about making the transition (sorry, pun
    intended!) from using vanilla CSS or SASS to PostCSS; we kicked off with a quick
    recap of the types of animation available.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: This was swiftly followed by a look at some of the methods available for starting
    to make the transition away from standard CSS, such as using prebuilt animation
    libraries, or using CSS3 transitions. We then switched to covering how similar
    animations would look within SASS, so we can compare use of libraries such as
    `Animate.css`, before starting the switch to using PostCSS.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这迅速被查看一些可用于开始过渡到标准 CSS 的方法所跟随，例如使用预构建的动画库，或使用 CSS3 过渡。然后，我们转向介绍在 SASS 中类似动画的样式，这样我们就可以比较使用
    `Animate.css` 等库的方法，然后再开始转向使用 PostCSS。
- en: We started this part of the journey by exploring the various plugins available,
    before converting our code to use PostCSS equivalent styles. We then took things
    up a step, by creating a simple demo using PostCSS, before rounding out the chapter
    with a look at a simple animation plugin created for PostCSS, which is based on
    the Magic Animation set of animations.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过探索可用的各种插件开始了这段旅程，然后转换我们的代码以使用 PostCSS 相当的样式。接着，我们通过创建一个简单的 PostCSS 示例来进一步推进，最后在本章的结尾，我们查看了一个为
    PostCSS 创建的简单动画插件，该插件基于 Magic Animation 动画集。
- en: Phew - we've certainly covered a lot! But our journey doesn't stop there. In
    the next chapter, we'll explore some of the tips and tricks we can use to create
    plugins within PostCSS. No longer are we limited to what is available from others;
    we can now begin to create our own plugins instead...
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，我们确实已经覆盖了很多内容！但我们的旅程还没有结束。在下一章中，我们将探讨一些我们可以用来在 PostCSS 中创建插件的技巧和窍门。我们不再局限于他人提供的内容；现在我们可以开始创建我们自己的插件了...
