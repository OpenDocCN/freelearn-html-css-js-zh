["```js\n<span data-bind=\"text: 'That Guy'\"></span>\n```", "```js\n<span data-bind=\"text: 'That Guy'.toUpperCase()\"></span>\n```", "```js\nko.bindingHandlers.thing.preprocess = function(value, name, addBinding) {\n    //Do stuff\n}\n```", "```js\nko.bindingHandlers.text.preprocess = function(value) {\n  return value + '.toUpperCase()';\n};\n```", "```js\n<span data-bind=\"text: 'That Guy'\"></span>\n```", "```js\n<span data-bind=\"text: firstName\"></span>\n```", "```js\n<span data-bind=\"text: firstName.toUpperCase()\"></span>\n```", "```js\nko.bindingHandlers.text.preprocess = function(value) {\n    return 'ko.unwrap(' + value + ').toUpperCase()';\n};\n```", "```js\nko.bindingHandlers.valueFlash = {\n  preprocess: function(value, name, addBinding) {\n      addBinding('value', value);\n      return value;\n  },\n  update: function(element, valueAccessor) {\n        ko.unwrap(valueAccessor());  //unwrap to get dependency\n        $(element).css({opacity: 0}).animate({opacity: 1}, 500);\n    }\n};\n```", "```js\nko.bindingProvider.instance.preprocessNode = function(node) {\n  /* DOM code */\n}\n```", "```js\n    node.parentNode.insertBefore(newNode, node);\n    ```", "```js\n    node.parentnode.replaceChild(newNode, node);\n    ```", "```js\n    node.parentNode.removeChild(node);\n    ```", "```js\n<!-- template: 'some-template' --><!-- /ko -->\n```", "```js\n<!-- template: 'some-template' -->\n```", "```js\nko.bindingProvider.instance.preprocessNode = function(node) {\n   if (node.nodeType == node.COMMENT_NODE) {\n      var match = node.nodeValue.match(/^\\s*(template\\s*:[\\s\\S]+)/);\n      if (match) {\n         // Create a pair of comments to replace the single comment\n         var c1 = document.createComment(\"ko \" + match[1]),\n            c2 = document.createComment(\"/ko\");\n         node.parentNode.insertBefore(c1, node);\n         node.parentNode.replaceChild(c2, node);\n\n         // Tell Knockout about the new nodes so that it can apply bindings to them\n         return [c1, c2];\n      }\n   }\n};\n```", "```js\nFirst Name: <!-- text: firstName --><!-- /ko -->\nLast Name: <!-- text: lastName  --><!-- /ko -->\nBirth Date: <!-- text: birthDate --><!-- /ko -->\n```", "```js\nFirst Name: {{ firstName }}\nLast Name: {{ lastName }}\nBirth Date: {{ birthDate }}\n```", "```js\nvar expressionRegex = /{{([\\s\\S]+?)}}/g;\nko.bindingProvider.instance.preprocessNode = function(node) {\n    if (node.nodeType === 3 && node.nodeValue) {\n        var newNodes = //Collect new nodes by scanning \"node\"\n\n        // Insert the resulting nodes into the DOM\n        // remove the original unprocessed node\n        if (newNodes) {\n            for (var i = 0; i < newNodes.length; i++) {\n                node.parentNode.insertBefore(newNodes[i], node);\n            }\n            node.parentNode.removeChild(node);\n            return newNodes;\n        }\n    }\n};\n```", "```js\nvar newNodes = replaceExpressionsInText(node.nodeValue, expressionRegex, function(expressionText) {\n    return [\n        document.createComment(\"ko text:\" + expressionText),\n        document.createComment(\"/ko\")\n    ];\n});\n```", "```js\nfunction replaceExpressionsInText(text, expressionRegex, callback) {\n    var prevIndex = expressionRegex.lastIndex = 0,\n        resultNodes = null,\n        match;\n\n    while (match = expressionRegex.exec(text)) {\n        var leadingText = text.substring(prevIndex, match.index);\n        prevIndex = expressionRegex.lastIndex;\n        resultNodes = resultNodes || [];\n\n        // Preserve leading text\n        if (leadingText) {\n            resultNodes.push(document.createTextNode(leadingText));\n        }\n\n        resultNodes.push.apply(resultNodes, callback(match[1]));\n    }\n\n    // Preserve trailing text\n    var trailingText = text.substring(prevIndex);\n    if (resultNodes && trailingText) {\n        resultNodes.push(document.createTextNode(trailingText));\n    }\n\n    return resultNodes;\n}\n```", "```js\n// Replace <%= expr %> with data bound span's\nvar erbNodes = replaceExpressionsInText(node.nodeValue, /\\<\\%=([\\s\\S]+?)\\%\\>/g, function(expressionText) {\n    var span = document.createElement('span');\n    span.setAttribute('data-bind', 'text: ' + expressionText);\n    return [span];\n});\n```", "```js\nFirst Name: {{ firstName }}\nLast Name: <%= lastName %>\nBirth Date: {{ birthDate }}\n```", "```js\nFirst Name: <!--ko text: firstName --><!--/ko-->\nLast Name: <span data-bind=\"text: lastName\"></span>\nBirth Date: <!--ko text: birthDate --><!--/ko-->\n```", "```js\nvar BindingSample = function() {\n   var self = this;\n\n   self.name = ko.observable('Timothy');\n   self.locations = ['Portland', 'Seattle', 'New York City'];\n   self.selectedLocation = ko.observable();\n   self.isAdmin = ko.observable(true););\n}; \n```", "```js\n<label>Name\n  <input data-bind=\"value: name\" />\n</label>\n<label>LocationLocationName\n  <select data-bind=\"options: locations, value: selectedLocation\"></select>\n</label>\n<label>Admin\n  <input data-bind=\"checked: isAdmin\" type=\"checkbox\" />\n</label>\n```", "```js\n<label>Name\n  <input data-name=\"name\" />\n</label>\n<label>LocationNameLocation\n  <select data-name=\"locations\"></select>\n</label>\n<label>Admin\n  <input data-name=\"isAdmin\" />\n</label> \n```", "```js\nko.bindingConventions = {};\nko.bindingConventions.ConventionBindingProvider = function () {\n     this.orgBindingProvider = ko.bindingProvider.instance || new ko.bindingProvider();\n };\n\nvar nodeHasBindings = function(node) { /* check node */ };\nvar conventionBindings = function(node, bindingContext) { /* check node */ };\n\n ko.bindingConventions.ConventionBindingProvider.prototype = {\n     nodeHasBindings: function (node) {\n         return this.orgBindingProvider.nodeHasBindings(node) || nodeHasBindings(node);\n     },\n     getBindingAccessors: function (node, bindingContext) {\n         return this.orgBindingProvider.getBindingAccessors(node, bindingContext)\n            || conventionBindings(node, bindingContext);\n     }\n };\n ko.bindingProvider.instance = new ko.bindingConventions.ConventionBindingProvider();\n```", "```js\nvar getNameAttribute = function (node) {\n   var name = null;\n   if (node.nodeType === 1) {\n      name = node.getAttribute(\"data-name\");\n   }\n   return name;\n};\n\nvar nodeHasBindings = function(node) { \n   return getNameAttribute(node) !== null; \n};\n```", "```js\nvar conventionBindings = function(node, bindingContext) {\n   var bindings = {};\n   var name = getNameAttribute(node);\n   if (name === null) {\n      return null;\n}\n\n   var data = bindingContext[name] ? bindingContext[name] : bindingContext.$data[name];\n\n   if (data === undefined) {\n      throw \"Can't resolve member: \" + name;\n   }\n\n   var unwrapped = ko.utils.peekObservable(data);\n   var type = typeof unwrapped;\n\n   //Loop through convention handlers to construct bindings\n\n   return bindings;\n};\n```", "```js\nfor (var index in ko.bindingConventions.conventionBinders) {\n   if (ko.bindingConventions.conventionBinders[index].rules !== undefined) {\n      var convention = ko.bindingConventions.conventionBinders[index];\n      var shouldApply = true;\n\n      convention.rules.forEach(function (rule) {\n         shouldApply = shouldApply && rule(name, node, bindings, unwrapped, type, data, bindingContext);\n      });\n\n      if (shouldApply) {\n         convention.apply(name, node, bindings, unwrapped, type, function() { return data }, bindingContext);\n         break;\n      }\n   }\n}\n```", "```js\nko.bindingConventions.conventionBinders.options = {\n  rules: [function (name, element, bindings, unwrapped) { return element.tagName === 'SELECT' && unwrapped.push; } ],\n  apply: function (name, element, bindings, unwrapped, type, valueAccessor, bindingContext) {\n      bindings.options = valueAccessor;\n      singularize(name, function (singularized) {\n         var selectedName = 'selected' + getPascalCased(singularized);\n         if (bindingContext.$data[selectedName] !== undefined) {\n            bindings['value'] = function() {\n               return bindingContext.$data[selectedName];\n            };\n         }\n      });\n  }\n};\n```", "```js\nko.bindingConventions.conventionBinders.input = {\n  rules: [function (name, element) { return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA'; } ],\n  apply: function (name, element, bindings, unwrapped, type, valueAccessor, bindingContext) {\n      var bindingName = null;\n      if (type === 'boolean') {\n          element.setAttribute('type', 'checkbox');\n          bindingName = 'checked';\n      } else {\n          bindingName = 'value';\n      }\n      bindings[bindingName] = valueAccessor;\n  }\n};\n```", "```js\n<div>Hello {{ name }}.</div>\n```", "```js\n<div>Hello <!--ko text:name--><!--/ko-->.</div>\n```", "```js\nko.punches.utils.interpolationMarkup.wrapExpression(expressionText)\n```", "```js\n<div data-bind=\"style.color: textColor\"></div>\n```", "```js\n<div data-bind=\"style: { color: textColor }\"></div>\n```", "```js\nko.bindingHandlers.customNamespace = {\n    getNamespacedHandler: function(binding) {\n        return {\n           init: function(element, valueAccessor) { },\n           update: function(element, valueAccessor) { }\n        };\n    }\n};\n```", "```js\nko.bindingHandlers.tooltip = {\n    update: function(element, valueAccessor) {\n      //Cleanup previous tooltips\n      if (element.attributes['data-original-title']) {\n        $(element).tooltip('destroy');\n    }\n      var options = valueAccessor();\n        $(element).tooltip({ \n          placement: options.placement || 'left', \n          title: ko.unwrap(options.title || 'sample') \n        });\n    }\n};\n```", "```js\ndata-bind=\"tooltip: { placement: 'top', title: title}\"\n```", "```js\nko.bindingHandlers.tooltip = {\n    getNamespacedHandler: function(binding) {\n        return {            \n            update: function(element, valueAccessor) {\n              //Cleanup previous tooltips\n              if (element.attributes['data-original-title']) {\n                $(element).tooltip('destroy');\n      }\n                $(element).tooltip({ \n                  placement: binding, \n                  title: ko.unwrap(valueAccessor()) \n                });\n            }\n        };\n    }\n};\n```", "```js\ndata-bind=\"tooltip.top: title\"\n```", "```js\n<span data-bind=\"text: name | fit:20 | uppercase\"></span>\n```", "```js\nko.filters['uppercase'](ko.filters['fit'](name,20))\n```", "```js\nko.filters.translate = function(value, language) {\n    return SomeLanguageLibrary.translate(value, language);\n}\n```"]