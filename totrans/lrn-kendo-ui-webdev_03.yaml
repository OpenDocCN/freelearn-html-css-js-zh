- en: Chapter 3. Using and Customizing Calendar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Calendars have long been a feature of web pages that require some clever JavaScript.
    HTML5 is working toward making it all much simpler, but browser support still
    isn't consistent. This is where Kendo UI is a perfect solution, being a framework
    that combines HTML5 and JavaScript to create cross-browser consistency using the
    latest standards. Like always, the Kendo UI solution couldn't be simpler to implement.
  prefs: []
  type: TYPE_NORMAL
- en: Calendar widget – basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Kendo UI Calendar widget transforms a simple HTML element, such as a `div`,
    into a specialized HTML table that displays a calendar. It also wires up JavaScript
    functionality to this table to support all of the Calendar widget events and methods.
    To see the simplest possible implementation of this widget, create a new action
    method in the Kendo controller so that we have a URL for "calendar":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add a view for this action method and set up an empty `div` to hold a
    Kendo calendar widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is amazing considering how little code we have written:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Calendar widget – basics](img/4346OT_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click around on the calendar and observe how much functionality it already has.
    The arrows at the top of the calendar navigate forward or backward by one month.
    The text at the top of the calendar, shown as **October 2012** in the preceding
    screenshot, navigates up to a broader level of dates which makes it easy to select
    a different year or decade. The date at the bottom of the calendar is a hyperlink
    that navigates directly to the current date. As we add functionality later in
    this chapter, we can make the calendar do even more.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Calendar widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since the Calendar widget only has a few properties, let''s start by examining
    them and then move on to examples in using them. The calendar widget has two different
    types of properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data/template properties**: These properties configure the data behind the
    calendar widget'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Display/formatting properties**: These properties configure how the calendar
    is rendered on the page and how that data is formatted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are these properties listed in code format. Add this code to the page
    and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The calendar, when configured as above, renders initially by showing a selection
    of months available within the currently selected year (`start: ''year''`). Since
    we have configured it to allow a navigation depth into each month (`depth: ''month''`)
    we can click on a month and then see that month and all of its available days:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the Calendar widget](img/4346OT_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even though the current view is "year", today's date is still visible within
    the footer of the calendar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Speaking of the footer, let''s take a look at the data/template properties
    that the calendar makes available. The three main properties here are `data`,
    `month`, and `footer` and they are the primary way to customize the calendar widget.
    To demonstrate a simple example of customizing specific dates in a calendar, add
    this code to a page and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Let's step through this code together. First, we have a special style instruction
    for how special days are to be displayed. In this case, white text on an orange
    background with a solid black border. We also specify a Kendo UI template block
    with JavaScript to determine whether the date being rendered is one of our special
    days. If it is one of the special days, then we want the custom style applied
    to it; otherwise just render it as usual.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define the actual configuration of the calendar widget. This is where
    the relationship between the `month` property and the `dates` property becomes
    apparent: the `dates` property supplies the data that the `month` property uses
    to render the days on the calendar. In the template that we have defined, we check
    to see if the current date being rendered is included in the `dates` array and
    then use `data.value` to render the number of the date currently executing. Notice
    also that we have prepended the dates in the `dateArray` with a plus sign `+`
    to force them into a numeric date that we can easily compare with `$.inArray()`.
    This is not a requirement in every case, but works for this example.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The other things to note are the new property called `footer` that is used to
    render a template for the footer of the calendar, which has access to today's
    date through the `data` property passed to it. Also, note that the `month` object
    has another property called `empty` that is used to render dates that fall outside
    of the `min` or `max` property value ranges.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the calendar set up in this way, it looks like this in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the Calendar widget](img/4346OT_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note the special display of the dates supplied through the `dateArray`, the
    dates out of range, and the new text used in the footer.
  prefs: []
  type: TYPE_NORMAL
- en: Calendar Widget using MVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Calendar widget can also be configured through the ASP.NET MVC extension
    methods. To imitate the calendar we just created, you can replace the contents
    of your view with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output when using this new code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Calendar Widget using MVC](img/4346OT_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pretty similar, isn't it? Note that the MVC extension hid the dates below `max`
    and `min` and didn't give us an empty property on the `month`. There are a few
    other unique things to note as well. First, notice that we are still using an
    array of dates through JavaScript inside the view. This is because the `month`
    template is running in JavaScript, not through MVC extensions, and needs access
    to this data on the client. Because of this, and because of the fact that the
    MVC extensions do not provide a `dates` property, we have to change the template
    from using `data.dates` to the actual name of the JavaScript array—`datesArray`.
    In this example, I typed out the template code directly into the MVC extension
    method, but there is also a method called `MonthTemplateId()` where you can pass
    the HTML `id` of the template already on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Also, remember to always call the `.Name()` method on every Kendo MVC extension
    object; it is required for the code to work. This is how the MVC extension methods
    assign a unique `name` and `id` attribute to the rendered HTML output, and how
    all of the JavaScript methods and events are properly wired up in the web browser.
    If you do not include the `.Name()` method, you will also see a runtime error
    when you try to run the page.
  prefs: []
  type: TYPE_NORMAL
- en: Methods available on the Calendar widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Calendar widget exposes several methods that can be used to interact with
    it on the page. These methods can be used to configure the widget by changing
    its properties or firing specific functionality in real time. Here is a code form
    of the available methods specific to the Kendo UI Calendar widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take an example of some of these and see it in action on our page. Modify
    the code we just created for the MVC view like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In order to use the calendar widget as a JavaScript object, we have to call
    the `.data()` function on the page element that contains the calendar that we
    created. Click the buttons on the page and see what they do. It should give you
    some idea of what the calendar widget can offer, and how you could plug your own
    interactive code into a calendar to improve the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: '![Methods available on the Calendar widget](img/4346OT_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Events fired by the Calendar widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kendo UI calendar widget has two events—`change` and `navigate`. These events
    fire when the action after which they are named occurs. The `Change` fires when
    the selected date is changed, `navigate` fires when the calendar is navigated—such
    as when the month is changed or the view is moved up from "month" to "year".
  prefs: []
  type: TYPE_NORMAL
- en: 'What if you wanted the calendar to only appear when a user selected a certain
    input box on a page, and then place its value into that input element? You could
    try something like this. Modify the final `script` block of the page that we are
    working on to look like this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here we have some events, wired up by simple jQuery and jQuery UI, that show
    or hide the calendar and take its value when selected. The `change` event of the
    calendar is used to determine when to place the new date value into the input
    element of the page. This is how the page appears when first rendered.
  prefs: []
  type: TYPE_NORMAL
- en: '![Events fired by the Calendar widget](img/4346OT_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The calendar is hidden until the user clicks into the first textbox. As soon
    as that happens, the events we wired up cause the calendar to appear so that the
    use can select the appropriate date for the page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Events fired by the Calendar widget](img/4346OT_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kendo UI calendar widget is easy to configure, and offers a rich element
    on your page that can make working with dates a much simpler task. It can be configured
    from either JavaScript or MVC extensions and makes use of Kendo templates for
    highly customizable formatting and display. I have only shown basic examples of
    what can be done with the templates and events; you can take these and run with
    them to create some very useful interactive content.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will learn about one of the most powerful features of
    the Kendo UI framework of all, the Model-View-ViewModel (MVVM) framework. This
    framework lets you bind data and functionality to your page through simple HTML
    attributes and enable real-time changes to your data, or to a server, with immediate
    feedback for the user. The MVVM framework is a great tool that you will want to
    use in all of your pages.
  prefs: []
  type: TYPE_NORMAL
