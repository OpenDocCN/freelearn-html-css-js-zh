- en: Review and Continued Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习和持续开发
- en: Throughout this book, we've covered a wide range of topics and learned skills
    in lots of different areas. We've combined these skills to design and create complex
    chatbots on both the Alexa and Lex platforms.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们涵盖了许多主题，并在许多不同的领域学习了技能。我们将这些技能结合起来，在Alexa和Lex平台上设计和创建复杂的聊天机器人。
- en: 'This chapter will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Recap the skills that we've learned throughout this book
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾本书中我们学到的技能
- en: Discuss how to continue your chatbot development exploration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论如何继续你的聊天机器人开发探索
- en: Discuss the future of chatbots
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论聊天机器人的未来
- en: What we've learned
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们学到了什么
- en: There have been a lot of skills that have been covered in this book, both technical
    and non-technical.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本书涵盖了大量的技能，既有技术性的也有非技术性的。
- en: Conversation design
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对话设计
- en: The first topic that was covered was conversation design. This is one of the
    most important sections of this book, as every good chatbot will need to go through
    this design stage. It doesn't matter whether it's going to be an Alexa Skill,
    Lex chatbot, or even a chatbot built using different technology.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖的第一个主题是对话设计。这是本书最重要的部分之一，因为每个好的聊天机器人都需要经过这个设计阶段。无论是Alexa技能、Lex聊天机器人，还是使用不同技术构建的聊天机器人，都无关紧要。
- en: When designing a chatbot, we always try to start with a perfect user conversation.
    Starting with a perfect conversation means that the users are likely to have the
    best possible experience with our chatbots.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计聊天机器人时，我们总是试图从一个完美的用户对话开始。从一个完美的对话开始意味着用户很可能会获得我们聊天机器人的最佳体验。
- en: Using the perfect conversation, we can start to build our flow diagrams. These
    provide more technical structure to the design, allowing us to specify what data
    we're saving, which APIs we're hitting, and triggering one flow from another.
    Creating a set of shorter flow diagrams that link together is incredibly powerful,
    as it provides flexibility to connect new entry points and features as the chatbot
    matures.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用完美的对话，我们可以开始构建我们的流程图。这些图提供了更多技术结构，使我们能够指定我们正在保存哪些数据，我们正在调用哪些API，以及从一个流程触发另一个流程。创建一系列相互链接的简短流程图非常强大，因为它提供了在聊天机器人成熟过程中连接新入口点和功能的灵活性。
- en: Amazon Web Services
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊网络服务
- en: Next, we were introduced to **Amazon Web Services** (**AWS**) and the tools
    that we have access to. We started by creating an AWS Lambda using the Lambda
    console and then checked it using the built-in testing features.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们介绍了**亚马逊网络服务**（**AWS**）以及我们可以使用的工具。我们首先通过Lambda控制台创建了一个AWS Lambda，然后使用内置的测试功能进行了检查。
- en: Although creating Lambdas in the console is great for simple functions, we often
    need more functionality and a more reliable experience. We discussed the two other
    options—**Cloud9** and **local editing**—and we mentioned their advantages and
    their limitations.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在控制台中创建Lambda对于简单的函数来说很棒，但我们通常需要更多的功能和一个更可靠的体验。我们讨论了两种其他选项——**Cloud9**和**本地编辑**——并提到了它们的优点和局限性。
- en: Local editing had some great advantages but lacked the ability to easily create
    and update Lambdas. To fix this, we learned about the `aws-cli` and how we can
    use it to control our AWS products. Using the `aws-cli`, we created a build script
    that could take our local files, bundle them together, and deploy them to AWS.
    With this script, we now had a powerful development environment with easy deployment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本地编辑有一些很好的优点，但缺乏轻松创建和更新Lambda的能力。为了解决这个问题，我们学习了`aws-cli`以及我们如何使用它来控制我们的AWS产品。使用`aws-cli`，我们创建了一个构建脚本，可以将我们的本地文件打包在一起，并将它们部署到AWS。有了这个脚本，我们现在拥有了一个功能强大的开发环境，并且部署变得容易。
- en: Amazon Alexa
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊Alexa
- en: Then it was time to start building some chatbots. We started with Alexa and
    learned about the components that make up a chatbot. We learned to use intents,
    utterances, and slots to allow our users to interact with our chatbots.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是开始构建一些聊天机器人。我们从Alexa开始，了解了构成聊天机器人的组件。我们学习了如何使用意图、话语和槽位，以便用户能够与我们的聊天机器人进行交互。
- en: To power this skill, we needed to create a Lambda to handle the requests. We
    used `alexa-sdk` to make it much easier to create the responses that we would
    be sending back to the user.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个技能发挥作用，我们需要创建一个Lambda来处理请求。我们使用了`alexa-sdk`来使创建发送给用户的响应变得更加容易。
- en: With a working Alexa Skill, we learned how to test it using the built-in testing
    tools. This way, we can test it as if we were a user, but with the ability to
    see how our skill is acting in the background.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个可工作的 Alexa 技能的基础上，我们学习了如何使用内置的测试工具进行测试。这样，我们可以像用户一样测试它，但同时又能够看到我们的技能在后台是如何运作的。
- en: Once we had tested the chatbot, we were ready to publish it. Alexa Skills need
    to be published to the Alexa Skill Store, and we learned how to follow this process
    to make our skills available to the public.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们测试了聊天机器人，我们就准备好发布它。Alexa 技能需要发布到 Alexa 技能商店，我们学习了如何遵循这一流程，使我们的技能对公众可用。
- en: Amazon S3
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon S3
- en: To increase the usefulness of all of our chatbots, we needed to be able to access
    large amounts of stored data. To do this, we learned how to create an S3 bucket,
    store data in it, and then access this data from our Lambdas. With this data access,
    we could provide users with a much larger amount of information on the topic that
    they requested.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加我们所有聊天机器人的实用性，我们需要能够访问大量存储的数据。为此，我们学习了如何创建一个 S3 存储桶，在其中存储数据，然后从我们的 Lambdas
    中访问这些数据。有了这种数据访问，我们可以向用户提供他们请求的主题的更多信息。
- en: Using APIs
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 API
- en: We then learned how to access third-party APIs to further improve the usefulness
    of our chatbots. We used the `openWeatherMaps` API as an example and this allowed
    us to access live information that we would never have been able to generate ourselves.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们学习了如何访问第三方 API，以进一步提高我们聊天机器人的实用性。我们以 `openWeatherMaps` API 为例，这使我们能够访问我们无法自己生成的实时信息。
- en: To do this, we also learned about `axios` and making API requests. With these
    skills, you'll be able to make requests to an API to add new features to your
    chatbots. We also looked at the two best ways to handle errors—using `try`/`catch`
    and the `to()` method. We discussed the reasons that you might want to use one
    or the other and why error handling is important.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们还学习了 `axios` 和如何进行 API 请求。有了这些技能，你将能够向 API 发送请求，为你的聊天机器人添加新功能。我们还探讨了处理错误的最两种最佳方式——使用
    `try`/`catch` 和 `to()` 方法。我们讨论了为什么你可能想使用其中一种而不是另一种，以及为什么错误处理很重要。
- en: Amazon Lex
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon Lex
- en: Building text-based chatbots came next as we learned about Amazon Lex. We saw
    the similarities and differences between Lex and Alexa, and we built on our existing
    knowledge to create our first Lex chatbots.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 学习了 Amazon Lex 之后，我们开始构建基于文本的聊天机器人。我们看到了 Lex 和 Alexa 之间的相似之处和不同之处，并基于我们的现有知识创建了我们的第一个
    Lex 聊天机器人。
- en: We learned that each intent can return a hardcoded response or trigger a Lambda.
    Being able to trigger a different Lambda from each intent allowed us to create
    lots of very customized Lambdas to do exactly what we wanted.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到，每个意图都可以返回硬编码的响应或触发 Lambda。能够从每个意图触发不同的 Lambda 允许我们创建许多非常定制的 Lambda，以完成我们想要的确切操作。
- en: When we triggered a Lambda from Lex, it expected a very defined response format.
    Unfortunately, there isn't a `lex-sdk` yet, so we built our own. We saw five different
    response types and created methods for each of them. This allowed us to create
    the required responses much more easily.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从 Lex 触发 Lambda 时，它期望一个非常明确的响应格式。不幸的是，目前还没有 `lex-sdk`，所以我们自己构建了一个。我们看到了五种不同的响应类型，并为每种类型创建了方法。这使得我们能够更容易地创建所需的响应。
- en: Dynamo DB
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dynamo DB
- en: While S3 is great for storing large amounts of data that probably won't change
    very much, it isn't great for storing data that is regularly changing. To store
    this type of data, we learned about DynamoDB. This is Amazon's non-relational
    database, and it gives us the ability to easily store, access, and update information.
    We used this to store the shopping cart used for an online store.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 S3 对于存储大量可能不会经常变化的数据来说很棒，但它并不是存储经常变化的数据的理想选择。为了存储这类数据，我们学习了 DynamoDB。这是亚马逊的非关系型数据库，它使我们能够轻松地存储、访问和更新信息。我们使用它来存储用于在线商店的购物车。
- en: We created a `Dynamo` class that had methods for getting, writing, updating,
    and deleting these Dynamo tables so that we didn't have to write the long and
    complex code needed every time.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个 `Dynamo` 类，它具有获取、写入、更新和删除这些 Dynamo 表的方法，这样我们就不必每次都编写长而复杂的代码。
- en: Publishing Lex chatbots
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布 Lex 聊天机器人
- en: There's no point being able to build an amazing chatbot if your users can't
    access it. We learned to leverage the massive existing user bases of Facebook,
    Slack, and Twilio by integrating our chatbot into those platforms.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的用户无法访问它，那么能够构建一个令人惊叹的聊天机器人是没有意义的。我们学习了如何通过将我们的聊天机器人集成到 Facebook、Slack 和
    Twilio 等平台上，利用这些平台庞大的现有用户基础。
- en: We also built an API service that allowed us to integrate our chatbot into a
    much wider range of applications. Building on this API, we created our own frontend
    interface for our chatbot. This was great, as it gave us the ability to make it
    look and work exactly how we wanted it to.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还构建了一个API服务，使我们能够将我们的聊天机器人集成到更广泛的应用中。基于这个API，我们为我们的聊天机器人创建了自己的前端界面。这很好，因为它让我们能够使其看起来和工作方式完全符合我们的期望。
- en: Advanced features
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级功能
- en: The first seven chapters of this book taught us how to create powerful Alexa
    Skills and Lex chatbots by using other services such as S3, DynamoDB, and external
    APIs. In [Chapter 8](78bc7277-515a-4a49-8ace-6726512c3862.xhtml), *Improving User
    Experience for Your Bots*, we looked at some of the advanced features that are
    built into Lex and Alexa.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的前七章教我们如何通过使用其他服务如S3、DynamoDB和外部API来创建强大的Alexa技能和Lex聊天机器人。在[第8章](78bc7277-515a-4a49-8ace-6726512c3862.xhtml)“提升您的聊天机器人的用户体验”中，我们探讨了Lex和Alexa内置的一些高级功能。
- en: We first learned how to create information cards for Lex. This allowed us to
    send the user more visual information than the basic messages we were sending
    before. Adding these cards provided a huge boost to the user experience.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先学习了如何为Lex创建信息卡片。这使我们能够向用户发送比之前发送的基本消息更多的视觉信息。添加这些卡片极大地提升了用户体验。
- en: Then we learned about phrase slots in Alexa and how they can be used to capture
    information where the options that could be entered are too large to create a
    custom slot type. Being able to capture such a wide range of inputs into a slot
    makes our skills more reliable and robust.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们学习了Alexa中的短语槽位以及它们如何用于捕获那些选项过多而无法创建自定义槽位类型的信息。能够将如此广泛范围的输入捕获到槽位中，使我们的技能更加可靠和健壮。
- en: The last thing that we learned about was utterance monitoring in Lex. This is
    where we can look at the utterances that Lex has detected and those that it has
    missed, which gives us an insight into the way that users are interacting with
    our chatbots. This also provides a mechanism to easily add utterances that we've
    missed to our existing intents.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后学习的是Lex中的话语监控。这是我们可以查看Lex检测到的话语和它错过的话语的地方，这让我们了解了用户如何与我们的聊天机器人互动。这也提供了一个机制，可以轻松地将我们错过的话语添加到现有的意图中。
- en: Continuing your learning
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继续您的学习
- en: Now that you've completed this book, you have a great understanding of voice,
    and text-based chatbots. You're able to build complex, multi-flow chatbots that
    integrate other services such as S3, DynamoDB, and external APIs. If you've enjoyed
    learning how to build these systems, then you're in a great position to continue
    your journey.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经完成了这本书，您对语音和基于文本的聊天机器人有了很好的理解。您能够构建复杂的、多流程的聊天机器人，并集成其他服务如S3、DynamoDB和外部API。如果您喜欢学习如何构建这些系统，那么您正处于继续您旅程的绝佳位置。
- en: There are a lot of different directions you can go with your learning, and I'll
    outline some possibilities for you—a few specific to Alexa or Lex, and then a
    few that would be great to learn for both Alexa and Lex.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您的学习方向有很多，我将为您概述一些可能性——一些专门针对Alexa或Lex，还有一些非常适合两者共同学习。
- en: Alexa
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Alexa
- en: If you really enjoyed building skills for Alexa, then there are two directions
    that I would go in with my learning.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您非常喜欢为Alexa构建技能，那么在学习上我会选择两个方向。
- en: Amazon Echo Spot and Amazon Echo Show
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon Echo Spot和Amazon Echo Show
- en: The **Amazon Echo Spot** and **Amazon Echo Show** are Amazon's Alexa devices
    that also have screens. This means that you can provide users with visual information
    as well as voice responses. As with the cards on Lex, having that extra visual
    information can make the user experience much richer.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**Amazon Echo Spot**和**Amazon Echo Show**是带有屏幕的Amazon Alexa设备。这意味着您可以为用户提供视觉信息以及语音响应。与Lex上的卡片一样，额外的视觉信息可以使用户体验更加丰富。'
- en: One big advantage of Echo devices with screens is that you can provide images
    to the user. Trying to tell a user about a product just using voice can be very
    hard but, with an image, the user experience is much smoother. You can also play
    videos, have a slideshow, or create custom displays with lots of varying information.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Echo设备屏幕的一大优势是您可以向用户提供图片。仅使用语音向用户介绍产品可能会非常困难，但有了图片，用户体验会更加流畅。您还可以播放视频，进行幻灯片放映，或创建包含大量不同信息的自定义显示。
- en: Building a library of functions
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建函数库
- en: If you enjoy building Alexa Skills and want to start building more of them,
    then there are going to be times when you want to use the same methods across
    multiple skills. There are two options—just copy the code every time, or create
    a library of method Lambdas. The first one is good for a small number of skills
    but will become annoying as you build more skills.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢构建Alexa技能并且想要开始构建更多，那么在构建多个技能时，你可能会想要使用相同的方法。有两种选择——每次都复制代码，或者创建一个方法Lambda库。第一种方法适用于少量技能，但随着技能数量的增加，这会变得令人烦恼。
- en: The second option will take longer to set up but will make building future skills
    much easier. The design for this setup is similar to the way that Lex works, where
    each intent triggers a single Lambda. Unfortunately, this isn't supported already,
    but we can create the same effect using the Lambda Invoke functions. This lets
    us trigger a Lambda from our `handlers` object.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法设置起来会花费更多时间，但会使构建未来的技能变得更加容易。这种设置的架构类似于Lex的工作方式，其中每个意图触发一个单独的Lambda。不幸的是，目前这还不被支持，但我们可以使用Lambda调用函数来创建相同的效果。这让我们可以从我们的`handlers`对象中触发Lambda。
- en: The advantage of this method is that the common intents can trigger the same
    Lambda, reducing repeated code, whilst unique intents can still be built in the
    main handler Lambda.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优点是，常见的意图可以触发相同的Lambda，减少重复代码，同时独特的意图仍然可以在主处理Lambda中构建。
- en: Lex
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lex
- en: If you want to learn more skills specific to Lex, then the best direction would
    be learning to integrate it into more services.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要学习更多特定于Lex的技能，那么最好的方向是学习如何将其集成到更多的服务中。
- en: There are hundreds of messaging services that Lex doesn't natively support,
    and being able to integrate your chatbot into these services would be a great
    skill to have. You could try integrating you chatbot into Telegram, Twitter, WeChat,
    or any other messaging services. To do this, you'll probably have to map the message
    into the correct format for that specific service. The mapping between formats
    can be quite tricky but is a great skill to learn.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Lex原生不支持数百种消息服务，能够将你的聊天机器人集成到这些服务中将会是一项非常棒的技能。你可以尝试将你的聊天机器人集成到Telegram、Twitter、微信或其他任何消息服务中。为此，你可能需要将消息映射到该特定服务的正确格式。格式之间的映射可能相当复杂，但学习这项技能是非常有用的。
- en: Once you've built a mechanism to integrate Lex into these messaging platforms,
    you can advertise your integration or the fact that you can build a mechanism
    to integrate into the company's own messaging platform. Lots of companies want
    to be able to add chatbots to their existing messaging platform.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你构建了一个将Lex集成到这些消息平台的机制，你就可以宣传你的集成或你能够构建一个集成到公司自己的消息平台的机制。许多公司都希望能够在现有的消息平台上添加聊天机器人。
- en: Alexa and Lex
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Alexa和Lex
- en: Continuing your learning with skills that can be used with both Alexa and Lex
    is probably the best use of your time, and there are many different directions
    to go in.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用既适用于Alexa也适用于Lex的技能来继续你的学习，可能是你时间的最佳利用方式，而且有很多不同的方向可以探索。
- en: Improving the build process
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进构建过程
- en: As you build more Alexa Skills and Lex chatbots, you will become frustrated
    with having to open the Alexa Skills Kit or the Lex console to add a new utterance
    or change an intent. Luckily, there is the `aws-cli` and `ask-cli` that we can
    use to build and update our skills and chatbots without having to go online.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你构建更多的Alexa技能和Lex聊天机器人，你可能会对不得不打开Alexa技能套件或Lex控制台来添加新的语音或更改意图感到沮丧。幸运的是，我们有`aws-cli`和`ask-cli`可以使用，这样我们就可以在不上网的情况下构建和更新我们的技能和聊天机器人。
- en: You may remember the `aws-cli` from [Chapter 2](ac448944-0559-408e-a9c4-972933a03611.xhtml),
    *Getting Started with AWS and Amazon CLI*, where we used it to allow us to build
    Lambdas from our local machines. You can also use `aws-cli` to do something similar
    for Lex chatbots, whilst `ask-cli` has similar functionality for Alexa Skills.
    For both of these systems, there is quite a steep learning curve and you'll end
    up reading a lot of documentation, but being able to build a new chatbot or skill
    without ever using a browser is really useful.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得[第2章](ac448944-0559-408e-a9c4-972933a03611.xhtml)中提到的`aws-cli`，*AWS和Amazon
    CLI入门*，我们用它来允许我们从本地机器构建Lambda。你也可以使用`aws-cli`为Lex聊天机器人做类似的事情，而`ask-cli`为Alexa技能提供了类似的功能。对于这两个系统，学习曲线相当陡峭，你最终会阅读大量的文档，但能够在不使用浏览器的情况下构建新的聊天机器人或技能是非常有用的。
- en: You can either have the full structure of the chatbot or skill saved as a file
    on your computer, or you can create a system to generate these files based on
    a more simple config file. The advantage of the latter method is that the config
    files should be a lot easier to read and understand, making it a lot easier to
    figure out what needs to change for your update.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择将聊天机器人或技能的完整结构保存为电脑上的文件，或者你可以创建一个系统，根据更简单的配置文件生成这些文件。后者的优点是配置文件应该更容易阅读和理解，这使得确定需要更改的内容变得容易得多。
- en: Once you've got this system in place, you should be able to create a new config
    file for a new bot within minutes. If you use this system, there is nothing stopping
    you from still using the online Alexa Skills Kit or Lex console to check, edit,
    and update your skills and chatbots.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你建立了这个系统，你应能在几分钟内为一个新的机器人创建一个新的配置文件。如果你使用这个系统，没有任何阻止你仍然使用在线的Alexa技能套件或Lex控制台来检查、编辑和更新你的技能和聊天机器人的。
- en: If you are considering building chatbots or Alexa Skills as a job, then this
    tool will prove invaluable.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在考虑将构建聊天机器人或Alexa技能作为一项工作，那么这个工具将非常有价值。
- en: Integrating more AWS services
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成更多AWS服务
- en: In this book, we have learned how to use S3 and DynamoDB to improve the functionality
    of our skills and chatbots. There are currently over 100 AWS services, and some
    of them could be used to add even more functionality to your chatbots.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们学习了如何使用S3和DynamoDB来提高我们的技能和聊天机器人的功能。目前有超过100个AWS服务，其中一些可以用来为你的聊天机器人添加更多功能。
- en: 'Here are a few ideas for service integrations:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些服务集成的想法：
- en: Amazon Redshift or Amazon ElastiCache, for a different method for database storage
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于数据库存储，可以使用Amazon Redshift或Amazon ElastiCache，采用不同的方法。
- en: Amazon Cognito, for allowing users to sign in to access existing orders and
    chats or to provide results that are adjusted to match their user information
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Cognito，允许用户登录以访问现有的订单和聊天，或提供与用户信息相匹配的结果
- en: Amazon Transcribe and Amazon Simple Email Service, to send the user an email
    with everything they said whilst chatting to Alexa
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Transcribe和Amazon Simple Email Service，在用户与Alexa聊天时发送包含他们所说内容的电子邮件
- en: With the number of services available, what you can build and do with Alexa
    and Lex is limited only by your imagination.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 随着可用服务的数量，你可以用Alexa和Lex构建和做的事情仅限于你的想象力。
- en: Integrating other APIs
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成其他API
- en: The number of APIs available online is incredible! Just looking through one
    list of top APIs can give you some incredible ideas. What about a chatbot that
    you can ask about a certain product and it searches eBay for those products, allowing
    you to bid on it without leaving the chat! There's a census API that could be
    used to build an Alexa Skill where you can find out about the population, employment
    stats, economics, number of new houses, and much more about any area in the United
    States.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在线可用的API数量令人难以置信！仅仅浏览一份顶级API列表就能给你一些惊人的想法。比如一个你可以询问特定产品的聊天机器人，它会搜索eBay上的这些产品，让你可以在聊天中出价，而无需离开聊天！还有一个人口普查API，可以用来构建一个Alexa技能，你可以用它来了解美国任何地区的人口、就业统计、经济、新房数量等等。
- en: If you're looking to come up with some ideas for your own chatbots, then I highly
    recommend looking at APIs that are available and what you can do with them. You
    might find a function on one API that combines with a function on another API
    to create an immensely powerful chatbot.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在寻找自己聊天机器人的想法，我强烈建议查看可用的API以及你可以用它们做什么。你可能会在一个API上找到一个功能，它可以与另一个API上的功能结合，创建一个功能强大的聊天机器人。
- en: The future of chatbots
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聊天机器人的未来
- en: Chatbots have come a long way over the last decade and are now often found in
    households through Amazon Echo and Google Home. Technologically, they have improved
    in leaps and bounds, with improvements in AI and machine learning resulting in
    better language understanding as well as voice-to-text that power the Echo and
    Google Home devices.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天机器人在过去十年中取得了长足的进步，现在通常通过Amazon Echo和Google Home在家庭中使用。技术上，它们取得了飞跃性的进步，AI和机器学习的改进带来了更好的语言理解，以及语音到文本技术，这些技术为Echo和Google
    Home设备提供了动力。
- en: I expect that the growth of chatbots will continue and we'll start seeing them
    used in a huge range of application and through a wide range of devices. As they
    improve, they'll be trusted with increasingly complex and important tasks and
    will completely revolutionize a lot of industries. Industries such as customer
    services are already changing, with chatbots on multiple banking and retail websites
    and phone systems.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我预计聊天机器人的增长将继续，我们将开始看到它们在广泛的领域中应用，并通过各种设备使用。随着它们的改进，它们将被信任执行越来越复杂和重要的任务，并将彻底改变许多行业。例如，客户服务行业已经在改变，多个银行和零售网站以及电话系统上已经有了聊天机器人。
- en: Language understanding
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语言理解
- en: To be able to properly respond to someone, you need to understand what they
    are saying so you can build the correct response. This has improved a lot with
    the adoption of machine learning but is far from perfect.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够正确地回应某人，你需要理解他们在说什么，这样你才能构建正确的回应。随着机器学习的采用，这已经得到了很大的改善，但远非完美。
- en: One issue that can occur is that there are two intents with similar utterances,
    or with the same keyword in the utterances. When the user says a similar utterance,
    it matches both of the intents similarly and therefore can't choose which one
    to trigger. A chatbot with an intent with an utterance of `When is the football
    match?` and another intent with `Where is the football match?` is very likely
    to get confused and not be able to handle the request.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 可能出现的一个问题是存在两个具有相似表述或相同关键词的意图。当用户说一个相似的表述时，它会与两个意图相似地匹配，因此无法选择触发哪一个。一个具有“什么时候足球比赛？”表述的意图和另一个具有“足球比赛在哪里？”意图的聊天机器人很可能感到困惑，无法处理请求。
- en: Another issue can be with spelling mistakes and typos. Lex currently seems to
    be OK with handling typos and spelling mistakes, but there have been quite a few
    times that these have caused issues.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题可能是拼写错误和打字错误。Lex 目前似乎能够很好地处理打字错误和拼写错误，但确实有几次这些错误导致了问题。
- en: As machine learning and language understanding improve, I expect to see these
    sorts of issues decrease.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 随着机器学习和语言理解的提高，我预计这些问题将会减少。
- en: Working with spoken interactions
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与语音交互工作
- en: As with language understanding, being able to respond to a user's request means
    being able to understand what they said. With voice systems, this involves converting
    the spoken sound waves into text. Whilst this can work brilliantly if you happen
    to speak clearly with a neutral accent, there are often issues when people speak
    very quickly or with a strong accent.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 就像语言理解一样，能够响应用户的请求意味着能够理解他们所说的话。在语音系统中，这涉及到将语音声波转换为文本。虽然如果你说话清晰且口音中性，这可以工作得非常好，但当人们说话很快或带有浓重口音时，通常会有问题。
- en: When the text is generated from the users with a strong accent, it can often
    be misunderstood, and the text that is produced makes no sense. This then means
    that when it is passed into the language-understanding system, the speech can't
    be matched to an intent. This can be very frustrating for users with a strong
    accent who are unable to interact with these devices. This is a significant hurdle
    to overcome before voice-based chatbots become common in commercial applications.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当文本是由口音浓重的用户生成时，它往往会被误解，产生的文本也没有意义。这意味着当它被传递到语言理解系统中时，语音无法与意图匹配。这对那些无法与这些设备交互的口音浓重的用户来说可能非常令人沮丧。这是在基于语音的聊天机器人成为商业应用中常见之前需要克服的一个重大障碍。
- en: Improved device interaction
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进的设备交互
- en: The continued increase of devices and systems that you can interact with through
    voice- and text-based conversation is key to the expansion of chatbots into our
    everyday lives. The great thing is that it's possible to install Alexa software
    onto a Raspberry Pi Zero, a $10 computer chip. This means that adding voice interaction
    to any device can be cheap and relatively simple. Alexa integration can already
    be seen in cars, smart mirrors, smart tables, and much more.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 能够通过基于语音和文本的对话与越来越多的设备和系统交互，这是聊天机器人融入我们日常生活扩展的关键。好事是，可以将 Alexa 软件安装到 Raspberry
    Pi Zero 上，这是一个价值 10 美元的计算机芯片。这意味着将语音交互添加到任何设备都可以既便宜又相对简单。现在已经在汽车、智能镜子、智能桌面上看到了
    Alexa 的集成，还有更多。
- en: Another sector where I believe that chat interfaces are going to grow significantly
    is in wearables. Bluetooth hands-free systems are becoming smaller and more discrete
    and they could very easily integrate voice chat systems. At any point in your
    day, you could ask Alexa for the weather or the meetings for the day and get an
    instant response. This would overcome the security concerns that some people have
    about voice systems projecting their response for everyone in the room to hear.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为聊天界面将在可穿戴设备领域显著增长的另一个领域是。蓝牙免提系统正变得越来越小，更加隐蔽，它们可以非常容易地集成语音聊天系统。在一天中的任何时刻，你都可以询问Alexa天气或当天的会议，并立即得到回应。这将克服一些人对语音系统将他们的回应投影给房间内每个人都能听到的安全担忧。
- en: Smart watches with built-in voice- and text-based chatbots provide another way
    that we will see chatbots integrated into our lives. The advantage of watches
    over earpieces is that they have screens, allowing the chatbot to display visual
    media or show the user the information, instead of having to say it all. Being
    able to glance at the weather is more convenient than having to listen to the
    weather forecast for the next five days when all you cared about was next Wednesday.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 带内置语音和文本聊天机器人的智能手表将提供另一种我们将看到聊天机器人融入我们生活的方式。与耳塞相比，手表的优势在于它们有屏幕，允许聊天机器人显示视觉媒体或向用户展示信息，而无需全部说出来。查看天气比听下五天的天气预报要方便得多，而你只关心下周三的天气。
- en: The last wearable that I can imagine using chatbots in the near future is smart
    glasses. Glasses similar to Google Glasses would allow you to receive visual information
    in the same way that a smart watch would, but you wouldn't even need to look down
    at your wrist. The addition of chatbots to an augmented reality system such as
    this could be very powerful.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我能想象在不久的将来使用聊天机器人的最后一款可穿戴设备是智能眼镜。类似于谷歌眼镜的眼镜将允许你以与智能手表相同的方式接收视觉信息，但你甚至不需要低头看手腕。将聊天机器人添加到这种增强现实系统可能会非常强大。
- en: The most powerful way the chatbots could be integrated into wearables would
    be an integration of multiple systems. Using an earpiece for a voice-based chat,
    but having a smart watch or smart glasses to display the visual information, would
    combine the best of both worlds.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天机器人能够集成到可穿戴设备中最强大的方式可能是多个系统的集成。使用耳塞进行基于语音的聊天，但使用智能手表或智能眼镜来显示视觉信息，将结合两者的优点。
- en: Connected devices
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接的设备
- en: The second obstacle to overcome, before chatbots are commonplace, is the number
    of devices that can be connected to these smart home systems or remotely controlled
    solutions. You can currently get smart light switches, coffee makers, and even
    door locks that you can control through chat interfaces.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在聊天机器人变得普遍之前，需要克服的第二个障碍是能够连接到这些智能家居系统或远程控制解决方案的设备数量。你现在可以得到智能开关、咖啡机和甚至可以通过聊天界面控制的门锁。
- en: In the future, I expect that more and more devices will come out with a similar
    control system. I can imagine a washing machine that you can set and start by
    just talking to Alexa and eventually a kitchen where every device and appliance
    is speech-controlled. Imagine telling Alexa to turn the oven on to 180 degrees
    and to let you know when it gets to the right temperature, all while you sat watching
    TV, and then preparing a turkey and asking Alexa to open the oven so you can put
    it straight in. The oven could then weigh the turkey and set a reminder for 50
    minutes before it will be ready to start preparing the roast potatoes.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，我预计将会有越来越多的设备配备类似的控制系统。我可以想象一台洗衣机，你只需通过和Alexa对话就能设置并启动它，最终甚至是一个厨房，其中每个设备和电器都可以通过语音控制。想象一下告诉Alexa将烤箱调至180度，并在达到正确的温度时通知你，而你正坐着看电视，然后准备烤火鸡并让Alexa打开烤箱，以便你直接放入。烤箱随后可以称重火鸡，并在准备烤土豆前50分钟设置提醒。
- en: As well as domestic appliances with integrated chatbots, I expect to see an
    increase in chatbots in businesses over the next 10-20 years. Bank tellers could
    become a screen with an animation of a person, powered by a voice-based chatbot.
    You could get your fresh meat and cheese from a chatbot that controls a robotic
    delicatessen. These could work in exactly the same way as current human workers,
    asking if that is a large enough piece of the brie wheel whilst holding the knife
    in position.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 除了集成聊天机器人的家用电器之外，我预计在未来10-20年内，商业中的聊天机器人数量将增加。银行柜员可能会变成一个由基于语音的聊天机器人驱动的动画人物屏幕。你可以从控制机器人熟食店的聊天机器人那里购买新鲜肉类和奶酪。这些机器人可以以与当前人类工人完全相同的方式工作，询问布里奶酪轮是否足够大，同时保持刀的位置。
- en: As well as commercial applications, I expect to see public service information
    begin to integrate chatbots. You arrive at the shopping center car park and want
    to find a particular store. All you need to do is to walk up to one of the information
    signs and ask where the shop is and it'll display the directions on a map, tell
    you how to get there, or even send the directions to your smart watch or smart
    glasses.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 除了商业应用之外，我还预计公共服务信息将开始整合聊天机器人。你到达购物中心停车场，想要找到特定的商店。你只需走到一个信息标志前，询问商店在哪里，它就会在地图上显示方向，告诉你如何到达那里，甚至可以将方向发送到你的智能手表或智能眼镜。
- en: Unique voice-based systems
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 独特的基于语音的系统
- en: To power the sorts of integrations and devices just mentioned, there needs to
    be a change in the way that voice-based chatbots are built. If you want to build
    a system that handles user speech, then your two main options are to build an
    Alexa Skill or a Google Home action. This is great for integrating into devices
    that already run these systems, but companies wouldn't want to run Alexa as your
    bank teller chatbot system.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了推动刚刚提到的集成和设备，需要改变基于语音的聊天机器人的构建方式。如果你想构建一个处理用户语音的系统，那么你的两个主要选择是构建一个Alexa技能或一个Google
    Home动作。这对于集成到已经运行这些系统的设备来说很棒，但公司不会希望将Alexa作为你的银行柜员聊天机器人系统。
- en: There needs to be a change in the market with the move to being able to create
    custom voice-based chatbot systems that don't have to be run on Alexa or Google
    Home. This is currently possible through Amazon Lex, as it has been built to handle
    voice interaction, but I hope to see an increase in the range of systems that
    can do this.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 随着能够创建无需在Alexa或Google Home上运行的自定义语音聊天机器人系统的出现，市场需要发生变化。目前，这通过Amazon Lex成为可能，因为它已被构建来处理语音交互，但我希望看到能够执行此操作的系统范围的扩大。
- en: General Artificial Intelligence
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用人工智能
- en: A lot of the issues that exist with current chatbots will gradually be fixed,
    and their performance will increase incrementally, but the next large step forward
    will be the creation of **general AI**.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当前聊天机器人存在的大多数问题将逐渐得到解决，它们的性能将逐步提高，但下一个重大进步将是**通用人工智能**的创建。
- en: General AI is the concept where a single system can handle any request. This
    may sound not too far off with projects such as IBM Watson building a system that
    can dominate Jeopardy and other quiz games, but being able to answer simple questions
    is only part of the challenge.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通用人工智能是一个概念，即一个系统可以处理任何请求。这听起来可能并不遥远，比如IBM Watson正在构建一个可以统治Jeopardy和其他问答游戏的系统，但能够回答简单问题只是挑战的一部分。
- en: The issues start when the system has to work out what other information it needs
    to fulfill the request and how to ask for that information. If someone asked you
    to find their class graduation photo, you would probably ask them what school
    they went to and what year they graduated in. You have used your knowledge about
    class photos to decide that you need to ask about school and year to accurately
    find their class photo. Our brains are extremely good at these sorts of tasks,
    but building an AI system that can work this out for every possible request, now
    or in the future, is a daunting task. Building an intent for every possible question
    just isn't possible so the system will need to gather what information it has
    on the topic, work out what else it needs to know to answer the question, and
    then ask for those pieces of data in a human way.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 问题始于系统必须确定它需要哪些其他信息来满足请求以及如何请求这些信息。如果有人让你找到他们的班级毕业照片，你可能会问他们上了哪所学校以及哪一年毕业。你利用自己对班级照片的知识来决定你需要询问学校和年份才能准确找到他们的班级照片。我们的大脑在这些任务上非常擅长，但构建一个能够为现在或未来的每一个可能的请求解决这个问题的人工智能系统是一个艰巨的任务。为每一个可能的问题构建意图是不可能的，因此系统需要收集它关于该主题的信息，确定它还需要了解什么来回答问题，然后以人类的方式请求这些数据片段。
- en: Another issue is with integrating into external systems. Throughout this book,
    we've used APIs to access data that is stored by a third party. To use these APIs,
    we had to have an API key, and, even then, we only had access to the data and
    functionality that we were given through the API. If we wanted to create a chatbot
    that did our weekly supermarket shop, had it delivered to our house, and paid
    for it, we'd need to get an API that allows us to do all of this. Creating an
    API like that is something I expect most supermarkets wouldn't dream of doing.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是与外部系统的集成。在这本书中，我们使用API来访问第三方存储的数据。为了使用这些API，我们需要一个API密钥，即使如此，我们也只能访问通过API提供的数据和功能。如果我们想创建一个聊天机器人，它能帮我们完成每周的超市购物，送货上门并付款，我们就需要获得一个允许我们完成所有这些的API。创建这样的API是大多数超市不会考虑的事情。
- en: In my job, integrating into a client's existing system is a major hurdle to
    getting their chatbot functioning. Having a general AI system that has access
    to every API in the world is unrealistic, and, even then, there are systems that
    are not exposed through APIs.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的工作中，将聊天机器人集成到客户的现有系统中是一个主要的难题，以确保其功能正常。拥有一个可以访问世界上每个API的通用人工智能系统是不现实的，即使如此，也有一些系统没有通过API公开。
- en: Improving people's opinions
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改善人们的看法
- en: One large hurdle to increased acceptance of chatbots is improving people's opinions
    of chatbots. When chatbots first came out, they were very limited in functionality,
    couldn't deal with many variations in utterance, and often proved to be more frustrating
    than useful. Modern chatbots have improved a lot, but there are a lot of older
    systems that are still very discouraging to use. Even modern chatbot systems have
    their limitation, as we've discussed earlier, and can still end up disappointing
    users with missed intents or misunderstood speech.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 提高人们对聊天机器人的接受度的一个主要障碍是改善人们对聊天机器人的看法。当聊天机器人最初出现时，它们的功能非常有限，无法处理许多话语的变化，并且往往证明比有用更令人沮丧。现代聊天机器人已经取得了很大的进步，但仍然有许多老旧的系统使用起来非常令人沮丧。即使现代聊天机器人系统也有其局限性，正如我们之前讨论的，它们仍然可能因为意图识别错误或语音理解不当而让用户感到失望。
- en: As the systems improve, better systems will have better user retention and the
    old systems will be replaced. I expect to see a continual improvement in people's
    opinions about chatbots. As systems like Alexa and Google Home become increasingly
    common in households, younger generations will grow up with chatbots and interacting
    with them will become second nature.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 随着系统的改进，更好的系统将拥有更好的用户留存率，而老旧的系统将被取代。我预计人们关于聊天机器人的看法将持续改善。随着像Alexa和Google Home这样的系统在家庭中变得越来越普遍，年轻一代将在与聊天机器人的互动中成长，与之互动将变得像呼吸一样自然。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This book has given us a practical introduction to chatbots through building
    increasingly complex Alexa Skills and Lex chatbots. We've learned about starting
    from a perfect conversation and creating flow diagrams to visualize the users'
    conversational path with a chatbot. Using these flow diagrams, we've built intents
    using utterances and slots that are handled in Lambdas.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书通过构建越来越复杂的Alexa技能和Lex聊天机器人，为我们提供了一个实用的聊天机器人入门介绍。我们学习了从完美的对话开始，并创建流程图来可视化用户与聊天机器人的对话路径。利用这些流程图，我们通过使用语句和槽位构建了意图，这些语句和槽位在Lambda中处理。
- en: We've improved the features and abilities of our chatbots through the use of
    S3 storage, DynamoDB databases, and external APIs. To improve the user experience,
    we also learned about using SSML to change how Alexa talks with our users, learned
    how to create cards to provide more visual information, and learned about search
    query slot types in Alexa for gathering wider ranges of slot values.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用S3存储、DynamoDB数据库和外部API来改进了聊天机器人的功能和能力。为了提升用户体验，我们还学习了如何使用SSML来改变Alexa与我们的用户交流的方式，学习了如何创建卡片以提供更多视觉信息，以及学习了在Alexa中关于搜索查询槽位类型的内容，以便收集更广泛的槽位值。
- en: Finally, we've discussed a few great ways to build upon what we've already learned
    in this book and what we expect is in store for the future of chatbots.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们讨论了几种构建在本书所学内容之上的优秀方法，以及我们对聊天机器人未来发展的预期。
