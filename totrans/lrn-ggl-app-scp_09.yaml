- en: Chapter 9. More Tips and Tricks and Creating an Add-on
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, you built an order processing workflow application.
    In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: To overcome script maximum execution time restriction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To use script codes from other script files or libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create add-ons that use the OAuth2 external library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overcoming the "script exceeded maximum execution time" error
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if one of your script functions has a bug that causes endless (not terminating)
    execution, for example, an endless for loop and/or while loop. There are no remedies
    other than carefully examining the loop terminating statements.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, your script may be flawless or bug free, but if it needs to handle
    a large spreadsheet or external data, it may take a long time to complete the
    execution. The maximum allowed time for your script to run continuously is 6 minutes.
    If it exceeds that limit, GAS would throw the "Exceeded maximum execution time"
    exception.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For a list of other limitations, please visit: [https://developers.google.com/apps-script/guides/services/quotas#current_limitations](https://developers.google.com/apps-script/guides/services/quotas#current_limitations).'
  prefs: []
  type: TYPE_NORMAL
- en: To overcome this bottleneck, you can follow these steps. For example, if your
    `doLengthyProcess` function takes a long time to finish, then manually create
    a minute's trigger for the `doLengthyProcess` function so that it executes every
    10 minutes. Your function should periodically check the elapsed time since the
    start. If the function completes successfully within the time limit then, at the
    end of the function, it deletes the trigger. Otherwise, the trigger value is stored
    in a loop counter in a dedicated Sheet or in script properties. This value should
    be read and assigned to the loop counter, when the function is triggered again.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample skeleton of such a function is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To sum up, you create an "every minutes" trigger manually, and then the function
    executes until it completes successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you feel hesitant to create triggers manually, you can create them by script
    as we discussed in [Chapter 3](ch03.html "Chapter 3. Parsing and Sending E-mails"),
    *Parsing and Sending E-mails* but this time, create every minute''s trigger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here you created a trigger for the functions which do not start immediately
    but with a delay. However, if you want to automate everything, it means creating
    a trigger and calling the function immediately. Create another function `startProcess`
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, you just need to run the `startProcess` function. Also, you can assign
    a menu for this function.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your script project to use external libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you would like to reuse code from other script project(s) or other
    programmer's code in your projects. You can import external code as it resides
    in the current project. You need to make a simple configuration in your current
    project.
  prefs: []
  type: TYPE_NORMAL
- en: For an example, we will explain how to import the previous chapter's code into
    the current project.
  prefs: []
  type: TYPE_NORMAL
- en: Open any one of your previously created scripts (for example, [Chapter 8](ch08.html
    "Chapter 8. Building a Workflow Application"), *Building a Workflow Application*)
    in the script editor, save a version if you haven't already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **File** menu and then **Project properties**. The **Project
    properties** dialog will open as shown here:![Configuring your script project
    to use external libraries](img/B05010_09_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the **Project key** value (this value should be different for your project).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the current script, navigate to **Resources** | **Libraries…**, and then
    the **Included Libraries** dialog will open as shown here:![Configuring your script
    project to use external libraries](img/B05010_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste **Project key** (you already copied in step 1) into the **Find a Library**
    textbox and click on the **Select** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the `Chapter 8` project will be included in the libraries list as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring your script project to use external libraries](img/B05010_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Select the version (the version you are going to use in this current project);
    and if you like, you can change the identifier (`Chapter8`) too. Leave **Development
    Mode** off means using a selected version; set it to **on** to override the selected
    version and use the current version. Click on the **Save** button to save the
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: Now all the functions (except private functions, that is, function names appended
    with "`_`") and the global variables are available to use in the current project.
    For example, you can use the `doGet` function from [Chapter 8](ch08.html "Chapter 8. Building
    a Workflow Application"), *Building a Workflow Application* here by prefixing
    with the identifier. It means that you can use the `doGet` function as `Chapter8.doGet()`,
    the `getPrice` function as `Chapter8.getPrice()`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need more explanation, then here is a sample usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using JSDoc annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the preceding test function, you can see that the code hint became active
    as soon as you type a ''`.`'' next to the identifier name (`Chapter8`). This shows
    all the functions and global variables available in the external library as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using JSDoc annotations](img/B05010_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding code hints are generic, for example, `index` shown as `Object`.
    For detailed code hints, you should use the JSDoc style documentations (annotations
    or comments at top lines of function definitions).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you used the following annotations to the `getPrice` function
    in [Chapter 8](ch08.html "Chapter 8. Building a Workflow Application"), *Building
    a Workflow Application*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then the code hint would be as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using JSDoc annotations](img/B05010_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, you can notice how the code hint returns with useful information for the
    `getPrice` function.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For further reading on JSDoc, visit: [https://developers.google.com/closure/compiler/docs/js-for-compiler](https://developers.google.com/closure/compiler/docs/js-for-compiler).'
  prefs: []
  type: TYPE_NORMAL
- en: Using the OAuth open source library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your application interacts with external libraries other than Google's basic
    services, then it should be authenticated. In other words, if your application
    runs on behalf of a user, then that user should authorize your application to
    grant access to his/her data. GAS does not provide any built-in authentication
    service, but you can use an open source OAuth library.
  prefs: []
  type: TYPE_NORMAL
- en: Creating, testing, and publishing add-ons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to use other external libraries in your current project, you need
    to know the project key and you should have at least read access to that project.
    At the same time, every new version of the master project will not reflect in
    the client project unless the client selects the current version. Add-ons override
    this configuration hassle.
  prefs: []
  type: TYPE_NORMAL
- en: Add-ons are installable scripts by the click of a button, no configuration required.
    You can install add-ons in Sheets, Docs, and/or Forms published by the other programmer
    or from the Google Chrome Web Store.
  prefs: []
  type: TYPE_NORMAL
- en: Installing add-ons from Chrome Web Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To install an add-on from Chrome Web Store, open the document (Sheets, Docs,
    or Forms) and click on **Get add-ons…** from the **Add-ons** menu. Select any
    one of your favorite add-ons from the **Add-ons** dialog (if you hover your mouse
    over any add-on, then a plus symbol will appear on the application; click on it
    and authorize if required). A sample **Add-ons** dialog is shown here, but the
    actual add-ons included may vary from time to time.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing add-ons from Chrome Web Store](img/B05010_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will get that add-on installed and added to your document''s **Add-ons**
    menu. Each add-on comes with easy-to-use menu items. For example, if you installed
    **autoCrat** then the menu item would look like in the screenshot shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing add-ons from Chrome Web Store](img/B05010_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating custom add-ons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can create add-ons by yourself, use within your other documents, or share
    with other users. Your users can use your add-ons but cannot see the code. So,
    you can keep your intellectual property (that is, code and data) confidential.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add menu items to the **Add-on** menu such that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `addItem` method''s first argument is the label for the menu item and the
    next one is the function name. Add the `onInstall` event function if you are going
    to publish an add-on for Chrome Web Store such that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding function invokes the `onOpen` function while the add-on is installed
    for the first time in Sheets, Docs, or Forms. If your add-on needs a user interface,
    then create the sidebar dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To style the sidebar (create `Sidebar.html`), you can use the officially supported
    CSS package from the [https://ssl.gstatic.com/docs/script/css/add-ons1.css](https://ssl.gstatic.com/docs/script/css/add-ons1.css)
    URL.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more help on this package visit [https://developers.google.com/apps-script/add-ons/css](https://developers.google.com/apps-script/add-ons/css).
  prefs: []
  type: TYPE_NORMAL
- en: Testing your add-on
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test your add-on within the script editor, navigate to the **Publish** |
    **Test as add-on…** menu and then within the resulting dialog select the document
    in which you want to test the add-on as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing your add-on](img/B05010_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To share your add-on with others, it is enough to share the document. More than
    that, if you would like to publish the script, follow the **Publish** | **Deploy**
    as an add-on menu. In the resulting dialog, fill the required fields and follow
    the guidelines provided. Your add-on should strictly adhere to the Chrome Web
    Store's content and style guidelines and undergo a review process before being
    listed and made available to the public.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on add-ons, visit [https://developers.google.com/apps-script/add-ons/](https://developers.google.com/apps-script/add-ons/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating an add-on that uses an OAuth2 external library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get hands-on experience on all aforesaid concepts, we will create an add-on
    that can send an active spreadsheet as a PDF attachment to the active user's e-mail
    ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new script project in Sheets. In the script editor, we will first
    create a few global variables as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Next, take a look at the `onOpen` and `onInstall` trigger functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onOpen` trigger, we have associated the function `sendSheetAsPdfToActiveUser`
    to the **Sheet To PDF** menu item. We will create that function now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The said function sends an e-mail with the PDF attachment, which is returned
    from the `getAttachments` function. An example is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The said function prompts the user to authenticate the application if he is
    using it for the first time or already has an authenticated token but it is expired.
    If the authenticated token is valid, then it returns the PDF attachment, otherwise
    it returns false.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the only thing we have left to do is implementing OAuth2 flow. We will
    create a function for the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget to replace your own client ID and secret. We will see how to get
    them. Can you remember what you did to enable advanced services in [Chapter 5](ch05.html
    "Chapter 5. Creating Google Calendar and Drive Applications"), *Creating Google
    Calendar and Drive Applications*? Use the same steps here, but with a few additional
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the script editor, navigate to **Resources** | **Developers Console
    Project…** and click on **View Developers Console** on the dialog that opens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an add-on that uses an OAuth2 external library](img/B05010_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That should take you to the developer's console dashboard where you can click
    on the **Enable and manage APIs** option.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an add-on that uses an OAuth2 external library](img/B05010_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once enabled, click on **Credentials** on the left pane of the console dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an add-on that uses an OAuth2 external library](img/B05010_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To complete the OAuth2 flow, this callback function will be invoked, and it
    shows a message to the user. Then, the OAuth2 client IDs are listed as **Apps
    Script**. Click on **Apps Script** to see the details as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an add-on that uses an OAuth2 external library](img/B05010_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You need to add an authorized redirect URL for this project. Enter the URL
    as shown here, but replaced with your project key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Before clicking on **Save**, a copy of the client ID and client secret is required
    in the `getGoogleService` function. Once this is done, click on **Save**; you
    can return to this dashboard anytime afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also add the `authCallback` function as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Before testing the add-on, import the OAuth2 client library using the project
    key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following are some sample keys:'
  prefs: []
  type: TYPE_NORMAL
- en: 'OAuth1 Lib Key: `Mb2Vpd5nfD3Pz-_a-39Q4VfxhMjh3Sh48`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OAuth2 Lib Key: `MswhXl8fVhTFUH_Q3UOJbXvxhMjh3Sh48`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on open source OAuth2 external library, visit [https://github.com/googlesamples/apps-script-oauth2](https://github.com/googlesamples/apps-script-oauth2).
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have completed all the setup steps. Refresh the spreadsheet window
    so that your add-on appears in an **Add-on** menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, once authenticated, you can reset or revoke the authentication
    using this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Notice the same service name (`PACKT`) used here.
  prefs: []
  type: TYPE_NORMAL
- en: Other useful links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tutorials: [https://developers.google.com/apps-script/articles](https://developers.google.com/apps-script/articles)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Documentation: [https://developers.google.com/apps-script/](https://developers.google.com/apps-script/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blog: [http://googleappsdeveloper.blogspot.in/search/label/Apps%20Script](http://googleappsdeveloper.blogspot.in/search/label/Apps%20Script)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to overcome script maximum run time restrictions,
    how to import external libraries, how to use OAuth, and how to create an add-on.
    We hope you enjoyed reading this book, learning, and gathering hands-on skills
    on most aspects of the Google Apps Script. Happy coding and enjoy!
  prefs: []
  type: TYPE_NORMAL
