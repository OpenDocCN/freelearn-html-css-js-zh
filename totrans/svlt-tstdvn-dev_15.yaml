- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test-Driving Svelte Stores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`subscribe` mechanism – that helps ensure that all components maintain a consistent
    view of each variable’s current value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to writing tests for components that involve stores, you’ve got
    to write tests for two halves: the first half for the *observation* of the store
    value and the second half for the *setting* of the store value.'
  prefs: []
  type: TYPE_NORMAL
- en: Because stores are an internal design decision, there’s no need to write a Playwright
    test specifically for the introduction of stores.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Designing a store for birthdays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing tests for reading store values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing tests for updating store values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you’ll have a good understanding of writing unit
    tests for Svelte store objects.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code for the chapter can be found online at [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter15/Complete](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter15/Complete).
  prefs: []
  type: TYPE_NORMAL
- en: Designing a store for birthdays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code for this chapter includes a single store in the `src/stores/birthdays.js`
    file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The idea of the `birthdays` store is to store whatever birthdays have been returned
    from the SvelteKit page load. It’s kept up to date by the page route component.
  prefs: []
  type: TYPE_NORMAL
- en: There’s also a new `NextBirthday` component that reads the store and displays
    a message at the top of the page alerting the user to the next upcoming birthday.
  prefs: []
  type: TYPE_NORMAL
- en: Stores aren’t necessary for this change
  prefs: []
  type: TYPE_NORMAL
- en: This feature could have been written simply by passing `birthdays` as a prop
    to `NextBirthday`. It’s certainly worth avoiding stores if you can simply use
    component props. This chapter’s code is intended to be educative only; in reality
    I would not use a store for this use case.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – The Birthdays application with the new alert](img/Figure_15.1_B19611.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – The Birthdays application with the new alert
  prefs: []
  type: TYPE_NORMAL
- en: The code for the `NextBirthday` component is not trivial, so you may be interested
    in checking it out online. In particular, the unit tests make use of the `vi.useFakeTimers`
    and `vi.setSystemTime` functions to ensure that the test checks aren’t affected
    by the passing of real time.
  prefs: []
  type: TYPE_NORMAL
- en: That’s all the design necessary. Let’s look at the tests.
  prefs: []
  type: TYPE_NORMAL
- en: Writing tests for reading store values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are at least two tests needed when reading the store value: first, for
    the initial value when the component loads, and second, when an update comes in.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of the first, which you’ll find in `src/routes/birthdays/NextBirthday.test.js`.
    Notice how we import the `birthdays` store with the name, `birthdaysStore`, which
    makes it very clear in the test that the object imported is the store. The *Arrange*
    phase of the test then calls `birthdayStore.set` to prime the store with its initial
    value before the component is mounted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You may be curious why the year `2056` is mentioned in the expectation. That’s
    because we used `vi.setSystemTime` to set the current date to a fixed date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The second test has the same initial setting, but now the `render` call moves
    into the *Arrange* phase, and the *Act* phase is now a second call to `birthdayStore.set`.
    Notice also that this call needs to be marked with `await` so that the component
    has the opportunity to re-render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This test will only pass if the component is set to observe the store. You
    can see this in `src/routes/birthdays/NextBirthday.svelte`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The test would fail if the argument to the function was `birthdays` and not
    `$birthdays`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s look at the tests for setting the value.
  prefs: []
  type: TYPE_NORMAL
- en: Writing tests for updating store values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The page route component is responsible for ensuring the birthdays that are
    passed into it are saved in the store.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the first test from the `src/routes/birthdays/page.test.js` file, which
    uses `birthdaysStore.subscribe` to set a `storedBirthdays` value within the test.
    After rendering the component, it expects the `storedBirthdays` value to contain
    the birthdays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'A second test is then needed to ensure the store value is updated whenever
    the component prop changes. This test makes use of the `$set` function on the
    returned component to update the props on the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: And that’s all there is to it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This short chapter covered some important concepts for testing Svelte stores:
    first, how to test the two halves of observing and setting Svelte store values,
    and second, how you can rename the store import so that it’s more readable within
    your tests. In our case, that meant renaming `birthdays` as `birthdaysStore`.'
  prefs: []
  type: TYPE_NORMAL
- en: You’ve also seen how to call the store’s `set` and `subscribe` methods within
    your tests, and how to use Svelte’s `$set` function on the component instance
    to update props to a previously rendered component.
  prefs: []
  type: TYPE_NORMAL
- en: Taken together, these techniques highlight how advanced Svelte features are
    still testable at the unit level if that’s desired. Of course, you might get just
    as much value from writing Playwright tests that can happily ignore the internal
    mechanics of Svelte stores.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next chapter covers a more complicated topic: **service workers**.'
  prefs: []
  type: TYPE_NORMAL
