["```js\nclass UserRegistrationService {\n    registerUser(email: string, password: string) {\n        // TODO: process registration\n        // TODO: send registration success email\n    }\n}\n```", "```js\ninterface User {\n    email: string;\n    password: string;\n}\ninterface UserRepository {\n    save(user: User): Promise<User>;\n}\ninterface EmailService {\n    sendEmail(to: string, subject: string, body?: string): Promise<void>;\n}\n```", "```js\nclass UserRegistrationService {\n    constructor(\n        private userRepository: UserRepository,\n        private emailService: EmailService\n    ) {}\n    async registerUser(email: string, password: string){\n        await this.userRepository.save({\n            email,\n            password,\n        });\n        await this.emailService.sendEmail(email, 'Welcome to my website!');\n    }\n}\n```", "```js\n// FileUserRepository.ts\nimport * as fs from 'fs';\nclass FileUserRepository implements UserRepository {\n  save(user: User): Promise<User> {\n    return new Promise((resolve, reject) => {\n      fs.appendFile('users.txt', JSON.stringify(user), err => {\n        if (err) return reject(err);\n        resolve(user);\n      });\n    });\n  }\n}\n```", "```js\n// MySqlUserRepository.ts\nimport mysql from 'mysql';\nclass MySqlUserRepository implements UserRepository {\n  connection = mysql.createConnection({\n    // connection details\n  });\n  save(user: User): Promise<User> {\n    return new Promise((resolve, reject) => {\n      return this.connection.query(\n        `INSERT INTO users (email, password)\n        VALUES (?, ?)`,\n        [user.email, user.password],\n        (err, data) => {\n          if (err) return reject(err);\n          resolve(data);\n        }\n      );\n    });\n  }\n}\n```", "```js\ninterface User {\n  email: string;\n  password: string;\n}\ntest('User registration', async () => {\n  const mockUserRepository: UserRepository = {\n    async save(user: User) {\n      return user;\n    },\n  };\n  const mockEmailService: EmailService = {\n    async sendEmail(to: string, subject: string, body?: string) {},\n  };\n  const userRegistrationService = new UserRegistrationService(\n    mockUserRepository,\n    mockEmailService\n  );\n  await userRegistrationService.registerUser(\n    'example@domain.com',\n    'super-secret-password'\n  );\n  expect(mockUserRepository.save).toHaveBeenCalled();\n  expect(mockEmailService.sendEmail).toHaveBeenCalled();\n  // ...\n});\n```", "```js\nimport * as bcrypt from 'bcrypt';\nclass UserRegistrationService {\n  constructor(\n    private userRepository: UserRepository,\n    private emailService: EmailService,\n    private passwordHashSalt: string\n  ) {}\n  async registerUser(email: string, password: string) {\n    const hashedPassword = await bcrypt.hash(password, this.passwordHashSalt);\n    await this.userRepository.save({\n      email,\n      password: hashedPassword,\n    });\n    await this.emailService.sendEmail(email, 'Welcome to my website!');\n  }\n}\n```", "```js\nimport { Component, Input } from '@angular/core';\n@Component({\n    selector: 'welcome-message',\n    template: `\n        <h1>Welcome {{ name }}!</h1>\n    `,\n})\nexport class WelcomeMessageComponent {\n    @Input() name: string;\n}\n```", "```js\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nexport interface User {\n    name: string;\n}\n@Injectable()\nexport class UsersService {\n    getUsers(): Observable<User[]> {\n        return of([\n            { name: 'Alice' },\n            { name: 'Bob' },\n            { name: 'Charlie' }\n        ]);\n    }\n}\n```", "```js\nimport { Component } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { UsersService, User } from \"./users.service\";\n@Component({\n  selector: 'users-list',\n  template: `\n    <ul>\n      <li *ngFor=\"let user of (users$ | async)\">\n        {{ user.name }}\n      </li>\n    </ul>\n  `\n})\nexport class UsersListComponent {\n  readonly users$: Observable<User[]>;\n  constructor(private usersService: UsersService) {\n    this.users$ = usersService.getUsers();\n  }\n}\n```", "```js\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nexport interface User {\n    name: string;\n}\n@Injectable()\nexport class UsersService {\n    constructor(private httpClient: HttpClient) {}\n    getUsers(): Observable<User[]> {\n        return this.httpClient.get<User[]>('/api/users');\n    }\n}\n```", "```js\n    import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\n    import { Injectable } from '@angular/core';\n    import { Observable } from 'rxjs';\n    @Injectable()\n    export class ApiHttpInterceptor implements HttpInterceptor {\n      intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        throw new Error('Method not implemented.');\n      }\n    }\n    ```", "```js\n    import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\n    import { Injectable } from \"@angular/core\";\n    import { Observable } from \"rxjs\";\n    @Injectable()\n    export class ApiHttpInterceptor implements HttpInterceptor {\n        intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (!req.url.startsWith('/api/')) {\n          return next.handle(req);\n        }\n        const relativeUrl = req.url.replace('/api/', '');\n        const newRequest = req.clone({\n    url: `https://jsonplaceholder.typicode.com/${relativeUrl}`\n        });\n        return next.handle(newRequest);\n      }\n    }\n    ```", "```js\n    import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n    import { NgModule } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n    import { AppComponent } from './app.component';\n    import { ApiHttpInterceptor } from './interceptors/api-http.interceptor';\n    import { UsersListComponent } from './users-list.component';\n    import { UsersService } from './users.service';\n    import { WelcomeMessageComponent } from './welcome-message.component';\n    @NgModule({    \n      imports: [BrowserModule, HttpClientModule],\n      declarations: [AppComponent, WelcomeMessageComponent, UsersListComponent],   \n      providers: [UsersService, { HTTP_INTERCEPTORS list (notice the bold line).\n    ```", "```js\nimport { Controller, Get, Param } from '@nestjs/common';\nimport { HelloService } from './hello.service';\n@Controller('hello')\nexport class HelloController {\n  constructor(private helloService: HelloService) {}\n  @Get(':username')\n  async getByUsername(@Param('username') username: string) {\n    const message = await this.helloService.getHello(username);\n    return { message };\n  }\n}\n```", "```js\n{\n    \"compilerOptions\": {\n        \"target\": \"es5\",\n        \"lib\": [\"es6\", \"dom\"],\n        \"types\": [\"reflect-metadata\"],\n        \"module\": \"commonjs\",\n        \"moduleResolution\": \"node\",\n        \"experimentalDecorators\": true,\n        \"emitDecoratorMetadata\": true\n    }\n}\n```", "```js\n    export interface Logger {\n        log(message: string): void;\n    }\n    ```", "```js\n    import { injectable } from \"inversify\";\n    import { Logger } from \"./logger.interface\";\n    @injectable()\n    export class ConsoleLogger implements Logger {\n        log(message: string) {\n            console.log(message);\n        }\n    }\n    ```", "```js\n    export const TYPES = {\n        Logger: Symbol.for(\"Logger\"),\n    };\n    ```", "```js\n    import { Container } from \"inversify\";\n    import { ConsoleLogger } from \"./console-logger\";\n    import { Logger } from \"./logger.interface\";\n    import { TYPES } from \"./types\";\n    console-logger, logger.interface, and types) together:\n    ```", "```js\n    import \"reflect-metadata\";\n    import { inject, injectable } from \"inversify\";\n    import { container } from \"./ioc.config\";\n    import { Logger } from \"./logger.interface\";\n    import { TYPES } from \"./types\";\n    @injectable()\n    class Main {\n        constructor(@inject(TYPES.Logger) private logger: Logger) {}\n        run() {\n            this.logger.log('Hello from InversifyJS!');\n        }\n    }\n    // Run the app:\n    const main = container.resolve(Main);\n    main.run();\n    ```", "```js\n    Hello from InversifyJS!\n    ```", "```js\nconsole.log('Running');\n```", "```js\n    result is 150\n    ```", "```js\n    container.bind<Logger>(TYPES.Logger).to(ConsoleLogger);\n    ```", "```js\n    container.bind<Logger>(TYPES.Logger).to(FileLogger);\n    ```", "```js\n    [LOG] Calculated result of expression:13*10+20 is 150\n    ```"]