["```js\napp/\n--controllers/\n--middlewares/\n--models/\n--routes/\nconfig/\n--environments/\n--strategies/\ntests/\n--integration/\n--unit/\npublic/\n--app/\n--src/\n--assets/\n--typings/\n--package.json\n--tsconfig.json\n--typings.json\npackage.json\nserver.js\n```", "```js\n{\n  \"name\": \"mean-blueprints-contact-manager\",\n  \"version\": \"0.0.9\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/robert52/mean-blueprints-cm.git\"\n  },\n  \"engines\": {\n    \"node\": \">=4.4.3\"\n  },\n  \"scripts\": {\n    \"start\": \"node app.js\",\n    \"unit\": \"node_modules/.bin/mocha tests/unit/ --ui bdd --recursive --reporter spec --timeout 10000 --slow 900\",\n    \"integration\": \"node_modules/.bin/mocha tests/integration/ --ui bdd --recursive --reporter spec --timeout 10000 --slow 900\",\n    \"less\": \"node_modules/.bin/autoless public/assets/less public/assets/css --no-watch\",\n    \"less-watch\": \"node_modules/.bin/autoless public/assets/less public/assets/css\"\n  },\n  \"dependencies\": {\n    \"async\": \"^0.9.2\",\n    \"body-parser\": \"^1.15.0\",\n    \"connect-mongo\": \"^1.1.0\",\n    \"express\": \"^4.13.4\",\n    \"express-session\": \"^1.13.0\",\n    \"lodash\": \"^3.10.1\",\n    \"method-override\": \"^2.3.5\",\n    \"mongoose\": \"^4.4.12\",\n    \"passport\": \"^0.2.2\",\n    \"passport-local\": \"^1.0.0\",\n    \"serve-static\": \"^1.10.2\"\n  },\n  \"devDependencies\": {\n    \"autoless\": \"^0.1.7\",\n    \"chai\": \"^2.3.0\",\n    \"chai-things\": \"^0.2.0\",\n    \"mocha\": \"^2.4.5\",\n    \"request\": \"^2.71.0\"\n  }\n}\n```", "```js\n$ npm install\n\n```", "```js\n'use strict';\n\nmodule.exports = {\n  port: 3000,\n  hostname: '127.0.0.1',\n  baseUrl: 'http://localhost:3000',\n  mongodb: {\n    uri: 'mongodb://localhost/cm_dev_db'\n  },\n  app: {\n    name: 'Contact manager'\n  },\n  serveStatic: true,\n  session: {\n    type: 'mongo',\n    secret: 'u+J%E^9!hx?piXLCfiMY.EDc',\n    resave: false,\n    saveUninitialized: true\n  }\n};\n```", "```js\n'use strict';\n\n// Get environment or set default environment to development\nconst ENV = process.env.NODE_ENV || 'development';\nconst DEFAULT_PORT = 3000;\nconst DEFAULT_HOSTNAME = '127.0.0.1';\n\nconst http = require('http');\nconst express = require('express');\nconst config = require('./config');\nconst app = express();\n\nvar server;\n\n// Set express variables\napp.set('config', config);\napp.set('root', __dirname);\napp.set('env', ENV);\n\nrequire('./config/mongoose').init(app);\nrequire('./config/models').init(app);\nrequire('./config/passport').init(app);\nrequire('./config/express').init(app);\nrequire('./config/routes').init(app);\n\n// Start the app if not loaded by another module\nif (!module.parent) {\n  server = http.createServer(app);\n  server.listen(\n    config.port || DEFAULT_PORT,\n    config.hostname || DEFAULT_HOSTNAME,\n    () => {\n      console.log(`${config.app.name} is running`);\n      console.log(`   listening on port: ${config.port}`);\n      console.log(`   environment: ${ENV.toLowerCase()}`);\n    }\n  );\n}\n\nmodule.exports = app;\n```", "```js\n'use strict';\n\nconst path = require('path');\nconst bodyParser = require('body-parser');\nconst methodOverride = require('method-override');\nconst serveStatic = require('serve-static');\nconst session = require('express-session');\nconst passport = require('passport');\nconst MongoStore = require('connect-mongo')(session);\nconst config = require('./index');\n\nmodule.exports.init = initExpress;\n\nfunction initExpress(app) {\n  const root = app.get('root');\n  const sessionOpts = {\n    secret: config.session.secret,\n    key: 'skey.sid',\n    resave: config.session.resave,\n    saveUninitialized: config.session.saveUninitialized\n  };\n\n  //common express configs\n  app.use(bodyParser.urlencoded({ extended: true }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n  app.disable('x-powered-by');\n\n  if (config.session.type === 'mongo') {\n    sessionOpts.store = new MongoStore({\n      url: config.mongodb.uri\n    });\n  }\n\n  app.use(session(sessionOpts));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  app.use(function(req, res, next) {\n    res.locals.app = config.app;\n\n    next();\n  });\n\n  // always load static files if dev env\n  if (config.serveStatic) {\n    app.use(serveStatic(path.join(root, 'public')));\n  }\n};\n```", "```js\n'use strict';\n\nvar ENV = process.env.NODE_ENV || 'development';\nvar config = require('./environments/'+ENV.toLowerCase());\n\nmodule.exports = config;\n```", "```js\n$ NODE_ENV=production node server.js\n\n```", "```js\n$ npm install -g mocha\n\n```", "```js\n'use strict';\n\nconst mongoose = require('mongoose');\nconst config = require('./index');\n\nmodule.exports.init = initMongoose;\n\nfunction initMongoose(app) {\n  mongoose.connect(config.mongodb.uri);\n\n  // If the Node process ends, cleanup existing connections\n  process.on('SIGINT', cleanup);\n  process.on('SIGTERM', cleanup);\n  process.on('SIGHUP', cleanup);\n\n  if (app) {\n    app.set('mongoose', mongoose);\n  }\n\n  return mongoose;\n};\n\nfunction cleanup() {\n  mongoose.connection.close(function () {\n    console.log('Closing DB connections and stopping the app. Bye bye.');\n    process.exit(0);\n  });\n}\n```", "```js\n'use strict';\n\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nvar ContactSchema = new Schema({\n  email:  {\n    type: String\n  },\n  name: {\n    type: String\n  },\n  city: {\n    type: String\n  },\n  phoneNumber: {\n    type: String\n  },\n  company: {\n    type: String\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\n// compile and export the Contact model\nmodule.exports = mongoose.model('Contact', ContactSchema);\n```", "```js\n'use strict';\n\nmodule.exports.init = initModels;\n\nfunction initModels(app) {\n  let modelsPath = app.get('root') + '/app/models/';\n\n  ['user', 'contact'].forEach(function(model) {\n    require(modelsPath + model);\n  });\n};\n```", "```js\n'use strict';\n\n/**\n * Important! Set the environment to test\n */\nprocess.env.NODE_ENV = 'test';\n\nconst http = require('http');\nconst request = require('request');\nconst chai = require('chai');\nconst userFixture = require('../fixtures/user');\nconst should = chai.should();\n\nlet app;\nlet appServer;\nlet mongoose;\nlet User;\nlet Contact;\nlet config;\nlet baseUrl;\nlet apiUrl;\n\ndescribe('Contacts endpoints test', function() {\n\n  before((done) => {\n    // boot app\n    // start listening to requests\n  });\n\n  after(function(done) {\n    // close app\n    // cleanup database\n    // close connection to mongo\n  });\n\n  afterEach((done) => {\n    // remove contacts\n  });\n\n  describe('Save contact', () => {});\n\n  describe('Get contacts', () => {});\n\n  describe('Get contact', function() {});\n\n  describe('Update contact', function() {});\n\n  describe('Delete contact', function() {});\n});\n```", "```js\n  describe('Create contact', () => {\n    it('should create a new contact', (done) => {\n      request({\n        method: 'POST',\n        url: `${apiUrl}/contacts`,\n        form: {\n          'email': 'jane.doe@test.com',\n          'name': 'Jane Doe'\n        },\n        json:true\n      }, (err, res, body) => {\n        if (err) throw err;\n\n        res.statusCode.should.equal(201);\n        body.email.should.equal('jane.doe@test.com');\n        body.name.should.equal('Jane Doe');\n        done();\n      });\n    });\n  });\n```", "```js\n  describe('Get contacts', () => {\n    before((done) => {\n      Contact.collection.insert([\n        { email: 'jane.doe@test.com' },\n        { email: 'john.doe@test.com' }\n      ], (err, contacts) => {\n        if (err) throw err;\n\n        done();\n      });\n    });\n\n    it('should get a list of contacts', (done) => {\n      request({\n        method: 'GET',\n        url: `${apiUrl}/contacts`,\n        json:true\n      }, (err, res, body) => {\n        if (err) throw err;\n\n        res.statusCode.should.equal(200);\n        body.should.be.instanceof(Array);\n        body.length.should.equal(2);\n        body.should.contain.a.thing.with.property('email', 'jane.doe@test.com');\n        body.should.contain.a.thing.with.property('email', 'john.doe@test.com');\n        done();\n      });\n    });\n  });\n```", "```js\n  describe('Get contact', function() {\n    let _contact;\n\n    before((done) => {\n      Contact.create({\n        email: 'john.doe@test.com'\n      }, (err, contact) => {\n        if (err) throw err;\n\n        _contact = contact;\n        done();\n      });\n    });\n\n    it('should get a single contact by id', (done) => {\n      request({\n        method: 'GET',\n        url: `${apiUrl}/contacts/${_contact.id}`,\n        json:true\n      }, (err, res, body) => {\n        if (err) throw err;\n\n        res.statusCode.should.equal(200);\n        body.email.should.equal(_contact.email);\n        done();\n      });\n    });\n\n    it('should not get a contact if the id is not 24 characters', (done) => {\n      request({\n        method: 'GET',\n        url: `${apiUrl}/contacts/U5ZArj3hjzj3zusT8JnZbWFu`,\n        json:true\n      }, (err, res, body) => {\n        if (err) throw err;\n\n        res.statusCode.should.equal(404);\n        done();\n      });\n    });\n  });\n```", "```js\n  describe('Update contact', () => {\n    let _contact;\n\n    before((done) => {\n      Contact.create({\n        email: 'jane.doe@test.com'\n      }, (err, contact) => {\n        if (err) throw err;\n\n        _contact = contact;\n        done();\n      });\n    });\n\n    it('should update an existing contact', (done) => {\n      request({\n        method: 'PUT',\n        url: `${apiUrl}/contacts/${_contact.id}`,\n        form: {\n          'name': 'Jane Doe'\n        },\n        json:true\n      }, (err, res, body) => {\n        if (err) throw err;\n\n        res.statusCode.should.equal(200);\n        body.email.should.equal(_contact.email);\n        body.name.should.equal('Jane Doe');\n        done();\n      });\n    });\n  });\n```", "```js\n  describe('Delete contact', () => {\n    var _contact;\n\n    before((done) => {\n      Contact.create({\n        email: 'jane.doe@test.com'\n      }, (err, contact) => {\n        if (err) throw err;\n\n        _contact = contact;\n        done();\n      });\n    });\n\n    it('should update an existing contact', (done) => {\n      request({\n        method: 'DELETE',\n        url: `${apiUrl}/contacts/${_contact.id}`,\n        json:true\n      }, (err, res, body) => {\n        if (err) throw err;\n\n        res.statusCode.should.equal(204);\n        should.not.exist(body);\n        done();\n      });\n    });\n  });\n```", "```js\n$ mocha test/integration/contact_test.js\n\n```", "```js\n Contact\n Save contact\n 1) should save a new contact\n Get contacts\n 2) should get a list of contacts\n Get contact\n 3) should get a single contact by id\n √ should not get a contact if the id is not 24 characters\n Update contact\n 4) should update an existing contact\n Delete contact\n 5) should update an existing contact\n\n 1 passing (485ms)\n 5 failing\n 1) Contact Save contact should save a new contact:\n\n Uncaught AssertionError: expected 404 to equal 201\n + expected - actual\n\n +201\n -404\n\n```", "```js\n'use strict';\n\nconst _ = require('lodash');\nconst mongoose = require('mongoose');\nconst Contact = mongoose.model('Contact');\nconst ObjectId = mongoose.Types.ObjectId;\n\nmodule.exports.create = createContact;\nmodule.exports.findById = findContactById;\nmodule.exports.getOne = getOneContact;\nmodule.exports.getAll = getAllContacts;\nmodule.exports.update = updateContact;\nmodule.exports.remove = removeContact;\n\nfunction createContact(req, res, next) {\n  Contact.create(req.body, (err, contact) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.status(201).json(contact);\n  });\n}\n```", "```js\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\nconst contactController = require('../controllers/contact');\n\nrouter.post('/contacts', auth.ensured, contactController.create);\n\nmodule.exports = router;\n```", "```js\n$ mocha tests/integration/contact_test.js\n\n```", "```js\nContact\n Create contact\n √ should save a new contact\n Get contacts\n 1) should get a list of contacts\n Get contact\n 2) should get a single contact by id\n √ should not get a contact if the id is not 24 characters\n Update contact\n 3) should update an existing contact\n Delete contact\n 4) should update an existing contact\n\n 2 passing (502ms)\n 4 failing\n\n```", "```js\nrouter.param('contactId', contactController.findById);\n\nrouter.get('/contacts', auth.ensured, contactController.getAll);\nrouter.get('/contacts/:contactId', auth.ensured, contactController.getOne);\nrouter.put('/contacts/:contactId', auth.ensured, contactController.update);\nrouter.delete('/contacts/:contactId', auth.ensured, contactController.remove);\n```", "```js\napp.param('contactId', function(req, res, next, id) { \n  // do something with the id ...\n});\n```", "```js\nfunction findContactById(req, res, next, id) {\n  if (!ObjectId.isValid(id)) {\n    res.status(404).send({ message: 'Not found.'});\n  }\n\n  Contact.findById(id, (err, contact) => {\n    if (err) {\n      next(err);\n    } else if (contact) {\n      req.contact = contact;\n      next();\n    } else {\n      next(new Error('failed to find contact'));\n    }\n  });\n}\n```", "```js\nfunction getAllContacts(req, res, next) {\n  const limit = +req.query.limit || MAX_LIMIT;\n  const skip = +req.query.offset || 0;\n  const query = {};\n\n  if (limit > MAX_LIMIT) {\n    limit = MAX_LIMIT;\n  }\n\n  Contact\n  .find(query)\n  .skip(skip)\n  .limit(limit)\n  .sort({createdAt: 'desc'})\n  .exec((err, contacts) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.json(contacts);\n  });\n}\n```", "```js\nfunction getOneContact(req, res, next) {\n  if (!req.contact) {\n    return next(err);\n  }\n\n  res.json(req.contact);\n}\n```", "```js\nfunction updateContact(req, res, next) {\n  let contact = req.contact;\n  _.assign(contact, req.body);\n\n  contact.save((err, updatedContact) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.json(updatedContact);\n  });\n}\n```", "```js\nfunction removeContact(req, res, next) {\n  req.contact.remove((err) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.status(204).json();\n  });\n}\n```", "```js\n$ mocha tests/integration/contact.test.js\n\n```", "```js\n Contact\n\n Save contact\n √ should save a new contact\n Get contacts\n √ should get a list of contacts\n Get contact\n √ should get a single contact by id\n √ should not get a contact if the id is not 24 characters\n Update contact\n √ should update an existing contact\n Delete contact\n √ should update an existing contact\n\n 6 passing (576ms)\n\n```", "```js\n'use strict';\n\nconst chai = require('chai');\nconst should = chai.should();\nconst passwordHelper = require('../../app/helpers/password');\n\ndescribe('Password Helper', () => {\n});\n```", "```js\ndescribe('#hash() - password hashing', () => {\n});\ndescribe('#verify() - compare a password with a hash', () => {\n});\n```", "```js\n  describe('#hash() - password hashing', () => {\n    it('should return a hash and a salt from a plain string', (done) => {\n      passwordHelper.hash('P@ssw0rd!', (err, hash, salt) => {\n        if (err) throw err;\n\n        should.exist(hash);\n        should.exist(salt);\n        hash.should.be.a('string');\n        salt.should.be.a('string');\n        hash.should.not.equal('P@ssw0rd!');\n        done();\n      });\n    });\n\n    it('should return only a hash from a plain string if salt is given', (done) => {\n      passwordHelper.hash('P@ssw0rd!', 'secret salt', (err, hash, salt) => {\n        if (err) throw err;\n\n        should.exist(hash);\n        should.not.exist(salt);\n        hash.should.be.a('string');\n        hash.should.not.equal('P@ssw0rd!');\n        done();\n      });\n    });\n\n    it('should return the same hash if the password and salt ar the same', (done) => {\n      passwordHelper.hash('P@ssw0rd!', (err, hash, salt) => {\n        if (err) throw err;\n\n        passwordHelper.hash('P@ssw0rd!', salt, function(err, hashWithSalt) {\n          if (err) throw err;\n\n          should.exist(hash);\n          hash.should.be.a('string');\n          hash.should.not.equal('P@ssw0rd!');\n          hash.should.equal(hashWithSalt);\n          done();\n        });\n      });\n    });\n  });\n```", "```js\n  describe('#verify() - compare a password with a hash', () => {\n    it('should return true if the password matches the hash', (done) => {\n      passwordHelper.hash('P@ssw0rd!', (err, hash, salt) => {\n        if (err) throw err;\n\n        passwordHelper.verify('P@ssw0rd!', hash, salt, (err, result) => {\n          if (err) throw err;\n\n          should.exist(result);\n          result.should.be.a('boolean');\n          result.should.equal(true);\n          done();\n        });\n      });\n    });\n\n    it('should return false if the password does not matches the hash', (done) => {\n      passwordHelper.hash('P@ssw0rd!', (err, hash, salt) => {\n        if (err) throw err;\n\n        passwordHelper.verify('password!', hash, salt, (err, result) => {\n          if (err) throw err;\n\n          should.exist(result);\n          result.should.be.a('boolean');\n          result.should.equal(false);\n          done();\n        });\n      });\n    });\n  });\n```", "```js\n'use strict';\n\nconst crypto = require('crypto');\nconst len = 512;\nconst iterations = 18000;\nconst digest = 'sha256';\n\nmodule.exports.hash = hashPassword;\nmodule.exports.verify = verify;\n\nfunction hashPassword(password, salt, callback) {\n  if (3 === arguments.length) {\n    crypto.pbkdf2(password, salt, iterations, len, digest, (err, derivedKey) => {\n      if (err) {\n        return callback(err);\n      }\n\n      return callback(null, derivedKey.toString('base64'));\n    });\n  } else {\n    callback = salt;\n    crypto.randomBytes(len, (err, salt) => {\n      if (err) {\n        return callback(err);\n      }\n\n      salt = salt.toString('base64');\n      crypto.pbkdf2(password, salt, iterations, len, digest, (err, derivedKey) => {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, derivedKey.toString('base64'), salt);\n      });\n    });\n  }\n}\n```", "```js\n$ mocha tests/unit/password.test.js\n\n```", "```js\n Password Helper\n #hash() - password hashing\n √ should return a hash and a salt from a plain string (269ms)\n √ should return only a hash from a plain string if salt is given (274ms)\n √ should return the same hash if the password and salt are the same (538ms)\n\n3 passing (2s)\n\n```", "```js\nfunction verify(password, hash, salt, callback) {\n  hashPassword(password, salt, (err, hashedPassword) => {\n    if (err) {\n      return callback(err);\n    }\n\n    if (hashedPassword === hash) {\n      callback(null, true);\n    } else {\n      callback(null, false);\n    }\n  });\n}\n```", "```js\n'use strict';\n\nconst mongoose = require('mongoose');\nconst passwordHelper = require('../helpers/password');\nconst Schema = mongoose.Schema;\nconst _ = require('lodash');\n\nvar UserSchema = new Schema({\n  email:  {\n    type: String,\n    required: true,\n    unique: true\n  },\n  name: {\n    type: String\n  },\n  password: {\n    type: String,\n    required: true,\n    select: false\n  },\n  passwordSalt: {\n    type: String,\n    required: true,\n    select: false\n  },\n  active: {\n    type: Boolean,\n    default: true\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n```", "```js\n  it('should authenticate a user with valid credentials', done => {\n    User.authenticate(newUserData.email, newUserData.password, (err, user) => {\n      if (err) throw err;\n\n      should.exist(user);\n      should.not.exist(user.password);\n      should.not.exist(user.passwordSalt);\n      user.email.should.equal(newUserData.email);\n      done();\n    });\n  });\n\n  it('should not authenticate user with invalid credentials', done => {\n    User.authenticate(newUserData.email, 'notuserpassowrd', (err, user) => {\n      if (err) throw err;\n\n      should.not.exist(user);\n      done();\n    });\n  });\n```", "```js\nUserSchema.statics.authenticate = authenticateUser;\n\nfunction authenticateUser(email, password, callback) {\n  this\n  .findOne({ email: email })\n  .select('+password +passwordSalt')\n  .exec((err, user) => {\n    if (err) {\n      return callback(err, null);\n    }\n\n    // no user found just return the empty user\n    if (!user) {\n      return callback(err, user);\n    }\n\n    // verify the password with the existing hash from the user\n    passwordHelper.verify(\n      password,\n      user.password,\n      user.passwordSalt,\n      (err, result) => {\n        if (err) {\n          return callback(err, null);\n        }\n\n        // if password does not match don't return user\n        if (result === false) {\n          return callback(err, null);\n        }\n\n        // remove password and salt from the result\n        user.password = undefined;\n        user.passwordSalt = undefined;\n        // return user if everything is ok\n        callback(err, user);\n      }\n    );\n  });\n}\n```", "```js\n  describe('Sign in user', () => {\n    it('should sign in a user with valid credentials', (done) => {\n      request({\n        method: 'POST',\n        url: baseUrl + '/auth/signin',\n        form: {\n          'email': userFixture.email,\n          'password': 'P@ssw0rd!'\n        },\n        json:true\n      }, (err, res, body) => {\n        if (err) throw err;\n\n        res.statusCode.should.equal(200);\n        body.email.should.equal(userFixture.email);\n        should.not.exist(body.password);\n        should.not.exist(body.passwordSalt);\n        done();\n      });\n    });\n\n    it('should not sign in a user with invalid credentials', (done) => {\n      request({\n        method: 'POST',\n        url: baseUrl + '/auth/signin',\n        form: {\n          'email': userFixture.email,\n          'password': 'incorrectpassword'\n        },\n        json:true\n      }, (err, res, body) => {\n        if (err) throw err;\n\n        res.statusCode.should.equal(400);\n        body.message.should.equal('Invalid email or password.');\n        done();\n      });\n    });\n  });\n```", "```js\n'use strict';\n\nconst passport = require('passport');\nconst mongoose = require('mongoose');\nconst User = mongoose.model('User');\n\nmodule.exports.init = initPassport;\n\nfunction initPassport(app) {\n  passport.serializeUser((user, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser((id, done) => {\n    User.findById(id, done);\n  });\n\n  // load strategies\n  require('./strategies/local').init();\n}\n```", "```js\n'use strict';\n\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\nconst User = require('mongoose').model('User');\n\nmodule.exports.init = initLocalStrategy;\n\nfunction initLocalStrategy() {\n  passport.use('local', new LocalStrategy({\n      usernameField: 'email',\n      passwordField: 'password'\n    },\n    (email, password, done) => {\n      User.authenticate(email, password, (err, user) => {\n        if (err) {\n          return done(err);\n        }\n\n        if (!user) {\n          return done(null, false, { message: 'Invalid email or password.' });\n        }\n\n        return done(null, user);\n      });\n    }\n  ));\n}\n```", "```js\n'use strict';\n\nconst passport = require('passport');\nconst mongoose = require('mongoose');\nconst User = mongoose.model('User');\n\nmodule.exports.signin = signin;\n\nfunction signin(req, res, next) {\n  passport.authenticate('local', (err, user, info) => {\n    if (err) {\n      return next(err);\n    }\n\n    if (!user) {\n      return res.status(400).send(info);\n    }\n\n    req.logIn(user, (err) => {\n      if (err) {\n        return next(err);\n      }\n\n      res.status(200).json(user);\n    });\n  })(req, res, next);\n}\n```", "```js\n'use strict';\n\nvar express = require('express');\nvar router = express.Router();\nvar authCtrl = require('../controllers/authentication');\n\nrouter.post('/signin', authCtrl.signin);\nrouter.post('/register', authCtrl.register);\n\nmodule.exports = router;\n```", "```js\n'use strict';\n\nmodule.exports.ensured = ensureAuthenticated;\n\nfunction ensureAuthenticated(req, res, next) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n\n  res.status(401).json({\n    message: 'Please authenticate.'\n  });\n}\n```", "```js\n{\n  \"private\": true,\n  \"name\": \"mean-blueprints-contact-manager-client\",\n  \"dependencies\": {\n    \"systemjs\": \"^0.19.25\",\n    \"es6-shim\": \"^0.35.0\",\n    \"es6-promise\": \"^3.0.2\",\n    \"rxjs\": \"^5.0.0-beta.2\",\n    \"reflect-metadata\": \"^0.1.2\",\n    \"zone.js\": \"^0.6.6\",\n    \"angular2\": \"^2.0.0-beta.14\"\n  },\n  \"devDependencies\": {\n    \"typings\": \"^0.7.12\",\n    \"typescript\": \"^1.8.9\"\n  }\n}\n```", "```js\n$ npm install\n\n```", "```js\n$ tsc -w\n\n```", "```js\nimport { Injectable } from 'angular2/core';\nimport { Http, Response, Headers } from 'angular2/http';\nimport { contentHeaders } from '../common/headers';\n\n@Injectable()\nexport class AuthService {\n  private _http: Http;\n\n  constructor(http: Http) {\n    this._http = http;\n  }\n}\n```", "```js\n  public signin(user: any) {\n    let body = this._serialize(user);\n\n    return this._http\n    .post('/auth/signin', body, { headers: contentHeaders })\n    .map((res: Response) => res.json());\n  }\n```", "```js\n  public register(user: any) {\n    let body = this._serialize(user);\n\n    return this._http\n    .post('/auth/register', body, { headers: contentHeaders })\n    .map((res: Response) => res.json());\n  }\n\n  private _serialize(data) {\n    return JSON.stringify(data);\n  }\n```", "```js\nimport { Component } from 'angular2/core';\nimport { Router, RouterLink } from 'angular2/router';\nimport { AuthService } from './auth.service';\n\nexport class Signin {\n  private _authService: AuthService;\n  private _router: Router;\n\n  constructor(\n    authService: AuthService,\n    router: Router\n  ) {\n    this._authService = authService;\n    this._router = router;\n  }\n\n  signin(event, email, password) {\n    event.preventDefault();\n\n    let data = { email, password };\n\n    this._authService\n    .signin(data)\n    .subscribe((user) => {\n      this._router.navigateByUrl('/');\n    }, err => console.error(err));\n  }\n}\n```", "```js\n@Component({\n    selector: 'signin',\n    directives: [\n      RouterLink\n    ],\n    template: `\n      <div class=\"login jumbotron center-block\">\n        <h1>Login</h1>\n        <form role=\"form\" (submit)=\"signin($event, email.value, password.value)\">\n          <div class=\"form-group\">\n            <label for=\"email\">E-mail</label>\n            <input type=\"text\" #email class=\"form-control\" id=\"email\" placeholder=\"enter your e-mail\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\">Password</label>\n            <input type=\"password\" #password class=\"form-control\" id=\"password\" placeholder=\"now your password\">\n          </div>\n          <button type=\"submit\" class=\"button\">Submit</button>\n          <a href=\"#\" [routerLink]=\"['Register']\">Click here to register</a>\n        </form>\n      </div>\n    `\n})\n```", "```js\nimport { Injectable } from 'angular2/core';\nimport { Http, Response, Headers, BaseRequestOptions, Request, RequestOptions, RequestOptionsArgs, RequestMethod } from 'angular2/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/Subject/BehaviorSubject';\n\n@Injectable()\nexport class AuthHttp {\n  public unauthorized: Subject<Response>;\n  private _http: Http;\n\n  constructor(http: Http) {\n    this._http = http;\n    this.unauthorized = new BehaviorSubject<Response>(null);\n  }\n}\n```", "```js\n  private request(requestArgs: RequestOptionsArgs, additionalArgs?: RequestOptionsArgs) {\n    let opts = new RequestOptions(requestArgs);\n\n    if (additionalArgs) {\n      opts = opts.merge(additionalArgs);\n    }\n\n    let req:Request = new Request(opts);\n\n    return this._http.request(req).catch((err: any) => {\n      if (err.status === 401) {\n        this.unauthorized.next(err);\n      }\n\n      return Observable.throw(err);\n    });\n  }\n```", "```js\n  public get(url: string, opts?: RequestOptionsArgs) {\n    return this.request({ url: url, method: RequestMethod.Get}, opts);\n  }\n\n  public post(url: string, body?: string, opts?: RequestOptionsArgs) {\n    return this.request({ url: url, method: RequestMethod.Post, body: body}, opts);\n  }\n\n  public put(url: string, body?: string, opts?: RequestOptionsArgs) {\n    return this.request({ url: url, method: RequestMethod.Put, body: body}, opts);\n  }\n\n  // rest of the HTTP methods ...\n```", "```js\nimport { Injectable } from 'angular2/core';\nimport { Response, Headers } from 'angular2/http';\nimport { Observable } from 'rxjs/Observable';\nimport { contentHeaders } from '../common/headers';\nimport { AuthHttp } from '../auth/auth-http';\nimport { Contact } from '../contact';\n\ntype ObservableContacts = Observable<Array<Contact>>;\ntype ObservableContact = Observable<Contact>;\n\nconst DEFAULT_URL = '/api/contacts';\n\n@Injectable()\nexport class ContactService {\n  public contact: ObservableContact;\n  public contacts: ObservableContacts;\n\n  private _authHttp: AuthHttp;\n  private _dataStore: { contacts: Array<Contact>, contact: Contact };\n  private _contactsObserver: any;\n  private _contactObserver: any;\n  private _url: string;\n\n  constructor(authHttp: AuthHttp) {\n    this._authHttp = authHttp;\n    this._url = DEFAULT_URL;\n    this._dataStore = { contacts: [], contact: new Contact() };\n    this.contacts = new Observable(\n      observer => this._contactsObserver = observer\n    ).share();\n    this.contact = new Observable(\n      observer => this._contactObserver = observer\n    ).share();\n  }\n}\n```", "```js\n  public getAll() {\n    return this._authHttp\n    .get(`${this._url}`, { headers: contentHeaders} )\n    .map((res: Response) => res.json())\n    .map(data => {\n      return data.map(contact => {\n        return new Contact(\n          contact._id,\n          contact.email,\n          contact.name,\n          contact.city,\n          contact.phoneNumber,\n          contact.company,\n          contact.createdAt\n        )\n      });\n    })\n    .subscribe((contacts: Array<Contact>) => {\n      this._dataStore.contacts = contacts;\n      this._contactsObserver.next(this._dataStore.contacts);\n    }, err => console.error(err));\n  }\n```", "```js\n  public update(contact: Contact) {\n    return this._authHttp\n    .put(\n      `${this._url}/${contact._id}`,\n      this._serialize(contact),\n      { headers: contentHeaders}\n    )\n    .map((res: Response) => res.json())\n    .map(data => {\n      return new Contact(\n        data._id,\n        data.email,\n        data.name,\n        data.city,\n        data.phoneNumber,\n        contact.company,\n        data.createdAt\n      )\n    })\n    .subscribe((contact: Contact) => {\n      // update the current list of contacts\n      this._dataStore.contacts.map((c, i) => {\n        if (c._id === contact._id) {\n          this._dataStore.contacts[i] = contact;\n        }\n      });\n      // update the current contact\n      this._dataStore.contact = contact;\n      this._contactObserver.next(this._dataStore.contact);\n      this._contactsObserver.next(this._dataStore.contacts);\n    }, err => console.error(err));\n  }\n```", "```js\n  public remove(contactId: string) {\n    this._authHttp\n    .delete(`${this._url}/${contactId}`)\n    .subscribe(() => {\n      this._dataStore.contacts.map((c, i) => {\n        if (c._id === contactId) {\n          this._dataStore.contacts.splice(i, 1);\n        }\n      });\n      this._contactsObserver.next(this._dataStore.contacts);\n    }, err => console.error(err));\n  }\n```", "```js\nimport { Component } from 'angular2/core';\nimport { RouteConfig, RouterOutlet } from 'angular2/router';\nimport { ContactListComponent } from './contact-list.component';\nimport { ContactCreateComponent } from './contact-create.component';\nimport { ContactEditComponent } from './contact-edit.component';\n\n@RouteConfig([\n  { path: '/', as: 'ContactList', component: ContactListComponent, useAsDefault: true },\n  { path: '/:id', as: 'ContactEdit', component: ContactEditComponent },\n  { path: '/create', as: 'ContactCreate', component: ContactCreateComponent }\n])\n@Component({\n    selector: 'contact',\n    directives: [\n      ContactListComponent,\n      RouterOutlet\n    ],\n    template: `\n      <router-outlet></router-outlet>\n    `\n})\nexport class ContactComponent {\n  constructor() {}\n}\n```", "```js\nimport { Component, OnInit } from 'angular2/core';\nimport { RouterLink } from 'angular2/router';\nimport { ContactService } from '../contact.service';\nimport { Contact } from '../contact';\n\n@Component({\n    selector: 'contact-list',\n    directives: [RouterLink],\n    template: `\n      <div class=\"row\">\n        <h4>\n          Total contacts: <span class=\"muted\">({{contacts.length}})</span>\n          <a href=\"#\" [routerLink]=\"['ContactCreate']\">add new</a>\n        </h4>\n        <div class=\"contact-list\">\n          <div class=\"card-item col col-25 contact-item\"\n            *ngFor=\"#contact of contacts\">\n            <img src=\"img/{{ contact.image }}\" />\n            <h3>\n              <a href=\"#\" [routerLink]=\"['ContactEdit', { id: contact._id }]\">\n                {{ contact.name }}\n              </a>\n            </h3>\n            <p>\n              <span>{{ contact.city }}</span>\n              <span>·</span>\n              <span>{{ contact.company }}</span>\n            </p>\n            <p><span>{{ contact.email }}</span></p>\n            <p><span>{{ contact.phoneNumber }}</span></p>\n          </div>\n        </div>\n      </div>\n    `\n})\nexport class ContactListComponent implements OnInit {\n  public contacts: Array<Contact> = [];\n  private _contactService: ContactService;\n\n  constructor(contactService: ContactService) {\n    this._contactService = contactService;\n  }\n\n  ngOnInit() {\n    this._contactService.contacts.subscribe(contacts => {\n      this.contacts = contacts;\n    });\n    this._contactService.getAll();\n  }\n}\n```", "```js\nimport { Component, OnInit } from 'angular2/core';\nimport { Router, RouterLink } from 'angular2/router';\nimport { ContactService } from '../contact.service';\nimport { Contact } from '../contact';\n\n@Component({\n    selector: 'contact-create,\n    directives: [RouterLink],\n    templateUrl: 'src/contact/components/contact-form.html'\n})\nexport class ContactCreateComponent implements OnInit {\n  public contact: Contact;\n  private _router: Router;\n  private _contactService: ContactService;\n\n  constructor(\n    contactService: ContactService,\n    router: Router\n  ) {\n    this._contactService = contactService;\n    this._router = router;\n  }\n\n  ngOnInit() {\n    this.contact = new Contact();\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n\n    this._contactService\n    .create(this.contact)\n    .subscribe((contact) => {\n      this._router.navigate(['ContactList']);\n    }, err => console.error(err));\n  }\n}\n```", "```js\n<div class=\"row contact-form-wrapper\">\n  <a href=\"#\" [routerLink]=\"['ContactList']\">&lt; back to contacts</a>\n  <h2>Add new contact</h2>\n  <form role=\"form\"\n    (submit)=\"onSubmit($event)\">\n\n    <div class=\"form-group\">\n      <label for=\"name\">Full name</label>\n      <input type=\"text\" [(ngModel)]=\"contact.name\"\n        class=\"form-control\" id=\"name\" placeholder=\"Jane Doe\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"email\">E-mail</label>\n      <input type=\"text\" [(ngModel)]=\"contact.email\"\n        class=\"form-control\" id=\"email\" placeholder=\"jane.doe@example.com\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"city\">City</label>\n      <input type=\"text\"\n        [(ngModel)]=\"contact.city\"\n        class=\"form-control\" id=\"city\" placeholder=\"a nice place ...\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"company\">Company</label>\n      <input type=\"text\"\n        [(ngModel)]=\"contact.company\"\n        class=\"form-control\" id=\"company\" placeholder=\"working at ...\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"phoneNumber\">Phone</label>\n      <input type=\"text\"\n        [(ngModel)]=\"contact.phoneNumber\"\n        class=\"form-control\" id=\"phoneNumber\" placeholder=\"mobile or landline\">\n    </div>\n\n    <button type=\"submit\" class=\"button\">Submit</button>\n  </form>\n</div>\n```", "```js\nimport { Component, OnInit } from 'angular2/core';\nimport { RouteParams, RouterLink } from 'angular2/router';\nimport { ContactService } from '../contact.service';\nimport { Contact } from '../contact';\n\n@Component({\n    selector: 'contact-edit',\n    directives: [RouterLink],\n    templateUrl: 'src/contact/components/contact-form.html'\n})\nexport class ContactEditComponent implements OnInit {\n  public contact: Contact;\n  private _contactService: ContactService;\n  private _routeParams: RouteParams;\n\n  constructor(\n    contactService: ContactService,\n    routerParams: RouteParams\n  ) {\n    this._contactService = contactService;\n    this._routeParams = routerParams;\n  }\n\n  ngOnInit() {\n    const id: string = this._routeParams.get('id');\n    this.contact = new Contact();\n    this._contactService\n    .contact.subscribe((contact) => {\n      this.contact = contact;\n    });\n    this._contactService.getOne(id);\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n\n    this._contactService\n    .update(this.contact)\n    .subscribe((contact) => {\n      this.contact = contact;\n    }, err => console.error(err));\n  }\n}\n```", "```js\nimport { Component } from 'angular2/core';\nimport { RouteConfig, RouterOutlet } from 'angular2/router';\nimport { Router } from 'angular2/router';\nimport { AuthHttp } from './auth/auth-http';\nimport { Signin } from './auth/signin';\nimport { Register } from './auth/register';\nimport { ContactComponent } from './contact/components/contact.component';\n\n@RouteConfig([\n  { path: '/signin', as: 'Signin', component: Signin },\n  { path: '/register', as: 'Register', component: Register },\n  { path: '/contacts/...', as: 'Contacts', component: ContactComponent, useAsDefault: true }\n])\n@Component({\n    selector: 'cm-app',\n    directives: [\n      Signin,\n      Register,\n      ContactComponent,\n      RouterOutlet\n    ],\n    template: `\n      <div class=\"app-wrapper col card whiteframe-z2\">\n        <div class=\"row\">\n          <h3>Contact manager</h3>\n        </div>\n        <router-outlet></router-outlet>\n      </div>\n    `\n})\nexport class AppComponent {\n  private _authHttp: AuthHttp;\n  private _router: Router;\n\n  constructor(authHttp: AuthHttp, router: Router) {\n    this._authHttp = authHttp;\n    this._router = router;\n    this._authHttp.unauthorized.subscribe((res) => {\n      if (res) {\n        this._router.navigate(['./Signin']);\n      }\n    });\n  }\n}\n```", "```js\nimport { bootstrap } from 'angular2/platform/browser';\nimport { provide } from 'angular2/core';\nimport { HTTP_PROVIDERS } from 'angular2/http';\nimport { ROUTER_PROVIDERS, LocationStrategy, HashLocationStrategy } from 'angular2/router';\nimport { AuthHttp } from './auth/auth-http';\nimport { AuthService } from './auth/auth.service';\nimport { ContactService } from './contact/contact.service';\nimport { AppComponent } from './app.component';\n\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/share';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\n\nbootstrap(AppComponent, [\n  ROUTER_PROVIDERS,\n  HTTP_PROVIDERS,\n  AuthService,\n  AuthHttp,\n  ContactService,\n  provide(LocationStrategy, {useClass: HashLocationStrategy})\n]);\n```", "```js\nexport class Contact {\n  _id: string;\n  email: string;\n  name: string;\n  city: string;\n  phoneNumber: string;\n  company: string;\n  image: string;\n  createdAt: string;\n\n  constructor(\n    _id?: string,\n    email?: string,\n    name?: string,\n    city?: string,\n    phoneNumber?: string,\n    company?: string,\n    createdAt?: string\n  ) {\n    this._id = _id;\n    this.email = email;\n    this.name = name;\n    this.city = city;\n    this.phoneNumber = phoneNumber;\n    this.company = company;\n    this.image = 'http://placehold.it/171x100';\n    this.createdAt = createdAt;\n  }\n}\n```"]