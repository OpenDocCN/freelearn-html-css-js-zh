["```js\n    $ npm install --global yo\n\n    ```", "```js\n    $ npm install --global generator-gruntplugin\n\n    ```", "```js\n    $ mkdir grunt-myplugin && cd grunt-myplugin\n\n    ```", "```js\n    $ yo gruntplugin\n\n    ```", "```js\n    ? Plugin Name: grunt-myplugin\n    ? Description: The best Grunt plugin ever.\n    ? Version: 0.0.1\n    ? Project git repository: git://github.com/me/grunt-myplugin\n    ? Project homepage: http://github.com/me/grunt-myplugin\n    ? License: MIT\n    ? Author name: Me\n    ? Author email: me@example.com\n    ? Author url: http://me.example.com/\n    ? What versions of node does it run on? >= 0.8.0\n    ? What version of grunt does it need? ~0.4.2\n\n    ```", "```js\n     create tasks/myplugin.js\n     create test/expected/custom_options\n     create test/expected/default_options\n     create test/fixtures/123\n     create test/fixtures/testing\n     create test/myplugin_test.js\n     create .jshintrc\n     create .gitignore\n     create .editorconfig\n     create README.md\n     create Gruntfile.js\n\n    ```", "```js\n    $ npm install\n\n    ```", "```js\n    $ npm test\n\n    ```", "```js\n    > grunt-myplugin@0.0.1 test /home/me/projects/grunt-myplugin\n    > grunt test\n\n    Running \"clean:tests\" (clean) task\n\n    Running \"myplugin:default_options\" (myplugin) task\n    File \"tmp/default_options\" created.\n\n    Running \"myplugin:custom_options\" (myplugin) task\n    File \"tmp/custom_options\" created.\n\n    Running \"nodeunit:tests\" (nodeunit) task\n    Testing myplugin_test.js..OK\n    >> 2 assertions passed (18ms)\n\n    ```", "```js\n    module.exports = function (grunt) {\n      grunt.registerMultiTask(\n        'timestamp',\n        'Perpends a files contents with a timestamp.',\n        function () {\n        }\n      );\n    };\n    ```", "```js\n    var options = this.options({\n      datetime: new Date(0),\n      location: 'London'\n    });\n    ```", "```js\n    var comment = '';\n    comment += '// ' + options.datetime.toGMTString();\n    comment += ' at ' + options.location + '\\n';\n    ```", "```js\n    this.files.forEach(function(file) {\n      var src = file.src.map(function (path) {\n        return grunt.file.read(path);\n      }).join('');\n      grunt.file.write(file.dest, comment + src);\n    });\n    ```", "```js\n    timestamp: {\n      default_options: {\n        options: {}\n      },\n      custom_options: {\n        options: {\n          datetime: new Date(Date.UTC(2014, 0, 1)),\n          location: 'New York'\n        }\n      }\n    }\n    ```", "```js\n    default_options: {\n      options: {},\n      files: {\n     'tmp/timestamp/default_options': [\n     'test/fixtures/testing',\n     'test/fixtures/123'\n     ]\n     }\n    },\n    custom_options: {\n      options: {\n        datetime: new Date(Date.UTC(2014, 0, 1)),\n        location: 'New York'\n      },\n      files: {\n     'tmp/timestamp/custom_options': [\n     'test/fixtures/testing',\n     'test/fixtures/123'\n     ]\n     }\n    }\n    ```", "```js\n    Running \"timestamp:default_options\" (timestamp) task\n    Running \"timestamp:custom_options\" (timestamp) task\n    ```", "```js\n    // Wed Jan 01 2014 00:00:00 GMT (SAST) at New York\n    Testing1 2 3\n    ```", "```js\n    // Thu, 01 Jan 1970 00:00:00 GMT at London\n    Testing1 2 3\n    ```", "```js\n    // Wed, 01 Jan 2014 00:00:00 GMT at New York\n    Testing1 2 3\n    ```", "```js\n    var grunt = require('grunt');\n\n    module.exports.timestamp = {\n    };\n    ```", "```js\n    module.exports.timestamp = {\n      default_options: function (test) {\n     test.expect(1);\n     var actual = grunt.file.read(\n     'tmp/timestamp/default_options'\n     );\n     var expected = grunt.file.read(\n     'test/expected/timestamp/default_options'\n     );\n     test.equal(\n     actual,\n     expected,\n     'should work without specifying options.'\n     );\n     test.done();\n     },\n     custom_options: function (test) {\n     test.expect(1);\n     var actual = grunt.file.read(\n     'tmp/timestamp/custom_options'\n     );\n     var expected = grunt.file.read(\n     'test/expected/timestamp/custom_options'\n     );\n     test.equal(\n     actual,\n     expected,\n     'should work with custom options.'\n     );\n     test.done();\n     }\n    };\n    ```", "```js\n    grunt.registerTask('test', [\n      'clean',\n      'myplugin',\n      'timestamp',\n      'nodeunit'\n    ]);\n    ```", "```js\n    Running \"clean:tests\" (clean) task\n    Cleaning tmp...OK\n\n    Running \"myplugin:default_options\" (myplugin) task\n    File \"tmp/default_options\" created.\n\n    Running \"myplugin:custom_options\" (myplugin) task\n    File \"tmp/custom_options\" created.\n\n    Running \"timestamp:default_options\" (timestamp) task\n\n    Running \"timestamp:custom_options\" (timestamp) task\n\n    Running \"nodeunit:tests\" (nodeunit) task\n    Testing myplugin_test.js..OK\n    Testing timestamp_test.js..OK\n    >> 4 assertions passed (73ms)\n\n    ```", "```js\n    > Our very first plugin with our very first \"timestamp\" task.\n    ```", "```js\n    ## The \"timestamp\" task\n    ```", "```js\n    ### Overview\n    The `timestamp` task can be used to concatenate files and prepend the result with the a comment containing the provided time and location.\n    ```", "```js\n    ### Options\n\n    #### options.datetime\n    Type: 'Date'\n    Default value: Minimum Unix time value\n\n    A Date object that contains the date and time you'd like to print out in the prepended comment.\n\n    #### options.location\n    Type: 'String'\n    Default: 'London'\n\n    A string value that contains the location that you'd like to print out in the prepended comment.\n    ```", "```js\n    ### Usage Examples\n\n    #### Default Options\n    In this example we make use of all the default values of the options. This should concatenate the provided files and prepend the result with a comment containing the minimum Unix time, along with the location as 'Earth'.\n\n    ```", "```js\n\n    #### Custom Options\n    In this example we set all possible options. The `datetime` options is set to the first day in 2014 and the location is set to 'New York'.\n\n    ```", "```js\n\n    This should produce a comment of the following form:\n    ```", "```js\n    ```", "```js\n    + grunt-myplugin@0.0.1\n\n    ```", "```js\n    npm WARN using --force I sure hope you know what you are doing.\n    - grunt-myplugin@0.0.1\n\n    ```"]