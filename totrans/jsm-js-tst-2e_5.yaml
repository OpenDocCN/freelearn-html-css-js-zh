- en: Chapter 5. Jasmine Spies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A test double is a pattern on unit testing. It replaces a test dependent component
    with an equivalent implementation that is specific to the test scenario. These
    implementations are called **doubles** because although their behavior might be
    specific to the test, they act like, and have the same API as, the object they
    impersonate.
  prefs: []
  type: TYPE_NORMAL
- en: Spies are Jasmine's solution to test doubles. At its core, a Jasmine **spy**
    is a special type of function that records all interactions that happen with it.
    Therefore, they are very useful when a returned value or change in an object's
    state can't be used to determine whether a test expectation was a success. In
    other words, Jasmine spies are perfect when a test success can only be determined
    by **behavior checking**.
  prefs: []
  type: TYPE_NORMAL
- en: The "bare" spy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To understand the concept of behavior checking, let''s revisit an example presented
    in [Chapter 3](ch03.html "Chapter 3. Testing Frontend Code"), *Testing Frontend
    Code*, and test the observable behavior of the `NewInvestmentView` test suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: During the spec setup, it creates a new Jasmine spy using the `jasmine.createSpy`
    function while passing a name for it (`callback`). A Jasmine spy is a special
    kind of function that tracks calls and arguments made to it.
  prefs: []
  type: TYPE_NORMAL
- en: Then, it sets this spy as an observer of the View's create event using the `onCreate`
    function, and finally it invokes the `create` function to create a new investment.
  prefs: []
  type: TYPE_NORMAL
- en: Later on, at the expectations, the spec uses the `toHaveBeenCalled` and `toHaveBeenCalledWith`
    matchers to check whether the `callbackSpy` was called and with the right parameters
    (`investment`), thereby making a behavior check.
  prefs: []
  type: TYPE_NORMAL
- en: Spying on an object's functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A spy, by itself is very useful, but its true power comes with changing an object's
    original implementation using a counterpart spy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example, which is aimed at validating that when the
    form is submitted, the `create` function of `view` has to be called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, we make use of the global Jasmine function `spyOn` to change the `create`
    function of `view` with a spy.
  prefs: []
  type: TYPE_NORMAL
- en: Then, later in the spec, we use the `toHaveBeenCalled` Jasmine matcher to validate
    that the `view.create` function was called.
  prefs: []
  type: TYPE_NORMAL
- en: After the spec is done, Jasmine restores the object's original behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Testing DOM events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DOM events are used all the time while coding frontend applications, and sometimes
    we intend to write a spec that checks whether an event is being triggered.
  prefs: []
  type: TYPE_NORMAL
- en: An event could be something like a form submission or an input that has changed,
    so how can we use spies to do that?
  prefs: []
  type: TYPE_NORMAL
- en: 'We can write a new acceptance criterion to the `NewInvestmentView` test suite
    to check that its form is being submitted when we click on the add button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To write this spec, we use the `spyOnEvent` global function provided by the
    Jasmine jQuery plugin.
  prefs: []
  type: TYPE_NORMAL
- en: It works by accepting `view.20.18`, which is a DOM element, and the `submit`
    event we want to spy on. Then, later on, we use the jasmine jQuery matcher `toHaveBeenTriggeredOn`
    to check whether the event was triggered on the element.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were presented with the concept of test doubles and how
    you can use spies to perform behavior checking on your specs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at how we can use fakes and stubs to
    replace real dependencies of our specs and speed up their execution.
  prefs: []
  type: TYPE_NORMAL
