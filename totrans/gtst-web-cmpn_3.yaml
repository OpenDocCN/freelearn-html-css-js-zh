- en: Universal Web Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we talked about the various life cycle callback methods
    of Web Components. In this chapter, we will look into the styling of Web Components,
    with a lot of examples. Styling plays a vital role in the look and feel of a Web
    Component. We will also be taking a look at what accessibility does to our Web
    Components and understand the meaning of the Gold Standard Checklist and how this
    Gold Standard Checklist makes a Web Component extremely usable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Styling Web Components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessibility for Web Components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gold Standard Checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling Web Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we looked at custom elements that use a shadow DOM
    for encapsulation and custom elements that do not use a shadow DOM. We will be
    styling our Web Component for both of these types.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say, we have a Web Component called `<company-header>`. For the sake of
    simplicity, this header component needs to have an icon on the left-hand side
    with a circular border and this icon needs to be a link; the name of the page
    should be right next to the icon, and then there should be two other links on
    the extreme right-hand side, say home and about us.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0d805b8-26db-4d38-9caf-b4a4d2193a64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is how it should be used inside the `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you are being a little bit adventurous, I would like you to stop reading
    for a while and write the completed code for this component based on the knowledge
    you have achieved in the previous chapters. Once you have done so, feel free to
    continue reading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, based on the information provided as a requirement for the component,
    our `index.html` file would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have done nothing different other than the way we are calling
    the `<company-header>` component. Let''s take a look at the `CompanyHeader.js`
    file. Note that we are going to use the Web Component without a shadow DOM in
    this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `constructor()` interface is responsible for making sure that `icon` is
    set to a default file and the component renders properly without any issue. We
    also learned in the previous section about `attributeChangedCallback()`, so `get
    observedAttributes()` is simply creating a list of attributes to listen to for
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore `attributeChangedCallback()` is making sure that the changed attribute
    values are being used properly. The `getTemplate()` method simply returns an ES6
    template string, which can be set as `innerHTML` of the Web Component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that our Web Component is working fine, let''s add the style for this component.
    Inside the `index.html` file, we can create a `<style>` tag and add our styles
    inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This way, we can have the style attached directly to the `<company-header>`
    element.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, now we may have a problem. There might be some other `div` with the
    class name `.heading`, and this CSS might bleed out to that other class. You may
    argue that we should namespace our CSS by adding `company-header` in front of
    the CSS used, making it look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This may fix the problem a little bit, but does not fix it completely. It still
    doesn't fix the part where the `.heading` class CSS bleeds out to the `.heading`
    class in `company-header` and then gets overwritten by the `company-header` namespaced
    heading class. Hence, comes our shadow DOM specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us try to write the Web Component with a shadow DOM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, most of the code is the same, other than the part where we create
    a shadow root and add our HTML inside this shadow root.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the code now, you will see that our styles do not apply inside the
    Web Component. So, the CSS is not bleeding anymore. But, in order to get back
    our CSS, we will need to add it as the part of the template, making it look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, our component looks beautiful with all the CSS, but what is `:host` ?
  prefs: []
  type: TYPE_NORMAL
- en: While we can add CSS inside the shadow root with the help of selectors, we do
    not have a selector associated with the shadow root itself, which acts as a container
    for the HTML. So, we can have CSS attached to this shadow root with the help of
    the `:host` selector.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try another example with styling. Let''s say we have a requirement to
    design a Web Component that lets you log in with the help of a login form. It
    needs to have a bluish background, and when the login is successful, it should
    turn this background to a greenish shade. Also, for the sake of simplicity, the
    username-password check will simply perform a `Math.random()` operation and, if
    this value is greater than *0.5*, then the login is successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8ff7e8f-0c31-40bb-9093-77fd8c121ce6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s jump into the code. There are no changes to our `index.html` other than
    us including this new component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The definition of this `CompanyLogin` class is shown in the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at our HTML template. We want a username text field, a password
    text field, and a button that can be clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to add this template HTML to our shadow root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need a way to notify our Web Component as to when the button is being
    clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We chose `connectedCallback()` for event handling here since we need to bind
    events only when HTML is on the page. We can handle our click event inside the `handleLogin()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are simply printing the values of username and password.
    I chose to add a print example so that you have an idea about how it is very easy
    to read these values. We are also changing the class name of the actual Web Component
    based on the `Math.random()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a working component, we can start working on the CSS. We can
    add our CSS inside our template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We are again using the `:host` selector as a way to add CSS to the shadow root
    of our Web Component. In the `handleLogin()` function, we are adding CSS classes
    to our Web Component. We can target those classes from inside our CSS by using
    `:host(<selector>)` just like we used it in the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run our Web Component on a browser, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e333b13-70f4-486a-b83d-b624038493ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Based on the `random()` function, we can get either a greenish background, indicating
    that it is a successful login, or the one with a red background.
  prefs: []
  type: TYPE_NORMAL
- en: Accessibility for Web Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Accessibility plays a vital role in web development. Our users can be limited
    to a keyboard, they might be using a screen reader, or could be color-blind. Making
    sure that our users are comfortable in all scenarios is the key to making a good
    site. Similarly, creating a good Web Component also includes making a Web Component
    accessible.
  prefs: []
  type: TYPE_NORMAL
- en: When you are creating a Web Component, you need to make sure that your Web Components
    are accessible at least up to a certain extent. For example, an image should always
    have `alt` text. A link should always have `alt` text. Input fields should have
    proper aria-labels. There should be sufficient color contrasts. Tab orders should
    be in the correct order, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know what can be done to make a component accessible, let's take
    a look at a small example. Let's say the requirement is to create a `<header-image>`
    component that shows a full-width image. In order to make sure that this component
    is accessible, the image used should have `alt` text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at our `getTemplate()` function for this component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are adding an `alt` attribute to the image tag, and we are grabbing
    this `alt` text from the Web Component itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have an error handler function called `handleErrors()`, which makes
    sure to tell the user that the component is missing `alt` text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This will show a Missing Alt Text error message in red, when the component is
    missing the alt text. We can solve other accessibility issues in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Gold Standard Checklist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have been creating Web Components in the previous sections, but, other than
    the accessibility, no other sections tell us what defines a good component. So,
    let's talk about it. The Gold Standard Checklist is a working draft (see [https://github.com/webcomponents/gold-standard/wiki](https://github.com/webcomponents/gold-standard/wiki))
    that tells the creators of a Web Component what things should be taken care of
    in order to create a good, reusable component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s talk about some of the points that I personally feel are important:'
  prefs: []
  type: TYPE_NORMAL
- en: Web components should be accessible. In order to make the Web Components work
    on all screens, we need to make sure that the component covers all aspects of
    accessibility.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding of events should be done in `connectedCallback()`. This makes sure that
    the DOM to which events are bound will always be present, thus reducing the number
    of bugs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event bindings should be removed in `disconnectedCallback()`, thus freeing up
    the memory that is not required anymore.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components should have default styling with good contrasting colors. This will
    make sure that components can be seen properly at all times.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components should also follow responsive designs. In order to make our component
    work on all screen sizes without any layout issues, we should make sure that we
    have responsive CSS associated with the Web Component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components should be able to expose events. We will be talking about events
    in [Chapter 5](0330b4ac-5fed-441c-8747-ef9f14f91418.xhtml), *Managing States and
    Props*, but the main takeaway from this point is that, if you are building a component
    that needs to tell other components the change in state, it should tell them by
    exposing an event callback.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though the Gold Standard Checklist contains a lot of very good points,
    I feel that these six points should be able to make a component pretty good in
    terms of reusability. In case you are curious about the other points, here is
    the link to the full Gold Standard Checklist:[ https://github.com/webcomponents/gold-standard/wiki](https://github.com/webcomponents/gold-standard/wiki).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked into different ways we can style a Web Component,
    learned about accessibility and how it can be used in creating a more complete
    Web Component, and then looked into the Gold Standard Checklist, which provides
    guidelines for creating a good Web Component.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be looking into reusability and how it can used
    in Web Components, along with how these Web Components are published on the web
    for maximum reusability.
  prefs: []
  type: TYPE_NORMAL
