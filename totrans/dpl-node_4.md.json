["```js\nvar redis = require(\"redis\");\n\nvar publisher = redis.createClient();\nvar subscriber = redis.createClient();\n\nsubscriber.subscribe('channel5');\n\nsubscriber.on('message', function(channel, message) {\n  console.log('channel: ', channel)\n  console.log('message: ', message)\n})\n\nsubscriber.on('subscribe', function() {\n  publisher.publish('channel5', 'This is a message')\n})\n```", "```js\nchannel: channel5\nmessage: This is a message\n\n```", "```js\nvar redis = require(\"redis\");\nvar publisher = redis.createClient();\nvar subscriber = redis.createClient();\n\nsubscriber.subscribe('service:add');\nsubscriber.on('message', function(channel, operands) {\n  var result = JSON.parse(operands).reduce(function(a, b) {\n    return a + b;\n  })\n  publisher.publish('added', result);\n})\nsubscriber.on('subscribe', function() {\n  process.send('ok')\n})\n```", "```js\nvar redis = require(\"redis\");\nvar publisher = redis.createClient();\nvar subscriber = redis.createClient();\n\nvar child_process = require('child_process');\nvar add = child_process.fork('add.js');\nvar subtract = child_process.fork('subtract.js');\n\nadd.on('message', function() {\n  publisher.publish('service:add', JSON.stringify([7,3]))\n})\nsubtract.on('message', function() {\n  publisher.publish('service:subtract', JSON.stringify([7,3]))\n})\nsubscriber.subscribe('result:added')\nsubscriber.subscribe('result:subtracted')\nsubscriber.on('message', function(operation, result) {\n  console.log(operation + ' = ', result);\n});\n```", "```js\nresult:subtracted = 4\nresult:added = 10\n\n```", "```js\nsubscriber.psubscribe('result:*')\nsubscriber.on('pmessage', function(operation, result) {\n  console.log(operation + ' = ', result);\n})\n```", "```js\nvar seneca = require('seneca')();\nvar client = seneca.client(8080);\n\nrequire('seneca')()\n.add({\n  operation:'sayHello'\n},\nfunction(args, done) {\n  done(null, {message: \"Hello!\"})\n})\n.add({\n  operation:'sayGoodbye'\n},\nfunction(args, done) {\n  done(null, {message: \"Goodbye!\"})\n})\n.listen(8080);\n\nclient.act({ operation: \"sayHello\" }, function(err, result) {\n  console.log(result.message);\n})\n\nclient.act({ operation: \"sayGoodbye\" }, function(err, result) {\n  console.log(result.message);\n})\n```", "```js\ncurl -d '{\"operation\":\"sayHello\"}' http://localhost:8080/act\n// {\"message\":\"Hello!\"}\n\n```", "```js\nrequire('seneca')()\n.add({\n  operation:'add'\n},\nfunction(args, done) {\n  var result = args.operands[0] + args.operands[1];\n  done(null, {\n    result : result\n  })\n})\n.listen({\n  host:'127.0.0.1',\n  port:8081\n})\n```", "```js\n...\n.add({\n  operation:'subtract'\n},\n...\n  var result = args.operands[0] - args.operands[1];\n...\n```", "```js\nnode add.js\n...\nnode subtract.js\n\n```", "```js\nvar add = require('seneca')().client({\n  host:'127.0.0.1',\n  port:8081\n})\nvar subtract = require('seneca')().client({\n  host:'127.0.0.1',\n  port:8082\n})\nadd.act({\n  operation:'add',\n  operands: [7,3]\n},\nfunction(err, op) {\n  console.log(op.result)\n})\nsubtract.act({\n  operation:'subtract',\n  operands: [7,3]\n},\nfunction(err, op) {\n  console.log(op.result)\n})\n```", "```js\n10 // adding\n4 // subtracting\n\n```", "```js\ncurl -d '{\"operation\":\"add\",\"operands\":[7,3]}' http://127.0.0.1:8081/act\n// {\"result\":10}\n\n```", "```js\nvar http = require('http')\nvar fs = require('fs')\nhttp.createServer(function(req, res) {\n  fs.readFile('./somefile.js', function(err, data) {\n    res.writeHead(200);\n    res.end(data)\n  })\n}).listen(8000)\n```", "```js\nhttp.createServer(function(req, res) {\n  fs.createReadStream('./static_buffered.js').pipe(res);\n}).listen(8000)\n```", "```js\nvar Stream = require('stream')\nvar through = new Stream;\nthrough.readable = true;\nthrough.writable = true;\nthrough.write = function(buf) {\n  through.emit('data', buf.toString().toUpperCase())\n}\nthrough.end = function(buf) {\n  arguments.length && through.write(buf)\n  through.emit('end')\n}\nprocess.stdin.pipe(through).pipe(process.stdout);\n```", "```js\nvar myPoint = {\n  x : 100,\n  y : 50\n}\n```", "```js\n var myPoint = {\n  x: 100,\n  y: 50\n}\nvar pointA = Object.create(myPoint, {\n  y: 100\n})\nvar pointA = Object.create(myPoint, {\n  y: 200\n})\n```", "```js\nvar rec1 = function() {}\nrec1.prototype.message = function() { ... }\nvar rec2 = function() {\n  this.message = function() { ... }\n}\n```", "```js\narticle:324:01-03-2014 : 00010100111010001001111...\n```", "```js\nredis.setbit('article:324:01-03-2014', userId, 1)\n```", "```js\nvar redis = require('redis');\nvar client = redis.createClient();\nvar multi = client.multi();\n//  Create three articles with randomized hits representing user views\nvar id = 100000;\nwhile(id--) {\n  multi.setbit('article1:today', id, Math.round(Math.random(1)));\n  multi.setbit('article2:today', id, Math.round(Math.random(1)));\n  multi.setbit('article3:today', id, Math.round(Math.random(1)));\n}\nmulti.exec(function(err) {\n  // done\n})\n```", "```js\nclient.bitcount('article1:today', function(err, count) {\n  console.log(count)\n})\n```", "```js\nclient.multi([\n  [\"bitcount\", \"article1:today\"],\n  [\"bitcount\", \"article2:today\"],\n  [\"bitcount\", \"article3:today\"]\n]).exec(function(err, totals) {\n  var total = totals.reduce(function(prev, cur) {\n    return prev + cur;\n  }, 0);\n  console.log(\"Total views: \", total);\n})\n```", "```js\nclient.multi([\n  [\"getbit\", \"article1:today\", 123],\n  [\"getbit\", \"article2:today\", 123],\n  [\"getbit\", \"article3:today\", 123]\n]).exec(function(err, hits) {\n  var total = hits.reduce(function(prev, cur) {\n    return prev + cur;\n  }, 0);\n  console.log(total); // 0, 1, 2 or 3\n})\n```", "```js\nclient.multi([\n  ['setbit', 'user123', 123, 1],\n  ['bitop', 'AND','123:sawboth','user123','article1:today','article3:today'], \n  ['getbit', '123:sawboth', 123]\n]).exec(function(err, result) {\n  var sawboth = result[2];\n  console.log('123 saw both articles: ', !!sawboth);\n});\n```", "```js\nclient.multi([\n  ['bitop', 'OR','atleastonearticle','article1:today','article2:today','article3:today'],\n  ['bitcount', 'atleastonearticle']\n]).exec(function(err, results) {\n  console.log(\"At least one: \", results[1]);\n});\n```", "```js\nclient.multi([\n  ['bitop','XOR','recommendother','article1:today','article2:today'], \n['bitop','AND','recommend:article1','recommendother','article2:today'], \n  ['bitop','AND','recommend:article2','recommendother','article1:today'], \n  ['bitcount', 'recommendother'], \n  ['bitcount', 'recommend:article1'], \n  ['bitcount', 'recommend:article2'], \n  ['del', 'recommendother', 'recommend:article1', 'recommend:article2'] \n]).exec(function(err, results) { \n  //  Note result offset due to first 3 setup ops \n  console.log(\"Didn't see both articles: \", results[3]); \n  console.log(\"Saw article2; recommend article1: \", results[4]); \n  console.log(\"Saw article1; recommend article2: \", results[5]); \n})\n```", "```js\nusers:female  : 00100001011000000011110010101...\nusers:male  : 11011110100111111100001101010...\n```", "```js\nvar http   = require('http');\nvar redis  = require('redis');\nvar client = redis.createClient();\nvar hyperLLKey = 'hyper:uniques';\n\n...\n\nhttp.createServer(function(request, response) {\n\n  var route  = request.url;\n  var val    = route.match(/^\\/log\\/(.*)/);\n\n...\n\n  if(val) {\n    val = val[1];\n    return client.pfadd(hyperLLKey, val, function() {\n      client.pfcount(hyperLLKey, function(err, card) {\n        respond(response, 200, JSON.stringify({\n          count: err ? 0 : card\n        }))\n      })\n    });\n  }\n}).listen(8080)\n```", "```js\nvar redis  = require('redis');\nvar client= redis.createClient();\nvar multi  = client.multi();\n\nclient.multi([\n  ['pfadd', 'merge1', 1, 2, 3, 4, 5, 6, 10],\n  ['pfadd', 'merge2', 1, 2, 3, 4, 5, 6, 7, 8, 9],\n  ['pfmerge', 'merged', 'merge1', 'merge2'],\n  ['pfcount', 'merged'],\n  ['del', 'merge1', 'merge2', 'merged']\n]).exec(function(err, result) {\n  console.log('Union set cardinality', result[3]);\n});\n```", "```js\nnode â€“e \"console.log(process.versions.v8)\"\n\n```", "```js\nvar a = 7;\na = 7.77;\n```", "```js\nvar someFunc = function foo(){}\nconsole.log(%FunctionGetName(someFunc));\n```", "```js\nnode --allow-natives-syntax program.js\n// foo\n\n```", "```js\nvar operand = 3;\nfunction square() {\n  return operand * operand;\n}\n//  Make first pass to gather type information\nsquare();\n//  Ask that the next call of #square trigger an optimization attempt;\n//  Call\n%OptimizeFunctionOnNextCall(square);\nsquare();\n```", "```js\nnode --allow-natives-syntax --trace_opt --trace_deopt myfile.js\n\n```", "```js\n[deoptimize context: c39daf14679]\n[optimizing: square / c39dafca921 - took 1.900, 0.851, 0.000 ms]\n\n```", "```js\n%OptimizeFunctionOnNextCall(square);\noperand = 3.01;\nsquare();\n```", "```js\n**** DEOPT: square at bailout #2, address 0x0, frame size 8\n[deoptimizing: begin 0x2493d0fca8d9 square @2]\n...\n[deoptimizing: end 0x2493d0fca8d9 square => node=3, pc=0x29edb8164b46, state=NO_REGISTERS, alignment=no padding, took 0.033 ms]\n[removing optimized code for: square]\n\n```", "```js\nvar a = [];\na[2] = 'foo';\na[23] = 'bar';\n```", "```js\nvar redis  = require('redis');\nvar util   = require('util');\nvar Promise = require('bluebird');\nvar Cache = function(config) {\n  config = config || {};\n  this.prefix = config.prefix ? config.prefix + ':' : 'cache:';\n\n  var port = config.port || 6379;\n  var host = config.host || 'localhost';\n\n  this.client = redis.createClient(port, host, config.options || {});\n\n  config.auth && this.client.auth(config.auth);\n};\n```", "```js\nvar cache = new Cache({ prefix: 'articles:cache' });\n```", "```js\nCache.prototype.get = function(key) {\n  key = this.prefix + key;\n  var client = this.client;\n  return new Promise(function(resolve, reject) {\n    client.hgetall(key, function(err, result) {\n      err ? reject() : resolve(result);\n    });\n  });\n};\n```", "```js\ncache.get('sandro').then(function(val) {\n  console.log('cached: ' + val);\n}).catch() {\n  console.log('unable to fetch value from cache');\n})\n```", "```js\nCache.prototype.set = function(key, val, ttl) {\n  var _this = this;\n  var pkey = this.prefix + key;\n  var client = this.client;\n  var setArr = [];\n\n  for(var k in val) {\n    setArr[k] = val[k];\n  }\n  return new Promise(function(resolve, reject) {\n    client.hmset(pkey, setArr, function(err) {\n      err ? reject() : resolve();\n      ttl && _this.expire(key, ttl);\n    });\n  });\n};\n```", "```js\nclient.expire(key, ttl, function(err, ok) { // ...flagged for removal }\n```", "```js\nCache.prototype.clear = function() {\n var prefixMatch = this.prefix + '*';\n var client   = this.client;\n return new Promise(function(resolve, reject) {\n  var multi = client.multi();\n  (function scanner(cursor) {\n   client.scan([+cursor, 'match', prefixMatch], function(err, scn) {\n    if(err) {\n     return reject();\n    }\n    // Add new delete candidates\n    multi.del(scn[1]);\n    // More? Continue scan.\n    if(+scn[0] !== 0) {\n     return scanner(scn[0]);\n    }\n    // Delete candidates, then resolve.\n    multi.exec(resolve);\n   })\n  })(0);\n });\n};\n```", "```js\ncache.set('deploying', { foo: 'bar' })\n.then(function() {\n return cache.get('deploying');\n})\n.then(function(val) {\n console.log(val); // foo:bar\n return cache.clear();\n})\n.then(cache.close.bind(cache));\n```", "```js\nvar http = require('http');\nvar fs = require('fs');\nvar cloudflare = require('cloudflare');\nvar config = {\n  \"token\": \"your token\",\n  \"email\": \"your account email\",\n  \"domain\": \"yourdomain.com\",\n  \"subdomain\": \"www\",\n  \"protocol\": \"http\"\n};\nvar cloudflareClient = cloudflare.createClient({\n  email: config.email,\n  token: config.token\n});\n```", "```js\nvar indexFile = './index.html';\nhttp.createServer(function(request, response) {\n  var route = request.url;\n  if(route === \"/index.html\") {\n    response.writeHead(200, {\n      \"content-type\": \"text/html\",\n      \"cache-control\": \"max-age=31536000\"\n    });\n    return fs.createReadStream(indexFile).pipe(response);\n  }\n}).listen(8080);\n```", "```js\nfunction purge(filePath, cb) {\n  var head = config.protocol + '://';\n  var tail = config.domain + '/' + filePath;\n  //  foo.com && www.foo.com each get a purge call\n  var purgeFiles = [\n    head + tail,\n    head + config.subdomain + '.' + tail\n  ];\n  var purgeTrack = 2;\n  purgeFiles.forEach(function(pf) {\n    cloudflareClient.zoneFilePurge(config.domain, pf, function(err) {\n      (--purgeTrack === 0) && cb();\n    });\n  });\n};\n```", "```js\nfs.watch('./index.html', function(event, filename) {\n  if(event === \"change\") {\n    purge(filename, function(err) {\n      console.log(\"file purged\");\n   });\n  }\n});\n```", "```js\n<base64-encoded header>.<base64-encoded claims>.<base64-encoded signature>\n```", "```js\n{\n  \"typ\":\"JWT\",\n  \"alg\":\"HS256\"\n}\n```", "```js\n{\n  \"iss\" : \"http://blogengine.com\",\n  \"aud\" : [\"http://blogsearch.com\", \"http://blogstorage\"],\n  \"sub\" : \"blogengine:uniqueuserid\",\n  \"iat\" : \"1415918312\",\n  \"exp\" : \"1416523112\",\n  \"sessionData\" : \"<some data encrypted with secret>\"\n}\n```", "```js\nvar token;\n\nfunction send(route, formData, cb) {\n  if(!(formData instanceof FormData)) {\n    cb = formData;\n    formData = new FormData();\n  }\n  var caller = new XMLHttpRequest();\n  caller.onload = function() {\n    cb(JSON.parse(this.responseText));\n  };\n  caller.open(\"POST\", route);\n  token && caller.setRequestHeader('Authorization', 'Bearer ' + token);\n  caller.send(formData);\n}\n// ...When we have received a username and password in some way\nformData = new FormData();\nformData.append(\"username\", username);\nformData.append(\"password\", password);\n\nsend(\"/login\", formData, function(response) {\n  token = response.token;\n  console.log('Set token: ' + token);\n});\n```", "```js\nvar express = require('express');\n...\nvar jwt = require('jwt-simple');\nvar app = express();\n\napp.set('jwtSecret', 'shhhhhhhhh');\n\napp.post('/login', auth, function(req, res) {\n  var nowSeconds   = Math.floor(Date.now()/1000);\n  var plus7Days   = nowSeconds + (60 * 60 * 24 * 7);\n  var token = jwt.encode({\n    \"iss\" : \"http://blogengine.com\",\n    \"aud\" : [\"http://blogsearch.com\", \"http://blogstorage\"],\n    \"sub\" : \"blogengine:uniqueuserid\",\n    \"iat\" : nowSeconds,\n    \"exp\" : plus7Days\n  }, app.get('jwtSecret'));\n\n  res.send({\n    token : token\n  })\n})\n```", "```js\napp.post('/someservice', function(req, res) {\n  var token = req.get('Authorization').replace('Bearer ', '');\n  var decoded = jwt.decode(token, app.get('jwtSecret'));\n  var now = Math.floor(Date.now()/1000);\n  if(now > decoded.exp) {\n    return res.end(JSON.stringify({\n      error : \"Token expired\"\n    }));\n  }\n  res.send(<some sort of result>);\n})\n```"]