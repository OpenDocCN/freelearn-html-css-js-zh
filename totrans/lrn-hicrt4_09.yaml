- en: Chapter 9. 3D Charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 3D charts have been the most long awaited and the most desired feature in Highcharts.
    A feature that has been in the subject of heated debate within the users' community.
    There are users who agree, and those that disagree with the use of 3D charts.
    The pro camp argue for the use of 3D charts, for example in sales and marketing
    reports or infographics posters. The con party argue that 3D charts are misleading
    in terms of accuracy in data visualization and comparison, so the development
    resources should be focused elsewhere. As for Highcharts, it takes the pro-choice
    direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter focuses on the basics of 3D configuration and shows a gallery
    of charts presented in 3D, as well as several specific options in each supported
    series. In this chapter, we will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: What a 3D chart in Highcharts is and isn't
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Experimenting with 3D chart orientation: `alpha`, `beta`, `depth`, and `viewDistance`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the 3D chart background
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting the column, pie, donut, and scatter series in 3D charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating with 3D charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What a Highcharts 3D chart is and isn't
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, the 3D chart feature is to display the 2D charts in
    a real 3D presentation, that is, we can rotate and tilt the charts in different
    dimensions and adjust the view distance. The 3D feature is currently only available
    for the column, pie, and scatter series.
  prefs: []
  type: TYPE_NORMAL
- en: What 3D charts cannot do is to construct a real three dimensional, *x*, *y*,
    and *z* axes chart, except for the scatter plot; we will even see some shortcomings
    in the scatter plot later. As this is the first major release of 3D charts, this
    limitation may be short lived.
  prefs: []
  type: TYPE_NORMAL
- en: Experimenting with 3D chart orientation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To enable the 3D feature, we first need to include the extension as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In Highcharts, there are two levels of 3D options: chart and series. The chart
    level options are located in `chart.options3d`, which mainly deals with the orientation
    and the frame around the plotting area, whereas the 3D options for the series
    remain in the usual `plotOptions` area, such as `plotOptions.column.depth`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, Highcharts supports 2 axles of rotation: horizontal and vertical,
    which are the `alpha` and `beta` options in `chart.options3d` respectively. The
    values for these options are in degrees. The following diagram illustrates with
    arrows the direction of chart rotation as the degree value increases and decreases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Experimenting with 3D chart orientation](img/7451OS_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Alpha and beta orientations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous diagram, we showed the direction of orientation. Let''s experiment
    with a column chart. We are going to use a chart from [Chapter 4](ch04.html "Chapter 4. Bar
    and Column Charts"), *Bar and Column Charts*, which looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Alpha and beta orientations](img/7451OS_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We then add the 3D options to the chart as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We switch the chart to 3D display mode with the enabled option and no rotation
    in both axles, which produces the following chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Alpha and beta orientations](img/7451OS_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that without any rotation, the chart looks almost the same as the original,
    as expected. When we look closer, the columns are actually constructed in 3D,
    with depth. Let''s set the alpha axle to 30 degrees and the beta axle to remain
    at zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Alpha and beta orientations](img/7451OS_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the 3D structure more clearly as the alpha axle increases, as we
    are leaning towards a top-down view of the chart. Let''s reset alpha back to zero
    and set the beta axle to 30 degrees:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Alpha and beta orientations](img/7451OS_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The chart is rotated horizontally on a vertical principal axis. Note that once
    the chart is rotated on the beta axle, a large gap appears between the title and
    the *y* axis. We can remove the gap by positioning the title with `x` and `y`
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s set both rotations together to 30:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Alpha and beta orientations](img/7451OS_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that when we rotate a 3D chart, the plot area can interfere with other
    components, such as chart title and spacing on each side. In this case, we need
    to use the margin settings to manually accommodate the chart properly, depending
    on the size and view angle. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The depth and view distance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apart from `alpha` and `beta` options, we can use the `depth` option to control
    the distance between the data display and the 3D background. Let''s set the `depth`
    option to be exactly the same as the default depth of the 3D columns, which is
    25 pixels deep. We also specify the `viewDistance` option to the default value,
    `100` (at the time of writing, changing the depth value also changes the `viewDistance`
    value), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, the columns are backed up against the background frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The depth and view distance](img/7451OS_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s change the `viewDistance` option to 0 for a closer perspective:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The depth and view distance](img/7451OS_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the 3D chart background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Instead of having a white background with dark labels, let''s replace the side,
    bottom, and back frames around the plot area with different settings. In Highcharts,
    we can specify the color and thickness of these frames, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Meanwhile, we also change the data label color to white which contrasts nicely
    with the new background color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the 3D chart background](img/7451OS_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that if we apply a background image to the 3D chart, Highcharts doesn't
    automatically angle the image along the background.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting the column, pie, donut, and scatter series in 3D charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will plot a gallery of column, pie, donut, and scatter series
    which are currently supported for 3D presentation. We will also examine the 3D
    options specific to each series. Some of the examples used here are taken from
    previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 3D columns in stacked and multiple series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start with a multi-series stacked column chart embedded with the `options3d`
    setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what a multi-series grouped and stacked 3D columns chart looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![3D columns in stacked and multiple series](img/7451OS_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Column depth and Z-padding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Notice from the preceding chart, the sides of the UK/Germany stacked columns
    are covered by the S. Korea/Japan columns. Suppose that we want to show part of
    the sides of the UK/Germany columns. In order to do that, we can reduce the thickness
    of the S. Korea/Japan columns with the `plotOptions.column.depth` option, such
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we reduce the thickness of the S. Korea/Japan columns to 12 pixels which
    is around half the depth of the default value. The following chart shows one group
    of columns thinner than the other:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Column depth and Z-padding](img/7451OS_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that even when we have reduced the depth of one group of columns, the
    sides of the UK/Germany columns are still blocked. This is because the surface
    of the 3D columns are by default aligned along each other in Highcharts. To change
    that behavior, we use the `groupZPadding` option. In order to understand the concept
    of the `groupZPadding` option, it is best to illustrate it with a top-down view
    of the 3D columns in multiple series:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Column depth and Z-padding](img/7451OS_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `groupZPadding` option is the distance between the front view and the face
    of the column. In order to have the back of both series columns in line with each
    other, we need to increase the `groupZPadding` value for series B which has reduced
    depth, that is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*B column depth + B groupZPadding = A column depth + A groupZPadding*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We add the `groupZPadding` option as follows (3D columns have a default depth
    of 25 pixels and default `groupZPadding` of 1 pixel):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As expected, the S. Korea/Japan columns are pushed back and show the column
    sides of the other series:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Column depth and Z-padding](img/7451OS_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Plotting the infographic 3D columns chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see whether we can use Highcharts to plot an infographic style 3D chart.
    In this section, we will use the infographics designed by Arno Ghelfi and published
    in the Wired magazine, Geekiness at Any Price (See [http://starno.com/client/wired/#geekiness-at-any-price-wired](http://starno.com/client/wired/#geekiness-at-any-price-wired)).
    Here is part of the infographics poster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plotting the infographic 3D columns chart](img/7451OS_09_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Although the chart looks difficult to comprehend, we will focus on using Highcharts
    to reproduce one of these special 3D style columns here. From the previous exercise,
    we know that we can set up the columns with increasing depth, or with decreasing
    `groupZPadding` values to achieve the same effect. This is because the depth and
    `groupZPadding` options are from the `plotOptions.column` configuration which
    is designed on a per-series basis. Therefore, we need to put each item of data
    as a separate series, in order to have columns with various depths and `groupZPadding`
    values, like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Second, the columns in the example chart have no space between them. We can
    accomplish the same result by setting the padding spaces to zero with the `groupPadding`
    and `pointPadding` options. Then, we set all the columns to have the same color
    with the color option. Without space and with the same color for the columns will
    make them look indistinguishable. Fortunately, there is another specific option
    for 3D columns, `edgeColor`, which is for the color along the column edges. Here
    is the outcome of the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is our attempt to create an infographic style chart with Highcharts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plotting the infographic 3D columns chart](img/7451OS_09_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Plotting 3D pie and donut charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Plotting 3D pie and donut charts follows the same principle as the column chart.
    Simply include the `options3d` configuration for the orientation. To control the
    thickness of the pie chart, we use `plotOptions.pie.depth` in a similar fashion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use some live data to plot a 3D pie and donut charts. First, we borrow
    some code from a Highcharts online demo ([http://www.highcharts.com/demo/pie-gradient](http://www.highcharts.com/demo/pie-gradient))
    which turns the Highcharts standard series colors into some gradient style colors.
    This automatically makes the chart more appealing with light shading:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In this pie chart, we set the pie `depth` and `alpha` rotation options to 50
    and 55 respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, the `depth` option produces a rather thick 3D pie chart with
    nice color shading:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plotting 3D pie and donut charts](img/7451OS_09_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next donut chart, we set up all the sections to be separated with the
    `sliced` option set to `true,` and apply orientations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a 3D donut chart with all the slices separate from each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plotting 3D pie and donut charts](img/7451OS_09_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The 3D scatter plot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Highcharts supports real three-dimensional scatter series, although they are
    rather visually obscure. Despite this, we can use the `zAxis` option to define
    the third axis range. The chart doesn''t display any details along the *z* axis
    like others. Let''s construct the chart with some 3D data. In order to plot a
    three-dimensional scatter series, apart from the `options3d` configuration, we
    need to define the data series in an array of triplets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'With a multiple three-dimensional scatter series, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The 3D scatter plot](img/7451OS_09_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, it is difficult to make sense of the data points hanging in
    3D space. Note that Highcharts currently doesn''t show any intervals along the
    *z* axis. Let''s add some navigation to assist the data visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We change the tooltip into crosshairs for all dimensions. In order to avoid
    the tooltip blocking the crosshair lines, we fix the tooltip position to the top-right
    of the chart with the `positioner` option. Next, we use `formatter` to style the
    tooltip content. We borrow the tooltip formatting code from a Highcharts online
    demo ([http://www.highcharts.com/demo/3d-scatter-draggable](http://www.highcharts.com/demo/3d-scatter-draggable));
    the `\u25CF` is a dot Unicode symbol which is used as a bullet point with the
    series color. Since the tooltip is away from the hovered point, it is less confusing
    to have the tooltip in a rectangular shape rather than the default speech balloon
    style (`callout` in Highcharts). The following screenshot shows the chart with
    a hovered over crosshair:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The 3D scatter plot](img/7451OS_09_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, even if we specify the crosshair in the z dimension, there is
    no crosshair line projected along the axis.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating with 3D charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will investigate how you can interact with 3D charts. In
    [Chapter 2](ch02.html "Chapter 2. Highcharts Configurations"), *Highcharts Configurations*,
    we have already explored the drill down feature and we will revisit it briefly
    in 3D charts. Another interaction specific to 3D charts is the impressive click-and-drag
    feature.
  prefs: []
  type: TYPE_NORMAL
- en: Drilldown 3D charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s convert our previous drill down example into a 3D chart. First, we add
    the `options3d` option (and other positioning options):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have our top level 3D chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drilldown 3D charts](img/7451OS_09_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to improve our drill down pie chart in 3D with different orientation.
    Since the top level column is already configured in 3D, the drill down pie chart
    (defined in the `drilldown.series` option with matching `id` value) will also
    follow suit. However, we won''t notice the pie in 3D because the default depth
    is 0\. So, we need to set the thickness of the pie chart with the `depth` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to set the drill down chart to a different rotation, we change the
    chart options in the `drilldown` event callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'When the `drilldown` event is triggered from the `Internet Explorer` column,
    which zooms down to a donut chart, we set the chart with new `alpha` and `beta`
    orientations to 0 and 40 respectively. We use the CSS3 `-webkit-transform` setting
    on the `9%` sign to make it appear to have the same rotation as the donut chart.
    Finally, we reset the chart to its original orientation in the `drillup` callback,
    which is triggered when the user clicks on the **Back to …**. button. Here is
    the display of the zoom down donut chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drilldown 3D charts](img/7451OS_09_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click and drag 3D charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another impressive interaction with 3D charts is the click-and-drag function
    which we can use to drag the chart into any orientation. This interaction is actually
    from the Highcharts 3D scatter online demo, ([http://www.highcharts.com/demo/3d-scatter-draggable](http://www.highcharts.com/demo/3d-scatter-draggable)).
    Here, we are going to explore how this is achieved. Before we do that, let''s
    reuse our infographics example and copy the click-and-drag jQuery demo code into
    this exercise. The following is the click-and-drag code with minor modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The chart container's element is bound with the `mousedown` and `touchstart`
    events. The event names suffixed by `'.hc'` mean that the event handlers are grouped
    into the same name space, `'.hc'`. This is later used to unbind the event handlers
    declared under the name space.
  prefs: []
  type: TYPE_NORMAL
- en: So when the user performs a `mousedown` or `touchstart` event in the chart container,
    it executes the handler. The function first normalizes the event object for cross-browser
    event compatibility. Then it records the current pointer position values (`pageX`,
    `pageY`) as well as `alpha` and `beta` values under the `mousedown` event. Further
    under the `mousedown` or `touchstart` events, we bind an additional handler with
    the `mousemove` and `touchdrag` events in the same `'.hc'` name space. In other
    words, this means that under the `mousedown` or `touchstart` action, moving the
    mouse and dragging via touch will bind the second handler to the container.
  prefs: []
  type: TYPE_NORMAL
- en: The second handler implementation is to calculate the movement in x and y directions
    by comparing the current movement coordinates to the initial position recorded
    in the `mousedown` handler. Then, it transforms the scroll distance into orientation
    and updates the new `alpha` and `beta` values. The `Math.max` and `Math.min` expressions
    are to limit the `alpha` and `beta` into a range between -100 and 100\. Note that
    the code doesn't restrict us to only using `pageX/Y` from the event object. We
    can use other similar properties such as `screenX/Y` or `clientX/Y`, as long as
    both handlers are referring to the same.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we call `chart.draw(false)` to redraw the chart with the new orientation
    but without animation. The reason for a lack of animation is that the movement
    handler is being called frequently with scroll action and animation, which will
    require extra overhead, degrading the responsiveness of the display.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates the chart after the click-and-drag action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Click and drag 3D charts](img/7451OS_09_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Mousewheel scroll and view distance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can improve the experience by introducing another interaction, `mousewheel`,
    so that the view distance of the chart responds to the `mousewheel` actions. For
    the sake of a cross-browser compatibility solution, we use a jQuery mousewheel
    plugin by Brandon Aaron ([http://github.com/brandonaaron/jquery-mousewheel/](http://github.com/brandonaaron/jquery-mousewheel/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the handler code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In a similar fashion, `deltaY` is the `mousewheel` scroll value and we apply
    the change to the `viewDistance` option. Here is the result when we apply click-and-drag
    and mousewheel scroll actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mousewheel scroll and view distance](img/7451OS_09_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create 3D column, scatter, and pie charts,
    and how to manipulate the orientation and configurations specific to each series.
    We tested these options by producing a gallery of 3D charts. On top of that, we
    explored a number of user interactions for 3D charts in Highcharts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the Highcharts APIs, which are responsible
    for making a dynamic chart, such as using Ajax queries to update the chart content,
    accessing components in Highcharts objects, and exporting charts to SVG.
  prefs: []
  type: TYPE_NORMAL
