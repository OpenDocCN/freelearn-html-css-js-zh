["```js\n serverless create --template aws-nodejs --name testing\n\n```", "```js\n       service: testing-service\n\n       provider:\n         name: aws\n         runtime: nodejs6.10\n\n       functions:\n         hello:\n           handler: functions/greetings.hello\n\n```", "```js\n        module.exports.hello = (event, context, callback) => {\n          const message = `Hello, ${event.name}!`\n          callback(null, message);\n        };\n\n```", "```js\n        package:\n          exclude:\n            - test/**\n\n```", "```js\n        test/unit\n\n```", "```js\n npm install mocha --save-dev\n\n```", "```js\n        {\n            \"name\": \"testing\",\n            \"version\": \"1.0.0\",\n \"scripts\": {\n \"test\": \"mocha\"\n },\n            \"devDependencies\": {\n                \"mocha\": \"^3.2.0\"\n            }\n        }\n\n```", "```js\n        const assert = require('assert');\n\n        // list the unit tests of the greetings function\n        describe('Greetings', () => {\n\n          // this is the only test that we have for this file\n          describe('#hello()', () => {\n\n            // the `done` argument must be used only for \n            // async tests, like this one\n            it('should return hello + name', (done) => {\n\n              // the test code will be defined here\n\n            }); \n          });\n        });\n\n```", "```js\n        // load the Lambda function\n        const greetings = require('../../lib/greetings');\n\n        // set the event variable as expected by the function\n        const event = { \n          name: 'John'\n        };\n\n        // context can be null in this test\n        const context = null;\n\n        // invoke the function locally\n        greetings.hello(event, context, (err, response) => {\n\n          const expected = 'Hello, John!';\n          const actual = response;\n\n          // testing if the result is the expected\n assert.equal(expected, actual);\n\n          // exiting successfully if `err` variable is null\n          done(err);\n        });\n\n```", "```js\n    const db = require('db');\n    const notifier = require('notifier');\n\n    module.exports.saveOrder = (event, context, callback) => {\n\n db.saveOrder(event.order, (err) => {\n        if (err) {\n          callback(err);\n        } else {\n notifier.sendEmail(event.email, callback);\n        }\n      });\n    };\n\n```", "```js\n    class Order {\n\n // Dependency Injection\n      constructor(db, notifier) {\n        this.db = db;\n        this.notifier = notifier;\n      }\n\n save(order, email, callback) { \n this.db.saveOrder(order, (err) => {\n          if (err) {\n            callback(err);\n          } else {\n this.notifier.sendEmail(email, callback);          \n          }\n        });\n      }\n    }\n\n    module.exports = Order;\n\n```", "```js\n    const db = require('db');\n    const notifier = require('notifier');\n    const Order = require('order');\n\n    const order = new Order(db, notifier);\n\n    module.exports.saveOrder = (event, context, callback) => {\n      order.save(event.order, event.email, callback);\n    };\n\n```", "```js\n npm install sinon --save-dev\n\n```", "```js\n    const assert = require('assert');\n const sinon = require('sinon');\n    const Order = require('./order');\n\n    describe('Order', () => {\n      describe('#saveOrder()', () => {\n        it('should call db and notifier', (done) => {\n\n          // the test code will be defined here\n\n        });\n      }); \n    });\n\n```", "```js\n // define the behavior of the fake functions\n    const dbMock = {\n      saveOrder: (order, callback) => {\n        callback(null);\n      }\n    }  \n\n    const notifierMock = {\n      sendEmail: (email, callback) => {\n        callback(null);\n      }\n    }\n\n // spy the objects to identify when and how they are executed\n    sinon.spy(dbMock, 'saveOrder');\n sinon.spy(notifierMock, 'sendEmail');\n\n    // define the input event \n    const event = { \n      order: { id: 1 },\n      email: 'example@example.com'\n    };\n\n // inject the mocked objects\n const order = new Order(dbMock, notifierMock);\n\n    // execute the function\n    order.save(event.order, event.email, (err, res) => {\n\n // assert if the mocked functions were used as expected\n      assert(dbMock.saveOrder.calledOnce, true);\n      assert(notifierMock.sendEmail.calledOnce, true);\n      assert(dbMock.saveOrder.calledWith(event.order), true);\n      assert(notifierMock.sendEmail.calledWith(event.email), true);\n\n      done(err);\n    });\n\n```", "```js\n create-react-app frontend-test\n\n```", "```js\n        render() {\n          return (\n            <div className=\"App\">\n              <div className=\"App-header\">\n                <img src={logo} alt=\"logo\"/>\n <h2>Welcome to React</h2>\n              </div>\n            </div>\n          );\n        }\n\n```", "```js\n        import React from 'react';\n        import ReactDOM from 'react-dom';\n        import App from './App';\n\n        it('renders without crashing', () => {\n const div = document.createElement('div');\n ReactDOM.render(<App/>, div);\n        });\n\n```", "```js\n npm install enzyme react-test-renderer --save-dev\n\n```", "```js\n        import React from 'react';\n        import ReactDOM from 'react-dom';\n        import App from './App';\n import { mount } from 'enzyme';\n\n        it('renders without crashing', () => {\n mount(<App/>);\n        });\n\n```", "```js\n        it('renders with \"Welcome to React\"', () => {\n          const wrapper = mount(<App/>);\n          const welcome = <h2>Welcome to React</h2>;\n          expect(wrapper.contains(welcome)).toEqual(true);\n        });\n\n```", "```js\n serverless deploy function -f myFunction\n\n```", "```js\n serverless rollback --timestamp <timestamp>\n\n```", "```js\n serverless deploy list\n\n```", "```js\n    service: serverless-app\n\n    provider:\n      name: aws\n      runtime: nodejs6.10\n stage: dev\n      region: us-east-1\n\n```", "```js\n serverless create --template aws-nodejs --name warmup\n\n```", "```js\n npm install serverless-plugin-warmup --save-dev\n\n```", "```js\n plugins:\n - serverless-plugin-warmup\n\n```", "```js\n        functions:\n          hello:\n            handler: handler.hello\n warmup: true\n\n```", "```js\n        iamRoleStatements:\n          - Effect: 'Allow'\n            Action:\n              - 'lambda:InvokeFunction'\n            Resource: \"*\"\n\n```", "```js\n        module.exports.hello = (event, context, callback) => {\n\n if (event.source === 'serverless-plugin-warmup') {\n console.log('WarmUP - Lambda is warm!')\n return callback(null, 'Lambda is warm!')\n }\n\n          callback(null, { message: 'Hello!' });\n        };\n\n```", "```js\n serverless metrics --startTime 30m\n\n```", "```js\n serverless logs -f myFunction --tail\n\n```", "```js\n    functions:\n      hello:\n        handler: handler.hello\n onError: <ARN>\n\n```"]