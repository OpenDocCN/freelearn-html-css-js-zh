["```js\n# git clone https://github.com/josdirksen/learning-threejs\n\n```", "```js\n > python -m SimpleHTTPServer\n Serving HTTP on 0.0.0.0 port 8000 ...\n\n```", "```js\n > npm install -g http-server\n > http-server\nStarting up http-server, serving ./ on port: 8080\nHit CTRL-C to stop the server\n\n```", "```js\n> npm install -g simple-http-server\n> nserver\nsimple-http-server Now Serving: /Users/jos/git/Physijs at http://localhost:8000/\n\n```", "```js\n    chrome.exe --disable-web-security\n\n    ```", "```js\n    google-chrome --disable-web-security\n\n    ```", "```js\n    open -a Google\\ Chrome --args --disable-web-security\n\n    ```", "```js\n<!DOCTYPE html>\n\n<html>\n\n  <head>\n    <title>Example 01.01 - Basic skeleton</title>\n    <script src=\"img/three.js\"></script>\n    <style>\n      body{\n        /* set margin to 0 and overflow to hidden, to use the complete page */\n\n        margin: 0;\n        overflow: hidden;\n      }\n    </style>\n  </head>\n  <body>\n\n    <!-- Div which will hold the Output -->\n    <div id=\"WebGL-output\">\n    </div>\n\n    <!-- Javascript code that runs our Three.js examples -->\n    <script>\n\n      // once everything is loaded, we run our Three.js stuff.\n      function init() {\n        // here we'll put the Three.js stuff\n      };\n      window.onload = init;\n\n    </script>\n  </body>\n</html>\n```", "```js\nfunction init() {\n  var scene = new THREE.Scene();\n  var camera = new THREE.PerspectiveCamera(45, window.innerWidth /window.innerHeight, 0.1, 1000);\n\n  var renderer = new THREE.WebGLRenderer();\n  renderer.setClearColorHex(0xEEEEEE);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n\n  var axes = new THREE.AxisHelper(20);\n  scene.add(axes);\n\n  var planeGeometry = new THREE.PlaneGeometry(60, 20, 1, 1);\n  var planeMaterial = new THREE.MeshBasicMaterial({color: 0xcccccc});\n  var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n\n  plane.rotation.x = -0.5 * Math.PI;\n  plane.position.x = 15\n  plane.position.y = 0\n  plane.position.z = 0\n\n  scene.add(plane);\n\n  var cubeGeometry = new THREE.BoxGeometry(4, 4, 4)\n  var cubeMaterial = new THREE.MeshBasicMaterial({color: 0xff0000, wireframe: true});\n  var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n\n  cube.position.x = -4;\n  cube.position.y = 3;\n  cube.position.z = 0;\n\n  scene.add(cube);\n\n  var sphereGeometry = new THREE.SphereGeometry(4, 20, 20);\n  var sphereMaterial = new THREE.MeshBasicMaterial({color: 0x7777ff, wireframe: true});\n  var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n\n  sphere.position.x = 20;\n  sphere.position.y = 4;\n  sphere.position.z = 2;\n\n  scene.add(sphere);\n\n  camera.position.x = -30;\n  camera.position.y = 40;\n  camera.position.z = 30;\n  camera.lookAt(scene.position);\n\n  document.getElementById(\"WebGL-output\")\n    .appendChild(renderer.domElement);\n    renderer.render(scene, camera);\n};\nwindow.onload = init;\n```", "```js\nvar scene = new THREE.Scene();\nvar camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\nvar renderer = new THREE.WebGLRenderer();\nrenderer.setClearColorHex()\nrenderer.setClearColor(new THREE.Color(0xEEEEEE));\nrenderer.setSize(window.innerWidth, window.innerHeight);\n```", "```js\n  var axes = new THREE.AxisHelper( 20 );\n  scene.add(axes);\n\n  var planeGeometry = new THREE.PlaneGeometry(60,20);\n  var planeMaterial = new THREE.MeshBasicMaterial({color: 0xcccccc});\n  var plane = new THREE.Mesh(planeGeometry,planeMaterial);\n\n  plane.rotation.x=-0.5*Math.PI;\n  plane.position.x=15\n  plane.position.y=0\n  plane.position.z=0\n  scene.add(plane);\n```", "```js\n  camera.position.x = -30;\n  camera.position.y = 40;\n  camera.position.z = 30;\n  camera.lookAt(scene.position);\n\n  document.getElementById(\"WebGL-output\")\n    .appendChild(renderer.domElement);\n    renderer.render(scene, camera);\n```", "```js\n  var spotLight = new THREE.SpotLight( 0xffffff );\n  spotLight.position.set( -40, 60, -10 );\n  scene.add( spotLight );\n```", "```js\nvar planeGeometry = new THREE.PlaneGeometry(60,20);\nvar planeMaterial = new THREE.MeshLambertMaterial({color: 0xffffff});\nvar plane = new THREE.Mesh(planeGeometry, planeMaterial);\n...\nvar cubeGeometry = new THREE.BoxGeometry(4,4,4);\nvar cubeMaterial = new THREE.MeshLambertMaterial({color: 0xff0000});\nvar cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n...\nvar sphereGeometry = new THREE.SphereGeometry(4,20,20);\nvar sphereMaterial = new THREE.MeshLambertMaterial({color: 0x7777ff});\nvar sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n```", "```js\nrenderer.setClearColor(new THREE.Color(0xEEEEEE, 1.0));\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.shadowMapEnabled = true;\n```", "```js\nplane.receiveShadow = true;\n...\ncube.castShadow = true;\n...\nsphere.castShadow = true;\n```", "```js\nspotLight.castShadow = true;\n```", "```js\nfunction renderScene() {\n  requestAnimationFrame(renderScene);\n  renderer.render(scene, camera);\n}\n```", "```js\n...\ndocument.getElementById(\"WebGL-output\")\n  .appendChild(renderer.domElement);\nrenderScene();\n```", "```js\n<script src=\"img/stats.js\"></script>\n```", "```js\n<div id=\"Stats-output\"></div>\n```", "```js\nfunction initStats() {\n  var stats = new Stats();\n  stats.setMode(0);\n  stats.domElement.style.position = 'absolute';\n  stats.domElement.style.left = '0px';\n  stats.domElement.style.top = '0px';\n  document.getElementById(\"Stats-output\")\n    .appendChild( stats.domElement );\n     return stats;\n}\n```", "```js\nfunction init(){\n\n  var stats = initStats();\n  ...\n}\n```", "```js\nfunction renderScene() {\n  stats.update();\n  ...\n  requestAnimationFrame(renderScene);\n  renderer.render(scene, camera);\n}\n```", "```js\nfunction renderScene() {\n  ...\n  cube.rotation.x += 0.02;\n  cube.rotation.y += 0.02;\n  cube.rotation.z += 0.02;\n  ...\n  requestAnimationFrame(renderScene);\n  renderer.render(scene, camera);\n}\n```", "```js\n  var step=0;\n  function renderScene() {\n    ...\n    step+=0.04;\n    sphere.position.x = 20+( 10*(Math.cos(step)));\n    sphere.position.y = 2 +( 10*Math.abs(Math.sin(step)));\n    ...\n    requestAnimationFrame(renderScene);\n    renderer.render(scene, camera);\n  }\n```", "```js\n<script src=\"img/dat.gui.js\"></script>\n```", "```js\nvar controls = new function() {\n  this.rotationSpeed = 0.02;\n  this.bouncingSpeed = 0.03;\n}\n```", "```js\nvar gui = new dat.GUI();\ngui.add(controls, 'rotationSpeed', 0, 0.5);\ngui.add(controls, 'bouncingSpeed', 0, 0.5);\n```", "```js\nfunction renderScene() {\n  ...\n  cube.rotation.x += controls.rotationSpeed;\n  cube.rotation.y += controls.rotationSpeed;\n  cube.rotation.z += controls.rotationSpeed;\n  step += controls.bouncingSpeed;\n  sphere.position.x = 20 +(10 * (Math.cos(step)));\n  sphere.position.y = 2 +(10 * Math.abs(Math.sin(step)));\n  ...\n}\n```", "```js\nwindow.addEventListener('resize', onResize, false);\n```", "```js\nfunction onResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n```", "```js\nvar camera;\nvar scene;\nvar renderer;\n\nfunction init() {\n  ...\n  scene = new THREE.Scene();\n  camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n  renderer = new THREE.WebGLRenderer();\n  ...\n}\n```"]