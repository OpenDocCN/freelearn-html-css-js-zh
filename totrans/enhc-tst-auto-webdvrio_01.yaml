- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Utility Belt – Tools Every Superhero SDET Needs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is not your ordinary technical manual, which can be dry and boring. This
    book is intended to be fun. That’s why many of the chapters share a comic book
    theme. But unlike some superheroes, you won’t need to be bitten by a radioactive
    arachnid to get these powers. We just need some tools to create a great framework
    using WebdriverIO in TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: If you are just beginning your journey as a **software developer engineer in
    test** (**SDET**), you might be tempted to just skip ahead, install the TypeScript
    coding environment, run your first test, and hopefully see a **Pass** result.
    I’ve done that myself, only to realize later there were some tools I missed that
    could have helped make the journey easier from the start. That is why this first
    chapter speaks to the system specifications, tools, and configurations that will
    help us write better code from day one.
  prefs: []
  type: TYPE_NORMAL
- en: Along the way, I’ll be providing tips and tricks from more than 20 years as
    an SDET. There will be rules of thumb and advanced techniques. These are designed
    to help you write more tests, debug more efficiently, and produce a testing framework
    that will be stable, scalable, and require far less code maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main topics covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: The Virgin machine setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Visual Studio Code for your operating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing better code with Prettier, ESLint, and GitLens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Chrome extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing WebdriverIO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virgin machine setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you can do anything in the world of test automation on a virgin machine,
    you must install some packages, so you will need admin rights to the machine.
    So, before going any further, please ensure you have the following packages installed
    globally with their most stable version:'
  prefs: []
  type: TYPE_NORMAL
- en: NodeJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yarn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java JDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **integrated development environment** (**IDE**) (IntelliJ, VSCode, and so
    on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some extra steps if you are using a Windows machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up the PATH environment for your node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reboot the machine for all the changes to take effect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before we get to running our first test, we need to check out system requirements
    and get our tools. In this chapter, we’re going to cover how to install and configure
    tools that will make our job easier, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardware specifications**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A GitHub account** and **GitHub Desktop** for code change management'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Visual** **Studio Code**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prettier**, **GitLens**, and **ESLint extensions**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **SelectorsHub** and **EditThisCookie** Chrome extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that to install these tools, you will need local admin rights or know someone
    in your IT security department who has the rights and can install them for you.
    Without local admin rights, you won’t get far. You should have the same rights
    as the product development team, whose applications you will be testing.
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to our first rule of thumb.
  prefs: []
  type: TYPE_NORMAL
- en: Rule of thumb – the hardware resources and access rights must match the development
    team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, I will be bringing up some rules of thumb that I use to
    keep us on the path and out of the thorn bushes.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s talk about why this is important. Upfront, you can assess if your automation
    project will succeed just by considering if you can install Chrome extensions.
    If your corporate IT security department prevents the installation of any browser
    extensions, your automation progress will be severely hindered. We all want to
    have a successful test automation project. We do not want to start our journey
    hamstrung. *Test automation is code development; it requires developer tools,
    and you are a developer.* Do not let anyone tell you differently.
  prefs: []
  type: TYPE_NORMAL
- en: If your employer or client sees your project as just record and playback, you
    are at risk of having a project that is doomed to fail from the start. The biggest
    red flag that this is the case is that your computer resources and access do not
    match that of your developers.
  prefs: []
  type: TYPE_NORMAL
- en: '*Question: What are the technical spec requirements for my WebdriverIO test*
    *automation system?*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is a simple *Do* and *Do not*:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Do not* use the minimum requirements listed anywhere on the internet. Whatever
    it is, it is too small.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Do* match the CPU speed, the amount of RAM, the drive space, and the number
    of monitors on desks.'
  prefs: []
  type: TYPE_NORMAL
- en: This includes matching the version of the Mac or Windows operating system used
    by the development team. Windows should be 64-bit and probably the Professional
    edition.
  prefs: []
  type: TYPE_NORMAL
- en: It also includes the local admin rights of your application developers. This
    allows you to install browser extensions that will save your team time. This means
    you might have to propose a business case to meet this requirement.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is simple, really: without these tools, you will spend time trying to write
    locators by hand and taking extra steps to clear cookies. The project will go
    slower, and the company will pay more for fewer tests in the same amount of time.
    In extreme cases, you may have to walk away from a project and find a new employer
    who is ready to take QA testing seriously. The only exception is if your application
    developers are using Eclipse, which is not recommended for professional-level
    code development.'
  prefs: []
  type: TYPE_NORMAL
- en: That said, let’s begin by installing the tools for WebdriverIO so that we’re
    heading in the right direction.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by emulating two heroes who have unlimited wealth and brilliant
    minds. To be effective at fighting crime, one has a utility belt with multiple
    tools and the other a metal suit with AI intelligence to help bring villains—or,
    in our case, bugs—to justice faster.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js and npm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Node.js is an open source, cross-platform runtime environment and an asynchronous
    library that is used for running web applications outside the client’s browser.
    This project was created with Node version 16.13.0 for several reasons. Earlier
    versions were only required to support synchronous mode, which was deprecated
    in WebDriverIO 7.0 and removed in version 8.0\. While the latest version of Node
    as of this writing is 19.8.1, it is recommended to use 16.13.0 as it is the most
    compatible with most other modules and packages.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have enough hard drive space for the installation. It will take
    a minimum of 3 GB to install. By default, these tools are installed on the `C:`
    drive. If your drive is nearing capacity, consider installing it on a larger drive
    partition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin by installing Node and npm. The following screenshot shows how
    you can do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Downloading Node.js from https://nodejs.org/en/download/](img/B19395_Figure_1.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Downloading Node.js from https://nodejs.org/en/download/
  prefs: []
  type: TYPE_NORMAL
- en: For Mac, install the latest `.``pkg` file.
  prefs: []
  type: TYPE_NORMAL
- en: For Windows, download the 64-bit version.
  prefs: []
  type: TYPE_NORMAL
- en: The version of Node.js to install will be `@wdio/sync` *synchronous mode*, which
    is supported and stable only through Node.js version 12.0\. This book will use
    asynchronous command execution with the `async()` and `await()` commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation will also install the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chocolatey** for Windows or **Brew** for Mac, a package installation tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**npm**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Required** **system updates**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reminder
  prefs: []
  type: TYPE_NORMAL
- en: These all will require admin rights to complete successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once completed, check whether the Node.js and Chocolatey paths have been added
    to the system’s `PATH` environment variables, as illustrated in the following
    screenshot. If not, they must be added manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Node.js and Chocolatey paths in the PATH environment variable
    for Windows](img/B19395_Figure_1.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Node.js and Chocolatey paths in the PATH environment variable for
    Windows
  prefs: []
  type: TYPE_NORMAL
- en: 'For both Mac and Windows, we will install a version of Node that is at least
    version 18.0\. From the command shell, type these two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: While this completes the Node installation, we need to take note of alternative
    package managers that offer additional options.
  prefs: []
  type: TYPE_NORMAL
- en: Alternate node package managers – Yarn versus npm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While npm is the default node package manager provided, we recommend using Yarn
    to both install packages and run programs. One major advantage of Yarn is that
    it installs packages in parallel. This reduces the build time significantly when
    initializing or refreshing the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, from the command shell type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing Yarn, you can verify the installation by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With that complete, we will now decide where our project will live.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the coding environment with GitHub Desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In upcoming chapters, we will dive deeper into Git and GitHub for code versioning.
    But it is good to plan, so we will create a Git folder structure for our projects.
  prefs: []
  type: TYPE_NORMAL
- en: Our `wdio` project workspace will live in a Git `C:` drive. The reason is that
    Node.js projects rely on many supporting packages. These will take up a significant
    amount of additional space in the `node_modules` folder. At some point, the drive
    will be filled, affecting responsiveness.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin by creating a `\repos` folder at the root of our drive, or on the
    desktop on Mac, to hold our projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Sample repository and project directory structure](img/B19395_Figure_1.3.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Sample repository and project directory structure
  prefs: []
  type: TYPE_NORMAL
- en: Our project will live inside a local repository named `\wdio`. This is where
    we will create a place where our files will be stored. Later, we will use code
    repositories for version control, such as **GitHub**, **GitLab**, and **Bitbucket**.
    For this book, we will use GitHub, and GitHub Desktop will be our code-commit
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub and the GitHub Desktop tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One tool all developers require is code version control. It will be a requirement
    for any team you join, and they will expect you to know Git commands. Learning
    the syntax and commands can pose a challenge for new coders. Mistakes typed at
    the Command Prompt can occur at any point, and knowing how to resolve these issues
    can be a bigger challenge.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is an easier approach that will make life better. Using the **GitHub
    Desktop** tool for code commits gives a visual insight into code changes. You
    can examine the Git commands it uses to learn to use the Terminal window with
    fewer errors.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need a GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: Getti[ng a GitHub ac](http://www.github.com)count
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to [www.github.com](http://www.github.com) and click **Sign up**. Enter an
    email, a password, and a username, and verify your account.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the account setup process, select the **Automation and CI/CD** option.
    This configures the project for executions that can be triggered automatically
    at certain times of the day or week:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Automation and CI/CD configuration](img/B19395_Figure_1.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – Automation and CI/CD configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have a free public GitHub account to practice commits and version control.
    Now, go to your GitHub page and create a `wdio` repository with a README file.
    Note that free GitHub accounts are public. When working in a professional capacity,
    it is always best that you or your employer acquire a paid plan to make the repository
    private:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Initializing the wdio project repository with a README file
    from GitHub](img/B19395_Figure_1.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Initializing the wdio project repository with a README file from
    GitHub
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have our GitHub account dashboard. It gives suggestions for additional
    tools to install:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Links in GitHub to install GitHub Desktop and Visual Studio
    Code](img/B19395_Figure_1.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – Links in GitHub to install GitHub Desktop and Visual Studio Code
  prefs: []
  type: TYPE_NORMAL
- en: From here, we will add GitHub Desktop and the Visual Studio Code IDE. First,
    we’ll install GitHub Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GitHub Desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Download GitHub Desktop](https://desktop.github.com/) from [https://desktop.github.com/](https://desktop.github.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation of GitHub Desktop is very straightforward. Simply download
    the installer for your operating system and launch it. Once the process is complete,
    GitHub Desktop will launch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Downloading GitHub Desktop for your operating system](img/B19395_Figure_1.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – Downloading GitHub Desktop for your operating system
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have ever seen a beginner’s command-line video for Git, learning all
    the arcane commands may send a shiver down your spine. It might spark fear that
    the team project could be broken if your changes are committed without pulling
    changes from other team members first. That is why a GUI for beginners is a better
    choice over a printed Git cheat sheet – it prevents mistakes while learning Git
    commands. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – GitHub Desktop showing pending changes that should be pulled
    before a commit action](img/B19395_Figure_1.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – GitHub Desktop showing pending changes that should be pulled before
    a commit action
  prefs: []
  type: TYPE_NORMAL
- en: A tool with a graphical interface is recommended for both speed and accuracy
    over the command-line interface. In the preceding example, we know we are in the
    `main` branch of the `webdriverio` repo with changes committed to the project
    from other team members, and a large blue **Pull origin** button reminds us to
    pull in the changes other team members have committed first. Skipping this step
    can revert the code changes, causing trouble.
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub Desktop’s **History** view supplies descriptions of those recent commits.
    It tells us which files were changed and the differences between the old and new
    lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – GitHub Desktop’s History view showing old and new code changes](img/B19395_Figure_1.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – GitHub Desktop’s History view showing old and new code changes
  prefs: []
  type: TYPE_NORMAL
- en: Performing a code commit with a single click of a button is faster than typing
    into a Terminal window. We will link our project shortly. Next, we’ll install
    our coding environment tool.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing your TypeScript development environment – Microsoft Visual Studio Code
    versus JetBrains Aqua
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this journey of developing a robust framework, we need to make many decisions,
    and one of those is which IDE will be used to write and run our code. My personal
    preference would be to use Visual Studio Code because it is easier to code on
    multiple views.
  prefs: []
  type: TYPE_NORMAL
- en: However, as of this writing, JetBrains Aqua only supports breakpoints when a
    script is launched from a configuration. It does not pause at breakpoints when
    a test script is launched from the embedded Terminal window. This is the way we
    will run our WebdriverIO scripts. Visual Studio Code will be the tool of choice
    for these projects since it is open source, but I still recommend that you try
    JetBrains Aqua for its superior code interface design.
  prefs: []
  type: TYPE_NORMAL
- en: '**Microsoft Visual Studio Code** is the free IDE for this book and has a strong
    company backing it up. However, many free tools lack an income stream to support
    either a development team or a product support team. Free tools can be years behind
    paid tools in functionality. Take, for example, Selenium, which introduced relative
    element location in version 4.0, which was released in May 2019\. The same feature
    was part of most paid toolsets, including Micro Focus **Unified Functional Testing**
    (**UFT**), which goes as far back as 2010.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio Code for your operating sy[stem](https://code.visualstudio.com/download)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Download Visual Studio Code from](https://code.visualstudio.com/download)
    [https://code.visualstudio.com/download](https://code.visualstudio.com/download).'
  prefs: []
  type: TYPE_NORMAL
- en: Follow the installation process for your operating system. Again, the recommendation
    is to have these tools installed on a larger drive above the `\``repos` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Now that Visual Studio has been installed, we can check that Node and npm have
    been installed from the embedded Terminal shell window.
  prefs: []
  type: TYPE_NORMAL
- en: From the main menu, select **Terminal** > **New Terminal** and press *Ctrl*
    + *Shift* for Windows and *^* + *Shift* + *`* for Mac.
  prefs: []
  type: TYPE_NORMAL
- en: The Terminal shell for launching tests is up to your personal choice. **PowerShell**
    is recommended for Windows users, **ZSH** is recommended for Mac users, and **Git
    Bash** is great for command-line Git users. But for debugging, **JavaScript Debug
    Terminal** is required on both platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Terminal window, click the **v** down arrow next to the **+** button
    in the lower-right corner, select **JavaScript Debug Terminal**, and type the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The system will respond with the versions of Node and npm you have installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10 – Checking the Node and npm versions you have installed from
    the embedded Terminal shell in Visual Studio Code](img/B19395_Figure_1.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – Checking the Node and npm versions you have installed from the
    embedded Terminal shell in Visual Studio Code
  prefs: []
  type: TYPE_NORMAL
- en: Note that JavaScript Debug Terminal will run slower than the PowerShell or Bash
    shells, so it’s best to only use it when we need to stop at a breakpoint for debugging.
    Next, we will initialize our project from Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the Node project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have installed Visual Studio Code and created our project workspace
    directory, we can check that Node has been installed and initialize our project.
    From the Terminal, navigate to the `/repos/wdio` folder and type the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a new Node `package.json` file with default configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.11 – Initializing the Node package.json file](img/B19395_Figure_1.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – Initializing the Node package.json file
  prefs: []
  type: TYPE_NORMAL
- en: This file keeps track of all the supporting Node packages that WebdriverIO uses
    to build and automate tests.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our first project file, next, we will configure our editor
    settings to make coding less error-prone.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Visual Studio Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first change is when Visual Studio Code will save files. By default, implicit
    saves do not occur when changing from the code window to the Terminal. Since our
    tests will be launched from the Terminal, we want to ensure the latest version
    of the code is executed. Here’s how we can configure this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Setting Visual Studio Code to save files when the focus changes
    to the Terminal window](img/B19395_Figure_1.12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – Setting Visual Studio Code to save files when the focus changes
    to the Terminal window
  prefs: []
  type: TYPE_NORMAL
- en: Go to `auto save`.
  prefs: []
  type: TYPE_NORMAL
- en: Change the setting from **afterDelay** to **onWindowChange**.
  prefs: []
  type: TYPE_NORMAL
- en: This will ensure code is saved when switching from the code console to the Terminal
    console. This avoids a common issue where the code is updated, but the results
    that are shown were executed with the unchanged code.
  prefs: []
  type: TYPE_NORMAL
- en: X-ray vision – writing better code with Prettier, ESLint, and GitLens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developers need coding tools that help them efficiently write code that is formatted
    correctly, follow good coding practices, and know when team members make code
    changes. This is where Visual Studio Code extensions such as Prettier, ESLint,
    and GitLens become invaluable. Let’s install these tools.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio Code add-ons – Prettier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From the **Extensions** icon, add the **Prettier Code** **formatter** extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.13 – Extensions can be accessed by clicking the cubes icon](img/B19395_Figure_1.13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.13 – Extensions can be accessed by clicking the cubes icon
  prefs: []
  type: TYPE_NORMAL
- en: 'Prettier will automatically format code without taking extra time to type tabs
    manually. In this example, the code to the left is unformatted. We can now invoke
    Prettier by right-clicking the code and selecting **Format Document**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.14 – Example of unformatted code before Prettier](img/B19395_Figure_1.14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.14 – Example of unformatted code before Prettier
  prefs: []
  type: TYPE_NORMAL
- en: 'The code is then reformatted in a structured manner. Note that the square brackets
    and curly braces are tabbed out, and extra lines are included automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.15 – Tab-indented code formatted by Prettier](img/B19395_Figure_1.15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.15 – Tab-indented code formatted by Prettier
  prefs: []
  type: TYPE_NORMAL
- en: The code is now formatted for readability. The next extension will help us when
    working on a GitHub team.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio Code add-ons – GitLens
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Among many other features, the GitLens extension will show who last made code
    changes in our GitHub repository. From **Extensions**, add the **GitLens** extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.16 – The GitLens extension](img/B19395_Figure_1.16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.16 – The GitLens extension
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on any line of any tracked document in the project activates GitLens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.17 – GitLens showing the person who last made a code change commit
    in gray](img/B19395_Figure_1.17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.17 – GitLens showing the person who last made a code change commit
    in gray
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, we can see that *line 31* was last updated 2 months
    ago by *Christian Bromann*. This makes it easy to know when a line of code was
    changed, by whom, and how long ago.
  prefs: []
  type: TYPE_NORMAL
- en: This add-on will help us find code mistakes to improve the reliability of our
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio Code add-ons – ESLint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A linter is a program that looks for potential problems in our code like dust
    that gathers in the corner of a room. There are linters for most programming languages,
    and ESLint is a TypeScript linter. Why ESLint and not JSLint? **ES** stands for
    **ECMAScript**, which is the code standard for JavaScript that is intended to
    ensure the interoperability of web pages across different browsers. As of this
    writing, the current version is ES6\. When searching for code samples, pay attention
    if the code snippet is version ES5 or earlier as new features have been added
    over the years.
  prefs: []
  type: TYPE_NORMAL
- en: 'From **Extensions**, add the **ESLint** extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.18 – The ESLint ECMAScript linter extension](img/B19395_Figure_1.18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.18 – The ESLint ECMAScript linter extension
  prefs: []
  type: TYPE_NORMAL
- en: 'ESLint finds and reports on code patterns found in TypeScript projects. The
    goal is to make code more consistent and avoid bugs upfront. You can see it in
    use in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 1.19 – Example of ESLint reporting 81 potential problems in a \uFEFF\
    TypeScript project](img/B19395_Figure_1.19.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.19 – Example of ESLint reporting 81 potential problems in a TypeScript
    project
  prefs: []
  type: TYPE_NORMAL
- en: ESLint supplies a new **PROBLEMS** window that lists issues and suggestions
    for improving our code base as we enhance our framework. It can also be customized
    with new rules.
  prefs: []
  type: TYPE_NORMAL
- en: '*What is the difference between ECMAScript, JavaScript,* *and TypeScript?*'
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript is the language definition of JavaScript that’s found in modern browsers.
    ES5 and ES6 are recent descriptions. TypeScript is a superset of JavaScript that
    adds type declarations to JavaScript, like Java.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have configured Visual Studio Code, let’s add a few tools to our
    browser for selectors and cookies.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Chrome extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our next two tools are the easiest to install. **SelectorsHub** allows us to
    create robust locators of elements in Chrome, Edge, and any Chromium-based browser,
    while **EditThisCookie** allows us to clear the cookie cache from the browser
    frontend. Later, we will ensure the framework will clear cookies for fresh test
    execution.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the SelectorsHub Chrome extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the top-right corner of your Chrome browser, select the three vertical ellipses.
    Then, click on **More tools** and then **Extensions**. Click the hamburger icon
    in the top-left corner. Finally, click **Open Chrome Web Store** in the lower-left
    corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.20 – Adding a Chrome extension from Chrome Web Store](img/B19395_Figure_1.20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.20 – Adding a Chrome extension from Chrome Web Store
  prefs: []
  type: TYPE_NORMAL
- en: 'In Chrome Web Store, search for and install the **SelectorsHub** extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.21 – The SelectorsHub Chrome extension](img/B19395_Figure_1.21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.21 – The SelectorsHub Chrome extension
  prefs: []
  type: TYPE_NORMAL
- en: Once the extension has been installed, it should be allowed to interact in **Incognito**
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the **Extensions** page, click the **Details** button for **SelectorsHub**
    and set the **Allow in Incognito** switch to active:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.22 – Allowing the SelectorsHub Chrome extension to appear in Incognito
    mode](img/B19395_Figure_1.22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.22 – Allowing the SelectorsHub Chrome extension to appear in Incognito
    mode
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we will add an extension that will make clearing our browser cookies
    faster.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the EditThisCookie Chrome extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with the previous extension, search for the **EditThisCookie** extension
    from Chrome Web Store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.23 – The EditThisCookie Chrome extension](img/B19395_Figure_1.23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.23 – The EditThisCookie Chrome extension
  prefs: []
  type: TYPE_NORMAL
- en: The **EditThisCookie** extension will make it easier to clear cookies in the
    browser. It takes only two clicks to clear all cookies, and it can clear the cookies
    of specific applications, such as our application under test.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will need these extensions to be visible on the Chrome browser for
    easy access.
  prefs: []
  type: TYPE_NORMAL
- en: Pinning Chrome extensions to the browser title bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the jigsaw puzzle extensions icon in the top-right corner of the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **pushpin** icon next to both extensions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These icons will now appear in the **Extensions** shortcuts area in the top-right
    corner of the browser for easy access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.24 – Pinning an extension to the browser bar](img/B19395_Figure_1.24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.24 – Pinning an extension to the browser bar
  prefs: []
  type: TYPE_NORMAL
- en: Our utility belt is now complete. We have the coding environment, source code
    editor, and a few troubleshooting tools to help us leap tall projects in a single
    bound. Next, we’ll install WebdriverIO.
  prefs: []
  type: TYPE_NORMAL
- en: Installing WebdriverIO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two options to use and install WebdriverIO
  prefs: []
  type: TYPE_NORMAL
- en: Using WDIO TestRunner in async mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using WedbriverIO in standalone mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the next chapter and throughout this book, we will be using the first option.
    Despite this, take a closer look at both options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Option 1**: Using WebdriverIO with its built-in WDIO TestRunner is the default
    mode and most common use case. The test runner efficiently addresses numerous
    challenges often encountered when utilizing basic automation libraries. First,
    it streamlines the management of your test executions by organizing and distributing
    test specifications to maximize concurrent testing. Additionally, it adeptly manages
    session operations and offers an array of features designed to aid in troubleshooting
    and error identification within your test suite.'
  prefs: []
  type: TYPE_NORMAL
- en: '`klassi-js` repo (https://github.com/klassijs/klassi-js) at your leisure. There
    is also a project template that you can clone ([https://github.com/klassijs/klassi-example-test-suite](https://github.com/klassijs/klassi-example-test-suite))
    so that you have a running project in seconds.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample script written as a test spec and executed by WDIO:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: All WebdriverIO commands are asynchronous and need to be properly handled using
    `async`/`await`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we installed many of the tools required to begin coding a robust
    test automation framework. We enhanced our browser with two extensions to ease
    element-locator creation and handle cookies. The Node.js environment was installed
    with npm and a code repository folder was created. The Visual Studio Code IDE
    was installed with tools for static code analysis and code formatting, and we
    provided detailed information about when the code was modified and by whom.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will install WebdriverIO and begin to explore the folder
    structure of the WebdriverIO TypeScript framework project.
  prefs: []
  type: TYPE_NORMAL
