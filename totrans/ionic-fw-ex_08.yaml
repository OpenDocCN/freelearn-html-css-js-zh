- en: Chapter 8. Building a Simple Social App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to focus on learning how to create an Ionic application
    that has tabs using the Ionic tabs template. We will also have a look at some
    of the things that make up the tabs template and learn how to add features into
    it.
  prefs: []
  type: TYPE_NORMAL
- en: The Ionic tabs application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tabs are a very common menu system in mobile apps. They provide users with a
    simple yet effective way to create independent views in an app that sort of act
    like apps within an app.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Ionic tabs application](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot is a view of a sample Ionic tabs application. One great
    feature that a tabbed menu system provides is the ability to maintain the independent
    context within each individual tab menu. No matter where you are in the application,
    you always have the option of switching to another tab at any point. Navigation
    history is another feature that the tabs menu provides. You are able to navigate
    to different views within each tab, and you do not lose this navigation history
    when you switch back and forth between any tab menu. Now that we have some clarity
    about what the tabs application entails, let's go ahead and create a brand new
    tab application and look in detail at how it operates.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Ionic tabs application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating an Ionic tabs application is not too different from creating the side
    menu and blank Ionic applications as we have done in the previous chapters of
    this book. We are going to create a new Ionic tabs application, and we will call
    this application `tabs-app`. To create this new application, fire up a terminal
    window and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the preceding command, you will create your `tabs-app` ionic application
    successfully. The next thing we are going to do is to have an overview of the
    application we just created. To do this, simply open the `tabs-app` project in
    your favorite IDE. You should have a projects folder structure that looks similar
    to what I have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an Ionic tabs application](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Running the tabs-app application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have created our app, let's go ahead and see it in action. To do
    this, fire up a terminal window on your computer and run your application using
    the `ionic serve` technique.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure you are within your project's folder by running `cd tabs-app`. To
    run your app using the `ionic serve` technique, run the `ionic serve` command
    on your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: You should see an application with three tabs that looks similar to what we
    have in the following screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: For iOS:![Running the tabs-app application](img/00061.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Android:![Running the tabs-app application](img/00062.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of the tabs-app application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To begin to understand the life cycle of our `tabs-app` Ionic tabs application,
    we first need to have a look at the entry module of our application. Our entry
    module is normally specified within the `index.html` file of our app via the `ng-app`
    directive.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `index.html` file is located in the `www` directory of your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'A look through your `index.html` will reveal a file that closely resembles
    what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview of the tabs-app application](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You will see an Angular module called `starter` specified as on the opening
    `<body>` tag of our page via the `ng-app` directive. This can be seen highlighted
    in the preceding screenshot. This `starter` module is normally located in our
    `app.js` file, and we are going to have a look at it to understand the module
    even more deeply.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `app.js` file is located in the `www/js` path of you project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your `app.js` file and pay close attention to the `.config()` function
    where your routes are configured. Pay close attention to the first route definition
    of a route called `tab`. This route definition is represented in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview of the tabs-app application](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This `tab` state is an abstract state. An **abstract state** in Angular is a
    state that you cannot directly navigate to but which can contain child states
    that can be navigated to. This is a great way to create some sort of hierarchy
    for your states.
  prefs: []
  type: TYPE_NORMAL
- en: Based on the state definition of the tabs as highlighted in the preceding screenshot,
    you can see that it references `templateUrl` to the `tabs.html` file contained
    in the `templates/template.html` directory. To understand how Ionic works with
    tabs, let's explore the `tabs.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the tabs.html file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you open your `tabs.html` file, you will see something that closely resembles
    what I have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview of the tabs.html file](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You will clearly see that the entire markup is wrapped within the `<ion-tabs>`
    element. This `<ion-tabs>` element is the root element that acts like a container
    for the tabs that you declare in your Ionic tabs application. You can see that
    the opening `<ion-tabs>` tag also has a `class` attribute with some built-in Ionic
    CSS classes provided. This is because the `<ion-tabs>` element is just like every
    other element and is submissive to some CSS styling.
  prefs: []
  type: TYPE_NORMAL
- en: The <ion-tab> element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within the `<ion-tabs>` element, you will see three distinct `<ion-tab>` elements.
    The `<ion-tab>` element is the element used to create a tab and must be a child
    element of the `<ion-tabs>` element. You will see that each `<ion-tab>` element
    has some attributes. The `title` attribute is used to specify the title that that
    particular tab will display. The `icon-on` and `icon-off` are attributes that
    are used to define what icons get displayed when the tab is in focus and out of
    focus. Lastly, the `href` attribute is used to provide the path of the route that
    should be navigated to when that particular tab is selected.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a lot more attributes that are available for different customizations
    and actions for `<ion-tab>`, and these are all available and duly documented on
    the official Ionic documentation page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within each `<ion-tab>` element, you will find an `<ion-nav-view>` declaration.
    The `<ion-nav-view>` is an element used to refer to an Angular view. If you pay
    close attention, you will see that the `<ion-nav-view>` elements have a `name`
    attribute, which has values. This `name` attribute is used to specify the name
    of a particular view that is defined in our `app.js` file. If you have another
    short look at the `app.js` file, as we did previously in this chapter, you will
    see that some of the states have views defined. A clear demonstration of this
    is shown in the following screenshot of the `tab.dash` state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The <ion-tab> element](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that there is a `tab-dash` view named within the views object, and
    this `tab-dash` view has a `templateUrl` definition as well as a `controller`
    definition similar to a normal state definition. This is how Ionic provides a
    hierarchy that enables each tab to have a separate `<ion-nav-view>`, where its
    view is placed. To get an even better understanding of how this tab system works,
    we will be adding another tab to our application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding tabs to the tabs-app application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will add one new tab which will contain a feature that will let users post
    messages like a message board and see that it appears similar to a Facebook wall
    or a Twitter wall. We will be calling this new tab the `wall` tab. To add this
    new tab, the first thing we need to do is to add the route for our new tab.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the state for the new tab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To add the state for our new tab, we need to define this tab in our `app.js`
    file where all our default tab routes are defined. Within the `.config()` function
    found in your `app.js` file, place the following block of code just after the
    state definition of the tab abstract state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have done this correctly, parts of the `.config()` function of your
    `app.js` file should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the state for the new tab](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's try to understand what we have just done here. We have created a new state
    called `tab.wall`, which has a route `/tab`. This means that we are able to navigate
    to this `tab.wall` state or `/tab` route as part of our Angular application. We
    have also created a new view called `tab-wall`, and later in this chapter, we
    will use this `tab-wall` view to reference it as where we want the content of
    our newly created tab to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: If you take a closer look at our new state definition, you will see that we
    referenced a `templateUrl` to a file with the path `templates/tab-wall.html` and
    a controller, `WallController`, both of which we have not yet created. We will
    need to create this `tab-wall.html` file and also create the `WallController`
    controller.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the tab-wall.html file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create the `tab-wall.html` file correctly, we need to make sure that we create
    it within the `templates` directory in order for it to match the `templates/tab-wall.html`
    directory which we passed when declaring our state definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `tab-wall.html` within your `templates` folder. If you
    have done this correctly, your `templates` directory should look something very
    similar to what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the tab-wall.html file](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to actually populate the newly created `tab-wall.html` file.
    Place the code as shown in the following code block into your `tab-wall.html`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have correctly done this, your `tab-wall.html` should look something
    like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the tab-wall.html file](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This next step is to create the controller we defined in our state definition.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the WallController controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create the `WallController` controller, first we need to open the `controller.js`
    file. This file can be found within the same folder as our `app.js` file, that
    is, the `JS` folder. Your `controller.js` file should closely resemble what we
    have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the WallController controller](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To create the `WallController` file, simply place the code found in the following
    code block just after the first line where you can find the line of code, `angular.module(''starter.controllers'',
    [])`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have correctly replicated this code, your `controller.js` file should
    closely resemble to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the WallController controller](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: By doing this, we have successfully created the `WallController` controller.
    However, we still have one last step to complete the implementation of our new
    tab. We need to actually create the tab itself using the `<ion-tab>` element.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the tab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create our tab, we need to revisit the `tabs.html` file. Within the file,
    locate the opening `<ion-tabs>` tag and place the code mentioned in the following
    code block just after that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have done this correctly, your `tabs.html` file should look like what
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the tab](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: By doing this, we have successfully created a new tab in our application. Let's
    recap what we did to achieve this feat. First, we created a new state definition
    for our tab and referenced it a controller and template file. We then went ahead
    to create the tab itself using the `<ion-tab>` element, as in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the preceding screenshot and pay close attention to `<ion-tab>`
    that we just replicated from the code block, you will see that its `<ion-nav-view>`
    child element has a `name` attribute with the value `tab-wall`. This is simply
    referencing the view we defined while defining our `tab.wall` state in our `app.js`
    file. These steps complete our tabs implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the next step is to go on and run our app and see it in action. To do this,
    simply run your application using the `ionic serve` technique.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To run your app using the `ionic serve` technique, simply run `ionic serve`
    from the root directory of your `tab-app` application.
  prefs: []
  type: TYPE_NORMAL
- en: If you have done this correctly, you should see something that closely resembles
    what we have in the following screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: For iOS:![Creating the tab](img/00073.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Android:![Creating the tab](img/00074.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the Ionic tabs application template. We also
    created a tabs application called `tabs-app` and even got as far as adding a new
    tab of our own. In the next chapter, we will be using this same application to
    learn how to use Firebase to add backend services to our application.
  prefs: []
  type: TYPE_NORMAL
