- en: Chapter 4. Creating Custom Markers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 3](ch03.html "Chapter 3. Creating Heatmaps and Choropleth Maps"),
    *Creating Heatmaps and Choropleth Maps*, you learned how to style your maps to
    create a heatmap and a choropleth map. Leaflet allows you to further customize
    the style of your map by modifying the default markers. In this chapter, you will
    learn how to style markers by creating custom marker icons. You will also learn
    about the available marker plugins for styles and effects.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom marker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Leaflet, a marker is made from two images: an image that represents the
    marker and a second image that serves as the shadow to create depth. When you
    download Leaflet, there is an `images` folder. This folder contains the default
    marker: the blue pin that you have seen in your maps and a small shadow image.
    The images are named `marker-icon.png` and `marker-shadow.png`. The default marker
    and shadow are shown in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a custom marker](img/4812OS_04_01.jpg)![Creating a custom marker](img/4812OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Preparing your workspace in GIMP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create your own custom marker, you will need to draw an image in a painting
    application. In this example, you will use the free **GNU Image Manipulation Program**
    (**GIMP**). GIMP is a powerful imaging program that is similar to Adobe Photoshop
    which runs on most operating systems and is completely free. To download GIMP,
    go to [http://www.gimp.org/downloads/](http://www.gimp.org/downloads/) and click
    on **Download GIMP 2.8.10**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You do not need to select a 32- or 64-bit version. GIMP includes both and will
    determine the appropriate version when the installer runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once GIMP is installed, launch the application. The application contains three
    windows: two panels on the left- and right-hand side of the screen and the main
    window in the center. You can combine the three windows into a standard single
    window application by navigating to **Windows** | **Single-Window Mode**. To create
    a new image file, navigate to **File** | **New...**. You will be prompted with
    a new image dialog box. Enter a width and height for the icon image. If the advanced
    options are not expanded, click on the menu to expand the window. You can enter
    a resolution or accept the default. The **Fill with** option is the most important.
    You must select **Transparency** from the dropdown. If you do not select **Transparency**,
    your icon will be a square or rectangle with a background color. This will not
    look flattering on your map. The dialog box should now look like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing your workspace in GIMP](img/4812OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drawing and saving your image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that the canvas is set up, you can draw your image. How we draw the image
    is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to learn about GIMP, check out *Gimp 2.6 Cookbook*, *Juan
    Manuel Ferreyra*, *Packt Publishing*, available at [http://www.packtpub.com/gimp-2-6-cookbook/book](http://www.packtpub.com/gimp-2-6-cookbook/book).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are comfortable drawing in GIMP, create an image that can be used as
    your icon. Once you have created the image, navigate to **File** | **Export As...**.
    If you try to use the **Save** or **Save As…** options, you will not get the options
    for PNG. The **Export Image** dialog box allows you to choose the filename and
    where you would like to save the file. On the bottom-left corner of the dialog,
    expand the menu labeled **Select File Type (By Extension)**. Scroll down to **PNG
    image** and click on **Export**. You will be prompted with the **Export Image
    as PNG** dialog box. You must check the **Save color values from transparent pixels**
    option. The options form should look like the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing and saving your image](img/4812OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Export** button to save the image. The following screenshot
    is the finished icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing and saving your image](img/4812OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drawing the marker shadow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create another new image in GIMP, but select a larger width and smaller height:
    60 x 40\. The shadow will need to start at the same point as the tip of the marker
    and extend at approximately 45 degrees to the right. In GIMP, you can move the
    cursor over the image and see the pixel coordinates of the cursor. The shadow
    image is drawn horizontally at 20 pixels. The image in the following screenshot
    shows you the cursor at the tip of the icon and the coordinates in the lower-left
    corner of the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing the marker shadow](img/4812OS_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the shadow image, start shading from pixel 20 towards the upper-right corner
    of the image. The finished shadow image will look something like what is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing the marker shadow](img/4812OS_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using an image as an icon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also use an image as an icon. The image need not be PNG or have a transparent
    background. You can correct all of these things in GIMP. In GIMP, navigate to
    **File** | **Open** and select your image. The image in this example is JPG with
    a white background.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Layers** panel, you should see a single layer with a picture of your
    image on it. Right-click on the layer and select **Add Alpha Channel**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using an image as an icon](img/4812OS_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can now select the erase tool or the magic wand and remove the background
    color. Export the image as instructed in the previous section. You will still
    need to draw a shadow for your marker icon. Follow the same steps as the shadow
    in the previous example and save the image.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have two images—the icon and the shadow—it is time to use them
    in your Leaflet map.
  prefs: []
  type: TYPE_NORMAL
- en: Using a custom marker in Leaflet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a marker icon in Leaflet, you need to create an instance of the `L.icon`
    class. The `L.icon` class takes 10 options, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`iconUrl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iconRetinaUrl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iconSize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iconAnchor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shadowUrl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shadowRetinaUrl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shadowSize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shadowAnchor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`popupAnchor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`className`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The only required option is `iconUrl`. In this example, you will ignore the
    retina images and the class name. Open `LeafletEssentials.html` and add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code sets the options. The `iconUrl` option directs the URL to
    the icon image and the `shadowUrl` option directs the URL to the shadow image.
    The `iconSize` and `shadowSize` options require the dimensions of the images in
    the format of width by height.
  prefs: []
  type: TYPE_NORMAL
- en: The `iconAnchor` options set the point at which the marker and icon touch the
    map and where the pop up touches the icon. The marker had a point at the horizontal
    pixel 20, so this will be the anchor plus the height of the image in pixels. The
    shadow was drawn at the point of the marker, so its anchor will be at 20 and its
    height will be 40 pixels. You want the pop up to be drawn at the top in the center
    of the marker, so you must set its anchor accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: The `popupAnchor` option is set relative to the `iconAnchor` option. The icon
    point is centered horizontally, so the pop-up anchor will be 0 pixels, making
    it anchored at 20\. To place the anchor at the top of the marker, you subtract
    pixels. Choosing a value of -53 for the pop-up anchor opens the pop up just above
    the icon.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a custom marker in Leaflet](img/4812OS_04_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you need to create a marker and tell it to use your new icon. The following
    code will do just that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In [Chapter 1](ch01.html "Chapter 1. Creating Maps with Leaflet"), *Creating
    Maps with Leaflet*, you created markers with several options—one being `draggable:true`.
    The marker class also takes an icon as an option. In the preceding code, the `icon`
    option takes the name of an `L.Icon` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save `LeafletEssentials.html` and open it in your browser. You should see a
    map similar to the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a custom marker in Leaflet](img/4812OS_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Defining an L.Icon class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also extend the `L.Icon` class to create your own marker class. This
    allows you to create markers in a variety of colors and only specify the size
    and anchor options once. This example will look very similar to the previous example.
    Add the following code to your `LeafletEssentials.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code looks almost identical to the code in the previous example,
    except for the following differences:'
  prefs: []
  type: TYPE_NORMAL
- en: The first line, which instead of creating a new `L.icon` class, extends it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The options are wrapped in an object in line two
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no `iconUrl` option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By wrapping the options in an object, you can pass additional options when
    you create the marker. Add the following code to the `LeafletEssentials.html`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code sets the `iconUrl` option for each new `icon` object. Now,
    in one line of code, you have a red and blue icon. You can now assign the icon
    to a marker, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, each marker is assigned a different color icon. The
    result is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining an L.Icon class](img/4812OS_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using predefined markers with plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the first three chapters, you used the default Leaflet marker. In this chapter,
    you have just learned how to draw your own or use a pre-existing image. Rolling
    your own is not always practical, especially if you are not proficient in drawing.
    In this section, you will learn about two plugins that have stylish markers that
    you can customize and use in your Leaflet map: Maki markers and Bootstrap/Awesome
    markers.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Mapbox Maki markers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mapbox is a company that provides a mapping platform and tools. Its icons have
    been made available through the `Leaflet.Makimarkers` plugin. You can download
    the plugin at [https://github.com/jseppi/Leaflet.MakiMarkers](https://github.com/jseppi/Leaflet.MakiMarkers).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn about Mapbox by visiting their website at [http://mapbox.com](http://mapbox.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Maki markers is an open source icon library with over 100 available markers.
    You can find a full list of their names in the `Leaflet.MakiMarkers.js` file or
    go to the website at [https://www.mapbox.com/maki/](https://www.mapbox.com/maki/).
    The following screenshot shows you all of the icons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Mapbox Maki markers](img/4812OS_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The icons in the preceding screenshot are placed on a colored marker symbol.
    Using the markers in your map requires only two lines of code and three options.
    The following steps will help you create a Maki marker and place it on your map:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a reference to the JavaScript file. No CSS file is required with this plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an icon. You have to choose three options: the icon image you want to
    use, the hex color value of the marker, and the size (`s`, `m`, `l`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the icon to a marker and add the marker to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you select a color, there will be an outline in a lighter shade of the
    same color. The following screenshot shows you the results of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Mapbox Maki markers](img/4812OS_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using Bootstrap and Font Awesome markers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another plugin for Leaflet that allows you to use predefined markers is `Leaflet.awesome.markers`.
    This plugin allows you to choose the Twitter Bootstrap markers or the Font Awesome
    markers. If you can't choose, you can always use both. The different libraries
    provide different icons to your markers and slightly different functionalities.
    Which one you use is a personal preference. You can download the plugin at [https://github.com/lvoogdt/Leaflet.awesome-markers](https://github.com/lvoogdt/Leaflet.awesome-markers).
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `Leaflet.awesome.markers` is almost the same procedure as you used in
    the Maki marker example. You can perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a reference to Twitter Bootstrap or Font Awesome or both. Also, add a reference
    to the CSS and JavaScript for `Leaflet.awesome.markers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a Twitter Bootstrap marker and add it to the map. The Bootstrap marker
    is the default. You only need to set the icon image and color options. Create
    the marker and add it to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a Font Awesome marker and add it to the map. Since Bootstrap is the
    default, you need to use the `prefix` option with the value of `fa` for Font Awesome.
    This example also uses the `spin:true` option to create an animated spinning marker.
    Create the marker and add it to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code will produce the map shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Bootstrap and Font Awesome markers](img/4812OS_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You might not always have the time to create your own markers, and when you
    have the option to use icons by Mapbox, Twitter, or Font Awesome, why reinvent
    the wheel? Take advantage of what has already been done, and do it extremely well.
  prefs: []
  type: TYPE_NORMAL
- en: Clustering markers with Leaflet.markercluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you create more maps, you will eventually run in to a dataset that is thousands
    of points. Displaying 10,000 points on a map results in a slow load time, lagging
    animation on zooming and panning, and makes it hard for the user to select a single
    marker or to make sense of the data. Clustering allows you to group markers into
    clusters—single points that expand as the zoom level increases. This way, you
    can get a sense of the magnitude of data without being visually overwhelmed by
    the sheer number of points. If you need to see a single point, you can zoom in
    to the region or point of interest. `Leaflet.markercluster` is a fast and powerful
    cluster implementation that is also visually appealing.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can download this plugin at [https://github.com/Leaflet/Leaflet.markercluster](https://github.com/Leaflet/Leaflet.markercluster).
  prefs: []
  type: TYPE_NORMAL
- en: Coding your first cluster map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A marker cluster is just another example of a layer in Leaflet. So, creating
    one should look very familiar to you. You need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `LeafletEssentials.html`, add a reference to the `Leaflet.markercluster`
    CSS files and the JS file, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can add a series of markers to the layer, but since you will be loading
    723 points, you will use a JS file with the data inside. The data can have additional
    attributes. In this example, there is a link to an image file. Add a reference
    to the JS file that contains the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since you now know how to create custom marker icons, the following code creates
    an icon class and an icon that can be used when the clusters expand:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a `markercluster` layer by creating an instance of the `MarkerClusterGroup`
    class. Set the `showCoverageOnHover` option to `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To add markers to the group, you need a function that uses the array from the
    data file to loop through each data point and add the latitude, longitude, and
    any other attributes you want to use in the pop up to a marker. The loop creates
    a marker, binds a pop up, and adds the marker as a layer to the `markercluster`
    group. Then, call the function to start loading the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, add the `markercluster` group layer to the map using the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your map should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding your first cluster map](img/4812OS_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you zoom in to the map, the clusters should expand and the groupings become
    smaller. They will then expand to reveal individual markers, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding your first cluster map](img/4812OS_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Methods and events available to markercluster layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `markercluster` layer has several options and methods that can be used to
    create and interact with your layer.
  prefs: []
  type: TYPE_NORMAL
- en: Options that default to true
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are four default options that are all set to `true`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`showCoverageOnHover`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zoomToBoundsOnClick`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spiderfyOnMaxZoom`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`removeOutsideVisibleBounds`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first option shows you a polygon that represents the coverage area of the
    markers in the cluster. This can be confusing as a colored polygon appears on
    the map. In the previous example, you set this option to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: When you click on a cluster, the second option zooms to the polygon that represents
    the coverage area of the cluster you clicked on. When you zoom all the way into
    the map or use the defined `maxZoom` option, the cluster will expand to reveal
    the markers within it.
  prefs: []
  type: TYPE_NORMAL
- en: The last option improves performance by not displaying clusters that are not
    within a close proximity of the current map view. You do not need to see a cluster
    in New York if you are looking at Los Angeles.
  prefs: []
  type: TYPE_NORMAL
- en: Other options and events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The other options you might want to set are `animateAddingMarkers` and `maxClusterRadius`.
    Animated markers create a visually interesting map, but if you are using a large
    set of data points, it can slow the performance of your map. It is an effect that
    should be used sparingly and under the right conditions. Adjusting the radius
    of the cluster can create larger or smaller clusters. The default is 80 pixels.
    If you are displaying tightly grouped data, you will need a smaller number, and
    if you are displaying data that is dispersed, you might need a larger radius.
    In the previous example, if the radius is set to `5`, the markers take over the
    map because they are not getting clustered due to the small radius. The following
    screenshot shows you the map when the radius is set to `5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Other options and events](img/4812OS_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot is cluttered with markers, making the map almost unreadable.
    The `markercluster` layer has events that you can subscribe to. Usually, you subscribe
    to an event on the map using `map.on(click, function)`. With the `markercluster`
    layer, you add a cluster to the available layer events so that they will apply
    to the `markercluster` layer, such as `markers.on(clusterclick,function)`.
  prefs: []
  type: TYPE_NORMAL
- en: Animating markers with plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next two sections, you will learn how to animate markers using the `Leaflet.BounceMarker`
    and `Leaflet.AnimatedMarker` plugins. Animation adds a wow factor to your map,
    but if overdone, it can make your map appear amateurish.
  prefs: []
  type: TYPE_NORMAL
- en: Bouncing your markers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Leaflet.BounceMarker` plugin does not have a large number of options to
    customize the markers or their behavior, but it provides a simple animation that
    is useful when you add markers to the map or on the hover event. You can download
    and learn more about the plugin at [https://github.com/maximeh/leaflet.bouncemarker](https://github.com/maximeh/leaflet.bouncemarker).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will show you how to add a bounce marker to your map:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a reference to the JavaScript file. There is no CSS file required for this
    plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a bounce marker is exactly the same as creating a standard Leaflet
    marker; the plugin adds an additional option to the `L.Marker` class. Because
    of this, the bounce marker has a `bounceOnAdd` option, and it defaults to `false`.
    Every marker you create will bounce unless you specify otherwise. Set this option
    to `true` for any markers you would like to bounce. Add the marker to the map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The only other options you can specify on a bounce marker are the height, duration,
    and a callback function when finished. You set them as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Height is in pixels and duration is in milliseconds. Animation takes resources
    to run, so make sure that you do not create animations that run too quickly, or
    you will find that your marker disappears and only the shadow is visible. Also,
    remember that if you intend for your map to be consumed on mobile devices, the
    performance might be slower than on your desktop.
  prefs: []
  type: TYPE_NORMAL
- en: The `bounce()` method works well with the hover event. When there are many markers
    and they are tightly grouped, making the one you are hovering over bounce helps
    make sure that you click on the correct one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make a marker bounce on a hover event, subscribe to the event and call a
    function when the mouse hovers over the marker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code subscribes to the `mouseover` event and executes an anonymous
    function when the mouse hovers over the marker. The anonymous function calls the
    `bounce()` method, making the marker do just that when you move the mouse over
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Leaflet.BounceMarker` plugin is an excellent plugin; however, you might
    experience some hiccups in your animations. This is not to be blamed on the plugin,
    but rather on the nature of animations and the large number of resources they
    require.
  prefs: []
  type: TYPE_NORMAL
- en: Making your markers move
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the `Leaflet.AnimatedMarker` plugin, you can make your markers move along
    a polyline. This comes in handy when you want to draw attention to a route. A
    marker moving along the route attracts the eye more than a line on the map. For
    more information and to download the plugin, go to [https://github.com/openplans/Leaflet.AnimatedMarker](https://github.com/openplans/Leaflet.AnimatedMarker).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One caveat is that if the user zooms in on the map while the animation is running,
    the marker will move from its path and then try to return. It might be a good
    idea to disable the map zoom until the animation has finished.
  prefs: []
  type: TYPE_NORMAL
- en: 'To animate your markers, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a reference to the JavaScript file. No CSS file is required for this plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a polyline to represent the path that the marker will be animated along:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `animatedMarker` variable. The marker takes an array of latitudes
    and longitudes. To get it, use the `getLatLngs()` method of the line you created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the animated marker layer to the map. In this example, you will also add
    the line so that you can see it as a reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you open your map, it should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making your markers move](img/4812OS_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Because you did not pass any options to the marker, it will take a minute to
    start moving and will move fairly slowly across the blue line. The plugin has
    the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`distance`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`interval`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoStart`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onEnd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `distance` and `interval` options set the rate at which the marker will
    travel along the line. Distance is measured in meters, and interval is measured
    in milliseconds. Since it is a rate, an option of `{distance:100, interval 1000}`
    would be slower than an option of `{distance:300, interval:1000}`. In the first
    setting, the marker covers 100 meters in one second, and in the second setting,
    it would cover three times the distance in the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `autoStart` option is set to `true` by default. If you set it to `false`,
    you can call a `start()` method on the marker when you are ready. In the code
    used in the following steps, you will make a map with two buttons: **Start** and
    **Stop**. Using `autoStart:false`, you will allow the user to determine when to
    start the marker and when to stop it along its path:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Building on the previous example using the same line and marker, add an option
    to the marker for `distance` and `interval` and set `autoStart` to `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write a `start()` and `stop()`function to control the animation. Call the `start()`
    and `stop()` methods on the marker in the corresponding function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the HTML, before the `</body>` tag, add two buttons and set their `onClick`
    event equal to the corresponding function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your map should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making your markers move](img/4812OS_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The marker will not move until the user clicks on the **Start** button. When
    the user clicks on the **Stop** button, the marker will not stop immediately.
    Animation occurs in segments along each segment of the polyline. When the marker
    reaches the endpoint of a segment, it will stop and not resume until the user
    clicks on **Start** again.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last setting was `onEnd`. This option allows you to specify a callback
    function that will run when the marker gets to the end of the line. In the code
    in the following steps, you will use the bounce marker plugin you learned about
    earlier in this chapter to make the marker bounce and then disappear when it finishes.
    Follow the next set of steps to create your map:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Building on the previous example, add a reference to the bounce marker plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the bounce marker at the last point of the line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the animated marker to include the `onEnd` option with an anonymous function.
    The anonymous function will add the bounce marker to the map, make it bounce,
    remove the animated marker, and then wait 900 milliseconds and call a `bye()`function,
    which will remove the bounce marker. The waiting will allow the marker to disappear
    after the bouncing is finished. This slows the process down so that the animation
    is not so abrupt. You could also use the callback function available to the bounce
    marker instead of the `bye()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Your map will look exactly the same as the previous example. When the marker
    reaches the end of the line, it will appear to bounce and disappear from the map.
    A fun project using custom and animated markers would be to recreate the Boston
    Marathon using a custom marker for each of the finishers and setting its rate
    to their actual race rate. When you click on the **Start** button, you could replay
    the race.
  prefs: []
  type: TYPE_NORMAL
- en: Using markers for data visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have learned about several different marker types that still look like your
    typical marker. In this section, you will learn how to add markers that create
    a pie and bar chart—not exactly your standard marker.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Leaflet Data Visualization Framework plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Leaflet Data Visualization Framework plugin allows you to create markers
    that are just shapes: a standard pin style marker with a shape cutout, a star
    marker, and a polygon marker. It also allows you to add pie chart and bar chart
    markers to your map.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Leaflet Data Visualization Framework plugin also has markers for radial
    bar charts, coxcomb charts, stacked and radial meter markers, as well as a data
    layer, choropleth layer, and a legend control. This is a plugin worth exploring.
    You can download it at [http://humangeo.github.io/leaflet-dvf/](http://humangeo.github.io/leaflet-dvf/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating basic markers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Creating basic markers is straightforward. The code used in the following steps
    will walk you through making a marker, a polygon marker, and a star marker:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a reference to the CSS and two JavaScript files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the markers. What really makes this plugin stand out with regards
    to the standard markers is that you can use any of the options in the `L.Path`
    class. This allows you to fully customize your markers. Creating the markers requires
    you to select the marker type— `MapMarker`, `RegularPolygonMarker`, or `StarMarker`—and
    then select the options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you open your map, it will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating basic markers](img/4812OS_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are too many options to list here, but to see them, go to the documentation
    for the plugin at [https://github.com/humangeo/Leaflet-dvf/wiki/6.-Markers](https://github.com/humangeo/Leaflet-dvf/wiki/6.-Markers)
    and the documentation for the Leaflet `path` class at [http://Leafletjs.com/reference.html#path](http://Leafletjs.com/reference.html#path).
    The plugin options you will use the most for each marker are explained in the
    following sections.
  prefs: []
  type: TYPE_NORMAL
- en: MapMarker options
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `MapMarker` options used are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`numberOfSides`: The inner hole is determined by the number of sides: three
    for a triangle, four for a square. The larger the number, the closer to a circle
    it will be. If you leave this option blank, it will default to a circle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rotation`: This helps you rotate the hole in the middle. This, of course,
    only works on shapes that are not a circle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`radius`: This is the size of the marker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`innerRadius`: This is the size of the hole in the middle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RegularPolygonMarker options
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `RegularPolygonMarker` options used are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`numberOfSides`: This is the shape of the marker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rotation`: This is the orientation of the marker. If you create a four-sided
    polygon and leave this blank, it will be a square. If you add rotation, you can
    make the corners point in any direction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`radius`: This is the size of the marker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`innerRadius`: This is the size of the hole in the middle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: StarMarker options
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `StarMarker` options used are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`numberOfPoints`: This defines how many points the start should have'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rotation`: This is the orientation of the marker'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`radius`: This is the size of the marker'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`innerRadius`: This is the size of the hole in the middle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bar and pie chart markers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding chart markers to your map allows you to show multiple pieces of data
    for a single point or polygon. For example, you could map all of the census blocks
    in your state and, using the center point of each block, you could place a chart
    showing the age distributions. This allows you to present a lot of data quickly
    and visually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Making a bar or pie chart with the Leaflet Data Visualization Framework plugin
    only requires you to create an `options` object and pass it to the marker. The
    following steps will show you how to do both:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an `options` object with data and chart options. The data needs the name
    of the data category and the value. In the chart options object, you pass all
    of the options to style your chart. Three important options are `minValue`, `maxValue`,
    and `maxHeight`. These should, under most circumstances, be the same for all the
    categories. If you allow one category to have `maxHeight` higher than the rest,
    it can be displayed as a larger bar than another category with a higher value.
    Think of this as setting the *x* and *y* axis scales in Excel. All the data should
    be within the same scale of the lowest value to the highest value. Changing the
    `maxHeight` option will also make your chart larger or smaller. The options outside
    of the chart options are for the stroke or outline of the chart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When creating a pie chart, the `radius` option allows you to adjust the size
    of the marker:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the markers, pass the options, and add them to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you open your map, it should look like the following screenshot. When you
    hover over one of the data categories, you will see the color, category name,
    and value.
  prefs: []
  type: TYPE_NORMAL
- en: '![Bar and pie chart markers](img/4812OS_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to add custom markers to your Leaflet map.
    You can now draw your own markers or use pre-existing images. You can also use
    plugins to load markers from Twitter, Font Awesome, and Mapbox. Lastly, you now
    know how to create bar chart and pie chart markers to visualize data in the form
    of a marker. At this point, you have acquired enough knowledge of Leaflet to build
    almost any style of map you can think of.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use **Economic and Social Research
    Institute** (**ESRI**) data in your Leaflet map. As the most widely used GIS platform,
    you will most certainly run in to its data formats.
  prefs: []
  type: TYPE_NORMAL
