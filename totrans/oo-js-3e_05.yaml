- en: Chapter 5. ES6 Iterators and Generators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. ES6 迭代器和生成器
- en: So far, we have discussed language constructs of JavaScript without looking
    at any specific language version. In this chapter, however, we will primarily
    focus on a few language features introduced in ES6\. These features have a big
    impact on how you write JavaScript code. Not only do they improve the language
    significantly, they also offer several functional programming constructs unavailable
    to JavaScript programmers thus far.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论了 JavaScript 的语言结构，而没有查看任何特定的语言版本。然而，在本章中，我们将主要关注 ES6 中引入的一些语言特性。这些特性对编写
    JavaScript 代码的方式产生了重大影响。它们不仅显著提高了语言，还提供了 JavaScript 程序员迄今为止无法使用的几个函数式编程结构。
- en: In this chapter, we will take a look at newly introduced iterators and generators
    in ES6\. With that knowledge, we will proceed to take a detailed look at the enhanced
    Collections constructs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 ES6 中新引入的迭代器和生成器。有了这些知识，我们将详细研究增强的集合结构。
- en: For...of loop
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: For...of 循环
- en: '`For...of` loops are introduced in ES6 along with the iterable and iterator
    constructs. This new loop constructs replaces both the `for...in` and `for...each`
    loop constructs of ES5\. As the `for...of` loop supports the iteration protocol,
    it can be used on built-in objects such as arrays, strings, maps, sets, and so
    on, and custom objects that are iterables. Consider the following piece of code
    as an example:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`for...of` 循环是在 ES6 中与可迭代和迭代器结构一起引入的。这个新的循环结构取代了 ES5 中的 `for...in` 和 `for...each`
    循环结构。由于 `for...of` 循环支持迭代协议，它可以用于内置对象，如数组、字符串、映射、集合等，以及可迭代的自定义对象。以下代码片段可以作为示例：'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `for...of` loop works with iterables and built-ins like arrays are iterables.
    If you notice, we are using `const` instead of `var` when we define the loop variable.
    This is a good practice because when you use `const`, a fresh variable is created
    with a new binding and storage space. You should use `const` over a `var` declaration
    with the `for...of` loop when you don't intend to modify the value of the loop
    variable inside the block.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`for...of` 循环与可迭代对象和内置对象（如数组）一起工作。如果你注意到，当我们定义循环变量时，我们使用 `const` 而不是 `var`。这是一个好习惯，因为当你使用
    `const` 时，会创建一个新的变量，具有新的绑定和存储空间。当你不打算在块内部修改循环变量的值时，你应该在 `for...of` 循环中使用 `const`
    而不是 `var` 声明。'
- en: 'Other collections support `for...of` loop too. For example, as a string is
    a sequence of Unicode characters, `for...of` loop works just fine:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 其他集合也支持 `for...of` 循环。例如，由于字符串是一系列 Unicode 字符，`for...of` 循环可以正常工作：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The main difference between the `for...in` and `for...of` loop is that the `for...in`
    loop iterates through all enumerable properties of an object. `For...of` loop
    has a specific purpose, and that is to follow the iteration behavior based on
    how the object defines the iterable protocol.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`for...in` 循环和 `for...of` 循环之间的主要区别在于，`for...in` 循环遍历对象的所有可枚举属性。`for...of`
    循环有一个特定的目的，那就是根据对象如何定义可迭代协议来遵循迭代行为。'
- en: Iterators and iterables
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代器和可迭代对象
- en: ES6 introduces a new mechanism of iterating over data. Traversing a list of
    data and doing something with it is a very common operation. ES6 enhances the
    iteration constructs. There are two primary concepts involved with this change-iterators
    and iterables.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ES6引入了一种新的遍历数据机制。遍历数据列表并进行操作是一个非常常见的操作。ES6增强了迭代结构。这个变化涉及两个主要概念——迭代器和可迭代对象。
- en: Iterators
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迭代器
- en: 'A JavaScript iterator is an object that exposes the `next()` method. This method
    returns the next item from the collection in the form of an object that has two
    properties-`done` and `value`. In the following example, we will return an iterator
    from an array by exposing the `next()` method:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 迭代器是一个暴露 `next()` 方法的对象。此方法以具有两个属性的对象形式返回集合中的下一个项——`done` 和 `value`。在以下示例中，我们将通过暴露
    `next()` 方法从一个数组中返回一个迭代器：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding example, we are returning `value` and `done` till we have elements
    in the array. When we exhaust elements in the array to return, we will return
    `done` as `true`, indicating that the iteration has no more values. Elements from
    an iterator are accessed using the `next()` method repeatedly.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们在数组中有元素时返回 `value` 和 `done`。当我们耗尽数组中的元素以返回时，我们将返回 `done` 作为 `true`，表示迭代没有更多的值。迭代器中的元素通过重复使用
    `next()` 方法访问。
- en: Iterables
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可迭代对象
- en: An iterable is an object that defines its iteration behavior or internal iteration.
    Such objects can be used in the `for...of` loops introduced in ES6\. Built-in
    types such as arrays and strings define default iteration behavior. For an object
    to be iterable, it must implement the `@@iterator` method, meaning the object
    must have a property with `'Symbol.iterator'` as key.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可迭代对象是一个定义其迭代行为或内部迭代的对象。这些对象可以用在ES6中引入的`for...of`循环中。内置类型，如数组和字符串，定义了默认的迭代行为。为了使对象可迭代，它必须实现`@@iterator`方法，这意味着对象必须有一个以`'Symbol.iterator'`为键的属性。
- en: 'An object becomes iterable if it implements a method whose key is `''Symbol.iterator''`.
    This method must return an iterator via the `next()` method. Let''s take a look
    at the following example to clarify this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个对象实现了一个键为`'Symbol.iterator'`的方法，那么这个对象就变成了可迭代的。这个方法必须通过`next()`方法返回一个迭代器。让我们看看以下示例来澄清这一点：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let's break this example down into smaller pieces. We are creating an iterable
    object. We will create an `iter` object using object literal syntax that we are
    already familiar with. One special aspect of this object is a `[Symbol.iterator]`
    method. This method definition uses a combination of computed properties and ES6
    shorthand method definition syntax, which we already discussed in the last chapter.
    As this object contains a `[Symbol.iterator]` method, this object is iterable,
    or it follows an iterable protocol. This method also returns the iterator object
    that defines the iteration behavior via exposing the `next()` method. Now this
    object can be used with the `for...of` loop.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个例子分解成更小的部分。我们正在创建一个可迭代对象。我们将使用我们已熟悉的对象字面量语法创建一个`iter`对象。这个对象的一个特殊之处在于它有一个`[Symbol.iterator]`方法。这个方法定义使用了一种组合的计算属性和ES6简写方法定义语法，我们已经在上一章中讨论过。由于这个对象包含一个`[Symbol.iterator]`方法，这个对象是可迭代的，或者遵循可迭代协议。此方法还通过公开`next()`方法来返回定义迭代行为的迭代器对象。现在这个对象可以用`for...of`循环使用。
- en: Generators
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成器
- en: Closely linked with iterators and iterables, generators are one of the most
    talked about features of ES6\. Generator functions return a generator object;
    this term sounds confusing at first. When you write a function, you also instinctively
    understand its behavior-the function starts execution, line-by-line, and finishes
    execution when the last line is executed. Once the function is linearly executed
    this way, the rest of the code that follows the function is executed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 与迭代器和可迭代对象紧密相关，生成器是ES6中最受关注的特性之一。生成器函数返回一个生成器对象；这个术语一开始听起来可能有些令人困惑。当您编写一个函数时，您也会本能地理解其行为——函数从执行开始，逐行执行，直到最后一行执行完毕。一旦以这种方式线性执行函数，函数后面的代码就会执行。
- en: In languages where multithreading is supported, such flow of execution can be
    interrupted and partially finished tasks can be shared between different threads,
    processes, and channels. JavaScript is single-threaded, and you don't need to
    deal with challenges around multithreading at the moment.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在支持多线程的语言中，这种执行流程可以被中断，并且部分完成的任务可以在不同的线程、进程和通道之间共享。JavaScript是单线程的，您目前不需要处理多线程的挑战。
- en: However, generator functions can be paused and resumed later. The important
    idea here is that the generator function chooses to pause itself, it cannot be
    paused by any external code. During execution, the function uses the `yield` keyword
    to pause. Once a generator function is paused, it can only be resumed by code
    outside the function.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，生成器函数可以在之后被暂停和恢复。这里的重要思想是生成器函数选择暂停自己，它不能被任何外部代码暂停。在执行过程中，函数使用`yield`关键字来暂停。一旦生成器函数被暂停，它只能通过函数外的代码来恢复。
- en: You can pause and resume a generator function as many times you want to. With
    generator functions, a popular pattern is to write infinite loops and pause and
    resume them when needed. There are pros and cons of doing this, but the pattern
    has caught up already.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以暂停和恢复生成器函数任意多次。使用生成器函数，一个流行的模式是编写无限循环，并在需要时暂停和恢复它们。这样做有优点也有缺点，但这种模式已经流行起来。
- en: Another important point to understand is that generator functions also allow
    two-way message passing, in and out of it. Whenever you pause the function using
    `yield` keyword, the message is sent out of the generator function, and when the
    function is resumed, the message is passed back to the generator function.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要理解的重要点是，生成器函数也允许双向消息传递，即进出生成器函数。每当您使用`yield`关键字暂停函数时，消息就会从生成器函数中发送出去，而当函数恢复时，消息会返回到生成器函数。
- en: 'Let''s look at the following example to clarify how the generator functions
    work:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下示例来明确了解生成器函数是如何工作的：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is a very simple generator function. However, there are several interesting
    aspects that need careful understanding.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的生成器函数。然而，有几个有趣的方面需要仔细理解。
- en: 'First, notice an asterix `*` immediately after the keyword function, this is
    the syntax to indicate that the function is a generator function. It is also okay
    to keep the asterix immediately preceding the function name. Both of the following
    are valid declarations:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，注意关键字`function`后面的一个星号`*`，这是表示函数是生成器函数的语法。也可以保留星号在函数名之前。以下两种声明都是有效的：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Inside the function, the real magic is around the `yield` keyword. When the
    `yield` keyword is encountered, the function pauses itself. Before we move further,
    let''s see how the function is invoked:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数内部，真正的魔法围绕着`yield`关键字。当遇到`yield`关键字时，函数会自己暂停。在我们继续之前，让我们看看函数是如何被调用的：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When we invoke the generator function, it is not executed like a normal function,
    but it returns a generator object. You can use this generator object to control
    the execution of the generator function. The `next()` method on the generator
    object resumes the execution of the function.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用生成器函数时，它不像正常函数那样执行，而是返回一个生成器对象。您可以使用这个生成器对象来控制生成器函数的执行。生成器对象上的`next()`方法会继续函数的执行。
- en: 'When we call `next()` the first time, the execution proceeds up until the first
    line of the function (marked by ''A''), and pauses when the `yield` keyword is
    encountered. If we call the `next()` function again, it will resume the execution
    to the next line from the point the execution was paused last time:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们第一次调用`next()`时，执行会一直进行到函数的第一行（标记为'A'），并在遇到`yield`关键字时暂停。如果我们再次调用`next()`函数，它将从上次暂停的点继续执行：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once the entire function body is executed, any calls to `next()` on the generator
    object have no effect. We talked about generator functions allowing a two-way
    message passing. How does that work? In the previous example, you can see that
    whenever we resume the generator function, we receive an object with two values,
    `done` and `value`; in our case, we received `undefined` as the value. This is
    because we did not return any value with the `yield` keyword. When you return
    a value with the `yield` keyword, the calling function receives it. Consider the
    following example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦整个函数体执行完毕，对生成器对象上的`next()`的任何调用都没有效果。我们提到生成器函数允许双向消息传递。这是如何工作的？在前面的例子中，您可以看到每次我们恢复生成器函数时，我们都收到一个包含两个值`done`和`value`的对象；在我们的情况下，我们收到了`undefined`作为值。这是因为我们没有用`yield`关键字返回任何值。当你用`yield`关键字返回一个值时，调用函数会接收到它。考虑以下示例：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s trace the flow of execution of this example step by step. The generator
    function has three pauses or yields. We can create the generator object by writing
    the following line of code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步追踪这个示例的执行流程。生成器函数有三个暂停或`yield`点。我们可以通过以下代码行创建生成器对象：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will start the execution of the generator function by calling the `next`
    method; this method starts the execution till the first yield. If you notice,
    we are not passing any value to the `next()` method in the first call. The purpose
    of this `next()` method is just to start the generator function. We will call
    the `next()` method again, but this time with a `"Save"` value passed as a parameter.
    This value is received by `yield` when the function execution is resumed, and
    we can see the value printed on console:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过调用`next`方法来开始生成器函数的执行；这个方法会从第一个`yield`开始执行。如果您注意的话，我们在第一次调用`next()`方法时没有传递任何值。这个`next()`方法的目的只是启动生成器函数。我们将再次调用`next()`方法，但这次我们传递一个`"Save"`值作为参数。这个值在函数执行恢复时被`yield`接收，并且我们可以看到这个值被打印在控制台上：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will call the `next()` method again with two different values, and the output
    is similar to the one in the preceding code. When we call the `next()` method
    the last time, the execution ends and the generator function returns an `end`
    value to the calling piece of code. At the end of the execution, you will see
    `done` set as `true` and `value` assigned the value returned by the function,
    that is, `end`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次用两个不同的值调用`next()`方法，输出将与前面的代码类似。当我们最后一次调用`next()`方法时，执行结束，生成器函数将一个`end`值返回给调用代码。在执行结束时，您会看到`done`被设置为`true`，而`value`被分配了函数返回的值，即`end`：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It is important to note that the purpose of the first `next()` method is to
    start the execution of the generator function-it takes us to the first `yield`
    keyword and hence, any value passed to the first `next()` method is ignored.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，第一个`next()`方法的目的在于启动生成器函数的执行——它带我们到第一个`yield`关键字，因此传递给第一个`next()`方法的任何值都被忽略。
- en: 'From the discussion so far, it is apparent that generator objects conform to
    the iterator contract:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止的讨论表明，生成器对象符合迭代器协议：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This example confirms that generator functions also conform to the iterables
    contract.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例确认生成器函数也符合可迭代协议。
- en: Iterating over generators
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历生成器
- en: Generators are iterators, and like all ES6 constructs that support iterables,
    they can be used to iterate over generators.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器是迭代器，并且像所有支持可迭代的ES6构造一样，它们可以用来遍历生成器。
- en: 'The first method is to use the `for...of` loop, as shown in the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是使用`for...of`循环，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We are not creating a generator object here. The `For...of` loop has support
    for iterables and generators naturally fall into this loop.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里没有创建生成器对象。`for...of`循环自然支持可迭代对象，生成器也不例外。
- en: 'The spread operator can be used to turn iterables into arrays. Consider the
    following example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展运算符可以将可迭代对象转换为数组。考虑以下示例：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, you can use the destructuring syntax with generators, as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以使用解构语法与生成器一起使用，如下所示：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Generators play an important role in asynchronous programming. Shortly, we will
    look at asynchronous programming and promises in ES6\. JavaScript and Node.js
    offer a great environment to write asynchronous programs. Generators can help
    you write cooperative multitasking functions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器在异步编程中扮演着重要的角色。简而言之，我们将在ES6中查看异步编程和承诺的更多细节。JavaScript和Node.js提供了一个编写异步程序的良好环境。生成器可以帮助你编写协作多任务函数。
- en: Collections
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合
- en: ES6 introduces four data structures-`Map`, `WeakMap`, `Set`, and `WeakSet`.
    JavaScript, when compared to other languages such as Python and Ruby, had a very
    weak standard library to support hash or Map data structures or dictionaries.
    Several hacks were invented to somehow achieve the behavior of a `Map` by mapping
    a string key with an object. There were side effects of such hacks. Language support
    for such data structures was sorely needed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: ES6引入了四种数据结构-`Map`、`WeakMap`、`Set`和`WeakSet`。与Python和Ruby等其他语言相比，JavaScript在支持哈希或Map数据结构或字典方面有一个非常薄弱的标准库。发明了几个黑客手段，通过将字符串键映射到对象来某种程度上实现`Map`的行为。这些黑客手段有副作用。对这些数据结构的语言支持非常迫切。
- en: ES6 supports standard dictionary data structures; we will look at more details
    around these in the next section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ES6支持标准字典数据结构；我们将在下一节中查看这些细节。
- en: Map
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 映射
- en: '`Map` allows arbitrary values as `keys`. The `keys` are mapped to values. Maps
    allow fast access to values. Let''s look at some examples of maps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`Map`允许任意值作为`keys`。键映射到值。映射允许快速访问值。让我们看看一些映射的例子：'
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We will create an empty `Map` using the constructor. You can use the `set()`
    method to add an entry to the `Map` associating key with value, and overwriting
    any existing entry with the same key. Its counterpart method, `get()`, gets the
    value associated with a key, or `undefined` if there is no such entry in the map.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用构造函数创建一个空的`Map`。你可以使用`set()`方法向`Map`中添加一个条目，将键与值关联起来，并覆盖任何具有相同键的现有条目。它的对应方法`get()`获取与键关联的值，如果映射中没有这样的条目，则返回`undefined`。
- en: 'There are other helper methods available with maps, which are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 映射还有其他一些辅助方法可用，如下所示：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can create a `Map` using the following iterable *[key, value]* pairs as
    well:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下可迭代*[键，值]*对创建一个`Map`：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can chain the `set()` method for a compact syntax as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将`set()`方法链起来以获得紧凑的语法，如下所示：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can use any value as a key. For objects, the key can only be strings, but
    with collections, this limitation is removed. We can use an object as a key as
    well, though such use is not very popular:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用任何值作为键。对于对象，键只能是字符串，但与集合相比，这种限制被移除了。我们也可以使用对象作为键，尽管这种用法并不常见：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Iterating over maps
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 遍历映射
- en: One important thing to remember is that order is important with maps. Maps retain
    the order in which elements were added.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的一个重要事情是，对于映射来说，顺序很重要。映射保留了元素添加的顺序。
- en: There are three iterables you can use to iterate over a `Map`, that is, `keys`,
    `values`, and `entries`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用三个可迭代对象来遍历一个`Map`，即`keys`、`values`和`entries`。
- en: 'The `keys()` method returns iterable over the keys of a `Map` as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`keys()` 方法返回 `Map` 键的可迭代对象，如下所示：'
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Similarly, the `values()` method returns iterable over the values of a `Map`,
    as shown in the following example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`values()` 方法返回 `Map` 值的可迭代对象，如下面的示例所示：
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `entries()` method returns entries of the `Map` in form of a *[key,value]*
    pair, as you can see in the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`entries()` 方法返回 `Map` 的条目，以 `[key,value]` 对的形式，如下面的代码所示：'
- en: '[PRE23]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can use destructuring to make this concise as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用解构来使代码更简洁，如下所示：
- en: '[PRE24]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'An even more succinct:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 更加简洁的写法：
- en: '[PRE25]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Converting maps to arrays
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将映射转换为数组
- en: 'The spread operator (`...`) comes in handy if you want to convert a `Map` to
    an array:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想将 `Map` 转换为数组，使用扩展运算符（`...`）会很有用：
- en: '[PRE26]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As maps are iterable, you can convert the entire `Map` into an array using
    spread operators:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由于映射是可迭代的，您可以使用扩展运算符将整个 `Map` 转换为数组：
- en: '[PRE27]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Set
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Set`'
- en: 'A `Set` is a collection of values. You can add and remove values from it. Although
    this sounds similar to arrays, sets don''t allow the same value twice. Value in
    a `Set` can be of any type. So far, you must be wondering how different is this
    from an Array? A `Set` is designed to do one thing quickly-membership testing.
    Arrays are relatively slower at this. `Set` operations are similar to `Map` operations:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`Set` 是一组值的集合。您可以从中添加和删除值。尽管这听起来与数组相似，但集合不允许重复的值。`Set` 中的值可以是任何类型。到目前为止，您可能想知道这与数组有什么不同？`Set`
    是为了快速进行成员资格测试而设计的。在这一点上，数组相对较慢。`Set` 操作类似于 `Map` 操作：'
- en: '[PRE28]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Similar to maps, you can create a `Set` via an iterator:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与映射类似，您可以通过迭代器创建一个 `Set`：
- en: '[PRE29]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: When you add a value to the `Set`, and the value already existed, nothing happens.
    Similarly, if you delete a value from the `Set`, and the value didn't exist in
    the first place, nothing happens. There is no way to catch this scenario.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当您向 `Set` 中添加一个值，而这个值已经存在时，不会发生任何操作。同样地，如果您从 `Set` 中删除一个值，而这个值最初就不存在，也不会发生任何操作。无法捕获这种场景。
- en: WeakMap and WeakSet
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`WeakMap` 和 `WeakSet`'
- en: '`WeakMap` and `WeakSet` have the similar, but restricted, APIs as the `Map`
    and `Set` respectively, and they work mostly like their strong counterparts. There
    are a few differences though, which are as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`WeakMap` 和 `WeakSet` 具有与 `Map` 和 `Set` 相似但受限的 API，并且它们的工作方式与它们的强对应物大致相同。尽管如此，也有一些差异，如下所述：'
- en: '`WeakMap` only supports the `new`, `has()`, `get()`, `set()`, and `delete()`
    methods'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WeakMap` 只支持 `new`、`has()`、`get()`、`set()` 和 `delete()` 方法'
- en: '`WeakSet` only supports `new`, `has()`, `add()`, and `delete()`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WeakSet` 只支持 `new`、`has()`、`add()` 和 `delete()` 操作'
- en: Keys of a `WeakMap` must be objects
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WeakMap` 的键必须是对象'
- en: Values of a `WeakSet` must be objects
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WeakSet` 的值必须是对象'
- en: You can't iterate over `WeakMap`; the only way you can access a value is via
    its key
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不能遍历 `WeakMap`；访问值的唯一方式是通过其键
- en: You can't iterate over a `WeakSet`
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不能遍历 `WeakSet`
- en: You can't clear a `WeakMap` or a `WeakSet`
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不能清除 `WeakMap` 或 `WeakSet`
- en: Let's understand `WeakMap` first. The difference between a `Map` and a `WeakMap`
    is that a `WeakMap` allows itself to be garbage collected. The keys in a `WeakMap`
    are weakly held. `WeakMap` keys are not counted when the garbage collector does
    a reference count (a technique to see all alive references), and they are garbage
    collected when possible.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先来了解 `WeakMap`。`Map` 和 `WeakMap` 之间的区别在于 `WeakMap` 允许自己被垃圾回收。`WeakMap` 中的键是弱引用。`WeakMap`
    的键在垃圾回收器进行引用计数（查看所有活动引用的技术）时不会被计算，并且当可能时会被垃圾回收。
- en: WeakMaps are useful when you don't have any control over the life cycle of the
    object you are keeping in the Map. You don't need to worry about memory leak when
    using WeakMaps because the objects will not keep the memory occupied even if their
    life cycle is long.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当您对存储在 `Map` 中的对象的生存周期没有控制权时，`WeakMap` 非常有用。使用 `WeakMap` 时，您不必担心内存泄漏，因为即使对象的生存周期很长，这些对象也不会占用内存。
- en: Same implementation details apply to `WeakSet` as well. However, as you cannot
    iterate over a `WeakSet,` there are not many use cases for a `WeakSet.`
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的实现细节也适用于 `WeakSet`。然而，由于您不能遍历 `WeakSet`，因此 `WeakSet` 的用例并不多。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we took a detailed look at ES6 Generators. Generators are one
    of the most anticipated features of ES6\. The ability to pause and resume execution
    of a function opens up a lot of possibilities around co-operative programming.
    The primary strength of generators is that they provide a single-threaded, synchronous-looking
    code style, while hiding the asynchronous nature away. This makes it easier for
    us to express in a very natural way what the flow of our program's steps/statements
    is without simultaneously having to navigate asynchronous syntax and gotchas.
    We achieve separation of concern using generators due to this.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们详细探讨了ES6生成器。生成器是ES6最期待的功能之一。暂停和恢复函数执行的能力为协作编程开辟了许多可能性。生成器的主要优势是它们提供了一种单线程、同步外观的代码风格，同时隐藏了异步的本质。这使得我们能够以非常自然的方式表达程序步骤/语句的流程，而无需同时导航异步语法和陷阱。正是由于这一点，我们使用生成器实现了关注点的分离。
- en: Generators work hand-in-hand with the iterators and iterables contract. These
    are welcome addition to ES6 and significantly boosts the data structures the language
    offers. Iterators provide a simple way to return a (potentially unbounded) sequence
    of values. The `@@iterator` symbol is used to define default iterators for objects,
    making them an iterable.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器与迭代器和可迭代对象合约紧密协作。这些是ES6的受欢迎的补充，并显著增强了语言提供的数据结构。迭代器提供了一种简单的方法来返回一个（可能是无界的）值序列。`@@iterator`符号用于为对象定义默认迭代器，使它们成为可迭代的。
- en: The most important use case for iterators becomes evident when we want to use
    it in a construct that consumes iterables, such as the `for...of` loop. In this
    chapter we also looked at a new loop construct `for...of` introduced in ES6\.
    `for...of` works with a lot of native objects because they have default `@@iterator`
    methods defined. We looked at new additions to the ES6 collections like-Maps,
    Sets, WeakMaps, and Weak Sets. These collections have additional iterator methods-`.entries()`,
    `.values()` and `.keys()`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器最重要的用例在于当我们想要在消耗可迭代对象的构造中（例如`for...of`循环）使用它时变得明显。在本章中，我们还探讨了ES6中引入的新循环构造`for...of`。`for...of`与许多原生对象一起工作，因为它们定义了默认的`@@iterator`方法。我们研究了ES6集合的新增内容，如-Maps、Sets、WeakMaps和Weak
    Sets。这些集合具有额外的迭代器方法-`.entries()`、`.values()`和`.keys()`。
- en: The next chapter will take a detailed look at JavaScript Prototypes.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将详细探讨JavaScript原型。
