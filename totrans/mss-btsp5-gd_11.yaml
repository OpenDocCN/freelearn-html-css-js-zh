- en: '*Chapter 9*: Improving the Website with Interactive Features Using JavaScript'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to improve our website with different interactive
    features. These features will be created using JavaScript and, in most cases,
    the JavaScript-based components of Bootstrap 5\. In the previous chapter, we customized
    the *look* of our website – in this chapter, we will customize the *feel* of our
    website.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap 5 has several interactive components that use JavaScript. Some of
    them are initialized automatically via the use of data attributes, for example,
    the **accordion**, **carousel**, **dropdown**, **offcanvas**, **navbar**, **modal**,
    and **tab** components, which we are currently using on the website. Other components
    require custom initialization using JavaScript, which is the case for popover,
    toast, and tooltip components. Form validation requires custom JavaScript to be
    executed at the correct time, and the spinner component should only be visible
    when the browser is in a loading state. As you can tell, JavaScript is used in
    different ways and for different purposes with Bootstrap 5\.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will see how we can use JavaScript to improve our website
    with interactive features for the following scenarios:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Adding a tooltip component to a form label
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding toast components to product-related actions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the product quantity in the Shopping Cart form
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding form validation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding form submission loading indicators
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding form success messages
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating programmatic tabs navigation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the progress status in the checkout flow
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a lightbox for the product gallery
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these scenarios will influence the *feel* and *behavior* of various parts
    or components of our website, and that’s why they’re included in this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To preview the examples, you will need a code editor and a browser. The source
    code for all code examples can be found here: [https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide](https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To compile Sass to CSS, you will need one of the following:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js**, if you prefer a **command-line interface** (**CLI**) using Terminal
    (Mac) or Command Prompt (Windows)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scout-App**, if you prefer a **graphical user interface** (**GUI**)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**, if you prefer to use an extension from the Visual Studio
    Code Marketplace'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All these approaches are explained in [*Chapter 2*](B17143_02_epub.xhtml#_idTextAnchor033),
    *Using and Compiling Sass*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: About the code examples
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we take a closer look at each example in the coming sections, here are
    a few notes about the code examples that are good to know in advance. I encourage
    you to look at the various files mentioned for each code example in this chapter
    in your own editor so that you can see the changes yourself. Also, I encourage
    you to view the project in the browser so that you can experience the improvements
    being made. This chapter is about interactive features, so to see the real difference
    it makes, it has to be viewed in a browser.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Simple and clean JavaScript code
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The custom JavaScript code for the website is written with simple and clean
    JavaScript. The focus has been to make it easy to understand, and not necessarily
    best practice. All code is placed in the same `script.js` file after the `bootstrap.bundle.min.js`
    Bootstrap 5 JavaScript file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Page IDs
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Page IDs have been added to the `<body>` tag on the `script.js` is generally
    grouped according to which page or pages the code should be executed on, and it
    also appears in roughly the same order as presented in this chapter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated code on the `<body>` tag looks like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml line 13
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: part-2/chapter-9/website/shop.xhtml line 13
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: part-2/chapter-9/website/product.xhtml line 13
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: part-2/chapter-9/website/contact.xhtml line 13
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: part-2/chapter-9/website/wishlist.xhtml line 13
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: part-2/chapter-9/website/cart.xhtml line 13
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And here’s an illustration of what the conditional `if` statements using these
    IDs look like:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The conditional `if` statements for the page variables will not be shown in
    the code examples, since I want those to be as simple as possible. In fact, the
    `if` statements in the source code can be ignored. They are not essential for
    understanding how to implement the various interactive features but are “just”
    used to handle when the different parts of the code are executed to not “break”
    the code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Partial and complete code
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, some of the code examples won’t look like the complete and
    finished source code. This is because, for some of the interactive features, as
    a starting point, I will show you the minimum required code. Then, later on, I
    will add new code to the existing code examples when we add additional features.
    This approach has been chosen to guide you, step by step, on how the code works.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'When a code example is updated with new code for another feature, the new code
    will be highlighted. Here’s an illustration of what that means:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: script.js
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Original and updated code
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some of the code examples show both the original code (from [*Chapter 8*](B17143_08_epub.xhtml#_idTextAnchor179)*,*
    *Customizing the Website Using Bootstrap 5 Variables, Utility API and Sass*) and
    the new updated code. The code will be presented in the same code block above
    each other and with code highlighting for the updated code, as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: script.js
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Line numbers
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make the navigation of the source code easier, line numbers have been added
    to most of the code examples in addition to the file path. This is especially
    true for the JavaScript and Sass code examples but also some of the HTML code
    examples.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Adding a tooltip component to a form label
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will add a tooltip component to a form label in the checkout flow on
    the **Cart** page to provide the user with some helpful contextual information
    triggered on mouse hover (or tap on a touch device). We will add this tooltip
    component to an icon placed next to the label for the input of the security code
    for a credit card found in the form in the **Payment Options** tab pane.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to add the proper markup. After the label
    text, we will add a `.bi-question-circle` icon colored with `.text-info`, and
    then put the required attributes for our tooltip component into that icon. Our
    markup will be updated in the following way:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/cart.xhtml
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Tooltip components are not initialized automatically through the use of `data-bs-toggle=”tooltip”`,
    which we might expect. Instead, for performance reasons, tooltip components must
    be initialized by ourselves. Therefore, we will add the following JavaScript,
    which will initialize all the tooltip components on the page using the `Tooltip()`
    constructor:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 3-7
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: With these changes, you will be able to see the new icon and tooltip component
    in action in the browser. Currently, we only have one tooltip on our website,
    so we could have chosen another implementation, but I like this way since it will
    accommodate any extra tooltip that we might choose to add later.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Adding toast components to product-related actions
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will add toast components that are triggered by different product-related
    actions, for example, when clicking on the action buttons in the footer of the
    product cards on the **Home**, **Shop**, **Cart**, **Product**, and **Wishlist**
    pages.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Before creating the individual toast components, we will add a toast container
    to each of the previously mentioned pages, located just after the opening `<body>`
    tag and before the `<header>` tag. We will use the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, we have a problem the toast container won’t be properly positioned along
    the z axis of our layout. Other components on the page will be placed on top,
    which we don’t want. This is the case for the navbar, button group, and dropdown
    components. We will fix this issue by using one of the following Bootstrap 5 `z-index`
    variables in our custom style sheet:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap/scss/_variables.scss
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'From the preceding list, we can see that the `$zindex-fixed` variable will
    be a good fit. That’s because our toast container is already using the `.position-fixed`
    class, and we want it to appear on top of the currency dropdown in our header
    and below the offcanvas backdrop. Then, we can add the following Sass code to
    our custom style sheet:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/scss/_custom-styles.scss line 12-15
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We’ll use the toast component in the following scenarios:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Adding a product to the cart
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a product to the wishlist
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding all products to the cart
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing a product from the wishlist
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing a product from the cart
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will now go through all of them one by one.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Adding a product to the cart
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to show a toast component when the user clicks on the **Add to cart**
    button, which is located in the footer of the product cards on the **Home**, **Shop**,
    **Product**, and **Wishlist** pages.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will add the following markup to our toast container on all the aforementioned
    pages:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Notice in the preceding code that we have added the `.js-cartToast` class to
    the Bootstrap 5 code for a default toast component. We will use that as a hook
    for the JavaScript that we use to initialize the toast component.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, we will also need to update our `.js-addToCart` class as
    a hook for our JavaScript, too:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now we can show the toast component using the `Toast()` constructor and the
    `show()` method when any of the **Add to cart** buttons are clicked on with the
    following JavaScript code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 20-27
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Using JavaScript Methods with Interactive Bootstrap 5 Components
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: The `show()` method will be used many times for the interactive features in
    this chapter. We will learn more about how to use JavaScript methods with the
    interactive Bootstrap 5 components in [*Chapter 11*](B17143_11_epub.xhtml#_idTextAnchor259),
    *Using Bootstrap 5 with Advanced JavaScript Features*.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Adding a product to the wishlist
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to show a toast component when the user clicks on a button in the **Add
    to wishlist** dropdown located in the footer of the product cards on the **Home**,
    **Shop**, and **Product** pages.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will add the following markup to our toast container on all of the
    aforementioned pages:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Notice in the preceding code that we have added the `.js-wishlistToast` class
    to the Bootstrap 5 code for a default toast component. We will use that as a hook
    for the JavaScript that we use to initialize the toast component.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, we will also need to update the buttons in our `.js-addToWishlist`
    class as a hook for our JavaScript, too:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Now we can initialize the toast component when any of the buttons in any of
    the **Add to wishlist** dropdowns are clicked on using the following JavaScript
    code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 34-41
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Adding all products to the cart
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to show a toast component when the user clicks on the `<aside>` element
    on the Wishlist page.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will add the following markup to our toast container on that page:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/wishlist.xhtml
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Notice in the preceding code that we have added the `.js-addAllToast` class
    to the Bootstrap 5 code for a default toast component. We will use that as a hook
    for the JavaScript that we use to initialize the toast component.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, we will also need to update the `.js-addAllToCart` class
    as a hook for our JavaScript, too:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/wishlist.xhtml
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Now we can initialize the toast component when the **Add all products to cart**
    button is clicked on using the following JavaScript code:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 48-53
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Removing a product from the wishlist
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to show a toast component when the user clicks on the **Remove from
    wishlist** button located in the footer of the product cards on the **Wishlist**
    page. At the same time, we also want to remove the product card from the page
    and the related markup from the DOM.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will add the following markup to our toast container on that page:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/wishlist.xhtml
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Notice in the preceding code that we have added the `.js-wishlistToast` class
    to the Bootstrap 5 code for a default toast component. We will use that as a hook
    for the JavaScript that we use to initialize the toast component.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, we will also need to update our `.js-removeFromWishlist`
    class as a hook for our JavaScript, too:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/wishlist.xhtml
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Now we can initialize the toast component when any of the **Remove from wishlist**
    buttons are clicked on, plus remove the element from the DOM using the following
    JavaScript code:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 55-63
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Removing a product from the cart
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we want to show a toast component when the user clicks on the remove button
    in the products overview in the **Shopping Cart** tab pane of the **Cart** page.
    At the same time, we also want to remove a product from the page and the related
    markup from the DOM.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will add the following markup to our toast container on that page:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/cart.xhtml
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Notice in the preceding code that we have added the `.js-cartToast` class to
    the Bootstrap 5 code for a default toast component. We will use that as a hook
    for the JavaScript that we use to initialize the toast component.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, we will also need to update our remove buttons by adding
    the `.js-removeFromCart` class as a hook for our JavaScript, too:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/cart.xhtml
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'Now we can initialize the toast component when any of the remove buttons are
    clicked on, plus remove the element from the DOM using the following JavaScript
    code:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 71-78
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: Now we are finished adding toast components to the different product-related
    actions. Next, we will move on with a feature to change the quantity of the individual
    products in the shopping cart.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Changing the product quantity in the shopping cart
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the products overview in the shopping cart tab of the `.js-productQuantity`
    class to the input group component for each product and use it as a hook to our
    JavaScript. The markup for our input group component will be updated in the following
    way:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/cart.xhtml
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'Now we can use the following JavaScript to either decrease the quantity (if
    it’s larger than `1`, so it never goes to `0` or below) or increase it:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 81-94
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: After adding this feature, we will continue with adding form validation to all
    our forms.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Adding form validation
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bootstrap 5 has form validation as one of its features, so we want to take
    advantage of that for some of our forms: the newsletter form on the **Home** page,
    the contact form on the **Contact** page, and the two forms in the **Shipping
    Details** and **Payment Options** tabs on the **Cart** page.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to add an `id` attribute to all of our form
    elements, so we can use that to target them from our JavaScript code. Additionally,
    we need to add the `novalidate` attribute to the form elements, which is used
    to disable the browser default feedback tooltips, while still providing access
    to form validation through JavaScript. So, we need to make the following updates
    to our markup:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml line 306
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: part-2/chapter-9/website/contact.xhtml line 185
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: part-2/chapter-9/website/cart.xhtml line 172
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: part-2/chapter-9/website/cart.xhtml line 336
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: Now we need to add feedback messages for both the valid and invalid states.
    This will be added right after each form control that has the required attribute
    and where we want a feedback message. The only place we don’t want such a feedback
    message is for the checkbox in the newsletter form. That’s because the styles
    for the valid and invalid states are enough for the user to understand this kind
    of form control.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how the markup for the first form field of the newsletter form on the
    Home page should be updated to accommodate feedback messages:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: After these feedback messages have been added to all the form fields where we
    want them to be in all of the forms mentioned earlier, we can now implement the
    form validation in JavaScript.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: First, we will store the form in a variable and listen for the `submit` event
    of the form, which is triggered when clicking on the submit button. If the form
    is invalid, we will prevent the form from submitting, and outside this condition,
    the `.was-validated` class is added to the form to show the correct styles and
    feedback messages for the valid and invalid states.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the JavaScript for the form validation of the newsletter form:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 104-123
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: After trying to submit an invalid form, the validation will be run again whenever
    the user updates any of the form fields in the form. It’s only the first validation
    that isn’t run until the user tries to submit the form.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: Adding form submission loading indicators
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加表单提交加载指示器
- en: We want to add a loading indicator for the form submission of the newsletter
    form, contact form, and payment form, so the user can see that the browser is
    waiting for a response from the server. For our website, we won’t submit any forms
    to a server or wait for any response, so we will emulate this behavior.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望为通讯录表单、联系表单和支付表单的表单提交添加加载指示器，这样用户可以看到浏览器正在等待服务器的响应。对于我们的网站，我们不会将任何表单提交到服务器或等待任何响应，因此我们将模拟这种行为。
- en: Our loading indicator will simply be the spinner component of Bootstrap 5 (to
    be precise, the border spinner variation) replacing the text of the submit button.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的加载指示器将简单地是Bootstrap 5的旋转组件（更准确地说，是边框旋转变体），它将替换提交按钮的文本。
- en: The first thing we need to do is to add an `id` attribute to all of the submit
    buttons, where we want a loading indicator to be. Then, we can use those `id`
    attributes later to target the submit buttons from our JavaScript code.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是为所有想要添加加载指示器的提交按钮添加一个`id`属性。然后，我们可以使用这些`id`属性在JavaScript代码中定位提交按钮。
- en: 'This is what the updated markup for our submit buttons will look like:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的提交按钮更新后的标记看起来像什么：
- en: part-2/chapter-9/website/index.xhtml
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/index.xhtml
- en: '[PRE203]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: part-2/chapter-9/website/contact.xhtml
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/contact.xhtml
- en: '[PRE204]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: part-2/chapter-9/website/cart.xhtml
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/cart.xhtml
- en: '[PRE205]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: 'We will add the markup for the spinner component to a variable in our JavaScript
    using the following code:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下代码将旋转组件的标记添加到我们的JavaScript中的一个变量中：
- en: part-2/chapter-9/website/js/script.js line 98-100
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/js/script.js 行 98-100
- en: '[PRE206]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: Now this variable can be used to insert the spinner component into our submit
    button when we need it.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这个变量可以用来在我们需要时将旋转组件插入到我们的提交按钮中。
- en: We will add the code for our loading indicator inside the script used to handle
    form validation. If the form is valid, first, we will prevent the form from submitting
    (so that we can emulate the loading behavior). Then, we will replace the text
    of the submit button with the spinner component and disable the submit button
    too. After that, we will use the `setTimeout()` method to emulate a loading time
    of `2000` milliseconds, after which the spinner component inside the submit button
    will be replaced with some new text.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在处理表单验证的脚本中添加加载指示器的代码。如果表单有效，首先，我们将阻止表单提交（以便我们可以模拟加载行为）。然后，我们将提交按钮的文本替换为旋转组件，并禁用提交按钮。之后，我们将使用`setTimeout()`方法模拟`2000`毫秒的加载时间，之后提交按钮内的旋转组件将被一些新的文本替换。
- en: 'The updated code for form submission with a loading indicator, again using
    the newsletter form as an example, will now look like this:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 使用加载指示器的表单提交更新代码，再次以通讯录表单为例，现在看起来是这样的：
- en: part-2/chapter-9/website/js/script.js line 104-123
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/js/script.js 行 104-123
- en: '[PRE208]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: Now we have added the form submission loading indicators, but we have one more
    interactive feature for our forms. This is a form success message, which we will
    create next.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了表单提交加载指示器，但我们还有一个表单的交互特性。这是表单成功消息，我们将在下一个步骤中创建它。
- en: Adding form success messages
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加表单成功消息
- en: In the previous example, when the loading had finished after form submission,
    the text of the submit button was replaced. Now we want to also add form success
    messages below our forms when loading has finished.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，在表单提交完成后加载结束，提交按钮的文本被替换。现在我们希望在加载完成后，在我们的表单下方也添加表单成功消息。
- en: 'We will use the alert component with the `$success` color for our success message,
    and we will place it inside the collapse component, so it can be displayed with
    a vertical transition. To achieve this, first, we will add the following markup
    to our forms after the submit and reset buttons and just before the closing `</form>`
    tag, again using the newsletter form as an example:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用带有`$success`颜色的警告组件来显示我们的成功消息，并将其放置在折叠组件内，以便可以通过垂直过渡显示。为了实现这一点，首先，我们将添加以下标记到我们的表单中，在提交和重置按钮之后以及`</form>`标签之前，再次以通讯录表单为例：
- en: part-2/chapter-9/website/index.xhtml
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/index.xhtml
- en: '[PRE228]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 'In our JavaScript, we will now update the code used inside the `setTimeout()`
    method. We will store the collapse component from the previous code block inside
    a variable and use that to show the collapse component by using the `Collapse()`
    constructor and the `show()` method. The alert component will then be displayed
    using a vertical transition. Using the newsletter form as an example, the updated
    JavaScript code looks like this:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的JavaScript中，我们现在将更新`setTimeout()`方法内部使用的代码。我们将从上一个代码块中存储的折叠组件放入一个变量中，并使用该变量通过`Collapse()`构造函数和`show()`方法来显示折叠组件。然后，将使用垂直过渡显示警报组件。以新闻通讯表单为例，更新后的JavaScript代码如下所示：
- en: part-2/chapter-9/website/js/script.js line 104-123
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/js/script.js 行 104-123
- en: '[PRE238]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: The last two code blocks use the newsletter form as an example. The code for
    the contact form and payment form is similar.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两个代码块以新闻通讯表单为例。联系表单和支付表单的代码类似。
- en: Creating programmatic tabs navigation
  id: totrans-420
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建程序化标签导航
- en: Currently, the user can use the tabs navigation on the **Cart** page to navigate
    between the three tabs. We want to disable the buttons used for tabs navigation
    and instead make use of programmatic tabs navigation. This means that the active
    tab pane will change automatically when the user goes through the checkout flow
    by using the submit button in each form, labeled **Next**, **Next**, and **Pay**,
    respectively.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，用户可以使用**购物车**页面上的标签导航来在三个标签之间导航。我们希望禁用用于标签导航的按钮，而是使用程序化标签导航。这意味着当用户通过每个表单中的提交按钮（分别标记为**下一步**、**下一步**和**支付**）通过结账流程时，活动标签面板将自动更改。
- en: 'First, we need to update our markup to disable the buttons used for tabs navigation.
    For each button, we will add the `.disabled` class to get the correct styling
    and remove the `data-bs-toggle=”tab”` attribute to disable the functionality to
    change the tab on click. The updated markup looks like this:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要更新我们的标记以禁用用于标签导航的按钮。对于每个按钮，我们将添加`.disabled`类以获得正确的样式，并移除`data-bs-toggle="tab"`属性以禁用点击时更改标签的功能。更新后的标记如下所示：
- en: part-2/chapter-9/website/cart.xhtml
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/cart.xhtml
- en: '[PRE262]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: 'Before adding the JavaScript for changing the tabs programmatically, we will
    create a little helper function that is used to scroll the page to the top with
    a smooth transition. The helper function consists of the following code:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加用于程序化更改标签的JavaScript之前，我们将创建一个辅助函数，用于通过平滑过渡将页面滚动到顶部。该辅助函数由以下代码组成：
- en: part-2/chapter-9/website/js/script.js line 154-160
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/js/script.js 行 154-160
- en: '[PRE285]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: Now we will look at how to create the JavaScript for the programmatic tabs navigation.
    We want to navigate from the **Shopping Cart** tab pane to the **Shipping Details**
    tab pane and again from the **Shipping Details** tab pane to the **Payment Options**
    tab pane. Since each tab needs to be activated individually, and we also need
    different behavior for each form in the **Shopping Cart** and **Shipping Details**
    tab panes, we will go through them one by one.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看看如何创建用于程序化标签导航的JavaScript。我们希望从**购物车**标签面板导航到**运输详情**标签面板，然后再从**运输详情**标签面板导航到**支付选项**标签面板。由于每个标签都需要单独激活，并且我们还需要为**购物车**和**运输详情**标签面板中的每个表单提供不同的行为，我们将逐一处理它们。
- en: Storing Form Values Through the Checkout Flow
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结账流程存储表单值
- en: We’re not storing the input values in each form through the checkout flow when
    we switch to the tab pane. This must be done in a way that will make it work for
    a real project.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们切换到标签面板时，我们不会在结账流程中存储每个表单的输入值。这必须以使其适用于真实项目的方式完成。
- en: Shopping Cart tab pane
  id: totrans-459
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 购物车标签面板
- en: In our JavaScript, we will wait for the `submit` event of the form and then
    prevent the default form submission. After that, we will call our helper function,
    `scrollToTop()`, and add a `setTimeout()` method with a delay of `600` milliseconds.
    This is so that the browser has enough time to scroll the page to the top before
    executing the following code.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的JavaScript中，我们将等待表单的`submit`事件，然后阻止默认的表单提交。之后，我们将调用我们的辅助函数`scrollToTop()`，并添加一个延迟为`600`毫秒的`setTimeout()`方法。这样做是为了让浏览器有足够的时间在执行以下代码之前将页面滚动到顶部。
- en: 'Inside the `setTimeout()` method, we will store the button for the second tab
    in a variable and use that to show the corresponding tab pane using the `Tab()`
    constructor and the `show()` method. The button for the tab is connected to the
    related tab pane through the `data-bs-target` attribute:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 在`setTimeout()`方法内部，我们将存储第二个标签的按钮并将其存储在一个变量中，然后使用该变量通过`Tab()`构造函数和`show()`方法显示相应的标签页。标签按钮通过`data-bs-target`属性与相关的标签页相关联：
- en: part-2/chapter-9/website/js/script.js line 165-177
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/js/script.js 行 165-177
- en: '[PRE292]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: Shipping Details tab pane
  id: totrans-475
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发货详情标签页
- en: 'The difference with this form compared to the `else` part of the conditional
    statement, as follows:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 与条件语句的`else`部分相比，这个表单的不同之处如下：
- en: part-2/chapter-9/website/js/script.js line 179-198
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/js/script.js 行 179-198
- en: '[PRE304]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: Now we have created the programmatic tabs navigation and can continue with a
    feature to update the progress status in the checkout flow.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了程序化标签导航，可以继续添加一个功能来更新结账流程中的进度状态。
- en: Updating the progress status in the checkout flow
  id: totrans-497
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在结账流程中更新进度状态
- en: The last thing we want to improve for the checkout flow on the **Cart** page
    is to update the progress component as the tab panes are switched. In the **Shopping
    Cart** tab pane, initially, the progress should be 0 percent, and when the switch
    to the **Shipping Details** tab pane happens, the progress should be updated to
    33 percent. When the form on the **Shipping Details** tab pane is submitted and
    the switch to the **Payment Options** tab pane happens, the progress should be
    updated to 67 percent. Finally, when the form on the **Payment Options** tab pane
    has been submitted and the success message has been displayed, the progress should
    be updated to 100 percent.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要改进的最后一个功能是在**购物车**页面上的结账流程，即当标签页切换时更新进度组件。在**购物车**标签页中，初始进度应为0%，当切换到**发货详情**标签页时，进度应更新为33%。当**发货详情**标签页上的表单提交并切换到**支付选项**标签页时，进度应更新为67%。最后，当**支付选项**标签页上的表单提交并显示成功消息后，进度应更新为100%。
- en: To update the progress component, we need to change the `width` property and
    the `aria-valuenow` attribute of the `.progress-bar` element (a child element
    of the progress component). The value of the `aria-valuenow` attribute will be
    updated directly with JavaScript, and the value of the `width` property can be
    updated either directly with inline styling or indirectly with classes. We will
    look at both approaches.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新进度组件，我们需要更改`.progress-bar`元素（进度组件的子元素）的`width`属性和`aria-valuenow`属性。`aria-valuenow`属性的值将直接通过JavaScript更新，而`width`属性的值可以通过内联样式直接更新或通过类间接更新。我们将探讨这两种方法。
- en: Updating the progress using inline styling
  id: totrans-500
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用内联样式更新进度
- en: 'For this approach, first, we will update our markup with inline styling for
    the `width` of the element. We will set it to the initial value of `0`, and this
    is necessary when we want to have the transition effect from one value to another.
    Not setting the `width` to `0` in advance will make the width of the `.progress-bar`
    element “jump” from one value to the other. Here’s the updated code:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种方法，首先，我们将使用内联样式更新我们的标记`width`属性。我们将将其设置为初始值`0`，这在我们要从一个值过渡到另一个值时是必要的。如果事先不将`width`设置为`0`，则`.progress-bar`元素的宽度将从一个值“跳”到另一个值。以下是更新的代码：
- en: part-2/chapter-9/website/cart.xhtml
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/cart.xhtml
- en: '[PRE322]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: 'In our JavaScript, first, we will store the `.progress-bar` element of our
    progress component in a variable like so:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的JavaScript中，首先，我们将进度组件的`.progress-bar`元素存储在一个变量中，如下所示：
- en: part-2/chapter-9/website/js/script.js line 162-163
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/js/script.js 行 162-163
- en: '[PRE328]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: 'Then, we will add two more lines of JavaScript at the end of the `setTimeout()`
    method for each form on the Cart page. This will update the value of the inline
    styling and the `aria-valuenow` attribute. The updated code will look like this,
    using the **Shopping Cart** form as an example:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将在购物页面上每个表单的`setTimeout()`方法末尾添加两行JavaScript代码。这将更新内联样式和`aria-valuenow`属性的值。更新的代码如下，以**购物车**表单为例：
- en: part-2/chapter-9/website/js/script.js line 165-177
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/js/script.js 行 165-177
- en: '[PRE331]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: We won’t use this approach with inline styling. That’s because we want to make
    use of the width utility classes, `.w-33` and `.w-67`, which we generated using
    the utility API when we customized the styling of our website.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: Updating the progress using classes
  id: totrans-531
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this approach to work, we also need to specify the width of `.progress-element`
    explicitly to be able to get the transition effect when adding width utility classes.
    We could keep the inline styling in our markup, but since we want to avoid inline
    styling for this approach, instead, we will specify the width in our custom style
    sheet as follows:'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/scss/_custom-styles.scss line 17-20
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: 'Now, in our JavaScript, we will add and remove the width utility classes, `.w-33`,
    `.w-67`, and `.w-100`, to achieve the same result as before. The code to update
    the `aria-valuenow` attribute will remain the same, and the code will still be
    placed at the end of the `setTimeout()` method. It will look like this in the
    three different forms:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 174-175, line 192-194, line 216-218
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE350]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: 'The last thing we want to do is to stop the animation for the progress component
    when it reaches 100 percent. To stop this, we simply need to remove the `.progress-bar-animated`
    class from the `.progress-bar` element when the transition from 67 percent to
    100 percent has finished. In the previous chapter, when we customized the website
    using Bootstrap 5 variables, we set the animation duration of the `.progress-bar`
    element to 0.5 seconds using the `$progress-bar-animation-timing` variable in
    the `_default-variable-overrides.scss` file. Therefore, we will put the code to
    remove the `.progress-bar-animated` class inside a `setTimeout()` method with
    a delay of `500` milliseconds like so:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 219-221
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE361]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: Now we are done adding interactive features to our Cart page, and we only have
    one more interactive feature to create.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: Creating a lightbox for the product gallery
  id: totrans-559
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last interactive feature we want to make for the website is a lightbox for
    the product gallery on the **Product** page. We will simply use the modal component
    to display a large image when clicking on one of the thumbnail images.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will insert the minimum code for a modal at the bottom of our `product.xhtml`
    file, after the closing `</footer>` tag and before the two `<script>` tags. We
    will make the modal large and vertically centered by using the `.modal-xl` and
    `.modal-dialog-centered` modifier classes. We won’t have any modal header, modal
    body, or modal footer since we don’t want any padding or other UI elements in
    the modal. We only want our large image and the backdrop of the modal surrounding
    it. It will still be possible to close the modal using the *Escape* key or by
    clicking outside of it somewhere on the backdrop. The class on the `<img>` tag
    will be used as a hook for our JavaScript:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/product.xhtml line 408-414
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE365]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: 'Now, we need to update the markup for the links surrounding the thumbnail images.
    A class will be used as a hook for our JavaScript, two data attributes will be
    used to initialize the modal component, and one data attribute will be used to
    store the URL for the large image that we want to show in the modal. The updated
    code for the first thumbnail image will look like this:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要更新围绕缩略图的链接的标记。将使用一个类作为我们的JavaScript的钩子，两个数据属性将用于初始化模态组件，一个数据属性将用于存储我们想在模态中显示的大图的URL。第一个缩略图图像的更新代码将如下所示：
- en: part-2/chapter-9/website/product.xhtml line 85
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/product.xhtml 行 85
- en: '[PRE372]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: 'In our JavaScript, first, we will store all the image thumbnails in our product
    gallery in a variable using the class we just added as a hook and store the empty
    image in the modal in a variable using the class we provided as a hook earlier.
    Then, we will loop through the image thumbnails and listen for the `click` event.
    In that click event, we will set the empty `src` attribute of the `<img>` tag
    to the value of the `data-src` attribute defined on the image thumbnail. Since
    this code will be executed at the same time the modal is triggered, a large image
    will now be displayed inside of the modal. The next time an image thumbnail is
    clicked on, the `src` attribute will be replaced by a new value from the `data-src`
    attribute. The JavaScript for this is as follows:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的JavaScript中，首先，我们将使用我们刚刚添加的类作为钩子，将产品画廊中的所有图像缩略图存储在一个变量中，并使用我们之前提供的类作为钩子将模态中的空图像存储在一个变量中。然后，我们将遍历图像缩略图并监听`click`事件。在点击事件中，我们将`<img>`标签的空`src`属性设置为图像缩略图上定义的`data-src`属性值。由于此代码将在模态触发时同时执行，因此现在将在模态内部显示大图像。下次点击图像缩略图时，`src`属性将被替换为`data-src`属性的新值。此JavaScript代码如下所示：
- en: part-2/chapter-9/website/js/script.js line 231-238
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: part-2/chapter-9/website/js/script.js 行 231-238
- en: '[PRE373]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: Now we have created our own lightbox for the product gallery and have finished
    adding interactive features to our website.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为产品画廊创建了自己的灯箱，并且已经完成了向我们的网站添加交互式功能的工作。
- en: Summary
  id: totrans-587
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how we can improve our website with interactive
    features using JavaScript. Some of these features were based on Bootstrap 5 components
    that require custom JavaScript to work, while other features were created without
    the use of Bootstrap 5 components.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用JavaScript通过交互式功能来改进我们的网站。其中一些功能基于需要自定义JavaScript才能工作的Bootstrap
    5组件，而其他功能则是在不使用Bootstrap 5组件的情况下创建的。
- en: When going through all the scenarios in this chapter, we saw how it makes the
    website more appealing and engaging with these new interactive features being
    added.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览本章的所有场景时，我们看到了如何通过添加这些新的交互式功能使网站更具吸引力和互动性。
- en: This chapter concludes Part 2 of this book, which was centered around how to
    create a website using only Bootstrap 5 and then customizing and improving it
    with Sass and JavaScript. In Part 3, we will uncover more ways to work with Bootstrap
    5 using the Sass and CSS features and learn how to optimize the usage of the Bootstrap
    5 code and files.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 本章总结了本书的第二部分，这部分内容主要围绕如何仅使用Bootstrap 5创建一个网站，然后通过Sass和JavaScript对其进行定制和改进。在第三部分，我们将揭示更多使用Sass和CSS功能与Bootstrap
    5一起工作的方法，并学习如何优化Bootstrap 5代码和文件的使用。
