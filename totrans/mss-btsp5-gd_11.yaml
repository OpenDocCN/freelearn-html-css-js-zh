- en: '*Chapter 9*: Improving the Website with Interactive Features Using JavaScript'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to improve our website with different interactive
    features. These features will be created using JavaScript and, in most cases,
    the JavaScript-based components of Bootstrap 5\. In the previous chapter, we customized
    the *look* of our website – in this chapter, we will customize the *feel* of our
    website.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap 5 has several interactive components that use JavaScript. Some of
    them are initialized automatically via the use of data attributes, for example,
    the **accordion**, **carousel**, **dropdown**, **offcanvas**, **navbar**, **modal**,
    and **tab** components, which we are currently using on the website. Other components
    require custom initialization using JavaScript, which is the case for popover,
    toast, and tooltip components. Form validation requires custom JavaScript to be
    executed at the correct time, and the spinner component should only be visible
    when the browser is in a loading state. As you can tell, JavaScript is used in
    different ways and for different purposes with Bootstrap 5\.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will see how we can use JavaScript to improve our website
    with interactive features for the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a tooltip component to a form label
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding toast components to product-related actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the product quantity in the Shopping Cart form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding form validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding form submission loading indicators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding form success messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating programmatic tabs navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the progress status in the checkout flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a lightbox for the product gallery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these scenarios will influence the *feel* and *behavior* of various parts
    or components of our website, and that’s why they’re included in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To preview the examples, you will need a code editor and a browser. The source
    code for all code examples can be found here: [https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide](https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To compile Sass to CSS, you will need one of the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js**, if you prefer a **command-line interface** (**CLI**) using Terminal
    (Mac) or Command Prompt (Windows)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scout-App**, if you prefer a **graphical user interface** (**GUI**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**, if you prefer to use an extension from the Visual Studio
    Code Marketplace'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All these approaches are explained in [*Chapter 2*](B17143_02_epub.xhtml#_idTextAnchor033),
    *Using and Compiling Sass*.
  prefs: []
  type: TYPE_NORMAL
- en: About the code examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we take a closer look at each example in the coming sections, here are
    a few notes about the code examples that are good to know in advance. I encourage
    you to look at the various files mentioned for each code example in this chapter
    in your own editor so that you can see the changes yourself. Also, I encourage
    you to view the project in the browser so that you can experience the improvements
    being made. This chapter is about interactive features, so to see the real difference
    it makes, it has to be viewed in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Simple and clean JavaScript code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The custom JavaScript code for the website is written with simple and clean
    JavaScript. The focus has been to make it easy to understand, and not necessarily
    best practice. All code is placed in the same `script.js` file after the `bootstrap.bundle.min.js`
    Bootstrap 5 JavaScript file.
  prefs: []
  type: TYPE_NORMAL
- en: Page IDs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Page IDs have been added to the `<body>` tag on the `script.js` is generally
    grouped according to which page or pages the code should be executed on, and it
    also appears in roughly the same order as presented in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated code on the `<body>` tag looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml line 13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: part-2/chapter-9/website/shop.xhtml line 13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: part-2/chapter-9/website/product.xhtml line 13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: part-2/chapter-9/website/contact.xhtml line 13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: part-2/chapter-9/website/wishlist.xhtml line 13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: part-2/chapter-9/website/cart.xhtml line 13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s an illustration of what the conditional `if` statements using these
    IDs look like:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The conditional `if` statements for the page variables will not be shown in
    the code examples, since I want those to be as simple as possible. In fact, the
    `if` statements in the source code can be ignored. They are not essential for
    understanding how to implement the various interactive features but are “just”
    used to handle when the different parts of the code are executed to not “break”
    the code.
  prefs: []
  type: TYPE_NORMAL
- en: Partial and complete code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, some of the code examples won’t look like the complete and
    finished source code. This is because, for some of the interactive features, as
    a starting point, I will show you the minimum required code. Then, later on, I
    will add new code to the existing code examples when we add additional features.
    This approach has been chosen to guide you, step by step, on how the code works.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a code example is updated with new code for another feature, the new code
    will be highlighted. Here’s an illustration of what that means:'
  prefs: []
  type: TYPE_NORMAL
- en: script.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Original and updated code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some of the code examples show both the original code (from [*Chapter 8*](B17143_08_epub.xhtml#_idTextAnchor179)*,*
    *Customizing the Website Using Bootstrap 5 Variables, Utility API and Sass*) and
    the new updated code. The code will be presented in the same code block above
    each other and with code highlighting for the updated code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: script.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Line numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make the navigation of the source code easier, line numbers have been added
    to most of the code examples in addition to the file path. This is especially
    true for the JavaScript and Sass code examples but also some of the HTML code
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a tooltip component to a form label
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will add a tooltip component to a form label in the checkout flow on
    the **Cart** page to provide the user with some helpful contextual information
    triggered on mouse hover (or tap on a touch device). We will add this tooltip
    component to an icon placed next to the label for the input of the security code
    for a credit card found in the form in the **Payment Options** tab pane.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to add the proper markup. After the label
    text, we will add a `.bi-question-circle` icon colored with `.text-info`, and
    then put the required attributes for our tooltip component into that icon. Our
    markup will be updated in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/cart.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Tooltip components are not initialized automatically through the use of `data-bs-toggle=”tooltip”`,
    which we might expect. Instead, for performance reasons, tooltip components must
    be initialized by ourselves. Therefore, we will add the following JavaScript,
    which will initialize all the tooltip components on the page using the `Tooltip()`
    constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 3-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: With these changes, you will be able to see the new icon and tooltip component
    in action in the browser. Currently, we only have one tooltip on our website,
    so we could have chosen another implementation, but I like this way since it will
    accommodate any extra tooltip that we might choose to add later.
  prefs: []
  type: TYPE_NORMAL
- en: Adding toast components to product-related actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will add toast components that are triggered by different product-related
    actions, for example, when clicking on the action buttons in the footer of the
    product cards on the **Home**, **Shop**, **Cart**, **Product**, and **Wishlist**
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before creating the individual toast components, we will add a toast container
    to each of the previously mentioned pages, located just after the opening `<body>`
    tag and before the `<header>` tag. We will use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have a problem the toast container won’t be properly positioned along
    the z axis of our layout. Other components on the page will be placed on top,
    which we don’t want. This is the case for the navbar, button group, and dropdown
    components. We will fix this issue by using one of the following Bootstrap 5 `z-index`
    variables in our custom style sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap/scss/_variables.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding list, we can see that the `$zindex-fixed` variable will
    be a good fit. That’s because our toast container is already using the `.position-fixed`
    class, and we want it to appear on top of the currency dropdown in our header
    and below the offcanvas backdrop. Then, we can add the following Sass code to
    our custom style sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/scss/_custom-styles.scss line 12-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll use the toast component in the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a product to the cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a product to the wishlist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding all products to the cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing a product from the wishlist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing a product from the cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will now go through all of them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a product to the cart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to show a toast component when the user clicks on the **Add to cart**
    button, which is located in the footer of the product cards on the **Home**, **Shop**,
    **Product**, and **Wishlist** pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will add the following markup to our toast container on all the aforementioned
    pages:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Notice in the preceding code that we have added the `.js-cartToast` class to
    the Bootstrap 5 code for a default toast component. We will use that as a hook
    for the JavaScript that we use to initialize the toast component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, we will also need to update our `.js-addToCart` class as
    a hook for our JavaScript, too:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can show the toast component using the `Toast()` constructor and the
    `show()` method when any of the **Add to cart** buttons are clicked on with the
    following JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 20-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Using JavaScript Methods with Interactive Bootstrap 5 Components
  prefs: []
  type: TYPE_NORMAL
- en: The `show()` method will be used many times for the interactive features in
    this chapter. We will learn more about how to use JavaScript methods with the
    interactive Bootstrap 5 components in [*Chapter 11*](B17143_11_epub.xhtml#_idTextAnchor259),
    *Using Bootstrap 5 with Advanced JavaScript Features*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a product to the wishlist
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to show a toast component when the user clicks on a button in the **Add
    to wishlist** dropdown located in the footer of the product cards on the **Home**,
    **Shop**, and **Product** pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will add the following markup to our toast container on all of the
    aforementioned pages:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Notice in the preceding code that we have added the `.js-wishlistToast` class
    to the Bootstrap 5 code for a default toast component. We will use that as a hook
    for the JavaScript that we use to initialize the toast component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, we will also need to update the buttons in our `.js-addToWishlist`
    class as a hook for our JavaScript, too:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can initialize the toast component when any of the buttons in any of
    the **Add to wishlist** dropdowns are clicked on using the following JavaScript
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 34-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Adding all products to the cart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to show a toast component when the user clicks on the `<aside>` element
    on the Wishlist page.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will add the following markup to our toast container on that page:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/wishlist.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Notice in the preceding code that we have added the `.js-addAllToast` class
    to the Bootstrap 5 code for a default toast component. We will use that as a hook
    for the JavaScript that we use to initialize the toast component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, we will also need to update the `.js-addAllToCart` class
    as a hook for our JavaScript, too:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/wishlist.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can initialize the toast component when the **Add all products to cart**
    button is clicked on using the following JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 48-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Removing a product from the wishlist
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to show a toast component when the user clicks on the **Remove from
    wishlist** button located in the footer of the product cards on the **Wishlist**
    page. At the same time, we also want to remove the product card from the page
    and the related markup from the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will add the following markup to our toast container on that page:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/wishlist.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Notice in the preceding code that we have added the `.js-wishlistToast` class
    to the Bootstrap 5 code for a default toast component. We will use that as a hook
    for the JavaScript that we use to initialize the toast component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, we will also need to update our `.js-removeFromWishlist`
    class as a hook for our JavaScript, too:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/wishlist.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can initialize the toast component when any of the **Remove from wishlist**
    buttons are clicked on, plus remove the element from the DOM using the following
    JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 55-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Removing a product from the cart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we want to show a toast component when the user clicks on the remove button
    in the products overview in the **Shopping Cart** tab pane of the **Cart** page.
    At the same time, we also want to remove a product from the page and the related
    markup from the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will add the following markup to our toast container on that page:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/cart.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: Notice in the preceding code that we have added the `.js-cartToast` class to
    the Bootstrap 5 code for a default toast component. We will use that as a hook
    for the JavaScript that we use to initialize the toast component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, we will also need to update our remove buttons by adding
    the `.js-removeFromCart` class as a hook for our JavaScript, too:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/cart.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can initialize the toast component when any of the remove buttons are
    clicked on, plus remove the element from the DOM using the following JavaScript
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 71-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: Now we are finished adding toast components to the different product-related
    actions. Next, we will move on with a feature to change the quantity of the individual
    products in the shopping cart.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the product quantity in the shopping cart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the products overview in the shopping cart tab of the `.js-productQuantity`
    class to the input group component for each product and use it as a hook to our
    JavaScript. The markup for our input group component will be updated in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/cart.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can use the following JavaScript to either decrease the quantity (if
    it’s larger than `1`, so it never goes to `0` or below) or increase it:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 81-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: After adding this feature, we will continue with adding form validation to all
    our forms.
  prefs: []
  type: TYPE_NORMAL
- en: Adding form validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bootstrap 5 has form validation as one of its features, so we want to take
    advantage of that for some of our forms: the newsletter form on the **Home** page,
    the contact form on the **Contact** page, and the two forms in the **Shipping
    Details** and **Payment Options** tabs on the **Cart** page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to add an `id` attribute to all of our form
    elements, so we can use that to target them from our JavaScript code. Additionally,
    we need to add the `novalidate` attribute to the form elements, which is used
    to disable the browser default feedback tooltips, while still providing access
    to form validation through JavaScript. So, we need to make the following updates
    to our markup:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml line 306
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: part-2/chapter-9/website/contact.xhtml line 185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: part-2/chapter-9/website/cart.xhtml line 172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: part-2/chapter-9/website/cart.xhtml line 336
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: Now we need to add feedback messages for both the valid and invalid states.
    This will be added right after each form control that has the required attribute
    and where we want a feedback message. The only place we don’t want such a feedback
    message is for the checkbox in the newsletter form. That’s because the styles
    for the valid and invalid states are enough for the user to understand this kind
    of form control.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how the markup for the first form field of the newsletter form on the
    Home page should be updated to accommodate feedback messages:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: After these feedback messages have been added to all the form fields where we
    want them to be in all of the forms mentioned earlier, we can now implement the
    form validation in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will store the form in a variable and listen for the `submit` event
    of the form, which is triggered when clicking on the submit button. If the form
    is invalid, we will prevent the form from submitting, and outside this condition,
    the `.was-validated` class is added to the form to show the correct styles and
    feedback messages for the valid and invalid states.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the JavaScript for the form validation of the newsletter form:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 104-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: After trying to submit an invalid form, the validation will be run again whenever
    the user updates any of the form fields in the form. It’s only the first validation
    that isn’t run until the user tries to submit the form.
  prefs: []
  type: TYPE_NORMAL
- en: Adding form submission loading indicators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to add a loading indicator for the form submission of the newsletter
    form, contact form, and payment form, so the user can see that the browser is
    waiting for a response from the server. For our website, we won’t submit any forms
    to a server or wait for any response, so we will emulate this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Our loading indicator will simply be the spinner component of Bootstrap 5 (to
    be precise, the border spinner variation) replacing the text of the submit button.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do is to add an `id` attribute to all of the submit
    buttons, where we want a loading indicator to be. Then, we can use those `id`
    attributes later to target the submit buttons from our JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the updated markup for our submit buttons will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: part-2/chapter-9/website/contact.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: part-2/chapter-9/website/cart.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add the markup for the spinner component to a variable in our JavaScript
    using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 98-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: Now this variable can be used to insert the spinner component into our submit
    button when we need it.
  prefs: []
  type: TYPE_NORMAL
- en: We will add the code for our loading indicator inside the script used to handle
    form validation. If the form is valid, first, we will prevent the form from submitting
    (so that we can emulate the loading behavior). Then, we will replace the text
    of the submit button with the spinner component and disable the submit button
    too. After that, we will use the `setTimeout()` method to emulate a loading time
    of `2000` milliseconds, after which the spinner component inside the submit button
    will be replaced with some new text.
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated code for form submission with a loading indicator, again using
    the newsletter form as an example, will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 104-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: Now we have added the form submission loading indicators, but we have one more
    interactive feature for our forms. This is a form success message, which we will
    create next.
  prefs: []
  type: TYPE_NORMAL
- en: Adding form success messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous example, when the loading had finished after form submission,
    the text of the submit button was replaced. Now we want to also add form success
    messages below our forms when loading has finished.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the alert component with the `$success` color for our success message,
    and we will place it inside the collapse component, so it can be displayed with
    a vertical transition. To achieve this, first, we will add the following markup
    to our forms after the submit and reset buttons and just before the closing `</form>`
    tag, again using the newsletter form as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: 'In our JavaScript, we will now update the code used inside the `setTimeout()`
    method. We will store the collapse component from the previous code block inside
    a variable and use that to show the collapse component by using the `Collapse()`
    constructor and the `show()` method. The alert component will then be displayed
    using a vertical transition. Using the newsletter form as an example, the updated
    JavaScript code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 104-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: The last two code blocks use the newsletter form as an example. The code for
    the contact form and payment form is similar.
  prefs: []
  type: TYPE_NORMAL
- en: Creating programmatic tabs navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, the user can use the tabs navigation on the **Cart** page to navigate
    between the three tabs. We want to disable the buttons used for tabs navigation
    and instead make use of programmatic tabs navigation. This means that the active
    tab pane will change automatically when the user goes through the checkout flow
    by using the submit button in each form, labeled **Next**, **Next**, and **Pay**,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to update our markup to disable the buttons used for tabs navigation.
    For each button, we will add the `.disabled` class to get the correct styling
    and remove the `data-bs-toggle=”tab”` attribute to disable the functionality to
    change the tab on click. The updated markup looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/cart.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: 'Before adding the JavaScript for changing the tabs programmatically, we will
    create a little helper function that is used to scroll the page to the top with
    a smooth transition. The helper function consists of the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 154-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: Now we will look at how to create the JavaScript for the programmatic tabs navigation.
    We want to navigate from the **Shopping Cart** tab pane to the **Shipping Details**
    tab pane and again from the **Shipping Details** tab pane to the **Payment Options**
    tab pane. Since each tab needs to be activated individually, and we also need
    different behavior for each form in the **Shopping Cart** and **Shipping Details**
    tab panes, we will go through them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Storing Form Values Through the Checkout Flow
  prefs: []
  type: TYPE_NORMAL
- en: We’re not storing the input values in each form through the checkout flow when
    we switch to the tab pane. This must be done in a way that will make it work for
    a real project.
  prefs: []
  type: TYPE_NORMAL
- en: Shopping Cart tab pane
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our JavaScript, we will wait for the `submit` event of the form and then
    prevent the default form submission. After that, we will call our helper function,
    `scrollToTop()`, and add a `setTimeout()` method with a delay of `600` milliseconds.
    This is so that the browser has enough time to scroll the page to the top before
    executing the following code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `setTimeout()` method, we will store the button for the second tab
    in a variable and use that to show the corresponding tab pane using the `Tab()`
    constructor and the `show()` method. The button for the tab is connected to the
    related tab pane through the `data-bs-target` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 165-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: Shipping Details tab pane
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The difference with this form compared to the `else` part of the conditional
    statement, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 179-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: Now we have created the programmatic tabs navigation and can continue with a
    feature to update the progress status in the checkout flow.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the progress status in the checkout flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last thing we want to improve for the checkout flow on the **Cart** page
    is to update the progress component as the tab panes are switched. In the **Shopping
    Cart** tab pane, initially, the progress should be 0 percent, and when the switch
    to the **Shipping Details** tab pane happens, the progress should be updated to
    33 percent. When the form on the **Shipping Details** tab pane is submitted and
    the switch to the **Payment Options** tab pane happens, the progress should be
    updated to 67 percent. Finally, when the form on the **Payment Options** tab pane
    has been submitted and the success message has been displayed, the progress should
    be updated to 100 percent.
  prefs: []
  type: TYPE_NORMAL
- en: To update the progress component, we need to change the `width` property and
    the `aria-valuenow` attribute of the `.progress-bar` element (a child element
    of the progress component). The value of the `aria-valuenow` attribute will be
    updated directly with JavaScript, and the value of the `width` property can be
    updated either directly with inline styling or indirectly with classes. We will
    look at both approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the progress using inline styling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this approach, first, we will update our markup with inline styling for
    the `width` of the element. We will set it to the initial value of `0`, and this
    is necessary when we want to have the transition effect from one value to another.
    Not setting the `width` to `0` in advance will make the width of the `.progress-bar`
    element “jump” from one value to the other. Here’s the updated code:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/cart.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: 'In our JavaScript, first, we will store the `.progress-bar` element of our
    progress component in a variable like so:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 162-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will add two more lines of JavaScript at the end of the `setTimeout()`
    method for each form on the Cart page. This will update the value of the inline
    styling and the `aria-valuenow` attribute. The updated code will look like this,
    using the **Shopping Cart** form as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 165-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: We won’t use this approach with inline styling. That’s because we want to make
    use of the width utility classes, `.w-33` and `.w-67`, which we generated using
    the utility API when we customized the styling of our website.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the progress using classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this approach to work, we also need to specify the width of `.progress-element`
    explicitly to be able to get the transition effect when adding width utility classes.
    We could keep the inline styling in our markup, but since we want to avoid inline
    styling for this approach, instead, we will specify the width in our custom style
    sheet as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/scss/_custom-styles.scss line 17-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in our JavaScript, we will add and remove the width utility classes, `.w-33`,
    `.w-67`, and `.w-100`, to achieve the same result as before. The code to update
    the `aria-valuenow` attribute will remain the same, and the code will still be
    placed at the end of the `setTimeout()` method. It will look like this in the
    three different forms:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 174-175, line 192-194, line 216-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: 'The last thing we want to do is to stop the animation for the progress component
    when it reaches 100 percent. To stop this, we simply need to remove the `.progress-bar-animated`
    class from the `.progress-bar` element when the transition from 67 percent to
    100 percent has finished. In the previous chapter, when we customized the website
    using Bootstrap 5 variables, we set the animation duration of the `.progress-bar`
    element to 0.5 seconds using the `$progress-bar-animation-timing` variable in
    the `_default-variable-overrides.scss` file. Therefore, we will put the code to
    remove the `.progress-bar-animated` class inside a `setTimeout()` method with
    a delay of `500` milliseconds like so:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 219-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: Now we are done adding interactive features to our Cart page, and we only have
    one more interactive feature to create.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a lightbox for the product gallery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last interactive feature we want to make for the website is a lightbox for
    the product gallery on the **Product** page. We will simply use the modal component
    to display a large image when clicking on one of the thumbnail images.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will insert the minimum code for a modal at the bottom of our `product.xhtml`
    file, after the closing `</footer>` tag and before the two `<script>` tags. We
    will make the modal large and vertically centered by using the `.modal-xl` and
    `.modal-dialog-centered` modifier classes. We won’t have any modal header, modal
    body, or modal footer since we don’t want any padding or other UI elements in
    the modal. We only want our large image and the backdrop of the modal surrounding
    it. It will still be possible to close the modal using the *Escape* key or by
    clicking outside of it somewhere on the backdrop. The class on the `<img>` tag
    will be used as a hook for our JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/product.xhtml line 408-414
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to update the markup for the links surrounding the thumbnail images.
    A class will be used as a hook for our JavaScript, two data attributes will be
    used to initialize the modal component, and one data attribute will be used to
    store the URL for the large image that we want to show in the modal. The updated
    code for the first thumbnail image will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/product.xhtml line 85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: 'In our JavaScript, first, we will store all the image thumbnails in our product
    gallery in a variable using the class we just added as a hook and store the empty
    image in the modal in a variable using the class we provided as a hook earlier.
    Then, we will loop through the image thumbnails and listen for the `click` event.
    In that click event, we will set the empty `src` attribute of the `<img>` tag
    to the value of the `data-src` attribute defined on the image thumbnail. Since
    this code will be executed at the same time the modal is triggered, a large image
    will now be displayed inside of the modal. The next time an image thumbnail is
    clicked on, the `src` attribute will be replaced by a new value from the `data-src`
    attribute. The JavaScript for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: part-2/chapter-9/website/js/script.js line 231-238
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: Now we have created our own lightbox for the product gallery and have finished
    adding interactive features to our website.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how we can improve our website with interactive
    features using JavaScript. Some of these features were based on Bootstrap 5 components
    that require custom JavaScript to work, while other features were created without
    the use of Bootstrap 5 components.
  prefs: []
  type: TYPE_NORMAL
- en: When going through all the scenarios in this chapter, we saw how it makes the
    website more appealing and engaging with these new interactive features being
    added.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter concludes Part 2 of this book, which was centered around how to
    create a website using only Bootstrap 5 and then customizing and improving it
    with Sass and JavaScript. In Part 3, we will uncover more ways to work with Bootstrap
    5 using the Sass and CSS features and learn how to optimize the usage of the Bootstrap
    5 code and files.
  prefs: []
  type: TYPE_NORMAL
