["```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Caching Critical Resources</title>\n      <link rel=\"stylesheet\" href=\"style.css\">\n    </head>\n    <body>\n      <section id=\"registration-status\">\n        <p>Registration status: <strong id=\"status\"></strong></p>\n        <input type=\"button\" id=\"resetButton\" value=\"Reset\" />\n      </section>\n\n      <main>\n        <section>\n        <h1>Brand Game</h1>\n        <p>Attempts: <span id=\"attempts\">0</span></p>\n        <select id=\"choice\">\n          <option value=\"0\">Apple</option>\n          <option value=\"1\">Google</option>\n          <option value=\"2\">Adobe</option>\n          <option value=\"3\">Facebook</option>\n          <option value=\"4\">Amazon</option>\n        </select>\n        <input type=\"button\" id=\"tryButton\" value=\"Try\" />\n        </section>\n        <section>\n          <img src=\"img/\" id=\"logo\" data-image=\"0\" />\n          <p id=\"result\">\n        </section>\n        <div id=\"notification\" class=\"hidden\">\n          <p>Ready to go offline!</p>\n        </div>\n      </main>\n\n      <script src=\"img/index.js\"></script>\n      <script src=\"img/game.js\"></script>\n    </body>\n    </html>\n    ```", "```js\n    'use strict';\n\n    var scope = {\n      scope: './'\n    };\n\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register(\n        'service-worker.js',\n        scope\n      ).then( function(serviceWorker) {\n        printStatus('successful');\n      }).catch(function(error) {\n        printStatus(error);\n      });\n    } else {\n      printStatus('unavailable');\n    }\n\n    navigator.serviceWorker.addEventListener('controllerchange',\n      function(event) {\n        console.log('EVENT: controllerchange', event);\n\n        navigator.serviceWorker.controller\n          .addEventListener('statechange',\n            function() {\n              console.log('EVENT: statechange', this.state);\n              if (this.state === 'activated') {\n                document.querySelector('#notification')\n    \t\t\t.classList.remove('hidden');\n              }\n            }\n          );\n      }\n    );\n\n    function printStatus(status) {\n      document.querySelector('#status').innerHTML = status;\n    }\n\n    document.querySelector('#resetButton').addEventListener('click',\n      function() {\n        navigator.serviceWorker.getRegistration().then(function(registration) {\n          registration.unregister();\n          window.location.reload();\n        });\n      }\n    );\n    ```", "```js\n    'use strict';\n\n    var attempts = 0,\n      images = [\n          'adobe',\n          'apple',\n          'google',\n          'facebook',\n          'amazon'\n        ];\n\n    document.getElementById('tryButton').addEventListener('click', function() {\n      var imageElement = document.getElementById('logo'),\n        choice = document.querySelector('#choice').value,\n        attemptsEl = document.querySelector('#attempts'),\n        result = document.querySelector('#result'),\n        currentIndex = imageElement.getAttribute('data-image'),\n        newIndex = getRandomIndex();\n\n      do {\n        newIndex = getRandomIndex();\n      } while(newIndex === currentIndex);\n\n      imageElement.src = images[newIndex] + '-logo.png';\n      imageElement.setAttribute('data-image', newIndex);\n\n      result.className = '';\n      attempts++;\n\n      if(newIndex == choice) {\n        result.innerText = \"Yay! Well done! You did it in \" + attempts + \" attempt(s)\";\n        result.classList.add('success');\n        attemptsEl.innerText = attempts;\n        attempts = 0;\n      } else {\n        result.innerText = \"Boo! Try again..\";\n        result.classList.add('fail');\n        attemptsEl.innerText = attempts;\n      }\n\n    });\n\n    function getRandomIndex() {\n      return Math.floor(Math.random() * 5);\n    }\n    ```", "```js\n    'use strict';\n    var cacheName= 'dependencies-cache';\n\n    self.addEventListener('install', function(event) {\n      event.waitUntil(\n        caches.open(cacheName)\n          .then(function(cache) {\n            return cache.addAll([\n              'apple',\n        'google',\n        'adobe',\n        'facebook',\n        'amazon'\n            ]);\n          })\n          .then(function() {\n             return self.skipWaiting();\n          })\n      );\n    });\n\n    self.addEventListener('fetch', function(event) {\n      event.respondWith(\n        caches.match(event.request)\n          .then(function(response) {\n            if (response) {\n              console.log('Fetching from the cache: ', event.request.url);\n              return response;\n            } else {\n              console.log('Fetching from server: ', event.request.url);\n            }\n           return fetch(event.request);\n         }\n       )\n     );\n    });\n\n    self.addEventListener('activate', function(event) {\n       console.log('Activating the service worker!');\n       event.waitUntil(self.clients.claim());\n    });\n    ```", "```js\n    * {\n      -webkit-box-sizing: border-box;\n      -moz-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n\n    body {\n      margin: 0 auto;\n      text-align: center;\n      font-family: sans-serif;\n    }\n\n    main {\n      max-width: 350px;\n      border: 1px solid #4CAF50;\n      padding: 20px;\n      border-radius: 5px;\n      width: 350px;\n      margin: 20px auto;\n    }\n\n    h1 {\n      color: #4CAF50;\n    }\n\n    img {\n      padding: 20px 0;\n      max-width: 200px;\n    }\n\n    .success {\n      color: #4CAF50;\n      font-size: 2em;\n    }\n\n    .fail {\n      color: #FF8401;\n      font-size: 1.5em;\n    }\n\n    .hidden {\n      display: none;\n    }\n\n    #registration-status {\n      background-color: #FFE454;\n      padding: 10px;\n    }\n\n    #notification {\n      background-color: #4CAF50;\n      padding: 3px;\n      border-radius: 5px;\n      max-width: 350px;\n      color: #FFF;\n    }\n    ```", "```js\n<select id=\"choice\">\n    <option value=\"0\">Apple</option>\n    <option value=\"1\">Google</option>\n    <option value=\"2\">Adobe</option>\n    <option value=\"3\">Facebook</option>\n    <option value=\"4\">Amazon</option>\n</select>\n```", "```js\n* {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0 auto;\n  text-align: center;\n  font-family: sans-serif;\n}\n```", "```js\n.success {\n  color: #4CAF50;\n  font-size: 2em;\n}\n\n.fail {\n  color: #FF8401;\n  font-size: 1.5em;\n}\n```", "```js\n.hidden {\n  display: none;\n}\n```", "```js\nvar attempts = 0,\nimages = [\n  'apple',\n  'google',\n  'adobe',\n  'facebook',\n  'amazon'\n];\n```", "```js\ndocument.getElementById('tryButton').addEventListener('click', function() {\n  // callback  \nâ€¦\n});\n```", "```js\n    var imageElement = document.getElementById('logo'),\n    ```", "```js\n    choice = document.querySelector('#choice').value,\n    attemptsEl = document.querySelector('#attempts'),\n    result = document.querySelector('#result'),\n    ```", "```js\n    currentIndex = imageElement.getAttribute('data-image'),\n    newIndex = getRandomIndex();\n    ```", "```js\n    do {\n        newIndex = getRandomIndex();\n      } while(newIndex === currentIndex);\n    ```", "```js\n    imageElement.src = images[newIndex] + '-logo.png';\n    imageElement.setAttribute('data-image', newIndex);\n    ```", "```js\n    <img src=\"img/google-logo\" data-image=\"1\" />\n    ```", "```js\n    result.className = '';\n    attempts++;\n    ```", "```js\n    if(newIndex == choice) {\n    ```", "```js\nreturn cache.addAll([\n          'adobe-logo.png',\n          'apple-logo.png',\n          'google-logo.png',\n          'style.css',\n          'index.html',\n          'index.js',\n          'style.css'\n        ]);\n```", "```js\ncaches.match(event.req uest)\n      .then(function(response) {\n        if (response) {\n          console.log('Fetching from the cache: ', event.request.url);\n          return response;\n        } \n```", "```js\nelse {\n          console.log('Fetching from server: ', event.request.url);\n     }\n     return fetch(event.request);\n```", "```js\nself.addEventListener('activate', function(event) {\n   console.log('Activating the service worker!');\n   event.waitUntil(self.clients.claim());\n});\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Cache First, then Network</title>\n      <link rel=\"stylesheet\" href=\"style.css\">\n    </head>\n    <body>\n      <section id=\"events\">\n        <h1><span class=\"nyc\">NYC</span> Events TONIGHT</h1>\n        <aside>\n          <img src=\"img/hypecal.png\" />\n          <h2>Source</h2>\n          <section>\n            <h3>Network</h3>\n            <input type=\"checkbox\" name=\"network\" id=\"network-disabled-checkbox\">\n            <label for=\"network\">Disabled</label><br />\n            <h3>Cache</h3>\n            <input type=\"checkbox\" name=\"cache\" id=\"cache-disabled-checkbox\">\n            <label for=\"cache\">Disabled</label><br />\n          </section>\n          <h2>Delay</h2>\n          <section>\n            <h3>Network</h3>\n            <input type=\"text\" name=\"network-delay\" id=\"network-delay\" value=\"400\" /> ms\n            <h3>Cache</h3>\n            <input type=\"text\" name=\"cache-delay\" id=\"cache-delay\" value=\"1000\" /> ms\n          </section>\n        <input type=\"button\" id=\"fetch-btn\" value=\"FETCH\" />\n      </aside>\n      <section class=\"data connection\">\n        <table>\n          <tr>\n            <td><strong>Network</strong></td>\n            <td><output id='network-status'></output></td>\n          </tr>\n          <tr>\n            <td><strong>Cache</strong></td>\n            <td><output id='cache-status'></output><td>\n          </tr>\n        </table>\n      </section>\n      <section class=\"data detail\">\n        <output id=\"data\"></output>\n      </section>\n      <script src=\"img/index.js\"></script>\n    </body>\n    </html>\n    ```", "```js\nvar CACHE_NAME = 'cache-and-then-network';\n```", "```js\nvar networkDataReceived = false;\n```", "```js\nvar networkFetchStartTime;\nvar cacheFetchStartTime;\n```", "```js\nvar SOURCE_URL = 'https://cdn.rawgit.com/szaranger/szaranger.github.io/master/service-workers/03/02/events';\n```", "```js\nfunction clear() {\n  outlet.textContent = '';\n  cacheStatus.textContent = '';\n  networkStatus.textContent = '';\n  networkDataReceived = false;\n}\n\nfunction disableEdit(enable) {\n  fetchButton.disabled = enable;\n  cacheDelayText.disabled = enable;\n  cacheDisabledCheckbox.disabled = enable;\n  networkDelayText.disabled = enable;\n  networkDisabledCheckbox.disabled = enable;\n\n  if(!enable) {\n    clear();\n  }\n}\n```", "```js\nfunction displayEvents(events) {\n\n  events.forEach(function(event) {\n    var tickets = event.ticket ?\n      '<a href=\"' + event.ticket + '\" class=\"tickets\">Tickets</a>' : '';\n\n    outlet.innerHTML = outlet.innerHTML +\n      '<article>' +\n      '<span class=\"date\">' + formatDate(event.date) + '</span>' +\n      ' <span class=\"title\">' + event.title + '</span>' +\n      ' <span class=\"venue\"> - ' + event.venue + '</span> ' +\n      tickets +\n      '</article>';\n  });\n\n}\n```", "```js\nvar shouldNetworkError = networkDisabledCheckbox.checked,\n    cloned;\n\n  if (shouldNetworkError) {\n    throw new Error('Network error');\n  }\n```", "```js\ncloned = response.clone();\n```", "```js\ncaches.open(CACHE_NAME).then(function(cache) {\n   cache.put(SOURCE_URL, cloned); // cache.put(URL, response)\n});\n```", "```js\nresponse.json().then(function(data) {\n    displayEvents(data);\n    networkDataReceived = true;\n  });\n```", "```js\nresult.json().then(function(data) {\n    if (!networkDataReceived) {\n      displayEvents(data);\n    }\n  });\n```", "```js\nfetchButton.addEventListener('click', function handleClick() {\n...\n}\n```", "```js\ndisableEdit(true);\n\nnetworkStatus.textContent = 'Fetching events...';\nnetworkFetchStartTime = Date.now();\n```", "```js\nnetworkFetch = fetch(SOURCE_URL + '?cacheBuster=' + now, {\n   mode: 'cors',\n   cache: 'no-cache',\n   headers: headers\n})\n```", "```js\nreturn new Promise(function(resolve, reject) {\n      setTimeout(function() {\n        try {\n          handleFetchComplete(response);\n          resolve();\n        } catch (err) {\n          reject(err);\n        }\n      }, networkDelay);\n    });\n```", "```js\nreturn new Promise(function(resolve, reject) {\n        setTimeout(function() {\n          try {\n            handleCacheFetchComplete(response);\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        }, cacheDelay);\n      });\n```", "```js\nfunction formatDate(date) {\n  var d = new Date(date),\n      month = (d.getMonth() + 1).toString(),\n      day = d.getDate().toString(),\n      year = d.getFullYear();\n\n  if (month.length < 2) month = '0' + month;\n  if (day.length < 2) day = '0' + day;\n\n  return [month, day, year].join('-');\n}\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Cache &amp; Network Race</title>\n      <link rel=\"stylesheet\" href=\"style.css\">\n    </head>\n    <body>\n      <section id=\"registration-status\">\n        <p>Registration status: <strong id=\"status\"></strong></p>\n        <input type=\"button\" id=\"resetButton\" value=\"Reset\" />\n      </section>\n      <script src=\"img/index.js\"></script>\n    </body>\n    </html>\n    ```", "```js\n    * {\n      -webkit-box-sizing: border-box;\n      -moz-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n\n    body {\n      margin: 0 auto;\n      text-align: center;\n      font-family: sans-serif;\n    }\n\n    main {\n      max-width: 350px;\n      border: 1px solid #4CAF50;\n      padding: 20px;\n      border-radius: 5px;\n      width: 350px;\n      margin: 20px auto;\n    }\n\n    h1 {\n      color: #4CAF50;\n    }\n\n    img {\n      padding: 20px 0;\n      max-width: 200px;\n    }\n\n    .hidden {\n      display: none;\n    }\n\n    #registration-status {\n      background-color: #FFE454;\n      padding: 10px;\n    }\n    ```", "```js\n    'use strict';\n\n    var scope = {\n      scope: './'\n    };\n\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register(\n        'service-worker.js',\n        scope\n      ).then( function(serviceWorker) {\n        printStatus('successful');\n      }).catch(function(error) {\n        printStatus(error);\n      });\n    } else {\n      printStatus('unavailable');\n    }\n\n    function printStatus(status) {\n      document.querySelector('#status').innerHTML = status;\n    }\n\n    document.querySelector('#resetButton').addEventListener('click',\n      function() {\n        navigator.serviceWorker.getRegistration().then(function(registration) {\n          registration.unregister();\n          window.location.reload();\n        });\n      }\n    );\n    ```", "```js\n    'use strict';\n\n    var cacheName = 'cache-network-race';\n\n    self.addEventListener('install', function(event) {\n      event.waitUntil(\n        caches.open(cacheName)\n          .then(function(cache) {\n            return cache.addAll([\n              'index.html',\n              'style.css',\n              'index.js'\n            ]);\n          })\n          .then(function() {\n            return self.skipWaiting();\n          })\n      );\n    });\n\n    self.addEventListener('fetch', function(event) {\n      event.respondWith(\n        resolveAny([\n          caches.match(event.request),\n          fetch(event.request)\n        ])\n      );\n    });\n\n    function resolveAny(promises) {\n      return new Promise(function(resolve, reject) {\n        promises = promises.map(function(promise) {\n          return Promise.resolve(promise);\n        });\n\n        promises.forEach(function(promise) {\n          promise.then(resolve);\n        });\n\n        promises.reduce(function(a, b) {\n          return a.catch(function() {\n            return b;\n          });\n        }).catch(function() {\n          return reject(Error(\"All have failed\"));\n        });\n      });\n    }\n    ```", "```js\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(cacheName)\n      .then(function(cache) {\n        return cache.addAll([\n          'index.html',\n          'style.css',\n          'index.js'\n        ]);\n      })\n      .then(function() {\n        return self.skipWaiting();\n      })\n  );\n});\n```", "```js\npromises = promises.map(function(promise) {\n      return Promise.resolve(promise);\n    });\n```", "```js\npromises.forEach(function(promise) {\n      promise.then(resolve);\n    });\n```", "```js\npromises.reduce(function(a, b) {\n      return a.catch(function() {\n        return b;\n      });\n    }\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Using window.caches</title>\n      <link rel=\"stylesheet\" href=\"style.css\">\n    </head>\n    <body>\n      <section id=\"registration-status\">\n        <p>Registration status: <strong id=\"status\"></strong></p>\n        <input type=\"button\" id=\"resetButton\" value=\"Reset\" />\n      </section>\n      <section id=\"article-area\">\n        <h1>Bookmark App</h1>\n        <form action=\"#\" method=\"post\">\n          <div>\n            <label for=\"new-bookmark\">+Add Bookmark</label>\n            <input type=\"text\" name=\"new-bookmark\" id=\"new-bookmark\" placeholder=\"new bookmark\">\n            <input type=\"submit\" value=\"Add\">\n          </div>\n        </form>\n        <ul id=\"articles\"></ul>\n        <div id=\"bookmark-status\"></div>\n      </section>\n      <script src=\"img/index.js\"></script>\n      <script src=\"img/app.js\"></script>\n    </body>\n    </html>\n    ```", "```js\n    'use strict';\n\n    var scope = {\n      scope: './'\n    };\n\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register(\n        'service-worker.js',\n        scope\n      ).then( function(serviceWorker) {\n        printStatus('successful');\n      }).catch(function(error) {\n        printStatus(error);\n      });\n    } else {\n      printStatus('unavailable');\n    }\n\n    function printStatus(status) {\n      document.querySelector('#status').innerHTML = status;\n    }\n\n    document.querySelector('#resetButton').addEventListener('click',\n      function() {\n        navigator.serviceWorker.getRegistration().then(function(registration) {\n          registration.unregister();\n          window.location.reload();\n        });\n      }\n    );\n    ```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Prefetched</title>\n    </head>\n    <body>\n      <p>Prefetched Page</p>\n    </body>\n    </html>\n    ```", "```js\n    'use strict';\n\n    var cacheVersion = 1;\n    var currentCaches = {\n      prefetch: 'window-cache-v' + cacheVersion\n    };\n\n    self.addEventListener('install', function(event) {\n      var prefetchUrls = [\n        './prefetched.html',\n      ];\n\n      console.log('EVENT: install. Prefetching resource:',\n        prefetchUrls);\n\n      event.waitUntil(\n        caches.open(currentCaches.prefetch).then(function(cache) {\n          return cache.addAll(prefetchUrls.map(function(prefetchUrl) {\n            return new Request(prefetchUrl, {mode: 'no-cors'});\n          })).then(function() {\n            console.log('SUCCESS: All resources fetched and cached.');\n          });\n        }).catch(function(error) {\n          console.error('FAIL: Prefetch:', error);\n        })\n      );\n    });\n\n    self.addEventListener('activate', function(event) {\n      var expectedCacheNames = Object.keys(currentCaches).map(function(key) {\n        return currentCaches[key];\n      });\n\n      event.waitUntil(\n        caches.keys().then(function(cacheNames) {\n          return Promise.all(\n            cacheNames.map(function(cacheName) {\n              if (expectedCacheNames.indexOf(cacheName) === -1) {\n                console.log('DELETE: Out of date cache:', cacheName);\n                return caches.delete(cacheName);\n              }\n            })\n          );\n        })\n      );\n    });\n    ```", "```js\nvar cacheVersion = 1;\nvar currentCaches = {\n  prefetch: 'window-cache-v' + cacheVersion\n};\n```", "```js\nvar prefetchUrls = [\n    './prefetched.html',\n  ];\nconsole.log('EVENT: install. Prefetching resource:',\n    prefetchUrls);\n```", "```js\nreturn new Request(prefetchUrl, {mode: 'no-cors'});\n```", "```js\n}).catch(function(error) {\n    console.error('FAIL: Prefetch:', error);\n})\n```", "```js\nvar expectedCacheNames = Object.keys(currentCaches).map(function(key) {\n    return currentCaches[key];\n  });\n```", "```js\nif (expectedCacheNames.indexOf(cacheName) === -1) {\nconsole.log('DELETE: Out of date cache:', cacheName);\n      return caches.delete(cacheName);\n}\n```", "```js\nfunction initializeBookmarks() {\n  form.addEventListener('submit', function( event ) {\n    var text = newBookmark.value;\n    if (text !== '') {\n      articles.innerHTML += '<li>' + text + '</li>';\n      addUrlToCache(text);\n      newBookmark.value = '';\n      newBookmark.focus();\n    }\n    event.preventDefault();\n  }, false);\n  showBookmarks();\n}\n```", "```js\narticles.addEventListener( 'click', function( event ) {\n  var target = event.target;\n  if ( target.tagName === 'LI' ) {\n    target.parentNode.removeChild( target );\n  };\n\n  event.preventDefault();\n}, false);\n```", "```js\nwhile (articles.firstChild) {\n   articles.removeChild(articles.firstChild);\n}\n```", "```js\nwindow.caches.keys().then(function(cacheNames) {\n    cacheNames.forEach(function(cacheName) {\n      window.caches.open(cacheName).then(function(cache) {\n        cache.keys().then(function(requests) {\n          requests.forEach(function(request) {\n            addRequestToBookmarks(cacheName, request);\n          });\n        });\n      });\n    });\n  });\n```", "```js\nfunction addUrlToCache(url) {\n  window.fetch(url, { mode: 'no-cors' }).then(function(response) {\n    if (response.status < 400) {\n      caches.open(cacheName).then(function(cache) {\n        cache.put(url, response).then(showBookmarks);\n      });\n    }\n  }).catch(function(error) {\n    document.querySelector('#status').textContent = error;\n  });\n}\n```", "```js\nfunction addRequestToBookmarks(cacheName, request) {\n  var url = request.url,\n    span = document.createElement('span'),\n    button = document.createElement('button'),\n    li = document.createElement('li');\n\n  span.textContent = url;\n  button.textContent = 'âœ”';\n  button.dataset.url = url;\n  button.dataset.cacheName = cacheName;\n  button.classList.add('done');\n  button.addEventListener('click', function() {\n    removeCachedBookmark(this.dataset.cacheName, this.dataset.url).then(function() {\n      var parent = this.parentNode,\n        grandParent = parent.parentNode;\n        grandParent.removeChild(parent);\n    }.bind(this));\n  });\n  li.appendChild(span);\n  li.appendChild(button);\n  articles.appendChild(li);\n}\n```", "```js\nfunction removeCachedBookmark(cacheName, url) {\n  return window.caches.open(cacheName).then(function(cache) {\n    return cache.delete(url);\n  });\n}\n```", "```js\nfunction waitUntilInstalled(registration) {\n  return new Promise(function(resolve, reject) {\n    if (registration.installing) {\n```", "```js\nregistration.installing.addEventListener('statechange', function(event) {\n   if (event.target.state === 'installed') {\n   \tresolve();\n   } else if(event.target.state === 'redundant') {\n   \treject();\n   }\n});\n```", "```js\n  } else {\n     resolve();\n  }\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Cache First, then Network</title>\n      <link rel=\"stylesheet\" href=\"style.css\">\n    </head>\n    <body>\n      <section id=\"registration-status\">\n        <p>Registration status: <strong id=\"status\"></strong></p>\n        <input type=\"button\" id=\"resetButton\" value=\"Reset\" />\n      </section>\n      <section>\n        <img src=\"img/adobe-logo\" alt=\"adobe logo\">\n      </section>\n      <script src=\"img/index.js\"></script>\n    </body>\n    </html>\n    ```", "```js\n    'use strict';\n\n    var scope = {\n      scope: './'\n    };\n\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register(\n        'service-worker.js',\n        scope\n      ).then( function(serviceWorker) {\n        printStatus('successful');\n      }).catch(function(error) {\n        printStatus(error);\n      });\n    } else {\n      printStatus('unavailable');\n    }\n\n    function printStatus(status) {\n      document.querySelector('#status').innerHTML = status;\n    }\n\n    document.querySelector('#resetButton').addEventListener('click',\n      function() {\n        navigator.serviceWorker.getRegistration().then(function(registration) {\n          registration.unregister();\n          window.location.reload();\n        });\n      }\n    );\n    ```", "```js\n    'use strict';\n\n    var cacheName= 'stale-while-revalidate';\n\n    self.addEventListener('install', function(event) {\n      event.waitUntil(\n        caches.open(cacheName)\n          .then(function(cache) {\n            return cache.addAll([\n              'adobe-logo.png',\n              'style.css',\n              'index.html',\n              'index.js',\n              'style.css'\n            ]);\n          })\n          .then(function() {\n            return self.skipWaiting();\n          })\n      );\n    });\n\n    self.addEventListener('fetch', function(event) {\n      event.respondWith(\n        caches.open('stale-while-revalidate')\n          .then(function(cache) {\n            return cache.match(event.request)\n              .then(function(response) {\n                var promise;\n\n                if (response) {\n                  console.log('Fetching from the cache: ', event.request.url);\n                } else {\n                  console.log('Fetching from server: ', event.request.url);\n                }\n\n                promise = fetch(event.request)\n                  .then(function(networkResponse) {\n                    var cloned = networkResponse.clone();\n                    cache.put(event.request, cloned);\n                    console.log('Fetching from the cache: ', event.request.url);\n                    return networkResponse;\n                  }\n                )\n                console.log('Fetching from server: ', event.request.url);\n                return response || promise;\n              }\n            )\n          }\n        )\n      );\n    });\n\n    self.addEventListener('activate', function(event) {\n       console.log('Activating the service worker!');\n       event.waitUntil(self.clients.claim());\n    });\n    ```", "```js\nself.addEventListener('fetch', function(event) {\n  event.respondWith(\n    caches.open('stale-while-revalidate')\n      .then(function(cache) {\n        return cache.match(event.request)\n          .then(function(response) {\n            var promise;\n\n            if (response) {\n              console.log('Fetching from the cache: ', event.request.url);\n            } else {\n              console.log('Fetching from server: ', event.request.url);\n            }\n            promise = fetch(event.request)\n              .then(function(networkResponse) {\n                var cloned = networkResponse.clone();\n                cache.put(event.request, cloned);\n                console.log('Fetching from the cache: ', event.request.url);\n                return networkResponse;\n              }\n            )\n            console.log('Fetching from server: ', event.request.url);\n            return response || promise;\n          }\n        )\n      }\n    )\n  );\n});\n```"]