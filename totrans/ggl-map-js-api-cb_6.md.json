["```js\n    <script type=\"text/javascript\"\n        src=\"img/js? libraries=drawing&sensor=false\">\n    </script>\n    ```", "```js\n    var drawingManager = new google.maps.drawing.DrawingManager();\n    ```", "```js\n    drawingManager.setMap(map);\n    ```", "```js\n&libraries=drawing\n```", "```js\nvar drawingManager = new google.maps.drawing.DrawingManager();\n```", "```js\ndrawingManager.setMap(map);\n```", "```js\nvar drawingManager = new google.maps.drawing.DrawingManager({\n    drawingControl: true,\n});\n```", "```js\ndrawingManager.setMap(map);\n```", "```js\nvar drawingManager = new google.maps.drawing.DrawingManager({\n    drawingControl: true,\n    drawingControlOptions: {\n        position: google.maps.ControlPosition.BOTTOM_CENTER\n    }\n});\n```", "```js\nvar drawingManager = new google.maps.drawing.DrawingManager({\n    drawingControl: true,\n    drawingControlOptions: {\n        position: google.maps.ControlPosition.BOTTOM_CENTER,\n        drawingModes: [\n            google.maps.drawing.OverlayType.MARKER,\n            google.maps.drawing.OverlayType.POLYGON,\n            google.maps.drawing.OverlayType.POLYLINE\n        ]\n    }\n});\n```", "```js\nvar drawingManager = new google.maps.drawing.DrawingManager({\n    drawingMode: google.maps.drawing.OverlayType.POLYGON,\n    ...\n});\n```", "```js\ndrawingManager.setDrawingMode(null);\n```", "```js\ndrawingManager.setOptions({\n   drawingMode: google.maps.drawing.OverlayType.POLYGON,\n});\n```", "```js\nvar drawingManager = new google.maps.drawing.DrawingManager({\n   ...\n   polylineOptions: {\n       strokeColor: 'red',\n       strokeWeight: 3\n   },\n   polygonOptions: {\n        strokeColor: 'blue',\n        strokeWeight: 3,\n        fillColor: 'yellow',\n        fillOpacity: 0.2\n   }\n...\n});\n```", "```js\npolygonOptions: {\n            strokeColor: 'blue',\n            strokeWeight: 3,\n            fillColor: 'yellow',\n            fillOpacity: 0.2,\n            editable: true,\n            draggable: true\n}\n```", "```js\ngoogle.maps.event.addListener(drawingManager, '    polygoncomplete', function(polygon) {\n    polygon.setEditable(true);\n    polygon.setDraggable(true);\n});\n```", "```js\ngoogle.maps.event.addListener(drawingManager, 'overlaycomplete', function(event) {\n     if (event.type == google.maps.drawing.OverlayType.POLYGON) {\n          event.overlay.setEditable(true);\n          event.overlay.setDraggable(true);\n     }\n});\n```", "```js\n    <script type=\"text/javascript\"\n        src=\"img/js? libraries=drawing,geometry&sensor=false\">\n    </script>\n    ```", "```js\n    var drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: null,\n        drawingControl: true,\n        drawingControlOptions: {\n           position:\n                google.maps.ControlPosition.BOTTOM_CENTER,drawingModes: [\n            google.maps.drawing.OverlayType.POLYGON,\n            google.maps.drawing.OverlayType.POLYLINE\n            ]\n        },\n        polylineOptions: {\n            strokeColor: 'red',\n            strokeWeight: 3\n        },\n        polygonOptions: {\n            strokeColor: 'blue',\n            strokeWeight: 3,\n            fillColor: 'yellow',\n            fillOpacity: 0.2\n      }\n    });\n    ```", "```js\n    drawingManager.setMap(map);\n    ```", "```js\n    google.maps.event.addListener(drawingManager, 'polygoncomplete', function(polygon) {\n        var path = polygon.getPath();\n        var area =     google.maps.geometry.spherical.computeArea(path);\n        var length = google.maps.geometry.spherical.computeLength(path);\n        console.log('Polygon Area: ' +  area/1000000 + ' km sqs');\n        console.log('Polygon Length: ' +  length/1000 + ' kms');\n    });\n    ```", "```js\n    google.maps.event.addListener(drawingManager, 'polylinecomplete', function(polyline) {\n        var path = polyline.getPath();\n        var length = google.maps.geometry.spherical.computeLength(path);\n        console.log('Polyline Length: ' +  length/1000 + ' kms');\n    });\n    ```", "```js\nlibraries=drawing,geometry\n```", "```js\ndrawingModes: \n[\n    google.maps.drawing.OverlayType.POLYGON,\n    google.maps.drawing.OverlayType.POLYLINE\n]\n```", "```js\ndrawingMode:null,\n```", "```js\nposition: google.maps.ControlPosition.BOTTOM_CENTER,\n```", "```js\ndrawingManager.setMap(map);\n```", "```js\ngoogle.maps.event.addListener(drawingManager, 'polygoncomplete', function(polygon) {\n    var path = polygon.getPath();\n    var area = google.maps.geometry.spherical.computeArea(path);\n    var length = google.maps.geometry.spherical.computeLength(path);\n    console.log('Polygon Area: ' +  area/1000000 + ' km sqs');\n    console.log('Polygon Length: ' +  length/1000 + ' kms');\n});\n```", "```js\nvar path = polygon.getPath();\n```", "```js\n\"(39.92132255884663, 32.7337646484375),(39.75048953595117, 32.754364013671875),(39.78110197709871, 33.061981201171875),(39.98132938627213, 33.0084228515625)\"\n```", "```js\nvar area = google.maps.geometry.spherical.computeArea(path);\n```", "```js\nconsole.log('Polygon Area: ' +  area/1000000 + ' km sqs');\nconsole.log('Polygon Length: ' +  length/1000 + ' kms');\n```", "```js\ngoogle.maps.Polygon.prototype.getArea = function()\n{\n    return google.maps.geometry.spherical.computeArea(this.getPath());\n};\n\ngoogle.maps.Polygon.prototype.getLength = function(){\n    return google.maps.geometry.spherical.computeLength(this.getPath());\n};\n\ngoogle.maps.Polyline.prototype.getLength=function(){\n    return google.maps.geometry.spherical.computeLength(this.getPath());\n};\n```", "```js\npolygon.getArea();\npolyline.getLength();\n```", "```js\n    <script type=\"text/javascript\"\n       src=\"img/js? libraries=drawing,geometry&sensor=false\">\n    </script>\n    ```", "```js\n    <div>\n        <H3>Original, Encoded and Decoded Coordinate Pairs:<H3>\n        <div id=\"loggingDiv\"></div>\n    </div>\n    ```", "```js\n    loggingDiv = document.getElementById('loggingDiv');\n    ```", "```js\n    google.maps.event.addListener(drawingManager, 'polylinecomplete', function(polyline){\n        var path = polyline.getPath();\n\n        var coords = path.getArray();\n\n        var text = '<b>Original Coordinates:</b> ' + coords;\n\n        var encodedCoords = google.maps.geometry.encoding.encodePath(path);\n\n        text += '<br/><b>Encoded Coordinates:</b> ' + encodedCoords;\n\n        var decodedCoords = google.maps.geometry.encoding.decodePath(encodedCoords);\n\n        text += '<br/><b>Decoded Coordinates:</b> ' + decodedCoords;\n\n        loggingDiv.innerHTML = text;\n    });\n    ```", "```js\nvar path = polyline.getPath();\n```", "```js\nvar encodedCoords = google.maps.geometry.encoding.encodePath(path);\n```", "```js\nvar encodedCoords = google.maps.geometry.encoding.encodePath(coords);\n```", "```js\nop_rFitihE|}Q|pCpyLo`GzmMq|HneEg}Wim@ghNwiIapJidD~zKmiIwXuiC_tHm`Gy{Ds|Ij}AqxE~zKqf@pxUngAfhNxdEvfFfaH_fBwvCg}WbqDc~E~`Nr_N\n```", "```js\n(39.81592026602056, 32.9864501953125),(39.71880717209066, 32.963104248046875),(39.64799732373418, 33.004302978515625),(39.573939343591896, 33.05511474609375),(39.54217596171196, 33.182830810546875),(39.54958871848275, 33.2611083984375),(39.6025139495577, 33.320159912109375),(39.62896140981413, 33.254241943359375),(39.681826010893644, 33.25836181640625),(39.70401708565211, 33.30780029296875),(39.74521015328692, 33.3380126953125),(39.80115102364286, 33.322906494140625),(39.83595916247957, 33.256988525390625),(39.842286020743394, 33.1402587890625),(39.83068633533497, 33.061981201171875),(39.79904087286648, 33.02490234375),(39.7526011757416, 33.0413818359375),(39.776880380637024, 33.169097900390625),(39.74837783143156, 33.204803466796875),(39.67125632523973, 33.127899169921875)\n```", "```js\nvar decodedCoords = google.maps.geometry.encoding.decodePath(encodedCoords);\n```", "```js\n    <script type=\"text/javascript\"\n       src=\"img/js? libraries=drawing,places&sensor=false\">\n    </script>\n    ```", "```js\n    var circles;\n    var markers;\n    ```", "```js\n    var popup;\n    ```", "```js\n    circles = new Array();\n    markers = new Array();\n    popup = new google.maps.InfoWindow();\n    ```", "```js\n    google.maps.event.addListener(drawingManager, 'circlecomplete', function(circle){\n\n    });\n    ```", "```js\n    drawingManager.setDrawingMode(null);\n    ```", "```js\n    circles.push(circle);\n    circles.reverse();\n    ```", "```js\n    while(circles[1]){\n        circles.pop().setMap(null);\n    }\n    ```", "```js\n    while(markers[0]){\n        markers.pop().setMap(null);\n    }\n    ```", "```js\n    var nearbyPlacesRequest = {\n        location: circle.getCenter(),\n        radius: circle.radius,\n        keyword: 'pizza'\n    };\n    ```", "```js\n    var placesService = new google.maps.places.PlacesService(map);\n    ```", "```js\n    placesService.nearbySearch(nearbyPlacesRequest, resultsCallback);\n    ```", "```js\n    function resultsCallback(results, status) {\n        if (status == google.maps.places.PlacesServiceStatus.OK) {\n            for (var i = 0, l=results.length; i < l; i++) {\n                pinpointResult(results[i]);\n            }\n        }\n    }\n    ```", "```js\n    function pinpointResult(result) {\n\n    }\n    ```", "```js\n    var marker = new google.maps.Marker({\n        map: map,\n        position: result.geometry.location\n    });\n    ```", "```js\n    google.maps.event.addListener(marker, 'click', function() {\n        var popupContent = '<b>Name: </b> ' + result.name + '<br/>' + '<b>Vicinity: </b>' + result.vicinity + '<br/><b>Rating: </b>' + result.rating; \n        popup.setContent(popupContent);\n        popup.open(map, this);\n    });\n    ```", "```js\n    markers.push(marker);\n    ```", "```js\nvar nearbyPlacesRequest = {\n\tlocation: circle.getCenter(),\n   radius: circle.radius,\n   keyword: 'pizza'\n};\n```", "```js\nvar placesService = new google.maps.places.PlacesService(map);\n```", "```js\nplacesService.nearbySearch(nearbyPlacesRequest, resultsCallback);\n```", "```js\nfunction resultsCallback(results, status) {\n    if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0, l=results.length; i < l; i++) {\n            pinpointResult(results[i]);\n        }\n    }\n}\n```", "```js\nvar marker = new google.maps.Marker({\n    map: map,\n    position: result.geometry.location\n});\n```", "```js\ngoogle.maps.event.addListener(marker, 'click', function() {\n    var popupContent = '<b>Name: </b> ' + result.name + '<br/>' + '<b>Vicinity: </b>' + result.vicinity + '<br/><b>Rating: </b>' + result.rating; \n\n    popup.setContent(popupContent);\n   popup.open(map, this);\n});\n```", "```js\nvar requestBounds = new google.maps.LatLngBounds(\n    new google.maps.LatLng(39.85, 32.74),\n    new google.maps.LatLng(40.05, 32.84)\n);\n\nvar nearbyPlacesRequest = {\n    bounds: requestBounds,\n    keyword: 'pizza'\n};\n```", "```js\nvar nearbyPlacesRequest = {\n    location: circle.getCenter(),\n    radius: circle.radius,\n    name: 'Buckingham'\n};\n```", "```js\nvar nearbyPlacesRequest = {\n    location: circle.getCenter(),\n    radius: circle.radius,\n    types: ['stadium', 'car_rental', 'library','university','administrative_area_level_3']\n};\n```", "```js\nvar placeIcon = {\n    url: result.icon,\n    scaledSize: new google.maps.Size(30, 30)\n};\n\nvar marker = new google.maps.Marker({\n    map: map,position: result.geometry.location,\n    icon: placeIcon\n});\n```", "```js\n[\"art_gallery\", \"museum\", \"establishment\"]\n```", "```js\ngoogle.maps.event.addListener(marker, 'click', function() {\n    var popupContent = '<b>Name: </b> ' + result.name + '<br/>' + '<b>Vicinity: </b>' + result.vicinity; \n    if (result.opening_hours){\n        if (result.opening_hours.open_now){\n            popupContent += '<br/><b>Is Open Now: </b> '\n            + 'YES'\n        }\n        else {\n            popupContent += '<br/><b>Is Open Now: </b> '\n            + 'NO'\n        }\n    }\n    popup.setContent(popupContent);\n    popup.open(map, this);\n});\n```", "```js\n    <div id=\"searchDiv\">\n    <input id=\"autocomplete_searchField\" type=\"text\" size=\"40\"  placeholder=\"Search for Places\">\n    </div>\n    ```", "```js\n    var markers;\n    var popup;\n    ```", "```js\n    markers = new Array();\n    popup = new google.maps.InfoWindow();\n    ```", "```js\n    var searchDiv = document.getElementById('autocomplete_searchField');\n    map.controls[google.maps.ControlPosition.TOP_CENTER].push(searchDiv);\n    ```", "```js\n    var searchField = document.getElementById('autocomplete_searchField');\n    ```", "```js\n    var searchOptions = {\n        bounds: new google.maps.LatLngBounds(\n           new google.maps.LatLng(8.54, 17.33),\n            new google.maps.LatLng(39.67, 43.77)\n        ),\n       types: new Array()\n    };\n    ```", "```js\n    var autocompleteSearch = new google.maps.places.Autocomplete(searchField, searchOptions);\n    ```", "```js\n    google.maps.event.addListener(autocompleteSearch, 'place_changed', function() {\n    });\n    ```", "```js\n    while(markers[0]) {\n        markers.pop().setMap(null);\n    }\n    ```", "```js\n    var place = autocompleteSearch.getPlace();\n    ```", "```js\n    if (place.geometry) {\n        pinpointResult(place);\n    }\n    ```", "```js\n    function pinpointResult(result) {\n        var placeIcon = {\n            url: result.icon,\n            scaledSize: new google.maps.Size(30, 30)\n        };\n\n        var marker = new google.maps.Marker({\n            map: map,\n            position: result.geometry.location,\n            icon: placeIcon\n        });\n\n        map.setCenter(result.geometry.location);\n        map.setZoom(16);\n\n        google.maps.event.addListener(marker, 'click', function() {\n           var popupContent = '<b>Name: </b> ' + result.name + '<br/>' + '<b>Vicinity: </b>' + result.vicinity;\n\n            popup.setContent(popupContent);\n            popup.open(map, this);\n        });\n        markers.push(marker);\n    }\n    ```", "```js\n<input id=\"autocomplete_searchField\" type=\"text\" size=\"40\"  placeholder=\"Search for Places\"></input>\n```", "```js\nvar searchDiv = document.getElementById('searchDiv');\nmap.controls[google.maps.ControlPosition.TOP_CENTER].push(searchDiv);\n```", "```js\nvar searchOptions = {\n   bounds: new google.maps.LatLngBounds(\n   new google.maps.LatLng(8.54, 17.33),\n        new google.maps.LatLng(39.67, 43.77)\n    ),\n   types: new Array()\n};\n```", "```js\nvar autocompleteSearch = new google.maps.places.Autocomplete(searchField, searchOptions);\n```", "```js\ngoogle.maps.event.addListener(autocompleteSearch, 'place_changed', function() {\n    while(markers[0]) {\n        markers.pop().setMap(null);\n    }\n\n    var place = autocompleteSearch.getPlace();\n    if (place) {\n        if (place.geometry) {\n            pinpointResult(place);\n        }\n    }\n});\n```", "```js\nbounds: new google.maps.LatLngBounds(\n    new google.maps.LatLng(8.54, 17.33),\n    new google.maps.LatLng(39.67, 43.77)\n),\n```", "```js\nautocompleteSearch.setBounds(map.getBounds());\n```", "```js\nautocompleteSearch.bindTo('bounds', map)\n```", "```js\ntypes: ['(regions)']\n```", "```js\n    <script type=\"text/javascript\" src=\"img/keydragzoom.js\">\n    </script>\n    ```", "```js\n    map.enableKeyDragZoom({\n        visualEnabled: true,\n        visualPosition: google.maps.ControlPosition.LEFT,\n        visualPositionOffset: new google.maps.Size(35, 0),\n        visualPositionIndex: null,\n        visualSprite: 'http://maps.gstatic.com/mapfiles/ftr/controls/dragzoom_btn.png',\n        visualSize: new google.maps.Size(20, 20),\n        visualTips: {\n            off: \"Turn on\",\n            on: \"Turn off\"\n        }\n    });\n    ```", "```js\nmap.enableKeyDragZoom();\n```", "```js\n    <script type=\"text/javascript\" src='lib/infobox.js'></script>\n    ```", "```js\n    //Creating the contents for info box\n    var boxText = document.createElement('div');\n    boxtext.className = 'infoContent';\n    boxText.innerHTML = '<b>Marker Info Box</b> <br> Gives   information about marker';\n    ```", "```js\n    //Creating the info box options.\n    var customInfoBoxOptions = {\n        content: boxText,\n        pixelOffset: new google.maps.Size(-100, 0),\n        boxStyle: {\n            background: \"url('img/tipbox2.gif') no-repeat\",\n            opacity: 0.75,\n            width: '200px'\n        },\n        closeBoxMargin: '10px 2px 2px 2px',\n        closeBoxURL: 'img/close.gif',\n        pane: 'floatPane'\n    };\n    ```", "```js\n    //Initializing the info box\n    var customInfoBox = new InfoBox(customInfoBoxOptions);\n    ```", "```js\n    //Creating the map label options.\n    var customMapLabelOptions = {\n        content: 'Custom Map Label',\n        closeBoxURL: \"\",\n        boxStyle: {\n            border: '1px solid black',\n            width: '110px'\n        },\n        position: new google.maps.LatLng(40.0678,   33.1252),\n        pane: 'mapPane',\n        enableEventPropagation: true\n    };\n    ```", "```js\n    //Initializing the map label\n    var customMapLabel = new InfoBox(customMapLabelOptions);\n    //Showing the map label\n    customMapLabel.open(map);\n    ```", "```js\n    //Initializing the marker for showing info box\n    var marker = new google.maps.Marker({\n        map: map,\n        draggable: true,\n        position: new google.maps.LatLng(39.9078,    32.8252),\n        visible: true\n    });\n    ```", "```js\n    //Opening the info box attached to marker\n    customInfoBox.open(map, marker);\n    ```", "```js\n    //Listening marker to open info box again with contents //related to marker\n    google.maps.event.addListener(marker, 'click', function (e) {\n        boxText.innerHTML = '<b>Marker Info Box</b> <br> Gives information about marker';\n        customInfoBox.open(map, this);\n    });\n\n    //Listening map click to open info box again with //contents related to map coordinates\n    google.maps.event.addListener(map,'click', function (e) {\n        boxText.innerHTML = '<b>Map Info Box</b> <br> Gives information about coordinates <br> Lat: ' + e.latLng.lat().toFixed(6) + \" -   Lng: ' + e.latLng.lng().toFixed(6);\n        customInfoBox.setPosition(e.latLng);\n        customInfoBox.open(map);\n    });\n    ```", "```js\n    //Listening info box for clicking close button\n    google.maps.event.addListener(customInfoBox, 'closeclick', function () {\n            console.log('Info Box Closed!!!');\n    });\n    ```", "```js\n    //Creating the contents for info box\n    var boxText = document.createElement('div');\n    boxtext.className = 'infoContent';\n    boxText.innerHTML = '<b>Marker Info Box</b> <br> Gives information about marker';\n```", "```js\n    //Creating the info box options.\n    var customInfoBoxOptions = {\n        content: boxText,\n        pixelOffset: new google.maps.Size(-100, 0),\n        boxStyle: {\n            background: \"url('img/tipbox2.gif') no-repeat\",\n            opacity: 0.75,\n            width: '200px'\n        },\n        closeBoxMargin: '10px 2px 2px 2px',\n        closeBoxURL: \"img/close.gif\",\n        pane: 'floatPane'\n    };\n```", "```js\n    //Creating the map label options.\n    var customMapLabelOptions = {\n        content: 'Custom Map Label',\n        closeBoxURL: '',\n        boxStyle: {\n            border: '1px solid black',\n            width: '110px'\n        },\n        position: new google.maps.LatLng(40.0678, 33.1252),\n        pane: 'mapPane',\n        enableEventPropagation: true\n    };\n```", "```js\n    //Showing the map label    \n    customMapLabel.open(map);\n    //Opening the info box attached to marker\n    customInfoBox.open(map, marker);\n```", "```js\n    //Changing the position of info box    \n    customInfoBox.setPosition(e.latLng);\n```", "```js\n    //Listening info box for clicking close button\n    google.maps.event.addListener(customInfoBox, 'closeclick', function () {\n        console.log('Info Box Closed!!!');\n    });\n```"]