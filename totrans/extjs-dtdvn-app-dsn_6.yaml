- en: Chapter 6. Data Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the development we have done already, the application is really taking
    shape. We can input and see the data. Now if we customize the content according
    to the need, we'll have the finished application we were originally hoping for.
    In this final chapter, we will implement the data import/export to restore or
    backup the data. This time, the data we refer to is the `Quotation` and `Bill`
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Designing Import and Export
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by thinking about the `Quotation` table. Because `Bill` is mostly
    the same as `Quotation`, we'll just implement `Quotation` here. Try this implementation
    with `Bill`, as well by yourself. First, we'll add an `Export` and `Import` button
    in the `Quotation` list, so that it begins to function. Next, we'll make the file
    start downloading when the `Export` button is pressed. We'll add a new panel so
    that we can visually check the selected data that we are about to import. So let's
    go ahead and create this type of data import and export functions.
  prefs: []
  type: TYPE_NORMAL
- en: Data format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At first, when exporting, let's consider the data format in which it will be
    downloaded. This time, we're thinking of outputting in the **TSV format** instead
    of CSV or XML. TSV is easier for the developers to read and it's very simple to
    generate with JavaScript. The following list shows the order of output.
  prefs: []
  type: TYPE_NORMAL
- en: '`Quotation` and `Quotations` are outputted in a single file. In the case of
    quotation, the order of output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`quotation`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`status`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`customer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`note`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modified`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the case of quotations, the order of output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`quotations`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`status`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qty`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`price`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sum`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modified`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the very first item, enter the table name, this will let you output multiple
    tables at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Import and Export views in Quotation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we''ll add the `button` feature and modify the code for import and export
    (source file: `01_making_the_import_and_export_view_in_quotation/app/view/quotation/List.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Import and Export views in Quotation](img/5446OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, implement the button''s event handler (source file: `01_making_the_import_and_export_view_in_quotation/app/controller/quotation/List.js`):.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Detect the actions for `import` and `export` you set up in the `button` feature,
    and then assign `onImport` and `onExport` to the various click events. Of course,
    we will make `onImport` and `onExport` from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the server side for export
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to download the file, we will make the `quotation-export.php` file.
    The file can be installed anywhere, but this time we have positioned it in the
    document route where the `index.php` file is located.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process to export the `Quotation` data will be implemented by PHP. It''s
    a long one, so please refer to the source file for the code (source file: `02_preparing_the_server_side_for_export/quotation-export.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: Execute SQL and output it to match the data format we thought up earlier.
  prefs: []
  type: TYPE_NORMAL
- en: In order to change the filename to the second one, the filename that comes after
    the quotation will have the year, month, date, hour, minute, and second recorded.
    Then, it is downloaded with the `.tsv` file extension. Please check if you can
    download the file by entering the `quotation-export.php` URL directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s make this URL move when you press down the button we just made.
    (source file: `02_preparing_the_server_side_for_export/app/controller/quotation/List.js`):.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating a temporary view for import
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we will continue by implementing the import process. Like it was explained
    earlier, upload the data you will import and then implement it, so that you can
    import after you have visually checked it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's make the `myapp-import` event fire when we press the `import` button,
    and implement it so that the panel shows to confirm the import data.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s implement the listener. When this event happens, the URL will
    change to `#!/quotation/import` (source file: `03_making_a_temporary_view_for_import/app/controller/quotation/Quotation.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, implement so that the event fires (source file: `03_making_a_temporary_view_for_import/app/controller/quotation/List.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Implement the contents of the `onImport` method that we implemented earlier.
    From the `List` view object, fire the `myapp-import` event with `fireEvent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When this event happens, the URL will be changed. Next, modify `onShow` so
    that the panel for imports shows up (source file: `03_making_a_temporary_view_for_import/app/controller/quotation/Quotation.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameter analysis is being performed by the process we made earlier. Using
    this process, if you have an `import` property, the `import` panel will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We haven''t made the main `import` panel. Here, we have just made a very simple
    panel so that it can be displayed for the time being (source file: `03_making_a_temporary_view_for_import/app/view/quotation/Import.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this panel (`app/view/quotation/Quotation.js`) to the `screen` panel item
    (source file: `03_making_a_temporary_view_for_import/app/view/quotation/Quotation.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: When you configure an item, you should specify the `xtype`. To do this, set
    up the class name it requires so that dynamic loading can take place.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this state, execute the whole application. When you press the `import` button,
    the following panel will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a temporary view for import](img/5446OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `import` panel is still temporary, and the `grid` panel we implemented earlier
    is still not displayed; but we can check with the `onShow` event handler that
    it is changing properly.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the CT view for import
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We haven''t created the CT that we usually would have made already. So, let''s
    make the CT to display the temporary import panel we made earlier (source file:
    `04_making_the_ct_view_for_import/ct/quotation/view_import.html`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the HTML, there shouldn''t be any problems if we duplicate a different
    HTML and amend the JavaScript file to be read in the same way (source file: `04_making_the_ct_view_for_import/ct/quotation/view_import.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s prepare a grid for this panel. After the upload is complete, it
    will receive the display data from JSON data. So, let''s make a store with the
    `memory` proxy (source file: `04_making_the_ct_view_for_import/app/store/QuotationImport.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, use the following code to prepare a grid for this panel (source file:
    `04_making_the_ct_view_for_import/app/store/QuotationImportItems.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason we have created two `memory` proxies is because we will prepare
    one each for `Quotation` and `Quotations`, and then make two grids. Now, we are
    going to use this in `Grid`; but we will add the following code to make sure that
    it displays without any problems in CT (source file: `04_making_the_ct_view_for_import/ct/quotation/view_import.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: To make sure that the two stores we made previously can use the `view_import.js`
    script in the CT directory, let's change it so that it can instantiate when it's
    initially launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll quickly make the view. We''ll remodel the temporary `Import` panel
    we made earlier (source file: `04_making_the_ct_view_for_import/app/view/quotation/Import.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned earlier, we will make two `grid` panels. This is for `Quotation`
    and `Quotations`. Again, the layout is a **border** **layout** and it specifies
    flex.
  prefs: []
  type: TYPE_NORMAL
- en: Users who have been using Ext JS for a long time might think this is strange;
    but with the current Ext JS, you can specify flex even in a border layout.
  prefs: []
  type: TYPE_NORMAL
- en: So, if you set up `flex:1` for both `north` and `center`, it will equally arrange
    the top and bottom of the form; and with `north` set up as `split:true`, the splitter
    can be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you check the display, it will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the CT view for import](img/5446OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating Upload and Show Data in the grid
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This time, upload the data you exported and let''s display it in a grid. To
    do this, add a controller in `app.js`. You might have to jog your memory because
    it has been a while since the last time! (Source file: `05_making_upload_and_show_data_in_the_grid/app/Application.js`.):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will make this controller (source file: `05_making_upload_and_show_data_in_the_grid/app/controller/quotation/Import.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, temporarily change the `upload` button (that we created previously) to
    `filefield` (source file: `05_making_upload_and_show_data_in_the_grid/app/view/quotation/Import.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore, add the `API` key in the config options and specify the `Direct`
    function in `submit`. This panel is a form panel. Upload the file using the `submit`
    method. Next, make the `Direct` function that we specified in `submit` (source
    file: `05_making_upload_and_show_data_in_the_grid/p` `hp/config.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll add the following method to the `MyAppQuotation` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll actually implement the method we added previously. It''s too long to
    include in this text, so please refer to the source files for the code (source
    file: `05_making_upload_and_show_data_in_the_grid/php/classes/MyAppQuotation.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: Return the upload data again with JSON. If you are thinking of building an application,
    you should perform an input check because the user can input whatever information
    they like with a TSV file.
  prefs: []
  type: TYPE_NORMAL
- en: With the controller you implemented before, use the `loadData` method and read
    the data that was returned from the server side into the `MemoryStore` method.
  prefs: []
  type: TYPE_NORMAL
- en: Executing the Import data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have displayed the read data in the grid and checked it, you can create
    a button to apply it to the database (source file: `06_execute_import_data /app/view/quotation/Import.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s make it so that it is impossible to press the button in the initial
    state. It will enable the button once the previous data upload has been complete
    (source file: `06_execute_import_data /app/controller/quotation/Import.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are calling the `executeImport` and `Direct` functions. That''s right,
    we haven''t made it yet. Let''s make this and make it possible to receive data
    from the client side (source file: `06_execute_import_data /php/config.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll implement the method we added to the `config.php` file. Again, this
    is too long to show here, so please refer to the source file (source file: `06_execute_import_data
    /php/classes/MyAppQuotation.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: When the data has been received, empty the inside of the database once with
    `Truncate` and insert the new data. Whether this is a good or bad way to do it
    will depend on the system you make.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, if you look closely at the code, you'll know that error processing
    is not at a high level. If you are intending to make this at a commercial level,
    you will have to build up this area. Already, the implementation is complete.
    But finally, let's change the URL to `#!/quotation` to change it to a list display,
    and then finish.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have motored through implementing the `Export` and `Import` data. There are
    still many points to cover, such as input checks and the error checks. But after
    learning this flow, I think you now have the base to customize this database in
    the way that you want.
  prefs: []
  type: TYPE_NORMAL
- en: Well done! You've made it to the end of the book!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go over what you have achieved:'
  prefs: []
  type: TYPE_NORMAL
- en: You made the data structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You made the application architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You made the input and output by using grids and fields on the browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You developed the application to obtain information using various charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You made the data export and import management features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each feature is fundamental to an application of this kind. From now on, if
    you're thinking of creating something similar in your next project, please use
    this sample application as a base for your application. You only need to change
    a few points, and then you should be able to create a customized application very
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating the architecture from this book into applications you have made,
    or are about to make, will simplify control and improve maintenance. It will also
    give you have high-level and versatile history management and let you add new
    screens with ease.
  prefs: []
  type: TYPE_NORMAL
- en: However, the sample application introduced in this book needed some extra features
    for actual real-world use. So we added some things here and there at the end of
    this chapter to brush up the application.
  prefs: []
  type: TYPE_NORMAL
- en: A list of the extra edited code files can be found in the sample code folder
    for this chapter. Please refer to this to see the final modifications we made
    to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we have included the comment `// update code` next to any modifications.
    Just search inside the code with that comment, and you should be able to see changes
    straight away.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, remember that if you get lost, or if you hit a brick wall in one of
    your future projects, just take another look at this application and see if it
    can offer you some kind of solution.
  prefs: []
  type: TYPE_NORMAL
- en: I hope that you will be able to create some fantastic applications! Good luck
    and happy coding!
  prefs: []
  type: TYPE_NORMAL
