["```js\n<script type=\"text/javascript\"> \n    var r = 400; \n\n    var svg = d3.select(\"body\") \n            .append(\"svg\"); \n\n    var positionLabel = svg.append(\"text\") \n            .attr(\"x\", 10) \n            .attr(\"y\", 30); \n\n    svg.on(\"mousemove\", function () { //<-A \n        printPosition(); \n    }); \n\n    function printPosition() { //<-B \n        var position = d3.mouse(svg.node()); //<-C \n        positionLabel.text(position); \n    }   \n\n    svg.on(\"click\", function () { //<-D \n        for (var i = 1; i < 5; ++i) { \n            var position = d3.mouse(svg.node()); \n\n            var circle = svg.append(\"circle\") \n                    .attr(\"cx\", position[0]) \n                    .attr(\"cy\", position[1]) \n                    .attr(\"r\", 0) \n                    .style(\"stroke-width\", 5 / (i)) \n                    .transition() \n                        .delay(Math.pow(i, 2.5) * 50) \n                        .duration(2000) \n                        .ease(d3.easeQuadIn) \n                    .attr(\"r\", r) \n                    .style(\"stroke-opacity\", 0) \n                    .on(\"end\", function () { \n                        d3.select(this).remove(); \n                    }); \n        } \n    }); \n</script> \n\n```", "```js\nsvg.on(\"mousemove\", function () { //<-A \n    printPosition(); \n}); \n\nfunction printPosition() { //<-B \n    var position = d3.mouse(svg.node()); //<-C \n    positionLabel.text(position); \n}   \n\n```", "```js\nsvg.on(\"click\", function () { //<-D \n        for (var i = 1; i < 5; ++i) { \n            var position = d3.mouse(svg.node()); \n\n        var circle = svg.append(\"circle\") \n                .attr(\"cx\", position[0]) \n                .attr(\"cy\", position[1]) \n                .attr(\"r\", 0) \n                .style(\"stroke-width\", 5 / (i)) // <-E \n                .transition() \n                    .delay(Math.pow(i, 2.5) * 50) // <-F \n                    .duration(2000) \n                    .ease('quad-in') \n                .attr(\"r\", r) \n                .style(\"stroke-opacity\", 0) \n                .each(\"end\", function () { \n                    d3.select(this).remove(); // <-G \n                }); \n        } \n}); \n\n```", "```js\n<script type=\"text/javascript\"> \n    var initR = 100,  \n        r = 400,  \n        thickness = 20; \n\n    var svg = d3.select(\"body\") \n            .append(\"svg\"); \n\n    d3.select(\"body\") // <-A \n            .on(\"touchstart\", touch) \n            .on(\"touchend\", touch); \n\n    function touch() { \n        d3.event.preventDefault(); // <-B \n\n        var arc = d3.arc() \n                .outerRadius(initR) \n                .innerRadius(initR - thickness); \n\n        var g = svg.selectAll(\"g.touch\") // <-C \n                .data(d3.touches(svg.node()), function (d, i) { \n                    return i; \n                }); \n\n        g.enter() \n            .append(\"g\") \n            .attr(\"class\", \"touch\") \n            .attr(\"transform\", function (d) { \n                return \"translate(\" + d[0] + \",\" + d[1] + \")\"; \n            }) \n            .append(\"path\") \n                .attr(\"class\", \"arc\") \n                .transition().duration(2000).ease(d3.easeLinear) \n                .attrTween(\"d\", function (d) { // <-D \n                    var interpolate = d3.interpolate( \n                            {startAngle: 0, endAngle: 0}, \n                            {startAngle: 0, endAngle: 2 * Math.PI} \n                        ); \n                    return function (t) { \n                        return arc(interpolate(t)); \n                    }; \n                }) \n                .on(\"end\", function (d) { \n                    if (complete(d)) // <-E \n                        ripples(d); \n                    g.remove(); \n                }); \n\n        g.exit().remove().each(function (d) { \n            console.log(\"Animation stopped\"); \n            d[2] = \"stopped\"; // <-F \n        }); \n    } \n\n    function complete(d) { \n        console.log(\"Animation completed? \" + (d.length < 3)); \n        return d.length < 3; \n    } \n\n    function ripples(position) { \n        console.log(\"Producing ripple effect...\"); \n\n        for (var i = 1; i < 5; ++i) { \n            var circle = svg.append(\"circle\") \n                    .attr(\"cx\", position[0]) \n                    .attr(\"cy\", position[1]) \n                    .attr(\"r\", initR - (thickness / 2)) \n                    .style(\"stroke-width\", thickness / (i)) \n                .transition() \n                    .delay(Math.pow(i, 2.5) * 50) \n                    .duration(2000).ease(d3.easeQuadIn) \n                    .attr(\"r\", r) \n                    .style(\"stroke-opacity\", 0) \n                    .on(\"end\", function () { \n                        d3.select(this).remove(); \n                    }); \n        } \n    } \n</script> \n\n```", "```js\nd3.select(\"body\") // <-A \n            .on(\"touchstart\", touch) \n            .on(\"touchend\", touch); \n\n```", "```js\nd3.event.preventDefault(); // <-B \n\n```", "```js\nvar g = svg.selectAll(\"g.touch\") // <-C \n                .data(d3.touches(svg.node()), function (d, i) { \n                    return i; \n                });  \n\n```", "```js\n        g.enter() \n            .append(\"g\") \n            .attr(\"class\", \"touch\") \n            .attr(\"transform\", function (d) { \n                return \"translate(\" + d[0] + \",\" + d[1] + \")\"; \n            }) \n            .append(\"path\") \n                .attr(\"class\", \"arc\") \n                .transition().duration(2000).ease(d3.easeLinear) \n                .attrTween(\"d\", function (d) { // <-D \n                    var interpolate = d3.interpolate( \n                            {startAngle: 0, endAngle: 0}, \n                            {startAngle: 0, endAngle: 2 * Math.PI} \n                        ); \n                    return function (t) { \n                        return arc(interpolate(t)); \n                    }; \n                }) \n                .on(\"end\", function (d) { \n                    if (complete(d))  \n                        ripples(d); // <-E \n                    g.remove(); \n                }); \n\n```", "```js\n        g.exit().remove().each(function (d) { \n            console.log(\"Animation stopped\"); \n            d[2] = \"stopped\"; // <-F \n        }); \n     ... \n     function complete(d) { \n        console.log(\"Animation completed? \" + (d.length < 3)); \n        return d.length < 3; \n    } \n\n```", "```js\n<script type=\"text/javascript\"> \n    var width = 600, height = 350, r = 50; \n\n    var data = [ \n        [width / 2 - r, height / 2 - r], \n        [width / 2 - r, height / 2 + r], \n        [width / 2 + r, height / 2 - r], \n        [width / 2 + r, height / 2 + r] \n    ]; \n\n    var svg = d3.select(\"body\").append(\"svg\") \n            .attr(\"style\", \"1px solid black\") \n            .attr(\"width\", width) \n            .attr(\"height\", height) \n            .call( // <-A \n                    d3.zoom() // <-B \n                    .scaleExtent([1, 10]) // <-C \n                    .on(\"zoom\", zoomHandler) // <-D \n            ) \n            .append(\"g\"); \n\n    svg.selectAll(\"circle\") \n            .data(data) \n            .enter().append(\"circle\") \n            .attr(\"r\", r) \n            .attr(\"transform\", function (d) { \n                return \"translate(\" + d + \")\"; \n            }); \n\n    function zoomHandler() { \n        var transform = d3.event.transform; \n\n        svg.attr(\"transform\", \"translate(\" \n            + transform.x + \",\" + transform.y \n            + \")scale(\" + transform.k + \")\"); \n    } \n</script> \n\n```", "```js\nvar svg = d3.select(\"body\").append(\"svg\") \n            .attr(\"style\", \"1px solid black\") \n            .attr(\"width\", width) \n            .attr(\"height\", height) \n            .call( // <-A \n                d3.behavior.zoom() // <-B \n                    .scaleExtent([1, 10]) // <-C \n                    .on(\"zoom\", zoomHandler) // <-D \n            ) \n            .append(\"g\"); \n\n```", "```js\nfunction zoomHandler() { \n    var transform = d3.event.transform; \n\n    svg.attr(\"transform\", \"translate(\" \n        + transform.x + \",\" + transform.y \n        + \")scale(\" + transform.k + \")\"); \n} \n\n```", "```js\n<script type=\"text/javascript\"> \n    var width = 960, height = 500, r = 50; \n\n    var data = [ \n        [width / 2 - r, height / 2 - r], \n        [width / 2 - r, height / 2 + r], \n        [width / 2 + r, height / 2 - r], \n        [width / 2 + r, height / 2 + r] \n    ]; \n\n    var svg = d3.select(\"body\").append(\"svg\") \n            .attr(\"width\", width) \n            .attr(\"height\", height) \n            .append(\"g\"); \n\n    var drag = d3.drag() // <-A \n            .on(\"drag\", move); \n\n    svg.selectAll(\"circle\") \n            .data(data) \n            .enter().append(\"circle\") \n            .attr(\"r\", r) \n            .attr(\"transform\", function (d) { \n                return \"translate(\" + d + \")\"; \n            }) \n            .call(drag); // <-A \n\n    function move(d) { \n        var x = d3.event.x, // <-C \n            y = d3.event.y; \n\n        if(inBoundaries(x, y)) \n            d3.select(this)  \n                .attr(\"transform\", function (d) { // <-D \n                    return \"translate(\" + x + \", \" + y + \")\"; \n                }); \n    } \n\n    function inBoundaries(x, y){ \n        return (x >= (0 + r) && x <= (width - r))  \n            && (y >= (0 + r) && y <= (height - r)); \n    } \n</script> \n\n```", "```js\nvar drag = d3.behavior.drag() // <-A \n            .on(\"drag\", move); \n\n```", "```js\nsvg.selectAll(\"circle\") \n            .data(data) \n            .enter().append(\"circle\") \n            .attr(\"r\", r) \n            .attr(\"transform\", function (d) { \n                return \"translate(\" + d + \")\"; \n            }) \n            .call(drag); // <-B \n\n```", "```js\n   function move(d) { \n        var x = d3.event.x, // <-C \n            y = d3.event.y; \n\n        if(inBoundaries(x, y)) \n            d3.select(this)  \n                .attr(\"transform\", function (d) { // <-D \n                    return \"translate(\" + x + \", \" + y + \")\"; \n                }); \n} \n\n```", "```js\n    function inBoundaries(x, y){ \n        return (x >= (0 + r) && x <= (width - r))  \n            && (y >= (0 + r) && y <= (height - r)); \n    } \n\n```"]