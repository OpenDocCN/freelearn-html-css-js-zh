["```js\n$heroku login\nEnter your Heroku credentials.\nEmail: your.email@example.com\nPassword (typing will be hidden):\nAuthentication successful.\n\n```", "```js\n$ heroku create\nCreating enigmatic-anchorage-3587... done, stack is cedar-14\nhttps://enigmatic-anchorage-3587.herokuapp.com/ | https://git.heroku.com/enigmatic-anchorage-3587.git\nGit remote heroku added\n\n```", "```js\n$ git remote add heroku https://git.heroku.com/enigmatic-anchorage-3587.git\n\n```", "```js\nweb: node server/index.js\n\n```", "```js\n$ heroku local\nInstalling Heroku Toolbelt v4... done\nSetting up iojs-v3.2.0... done\nInstalling core plugins heroku-apps, heroku-fork, heroku-git, heroku-local, heroku-run, heroku-status... done\nDownloading forego-0.16.1 to /Users/abiee/.heroku... done\nforego | starting web.1 on port 5000\nweb.1  | Server running\n\nYou can access the server using the browser at the http://localhost:8000/ URL. If you don't get any issues, you can make a real deployment by pushing the code at the master branch:\n$ git checkout master\n$ gulp build\n$ git add .\n$ git commit \"Deployment build\"\n$ git push heroku master\nCounting objects: 63, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (57/57), done.\nWriting objects: 100% (63/63), 380.85 KiB | 0 bytes/s, done.\nTotal 63 (delta 3), reused 0 (delta 0)\nremote: Compressing source files... done.\nremote: Building source:\nremote:\nremote: -----> Node.js app detected\nremote:\nremote: -----> Creating runtime environment\nremote:\nremote:        NPM_CONFIG_LOGLEVEL=error\nremote:        NPM_CONFIG_PRODUCTION=true\nremote:        NODE_ENV=production\nremote:        NODE_MODULES_CACHE=true\nremote:\nremote: -----> Installing binaries\nremote:        engines.node (package.json):  unspecified\nremote:        engines.npm (package.json):   unspecified (use default)\nremote:\nremote:        Resolving node version (latest stable) via semver.io...\nremote:        Downloading and installing node 0.12.7...\nremote:        Using default npm version: 2.11.3\nremote:\nremote: -----> Restoring cache\nremote:        Skipping cache (new runtime signature)\nremote:\nremote: -----> Building dependencies\nremote:        Pruning any extraneous modules\nremote:        Installing node modules (package.json)\n...\nremote: -----> Caching build\nremote:        Clearing previous node cache\nremote:        Saving 1 cacheDirectories (default):\nremote:        - node_modules\nremote:\nremote: -----> Build succeeded!\nremote:        ├── backbone@1.2.2\nremote:        ├── body-parser@1.13.3\nremote:        ├── browser-sync@2.8.2\nremote:        ├── express@4.13.3\nremote:        ├── http@0.0.0\nremote:        ├── http-proxy@1.11.2\nremote:        ├── jquery@2.1.4\nremote:        ├── lodash@3.10.1\nremote:        ├── morgan@1.6.1\nremote:        ├── multer@1.0.3\nremote:        └── underscore@1.8.3\nremote:\nremote: -----> Discovering process types\nremote:        Procfile declares types -> web\nremote:\nremote: -----> Compressing... done, 25.4MB\nremote: -----> Launching... done, v3\nremote:        https://enigmatic-anchorage-3587.herokuapp.com/ deployed to Heroku\nremote:\nremote: Verifying deploy.... done.\nTo https://git.heroku.com/enigmatic-anchorage-3587.git\n\n```", "```js\n    \"engines\": {\n      \"node\": \"^0.12.21\"\n    },\n    ```", "```js\n$ heroku logs –tail\n\n```", "```js\n$ sudo apt-get install nginx\n[sudo] password for abiee:\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following extra packages will be installed:\n nginx-common nginx-core\nSuggested packages:\n fcgiwrap nginx-doc\nThe following NEW packages will be installed:\n nginx nginx-common nginx-core\n0 upgraded, 3 newly installed, 0 to remove and 30 not upgraded.\nNeed to get 348 kB of archives.\nAfter this operation, 1297 kB of additional disk space will be used.\nDo you want to continue? [Y/n] Y\n\n```", "```js\n#Start the nginx server\n$ sudo service nginx start\n#Stop the nginx server\n$ sudo service nginx stop\n#Restart the nginx server\n$ sudo service nginx restart\n\n```", "```js\n$ sudo editor /etc/nginx/sites-available/webapp\n\n```", "```js\nupstream webapp {\n  server 127.0.0.1:8000;\n}\n\nserver {\n  listen 80 default_server;\n\n  # Configure logs\n  access_log /var/log/nginx/webapp.access.log;\n  error_log /var/log/nginx/webapp.error.log;\n\n  # Make site accessible from http://www.example.com/\n# server_name localhost;\n  server_name www.example.com;\n\n  location / {\n    # Proxy headers\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarder-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n    proxy_set_header X-NginX-Proxy true;\n\n    # Proxy to Nodejs\n    proxy_pass http://webapp;\n    proxy_redirect off;\n  }\n}\n```", "```js\n$ sudo ln -s /etc/nginx/sites-available/webapp /etc/nginx/sites-enabled/\n\n```", "```js\n$ sudo rm /etc/nginx/sites-enabled/default\n\n```", "```js\n$ sudo service nginx restart\n\n```", "```js\n$ npm install --production\n$ nodejs app.js\n\n```", "```js\n$ sudo useradd -m production\n\n```", "```js\n$ sudo su - production\n$ cd ~\n$ git clone https://example.com/path/to/the/project.git\n\n```", "```js\n$ npm install -g pm2\n\n```", "```js\n$ pm2 start app.js\n[PM2] Starting app in fork_mode (1 instance)\n[PM2] Done.\n┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────────────┬──────────┐\n│ App name │ id │ mode │ pid   │ status │ restart │ uptime │ memory      │ watching │\n├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────────────┼──────────┤\n│ app      │ 0  │ fork │ 16427 │ online │ 0       │ 0s     │ 15.801 MB   │ disabled │\n└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────────────┴──────────┘\n Use `pm2 show <id|name>` to get more details about an app\n\n```", "```js\n$ pm2 logs 0\n[PM2] Tailing last 20 lines for [0] process\n\napp-0 (out): Server running\napp-0 (out): GET / 200 5.911 ms - 8908\napp-0 (out): GET /css/vendor.css 200 2.740 ms - 131\napp-0 (out): GET /js/app.js 200 3.821 ms - 396191\napp-0 (out): GET /api/contacts 200 2.528 ms - 55\n\n[PM2] Streaming realtime logs for [0] process\n\n```", "```js\n$ pm2 start app.js --name app\n\n```", "```js\n$ pm2 start app.js --name app –i 2\n\n```", "```js\n{\n  \"apps\": [{\n    \"name\": \"contacts-app\",\n    \"script\": \"/path/to/the/application/app.js\",\n    \"cwd\": \"/path/to/the/application\",\n    \"watch\": false,\n    \"instances\": 2,\n    \"error_file\": \"/path/to/your/home/contacts-app/app-err.log\",\n    \"out_file\": \"/path/to/your/home/app-out.log\",\n    \"pid_file\": \"//path/to/your/home/app.pid\"\n    \"env\": {\n      \"NODE_ENV\": \"production\"\n    }\n  }]\n}\n```", "```js\n$ pm2 startup -h\n\n Usage: startup [options] [platform]\n\n auto resurrect process at startup. [platform] = ubuntu, centos, redhat, gentoo, systemd, darwin, amazon\n$ sudo env PATH=$PATH:/usr/local/bin pm2 startup ubuntu -u production\n[PM2] Generating system init script in /etc/init.d/pm2-init.sh\n[PM2] Making script booting at startup...\n[PM2] -ubuntu- Using the command:\n su -c \"chmod +x /etc/init.d/pm2-init.sh && update-rc.d pm2-init.sh defaults\"\n System start/stop links for /etc/init.d/pm2-init.sh already exist.\n[PM2] Done.\n\n```", "```js\n$ service pm2-init.sh start\n\n```", "```js\n$ pm2 start process.json\n$ pm2 save\n[PM2] Dumping processes\n\n```"]