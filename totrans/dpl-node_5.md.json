["```js\nprocess.on('uncaughtException', function(err) {\n  console.log('Caught exception: ' + err);\n});\nsetTimeout(function() {\n  console.log(\"The exception was caught and this can run.\");\n}, 1000);\nthrowAnUncaughtException();\n```", "```js\n> Caught exception: ReferenceError: throwAnUncaughtException is not defined\n> The exception was caught and this can run.\n\n```", "```js\nfunction f() {\n  throw new error(\"error somewhere!\")\n}\nsetTimeout(f, 1000*Math.random());\nsetTimeout(f, 1000*Math.random());\n```", "```js\nvar domain = require('domain');\nvar dom = domain.create();\ndom.on('error', function(err) {\n  console.error('error', err.stack);\n});\n\ndom.run(function() {\n  throw new Error(\"my domain error\");\n});\n// error Error: my domain error\n//  at /js/basicdomain.js:10:8\n//  ...\n```", "```js\nvar dom = domain.create();\ndom.on(\"error\", function(err) {\n  console.log(err);\n});\n\nvar somefunc = function() {\n  throw new Error('Explicit bind error');\n};\ndom.add(somefunc);\ndom.run(function() {\n  somefunc();\n});\n// [Error: Explicit bind error]\n```", "```js\nvar domain = require('domain');\nvar fs = require('fs');\nvar dom = domain.create();\ndom.on(\"error\", ...);\nfs.readFile('somefile', dom.bind(function(err, data) {\n  if(err) { throw new Error('bad file call'); }\n}));\n//  { [Error: bad call]\n//  domain_thrown: true,\n//  ...\n```", "```js\n    fs.createReadStream('nofile', callback)\n\n    ```", "```js\ndom1.add(aFuncThatThrows);\ndom1.run(function() {\n  dom1.exit();\n  dom2.enter();\n  aFuncThatThrows();\n});\n// domain 2 error\n```", "```js\n// parent.js\nvar fork = require('child_process').fork;\nvar proc = fork('./child.js');\n\nproc.on('message', function(msg) {\n  console.log(\"Child sent: \" + msg);\n});\n//  Keeps the parent running even if no children are alive.\nprocess.stdin.resume();\n\n// child.js\nvar cnt = 0;\nsetInterval(function() {\n  process.send(++cnt);\n}, 1000);\n```", "```js\n...\nprocess.send(++cnt);\nthrow new Error('boom!');\n```", "```js\nproc.on('exit', function() {\n  console.log(\"Child exited: \", arguments);\n});\n```", "```js\nChild exited:  { '0': 1, '1': null }\n```", "```js\nvar spawn = require('child_process').spawn;\nvar proc = spawn('ls',['-l']);\nproc.stdout.setEncoding('utf8');\nproc.stdout.on('data', function(data) {\n  console.log(data)\n});\n```", "```js\nvar spawn = require('child_process').spawn;\nvar proc = spawn('ls',['-l', '/nonexistent/directory']);\nproc.stderr.setEncoding('utf8');\nproc.stderr.on('data', function(err) {\n  console.log(\"Error\", err)\n});\n```", "```js\nError ls: /nonexistent/directory: No such file or directory\n\n```", "```js\nvar spawn = require('child_process').spawn;\n// This will be the file we write to\nvar out = require('fs').openSync('./out.log', 'w+');\nvar proc = spawn('node', ['./spawn_child.js'], {\n  // The options are: 0:stdin, 1:stdout, 2:stderr\n  stdio : ['pipe', out, 'pipe']\n});\n```", "```js\nvar dgram = require('dgram');\nvar Logger = require('./logger');\n\nlogger = new Logger({\n  file : './out.log',\n  port : 41234,\n  host : 'localhost',\n  encoding : 'utf8',\n  onError : function(err) {\n    console.log(\"ERROR: \", err);\n  },\n  onReady : function() {\n...\n  }\n});\n```", "```js\nconsole.log(\"READY\");\nvar client = dgram.createSocket(\"udp4\");\nvar udpm;\n//  Flood it a bit.\nfor(var x=0; x < 10000; x++) {\n  udpm = new Buffer(\"UDP write #\" + x);\n  logger.log('Test write #' + x);\n  client.send(udpm, 0, udpm.length, 41234, \"localhost\");\n}\n```", "```js\nvar dgram = require('dgram');\nvar fs = require('fs');\n\nmodule.exports = function(opts) {\n\n  opts = opts || {};\n\n  var file = opts.file;\n  var host = opts.host || 'localhost';\n  var port = opts.port || 41234;\n  var encoding = opts.encoding || 'utf8';\n  var onError = opts.onError || function() {};\n  var onReady = opts.onReady || function() {};\n  var socket = dgram.createSocket(\"udp4\");\n  var writeable = true;\n  var _this = this;\n  var stream;\n\n  if(!file) {\n    throw new Error(\"Must send a #file argument\");\n  }\n\n  stream = fs.createWriteStream(file, {\n    flags : 'a+'\n  });\n  stream.setMaxListeners(0);\n\n  socket.bind(port, host);\n\n  socket.on(\"listening\", onReady);\n  socket.on(\"error\", onError);\n  socket.on(\"message\", function(msg) {\n    this.log(msg.toString());\n  });\n\n  this.log = function(msg) {\n    if(!stream) {\n      throw new Error('No write stream available for logger.');\n    }\n\n    try {\n      if(typeof msg !== 'string') {\n        msg = JSON.stringify(msg);\n      }\n    } catch(e) {\n      return onError(\"Illegal message type sent to #log. Must be a string, or JSON\");\n    };\n\n    // You'll likely want to create retry limits here.\n    //\n    var writer = function() {\n      if(!stream.write(msg + '\\n', encoding)) {\n        stream.once('drain', writer);\n      }\n    }\n    writer();\n  };\n};\n```", "```js\nvar express = require('express')\nvar morgan = require('morgan')\nvar app = express()\napp.use(morgan('combined'))\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n});\napp.listen(8080);\n```", "```js\n127.0.0.1 - - [20/Nov/2014:23:02:58 +0000] \"GET / HTTP/1.1\" 200 13 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36\"\n\n```", "```js\napp.use(morgan('combined', {\n  stream : require('fs').createWriteStream('./out.log')\n}));\n```", "```js\n:remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length] \":referrer\" \":user-agent\"\n\n```", "```js\nskip: function(req, res) {\n  return res.statusCode < 400;\n}\n```", "```js\nmorgan.token('cache', function(req, res) {\n  return req.headers['cache-control'];\n});\n```", "```js\napp.use(morgan('cache-control is :cache'))\n```", "```js\n> node\n\n```", "```js\nrequire('repl').start(\"> \").context.sayHello = function() {\n  return \"Hello\"\n};\n```", "```js\n/*  repl_client.js   */\nvar net = require('net');\nvar sock = net.connect(8080);\nprocess.stdin.pipe(sock);\nsock.pipe(process.stdout);\n```", "```js\n/*  repl_server.js  */\nvar repl = require('repl')\nvar net = require('net')\nnet.createServer(function(socket) {\n  var inst = repl.start({\n    prompt : 'repl_server> ',\n    input    : socket,\n    output  : socket,\n    terminal  : true\n  })\n\n  inst.on('exit', function () {\n    socket.end()\n  })\n}).listen(8080)\n```", "```js\n  inst.context.sayHello = function() {\n    return \"Hello\";\n  }\n```", "```js\n.save test.js\n.load test.js\n// Session saved to:test.js\n// ... the output of the session commands, replayed\n```", "```js\nvar repl = require('repl');\nvar net = require('net');\nvar events = require('events');\nvar Emitter = new events.EventEmitter();\n\nmodule.exports = function(port) {\n  net.createServer(function(socket) {\n    var inst = repl.start({\n      prompt : '',\n      input    : socket,\n      output  : socket,\n      terminal  : false\n    })\n\n    inst.on('exit', function () {\n      socket.end();\n    })\n\n    inst.context.heapUsed = function() {\n      return process.memoryUsage().heapUsed;\n    }\n\n    inst.context.send = function(msgType, msg) {\n      Emitter.emit(msgType, msg);\n    }\n\n  }).listen(port);\n\n  return Emitter;\n};\n```", "```js\nvar listener = require('./monitor')(8080);\n\nstore = true;\nvar arr = [];\n\nlistener.on('stop', function() {\n  console.log('stopped');\n  store = false;\n})\n\nlistener.on('start', function() {\n  store = true;\n})\n\nvar runner = function() {\n  if(store === true) {\n    arr.push(Math.random()*1e6);\n    process.stdout.write('.');\n  }\n  setTimeout(runner, 100);\n};\n\nrunner();\n```", "```js\nvar net = require('net');\nvar sock = net.connect(8080);\n\nvar threshold = 0;\nvar stopped = false;\nsock.on('end', function() {\n  clearInterval(writer);\n  console.log('**** Process ended ****');\n});\n//  Keep checking for memory usage, stringifying the returned object\nvar writer = setInterval(function() {\n  sock.write('heapUsed()\\n');\n}, 1000);\n```", "```js\nsock.setEncoding('ascii');\nsock.on('data', function(heapUsed) {\n\n  //  Convert to number\n  heapUsed = +heapUsed;\n\n  //  Responses from commands will not be numbers\n  if(isNaN(heapUsed)) {\n    return;\n  }\n\n  if(!threshold) {\n    threshold = heapUsed;\n    console.log(\"New threshold: \" + threshold)\n  }\n\n  console.log(heapUsed);\n\n  //  If heap use grows past threshold, tell process to stop\n  if((heapUsed - threshold) > 1e6) {\n    !stopped && sock.write('.load stop_script.js\\n');\n    stopped = true;\n  } else {\n    stopped && sock.write('.load start_script.js\\n');\n    stopped = false;\n  }\n});\n```", "```js\n// Stop script\nsend(\"stop\")\n// Start script\nsend(\"start\")\n```", "```js\n{ rss: 12361728, heapTotal: 7195904, heapUsed: 2801472 }\n\n```", "```js\nvar usage = require('usage');\nusage.lookup(process.pid, function(err, result) {\n  console.log(result);\n});\n```", "```js\n{ memory: 15093760,\n memoryInfo: { rss: 15093760, vsize: 3109531648 },\n cpu: 3.8 }\n\n```", "```js\nnpm install -g tick.\n\n```", "```js\nvar fs = require('fs');\nvar stream = require('stream');\nvar lineReader = new stream.Transform({\n  objectMode: true\n});\nlineReader._transform = function $transform(chunk, encoding, done) {\n  var data = chunk.toString()\n  if(this._lastLine) {\n    data = this._lastLine + data;\n  }\n  var lines = data.split('\\n');\n  this._lastLine = lines.pop();\n  lines.forEach(this.push.bind(this));\n  done();\n}\n\nlineReader._flush = function $flush(done) {\n  if(this._lastLine) {\n    this.push(this._lastLine);\n  }\n  this._lastLine = null;\n  done();\n}\nlineReader.on('readable', function $reader() {\n  var line;\n  while(line = lineReader.read()) {\n    console.log(line);\n  }\n});\nfs.createReadStream('./dummy.log').pipe(lineReader);\n```", "```js\nnode --prof logreader --nologfile-per-isolate > v8.log\n\n```", "```js\nnode-tick-processor > profile\n\n```", "```js\n16   21.6%      0    0.0%   LazyCompile: ~$transform /Users/sandro/profiling/logreader.js:8\n\n```", "```js\nwhile((function $badidea() {\n  return 1;\n})());\n```", "```js\nnpm install pm2 -g\n\n```", "```js\n// script.js\nvar count = 1;\nfunction loop() {\n  console.log(count++);\n  setTimeout(loop, 1000);\n};\nloop();\n```", "```js\npm2 start script.js\n// [PM2] Process script.js launched\n\n```", "```js\nPM2: 2014-07-19 23:20:51: Starting execution sequence in -fork mode- for app name:script id:1\nPM2: 2014-07-19 23:20:51: App name:script id:1 online\nscript-1 (out): 2642\nscript-1 (out): 2643\nscript-1 (out): 2644\n...\n\n```", "```js\n// programmatic.js\nvar pm2 = require('pm2');\npm2.connect(function(err) {\n  pm2.start('script.js', {\n    name: 'programmed script runner',\n    scriptArgs: [\n      'first',\n      'second',\n      'third'\n    ],\n    execMode : 'fork_mode'\n  }, function(err, proc) {\n    if(err) {\n      throw new Error(err);\n    }\n  });\n});\n```", "```js\n...\n  \"monit\": {\n    \"loadavg\": [\n      1.89892578125,\n      1.91162109375,\n      1.896484375\n    ],\n    \"total_mem\": 17179869184,\n    \"free_mem\": 8377733120,\n...\n\"pm_id\": 1, // our script.js process\n  \"monit\": {\n    \"memory\": 19619840,\n    \"cpu\": 0\n  }\n...\n```", "```js\n// server.js\nvar http = require('http');\nhttp.createServer(function(req, resp) {\n  if(req.url === \"/\") {\n    resp.writeHead(200, {\n      'content-type' : 'text/plain'\n    });\n    return resp.end(\"Hello World\");\n  }\n  resp.end();\n}).listen(8080);\n```", "```js\n\"use strict\";\nrequire('nodetime').profile({\n  accountKey: 'your_account_key',\n  appName: 'monitoring'\n});\n\nvar http   = require('http');\n\nhttp.createServer(function(request, response) {\n\n  response.writeHead(200, {\n    \"content-type\" : \"text/html\"\n  });\n  response.end('Hello World');\n\n}).listen(8080)\n```", "```js\nnode server.js\n\n```", "```js\n{\n  \"v\": 0,\n  \"level\": 30,\n  \"name\": \"newrelic\",\n  \"hostname\": \"your.server.net\",\n  \"pid\": 32214,\n  \"time\": \"2015-02-16T19:52:20.295Z\",\n  \"msg\": \"Connected to collector-114.newrelic.com:443 with agent run ID 39366519380378313.\",\n  \"component\": \"collector_api\"\n}\n```", "```js\nvar newrelic = require('newrelic');\nvar express = require('express');\n\nvar app = express();\n\napp.get('/', function(req, res) {\n  res.send('Hello World');\n});\n\napp.get('/goodbye', function(req, res) {\n  res.send('Goodbye World');\n});\napp.listen(3000);\nconsole.log('Server started on port 3000');\n```"]