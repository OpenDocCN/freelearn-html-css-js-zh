["```js\n$ npm install -g grunt-cli\ngrunt-cli@0.1.13 /usr/local/lib/node_modules/grunt-cli\n|- resolve@0.3.1\n|- nopt@1.0.10 (abbrev@1.0.7)\n|_ findup-sync@0.1.3 (lodash@2.4.2, glob@3.2.11)\n\n```", "```js\nmodule.exports = function(grunt) { \n\ngrunt.initConfig({ \npkg: grunt.file.readJSON('package.json'), \n\n    }); \n\n}; \n\n```", "```js\n$ npm install grunt-contrib-clean--save-dev\ngrunt-contrib-clean@1.0.0node_modules/grunt-contrib-clean\n|- async@1.5.2\n|_ rimraf@2.5.2 (glob@7.0.0)\n$ sudonpm install grunt-contrib-uglify--save-dev\ngrunt-contrib-uglify@0.11.1node_modules/grunt-contrib-uglify\n|- uri-path@1.0.0\n|- maxmin@2.1.0 (figures@1.4.0, pretty-bytes@3.0.1, gzip-size@3.0.0)\n|- chalk@1.1.1 (escape-string-regexp@1.0.5, supports-color@2.0.0, has-ansi@2.0.0, strip-ansi@3.0.1, ansi-styles@2.2.0)\n|- uglify-js@2.6.2 (uglify-to-browserify@1.0.2, async@0.2.10, source-map@0.5.3, yargs@3.10.0)\n|_ lodash@4.5.1\n$ sudonpm install grunt-contrib-htmlmin--save-dev\ngrunt-contrib-htmlmin@0.6.0node_modules/grunt-contrib-htmlmin\n|- chalk@1.1.1 (escape-string-regexp@1.0.5, supports-color@2.0.0, strip-ansi@3.0.1, has-ansi@2.0.0, ansi-styles@2.2.0)\n|- pretty-bytes@2.0.1 (number-is-nan@1.0.0, get-stdin@4.0.1, meow@3.7.0)\n|_ html-minifier@1.2.0 (relateurl@0.2.6, change-case@2.3.1, concat-stream@1.5.1, cli@0.11.1, clean-css@3.4.9, uglify-js@2.6.2)\n$ sudonpm install grunt-contrib-copy--save-dev\ngrunt-contrib-copy@0.8.2node_modules/grunt-contrib-copy\n|- file-sync-cmp@0.1.1\n|_ chalk@1.1.1 (supports-color@2.0.0, escape-string-regexp@1.0.5, ansi-styles@2.2.0, strip-ansi@3.0.1, has-ansi@2.0.0)\n\n```", "```js\nmodule.exports = function(grunt) { \n\ngrunt.initConfig({ \npkg: grunt.file.readJSON('package.json'), \n\n    }); \n\n //load the task plugins\ngrunt.loadNpmTasks('grunt-contrib-uglify');\ngrunt.loadNpmTasks('grunt-contrib-copy');\ngrunt.loadNpmTasks('grunt-contrib-htmlmin');\ngrunt.loadNpmTasks('grunt-contrib-clean'); \n\n}; \n\n```", "```js\nmodule.exports = function(grunt) { \n\ngrunt.initConfig({ \npkg: grunt.file.readJSON('package.json'), \n clean: ['dist/**'], \n copy: { \n main: { \n files: [ \n {expand: true, src: ['*'], dest: 'dist/',\n                     filter: 'isFile'},\n {expand: true, src: ['bin/**'], dest:\n                    'dist/', filter:\n                     'isFile'}, \n {expand: true, src: ['config/**'], dest:\n                    'dist/', filter:  \n                     'isFile'}, \n {expand: true, src: ['models/**'], dest:\n                    'dist/', filter:\n                     'isFile'}, \n {expand: true, src: ['passport/**'], dest:\n                    'dist/', filter:'isFile'}, \n {expand: true, src: ['public/**'], dest: \n                   'dist/', filter:'isFile'}, \n {expand: true, src: ['routes/**'], dest:\n                    'dist/', filter: 'isFile'}, \n {expand: true, src: ['scripts/**'], dest:\n                    'dist/', filter: 'isFile'}, \n {expand: true, src: ['utils/**'], dest:\n                    'dist/', filter:'isFile'}, \n {expand: true, src: ['views/**'], dest: \n                     'dist/', filter: \n                     'isFile'} \n ] \n } \n }, \nuglify: {\n options: { \n mangle: false \n }, \nmy_target: { \n files: { \n'dist/public/javascripts/giftapp.js': ['dist/public/javascripts/giftapp.js'], \n'dist/public/javascripts/controllers/dashMainController.js': ['dist/public/javascripts/controllers/dashMainController.js'], \n'dist/public/javascripts/controllers/giftappFormController.js': ['dist/public/javascripts/controllers/giftappFormController.js'], \n'dist/public/javascripts/services/giftlistFactory.js': ['dist/public/javascripts/services/giftlistFactory.js'] \n } \n } \n }, \nhtmlmin:{ \n options: { \nremoveComments: true, \ncolapseWhitespace: true \n }, \ndist: { \n files: { \n'dist/public/templates/dash-add.tpl.html': 'dist/public/templates/dash-add.tpl.html', \n'dist/public/templates/dash-main.tpl.html': 'dist/public/templates/dash-main.tpl.html' \n } \n } \n } \n    }); \n\n //load the task plugins \ngrunt.loadNpmTasks('grunt-contrib-uglify'); \ngrunt.loadNpmTasks('grunt-contrib-copy'); \ngrunt.loadNpmTasks('grunt-contrib-htmlmin'); \ngrunt.loadNpmTasks('grunt-contrib-clean'); \n //register the default task \ngrunt.registerTask('default', ['clean','copy','uglify','htmlmin']); \n\n}; \n\n```", "```js\n$ npm install -g grunt-cli\nPassword:\n/usr/local/bin/grunt -> /usr/local/lib/node_modules/grunt-cli/bin/grunt\ngrunt-cli@1.2.0 /usr/local/lib/node_modules/grunt-cli\n|- grunt-known-options@1.1.0\n|- nopt@3.0.6 (abbrev@1.0.9)\n|- resolve@1.1.7\n|_ findup-sync@0.3.0 (glob@5.0.15)\n\n```", "```js\n$ grunt\nRunning \"clean:0\" (clean) task\n>> 53 paths cleaned.\nRunning \"copy:main\" (copy) task\nCopied 35 files\nRunning \"uglify:my_target\" (uglify) task\n>> 4 files created.\nRunning \"htmlmin:dist\" (htmlmin) task\nMinified 2 files\n\n```", "```js\nangular.module(\"giftapp\",[\"ui.router\",\"giftappControllers\"]).config([\"$stateProvider\",\"$urlRouterProvider\",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(\"/dash\"),$stateProvider.state(\"dash\",{url:\"/dash\",templateUrl:\"/templates/dash-main.tpl.html\",controller:\"DashMainController\"}).state(\"add\",{url:\"/add\",templateUrl:\"/templates/dash-add.tpl.html\",controller:\"GiftappFormController\"})}]); \n\n```", "```js\nnode_modules \nconfig \n.idea \ndist/config \n\n```", "```js\nmodule.exports = function(){ \n    if(process.env.NODE_ENV&&process.env.NODE_ENV === 'production'){ \n        return{ \ndb: process.env.DB, \nfacebookAuth : { \nclientID: process.env.facebookClientID, \nclientSecret: process.env.facebookClientSecret, \ncallbackURL: process.env.facebookCallbackURL, \n            }, \n\ntwitterAuth : { \n'consumerKey': process.env.twitterConsumerKey, \n'consumerSecret': process.env.twitterConsumerSecret, \n'callbackURL': process.env.twitterCallbackURL \n            } \n        } \n    } else { \nvarauth = require('./config/authorization'); \n        return { \ndb: 'localhost:27017/giftapp', \nfacebookAuth : { \nclientID: auth.facebookAuth.clientID, \nclientSecret: auth.facebookAuth.clientSecret, \ncallbackURL: auth.facebookAuth.callbackURL \n            }, \n\ntwitterAuth : { \n'consumerKey': auth.twitterAuth.consumerKey, \n'consumerSecret': auth.twitterAuth.consumerSecret, \n'callbackURL': auth.twitterAuth.callbackURL \n            } \n        } \n    } \n\n}; \n\n```", "```js\nvar express = require('express'); \nvar path = require('path'); \nvar favicon = require('serve-favicon'); \nvar logger = require('morgan'); \nvarcookieParser = require('cookie-parser'); \nvarbodyParser = require('body-parser'); \nvarisJSON = require('./utils/json'); \nvar routing = require('resource-routing'); \nvar controllers = path.resolve('./controllers'); \nvar helmet = require('helmet'); \nvarcsrf = require('csurf'); \nvarappconfig = require('./appconfig');\nvarconfig = appconfig(); \n\n//Database stuff \nvarmongodb = require('mongodb'); \nvar monk = require('monk'); \nvardb = monk(config.db); \n\nvar mongoose = require('mongoose'); \nmongoose.connect(config.db); \n\nvar routes = require('./routes/index'); \nvar users = require('./routes/users'); \nvar dashboard = require('./routes/dashboard'); \nvarauth = require('./routes/auth') \n\nvar app = express(); \n\n// view engine setup \napp.set('views', path.join(__dirname, 'views')); \napp.set('view engine', 'ejs'); \n\napp.set('x-powered-by', false); \n\napp.locals.appName = \"My Gift App\"; \n\n// uncomment after placing your favicon in /public \n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico'))); \napp.use(logger('dev')); \napp.use(bodyParser.json()); \napp.use(bodyParser.urlencoded({ extended: false })); \napp.use(cookieParser()); \napp.use(express.static(path.join(__dirname, 'public'))); \napp.use(isJSON); \n\nvar flash = require('connect-flash'); \napp.use(flash()); \n\nvar passport = require('passport'); \nvarexpressSession = require('express-session'); \napp.use(expressSession({secret: 'mySecretKey'})); \napp.use(passport.initialize()); \napp.use(passport.session()); \n\nvarinitializePassport = require('./passport/init'); \ninitializePassport(passport); \n\n//Database middleware \napp.use(function(req,res,next){ \nreq.db = db; \n    next(); \n}); \n\napp.use(helmet()); \napp.use(csrf()); \n\napp.use('/', routes); \napp.use('/users', users); \napp.use('/dash', dashboard); \napp.use('/auth', auth); \n\nvar login = require('./routes/login')(passport); \napp.use('/login', login); \n\nrouting.resources(app, controllers, \"giftlist\"); \nrouting.expose_routing_table(app, { at: \"/my-routes\" }); \n\n// catch 404 and forward to error handler \napp.use(function(req, res, next) { \nvar err = new Error('Not Found'); \nerr.status = 404; \n  next(err); \n}); \n\n// error handlers \n\n// development error handler \n// will print stacktrace \nif (app.get('env') === 'development') { \napp.use(function(err, req, res, next) { \nres.status(err.status || 500); \nres.render('error', { \n      message: err.message, \n      error: err \n    }); \n  }); \n} \n\n// production error handler \n// no stacktraces leaked to user \napp.use(function(err, req, res, next) { \nres.status(err.status || 500); \nres.render('error', { \n    message: err.message, \n    error: {} \n  }); \n}); \n\nmodule.exports = app; \n\n```", "```js\nvarFacebookStrategy = require('passport-facebook').Strategy; \nvar User = require('../models/user'); \nvarappconfig = require('../appconfig')\nvarauth = appconfig(); \n\nmodule.exports = function(passport){ \n\npassport.use('facebook', new FacebookStrategy({ \nclientID: auth.facebookAuth.clientID, \nclientSecret: auth.facebookAuth.clientSecret, \ncallbackURL: auth.facebookAuth.callbackURL, \nprofileFields: ['id', 'displayName', 'email'] \n        }, \n        function(accessToken, refreshToken, profile, cb) { \nUser.findOne({ 'facebook.id': profile.id }, function (err, user) { \n                if(err){ \n                    return cb(err) \n                } else if (user) { \n                    return cb(null, user); \n                } else { \n                    for(key in profile){ \n                        if(profile.hasOwnProperty(key)){ \nconsole.log(key + \" ->\" + profile[key]); \n                        } \n                    } \nvar newUser = new User(); \nnewUser.facebook.id = profile.id; \nnewUser.facebook.token = accessToken; \nnewUser.facebook.name = profile.displayName; \n                    if(profile.emails){ \nnewUser.email = profile.emails[0].value; \n                    } \n\nnewUser.save(function(err){ \n                        if(err){ \n                            throw err; \n                        }else{ \n                            return cb(null, newUser); \n                        } \n                    }); \n                } \n            }); \n        } \n    )); \n} \n\n```", "```js\nvarTwitterStrategy = require('passport-twitter').Strategy; \nvar User = require('../models/user'); \nvarappconfig = require('../appconfig')\nvarauth = appconfig(); \n\nmodule.exports = function(passport){ \n\npassport.use('twitter', new TwitterStrategy({ \nconsumerKey     : auth.twitterAuth.consumerKey, \nconsumerSecret  : auth.twitterAuth.consumerSecret, \ncallbackURL     : auth.twitterAuth.callbackURL \n        }, \n        function(token, tokenSecret, profile, cb) { \nUser.findOne({ 'twitter.id': profile.id }, function (err, user) { \n                if(err){ \n                    return cb(err) \n                } else if (user) { \n                    return cb(null, user); \n                } else { \n                    // if there is no user, create them \nvar newUser                 = new User(); \n\n                    // set all of the user data that we need \nnewUser.twitter.id          = profile.id; \nnewUser.twitter.token       = token; \nnewUser.twitter.username    = profile.username; \nnewUser.twitter.displayName = profile.displayName; \n\nnewUser.save(function(err){ \n                        if(err){ \n                            throw err; \n                        }else{ \n                            return cb(null, newUser); \n                        } \n                    }); \n                } \n            }); \n        } \n    )); \n} \n\n```", "```js\n$ gitinit\n\n```", "```js\n$ git add .\n$ git commit -m \"initil commit\"\n\n```", "```js\n$ heroku login\nEnter your Heroku credentials.\nEmail: john@notreallymyemail.com\nPassword (typing will be hidden): \nAuthentication successful.\n\n```", "```js\n$ heroku create\nCreating app... done, stack is cedar-14\nhttps://guarded-lake-23534.herokuapp.com/ https://git.heroku.com/guarded-lake-23534.git\n\n```", "```js\nweb: node ./dist/bin/www \n\n```", "```js\n$ grunt\nRunning \"clean:0\" (clean) task\n>> 53 paths cleaned.\nRunning \"copy:main\" (copy) task\nCopied 39 files\nRunning \"uglify:my_target\" (uglify) task\n>> 4 files created.\nRunning \"htmlmin:dist\" (htmlmin) task\nMinified 2 files\nDone, without errors.\n$ git add .\n$ git commit -m \"heroku commit\"\n[master 42e6f79] heroku commit\n 17 files changed, 451 insertions(+), 207 deletions(-)\n create mode 100644 Procfile\n create mode 100644 appconfig.js\n create mode 100644 dist/Procfile\n create mode 100644 dist/appconfig.js\n create mode 100644 dist/bin/www\n\n```", "```js\n$ git push heroku master\nCounting objects: 234, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (207/207), done.\nWriting objects: 100% (234/234), 46.90 KiB | 0 bytes/s, done.\nTotal 234 (delta 95), reused 0 (delta 0)\nremote: Compressing source files... done.\nremote: Building source:\nremote: \nremote: -----> Node.js app detected\nremote: \nremote: -----> Creating runtime environment\nremote: \nremote:        NPM_CONFIG_LOGLEVEL=error\nremote:        NPM_CONFIG_PRODUCTION=true\nremote:        NODE_ENV=production\nremote:        NODE_MODULES_CACHE=true\nremote: \nremote: -----> Installing binaries\nremote:        engines.node (package.json):  unspecified\nremote:        engines.npm (package.json):   unspecified (use default)\nremote: \nremote:        Resolving node version (latest stable) via semver.io...\nremote:        Downloading and installing node 5.6.0...\nremote:        Using default npm version: 3.6.0\nremote: \nremote: -----> Restoring cache\nremote:        Skipping cache restore (new runtime signature)\nremote: \nremote: -----> Building dependencies\nremote:        Pruning any extraneous modules\nremote:        Installing node modules (package.json)\nremote:        giftapp@0.0.0 /tmp/build_4e2a4d5757c9fb2834a0950c5e35235f\nremote: \nremote: -----> Discovering process types\nremote:        Procfile declares types -> web\nremote: \nremote: -----> Compressing...\nremote:        Done: 14.2M\nremote: -----> Launching...\nremote:        Released v11\nremote:        https://guarded-lake-23534.herokuapp.com/ deployed to Heroku\nremote: \nremote: Verifying deploy.... done.\nTo https://git.heroku.com/guarded-lake-23534.git\n * [new branch]      master -> master\n\n```"]