- en: Chapter 3. Working with Drag-and-drop Interactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will go through the basic events and callbacks of CreateJS
    to make a **drag-and-drop** feature. After reading this chapter, you will be able
    to understand common events of objects in CreateJS and also how to change properties
    such as width or height. We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Scenarios for drag-and-drop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mouse events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an example to drag-and-drop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All we need to do to create a drag-and-drop feature is to bind events to `DisplayObject`
    on the `Stage` object (such as a circle) and then change the x and y axes of the
    target object continuously as the mouse is moved. Fortunately, CreateJS provides
    many events on mouseover, and we can use them to achieve our goals.
  prefs: []
  type: TYPE_NORMAL
- en: In further sections, we will see how we can bind events to objects and get information
    from the mouse cursor. We will also see how to change the properties of an object
    or shape in the `Stage` object.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the on function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In EaselJS, you can get access to all mouse events, such as click, mouse up,
    and so on. A `MouseEvent` instance is passed as the only parameter for all mouse
    event callbacks. It includes the `stageX` and `stageY` properties, which indicate
    the cursor's position relative to the stage coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, `pressed` will be logged on to the console when the
    mouse is clicked over the circle; thereafter, mouse moves will be logged whenever
    the mouse moves until the mouse is released.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we can simply bind a mouse event to our `DisplayObject` object
    and then read or alter the properties on each event callback. The following screenshot
    displays the output of the previous example along with the details of mouse events:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the on function](img/0260OS_3_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will put all these things together and create a simple
    drag-and-drop interaction.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a drag-and-drop interaction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We learned in the previous chapter that the first requirement for working with
    EaselJS is to create a `Stage` object and then append all the `DisplayObject`
    objects to it. Suppose we have a `Canvas` element with the ID `demoCanvas`. We
    will need the following code for the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to track the movement of mouse cursor events when the mouse cursor
    leaves the `Canvas` element, `mouseMoveOutsideproperty` should be set to `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next step, a circle will be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And, of course, we have to add our shape to the `stage` element shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it''s time to bind functions to the `mousedown` and `pressmove` events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have set a callback function for the `mousedown` event of
    our display object, `circle`. Inside the anonymous function, there is an offset
    variable that has two properties, `x` and `y`. These properties collect the offset
    values of the mouse cursor on every mouse down within the shape (circle in this
    example), so we can use this offset value to change the position of the circle.
    In this example, `x` or `y` could be between +50 and -50.
  prefs: []
  type: TYPE_NORMAL
- en: After that, an anonymous function is added to the `pressmove` event of the shape.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the next anonymous function for the `pressmove` event, we have two lines
    of code. Both calculate the position of the mouse cursor and then alter the coordinates
    of the target shape. `ev.stageX` and `ev.stageY` always give you the coordinates
    of the mouse cursor within the stage. Therefore, using these properties, we can
    change the coordinates of the target shape correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Everything is ready now, but there''s one last step we should perform to complete
    the challenge. As we learned earlier in EaselJS, we should call the `update` function
    in order to update the stage after making any changes in objects in the `stage`
    event. In the drag-and-drop example, we are changing the coordinates of the target
    shape continuously. Therefore, we also have to update the `Stage` event continuously;
    the question is how. The answer to this question is that we have to call `stage.update()`
    on the call for each event as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: EaselJS will update the stage event after each change to the coordinates of
    the circle.
  prefs: []
  type: TYPE_NORMAL
- en: The complete example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here you can see the whole source code for creating a simple drag-and-drop
    interaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: After running the example, you should see a red circle, as shown in the following
    screenshot. By clicking and dragging the circle, the coordinates of the circle
    will be changed.
  prefs: []
  type: TYPE_NORMAL
- en: '![The complete example](img/0260OS_3_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to work with the `mousedown` and `pressmove`
    events, how to change object properties, and also how to update the stage event
    continuously using EaselJS features. With a combination of all the mentioned features,
    we can build an animation or say drag-and-drop interactions with CreateJS.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss working with the animation and transformation
    of objects with CreateJS to develop awesome animations in browsers.
  prefs: []
  type: TYPE_NORMAL
