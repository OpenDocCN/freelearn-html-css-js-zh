- en: Chapter 3. Working with Drag-and-drop Interactions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：处理拖放交互
- en: 'In this chapter, we will go through the basic events and callbacks of CreateJS
    to make a **drag-and-drop** feature. After reading this chapter, you will be able
    to understand common events of objects in CreateJS and also how to change properties
    such as width or height. We will cover the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍CreateJS的基本事件和回调，以实现**拖放**功能。阅读本章后，您将能够理解CreateJS中对象的常见事件，以及如何更改宽度或高度等属性。本章将涵盖以下主题：
- en: Scenarios for drag-and-drop
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拖放场景
- en: Mouse events
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标事件
- en: Creating an example to drag-and-drop
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建拖放示例
- en: The scenario
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景
- en: All we need to do to create a drag-and-drop feature is to bind events to `DisplayObject`
    on the `Stage` object (such as a circle) and then change the x and y axes of the
    target object continuously as the mouse is moved. Fortunately, CreateJS provides
    many events on mouseover, and we can use them to achieve our goals.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建拖放功能，我们只需要将事件绑定到`Stage`对象上的`DisplayObject`（如圆圈）上，然后随着鼠标的移动，持续更改目标对象的x和y轴。幸运的是，CreateJS提供了许多鼠标悬停事件，我们可以利用它们来实现目标。
- en: In further sections, we will see how we can bind events to objects and get information
    from the mouse cursor. We will also see how to change the properties of an object
    or shape in the `Stage` object.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将看到如何将事件绑定到对象上，并从鼠标光标获取信息。我们还将了解如何更改`Stage`对象中对象或形状的属性。
- en: Understanding the on function
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解on函数
- en: In EaselJS, you can get access to all mouse events, such as click, mouse up,
    and so on. A `MouseEvent` instance is passed as the only parameter for all mouse
    event callbacks. It includes the `stageX` and `stageY` properties, which indicate
    the cursor's position relative to the stage coordinates.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在EaselJS中，您可以访问所有鼠标事件，如点击、鼠标抬起等。`MouseEvent`实例作为所有鼠标事件回调的唯一参数传递。它包括`stageX`和`stageY`属性，它们表示光标相对于舞台坐标的位置。
- en: In the following example, `pressed` will be logged on to the console when the
    mouse is clicked over the circle; thereafter, mouse moves will be logged whenever
    the mouse moves until the mouse is released.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，当鼠标点击圆圈时，`pressed`将被记录到控制台；之后，每当鼠标移动时，都会记录鼠标移动，直到鼠标释放。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see, we can simply bind a mouse event to our `DisplayObject` object
    and then read or alter the properties on each event callback. The following screenshot
    displays the output of the previous example along with the details of mouse events:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们可以简单地将鼠标事件绑定到我们的`DisplayObject`对象上，然后在每个事件回调中读取或修改属性。以下截图显示了上一个示例的输出以及鼠标事件的详细信息：
- en: '![Understanding the on function](img/0260OS_3_1.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![理解on函数](img/0260OS_3_1.jpg)'
- en: In the next section, we will put all these things together and create a simple
    drag-and-drop interaction.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将把这些东西放在一起，创建一个简单的拖放交互。
- en: Creating a drag-and-drop interaction
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建拖放交互
- en: 'We learned in the previous chapter that the first requirement for working with
    EaselJS is to create a `Stage` object and then append all the `DisplayObject`
    objects to it. Suppose we have a `Canvas` element with the ID `demoCanvas`. We
    will need the following code for the same:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解到与EaselJS一起工作的第一个要求是创建一个`Stage`对象，然后将所有`DisplayObject`对象附加到它上。假设我们有一个ID为`demoCanvas`的`Canvas`元素。我们需要以下代码来完成同样的任务：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you want to track the movement of mouse cursor events when the mouse cursor
    leaves the `Canvas` element, `mouseMoveOutsideproperty` should be set to `true`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在鼠标光标离开`Canvas`元素时跟踪鼠标光标事件的移动，应将`mouseMoveOutsideproperty`设置为`true`：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the next step, a circle will be created:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，将创建一个圆：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And, of course, we have to add our shape to the `stage` element shown as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们必须将我们的形状添加到以下所示的`stage`元素中：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, it''s time to bind functions to the `mousedown` and `pressmove` events:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候将函数绑定到`mousedown`和`pressmove`事件上了：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, we have set a callback function for the `mousedown` event of
    our display object, `circle`. Inside the anonymous function, there is an offset
    variable that has two properties, `x` and `y`. These properties collect the offset
    values of the mouse cursor on every mouse down within the shape (circle in this
    example), so we can use this offset value to change the position of the circle.
    In this example, `x` or `y` could be between +50 and -50.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们为显示对象 `circle` 的 `mousedown` 事件设置了一个回调函数。在匿名函数内部，有一个偏移变量，它有两个属性，`x` 和
    `y`。这些属性收集鼠标在形状（本例中的圆）上的每次点击的偏移值，因此我们可以使用这个偏移值来改变圆的位置。在这个例子中，`x` 或 `y` 的值可能在 +50
    和 -50 之间。
- en: After that, an anonymous function is added to the `pressmove` event of the shape.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，将一个匿名函数添加到形状的 `pressmove` 事件中。
- en: Inside the next anonymous function for the `pressmove` event, we have two lines
    of code. Both calculate the position of the mouse cursor and then alter the coordinates
    of the target shape. `ev.stageX` and `ev.stageY` always give you the coordinates
    of the mouse cursor within the stage. Therefore, using these properties, we can
    change the coordinates of the target shape correctly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `pressmove` 事件的下一个匿名函数内部，我们有两行代码。这两行代码都计算鼠标光标的当前位置，然后改变目标形状的坐标。`ev.stageX`
    和 `ev.stageY` 总是给出舞台内鼠标光标的坐标。因此，使用这些属性，我们可以正确地改变目标形状的坐标。
- en: 'Everything is ready now, but there''s one last step we should perform to complete
    the challenge. As we learned earlier in EaselJS, we should call the `update` function
    in order to update the stage after making any changes in objects in the `stage`
    event. In the drag-and-drop example, we are changing the coordinates of the target
    shape continuously. Therefore, we also have to update the `Stage` event continuously;
    the question is how. The answer to this question is that we have to call `stage.update()`
    on the call for each event as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切准备就绪，但我们需要执行最后一步来完成挑战。正如我们在 EaselJS 中之前学到的，我们应该在 `stage` 事件中对对象进行任何更改后调用
    `update` 函数，以更新舞台。在拖放示例中，我们正在连续更改目标形状的坐标。因此，我们也必须连续更新 `Stage` 事件；问题是如何做到这一点。这个问题的答案是，我们必须在每个事件的调用上调用
    `stage.update()`，如下所示：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: EaselJS will update the stage event after each change to the coordinates of
    the circle.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: EaselJS 将在每次更改圆的坐标后更新舞台事件。
- en: The complete example
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完整示例
- en: 'Here you can see the whole source code for creating a simple drag-and-drop
    interaction:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你可以看到创建一个简单的拖放交互的完整源代码：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After running the example, you should see a red circle, as shown in the following
    screenshot. By clicking and dragging the circle, the coordinates of the circle
    will be changed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 运行示例后，你应该看到一个红色圆圈，如下面的截图所示。通过点击并拖动圆圈，圆圈的坐标将会改变。
- en: '![The complete example](img/0260OS_3_2.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![完整示例](img/0260OS_3_2.jpg)'
- en: Summary
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to work with the `mousedown` and `pressmove`
    events, how to change object properties, and also how to update the stage event
    continuously using EaselJS features. With a combination of all the mentioned features,
    we can build an animation or say drag-and-drop interactions with CreateJS.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了如何处理 `mousedown` 和 `pressmove` 事件，如何更改对象属性，以及如何使用 EaselJS 功能连续更新舞台事件。通过结合所有提到的功能，我们可以使用
    CreateJS 构建动画或拖放交互。
- en: In the next chapter, we will discuss working with the animation and transformation
    of objects with CreateJS to develop awesome animations in browsers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何使用 CreateJS 处理对象的动画和变换，以在浏览器中开发出色的动画。
