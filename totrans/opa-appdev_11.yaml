- en: Chapter 11. Developing a Social Mobile Application – LiveRoom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build a social mobile web application that we call
    LiveRoom. LiveRoom offers functionality similar to a forum. Users can login and
    post discussions and messages; they can also sign in with their Facebook account.
    The application will be able to support both mobile devices and desktop browsers.
    The following is a screenshot of LiveRoom and the source code is available at
    [https://github.com/winbomb/opapackt/tree/master/liveroom](https://github.com/winbomb/opapackt/tree/master/liveroom)
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing a Social Mobile Application – LiveRoom](img/3749OS_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s have a look at the project structure. It''s a classical Opa project
    structure; we can create a similar structure with the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Project structure](img/3749OS_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`liveroom.opa`: The entry point of the application. It declares the database,
    dispatches the requests, and starts the web server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`login.opa`: The login module. It shows the login page, handles the `UserContext`
    when the user logs in and logs out, and connects to Facebook when the user tries
    to sign in with Facebook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model.opa`: The data model of the application. It defines data models and
    deals with database reading and writing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view.opa`: The UI (user interface). It shows the pages, maps what we fetch
    from the database into XHTML, and then shows them on the page. And moreover, it
    gets the user''s input and tries to insert data into the database through the
    `Model` module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style.css`: The external style sheet. It''s registered when the web server
    starts, so we can use styles in this file application scope.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To compile and run the application, type `make run`.
  prefs: []
  type: TYPE_NORMAL
- en: Authorizing a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss how to make a simple sign in and sign out system
    that is an essential part of this forum and a subset of functionality that is
    frequently needed for other types of websites as well.
  prefs: []
  type: TYPE_NORMAL
- en: Signing in and signing out
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For simplicity, we do not provide a sign up process for the application. Users
    who input a non-blank username and password can log in to the system. `Model.auth`
    returns `{none}` if authorization fails, otherwise it returns `{user}`, where
    user is a value of type `User.t` containing information about the current user.
    Only signed in users will be able to create topics and post messages. This section
    will show you what you should do when users sign in. The following code fragment
    demonstrates the sign in, the code can be found in the `login.opa` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The type `Login.user` is a sum type: `{unlogged}` means the current user has
    not signed in; `{Usert.t user}` means the current user has signed in and user
    information is stored in this record. As we can see from the second line, `UserContext`
    is used to manage the login state. `UserContext` is a high-level mechanism based
    on cookies. It is used to associate values with each client. The user''s data
    stored in `UserContext` can only be accessed and modified by the user who owns
    this data. For most of our needs, we only need to use the following functions
    supplied by `UserContext`.'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `UserContext.make` function to create a `UserContext` with a default
    value; this is what we do in the second line.
  prefs: []
  type: TYPE_NORMAL
- en: Use the `UserContext.change` function to change the current state of the `UserContext`
    for this user. Note that in line nine of the previous code, we changed the state
    to `~{user}` after a successful authorization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `UserContext.remove` function to remove the current value. The following
    code removes the value when a user signs out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `UserContext.get` function to get the current value of the `UserContext`.
    The following code uses this function to get the name of the current signed in
    user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is how we can implement a default user login. However, we can also allow
    the user to finish signing in with his or her Facebook or Twitter account.
  prefs: []
  type: TYPE_NORMAL
- en: Signing in with Facebook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Opa provides the modules FbAuth and Twitter to connect with Facebook and Twitter
    respectively. In the login page of LiveRoom, there is a link button that allows
    the user to sign in with Facebook. There are some additional steps required to
    authenticate with Facebook, and it is beyond the scope of this book to go into
    all the details of authenticating with Facebook, since we instead want to focus
    on the Opa language. Those who would like to know more about Facebook authentication
    should review the following excellent tutorial: [https://github.com/akoprow/opa-devcamp-facebook](https://github.com/akoprow/opa-devcamp-facebook).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you should replace the x''s in `login.opa` with your real data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`App_id` and `app_key` are identical, and `app_secret` should not be shared
    with anyone.'
  prefs: []
  type: TYPE_NORMAL
- en: The application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'LiveRoom is all about posting topics and messages. When users sign in, they
    can start discussions by creating new topics. The newly created topics will be
    shown in the list of most recent discussions, namely the latest discussions list.
    If a user clicks on a topic, he/she will enter the discussion and get a list of
    messages related to the topic. If he/she has signed in, he/she will be able to
    post a message related to the topic that he/she selected, or comment on an existing
    message. The following figure shows the data model of topic, message, and comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The application](img/3749OS_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And here are the type definitions in Opa:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'With these data model definitions in place, we can declare our database `liveroom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The database path `next_id` is an integer holding the max topic id; this is
    a solution to simulate an auto-increment key that MongoDB does not natively support.
    The `topics` path stores the topics that the users users create. The primary key
    is the topic's id.
  prefs: []
  type: TYPE_NORMAL
- en: Listing topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On the main page of LiveRoom, we will display recently discussed topics that
    were fetched from the database. In Opa this is an easy task. The following function
    query retrieves a specified page of topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Really simple, isn''t it? As we have discussed in [Chapter 7](ch07.html "Chapter 7. Working
    with Databases"), *Working with Databases*, we can read data from the database
    by using a database path such as `/liveroom/topics`. The statements in square
    brackets are querying conditions. The query result `topics` is a dbset, we convert
    it into iteration in the next line, so we can loop the result in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is exactly what we do in the user interface code. Please refer to `list_topics`
    in the module View for details. To list messages and comments, you will also need
    to use similar code. First, we fetch a topic from the database for a given id:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We then iterate on messages and comments in the module View to convert them
    into XHTML and display them on the page. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Check the function `show_messages` in the module View for the complete code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a topic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the most important use cases of LiveRoom is creating a topic. When users
    have signed in, they will be able to create a topic by clicking on **new topic**
    on the main page. This will navigate users to a topic creating page where they
    can input the title and content. When users click on the **create** button, the
    function `add_topic` will be invoked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `add_topic` function first creates a record of type `Topic.t` from the
    user''s input. It then tries to insert the topic into the database by calling
    the `Model.insert` function defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Because there is no auto-increment id in MongoDB, we use the `next_id` function
    to get a unique identifier. The function returns `{none}` if it fails, otherwise
    it returns `some(id)`, where `id` is the next identifier. In the `next_id` function,
    we use the Mongo API `MongoCommands.findAndUpdateOpa` to perform an atomic operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Posting messages and comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we can tell from the data type `Topic.t` that we use to store messages in
    a string map inside a topic, we need a string key to access or update a message.
    In LiveRoom, we use `{topic id}_{system time}_{random string}` as a key. After
    inserting a message, some other fields, such as reply, need to be updated too.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To post a comment, just append a new item to the list of comments for a given
    topic id and the message key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Designing for mobile devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make sure whether our LiveRoom application is supported on mobile devices,
    we have to do a little more work. A viewport metatag needs to be put into the
    `<head>` tag of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here we use `Resource.full_page` to embed the `viewport` meta tag into our page.
    A detailed description of this function can be found online ([http://doc.opalang.org](http://doc.opalang.org)).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to import `bootstrap.responsive` to help our application to be
    more responsive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find more information about responsive Bootstrap classes on the Bootstrap
    home page: [http://twitter.github.io/bootstrap/scaffolding.html#responsive](http://twitter.github.io/bootstrap/scaffolding.html#responsive)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our LiveRoom application, we use the responsive Bootstrap class `hide-phone`
    to hide the column `last poster` on mobile phones when listing the topics as there
    may not be enough width. The following code shows how we can do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We can find the code in the function `main` of `view.opa`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we described how to write a social mobile web application in
    Opa. First, we talked about the user authorization procedure; we used `UserContext`
    to maintain the login state for a given client. We also mentioned how to connect
    with Facebook in Opa. In the next section, we discussed in detail how to implement
    LiveRoom, this included reading data from the database and displaying it in the
    webpage, and inserting user submitted topics, messages, and comments into the
    database. Please refer to the source code to review the complete code.
  prefs: []
  type: TYPE_NORMAL
