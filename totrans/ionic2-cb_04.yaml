- en: Chapter 4. Validating Forms and Making HTTP Requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following tasks related to creating form
    input validation, mocked API calls, and payment pages using Stripe:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a complex form with input validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving data via a mocked API using a static JSON file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating with Stripe for online payment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All mobile apps require taking user input and sending it to a backend server.
    A simple example is filling out a form, such as a user registration or contact
    form. The information is validated against a set of rules before being sent to
    the backend. Also, there are many other scenarios where the information is captured
    based on user behavior from the app, such as where they touch or how much time
    they spend on a certain page. Regardless, you will run into many send and retrieve
    data scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following three basic examples:'
  prefs: []
  type: TYPE_NORMAL
- en: How to validate user inputs, such as text, number, and required versus not required,
    and communicate the data to another page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to render data without having an actual backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to process payments using Stripe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these are actually available natively in Angular 2\. However, since Angular
    2 has a lot of changes compared to Angular 1 in terms of processing data and working
    with the backend server, it's worth covering these topics in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a complex form with input validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will build an app to demonstrate form validation using
    `ngForm` and `ngControl`. Here is a screenshot of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a complex form with input validation](img/image00248.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the user tries to submit without providing valid information, the form will
    show the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a complex form with input validation](img/image00249.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Basically, the **Name** field is required. The **Phone** field is the number
    type, but is optional. The **Comment** field is required and the user must enter
    at least four characters. Of course, this is just for demonstration of the input
    length. The user, finally, must agree to the terms and conditions via the toggle
    input.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a successful validation, the user will be taken to the second screen
    with a summary of the previous screen, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a complex form with input validation](img/image00250.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This app example could work either in a browser or on a physical device. However,
    you can optionally connect your physical device to verify the **Phone** field
    for number keypad.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Observe the following the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `MyFormValidation` app using the `blank` template, as shown, and
    go to the `MyFormValidation` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `./src/app/app.module.ts` file and replace the content with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You may realize that there is a common service to be used across the app, called
    `MyFormService` here. This example also has a second page, called `ThankyouPage`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s create the service by first creating a directory, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `myform.js` file in the component''s directory that you just created,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This example will keep the service component simple for demonstration purposes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open and edit the `./src/pages/home/home.html` template, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is probably the most complicated part of the form validation process because
    there are many places where you have to embed validation logic for the input.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open and replace the content of the `./src/pages/home/home.scss` file with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `./src/pages/home/home.ts` for editing with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You may note that there isn't much validation code in the JavaScript part. This
    means that the template takes care of a lot of the validations. There is also
    an `import` command for a `thankyou` page, which you will have to create next.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s create the `thankyou` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `thankyou.js` file in the component''s directory that you just created,
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This page just renders the data from the `MyFormService` service. So, you can
    keep it very simple.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create `thankyou.html` in the `./src/pages/thankyou`, folder, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `thankyou.scss` in the `./src/pages/thankyou` folder, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `./app/app.scss` file to ensure that you include both the `.scss`
    files in the two pages, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to your Terminal and run the app with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start with the `home.html` file, where most of the validation code is
    located. If you look at the structure of this page, it's very typical. You have
    `<ion-navbar>` with `<ion-title>`. The `<form>` element must be inside the `<ion-content>`
    area.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's a requirement to use the `<form>` element for Angular 2 validation to work.
    Otherwise, there will be no `submit` event and you cannot catch errors for each
    input.
  prefs: []
  type: TYPE_NORMAL
- en: '`form` has the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To assign a local variable *on the fly*, you use the `#` sign. This means that
    you want the `f` variable to refer to `ngForm`, which is automatically created
    from Angular 2\. This is a special object that contains everything related to
    the current form. You are advised to use `novalidate` to bypass the default HTML5
    validation because you are using Angular 2 for validation instead. Otherwise,
    the `form` will acquire conflicts. The `(ngSubmit)` is pretty much an event to
    trigger the `onSubmit(f)` function whenever the `button` with `type=submit` is
    touched or clicked. When you submit the form, it will pass the `f` variable along
    so that you can process the object inside the `onSubmit` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `form` template consists of just `<ion-list>` and `<ion-item>`. You just
    need to know how to validate each input and display the error. Let''s use the
    `Name` field as the first example. This is the `<ion-input>` for `Name`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the error displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To validate, you must assign `name` a local variable name. This is to refer
    to that input using `f.controls.name` in other areas. Recall that the `f` variable
    has been declared previously as the `ngForm` object. Here is a view of how the
    `ngForm` is structured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00251.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can view this using the Chrome Developer console because the code actually
    gives this output when you submit the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'The error message `Name is required` will be hidden when either of the following
    conditions takes place:'
  prefs: []
  type: TYPE_NORMAL
- en: The form has not been submitted yet. Otherwise, people will see the error message
    right away before they even type in something. This is not a good user experience.
    To check for this, you have to use a temporary Boolean, called `isSubmitted`.
    The `f.controls.name.pristine` variable means that the input has not been modified.
    The opposite of this would be `f.controls.name.dirty`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `f.controls.name.valid` variable is `true`. However, you cannot check this
    right away because, if the input is empty, the `name` object does not exist yet.
    That's why you need to check for the existence of `f.controls.name` before checking
    for the `valid` Boolean.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is no need to check the phone requirement; so, you just need to assign
    `name` and a model, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `Comment` field, there is a need to validate using both `required`
    and `minlength=4`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You may think `required` is unnecessary because, if the length is zero, Angular
    2 will trigger an error flag. However, that is not true. When the user doesn't
    enter anything in the input, the input will have no length because the variable
    doesn't exist. That's why you need to check for both scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'The error message for the `Comment` field is quite interesting because it shows
    the number of characters the user needs to enter, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The main idea here is that you only want to show this `div` when the form is
    submitted and it's pristine via `f.controls.comment.pristine`. This means that
    the user has not entered anything in the form. You also want to show the message
    when the form is dirty and has errors via `f.controls.comment.errors`. If you
    inspect the console, you can see a list of many detailed errors under the `f.controls.comment.errors`
    object. In order to tell the user how many characters they have left to enter,
    you have to first check `f.controls.comment.errors.minlength` because, if that
    variable doesn't exist, there is no error or the `comment` input is empty. If
    you do not check for this, you will get a parse error later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `home.ts` file, the `onSubmit` method must toggle the `isSubmitted`
    Boolean to `true`, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Then, you have to do a general check for `myForm.valid` and `myForm.value.tos`.
    You may wonder why we are checking for `tos` here instead of validating it inside
    the template. The reason is that there is no way to validate a toggle button in
    Angular 2 since it doesn't make sense to do so as it cannot be `required`. Therefore,
    you have to do a custom validation here to make sure it's `true` in the form.
    This means that the user has checked the **Agree to terms and conditions** toggle.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a minor detail that could be a bug in Ionic 2 (currently Beta 21):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: For each toggle button, it acts as a `type=submit` button by default since there
    is no `type` attribute assigned. That's why you need to cancel the `submit` event
    by calling `preventDefault()`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to the W3 website, at [https://www.w3.org/TR/html-markup/button.html](https://www.w3.org/TR/html-markup/button.html),
    for information about the default behavior of the `button` element.
  prefs: []
  type: TYPE_NORMAL
- en: The `thankyou` page is very self-explanatory because you just parse the `formData`
    object in the template by getting the data from the `MyFormService` service.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Check out the following links for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: For more information about `form` from the Angular 2 documentation, you can
    visit [https://angular.io/docs/ts/latest/guide/forms.html](https://angular.io/docs/ts/latest/guide/forms.html%20)
    and [https://angular.io/docs/ts/latest/api/forms/index/NgForm-directive.html](https://angular.io/docs/ts/latest/api/forms/index/NgForm-directive.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Ionic documentation has its own page specifically for Ionic input components,
    which is [https://ionicframework.com/docs/v2/resources/forms/](https://ionicframework.com/docs/v2/resources/forms/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also has a good list of HTML5 input types that you can use for validation
    or keyboard enforcement, which you can find at [http://ionicframework.com/html5-input-types/](http://ionicframework.com/html5-input-types/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving data via a mocked API using a static JSON file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a frontend and app developer, you are often working with a team where someone
    else is responsible for the backend APIs. However, it's not always possible to
    have the backend available when you are developing the frontend. You have to *simulate*
    the backend in scenarios where the final backend APIs are not ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, you will learn how to call a REST API using the `http` service.
    The API endpoint will be just a static JSON located on your local machine. You
    will also learn how to leverage placeholder images to meet design requirements.
    The app will show a list of image feeds and a description, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving data via a mocked API using a static JSON file](img/image00252.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This app example would work either in a browser or on a physical device. However,
    the *fake* backend server must be running on your local computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the instructions to be followed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s quickly create the *fake* backend server. You must install `http-server`
    for this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a folder to store your `.json` file. Let''s call it `MockRest`, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `test.json` file and fill in the following content for the REST
    response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Basically, whenever you send a REST request, you should receive the preceding
    content as the response. As your backend developer updates the REST response,
    you can always change the content of the `test.json` file accordingly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start your backend server by calling `http-server` from the Terminal in the
    `MockRest` folder, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: isit `http://localhost:8080/test.json` to verify that you can see the JSON content.
    If not, you probably have a port conflict with another web server. You need to
    ensure that there is no other application using port `8080`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After completing your backend, open another Terminal window, create a new `MyRestBackend`
    app using the `blank` template, and go to the `MyRestBackend` folder, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You must not stop the backend server or create an Ionic project inside the `MockRest`
    folder. They are two independent project folders.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `html.html` file and replace the content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This app example uses free photos from [https://source.unsplash.com/](https://source.unsplash.com/)
    because you can easily query to get random photos that meet your need.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `home.ts` and edit it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You have not created the `QuoteService` service yet. However, you probably know
    that this service will call the *fake* backend server to get the JSON content
    using the `getQuotes()` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Do a small modification of the stylesheet `home.scss`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `./src/services` folder with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `quote.ts` file in the `services` folder and copy the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open and edit `./src/app/app.module.ts` to declare `QuoteService`, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to your Terminal and run the app, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will note that the page is empty and the **Console** shows the following
    error:![How to do it...](img/image00253.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This means that your browser (in this case, Chrome) does not allow calling
    REST API from `http://localhost:8100` to `http://localhost:8080`. You need to
    install the **Allow-Control-Allow-Origin** (**CORS**) plugin, such as [https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en](https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en),
    for Chrome. After that, turn on CORS, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00254.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Refresh your browser to see the updated app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your *fake* backend simply returns any file in the current `MockRest` folder.
    As you get more *sample* responses from the backend developer, you can copy them
    into this folder to provide additional backend endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section does not provide examples of how to handle POST and complex scenarios
    where the responses depend on request parameters. You may want to keep the code
    to handle temporary cases as simple as possible since they are not production
    code. The recommendation is to return the same content for each POST request as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at `quote.ts`, because it''s the main place where the `Http`
    request is made. First, you need to import `Injectable` and `Http`, which you
    can do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The `@Injectable` decorator is used to allow other pages and components to
    use `QuoteService` as a dependency. The `Http` service (or class) is provided
    by Angular 2 (not Ionic 2) and this is similar to the `$http` provider in Angular
    1\. However, instead of returning a promise, `Http` will return an **observable**
    object so that you can *subscribe* to it. The `getQuotes()` method, shown as follows,
    is the most important part of this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `this.http` object must be injected from the constructor. Then, it will
    trigger GET via `this.http.get()`, just like the `$http` provider. However, there
    is no `.then()` function but in Angular 2; you have to `subscribe` to the object.
    A new feature of ES6 is the *arrow* function, as you see via `res => {}`. This
    is similar to the lambda function in other languages (for example, Python). There
    is no need to declare the name of the function and you don't have to type *function*
    each time. In addition, it automatically passes the parameter (`res` in this case)
    and the `this` context inside the function.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read more about the arrow function from TypeScript documentation at
    [https://www.typescriptlang.org/docs/handbook/functions.html](https://www.typescriptlang.org/docs/handbook/functions.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The REST response from your *fake* backend will be assigned to `this.data`
    of the `QuoteService` service, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see the browser console, it will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00255.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another nice trick in the `home.html` template is to display a gray placeholder
    for the photos instead of pushing down the content when the photos are downloaded
    and rendered, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a quick example before the photos are loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00256.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In order to tell the `<img>` tag to have an exact size, you have to do a height
    calculation using `[height]="myCard.clientWidth * 390 / 600"`. This is because
    the photo is 600 x 390\. The `myCard` object is a local object created from `ion-card`.
    This `myCard` object will have access to all properties of the `ion-card` DOM,
    including the width via `clientWidth`. You have probably noted that this is just
    pure JavaScript and has nothing to do with Ionic or Angular itself.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about the Angular 2 `Http` provider, you can visit the
    official documentation at [https://angular.io/docs/ts/latest/api/http/index/HttpModule-class.html](https://angular.io/docs/ts/latest/api/http/index/HttpModule-class.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating with Stripe for online payment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how to integrate with a real backend service
    for the payment process. Earning revenue is an important aspect of creating an
    app. While there are many other methods of collecting payment, Stripe is a common
    payment system and can integrate very well with Ionic. In addition, there is no
    need to provide a high level of security and compliance (that is, PCI) since you
    will not be *storing* the credit card information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your app will not process via a real payment method because you can use a public
    test key from Stripe. The app will ask for a few fields to create a token. Observe
    the following screenshot of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating with Stripe for online payment](img/image00257.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you touch the **Pay $20** button, it will take you to the next screen where
    you will get the payment token, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating with Stripe for online payment](img/image00258.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Actually, there are additional steps for your backend to call Stripe to authorize
    and process the transaction. However, it's not within the scope of this section.
    The Stripe document has a good tutorial page on Node.js at [https://stripe.com/docs/api/node#authentication](https://stripe.com/docs/api/node#authentication).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no need to test in a physical device because Ionic 2 and Stripe will
    work just fine in the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Observe the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have a Stripe account, you need to register on [https://stripe.com](https://stripe.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in and go to [https://dashboard.stripe.com/test/dashboard](https://dashboard.stripe.com/test/dashboard).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on your username on the top right and select **Account S****ettings**,
    as illustrated in the following screenshot:![How to do it...](img/image00259.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **API Keys** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy your **Test Publishable Key**, shown as follows, somewhere because you
    need to use it for your JavaScript code later:![How to do it...](img/image00260.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go back to the Terminal.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new `StripePayment` app using the `blank` template, as follows, and
    go into the `StripePayment` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `./src/index.html` file and insert the line shown somewhere in the
    `<body>` tab as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This is to load the `Stripe` object globally in your app. This is not the recommended
    method with Angular 2 because anything that is used within a component must be
    imported via the `import` instruction. However, at the time of writing this book,
    angular-stripe is unavailable for Angular 2\. So, there is no way to do this properly.
    The preceding method will work just fine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `./src/pages/home/home.html` file and modify the content with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Stripe only needs the credit card number, CVC, and expiration to create a token
    for charging. The customer name and address are optional; so, you don't need to
    include them here.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, replace the content of `./src/pages/home/home.ts` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You need to change your **Test Publishable Key** here by replacing **YOUR STRIPE
    PUBLIC KEY HERE** with your own key that you copied earlier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit `./src/pages/home/home.scss` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `thankyou` page that shows the token ID by making a new folder,
    called `./src/pages/thankyou`, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `thankyou.html` file in the `thankyou` folder and copy the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In reality, there is no need to show the token ID to the user. This is just
    an example to get the token ID to charge.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the `thankyou.ts` file in the `thankyou` folder and copy the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `thankyou.scss` file to modify the theme using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since the `thankyou.scss` file is new in the project, you need to include it
    in `./src/app/app.scss`. Insert this line at the bottom of the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open and edit `./src/app/app.module.ts` to declare `ThankyouPage` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to your Terminal and run the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For the purpose of testing, you can use `4242424242424242` as the credit card
    number, `123` as `cvc`, and `12/2017` as the expiration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the Stripe charging process:'
  prefs: []
  type: TYPE_NORMAL
- en: The user fills in the payment form and clicks on the **Submit** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The frontend (your Ionic app) will call API to Stripe using the `Stripe` object
    and send along all the payment information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stripe will return a token ID, which is basically a way to confirm that everything
    is correct and you can charge the card now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The frontend will use the token ID to send to its backend (without the credit
    card information) to authorize the charge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The backend will call another Stripe API to say *I'm going to charge now*. Stripe
    will return the `success` event to the backend at this point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The backend will then return the `success` event to the frontend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The frontend should render a new page, such as the `thankyou` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As discussed previously, this chapter will not cover the backend portion of
    this app because it doesn't focus on Ionic. You can build the backend using any
    language, such as Node.js, PHP, or Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at `home.ts` because the majority of Stripe API processing
    is located there. First, you need to do a `declare`, as illustrated, because `Stripe`
    is a global object that was included in the `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: If you don't do a `declare`, the app will still run but you will get an error
    from TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user submits the form, it will trigger the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'When you call `Stripe.card.createToken`, the Stripe object will trigger an
    API call in the background to [https://stripe.com/](https://stripe.com/) with
    the JSON submitted. You may realize that this example does not use `ngModel` at
    all, but you can get the form values directly from within `ngForm`. This functionality
    is accomplished by the following code in your `home.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Stripe returns your token ID, it will call the following arrow function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason for using the arrow function here is because your code within the
    `stripeResponseHandler` method needs the `this` context of the `HomePage` class.
    This is a nice way to access the token variable. Observe the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The `response.id` will have your token ID from Stripe. Otherwise, you can handle
    the error using `response.error.message`. In this example, since it only passes
    the token ID to the next page, you can simply send it as a parameter `{token:
    this.token}`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'In your `thankyou.ts`, you can access the parameter `token` using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand more about Stripe API, you can check out the official documentation
    at [https://stripe.com/docs/stripe.js](https://stripe.com/docs/stripe.js)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are more examples from other languages that you can experiment with at
    [https://stripe.com/docs/examples](https://stripe.com/docs/examples)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
