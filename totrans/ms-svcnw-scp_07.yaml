- en: Introduction to Custom Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, we are going to take a look at building custom pages. This
    will also introduce scripting in Jelly code, and where and when to use it. We
    will also take a look at how to build a custom UI page.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at the following topics while introducing custom pages:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Jelly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom page examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Jelly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jelly is certainly a lesser known language to script in. It does not appear
    in the majority of ServiceNow, only on the outskirts of the platform. However,
    if you want to create custom pages in ServiceNow, it is a must to learn.
  prefs: []
  type: TYPE_NORMAL
- en: It is unfortunate that Jelly is a lesser known language, as documentation on
    how to use it is therefore also in short supply. Using pages already created in
    Jelly or the ServiceNow community can be very useful when getting started due
    to this general lack of information in the developer space.
  prefs: []
  type: TYPE_NORMAL
- en: One of the main areas you will find Jelly script is in UI pages, which we'll
    take a look at later in the chapter. Jelly code is found in XML field types, as
    it is a Java and XML scripting engine that allows XML to be turned into executable
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'When looking at Jelly script, you will see that it is almost always started
    and finished with the same tags. Let''s have a look at this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code sets up the XML version and encoding, and then the Jelly tags are
    written. `Trim` sets whether the whitespace inside this tag should be trimmed,
    and we set this to `false`. The other four attributes set up the tags and phases
    for the Jelly script.
  prefs: []
  type: TYPE_NORMAL
- en: Jelly is split into two phases of processing. The first phase tags are `j` and
    `g`, with the second phase being `j2` and `g2`. In the first phase, the `j` and
    `g` tags are parsed, with the result being cached, followed by the second phase
    of the `j2` and `g2` tags. When the script is run subsequently, only the second
    phase will be parsed again, using the cached data for phase one.
  prefs: []
  type: TYPE_NORMAL
- en: This means that it is a good practice to set data that is unlikely to change
    in the first phase with constantly changing data in the second phase. The `j`
    tags are native to Jelly and the `g` tags have been created especially for ServiceNow.
  prefs: []
  type: TYPE_NORMAL
- en: Jelly is a necessary skill to learn for creating UI pages and we will look further
    at how to script in Jelly in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: UI pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: UI pages are pages of script and XML that exist all across the ServiceNow platform.
    There are many UI pages that you will see as you navigate through ServiceNow,
    including the home pages for the service catalog and knowledge. UI pages are also
    a way to make custom pages where you can define everything that appears on the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at creating a new UI page. We start by giving our UI page a name;
    make sure you make a note of the name, as it will be needed to reference the page
    later on. The category field is mainly for reference and does not provide any
    additional functionality. It can be helpful for grouping your UI pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three fields that can contain code in a UI page; they are:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The HTML field is where the Jelly script is held, and ServiceNow provides the
    tags for you to start your Jelly coding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: These are the standard tags we saw when introducing Jelly scripting, so we can
    start to add our Jelly script inside the Jelly tags.
  prefs: []
  type: TYPE_NORMAL
- en: The Client script field is a script field that client-side code can be written
    inside of. This client-side code runs when the UI page is loaded. This script
    could be put into the HTML field, but it is easier to read if separated out into
    the two fields.
  prefs: []
  type: TYPE_NORMAL
- en: The Processing script field is a script field as well, but this field runs server-side
    script. The script runs when the page is submitted, so is helpful when creating
    forms on a custom page.
  prefs: []
  type: TYPE_NORMAL
- en: UI pages can be accessed from anywhere in ServiceNow by adding the name of the
    UI page and `.do` onto the end of the instance URL. This means that you can navigate
    to a UI page you create very easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at a simple UI page to show how written code appears in
    the UI page. Here is the code in the HTML field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With this code, we will simply see the text Sample UI Page Text on the screen
    of our UI page. We can also add some code to the client script field to see when
    this is run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We will just use an `alert` here, as we are scripting on the client side to
    show when the code runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our whole UI page definition can be seen in *Figure 7.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/510e9c90-cc26-4695-8323-835fccf64fd7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.1: Sample UI page definition'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also take a look at how this page would look by navigating to `sample_page.do`,
    as shown in *Figure 7.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9c06b764-6da7-47f6-98da-9c05f9593687.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.2: Sample UI page example'
  prefs: []
  type: TYPE_NORMAL
- en: UI pages are a great way to create custom pages and move away from the standard
    ServiceNow form and list layouts seen across the platform. They also give you
    the opportunity to create a page truly from scratch, containing whatever information
    and data you like.
  prefs: []
  type: TYPE_NORMAL
- en: Script examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen how to create a custom page, let's have a look at an example
    of how to make a working UI page.
  prefs: []
  type: TYPE_NORMAL
- en: For our example, we will create our own change interceptor. This is usually
    seen when creating a new change, but for the example, we will create a UI page
    to be the page navigated to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code we will use in the HTML field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have used HTML tags to create our own interceptor in the style of the
    change interceptor. This makes it easy to change aspects of the page in any way
    we want to, rather than having to use the ServiceNow interceptors module.
  prefs: []
  type: TYPE_NORMAL
- en: By looking at the source code of the change interceptor, here we have used code
    from the actual interceptor to keep the look and feel of the page in line with
    ServiceNow. It is often good to make your custom pages look like they fit into
    the ServiceNow platform to give a good user experience.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we are allowing the user to pick one of three change choices,
    and then redirecting them to a new change of that type. In the tag creating the
    link, we can see how the URL changes for each choice. We use `sysparm_query` in
    the URL to set values on a new form. For our example, we are using this to set
    the change type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the UI page itself in *Figure 7.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ec4f0b5-9ce1-49d7-a921-8c942b80cbe1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.3: Intercepter UI page definition'
  prefs: []
  type: TYPE_NORMAL
- en: If we wanted to use this page when a change was created, we could amend Create
    New module in the change application to navigate to the UI page by making the
    module navigate to the URL `change_interceptor.do`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what the UI page will look like in *Figure 7.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71222bd7-700f-4a77-9bc8-f9cd78d33aa5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.4: Intercepter UI page example'
  prefs: []
  type: TYPE_NORMAL
- en: We can see the three options we defined on the page with the ServiceNow style
    navigation header.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at starting to build a custom page. We introduced
    Jelly scripting, UI pages, and where Jelly is used inside a UI page definition.
    We also had a look at a UI page example to see how one is written and how it looks
    to the user once completed.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, we will explore Jelly scripting more, looking further
    than the basics. We also introduce UI macros, a way to add reusable components
    and scripts to UI pages and other areas of ServiceNow. We will also take a look
    at how we can use UI pages and UI macros together in a practical example.
  prefs: []
  type: TYPE_NORMAL
