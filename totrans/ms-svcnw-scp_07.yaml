- en: Introduction to Custom Pages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义页面简介
- en: For this chapter, we are going to take a look at building custom pages. This
    will also introduce scripting in Jelly code, and where and when to use it. We
    will also take a look at how to build a custom UI page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，我们将探讨如何构建自定义页面。这也会介绍 Jelly 代码的编写，以及何时何地使用它。我们还将看看如何构建一个自定义 UI 页面。
- en: 'We will look at the following topics while introducing custom pages:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍自定义页面时，我们将探讨以下主题：
- en: Introduction to Jelly
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jelly 简介
- en: UI pages
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI 页面
- en: Custom page examples
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义页面示例
- en: Introduction to Jelly
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jelly 简介
- en: Jelly is certainly a lesser known language to script in. It does not appear
    in the majority of ServiceNow, only on the outskirts of the platform. However,
    if you want to create custom pages in ServiceNow, it is a must to learn.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Jelly 确实是一种不太为人所知的脚本语言。它并未出现在 ServiceNow 的主要部分，而是在平台的边缘。然而，如果你想在 ServiceNow
    中创建自定义页面，学习 Jelly 是必须的。
- en: It is unfortunate that Jelly is a lesser known language, as documentation on
    how to use it is therefore also in short supply. Using pages already created in
    Jelly or the ServiceNow community can be very useful when getting started due
    to this general lack of information in the developer space.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾，Jelly 是一种不太为人所知的语言，因此关于如何使用它的文档也相对匮乏。由于开发者空间中普遍缺乏此类信息，使用已经创建好的 Jelly 页面或
    ServiceNow 社区中的页面在入门时可以非常有用。
- en: One of the main areas you will find Jelly script is in UI pages, which we'll
    take a look at later in the chapter. Jelly code is found in XML field types, as
    it is a Java and XML scripting engine that allows XML to be turned into executable
    code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现 Jelly 脚本的主要应用领域之一是 UI 页面，我们将在本章稍后探讨。Jelly 代码位于 XML 字段类型中，因为它是一个 Java 和
    XML 脚本引擎，允许 XML 转换为可执行代码。
- en: 'When looking at Jelly script, you will see that it is almost always started
    and finished with the same tags. Let''s have a look at this code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当查看 Jelly 脚本时，你会发现它几乎总是以相同的标签开始和结束。让我们看看这段代码：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code sets up the XML version and encoding, and then the Jelly tags are
    written. `Trim` sets whether the whitespace inside this tag should be trimmed,
    and we set this to `false`. The other four attributes set up the tags and phases
    for the Jelly script.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码设置了 XML 版本和编码，然后编写了 Jelly 标签。`Trim` 设置了是否应该修剪此标签内的空白字符，我们将它设置为 `false`。其他四个属性设置了
    Jelly 脚本的标签和阶段。
- en: Jelly is split into two phases of processing. The first phase tags are `j` and
    `g`, with the second phase being `j2` and `g2`. In the first phase, the `j` and
    `g` tags are parsed, with the result being cached, followed by the second phase
    of the `j2` and `g2` tags. When the script is run subsequently, only the second
    phase will be parsed again, using the cached data for phase one.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Jelly 被分为两个处理阶段。第一阶段标签是 `j` 和 `g`，第二阶段是 `j2` 和 `g2`。在第一阶段，`j` 和 `g` 标签被解析，结果被缓存，然后是第二阶段的
    `j2` 和 `g2` 标签。当脚本随后再次运行时，只有第二阶段会被重新解析，使用第一阶段缓存的资料。
- en: This means that it is a good practice to set data that is unlikely to change
    in the first phase with constantly changing data in the second phase. The `j`
    tags are native to Jelly and the `g` tags have been created especially for ServiceNow.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着将不太可能改变的数据在第一阶段设置，而将不断变化的数据在第二阶段设置是一个好习惯。`j` 标签是 Jelly 的原生标签，而 `g` 标签是为
    ServiceNow 特别创建的。
- en: Jelly is a necessary skill to learn for creating UI pages and we will look further
    at how to script in Jelly in the next chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Jelly 是创建 UI 页面所需掌握的一项技能，我们将在下一章进一步探讨如何在 Jelly 中编写脚本。
- en: UI pages
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI 页面
- en: UI pages are pages of script and XML that exist all across the ServiceNow platform.
    There are many UI pages that you will see as you navigate through ServiceNow,
    including the home pages for the service catalog and knowledge. UI pages are also
    a way to make custom pages where you can define everything that appears on the
    page.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: UI 页面是存在于 ServiceNow 平台各处的脚本和 XML 页面。当你浏览 ServiceNow 时，你会看到许多 UI 页面，包括服务目录和知识的首页。UI
    页面也是一种创建自定义页面的方式，你可以定义页面上显示的所有内容。
- en: Let's look at creating a new UI page. We start by giving our UI page a name;
    make sure you make a note of the name, as it will be needed to reference the page
    later on. The category field is mainly for reference and does not provide any
    additional functionality. It can be helpful for grouping your UI pages.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建一个新的 UI 页面。我们首先给我们的 UI 页面起一个名字；确保你记下这个名字，因为稍后你需要引用这个页面。分类字段主要用于参考，并不提供任何额外的功能。它可以帮助你组织你的
    UI 页面。
- en: 'There are three fields that can contain code in a UI page; they are:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: UI页面中可以包含代码的三个字段是：
- en: HTML
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML
- en: Client script
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端脚本
- en: Processing script
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理脚本
- en: 'The HTML field is where the Jelly script is held, and ServiceNow provides the
    tags for you to start your Jelly coding:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: HTML字段是Jelly脚本所在的地方，ServiceNow为您提供了开始Jelly编码的标签：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These are the standard tags we saw when introducing Jelly scripting, so we can
    start to add our Jelly script inside the Jelly tags.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们介绍Jelly脚本时看到的标准标签，因此我们可以在Jelly标签内开始添加我们的Jelly脚本。
- en: The Client script field is a script field that client-side code can be written
    inside of. This client-side code runs when the UI page is loaded. This script
    could be put into the HTML field, but it is easier to read if separated out into
    the two fields.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端脚本字段是一个脚本字段，可以在其中编写客户端代码。当UI页面加载时运行此客户端代码。此脚本可以放入HTML字段中，但如果将其分离到两个字段中，则更容易阅读。
- en: The Processing script field is a script field as well, but this field runs server-side
    script. The script runs when the page is submitted, so is helpful when creating
    forms on a custom page.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 处理脚本字段也是一个脚本字段，但这个字段运行服务器端脚本。脚本在页面提交时运行，因此在创建自定义页面上的表单时非常有用。
- en: UI pages can be accessed from anywhere in ServiceNow by adding the name of the
    UI page and `.do` onto the end of the instance URL. This means that you can navigate
    to a UI page you create very easily.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在ServiceNow中，您可以通过在实例URL的末尾添加UI页面的名称和`.do`来从任何地方访问UI页面。这意味着您可以非常容易地导航到您创建的UI页面。
- en: 'Let''s have a look at a simple UI page to show how written code appears in
    the UI page. Here is the code in the HTML field:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个简单的UI页面，以展示如何将编写的代码显示在UI页面中。以下是HTML字段中的代码：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With this code, we will simply see the text Sample UI Page Text on the screen
    of our UI page. We can also add some code to the client script field to see when
    this is run:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此代码，我们将在UI页面的屏幕上简单地看到“Sample UI Page Text”文本。我们还可以在客户端脚本字段中添加一些代码，以查看代码运行时的情况：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We will just use an `alert` here, as we are scripting on the client side to
    show when the code runs.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里将只使用`alert`，因为我们是在客户端脚本中编写脚本以显示代码运行时的情况。
- en: 'Our whole UI page definition can be seen in *Figure 7.1*:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们整个UI页面定义可以在*图7.1*中看到：
- en: '![](img/510e9c90-cc26-4695-8323-835fccf64fd7.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/510e9c90-cc26-4695-8323-835fccf64fd7.png)'
- en: 'Figure 7.1: Sample UI page definition'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1：Sample UI页面定义
- en: 'We can also take a look at how this page would look by navigating to `sample_page.do`,
    as shown in *Figure 7.2*:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过导航到`sample_page.do`来查看此页面的外观，如图*图7.2*所示：
- en: '![](img/9c06b764-6da7-47f6-98da-9c05f9593687.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c06b764-6da7-47f6-98da-9c05f9593687.png)'
- en: 'Figure 7.2: Sample UI page example'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2：Sample UI页面示例
- en: UI pages are a great way to create custom pages and move away from the standard
    ServiceNow form and list layouts seen across the platform. They also give you
    the opportunity to create a page truly from scratch, containing whatever information
    and data you like.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: UI页面是创建自定义页面并从平台上的标准ServiceNow表单和列表布局中脱离出来的绝佳方式。它们还为您提供了从头开始创建页面的机会，包含您喜欢的任何信息和数据。
- en: Script examples
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本示例
- en: Now that we have seen how to create a custom page, let's have a look at an example
    of how to make a working UI page.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何创建自定义页面，让我们看看如何制作一个工作UI页面的示例。
- en: For our example, we will create our own change interceptor. This is usually
    seen when creating a new change, but for the example, we will create a UI page
    to be the page navigated to.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将创建我们自己的更改拦截器。这通常在创建新更改时看到，但在这个示例中，我们将创建一个UI页面作为要导航到的页面。
- en: 'Here is the code we will use in the HTML field:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在HTML字段中将要使用的代码：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we have used HTML tags to create our own interceptor in the style of the
    change interceptor. This makes it easy to change aspects of the page in any way
    we want to, rather than having to use the ServiceNow interceptors module.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了HTML标签来创建我们自己的类似于更改拦截器的拦截器。这使得我们可以以任何我们想要的方式轻松地更改页面的各个方面，而无需使用ServiceNow拦截器模块。
- en: By looking at the source code of the change interceptor, here we have used code
    from the actual interceptor to keep the look and feel of the page in line with
    ServiceNow. It is often good to make your custom pages look like they fit into
    the ServiceNow platform to give a good user experience.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看更改拦截器的源代码，这里我们使用了实际拦截器中的代码，以保持页面的外观与ServiceNow保持一致。使您的自定义页面看起来像它们适合ServiceNow平台，通常会给用户带来良好的体验。
- en: In our example, we are allowing the user to pick one of three change choices,
    and then redirecting them to a new change of that type. In the tag creating the
    link, we can see how the URL changes for each choice. We use `sysparm_query` in
    the URL to set values on a new form. For our example, we are using this to set
    the change type.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们允许用户从三种变更选择中挑选一个，然后将他们重定向到该类型的新变更页面。在创建链接的标签中，我们可以看到每个选择的URL是如何变化的。我们使用`sysparm_query`在URL中设置新表单的值。在我们的示例中，我们使用它来设置变更类型。
- en: 'Let''s have a look at the UI page itself in *Figure 7.3*:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看*图7.3*中的UI页面本身：
- en: '![](img/9ec4f0b5-9ce1-49d7-a921-8c942b80cbe1.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9ec4f0b5-9ce1-49d7-a921-8c942b80cbe1.png)'
- en: 'Figure 7.3: Intercepter UI page definition'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3：拦截器UI页面定义
- en: If we wanted to use this page when a change was created, we could amend Create
    New module in the change application to navigate to the UI page by making the
    module navigate to the URL `change_interceptor.do`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在创建变更时使用此页面，我们可以在变更应用程序的“创建新”模块中修改，通过使模块导航到URL `change_interceptor.do`
    来导航到UI页面。
- en: 'Let''s see what the UI page will look like in *Figure 7.4*:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看*图7.4*中的UI页面将是什么样子：
- en: '![](img/71222bd7-700f-4a77-9bc8-f9cd78d33aa5.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/71222bd7-700f-4a77-9bc8-f9cd78d33aa5.png)'
- en: 'Figure 7.4: Intercepter UI page example'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4：拦截器UI页面示例
- en: We can see the three options we defined on the page with the ServiceNow style
    navigation header.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到页面上使用ServiceNow风格导航标题定义的三个选项。
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at starting to build a custom page. We introduced
    Jelly scripting, UI pages, and where Jelly is used inside a UI page definition.
    We also had a look at a UI page example to see how one is written and how it looks
    to the user once completed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了开始构建自定义页面。我们介绍了Jelly脚本、UI页面以及Jelly在UI页面定义中的使用位置。我们还查看了一个UI页面示例，以了解其编写方式和完成后的用户界面。
- en: In the following chapter, we will explore Jelly scripting more, looking further
    than the basics. We also introduce UI macros, a way to add reusable components
    and scripts to UI pages and other areas of ServiceNow. We will also take a look
    at how we can use UI pages and UI macros together in a practical example.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地探索Jelly脚本，而不仅仅是基础内容。我们还介绍了UI宏，这是一种向UI页面和其他ServiceNow区域添加可重用组件和脚本的方法。我们还将通过一个实际示例查看如何将UI页面和UI宏结合起来使用。
