- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Testing in Node.js
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js中的测试
- en: Testing is one of the most relevant practices these days; it has become much
    more popular in the last couple of decades than in the past. Today, we build complex
    software with many dependencies and requirements that evolve over time. I strongly
    believe that testing is key when you are learning a new language or tool because
    it will provide you with a security net that will allow you to take more risks
    and move faster without breaking the previous code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是目前最相关的实践之一；在过去的几十年里，它比过去更受欢迎。今天，我们构建的软件复杂，有许多依赖关系和要求，这些依赖关系和要求会随着时间的推移而演变。我坚信，当您学习一门新语言或工具时，测试是关键，因为它将为您提供一张安全网，让您可以承担更多风险，更快地移动而不会破坏之前的代码。
- en: In this chapter, we will dive into the importance of testing and how to choose
    the right type of testing for your application. You will write your first test,
    and then we will learn about creating test suites by grouping related tests, demonstrating
    both Node.js core testing and the Jest library.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入研究测试的重要性以及如何为您的应用程序选择正确的测试类型。您将编写您的第一个测试，然后我们将学习通过分组相关测试来创建测试套件，展示Node.js核心测试和Jest库。
- en: Writing good tests is not easy, but by the end of this chapter, you will have
    a clear idea of what principles to follow every time and how you can use a testing
    coverage tool to extend and refactor your tests over time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 编写良好的测试并不容易，但到本章结束时，您将清楚地了解每次应遵循的原则，以及您如何可以使用测试覆盖率工具随着时间的推移扩展和重构您的测试。
- en: Finally, we will introduce **Test-Driven Development** (**TDD**) by solving
    some edge cases.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将通过解决一些边缘情况来介绍**测试驱动开发**（**TDD**）。
- en: 'To sum up, here are the main topics that we will explore in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，以下是本章我们将探讨的主要主题：
- en: Why is testing important?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么测试很重要？
- en: Test approach and philosophy
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试方法和哲学
- en: How should I test my code?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我应该如何测试我的代码？
- en: Writing our first test suite
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写我们的第一个测试套件
- en: Mastering code coverage tooling
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 掌握代码覆盖率工具
- en: TDD in action
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TDD实践
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code files for the chapter can be found at [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在[https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)找到
- en: Check out the code in action video for this chapter on [https://youtu.be/aK572sFboEM](https://youtu.be/aK572sFboEM)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 查看本章的代码实践视频，请访问[https://youtu.be/aK572sFboEM](https://youtu.be/aK572sFboEM)
- en: Why is testing important?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么测试很重要？
- en: As we saw in the previous chapters, modern applications are complex, have many
    moving parts, and will have dependencies.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几章所述，现代应用程序复杂，有许多动态部分，并且会有依赖关系。
- en: Overall, we can say that testing is important because it helps us to ensure
    that our code is working as expected and that we are not introducing bugs when
    we are adding new features or fixing bugs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，我们可以这样说，测试之所以重要，是因为它帮助我们确保我们的代码按预期工作，并且在添加新功能或修复错误时不会引入错误。
- en: Testing is a complex culture
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试是一种复杂的文化
- en: Testing is much more than just writing some code to validate your application.
    It’s a culture that has many ideas, principles, practices, and tools... Have you
    heard of TDD? BDD? Unit tests? Integration tests? End-to-end tests? Mocks? Stubs?
    Spies? There are many concepts to learn and understand, and we will explore some
    of them in this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 测试不仅仅是编写一些代码来验证您的应用程序。它是一种包含许多想法、原则、实践和工具的文化...您听说过TDD吗？BDD？单元测试？集成测试？端到端测试？模拟？存根？间谍？有许多概念需要学习和理解，我们将在本章中探讨其中的一些。
- en: Testing has to be a team activity
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试必须是一种团队活动
- en: Testing will help you to onboard new developers to your team easily. You can
    join other teams to help them build new features or fix bugs even if you don’t
    know the code base in depth.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 测试将帮助您轻松地将新开发者引入您的团队。即使您对代码库不深入了解，您也可以加入其他团队帮助他们构建新功能或修复错误。
- en: I love to see tests as documentation for the application, or even better, as
    the agreement to the world of how your application should behave in certain scenarios.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢将测试视为应用程序的文档，或者更好的是，作为对世界的一种协议，说明您的应用程序在特定场景下应该如何表现。
- en: But testing is a team effort. It’s not just the developer’s responsibility to
    write tests, the same way that it’s not just the developer’s responsibility to
    write secure code. The whole team should be involved in the process, and the team
    should have a culture of testing and stick to it over time.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但测试是团队的努力。编写测试不仅仅是开发者的责任，就像编写安全代码不仅仅是开发者的责任一样。整个团队都应该参与这个过程，并且团队应该有一个测试文化，并随着时间的推移坚持这种文化。
- en: Automating your tests is essential. Without automation, we would need to test
    our applications manually. It means that we will do a lot of repetitive tasks
    that are prone to errors, and we will need to spend a lot of time ensuring that
    our application is working as expected.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化你的测试是至关重要的。没有自动化，我们就需要手动测试我们的应用程序。这意味着我们将执行许多容易出错的重复性任务，并且我们需要花费大量时间来确保我们的应用程序按预期工作。
- en: With tests, we can automate the process and ensure that our application is working
    as expected. We can run the tests on our local machine, or on a remote machine
    before a pull request is merged or we deploy the software. We can run the tests
    in different environments, and we can run them in parallel to speed up the process.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过测试，我们可以自动化这个过程，并确保我们的应用程序按预期工作。我们可以在本地机器上运行测试，或者在合并拉取请求之前或在部署软件之前在远程机器上运行测试。我们可以在不同的环境中运行测试，并且可以并行运行它们以加快过程。
- en: Take advantage now
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现在就利用这个机会
- en: I am used to doing tests in my day-to-day work, and I can say that they’re a
    great tool that has helped me to build better software. But overall, they have
    helped me to learn new things and improve my skills.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我习惯于在日常工作中进行测试，并且可以说，它们是帮助我构建更好软件的伟大工具。但总的来说，它们帮助我学习新事物并提高我的技能。
- en: When you must use a new language or tool, you can use tests to learn how it
    works and explore the features. You can use tests to learn how this new thing
    works and do your own experiments while learning.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当你必须使用一种新的语言或工具时，你可以使用测试来学习它是如何工作的，并探索其功能。你可以通过测试来学习这个新事物的工作原理，并在学习过程中进行自己的实验。
- en: But if you are not used to doing tests, it can be a little bit hard to learn
    Node.js and testing at the same time. So, I recommend you learn Node.js first
    and then take a more in-depth look at testing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你不习惯进行测试，同时学习Node.js和测试可能会有些困难。所以，我建议你首先学习Node.js，然后再更深入地研究测试。
- en: In the next chapters, we will build a web application and use tests to ensure
    that our application is working as expected.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建一个Web应用程序，并使用测试来确保我们的应用程序按预期工作。
- en: You will face many challenges while adopting the testing culture. As with any
    cultural change, it’s not easy to start doing tests. It’s a challenge that you
    will need to overcome, and you will need to invest time to learn how to do it.
    But I can say that it’s worth it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在采用测试文化的过程中，你将面临许多挑战。就像任何文化变革一样，开始进行测试并不容易。这是一个你需要克服的挑战，你需要投入时间去学习如何进行测试。但我想说，这是值得的。
- en: If you work with a team, you will need to convince your team to start doing
    tests and consolidate the culture over time. It’s not easy, but it’s possible.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你与团队一起工作，你需要说服你的团队开始进行测试，并在一段时间内巩固这种文化。这并不容易，但这是可能的。
- en: You can always start doing tests in your own code and show the benefits to your
    team. You can start with a pet project or a proof-of-concept test and convince
    the whole team.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在自己的代码中开始进行测试，并向你的团队展示其带来的好处。你可以从一个宠物项目或一个概念验证测试开始，并说服整个团队。
- en: Note that you will need to invest time to learn how to do it, and even when
    you know how to do it, you will need to invest time to write the tests. That time
    will always be bigger in comparison with the time that you will need to just write
    the code. But you will save time in the long term when you need to fix bugs or
    add new features and in preventing bugs in the first place.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你需要投入时间去学习如何进行测试，即使你知道如何进行测试，你也需要投入时间去编写测试。与仅编写代码所需的时间相比，这部分时间总是更长。但当你需要修复错误或添加新功能，以及在防止错误发生时，你将节省更多的时间。
- en: Now that we are clear on the motivations behind the adoption of testing, it
    is time to learn, in the next section, about the different types of tests that
    are available for our applications and how other industries have built solid products
    using different testing frameworks.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经明确了采用测试的动机，那么在下一节中，我们将学习关于我们应用程序可用的不同测试类型，以及其他行业如何使用不同的测试框架构建稳固的产品。
- en: Testing approach and philosophy
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试方法和哲学
- en: One of the things that we don’t realize when we are starting to learn about
    testing is that there are many different kinds of tests, and each one has a different
    purpose.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们刚开始学习测试时，我们没有意识到的是，存在许多不同类型的测试，每种测试都有其不同的目的。
- en: Testing is wildly used in the world
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试在世界上被广泛使用
- en: 'In the real world, testing is used in many industries. For example, if we want
    to test the quality of a car being manufactured in a factory, we can do the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，测试被用于许多行业。例如，如果我们想测试工厂制造的汽车的质量，我们可以做以下事情：
- en: Test the engine in isolation
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在隔离状态下测试发动机
- en: Test the car in a controlled environment to ensure that it’s working as expected
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个受控的环境中测试汽车以确保其按预期工作
- en: Test the car in a real environment to ensure that it’s working as expected
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在真实环境中测试汽车以确保其按预期工作
- en: Test the individual components of the car to ensure certain quality standards
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试汽车的各个组件以确保特定的质量标准
- en: Test the car against a wall or other objects to ensure that it’s safe
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将汽车撞向墙壁或其他物体以确保其安全性
- en: The automobile industry has one of the most interesting testing frameworks in
    terms of engineering in the world. Most cars that are manufactured today, for
    the vast majority of end users, were previously tested in many ways, including
    crash simulations to evaluate the potential damages. In the following figure,
    you can see how one of these tests
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汽车行业在工程测试框架方面拥有世界上最有趣的框架之一。今天制造的大多数汽车，对于绝大多数最终用户来说，都经过了许多方式的测试，包括碰撞模拟来评估潜在的损害。在下面的图中，你可以看到这些测试之一
- en: '![Figure 8.1 – Image by Wikimedia https://en.wikipedia.org/wiki/Crash_test#/media/File:Honda_Fit-Impact_Still.jpg](img/B21678_08_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1 – 图片来自维基百科 https://en.wikipedia.org/wiki/Crash_test#/media/File:Honda_Fit-Impact_Still.jpg](img/B21678_08_01.jpg)'
- en: Figure 8.1 – Image by Wikimedia [https://en.wikipedia.org/wiki/Crash_test#/media/File:Honda_Fit-Impact_Still.jpg](https://en.wikipedia.org/wiki/Crash_test#/media/File:Honda_Fit-Impact_Still.jpg)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 图片来自维基百科 [https://en.wikipedia.org/wiki/Crash_test#/media/File:Honda_Fit-Impact_Still.jpg](https://en.wikipedia.org/wiki/Crash_test#/media/File:Honda_Fit-Impact_Still.jpg)
- en: Software products are no different. Just to give you an idea, we can test the
    web application components in isolation, or we can test the whole application
    from the perspective of the end user. There’s also the option to just test the
    performance of our application by making a lot of requests with different structures
    to our application and detecting any bottlenecks and inefficiencies. We can even
    test the security of our application by doing penetration tests and trying to
    hack our application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 软件产品也是如此。为了给你一个概念，我们可以单独测试网络应用程序组件，或者我们可以从最终用户的角度测试整个应用程序。还有选择只通过向应用程序发送大量不同结构化的请求来测试我们应用程序的性能，并检测任何瓶颈和低效之处。我们甚至可以通过进行渗透测试和尝试破解我们的应用程序来测试我们应用程序的安全性。
- en: The test pyramid
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试金字塔
- en: 'So, we can say that there are many different types of tests and each one has
    a different purpose. Let’s have a look at the test pyramid:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以这样说，存在许多不同类型的测试，每种测试都有其不同的目的。让我们来看看测试金字塔：
- en: '![Figure 8.2 – Image by Martin Fowler in “The practical test pyramid” https://martinfowler.com/articles/practical-test-pyramid.html](img/B21678_08_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2 – 图片来自马丁·福勒的《实用的测试金字塔》 https://martinfowler.com/articles/practical-test-pyramid.html](img/B21678_08_02.jpg)'
- en: Figure 8.2 – Image by Martin Fowler in “The practical test pyramid” [https://martinfowler.com/articles/practical-test-pyramid.html](https://martinfowler.com/articles/practical-test-pyramid.html)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 图片来自马丁·福勒的《实用的测试金字塔》 [https://martinfowler.com/articles/practical-test-pyramid.html](https://martinfowler.com/articles/practical-test-pyramid.html)
- en: As we can see, the base of the pyramid is unit tests, which are more isolated
    and faster to run. At the top of the pyramid, we have UI tests, which are more
    expensive (as they require more integration) and are slower to run.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，金字塔的底部是单元测试，它们更加隔离且运行速度更快。在金字塔的顶部，我们有UI测试，它们更昂贵（因为它们需要更多的集成）且运行速度较慢。
- en: Using the car example, we can say that unit tests are like testing the engine
    in isolation, and UI tests are like testing the car in a real environment.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以汽车为例，我们可以这样说，单元测试就像是在隔离状态下测试发动机，而UI测试则像是在真实环境中测试汽车。
- en: We can easily understand that testing the engine in isolation is faster and
    cheaper than testing the car in a real environment because we don’t need to build
    the whole car to test the engine, prepare paperwork, coordinate with the insurance
    companies, or bring on more staff such as drivers and mechanics. Also, testing
    the car in a real environment can lead to impacts by external factors such as
    the weather, traffic, and road conditions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以很容易地理解，在隔离状态下测试发动机比在真实环境中测试汽车更快、更便宜，因为我们不需要构建整个汽车来测试发动机，也不需要准备文件，与保险公司协调，或者增加更多人员，如驾驶员和机械师。此外，在真实环境中测试汽车可能会导致外部因素（如天气、交通和道路状况）的影响。
- en: In comparison, we can just build the engine and test it in isolation inside
    the factory with the tools and necessary people. We can do it faster and cheaper,
    but this test won’t be able to detect some issues that we can have when we are
    testing the car in a real environment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与此相比，我们只需在工厂内使用工具和必要的人员，独立构建发动机并对其进行测试。我们可以更快、更便宜地完成这项工作，但这次测试将无法检测到我们在真实环境中测试汽车时可能遇到的一些问题。
- en: So, in the same way, we can say that unit tests are faster and cheaper to run
    than UI tests, but UI tests will be able to detect some issues that we can’t detect
    with unit tests.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，同样可以说，单元测试的运行速度和成本比UI测试低，但UI测试将能够检测到我们无法通过单元测试检测到的一些问题。
- en: In this chapter, we will focus on unit tests, but we will have a look at other
    types of tests as well in the following chapters when we will build the web application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注单元测试，但在接下来的章节中，当我们构建Web应用程序时，我们还将探讨其他类型的测试。
- en: Now that we are clear on the different types of tests, it is time to be pragmatic
    and explore how to build our first test case using different libraries together
    in the next section.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经明确了不同类型的测试，那么现在是时候务实一些，探索如何在下一节中利用不同的库来构建我们的第一个测试用例。
- en: How should I test my code?
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我应该如何测试我的代码？
- en: Due to the history of JavaScript, most developers didn’t have the culture of
    testing their code while JavaScript was limited to the browser and used almost
    exclusively to build relatively simple scripts.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JavaScript的历史，大多数开发者在JavaScript仅限于浏览器并且几乎仅用于构建相对简单的脚本时，并没有测试代码的文化。
- en: However, with the evolution of the language and the community, we now have a
    lot of tools and frameworks to help us build tests.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着语言和社区的演变，我们现在有很多工具和框架来帮助我们构建测试。
- en: Frameworks and libraries
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 框架和库
- en: When you have a clear idea of how to test your code, you can easily migrate
    from one tool to another until you find the one that fits your needs best.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当你对如何测试你的代码有一个清晰的想法时，你可以轻松地从一种工具迁移到另一种工具，直到找到最适合你需求的那一个。
- en: In this chapter, we will explore the promising Node.js test core library and
    the most popular test framework for web development, Jest.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨有前景的Node.js测试核心库以及最受欢迎的Web开发测试框架Jest。
- en: Important note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We are living in a transitional period where the Node.js core library is evolving
    to provide a better experience to developers. So, probably in the future, it will
    be the default tool to use. But for now, if you are new to testing, I recommend
    you use Jest because there are more tutorials and blog posts and the API is more
    stable.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正处于一个过渡时期，Node.js核心库正在演变，以向开发者提供更好的体验。因此，在未来，它可能将成为默认的工具。但就目前而言，如果你是测试的新手，我建议你使用Jest，因为有很多教程和博客文章，API也更加稳定。
- en: Our first test
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的第一测试
- en: 'Let’s have a look at a simple test, and then we’ll explore the different parts
    of it:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个简单的测试，然后我们将探索它的不同部分：
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we are testing the sum function. First, we import the `describe`
    and `it` functions from the `node:test` module. Then, we import the `assert` function
    from the `node:assert` module.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在测试求和函数。首先，我们从`node:test`模块中导入`describe`和`it`函数。然后，我们从`node:assert`模块中导入`assert`函数。
- en: The `describe` function is used to group tests. In this case, we are grouping
    all the tests related to the `utils` module.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe`函数用于分组测试。在这种情况下，我们正在将所有与`utils`模块相关的测试分组在一起。'
- en: The `it` function is used to define a test. In this case, we are defining a
    test that should sum two numbers.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`it`函数用于定义一个测试。在这种情况下，我们定义了一个应该求和两个数字的测试。'
- en: Finally, we are using the `assert` function to check that the result of the
    `sum` function is the expected one.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`assert`函数来检查`sum`函数的结果是否符合预期。
- en: 'So, we can say that a test is composed of three parts:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以这样说，一个测试由三个部分组成：
- en: '**Arrange**: Where we define the data that we need to run the test'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安排**：定义我们运行测试所需的数据。'
- en: '**Act**: Where we run the code that we want to test'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行动**：运行我们想要测试的代码。'
- en: '**Assert**: Where we check that the result of the code is the expected one'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**断言**：检查代码的结果是否是预期的。'
- en: Testing principles and goals
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试原则和目标
- en: There are some principles that we should follow when we are building tests.
    For me, these principles can be summarized into three goals, which are fast, trustable,
    and maintainable.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们构建测试时，我们应该遵循一些原则。对我来说，这些原则可以总结为三个目标，即快速、可信和可维护。
- en: Fast
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 快速
- en: The tests should be fast to run and write. We will run this test many times,
    so if the test is slow to run, we will lose a lot of time waiting for it to finish.
    But the worst part is that we will be tempted to run the test less frequently
    or write fewer tests.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应该运行和编写速度快。我们将多次运行这个测试，所以如果测试运行缓慢，我们将浪费大量时间等待它完成。但最糟糕的部分是，我们可能会倾向于减少测试的运行频率或编写更少的测试。
- en: Then, testing will be a frustrating experience for you and your team. In small
    projects, you will have a few dozen tests, but in big projects, you can have thousands
    of tests.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，测试将让你和你的团队感到沮丧。在小项目中，你可能只有几十个测试，但在大项目中，你可能会有成千上万的测试。
- en: Important note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you have a test that on average takes one second to run, you will lose one
    second every time you run the test. If you have 1,000 tests, you will lose 1,000
    seconds, which is more than 16 minutes! In most cases, you will have the option
    to use concurrency and run the tests in parallel, so the total time will be much
    lower. But it requires an extra step to set up ([https://nodejs.org/api/test.html#runoptions](https://nodejs.org/api/test.html#runoptions)).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个平均运行时间为1秒的测试，每次运行测试你都会失去1秒。如果你有1,000个测试，你将失去1,000秒，这超过16分钟！在大多数情况下，你将有机会使用并发来并行运行测试，因此总时间将大大降低。但这需要额外的步骤来设置（[https://nodejs.org/api/test.html#runoptions](https://nodejs.org/api/test.html#runoptions)）。
- en: You will need to dedicate time and resources to refactor and improve your tests
    in big projects to keep them fast.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在大项目中，你需要投入时间和资源来重构和改进你的测试，以保持它们的快速。
- en: Trustable
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可信
- en: The tests should be trustable. If you have flaky tests (that is, tests that
    fail randomly), your team will be very frustrated and will lose confidence in
    the tests.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应该是可信的。如果你有不可靠的测试（即随机失败的测试），你的团队将非常沮丧，并失去对测试的信心。
- en: 'In order to avoid this situation, we should follow these principles:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，我们应该遵循以下原则：
- en: '**Isolated**: We need to isolate the tests from external factors such as the
    network, filesystem, database, and time'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离**：我们需要将测试与外部因素（如网络、文件系统、数据库和时间）隔离。'
- en: '**Repeatable and deterministic**: We need to be able to run the tests many
    times and get the same results'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重复性和确定性**：我们需要能够多次运行测试并获得相同的结果。'
- en: '**Self-contained and independent**: We need to be able to run any tests in
    isolation and get the same results'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自包含和独立**：我们需要能够独立运行任何测试并获得相同的结果。'
- en: Maintainable
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可维护性
- en: 'Tests are code as well, so we need to maintain them in the same way as we maintain
    our production code. We should follow these principles:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 测试也是代码，因此我们需要以与维护我们的生产代码相同的方式维护它们。我们应该遵循以下原则：
- en: '**Readable and explicit**: Tests should be easy to read and understand. They
    have to be flexible in order to evolve with the code that we are testing.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可读性和明确性**：测试应该易于阅读和理解。它们必须具有灵活性，以便与我们要测试的代码一起进化。'
- en: '**Focused**: A single test should test a single thing. If we have a test that
    is testing more than one thing, we won’t be able to know exactly what is failing.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专注性**：单个测试应该测试单一事物。如果我们有一个测试在测试多个事物，我们将无法确切知道什么失败了。'
- en: '**Small and simple**: It is better to have many small and simple tests than
    a few big and complex tests.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小而简单**：拥有许多小而简单的测试比拥有少数大而复杂的测试要好。'
- en: Congratulations! You wrote your first test and now the mechanics should be clearer.
    In the next section, we will learn how we can build a full test suite to cover
    multiple cases and how to automate some steps.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经编写了第一个测试，现在应该对机制更清晰了。在下一节中，我们将学习如何构建一个完整的测试套件来覆盖多个案例，以及如何自动化一些步骤。
- en: Writing our first test suite
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写我们的第一个测试套件
- en: In this section, we will build our first test suite. We will build a test suite
    for the `utils` module that we created and published in the previous chapter.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建我们的第一个测试套件。我们将为上一章中创建和发布的`utils`模块构建一个测试套件。
- en: We will use the `node:test` and `node:assert` modules to build our test suite,
    and then we will build the same tests using the J`est` framework, so we can compare
    both approaches and see the differences.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `node:test` 和 `node:assert` 模块来构建我们的测试套件，然后我们将使用 Jest 框架构建相同的测试，这样我们就可以比较两种方法并看到差异。
- en: Utils module
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具模块
- en: 'Let’s start by creating a new folder and then initialize a new Node.js project
    with `npm init`. Then we will create a `utils.js` file with the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先创建一个新的文件夹，然后使用 `npm init` 初始化一个新的 Node.js 项目。然后我们将创建一个 `utils.js` 文件，其中包含以下代码：
- en: '[PRE1]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The code is very simple. The `sum` function will sum two numbers and the `multiply`
    function will multiply two numbers. Then the tests should be very simple as well.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 代码非常简单。`sum` 函数会将两个数字相加，而 `multiply` 函数会将两个数字相乘。因此，测试也应该非常简单。
- en: Basically, we need to test that the `sum` function is summing two numbers and
    the `multiply` function is multiplying two numbers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们需要测试 `sum` 函数是否将两个数字相加，以及 `multiply` 函数是否将两个数字相乘。
- en: Test core library
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试核心库
- en: Recently, Node.js has introduced a new core library to help us to build tests.
    This library is called `assert` and it’s a core library, so we don’t need to install
    it. We can just import it and use it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，Node.js 引入了一个新的核心库来帮助我们构建测试。这个库叫做 `assert`，它是一个核心库，所以我们不需要安装它。我们只需导入并使用它即可。
- en: Adding the npm scripts
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 npm 脚本
- en: 'Let’s add the following NPM scripts to our `package.json` file and add `type:"module"`
    as well:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `package.json` 文件中添加以下 NPM 脚本，并添加 `type:"module"`：
- en: '[PRE2]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this case, we have chosen `type: "module"` to enable the ESM syntax by default,
    so we can use the import keyword in the files directly. You can find more information
    about how to import modules in [*Chapter 6*](B21678_06.xhtml#_idTextAnchor171)*.*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '在这种情况下，我们选择了 `type: "module"` 以默认启用 ESM 语法，这样我们就可以在文件中直接使用 import 关键字。你可以在
    [*第 6 章*](B21678_06.xhtml#_idTextAnchor171)*.* 中找到有关如何导入模块的更多信息。'
- en: Adding the test suite
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加测试套件
- en: 'Let’s create a new folder, `node_test`, and include a new file, `utils.test.js`,
    inside it with the following code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的文件夹，`node_test`，并在其中包含一个名为 `utils.test.js` 的新文件，其中包含以下代码：
- en: '[PRE3]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It is important to notice that we are using `../` to refer to parent directories
    from the current file. That way, we can import files from anywhere on the computer.
    It is also possible to use the absolute path to a specific resource. You can find
    more details about the differences at [https://www.redhat.com/sysadmin/linux-path-absolute-relative](https://www.redhat.com/sysadmin/linux-path-absolute-relative).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，我们正在使用 `../` 来从当前文件引用父目录。这样，我们可以从计算机上的任何位置导入文件。也可以使用到特定资源的绝对路径。你可以在
    [https://www.redhat.com/sysadmin/linux-path-absolute-relative](https://www.redhat.com/sysadmin/linux-path-absolute-relative)
    找到更多关于这些差异的详细信息。
- en: Running the tests
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行测试
- en: 'Now, we can run the tests with the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下命令来运行测试：
- en: '[PRE4]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We should see the following output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下输出：
- en: '![Figure 8.3 – Terminal output](img/B21678_08_03.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 终端输出](img/B21678_08_03.jpg)'
- en: Figure 8.3 – Terminal output
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 终端输出
- en: Notice that the terminal uses distinct colors to show us the results of the
    tests. In this case, we have two tests and both are passing. As you can see, the
    output is very simple and is using the texts that we defined in the `describe`
    and `it` functions.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，终端使用不同的颜色来显示测试结果。在这种情况下，我们有两个测试，并且两个都通过了。正如你所看到的，输出非常简单，并且使用了我们在 `describe`
    和 `it` 函数中定义的文本。
- en: Using the Jest library
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Jest 库
- en: Jest is a JavaScript testing framework that is very popular in the JavaScript
    community. It’s very easy to use and has a lot of features that will help us to
    build and maintain our test suite, especially if you are doing frontend development
    using modern frameworks as libraries, such as Angular, React, or Vue.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Jest 是一个在 JavaScript 社区中非常流行的 JavaScript 测试框架。它非常容易使用，并且拥有许多功能，可以帮助我们构建和维护测试套件，尤其是如果你正在使用现代框架作为库进行前端开发，例如
    Angular、React 或 Vue。
- en: Installing Jest
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Jest
- en: 'The first step is to install `Jest` in our project as a development dependency.
    We can do it with the following command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是在我们的项目中将 `Jest` 安装为开发依赖。我们可以使用以下命令来完成：
- en: '[PRE5]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Configuring Jest
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Jest
- en: As we had the test previously set up for the Node.js core library, we will need
    to use a custom configuration for Jest. In a real project, we will use only one
    testing framework, and in that case, we can configure Jest using `npx` `jest@29
    --init`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们之前已经为 Node.js 核心库设置了测试，因此我们需要为 Jest 使用自定义配置。在实际项目中，我们将只使用一个测试框架，在这种情况下，我们可以使用
    `npx jest@29 --init` 来配置 Jest。
- en: The `npx` command will execute the `Jest` command that we have installed in
    our project. The `--init` flag will create a configuration file for us.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`npx`命令将执行我们在项目中安装的`Jest`命令。`--init`标志将为我们创建一个配置文件。'
- en: 'We will create a new file, `jest.config.js`, with the following content:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新文件，`jest.config.js`，内容如下：
- en: '[PRE6]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`modulePathIgnorePatterns` will ignore the `node_test` folder, so we can ignore
    the tests that we have created with the Node.js core library. `<rootDir>` is a
    reference to the folder where `jest.confg.js` is in this case, so it is easier
    to reference other resources.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`modulePathIgnorePatterns`将忽略`node_test`文件夹，因此我们可以忽略我们使用Node.js核心库创建的测试。`<rootDir>`是指`jest.confg.js`所在的文件夹，因此更容易引用其他资源。'
- en: 'As Jest does not support ESM modules yet, we will use Babel ([https://babeljs.io/](https://babeljs.io/))
    to transpile the code. We will create a new file, `.babelrc`, with the following
    content:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Jest目前不支持ESM模块，我们将使用Babel ([https://babeljs.io/](https://babeljs.io/))来转译代码。我们将创建一个新文件，`.babelrc`，内容如下：
- en: '[PRE7]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will install the following dependencies:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装以下依赖项：
- en: '[PRE8]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Adding the npm scripts
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加npm脚本
- en: 'Let’s add the following npm scripts to our `package.json` file:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`package.json`文件中添加以下npm脚本：
- en: '[PRE9]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adding the test suite
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加测试套件
- en: 'Let’s create a new folder, `jest_test`, and include a new file, `utils.test.js`,
    inside it with the following code:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新文件夹，`jest_test`，并在其中包含一个名为`utils.test.js`的新文件，内容如下：
- en: '[PRE10]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, the code is very similar to the code that we created for the
    Node.js core library. The only difference is in how we manage the assertions.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，代码与我们为Node.js核心库创建的代码非常相似。唯一的区别在于我们如何管理断言。
- en: Important note
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Note also that we are not importing the `describe` and `it` functions. This
    is because Jest provides these functions for us and we don’t need to import them.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们也没有导入`describe`和`it`函数。这是因为Jest为我们提供了这些函数，我们不需要导入它们。
- en: Running the tests
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行测试
- en: 'Now, we can run the tests with the following command: `npm` `run jest-test`.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下命令运行测试：`npm run jest-test`。
- en: 'We should see the following output:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下输出：
- en: '![Figure 8.4 – Terminal output](img/B21678_08_04.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 – 终端输出](img/B21678_08_04.jpg)'
- en: Figure 8.4 – Terminal output
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 终端输出
- en: As you can see, the output is very similar to the output that we saw with the
    Node.js core library. The only difference is that the output is using different
    colors, and the text is slightly different. But the most important thing is that
    we have the same information.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，输出与我们在Node.js核心库中看到的输出非常相似。唯一的区别是输出使用了不同的颜色，文本略有不同。但最重要的是，我们得到了相同的信息。
- en: Now we are quite confident about our tests, but when the source code is growing
    every day, you need an additional tool that helps you know what code has been
    covered by tests or not. So, in the next section, we will learn in detail how
    we can use the test coverage to generate reports that will help us to improve
    the tests in our projects.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们对我们的测试非常有信心，但随着源代码每天都在增长，你需要一个额外的工具来帮助你了解哪些代码已被测试覆盖或未被覆盖。因此，在下一节中，我们将详细学习如何使用测试覆盖率生成报告，这将帮助我们改进项目中的测试。
- en: Mastering code coverage tooling
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 掌握代码覆盖率工具
- en: When we are building a test suite, we need to make sure that we are covering
    all the code that is critical in scenarios that make sense for our purpose. This
    is called **code coverage** and it’s a very important metric to measure the quality
    of our test suite.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们构建测试套件时，我们需要确保我们覆盖了所有对我们目的有意义的场景中的关键代码。这被称为**代码覆盖率**，它是衡量我们测试套件质量的一个重要指标。
- en: Some people say that we need to have 100% code coverage, but this is not always
    true or practical. In my opinion, code coverage is a metric that helps us to detect
    the code that is not covered by our tests or code that has been over-tested.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人说我们需要达到100%的代码覆盖率，但这并不总是真实或实用的。在我看来，代码覆盖率是一个帮助我们检测测试未覆盖的代码或过度测试的代码的指标。
- en: Overall, it is a metric that can help us to skim the code and detect potential
    tests that we need to add or remove.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这是一个可以帮助我们浏览代码并检测需要添加或删除的潜在测试的指标。
- en: Configuration
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: Historically, code coverage was a feature that was provided by third-party libraries
    such as Istanbul ([https://istanbul.js.org/](https://istanbul.js.org/)). But now,
    Node.js and Jest provide this feature out of the box, so we don’t need to install
    any third-party library.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，代码覆盖率是一个由第三方库（如 Istanbul [https://istanbul.js.org/](https://istanbul.js.org/)）提供的功能。但现在，Node.js
    和 Jest 都自带了这个功能，所以我们不需要安装任何第三方库。
- en: Jest library
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jest 库
- en: 'Let’s add the following npm script to our `package.json` file:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `package.json` 文件中添加以下 npm 脚本：
- en: '[PRE11]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Node.js
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Node.js
- en: 'Node.js has an experimental feature that we can use to generate code coverage.
    We need to use the `--experimental-test-coverage` flag to enable this feature:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 有一个实验性功能，我们可以用它来生成代码覆盖率。我们需要使用 `--experimental-test-coverage` 标志来启用此功能：
- en: '[PRE12]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Running the tests
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行测试
- en: 'Let’s add a new function, `substract`, to our `utils.js` file:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `utils.js` 文件中添加一个新的函数，`substract`：
- en: '[PRE13]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, let’s run the code coverage for both Node.js and Jest to see the results.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行 Node.js 和 Jest 的代码覆盖率以查看结果。
- en: Node.js report
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node.js 报告
- en: 'By default, Node.js will generate a `coverage` folder with the results. We
    can open the `index.html` file in our browser to see the results:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Node.js 将生成一个包含结果的 `coverage` 文件夹。我们可以在浏览器中打开 `index.html` 文件来查看结果：
- en: '[PRE14]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output should be similar to the following figure:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于以下图示：
- en: '![Figure 8.5 – Terminal output](img/B21678_08_05.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – 终端输出](img/B21678_08_05.jpg)'
- en: Figure 8.5 – Terminal output
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 终端输出
- en: As you can see, we have 66.67% code coverage for the functions, as we don’t
    have any coverage for the `subtract` function.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们的函数代码覆盖率是 66.67%，因为我们没有对 `subtract` 函数进行任何覆盖率测试。
- en: Jest report
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jest 报告
- en: 'Running the code coverage with Jest is very similar to running the tests:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Jest 运行代码覆盖率与运行测试非常相似：
- en: '[PRE15]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output should be similar to the following figure:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于以下图示：
- en: '![Figure 8.6 – Terminal output](img/B21678_08_06.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – 终端输出](img/B21678_08_06.jpg)'
- en: Figure 8.6 – Terminal output
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – 终端输出
- en: As you can see, we have the same code coverage as with Node.js. This is because
    both tools are used in the same way to calculate the code coverage.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们的代码覆盖率与 Node.js 相同。这是因为这两个工具以相同的方式用于计算代码覆盖率。
- en: Coverage UI report
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 覆盖率 UI 报告
- en: In both cases, we have generated a `coverage` folder with the results. We can
    open the `index.html` file located in `coverage/lcov-report` in our browser to
    see the results.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，我们都生成了一个包含结果的 `coverage` 文件夹。我们可以在浏览器中打开位于 `coverage/lcov-report` 中的
    `index.html` 文件来查看结果。
- en: '![Figure 8.7 Web browser report](img/B21678_08_07.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 网络浏览器报告](img/B21678_08_07.jpg)'
- en: Figure 8.7 Web browser report
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 网络浏览器报告
- en: We can explore in detail what is and is not covered in `utils.js`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以详细探索 `utils.js` 中哪些被覆盖了，哪些没有被覆盖。
- en: '![Figure 8.8 – Web browser report](img/B21678_08_08.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8 – 网络浏览器报告](img/B21678_08_08.jpg)'
- en: Figure 8.8 – Web browser report
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – 网络浏览器报告
- en: As you can see, the `subtract` function is not covered by our tests. So, here
    we have the opportunity to improve our tests.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`subtract` 函数没有被我们的测试覆盖。因此，这里我们有改进测试的机会。
- en: The code coverage report is a great way to understand your tests, especially
    when you are working with a large code base. So, I encourage you to use it as
    much as possible.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 代码覆盖率报告是理解你的测试的一个很好的方式，尤其是当你与大型代码库一起工作时。所以我鼓励你尽可能多地使用它。
- en: In the next section, we will change the approach. We are going to learn about
    the additional value that we receive when we define the tests before we write
    the code. While that might sound complicated, it will help you a lot to clarify
    what you need to build next and how to do it in a way where you can test it. You
    will be amazed at how much time you can save when you follow this approach. It
    is called test-driven development.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将改变方法。我们将学习在编写代码之前定义测试时我们获得的额外价值。虽然这可能听起来很复杂，但它将极大地帮助你明确你接下来需要构建什么以及如何以可以测试的方式进行构建。当你遵循这种方法时，你会对能节省多少时间感到惊讶。这被称为测试驱动开发。
- en: TDD in action
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动开发实践
- en: There are some edge cases that we are not covering in our `utils` module. For
    example, what happens if we pass a string to the `sum` function?
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `utils` 模块中，有一些边缘情况我们没有涵盖。例如，如果我们向 `sum` 函数传递一个字符串会发生什么？
- en: '[PRE16]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is not the expected behavior when we use the `sum` function, so we need
    to fix it.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 `sum` 函数时，这不是预期的行为，因此我们需要修复它。
- en: 'Let’s add some tests to cover these edge cases in our `jest-tests/utils.test.js`
    file:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `jest-tests/utils.test.js` 文件中添加一些测试来覆盖这些边缘情况：
- en: '[PRE17]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, we are using the `toThrow` matcher to test that the function
    is throwing an error. Now, let’s run the test coverage with `npm` `run jest-test`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我们正在使用`toThrow`匹配器来测试函数是否抛出错误。现在，让我们使用`npm run jest-test`运行测试覆盖率。
- en: '![Figure 8.9 – Terminal output](img/B21678_08_09.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图8.9 – 终端输出](img/B21678_08_09.jpg)'
- en: Figure 8.9 – Terminal output
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9 – 终端输出
- en: 'Our new test is failing because our code didn’t meet our requirements, so let’s
    make some changes in `utils.js`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新测试失败是因为我们的代码没有满足我们的要求，所以让我们在`utils.js`中做一些修改：
- en: '[PRE18]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, let’s run the tests again.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再次运行测试。
- en: '![Figure 8.10 – Terminal output](img/B21678_08_10.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图8.10 – 终端输出](img/B21678_08_10.jpg)'
- en: Figure 8.10 – Terminal output
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10 – 终端输出
- en: Our tests are passing again, so we can say that our code is working as expected.
    This interactive process of writing the tests first and then writing the code
    to make the tests pass is called test-driven development, or TDD.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试再次通过，所以我们可以说我们的代码按预期工作。首先编写测试然后编写代码以使测试通过的这个交互式过程被称为测试驱动开发，或TDD。
- en: While TDD is a vast topic, we can take this simple example as an exploratory
    introduction to the benefits of TDD without following it strictly. For example,
    we can test edge cases and then use them to improve our code.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然TDD是一个很大的话题，但我们可以把这个简单的例子作为一个探索性介绍，来了解TDD的好处，而不必严格遵循它。例如，我们可以测试边缘情况，然后使用它们来改进我们的代码。
- en: I personally find TDD a great approach in Node.js, as it helps me a lot with
    dividing complex tasks into smaller pieces that have their own well-defined and
    tested functionality. While this may seem obvious to more senior developers, due
    to the nature of JavaScript, it is very easy to build overengineering solutions.
    Testing will help us a lot in this matter.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人认为TDD在Node.js中是一个很好的方法，因为它帮助我把复杂任务分解成具有自己明确定义和测试功能的小块。虽然这可能对更资深开发者来说很显然，但由于JavaScript的特性，很容易构建过度工程化的解决方案。测试在这方面会极大地帮助我们。
- en: Also, testing can be a great ally when you are working in isolation, for example,
    when you need to build an HTTP API for a web application, but the frontend team
    is not planning to start until the API is ready. So, testing is a great way to
    validate the implementation with the frontend team. Also, tests are a great way
    to onboard new members to a team, as they can easily follow what is expected to
    happen in the application just by running and reading the tests.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当你独立工作时，测试可以是一个伟大的盟友，例如，当你需要为Web应用程序构建HTTP API，但前端团队不计划在API准备好之前开始时。所以，测试是验证前端团队实现的一个很好的方式。此外，测试也是让新成员加入团队的一个很好的方式，因为他们可以通过运行和阅读测试来轻松地了解应用程序中预期会发生什么。
- en: For more advanced cases, it is also a great way to debug applications and recreate
    bugs reported by clients or team members. Overall, I think that the return on
    investment is very high, especially in dynamic languages such as JavaScript.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的情况，这也是调试应用程序和重现客户或团队成员报告的bug的一个很好的方式。总的来说，我认为投资回报率非常高，尤其是在像JavaScript这样的动态语言中。
- en: Summary
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the testing principles and how we can combine
    different types of tests to build a robust test suite. We also explored how the
    test pyramid can help us to build a test suite that is easy to maintain and understand.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了测试原则以及我们如何结合不同类型的测试来构建一个健壮的测试套件。我们还探讨了测试金字塔如何帮助我们构建一个易于维护和理解的测试套件。
- en: Additionally, we discussed the differences between unit tests and integration
    tests and how we can use them to test our code. We also explored strategies to
    evangelize testing in our teams.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们讨论了单元测试和集成测试之间的区别，以及我们如何使用它们来测试我们的代码。我们还探讨了在团队中推广测试的策略。
- en: After that, we explored how to add unit tests to our code using Node.js core
    modules and Jest.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们探讨了如何使用Node.js核心模块和Jest给我们的代码添加单元测试。
- en: Finally, we learned how to use code coverage as an interactive tool to help
    us refine our tests and keep our code base robust. Then, we did a little exercise
    using TDD to fix a bug in our library.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了如何使用代码覆盖率作为一个交互式工具来帮助我们精炼我们的测试并保持我们的代码库健壮。然后，我们使用TDD进行了一些练习，以修复我们库中的一个bug。
- en: In the next chapter, we will explore how the HTTP protocol works in detail and
    how we can build RESTful APIs with Node.js.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细探讨HTTP协议的工作原理以及我们如何使用Node.js构建RESTful API。
- en: Further reading
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*The Practical Test Pyramid by Martin* *Fowler*: [https://martinfowler.com/articles/practical-test-pyramid.html](https://martinfowler.com/articles/practical-test-pyramid.html)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*马丁·福勒的《实用的测试金字塔》*: [https://martinfowler.com/articles/practical-test-pyramid.html](https://martinfowler.com/articles/practical-test-pyramid.html)'
- en: '*Test-Driven Development // Fun TDD Introduction with* *JavaScript*: [https://www.youtube.com/watch?v=Jv2uxzhPFl4](https://www.youtube.com/watch?v=Jv2uxzhPFl4)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试驱动开发 // 使用JavaScript的有趣TDD介绍*: [https://www.youtube.com/watch?v=Jv2uxzhPFl4](https://www.youtube.com/watch?v=Jv2uxzhPFl4)'
- en: '*Delightful JavaScript Testing with* *Jest*: [https://www.youtube.com/watch?v=cAKYQpTC7MA](https://www.youtube.com/watch?v=cAKYQpTC7MA)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Jest进行令人愉快的JavaScript测试*: [https://www.youtube.com/watch?v=cAKYQpTC7MA](https://www.youtube.com/watch?v=cAKYQpTC7MA)'
- en: '*Migrating from Jest to Node.js Native Test Runner by Erick* *Wendel*: [https://www.youtube.com/watch?v=2YfIB4gia60](https://www.youtube.com/watch?v=2YfIB4gia60)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从Jest迁移到Node.js原生测试运行器（埃里克·温德尔）*: [https://www.youtube.com/watch?v=2YfIB4gia60](https://www.youtube.com/watch?v=2YfIB4gia60)'
- en: '*TDD, Where Did It All Go Wrong (Ian* *Cooper)*: [https://www.youtube.com/watch?v=EZ05e7EMOLM](https://www.youtube.com/watch?v=EZ05e7EMOLM)'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*TDD，哪里出了错（伊恩·库珀）*: [https://www.youtube.com/watch?v=EZ05e7EMOLM](https://www.youtube.com/watch?v=EZ05e7EMOLM)'
- en: '*Unit testing in JavaScript Part 1 - Why unit* *testing?*: [https://www.youtube.com/watch?v=Eu35xM76kKY&list=PL0zVEGEvSaeF_zoW9o66wa_UCNE3a7BEr](https://www.youtube.com/watch?v=Eu35xM76kKY&list=PL0zVEGEvSaeF_zoW9o66wa_UCNE3a7BEr)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*JavaScript 单元测试第1部分 - 为什么需要单元测试？*: [https://www.youtube.com/watch?v=Eu35xM76kKY&list=PL0zVEGEvSaeF_zoW9o66wa_UCNE3a7BEr](https://www.youtube.com/watch?v=Eu35xM76kKY&list=PL0zVEGEvSaeF_zoW9o66wa_UCNE3a7BEr)'
- en: 'Part 3: Web Application Fundamentals'
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3部分：Web应用程序基础
- en: In *Part 3*, you will learn how web applications are built by using modern patterns
    and techniques that are adopted by most companies. You will also learn how to
    build solid RESTful APIs.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第3部分*中，你将学习如何通过使用大多数公司采用的现代模式和技巧来构建Web应用程序。你还将学习如何构建稳固的RESTful API。
- en: 'This part includes the following chapters:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包括以下章节：
- en: '[*Chapter 9*](B21678_09.xhtml#_idTextAnchor244), *Handling HTTP and REST API*'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B21678_09.xhtml#_idTextAnchor244)，处理HTTP和REST API'
- en: '[*Chapter 10*](B21678_10.xhtml#_idTextAnchor267)*, Building Web Applications
    with Express*'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B21678_10.xhtml#_idTextAnchor267)，使用Express构建Web应用程序'
