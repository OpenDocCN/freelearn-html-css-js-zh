["```js\n{ \n    xtype: 'button', text: 'My Button',\n    plugins: ['responsive'],\n    responsiveConfig: {\n        'portrait': { hidden: true } \n    }\n}\n```", "```js\nPostcard.controller.RootController: extends Ext.app.Controller\n- onLaunch -> check for valid login\n- onLoginSuccess -> show main view\n```", "```js\nPostcard.view.login.Login: extends Ext.window.Window\n- items[]\n    - e-mail: extends Ext.form.Text\n    - password: extends Ext.form.Text\n    - rememberMe: extends Ext.form.Checkbox\n    - submit: extends Ext.Button\n\nPostcard.view.login.LoginModel: extends Ext.app.ViewModel\n- e-mail\n- password\n- rememberMe\n\nPostcard.view.login.LoginController: extends Ext.app.ViewController\n- onLoginClick\n\n```", "```js\nPostcard.view.main.Main: extends Ext.Panel\n- items[]\n    - app-header: extends Ext.Container\n    - threads: extends Ext.DataView\n    - container: extends Ext.Container\n        - items[]\n            - messages: Ext.Container\n            - composer: Ext.form.Panel\n\n```", "```js\nPostcard.view.main.MainModel: extends Ext.app.ViewModel\n- currentTag\n- searchTerm\n```", "```js\nPostcard.view.main.MainController: extends Ext.app.ViewController\n- onLogout\n- onHome\n- onShowThread\n- onNewThread\n- onNewMessage\n```", "```js\nPostcard.view.header.Header: Ext.Toolbar\n- items[]\n    - homebutton: extends Ext.Button\n    - searchfield: extends Ext.form.TextField\n    - tagfilter: extends Ext.form.ComboBox\n    - newmessagebutton: extends Ext.Button\n    - menubutton: extends Ext.Button\n\n```", "```js\nPostcard.view.header.HeaderController: extends Ext.app.ViewController\n- onHomeClick\n- onNewMessageClick\n```", "```js\nPostcard.view.header.HeaderModel: extends Ext.app.ViewModel\n- tags\n```", "```js\nPostcard.view.threads.Threads: extends Ext.DataView\n- stripHtml\n```", "```js\nPostbox.view.threads.ThreadsModel: extends Ext.app.ViewModel\n- threads\n```", "```js\nPostcard.view.threads.ThreadsController: extends\nExt.app.ViewController\n- onThreadClick\n```", "```js\nPostcard.view.messages.Messages: extends Ext.Panel\n- items[]\n    - panel: extends Ext.Panel\n        - items[]\n            - messagelist: extends Ext.DataView\n        - bbar[]\n            - tagpicker: extends Ext.form.ComboBox\n            - reply: extends Ext.Button\n```", "```js\nPostcode.view.messages.MessagesModel: extends Ext.app.ViewModel\n- messages\n- threads\n```", "```js\nPostcard.view.messages.MessagesController: extends Ext.app.ViewController\n- onReplyClick\n- onNewThread\n- onShwThread\n- onTagChange\n```", "```js\nPostcard.view.composer.Composer: extends Ext.form.Panel\n- items[]\n    - recipients: extends Ext.form.ComboBox\n    - subject: extends Ext.form.TextField\n    - message: extends Ext.form.HtmlEditor\n\n```", "```js\nPostcard.view.Composer.ComposerModel: extends Ext.app.ViewModel\n- items[]\n    - contacts\n    - newMessage\n\n```", "```js\nPostcard.view.composer.ComposerController: extends\nExt.app.ViewController\n- onSendClick\n```", "```js\n Route: /#home\n```", "```js\nview.threads.Main.activeItem = 'threads'\n```", "```js\nview.main.Main.rightPane.hidden = true\n```", "```js\nRoute: thread/new\n```", "```js\nview.main.Main.activeItem = 'rightPane'\nview.composer.Composer.hidden = false\nview.messages.Messages.hidden = true\n```", "```js\nRoute: thread/:id/messages\n```", "```js\nview.main.Main.activeItem = 'rightPane'\nview.messages.Messages.hidden = false\nview.composer.Composer.hidden = true\nview.main.MainModel.currentThreadId = :id\n```", "```js\nRoute: thread/:id/messages/new\n```", "```js\nview.main.Main.activeItem = 'rightPane'\nview.messages.Messages.hidden = false\nview.composer.Composer.hidden = false\nview.main.MainModel.currentThreadId = :id\n```", "```js\nif menu_button_is_pressed\n   this.find('searchfield').show()\n   this.find('newmessagebutton').hide()\n   this.find('logo').hide()\nelse \n   this.find('searchfield').hide()\n   this.find('newmessagebutton').show()\n   this.find('logo').show()\nend\n```", "```js\n[\n    {\n   \t      xtype: 'button', reference: 'menubutton',\n   \t      enableToggle: true\n   \t},\n    {\n         xtype: 'searchfield', \n         bind: { \n               hidden: '{menubutton.pressed}'\n         }\n    }\n]\n```", "```js\n// Theoretical \"messages\" view controller\nmessage.save({\n    success: function(response) {\n          var viewport = Ext.ComponentQuery.query('viewport')[0];\n\n          // Refresh the list of records after adding this one.\n          viewport.down('list').getStore().reload();\n\n          viewport.showMessage(response.message);\n\n          this.lookupReference('editor').hide();\n   },\n   scope: this\n});\n```", "```js\nmessage.save({\n    success: function(response) {\n          this.fireEvent('messagesaved', response.message.id);\n   },\n   scope: this\n});\n```", "```js\n// app/model/BaseModel.js\nExt.define('Postcard.model.BaseModel', {\n    extend: 'Ext.data.Model',\n    schema: {\n        namespace: 'Postcard.model',\n        urlPrefix: 'http://localhost:3000',\n        proxy: {\n            type: 'rest',\n            url: '{prefix}/{entityName:uncapitalize}'\n        }\n    },\n});\n\n// app/model/Contact.js\nExt.define('Postcard.model.Contact', {\n    extend: 'Postcard.model.BaseModel',\n    fields: [\n        { name: 'e-mail' }\n    ]\n});\n\n// app/model/Message.js\nExt.define('Postcard.model.Message', {\n    extend: 'Postcard.model.BaseModel',\n    fields: [\n        { name: 'id' },\n        { name: 'people' },\n        { name: 'subject' },\n        { name: 'body' },\n        { name: 'date', type: 'date' },\n        { name: 'tag' }\n    ]\n});\n\n// app/model/Tag.js\nExt.define('Postcard.model.Tag', {\n    extend: 'Postcard.model.BaseModel',\n    fields: [\n        { name: 'name' }\n    ]\n});\n\n// app/model/Thread.js\nExt.define('Postcard.model.Thread', {\n    extend: 'Postcard.model.BaseModel',\n    fields: [\n        { name: 'id' },\n        { name: 'people' },\n        { name: 'subject' },\n        { name: 'lastMessageOn', type: 'date' },\n        { name: 'lastMessageSnippet' }\n    ]\n});\n```", "```js\n// app/store/Contacts.js\nExt.define('Postcard.store.Contacts', {\n    extend: 'Ext.data.Store',\n    model: 'Postcard.model.Contact',\n    alias: 'store.contacts',\n    autoLoad: true\n});\n\n// app/store/Tags.js\nExt.define('Postcard.store.Tags', {\n    extend: 'Ext.data.Store',\n    model: 'Postcard.model.Tag',\n    alias: 'store.tags',\n    autoLoad: true\n});\n\n// app/store/Messages.js\nExt.define('Postcard.store.Messages', {\n    extend: 'Ext.data.Store',\n    model: 'Postcard.model.Message',\n    alias: 'store.messages'\n});\n\n// app/store/Threads.js\nExt.define('Postcard.store.Threads', {\n    extend: 'Ext.data.Store',\n    autoLoad: true,\n    model: 'Postcard.model.Thread',\n    alias: 'store.threads'\n});\n```", "```js\n// app/controller/Root.js\nExt.define('Postcard.controller.Root', {\n    extend: 'Ext.app.Controller',\n\n    routes: {\n        'home': 'onHome',\n        '': 'checkLogin'\n    },\n\n    onLaunch: function() {\n        this.checkLogin();\n    },\n\n    checkLogin: function() {\n        if(!window.localStorage.getItem('loggedin')) {\n            this.loginWindow = Ext.create('Postcard.view.login.Login');\n        } else {\n            Ext.create('Postcard.view.main.Main');\n        }\n    },\n\n    onHome: function() {\n        if(this.loginWindow) {\n            this.loginWindow.destroy();\n        }\n\n        this.checkLogin();\n    }\n});\n```", "```js\nExt.define('Postcard.view.login.Login',{\n    extend: 'Ext.window.Window',\n    xtype: 'login-window',\n\n    title: 'Login to Postcard',\n    closable: false,\n    autoShow: true,\n\n    controller: 'login',\n    viewModel: 'login',\n    items: [{\n        xtype: 'textfield',\n        name: 'e-mail',\n        bind: '{login.e-mail}',\n        fieldLabel: 'E-mail',\n        allowBlank: false\n    }, {\n        xtype: 'textfield',\n        bind: '{login.password}',\n        inputType: 'password',\n        fieldLabel: 'Password',\n        allowBlank: false\n    }, {\n        xtype: 'checkbox',\n        bind: '{login.rememberMe}',\n        fieldLabel: 'Remember Me?'\n    }],\n\n    buttons: [{ text: 'Login' }]\n});\n```", "```js\nExt.define('Postcard.view.login.LoginModel', {\n    extend: 'Ext.app.ViewModel',\n    alias: 'viewmodel.login',\n    data: {\n        login: {}\n    }\n});\n```", "```js\nExt.define('Postcard.view.login.LoginController', {\n    extend: 'Ext.app.ViewController',\n    alias: 'controller.login',\n\n    listen: {\n        component: {\n            'button': {\n                click: function() {\n                    window.localStorage.setItem('loggedin', true);\n                    this.redirectTo('home');\n                }\n            }\n        }\n    }\n});\n```", "```js\n// app/view/main/Main.js\nExt.define('Postcard.view.main.Main', {\n    extend: 'Ext.Panel',\n    xtype: 'app-main',\n    plugins: ['viewport', 'responsive'],\n    controller: 'main',\n    viewModel: 'main',\n    session: true,\n\n    responsiveConfig: {\n        'tall': {\n            layout: {\n                type: 'card'\n            }\n        },\n\n        'wide': {\n            layout: {\n                type: 'hbox',\n                align: 'stretch'\n            }\n        }\n    },\n\n    dockedItems: [\n        { xtype: 'app-header' },\n        { \n            dock: 'bottom', xtype: 'button', cls: 'logout', \n            overCls: '', focusCls: '', text: 'Logout'\n        }\n    ],\n\n    items: [\n        { xtype: 'threads', flex: 1 },\n        {\n            xtype: 'container',\n            flex: 1,\n            defaults: { hidden: true },\n            items: [\n                { xtype: 'messages' },\n                { xtype: 'composer' }\n            ]\n        }\n    ],\n\n    isCard: function() {\n        return this.getLayout().type === 'card';\n    }\n});\n```", "```js\n// app/view/main/MainModel.js\nExt.define('Postcard.view.main.MainModel', {\n    extend: 'Ext.app.ViewModel',\n    alias: 'viewmodel.main',\n\n    data: {\n        currentTag: 'Inbox',\n        searchTerm: null\n    }\n});\n```", "```js\n// app/view/main/MainController.js\nExt.define('Postcard.view.main.MainController', {\n    extend: 'Ext.app.ViewController',\n    alias: 'controller.main',\n\n    routes: {\n        'thread/new': 'showRightPane',\n        'thread/:id/messages': 'showRightPane',\n        'thread/:id/messages/new': 'showRightPane'\n    },\n\n    listen: {\n        component: {\n            'button[cls=\"logout\"]': {\n                click: function() {\n                    window.localStorage.removeItem('loggedin');\n                    window.location = '/';\n                }\n            }\n        }\n    },\n\n    showRightPane: function(id) {\n        if(this.getView().isCard()) {\n            this.getView().setActiveItem(1);\n        }\n    }\n});\n```", "```js\n// app/view/header/Header.js\nExt.define('Postcard.view.header.Header', {\n    extend: 'Ext.Toolbar',\n    requires: ['Postcard.view.header.HomeButton'],\n    xtype: 'app-header',\n    height: 60,\n    controller: 'header',\n    viewModel: 'header',\n    session: true,\n    items: [\n        { \n            xtype: 'home-button', cls: 'title', html: 'Postcard',\n            bind: { hidden: '{menuButton.pressed}' }\n        },\n        {\n            xtype: 'tbspacer',\n            bind: { hidden: '{menuButton.pressed}' } },\n        { \n            xtype: 'textfield', flex: 1,\n            cls: 'search-box', emptyText: 'Search', \n            bind: '{searchTerm}',\n            plugins: ['responsive'],\n            responsiveConfig: {\n                'tall': { \n                    hidden: true,\n                    bind: { hidden: '{!menuButton.pressed}' }\n                }, \n                'wide': { hidden: false } \n            }\n        },\n        { \n            xtype: 'tbfill',\n            bind: { hidden: '{menuButton.pressed}' }\n        },\n        { \n            xtype: 'combobox', flex: 1, editable: false,\n            displayField: 'name', idField: 'name', \n            queryMode: 'local', forceSelection: true,\n            bind: {\n                store: '{tags}', value: '{currentTag}'\n            },\n            plugins: ['responsive'],\n            responsiveConfig: {\n                'tall': {\n                    hidden: true,\n                    bind: { hidden: '{!menuButton.pressed}' }\n                }, \n                'wide': { hidden: false } \n            }\n        },\n        { \n            xtype: 'button', cls: 'new-message',\n            text: 'New Message',\n            bind: { \n                hidden: '{menuButton.pressed}'\n            }\n        },\n        { \n            text: 'Menu', reference: 'menuButton',\n            width: 30, enableToggle: true,\n            plugins: ['responsive'],\n\n            responsiveConfig: {\n                'tall': { hidden: false }, \n                'wide': { hidden: true } \n            }\n        }\n    ]\n});\n```", "```js\nExt.define('Postcard.view.header.HomeButton', {\n    extend: 'Ext.Container',\n    xtype: 'home-button',\n\n    afterRender: function() {\n        this.callParent(arguments);\n        this.getEl().on('click', function() {\n            this.fireEvent('click');\n        }, this);\n    }\n});\n```", "```js\nExt.define('Postcard.view.header.HeaderModel', {\n    extend: 'Ext.app.ViewModel',\n    alias: 'viewmodel.header',\n    stores: {\n        tags: {\n            type: 'tags',\n            session: true\n        }\n    }\n});\n```", "```js\n// app/view/header/HeaderController.js\nExt.define('Postcard.view.header.HeaderController', {\n    extend: 'Ext.app.ViewController',\n    alias: 'controller.header',\n    listen: {\n        component: {\n            'button[cls=\"new-message\"]': {\n                click: function() {\n                    this.redirectTo('thread/new');\n                }\n            },\n\n            'home-button': {\n                click: function() {\n                    this.redirectTo('home');\n                }\n            }\n        },\n\n        controller: {\n            '*': {\n                tagadded: function() {\n                    this.getViewModel().get('tags').reload();\n                }\n            }\n        }\n    }\n});\n```", "```js\n// app/view/threads/Threads.js\nExt.define('Postcard.view.threads.Threads', {\n    extend: 'Ext.DataView',\n    xtype: 'threads',\n    cls: 'thread-view',\n    viewModel: 'threads',\n    controller: 'threads',\n    border: true,\n    deferEmptyText: false,\n    emptyText: 'No messages',\n    autoScroll: true,\n    itemSelector: '.thread',\n    bind: '{threads}'\n    tpl: new Ext.XTemplate('<tpl for=\".\">',\n        '<div class=\"thread\">',\n            '<div class=\"date\">{lastMessageOn:date(\"H:m\")}</div>',\n            '<div class=\"details\">',\n                '<div class=\"header\">{people} - {subject}</div>',\n                '<div class=\"body\">{[this.stripHtml(values.lastMessageSnippet)]}</div>',\n            '</div>',\n        '</div>',\n    '</tpl>', {\n        stripHtml: function(html) {\n            var div = document.createElement('div');\n            div.innerHTML = html;\n            return div.textContent || div.innerText || '';\n        }\n    })\n});\n```", "```js\n// app/view/threads/ThreadsModel.js\nExt.define('Postbox.view.threads.ThreadsModel', {\n    extend: 'Ext.app.ViewModel',\n    alias: 'viewmodel.threads',\n    stores: {\n        threads: {\n            type: 'threads',\n            remoteFilter: true,\n            filters: [\n                {\n                    property: 'tag',\n                    value: '{currentTag}'\n                },\n                {\n                    property: 'searchTerm',\n                    value: '%{searchTerm}%'\n                }\n            ]\n        }\n    }\n});\n```", "```js\n// app/view/threads/ThreadController.js\nExt.define('Postcard.view.threads.ThreadsController', {\n    extend: 'Ext.app.ViewController',\n    alias: 'controller.threads',\n\n    listen: {\n        component: {\n            'threads': {\n                itemclick: function(dataview, record) {\n                    this.redirectTo('thread/' + record.getId() + '/' + 'messages');\n                }\n            }\n        },\n\n        controller: {\n            '*': {\n                threadschanged: function() {\n                    this.getViewModel().get('threads').reload();\n                }\n            }\n        }\n    }\n});\n```", "```js\n// app/view/messages/Messages.js\nExt.define('Postcard.view.messages.Messages', {\n    extend: 'Ext.Panel',\n    xtype: 'messages',\n    controller: 'messages',\n    viewModel: 'messages',\n    autoScroll: true,\n    session: true,\n    bbar: [\n        {\n            xtype: 'combobox', displayField: 'name',\n            idField: 'name',\n            reference: 'tagPicker',\n            queryMode: 'local', value: 'Inbox',\n            bind: { store: '{tags}' }\n        },\n        {\n            text: 'Set Tag',\n            itemId: 'setTag'\n        },\n        '->',\n        {\n            text: 'Reply',\n            itemId: 'reply',\n            reference: 'replyButton'\n        }\n    ],\n    items: [{\n        xtype: 'dataview',\n        bind: '{messages}',\n        flex: 1,\n        cls: 'message-view',\n        tpl: new Ext.XTemplate('<tpl for=\".\">',\n            '<div class=\"message\">',\n                '<div class=\"date\">{date:date(\"H:m\")}</div>',\n                '<div class=\"details\">',\n                    '<tpl if=\"xindex == 1\">',\n                    '<div class=\"header\">{people} - {subject}</div>',\n                    '</tpl>',\n                    '<div class=\"body\">{body}</div>',\n                '</div>',\n            '</div>',\n        '</tpl>'),\n        itemSelector: '.message'\n\n});\n```", "```js\n// app/view/messages/MessagesModel.js\nExt.define('Postcode.view.messages.MessagesModel', {\n    extend: 'Ext.app.ViewModel',\n    alias: 'viewmodel.messages',\n    stores: {\n        messages: {\n            type: 'messages'\n        },\n\n        tags: {\n            type: 'tags',\n            session: true\n        }\n    }\n});\n```", "```js\n// app/view/messages/MessagesController.js\nExt.define('Postcard.view.messages.MessagesController', {\n    extend: 'Ext.app.ViewController',\n    alias: 'controller.messages',\n\n    listen: {\n        component: {\n            '#reply': {\n                click: 'onReplyClick'\n            },\n\n            '#setTag': {\n                click: 'onTagChange'\n            }\n        }\n    },\n\n    routes: {\n        'thread/:id/messages': 'onShowThread',\n        'thread/new': 'onNewThread'\n    },\n\n    onShowThread:function(id) {\n        this.getViewModel().get('messages').load({\n            params: {\n                parentId: id\n            },\n            callback: function(records) {\n                this.getView().show();\n            },\n            scope: this\n        });\n    },\n\n    onNewThread: function() {\n        this.getView().hide();\n    },\n\n    onReplyClick: function() {\n        this.redirectTo(window.location.hash + '/new');\n    },\n\n    onTagChange: function() {\n        var tagPicker = this.lookupReference('tagPicker'),\n            newTag = tagPicker.getValue(),\n            viewModel = this.getViewModel(),\n            threadParent = viewModel.get('messages').getAt(0);\n\n        threadParent.set('tag', newTag);\n        threadParent.save({\n            callback: function() {\n                this.getViewModel().get('tags').reload();\n                this.fireEvent('tagadded');\n                this.fireEvent('threadschanged');\n            },\n            scope: this\n        });\n    }\n});\n```", "```js\n// app/view/composer/Composer.js\nExt.define('Postcard.view.composer.Composer', {\n    extend: 'Ext.form.Panel',\n    xtype: 'composer',\n    cls: 'composer',\n    viewModel: 'composer',\n    controller: 'composer',\n    session: true,\n    items: [\n        { xtype: 'hiddenfield', bind: '{newMessage.parentId}' },\n        {\n            fieldLabel: 'To', xtype: 'combo', width: '100%',\n            valueField: 'e-mail',\n            displayField: 'e-mail',\n            queryMode: 'local',\n            bind: {\n                hidden: '{newMessage.parentId}',\n                store: '{contacts}',\n                value: '{newMessage.people}'\n            }\n        },\n        {\n            xtype: 'textfield', fieldLabel: 'Subject',\n            cls: 'subject', emptyText: 'Subject',\n            bind: {\n                value: '{newMessage.subject}',\n                hidden: '{newMessage.parentId}'\n            },\n            width: '100%'\n        },\n        {\n            xtype: 'htmleditor',\n            bind: { value: '{newMessage.body}' }\n        }\n    ],\n    bbar: [\n        '->',\n        { xtype: 'button', text: 'Send' }\n    ]\n});\n```", "```js\n// app/view/composer/ComposerModel.js\nExt.define('Postcard.view.Composer.ComposerModel', {\n    extend: 'Ext.app.ViewModel',\n    alias: 'viewmodel.composer',\n    stores: {\n        contacts: {\n            type: 'contacts'\n        }\n    },\n\n    data: {\n        newMessage: {}\n    }\n});\n```", "```js\n// app/view/composer/ComposerController.js\nExt.define('Postcard.view.composer.ComposerController', {\n    extend: 'Ext.app.ViewController',\n    alias: 'controller.composer',\n    listen: {\n        component: {\n            'button': {\n                click: 'onSendClick'\n            }\n        }\n    },\n\n    routes: {\n        'thread/:id/messages': 'hideComposer',\n        'thread/:id/messages/new': 'showComposer',\n        'thread/new': 'showComposer'\n    },\n\n    hideComposer: function() {\n        this.getView().hide();\n    },\n\n    showComposer: function(parentId) {\n        this.getViewModel().set('newMessage.parentId', parentId);\n        this.getView().show();\n    },\n\n    onSendClick: function() {\n        var session = this.getSession(),\n            data = this.getViewModel().get('newMessage');\n\n        session.createRecord('Postcard.model.Message', {\n            people: data.people,\n            subject: data.subject,\n            body: data.body,\n            parentId: data.parentId\n        });\n\n        var batch = session.getSaveBatch().start();\n\n        batch.on('complete', this.onSaveComplete, this);\n    },\n\n    onSaveComplete: function(batch, operation) {\n        var record = operation.getRecords()[0],\n            id = record.getId(),\n            parentId = record.get('parentId');\n\n        this.redirectTo('thread/' + (parentId || id) + '/messages');\n    }\n});\n```", "```js\n// sass/etc/all.scss\n$body-font-family: 'Roboto', sans-serif;\n$window-base-color: #fff;\n$window-header-color: #000;\n$window-padding: 20px;\n$window-header-font-family: $body-font-family;\n$toolbar-footer-background-color: #fff;\n$form-label-font-family: $body-font-family;\n```", "```js\n// sass/src/view/threads/Threads.scss\n.thread-view {\n   font-family: $body-font-family;\n   margin: $gutters;\n\n   .x-view-item-focused {\n          outline: 0 !important;\n\n         .header {\n               color: rgb(255, 20, 108);\n         }\n   }\n\n   .header {\n         font-size: 125%;\n   }\n\n   .body {\n         font-size: 105%;\n         color: #666;\n         padding: 10px 0;\n         line-height: 160%;\n   }\n\n   .date {\n         color: $subdued-grey;\n         font-size: 150%;\n         padding: 0 15px;\n         font-weight: bold\n   }\n}\n\n.thread {\n   display: flex;\n   padding: 50px;\n\n   &:hover {\n          cursor: pointer;\n   }\n\n   .details {\n          border-bottom: 1px solid $subdued-grey;\n   }\n\n   &:last-child .details {\n          border-bottom: 0 !important;\n   }\n\n   .date {\n          width: 80px;\n          text-align: right;\n   }\n    .details {\n          flex: 1;\n   }\n}\n```"]