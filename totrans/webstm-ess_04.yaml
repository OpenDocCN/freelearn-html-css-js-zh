- en: Chapter 4. Using Package Managers and Build Automation Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 使用包管理器和构建自动化工具
- en: In the previous chapter, we focused on building simple webpages with the help
    of the WebStorm templates and on using the existing codebases inside the editor.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们专注于使用 WebStorm 模板构建简单的网页，并在编辑器中使用现有的代码库。
- en: 'In this chapter, you are going to learn how WebStorm can help us when working
    with some of the package managers and build tools available for the development
    workflow. You will also learn how to set up and use the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习 WebStorm 如何帮助我们使用一些可用于开发工作流程的包管理器和构建工具。你还将学习如何设置和使用以下内容：
- en: Node.js
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js
- en: NPM
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NPM
- en: Bower
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bower
- en: Grunt
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grunt
- en: Gulp
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gulp
- en: At the end of this chapter, you will be able to download, install, configure,
    and use package manager tools like NPM and Bower, and task runners like Grunt
    and Gulp.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将能够下载、安装、配置和使用像 NPM 和 Bower 这样的包管理器工具，以及像 Grunt 和 Gulp 这样的任务运行器。
- en: Node.js
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js
- en: All the tools that are required in this chapter run on Node.js, so in the first
    part, we are going to focus on making sure that everything is set up correctly.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所需的所有工具都在 Node.js 上运行，因此在前一部分，我们将确保一切设置正确。
- en: First, we need to check if Node.js is installed. Running the node `node -v`
    in the terminal window should return the version of node that we have installed.
    If you don't get the version number, it means that we need to download and install
    Node.js. Follow the instructions given at [https://nodejs.org/#download](https://nodejs.org/#download).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要检查 Node.js 是否已安装。在终端窗口中运行 `node -v` 应该返回我们已安装的 Node.js 版本。如果你没有得到版本号，这意味着我们需要下载并安装
    Node.js。遵循 [https://nodejs.org/#download](https://nodejs.org/#download) 提供的说明。
- en: 'Once we are sure that the node is up and running, we need to check that WebStorm
    is set up to work with it. Go to the **Preferences** | **Plugins** dialog, and
    make sure that the **NodeJS** plugin is activated:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确认 Node.js 已启动并运行，我们需要检查 WebStorm 是否已设置好与之协同工作。转到 **首选项** | **插件** 对话框，并确保
    **NodeJS** 插件已被激活：
- en: '![Node.js](img/00051.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Node.js](img/00051.jpeg)'
- en: When the plugin is activated, WebStorm will create a settings page for the node
    and add run/debug configurations.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当插件被激活时，WebStorm 将为 Node.js 创建一个设置页面，并添加运行/调试配置。
- en: 'The settings page, which can be accessed at **Preferences** | **Languages &
    Frameworks** | **Node.js and NPM,** allows us to set the node interpreter and
    the sources for the core modules, as seen in the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 **首选项** | **语言与框架** | **Node.js 和 NPM** 下访问的设置页面，允许我们设置节点解释器和核心模块的源，如下面的截图所示：
- en: '![Node.js](img/00052.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Node.js](img/00052.jpeg)'
- en: If you don't have the sources configured, you need to click on **Configure**
    and download the sources in the next dialog. This enables code completion, reference,
    and debugging for the node core modules like `fs`, `path`, `http,` and others.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有配置源，你需要点击 **配置** 并在下一个对话框中下载源。这使代码补全、引用和调试 `fs`、`path`、`http` 等节点核心模块成为可能。
- en: Once we have the node installed on our system, we can move to the next section
    where we are going to learn how to use NPM inside WebStorm.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在系统上安装了 Node.js，我们就可以进入下一节，我们将学习如何在 WebStorm 内部使用 NPM。
- en: Using the Node Package Manager to install node packages
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Node 包管理器安装节点包
- en: NPM is a package manager that comes with the node, and enables us to quickly
    install node packages, either globally or for the current project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: NPM 是随 Node.js 一起提供的包管理器，使我们能够快速安装节点包，无论是全局安装还是针对当前项目。
- en: From Node.js version 0.6.3 onwards, NPM comes bundled and installed automatically
    with the node, so we don't have to install anything. We can find all the available
    packages at [https://www.npmjs.com/](https://www.npmjs.com/); each package has
    a description page with all the necessary information.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Node.js 版本 0.6.3 开始，NPM 与 Node.js 一起捆绑并自动安装，因此我们不需要安装任何东西。我们可以在 [https://www.npmjs.com/](https://www.npmjs.com/)
    找到所有可用的包；每个包都有一个包含所有必要信息的描述页面。
- en: Installing a package globally
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局安装软件包
- en: Global installation makes a package available at the system level so that it
    can be used in all projects. Usually, we install the tools that we need to use
    on multiple projects like transpilers, compressors, or test runners globally,
    and these are used from the command line.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 全局安装使软件包在系统级别可用，以便在所有项目中使用。通常，我们会全局安装需要在多个项目中使用的工具，如转换器、压缩器或测试运行器，并从命令行使用这些工具。
- en: 'To install the package globally, we have two options:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要全局安装软件包，我们有两种选择：
- en: 'Run the installation from the command line with the global option:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用全局选项从命令行运行安装：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On the **Node.js and NPM** settings page, select the install icon ![Installing
    a package globally](img/00053.jpeg) from the **Packages** section. In the new
    screen, select the package you want to install, and type `-g` in the option field:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 **Node.js 和 NPM** 设置页面，从 **包** 部分选择安装图标 ![安装全局包](img/00053.jpeg)。在新屏幕中，选择你想要安装的包，并在选项字段中输入
    `-g`：
- en: '![Installing a package globally](img/00054.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![安装全局包](img/00054.jpeg)'
- en: Installing a package in the project
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在项目中安装包
- en: A package installed in the project is available only for the current project.
    When installing a package locally, we have to create a `node_modules` folder manually,
    or initialize `npm` in the current project to avoid unexpected results. That is
    because NPM searches up the folder tree for an initialized project, and installs
    the package there if it can find one.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目中安装的包仅对当前项目可用。当本地安装包时，我们必须手动创建 `node_modules` 文件夹，或在当前项目中初始化 `npm` 以避免意外结果。这是因为
    NPM 会向上搜索文件夹树以查找初始化的项目，如果找到，就会在那里安装包。
- en: To initialize the project with the NPM, we have to run `npm init` in the terminal
    window. This will ask you some questions about your project like the name, version,
    description, author, and so on, and then create the `package.json`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 NPM 初始化项目，我们必须在终端窗口中运行 `npm init`。这将询问有关你的项目的一些问题，如名称、版本、描述、作者等，然后创建 `package.json`
    文件。
- en: 'To install the package in the project, we have two options:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要在项目中安装包，我们有两种选择：
- en: 'Run the installation from the command line:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从命令行运行安装：
- en: '[PRE1]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: On the Node.js and NPM settings page, select the install icon ![Installing a
    package in the project](img/00053.jpeg) from the packages section. In the new
    screen, select the package you want to install.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Node.js 和 NPM 设置页面，从包部分选择安装图标 ![在项目中安装包](img/00053.jpeg)。在新屏幕中，选择你想要安装的包。
- en: The only difference from the globally installed packages is that we don't use
    the `-g` option anymore.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与全局安装的包的唯一区别是我们不再使用 `-g` 选项。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When we have an initialized project, we can also specify and save the installed
    packages as a dependency or as a development dependency in the `package.json`
    file. To do that, we have to use the `--save or --save-dev` option in either the
    terminal command or the option field in the settings dialog.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有一个初始化的项目时，我们还可以在 `package.json` 文件中将安装的包指定并保存为依赖项或开发依赖项。为此，我们必须在终端命令或设置对话框中的选项字段中使用
    `--save 或 --save-dev` 选项。
- en: Installing project dependencies
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装项目依赖项
- en: If you have a project or have downloaded an existing one, you have to run `npm
    install` from the command line to install the dependencies. This will install
    all the modules specified in the `package.json` file.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个项目或已下载现有项目，你必须从命令行运行 `npm install` 来安装依赖项。这将安装 `package.json` 文件中指定的所有模块。
- en: Using Bower
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Bower
- en: As mentioned earlier, NPM has a package manager for the node modules and tools.
    Similarly, we need a package manager for the web as well. This manager is known
    as Bower, a tool that allows us to install all the libraries, frameworks, and
    packages that we need for our web project.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，NPM 为 node 模块和工具提供了一个包管理器。同样，我们还需要一个用于网络的包管理器。这个管理器被称为 Bower，这是一个允许我们安装我们网络项目所需的全部库、框架和包的工具。
- en: 'The first thing that we need to do before using Bower is to install it. We
    are going to use NPM and install it as a global package so that it is available
    for all our projects. So, open the terminal and type the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Bower 之前，我们需要先安装它。我们将使用 NPM 并将其作为全局包安装，以便它对所有项目都可用。因此，打开终端并输入以下命令：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that we have Bower installed, we can use it to search and install the packages
    that we need. To search for packages, we can use the online tool available at
    [http://bower.io/search/](http://bower.io/search/), and search from the terminal
    by using the `bower search <keyword>` command.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 Bower，我们可以使用它来搜索和安装我们需要的包。要搜索包，我们可以使用在 [http://bower.io/search/](http://bower.io/search/)
    可用的在线工具，并通过使用 `bower search <keyword>` 命令在终端中搜索。
- en: Before we use Bower to install packages, we have to initialize the project so
    that we can save our dependencies.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Bower 安装包之前，我们必须初始化项目，以便我们可以保存我们的依赖项。
- en: Run `bower init` in the terminal, and go through the questions to generate the
    `bower.json` file.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中运行 `bower init`，并回答问题以生成 `bower.json` 文件。
- en: 'Once we have initialized Bower to install the packages, we have two options:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们初始化Bower来安装包，我们有两种选择：
- en: 'The first option is to run the installation command in the terminal, as follows:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种选项是在终端中运行安装命令，如下所示：
- en: '[PRE3]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please take note that Bower installs the package in the current folder; so before
    you run the command, be sure that you are in the right folder.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，Bower将在当前文件夹中安装包；所以在运行命令之前，请确保您在正确的文件夹中。
- en: 'Bower can use `install` for the following sources as package:'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Bower可以将以下源作为包使用`install`：
- en: Registered package name `bower install bootstrap`
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册包名 `bower install bootstrap`
- en: GitHub shorthand `bower install twbs/bootstrap`
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub缩写 `bower install twbs/bootstrap`
- en: Git endpoint `bower install git://github.com/twbs/bootstrap.git`
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git端点 `bower install git://github.com/twbs/bootstrap.git`
- en: URL `bower install https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css`
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL `bower install https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css`
- en: The second option is to go to the Bower settings page accessible by **Preferences**
    | **Languages & Frameworks** | **JavaScript** | **Bower,** and select the install
    icon ![Using Bower](img/00053.jpeg) from the **Dependencies** section:![Using
    Bower](img/00055.jpeg)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种选项是转到通过**首选项** | **语言和框架** | **JavaScript** | **Bower**可访问的Bower设置页面，并从**依赖项**部分选择安装图标![使用Bower](img/00053.jpeg)：![使用Bower](img/00055.jpeg)
- en: 'In the new screen that opens up, search and select the package that you want
    to install, as seen in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开的新屏幕中，搜索并选择您想要安装的包，如下截图所示：
- en: '![Using Bower](img/00056.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![使用Bower](img/00056.jpeg)'
- en: In both cases, the terminal or the install dialog, if you want to save your
    dependencies or the development dependency in the `bower.json` file, you have
    to use the `--save` or `--saveDev` option in either the terminal command, or the
    option field from the dialog.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，无论是终端还是安装对话框，如果您想在`bower.json`文件中保存依赖项或开发依赖项，您必须在终端命令或对话框的选项字段中使用`--save`或`--saveDev`选项。
- en: Now that you have learned how to work with package managers in WebStorm, you
    are going to learn how to install and use two of the popular task runners, Grunt
    and Gulp.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何在WebStorm中与包管理器一起工作，你将学习如何安装和使用两个流行的任务运行器，Grunt和Gulp。
- en: Using Grunt
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Grunt
- en: Grunt is a JavaScript test runner that was built to automate the repetitive
    tasks that we have to run during development. It can be used for tasks like minification,
    compilation, linting, unit testing, or any other tasks that your project needs.
    The Grunt ecosystem has hundreds of plugins that you can choose from.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Grunt是一个JavaScript测试运行器，它被构建来自动化我们在开发过程中必须运行的重复性任务。它可以用于任务，如压缩、编译、代码检查、单元测试或任何其他项目需要的任务。Grunt生态系统有数百个插件可供选择。
- en: 'Before using Grunt, we need to install the CLI globally. This doesn''t install
    Grunt, but it will run the version of Grunt that was installed next to the configuration
    file, `Gruntfile.js`. In this way, we can have multiple versions of Grunt installed.
    To install the tool, we are going to use NPM once again, so, run the following
    command in the terminal window:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Grunt之前，我们需要全局安装CLI。这不会安装Grunt，但它将运行与配置文件`Gruntfile.js`相邻的Grunt版本。这样，我们可以安装多个版本的Grunt。为了安装此工具，我们再次使用NPM，因此，在终端窗口中运行以下命令：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the next few steps, we are going to add Grunt to the project that we used
    in the first chapter. So, go ahead and open the project created in the first chapter,
    or get it from the Git repository at [https://github.com/srosca/youAreHere](https://github.com/srosca/youAreHere).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个步骤中，我们将把Grunt添加到我们在第一章中使用的项目中。所以，请继续打开第一章中创建的项目，或者从Git仓库[https://github.com/srosca/youAreHere](https://github.com/srosca/youAreHere)获取它。
- en: With the project open, the first thing we need to do is to initialize NPM so
    that we can download Grunt and the necessary plugins. In the terminal window,
    run `npm init` and answer the questions (you can leave them to the default values
    for the moment). This will create the necessary `package.json` file for saving
    our future dependencies.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 项目打开后，我们首先需要初始化NPM，以便我们可以下载Grunt和必要的插件。在终端窗口中运行`npm init`并回答问题（您目前可以保留默认值）。这将创建保存我们未来依赖项所需的`package.json`文件。
- en: 'Now we need to install Grunt for the current project; so, run the following
    command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为当前项目安装Grunt；所以，运行以下命令：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next we have to create the `Gruntfile.js` configuration file in the root folder
    of the project, and fill it with the following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须在项目的根目录中创建`Gruntfile.js`配置文件，并用以下代码填充它：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This creates a simple task that does a simple `jshint` on our `.js` code. Before
    we use this task, we also need to install the `jshint` Grunt plugin. So run the
    following command in the terminal to install and save it as a development dependency:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个简单的任务，它对我们的`.js`代码执行简单的`jshint`。在我们使用此任务之前，我们还需要安装`jshint` Grunt插件。因此，在终端中运行以下命令以安装并将其保存为开发依赖项：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we can either run the task in the terminal by running Grunt, or use the
    Grunt tool window. This window can be found in the tools menu or in the side bar:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在终端中通过运行Grunt来运行任务，或者使用Grunt工具窗口。此窗口可以在工具菜单或侧边栏中找到：
- en: '![Using Grunt](img/00057.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![使用Grunt](img/00057.jpeg)'
- en: 'If we double-click the task or select run from the context menu, the task will
    start and the output will be displayed in the run window:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们双击任务或从上下文菜单中选择运行，任务将启动，输出将在运行窗口中显示：
- en: '![Using Grunt](img/00058.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![使用Grunt](img/00058.jpeg)'
- en: 'As we can see in the preceding screenshot, we already have some errors in the
    output. So, before we fix them, let''s see how we can create a task that watches
    our files for any changes, and runs the `jshint` when they are changed. For that,
    we first need to install another Grunt plugin that does that. So in the terminal
    window, run the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，输出中已经存在一些错误。因此，在我们修复它们之前，让我们看看我们如何创建一个监视文件变化的任务，并在它们发生变化时运行`jshint`。为此，我们首先需要安装另一个Grunt插件来完成这个任务。所以，在终端窗口中，运行以下命令：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After the plugin is installed, open the `Gruntfile.js` configuration file and
    load the `npm` task after the `jshint` one, by adding the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在插件安装后，打开`Gruntfile.js`配置文件，在`jshint`任务之后加载`npm`任务，添加以下命令：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We have to set the `jshint` task force option to make it stop in case of an
    error, so add the following code to the option sections:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须将`jshint`任务强制选项设置为在出现错误时停止，因此请将以下代码添加到选项部分：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now after the `jshint` task in the `initConfig` block, add a new task:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在`initConfig`块中的`jshint`任务之后，添加一个新的任务：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the newly created task to the default one so that `jshint` is run before
    the watch and we can see the results before we change anything:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 将新创建的任务添加到默认任务中，以便在监视之前运行`jshint`，这样我们就可以在更改任何内容之前看到结果：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As you can see, we are using the files defined for the `jshint` task. Your
    final code should now look like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们正在使用为`jshint`任务定义的文件。您最终的代码现在应该看起来像这样：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now in the **Grunt** window, if we click the refresh icon ![Using Grunt](img/00059.jpeg),
    we will see that the folder tree has changed, reflecting the newly added task:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在**Grunt**窗口中，如果我们点击刷新图标![使用Grunt](img/00059.jpeg)，我们会看到文件夹树已更改，反映了新添加的任务：
- en: '![Using Grunt](img/00060.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![使用Grunt](img/00060.jpeg)'
- en: 'If we start the watch task, we will see that now, after running `jshint,` it
    will wait for changes in the files. So now we can change the `map.js` file to
    fix the errors by taking the content variable definition outside of the ''if''
    statement:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们启动监视任务，我们会看到现在，在运行`jshint`之后，它将等待文件的变化。因此现在我们可以更改`map.js`文件，通过将内容变量定义移出`if`语句来修复错误：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: After we make the change, we will see that if we force a save by pressing *⌘*
    + *S* , Grunt will pick up on the change in file, and will rerun the `jshint`
    task.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行更改后，我们会看到如果我们通过按*⌘* + *S*强制保存，Grunt将检测到文件的变化，并将重新运行`jshint`任务。
- en: Please note that in WebStorm, the files are saved automatically when we change
    focus from the current window or by pressing *⌘* + *S*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在WebStorm中，当我们从当前窗口更改焦点或按*⌘* + *S*时，文件会自动保存。
- en: In this section, we have automated our task with Grunt and WebStorm. Next, we
    are going to recreate this flow with Gulp, and see how we can work with it inside
    WebStorm
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用Grunt和WebStorm自动化了我们的任务。接下来，我们将使用Gulp重新创建这个流程，并看看我们如何在WebStorm内部与之协同工作
- en: Using Gulp
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Gulp
- en: Gulp is another task runner for development tasks. It's similar to Grunt in
    terms of what it does, but it does that in a different way. It uses streams to
    link tasks by pasting the output of one to the next one as input; hence, it uses
    fewer I/O requests. One main advantage of this is that Gulp is a lot faster than
    Grunt. It also favors the code-over-configuration flavor of specifying the tasks.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Gulp 是另一个用于开发任务的任务运行器。在它所做的工作方面，它与 Grunt 类似，但它以不同的方式完成。它使用流将任务链接起来，通过将一个任务的输出粘贴到下一个任务作为输入；因此，它使用的
    I/O 请求更少。这一的主要优势是 Gulp 比 Grunt 快得多。它还倾向于代码优先于配置的指定任务风格。
- en: 'To see it in action, we are going to recreate the Grunt flow into Gulp. Before
    we do that, we need to install it. Open the terminal and install Gulp globally:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要看到它的实际效果，我们将把 Grunt 流重新创建为 Gulp。在我们这样做之前，我们需要安装它。打开终端并全局安装 Gulp：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will install Gulp globally, so we can use it in all projects. We can still
    use a different Gulp version for projects by installing it locally. Run the following
    command in the terminal:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在全局安装 Gulp，因此我们可以在所有项目中使用它。我们仍然可以通过本地安装来为项目使用不同的 Gulp 版本。在终端中运行以下命令：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will install Gulp locally in the project, and save it as a development
    dependency. In this way, we can have a different version of Gulp for the project
    that we are working for. Next, we need to install the plugins that we need in
    our project, So in the terminal, run the next command to install them as a development
    dependency:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在项目中本地安装 Gulp，并将其保存为开发依赖项。这样，我们可以为正在工作的项目使用不同的 Gulp 版本。接下来，我们需要安装项目中需要的插件，因此，在终端中运行以下命令将它们作为开发依赖项安装：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We need to create the `Gulpfile.js` to define the tasks for Gulp; so, go ahead
    and create it in the root folder. Once you have the file open, create the following
    content:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个 `Gulpfile.js` 文件来定义 Gulp 的任务；因此，请继续在根目录下创建它。一旦文件打开，创建以下内容：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As you can see, Gulp uses the code approach when defining a task. With the
    file open, we can access the Gulp window by selecting **Show Gulp Tasks** from
    the context menu:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Gulp 在定义任务时使用代码方法。文件打开后，我们可以通过从上下文菜单中选择**显示 Gulp 任务**来访问 Gulp 窗口：
- en: '![Using Gulp](img/00061.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Gulp](img/00061.jpeg)'
- en: 'This will open a window similar to Grunt that lists all the tasks available.
    From this window, we can start the watch tasks that will watch the files for changes
    and run `jshint` when there is a change. In the next screenshot, you can see the
    Gulp window and the output of the job:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个类似于 Grunt 的窗口，列出所有可用的任务。从这个窗口中，我们可以启动监视任务，这些任务将监视文件的变化，并在有变化时运行 `jshint`。在下一张截图中，您可以看到
    Gulp 窗口和作业的输出：
- en: '![Using Gulp](img/00062.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Gulp](img/00062.jpeg)'
- en: As you can see, there are some similarities between Gulp and Grunt in the final
    result, but also some differences in the way you build the tasks.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Gulp 和 Grunt 在最终结果上存在一些相似之处，但在构建任务的方式上也有一些不同。
- en: In this chapter, we have created some simple automated tasks but this can be
    taken much further. You can create a task for everything that you need to automate
    in your development process.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了一些简单的自动化任务，但这可以做得更深入。您可以为开发过程中需要自动化的所有内容创建任务。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have learned some of the modern flows of web development
    package managers and task runners. Now you will be able to quickly add new packages
    to your project, save them as dependencies, and create tasks for all your repetitive
    jobs.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学习了现代 Web 开发包管理器和任务运行器的一些流程。现在您将能够快速将新包添加到项目中，将它们保存为依赖项，并为所有重复性工作创建任务。
- en: In the next chapter, we are going to see how WebStorm can help us build more
    complex applications with the help of frameworks like AngularJS, React, Express,
    and Meteor.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到 WebStorm 如何借助 AngularJS、React、Express 和 Meteor 等框架帮助我们构建更复杂的应用程序。
