- en: Chapter 4. Using Package Managers and Build Automation Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we focused on building simple webpages with the help
    of the WebStorm templates and on using the existing codebases inside the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you are going to learn how WebStorm can help us when working
    with some of the package managers and build tools available for the development
    workflow. You will also learn how to set up and use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NPM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bower
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grunt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gulp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of this chapter, you will be able to download, install, configure,
    and use package manager tools like NPM and Bower, and task runners like Grunt
    and Gulp.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the tools that are required in this chapter run on Node.js, so in the first
    part, we are going to focus on making sure that everything is set up correctly.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to check if Node.js is installed. Running the node `node -v`
    in the terminal window should return the version of node that we have installed.
    If you don't get the version number, it means that we need to download and install
    Node.js. Follow the instructions given at [https://nodejs.org/#download](https://nodejs.org/#download).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we are sure that the node is up and running, we need to check that WebStorm
    is set up to work with it. Go to the **Preferences** | **Plugins** dialog, and
    make sure that the **NodeJS** plugin is activated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Node.js](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When the plugin is activated, WebStorm will create a settings page for the node
    and add run/debug configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The settings page, which can be accessed at **Preferences** | **Languages &
    Frameworks** | **Node.js and NPM,** allows us to set the node interpreter and
    the sources for the core modules, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Node.js](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you don't have the sources configured, you need to click on **Configure**
    and download the sources in the next dialog. This enables code completion, reference,
    and debugging for the node core modules like `fs`, `path`, `http,` and others.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the node installed on our system, we can move to the next section
    where we are going to learn how to use NPM inside WebStorm.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Node Package Manager to install node packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NPM is a package manager that comes with the node, and enables us to quickly
    install node packages, either globally or for the current project.
  prefs: []
  type: TYPE_NORMAL
- en: From Node.js version 0.6.3 onwards, NPM comes bundled and installed automatically
    with the node, so we don't have to install anything. We can find all the available
    packages at [https://www.npmjs.com/](https://www.npmjs.com/); each package has
    a description page with all the necessary information.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a package globally
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Global installation makes a package available at the system level so that it
    can be used in all projects. Usually, we install the tools that we need to use
    on multiple projects like transpilers, compressors, or test runners globally,
    and these are used from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the package globally, we have two options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the installation from the command line with the global option:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the **Node.js and NPM** settings page, select the install icon ![Installing
    a package globally](img/00053.jpeg) from the **Packages** section. In the new
    screen, select the package you want to install, and type `-g` in the option field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Installing a package globally](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Installing a package in the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A package installed in the project is available only for the current project.
    When installing a package locally, we have to create a `node_modules` folder manually,
    or initialize `npm` in the current project to avoid unexpected results. That is
    because NPM searches up the folder tree for an initialized project, and installs
    the package there if it can find one.
  prefs: []
  type: TYPE_NORMAL
- en: To initialize the project with the NPM, we have to run `npm init` in the terminal
    window. This will ask you some questions about your project like the name, version,
    description, author, and so on, and then create the `package.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the package in the project, we have two options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the installation from the command line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On the Node.js and NPM settings page, select the install icon ![Installing a
    package in the project](img/00053.jpeg) from the packages section. In the new
    screen, select the package you want to install.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The only difference from the globally installed packages is that we don't use
    the `-g` option anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we have an initialized project, we can also specify and save the installed
    packages as a dependency or as a development dependency in the `package.json`
    file. To do that, we have to use the `--save or --save-dev` option in either the
    terminal command or the option field in the settings dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Installing project dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have a project or have downloaded an existing one, you have to run `npm
    install` from the command line to install the dependencies. This will install
    all the modules specified in the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: Using Bower
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, NPM has a package manager for the node modules and tools.
    Similarly, we need a package manager for the web as well. This manager is known
    as Bower, a tool that allows us to install all the libraries, frameworks, and
    packages that we need for our web project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing that we need to do before using Bower is to install it. We
    are going to use NPM and install it as a global package so that it is available
    for all our projects. So, open the terminal and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have Bower installed, we can use it to search and install the packages
    that we need. To search for packages, we can use the online tool available at
    [http://bower.io/search/](http://bower.io/search/), and search from the terminal
    by using the `bower search <keyword>` command.
  prefs: []
  type: TYPE_NORMAL
- en: Before we use Bower to install packages, we have to initialize the project so
    that we can save our dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Run `bower init` in the terminal, and go through the questions to generate the
    `bower.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have initialized Bower to install the packages, we have two options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first option is to run the installation command in the terminal, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Please take note that Bower installs the package in the current folder; so before
    you run the command, be sure that you are in the right folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Bower can use `install` for the following sources as package:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Registered package name `bower install bootstrap`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub shorthand `bower install twbs/bootstrap`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Git endpoint `bower install git://github.com/twbs/bootstrap.git`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: URL `bower install https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The second option is to go to the Bower settings page accessible by **Preferences**
    | **Languages & Frameworks** | **JavaScript** | **Bower,** and select the install
    icon ![Using Bower](img/00053.jpeg) from the **Dependencies** section:![Using
    Bower](img/00055.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the new screen that opens up, search and select the package that you want
    to install, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Bower](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In both cases, the terminal or the install dialog, if you want to save your
    dependencies or the development dependency in the `bower.json` file, you have
    to use the `--save` or `--saveDev` option in either the terminal command, or the
    option field from the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned how to work with package managers in WebStorm, you
    are going to learn how to install and use two of the popular task runners, Grunt
    and Gulp.
  prefs: []
  type: TYPE_NORMAL
- en: Using Grunt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grunt is a JavaScript test runner that was built to automate the repetitive
    tasks that we have to run during development. It can be used for tasks like minification,
    compilation, linting, unit testing, or any other tasks that your project needs.
    The Grunt ecosystem has hundreds of plugins that you can choose from.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before using Grunt, we need to install the CLI globally. This doesn''t install
    Grunt, but it will run the version of Grunt that was installed next to the configuration
    file, `Gruntfile.js`. In this way, we can have multiple versions of Grunt installed.
    To install the tool, we are going to use NPM once again, so, run the following
    command in the terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the next few steps, we are going to add Grunt to the project that we used
    in the first chapter. So, go ahead and open the project created in the first chapter,
    or get it from the Git repository at [https://github.com/srosca/youAreHere](https://github.com/srosca/youAreHere).
  prefs: []
  type: TYPE_NORMAL
- en: With the project open, the first thing we need to do is to initialize NPM so
    that we can download Grunt and the necessary plugins. In the terminal window,
    run `npm init` and answer the questions (you can leave them to the default values
    for the moment). This will create the necessary `package.json` file for saving
    our future dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to install Grunt for the current project; so, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we have to create the `Gruntfile.js` configuration file in the root folder
    of the project, and fill it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates a simple task that does a simple `jshint` on our `.js` code. Before
    we use this task, we also need to install the `jshint` Grunt plugin. So run the
    following command in the terminal to install and save it as a development dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can either run the task in the terminal by running Grunt, or use the
    Grunt tool window. This window can be found in the tools menu or in the side bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Grunt](img/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we double-click the task or select run from the context menu, the task will
    start and the output will be displayed in the run window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Grunt](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the preceding screenshot, we already have some errors in the
    output. So, before we fix them, let''s see how we can create a task that watches
    our files for any changes, and runs the `jshint` when they are changed. For that,
    we first need to install another Grunt plugin that does that. So in the terminal
    window, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After the plugin is installed, open the `Gruntfile.js` configuration file and
    load the `npm` task after the `jshint` one, by adding the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We have to set the `jshint` task force option to make it stop in case of an
    error, so add the following code to the option sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now after the `jshint` task in the `initConfig` block, add a new task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the newly created task to the default one so that `jshint` is run before
    the watch and we can see the results before we change anything:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are using the files defined for the `jshint` task. Your
    final code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in the **Grunt** window, if we click the refresh icon ![Using Grunt](img/00059.jpeg),
    we will see that the folder tree has changed, reflecting the newly added task:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Grunt](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we start the watch task, we will see that now, after running `jshint,` it
    will wait for changes in the files. So now we can change the `map.js` file to
    fix the errors by taking the content variable definition outside of the ''if''
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After we make the change, we will see that if we force a save by pressing *⌘*
    + *S* , Grunt will pick up on the change in file, and will rerun the `jshint`
    task.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that in WebStorm, the files are saved automatically when we change
    focus from the current window or by pressing *⌘* + *S*.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have automated our task with Grunt and WebStorm. Next, we
    are going to recreate this flow with Gulp, and see how we can work with it inside
    WebStorm
  prefs: []
  type: TYPE_NORMAL
- en: Using Gulp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gulp is another task runner for development tasks. It's similar to Grunt in
    terms of what it does, but it does that in a different way. It uses streams to
    link tasks by pasting the output of one to the next one as input; hence, it uses
    fewer I/O requests. One main advantage of this is that Gulp is a lot faster than
    Grunt. It also favors the code-over-configuration flavor of specifying the tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see it in action, we are going to recreate the Grunt flow into Gulp. Before
    we do that, we need to install it. Open the terminal and install Gulp globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install Gulp globally, so we can use it in all projects. We can still
    use a different Gulp version for projects by installing it locally. Run the following
    command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install Gulp locally in the project, and save it as a development
    dependency. In this way, we can have a different version of Gulp for the project
    that we are working for. Next, we need to install the plugins that we need in
    our project, So in the terminal, run the next command to install them as a development
    dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to create the `Gulpfile.js` to define the tasks for Gulp; so, go ahead
    and create it in the root folder. Once you have the file open, create the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, Gulp uses the code approach when defining a task. With the
    file open, we can access the Gulp window by selecting **Show Gulp Tasks** from
    the context menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Gulp](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open a window similar to Grunt that lists all the tasks available.
    From this window, we can start the watch tasks that will watch the files for changes
    and run `jshint` when there is a change. In the next screenshot, you can see the
    Gulp window and the output of the job:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Gulp](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there are some similarities between Gulp and Grunt in the final
    result, but also some differences in the way you build the tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we have created some simple automated tasks but this can be
    taken much further. You can create a task for everything that you need to automate
    in your development process.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned some of the modern flows of web development
    package managers and task runners. Now you will be able to quickly add new packages
    to your project, save them as dependencies, and create tasks for all your repetitive
    jobs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to see how WebStorm can help us build more
    complex applications with the help of frameworks like AngularJS, React, Express,
    and Meteor.
  prefs: []
  type: TYPE_NORMAL
