- en: Chapter 2. Building Your First PhoneGap Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In [Chapter 1](ch01.html "Chapter 1. Introduction to PhoneGap"), *Introduction
    to PhoneGap*, you learned about one of the problems PhoneGap is trying to solve—developing
    mobile applications consistently across multiple platforms—and how to set up your
    build environment. Next, you will delve into the internals of PhoneGap. First,
    you need to know how the project is structured and how the CLI tools are used.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the structure of a PhoneGap/Cordova application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about using the command-line tools of Cordova
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Know about Cordova lifecycle events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a sample example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get an overview of the browser's debugging tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review the debug workflow with mobile in mind
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to build and deploy the applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The structure of a PhoneGap application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After creating a new project, as explained in the previous chapter, you''ll
    see the following structure inside the project''s root folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`www`: This directory contains the source files of the application and so we
    will be playing a lot in this directory. It contains the `css`, `js`, and `img`
    subdirectories, where you can place the respective files. Apart from assets such
    as CSS, JavaScript, and images, we will also have application-related HTML files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`merges`: In this folder, you can add any platform-specific customization so
    you don''t have to modify the source files every time you work with a project.
    For example, we can use this feature to use a different font style on Android
    devices only. The platforms that you want to override will have a specific folder
    similar to the `www` folder having its own CSS, JS, HTML, and image contents:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding directory structure, the global application has the `app.js`
    file and in the `merges` directory, each platform has a separate `app.js` file.
    During the build process, the global `app.js` file will be replaced with the platform-specific
    `app.js` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`platforms`: This directory will have platform-dependent build files. For each
    platform that we add to the project, we can see a subdirectory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plugins`: This is the directory where you''ll find the plugins used in the
    project. Whenever we install new plugins, they will be added over here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hooks`: This directory can contain scripts that can be used to customize the
    Cordova/PhoneGap commands. This is really for advanced users where integrating
    with build systems and version control systems is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config.xml`: This configuration file will have all the values specific to
    the application, such as application name, package name, version number, and other
    such configurations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the PhoneGap CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use the Cordova command-line interface to initialize the project code,
    after which you can use various platforms' SDKs to develop them further. In the
    previous chapter, we discussed how to create a new project, add the required platforms,
    and build them using the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from creating a project by using the CLI tool, there are several other
    functions carried out by the CLI of Cordova. As the steps for installing the CLI
    are already covered, let's move on with advanced CLI usage. Once you create a
    project, use `cd` to move into it and you can execute a variety of project-level
    commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the list of the most used CLI commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`platform add <platform>`: This adds a platform as a build target for the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`platform [rm | remove] <platform>`: This removes a platform which was previously
    added to the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`platform [ls | list]`: This lists all platforms for which the project will
    build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`platform [up | update] <platform>`: This updates the Cordova version used
    for the given platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plugin [ls | list]`: This lists all the plugins included in the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plugin add <path-to-plugin> [<path-to-plugin> ...]`: This adds one (or more)
    plugins to the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plugin [rm | remove] <plugin-name> [<plugin-name> ...]`: This removes one
    (or more) plugins from the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plugin search [<keyword1> <keyword2> ...]`: This searches the plugin registry
    for plugins matching the list of keywords.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prepare [platform...]`: This copies files into the specified platforms, or
    all platforms. It is then ready for building by Eclipse, Xcode, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compile [platform...]`: This compiles the app into a binary for each targeted
    platform. With no parameters, it builds for all platforms; otherwise, it builds
    for the specified platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build [<platform> [<platform> [...]]]`: This is an alias for `cordova prepare`
    followed by `cordova compile`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`emulate [<platform> [<platform> [...]]]`: This launches emulators and deploys
    the app to them. With no parameters, it emulates the app for all the platforms
    added to the project; otherwise, it emulates the app for the specified platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serve [port]`: This launches a local web server allowing you to access each
    platform''s `www` directory on the given port (default `8000`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the preceding CLI commands are to be executed inside the project directory.
    Some of the example usages are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `help` command is a global command, which displays a help page with all
    the available commands and the syntax to use them. This command can be executed
    at any command window and not necessarily within the project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Cordova events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To maximize the benefits of using Cordova, you should know about all the events
    available. They are called **lifecycle events** because they are a part of your
    application throughout its lifecycle. These events are available by default for
    all applications and it's up to the developer to use them to implement better
    design. Although there are several events, we will discuss the most important
    and commonly used events.
  prefs: []
  type: TYPE_NORMAL
- en: The deviceready event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `deviceready` event is an important event of Cordova and you can''t live
    without it in the Cordova world. This event is triggered when Cordova has fully
    loaded and the application is ready to be used. We should know when the application
    is ready to be used and so this event comes to our rescue. This event should be
    the gateway to all the application''s functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To make the code easy to understand, we can define the function separately
    and bind it to the event, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The online event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `online` event is triggered when the device goes online with Internet connectivity.
    With this event, you can determine whether your application is currently in the
    online state or not. If your application requires the user to be online, this
    can be helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The offline event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you might have guessed, the `offline` event is the opposite of the `online`
    event. When the device goes offline, the application can capture it by using this
    event and necessary action can be taken by the developer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no accurate way of finding whether the device is currently in the **online**
    or **offline** state. These events work on the connection state and it can sometimes
    be wrong. Note that even though the device is connected to 2G, 3G, or Wi-Fi, it
    doesn't mean the device is online.
  prefs: []
  type: TYPE_NORMAL
- en: The pause event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `pause` event is triggered when the application is moved to the background,
    which is typically when the user switches to another application. You can use
    this event to notify users that they are being taken away from the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The resume event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the application is again brought to the foreground, the `resume` event
    is triggered. This usually happens after the `pause` event as the app should be
    in the background before coming to the foreground of the mobile platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The backbutton event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `backbutton` event is fired when the user presses the Back button on the
    mobile device. You can use this event to override the default actions that happen
    when the Back button is pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: There are several other events that are supported by external plugins. There
    is an exhaustive list of such plugins, which can be used by adding the appropriate
    plugins to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not all events are supported on all platforms. For example, the `backbutton`
    event is not supported on iOS devices. For the full list of supported platforms
    for each event, refer to the documentation at [http://cordova.apache.org/docs/en/edge/cordova_events_events.md.html#Events](http://cordova.apache.org/docs/en/edge/cordova_events_events.md.html#Events).
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – the Hello World example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PhoneGap is an intermediary layer that talks to the mobile device and the application;
    the app resides inside a browser, and, using the PhoneGap API, you can connect
    to phone features such as contacts and camera.
  prefs: []
  type: TYPE_NORMAL
- en: The UI layer of a PhoneGap application is a web browser view that takes up 100
    percent of the device's width and height; think of the UI layer as a browser.
    The UI layer is known as **WebView**. The WebView used by PhoneGap is the same
    one used by the native operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having discussed the basics of PhoneGap and the command-line tools, we will
    now create a simple application. This is not the typical Hello World example.
    With the already learned commands and configured environment with npm, let''s
    create a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With the completion of the preceding commands, we created a new project called
    `example1` and added Android platform support to the project. The directory structure
    is now this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: By default, the Cordova `create` script generates a skeletal web-based application
    whose home page is the project's `www/index.html` file. Edit this application
    however you want, but any initialization should be specified as part of the `deviceready`
    event handler, referenced by default from `www/js/index.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you open the `index.html` file present in the `www` directory, you will
    see HTML code. The `body` section will be similar to the code presented here.
    This is the default body content generated by the CLI tool for the project. It
    just shows a page with an image and some text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – the Hello World example](img/B03476_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For a complex application, the page would not be this simple. To start with,
    let''s modify the page to add some text. The modified code is shown here, which
    is a simple static HTML content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If any JavaScript external files are included at the top of the HTML `head`
    section, the browser stops parsing further until the file is downloaded. So it
    is recommended to add any JavaScript files or code chunks to the end of the `body`
    tag to decrease the wait time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today, most modern browsers support the `async` and `defer` attributes on scripts.
    These attributes tell the browser that it''s safe to continue parsing while the
    scripts are being downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We removed the code from the default project created and added our own content.
    Please note that we added the `deviceready` event listener. When the app gets
    loaded and ready for action, the event will show an alert box. The `deviceready`
    event should be the entry point for all our device-related action.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we build and emulate the sample project, we will see the following output
    in the emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/B03476_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WebKit debugging – Chrome, Safari, and Opera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WebKit-based browsers support various debugging tools. For example, when encountering
    JavaScript issues, you can launch Web Inspector or Developer Tools and start to
    explore logs and errors using the JavaScript console.
  prefs: []
  type: TYPE_NORMAL
- en: In Chrome, you can access the Developer Tools from the Customize menu (click
    on the Customize menu and then go to **Tools** | **Developer Tools**). The Customize
    menu is available in the top-right corner. When working with Safari, you first
    have to enable the Developer Tools by opening Safari's **Preferences** panel and
    then selecting the **Show Develop** menu in the menu bar checkbox. You can then
    access the inspector by choosing **Show Web Inspector** from the application's
    **Develop** menu.
  prefs: []
  type: TYPE_NORMAL
- en: Since the Web Inspector is part of the WebKit codebase, you can use the same
    shortcuts in Chrome and Safari to access the debugging tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows and Linux, press:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Ctrl* + *Shift* + *I* to open Developer Tools'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *Shift* + *J* to open Developer Tools and bring focus to the console'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *Shift* + *C* to toggle the Inspect Element mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On OS X, press:'
  prefs: []
  type: TYPE_NORMAL
- en: ⌥ ⌘ *I* (option + command + *I*) to open Developer Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ⌥ ⌘ *J* (option + command + *J*) to open Developer Tools and bring focus to
    the console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ⌥ ⌘ *C* (option + command + *C*) to toggle the Inspect Element mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When accessing Developer Tools, you can switch between tools by clicking on
    the respective icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Elements** panel allows you to see the webpage as the browser renders
    it. When using it, you can see the raw HTML and CSS, and explore the **Document
    Object Model** (**DOM**). By clicking on the **Elements** panel and moving around
    the source of the page, you can identify the HTML blocks and change the CSS selector''s
    value on-the-fly in order to experiment and fix possible rendering issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WebKit debugging – Chrome, Safari, and Opera](img/B03476_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Resources** panel lets you inspect resources that are loaded and available
    in the inspected page. It lets you interact with frame trees containing frame
    resources (HTML, JavaScript, CSS, images, fonts, and so on), HTML5 databases,
    local storage, cookies, and AppCache.
  prefs: []
  type: TYPE_NORMAL
- en: Using the **Network** panel, you can explore the components that a webpage or
    application requests from web servers, how long these requests take, and how much
    bandwidth is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the **Sources** panel, you can access all the resources loaded into the
    page. Use this panel to access the JavaScript, set breakpoints in the code, and
    explore the stack trace for each error. In order to set a breakpoint, select the
    script in which you want to set the breakpoint, and then click on the line number
    you are interested in. When the debug tool reaches the breakpoint, you can see
    what''s happening in your code by exploring the call stack (that is, the chain
    of functions and/or methods executed until this breakpoint) and the scope variables,
    and move in and out of functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WebKit debugging – Chrome, Safari, and Opera](img/B03476_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The JavaScript can be edited directly inside the debugger and you can see your
    changes on-the-fly by going back and forth using the navigation arrows. If you
    want the debugger to stop the code execution each time an exception is raised,
    use the **Pause all** button at the bottom left of the panel. For details about
    each of the functionalities, we recommend that you refer to the official docs
    at [https://developer.chrome.com/devtools/docs/javascript-debugging](https://developer.chrome.com/devtools/docs/javascript-debugging).
  prefs: []
  type: TYPE_NORMAL
- en: The **Timeline** panel lets you analyze the various WebKit behind-the-scenes
    activities such as how long the browser takes to handle DOM events, render page
    layouts, and handle events.
  prefs: []
  type: TYPE_NORMAL
- en: Once you press the Record button, you can start to inspect what's happening
    in the page you are currently viewing.
  prefs: []
  type: TYPE_NORMAL
- en: The Events and Frames icons (available in Chrome) allow you to access two different
    timeline data views, the first one is based on time and the second one is based
    on frames; you can zoom into each view by using the grey vertical controls at
    the top.
  prefs: []
  type: TYPE_NORMAL
- en: The Memory icon lets you explore the memory usage of a specific webpage; in
    order to be more accurate during the exploration, it's a good habit to force the
    garbage collector by pressing the Trash icon at the bottom of the panel. Garbage
    collection is a form of automatic memory management; the collector attempts to
    reclaim garbage or memory occupied by objects that are no longer being used by
    the browser's window.
  prefs: []
  type: TYPE_NORMAL
- en: '![WebKit debugging – Chrome, Safari, and Opera](img/B03476_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Profiles** tool helps you capture and analyze the performance of JavaScript
    scripts. For example, you can learn which functions take the most time to execute
    and then zoom in on the possible bottlenecks and understand exactly where to optimize.
  prefs: []
  type: TYPE_NORMAL
- en: The **Audits** panel is like having your own web optimization consultant sitting
    next to you. This panel can analyze a page as it loads and then provide suggestions
    and optimizations to decrease page load time and increase perceived responsiveness.
  prefs: []
  type: TYPE_NORMAL
- en: Gecko debugging – Firefox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firefox is based on the Gecko open source layout engine used in many applications
    developed by the Mozilla Foundation and the Mozilla Corporation. It offers good
    debugging tools and it's evolving quickly, including innovative projects such
    as Desktop WebRT, which lets you build a desktop web application at runtime that
    provides web apps with a native-like look and feel along with platform integration
    APIs on Windows, OS X, and other desktop platforms.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not developing apps for Android or iOS, you can use the Firefox layout
    engine, which offers some powerful development and debugging tools. Let's quickly
    explore how to use Firefox/Firebug to inspect and debug your app; as you will
    see, there are several similarities between the debug tools available in WebKit
    and Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: Firebug integrated with Firefox puts a great set of developer tools at your
    fingertips that rivals the features of the WebKit Web Inspector. In order to install
    the Firebug extension, you have to go to [https://www.getfirebug.com/downloads/](https://www.getfirebug.com/downloads/)
    and install the latest version. Once installed, you can open the extension by
    navigating to **Tools** | **Web Developer** | **Firebug**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Firebug toolbar gives you access to the HTML source code and CSS rules,
    lets you explore and debug JavaScript functions, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Gecko debugging – Firefox](img/B03476_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the debugger reaches a breakpoint, you can:'
  prefs: []
  type: TYPE_NORMAL
- en: Explore the variables defined in the block of code in which you set up the breakpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore the stack of function/method calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create watches in order to understand how the content of a variable changes
    during the execution of the code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Script console in Firebug is amazing. You can type your code in to the
    right window and then run it and see the results in the console by clicking on
    the **Run** button at the bottom right of the panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Gecko debugging – Firefox](img/B03476_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To filter logs, use the **All**, **Errors**, **Warnings**, **Info**, **Debug
    Info**, and **Cookies** selectors at the top of the window.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned previously, Firefox has three great native development tools:
    Scratchpad, Inspect, and Responsive Design View. You can access these tools through
    the menu bar by navigating to **Tools** | **Web Developer**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Think of Scratchpad as a text editor; you can use it to type and execute JavaScript.
    The difference between Scratchpad and the console is that it looks like a text
    editor and you can write all the code you want before executing it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Gecko debugging – Firefox](img/B03476_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Responsive Design View tool lets you change the resolution without resizing
    the browser. You can also use it to simulate device rotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Gecko debugging – Firefox](img/B03476_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Internet Explorer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Internet Explorer, at the time of writing, still has a wide install base; it's
    also the least favorite browser among developers. Virtually every developer has
    experienced serious issues when optimizing a webpage for IE; this is due to the
    fact that IE diverges from web standards in significant areas, but things are
    changing and the preview of IE 10 is getting good scores in various tests. Internet
    Explorer 11 is even better for developers.
  prefs: []
  type: TYPE_NORMAL
- en: Developer Tools were introduced in Internet Explorer 8, and updated with new
    functionality in Internet Explorer 9\. Developer Tools in Internet Explorer 10
    add Web Worker debugging and support for multiple script sources.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access Developer Tools by pressing *F12* or by navigating to **Tools**
    | **Developer Tools** from the menu bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer](img/B03476_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The IE 10 Developer Tools provide a similar user interface to the Developer
    Tools in Safari, Chrome, and Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The desktop browser is a great tool for hybrid mobile app development. The majority
    of your mobile development can be previewed and debugged in your desktop browser.
    Because PhoneGap leverages open web standards (HTML, CSS, and JavaScript), you
    can start work in a desktop browser and then move on to a native project once
    the functionality is fleshed out. This way, it's possible to speed up our development
    cycles and spend more time implementing core functionality. You can use the latest
    versions of any of the major desktop browsers such as Internet Explorer (IE),
    Google Chrome, Firefox, Safari, or Opera to get started with a PhoneGap app. All
    of these browsers have Developer Tools for logging and debugging your code.
  prefs: []
  type: TYPE_NORMAL
- en: New developers tend to prefer WebKit-based browsers; at the time of writing,
    Chrome has the largest install base market share followed by Firefox and Internet
    Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Chrome also offers a technology known as **Google Packaged Apps** to build native
    apps based on web standards. More information about it is available at [https://developer.chrome.com/apps/about_apps](https://developer.chrome.com/apps/about_apps).
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen, each browser offers different debugging tools and each tool
    has its pros and cons. Regardless of which tool you use, however, your debugging
    workflow is the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'When investigating a specific problem, you will usually follow this process:'
  prefs: []
  type: TYPE_NORMAL
- en: Find the relevant code in the debugger's code view pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set breakpoint(s) where you think interesting things may occur.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script again by reloading the page in the browser if it's an inline
    script, or by clicking on a button if it's an event handler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait until the debugger pauses execution and makes it possible to step through
    the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Investigate the values of variables. For example, look for variables that are
    undefined when they should contain a value, or return `false` when you expect
    them to return `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If necessary, you can use the console to evaluate code or change variables for
    testing. You can also execute complex JavaScript code and test a solution before
    implementing it.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying the problem by learning which piece of code or input caused the
    error conditions and isolating it is a suitable approach. However, with mobile
    apps, things are not always so straightforward. The advantage of PhoneGap is that
    you can develop and debug in a common environment such as the browser, but keep
    in mind that a mobile app has to be tested and debugged on the target devices
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although it''s not a neat way of debugging, you can use console log messages
    to debug. These log messages will be printed in the console of the browser development
    tool. A sample use of the JavaScript code is provided here for reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'There are several other debugging tools for PhoneGap/Cordova. While a few of
    them are free services, some of them are paid services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ripple Emulator**: [http://emulate.phonegap.com/](http://emulate.phonegap.com/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**GapDebug**: [https://www.genuitec.com/products/gapdebug/](https://www.genuitec.com/products/gapdebug/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**jsHybugger**: [https://www.jshybugger.com/](https://www.jshybugger.com/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Weinre**: [http://people.apache.org/~pmuellr/weinre-docs/latest/](http://people.apache.org/~pmuellr/weinre-docs/latest/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Adobe** **Edge** **Inspect**: [https://creative.adobe.com/products/inspect](https://creative.adobe.com/products/inspect)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chrome**: [https://developer.chrome.com/devtools/docs/remote-debugging](https://developer.chrome.com/devtools/docs/remote-debugging)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building and deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you are done with your development, you might want to test the application
    on a real mobile device. Each mobile platform will have a different kind of binary
    format for the applications. For example, Android application files will have
    the `.apk` extension. Similarly, each platform will have a different format for
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: To create binary files for all platforms from your source code, you need to
    build the application either locally or by using a cloud service.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are building the application locally, you need to run the command-line
    interface, and the required platform''s SDK should be installed on the machine.
    The CLI supports the following combinations on each operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Windows | Linux | Mac |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Amazon Fire OSAndroidBlackBerry 10Windows Phone 7Windows Phone 8Windows 8Firefox
    OS | Amazon Fire OSAndroidBlackBerry 10Firefox OS | iOS (only on Mac) |'
  prefs: []
  type: TYPE_TB
- en: This table makes it clear that you can't build an iOS application on a Windows
    machine or a Windows 8 application on a Mac machine. You will need an appropriate
    machine and the required SDKs installed on the machine.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you have all the required SDKs installed and configured, to build the
    application for each of the platform, you can use the **build** tool of CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to build the project for all the platforms added
    to the project. If you added multiple platforms to the project using the `platform
    add` command, the build will happen for all platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to build the application only for a particular platform, say Android
    or iOS, you can target them individually with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `build` command is the shortcut to prepare and compile the project. You
    can also build a project in two steps, as shown here. The following set of commands
    is the equivalent of the `build` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Once the build process is completed, the platform-specific app will be available
    within the project's `platforms` subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: Having seen the manual way of building an application, now let's find out about
    PhoneGap Build. If you want to build and generate application binary files for
    all platforms, you need to install the individual SDKs on your machine, which
    is not practically possible. That's where we find the PhoneGap Build process handy.
    PhoneGap Build is an online service for creating binary files for all mobile platforms
    based on a single source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'It takes the source code and creates the app file for each of the platforms
    that you require. It''s as simple as uploading your Cordova/PhoneGap project and
    the cloud service does the rest. The overall functionality of the PhoneGap Build
    process is provided in the following diagram, which is available at [https://build.phonegap.com](https://build.phonegap.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building and deployment](img/B03476_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To use PhoneGap Build, you have to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Complete your PhoneGap/Cordova project and ensure you have all the functionalities
    included in the app as per your design.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PhoneGap Build only requires the contents (HTML, CSS, JavaScript, and images)
    of your project's `assets` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have any `phonegap.js` or `cordova.js` files included in your assets,
    remove the file as the PhoneGap Build process will automatically inject the required
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can upload the project to the PhoneGap Build process and you can see the
    magic happen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can easily download all the application builds for all platforms with a
    single click:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building and deployment](img/B03476_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: More details about the PhoneGap Build process can be obtained at [http://docs.build.phonegap.com/en_US/](http://docs.build.phonegap.com/en_US/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After providing an overview of several tools and some debugging techniques,
    this chapter prepared you to move to the next step, creating and building a multi-platform
    app with Apache Cordova and its PhoneGap distribution. You also learned the usage
    of various command-line tools and Cordova events. In the next chapter, you'll
    gain information about various mobile frameworks and templates to start off your
    mobile development.
  prefs: []
  type: TYPE_NORMAL
