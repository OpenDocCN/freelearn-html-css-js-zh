["```js\npaths:\n  /login:\n    post:\n      requestBody:\n        description: User Credentials\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n                  format: email\n                digest:\n                  type: string\n                  pattern: ^\\\\$2[aby]?\\\\$\\\\d{1,2}\\\\$[.\\\\/A-Za-z0-9]{53}$\n      responses:\n        '200':\n          $ref: '#/components/responses/LoginSuccess'\n        '400':\n          $ref: '#/components/responses/ErrorBadRequest'\n        '401':\n          $ref: '#/components/responses/ErrorUnauthorized'\n        '500':\n          $ref: '#/components/responses/ErrorInternalServer'\n```", "```js\n$ mkdir -p spec/openapi\n$ touch spec/openapi/hobnob.yaml\n```", "```js\n# YAML\ntitle: Hobnob\ndescription: Simple publishing platform\n\n# JSON\n{\n  \"title\": \"Hobnob\",\n  \"description\": \"Simple publishing platform\"\n}\n```", "```js\n# YAML\ninfo:\n  title: Hobnob\n  description: Professional publishing platform\n\n# JSON\n{\n  \"info\": {\n    \"title\": \"Hobnob\",\n    \"description\": \"Professional publishing platform\"\n  }\n}\n```", "```js\n# YAML\nproduces:\n- application/json\n- text/html\n\n# JSON\n{\n  \"produces\": [\n    \"application/json\",\n    \"text/html\"\n  ]\n}\n```", "```js\n# YAML\ninfo:\n  title: Hobnob\n  description: |\n    The professional user directory.\n\n    Find like-mind professionals on Hobnob!\n\n# JSON\n{\n  \"info\": {\n    \"title\": \"Hobnob\",\n    \"description\": \"The professional user directory.\\n\\nFind like-mind professionals on Hobnob!\\n\"\n  }\n}\n```", "```js\n# YAML\ncontact:\n  name: >\n    Barnaby Marmaduke Aloysius Benjy Cobweb Dartagnan Egbert Felix Gaspar \n    Humbert Ignatius Jayden Kasper Leroy Maximilian Neddy Obiajulu Pepin \n    Quilliam Rosencrantz Sexton Teddy Upwood Vivatma Wayland Xylon Yardley \n    Zachary Usansky\n\n# JSON\n{\n  \"contact\": {\n    \"name\": \"Barnaby Marmaduke Aloysius Benjy Cobweb Dartagnan Egbert Felix Gaspar Humbert Ignatius Jayden Kasper Leroy Maximilian Neddy Obiajulu Pepin Quilliam Rosencrantz Sexton Teddy Upwood Vivatma Wayland\n```", "```js\n Xylon Yardley Zachary Usansky\\n\"\n  }\n}\n```", "```js\npaths:\n  /users:  # Path\n    post:  # Operation\n      ...  # Operation Object\n```", "```js\nopenapi: \"3.0.0\"\ninfo:\n  title: Hobnob User Directory\n  version: \"1.0.0\"\n  contact:\n    name: Support\n    email: dan@danyll.com\nservers:\n  - url: http://localhost:8080/\n    description: Local Development Server\ntags:\n  - name: Authentication\n    description: Authentication-related endpoints\n  - name: Users\n    description: User-related endpoints\n  - name: Profile\n    description: Profile-related endpoints\n```", "```js\npaths:\n  /salt:\n    get:\n```", "```js\npaths:\n  /salt:\n    get:\n      tags:\n        - Authentication\n      summary: Returns the salt of a user based on the user's email\n      description: Even if there are no users with the specified email, this endpoint will still return with a salt. This is to prevent the API leaking information about which email addresses are used to register on the platform.\n```", "```js\npaths:\n  /salt:\n    get:\n      ...\n      parameters:\n      - name: email\n        in: query\n        description: The email of the user to retrieve the salt for\n        required: true\n        schema:\n          type: string\n          format: email\n```", "```js\npaths:\n  /salt:\n    get:\n      ...\n      responses:\n        '200':\n          description: Salt Retrieved\n          content:\n            text/plain:\n              schema:\n                type: string\n        '400':\n          description: Email query parameter not specified\n          content:\n            application/json:\n              schema:\n                properties:\n                  message:\n                    description: Error message\n                    type: string\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                properties:\n                  message:\n                    description: Error message\n                    type: string\n```", "```js\npaths:\n  /users:\n    post:\n      tags:\n        - Users\n      summary: Creates a New User\n      responses:\n        '201':\n          description: Created\n          content:\n            text/plain:\n              schema:\n                type: string\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                properties:\n                  message:\n                    description: Error message\n                    type: string\n        '415':\n          description: Unsupported Media Type\n          content:\n            application/json:\n              schema:\n                properties:\n                  message:\n                    description: Error message\n                    type: string\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                properties:\n                  message:\n                    description: Error message\n                    type: string\n```", "```js\npaths:\n  /users:\n    post:\n      ...\n      requestBody:\n        description: The New User object\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n                  format: email\n                digest:\n                  type: string\n                  pattern: ^\\\\$2[aby]?\\\\$\\\\d{1,2}\\\\$[.\\\\/A-Za-z0-9]{53}$\n                profile:\n                  type: object\n                  properties:\n                    bio:\n                      type: string\n                    summary:\n                      type: string\n                    name:\n                      type: object\n                      properties:\n                        first:\n                          type: string\n                        last:\n                          type: string\n                        middle:\n                          type: string\n                  additionalProperties: false\n              additionalProperties: false\n              required:\n               - email\n               - digest\n            example:\n              email: e@ma.il\n              digest: $2a$10$enCaroMp4gMvEmvCe4EuP.0d5FZ6yc0yUuSJ0pQTt4EO5MXvonUTm\n              profile:\n                bio: Daniel is a species of JavaScript developer that is commonly found in Hong Kong and London. In 2015, Daniel opened his own digital agency called Brew, which specialized in the Meteor framework.\n                summary: JavaScript Developer\n                name:\n                  first: Daniel\n                  last: Li\n```", "```js\ncomponents:\n  schemas:\n    Profile:\n      title: User Profile\n      type: object\n      properties:\n        bio:\n          type: string\n        summary:\n          type: string\n        name:\n          type: object\n          properties:\n            first:\n              type: string\n            middle:\n              type: string\n            last:\n              type: string\n      additionalProperties: false\n```", "```js\nrequestBody:\n  description: The New User object\n  required: true\n  content:\n    application/json:\n      schema:\n        properties:\n          email:\n            type: string\n            format: email\n          digest:\n            type: string\n            pattern: ^\\\\$2[aby]?\\\\$\\\\d{1,2}\\\\$[.\\\\/A-Za-z0-9]{53}$\n          profile:\n $ref: '#/components/schemas/Profile'\n        additionalProperties: false\n        required:\n          - email\n          - digest\n```", "```js\npaths:\n  /salt:\n    get:\n      summary: ...\n      description: ...\n      parameters: ...\n      responses:\n        '200':\n          description: Salt Retrieved\n          content:\n            text/plain:\n              schema:\n                type: string\n        ...\n```", "```js\ncomponents:\n  schemas:\n    Profile:\n      title: User Profile\n      ...\n  responses:\n SaltRetrieved:\n description: Salt Retrieved\n content:\n text/plain:\n schema:\n type: string\n```", "```js\npaths:\n  /salt:\n    get:\n      summary: ...\n      description: ...\n      parameters: ...\n      responses:\n        '200':\n          $ref: '#/components/responses/SaltRetrieved'\n        ...\n```", "```js\n...\ncomponents:\n  schemas:\n    ...\n    UserLimited:\n title: Retrieve User Response Payload Schema\n description: An User object with the digest field removed\n properties:\n email:\n type: string\n format: email\n profile:\n $ref: '#/components/schemas/Profile'\n additionalProperties: false\n required:\n - email\n - profile\n      ...\n  responses:\n    ...\n    UserRetrieved:\n description: User Retrieved\n content:\n application/json:\n schema:\n $ref: '#/components/schemas/UserLimited'\n    ...\n    ErrorNotFound:\n description: Not Found\n content:\n application/json:\n schema:\n $ref: '#/components/schemas/Error'\npaths:\n  ...\n  /users/{userId}:\n get:\n tags:\n - Users\n summary: Retrieves details of a single User\n parameters:\n - name: userId\n in: path\n description: ID of the User to retrieve\n required: true\n schema:\n type: string\n responses:\n '200':\n $ref: '#/components/responses/UserRetrieved'\n '400':\n $ref: '#/components/responses/ErrorBadRequest'\n '404':\n $ref: '#/components/responses/ErrorNotFound'\n '500':\n $ref: '#/components/responses/ErrorInternalServer'\n```", "```js\n...\ncomponents:\n ...\n responses:\n    Success:\n description: Success\n    ...\n    ErrorUnauthorized:\n description: Unauthorized\n content:\n application/json:\n schema:\n $ref: '#/components/schemas/Error'\n    ...\n  securitySchemes:\n token:\n type: http\n scheme: bearer\n bearerFormat: JWT\npaths:\n  /users/{userId}/profile:\n put:\n tags:\n - Profile\n summary: Replaces the Profile of the User with a new Profile\n security:\n - token: []\n parameters:\n - name: userId\n in: path\n description: ID of the User\n required: true\n schema:\n type: string\n requestBody:\n description: The New Profile object\n required: true\n content:\n application/json:\n schema:\n $ref: \"#/components/schemas/Profile\"\n responses:\n '200':\n $ref: '#/components/responses/Success'\n '400':\n $ref: '#/components/responses/ErrorBadRequest'\n '401':\n $ref: '#/components/responses/ErrorUnauthorized'\n '404':\n $ref: '#/components/responses/ErrorNotFound'\n '415':\n $ref: '#/components/responses/ErrorUnsupportedMediaType'\n '500':\n $ref: '#/components/responses/ErrorInternalServer'\n```", "```js\n$ git submodule add https://github.com/swagger-api/swagger-ui docs\n```", "```js\n$ git submodule update --init --recursive\n```", "```js\n\"docs:update\": \"git submodule update --init --recursive\"\n```", "```js\n$ yarn add http-server --dev\n```", "```js\n#!/usr/bin/env bash\n\nsource <(dotenv-export | sed 's/\\\\n/\\n/g')\nyarn run docs:update\nhttp-server docs/dist/ -p $SWAGGER_UI_PORT\n```", "```js\nSWAGGER_UI_PROTOCOL=http\nSWAGGER_UI_HOSTNAME=127.0.0.1\nSWAGGER_UI_PORT=8000\n```", "```js\n\"docs:serve\": \"dotenv -e envs/.env ./scripts/swagger-ui/serve.sh\",\n```", "```js\n\"dev:serve\": \"yarn run build && cp spec/openapi/hobnob.yaml dist/openapi.yaml && dotenv -e envs/.env node dist/index.js\",\n\"serve\": \"yarn run build && cp spec/openapi/hobnob.yaml dist/openapi.yaml && dotenv -e envs/.env pm2 start dist/index.js\",\n```", "```js\nimport fs from 'fs';\n\n...\n\napp.get('/openapi.yaml', (req, res, next) => {\n  fs.readFile(`${__dirname}/openapi.yaml`, (err, file) => {\n    if (err) {\n      res.status(500);\n      res.end();\n      return next();\n    }\n    res.write(file);\n    res.end();\n    return next();\n  });\n});\n```", "```js\nfetch('personal.bank.io/api/transfer', {\n  method : \"POST\",\n  body : JSON.stringify({\n    amount : '999999',\n    to: 'malicious.io'\n  })\n})\n```", "```js\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  next();\n});\n```", "```js\nres.header(\"Access-Control-Allow-Origin\", \"http://127.0.0.1:8000\");\n```", "```js\nres.header('Access-Control-Allow-Origin', `${process.env.SWAGGER_UI_PROTOCOL}://${process.env.SWAGGER_UI_HOSTNAME}:${process.env.SWAGGER_UI_PORT}`);\n```", "```js\nSERVER_EXTERNAL_PROTOCOL=http\nSERVER_EXTERNAL_HOSTNAME=api.hobnob.jenkins\nSERVER_EXTERNAL_PORT=80\n```", "```js\n#!/usr/bin/env bash\n\nsed -i \"s!https://petstore.swagger.io/v2/swagger.json!$SERVER_EXTERNAL_PROTOCOL://$SERVER_EXTERNAL_HOSTNAME:$SERVER_EXTERNAL_PORT/openapi.yaml!g\" docs/dist/index.html\n```", "```js\n\"docs:format\": \"dotenv -e envs/.env ./scripts/swagger-ui/format.sh\",\n```", "```js\n\"docs:update\": \"git submodule foreach --recursive git reset --hard && git submodule update --init --recursive && yarn run docs:format\",\n```", "```js\n<style>.topbar { display: none; }</style>\n```", "```js\nsed -i '/<\\/head>/i \\\n<style>.topbar { display: none; }<\\/style>' docs/dist/index.html\n```", "```js\n$ ssh hobnob@142.93.241.63\nhobnob@hobnob:$ cd projects/hobnob/\nhobnob@hobnob:$ git fetch --all\nhobnob@hobnob:$ git reset --hard origin/master\nhobnob@hobnob:$ yarn\n```", "```js\nSWAGGER_UI_PROTOCOL=http\nSWAGGER_UI_HOSTNAME=docs.hobnob.social\nSWAGGER_UI_PORT=80\nPRIVATE_KEY=\"...\"\nPUBLIC_KEY=\"...\"\n```", "```js\nhobnob@hobnob:$ yarn run docs:update\nhobnob@hobnob:$ sudo chown -R nginx:nginx ./docs/*\n```", "```js\nhobnob@hobnob:$ npx pm2 delete 0\nhobnob@hobnob:$ yarn run serve\n```", "```js\nserver {\n    listen 80;\n    server_name docs.hobnob.social;\n    root /home/hobnob/projects/hobnob/docs/dist;\n    location / {\n        index index.html;\n    }\n}\n```", "```js\nhobnob@hobnob:$ sudo ln -s /etc/nginx/sites-available/docs.hobnob.social /etc/nginx/sites-enabled/\nhobnob@hobnob:$ sudo systemctl restart nginx.service\n```"]