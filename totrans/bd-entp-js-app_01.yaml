- en: The Importance of Good Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优质代码的重要性
- en: One thing that separates a good company from a great company is their processes.
    In a great company, everyone understands what is expected of them, what they can
    expect from others, the vision of the company, and the philosophy of the workplace.
    With that foundation, the staff has the freedom to be creative and innovate, working
    within the processes and boundaries set by the company.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 区分一家好公司与一家伟大公司的因素之一就是他们的流程。在一家伟大的公司中，每个人都清楚自己应该做什么，可以期待别人做什么，公司的愿景以及工作场所的哲学。有了这个基础，员工就有自由发挥创造力和创新，在公司设定的流程和边界内工作。
- en: When there are no processes, there is chaos. Developers wouldn't know what to
    expect— are the requirements and specifications documented? Where can I find them?
    They also wouldn't understand what's expected of them—do I need to write tests
    or is this a **Proof of Concept** (**PoC**)? What edge cases should I test for?
    Without processes, managers and developers will waste time chasing requirements
    and clarifications, giving them less time to be creative and innovative, and thus
    excel at their jobs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有流程时，就会陷入混乱。开发者不知道该期待什么——需求和要求是否已经文档化？我能在哪里找到它们？他们也不会理解对他们的期望——我需要编写测试吗？这是一个**概念验证**（**PoC**）吗？我应该测试哪些边缘情况？没有流程，经理和开发者将浪费时间去追逐需求和澄清，这让他们更少的时间去发挥创造力和创新，从而在自己的工作中表现出色。
- en: Ultimately, a chaotic environment leads to a product that's lower in quality.
    On the technical side, there'll be more **technical debt**—bugs and inefficiencies
    that need to be fixed later. The product team will suffer too, as fewer features
    would be delivered.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，混乱的环境会导致产品质量降低。在技术方面，将会有更多的**技术债务**——需要以后修复的bug和不效率。产品团队也会受到影响，因为能交付的功能会更少。
- en: 'For these companies, the best way to improve is simply to start implementing
    robust processes on the technical level by implementing **Test-Driven Development**
    (**TDD**), and on the management level by adopting **Agile** principles and/or
    implementing the **Scrum** framework. In this chapter, we will focus on the technical
    aspect—implementing TDD. Specifically, we will cover the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些公司来说，最好的改进方式就是通过在技术层面上实施**测试驱动开发**（**TDD**），以及在管理层面上采用**敏捷**原则和/或实施**Scrum**框架来简单地开始实施稳健的过程。在本章中，我们将重点关注技术方面——实施TDD。具体来说，我们将涵盖以下内容：
- en: What is technical debt?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术债务是什么？
- en: What are the causes and consequences of technical debt?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术债务的原因和后果是什么？
- en: Reducing technical debt by implementing TDD
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过实施TDD减少技术债务
- en: Technical debt
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术债务
- en: 'One of the most popular questions on the Software Engineering Stack Exchange
    ([https://softwareengineering.stackexchange.com/](https://softwareengineering.stackexchange.com/)) website
    is this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程Stack Exchange（[https://softwareengineering.stackexchange.com/](https://softwareengineering.stackexchange.com/)）网站上最受欢迎的问题之一是：
- en: '*"*I''m doing 90% maintenance and 10% development, is this normal?"'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*“我90%的时间在做维护，10%的时间在做开发，这是正常的吗？”*'
- en: Whilst this should never be regarded as normal, for many developers, it is their
    reality. So, why do so many projects end up in an unmaintainable state? After
    all, every project starts off with a blank slate.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这永远不应该被视为正常，但对于许多开发者来说，这是他们的现实。那么，为什么这么多项目最终会陷入不可维护的状态呢？毕竟，每个项目都是从一张白纸开始的。
- en: Some may say that it's because most programmers are inherently lazy, but most
    also take pride in their work, and value quality over speed. Others may say it's
    because the developers are incompetent, but even companies that employ very talented
    technical teams fall victim to this.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人可能会说这是因为大多数程序员天生懒惰，但大多数人也都为自己的工作感到自豪，并重视质量胜过速度。其他人可能会说这是因为开发者能力不足，但即使是雇佣了非常才华横溢的技术团队的公司也会成为受害者。
- en: My theory is that during the lengthy development process, it's too easy to make
    little concessions along the way, where code quality is sacrificed to save other
    resources, usually time. For instance, you may stop writing tests to meet a deadline,
    or forgo refactoring because your manager assures you that the project is just
    a PoC or **Minimum Viable Product** (**MVP**). Little by little, these small concessions
    build up. Oftentimes, the deadlines become ever more unreasonable, and the MVP
    becomes the company's flagship product. That's how we end up with so many unmaintainable
    projects in this world.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我的理论是，在漫长的开发过程中，很容易在过程中做出小的让步，牺牲代码质量以节省其他资源，通常是时间。例如，你可能为了赶工期而停止编写测试，或者因为你的经理向你保证项目只是一个原型或**最小可行产品**（**MVP**）而放弃重构。这些小的让步逐渐积累。很多时候，截止日期变得越来越不合理，而MVP变成了公司的旗舰产品。这就是我们在这个世界上有这么多难以维护的项目的原因。
- en: '"Most software today is very much like an Egyptian pyramid with millions of
    bricks piled on top of each other, with no structural integrity, but just done
    by brute force and thousands of slaves."'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “今天的大多数软件非常像一座埃及金字塔，上面堆叠着数百万块砖头，没有结构完整性，只是通过 brute force 和成千上万的奴隶完成的。”
- en: – Alan Kay, creator of Smalltalk
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: – Alan Kay，Smalltalk的创造者
- en: These compromises, although small at the time, have a knock-on effect on the code
    that is written afterward. This cumulative effect is described using the metaphor
    of *technical debt*, which plays on the analogy of financial debt, where you incur
    compound interest on your existing debts.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些妥协，虽然当时看起来很小，但对之后编写的代码有连锁反应。这种累积效应被描述为*技术债务*的隐喻，它利用了金融债务的类比，其中你在现有债务上产生复利。
- en: What is technical debt?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是技术债务？
- en: 'Technical debt is a metaphor created by Ward Cunningham, an American computer
    programmer:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 技术债务是由美国计算机程序员Ward Cunningham创造的一个隐喻：
- en: '"A little debt speeds development so long as it is paid back promptly with
    a rewrite... The danger occurs when the debt is not repaid. Every minute spent
    on not-quite-right code counts as interest on that debt."'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: “一点债务可以加快开发速度，只要它能及时通过重构偿还……危险在于债务没有偿还。在不太正确的代码上花费的每一分钟都算作债务的利息。”
- en: For example, if you want to start your own business, but do not have enough
    personal savings, you may opt to take out a loan with a bank. In this case, you
    incur a small debt now in order to acquire a potentially larger reward later, when
    your business generates a profit.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想开始自己的生意，但没有足够的个人储蓄，你可能会选择向银行贷款。在这种情况下，你现在承担了一小笔债务，以便在将来你的生意盈利时获得更大的回报。
- en: Likewise, you may decide to incur some technical debt in order to capture the **First-Mover
    Advantage** (**FMA**) to ship a feature before your competitors go to market.
    The debt comes in the form of poorly-written code; for instance, you may write
    everything into a single file (colloquially called a kitchen sink) with no modularization
    or tests.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可能会决定承担一些技术债务，以抓住**先发优势**（**FMA**），在竞争对手进入市场之前推出一个功能。债务的形式是编写不良的代码；例如，你可能会把所有内容都写在一个文件中（俗称大杂烩），没有任何模块化或测试。
- en: In both cases, the debt is incurred with the expectation that it will be repaid,
    *with interest*, at a later date.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，债务都是基于预期将来会以利息的形式偿还。
- en: For development, repayment comes in the form of **refactoring**. This is where
    time is re-invested to revise the poorly-written code back to an acceptable standard.
    As this requires time and manpower, by incurring the technical debt, you are,
    in essence, trading a moderate increase in development speed now for a significant
    decrease later.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发来说，偿还债务的形式是**重构**。这是将编写不良的代码修订到可接受标准的过程，需要重新投资时间和人力。通过承担技术债务，你实际上是在现在以适度的开发速度提升换取未来的显著下降。
- en: The problem arises when the debt is not repaid sufficiently quickly. At some
    point, the amount of maintenance done on the project is so great that no more
    features can be added, and the business may opt for a complete rewrite instead.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于债务没有足够快地偿还。在某个时候，项目维护的工作量如此之大，以至于无法添加更多功能，企业可能会选择进行完全的重写。
- en: Causes of technical debt
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术债务的原因
- en: 'Before we discuss how to tackle technical debt, let''s first examine some of
    its most common causes:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论如何应对技术债务之前，让我们首先考察一些最常见的原因：
- en: '**Lack of talent**: Inexperienced developers may not follow best practices
    and write unclean code.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏人才**：缺乏经验的开发者可能不会遵循最佳实践，编写不干净的代码。'
- en: '**Lack of time**: Setting unreasonable deadlines, or adding new features without
    allotting additional time, means developers do not have enough time to follow
    proper processes of writing tests, conducting code reviews, and so on.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间不足**：设定不合理的截止日期，或者在不分配额外时间的情况下添加新功能，意味着开发人员没有足够的时间遵循编写测试、进行代码审查等正确流程。'
- en: '**Lack of morale**: We should not overlook the human aspect of development.
    If requirements change all the time, or developers are required to work overtime,
    then they''re not likely to produce good work.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**士气低落**：我们不应忽视开发的人类方面。如果需求经常变化，或者要求开发人员加班，那么他们不太可能产出优质的工作。'
- en: All of these causes can easily be mitigated. The problem of inexperienced developers
    can be tackled through mentoring, code reviews, and general training. The problem
    of morale can be tempered by providing better working environments. The issue
    of lack of time can be remedied by reducing the scope of the project to something
    more achievable; this may mean pushing non-essential features to a subsequent
    phase. Besides this, the business can employ more staff and/or outsource the development
    of well-defined modules to external contractors.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些原因都很容易得到缓解。缺乏经验的开发人员问题可以通过导师制、代码审查和一般培训来解决。通过提供更好的工作环境，可以缓解士气问题。缺乏时间的问题可以通过将项目范围缩小到更可实现的目标来解决；这可能意味着将非必要功能推迟到后续阶段。除此之外，企业可以雇佣更多员工和/或外包定义明确的模块的开发给外部承包商。
- en: The real problem lies in the reluctance to tackle technical debt, since the
    biggest cause of technical debt is the *existing technical debt*. Any new code
    that depends on the bad code will very soon become part of the technical debt
    and incur further debt down the line.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的问题在于不愿意解决技术债务，因为技术债务的最大原因是**现有的技术债务**。任何依赖于糟糕代码的新代码很快就会成为技术债务的一部分，并产生后续的债务。
- en: The debt spiral
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 债务螺旋
- en: When you talk with product managers or business owners, most of them understand
    the concept of technical debt; however, most managers or business owners I've
    encountered also tend to overestimate the short-term returns and underestimate
    the long-term consequences. They believe that technical debt works like personal
    loans issued by banks, with an interest rate of around 3% **Annual Percentage
    Rate** (**APR**); in reality, it works more like payday loans that charge you
    1500% APR.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当你与产品经理或企业主交谈时，他们中的大多数都理解技术债务的概念；然而，我遇到的大多数经理或企业主也倾向于高估短期回报并低估长期后果。他们认为技术债务就像银行发放的个人贷款，年利率约为3%的**年化百分比率**（**APR**）；实际上，它更像是一种收取1500%
    APR的工资日贷款。
- en: In fact, the debt metaphor isn't completely accurate. This is because, unlike
    a formalized loan, when you incur technical debt, you don't actually know the
    interest rate or repayment period beforehand.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，债务隐喻并不完全准确。这是因为，与正式的贷款不同，当你产生技术债务时，你实际上不知道利率或还款期限。
- en: The debt may require one week of refactoring time that you can delay indefinitely,
    or it may cost you a few months' time just a few days down the line. It is very
    hard to predict and quantify the effect of technical debt.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 技术债务可能需要一周的重构时间，你可以无限期地推迟，或者它可能在你几天后花费你几个月的时间。技术债务的影响很难预测和量化。
- en: Furthermore, there's no guarantee that by incurring the debt, the current set
    of features are actually going to be finished earlier. Often, the consequences
    of technical debt are close to immediate; therefore, by rushing, it may actually
    slow you down within the same development cycle. It is very hard to predict and
    quantify the short-term benefits of incurring technical debt. In that sense, incurring
    technical debt resembles more of a gamble than a loan.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，没有保证通过产生债务，当前的一组功能实际上会更快完成。通常，技术债务的后果几乎是立即的；因此，通过匆忙，它实际上可能会在同一个开发周期内减慢你的进度。技术债务短期收益的预测和量化非常困难。从这个意义上说，产生技术债务更像是赌博而不是贷款。
- en: Consequences of technical debt
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术债务的后果
- en: 'Next, let''s examine the consequences of technical debt. Some are obvious:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来探讨技术债务的后果。其中一些是显而易见的：
- en: Development speed will slow down
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发速度将减慢
- en: More manpower (and thus money) and time will need to be spent to implement the
    same set of features
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要更多的人力（以及因此的钱）和时间来实现同一组功能
- en: More bugs, which consequently means poorer user experience, and more personnel
    required for customer service
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多的错误，这进而意味着用户体验更差，以及需要更多人员进行客户服务
- en: On the other hand, the human cost of technical debt is often overlooked; so
    let's spend some time discussing it here.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，技术债务的人为成本往往被忽视；因此，让我们在这里花些时间讨论它。
- en: Technical debt leads to low morale
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术债务导致士气低落
- en: Most developers want to work on **greenfield** projects where they can develop
    new features, rather than to inherit legacy **brownfield** projects riddled with
    bugs and technical debt. This will likely reduce the morale of the developers.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发者都想在可以开发新功能的**绿色地带**项目中工作，而不是继承充满错误和技术债务的遗留**棕色地带**项目。这可能会降低开发者的士气。
- en: In some cases, those working on brownfield projects may even show animosity
    toward their colleagues who work on greenfield projects. This is because newer
    frameworks, libraries, and paradigms will eventually replace older ones, making
    them obsolete. Those working on legacy projects know that the skills they develop
    will be worthless in a few years' time, making them less competitive on the job
    market. In comparison, their colleagues are gaining valuable experience on more
    modern frameworks that will increase their market value. I can't imagine a developer
    being happy knowing their skills are becoming less and less relevant.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，那些在棕色地带项目上工作的人甚至可能对在绿色地带项目上工作的同事表现出敌意。这是因为新的框架、库和范式最终会取代旧的，使它们过时。那些在遗留项目上工作的人知道他们发展的技能在几年后将变得毫无价值，这使得他们在就业市场上竞争力降低。相比之下，他们的同事在更现代的框架上获得了宝贵的经验，这将增加他们的市场价值。我无法想象一个开发者会高兴地知道他们的技能正变得越来越不相关。
- en: Furthermore, having technical debt would likely ignite disagreement between
    developers and their managers about the best time to repay the debt. Typically,
    developers demand immediate repayment, while the (inexperienced) managers would
    try to push it further down the line.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，拥有技术债务可能会在开发者和他们的经理之间引发关于最佳还款时间的分歧。通常，开发者要求立即还款，而（缺乏经验的）经理可能会试图将其推迟。
- en: Overall, having technical debt in the project tends to lower the morale of its
    developers.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，项目中有技术债务往往会降低其开发者的士气。
- en: Consequences of low morale
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 低士气的后果
- en: 'In turn, low morale leads to the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 反过来，低士气会导致以下情况：
- en: '**Lower productivity**: Unmotivated developers are more likely to work slower,
    take longer breaks, and be less engaged in the business.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低生产力**：缺乏动力的开发者更有可能工作速度慢，休息时间更长，并且对业务参与度低。'
- en: '**Lower code quality**: Development is a creative process—there is more than
    one way to implement a feature. Developers with low morale are unlikely to conjure
    up the willingness to figure out the best approach—they''ll simply select for
    the approach that requires the least effort.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低代码质量**：开发是一个创造性的过程——实现一个功能的方式不止一种。士气低落的开发者不太可能愿意找出最佳方法——他们只会选择最省力的方法。'
- en: '**High Turnover**: Unhappy developers are going to be looking for better jobs,
    leading to a high turnover of staff for the company. This means the time invested
    to train the developer and integrate him/her into the team is wasted. Furthermore,
    it may cause other members of staff to lose confidence in the company, creating
    a snowball effect of people leaving.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高离职率**：不快乐的开发者会寻找更好的工作，导致公司员工的高流动率。这意味着为培训开发者和将其融入团队所投入的时间是浪费的。此外，它可能导致其他员工对公司失去信心，从而产生连锁反应，导致人员流失。'
- en: Some managers may argue that the business is not responsible for the happiness
    of its developers—they pay them to produce work and value, not to be happy. Whilst this
    is true, an experienced project manager should remember that a development team
    is not a machine—it consists of people, each with their individual ambitions and
    emotions. Thus, the manager would be wise to consider the human costs of technical
    debt when making a business decision.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一些管理者可能会辩称，业务不应对其开发者的幸福负责——他们支付他们工资是为了产生工作和价值，而不是为了快乐。虽然这是真的，但经验丰富的项目经理应该记住，一个开发团队不是一个机器——它由人组成，每个人都有自己的抱负和情感。因此，经理在做出商业决策时，明智的做法是考虑技术债务的人为成本。
- en: Repaying technical debt through refactoring
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过重构来偿还技术债务
- en: Despite its negative repercussions, incurring technical debt is often inevitable.
    In those cases, you must ensure that the decision is an informed and conscious
    one, and remember to repay the debt as soon as possible. So how do we actually
    pay back the debt? We do this through *refactoring—*or making our code *cleaner* *without **changing
    the existing behavior*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管技术债务有负面影响，但承担技术债务往往是不可避免的。在这种情况下，你必须确保决策是知情和有意识的，并记住尽快偿还债务。那么我们实际上是如何偿还债务的呢？我们通过*重构*——或者使我们的代码*更干净*——*不改变现有行为*来偿还债务。
- en: 'Whilst there are no formal definitions on what **clean** means, here are some
    signs of clean code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然没有关于**干净**的正式定义，但以下是一些干净代码的迹象：
- en: '**Well-structured**: Code should consist of modules, separated by domains'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构良好**：代码应由模块组成，模块之间由领域分隔'
- en: '**Well-documented**: For example, include unit tests, inline comments, automatically
    generated documentation, and `README` files'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档齐全**：例如，包括单元测试、内联注释、自动生成的文档和`README`文件'
- en: '**Succinct**: Be concise, but not to the point of obfuscation'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简洁**：简洁，但不要达到混淆的程度'
- en: '**Well-formatted and readable**: Other developers must be able to review and
    work on the same code base, so it should be easy to understand and not deviate
    too far from well-established conventions'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**格式良好且易于阅读**：其他开发者必须能够审查和在此代码库上工作，因此它应该易于理解，并且不应偏离既定的良好惯例太远'
- en: As you gain more experience, you'll be able to detect code that deviates from
    these signs. In programming, we call these deviations **code smells**. Code smells
    are weaknesses within the code that violate well-established design principles,
    paradigms, and patterns. While they are not bugs themselves, they may slow down
    development and make the code base more prone to errors later.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你经验的增加，你将能够检测到偏离这些迹象的代码。在编程中，我们称这些偏差为**代码恶臭**。代码恶臭是违反既定设计原则、范式和模式的代码中的弱点。虽然它们本身不是错误，但它们可能会减慢开发速度，并使代码库更容易出现错误。
- en: Therefore, refactoring is simply a process that moves the current code base
    from having a lot of code smells to one that is cleaner. As we have mentioned
    before, there is more than one way to achieve the same results, and developers
    need to be creative and figure out the best solutions to problems that arise.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，重构只是一个将当前代码库从有很多代码恶臭转变为更干净的过程。正如我们之前提到的，实现相同结果的方法不止一种，开发者需要富有创造力，并找出解决出现问题的最佳解决方案。
- en: The important point here is that developers should be given time to refactor;
    in other words, refactoring should be the core part of a development process,
    and be included in the time estimates that the developers provide.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的重要点是开发者应该有时间进行重构；换句话说，重构应该是开发过程的核心部分，并包含开发者提供的时间估计中。
- en: Preventing technical debt
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预防技术债务
- en: Prevention is better than cure. Instead of incurring technical debt, how about
    avoiding it in the first place? Here, we outline some easy tactics that you can
    adopt to prevent technical debt.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 预防胜于治疗。与其承担技术债务，不如从一开始就避免它？在这里，我们概述了一些你可以采用的简单策略来预防技术债务。
- en: Informing the decision makers
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通知决策者
- en: Most decision makers, especially those without a technical background, greatly
    underestimate the effects of technical debt. Furthermore, in their view, developers
    do not understand the business costs of repaying technical debt in terms of manpower,
    salaries, and time.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数决策者，尤其是那些没有技术背景的人，大大低估了技术债务的影响。此外，在他们看来，开发者并不理解偿还技术债务在人力、薪资和时间方面的商业成本。
- en: That's why it is important for a professional developer to understand the situation
    from the decision maker's perspective and the constraints that they must work
    within. One of the most relevant models is the **triple constraint** model.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于专业开发者来说，理解决策者的视角以及他们必须在其中工作的约束非常重要。其中一个最相关的模型是**三重约束**模型。
- en: The triple constraint
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三重约束
- en: 'The classic project management triangle (also known as triple constraint or
    the *iron triangle*) coined the popular saying Time, Quality, Cost. Pick two.
    The triangle is shown as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 经典的项目管理三角形（也称为三重约束或*铁三角*）提出了流行的说法“时间、质量、成本”。选择两个。三角形如下所示：
- en: '![](img/b5a6e054-9385-4486-ae31-aaf41da945f3.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5a6e054-9385-4486-ae31-aaf41da945f3.jpg)'
- en: 'The triple constraint is a model used in project management to visualize the
    constraints on any projects, and to consider how optimizing the project for one
    area would cause another area to suffer:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 三重约束是项目管理中用于可视化任何项目约束的一个模型，并考虑如何优化一个区域会导致另一个区域受损：
- en: '**Time and Quality**: You can design and build a high-quality platform in a
    short time, but you''ll need to hire a lot of experienced developers, which will
    be expensive.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间和质量**：你可以在短时间内设计和构建一个高质量的平台，但你需要雇佣很多经验丰富的开发者，这将很昂贵。'
- en: '**Time and Cost**: You can build a platform quickly with a few inexperienced
    developers, but the quality will be low.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间和成本**：你可以用几个缺乏经验的开发者快速构建一个平台，但质量会很低。'
- en: '**Quality and Cost**: You can tell a few inexperienced developers to design
    and plan a platform properly. It''ll be of good quality, but it''s going to take
    a long time because they''ll need time to learn the principles and apply them.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**质量和成本**：你可以让一些缺乏经验的开发者设计和规划一个平台，这将是一个高质量的平台，但需要花费很长时间，因为他们需要时间来学习原则并应用它们。'
- en: 'Most businesses are limited largely by their time and cost: by time, because
    for each day the product is not launched, the greater the chance their competitor
    delivers a similar product and captures the **first-mover advantage** (**FMA**);
    by cost, because the company still has to pay their staff salaries while the product
    is not generating any revenue.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数企业主要受时间和成本的限制：时间上，因为产品未能按时推出，竞争对手就有更大的机会推出类似产品并抢占**先发优势**（**FMA**）；成本上，因为公司在产品不产生任何收入的同时，仍需支付员工薪水。
- en: To exacerbate the problem, many managers and business owners are focused more
    on tangible, immediate results, rather than long-term rewards. For these reasons,
    when given the choice, most decision-makers pick time and cost over quality.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加剧这个问题，许多经理和商业所有者更关注可触摸的、即时的结果，而不是长期回报。因此，当面临选择时，大多数决策者会选择时间和成本而不是质量。
- en: The fallacy of the triple constraint
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三重约束的谬误
- en: The fallacy here is that by neglecting quality and incurring debt, they'll eventually
    be increasing both the time and cost requirements many times over.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的谬误在于，通过忽视质量和累积债务，他们最终会大大增加时间和成本需求。
- en: Therefore, it is the duty of the developer to inform the product manager and
    business owner of the unpredictable effects of incurring technical debt to give
    them all of the advice they need to make an informed decision. You may want to
    turn the tables and approach it from a positive perspective—cleaning up technical
    debt would allow future development of new features to be completed more quickly.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，开发者的责任是向产品经理和商业所有者告知累积技术债务的不可预测影响，为他们提供所有所需的信息，以便做出明智的决定。你可能想从积极的角度来处理这个问题——清理技术债务将允许未来开发新功能更快完成。
- en: Do this to prevent the worst-case scenario where the effort required to fix
    the code is greater than rewriting everything from scratch.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做是为了防止最坏的情况发生，即修复代码所需的努力大于从头开始重写。
- en: Refuse to develop
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拒绝开发
- en: If the code base is so bad that it's close to FUBAR (a variation on the military
    slang that stands for 'Fucked Up Beyond Any Repair'), then a more drastic approach
    may be to refuse further development until refactoring is done. This may seem
    extreme, given that the people you're disobeying are paying your salary. While
    this is an easy way to forgo responsibility, it's not what a professional developer
    should do.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码库糟糕到接近无法修复（这是军事俚语“Fucked Up Beyond Any Repair”的变体），那么一个更极端的方法可能是拒绝进一步开发，直到重构完成。考虑到你冒犯的是支付你薪水的人，这可能会显得有些极端。虽然这是一种逃避责任的方法，但这并不是专业开发者应该做的事情。
- en: 'To paraphrase an analogy from *The Clean Code* by Robert C. Martin: Let''s
    suppose you are a doctor and a patient asks you to perform open heart surgery
    on him/her in order to relieve a sore throat, what would you do? Of course, you''d
    refuse! Patients do not know what are best for them, that''s why they must rely
    on your professional opinion.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 用罗伯特·C·马丁的《代码整洁之道》中的一个类比来重新表述：假设你是一名医生，一位患者要求你为他/她进行心脏手术以缓解喉咙痛，你会怎么做？当然，你会拒绝！患者不知道什么最适合他们，这就是为什么他们必须依赖你的专业意见。
- en: Likewise, most business owners do not know what is best for them technically,
    which is why they hired you to make the best possible technical decisions for
    their business. They pay you not simply to code; they pay you because they want
    you to bring value to the business. As a professional, you should think about
    whether your actions are beneficial or detrimental to the business, in both the
    short and long term.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，大多数业务所有者不知道从技术上讲什么最适合他们，这就是为什么他们雇佣你来为他们的业务做出最佳的技术决策。他们付钱给你不仅仅是为了编码；他们付钱给你是因为他们希望你能为业务带来价值。作为一名专业人士，你应该考虑你的行为对业务是有益还是有害，无论是短期还是长期。
- en: Business owners also need to trust the advice of their developers. If they do
    not respect their professional opinion, they shouldn't hire them in the first
    place.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 业务所有者也需要信任他们的开发者的建议。如果他们不尊重他们的专业意见，那么他们最初就不应该雇佣他们。
- en: Don't be a hero
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要成为英雄
- en: However, it's not always the business owner's fault for making unreasonable
    demands; the developer who commits to those demands is equally at fault.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，不合理要求的责任并不总是业务所有者的错；承诺这些要求的开发者同样有责任。
- en: Remember, it is the business owner's, or your manager's, role to get as much
    out of you as possible. But more importantly, it is your duty to inform them of
    what is and isn't possible; so, when asked to complete features under a deadline
    that you cannot meet without sacrificing on quality, *do not accept the deadline*.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，业务所有者或你的经理的角色是尽可能多地从你这里得到东西。但更重要的是，你有责任告诉他们什么可行什么不可行；因此，当被要求在无法保证质量的情况下在截止日期前完成功能时，*不要接受这个截止日期*。
- en: 'You may think the business would appreciate you for going the extra mile and
    making the impossible possible, but there are four problems with this line of
    thinking:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为业务会因为你走得更远，使不可能变为可能而感激你，但这一想法有四个问题：
- en: You may not actually complete the feature in time, while the business has planned
    a strategy that depends on that deadline being met.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能实际上无法按时完成这个功能，而业务已经制定了一个依赖于该截止日期的策略。
- en: You've demonstrated to the manager that you're willing to accept these deadlines,
    so they may set even tighter deadlines next time, even if they don't need to.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经向经理表明你愿意接受这些截止日期，因此他们下次可能会设定更紧的截止日期，即使他们不需要这么做。
- en: Rushing through code will likely incur technical debt.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 赶进度编写代码很可能会累积技术债务。
- en: Your fellow developers may resent you, since they may have to work overtime
    in order to keep up with your pace; otherwise, their manager may view them as
    slow. It also means they'll have to develop on top of your rushed code, making
    everyday work less enjoyable.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的同事开发者可能会怨恨你，因为他们可能不得不加班以跟上你的进度；否则，他们的经理可能会认为他们工作缓慢。这也意味着他们不得不在你赶进度编写的代码之上进行开发，使得日常工作变得不那么愉快。
- en: There's a time to stick your head out to save a business, but by doing it too
    often, you are actually hurting the team. The danger is that neither you nor the
    business owner will realize this; in fact, you may even naïvely celebrate the
    rapid progress being made.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候需要挺身而出拯救一家企业，但如果你做得太过频繁，实际上是在伤害团队。危险在于你或业务所有者都没有意识到这一点；事实上，你甚至可能会天真地庆祝取得的快速进展。
- en: The solution here is to manage your business owner's expectations. If you believe
    there's a 50% chance of meeting an optimistic deadline, then ask for the scope
    to be reduced further until you can be more confident in your estimate. Speaking
    from experience, business owners would rather hear *it's not possible* a month
    in advance than a promise of *everything will be done* that was not delivered.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法是管理业务所有者的期望。如果你认为有50%的几率能够按时完成乐观的截止日期，那么请要求进一步缩小范围，直到你对自己的估计更有信心。从经验来看，业务所有者宁愿提前一个月听到“不可能”而不是未能实现的“一切都会完成”的承诺。
- en: Defining processes
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义流程
- en: 'This brings me back to the topic of defining and documenting processes. Good
    code starts with good planning, design, and management, and is maintained by good
    processes. Many of the problems outlined previously can be mitigated if there
    are clear guidelines outlining the following issues:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我回到了定义和记录流程的话题。好的代码始于良好的规划、设计和管理，并由良好的流程维护。许多之前概述的问题可以通过明确说明以下问题来减轻：
- en: Situations where incurring technical debt is appropriate, for example, to meet
    a legal requirement such as GDPR compliance.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些情况下，累积技术债务是合适的，例如，为了满足法律要求，如GDPR合规性。
- en: Occasions when developers can expect to receive time to repay these debts, for
    example, before the next feature is started, or two weeks at the end of each quarter.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者可以期待获得时间来偿还这些债务的场合，例如，在开始下一个功能之前，或在每个季度的最后两周。
- en: The distribution of work on greenfield/brownfield projects within the team,
    for example, with a rotation system.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，在团队中，绿色场/棕色场项目的工作分配，可以通过轮换制度进行。
- en: The **Definition of Done** – a list of criteria which must be met before a feature
    is considered "done", for example, code passes all tests and is peer-reviewed,
    and documentation is updated.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完成定义** – 一系列必须满足的标准，在功能被视为“完成”之前，例如，代码通过所有测试并经过同行评审，以及文档已更新。'
- en: Software development paradigms such as *Agile* and **Waterfall**, as well as
    their implementations such as *Scrum* and **Kanban**, provide different ways to
    define and enforce these processes. For example, in Scrum, development happens
    in short iterations (typically one and four weeks) called **sprints**. At the
    beginning of each sprint, a meeting is held to review pending tasks and select
    features to be tackled in this sprint. At the end of each sprint, a **retrospective**
    meeting is held to review the progress of the sprint and identify lessons that
    can be learned and applied to subsequent sprints.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发范式，如*敏捷*和**瀑布**，以及它们的实现，如*Scrum*和**看板**，提供了不同的方式来定义和执行这些流程。例如，在Scrum中，开发是在短周期内进行的（通常是每周和四周），称为**冲刺**。每个冲刺开始时，会举行会议来审查待办任务并选择本冲刺要解决的问题。每个冲刺结束时，会举行一个**回顾**会议来审查冲刺进度，并确定可以应用于后续冲刺的教训。
- en: Although these paradigms and methodologies are popular in software development,
    they are not coupled to any technical processes at all. Instead, they deal with the
    entire development process, including gathering requirements and specifications,
    communicating with the client, design, development, and deployment.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些范式和方法在软件开发中很流行，但它们与任何技术流程都没有耦合。相反，它们处理整个开发过程，包括收集需求规格、与客户沟通、设计、开发和部署。
- en: Therefore, of more relevance to developers are development techniques, which specify *how* a
    developer should develop a feature. The most prominent technique is TDD.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对开发者来说，更相关的是开发技术，这些技术指定了开发者应该如何开发一个功能。最突出的技术是TDD。
- en: Test-Driven Development
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: 'Test-Driven Development is a development practice created by Kent Beck, it requires
    the developer to write tests for a feature before that feature is implemented.
    This provides some immediate benefits:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 测试驱动开发（Test-Driven Development，简称TDD）是由Kent Beck创建的一种开发实践，它要求开发者在实现功能之前先编写测试用例。这提供了一些直接的好处：
- en: It allows you to validate that your code works as intended.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许你验证你的代码是否按预期工作。
- en: It avoids errors in your test suite, if you write your test first, then run
    it, and it does *not* fail, that's a prompt for you to check your test again.
    It might just be that you have inadvertently implemented this feature by chance,
    but it could also be an error in your test code.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你先编写测试用例，然后运行它，并且它没有失败，那么这就是一个提示你再次检查测试的机会。这可能是你无意中偶然实现了这个功能，也可能是你的测试代码中存在错误。
- en: Since existing features would be covered by existing tests, it allows a test
    runner to notify you when a previously functional piece of code is broken by the
    new code (in other words, to detecting **regressions**). This is especially important
    for developers when they inherit old code bases they are not familiar with.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于现有功能会被现有测试覆盖，它允许测试运行者在新的代码破坏了之前功能正常运行的代码时通知你（换句话说，检测到**回归**）。这对于开发者来说尤为重要，当他们继承他们不熟悉的旧代码库时。
- en: So, let's examine the principles of TDD, outline its process, and see how we
    can incorporate it into our workflow.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们来探讨TDD的原则，概述其过程，并看看我们如何将其纳入我们的工作流程。
- en: There are different flavors of TDD, such as **Acceptance Test-Driven Development** (**ATDD**),
    where the test cases mirror the acceptance criteria set by the business. Another
    flavor is **Behavior-Driven Development** (**BDD**), where the test cases are
    expressed in natural language (that is, the test cases are human readable).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: TDD有不同的风格，例如**验收测试驱动开发**（**ATDD**），其中测试用例反映了业务设定的验收标准。另一种风格是**行为驱动开发**（**BDD**），其中测试用例用自然语言表达（也就是说，测试用例是可读的）。
- en: Understanding the TDD process
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解TDD过程
- en: 'TDD consists of a rapid repetition of the following steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: TDD包括以下步骤的快速重复：
- en: Identify the smallest functional unit of your feature that has not yet been
    implemented.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别你特性中最小未实现的功能单元。
- en: Identify a test case and write a test for it. You may want to have test cases
    that cover the **happy path**, which is the default scenario that produces no
    errors or exceptions, as well as **unhappy paths**, including dealing with **edge
    cases**.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别一个测试用例并为它编写测试。你可能想要有覆盖 **happy path**（默认场景，不产生错误或异常）以及 **unhappy paths**（包括处理
    **边缘情况**）的测试用例。
- en: Run the test and see it fail.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试并查看它失败。
- en: Write the minimum amount of code to make it pass.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写最少的代码使其通过。
- en: Refactor the code.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 优化代码。
- en: 'For example, if we want to build a math utility library, then our first iteration
    of the TDD cycle may look like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想构建一个数学实用库，那么我们的 TDD 循环的第一个迭代可能看起来像这样：
- en: Here, we are using the [`assert`](https://nodejs.org/api/assert.html) module
    from Node, as well as the `describe` and `it` syntax provided by the Mocha testing
    framework. We will clarify their syntax in detail in [Chapter 5](275da6be-376e-45cf-87a5-8032b4526f41.xhtml), *Writing
    End-to-End Tests*. In the meantime, you may simply treat the following test code
    as pseudocode.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 Node 的 `assert` 模块，以及 Mocha 测试框架提供的 `describe` 和 `it` 语法。我们将在第 5 章
    [Writing End-to-End Tests](275da6be-376e-45cf-87a5-8032b4526f41.xhtml) 中详细说明它们的语法。同时，你可以简单地将以下测试代码视为伪代码。
- en: '**Pick a feature**: For this example, let''s pick the `sum` function, which
    simply adds numbers together.'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择一个特性**：在这个例子中，让我们选择 `sum` 函数，它只是简单地将数字相加。'
- en: '**Define a test case**: When running the `sum` function with `15` and `19` as
    the arguments, it should return `34`:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义一个测试用例**：当使用 `15` 和 `19` 作为参数运行 `sum` 函数时，它应该返回 `34`：'
- en: '[PRE0]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Run the test**: It fails because we haven''t written the `sum` function yet.'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运行测试**：它失败了，因为我们还没有编写 `sum` 函数。'
- en: '**Write the code****:** Write the `sum` function that will allow us to pass
    the test:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编写代码**：编写一个 `sum` 函数，使其能够通过测试：'
- en: '[PRE1]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Refactor**: No refactoring needed.'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**优化**：不需要优化。'
- en: 'This completes one cycle of the TDD process. In the next cycle, we will work
    on the same function, but define additional test cases:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了 TDD 流程的一个循环。在下一个循环中，我们将对同一个函数进行工作，但定义额外的测试用例：
- en: '**Pick a feature**: we''ll continue developing the same `sum` function.'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择一个特性**：我们将继续开发相同的 `sum` 函数。'
- en: '**Define a test case**: this time, we will test it by supplying three arguments, `56`,
    `32` and `17`, we expect to receive the result `105`:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义一个测试用例**：这次，我们将通过提供三个参数，`56`、`32` 和 `17`，来测试它，我们期望得到的结果是 `105`：'
- en: '[PRE2]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Run the test**: it fails because our current `sum` function only takes into
    account the first two parameters.'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运行测试**：它失败了，因为我们的当前 `sum` 函数只考虑了前两个参数。'
- en: 'Write the code: update the `sum` function to take into account the first three
    parameters:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写代码：更新 `sum` 函数以考虑前三个参数：
- en: '[PRE3]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Refactor**: improve the function by making it work for any number of function
    parameters:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**优化**：通过使函数能够处理任意数量的参数来改进函数：'
- en: '[PRE4]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that calling with just two arguments would still work, and so the original
    behavior is not altered.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，只传递两个参数仍然可以工作，所以原始行为没有改变。
- en: Once a sufficient number of test cases have been completed, we can then move
    on to the next function, such as `multiply`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成足够多的测试用例，我们就可以继续到下一个函数，比如 `multiply`。
- en: Fixing bugs
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复错误
- en: By following TDD, the number of bugs should reduce drastically; however, no
    process can guarantee error-free code. There will always be edge cases that were
    overlooked. Previously, we outlined the TDD process for implementing a new feature;
    now, let's look at how can we can apply the same process to fixing bugs.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循 TDD，错误数量应该会大幅减少；然而，没有任何流程可以保证代码无错误。总会有些边缘情况被忽略。之前，我们概述了实现新特性的 TDD 流程；现在，让我们看看如何将同样的流程应用于修复错误。
- en: In TDD, when a bug is encountered, it is treated the same way as a new feature—you'd
    first write a (failing) test to reproduce the bug, and then update the code until
    the test passes. Having the bug documented as a test case ensures the bug stays
    fixed in the future, preventing regression.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TDD 中，当遇到错误时，它被处理得和新增特性一样——你首先编写一个（失败的）测试来重现错误，然后更新代码直到测试通过。将错误作为测试用例记录下来确保错误在未来得到修复，防止回归。
- en: Benefits of TDD
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TDD 的好处
- en: When you first learn to code, no one ever starts with writing tests. This means
    that for many developers, having tests in the code is an afterthought—a luxury
    if time permits. But what they don't realize is that *everyone tests their code*,
    consciously or otherwise.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当你刚开始学习编码时，没有人是从编写测试开始的。这意味着对于许多开发者来说，代码中有测试是一个事后考虑的事情——如果时间允许，那是一种奢侈。但他们没有意识到的是，**每个人都会测试他们的代码**，无论是有意还是无意。
- en: After you've written a function, how do you know it works? You may open the
    browser console and run the function with some dummy test parameters, and if the
    output matches your expectations, then you may assume it's working. But what you're
    doing here is actually **manually testing** a function that has already been implemented.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在你编写了一个函数之后，你怎么知道它是否工作？你可能打开浏览器控制台并使用一些虚拟测试参数运行函数，如果输出符合你的预期，那么你可能会假设它正在工作。但你所做的是实际上**手动测试**了一个已经实现的函数。
- en: The advantage of manual testing is that it requires no upfront costs—you just
    run the function and see if it works. However, the downside is that it cannot
    be automated, eating up more time in the long run.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 手动测试的优势在于它不需要前期成本——你只需运行函数并查看它是否工作。然而，缺点是它不能自动化，从长远来看会消耗更多时间。
- en: Avoiding manual tests
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免手动测试
- en: Instead, you should formally define these manual tests as code, in the form
    of **unit**, **integration** and **end-to-end** (**E2E**) tests, among others.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你应该将这些手动测试正式定义为代码，形式为**单元测试**、**集成测试**和**端到端测试（E2E**）等。
- en: Formally defining tests has a higher initial cost, but the benefit is that the
    tests can now be automated. As we will cover in [Chapter 5](275da6be-376e-45cf-87a5-8032b4526f41.xhtml), *Writing
    End-to-End Tests*, once a test is defined as code, we can use **npm scripts**
    to run it automatically every time the code changes, making the cost to run the
    tests in the future virtually zero.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 正式定义测试的初始成本较高，但好处是测试现在可以自动化。正如我们将在[第5章](275da6be-376e-45cf-87a5-8032b4526f41.xhtml)中讨论的，“编写端到端测试”，一旦测试被定义为代码，我们就可以使用**npm脚本**在代码每次更改时自动运行它，使得未来运行测试的成本几乎为零。
- en: The truth is that you'll need to test your code anyways; it's just a choice
    of whether you invest time to automate it now, saving time in the future, or save
    the time now but waste more time repeating each test manually in the future.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 事实是，你无论如何都需要测试你的代码；这只是一个选择，是现在投资时间自动化它以节省未来的时间，还是现在节省时间但未来在手动重复每个测试上浪费更多时间。
- en: 'Mike Cohn developed the concept of the **Testing Pyramid**, which shows that
    an application should have a lot of unit tests (as they are fast and cheap to
    run), fewer integration tests, and even fewer UI tests, which take the most amount
    of time and are the most expensive to define and run. Needless to say, manual
    testing should only be done after unit, integration, and UI tests have been thoroughly
    defined:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 迈克·科恩（Mike Cohn）提出了**测试金字塔**的概念，它表明一个应用程序应该有很多单元测试（因为它们运行速度快且成本低），较少的集成测试，以及更少的UI测试，这些测试需要最多的时间和成本来定义和运行。不言而喻，手动测试应该在单元、集成和UI测试彻底定义之后进行：
- en: '![](img/f7598434-8760-4847-8bfb-eb52ee182114.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f7598434-8760-4847-8bfb-eb52ee182114.jpg)'
- en: Tests as specification
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试作为规范
- en: Whilst avoiding manual testing is a benefit of TDD, it certainly is not the
    only one. A developer can still write their unit, integration and E2E tests after
    implementation of the feature. So what are the benefits of writing tests before
    implementation?
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然避免手动测试是TDD的好处之一，但它绝对不是唯一的。开发者在实现功能后仍然可以编写他们的单元、集成和端到端测试。那么在实现之前编写测试的好处是什么？
- en: The answer is that it forces you to think about your requirements and break
    them down into atomic units. You can then write each test case around a specific
    requirement. The end result is that the test cases form the specification for
    your feature. Writing tests first helps you structure your code around the requirements,
    rather than retrofitting requirements around your code.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是它迫使你思考你的需求并将它们分解为原子单元。然后你可以围绕一个特定的需求编写每个测试用例。最终结果是测试用例构成了你功能的规范。先编写测试有助于你围绕需求来结构化代码，而不是将需求适应到代码中。
- en: This also helps you to abide by the **You Aren't Gonna Need It** (**YAGNI**)
    principle, which prevents you from implementing features that aren't actually
    needed.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这也有助于你遵守**你不需要它**（**YAGNI**）原则，该原则防止你实现实际上不需要的功能。
- en: '"Always implement things when you *actually* need them, never when you just
    *foresee* that you need them."'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: “总是在你实际上需要的时候实现事物，而不是仅仅预见你需要它们的时候。”
- en: – Ron Jeffries, co-founder of Extreme Programming (XP)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: – Ron Jeffries，极限编程（XP）的联合创始人
- en: Lastly, writing the tests (and thus the specifications) forces you to think
    about the interface that consumers of your function would have to use to interact
    with your function—should everything be defined as properties inside a generic
    `options` object, or should it be a plain list of arguments?
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，编写测试（以及因此的规范）迫使你思考你的函数消费者将如何使用接口与你的函数交互——是否应该将所有内容都定义为`options`对象内的属性，或者应该是一个普通的参数列表？
- en: '[PRE5]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tests as documentation
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试作为文档
- en: When developers want to use a tool or library, they learn by reading the documentation
    or guides that contain code samples they can try, or by following tutorials to
    build a basic application.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发者想要使用一个工具或库时，他们通过阅读包含可尝试代码样本的文档或指南来学习，或者通过遵循教程来构建一个基本的应用程序。
- en: Test cases can essentially act as code samples and form part of the documentation.
    In fact, tests are the most comprehensive set of code samples there are, covering
    every use case that the application cares about.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用例本质上可以充当代码样本，并成为文档的一部分。事实上，测试是所有代码样本中最全面的一套，涵盖了应用程序关心的每一个用例。
- en: Although tests provide the best form of documentation, tests alone are not enough.
    Test cases do not provide context for the code, such as how it fits into the overall
    business goals, or convey the rationale behind its implementation. Therefore,
    tests should be supplemented by inline comments and automatically-generated, as
    well as manually-written, documentation.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管测试提供了最好的文档形式，但仅凭测试是不够的。测试用例不提供代码的上下文，例如它如何融入整体业务目标，或者传达其实施背后的理由。因此，测试应该由内联注释、自动生成的以及手动编写的文档来补充。
- en: Short development cycles
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 短的开发周期
- en: Because TDD focuses on a single functional block at a time, its development
    cycles are usually very short (minutes to hours). This means small, incremental
    changes can be made and released rapidly.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 由于TDD一次关注一个功能块，其开发周期通常非常短（几分钟到几小时）。这意味着可以快速进行小规模的增量更改并发布。
- en: When TDD is implemented within the framework of a software development methodology
    such as Scrum, small development cycles allow the methodology practitioner to
    capture fine-grained metrics on the progress of the team.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当TDD在软件开发方法（如Scrum）的框架内实施时，小型的开发周期允许方法实践者捕捉团队进度的细粒度指标。
- en: Difficulties with TDD adoption
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TDD采用困难
- en: 'While TDD is the gold standard amongst development techniques, there are many
    obstacles preventing its implementation:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管TDD在开发技术中是黄金标准，但有许多障碍阻碍了其实施：
- en: '**Inexperienced team**: TDD only works when the whole development team adopts
    it. Many junior developers, especially self-taught developers, never learned to
    write tests.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏经验的团队**：TDD只有在整个开发团队采用它时才能发挥作用。许多初级开发者，尤其是自学成才的开发者，从未学习过编写测试。'
- en: The good news is that TDD is not hard; given a day or so, a developer can realistically
    learn about the different types of tests, including how to spy on functions and
    mock data. It's wise to invest time training a developer so that he/she can write
    more reliable code for the entire duration of his/her employment.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 好消息是，TDD并不难；给一天或两天的时间，开发者可以现实地了解不同类型的测试，包括如何监视函数和模拟数据。投资时间培训开发者，以便他们可以在整个雇佣期间编写更可靠的代码，这是明智的。
- en: '**Slower initial development speed**: TDD requires the product owner to create
    a specification document and for the developers to write the tests before any
    functional code is written. This means the end product will likely take more time
    to complete. This goes back to a recurring theme in this chapter: pay the price
    now, or pay the interest later. If you''ve been reading everything so far, it''ll
    be obvious the first option is the better one.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始开发速度较慢**：TDD要求产品所有者创建规范文档，并要求开发者在编写任何功能性代码之前编写测试。这意味着最终产品可能需要更多的时间来完成。这回到了本章中反复出现的一个主题：现在付出代价，还是以后付出利息。如果你到目前为止一直在阅读，那么第一个选择显然是更好的。'
- en: '**Legacy code**: Many legacy code bases do not have tests, or the tests are
    incomplete; worse still, there may be insufficient documentation to understand
    what each function is designed to do. We can write tests to verify functionality
    that we know, but we cannot be certain that it''ll cover all cases. This is a
    tricky one because TDD means you write your tests first; if you already have all
    the code, then it can''t be TDD. If the code base is large, you may continue to
    fix bugs (documenting them as unit tests as you do so) while starting on a rewrite.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**遗留代码**：许多遗留代码库没有测试，或者测试不完整；更糟糕的是，可能缺乏足够的文档来理解每个函数的设计目的是什么。我们可以编写测试来验证我们已知的功能，但我们不能确定它是否涵盖了所有情况。这是一个棘手的问题，因为TDD意味着你先写测试；如果你已经有了所有代码，那么它就不能是TDD。如果代码库很大，你可以在开始重写的同时继续修复错误（在修复的同时将它们作为单元测试记录下来）。'
- en: '**Slow tests**: TDD is only practical when the tests can be run quickly (within
    a few seconds). If the test suite takes a few minutes to run, then developers
    would not receive quick enough feedback for those tests to be useful.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**慢速测试**：TDD只有在测试可以快速运行（几秒钟内）时才是实用的。如果测试套件需要几分钟才能运行，那么开发者将不会收到足够的快速反馈，使得这些测试变得有用。'
- en: The simplest way to mitigate this issue is by breaking the code into smaller
    modules and running tests on them individually. However, some tests, such as large
    integration and UI tests, are inevitably slow. In these cases, you can run them
    only when the code is committed and pushed, probably by integrating them into
    a Continuous Integration (CI) system, which is something we will cover in [Chapter
    8](38b85b06-d091-4751-a2ac-32ca0f98f26b.xhtml), *Writing Unit/Integration* *Tests*.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 减少这种问题的最简单方法是将代码分解成更小的模块，并对它们分别进行测试。然而，一些测试，如大型集成和UI测试，不可避免地会很慢。在这些情况下，你只能在代码提交和推送时运行它们，可能通过将它们集成到持续集成（CI）系统中来实现，这将在[第8章](38b85b06-d091-4751-a2ac-32ca0f98f26b.xhtml)“编写单元/集成测试”中介绍。
- en: When not to use TDD
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不使用TDD的情况
- en: Although I encourage you to incorporate TDD into your workflow, I should add
    a disclaimer that it is *not a silver bullet*. TDD does not magically make your
    code performant or modular; it's just one technique that forces you to design
    your system better, making it more testable and maintainable.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我鼓励你将TDD融入你的工作流程，但我应该声明它并不是万能的。TDD并不能神奇地让你的代码性能更好或模块化；它只是强迫你更好地设计系统的一种技术，使系统更易于测试和维护。
- en: 'Furthermore, TDD induces a high initial cost, so there are a few cases where
    this investment is not advisable:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，TDD会带来很高的初始成本，所以有一些情况下这种投资是不明智的：
- en: Firstly, when the project is a **Proof-of-Concept** (**PoC**). This is where
    the business and developers are only concerned with whether the idea is possible,
    not about its implementation. Once the concept is proven to be possible, the business
    may then agree to approve additional resources for the proper development of this
    feature.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，当项目是一个**概念验证**（**PoC**）时。这是商业和开发者只关心想法是否可行，而不是其实现的地方。一旦概念被证明是可行的，商业方可能会同意为这个功能的适当开发批准额外的资源。
- en: Secondly, when the product owner has not defined clear requirements (or does
    not want to), or the requirements change every day. This is more common than you
    think, since many early startups are constantly pivoting to find the right market
    fit. Needless to say, this is a bad situation for the developer, but if you do
    find yourself in this situation, then writing tests would be a waste of time,
    as they may become obsolete as soon as the requirements change.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，当产品负责人没有定义清晰的需求（或者不想定义），或者需求每天都在变化时。这种情况比你想象的要常见，因为许多早期初创公司都在不断调整以找到合适的市场定位。不用说，这对开发者来说是个糟糕的情况，但如果你发现自己处于这种状况，那么编写测试将是浪费时间，因为需求一旦改变，测试可能就会过时。
- en: Summary
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've looked at technical debt, its causes, consequences, and
    ways to prevent it. Then, we introduced TDD as a process to avoid technical debt;
    we outlined its benefits, and how to implement it in your workflow. In [Chapter
    5](275da6be-376e-45cf-87a5-8032b4526f41.xhtml), *Writing End-to-End Tests* and
    [Chapter 6](6a407d81-cb0e-4ada-9849-693cba3fabd5.xhtml), *Storing Data in Elasticsearch*,
    we will cover in more depth the different types of tests (unit, integration, and
    E2E / acceptance tests).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了技术债务的原因、后果以及预防方法。然后，我们介绍了TDD作为一种避免技术债务的过程；我们概述了它的好处，以及如何在你的工作流程中实施它。[第5章](275da6be-376e-45cf-87a5-8032b4526f41.xhtml)《编写端到端测试》和[第6章](6a407d81-cb0e-4ada-9849-693cba3fabd5.xhtml)《在Elasticsearch中存储数据》，我们将更深入地探讨不同类型的测试（单元测试、集成测试和端到端/验收测试）。
- en: Good code, whatever its definition, takes less time to write than bad code in
    the long run. It would be wise to realize this fact and have the discipline to
    build a strong foundation from the get-go. You can build a house on weak foundations,
    and it may stand for a hundred years, but build a skyscraper on a weak foundation,
    it'll come tumbling down quicker than you can imagine.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 无论定义如何，好的代码在长期来看都比坏代码花费的时间更少。意识到这一事实并拥有从一开始就建立强大基础的纪律是明智的。你可以在薄弱的基础上建造房屋，它可能能站立一百年，但如果你在薄弱的基础上建造摩天大楼，它可能会比你想象的更快倒塌。
- en: '"Always code as if the guy who ends up maintaining your code will be a violent
    psychopath who knows where you live."'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '"始终以这样的心态编写代码：最终维护你代码的人可能是一个知道你住处的暴力狂人。"'
- en: – John F. Woods
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: —— 约翰·F·伍兹
