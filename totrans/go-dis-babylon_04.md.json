["```js\n\nconstructor(engine) {\n    this._totalToLoad = 0.00;\n    this._loadingText = \"Loading Space-Truckers: The Video \n        Game...\";\n    this._currentAmountLoaded = 0.00;\n    this._engine = engine;\n    this._startScene = createStartScene(engine);\n}\n```", "```js\n\ndisplayLoadingUI() {\n    this._active = true;        \n}\nhideLoadingUI() {\n    this._active = false;   \n}\n```", "```js\n\n engine.runRenderLoop(() => {\n    if (this._startScene && this._active === true) {\n        this._startScene.scene.render();\n    }\n});\n```", "```js\n\nget progressAvailable() {\n    return this._progressAvailable;\n}\nget currentAmountLoaded() {\n    return this._currentAmountLoaded;\n}\nget totalToLoad() {\n    return this._totalToLoad;\n}\nget loadingUIText() {\n    return this._loadingText;\n}\n```", "```js\n\nonProgressHandler(evt) {\n    this._progressAvailable = evt.lengthComputable === true;\n    this._currentAmountLoaded = evt.loaded || this.\n        currentAmountLoaded;\n    this._totalToLoad = evt.total || this.\n        currentAmountLoaded;\n    if (this._progressAvailable) {\n        this._loadingText = \"Loading Space-Truckers: \n            The Video Game... \" + ((this._current\n                AmountLoaded / this._totalToLoad) * 100).\n                    toFixed(2);\n    }        \n}\n```", "```js\n\nthis._textContainer = AdvancedDynamicTexture.CreateFullscre\n    enUI(\"loadingUI\", true, this._startScene.scene);\nconst textBlock = new TextBlock(\"textBlock\", this._\n    loadingText);\ntextBlock.fontSize = \"62pt\";\ntextBlock.color = \"antiquewhite\";\ntextBlock.verticalAlignment = Container.VERTICAL_ALIGNMENT_\n    BOTTOM;\ntextBlock.paddingTop = \"15%\";\nthis._textContainer.addControl(textBlock);\n```", "```js\n\nconst eng = new Engine(canvas, true, null, true);\nlogger.logInfo(\"Created BJS engine\");\neng.loadingScreen = new SpaceTruckerLoadingScreen(eng);\n```", "```js\n\nclass ConsoleProxy {\n    constructor(console) {\n        this._console = console;\n        this._consoleIsPresent = this._console == true;\n        this._messageBuffer = [];\n    }\n    logInfo(message) {\n        const logObj = { type: \"INFO\", message: message};\n        if (this._consoleIsPresent) { \n            this._console.log(logObj);\n            return;\n        }\n        this._messageBuffer.push(message);\n    }\n// …\n}\nconst theProxy = new ConsoleProxy(console);\nexport default theProxy;\n```", "```js\n\n    function* appStateMachine() {\n        let currentState = \"INDETERMINATE\";\n        yield currentState;\n        yield currentState + \"-POST\";\n        yield \"DONE\";\n    }\n```", "```js\n\n    let index = 0;\n    const asm = appStateMachine();\n    for (const a of asm) {\n        logger.logInfo(\"Index \" + index++, a);\n    }\n```", "```js\n{type: \"INFO\", message: \"Index 0\"} \"INDETERMINATE\"\n{type: \"INFO\", message: \"Index 1\"} \"INDETERMINATE-POST\"\n{type: \"INFO\", message: \"Index 2\"} \"DONE\"\n```", "```js\n\n    const asm2 = appStateMachine();\n    let s0 = asm2.next();\n    let s1 = asm2.next();\n    let s2 = asm2.next();\n    let s3 = asm2.next();\n    logger.logInfo(\"s0\", s0);\n    logger.logInfo(\"s1\", s1);\n    logger.logInfo(\"s2\", s2);\n    logger.logInfo(\"s3\", s3);\n```", "```js\n{type: \"INFO\", message: \"s3\"} {value: undefined, done: true}\n```", "```js\n\nexport default Object.freeze({\n    CREATED: 0,\n    INITIALIZING: 2,\n    CUTSCENE: 3,\n    MENU: 4,\n    RUNNING: 5,\n    EXITING: 6\n});\n```", "```js\n\nclass SpaceTruckerApplication {\n}\n```", "```js\n\nfunction* appStateMachine() {\n        let previousState = null;\n        let currentState = null;\n        function setState(newState) {\n            previousState = currentState;\n            currentState = newState;\n            logger.logInfo(\"App state changed. Previous \n                state:\" + previousState + « \n                    New state: \" + newState);\n            return newState;\n        }\n}\n// … create scene, camera return scene\n```", "```js\n\nwhile (true) {\n    let nextState = yield;\n      if (nextState !== null && nextState !== undefined) {\n            setState(nextState);\n            if (nextState === AppStates.EXITING) {\n                return currentState;\n            }\n        }\n}\n```", "```js\n\nconstructor(engine) {\n    this._engine = engine;\n    this._currentScene = null;\n    this._stateMachine = this.appStateMachine();\n    this.moveNextAppState(AppStates.CREATED);\n}\n```", "```js\n\n    get currentState() {\n        return this._stateMachine.next();\n    }\n    get activeScene() {\n        return this._currentScene;\n    }\n    moveNextAppState(state) {\n        return this._stateMachine.next(state).value;\n    }\n```", "```js\n\n    run() {\n        this._engine.runRenderLoop(() => {\n            // update loop\n            let state = this.currentState;\n            switch (state) {\n                case AppStates.CREATED:\n                case AppStates.INITIALIZING:\n                    break;\n                case AppStates.CUTSCENE:\n                    break;\n                case AppStates.MENU:\n                    break;\n                case AppStates.RUNNING:\n                    break;\n                case AppStates.EXITING:\n                    break;\n                default:\n                    break;\n            }\n            this._currentScene?.render();\n        });\n    }\n```", "```js\n\n    async run() {\n        await this.initialize();\n    // …\n```", "```js\n\n    async initialize() {\n        this._engine.enterFullscreen(true);\n        this._engine.displayLoadingUI();\n        this.moveNextAppState(AppStates.INITIALIZING)\n        // for simulating loading times\n        const p = new Promise((res, rej) => {\n            setTimeout(() => res(), 5000);\n        });\n        await p;\n        this._engine.hideLoadingUI();\n        this.goToMainMenu();       \n    }\n```", "```js\n\n    goToMainMenu() {\n        this._engine.displayLoadingUI();        \n        this._mainMenu = new MainMenuScene(this._engine);\n        this._engine.hideLoadingUI();\n        this.moveNextAppState(AppStates.MENU);        \n    }\n```", "```js\n\n    case AppStates.MENU:\n       this._currentScene = this._mainMenu.scene;\n       break;\n```", "```js\n\nclass MainMenuScene {\n    get scene() {\n        return this._scene;\n    }\n    constructor(engine) {\n        this._engine = engine;\n        let scene = this._scene = new Scene(engine);\n        const camera = new ArcRotateCamera(\"menuCam\",\n            0, 0, -30, Vector3.Zero(), scene, true);\n    }\n}\nexport default MainMenuScene;\n```", "```js\n\nconst {\n    Color4,\n    Vector3,    \n    ArcRotateCamera,\n    Scene    \n} = BABYLON;\n```", "```js\n\nvar createScene = function () {\n    const mainMenu = new MainMenuScene(engine);\n    return mainMenu.scene;\n};\n```", "```js\n\n_setupBackgroundEnvironment() {\n    const light = new HemisphericLight(\"light\", new Vector3\n        (0, 0.5, 0), this._scene);\n    const starfieldPT = new StarfieldProceduralTexture\n        (\"starfieldPT\", 1024, this._scene);\n    const starfieldMat = new StandardMaterial(\"starfield\", \n        this._scene);\n    const space = CylinderBuilder.CreateCylinder(\"space\", \n          { height: 64, diameterTop: 0, diameterBottom: 64,\n              tessellation: 512 }, \n          this._scene);\n    starfieldMat.diffuseTexture = starfieldPT;\n    starfieldMat.diffuseTexture.coordinatesMode = Texture.\n        SKYBOX_MODE;\n    starfieldMat.backFaceCulling = false;\n    starfieldPT.beta = 0.1;\n    space.material = starfieldMat;\n    return this._scene.onBeforeRenderObservable.add(() => {\n        starfieldPT.time += this._scene.getEngine().\n            getDeltaTime() / 1000;\n    });\n}\n```", "```js\n\nconst gui = AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\ngui.renderAtIdealSize = true;\nthis._guiMenu = gui;\n```", "```js\n\n        const menuContainer = new Rectangle(\"menuContainer\");\n        menuContainer.width = 0.8;\n        menuContainer.thickness = 5;\n        menuContainer.cornerRadius = 13;\n        this._guiMenu.addControl(menuContainer);\n        this._menuContainer = menuContainer;\n```", "```js\n\nconst menuBackground = https://raw.githubusercontent.com/jelster/space-truckers/ch4/assets/menuBackground.png\n     + \"?\" + Number(new Date());\n```", "```js\n\n        const menuBg = new Image(\"menuBg\", menuBackground);\n        menuContainer.addControl(menuBg);\n```", "```js\n\n        const menuGrid = new GUI.Grid(\"menuGrid\");\n        menuGrid.addColumnDefinition(0.33);\n        menuGrid.addColumnDefinition(0.33);\n        menuGrid.addColumnDefinition(0.33);\n        menuGrid.addRowDefinition(0.5);\n        menuGrid.addRowDefinition(0.5);\n        menuContainer.addControl(menuGrid);        \n        this._menuGrid = menuGrid;\n```", "```js\n\n        const titleText = new TextBlock(\"title\", \"Space-\n            Truckers\");\n        titleText.resizeToFit = true;\n        titleText.textWrapping = GUI.TextWrapping.Ellipse;\n        titleText.fontSize = \"72pt\";\n        titleText.color = \"white\";\n        titleText.width = 0.9;\n        titleText.verticalAlignment = Control.\n            VERTICAL_ALIGNMENT_TOP;\n        titleText.paddingTop = titleText.paddingBottom = \n            \"18px\";\n        titleText.shadowOffsetX = 3;\n        titleText.shadowOffsetY = 6;\n        titleText.shadowBlur = 2;\n        menuContainer.addControl(titleText);\n```", "```js\n\nconst pbOpts = {\n    name: \"btPlay\",\n    title: \"Play\",\n    background: \"red\",\n    color: \"white\",\n    onInvoked: () => console.log(\"Play button clicked\")\n};\n```", "```js\n\nfunction createMenuItem(opts) {\n    const btn = Button.CreateSimpleButton(opts.name || \"\", \n        opts.title);\n    btn.color = opts.color || \"white\";\n    btn.background = opts.background || \"green\";\n    btn.height = \"80px\";\n    btn.thickness = 4;\n    btn.cornerRadius = 80;\n    btn.shadowOffsetY = 12;\n    btn.horizontalAlignment = Control.\n        HORIZONTAL_ALIGNMENT_CENTER;\n    btn.fontSize = \"36pt\";\n    if (opts.onInvoked) {\n        btn.onPointerClickObservable.add((ed, es) => \n            opts.onInvoked(ed, es));\n    }\n    return btn;\n}\n```", "```js\n\nconst playButton = createMenuItem(pbOpts);\nthis._menuGrid.addControl(playButton, this._menuGrid.\n    children.length, 1);\n```", "```js\n\nconst ebOpts = {\n    name: \"btExit\",\n    title: \"Exit\",\n    background: \"yellow\",\n    color: \"black\",\n    onInvoked: () => console.log(\"Exit button clicked\")\n}\n```", "```js\n\n   get selectedItemIndex() {\n       return this._selectedItemIndex || -1;\n   }   \n   set selectedItemIndex(idx) {\n        const itemCount = this._menuGrid.rowCount;\n        const newIdx = Scalar.Repeat(idx, itemCount);\n        this._selectedItemIndex = newIdx;\n        this._selectedItemChanged.notifyObservers(newIdx);\n    }\n```", "```js\n\nthis._selectedItemChanged = new Observable();\nthis._selectedItemChanged.add((idx) => {\n    const menuGrid = this._menuGrid;\n    const selectedItem = menuGrid.getChildrenAt(idx, 1);\n    if (selectedItem[0].isEnabled !== true) {\n        this.selectedItemIndex = 1 + idx;\n    }\n    this._selectorIcon.isVisible = true;\n    menuGrid.removeControl(this._selectorIcon);\n    menuGrid.addControl(this._selectorIcon, idx);\n});\n```", "```js\n\n_createSelectorIcon() {\n    const selectorIcon = new BABYLON.GUI.Image\n        (\"selectorIcon\", selectionIcon);\n    selectorIcon.width = \"160px\";\n    selectorIcon.height = \"60px\";\n    selectorIcon.horizontalAlignment = Control.\n        HORIZONTAL_ALIGNMENT_CENTER;\n    selectorIcon.shadowOffsetX = 5;\n    selectorIcon.shadowOffsetY = 3;\n    selectorIcon.isVisible = false;\n    this._menuGrid.addControl(selectorIcon, 1, 0);\n    this._selectorIcon = selectorIcon;\n}\n```", "```js\n\nconst selectionIcon = \"https://raw.githubusercontent.com/jelster/space-truckers/ch4/assets/ui-selection-icon.PNG\" + \"?\" + Number(new Date());\n```", "```js\n\nscene.whenReadyAsync().then(() => this.selectedItemIndex = 0);\n```", "```js\n\n_selectorIconAnimation() {\n    const animTimeSeconds = Math.PI * 2;\n    const dT = this._scene.getEngine().\n        getDeltaTime() / 1000;\n    this._selectorAnimationFrame = Scalar.Repeat(this._\n    selectorAnimationFrame + dT * 5, animTimeSeconds * 10);\n    this._selectorIcon.top = Math.sin(this.\n        _selectorAnimationFrame).toFixed(0) + \"px\";\n}\n```", "```js\n\nimport { Scene, Vector3, Scalar, Observable, Sound, HemisphericLight } from \"@babylonjs/core\";\nimport { AdvancedDynamicTexture, Rectangle, Image, Button, Control, TextBlock, Grid, TextWrapping } from \"@babylonjs/gui\";\n```", "```js\n\nimport selectionIcon from \"../assets/\n    ui-selection-icon.PNG\";\n```", "```js\n\n_onMenuEnter(duration) {\n    let fadeIn = 0;\n    const fadeTime = duration || 1500;\n    const timer = BABYLON.setAndStartTimer({\n        timeout: fadeTime,\n        contextObservable: this._scene.\n            onBeforeRenderObservable,\n        onTick: () => {\n            const dT = this._scene.getEngine().\n                getDeltaTime();\n            fadeIn += dT;\n            const currAmt = Scalar.SmoothStep(0, 1, fadeIn \n                / fadeTime);\n            this._menuContainer.alpha = currAmt;\n        },\n        onEnded: () => {\n            this.selectedItemIndex = 0;\n        }\n    });\n    return timer;\n}\n```", "```js\n\n       scene.whenReadyAsync().then(() => this._onMenuEnter());\n```", "```js\n\nconst currAmt = Scalar.SmoothStep(1, 0, fadeOut / fadeTime);\n```", "```js\n\nonInvoked: () => {\n    console.log(\"Exit button clicked\");\n    this._onMenuLeave(1000);\n}\n```", "```js\n\nimport titleMusic from \"../assets/sounds/space-trucker-title-theme.m4a\";\n```", "```js\n\nthis._music = new Sound(\"titleMusic\", titleMusic, scene, () => console.log(\"loaded title music\"), { autoplay: true, loop: true, volume: 0.5 });\n```", "```js\n\n<enjoy the music> \n```"]