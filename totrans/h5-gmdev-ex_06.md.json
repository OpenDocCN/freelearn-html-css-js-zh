["```js\n       <div id=\"game\">\n         <section id=\"menu-scene\" class=\"scene\">\n           <a href=\"#game\"><span>Play</span></a>\n         </section>\n       </div>\n       <audio id=\"buttonover\">\n         <source src=\"img/button_over.aac\" />\n         <source src=\"img/button_over.ogg\" />\n       </audio>\n       <audio id=\"buttonactive\">\n         <source src=\"img/button_active.aac\" />\n         <source src=\"img/button_active.ogg\" />\n       </audio>\n    ```", "```js\n    (function($){\n      var audiogame = {\n        // game init method\n        initGame: function() {\n          this.initMedia();\n          this.handlePlayButton();\n        },\n        // init medias\n        initMedia: function() {\n           // TODO: init media related logic\n        },\n\n        handlePlayButton: function() {\n          // TODO: logic for the play button\n        }\n\n      };\n\n      // init function when the DOM is ready\n      $(function(){\n        audiogame.initGame();\n      });\n    })(jQuery);\n    ```", "```js\n    initMedia: function() {\n      // get the references of the audio element.\n      this.buttonOverSound = document.getElementById(\"buttonover\");\n      this.buttonOverSound.volume = 0.3;\n      this.buttonActiveSound = document.getElementById(\"buttonactive\");\n      this.buttonActiveSound.volume = 0.3;\n    },\n    ```", "```js\n    handlePlayButton: function() {\n      var game = this;\n\n      // listen the button event that links to #game\n      $(\"a[href='#game']\")\n      .hover(function(){\n        game.buttonOverSound.currentTime = 0;\n        game.buttonOverSound.play();\n      },function(){\n        game.buttonOverSound.pause();\n      })\n      .click(function(){\n        game.buttonActiveSound.currentTime = 0;\n        game.buttonActiveSound.play();\n\n        return false;\n      });\n    }\n    ```", "```js\n<audio>\n  <source src=\"img/button_active.aac\" >\n  <source src=\"img/button_active.ogg\" >\n  <!-- Any code for browser that does not support audio tag -->\n</audio>\n```", "```js\n<audio src='sound.ogg'>\n```", "```js\n<audio>\n   <source src='sound.ogg'>\n   <source src='sound.aac'>\n   <source src='sound.wav'>\n</audio>\n```", "```js\n<audio src='file.ogg' autoplay>\n<audio src='file.ogg autoplay=\"autoplay\">\n```", "```js\n<audio id=\"buttonactive\">\n  <source src=\"img/button_active.aac\" />\n  <source src=\"img/button_active.ogg\" />\n</audio>\n<script>\n  document.getElementById(\"buttonactive\").play();\n</script>\n```", "```js\ndocument.getElementById(\"buttonactive\").currentTime = 3.5;\ndocument.getElementById(\"buttonactive\").play();\n```", "```js\n<script>\n  document.getElementById(\"buttonactive\").pause();\n</script>\n```", "```js\nfunction stopAudio(){\n  document.getElementById(\"buttonactive\").pause();\n  document.getElementById(\"buttonactive\").currentTime = 0;\n}\n```", "```js\ndocument.getElementById(\"buttonactive\").volume = 0.3;\n```", "```js\n.hover(handlerIn, handlerOut);\n```", "```js\n$(\"a[href='#game']\").hover(function(){\n   audiogame.buttonOverSound.currentTime = 0;\n   audiogame.buttonOverSound.play();\n},function(){\n   audiogame.buttonOverSound.pause();\n});\n```", "```js\n    <div id=\"game\">\n      <div id=\"menu-scene\" class=\"scene\">\n        <a href=\"#game\"><span>Play</span></a>\n      </div>\n\n      <div id=\"game-scene\" class=\"scene\">\n        <canvas id=\"game-canvas\" width=\"320\" height=\"440\">\n          This is an interactive audio game with some music notes moving from top to bottom.\n        </canvas>\n      </div>\n    </div>\n    ```", "```js\n    #game {\n      position: relative;\n      width: 320px;\n      height: 440px;\n      overflow: hidden;\n    }\n    .scene {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    #menu-scene {\n      background: url(../images/menu_bg.png);\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n\n    #game-scene {\n      background: url(../images/game_bg.png);\n      top: -440px;\n    }\n\n    #game-scene.show-scene {\n      top: 0;\n      transition: top 0.3s ease-out;\n    }\n    ```", "```js\n    $(\"a[href='#game']\").click(function(){\n       // existing code here.\n\n       $(\"#game-scene\").addClass('show-scene');\n       return false;\n    });\n    ```", "```js\n<div id=\"game\">\n  <div id=\"menu-scene\" class=\"scene\"></div>\n  <div id=\"game-scene\" class=\"scene\"></div>\n  <div id=\"gameover-scene\" class=\"scene\"></div>\n  <div id=\"credit-scene\" class=\"scene\"></div>\n  <div id=\"leaderboard-scene\" class=\"scene\"></div>\n</div>\n```", "```js\n    <audio id=\"melody\">\n      <source src=\"img/minuet_in_g_melody.aac\" />\n      <source src=\"img/minuet_in_g_melody.ogg\" />\n    </audio>\n\n    <audio id=\"base\">\n      <source src=\"img/minuet_in_g.aac\" />\n      <source src=\"img/minuet_in_g.ogg\" />\n    </audio>\n    ```", "```js\n    function MusicNote(time,line){\n       this.time = time;\n       this.line = line;\n    }\n    function Dot(distance, line) {\n       this.distance = distance;\n       this.line = line;\n       this.missed = false;\n    }\n    ```", "```js\n    var audiogame = {\n      // an array to store all music notes data.\n      musicNotes: [],\n      leveldata: \"1.592,3;1.984,2;2.466,1;2.949,2;4.022,3;\",\n      // the visual dots drawn on the canvas.\n      dots: [],\n      // for storing the starting time\n      startingTime: 0,\n      // reference of the dot image\n      dotImage: new Image(),\n\n      // existing code inside audiogame object.\n    }\n    ```", "```js\n    var audiogame = {\n      // existing code inside audiogame object.\n\n      setupLevelData: function() {\n        var notes = this.leveldata.split(\";\");\n\n        // store the total number of dots\n        this.totalDotsCount = notes.length;\n\n        for(var i=0, len=notes.length; i<len; i++) {\n          var note = notes[i].split(\",\");\n          var time = parseFloat(note[0]);\n          var line = parseInt(note[1]);\n          var musicNote = new MusicNote(time,line);\n          this.musicNotes.push(musicNote);\n        }\n      },\n    }\n    ```", "```js\n    initMedia: function() {\n      // existing code goes here.\n\n      // melody and base\n      this.melody = document.getElementById(\"melody\");\n      this.base = document.getElementById(\"base\");\n\n      // load the dot image\n      this.dotImage.src = \"images/dot.png\";\n    }\n    ```", "```js\n    initGame: function() {\n      // existing code goes here.\n      this.canvas = document.getElementById(\"game-canvas\");\n      this.canvasContext = this.canvas.getContext('2d');\n    }\n    ```", "```js\n    var audiogame = {\n      // existing code goes here.\n      startGame: function() {\n        var date = new Date();\n        this.startingTime = date.getTime();\n\n        this.registerMusicPlayback();\n      },\n\n      registerMusicPlayback: function() {\n         // play both the melody and base\n        this.melody.play();\n        this.base.play();\n\n        // pause for 3550ms to sync with the music dots movement.\n        this.melody.pause();\n        this.base.pause();\n        setTimeout(this.playMusic.bind(this), 3550);\n      },\n\n      playMusic: function() {\n        this.melody.play();\n        this.base.play();\n      },\n    };\n    ```", "```js\n    var audiogame = {\n      // existing code goes here.\n\n      gameloop: function() {\n        var canvas = this.canvas;\n        var ctx = this.canvasContext;\n\n        // show new dots\n        // if the game is started\n        if (this.startingTime !== 0)  {\n          for(var i=0, len=this.musicNotes.length; i<len; i++) {\n            var date = new Date();\n            var elapsedTime = (date.getTime() - this.startingTime)/1000;\n            var note = this.musicNotes[i];\n\n            var timeDiff = note.time - elapsedTime;\n\n            // When time difference is short enough.\n            if (timeDiff >= 0 && timeDiff <= 0.03)  {\n              var dot = new Dot(ctx.canvas.height-150, note.line);\n              this.dots.push(dot);\n            }\n          }\n        }\n\n        // loop again to remove dots that are out of the screen.\n        for(var i=this.dots.length-1; i>=0; i--) {\n          // remove missed dots after moved to the bottom\n          if (this.dots[i].distance < -100)  {\n            this.dots.splice(i, 1);\n          }\n        }\n\n        // move the dots\n        for(var i=0, len=this.dots.length; i<len; i++) {\n          this.dots[i].distance -= 2.5;\n        }\n\n        // only clear the dirty area, that is the middle area\n        ctx.clearRect(ctx.canvas.width/2-200, 0, 400, ctx.canvas.height);\n\n        // draw the music note dots\n        for(var i=0, len=this.dots.length; i<len; i++) {\n          // draw the music dot.\n          ctx.save();\n          var center = canvas.width/2;\n          var dot = this.dots[i];\n          var x = center-100\n          if (dot.line === 2) {\n            x = center;\n          } else if (dot.line === 3) {\n            x = center+100;\n          }\n          ctx.translate(x, ctx.canvas.height-80-this.dots[i].distance);\n          ctx.drawImage(this.dotImage, -this.dotImage.width/2, -this.dotImage.height/2);\n          ctx.restore();\n        }\n      }\n    };\n    ```", "```js\n    audiogame.setupLevelData();\n    setInterval(audiogame.gameloop.bind(audiogame), 30);\n    ```", "```js\n    game.startGame();\n    ```", "```js\nmusic_current_time, line; music_current_time, line; â€¦\n```", "```js\nmusicNotes = [];\nleveldata = \"1.592,3;1.984,2;2.466,1;2.949,2;4.022,3;\";\nfunction setupLevelData() {\n   var notes = audiogame.leveldata.split(\";\");\n   for(var i=0, len=notes.length; i<len; i++) {\n      var note = notes[i].split(\",\");\n      var time = parseFloat(note[0]);\n      var line = parseInt(note[1]);\n      var musicNote = new MusicNote(time,line);\n      musicNotes.push(musicNote);\n   }\n}\n```", "```js\n// starting game\nvar date = new Date();\naudiogame.startingTime = date.getTime();\n\n// some time later\nvar date = new Date();\nvar elapsedTime = (date.getTime() - audiogame.startingTime)/1000;\n```", "```js\nif (audiogame.startingTime !== 0) {\n  for(var i in audiogame.musicNotes) {\n    // get the elapsed time from beginning of the melody\n    var date = new Date();\n    var elapsedTime = (date.getTime() - audiogame.startingTime)/1000;\n    var note = audiogame.musicNotes[i];\n\n    // check whether the dot appear time is as same as the elapsed time\n    var timeDiff = note.time - elapsedTime;\n    if (timeDiff >= 0 && timeDiff <= 0.03) {\n      // create the dot when the appear time is within one frame of the elapsed time\n      var dot = new Dot(ctx.canvas.height-150, note.line);\n      audiogame.dots.push(dot);\n    }\n  }\n}\n```", "```js\nfor(var i=0, len=this.dots.length; i<len; i++) {\n   audiogame.dots[i].distance -= 2.5;\n}\n```", "```js\n// draw the dot\nctx.save();\nvar x = ctx.canvas.width/2-100\nif (audiogame.dots[i].line === 2) {\n   x = ctx.canvas.width/2;\n}\nelse if (audiogame.dots[i].line === 3) {\n   x = ctx.canvas.width/2+100;\n}\nctx.translate(x, ctx.canvas.height-80-audiogame.dots[i].distance);\nctx.drawImage(audiogame.dotImage, -audiogame.dotImage.width/2, -audiogame.dotImage.height/2);\n```", "```js\n    <div id=\"game-scene\" class=\"scene\">\n       <!-- existing code goes here -->\n       <div id=\"hit-line-1\" class=\"hit-line hide\"></div>\n       <div id=\"hit-line-2\" class=\"hit-line hide\"></div>\n       <div id=\"hit-line-3\" class=\"hit-line hide\"></div>\n    </div>\n    ```", "```js\n    <footer>\n       <p>This is an example of making audio game in HTML5\\. Press J, K, L to play.\n       </p>\n    </footer>\n    ```", "```js\n    #hit-line-1 {\n      left: 35px;\n      top: 335px;\n    }\n\n    #hit-line-2 {\n      left: 135px; /* 320/2-50/2 */\n      top:  335px;\n    }\n\n    #hit-line-3 {\n      left: 235px;\n      top: 335px;\n    }\n    ```", "```js\n    initKeyboardListener: function() {\n      var game = this;\n\n      // keydown\n      $(document).keydown(function(e){\n        // our target is J(74), K(75), L(76)\n        var line = e.which-73;\n\n        game.hitOnLine(line);\n\n      });\n      $(document).keyup(function(e){\n        var line = e.which-73;\n        $('#hit-line-'+line).removeClass('show');\n        $('#hit-line-'+line).addClass('hide');\n      });\n    },\n\n    hitOnLine: function (lineNo) {\n      $('#hit-line-'+lineNo).removeClass('hide');\n      $('#hit-line-'+lineNo).addClass('show');\n\n      // check if hit a music note dot\n      for(var i=this.dots.length-1; i>=0; i--) {\n        if (lineNo === this.dots[i].line && Math.abs(this.dots[i].distance) < 20) {\n          // remove the hit dot from the dots array\n          this.dots.splice(i, 1);\n        }\n      }\n    },\n    ```", "```js\n    initGame: function() {\n      // existing code goes here.\n      this.initKeyboardListener();\n    },\n    ```", "```js\n$(document).keydown(function(e){\n   var line = e.which-73;\n   $('#hit-line-'+line).removeClass('hide');\n   $('#hit-line-'+line).addClass('show');\n});\n$(document).keyup(function(e){\n   var line = e.which-73;\n   $('#hit-line-'+line).removeClass('show');\n   $('#hit-line-'+line).addClass('hide');\n});\n```", "```js\n// check whether we hit a music note dot\n  for(var i=this.dots.length-1; i>=0; i--)  {\n    if (lineNo === this.dots[i].line && Math.abs(this.dots[i].distance) < 20)    {\n      // remove the hit dot from the dots array\n      this.dots.splice(i, 1);\n    }\n  }\n```", "```js\narray.splice(index, 1);\n```", "```js\narray.splice(index, length, element1, element2, â€¦, elementN);\n```", "```js\n    var audiogame = {\n      totalSuccessCount: 0,\n\n      // storing the success count of last 5 results.\n      successCount: 5,\n\n      // existing code goes here.\n\n    };\n    ```", "```js\n    // check if hit a music note dot\n    for(var i in audiogame.dots) {\n       if (lineNo === audiogame.dots[i].line && Math.abs(audiogame.dots[i].distance) < 20) {\n          // remove the hit dot from the dots array\n          audiogame.dots.splice(i, 1);\n\n          // increase the success count\n          audiogame.successCount+=1;\n\n          // keep only 5 success count max.\n          audiogame.successCount = Math.min(5, audiogame.successCount);\n\n          // increase the total success count\n          audiogame.totalSuccessCount +=1;\n       }\n    }\n    ```", "```js\n    // loop again to remove dots that's out or the screen.\n    // existing code goes here.\n\n    // check missed dots\n    for(var i=this.dots.length-1; i>=0; i--) {\n       if (!audiogame.dots[i].missed && audiogame.dots[i].distance < -10) {\n          // mark the dot as missed if it's not marked before\n          audiogame.dots[i].missed = true;\n\n          // reduce the success count\n          audiogame.successCount -= 1;\n\n          // reset the success count to 0 if it is lower than 0.\n          audiogame.successCount = Math.max(0, audiogame.successCount);\n       }\n\n       // remove missed dots after moved to the bottom\n       if (audiogame.dots[i].distance < -100) {\n          audiogame.dots.splice(i, 1);\n       }\n    }\n\n    // calculate the percentage of the success in last 5 music dots\n    var successPercent = audiogame.successCount / 5;\n\n    // prevent the successPercent to exceed range(fail safe)\n    successPercent = Math.max(0, Math.min(1, successPercent));\n\n    // move the dots\n    // existing code goes here.\n    ```", "```js\n    audiogame.melody.volume = successPercent;\n    ```", "```js\naudiogame.dots.splice(index, 1);\n```", "```js\n      var audiogame = {\n        isRecordMode : true,\n        //existing code here\n    ```", "```js\n    if (game.isRecordMode) {\n      // print the stored music notes data when press \";\" (186)\n      if (e.which === 186) {\n        var musicNotesString = \"\";\n        for(var i=0, len=game.musicNotes.length; i<len; i++)     {\n          musicNotesString += game.musicNotes[i].time + \",\" + game.musicNotes[i].line+\";\";\n        }\n        console.log(musicNotesString);\n      }\n\n      var currentTime = game.melody.currentTime.toFixed(3);\n      var note = new MusicNote(currentTime, e.which-73);\n      game.musicNotes.push(note);\n    }\n    ```", "```js\n    if (!audiogame.isRecordMode) {\n      audiogame.setupLevelData();\n      setInterval(audiogame.gameloop.bind(audiogame), 30);\n    }\n    ```", "```js\nvar currentTime = audiogame.melody.currentTime.toFixed(3);\nvar note = new MusicNote(currentTime, e.which-73);\naudiogame.musicNotes.push(note);\n```", "```js\n    <div id=\"hit-line-1\" data-line-no=\"1\" class=\"hit-line hide\"></div>\n    <div id=\"hit-line-2\" data-line-no=\"2\" class=\"hit-line hide\"></div>\n    <div id=\"hit-line-3\" data-line-no=\"3\" class=\"hit-line hide\"></div>\n    ```", "```js\n    initTouchAndClick: function() {\n      var game = this;\n      $('.hit-line').bind('mousedown touchstart', function() {\n        var line = $(this).data('lineNo') * 1; // parse in int\n        game.hitOnLine(line);\n        return false;\n      });\n\n      $('.hit-line').bind('mouseup touchend', function(){\n        var line = $(this).data('lineNo') * 1; // parse in int\n        $('#hit-line-'+line).removeClass('show');\n        $('#hit-line-'+line).addClass('hide');\n      });\n    },\n    ```", "```js\n    initGame: function() {\n      // existing code goes here.\n\n      this.initTouchAndClick();\n    },\n    ```", "```js\n    $(audiogame.melody).bind('ended', onMelodyEnded);\n    ```", "```js\n      // show game over scene on melody ended.\n      function onMelodyEnded() {\n        console.log('song ended');\n        alert ('success percent: ' + audiogame.totalSuccessCount / audiogame.totalDotsCount * 100 + '%');\n      }\n    })(jQuery);\n    ```"]