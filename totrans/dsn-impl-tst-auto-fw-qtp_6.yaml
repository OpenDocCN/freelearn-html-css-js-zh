- en: Chapter 6. DOM- and XPath-based Framework in Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. Web应用程序中的基于DOM和XPath的框架
- en: For web application automation, QTP allows us to use the **Document Object Model**
    (**DOM**) and execute JavaScript. QTP also finds the elements using **XPath**.
    In this chapter, we are going to learn about DOM, basic JavaScript, and XPath
    terminology. We'll also learn, with an example, how to use XPath to find the elements
    and use them in creating scripts. QTP allows executing the JavaScript code in
    scripts. JavaScript can use the HTML DOM for finding elements, changing HTML content,
    attributes, style, and removing the HTML elements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Web应用程序自动化，QTP允许我们使用**文档对象模型**（**DOM**）和执行JavaScript。QTP还使用**XPath**查找元素。在本章中，我们将学习关于DOM、基本JavaScript和XPath术语。我们还将通过示例学习如何使用XPath查找元素并在创建脚本中使用它们。QTP允许在脚本中执行JavaScript代码。JavaScript可以使用HTML
    DOM查找元素、更改HTML内容、属性、样式以及删除HTML元素。
- en: Document Object Model
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档对象模型
- en: The Document Object Model (DOM) allows representation of an HTML document as
    a tree structure as well as allows dynamic access and updating of content, structure,
    and style of an HTML document.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 文档对象模型（DOM）允许将HTML文档表示为树结构，同时也允许动态访问和更新HTML文档的内容、结构和样式。
- en: HTML DOM
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML DOM
- en: 'HTML DOM defines objects and properties of HTML elements and methods to access
    them. In simpler words, HTML DOM allows standard ways to add, retrieve, change,
    or delete HTML elements. In the HTML DOM everything is considered as a node:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: HTML DOM定义了HTML元素的对象和属性以及访问它们的方法。用简单的话说，HTML DOM允许以标准方式添加、检索、更改或删除HTML元素。在HTML
    DOM中，一切都被视为节点：
- en: The entire document is a node called node document
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个文档是一个名为节点文档的节点
- en: Each HTML element is an element node
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个HTML元素都是一个元素节点
- en: Text inside element is a text node
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素内的文本是一个文本节点
- en: Every attribute in a node is an attribute node
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点中的每个属性都是一个属性节点
- en: Comment is a comment node
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释是一个注释节点
- en: Node relationships – parents, children, and siblings
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节点关系 - 父节点、子节点和兄弟节点
- en: 'HTML is a mark-up language which defines tags; these tags are associated with
    each other in a relationship which is shown as following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: HTML是一种标记语言，它定义了标签；这些标签以以下方式相互关联：
- en: Each document has one root element and that does not parent.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个文档有一个根元素，并且没有父元素。
- en: A node can have many children but only one parent.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个节点可以有多个子节点，但只有一个父节点。
- en: Nodes sharing the same parents are called siblings.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有相同父节点的节点被称为兄弟节点。
- en: 'Look at the following HTML code fragment to understand the relationship:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 看以下HTML代码片段以了解关系：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The relationship among the tags in the preceding script is shown as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 前面脚本中标签之间的关系如下所示：
- en: The `<html>` tag is the root node and it has no parent node
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<html>`标签是根节点，它没有父节点'
- en: 'The `<html>` node is the parent node of the `<head>` and `<body>` tags, or
    in other words, the `<html>` node has two child nodes: `<head>` and `<body>`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<html>`节点是`<head>`和`<body>`标签的父节点，换句话说，`<html>`节点有两个子节点：`<head>`和`<body>`'
- en: The parent node of the QTP text node is the `<h1>` node
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QTP文本节点的父节点是`<h1>`节点
- en: 'The `<head>` node has one child node: the `<title>` node'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<head>`节点有一个子节点：`<title>`节点'
- en: '`DOM Example` is a text node and its parent is the `<title>` node'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOM Example`是一个文本节点，其父节点是`<title>`节点'
- en: The `<h1>` and `<p>` nodes are child nodes of `<body>` and siblings to each
    other
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<h1>`和`<p>`节点是`<body>`的子节点，并且彼此是兄弟节点'
- en: The `<head>` element is the first child of the `<html>` element and `<body>`
    element is the last child of the `<html>` element
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<head>`元素是`<html>`元素的第一个子节点，而`<body>`元素是`<html>`元素的最后一个子节点'
- en: The `<h1>` element is the first child of the `<body>` element and the `<p>`
    element is the last child of the `<body>` element
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<h1>`元素是`<body>`元素的第一个子节点，而`<p>`元素是`<body>`元素的最后一个子节点'
- en: JavaScript and DOM
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript和DOM
- en: 'DOM allows JavaScript to manipulate all HTML elements, HTML attributes, and
    CSS styles. It also allows responding to the events that occur in the page. The
    DOM allows the following actions with JavaScript:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: DOM允许JavaScript操作所有HTML元素、HTML属性和CSS样式。它还允许响应页面中发生的事件。DOM允许JavaScript执行以下操作：
- en: Finding HTML elements
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找HTML元素
- en: Changing the CSS (Cascading Style Sheets) of HTML elements
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改HTML元素的CSS（层叠样式表）
- en: Modifying the content (`innerHTML`) of HTML elements
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改HTML元素的文本内容（`innerHTML`）
- en: Responding to HTML DOM events
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应HTML DOM事件
- en: Adding or removing HTML elements
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加或删除HTML元素
- en: Finding HTML elements
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找HTML元素
- en: 'DOM allows finding HTML elements in the following ways:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: DOM允许以下方式查找HTML元素：
- en: By ID
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过ID
- en: By name
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过名称
- en: By tag name
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过标签名
- en: By class name
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过类名
- en: Finding HTML elements by ID
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过ID查找HTML元素
- en: 'The `getElementById` method allows retrieving the elements by IDs, for example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`getElementById`方法允许通过ID检索元素，例如：'
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The method will return the element as an object. If the element is not found,
    the ID will contain a null value.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将返回一个对象。如果找不到元素，ID将包含一个null值。
- en: Finding HTML elements by tag name
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过标签名查找HTML元素
- en: 'The `getElementsByTagName` method allows retrieving the elements by tag name,
    for example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`getElementsByTagName`方法允许通过标签名检索元素，例如：'
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Finding HTML elements by name
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过名称查找HTML元素
- en: 'Retrieve the elements by tag name using the `getElementsByTagName` method,
    as shown in the following example. The `getElementsByName` method allows retrieving
    the elements by tag name, for example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`getElementsByTagName`方法通过标签名检索元素，如下例所示。`getElementsByName`方法允许通过标签名检索元素，例如：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Finding HTML elements by className
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过className查找HTML元素
- en: 'To retrieve the elements by class name using the `getElementsByClassName` method
    as shown in the following example. The `getElementsByClassName` allows retrieving
    the elements by class name, for example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如下例所示，使用`getElementsByClassName`方法通过类名检索元素。`getElementsByClassName`允许通过类名检索元素，例如：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Finding elements using the `getElementsByClassName` method does not work in
    IE 5, 6, 7, and 8.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`getElementsByClassName`方法查找元素在IE 5、6、7和8中不起作用。
- en: Changing the HTML content
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改HTML内容
- en: 'Changing the content of an HTML element is simple as it can be achieved through
    changing the `innerHTML` property of an HTML element. Use this syntax:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 更改HTML元素的内容非常简单，因为它可以通过更改HTML元素的`innerHTML`属性来实现。使用以下语法：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following example changes the content of an HTML element:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例更改了HTML元素的内容：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Changing the HTML attribute
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改HTML属性
- en: 'Retrieve the HTML element using the `getElementById` method as shown, in the
    following example, and change the attribute with a new value of attribute:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如下例所示，使用`getElementById`方法检索HTML元素，并更改具有新值的属性：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following example changes the attribute with a new value of attribute:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例更改了具有新值的属性：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Changing the HTML style
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改HTML样式
- en: 'To change the style of an HTML element, use the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改HTML元素的样式，请使用以下代码：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following example changes the style of a `<p>` element:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例更改了`<p>`元素的样式：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This example changes the style of the HTML element with `id="pid1"`, when the
    user clicks on a button:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例在用户点击按钮时更改具有`id="pid1"`的HTML元素的样式：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Responding to an event
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 响应事件
- en: 'DOM allows JavaScript code or function to be executed when an event occurs;
    for example, when a user hovers over an HTML element:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: DOM允许在事件发生时执行JavaScript代码或函数；例如，当用户将鼠标悬停在HTML元素上时：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Following are a few examples of HTML events:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些HTML事件的示例：
- en: 'In the following example, a function is called from the event handler: An event
    handler allows us to call a JavaScript function, as shown in the following example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，从事件处理器中调用了一个函数：事件处理器允许我们调用JavaScript函数，如下所示：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Creating new HTML elements
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建新的HTML元素
- en: 'Create the element node first, and then append it to an existing element:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建元素节点，然后将其附加到现有元素：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding code can be explained as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码可以解释如下：
- en: It creates a new `<p>` element
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它创建了一个新的`<p>`元素
- en: To add text to the `<p>` element, create a text node first
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要向`<p>`元素添加文本，首先创建一个文本节点
- en: Append the text node to the `<p>` element
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文本节点附加到`<p>`元素
- en: It finds an existing element
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它找到现有元素
- en: It appends a new element to the existing element
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将新元素附加到现有元素上
- en: Removing an existing HTML element
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除现有HTML元素
- en: 'Before removing the child element, know the parent of the element and then
    remove it, for example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在移除子元素之前，了解元素的父元素，然后移除它，例如：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding HTML document contains a `<div>` element with two child nodes
    (two `<p>` elements):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下HTML文档包含一个具有两个子节点（两个`<p>`元素）的`<div>`元素：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The DOM requires knowing that both the elements and their parent require removing.
    It does not allow removing the child without its parent''s reference. The workaround
    uses the `parentNode` property of the child object to get the parent and then
    uses `removeChild` to remove it:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: DOM要求知道元素及其父元素都需要被移除。它不允许在没有父元素引用的情况下移除子元素。解决方案使用子对象的`parentNode`属性来获取父元素，然后使用`removeChild`来移除它：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: DOM and QTP
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DOM和QTP
- en: QuickTest Object property for a Web object allows us to get a reference to the
    DOM object, and can perform any operation on a DOM object. For example, the following
    code shows that the object on the page allows retrieving the element by name `username`,
    that is, the textbox in the next step assigns the value as `ashish`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: QuickTest 对 Web 对象的属性允许我们获取 DOM 对象的引用，并可以在 DOM 对象上执行任何操作。例如，以下代码显示页面上的对象允许通过名称
    `username` 获取元素，即下一步的文本框将值设置为 `ashish`。
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following code snippet shows various operations that can be performed using
    the `Object` property of the web object:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了可以使用 Web 对象的 `Object` 属性执行的各种操作：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Firing an event
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触发事件
- en: 'QTP allows firing of the events on the web objects:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: QTP 允许在 Web 对象上触发事件：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following example uses the `FireEvent` method to trigger the `onpropertychange`
    event on a form:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用 `FireEvent` 方法触发表单上的 `onpropertychange` 事件：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'QTP allows executing JavaScript code. There are two JavaScript functions that
    allow us to interact with web pages. We can retrieve objects and perform the actions
    on them or we can retrieve the properties from the element on the pages:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: QTP 允许执行 JavaScript 代码。有两个 JavaScript 函数允许我们与网页交互。我们可以检索对象并在它们上执行操作，或者我们可以从页面上的元素检索属性：
- en: '`RunScript` executes the JavaScript code, passed as an argument to this function.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`RunScript` 执行作为此函数参数传递的 JavaScript 代码。'
- en: 'The following example shows how the `RunScript` method calls the `ImgCount`
    method, which returns the number of images in the page:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了 `RunScript` 方法如何调用 `ImgCount` 方法，该方法返回页面中的图像数量：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`RunScriptsFormFile` uses the full path of the JavaScript files to execute
    it. The location can be an absolute or relative filesystem path or a quality center
    path.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`RunScriptsFormFile` 使用 JavaScript 文件的完整路径来执行它。位置可以是绝对或相对文件系统路径，或者是一个质量中心路径。'
- en: 'The following is a sample JavaScript file (`logo.js`):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例 JavaScript 文件（`logo.js`）：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Use the `logo.js` file, as shown in the following code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码中的 `logo.js` 文件：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding example uses the `RunScriptFromFile` method to remove a DOM element
    from a web page and checks if the page still behaves correctly when the DOM element
    has been removed.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例使用 `RunScriptFromFile` 方法从网页中删除一个 DOM 元素，并检查在删除 DOM 元素后页面是否仍然表现正确。
- en: Using XPath
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 XPath
- en: '**XPath** allows navigating and finding elements and attributes in an HTML
    document. XPath uses path expressions to navigate in HTML documents. QTP allows
    XPath to create the object description, for example:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**XPath** 允许在 HTML 文档中导航和查找元素和属性。XPath 使用路径表达式在 HTML 文档中导航。QTP 允许使用 XPath 创建对象描述，例如：'
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the following section, we will learn the various XPath terminologies and
    methodologies to find the objects using XPath.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习各种 XPath 术语和方法，以使用 XPath 查找对象。
- en: XPath terminology
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XPath 术语
- en: 'XPath uses various terms to define elements and their relationships among HTML
    elements, as shown in the following table:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 使用各种术语来定义元素及其在 HTML 元素之间的关系，以下表格显示了这些术语：
- en: '| Atomic values | Atomic values are nodes with no children or parent |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 原子值 | 原子值是没有子节点或父节点的节点 |'
- en: '| Ancestors | A node''s parent, parent''s parent, and so on |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 祖先 | 一个节点的父节点、父节点的父节点，依此类推 |'
- en: '| Descendants | A node''s children, children''s children, and so on |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 后代 | 一个节点的子节点、子节点的子节点，依此类推 |'
- en: '| Parent | Each element and attribute has one parent |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 父节点 | 每个元素和属性都有一个父节点 |'
- en: '| Children | Element nodes may have zero, one, or more children |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 子节点 | 元素节点可以有零个、一个或多个子节点 |'
- en: '| Siblings | Nodes that have the same parent |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 同级 | 具有相同父节点的节点 |'
- en: Selecting nodes
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择节点
- en: 'A path expression allows selecting nodes in a document. The commonly used path
    expressions are shown in the following table:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 路径表达式允许在文档中选择节点。以下表格显示了常用的路径表达式：
- en: '| Symbol | Meaning |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 符号 | 含义 |'
- en: '| --- | --- |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `/`(slash) | Select elements relative to the root node |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `/`(斜杠) | 选择相对于根节点的元素 |'
- en: '| `//`(double slash) | Select nodes in the document from the current node that
    match the selection irrespective of its position |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `//`(双斜杠) | 从当前节点选择文档中的节点，无论其位置如何都匹配选择 |'
- en: '| `.`(dot) | Represents the current node |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `.`(点) | 表示当前节点 |'
- en: '| `..` | Represents the parent of the current node |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `..` | 表示当前节点的父节点 |'
- en: '| `@` | Represents an attribute |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `@` | 表示一个属性 |'
- en: '| `nodename` | Selects all nodes with the name "nodename" |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `nodename` | 选择所有名为 "nodename" 的节点 |'
- en: Slash (`/`) is used in the beginning and it defines an absolute path; for example,
    `/html/head/title` returns the `title` tag. It defines ancestor and descendant
    relationships if used in the middle; for example, `//div/table` returns the `div`
    containing a table.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 斜杠 (`/`) 在开头使用时定义绝对路径；例如，`/html/head/title` 返回 `title` 标签。如果在中部使用，它定义祖先和后代关系；例如，`//div/table`
    返回包含表格的 `div`。
- en: Double slash (`//`) is used to find a node in any location; for example, `//table`
    returns all the tables. It defines a descendant relationship if used in the middle;
    for example, `/html//title` returns the `title` tag, which is descendant of the
    `html` tag.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 双斜杠 (`//`) 用于在任意位置查找节点；例如，`//table` 返回所有表格。如果在中部使用，它定义后代关系；例如，`/html//title`
    返回 `title` 标签，它是 `html` 标签的后代。
- en: 'Refer to the following table to see a few more examples with their meanings:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下表格，查看更多示例及其含义：
- en: '| Expression | Meaning |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 表达式 | 含义 |'
- en: '| --- | --- |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `//a` | Find all anchor tags |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `//a` | 查找所有锚点标签 |'
- en: '| `//a//img` | List the images that are inside a link |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `//a//img` | 列出链接内的图像 |'
- en: '| `//img/@alt` | Show all the `alt` tags |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `//img/@alt` | 显示所有 `alt` 标签 |'
- en: '| `//a/@href` | Show the `href` attribute for every link |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `//a/@href` | 显示每个链接的 `href` 属性 |'
- en: '| `//a[@*]` | Anchor tab with any attribute |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `//a[@*]` | 带有任意属性的锚点标签 |'
- en: '| `//title/text()` or `/html/head/title/text()` | Get the title of a page |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `//title/text()` 或 `/html/head/title/text()` | 获取页面的标题 |'
- en: '| `//img[@alt]` | List the images that have `alt` tags |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `//img[@alt]` | 列出具有 `alt` 标签的图像 |'
- en: '| `//img[not(@alt)]` | List the images that don''t have `alt` tags |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `//img[not(@alt)]` | 列出没有 `alt` 标签的图像 |'
- en: '| `//*[@id=''mainContent'']` | Get an element with a particular CSS ID |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `//*[@id=''mainContent'']` | 获取具有特定 CSS ID 的元素 |'
- en: '| `//div [not(@id="div1")]` | Make an array element from the XPath |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `//div [not(@id="div1")]` | 从 XPath 创建数组元素 |'
- en: '| `//p/..` | Selects the parent element of `p` (paragraph) child |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `//p/..` | 选择 `p`（段落）子节点的父元素 |'
- en: '| `XXX[@att]` | Selects all the child elements of `XXX` with an attribute named
    `att` |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `XXX[@att]` | 选择 `XXX` 的所有具有名为 `att` 的属性子元素 |'
- en: '| `./@*` for example, `//script/./@*` | Finds all attribute values of current
    element |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `./@*` 例如，`//script/./@*` | 查找当前元素的 所有属性值 |'
- en: Predicates
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断言
- en: 'A predicate is embedded in square brackets and is used to find out specific
    node(s) or a node that contains a specific value:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 断言被嵌入在方括号中，用于查找特定节点或包含特定值的节点：
- en: '`//p[@align]`: This allows finding all the tags that have align attribute value
    as center'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`//p[@align]`: 这允许找到所有具有对齐属性值为中心的标签'
- en: '`//img[@alt]`: This allows finding all the `img` (image) tags that contain
    the `alt` tag'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`//img[@alt]`: 这允许找到所有包含 `alt` 标签的 `img`（图像）标签'
- en: '`//table[@border]`: This allows finding all the `table` tags that contain `border`
    attributes'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`//table[@border]`: 这允许找到所有包含 `border` 属性的 `table` 标签'
- en: '`//table[@border >1]`: This finds the table with border value greater than
    1'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`//table[@border >1]`: 这找到边框值大于 1 的表格'
- en: 'Retrieve the table row using the complete path:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用完整路径检索表格行：
- en: '[PRE26]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Get the name of the parent of `//body/div/table/..` (parent of the `table` tag)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 获取 `//body/div/table/..`（`table` 标签的父节点）的名称
- en: '[PRE27]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '| Path expression | Result |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 路径表达式 | 结果 |'
- en: '| --- | --- |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `//div/p[1]` | Selects the first paragraph element that is the child of the
    `div` element |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `//div/p[1]` | 选择 `div` 元素的第一个段落元素 |'
- en: '| `//div/p [last()]` | Selects the last paragraph element that is the child
    of the `div` element |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `//div/p [last()]` | 选择 `div` 元素的最后一个段落元素 |'
- en: '| `//div/p[last()-1]` | Selects the second last paragraph element that is the
    child of the `div` element |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `//div/p[last()-1]` | 选择 `div` 元素的第二个最后一个段落元素 |'
- en: '| `//div/p[position()<3]` | Selects the first two paragraph elements that are
    children of the `div` element |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `//div/p[position()<3]` | 选择 `div` 元素的第一个两个段落元素 |'
- en: '| `//script[@language]` | Selects all script element(s) with an attribute named
    as `language` |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `//script[@language]` | 选择所有具有名为 `language` 的属性的脚本元素 |'
- en: '| `//script[@language=''javascript'']` | Selects all the script elements that
    have an attribute named `language` with a value of JavaScript |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `//script[@language=''javascript'']` | 选择所有具有名为 `language` 的属性且值为 JavaScript
    的脚本元素 |'
- en: '| `//div/p[text()>45.00]` | Selects all the paragraph elements of the `div`
    element that have a text element with a value greater than 45.00 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `//div/p[text()>45.00]` | 选择 `div` 元素的具有文本元素值大于 45.00 的所有段落元素 |'
- en: Selecting unknown nodes
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择未知节点
- en: Apart from selecting the specific nodes in XPath, XPath allows us to select
    the group of HTML elements using `*`, `@`, and `node()` functions.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在 XPath 中选择特定节点外，XPath 允许我们使用 `*`、`@` 和 `node()` 函数选择 HTML 元素的组。
- en: '`*` represents an element node'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*` 代表元素节点'
- en: '`@` represents the attribute'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@` 代表属性'
- en: '`node()` represents any node'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node()` 代表任何节点'
- en: 'The previous mentioned elements allow selecting the unknown nodes; for example:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的元素允许选择未知节点；例如：
- en: '`/div/*` selects all the child nodes of a `div` element'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/div/*` 选择 `div` 元素的所有子节点'
- en: '`//*` selects all the elements in a document'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`//*` 选择文档中的所有元素'
- en: '`//script[@*]` selects all the title elements which contain attributes'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`//script[@*]` 选择包含属性的标题元素'
- en: Selecting several paths
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择多个路径
- en: 'Use **union** | **operator** in XPath expressions for allowing to select several
    paths, as shown in the following table:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在 XPath 表达式中使用 **联合** | **运算符** 允许选择多个路径，如下表所示：
- en: '| Path expression | Action |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 路径表达式 | 操作 |'
- en: '| --- | --- |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `//div&#124;/p &#124; //div/span` | Selects all the paragraph and `span`
    elements of the `div` element |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `//div | /p | //div/span` | 选择 `div` 元素的所有段落和 `span` 元素 |'
- en: '| `//p &#124; //span` | Selects all the `p` (paragraph) and `span` elements
    in the document |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `//p | //span` | 选择文档中所有的 `p`（段落）和 `span` 元素 |'
- en: Axes in XPath
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XPath 中的轴
- en: 'An axis allows defining a node which is relative to its current node. The following
    is the list of the axes in XPath:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 轴允许定义相对于其当前节点的节点。以下是在 XPath 中的轴列表：
- en: self
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自身
- en: parent
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 父节点
- en: attribute
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性
- en: child
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子节点
- en: Ancestor and ancestor-or-self
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 祖先和祖先或自身
- en: Descendant and descendant-or-self
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后代和后代或自身
- en: Following and following-sibling
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后续和后一个兄弟
- en: Preceding and preceding-sibling
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前一个和前一个兄弟
- en: namespace
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间
- en: Locating a element using location path
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用位置路径定位元素
- en: A location of the element is represented in two ways using absolute and relative
    paths.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的位置可以用绝对和相对路径两种方式表示。
- en: 'Each step is evaluated against the nodes in the current node. The syntax looks
    like the following syntax:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 每一步都是针对当前节点中的节点进行评估。语法看起来如下：
- en: '[PRE28]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: An axis defines the tree-relationship between selected nodes and current node.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 轴定义了所选节点与当前节点之间的树形关系。
- en: A node-test allows us to identify node(s) within an axis.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 节点测试允许我们在轴中识别节点。
- en: Zero or more predicates allow further refining of the selected node set.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 零个或多个谓词允许进一步细化所选节点集。
- en: 'Take a look at the following example:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下示例：
- en: '[PRE29]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the preceding example, `ancestor-or-self is an axes`, `::*` is the nodetest
    and `[@name='userName']` is the predicate, allowing us to search all `ancestor-or-self`
    elements whose attribute names are `userName` contained in the `input` type element
    `//input[ansector-or-self::*[@name='userName']]`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`ancestor-or-self` 是一个轴，`::*` 是节点测试，`[@name='userName']` 是谓词，允许我们搜索所有包含在
    `input` 类型元素 `//input[ansector-or-self::*[@name='userName']]` 中的 `ancestor-or-self`
    元素。
- en: 'Axes allow finding the descendant of the element; for example:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 轴允许查找元素的后代；例如：
- en: '`//div[descendant::p]` allows us to find all the `div` elements having descendant
    as paragraph.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`//div[descendant::p]` 允许我们找到所有具有后代为段落的 `div` 元素。'
- en: '`descendant::p` axes allow finding the ancestor and descendant of the element,
    for example, finding all the ancestors of button or finding all the `div` whose
    descendants are `table`.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`descendant::p` 轴允许查找元素的后代和祖先，例如，查找按钮的所有祖先或查找所有后代为 `table` 的 `div`。'
- en: '[PRE30]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Use of the XPath functions:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 函数的使用：
- en: '`//div/text()`: This retrieves the text from the `div` tags using `text` functions'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`//div/text()`：使用 `text` 函数从 `div` 标签中检索文本'
- en: '`//div/node()`: Getting all the nodes under `div` tags using the `node` function'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`//div/node()`：使用 `node` 函数获取 `div` 标签下的所有节点'
- en: To get the descendant, XPath function `start-with` finds the value that starts
    with `//a[starts-with(@href,'http://ads')`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取后代，XPath 函数 `start-with` 查找以 `//a[starts-with(@href,'http://ads')]` 开头的值。
- en: Find all tags that contains the `style` attribute `//*[@style]`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 查找包含 `style` 属性的所有标签 `//*[@style]`。
- en: Operators in XPath
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XPath 中的运算符
- en: 'The XPath expressions use operators to build the conditions to be evaluated.
    The following is the list of XPath operators:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 表达式使用运算符来构建要评估的条件。以下为 XPath 运算符列表：
- en: '| Operator category | Operator | Description |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| 运算符类别 | 运算符 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Mathematical | +-*DivMOD | AdditionSubtractionMultiplicationDiv DivisionMOD
    Modulus (division remainder) |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| 数学 | +-*DivMOD | 加法减法乘法除法MOD 模数（除法余数） |'
- en: '| Equality and comparison | =!=<<=>>= | EqualNot equalLess thanLess than or
    equal toGreater thanGreater than or equal to |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| 等于和比较 | =!=<<=>>= | 等于不等于小于小于等于大于大于等于 |'
- en: '| Logical | OrAnd | Logical OrLogical And |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| 逻辑 | OrAnd | 逻辑或逻辑与 |'
- en: '| Two node sets | &#124; Union | Computes two node sets |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| 两个节点集 | &#124; 并集 | 计算两个节点集 |'
- en: 'The following table shows some examples for using the operators in XPath expressions:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了使用 XPath 表达式中的运算符的一些示例：
- en: '| Expression | Action |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| 表达式 | 操作 |'
- en: '| --- | --- |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `//input &#124; //div/input/..` | `Input` union input where `div` is its
    parent |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `//input &#124; //div/input/..` | `Input` 联合 `div` 的父级中的 `input` |'
- en: '| `//table[@border>=1]` | Retrieves the tables that have border greater than
    1 |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `//table[@border>=1]` | 获取边框大于 1 的表格 |'
- en: '| `//table[@id=3]/td[2]/text()+1` | Retrieves the text from the third row and
    second column and adds 1 to it |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `//table[@id=3]/td[2]/text()+1` | 从第三行第二列检索文本并将其加 1 |'
- en: '| `//tr[@id=1] and //tr[@id=3]` | Returns true if both expression are true
    |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `//tr[@id=1] and //tr[@id=3]` | 如果两个表达式都为真，则返回 true |'
- en: 'Example of using XPath in finding the siblings which allow finding the object
    related to their siblings and not to their location:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 XPath 在查找兄弟元素时的示例，允许找到与它们的兄弟相关的对象，而不是与它们的位置相关：
- en: '[PRE31]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Add the code to the file and save it as an `.html` file. Click on the **AddToCart**
    button.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码添加到文件中，并保存为 `.html` 文件。点击 **AddToCart** 按钮。
- en: 'Remove the following recorded script:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 删除以下记录的脚本：
- en: '[PRE32]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Replace and use the following script:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 替换并使用以下脚本：
- en: '[PRE33]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This preceding script allows clicking on the button (**AddToCart**), which
    is the sibling of the HP QuickTest Professional text. To click on the **AddToCart**
    button, which is the sibling of HP Quality Center text, use the following code:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 此前的脚本允许点击按钮（**AddToCart**），该按钮是 HP QuickTest Professional 文本的兄弟。要点击与 HP Quality
    Center 文本为兄弟的 **AddToCart** 按钮，请使用以下代码：
- en: '[PRE34]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'XPath can be implemented in the QTP Scripts. The following section explains
    the various usages of XPath in a web page. Examples of the usage of XPath are:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 可以在 QTP 脚本中实现。以下部分解释了 XPath 在网页中的各种用法。XPath 用法的示例包括：
- en: Entering a value in the text box
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文本框中输入值
- en: Selecting the value from a drop-down list
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从下拉列表中选择值
- en: Clicking on images and buttons
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击图片和按钮
- en: Finding objects by ID, tag name, name, and attributes
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 ID、标签名、名称和属性查找对象
- en: Allowing to extract the information for validation
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许提取信息进行验证
- en: Dealing with duplicate objects as array subscripts
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将重复对象作为数组下标处理
- en: 'Key steps to create a framework using XPath are:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 XPath 创建框架的关键步骤包括：
- en: Identify the flow to be recorded.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别要记录的流程。
- en: Create OR (create OR for each page or use the object description).
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 OR（为每个页面创建 OR 或使用对象描述）。
- en: Identify the XPath that identifies the object uniquely.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别唯一标识对象的 XPath。
- en: Define the XPath that allows us to retrieve an element and defines it as a constant.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义允许我们检索元素并定义为常量的 XPath。
- en: Use them as object descriptions.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将它们用作对象描述。
- en: 'Tips for scripting using XPath:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 XPath 编写脚本的技巧：
- en: Use descriptive programming (use `index` property) for handling duplicate objects
    or array subscripts in XPath expressions
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用描述性编程（使用 `index` 属性）处理 XPath 表达式中的重复对象或数组下标
- en: XPath allows the use of index for collection of elements
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XPath 允许使用索引来收集元素
- en: Retrieve `innerHTML` with `GetROProperty` to get the values
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `GetROProperty` 获取 `innerHTML` 以获取值
- en: Define object description using XPath as constant, allowing easier maintenance,
    and only a single place to change and no need to change all over the script
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 XPath 作为常量定义对象描述，以便更容易维护，并且只需在一个地方更改，无需在整个脚本中更改
- en: Summary
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned about various concepts and examples. The knowledge
    of DOM, JavaScript, and XPath is very handy for creating scripts. The XPath and
    DOM are the least used concepts in the QTP for script creation and validation,
    but these are helpful in creating manual checkpoints by retrieving the data from
    the web pages conveniently. Path is a really good way to navigate your site when
    there are no IDs on elements that you need to work with or near the element you
    want to work with. The next chapter talks about capturing and sharing the lessons
    learned during the test automation framework designing, and implementing them
    for future reference.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了各种概念和示例。DOM、JavaScript 和 XPath 的知识对于编写脚本非常有用。XPath 和 DOM 是在 QTP 中用于脚本创建和验证最少使用的概念，但通过方便地从网页中检索数据，这些概念在创建手动检查点时非常有帮助。当需要处理或靠近的元素没有
    ID 时，路径是一个真正好的导航网站的方法。下一章将讨论在测试自动化框架设计过程中捕获和分享所学到的经验，并将它们用于未来的参考。
