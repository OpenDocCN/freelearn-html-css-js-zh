- en: Chapter 6. DOM- and XPath-based Framework in Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For web application automation, QTP allows us to use the **Document Object Model**
    (**DOM**) and execute JavaScript. QTP also finds the elements using **XPath**.
    In this chapter, we are going to learn about DOM, basic JavaScript, and XPath
    terminology. We'll also learn, with an example, how to use XPath to find the elements
    and use them in creating scripts. QTP allows executing the JavaScript code in
    scripts. JavaScript can use the HTML DOM for finding elements, changing HTML content,
    attributes, style, and removing the HTML elements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Document Object Model
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Document Object Model (DOM) allows representation of an HTML document as
    a tree structure as well as allows dynamic access and updating of content, structure,
    and style of an HTML document.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: HTML DOM
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'HTML DOM defines objects and properties of HTML elements and methods to access
    them. In simpler words, HTML DOM allows standard ways to add, retrieve, change,
    or delete HTML elements. In the HTML DOM everything is considered as a node:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: The entire document is a node called node document
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each HTML element is an element node
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text inside element is a text node
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every attribute in a node is an attribute node
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comment is a comment node
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node relationships – parents, children, and siblings
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'HTML is a mark-up language which defines tags; these tags are associated with
    each other in a relationship which is shown as following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Each document has one root element and that does not parent.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A node can have many children but only one parent.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodes sharing the same parents are called siblings.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Look at the following HTML code fragment to understand the relationship:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The relationship among the tags in the preceding script is shown as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: The `<html>` tag is the root node and it has no parent node
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `<html>` node is the parent node of the `<head>` and `<body>` tags, or
    in other words, the `<html>` node has two child nodes: `<head>` and `<body>`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The parent node of the QTP text node is the `<h1>` node
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `<head>` node has one child node: the `<title>` node'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOM Example` is a text node and its parent is the `<title>` node'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<h1>` and `<p>` nodes are child nodes of `<body>` and siblings to each
    other
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<head>` element is the first child of the `<html>` element and `<body>`
    element is the last child of the `<html>` element
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<h1>` element is the first child of the `<body>` element and the `<p>`
    element is the last child of the `<body>` element
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript and DOM
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'DOM allows JavaScript to manipulate all HTML elements, HTML attributes, and
    CSS styles. It also allows responding to the events that occur in the page. The
    DOM allows the following actions with JavaScript:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Finding HTML elements
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the CSS (Cascading Style Sheets) of HTML elements
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the content (`innerHTML`) of HTML elements
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responding to HTML DOM events
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding or removing HTML elements
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding HTML elements
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'DOM allows finding HTML elements in the following ways:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: By ID
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By name
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By tag name
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By class name
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding HTML elements by ID
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `getElementById` method allows retrieving the elements by IDs, for example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The method will return the element as an object. If the element is not found,
    the ID will contain a null value.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Finding HTML elements by tag name
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `getElementsByTagName` method allows retrieving the elements by tag name,
    for example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Finding HTML elements by name
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Retrieve the elements by tag name using the `getElementsByTagName` method,
    as shown in the following example. The `getElementsByName` method allows retrieving
    the elements by tag name, for example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Finding HTML elements by className
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To retrieve the elements by class name using the `getElementsByClassName` method
    as shown in the following example. The `getElementsByClassName` allows retrieving
    the elements by class name, for example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finding elements using the `getElementsByClassName` method does not work in
    IE 5, 6, 7, and 8.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Changing the HTML content
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Changing the content of an HTML element is simple as it can be achieved through
    changing the `innerHTML` property of an HTML element. Use this syntax:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following example changes the content of an HTML element:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Changing the HTML attribute
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Retrieve the HTML element using the `getElementById` method as shown, in the
    following example, and change the attribute with a new value of attribute:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following example changes the attribute with a new value of attribute:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Changing the HTML style
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To change the style of an HTML element, use the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following example changes the style of a `<p>` element:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This example changes the style of the HTML element with `id="pid1"`, when the
    user clicks on a button:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Responding to an event
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'DOM allows JavaScript code or function to be executed when an event occurs;
    for example, when a user hovers over an HTML element:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Following are a few examples of HTML events:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, a function is called from the event handler: An event
    handler allows us to call a JavaScript function, as shown in the following example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Creating new HTML elements
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create the element node first, and then append it to an existing element:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding code can be explained as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: It creates a new `<p>` element
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To add text to the `<p>` element, create a text node first
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Append the text node to the `<p>` element
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It finds an existing element
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It appends a new element to the existing element
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing an existing HTML element
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before removing the child element, know the parent of the element and then
    remove it, for example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding HTML document contains a `<div>` element with two child nodes
    (two `<p>` elements):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The DOM requires knowing that both the elements and their parent require removing.
    It does not allow removing the child without its parent''s reference. The workaround
    uses the `parentNode` property of the child object to get the parent and then
    uses `removeChild` to remove it:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: DOM and QTP
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: QuickTest Object property for a Web object allows us to get a reference to the
    DOM object, and can perform any operation on a DOM object. For example, the following
    code shows that the object on the page allows retrieving the element by name `username`,
    that is, the textbox in the next step assigns the value as `ashish`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following code snippet shows various operations that can be performed using
    the `Object` property of the web object:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Firing an event
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'QTP allows firing of the events on the web objects:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following example uses the `FireEvent` method to trigger the `onpropertychange`
    event on a form:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'QTP allows executing JavaScript code. There are two JavaScript functions that
    allow us to interact with web pages. We can retrieve objects and perform the actions
    on them or we can retrieve the properties from the element on the pages:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '`RunScript` executes the JavaScript code, passed as an argument to this function.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows how the `RunScript` method calls the `ImgCount`
    method, which returns the number of images in the page:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`RunScriptsFormFile` uses the full path of the JavaScript files to execute
    it. The location can be an absolute or relative filesystem path or a quality center
    path.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample JavaScript file (`logo.js`):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Use the `logo.js` file, as shown in the following code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding example uses the `RunScriptFromFile` method to remove a DOM element
    from a web page and checks if the page still behaves correctly when the DOM element
    has been removed.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Using XPath
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**XPath** allows navigating and finding elements and attributes in an HTML
    document. XPath uses path expressions to navigate in HTML documents. QTP allows
    XPath to create the object description, for example:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the following section, we will learn the various XPath terminologies and
    methodologies to find the objects using XPath.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: XPath terminology
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'XPath uses various terms to define elements and their relationships among HTML
    elements, as shown in the following table:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '| Atomic values | Atomic values are nodes with no children or parent |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
- en: '| Ancestors | A node''s parent, parent''s parent, and so on |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
- en: '| Descendants | A node''s children, children''s children, and so on |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
- en: '| Parent | Each element and attribute has one parent |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
- en: '| Children | Element nodes may have zero, one, or more children |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
- en: '| Siblings | Nodes that have the same parent |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
- en: Selecting nodes
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A path expression allows selecting nodes in a document. The commonly used path
    expressions are shown in the following table:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '| Symbol | Meaning |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
- en: '| `/`(slash) | Select elements relative to the root node |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
- en: '| `//`(double slash) | Select nodes in the document from the current node that
    match the selection irrespective of its position |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
- en: '| `.`(dot) | Represents the current node |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
- en: '| `..` | Represents the parent of the current node |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
- en: '| `@` | Represents an attribute |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
- en: '| `nodename` | Selects all nodes with the name "nodename" |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
- en: Slash (`/`) is used in the beginning and it defines an absolute path; for example,
    `/html/head/title` returns the `title` tag. It defines ancestor and descendant
    relationships if used in the middle; for example, `//div/table` returns the `div`
    containing a table.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Double slash (`//`) is used to find a node in any location; for example, `//table`
    returns all the tables. It defines a descendant relationship if used in the middle;
    for example, `/html//title` returns the `title` tag, which is descendant of the
    `html` tag.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following table to see a few more examples with their meanings:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '| Expression | Meaning |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
- en: '| `//a` | Find all anchor tags |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
- en: '| `//a//img` | List the images that are inside a link |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
- en: '| `//img/@alt` | Show all the `alt` tags |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
- en: '| `//a/@href` | Show the `href` attribute for every link |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
- en: '| `//a[@*]` | Anchor tab with any attribute |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
- en: '| `//title/text()` or `/html/head/title/text()` | Get the title of a page |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
- en: '| `//img[@alt]` | List the images that have `alt` tags |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
- en: '| `//img[not(@alt)]` | List the images that don''t have `alt` tags |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
- en: '| `//*[@id=''mainContent'']` | Get an element with a particular CSS ID |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
- en: '| `//div [not(@id="div1")]` | Make an array element from the XPath |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
- en: '| `//p/..` | Selects the parent element of `p` (paragraph) child |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
- en: '| `XXX[@att]` | Selects all the child elements of `XXX` with an attribute named
    `att` |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
- en: '| `./@*` for example, `//script/./@*` | Finds all attribute values of current
    element |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
- en: Predicates
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A predicate is embedded in square brackets and is used to find out specific
    node(s) or a node that contains a specific value:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '`//p[@align]`: This allows finding all the tags that have align attribute value
    as center'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`//img[@alt]`: This allows finding all the `img` (image) tags that contain
    the `alt` tag'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`//table[@border]`: This allows finding all the `table` tags that contain `border`
    attributes'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`//table[@border >1]`: This finds the table with border value greater than
    1'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Retrieve the table row using the complete path:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Get the name of the parent of `//body/div/table/..` (parent of the `table` tag)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '| Path expression | Result |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
- en: '| `//div/p[1]` | Selects the first paragraph element that is the child of the
    `div` element |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
- en: '| `//div/p [last()]` | Selects the last paragraph element that is the child
    of the `div` element |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
- en: '| `//div/p[last()-1]` | Selects the second last paragraph element that is the
    child of the `div` element |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
- en: '| `//div/p[position()<3]` | Selects the first two paragraph elements that are
    children of the `div` element |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
- en: '| `//script[@language]` | Selects all script element(s) with an attribute named
    as `language` |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
- en: '| `//script[@language=''javascript'']` | Selects all the script elements that
    have an attribute named `language` with a value of JavaScript |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
- en: '| `//div/p[text()>45.00]` | Selects all the paragraph elements of the `div`
    element that have a text element with a value greater than 45.00 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
- en: Selecting unknown nodes
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from selecting the specific nodes in XPath, XPath allows us to select
    the group of HTML elements using `*`, `@`, and `node()` functions.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '`*` represents an element node'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@` represents the attribute'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`node()` represents any node'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The previous mentioned elements allow selecting the unknown nodes; for example:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '`/div/*` selects all the child nodes of a `div` element'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`//*` selects all the elements in a document'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`//script[@*]` selects all the title elements which contain attributes'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting several paths
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use **union** | **operator** in XPath expressions for allowing to select several
    paths, as shown in the following table:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '| Path expression | Action |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
- en: '| `//div&#124;/p &#124; //div/span` | Selects all the paragraph and `span`
    elements of the `div` element |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
- en: '| `//p &#124; //span` | Selects all the `p` (paragraph) and `span` elements
    in the document |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
- en: Axes in XPath
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An axis allows defining a node which is relative to its current node. The following
    is the list of the axes in XPath:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: self
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parent
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: attribute
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: child
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ancestor and ancestor-or-self
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Descendant and descendant-or-self
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following and following-sibling
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preceding and preceding-sibling
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: namespace
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locating a element using location path
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A location of the element is represented in two ways using absolute and relative
    paths.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'Each step is evaluated against the nodes in the current node. The syntax looks
    like the following syntax:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: An axis defines the tree-relationship between selected nodes and current node.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: A node-test allows us to identify node(s) within an axis.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Zero or more predicates allow further refining of the selected node set.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following example:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the preceding example, `ancestor-or-self is an axes`, `::*` is the nodetest
    and `[@name='userName']` is the predicate, allowing us to search all `ancestor-or-self`
    elements whose attribute names are `userName` contained in the `input` type element
    `//input[ansector-or-self::*[@name='userName']]`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'Axes allow finding the descendant of the element; for example:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '`//div[descendant::p]` allows us to find all the `div` elements having descendant
    as paragraph.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '`descendant::p` axes allow finding the ancestor and descendant of the element,
    for example, finding all the ancestors of button or finding all the `div` whose
    descendants are `table`.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Use of the XPath functions:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '`//div/text()`: This retrieves the text from the `div` tags using `text` functions'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`//div/node()`: Getting all the nodes under `div` tags using the `node` function'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To get the descendant, XPath function `start-with` finds the value that starts
    with `//a[starts-with(@href,'http://ads')`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Find all tags that contains the `style` attribute `//*[@style]`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Operators in XPath
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The XPath expressions use operators to build the conditions to be evaluated.
    The following is the list of XPath operators:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator category | Operator | Description |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
- en: '| Mathematical | +-*DivMOD | AdditionSubtractionMultiplicationDiv DivisionMOD
    Modulus (division remainder) |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
- en: '| Equality and comparison | =!=<<=>>= | EqualNot equalLess thanLess than or
    equal toGreater thanGreater than or equal to |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
- en: '| Logical | OrAnd | Logical OrLogical And |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
- en: '| Two node sets | &#124; Union | Computes two node sets |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
- en: 'The following table shows some examples for using the operators in XPath expressions:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '| Expression | Action |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
- en: '| `//input &#124; //div/input/..` | `Input` union input where `div` is its
    parent |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
- en: '| `//table[@border>=1]` | Retrieves the tables that have border greater than
    1 |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
- en: '| `//table[@id=3]/td[2]/text()+1` | Retrieves the text from the third row and
    second column and adds 1 to it |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
- en: '| `//tr[@id=1] and //tr[@id=3]` | Returns true if both expression are true
    |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
- en: 'Example of using XPath in finding the siblings which allow finding the object
    related to their siblings and not to their location:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Add the code to the file and save it as an `.html` file. Click on the **AddToCart**
    button.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the following recorded script:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Replace and use the following script:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This preceding script allows clicking on the button (**AddToCart**), which
    is the sibling of the HP QuickTest Professional text. To click on the **AddToCart**
    button, which is the sibling of HP Quality Center text, use the following code:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'XPath can be implemented in the QTP Scripts. The following section explains
    the various usages of XPath in a web page. Examples of the usage of XPath are:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Entering a value in the text box
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the value from a drop-down list
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicking on images and buttons
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding objects by ID, tag name, name, and attributes
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing to extract the information for validation
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with duplicate objects as array subscripts
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Key steps to create a framework using XPath are:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Identify the flow to be recorded.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create OR (create OR for each page or use the object description).
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the XPath that identifies the object uniquely.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the XPath that allows us to retrieve an element and defines it as a constant.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use them as object descriptions.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Tips for scripting using XPath:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Use descriptive programming (use `index` property) for handling duplicate objects
    or array subscripts in XPath expressions
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XPath allows the use of index for collection of elements
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieve `innerHTML` with `GetROProperty` to get the values
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define object description using XPath as constant, allowing easier maintenance,
    and only a single place to change and no need to change all over the script
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about various concepts and examples. The knowledge
    of DOM, JavaScript, and XPath is very handy for creating scripts. The XPath and
    DOM are the least used concepts in the QTP for script creation and validation,
    but these are helpful in creating manual checkpoints by retrieving the data from
    the web pages conveniently. Path is a really good way to navigate your site when
    there are no IDs on elements that you need to work with or near the element you
    want to work with. The next chapter talks about capturing and sharing the lessons
    learned during the test automation framework designing, and implementing them
    for future reference.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了各种概念和示例。DOM、JavaScript 和 XPath 的知识对于编写脚本非常有用。XPath 和 DOM 是在 QTP 中用于脚本创建和验证最少使用的概念，但通过方便地从网页中检索数据，这些概念在创建手动检查点时非常有帮助。当需要处理或靠近的元素没有
    ID 时，路径是一个真正好的导航网站的方法。下一章将讨论在测试自动化框架设计过程中捕获和分享所学到的经验，并将它们用于未来的参考。
