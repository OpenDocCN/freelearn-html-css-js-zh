- en: '*Chapter 2:* Exploring TestCafe Under the Hood'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main goal of this chapter is to learn how TestCafe works under the hood
    and how it can be used in **test automation** to cover different features of websites
    and portals. We will get acquainted with the architecture of TestCafe, its API,
    and custom client-side code.
  prefs: []
  type: TYPE_NORMAL
- en: These topics will give us the ability to understand what main methods and functions
    of TestCafe are available out of the box and how to invoke them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Scouting the TestCafe architecture.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about the TestCafe API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing custom client-side code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scouting the TestCafe architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the beginning of time, end-to-end web testing frameworks have depended
    on external drivers to emulate user actions in real browsers. This approach, however,
    has a number of downsides:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Third-party dependencies and a limited number of supported browsers**: You
    had to download, install, configure, and update additional drivers or libraries
    for each test environment (and sometimes even for each test run). In addition
    to that, you could only use the browsers supported by each driver.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of flexibility**: Old tools were unable to operate on the tested page
    directly. As long as the test code does not interfere with the app code, operating
    on the tested page directly enables the tool to execute many additional scenarios
    and workarounds. For example, this way it can add and remove styles or change
    the visibility of any elements on the tested page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code duplication**: Legacy testing frameworks ran with the same browser instance
    during the entire test run, maintaining the tested web application state from
    test to test (and keeping the same values in cookies and storage). As a consequence,
    end-to-end tests had a huge amount of duplicated code for clearing the web application
    state between tests to avoid interference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, TestCafe has a fix for each of these problems.
  prefs: []
  type: TYPE_NORMAL
- en: The core idea behind the architecture of TestCafe is that users should not need
    any external drivers to run end-to-end browser tests. Instead, all the test scripts
    that emulate user actions can be executed from the page itself. This enables a
    true cross-platform and cross-browser approach as tests will be able to run on
    any device with a modern browser!
  prefs: []
  type: TYPE_NORMAL
- en: 'After each test finishes its execution, TestCafe purges the browser state:
    it deletes cookies, clears `localStorage` and `sessionStorage`, and reloads the
    page. If you launch several tests in parallel, TestCafe executes each test run
    in an independent server-side context to prevent server-side collisions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'TestCafe execution can be split into two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Server-side (in the Node.js process).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side (in the browser).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at each of these parts.
  prefs: []
  type: TYPE_NORMAL
- en: The server side
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Test code is performed in the Node.js environment on the **server side**. This
    enables TestCafe to use advantages of standalone server-side code, including the
    possibility of launching tested web application servers before tests and enhanced
    control over the testing environment and test execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Executing test code in Node.js provides a lot of advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Database preparation and the launching of the application can be done from within
    the tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tests have access to the server's filesystem, so you can read data or create
    files needed for testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tests can use all recent syntax features of Node.js. In addition to that, you
    can include and utilize any Node.js third-party packages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved stability and speed of execution due to test logic separation from
    automation scripts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since Node.js code executes on the server, it doesn't have direct access to
    the **Document Object Model (DOM)** of the page or browser API, but this is handled
    by custom client-side functions that have access to the DOM and are executed in
    the browser context.
  prefs: []
  type: TYPE_NORMAL
- en: The client side
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TestCafe automation scripts are designed to imitate user actions on any tested
    page. Their main goal is to enable you to write high-level cross-browser tests,
    so element-focusing, triggering events, and processing attributes are performed
    in the same way as a real human would in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Scripts that emulate user activity (TestCafe internal scripts) run on the **client
    side** on the tested page in the browser. This enables TestCafe to utilize the
    advantages of browser scripts, including built-in smart waits, mobile testing,
    and user roles. For client-side code to work in the browser, TestCafe proxies
    the tested page on the server and injects the scripts into its code. This approach
    is also known as a reverse proxy. When you run TestCafe tests, the browser address
    bar shows a URL that is prefixed with some digits – this is because TestCafe uses
    its own open source URL-rewriting proxy ([https://github.com/DevExpress/testcafe-hammerhead](https://github.com/DevExpress/testcafe-hammerhead))
    and proxies the tested pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run tests with TestCafe, a reverse proxy is automatically launched
    locally on your computer. It injects automation scripts into the tested page,
    so neither the page code nor the resources it communicates with can tell that
    the page has been modified. In other words, when TestCafe proxies the tested page,
    it adds automation scripts and rewrites all the URLs on the tested page to point
    to the proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – TestCafe reverse proxies between the user''s browser and the
    web server'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.1_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – TestCafe reverse proxies between the user's browser and the web
    server
  prefs: []
  type: TYPE_NORMAL
- en: When the browser refers to these new, rewritten URLs, the original resources
    are also proxied and enhanced in the same way. TestCafe also mocks the browser
    API to separate automation scripts from the rest of the page code. The proxying
    mechanism is absolutely safe – it guarantees that the page appears to be hosted
    at the original URL, even to the test code.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we reviewed how TestCafe operates from the server and client
    sides. We also learned about the main advantages of this architecture, including
    the possibility to prelaunch applications before tests, extend control over testing
    environments, proxying and injecting scripts, which enables smart waiting, mobile
    testing, and user roles, which we will discuss a bit later.
  prefs: []
  type: TYPE_NORMAL
- en: TestCafe supports JavaScript – the most popular programming language for web
    development – which allows most users to use their existing coding skills and
    minimizes the learning curve for newcomers. In addition to that, its clear API
    makes tests easy to create, read, and maintain. So, let's see what methods TestCafe
    has to offer.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about the TestCafe API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the server-side code runs in Node.js, tests should be written in JavaScript
    (TypeScript and CoffeeScript are also supported, but eventually, everything should
    be transpiled into JavaScript).
  prefs: []
  type: TYPE_NORMAL
- en: 'TestCafe utilizes a minimalistic API that provides less than a few dozen methods,
    which are then transformed into user actions on the page. As our tests will be
    using the TestCafe API methods to interact with the pages, let''s review the main
    interaction groups supported in TestCafe:'
  prefs: []
  type: TYPE_NORMAL
- en: Elements selection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Actions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assertions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User roles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's discover each of these interactions in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Elements selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TestCafe utilizes an advanced mechanism with built-in waiting to locate target
    elements for an action or assertion. To perform an action (such as click, hover,
    type, and so on) or to make an assertion, you should first identify the target
    page element. This is as easy as specifying a standard CSS selector. For more
    complex situations, you can chain methods (such as, for example, getting an element
    by class name, then getting its second child, and then finally, getting its third
    sibling). Selector strings should be passed inside chainable `Selector` constructors
    to create a selector.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can click on a button with the `button-test` class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For more complex situations, you can traverse the DOM tree by chaining selectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'What this chain of selectors does is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Selects an element with the `block-test` id.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selects its child elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Filters them by the `a` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selects elements with the `href` attribute that includes `https://test-site.com/main.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selects elements that include the `Second link` text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If a selector matches several elements, the subsequent methods return results
    for all the elements that were matched.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'TestCafe provides a number of methods that search for elements relative to
    the selected element (keep in mind that all of these methods should be prepended
    with `Selector(cssSelector)`). Most of these methods accept `index` as an argument,
    which should be a zero-based number (0 will be the closest relative element in
    the set). If the number is negative, the index is counted from the end of the
    matched set. Here are the methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.find(cssSelector)`: Finds the descendant nodes of all the nodes in the matched
    set and uses a CSS selector to filter them (the CSS selector should be a string)
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/find.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/find.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.parent(index)`: Finds the parents of all the nodes in the matched set (the
    first element in the set is the closest parent) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/parent.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/parent.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.child(index)`: Finds the child elements of all nodes in the matched set ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/child.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/child.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.sibling(index)`: Finds the sibling elements of all the nodes in the matched
    set ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/sibling.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/sibling.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.nextSibling(index)`: Finds the succeeding sibling elements of all the nodes
    in the matched set ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/nextsibling.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/nextsibling.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.prevSibling(index)`: Finds the preceding sibling elements of all nodes in
    the matched set and filters them by index ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/prevsibling.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/prevsibling.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s look at the methods that filter elements from the selector. The
    same as before, all of these methods should be prepended with `Selector(cssSelector)`.
    Here are the methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.nth(index)`: Selects an element with the specified index in the matched set.
    Here, the `index` argument should be a zero-based number (0 will be the closest
    relative element in the set). If it is negative, the index is counted from the
    end of the matched set ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/nth.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/nth.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.withText(text)`: Selects elements that contain the specified text. Here,
    `text` is the element''s text content (the `text` argument is a case-sensitive
    string) or a **regular expression** (**RegExp**) that should match the element''s
    text ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withtext.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withtext.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.withExactText(text)`: Selects elements whose text content strictly matches the
    specified text. Here, `text` is the element''s text content (the `text` argument
    is a case-sensitive string) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withexacttext.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withexacttext.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.withAttribute(attrName[, attrValue])`: Selects elements that contain the
    specified attribute. Here, `attrName` can be a case-sensitive string or a `RegExp`,
    and optionally, `attrValue` can also be a case-sensitive string or a `RegExp`
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withattribute.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withattribute.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.filterVisible()`: Selects elements that do not have the `display: none;` or `visibility:
    hidden;` CSS properties and have non-zero widths and heights ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filtervisible.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filtervisible.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.filterHidden()`: Selects elements that have the `display: none;` or `visibility:
    hidden;` CSS properties, or zero widths or heights ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filterhidden.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filterhidden.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.filter(cssSelector)`: Selects elements that match the CSS selector (the CSS
    selector should be a string used to filter child elements). Also, instead of the
    `cssSelector` argument, you could provide `filterFn` (a function predicate used
    to filter the elements) and, optionally, `dependencies` (an object with functions,
    variables, or objects passed to the `filterFn` function) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filter.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/filter.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When a selector is executed, TestCafe will be waiting for the target node to
    appear on the page until the selector timeout expires. You can specify the timeout
    (in milliseconds) in the following cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectorTimeout` config option in the `.testcaferc.json` configuration file
    ([https://devexpress.github.io/testcafe/documentation/reference/configuration-file.html](https://devexpress.github.io/testcafe/documentation/reference/configuration-file.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--selector-timeout` command-line option ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--selector-timeout-ms](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--selector-timeout-ms).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Selector` ([https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/constructor.html#optionstimeout](https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/constructor.html#optionstimeout))
    to set the timeout for any particular element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During the timeout, the selector is rerun until it returns a DOM element or
    the timeout is surpassed. If TestCafe can't find the corresponding node in the
    DOM, the test is marked as failed.
  prefs: []
  type: TYPE_NORMAL
- en: Actions
  prefs: []
  type: TYPE_NORMAL
- en: 'The TestCafe API provides a set of action methods to interact with the page
    (such as click, type, select text, hover, and so on). You can call them one after
    another in a chained fashion. All of these methods should be prepended with `t`
    as they are the methods of the test controller object ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/)).
    Also, `selector` can be a string, selector, DOM node, function, or Promise; and
    optionally, you can use `options`, which is an object with a set of options containing
    supplementary parameters for the action (unless otherwise specified). Here are
    all the main action methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.click(selector[, options])`: Clicks on an element on a page ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/click.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/click.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.doubleClick(selector[, options])`: Double-clicks on an element on a page
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/doubleclick.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/doubleclick.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.rightClick(selector[, options])`: Right-clicks on an element on a page ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/rightclick.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/rightclick.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.pressKey(keys[, options])`: Presses the specified keyboard keys. Here, `keys`
    is a sequence of keys and key combinations to be pressed ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/presskey.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/presskey.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.navigateTo(url)`: Navigates to the specified URL. Here, `url` is a string
    with the URL to navigate to (which can be absolute or relative to the current
    page) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/navigateto.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/navigateto.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.typeText(selector, text[, options])`: Types the specified text into an input
    element. Here, `text` is a string of the text to be typed into the specified web
    page element ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/typetext.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/typetext.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.selectText(selector[, startPos][, endPos][, options])`: Selects text in input
    elements of various types. Here, `startPos` is the number (zero-based integer,
    0 by default) of the start position of the selection. Optionally, `endPos` is
    the number (zero-based integer; by default, it is equal to the length of the visible
    text content) of the end position of the selection ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/selecttext.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/selecttext.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.hover(selector[, options])`: Hovers the mouse pointer over a web page element
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/hover.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/hover.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.drag(selector, dragOffsetX, dragOffsetY[, options])`: Drags an element to
    a specified offset. Here, `dragOffsetX` is the number of pixels for the *X* offset
    (horizontal) of the drop coordinates from the original position of the mouse pointer,
    and `dragOffsetY` is the number of pixels for the *Y* offset (vertical) of the
    drop coordinates from the original position of the mouse pointer ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/drag.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/drag.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.dragToElement(selector, destinationSelector[, options])`: Drags an element
    onto another web page element. Here, `destinationSelector` should identify the
    web page element that will be the drop location ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/dragtoelement.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/dragtoelement.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.setFilesToUpload(selector, filePath)`: Adds file paths to the specified file
    upload input. Here, `filePath` is a string or an array with the path to the uploaded
    file (or several paths, in the case of an array). Relative paths are resolved
    against the folder with the test file ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setfilestoupload.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setfilestoupload.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.clearUpload(selector)`: Deletes all the file paths from the specified file
    upload input ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/clearupload.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/clearupload.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.takeScreenshot([options])`: Takes a screenshot of the entire page. The optional
    `options` object can include the following properties: the `path` string with
    the screenshot file''s relative path and name or a `fullPage` boolean (false by
    default) that specifies if the full page should be captured, including content
    that is not visible due to overflow ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/takescreenshot.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/takescreenshot.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.takeElementScreenshot(selector[, path][, options])`: Takes a screenshot of
    the specified web page element. Here, `path` (an optional argument) is a string
    with the screenshot file''s relative path and name ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/takeelementscreenshot.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/takeelementscreenshot.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.switchToIframe(selector)`: Switches the browsing context of the test to the
    specified `<iframe>` ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtoiframe.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtoiframe.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.switchToMainWindow()`: Switches the browsing context of the test from an
    `<iframe>` back to the main window ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtomainwindow.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtomainwindow.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.setNativeDialogHandler(fn(type, text, url)[, options])`: Specifies a handler
    function to deal with native dialogs triggered during the test run. Here, `fn(type,
    text, url)` can be a function or a client function that will be invoked whenever
    a native dialog is triggered (`null` to delete the native dialog handler). The
    handler function can utilize three arguments: `type`, which is a string with the
    type of the native dialog (`confirm`, `alert`, `prompt`, or `beforeunload`); `text`,
    which is a string with the dialog message text; and `url`, which is a string with
    the URL of the page that triggered the dialog (used to check whether the dialog
    was called from the main window or an `<iframe>`) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setnativedialoghandler.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/setnativedialoghandler.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.getNativeDialogHistory()`: Provides a history of the native dialogs that
    were triggered ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/getnativedialoghistory.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/getnativedialoghistory.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.resizeWindow(width, height)`: Resizes a window to fit the provided width
    and height, where `width` is the value of the new width (in pixels) and `height`
    is the value of the new height (in pixels) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/resizewindow.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/resizewindow.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.resizeWindowToFitDevice(deviceName[, options])`: Resizes the window to fit
    the screen of the specified mobile device, where `deviceName` is a string with
    the device name ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/resizewindowtofitdevice.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/resizewindowtofitdevice.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.maximizeWindow()`: Maximizes the browser window ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/maximizewindow.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/maximizewindow.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.wait(timeout)`: Pauses a test execution for a specified period of time. Here,
    `timeout` is the length of the pause duration (in milliseconds) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/wait.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/wait.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assertions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'TestCafe allows you to verify elements, page properties, and parameters (equals,
    contains, greater, match, and so on). To write assertions, use the test controller''s
    `t.expect` method, followed by an assertion method that accepts an expected value
    and optional arguments; `message` is the assertion message string that shows up
    in the report if the test fails and `options` is an object with a set of options
    containing supplementary parameters for the assertion. Here are all the assertion
    methods available in TestCafe out of the box:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.expect(actual).eql(expected[, message][, options])`: Verifies that the `actual`
    value is equal to the `expected` value. Here, `actual` is any type of comparison
    value and `expected` is any type of expected value ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/eql.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/eql.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.expect(actual).notEql(expected[, message][, options])`: Verifies that the
    `actual` value does not equal the `expected` value. Here, `actual` is any type
    of comparison value and `expected` is any type of value that is expected not to
    be equal to `actual` ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/noteql.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/noteql.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.expect(actual).ok([message][, options])`: Verifies that the `actual` value
    is `true`. Here, `actual` is any type of value tested in the assertion (the assertion
    will pass if the actual value is `true`) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/ok.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/ok.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.expect(actual).notOk([message][, options])`: Verifies that the `actual` value
    is `false`. Here, `actual` is any type of value tested in the assertion (the assertion
    will pass if the actual value is `false`) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notok.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notok.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.expect(actual).contains(expected[, message][, options])`: Verifies that the
    `actual` value contains the `expected` value. Here, `actual` is any type of comparison
    value and `expected` is any type of expected value (the assertion will pass if
    the actual value contains the expected value) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/contains.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/contains.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.expect(actual).notContains(expected[, message][, options])`: Verifies that
    the `actual` value contains the `expected` value. Here, `actual` is any type of
    comparison value, and `expected` is any type of expected value (the assertion
    will pass if the actual value does not contain the expected value) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notcontains.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notcontains.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.expect(actual).typeOf(typeName[, message][, options])`: Asserts that the
    `actual` value type is `typeName`. Here, `actual` is any type of comparison value
    and `typeName` is a string of the expected type of an actual value ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/typeof.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/typeof.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.expect(actual).notTypeOf(typeName[, message][, options])`: Asserts that the
    `actual` value type is not `typeName`. Here, `actual` is any type of comparison
    value and `typeName` is a string of the type of the actual value that causes an
    assertion to fail ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/nottypeof.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/nottypeof.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.expect(actual).gt(expected[, message][, options])`: Verifies that the `actual`
    value is greater than the `expected` value. Here, `actual` is the number tested
    in the assertion (the assertion will pass if the actual value is greater than
    the expected value) and `expected` is any type of expected value ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/gt.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/gt.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.expect(actual).gte(expected[, message][, options])`: Verifies that the `actual`
    value is greater than or equal to the `expected` value. Here, `actual` is a number
    tested in the assertion (the assertion will pass if the actual value is greater
    than or equal to the expected value), and `expected` is any type of expected value
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/gte.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/gte.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.expect(actual).lt(expected[, message][, options])`: Verifies that the `actual`
    value is less than the `expected` value. Here, `actual` is the number tested in
    the assertion (the assertion will pass if the actual value is less than the expected
    value) and `expected` is any type of expected value ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/lt.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/lt.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.expect(actual).lte(expected[, message][, options])`: Verifies that the `actual`
    value is less than or equal to the `expected` value. Here, `actual` is the number
    tested in the assertion (the assertion will pass if the actual value is less than
    or equal to the expected value) and `expected` is any type of expected value ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/lte.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/lte.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.expect(actual).within(start, finish[, message][, options])`: Verifies that
    the `actual` value is within a specified range from start to finish (bounds are
    inclusive). Here, `actual` is a number, `start` is the number for the lower range
    (inclusive), and `finish` is the number for the upper range (inclusive) ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/within.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/within.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.expect(actual).notWithin(start, finish[, message][, options])`: Verifies
    that the `actual` value is not within the specified range from start to finish
    (bounds are inclusive). Here, `actual` is a number, `start` is the number for
    the lower range (inclusive), and `finish` is the number for the upper range (inclusive)
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notwithin.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notwithin.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.expect(actual).match(re[, message][, options])`: Verifies that the `actual`
    value matches the `re` regular expression. Here, `actual` is any type of comparison
    value and `re` is a regular expression that is expected to match the actual value
    ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/match.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/match.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.expect(actual).notMatch(re[, message][, options])`: Verifies that the `actual`
    value does not match the `re` regular expression. Here, `actual` is any type of
    comparison value and `re` is a regular expression that is expected not to match
    the actual value ([https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notmatch.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/expect/notmatch.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User roles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'TestCafe has a built-in user role mechanism that emulates user actions for
    logging in to a website. It also saves the logged-in state of each user in a separate
    role that can be reused later on in any part of your tests to switch between user
    accounts. This approach gives access to some unique features:'
  prefs: []
  type: TYPE_NORMAL
- en: Login actions are not duplicated upon switching to a previously used role during
    the same session. So, for example, if you activate a role in the `beforeEach`
    hook, the login actions will run only once before the first test. All further
    tests will just reuse the existing authentication data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you switch roles, the browser automatically navigates back to the page
    where the switch happened, so there is no need to additionally open any URLs for
    a new role (this behavior can be disabled if required).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If during a test you log in to several websites, authentication data from cookies
    and browser storage is saved in the active role. When switching back to this role
    in the same test, you will be logged in to all the websites automatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An anonymous built-in role that logs you out of all accounts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's have a look at a practical example of creating and using roles.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create and initialize a role, we will need to use a `Role` constructor.
    Then, the login page URL and actions needed to log in should be passed to `Role`.
    This is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After you create all the required roles, you can switch between them anytime;
    roles are shared across tests and fixtures. Roles can even be created in a separate
    file and then used in any test fixture that references (requires or imports) this
    file.
  prefs: []
  type: TYPE_NORMAL
- en: To sum up, in this section, we reviewed the TestCafe API and the main methods
    that it provides. We also learned how to select elements, conduct assertions,
    and utilize user roles to switch between different accounts. Now, let's take a
    look at how custom client-side code can be executed in TestCafe to give us even
    more control over the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Executing custom client-side code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With TestCafe, you can create client functions that can run on the client side
    (in the browser) and return any serializable value. For example, you can obtain
    the URL of the current page, set cookies, or even manipulate any elements on the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'In some complex scenarios, TestCafe helps you write code to be executed on
    the tested page. Here are several examples of tasks that can be done with custom
    client-side code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get elements from the web page for further actions. TestCafe allows you to
    create selectors based on client-side code that returns DOM nodes. You can write
    this code in the server-side test and TestCafe will run these functions in the
    browser when it needs to locate an element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Obtain data from a client function that returns any serializable object from
    the client side (including any objects that can be converted to JSON). Unlike
    selectors, test code can access the object this client function returns. Usually,
    the data obtained from client functions is used to assert different page parameters.
    Here is an example of getting and verifying a page URL:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject custom code into the tested page. Injected scripts can then be used
    to add helper functions or to mock browser API:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is recommended that you avoid changing the DOM with custom client-side code.
    A rule of thumb is to use client-side code only to explore the page, find and
    return information to the server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can find more examples of client-side scripts and injections at the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://devexpress.github.io/testcafe/documentation/guides/basic-guides/obtain-client-side-info.html](https://devexpress.github.io/testcafe/documentation/guides/basic-guides/obtain-client-side-info.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/inject-client-scripts.html](https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/inject-client-scripts.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we just discovered, TestCafe client functions are quite useful for different
    browser manipulations and getting additional data to verify in our tests.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how TestCafe works under the hood. We got acquainted
    with the architecture of TestCafe, saw how it performs on client and server sides,
    and learned about the strategies for selecting elements, actions, assertions,
    roles, and custom client-side code.
  prefs: []
  type: TYPE_NORMAL
- en: All of this will be used in the upcoming chapters to write our own suite of
    end-to-end tests. In addition to that, you can always use this chapter as a reference
    to search for any particular method or assertion and see how it's called and what
    it does.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on from the main methods and functions of TestCafe to more practical
    aspects, such as setting up the testing environment for our future automated tests.
  prefs: []
  type: TYPE_NORMAL
