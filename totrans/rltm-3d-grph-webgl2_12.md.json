["```js\nconst\n  canvas = document.getElementById('webgl-canvas'),\n  gl = canvas.getContext('webgl'),\n  program = twgl.createProgramInfo(gl, ['vertex-shader', 'fragment-shader']),\n  arrays = {\n    position: [\n      -1, -1, 0,\n      1, -1, 0,\n      -1, 1, 0,\n      -1, 1, 0,\n      1, -1, 0,\n      1, 1, 0\n    ],\n  },\n  bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n\nfunction draw(time) {\n  const { width, height } = gl.canvas;\n\n  twgl.resizeCanvasToDisplaySize(gl.canvas);\n  gl.viewport(0, 0, width, height);\n\n  const uniforms = {\n    time: time * 0.001,\n    resolution: [width, height],\n  };\n\n  gl.useProgram(program.program);\n\n  twgl.setBuffersAndAttributes(gl, program, bufferInfo);\n  twgl.setUniforms(program, uniforms);\n  twgl.drawBufferInfo(gl, bufferInfo);\n\n  requestAnimationFrame(draw);\n}\n\nrequestAnimationFrame(draw);\n```", "```js\nconst regl = require('regl')();\n\nconst vertexShader = `\n  precision mediump float;\n\n  attribute vec2 position;\n\n  void main(void) {\n    gl_Position = vec4(position, 0, 1);\n  }\n`;\n\nconst fragmentShader = `\n  precision mediump float;\n\n  uniform vec4 color;\n\n  void main(void) {\n    gl_FragColor = color;\n  }\n`;\n\nconst drawTriangle = regl({\n  vert: vertexShader,\n  frag: fragmentShader,\n  attributes: {\n    position: regl.buffer([\n      [-2, -2],\n      [4, -2],\n      [4, 4]\n    ])\n  },\n  uniforms: {\n    color: regl.prop('color')\n  },\n  count: 3\n});\n\nregl.frame(({ time }) => {\n\n  regl.clear({\n    color: [1, 1, 1, 1],\n    depth: 1\n  });\n\n  drawTriangle({\n    color: [\n      Math.cos(time * 0.001),\n      Math.sin(time * 0.0008),\n      Math.cos(time * 0.003),\n      1\n    ]\n  });\n\n});\n```", "```js\nlet\n  renderer,\n  scene,\n  camera,\n  mesh,\n  width = window.innerWidth,\n  height = window.innerHeight;\n\nfunction init() {\n  camera = new THREE.PerspectiveCamera(70, width / height, 0.01, 10);\n  camera.position.z = 1;\n\n  scene = new THREE.Scene();\n\n  const mesh = new THREE.Mesh(\n    // geometry\n    new THREE.BoxGeometry(0.2, 0.2, 0.2),\n    // material\n    new THREE.MeshNormalMaterial()\n  );\n  scene.add(mesh);\n\n  renderer = new THREE.WebGLRenderer({ antialias: true });\n  renderer.setSize(width, height);\n  document.body.appendChild(renderer.domElement);\n}\n\nfunction render() {\n  requestAnimationFrame(render);\n  mesh.rotation.x += 0.01;\n  mesh.rotation.y += 0.02;\n  renderer.render(scene, camera);\n}\n\ninit();\nrender();\n```", "```js\nconst canvas = document.getElementById('webgl-canvas');\n\nconst engine = new BABYLON.Engine(\n  canvas,\n  true,\n  {\n    preserveDrawingBuffer: true,\n    stencil: true\n  }\n);\n\nfunction initScene() {\n  const scene = new BABYLON.Scene(engine);\n\n  const camera = new BABYLON.FreeCamera('camera', new BABYLON.Vector3(0, 5, \n   -10), scene);\n  camera.setTarget(BABYLON.Vector3.Zero());\n  camera.attachControl(canvas, false);\n\n  const ground = BABYLON.Mesh.CreateGround('ground', 6, 6, 2, scene, \n   false);\n\n  const sphere = BABYLON.Mesh.CreateSphere('sphere', 16, 2, scene, false, \n   BABYLON.Mesh.FRONTSIDE);\n  sphere.position.y = 1;\n\n  const light = new BABYLON.HemisphericLight('light', new \n   BABYLON.Vector3(0, 1, 0), scene);\n\n  return scene;\n}\n\nconst scene = initScene();\nengine.runRenderLoop(() => scene.render());\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Hello, WebVR! - A-Frame</title>\n  <meta name=\"description\" content=\"Hello, WebVR! - A-Frame\">\n  <script src=\"img/aframe.min.js\"></script>\n</head>\n<body>\n<a-scene>\n  <a-box position=\"-1 0.5 -3\" rotation=\"0 45 0\" color=\"#4CC3D9\" shadow>\n  </a-box>\n  <a-sphere position=\"0 1.25 -5\" radius=\"1.25\" color=\"#EF2D5E\" shadow>\n  </a-sphere>\n  <a-cylinder position=\"1 0.75 -3\" radius=\"0.5\" height=\"1.5\" \n   color=\"#FFC65D\" shadow></a-cylinder>\n  <a-plane position=\"0 0 -4\" rotation=\"-90 0 0\" width=\"4\" height=\"4\" \n   color=\"#7BC8A4\" shadow></a-plane>\n  <a-sky color=\"#ECECEC\"></a-sky>\n</a-scene>\n</body>\n</html>\n```", "```js\n$$$.debug();\n```", "```js\n$$$\n.find('Cube_1')\n.exists();\n// returns true\n\n```", "```js\n$$$\n.findAll((node) => node.geometry.type === 'BoxGeometry');\n\n```", "```js\n$$$\n.find('Cube_1')\n.click();\n\n```", "```js\nwindow.addEventListener('click', (event) => {\n const intersectedItems = $$$.pickFromEvent(event);\n console.log(intersectedItems);\n});\n```"]