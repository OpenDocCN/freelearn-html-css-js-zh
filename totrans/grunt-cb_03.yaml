- en: Chapter 3. Templating Engines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Rendering Jade templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using data in a Jade template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using custom filters in a Jade template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling Jade templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling Handlebars templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling Underscore templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using partials in Handlebars templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping Jade templates in AMD modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping Handlebars templates in AMD modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping Underscore templates in AMD modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping Handlebars templates in CommonJS modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altering Jade templates before compilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altering Handlebars templates before compilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altering Underscore templates before compilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The generation of content by combining logic and data poses a unique set of
    problems, and template engines are specifically designed to solve them. In this
    chapter, we'll mostly be focusing on generating HTML using various template engines,
    even though some of them are designed in such a way as to allow for the generation
    of pretty much any type of readable file format.
  prefs: []
  type: TYPE_NORMAL
- en: Even though many of the more feature-rich web application frameworks available
    in the JavaScript community provide for the on-demand compilation, rendering and
    caching of templates, doing so using Grunt provides for the flexibility required
    in building a highly optimized and specialized solution. Templates can be rendered
    directly to HTML or compiled to JSTs that can be used directly without any extra
    processing. The products of these templates can also be packaged to be made available
    in pretty much any environment you might want to use them in.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, there are many great templating engines available, and
    the majority of them support Grunt by way of plugins, but in this chapter, we'll
    focus on the ones most widely used by the Grunt community.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering Jade templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Jade template engine allows us to easily build and maintain HTML templates
    using its minimal yet familiar syntax. In this recipe, we'll make use of the `contrib-jade
    (0.12.0)` plugin to compile a template that renders a simple HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps will take us through creating a simple Jade template and
    rendering it to an HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-jade` plugin
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create a simple Jade template called `index.jade` in our project directory,
    and add the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can add the following `jade` task to our configuration, which will
    compile the `index.jade` file we just created to the `index.html` file in our
    project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We set the `pretty` option to `true` in this example so that the HTML generated
    from the template can be more readable. This is usually preferred when your project
    is still in development, but is usually not used in production, as enabling this
    option increases the size of the generated files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we can run the task using the `grunt jade` command, which should produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now take a look at our project directory, we should see the new `index.html`
    file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using data in a Jade template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we've got a Jade template, we can use it to render the same page structure
    with a variety of data. In this recipe, we'll make use of the `contrib-jade (0.12.0)`
    plugin in conjunction with the `data` option to send data that should be used
    in the rendering of the template.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Rendering Jade templates* recipe in this chapter. Be sure to refer to it if you
    are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through providing data when rendering our template,
    and altering our `index.jade` template to make use of the provided data.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll alter our `index.jade` template to make use of the variables
    provided by its context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can provide values for the `title` and `body` variables that are to
    be used by the template. This is done by specifying them in the `data` option
    that we''ll add to the configuration of our `jade` task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can run the task using the `grunt jade` command, which should produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now take a look at the `index.html` file that was generated by running
    the task, we''ll find that the variables indicated in the template were replaced
    by the values specified in the `data` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's usually not a very good idea to keep the data used in a template hardcoded
    in the Grunt configuration, but rather to have it imported from an external data
    source.
  prefs: []
  type: TYPE_NORMAL
- en: The following steps take us through creating an external data source and altering
    our configuration so that the data used in rendering our template is loaded from
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll create a file called `data.json` in our project directory, which
    contains the data we wish to use in the rendering of our template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can alter our `jade` task''s configuration to import the data from
    the external source by making use of the `grunt.file.readJSON` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we now run the task using the `grunt jade` command, we should have the exact
    same result as in the main recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using custom filters in a Jade template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The filters provided by the Jade template engine enable us to indicate the method
    that should be used when processing a specific block in a template. This is usually
    used for blocks of content that are written in a format other than the Jade language
    itself. As an example, the `coffee` and `markdown` filters provided by the Jade
    library provide the rendering of **CoffeeScript** code into JavaScript and **Markdown**
    content into HTML.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-jade (0.12.0)` plugin in conjunction
    with its `filters` option to make a custom filter called `link` available to us
    in our templates. This filter will use a simplistic algorithm to find URLs and
    surround them with an anchor tag, turning them into links.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Rendering Jade templates* recipe of this chapter. Be sure to refer to it if you
    are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through adding the `link` custom filter and altering
    our `index.jade` template to make use of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll add the `link` custom filter to our configuration by using the
    `filters` option in the `jade` task we configured before:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can alter the contents of our `index.jade` template to make use of
    our `link` custom filter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can run the task using the `grunt jade` command, which should produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now take a look at the `index.html` file that was generated by running
    the task, we''ll find that it has surrounded the link we had inside the block
    provided to the `link` filter with an anchor tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compiling Jade templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building a web application that needs to render HTML templates on the frontend
    in as little time as possible, the compiling templates become essential. The Jade
    templating engine allows us to compile our templates to **JavaScript Templates**
    (**JSTs**) for use on the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-jade (0.12.0)` plugin to compile
    a template that renders a minimalistic blog.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a simple Jade template and compiling
    it to a JST contained in another file.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-jade` plugin
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create a simple Jade template file called `blog.jade` in our project
    directory and give it the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can add the following `jade` task to our configuration, which will
    compile the `blog.jade` template into a JST contained inside the `templates.js`
    file of our project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can run the task using the `grunt jade` command, which should produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We should now have a new file called `templates.js` in our project directory
    that contains the JST code for our compiled template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps demonstrate the usage template of the compiled and display
    an example of the rendered result.
  prefs: []
  type: TYPE_NORMAL
- en: First, you'll need to include the Jade runtime library in the application or
    page in which you'd like to make use of the compiled templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing, the Jade runtime library was available at the root
    of the official Jade repository and could be downloaded from the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://raw.githubusercontent.com/jadejs/jade/1.11.0/runtime.js](https://raw.githubusercontent.com/jadejs/jade/1.11.0/runtime.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, you'll need to include the `templates.js` file that was generated by the
    `jade` task in the application or page to make the `JST` global variable that
    contains the templates available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following example code will render the compiled template, using some sample
    data and store the result in the `result` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `result` variable should now contain the following HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `jade` task provides some useful options in conjunction with the basic compilation
    of templates that allows us to specify the namespace of compiled templates, indicate
    how template names should be derived from their filenames, and compile templates
    with debug support.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the namespace of compiled templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, compiled templates are stored in the `JST` namespace, but this
    can be changed to anything we like, by using the `namespace` option. In the following
    example, we configure the task to store templates in the `Templates` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Indicating how template names should be derived from filenames
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `processName` option can be used to indicate how the names under which
    templates are to be stored in the namespace should be derived from their filenames.
    The default behavior of the `jade` task is to use everything before the file''s
    extension. In the following example, we indicate that the entire filename should
    be in uppercase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Compiling templates with debug support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Jade template engine provides extra debug support for compiled templates,
    which can be enabled by way of the `compileDebug` option, as it is in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Compiling Handlebars templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Handlebars template engine simplifies the building and maintaining of any
    markup or other readable files. Its familiar syntax, extensibility, and logic-less
    approach provides a great all-round template building experience. The engine is
    focused mainly on compiling templates to JSTs that are mostly used in the frontend
    of a web application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-handlebars (0.8.0)` plugin to
    compile a template that renders a minimalistic blog.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a simple Handlebars template and
    setting up Grunt to compile it to a JST contained in another file.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-handlebars`
    plugin as per the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create a simple Handlebars template file called `blog.hbs` in our project
    directory and give it the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can add the following `handlebars` task to our configuration, which
    will compile the `post.hbs` template into a JST contained inside the `templates.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can run the task using the `grunt handlebars` command, which should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We should now have a new file called `templates.js` in our project directory
    that contains the JST code for our compiled template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps demonstrate the usage of the compiled template and display
    an example of the rendered result.
  prefs: []
  type: TYPE_NORMAL
- en: First, you'll need to include the Handlebars runtime library in the application
    or page in which you'd like to make use of the compiled templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing, the Handlebars runtime library could be downloaded
    from the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars-v1.3.0.js](http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars-v1.3.0.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, you'll need to include the `templates.js` file that was generated by the
    `handlebars` task in the application or page to create the `JST` global variable
    that contains the templates available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following example code will render the compiled template, using some sample
    data and store the result in the `result` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `result` variable should now contain the following HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `handlebars` task provides some useful options in conjunction with the basic
    compilation of templates which allows us to specify the namespace for compiled
    templates and indicate how template names should be derived from their filenames.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the namespace for compiled templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, compiled templates are stored in the `JST` namespace, but this
    can be changed to anything we like, by using the `namespace` option. In the following
    example, we configure the task to store templates in the `Templates` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Indicating how template names should be derived from file names
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `processName` option can be used to indicate how the names under which
    templates are to be stored in the namespace should be derived from their file
    names. The default behavior of the `handlebars` task is to use the entire filename.
    In the following example, we indicate that it should still use the file name,
    but in uppercase letters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Compiling Underscore templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Along with the many utilities it provides, the Underscore library also includes
    a simple, fast, and flexible templating engine. These templates are most commonly
    compiled to JSTs for use in the frontend of a web application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-jst (0.6.0)` plugin to compile
    a template that renders a minimalistic blog.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a simple Underscore template and
    compiling it to a JST contained in another file.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-jst` plugin
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create a simple Underscore template file called `blog.html` in our project
    directory and give it the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can add the following `jst` task to our configuration, which will compile
    the `blog.html` template into a JST contained inside the `templates.js` file in
    our project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can run the task using the `grunt jst` command, which should produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We should now have a new file called `templates.js` in our project directory,
    which contains the JST code for our compiled template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps demonstrate the usage of the compiled template and display
    an example of the rendered result.
  prefs: []
  type: TYPE_NORMAL
- en: First, you'll need to include the Underscore runtime library in the application
    or page in which you'd like to make use of the compiled templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing, the Underscore runtime library could be downloaded
    from the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://underscorejs.org/underscore-min.js](http://underscorejs.org/underscore-min.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, you'll need to include the `templates.js` file that was generated by the
    `jst` task in the application or page to make the `JST` global variable that contains
    the templates available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following example code will render the compiled template, using some sample
    data and store the result in the `result` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `result` variable should now contain the following HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `jst` task provides some useful options in conjunction with the basic compilation
    of templates which allows us to specify the namespace for compiled templates and
    indicate how template names should be derived from their file names.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the namespace for compiled templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, compiled templates are stored in the `JST` namespace, but this
    can be changed to anything we like, by using the `namespace` option. In the following
    example, we configure the task to store templates in the `Templates` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Indicating how template names should be derived from file names
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `processName` option can be used to indicate how the names under which
    templates are to be stored in the namespace should be derived from their file
    names. The default behavior of the `jst` task is to use the entire file name.
    In the following example, we indicate that it should still use the file name,
    but in uppercase letters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Using partials in Handlebars templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The partials system provided by the Handlebars templating engine allows us to
    reuse smaller bits of template code in varying contexts. Whenever you see a pattern
    repeated at different points in your template, it's probably a good opportunity
    to make use of a partial.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-handlebars (0.8.0)` plugin and
    its partial template loading functionality to render posts with a similar structure
    in two different sections of a blog.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Compiling Handlebars templates* recipe of this chapter. Be sure to refer to it
    if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a post partial template and altering
    our blog template so that it renders a new and old section.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `handlebars` task identifies a template starting with an underscore
    as a partial template and loads it. Let''s create a file called `_post.hbs` in
    our project directory, which will contain our partial post template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we''ll alter the configuration of the task by adding the new partial template''s
    filename to the list of templates that should be included in the task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the partial template is set up to be included, we can alter our `blog.hbs`
    template to make use of it. Let''s change it so that it renders a new and old
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can run the task using the `grunt handlebars` command, which should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We should now have a modified version of the `templates.js` file in our project
    directory, which contains the JST code for our latest blog template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps demonstrate the usage of the compiled template and display
    an example of the rendered result.
  prefs: []
  type: TYPE_NORMAL
- en: First, you'll need to include the Handlebars runtime library in the application
    or page in which you'd like to make use of the compiled templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing, the Handlebars runtime library could be downloaded
    from the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars-v1.3.0.js](http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars-v1.3.0.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, you'll need to include the `templates.js` file that was generated by the
    `handlebars` task in the application or page to make the `JST` global variable
    that contains the templates available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following example code will render the compiled template, using some sample
    data and store the result in the `result` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `result` variable should now contain the following HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `handlebars` task provides some useful options in conjunction with the loading
    of partial templates that allow us to make partials available in the namespace,
    indicate how partial templates should be identified, and also indicate how partial
    template names should be derived.
  prefs: []
  type: TYPE_NORMAL
- en: Making partials available in the namespace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the case that we''d like to make use of partial templates directly in our
    code and not just in our other templates, we can make them available in the namespace
    along with the other templates by using the `partialsUseNamespace` option as we
    do in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Indicating how partial templates should be identified
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ll probably reach the point where we would like to change the way partial
    templates are identified. This can be done using a combination of the `partialRegex`
    and `partialsPathRegex` options. The following example indicates that all templates
    found in the `partials` directory should be loaded as partials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Indicating how partial template names should be derived
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, the `handlebars` task removes the preceding underscore and file
    extension from partial file names to determine their names. The following example
    makes use of the `processPartialName` option to indicate that the entire file
    name should be uppercased before use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping Jade templates in AMD modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-jade (0.12.0)` plugin and its
    `amd` option to wrap our compiled blog template in an **Asynchronous Module Definition**
    (**AMD**) module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Compiling Jade templates* recipe of this chapter. Be sure to refer to it if you
    are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through altering our configuration so that it wraps
    our compiled templates in an AMD module.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll alter the configuration by adding the `amd` option to indicate
    that the compiled templates should be wrapped in an AMD module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the `namespace` option, we can now also specify that we no longer want
    the compiled templates to be contained within the `JST` namespace, since they
    will now be contained within their own module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now also compile the template to a different file name, as each template
    will now be represented by its own file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can run the task using the `grunt jade` command, which should produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There should now be a `blog.js` file located in the project directory that contains
    the compiled template wrapped in an AMD module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps demonstrate the usage of the compiled and wrapped template
    and display an example of the rendered result.
  prefs: []
  type: TYPE_NORMAL
- en: First, you'll need to ensure that the AMD framework you have in place has access
    to the Jade runtime library under the name `jade`. This may require the configuration
    of the AMD framework to be altered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing, the Jade runtime library was available in the root
    of the official Jade repository and could be downloaded from the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://raw.githubusercontent.com/jadejs/jade/1.11.0/runtime.js](https://raw.githubusercontent.com/jadejs/jade/1.11.0/runtime.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, you'll need to make sure that the `blog.js` file that was generated by
    the `jade` task is accessible to the AMD framework under whichever name or path
    you prefer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following example code will fetch the compiled template as a dependency,
    render the compiled template using some sample data, and then proceed to store
    the result in the `result` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `result` variable should now contain the following HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wrapping Handlebars templates in AMD modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-handlebars (0.8.0)` plugin and
    its `amd` option to wrap our compiled blog template in an AMD module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Compiling Handlebars templates* recipe of this chapter. Be sure to refer to it
    if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through altering our configuration so that it wraps
    our compiled templates in an AMD module.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll alter the configuration by adding the `amd` option to indicate
    that the compiled templates should be wrapped in an AMD module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the `namespace` option, we can now also specify that we no longer want
    the compiled templates to be contained within the `JST` namespace, since they
    will now be contained within their own module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now also compile the template to a different file name, as each template
    will now be represented by its own file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can run the task using the `grunt handlebars` command, which should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There should now be a `blog.js` file located in the project directory, which
    contains the compiled template wrapped in an AMD module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps demonstrate the usage of the compiled and wrapped template
    and display an example of the rendered result.
  prefs: []
  type: TYPE_NORMAL
- en: First, you'll need to ensure that the AMD framework you have in place has access
    to the Handlebars runtime library under the `handlebars` name. This may require
    the configuration of the AMD framework to be altered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing, the Handlebars runtime library could be downloaded
    from the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars-v1.3.0.js](http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars-v1.3.0.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the case of the runtime library mentioned in this tip, you will have to
    make use of a shim as the library is not prepared for use with AMD modules. You
    can read more about shimming using the RequireJS framework at the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://requirejs.org/docs/api.html#config-shim](http://requirejs.org/docs/api.html#config-shim)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, you'll need to make sure that the `blog.js` file that was generated by
    the `handlebars` task is accessible to the AMD framework under whichever name
    or path you prefer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following example code will fetch the compiled template as a dependency,
    render the compiled template using some sample data, and then proceed to store
    the result in the `result` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `result` variable should now contain the following HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wrapping Underscore templates in AMD modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-jst (0.6.0)` plugin and its `amd`
    option to wrap our compiled blog template in an AMD module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Compiling Underscore templates* recipe of this chapter. Be sure to refer to it
    if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through altering our configuration so that it wraps
    our compiled template in an AMD module.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll alter the configuration by adding the `amd` option to indicate
    that the compiled templates should be wrapped in an AMD module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the `namespace` option, we can now also specify that we no longer want
    the compiled templates to be contained within the `JST` namespace, since they
    will now be contained within their own module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now also compile the template to a different filename, as each template
    will now be located inside its own file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can run the task using the `grunt jst` command, which should produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There should now be a `blog.js` file located in the project directory that contains
    the compiled template wrapped in an AMD module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps demonstrate the usage of the compiled and wrapped template
    and display an example of the rendered result.
  prefs: []
  type: TYPE_NORMAL
- en: First, you'll need to ensure that the AMD framework you have in place loads
    the Underscore library on startup, since the wrappers created by this plugin don't
    reference it as a dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing, the Underscore runtime library could be downloaded
    from the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://underscorejs.org/underscore-min.js](http://underscorejs.org/underscore-min.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can read more about specifying startup dependencies on the RequireJS framework
    at the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://requirejs.org/docs/api.html#config-deps](http://requirejs.org/docs/api.html#config-deps)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, you'll need to make sure that the `blog.js` file that was generated by
    the `jst` task is accessible to the AMD framework under whichever name or path
    you prefer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following example code will fetch the compiled template as a dependency,
    render the compiled template using some sample data, and then proceed to store
    the result in the `result` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `result` variable should now contain the following HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wrapping Handlebars templates in CommonJS modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-handlebars (0.8.0)` plugin to
    wrap our compiled blog template in a **CommonJS** module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Compiling Handlebars templates* recipe of this chapter. Be sure to refer to it
    if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through altering our configuration so that it wraps
    our compiled template in a CommonJS module.
  prefs: []
  type: TYPE_NORMAL
- en: First, we'll alter the configuration by adding the `amd` option to indicate
    that the compiled templates should be wrapped in a CommonJS module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the `namespace` option, we can now also specify that we no longer want
    the compiled templates to be contained within the `JST` namespace, since they
    will now be contained within a module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can run the task using the `grunt handlebars` command, which should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There should now be a `templates.js` file located in the project directory that
    contains the compiled template wrapped in a CommonJS module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps demonstrate the usage of the compiled and wrapped template
    and display an example of the rendered result.
  prefs: []
  type: TYPE_NORMAL
- en: First, we'll have to ensure that the Handlebars library is installed in the
    current CommonJS supporting environment. Using Node.js as an example, the module
    will have to be installed using the `npm install handlebars` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will have to make it available in the piece of code that we''ll be
    importing the templates into, by using code similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we''ll need to import the templates into our code and pass it to the
    Handlebars library by using code similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This bit of code assumes that the generated `templates.js` file is on the same
    path as the file containing the piece of code we're currently working on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we''ve imported the templates, we can make use of them. The following
    example renders the `blog.hbs` templates and stores the results in the `result`
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `result` variable should now contain the following HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Altering Jade templates before compilation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There might come a time that you would want to alter the contents of a template
    before compiling or rendering it. This is most commonly required when you would
    like to remove excessive white space from templates, or if you'd like to remove
    or replace parts of a template you have no control over.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-jade (0.12.0)` plugin and the
    `processContent` option provided by its `jade` task to remove whitespace from
    our templates before rendering them to HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Compiling Jade templates* recipe of this chapter. Be sure to refer to it if you
    are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through altering our configuration so that excessive
    whitespace is removed from our templates before rendering them to HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we can provide an empty function to the `processContent` option that
    receives the content of the template and passes it through without altering it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can alter the code of the function provided to `processContent` so
    that it removes all of the trailing whitespace from the template''s content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now run the task using the `grunt jade` command, we will see output similar
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The rendered result in the `index.html` file should now display no signs of
    any of the trailing whitespace that was present in the original template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Altering Handlebars templates before compilation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although not very common, there might come a time that you would want to alter
    the contents of a template before compiling or rendering it. This is most commonly
    required when you would like to remove excessive whitespace from templates, or
    if you'd like to remove or replace certain parts of a template you have no control
    over.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-handlebars (0.8.0)` plugin and
    the `processContent` option provided by its `handlebars` task to remove whitespace
    from our templates before compiling them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Compiling Handlebars templates* recipe of this chapter. Be sure to refer to it
    if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through altering our configuration so that excessive
    whitespace is removed from our templates before compiling them.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we can provide an empty function to the `processContent` option that
    receives the content of the template and passes it through without altering it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can alter the code of the function provided to `processContent` so
    that it removes all of the leading and trailing whitespace from the template''s
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now run the task using the `grunt handlebars` command, we should see
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The compiled result in the `templates.js` file should now display no signs of
    any of the trailing whitespace that was present in the original template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Altering Underscore templates before compilation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although not very common, there might come a time that you would want to alter
    the contents of a template before compiling or rendering it. This is most commonly
    required when you would like to remove excessive whitespace from templates, or
    if you'd like to remove or replace certain parts of a template you have no control
    over.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-jst (0.6.0)` plugin and the `processContent`
    option provided by its `jst` task to remove whitespace from our templates before
    compiling them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Compiling Underscore templates* recipe of this chapter. Be sure to refer to it
    if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through altering our configuration so that excessive
    whitespace is removed from our templates before compiling them.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we can provide an empty function to the `processContent` option that
    receives the content of the template and passes it through without altering it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can alter the code of the function provided to `processContent` so
    that it removes all leading and trailing whitespace from the template''s content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now run the task using the `grunt jst` command, we should see output
    similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The compiled result in the `templates.js` file should now display no signs of
    any of the trailing whitespace that was present in the original template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
