["```js\nnpm init --yes \n```", "```js\nnpm install nodemon@2.0.20\nnpm install tsc-watch@6.0.4\nnpm install typescript@5.2.2\nnpm install @tsconfig/node20@20.1.4\nnpm install @types/node@20.6.1 \n```", "```js\n{\n  \"name\": \"primer\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n   ** \"use_js\": \"nodemon\",**\n **\"****use_ts\": \"tsc-watch --onSuccess \\\"node index.js\\\"\"**\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"@tsconfig/node20\": \"^20.1.4\",\n    \"@types/node\": \"^20.6.1\",\n    \"nodemon\": \"^2.0.20\",\n    \"tsc-watch\": \"^6.0.4\",\n    \"typescript\": \"^5.2.2\"\n  }\n} \n```", "```js\n{\n    \"extends\": \"@tsconfig/node20/tsconfig.json\"\n} \n```", "```js\nconsole.log(\"Hello, World\"); \n```", "```js\nnpm run use_js \n```", "```js\n[nodemon] 2.0.20\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,json\n[nodemon] starting `node index.js`\n**Hello, World**\n[nodemon] clean exit - waiting for changes before restart \n```", "```js\n**function sum(first, second) {**\n **return first + second;**\n**}**\n**let result =** **sum(10, 10);**\n**console.log(`Result value: ${result}, Result type: ${typeof result}`);**\n**result = sum(****10, \"10\");**\n**console.log(`Result value: ${result}, Result type: ${typeof result}`);** \n```", "```js\nResult value: 20, Result type: number\nResult value: 1010, Result type: string \n```", "```js\nResult value: **20**, Result type: **number**\nResult value: **1010**, Result type: **string** \n```", "```js\nfunction sum(first, second) {\n   ** if (typeof first == \"number\" && typeof second == \"number\") {**\n **return** **first + second;**\n **}**\n **throw Error(\"Expected two numbers\");**\n}\nlet result = sum(10, 10);\nconsole.log(`Result value: ${result}, Result type: ${typeof result}`);\nresult = sum(10, \"10\");\nconsole.log(`Result value: ${result}, Result type: ${typeof result}`); \n```", "```js\nResult value: 20, Result type: number\nC:\\primer\\index.js:5\n    throw Error(\"Expected two numbers\");\n    ^\nError: Expected two numbers at sum (C:\\primer\\index.js:5:11) \n```", "```js\nfunction sum(first: number, second: number) {\n    return first + second;\n}\nlet result = sum(10, \"10\");\nconsole.log(`Result value: ${result}, Result type: ${typeof result}`);\nresult = sum(10, 10);\nconsole.log(`Result value: ${result}, Result type: ${typeof result}`); \n```", "```js\nnpm run use_ts \n```", "```js\nindex.ts(5,22): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'. \n```", "```js\n**function sum(first: number, second: number) {**\n **if** **(typeof second == \"string\") {**\n **return first + Number.parseInt(second);**\n **} else {**\n **return first + second;**\n **}**\n**}**\nlet result = sum(10, \"10\");\nconsole.log(`Result value: ${result}, Result type: ${typeof result}`);\nresult = sum(10, 10);\nconsole.log(`Result value: ${result}, Result type: ${typeof result}`); \n```", "```js\n**function sum(first: number, second: number | string) {**\n    if (typeof second == \"string\") {\n        return first + Number.parseInt(second);\n    } else {\n        return first + second;       \n    }\n}\nlet result = sum(10, \"10\");\nconsole.log(`Result value: ${result}, Result type: ${typeof result}`);\nresult = sum(10, 10);\nconsole.log(`Result value: ${result}, Result type: ${typeof result}`); \n```", "```js\nResult value: 20, Result type: number\nResult value: 20, Result type: number \n```", "```js\nfunction sum(first: number, second: number | string) {\n   ** return first + second;**\n}\nlet result = sum(10, \"10\");\nconsole.log(`Result value: ${result}, Result type: ${typeof result}`);\nresult = sum(10, 10);\nconsole.log(`Result value: ${result}, Result type: ${typeof result}`); \n```", "```js\n...\nreturn first + second;       \n... \n```", "```js\nindex.ts(2,12): error TS2365: Operator '+' cannot be applied to types 'number' and 'string | number'. \n```", "```js\nfunction sum(first: number, second: number | string) {\n    **return first + (second as any);**\n}\nlet result = sum(10, \"10\");\nconsole.log(`Result value: ${result}, Result type: ${typeof result}`);\nresult = sum(10, 10);\nconsole.log(`Result value: ${result}, Result type: ${typeof result}`); \n```", "```js\nResult value: 1010, Result type: string\nResult value: 20, Result type: number \n```", "```js\nlet condition = true;\nlet person = \"Bob\";\nconst age = 40; \n```", "```js\n**let condition: boolean = true;**\n**let person: string = \"Bob\";**\n**const age: number = 40****;** \n```", "```js\nlet condition: boolean = true;\nlet person: string = \"Bob\";\nconst age: number = 40;\nlet place;\nconsole.log(\"Place value: \" + place + \" Type: \" + typeof(place));\nplace = \"London\";\nconsole.log(\"Place value: \" + place + \" Type: \" + typeof(place)); \n```", "```js\nPlace value: undefined Type: undefined\nPlace value: London Type: string \n```", "```js\nlet condition: boolean = true;\nlet person: string = \"Bob\";\nconst age: number = 40;\nlet place;\nconsole.log(\"Place value: \" + place + \" Type: \" + typeof(place));\nplace = \"London\";\nconsole.log(\"Place value: \" + place + \" Type: \" + typeof(place));\n**place = null;**\n**console.log(\"Place value: \" + place + \" Type: \" + typeof(place));** \n```", "```js\nPlace value: undefined Type: undefined\nPlace value: London Type: string\nPlace value: null Type: object \n```", "```js\nlet condition: boolean = true;\nlet person: string = \"Bob\";\nconst age: number = 40;\n**let place: string | undefined** **| null;**\nconsole.log(\"Place value: \" + place + \" Type: \" + typeof(place));\nplace = \"London\";\nconsole.log(\"Place value: \" + place + \" Type: \" + typeof(place));\nplace = null;\nconsole.log(\"Place value: \" + place + \" Type: \" + typeof(place)); \n```", "```js\nlet firstBool = true;\nlet secondBool = false; \n```", "```js\nlet firstString = \"This is a string\";\nlet secondString = 'And so is this'; \n```", "```js\nlet place: string | undefined | null;\nconsole.log(`Place value: ${place} Type: ${typeof(place)}`); \n```", "```js\n...\nconsole.log(`Place value: ${place} Type: ${typeof(place)}`);\n... \n```", "```js\nPlace value: undefined Type: undefined \n```", "```js\nlet daysInWeek = 7;\nlet pi = 3.14;\nlet hexValue = 0xFFFF; \n```", "```js\nlet person1 = \"Alice\";\nlet person2: string | undefined = \"Bob\"; \n```", "```js\nlet firstName = \"Adam\";\nif (firstName == \"Adam\") {\n    console.log(\"firstName is Adam\");\n} else if (firstName == \"Jacqui\") {\n    console.log(\"firstName is Jacqui\");\n} else {\n    console.log(\"firstName is neither Adam or Jacqui\");\n}\nswitch (firstName) {\n    case \"Adam\":\n        console.log(\"firstName is Adam\");\n        break;\n    case \"Jacqui\":\n        console.log(\"firstName is Jacqui\");\n        break;\n    default:\n        console.log(\"firstName is neither Adam or Jacqui\");\n        break;\n} \n```", "```js\nfirstName is Adam\nfirstName is Adam \n```", "```js\nlet firstVal: any = 5;\nlet secondVal: any = \"5\";\nif (firstVal == secondVal) {\n    console.log(\"They are the same\");\n} else {\n    console.log(\"They are NOT the same\");\n} \n```", "```js\nThey are the same \n```", "```js\nlet firstVal: any = 5;\nlet secondVal: any = \"5\";\n**if (firstVal === secondVal) {**\n    console.log(\"They are the same\");\n} else {\n    console.log(\"They are NOT the same\");\n} \n```", "```js\nThey are NOT the same \n```", "```js\n**let firstVal = 5;**\n**let** **secondVal = \"5\";**\nif (firstVal === secondVal) {\n    console.log(\"They are the same\");\n} else {\n    console.log(\"They are NOT the same\");\n} \n```", "```js\nindex.ts(4,5): error TS2367: This comparison appears to be unintentional because the types 'number' and 'string' have no overlap \n```", "```js\n`...`\n`if (customer) {`\n`...` \n```", "```js\n`...`\n`if (customer == true) {`\n`...` \n```", "```js\nlet val1: string | undefined;\nlet val2: string | undefined = \"London\";\nlet coalesced1 = val1 || \"fallback value\";\nlet coalesced2 = val2 || \"fallback value\";\nconsole.log(`Result 1: ${coalesced1}`);\nconsole.log(`Result 2: ${coalesced2}`); \n```", "```js\nResult 1: fallback value\nResult 2: London \n```", "```js\nlet val1: string | undefined;\nlet val2: string | undefined = \"London\";\n**let val3: number |** **undefined = 0;**\nlet coalesced1 = val1 || \"fallback value\";\nlet coalesced2 = val2 || \"fallback value\";\n**let coalesced3 = val3 || 100;**\nconsole.log(`Result 1: ${coalesced1}`);\nconsole.log(`Result 2: ${coalesced2}`);\n**console.log(`Result 3: ${coalesced3}****`);** \n```", "```js\nResult 1: fallback value\nResult 2: London\nResult 3: 100 \n```", "```js\nlet val1: string | undefined;\nlet val2: string | undefined = \"London\";\nlet val3: number | undefined = 0;\n**let coalesced1 = val1 ?? \"fallback value\";**\n**let coalesced2 = val2 ?? \"fallback value\";**\n**let coalesced3 = val3 ?? 100;**\nconsole.log(`Result 1: ${coalesced1}`);\nconsole.log(`Result 2: ${coalesced2}`);\nconsole.log(`Result 3: ${coalesced3}`); \n```", "```js\nResult 1: fallback value\nResult 2: London\nResult 3: 0 \n```", "```js\nlet count: number | undefined | null = 100;\nif (count != null && count != undefined) {\n    let result1: string = count.toFixed(2);\n    console.log(`Result 1: ${result1}`);\n} \n```", "```js\nResult 1: 100.00 \n```", "```js\nlet count: number | undefined | null = 100;\nif (count != null && count != undefined) {\n    let result1: string = count.toFixed(2);\n    console.log(`Result 1: ${result1}`);\n}\n**let result2: string | undefined = count?.toFixed(****2);**\n**console.log(`Result 2: ${result2}`);** \n```", "```js\n...\nlet result2: string | undefined = count?.toFixed(2);\n... \n```", "```js\nResult 1: 100.00\nResult 2: 100.00 \n```", "```js\nfunction writeValue(val: string | null) {\n    console.log(`Value: ${val ?? \"Fallback value\"}`)\n}\nwriteValue(\"London\");\nwriteValue(null); \n```", "```js\nValue: London\nValue: Fallback value \n```", "```js\n**function writeValue****(val?: string) {**\n    console.log(`Value: ${val ?? \"Fallback value\"}`)\n}\nwriteValue(\"London\");\n**writeValue();** \n```", "```js\nValue: London\nValue: Fallback value \n```", "```js\n**function writeValue(val: string = \"default value\") {**\n **console.log****(`Value: ${val}`)**\n**}**\nwriteValue(\"London\");\nwriteValue(); \n```", "```js\nValue: London\nValue: default value \n```", "```js\nfunction writeValue(val: string, ...extraInfo: string[]) {\n    console.log(`Value: ${val}, Extras: ${extraInfo}`)\n}\nwriteValue(\"London\", \"Raining\", \"Cold\");\nwriteValue(\"Paris\", \"Sunny\");\nwriteValue(\"New York\"); \n```", "```js\nValue: London, Extras: Raining,Cold\nValue: Paris, Extras: Sunny\nValue: New York, Extras: \n```", "```js\nfunction composeString(val: string) : string {\n    return `Composed string: ${val}`;\n}\nfunction writeValue(val?: string) {\n    console.log(composeString(val ?? \"Fallback value\"));\n}\nwriteValue(\"London\");\nwriteValue(); \n```", "```js\n...\nfunction composeString(val: string) **: string** {\n... \n```", "```js\nComposed string: London\nComposed string: Fallback value \n```", "```js\nfunction getUKCapital() : string {\n    return \"London\";\n}\nfunction writeCity(f: () => string)  {\n    console.log(`City: ${f()}`)\n}\nwriteCity(getUKCapital); \n```", "```js\n...\nfunction writeCity(**f: () => string**)  {\n... \n```", "```js\n...\nconsole.log(`City: ${**f()**}`)\n... \n```", "```js\n...\nwriteCity(**getUKCapital**);\n... \n```", "```js\nCity: London \n```", "```js\nfunction getUKCapital() : string {\n    return \"London\";\n}\nfunction writeCity(f: () => string)  {\n    console.log(`City: ${f()}`)\n}\nwriteCity(getUKCapital);\n**writeCity(****() => \"Paris\");** \n```", "```js\nCity: London\nCity: Paris \n```", "```js\nfunction getUKCapital() : string {\n    return \"London\";\n}\nfunction writeCity(f: () => string)  {\n    console.log(`City: ${f()}`)\n}\nwriteCity(getUKCapital);\nwriteCity(() => \"Paris\");\n**let myCity = \"Rome\";**\n**writeCity(() => myCity);** \n```", "```js\nCity: London\nCity: Paris\nCity: Rome \n```", "```js\nlet myArray = [];\nmyArray[0] = 100;\nmyArray[1] = \"Adam\";\nmyArray[2] = true; \n```", "```js\n**let** **myArray: any[] = [];**\nmyArray[0] = 100;\nmyArray[1] = \"Adam\";\nmyArray[2] = true; \n```", "```js\n**let** **myArray: (number | string | boolean)[] = [];**\nmyArray[0] = 100;\nmyArray[1] = \"Adam\";\nmyArray[2] = true; \n```", "```js\nlet myArray: (number | string | boolean)[] = [100, \"Adam\", true]; \n```", "```js\nlet myArray: (number | string | boolean)[] = [100, \"Adam\", true];\n**let val = myArray[0];**\n**console.log(`Value: ${val}`);** \n```", "```js\nValue: 100 \n```", "```js\nlet myArray: (number | string | boolean)[] = [100, \"Adam\", true];\n**myArray[0****] = \"Tuesday\";**\nlet val = myArray[0];\nconsole.log(`Value: ${val}`); \n```", "```js\nValue: Tuesday \n```", "```js\nlet myArray: (number | string | boolean)[] = [100, \"Adam\", true];\n**for (let i = 0; i < myArray.length; i++) {**\n **console.log(\"Index \" + i + \": \" + myArray[i]);**\n**}**\n**console****.log(\"---\");**\n**myArray.forEach((value, index) =>**\n **console.log(\"Index \" + index + \": \" + value));** \n```", "```js\nIndex 0: 100\nIndex 1: Adam\nIndex 2: true\n---\nIndex 0: 100\nIndex 1: Adam\nIndex 2: true \n```", "```js\nlet myArray: (number | string | boolean)[] = [100, \"Adam\", true];\n**let otherArray = [...myArray, 200, \"Bob\", false];**\n**// for (let i = 0; i < myArray.length; i++) {**\n**//     console.log(\"Index \" + i + \": \" + myArray[i]);**\n**// }**\n**// console.log(\"---\");**\n**otherArray.forEach(****(value, index) =>**\n **console.log(\"Index \" + index + \": \" + value));** \n```", "```js\n...\nlet otherArray = [**...myArray**, 200, \"Bob\", false];\n... \n```", "```js\nIndex 0: 100\nIndex 1: Adam\nIndex 2: true\nIndex 3: 200\nIndex 4: Bob\nIndex 5: false \n```", "```js\nlet hat = {\n    name: \"Hat\",\n    price: 100\n};\nlet boots = {\n    name: \"Boots\",\n    price: 100\n}\nconsole.log(`Name: ${hat.name}, Price: ${hat.price}`);\nconsole.log(`Name: ${boots.name}, Price: ${boots.price}`); \n```", "```js\n...\nconsole.log(`Name: ${hat.name}, Price: ${hat.price}`);\n... \n```", "```js\nName: Hat, Price: 100\nName: Boots, Price: 100 \n```", "```js\nlet hat = {\n    name: \"Hat\",\n    price: 100\n};\nlet boots = {\n    name: \"Boots\",\n    price: 100\n}\n**function printDetails(product : { name: string, price: number}) {**\n **console.log(`Name: ${product.name}, Price: ${product.price}****`);** \n**}**\n**printDetails(hat);**\n**printDetails(boots);** \n```", "```js\nlet hat = {\n    name: \"Hat\",\n    price: 100\n};\nlet boots = {\n    name: \"Boots\",\n    price: 100,\n   ** category: \"Snow Gear\"**\n}\nfunction printDetails(product : { name: string, price: number}) {\n    console.log(`Name: ${product.name}, Price: ${product.price}`);   \n}\nprintDetails(hat);\nprintDetails(boots); \n```", "```js\nlet hat = {\n    name: \"Hat\",\n    price: 100\n};\nlet boots = {\n    name: \"Boots\",\n    price: 100,\n    category: \"Snow Gear\"\n}\n**function printDetails(product : { name: string, price: number,**\n **category?: string}) {**\n **if (product.category != undefined) {**\n **console.log(****`Name: ${product.name}, Price: ${product.price}, `**\n **+ `Category: ${product.category}`);** \n **} else {**\n **console.log(`Name: ${product.name}, Price: ${product.price}****`);** \n **}**\n**}**\nprintDetails(hat);\nprintDetails(boots); \n```", "```js\nName: Hat, Price: 100\nBoots, Price: 100, Category: Snow Gear \n```", "```js\n**class** **Product {**\n **constructor(name: string, price: number, category?: string) {**\n **this.name = name;**\n **this.price = price;**\n **this.category** **= category;**\n **}**\n **name: string**\n **price: number**\n **category?: string**\n**}**\n**let hat = new Product(\"Hat\", 100);**\n**let boots = new Product****(\"Boots\", 100, \"Snow Gear\");**\nfunction printDetails(product : { name: string, price: number,\n        category?: string}) {\n    if (product.category != undefined) {\n        console.log(`Name: ${product.name}, Price: ${product.price}, `\n            + `Category: ${product.category}`);   \n    } else {\n        console.log(`Name: ${product.name}, Price: ${product.price}`);   \n    }\n}\nprintDetails(hat);\nprintDetails(boots); \n```", "```js\n...\nlet hat = **new** Product(\"Hat\", 100);\n... \n```", "```js\nName: Hat, Price: 100\nName: Boots, Price: 100, Category: Snow Gear \n```", "```js\nclass Product {\n    constructor(name: string, price: number, category?: string) {\n        this.name = name;\n        this.price = price;\n        this.category = category;\n    }\n    name: string\n    price: number\n    category?: string\n    **printDetails() {**\n **if (this.category != undefined) {**\n **console.log(`Name: ${this****.name}, Price: ${this.price}, `**\n **+ `Category: ${this.category}`);** \n **} else {**\n **console.log(`Name:** **${this.name}, Price: ${this.price}`);** \n **}** \n **}**\n}\nlet hat = new Product(\"Hat\", 100);\nlet boots = new Product(\"Boots\", 100, \"Snow Gear\");\n**// function printDetails(product : { name: string, price: number,**\n**//         category?: string}) {**\n**//     if (product.category != undefined) {**\n**//         console.log(`Name: ${product.name}, Price: ${product.price}, `**\n**//             + `Category: ${product.category}`);** \n**//     } else {**\n**//         console.log(`Name: ${product.name}, Price: ${product.price}`);** \n**//     }**\n**// }**\n**hat.printDetails();**\n**boots.printDetails();** \n```", "```js\n...\nhat.**printDetails****();**\n... \n```", "```js\n...\nconsole.log(`Name: ${**this.name**}, Price: ${**this.price**}`);   \n... \n```", "```js\nName: Hat, Price: 100\nName: Boots, Price: 100, Category: Snow Gear \n```", "```js\nclass Product {\n   ** constructor(public name: string, public price: number,**\n **public category?: string) {**\n **// this.name = name;**\n **// this.price = price;**\n **// this.category = category;**\n **}**\n **// name: string**\n **// price: number**\n **// category?: string**\n    printDetails() {\n        if (this.category != undefined) {\n            console.log(`Name: ${this.name}, Price: ${this.price}, `\n                + `Category: ${this.category}`);   \n        } else {\n            console.log(`Name: ${this.name}, Price: ${this.price}`);   \n        }       \n    }\n}\nlet hat = new Product(\"Hat\", 100);\nlet boots = new Product(\"Boots\", 100, \"Snow Gear\");\nhat.printDetails();\nboots.printDetails(); \n```", "```js\nclass Product {\n    constructor(public name: string, public price: number,\n        public category?: string) {\n    }\n    printDetails() {\n        if (this.category != undefined) {\n            console.log(`Name: ${this.name}, Price: ${this.price}, `\n                + `Category: ${this.category}`);   \n        } else {\n            console.log(`Name: ${this.name}, Price: ${this.price}`);   \n        }       \n    }\n}\n**class** **DiscountProduct extends Product {**\n **constructor(name: string, price: number, private discount: number) {**\n **super(name, price - discount);**\n **}**\n**}**\n**let hat = new** **DiscountProduct(\"Hat\", 100, 10);**\nlet boots = new Product(\"Boots\", 100, \"Snow Gear\");\nhat.printDetails();\nboots.printDetails(); \n```", "```js\nName: Hat, Price: 90\nName: Boots, Price: 100, Category: Snow Gear \n```", "```js\nclass Product {\n    constructor(public name: string, public price: number,\n         public category?: string) {\n    }\n    printDetails() {\n        if (this.category != undefined) {\n            console.log(`Name: ${this.name}, Price: ${this.price}, ` +\n                `Category: ${this.category}`);   \n        } else {\n            console.log(`Name: ${this.name}, Price: ${this.price}`);   \n        }       \n    }\n}\nclass DiscountProduct extends Product {\n    constructor(name: string, price: number, private discount: number) {\n        super(name, price - discount);\n    }\n}\nlet hat = new DiscountProduct(\"Hat\", 100, 10);\nlet boots = new Product(\"Boots\", 100, \"Snow Gear\");\n**// hat.printDetails();**\n**// boots.printDetails();**\n**console.log(`Hat is a Product? ${hat instanceof Product}`);**\n**console.****log(`Hat is a DiscountProduct? ${hat instanceof DiscountProduct}`);**\n**console.log(`Boots is a Product? ${boots instanceof Product}`);**\n**console.****log(\"Boots is a DiscountProduct? \"**\n **+ (boots instanceof DiscountProduct));** \n```", "```js\nHat is a Product? True\nHat is a DiscountProduct? True\nBoots is a Product? True\nBoots is a DiscountProduct? false \n```", "```js\nexport class Name {\n    constructor(public first: string, public second: string) {}\n    get nameMessage() {\n        return `Hello ${this.first} ${this.second}`;\n    }\n} \n```", "```js\nexport class WeatherLocation {\n    constructor(public weather: string, public city: string) {}\n    get weatherMessage() {\n        return `It is ${this.weather} in ${this.city}`;\n    }\n} \n```", "```js\nimport { Name } from \"./modules/name\";\nimport { WeatherLocation } from \"./modules/weather\";\nlet name = new Name(\"Adam\", \"Freeman\");\nlet loc = new WeatherLocation(\"raining\", \"London\");\nconsole.log(name.nameMessage);\nconsole.log(loc.weatherMessage); \n```", "```js\nHello Adam Freeman\nIt is raining in London \n```", "```js\nexport { Name } from \"./name\";\nexport { WeatherLocation } from \"./weather\"; \n```", "```js\n**import { Name, WeatherLocation } from \"./modules\";**\nlet name = new Name(\"Adam\", \"Freeman\");\nlet loc = new WeatherLocation(\"raining\", \"London\");\nconsole.log(name.nameMessage);\nconsole.log(loc.weatherMessage); \n```", "```js\n`...`\n`import { Name, WeatherLocation } from \"./modules\";`\n`...` \n```", "```js\n`...`\n`import { Express } from \"express\";`\n`...` \n```"]