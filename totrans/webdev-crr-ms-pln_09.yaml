- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Landing Your First Job
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Okay, so, you’ve spent a lot of time and expended a lot of calories learning
    the technical side of web development. You’ve built some code and you now think
    you’re ready for the next step: landing your first job and starting your web development
    career. But how do you actually *do* that?!'
  prefs: []
  type: TYPE_NORMAL
- en: I’m old enough to remember a time when getting a job meant looking at wanted
    ads in physical newspapers (ugh, I hate writing that!), but nowadays, that’s rarely
    how people find jobs. And even then, once you find a job opening, the process
    of applying, interviewing, and ultimately getting a job isn’t usually just a one-time
    chat with a manager, particularly in web development. You may have to impress
    more than one person to become an employed web developer.
  prefs: []
  type: TYPE_NORMAL
- en: I’m also old enough and experienced enough in this field that I’ve been through
    several interviews myself, and perhaps more importantly, I’ve *conducted* hundreds
    of interviews. That means I know what it’s like to be on both sides of the table
    – I know how terrifying being the candidate can be, and I know how immensely difficult
    it is to conduct a good interview (seriously, it seems like it’s just asking questions,
    but doing it well and fairly is *so* much harder than it seems). I’m going to
    take all that knowledge and experience and roll it into this chapter, hopefully
    to your benefit!
  prefs: []
  type: TYPE_NORMAL
- en: With that in mind, this chapter will give you the knowledge you need to find
    job openings in web development, how to apply for them, what the interviews might
    be like, how you can effectively prep for them and handle them, and a few other
    topics that I feel are important to keep in the back of your mind, such as work/life
    balance.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the FAANG/non-FAANG divide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the web to become a web developer!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polishing your resume to a glistening sheen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having repos, portfolios, and samples to show
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding a typical web developer interview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling common interview questions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remembering that it’s not all about work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the FAANG/non-FAANG divide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I touched on FAANG briefly in [*Chapter 1*](B18315_01.xhtml#_idTextAnchor015),
    but let’s dig deeper and get into some related ideas.
  prefs: []
  type: TYPE_NORMAL
- en: If you go online right now and look at several of the most popular subreddits
    on Reddit, or on many other sites where people gather to discuss how to get a
    job in the IT field, you’ll very quickly come across a common term stating that
    there’s only one target and one way into this field, and that term is FAANG. What
    does it mean and why do people focus on it so much?
  prefs: []
  type: TYPE_NORMAL
- en: '**FAANG** stands for **Facebook, Amazon, Apple, Netflix, and Google**. It began
    in stock market circles to refer to the largest, most well-known tech stocks.
    Nowadays, there are several other acronyms you might see, such as **FAAMG** (**Facebook,
    Amazon, Apple, Microsoft, and Google**), **MAMAA** (**Meta, Apple, Microsoft,
    Amazon, and Alphabet**), and **MATANA** (**Microsoft, Apple, Tesla, Alphabet,
    Nvidia,** **and Amazon**).'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll let the stock boys sort out which acronym they think makes the most sense
    for their realm, but for developers, FAANG is most often used to refer to the
    biggest, most well-paying, and best-for-your-career companies to work at. It’s
    less about specific companies and more so about companies that are viewed favorably
    from a tech employment standpoint. Some companies can still be considered a “FAANG
    company,” even if they’re not one of the five listed. Companies such as Airbnb,
    Samsung, Oracle, Adobe, Cisco, Qualcomm, eBay, and Uber might be considered FAANG
    companies by some people, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Online, you’ll see a lot of conversations about joining FAANG companies – regardless
    of exactly which companies are represented in the acronym – talking about the
    companies that will look best on your resumes going forward. Or talking about
    the companies where the best and brightest tend to work. Or talking about the
    companies where you’ll bust your butt working but will be rewarded financially
    and in cache because other developers will almost look upon you with awe. Or all
    of the above!
  prefs: []
  type: TYPE_NORMAL
- en: 'To be clear: yes, these types of companies tend to pay very well. And yes,
    these companies do tend to look good on a resume. And yes, working there will
    be challenging but rewarding because you will be working with a lot of top-notch
    engineers and the latest tech, and you’ll be working on some exciting products
    that will probably affect a lot of people’s lives. But they aren’t the best choice
    for everyone, and most likely aren’t the best choice for someone just starting.
    Still, how do you make that decision for yourself? Let’s talk about that a bit.'
  prefs: []
  type: TYPE_NORMAL
- en: Calibrating your FAANG expectations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What I’ve said so far is all good stuff and it’s easy to understand why so
    many developers are excited by the opportunity to work at such companies. But
    I see a lot of people in online discussions making a big mistake when it comes
    to FAANG: they think it’s the only way to fame and riches and they think there
    is nowhere else to work where you can do exciting work. Some also make the mistake
    of thinking that simply graduating college with a CS degree is enough to get you
    in the door in such companies.'
  prefs: []
  type: TYPE_NORMAL
- en: None of that is true. There are great opportunities elsewhere, and most of them
    will be a lot easier to land than at FAANG companies.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be blunt: as an entry-level developer, your odds of being hired at any FAANG
    or FAANG-like company are pretty low. These companies are looking for the cream
    of the crop and, more importantly, people who can *prove* they are just that.
    You could be the best developer out there right now but if you don’t have a track
    record, it may not be outright impossible to be hired at a FAANG, but it’s certainly
    not something you should bank on. Even people with a lot of experience and a proven
    track record of success often find it difficult to get hired at such companies
    because the interview process is so rigorous (a topic I’ll get into more later
    in this chapter).'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t let that blunt your enthusiasm, though! As I said, there are great opportunities
    outside of FAANG companies – positions that tend to be somewhat easier to get.
    While working at a FAANG will bolster your resume, working at a non-FAANG company
    will tend to offer you a gentler introduction to the professional IT world. Many
    companies are using the latest technology too, so you’ll have almost as much opportunity
    to learn on the job but with a bit less stress and high expectations as you will
    be when placed at a FAANG.
  prefs: []
  type: TYPE_NORMAL
- en: It’s not strictly FAANG versus non-FAANG, though. There’s another divide to
    be aware of besides FAANG versus non-FAANG, and that’s tech companies versus non-tech
    companies.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing tech companies to non-tech companies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tech companies are those that produce products – specifically tech products
    – and sell them to customers. Apple is a great example of this. They create iPhones,
    iPads, and MacBooks, among many other gadgets, all of which are tech products.
    Their entire focus is on making those products and developing the tech in them.
    Tech is therefore central to what they do because it essentially *is* the product.
  prefs: []
  type: TYPE_NORMAL
- en: By contrast, take a company such as Wells Fargo. They’re a financial company,
    so things such as checking accounts, credit cards, and mutual funds are their
    products. But there is a lot of tech that goes into making their products possible,
    it’s just that the tech isn’t the product they sell directly. Tech is something
    that enables their core product offerings. At such a company, you, as a developer,
    might create a system that’s used to reconcile daily account activity, but that
    system isn’t what gets sold to customers – likely, they wouldn’t even know about
    it. Wells Fargo is a non-tech company because while tech is a key ingredient in
    what they do, that tech isn’t the end product.
  prefs: []
  type: TYPE_NORMAL
- en: FAANG companies tend to be tech companies (some would blur the line certainly,
    but as a broad generality, this is true). And tech companies – I think it’s obvious
    to say – tend to have a higher bar for their tech people simply because it’s necessitated
    by the products they produce.
  prefs: []
  type: TYPE_NORMAL
- en: The conclusion from all of this is that when looking for your first job, my
    advice would be to look for non-tech, non-FAANG positions first. I don’t want
    to give a false impression that they’ll be easy to get – landing your first job
    in IT is going to be a challenge no matter what experience you have – but it will
    be comparatively a lot easier than a tech company, especially a FAANG. They will
    allow you to build up that experience, and your track record, at which point you
    can target tech companies and even FAANGs more effectively and up your odds of
    success in landing such a position.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, that isn’t to say you should ignore such tech companies entirely.
    Definitely not! If a good opportunity presents itself then by all means, go for
    it! But you need to set realistic expectations and tailor your job search based
    on those expectations, and non-tech companies are often a better bet.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you understand what a FAANG is, and you understand tech companies
    versus non-tech companies. Now, let’s talk about how you can go about finding
    job opportunities out in the world regardless of the kind of company you want
    to apply to.
  prefs: []
  type: TYPE_NORMAL
- en: Using the web to become a web developer!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being a web developer means being able to use the web, and that might as well
    start with finding a web developer job! Today, it’s probably more common to find
    a job online rather than any other way. Fortunately, because it’s so common, it
    has become pretty easy. To begin with, there are many sites dedicated to job hunting.
  prefs: []
  type: TYPE_NORMAL
- en: Using job hunting sites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is no shortage of sites that list job openings on the web, and many will
    make the process of applying a snap. Of course, as a general rule, you’ll probably
    want to stick with the most well-known sites out there. As of this writing, in
    no particular order, those would include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Indeed* ([indeed.com](http://indeed.com)): Generally, this is the largest
    site out there with the best coverage of most industries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*CareerBuilder* ([careerbuilder.com](http://careerbuilder.com)): This site,
    like many of these, offers more than just job listings, including things such
    as a career advice blog and salary information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*ZipRecruiter* ([ziprecruiter.com](http://ziprecruiter.com)): ZipRecruiter
    is good for job hunters as well as employers and has a lot of great features,
    including a resume database so that employers can search for the right candidate
    themselves.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Monster* ([monster.com](http://monster.com)): Monster is one of the elder
    statesmen of job-hunting sites at this point, but it’s still a great site with
    an easy-to-use job search engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Glassdoor* ([glassdoor.com](http://glassdoor.com)): Glassdoor is somewhat
    unique in that not only does it have job listings, but it also has anonymous feedback
    from current employees, giving you a good insight into what working at a given
    company might be like.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*LinkedIn* ([linkedin.com](http://linkedin.com)): I’m going to talk about LinkedIn
    specifically shortly, but suffice it to say that it can be a big help in hunting
    down a job, but in a slightly different way than most others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Dice* ([dice.com](http://dice.com)): Dice is a US-only tech-specific site,
    so while it’s not generally applicable like the others are, it’s perfect for you
    as a prospective web developer, assuming you’re in the US that is.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Upwork* ([upwork.com](http://upwork.com)): This site is a bit different: if
    you want to do freelance work, this site will help you get matched up with people
    looking to hire a developer for a single project. This can be a good way to gain
    some experience while making some money and searching for something more permanent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As someone trying to get into the field for the first time, finding a job that
    fits you can be hard. But one piece of advice I’d give is don’t limit yourself
    too much. At first, you’ll have a natural tendency to filter by entry-level positions,
    or job listings that specify a lower skill level since it makes sense to think
    you’d have a better shot at such a position. But, while you definitely shouldn’t
    go off applying for every position listed, especially those that list a lot of
    skills you have no idea about, don’t be afraid to apply for a position that seems
    just a little beyond your grasp. Often, you can impress during an interview (which
    we’ll talk about later!), which can cause people to give you a shot, knowing they
    may have to train you a bit. It’s a fine line between jobs that are really beyond
    your reach at this point and those you can grow into if given a chance. Ultimately,
    the point is don’t sell yourself *too* short.
  prefs: []
  type: TYPE_NORMAL
- en: Getting back to the sites themselves, these sites offer a lot of other things
    too, not just job listings. They can help you write a good resume, give you job-hunting
    advice, provide insight into the companies you may apply to, and they can even
    proactively match you up with openings based on criteria you (and a prospective
    employer) set. All of this is helpful functionality that can help in your search.
  prefs: []
  type: TYPE_NORMAL
- en: But these sites aren’t the be-all, end-all of job hunting. There is another
    way to go that, yes, requires more time and effort on your part, but which can
    sometimes lead to paths you might miss otherwise, and that’s going directly to
    the websites of various companies.
  prefs: []
  type: TYPE_NORMAL
- en: Going directly to company sites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most companies in the world have a website, and many of them have job postings
    listed there. The important thing to remember is that there may be job postings
    on company websites that aren’t on the major job hunt websites, or that may not
    appear on those sites until later. Therefore, you could potentially get moving
    on an opportunity before hundreds or thousands of others are even aware of it,
    which gives you a leg-up on the competition!
  prefs: []
  type: TYPE_NORMAL
- en: So, the first thing to do is to find companies you may want to work for. This
    will usually mean some online searches, and usually, that will be for companies
    in your area or a reasonable commuting distance. Of course, if you’re open to
    relocation, then your opportunities grow (my first job in IT was in a different
    US state, which required relocation). You’ll want to do some research, see what
    the company is all about, and maybe try to get some “insider” information from
    a site such as Glassdoor to work out if it’s somewhere you might want to work.
  prefs: []
  type: TYPE_NORMAL
- en: As part of that research, explore their website. You’ll most likely be able
    to find a link to job postings somewhere, perhaps in their **human resources**
    (**HR**) section. Failing that, you will probably be able to at least find a phone
    number or email address that will allow you to contact the company and inquire
    about openings. But let’s assume you find job postings online.
  prefs: []
  type: TYPE_NORMAL
- en: At that point, you’ll want to scrutinize the jobs listed and decide which are
    right for you. And again, while you shouldn’t apply to everything, don’t be too
    shy either. It’s often true that job listings are written by HR folks who don’t
    have a full or proper grasp of what a position requires. For example, the job
    listing may list a whole bunch of technical skills (languages and technologies),
    but in reality, only a subset is required. It may also be true that even a subset
    isn’t required, per se – if you can demonstrate your ability to learn, then you
    may get hired even minus all the listed skills.
  prefs: []
  type: TYPE_NORMAL
- en: The trick – and it’s a difficult one to pull off, to be honest about it – is
    to get past HR and get to the technical people who will ultimately decide whether
    to extend you an offer or not. This is true regardless of whether your initial
    contact starts directly from a company’s website or through a job search website.
    If you can manage it, though, you have an opportunity to impress someone, and
    that’s ultimately the goal.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have covered two main strategies for finding a job. However, there
    is a third that you may have more difficulty availing yourself of when trying
    to get your first job in the field, though you shouldn’t dismiss it entirely,
    and that’s networking.
  prefs: []
  type: TYPE_NORMAL
- en: Building a network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Getting into the field can be challenging, but once you’re in and have built
    up some experience, it gets a little easier to get your next job or advance to
    the next position. To be clear, it never outright gets *easy*, but certainly *easier*.
    One of the things that makes it easier even beyond experience is the people you
    meet along the way. There’s a famous saying that it’s not what you know but *who*
    you know, and while it may not be as absolute as the saying suggests, there is
    truth to it.
  prefs: []
  type: TYPE_NORMAL
- en: As you work in the industry, you’ll meet many people – coworkers, managers,
    and people you interact with on other teams. If you cultivate relationships with
    them, they become assets down the road when and if you are on the hunt for another
    job (hopefully voluntarily, but you never know). As these people move around to
    other companies, and you keep in touch with them, they become your “ins” – people
    you can go to to find out about openings before they become public perhaps, or
    simply to get your resume into the HR system faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is your **network**, and building that network is called **networking**.
    The good news is no special skills are required: you just have to talk to people!
    I suppose that might be a special skill for some, but it’s one anyone can learn
    if so.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that this doesn’t mean you need to go to ballgames and their kids’ recitals
    all the time! I mean, making friends is great too, but this is a *professional*
    network, so what we mean is keeping contact information for people, ensuring it’s
    valid, and maybe an occasional “Hi, how are you?” touch base email to maintain
    the relationship.
  prefs: []
  type: TYPE_NORMAL
- en: Some websites can help you do this too, but one stands above the rest – LinkedIn.
    I mentioned it before, but it bears some further discussion because it’s more
    about building your network than it is job hunting – though it turns out to be
    great for the latter because of the former!
  prefs: []
  type: TYPE_NORMAL
- en: Once you join LinkedIn, you’ll build your profile there, which includes things
    such as schooling, work experience, and technical skills, but what’s helpful is
    that you can get others to endorse your skills, thereby showing the world what
    you know and that it’s not just you claiming that you’re good at these things.
    Then, you network with people you know, or companies you’re familiar with. LinkedIn
    will suggest people to you based on your profile data as well as your geographic
    location. You then *connect* with these people – assuming they reciprocate – and
    that starts to build a web of people you’re connected to.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most helpful things you can do is connect with recruiters. Once
    you start building out your LinkedIn profile, you’ll almost certainly start getting
    connection invitations from recruiters before too long. These are people whose
    job it is to get people hired. It’s not out of the kindness of their hearts: recruiters
    get paid to do this, usually by employers, but sometimes by employees. They’ll
    take your profile (and resume) and work to find job listings that you match up
    with. They will sometimes have access to listings that aren’t public yet, which
    can make them a valuable asset. Recruiters – at least the good ones – will often
    help prep you a bit for your interview, giving you tips and pointers specific
    to the job you’re interviewing for. Afterward, they can get feedback from the
    company if you aren’t hired, and they can then use it to help you perform better
    next time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, as with most things, not all recruiters are equal, and not all are
    especially good. So, you must use your gut when dealing with them. Don’t sign
    anything unless you’re *really* comfortable with them! You don’t want to find
    yourself tied to one and only one recruiter because you signed an exclusivity
    contract, for example (thankfully, such tactics aren’t common). A good recruiter
    will be like a good car salesman: solid and helpful, but not overly forceful.
    It’s one of those “you’ll know a bad one when you see it” situations.'
  prefs: []
  type: TYPE_NORMAL
- en: There’s another way you can start building your network even as a newcomer to
    the field, and it also happens to be free (in most cases), as well as fun and
    educational! I’m talking about the world of user groups and meetups.
  prefs: []
  type: TYPE_NORMAL
- en: User groups and meetups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Building a network is great in theory, but it can be a challenge if you aren’t
    already in the industry. One way you can overcome this difficulty is to attend
    user groups and meetups (user groups tend to be viewed as an older term, with
    meetups being the more common modern version of it, but they mean the same thing).
  prefs: []
  type: TYPE_NORMAL
- en: All around the world, you can find tech professionals, or just enthusiasts,
    who have meetings to discuss various topics in tech. You can often find such meetings
    where a professional developer – sometimes even someone well-known – will come
    in and give a presentation on a given topic. Maybe it’s how to use VMs more effectively,
    or maybe it’s an introduction to React. This can be a great way to learn things
    of course, but even better is the chance to meet people.
  prefs: []
  type: TYPE_NORMAL
- en: These meetings will often be accompanied by some pizza and snacks and will almost
    always have a period before and after when people can just mingle a bit. If you’re
    an outgoing person, you can simply walk up to people and introduce yourself beforehand.
    It’s a little easier after the presentation though since you can start a conversation
    about what you just heard.
  prefs: []
  type: TYPE_NORMAL
- en: It’s also an environment where eavesdropping can be very beneficial! Even if
    you keep to yourself, just hearing the discussions people are having can yield
    valuable insights. You may hear about some new technology taking the world by
    storm. Or you may hear interesting ways people are doing things at companies you’ve
    never heard of. And you may even catch some crosstalk about how someone is having
    trouble finding people to fill roles at their company. That could be a nugget
    of golden information for someone on the hunt for a job!
  prefs: []
  type: TYPE_NORMAL
- en: One of the main sites you can use to learn about meetups is, ironically, called
    Meetup ([meetup.com](http://meetup.com)). Here, you can search for topics of interest
    to you, search geographically so you aren’t traveling super far, and you can sign
    up for different groups to get news about upcoming events. Conversations sometimes
    happen here – usually after a given event – that can also yield great information.
    It’s a free site to join, so I highly encourage you to do so.
  prefs: []
  type: TYPE_NORMAL
- en: You should be aware, however, that some meetups might have a (usually very small)
    cost associated with them. This is understandable when you realize that someone
    must pay for the food, the space it’s held in, and possibly the speaker on a given
    night. While it’s true that there is usually a sponsor (a sponsor whose purpose
    for sponsoring a meetup is explicitly to look for candidates for positions they’re
    trying to fill, by the way!), that isn’t always the case. So, don’t be surprised
    if you’re asked for a few dollars for entry – it will typically be a small amount
    (I think $5 is the most I’ve ever been asked for in all the hundreds of meetups
    I’ve attended) and you can think of it as a small investment in your job hunt.
  prefs: []
  type: TYPE_NORMAL
- en: Perseverance is key
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One thing to keep in mind as you job hunt is that in today’s market, things
    may not come easy, no matter what path you work to find opportunities.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, it is not uncommon to hear nothing back when you submit a resume
    or otherwise contact a potential employer. This you can kind of understand – it’s
    not feasible to get back to everyone who submits a resume just to say no when
    a company is getting hundreds of them – but it’s something you have to understand
    going in; otherwise, it can be disheartening.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, it is not uncommon to even go through the entire interview process
    and then not hear anything back, not even a “we’ve decided to go with someone
    else” courtesy call. You’d think people would at least let you know that decision
    was a no just so you aren’t waiting around, but that’s often not the case (it’s
    probably *more* common to *not* hear anything honestly).
  prefs: []
  type: TYPE_NORMAL
- en: It’s also not uncommon, unfortunately, to have to apply dozens or maybe even
    hundreds of times before finding something. Especially as someone with no prior
    work experience, it’s not an easy road to land that first position.
  prefs: []
  type: TYPE_NORMAL
- en: That’s why it’s so important to not lose hope, always remain positive, and persevere
    until the right opportunity finally presents itself and all the hard work pays
    off. At the time of writing, the market is a bit on the tough side for new folks
    to get into the field. It’s not impossible, but you do have to have patience and
    keep going at it, even when it seems like you’re getting nowhere. You’ll get there,
    it just might take some time (then again, you might land the perfect job right
    out of the gate – you never know, so perseverance is an important trait to have).
  prefs: []
  type: TYPE_NORMAL
- en: Okay, so, you have some job-hunting sites to go to, you’ve checked out company
    websites directly, and you’ve built a network up by attending some meetups. Now,
    it’s time to apply for a position. That nearly always starts with the same input,
    and that’s your resume, so let’s talk about that now.
  prefs: []
  type: TYPE_NORMAL
- en: Polishing your resume to a glistening sheen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A resume – or **Curriculum Vitae** (**CV**), if you’re outside of America –
    is your passport, so to speak, to employment. It will nearly always be the first
    thing anyone sees of you when you apply for a job, and while in successful acquisition
    of said job, it’ll just be one component, and it can kill the opportunity right
    at the start if it’s not presented well.
  prefs: []
  type: TYPE_NORMAL
- en: Building a good resume largely comes down to following a few common guidelines,
    and then accentuating with the things that make you uniquely you. Let’s talk about
    the guidelines first.
  prefs: []
  type: TYPE_NORMAL
- en: Building a solid resume
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There’s a lot of advice online and elsewhere about what goes into writing a
    good resume, but I think you’ll find that the following items are pretty much
    universal:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Keep it concise*: Especially when you have a lot of experience, it’s natural
    to want to put it all in there, and you can wind up with five to six pages describing
    everything you’ve ever done. You have to fight that urge though because it’s almost
    always counterproductive, and you should limit your resume to one or two pages.
    Keep in mind that the goal of a resume is essentially to open the door. If you
    do that, you’ll have time to get into all the details during the interview process.
    Until then, though, you want to avoid anything that might make people ignore your
    resume, and being overly long is often cited as one such thing. Resumes that are
    longer than about two pages will often just be thrown in the trash without even
    being looked at. It may seem unfair – and it probably *is* unfair – but it’s the
    reality, so you have to deal with it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Clear layout*: You might think that the more unique your resume the better,
    so you might be inclined to play with crazy design decisions. And for some job
    postings, that might be helpful – for example, if you are applying as a graphic
    designer. But the general rule of thumb is that you should mostly keep it fairly
    pedestrian. Use clear, professional-looking, easy-to-read fonts. Use clear, descriptive,
    and generally short headings to denote the major parts of your resume. Use bullet
    points to denote lists. And generally, don’t get too creative with the overall
    layout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Use keywords*: In a lot of companies, your resume will start by going through
    an automated screening process where it will often be eliminated before a human
    being even looks at it. This is most often done by looking for keywords. For example,
    if a vacant position is for a frontend developer with React skills, a resume that
    doesn’t like React may be eliminated immediately. Therefore, put some effort into
    using keywords in your resume that match up with the *specific* job opening you’re
    applying to, or if you aren’t applying to a specific position (maybe you are just
    putting your resume in at a company you especially want to work for without knowing
    if they have openings or not), then try to use as many keywords as possible that
    are also accurate. That’s because of the next bullet point here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*No lies or exaggerations*: Stick to the truth! You may well get away with
    a lie or stretching the truth here and there, but if you’re found out, it will
    destroy any chance you have of landing a position. It could hurt you even if you
    do get hired, if in no other way than reputationally. To be clear, there is a
    difference between describing things you’ve done in as positive a light as possible
    and being dishonest about it! A resume is, in part, a sales job, so it’s okay
    and encouraged to use language that is as positive as possible. But follow the
    simple rule that if it’s not true and if you can’t substantiate it if pressed
    then you shouldn’t put it on your resume.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Proofread*: Check the grammar and spelling in your resume a million times
    before sending it to anyone and use all tools you can to help with this! Some
    people will gloss over minor typos and not hold them against you, but others may
    outright disqualify you for them. Either way, it’s a bad look: one of the things
    you want to demonstrate when trying to get hired is attention to detail, and that
    starts with a resume that is flawless in terms of spelling and grammar. Have others
    read your resume before you send it anywhere too because a second (or third or
    fourth…) set of eyes is always a good thing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Avoid irrelevant information*: It used to be the case that people recommended
    putting things such as personal hobbies on a resume because it showed that you
    have a life outside of work and that you may not be, to put it bluntly, a stiff.
    Always remember that people like to work with others that are pleasant to be around
    and that they have things in common with others outside of work because it gives
    them common ground and touchpoints to be social around. But a resume isn’t the
    place for that, so the current thinking is to skip this sort of stuff on a resume.
    The time for it is during and after an interview if things are and have gone well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Contact details*: You’d be surprised how often you get a resume, think it
    looks pretty good, and then notice that there’s no information about contacting
    the candidate on it! That’s a sure way to miss out on an opportunity, so ensure
    these details are present and are current.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Use professional language*: You’re applying for a job, hopefully starting
    a career if all goes well, which means you’re communicating in a professional
    context. As such, avoid slang or casual phrases in your resume. Again, there is
    a time and place for such things later, because your personality does come into
    play during the interview process, and there comes a time when being a little
    less formal can be a good thing. But your resume isn’t the place to do that.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Highlight achievements*: You want to be as specific as possible about the
    things you’ve done and accomplished, and if you have metrics to support them,
    then so much the better. If you built a system that saved your employer $10,000
    a month, then you’ll want to say that. Of course, if you don’t have any work experience
    yet then this will become more difficult. But there’s almost always *something*:
    did you contribute to an open-source project to get some experience? Did you build
    a personal website? Did you write a game? Did you work as a stock person at a
    big-box retail store? Achievements don’t necessarily have to be directly related
    to the field you’re entering (though it’s better if they are, of course) – you
    just have to know how to sell it. I’ll talk about this a bit more in the next
    section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Tailor it*: Finally, whenever possible, customize your resume for the job
    you’re applying for. If you know a company is looking for someone to do some cloud
    development in AWS, then you may want to talk up your experience with cloud providers,
    even if it’s not AWS. If a company you’re applying to services mutual funds, then
    you might want to describe the time you worked as a teller in a bank in a bit
    more detail because it’s in the same financial industry. Again, don’t be dishonest
    about anything, but a resume that takes into account where you’re applying to
    is better than submitting the same generic resume you submit everywhere else (sometimes,
    you’ll have no choice but to do just that, but any time you can tailor your resume,
    do so).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One thing you may also consider is engaging the services of a professional resume
    writing service, such as TopResume ([topresume.com](http://topresume.com)). They
    will – for a price – work with you to produce a top-notch resume. They know all
    the best practices, they know what companies look for in resumes, and they know
    all the tips and tricks to get your resume to the top of the pile, or at least
    lower the odds as much as possible of it being ignored. If you aren’t comfortable
    with the prospect of putting a good resume together, then such services may be
    worth considering, But, if you’re comfortable doing it yourself, then you can
    save a few dollars. Such services typically offer different packages, ranging
    from a basic review of a resume you created to holding your hand through the entire
    writing process and even sometimes helping you get your resume submitted. Only
    you can decide if such a service is right for you, so do some research and see
    what you think.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s talk about what you can do in the situation you’re in, which is that
    you have little to no real-world working experience in the field.
  prefs: []
  type: TYPE_NORMAL
- en: Accentuating what you have
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s nice when you can describe a dozen high-profile projects that you’ve completed
    over the last 20 years of professional web development, but that’s not where anyone
    starts. Getting your first job in the field will require something else.
  prefs: []
  type: TYPE_NORMAL
- en: 'The trick is simple in theory but difficult in practice: you must build up
    whatever you do have, even if it’s not directly related.'
  prefs: []
  type: TYPE_NORMAL
- en: What I mean is what I hinted at earlier. Let’s say you haven’t done any web
    development yet, at least nothing for pay. But maybe you have been a stock person
    at a Walmart or Target or another big-box retailer. How can you talk up that experience
    to make it relevant?
  prefs: []
  type: TYPE_NORMAL
- en: Well, a stock person has to have some degree of organizational skills. They
    must be able to determine the right products to put on the shelves in the proper
    locations. They might have to be able to put in purchase orders to replenish stocks
    without over-buying or under-buying. They will need to stock the shelves and do
    so efficiently, both in terms of time and in terms of how it looks when finished.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, they must pay attention to details, and they must determine
    a plan of action to effectively reach a set goal. So, say things like that when
    you describe that work experience!
  prefs: []
  type: TYPE_NORMAL
- en: It’s not dishonest to talk up whatever work experience you have. By the same
    token, if you built a personal website, you could talk that up by describing the
    technology used, how you went about moving from wireframe to prototype to finished
    product, and how you implemented SEO effectively to raise your search ranking.
  prefs: []
  type: TYPE_NORMAL
- en: Or perhaps you haven’t been out of school very long. If that’s the case, did
    you do any especially complex assignments? If so, then you can talk about those,
    taking care to include comments about what you learned and the things you had
    to overcome to complete it successfully.
  prefs: []
  type: TYPE_NORMAL
- en: You should focus on the skills you’ve cultivated. This is generally true whether
    you have work experience or not, but it becomes more important if you don’t since
    you won’t have a lot of choice in the matter. Focus on the languages and technologies
    you’re proficient in or have experience with, no matter the form or extent of
    that experience.
  prefs: []
  type: TYPE_NORMAL
- en: You should also focus on “soft skills,” things such as teamwork, problem-solving,
    and adaptability. And here again, look for places where you can highlight those
    skills in any form. If you worked on a team project in school, that’s something
    to talk about in terms of teamwork. If you had to take on multiple sections of
    the store as a stock person when someone else quit, that’s a good example of adaptability
    and you can talk it up as such. You should also try to relate these skills and
    experiences to web development wherever you can, though that may not always be
    possible in a way that doesn’t seem overly contrived, so be careful with this.
  prefs: []
  type: TYPE_NORMAL
- en: The basic point here is that without a lot of demonstratable work experience
    in the web development field, you have to look for positives in yourself and in
    your work and life experiences that you can word in such a way that they show
    things about you that a prospective employer might find enticing. At the risk
    of repeating myself, don’t be dishonest in anything you say because that’s just
    not worth the potential negative consequences. But building yourself and your
    abilities up, selling yourself in words, that’s not dishonest – that’s just good
    salesmanship!
  prefs: []
  type: TYPE_NORMAL
- en: Naturally, having something that is web development to show is almost always
    better and will almost always carry more weight than flowery language alone. Fortunately,
    this is a field where you can gain such experience and have things to show without
    having professional work experience, and that’s where things such as repos, portfolios,
    and samples come into the picture.
  prefs: []
  type: TYPE_NORMAL
- en: Having repos, portfolios, and samples to show
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you go out for your first web developer job, you almost certainly don’t
    have a long track record to demonstrate your abilities. You may have *something*
    to show – you may have built a personal website, or maybe you built a website
    for your local church gratis. But you don’t have previous jobs to point to and
    say “Here, this shows what I can do.” So, to give yourself the best chance at
    being hired, you’ll want to build some stuff and make it available for people
    to see.
  prefs: []
  type: TYPE_NORMAL
- en: Building websites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I just mentioned, a personal website is often the first thing someone creates,
    and they do it specifically to show their capabilities. The good thing about such
    a project is it’s all up to you! You get to decide what it looks like, how it
    works, what technologies you use to build it, and so on. However, it is certainly
    a project you should undertake when you feel up to it. To be clear, it doesn’t
    need to be the best website ever, but it definitely *should* be the best website
    *you can build at that point*. You want to be able to point to it and say, “This
    is what I can do right now.”
  prefs: []
  type: TYPE_NORMAL
- en: While this is a good start, look for opportunities to build for others too.
    There are frequently non-profit organizations that are more than happy to have
    a website built for them for free. This provides a needed service to them while
    allowing you to learn. But unlike a personal website, now, you must meet the needs
    of a “client,” which demonstrates a whole other set of abilities that a prospective
    employer would like to see since they, in effect, will be your client if you’re
    hired.
  prefs: []
  type: TYPE_NORMAL
- en: For the most part, building a website doesn’t let someone see your code, not
    in its source form at least, and not the backend code. This is where a GitHub
    repo can come into play.
  prefs: []
  type: TYPE_NORMAL
- en: Building a GitHub repo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another thing you should look to do is build up a GitHub repo (or several).
    There is some debate online about this because some people you will encounter
    won’t ever look at these repos, but some will – ultimately, if you’re looking
    for an entry-level position, potential employees may look at *anything* they can
    find to gauge your skills.
  prefs: []
  type: TYPE_NORMAL
- en: If they do choose to look at it, having a GitHub repo allows an interviewer
    to see how you write code. They almost certainly won’t be looking at it super-critically
    because anyone hiring for an entry-level position has to set their expectations
    realistically. But seeing a repo from someone who has clean code (formatted well),
    commented well, and appears to be logically structured can provide them insight
    into your thought process.
  prefs: []
  type: TYPE_NORMAL
- en: What should you put in your repo? Well, the simple answer is anything! When
    I was hired the first time, I didn’t have a college degree, nor did I have any
    experience to point to, aside from some side jobs I had done. So, the code I provided
    for my interviewer to look at included some video games I had written, some small
    utilities I wrote for myself, and some demos I had written for some old **Bulletin
    Board Systems** (**BBSs**, which came before the internet). This was an interview
    at a financial company, so none of this was relevant to what I would be doing
    on the job. But what was shown to the interviewer was that I was able to write
    code, and was able to write it in a way they viewed as reasonable. They told me
    point-blank a few months later that all of that helped me get the job.
  prefs: []
  type: TYPE_NORMAL
- en: So, any code you write, so long as you ensure it’s written while following good
    coding practices, is solid content for your repo. It doesn’t matter if it’s related
    to the industry you’re applying to – it’s more input into the interview process.
  prefs: []
  type: TYPE_NORMAL
- en: But it’s not all about the code, is it? To an extent, it’s also about the artistic
    side of things, the creative side of things. That’s more what a portfolio is generally
    for.
  prefs: []
  type: TYPE_NORMAL
- en: Building a portfolio of sample work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In art-related jobs or other creative jobs, it’s not unusual to have a portfolio
    to present during an interview. For artists, this will frequently be a book with
    pages of your drawings, showing what you can do and what you can create.
  prefs: []
  type: TYPE_NORMAL
- en: Well, web development is part of art, especially when it comes to the frontend!
    As such, a portfolio can have some value for you as well. However, it likely won’t
    be a physical book like it is for an artist (though I bet many artists today don’t
    use a physical book anymore either!). It can simply be URLs to show websites you’ve
    built.
  prefs: []
  type: TYPE_NORMAL
- en: There can be some overlap between a portfolio and a GitHub repo. Your repo may
    also effectively be your portfolio because one of the capabilities GitHub offers
    is the ability to host websites. You can take a website in a GitHub repo and make
    it available as a working website.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless, the point here is less about the technical aspect and more about
    the artistic aspect (though there can certainly be overlap). It’s one thing to
    see your code and that you wrote it well, but it’s another to look at what’s actually
    on the screen, what the website is, and see that you followed good design principles,
    for example. Or to see that what you created is aesthetically pleasing. This is
    more what a portfolio is for.
  prefs: []
  type: TYPE_NORMAL
- en: The bottom line in all of this is to look for ways to prove what you can do,
    to demonstrate your abilities. In working to get your first job, you may have
    to be a bit creative, and you’ll need to take initiative. It’s one thing when
    you have years of real-world work experience and can describe what you’ve done
    for other employers (though you typically can’t show it since it’s proprietary
    in most cases), but when you don’t have the benefit of that, you still need to
    provide as much evidence, for lack of a better word, that someone should take
    a chance on you. Build stuff, put it online – including the code – and use all
    of it to prove you’re worth hiring, even without that long track record!
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you will hopefully have found some job postings, submitted your
    resume, prepared your GitHub repo, portfolio, and samples, and are – in theory
    – ready for an interview. Now, let’s look at interviews and what’s involved with
    getting through one successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding a typical web developer interview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There isn’t a *typical* web developer interview, per se – there is a lot of
    variety across interviews, and lots of ways people conduct them, so no two are
    the same generally – but there *are* some common patterns, some things that you’re
    more likely than not to experience. We can group those things and say they represent
    what we might refer to as a *typical* web development interview.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most interviews involve multiple rounds of activity. These rounds may be conducted
    by one person or by many, individually or in a group setting. They may occur in
    one day or be spread across several days.
  prefs: []
  type: TYPE_NORMAL
- en: The initial review round
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the first round, it’s more likely than not that you will encounter a review
    of your resume, where you’ll be asked questions about previous projects and experience.
    These questions will typically be probing to ensure that what’s listed on your
    resume is accurate (for example, by asking you to describe how a specific technology
    listed for a given project was used) and to try to judge how deeply you know these
    topics. You may get questions such as “Oh, I see you used MongoDB on this project,
    can you tell me about the data structure you designed?” or maybe “How did you
    implement sharding in that database?”
  prefs: []
  type: TYPE_NORMAL
- en: At this point, answer the questions directly and try not to editorialize too
    much. You may find that your nerves start kicking in and you start rambling, or
    if not because of nerves, then because you think a longer answer must necessarily
    be better. Try to avoid that, but also avoid being *too* short. You don’t want
    to be seen as babbling on, but you also don’t want to be seen as either not knowing
    what you claim to know, or not knowing it in depth (unless you specifically say
    “Yes, I used MongoDB, but I didn’t get into it too deeply, so I can’t claim to
    be an expert in it,” which is a reasonable answer if it’s the truth).
  prefs: []
  type: TYPE_NORMAL
- en: The technical round
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After this round, you’re likely to be asked some technical questions. Here,
    I’m talking about questions along the lines of “What function can you use to get
    a reference to a DOM node in JavaScript if you know the element’s ID?” Direct,
    knowledge-testing questions are what these are. These will, hopefully, be relevant
    to the job you’re applying for, though that, unfortunately, is not guaranteed.
  prefs: []
  type: TYPE_NORMAL
- en: My advice for handling these types of questions is to answer to the best of
    your ability, but if you simply don’t know something, then say so. Try to soften
    the blow as best you can though. For the previous question, you might say something
    like, “I’m sorry, that’s something I’ve not encountered before, but given a few
    minutes to research online, I know I could find that answer because I know that
    a DOM node is the JavaScript representation of an HTML element in the Document
    Object Model, and I’ve worked with JavaScript, so it should just be a matter of
    some quick research.” That tells the interviewer that you do have the basic knowledge
    they’re looking for, but you may have just blanked on the particular function,
    or it is something you’ve never used, and no one is expected to know every last
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: During this round, you may be asked to code on a whiteboard (which is something
    almost everyone hates!). The interviewer may ask, for example, for you to write
    a bubble sort algorithm on the board in Python. Rest assured that most interviewers
    do not expect perfection here! Even if your solution is close, that will usually
    be good enough.
  prefs: []
  type: TYPE_NORMAL
- en: One of the best things you can do here is to “think out loud” as you work. Verbalize
    the internal dialogue going on in your head as you work through the problem. This
    does two things. First, it lets the interviewer have an insight into your thought
    process, which is good for you because even if your solution doesn’t turn out
    right, they can hear that you were at least on the right track, and you’ll still
    get points even for a failed attempt. Second, it will help calm your nerves since
    speaking out loud in such a situation tends to allow your body to release some
    of the stress.
  prefs: []
  type: TYPE_NORMAL
- en: And don’t be afraid to correct yourself either! If you start down a wrong path
    and realize it, saying something like “Oh wait, that won’t work because *X*; I
    need to do *Y* instead” is a great thing to hear.
  prefs: []
  type: TYPE_NORMAL
- en: The getting-to-know-you round
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most interviews tend to have a more relaxed round after this where it becomes
    a bit more personal, and a bit more freeform in nature. Here, you’re being evaluated
    for cultural fit and, frankly, just to see if you’re someone that people will
    enjoy interacting with. Here, the goal is simply to be friendly, open, and honest.
    However, try not to be *too* open. You don’t need to reveal all your inner secrets
    at this point, and you don’t need to talk about every unusual hobby you may have.
    You can’t prepare for this round in any concrete way other than practicing being
    a personable individual as best you can.
  prefs: []
  type: TYPE_NORMAL
- en: This is also the round where you generally get a chance to ask some questions
    about the job and the company. I’ll talk about this in the *Handling common interview
    questions* section, but for now, it’s enough to say that you should try and come
    prepared with a small handful of questions to ask. An especially good one is simply
    “Tell me a bit about the culture here; what it’s like to work here?” or something
    similar. It shows interest, will give the other person a chance to talk a bit
    to take a little pressure off you, and can net you some valuable insight into
    what accepting an offer at that company might mean for you day to day.
  prefs: []
  type: TYPE_NORMAL
- en: The assignment round
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another round that you may encounter is a take-home assignment or, sometimes,
    an on-site assignment. In either case, it’s when you’ll be asked to build something,
    some small project to demonstrate your abilities. These aren’t quite as common
    as the other rounds I’ve described, but some companies do them. You’ll usually
    be given an assignment that is job-relevant, and you’ll then be given access to
    a workstation (or you may be allowed to use your own). In most cases, you’ll have
    more or less free reign to decide what tools you use and how you build the assignment
    (you may be given some general parameters, such as “We want you to build this
    with React”). In most cases, you won’t be monitored as you work, but some companies
    may have someone watching over your shoulder.
  prefs: []
  type: TYPE_NORMAL
- en: There are no real tricks here – you simply have to do the best you can! Choose
    the tools and technologies you are most comfortable with and focus on writing
    good, clean code that you can present well – most of the time, that’s what will
    happen, and you’ll have to walk through your results with the interviewer. They
    may ask questions about why you did things the way you did, so make sure you can
    justify every decision.
  prefs: []
  type: TYPE_NORMAL
- en: 'I must caution you about these sorts of assignments, though: don’t let anyone
    take advantage of you! Your time is valuable, and some companies will take advantage
    of that by giving you unreasonable assignments that will take hours to do. Some
    especially unscrupulous companies may even try to get free work out of you by
    giving you an assignment that is something they need to get done! You have to
    use your gut here and decide what’s reasonable and what isn’t. My general rule
    of thumb is that if you realistically believe you can do the assignment in an
    hour or less, then that’s probably reasonable. If you think it’ll take longer,
    then you may want to say “I’m sorry, but I think that assignment will take me
    an inordinate amount of time to accomplish, so I’m not comfortable with it. Is
    there something else you can ask of me that won’t take quite as long?”'
  prefs: []
  type: TYPE_NORMAL
- en: Some companies may also be willing to pay you for the time spent on the assignment.
    That’s not common and I’d say you probably shouldn’t expect it, but it’s nice
    when it happens. In such cases, your tolerance for how long it’ll take may be
    greater. I would also say that you shouldn’t take on a longer assignment unless
    you feel like the rest of the interview has gone well and you’re excited about
    the opportunity the company presents. There’s probably no sense in spending 6
    hours coding a login page if it’s a company you were kind of half-hearted about
    in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have some idea of what an interview might look like, let’s talk
    about some general things you can do to prepare for a coding-centric interview,
    aside from the advice I gave in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for coding interviews
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A coding interview, or a technical interview generally, can be a very stressful
    event. It largely comes down, in the simplest terms, to whether you know the stuff,
    and proving that you do. When I interview people, that’s the primary thing I’m
    looking for because whether they have the skills required for the position, what
    I’m trying to fill is what matters most. It’s not *all* that matters, not by a
    long shot, but it’s the first thing on the list.
  prefs: []
  type: TYPE_NORMAL
- en: One thing that *doesn’t* matter, paradoxically, is that a candidate has every
    answer right on the tip of their tongue. First, we work in a field where that’s
    a practical impossibility. And second, it’s a field where researching and using
    reference material is a must. Yes, there are some things I expect that every candidate
    knows off the top of their head. For example, if I’m trying to hire a frontend
    developer, I certainly would expect that they can tell me something about the
    CSS box model. If I’m hiring a Java developer, I’d expect they can tell me what
    string interning is all about.
  prefs: []
  type: TYPE_NORMAL
- en: But what I’m *not* looking for is, for example, if they can tell me every method
    available on the JavaScript string object or if they know the arguments required
    for a specific array method. These are things that I expect people to look up
    when needed (you tend to remember only what you’re using the most and the most
    recently, so people will tend to know some of this sort of stuff, but never all
    of it). So, as a candidate, you can relax a little bit in that interviewers aren’t
    going to expect you to know everything cold.
  prefs: []
  type: TYPE_NORMAL
- en: But at the same time, it’s important that you know as much as possible and be
    able to demonstrate your abilities.
  prefs: []
  type: TYPE_NORMAL
- en: One of the ways interviewers often try and gauge this is with websites that
    present coding challenges for you to solve. Two of the most famous are HackerRank
    ([hackerrank.com](http://hackerrank.com)) and LeetCode ([leetcode.com](http://leetcode.com)).
    You may be asked to do some of these challenges during an interview. They usually
    come in the form of tasks that require you to write some small piece of code,
    and then the platform confirms if it functions correctly. In theory, it doesn’t
    matter how you write the code per se – what matters is that it has the specified
    result, so they aren’t generally looking for specific solutions, just *working*
    solutions (they can, however – and unfortunately – be a bit finicky).
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that these sites are available to you outside of interviews,
    and they are great ways to not only prepare for an interview that will use them,
    but also for interviews that won’t, and just generally to learn about writing
    code. I most definitely encourage you to use these sites. Work through the challenges
    and get familiar with how they work and what they look for in your solution. That
    way, if you are confronted with them in an interview, it won’t be your first time
    encountering them.
  prefs: []
  type: TYPE_NORMAL
- en: More generally, studying **data structure and algorithms** (**DS&A**) is an
    important step. If you’ve never heard these terms before, let me explain.
  prefs: []
  type: TYPE_NORMAL
- en: In simplest terms, **data structures** are standard ways of storing data. For
    example, an array is a data structure – one that is built into almost every programming
    language. You can use the basic capabilities of a language and build more advanced
    structures – things such as lists (a more robust form of array in essence), stacks
    (also like an array, but where elements can only go in or come out in well-defined
    specific ways,) and maps (which equate a key to a value, allowing you to look
    up values by their keys). These are some of the simplest examples.
  prefs: []
  type: TYPE_NORMAL
- en: And the term **algorithms** is just a complex way of saying a set of programming
    instructions to perform a specific task. For example, there are many ways you
    can sort data and many different algorithms that you can choose from. Some will
    work better if your data is already mostly in order, others might slow down the
    more data there is to sort, and still others will use more CPU power to get the
    job done regardless. Knowing these different algorithms and their trade-offs is
    something you may be expected to know during an interview and on the job.
  prefs: []
  type: TYPE_NORMAL
- en: But during an interview specifically, you might be asked to implement a two-way
    linked list. However, it’s more important to know what that is and how and when
    to apply it than it is to know how to implement it yourself – in most cases on
    the job, you wouldn’t be implementing it yourself, you would use a ready-made
    version. While it’s valuable to know how to invert a binary tree because that
    could be something you’re asked to do on a whiteboard, it’s even more valuable
    to know what a binary tree is and why we use them and be able to explain that
    because that’s what you’ll need on the job. Sites such as HackerRank and LeetCode
    are largely based on requiring you to implement such DS&A solutions, so studying
    them more generally will help you handle those sites and tests on them.
  prefs: []
  type: TYPE_NORMAL
- en: Finding more information on DS&A
  prefs: []
  type: TYPE_NORMAL
- en: 'The topic of data structures and algorithms is an expansive one and is a bit
    outside the scope of this book except in general terms. However, to dig deeper,
    some resources you may consider are MIT’s OpenCourseWare website ([https://ocw.mit.edu](https://ocw.mit.edu)),
    which provides free courses with interactive content from the famous Massachusetts
    Institute of Technology; Harvard’s *CS50: Introduction to Computer Science* material
    ([https://pll.harvard.edu/course/cs50-introduction-computer-science](https://pll.harvard.edu/course/cs50-introduction-computer-science));
    and good ‘ole YouTube! Just search for “data structure and algorithms” and you’ll
    find a whole host of good content (be sure to always choose those with a lot of
    upvotes since that *tends* to indicate quality, as judged by the community of
    viewers at least).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s look at one of the biggest challenges that you’ll face during a technical
    interview, beyond the technical knowledge itself, and that’s dealing with the
    stress of it all!
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with the stress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I have mentioned a few times that interviews can be stressful situations. Most
    people aren’t especially comfortable being what may feel like being interrogated.
    There isn’t any magic bullet solution that will make most interviews easy, but
    knowing what to expect going in and having some coping strategies is helpful.
    Let’s look at some of them now:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Preparation*: Obviously, studying and knowing your stuff is a key thing to
    do. Take some time to review the basics – it’s easy to get flummoxed when you’re
    asked a question that you know is basic and easy, but you blank on it, and this
    happens to everyone! Also, be sure to bone up on any specific technologies mentioned
    in the job description, even if you don’t have much (or any) experience with them.
    I can tell you that for my first interview, I was asked questions about Visual
    FoxPro. I had never used that before, but because it was listed in the job description,
    I bought a book about it and read it before the interview. As a result, I was
    able to answer some questions that the interviewer later told me no one else could.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Do mock interviews*: If you have friends or family willing to do so, let them
    play interviewer and run you through the wringer! Some websites can help you do
    mock interviews, including Pramp ([pramp.com](http://pramp.com)) [interviewing.io](http://interviewing.io)
    (that’s both the site name and the URL!), and even HackerRank and LeetCode offer
    some of this functionality. These might be better choices than your friends or
    family since you may be a bit too comfortable with friends and family, and the
    goal here is to *not* be comfortable in a more controlled setting than a real
    interview.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mindfulness techniques*: Breathing exercises or meditation before the interview
    can help calm your nerves and get you into a good headspace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Shifting your perspective*: Remember that an interview is a two-way street.
    You’re also assessing if the company is a good fit for you. This can emotionally
    give you a small sense of power, which can lead to not feeling overwhelmed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Stay positive*: No matter how you think the interview is going, focus on learning
    from the experience right from the start. If you’re sitting there thinking “I’m
    bombing this!” then take a moment to ask yourself exactly what’s going wrong.
    Obviously, in the middle of an interview, you’re probably not going to be able
    to sit there with a blank stare on your face while you consider the question!
    But you can kind of subconsciously process the question, and whether that allows
    you to make adjustments on the fly or simply consider what you’ll do better next
    time, it can reframe what’s happening more positively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Post-interview analysis*: Regardless of the outcome, be sure to reflect on
    what went well and what could be improved for next time when you’re done. This
    is an extension of the previous point, but it’s more focused on lessons learned
    and improving, not on helping you during the interview.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next thing to consider is the impression you give to the interviewer, and
    what you can do to ensure it’s a positive one.
  prefs: []
  type: TYPE_NORMAL
- en: Presenting the best you
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you work your way through the interview process, in whatever form it takes,
    always remember to present yourself both professionally and friendly. Smile, make
    eye contact, and stay in the moment. Don’t let anything else into your mind beyond
    that interview because, in that moment, it’s all that matters.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you dress for success too. Even if you know that the environment of
    the company is casual dress, wear professional attire for the interview (I would
    suggest doing this even if you’re explicitly told you can dress casually, though
    that is perhaps debatable). We’re not talking about a tuxedo here, or even a suit
    and tie or an expensive pantsuit. Slacks and a collared shirt will be acceptable
    for both women and men in most environments.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure your grooming is impeccable as well. It’s all about presenting a picture
    of yourself that is positive to most people. You can never be sure how someone
    will react to you, but you can’t control that – you can only control yourself.
    Ensuring you don’t look slovenly is something you can control.
  prefs: []
  type: TYPE_NORMAL
- en: This will make you come across as someone who is professional and focused and
    who has good attention to detail thinking, which is exactly what you want to get
    across when you’re trying for a position where those things matter, as they do
    in web development.
  prefs: []
  type: TYPE_NORMAL
- en: But no matter how well-prepared you are, it’s still entirely possible that you’ll
    run into a bad interviewer. Given that, let’s talk about what you might be able
    to do if you find yourself in that unenviable position.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting yourself
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the end of the day, being interviewed is difficult. But so too is conducting
    interviews. It may not seem like it should be, but it is. Asking good questions
    is difficult. Judging people is difficult. Ensuring fairness is difficult. It’s
    a skill all of its own that takes time to cultivate and develop, and unfortunately,
    before that happens, many people are not very good at it. Given that, as a candidate,
    you should take steps to protect yourself as best as you can.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you may sometimes run into an interviewer who doesn’t want to be
    there. Maybe they have a ton of work to do themselves and feel like they don’t
    have the time to do an interview. They may be distracted, constantly checking
    their phone, for example. As a result, they may rush through the interview and
    wind up not giving you a fair shake. There frankly isn’t a whole lot you can do
    in such a situation. Your best bet is to remain friendly and try to provide succinct
    but still meaningful answers. Be careful not to meander since that will likely
    just exacerbate the situation. If, on the other hand, they sense that you’re trying
    to be respectful of their time, their demeanor may change.
  prefs: []
  type: TYPE_NORMAL
- en: Or you may run into someone who doesn’t know how to construct good questions.
    They may ask you very open-ended questions (which sometimes is done on purpose,
    but often not), or things that are highly opinion-based (which, again, can be
    valid questions in some cases). They may ask questions that are worded confusingly,
    or that you judge to have no real valid answer. The best thing you can probably
    do in such cases is ask for clarification (politely and respectfully, of course).
    Make sure you understand what’s being asked as best you can by confirming your
    understanding. “Okay, so I think what you’re asking me is how does a closure in
    JavaScript work, is that right?” is a good question to ask to make sure you’re
    understanding what’s being asked.
  prefs: []
  type: TYPE_NORMAL
- en: You may occasionally run into an interviewer who is more interested in impressing
    you with what they know, or otherwise being intimidating. There’s no easy answer
    to dealing with this, but it generally comes down to believing in yourself and
    having confidence. Be sure to maintain good eye contact and a steady posture because
    body language most definitely matters during an interview. If you sense that they’re
    trying to impress you with their knowledge, go ahead and let them use it as a
    learning opportunity! They may very well have a lot they could teach you, so you
    might as well pay attention and remain positive about the situation by viewing
    it as a chance to grow your knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: Being asked irrelevant questions is something else that often happens with bad
    interviewers. To them, of course, the questions *are* relevant, but probably not
    in a way that makes much sense. To handle these, ask for clarification first,
    because maybe the questions *are* relevant in a way you just haven’t seen. If
    not, do your best to steer the conversation back to your skills and abilities
    relevant to the role. And always remember that if a question strikes you as offensive
    or overly personal, you have every right to simply refuse to answer it. How best
    to do that is tricky, but I would go with something like “I’m sorry but I’m not
    comfortable answering that question” and leave it at that.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond the stress, potentially poor interviewers, and needing to know your technical
    material, there are some fairly common questions that you may encounter, and having
    a game plan for answering them going in is a good idea, so let’s tackle some of
    those now.
  prefs: []
  type: TYPE_NORMAL
- en: Handling common interview questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aside from the technical angle, some non-technical questions tend to be asked
    during interviews, and at least some of them are pretty common. They may be asked
    in varying ways, but they kind of boil down to the same basic question regardless.
    Here, I’ll attempt to generalize them as much as possible and talk about how you
    might want to answer them (with an underlying point being that you always want
    to answer them *truthfully*, of course).
  prefs: []
  type: TYPE_NORMAL
- en: Note that this is in no way meant to be an exhaustive list. What I’ve done is,
    through a bit of research, coupled with my personal experience on both sides of
    the table, come up with what are probably the 10 most popular such questions.
    Naturally, you must be ready for others, or indeed none of them! It’s not a given
    that you’ll be asked such questions during an interview, and it’s certainly not
    a given it’ll be these specific questions. But they are common enough that I think
    they’re worth calling out, and if nothing else, they should get you to start thinking
    about such questions, which should help prepare you for any others that may come
    up.
  prefs: []
  type: TYPE_NORMAL
- en: Tell me about yourself
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a completely open-ended question that you could go many ways with. But
    primarily, you should focus on your professional journey, highlighting relevant
    experiences and achievements. When you don’t have much (or any) professional experience
    yet, highlight whatever you can. For example, if you’re very into contributing
    to open source projects, then certainly mention that. If you love writing games,
    talk about that a bit.
  prefs: []
  type: TYPE_NORMAL
- en: In general, try to convey that you are enthusiastic about the field, technology,
    and learning. You can get into your personal life a little bit but try to relate
    it to professional life. There’s nothing wrong per se with talking about your
    hobbies – unless they might be considered inappropriate of course – but that’s
    probably not what the interviewer is interested in hearing. They want to hear
    about how you’re the type of person who will do well in the role you’re interviewing
    for, so focus on that in any way you can.
  prefs: []
  type: TYPE_NORMAL
- en: Why do you want to work here?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This can be looked at as a bit of a trick question because the obvious answer
    for all of us is “Because I need to earn money and you’ve got an opening!” But
    in reality, this is an opportunity to demonstrate that this isn’t just another
    job interview for you (even if it is). To do that, show that you’ve researched
    the company a bit. Talk about how the company’s mission aligns with your values
    and how you’d love to be a part of making that mission a success.
  prefs: []
  type: TYPE_NORMAL
- en: As I’ve said several times, don’t be dishonest here. If your values don’t align
    with those of the company, you probably shouldn’t be applying there in the first
    place. But if the mission of the company doesn’t exactly excite you, it’s still
    possible to say something like “I like solving problems and building complex things,
    and the mission of this company will give me a chance to exercise those skills.”
    But if you haven’t researched the company at all, then you couldn’t say something
    like that.
  prefs: []
  type: TYPE_NORMAL
- en: What are your greatest strengths?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The key to answering this question well is to choose strengths that are relevant
    to the role you’re applying for and be able to give examples to demonstrate those
    strengths.
  prefs: []
  type: TYPE_NORMAL
- en: For example, for a web developer position, you should think about strengths
    that demonstrate your ability to solve problems, your ability to take rough designs
    and translate them to finished products, your ability to be creative, and your
    ability to learn new things. This could be done by, for example, telling a story
    about a project you worked on where you had to pick up new skills as you designed
    and built a personal website, or programmed a game.
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve done your research and know that the company uses cloud providers,
    you might want to put additional focus on the time you experimented with Microsoft
    Azure, even if what you built wasn’t anything special. Then, take this specific
    example and say something more generic, such as the fact that you had never worked
    with Azure before, so you had to learn as you went, and along the way, you had
    to solve how to set up authentication, for example.
  prefs: []
  type: TYPE_NORMAL
- en: What is your greatest weakness?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a question that people typically like to try and answer in a “tricky”
    way. For example, you might say that sometimes, you get so engrossed in what you’re
    doing that you work longer hours than you should because that makes it seem like
    you’re dedicated. In other words, you might try to turn a negative into a positive.
    To be sure, that *can* work if done properly. However, there’s a great chance
    that you’ll come across as insincere or cagey, and that’s something you want to
    avoid at all costs during an interview.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, since not a single one of us is perfect, try to find a real weakness
    in yourself and present it honestly. Granted, you probably don’t want to choose
    a *big* one (“I like to take office supplies home every chance I get!” probably
    isn’t in your best interest, for example). You probably don’t want to say that
    you frequently enjoy crashing your car into coffee shops! But it’s not usually
    hard to find something that isn’t monstrous that is a weakness. You might say
    something like “I sometimes find myself temporarily panicking if I don’t know
    something immediately,” which is something we all experience.
  prefs: []
  type: TYPE_NORMAL
- en: Then – and this is the key – talk about how you’re working to improve yourself
    in that area. Maybe you might say “To try and deal with that panic, I’ve been
    actively seeking out situations where I’ll be forced to deal with new technologies
    so that I can work to overcome it.” It shows that you’re honest, introspective,
    and willing to make corrections as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Where do you see yourself in 5 years?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is another one of those open-ended questions where there are not any right
    or wrong answers. The trick is to simply *have* an answer.
  prefs: []
  type: TYPE_NORMAL
- en: You probably shouldn’t be overly grandiose with your answer. It’s perfectly
    fine if, in your mind, your answer would be “I want to be the CEO!” but that’s
    probably not the best answer to give.
  prefs: []
  type: TYPE_NORMAL
- en: First, it’ll probably not be seen as realistic – a trait that most people generally
    tend to value in people who work for them – and might even get you laughed at
    (if only silently). It’s good to have big goals, but there are a lot of steps
    between that goal and where you are now, and people want to see that you aren’t
    looking too far over the horizon and being unrealistic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, that answer may imply that you’ll be looking to move up or even out
    of the company as quickly as possible in the interest of your career goals. Look
    at it from their perspective: why put in all the time and effort to hire you,
    train you, get you up to speed and ready to be productive in the position they
    need filling, just to see you move on to another position (whether to another
    company or just to another position in the same company) at the first chance you
    get? From their perspective, that’s a lot of wasted time and effort at that point,
    depending on how long you were in that role.'
  prefs: []
  type: TYPE_NORMAL
- en: So, you want to strike a balance between being ambitious and not being so ambitious
    that they think you won’t want to do the job they’re hiring for, and they’ll lose
    you before they get a decent **return on investment** (**ROI**). Because remember,
    you very much *are* an investment from their perspective!
  prefs: []
  type: TYPE_NORMAL
- en: You should also try to align your career goals with opportunities at the company,
    and this again comes from research. It’s okay to say something like “In 5 years,
    I hope to be a team lead” because it shows you have ambition but that those ambitions
    will likely keep you there for a while, and it’s not an unrealistic goal either.
    They may appreciate such a goal because it probably indicates you’re going to
    work hard and produce good results in the interests of your career advancement,
    but that effort will be aiding them all along. Demonstrating a win-win situation
    if you’re hired is a good goal to keep in mind!
  prefs: []
  type: TYPE_NORMAL
- en: Why should we hire you?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this type of question, you’ll want to explain how you can contribute to
    what the company does, and how your skills and experiences line up with the job
    requirements. Obviously, for a web development position, spelling out how you
    have learned HTML, CSS, and JavaScript, and how you can put them to work building
    real websites, is key.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also want to demonstrate enthusiasm for the position, though without
    going overboard to the point of it sounding forced. Something along the lines
    of “I enjoy the challenges inherent in web development and I believe my skills
    will allow me to do that effectively for you” might be a good starting point.
  prefs: []
  type: TYPE_NORMAL
- en: Describe a challenge you faced and how you overcame it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is one of the easier questions to answer because, let’s face it, we’ve
    all had challenges to overcome – and hopefully we’ve all overcome them! Here,
    we’re talking about challenges that would be work-related, whether that was on
    the job or not.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to use specific examples and to focus on your problem-solving approach
    and the eventual outcome. The challenges you discuss – one or two will suffice
    – could be big or small, so long as they demonstrate how you dealt with them effectively.
    Maybe you could talk about the time you spent hours fighting with some CSS to
    get a website’s layout just right. Or it could be the time your PC was acting
    weird, and you had to do a bunch of research and registry editing to get the problem
    resolved. Anything that shows you can tackle problems, fight through them, research,
    learn, and reason is what’s important.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you usually wouldn’t want to discuss any sort of personal challenges
    here. However, as someone looking for an entry-level position, this may be all
    you have. Maybe your car broke down and you had to deal with that. Or perhaps
    there was a bad rainstorm and your house’s roof was leaking and you had to put
    together a makeshift patch to keep your house from flooding. So long as you highlight
    how you overcame the challenges and how you approached them, as well as your thought
    process for dealing with them, they can be okay as an answer if it’s all you have.
  prefs: []
  type: TYPE_NORMAL
- en: How do you handle stress or pressure?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This question goes along hand-in-hand with the previous one because when we’re
    facing technical challenges, we’re also facing some level of stress and pressure.
    How you handle that is something a prospective employer will want to know.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way to answer this is just like the last question: provide specific examples
    of tough situations and explain how and why they made you feel tense. Then, explain
    any coping mechanisms you utilized to deal with them. Maybe you regularly use
    various breathing exercises. Or your answer could be that you sought assistance
    from someone with more knowledge of the topic at hand than you had. Anything that
    demonstrates that you know how to handle stress and won’t wilt under pressure
    is what someone is looking for here.'
  prefs: []
  type: TYPE_NORMAL
- en: You also might want to mention any proactive stress management techniques you
    use, and this is an area where getting a little bit personal is probably more
    acceptable. For example, if you like to fish because it’s relaxing, that’s okay
    to mention. However, remember that primarily, the goal is to show what you’ll
    be able to do and handle on the job, so trying to relate your answer to a work
    environment will be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: What are your salary expectations?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is always a difficult question and leads to the much larger topic of negotiations,
    which is something that many people aren’t comfortable with. To help answer this
    question, be sure to research industry standards and norms before getting to the
    interview so that you have realistic expectations (I covered this in the first
    few chapters, but this is data that changes all the time, so you’ll want to research
    a bit right before the interview).
  prefs: []
  type: TYPE_NORMAL
- en: You’ll want to be honest about what you’re looking for but be open to some degree
    of negotiating. There is usually some flexibility from the hiring side when it
    comes to salary, but it will depend on a lot of factors, some of which you’ll
    have no control over. So, avoid saying something like ‘Well, I know web developers
    make *X*, so this is what I want.” Instead, say something like “Well, based on
    my research, a range of *X* to *Y* seems to be the norm, so I’m looking for something
    in that range.” Just be sure that the low end of that range is a number you’ll
    be happy with because it’s natural for the hirer to want to be closer to that
    end of the range.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the day, it’s up to you whether to accept any offer, so you can
    be as firm with this answer or as flexible with it as you want. If you price yourself
    way out of their comfort zone, then that’s a position you weren’t going to get
    anyway to be blunt, so while some flexibility is good, don’t allow yourself to
    be lowballed either.
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any questions for us?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, we come to a question that will normally be the last one asked in most
    interviews, and it’s one you should prepare for with research. You’ll want to
    have two to three good questions queued up. If you don’t have any questions at
    all, then it tends to imply a lack of interest or engagement, something you don’t
    want to ever show in an interview.
  prefs: []
  type: TYPE_NORMAL
- en: You can ask about things such as team structure, what the company culture is
    like, what a typical workday would be like for your position, or about specific
    projects if your research turned up any. You can ask about work/life balance (which
    is coming up next!) and what’s on the horizon for the company in terms of projects
    that you might be involved with.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t go overboard, though! If you ask too many questions, or questions that
    require long, in-depth answers, then you run the risk of being seen as not respectful
    of the interviewer’s time. So, two to three questions is a good rule of thumb,
    assuming they can all be answered in a minute or two. And it’s okay to ask follow-up
    questions based on the answers, but again, remember to not start taking up too
    much of the interviewer’s time.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s say that you’ve landed your first web developer job through a lot
    of hard work and preparation. Congratulations! There’s one last thing I want to
    discuss, and that’s the idea of work/life balance.
  prefs: []
  type: TYPE_NORMAL
- en: Remembering that it’s not all about work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is focused on getting you a job, getting you to attain gainful
    employment in the web development field. But as Homer Simpson said, “All work
    and no play make Homer something something.” That, of course, was a humorous reference
    to the famous movie The Shining, where the main character goes crazy, ostensibly
    from focusing too much on work (well, it may have had something to do with the
    spirits living in the inn he was at too, but we’ll put that part aside for our
    purposes here!).
  prefs: []
  type: TYPE_NORMAL
- en: 'So, while this section isn’t about landing your first job, I believe it’s about
    something that is an important enough consideration that you should have it in
    the back of your mind all along, even as you’re on the hunt for that first job:
    work/life balance.'
  prefs: []
  type: TYPE_NORMAL
- en: Burnout can be a big problem in any “knowledge worker” industry, including IT
    (probably in any industry generally, but it seems to be a bigger problem for knowledge
    workers). This is especially true when you love solving problems and creating
    things because you’ll work longer and harder than you probably should in service
    of those goals just because you get so wrapped up in what you’re doing. You’ll
    hear about “the zone” sometimes, or “the flow,” and it’s a real thing. It takes
    time to build up mental models of what you’re working on, and any interruption
    sets you back, but it also means that once you’re in that flow state, you tend
    to forget the world around you a little bit.
  prefs: []
  type: TYPE_NORMAL
- en: And to be clear, to a certain extent, there’s nothing wrong with that! There’s
    nothing wrong with loving what you do, with enjoying the work. There’s nothing
    wrong with being engrossed with what you’re doing.
  prefs: []
  type: TYPE_NORMAL
- en: Loving your work too much
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: But it’s easy to take that too far, especially when “crunch time” hits, and
    that’s when it becomes dangerous. This is where your work/life balance sometimes
    goes out of whack.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll sometimes encounter the phrase “death march” when it comes to development
    projects. That’s when there’s a looming deadline that *must* be met, and you’ll
    sometimes find people working very long hours. You’ll sometimes see people putting
    in 12 or 14 hours a day, 7 days a week, to meet that date.
  prefs: []
  type: TYPE_NORMAL
- en: This, simply put, is dangerous, and it’s also counterproductive. You can’t keep
    your brain in high gear for too long or your productivity begins to drop precipitously.
    Even if that weren’t the case, humans are emotional beings, and the emotional
    toll of putting so much focus on your working life and neglecting the rest of
    your life leads to bad consequences at some point.
  prefs: []
  type: TYPE_NORMAL
- en: It’s a difficult thing to do when you’re starting because you don’t quite understand
    why it can be so destructive, and you also want to put on a good performance,
    so to speak. You don’t want to appear to be the developer who doesn’t put in the
    extra effort. You were hired, and now you’ve got to produce, and if that means
    extra hours, then so be it – that’s the mentality people tend to have naturally.
  prefs: []
  type: TYPE_NORMAL
- en: But I strongly encourage you to fight that urge and push back when necessary.
    Don’t allow the job to become your life, unless that’s explicitly what you want,
    of course. Some people do want to live, eat, and sleep the job. If that’s you,
    then forget what I’m saying here and carry on! But that is generally not most
    people. Most people want a life outside of work, and you’ve got to fight for that
    sometimes.
  prefs: []
  type: TYPE_NORMAL
- en: To be clear, a few extra hours here and there shouldn’t be too big a deal. Sometimes,
    it’s necessary. Especially if there is a major problem with your production system,
    the system that the world is using to conduct business, you may have to put in
    a little extra time and effort to right the ship, so to speak. But even then,
    good companies will compensate you for your time – if not financially, then at
    least by letting you, for example, leave a bit early the next day to balance the
    scales. And you shouldn’t be shy about asking for that either.
  prefs: []
  type: TYPE_NORMAL
- en: Sussing out bad companies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Not all companies are good, unfortunately, so you can’t expect it, but that’s
    where this part of the conversation does have some bearing on the job hunt: always
    remember that you’re interviewing the prospective employer just as much as they’re
    interviewing you!'
  prefs: []
  type: TYPE_NORMAL
- en: Ask questions about work/life balance and gauge their responses. Sometimes,
    there will be hints of a bad situation… phrases like “well, we expect everyone
    to put in the effort required here”, or something along those lines, might indicate
    an environment that doesn’t value work/life balance. Why? Because of how one person
    defines “required” versus how another does. Of course, every employer expects
    a solid effort from the employees, and that’s perfectly reasonable. But expecting
    you to always go above and beyond probably isn’t. So, you have to figure out what
    they mean.
  prefs: []
  type: TYPE_NORMAL
- en: You can do that by probing a bit more in such situations and decide for yourself
    because there are no absolutes here, no definitive statements that will always
    be a red flag (aside from obvious things like “we always expect everyone to work
    more than 40 hours a week,” but it’ll rarely be *that* obvious!). Companies do
    often give away their lack of work/life balance in what they say during interviews
    in sometimes subtle ways – that’s the key point – and you should always be looking
    for such clues and probe a bit. Asking, for example, “How often do your engineers
    have to work extra hours on weekends?” might be one such probing question you
    could ask. An answer along the lines of “It’s very rare, only in extreme emergencies”
    is very different from “Well, it depends on how tight our deadlines our.” The
    former is generally reasonable, but the latter, in my mind at least, would tend
    to indicate a company that doesn’t manage projects well and expects developers
    to pick up the slack frequently. It probably won’t equate to a pleasant environment
    to work in.
  prefs: []
  type: TYPE_NORMAL
- en: Couple that with researching the company yourself and you can reach a valid
    conclusion. Sites such as Glassdoor ([glassdoor.com](http://glassdoor.com)) are
    good for this because you can find anonymous feedback about a company there from
    actual employees of the company that can provide you solid insight into what working
    there might be like.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll be inclined early on in your job hunt to dismiss such concerns, but I
    implore you not to! You don’t want to find yourself hating your job a year later
    because you’re always having to work long hours that drain your non-working hours
    away. That’s something that leads to burnout in a hurry. So, don’t be afraid to
    ask probing questions during the interview process – do some research before and
    after an interview, and trust your gut. If an opportunity gives you pause then,
    no matter how much you may need a job, it’s probably best to keep looking. Work/life
    balance is too important to sacrifice in my opinion.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the roadmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we wrap up the technical-focused part of this book, you’ve got a few more
    items uncovered. In *Figure 9**.1*, you can see the updated web developer roadmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1: The roadmap, with a few more boxes filled in](img/B18315_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: The roadmap, with a few more boxes filled in'
  prefs: []
  type: TYPE_NORMAL
- en: With this chapter, you started to uncover the **Career Path** branch, along
    with the **Demonstrated Abilities**, **Interview Skills**, and **Code Tests**
    squares. In the next chapter, we should be able to complete the entire **Career**
    **Path** branch!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed finding your first job in the web development
    world. We looked at the term FAANG, what it means, and how it impacts your job
    search. We looked at some ways to find job openings online, and we looked at building
    a good resume in preparation for applying. We also discussed Git repos, portfolios,
    and samples to show and demonstrate your abilities. We then talked about interviews,
    what they might be like, how to handle them, and how to answer some common questions
    that come up, generally preparing you for the interview experience. Finally, we
    talked about how it’s important to keep work in balance with your non-work life
    to avoid burnout.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll talk about what comes after you land that first job
    and things you can do to help ensure your success. We’ll look at the good habits
    of good developers and the things you should keep in mind as you build experience
    in the field to help build your career.
  prefs: []
  type: TYPE_NORMAL
