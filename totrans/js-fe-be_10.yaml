- en: '*Chapter 7*: Using Express with Node.js'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*：使用Node.js的Express'
- en: We saw in the previous chapter that a program for the Node.js server is an assembly
    of different modules. Many modules have been created by Node.js developers, which
    can be inserted into our programs using the `npm` utility (see [*Chapter 6*](B17416_06_ePub.xhtml#_idTextAnchor123),
    *Creating and Using Node.js Modules*). One of these modules is called **Express**.
    It is one of the most used modules with Node.js because it allows you to structure
    server programs according to the **Model View Controller** (**MVC**) model.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了Node.js服务器的程序是由不同的模块组成的。许多模块是由Node.js开发者创建的，可以使用`npm`实用工具（参见[*第6章*](B17416_06_ePub.xhtml#_idTextAnchor123)，*创建和使用Node.js模块*）插入到我们的程序中。其中有一个模块被称为**Express**。它是Node.js中最常用的模块之一，因为它允许你根据**模型-视图-控制器**（**MVC**）模型来结构化服务器程序。
- en: In this chapter, we’ll study how to create a Node.js application while respecting
    the characteristics of the MVC model by using the Express module.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究如何使用Express模块在尊重MVC模型特性的同时创建Node.js应用程序。
- en: 'Here are the topics we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们将要讨论的主题：
- en: Using the Node.js `http` module
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js的`http`模块
- en: Installing the Express module
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Express模块
- en: The MVC pattern used by Express
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Express使用的MVC模式
- en: Using routes with Express
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Express的路线
- en: Displaying views with Express
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Express显示视图
- en: Node.js integrates into its internal modules the possibility to create a web
    server using the `http` module internal to Node.js. We first explain how to use
    this `http` module, and then we will see the contribution that the external Express
    module makes to more easily create a web application built according to the MVC
    model.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js将其内部模块集成了使用Node.js内部的`http`模块创建Web服务器的可能性。我们首先解释如何使用这个`http`模块，然后我们将看到外部Express模块对更易于创建基于MVC模型的Web应用的贡献。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the code files for this chapter on GitHub at: [https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%207.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%207.zip).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub上找到本章的代码文件：[https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%207.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%207.zip)。
- en: Using the Node.js http module
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js的http模块
- en: The `http` module is an internal Node.js module. It is, therefore, directly
    accessible in our programs using the `require("http")` instruction. With this
    module you can create a web server based on the HTTP protocol and thus display
    web pages in an internet browser.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`http`模块是Node.js的内部模块。因此，我们可以通过使用`require("http")`指令直接在我们的程序中访问它。使用这个模块，你可以创建基于HTTP协议的Web服务器，并在互联网浏览器中显示网页。'
- en: For creating a web server based on HTTP, we use the `http.createServer(callback)`
    method of the `http` module. The callback function indicated as a parameter is
    of the form `callback(req, res)`, in which `req` corresponds to the request received,
    and `res` corresponds to the response to be sent to the browser. Depending on
    the request received, the corresponding response will be sent.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建基于HTTP的Web服务器，我们使用`http.createServer(callback)`方法。作为参数指示的回调函数的形式是`callback(req,
    res)`，其中`req`对应于接收到的请求，`res`对应于要发送给浏览器的响应。根据接收到的请求，将发送相应的响应。
- en: Note
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In the `req` parameter, there is, among other things, the URL of the request
    received, thus making it possible to return, via the `res` parameter, the correct
    response to the browser according to this request.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在`req`参数中，除了其他内容外，还有接收到的请求的URL，因此可以通过`res`参数根据这个请求返回正确的响应给浏览器。
- en: 'Let’s see in the following program how to use the `createServer()` method:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下程序中如何使用`createServer()`方法：
- en: Creating a web server using the http module (test.js file)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用http模块创建Web服务器（test.js文件）
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `createServer()` method returns an object, here used through the variable
    named `server`, on which we indicate to wait for requests coming from port `3000`
    (the one indicated in the `server.listen(port)` method). This means that each
    time URLs of the form `http://localhost:3000` are accessed via the browser, the
    program previously launched (with the `node test.js` command) will be activated
    and will display the result in the browser.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`createServer()`方法返回一个对象，这里通过名为`server`的变量使用，我们在其上指示等待来自端口`3000`（在`server.listen(port)`方法中指示的端口）的请求。这意味着每次通过浏览器访问形式为`http://localhost:3000`的URL时，先前启动的程序（使用`node
    test.js`命令）将被激活，并在浏览器中显示结果。'
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The use of the `server.listen(port)` method is mandatory because it is not enough
    to create a server with the `http.createServer()` method. This server must also
    be listening (with `server.listen(port )`) to HTTP requests addressed to it by
    browsers connecting to this server (here using a URL such as `http://localhost:3000`).
    Port `3000` is used here, but another port number could be used (provided that
    this port is not already used by another server, which would cause an access conflict
    to know to which server the request on the port is addressed).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `server.listen(port)` 方法是强制性的，因为仅使用 `http.createServer()` 方法创建服务器是不够的。此服务器还必须监听（使用
    `server.listen(port )`）来自连接到此服务器的浏览器（在此处使用类似 `http://localhost:3000` 的 URL）发送的
    HTTP 请求。此处使用端口号 `3000`，但也可以使用其他端口号（前提是此端口号未被另一个服务器使用，这会导致访问冲突，不知道端口号上的请求是针对哪个服务器的）。
- en: We send the response to the browser using `res.write(string)` instructions.
    You must finish sending the response with the `res.end()` instruction, which means
    that the browser has received all the elements to display (the server waits to
    receive the `res.end()` instruction to display all the elements sent).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `res.write(string)` 指令向浏览器发送响应。您必须使用 `res.end()` 指令完成响应的发送，这意味着浏览器已接收到所有要显示的元素（服务器等待接收
    `res.end()` 指令以显示所有发送的元素）。
- en: Note
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `res.setHeader()` method is used to set HTTP header fields. Here, `"Content-type"`
    is set to the value `"text/html; charset=utf-8"`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `res.setHeader()` 方法设置 HTTP 头字段。在此处，将 `"Content-type"` 设置为 `"text/html; charset=utf-8"`。
- en: 'Let’s launch the previous program by typing the command `node test.js`. The
    program displays a message, then waits for HTTP requests on port `3000`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过输入命令 `node test.js` 启动前面的程序。程序显示一条消息，然后等待端口号 `3000` 上的 HTTP 请求：
- en: '![Figure 7.1 – HTTP server waiting on port 3000'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 7.1 – 在端口号 3000 上等待的 HTTP 服务器'
- en: '](img/Figure_7.01_B17416.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 7.01_B17416.jpg]'
- en: Figure 7.1 – HTTP server waiting on port 3000
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 在端口号 3000 上等待的 HTTP 服务器
- en: To test the program, display the URL beginning with `http://localhost:3000`
    in a browser. When an HTTP request uses port `3000` (the port on which the server
    is listening), the callback function indicated in the `createServer(callback)`
    method is activated and then the response is sent to the browser.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试程序，请在浏览器中显示以 `http://localhost:3000` 开头的 URL。当 HTTP 请求使用端口号 `3000`（服务器正在监听的端口号）时，`createServer(callback)`
    方法中指示的回调函数被激活，然后响应被发送到浏览器。
- en: 'Let’s type the URL `http://localhost:3000` in the browser (see the following
    figure):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中输入 URL `http://localhost:3000`（见下图）：
- en: '![Figure 7.2 – Viewing URL http://localhost:3000 in the browser'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 7.2 – 在浏览器中查看 URL http://localhost:3000'
- en: '](img/Figure_7.02_B17416.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 7.02_B17416.jpg]'
- en: Figure 7.2 – Viewing URL http://localhost:3000 in the browser
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 在浏览器中查看 URL http://localhost:3000
- en: Regardless of the URL specified in the browser ( which uses port `3000`), the
    display in the browser remains the same. For the display to be different for different
    URLs, it must be considered in the callback function by using the value of `req.url`,
    which contains the URL typed and returns different strings according to the request
    received.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 无论在浏览器中指定的 URL 是什么（使用端口号 `3000`），浏览器中的显示都保持不变。要使不同 URL 的显示不同，必须在回调函数中使用 `req.url`
    的值来考虑，它包含输入的 URL，并根据接收到的请求返回不同的字符串。
- en: Using the Express module makes it easy to manage the different requests received
    and display different results depending on the URL entered.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Express 模块可以轻松管理接收到的不同请求，并根据输入的 URL 显示不同的结果。
- en: Installing the Express module
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Express 模块
- en: Since the Express module is installed using npm, we type the `npm install express`
    command to install it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Express 模块是通过 npm 安装的，我们输入 `npm install express` 命令来安装它。
- en: '![Figure 7.3 – Installing the Express module with npm'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 7.3 – 使用 npm 安装 Express 模块'
- en: '](img/Figure_7.03_B17416.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 7.03_B17416.jpg]'
- en: .
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: Figure 7.3 – Installing the Express module with npm
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 使用 npm 安装 Express 模块
- en: The Express module is now installed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Express 模块现在已安装。
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A utility related to Express is also useful for creating the architecture of
    our web applications. This is the `"express-generator"` module (this module was
    previously included with Express but is now separate from it, hence it’s uploaded
    here).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Express 相关的一个实用工具也有助于创建我们 Web 应用的架构。这就是 `"express-generator"` 模块（此模块之前包含在
    Express 中，但现在已从其中分离出来，因此在此处上传）。
- en: Let’s also install the `"express-generator"` module using the `npm install express-generator
    -g` command. We use the `-g` option so that the `express` command defined in this
    module is accessible from any directory.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也使用`npm install express-generator -g`命令安装`"express-generator"`模块。我们使用`-g`选项，以便在这个模块中定义的`express`命令可以从任何目录访问。
- en: '![Figure 7.4 – Installing the "express-generator" module with npm'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.4 – 使用npm安装"express-generator"模块'
- en: '](img/Figure_7.04_B17416.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.04_B17416.jpg)'
- en: Figure 7.4 – Installing the “express-generator” module with npm
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 – 使用npm安装“express-generator”模块
- en: Note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can verify that the installation is correct by typing the command `express
    -h`. If the installation of the module is correct, help for the `express` command
    is displayed in the window (otherwise an error is displayed).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过输入命令`express -h`来验证安装是否正确。如果模块安装正确，窗口中将显示`express`命令的帮助信息（否则将显示错误）。
- en: Once these two modules are installed, you can create a first web application
    based on Express.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了这两个模块，你就可以创建一个基于Express的第一个Web应用程序。
- en: 'To do this, type the `express apptest` command to create the application named
    `apptest`. You should see the following result:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个任务，请输入`express apptest`命令来创建名为`apptest`的应用程序。你应该看到以下结果：
- en: '![Figure 7.5 – Creating the apptest application with Express'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.5 – 使用Express创建apptest应用程序'
- en: '](img/Figure_7.05_B17416.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.05_B17416.jpg)'
- en: Figure 7.5 – Creating the apptest application with Express
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – 使用Express创建apptest应用程序
- en: 'This command creates an `apptest` directory containing the basic files to run
    the application. You must then type the three commands indicated at the end of
    the display: `cd apptest`, `npm install`, and `npm start`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令创建一个包含运行应用程序的基本文件的`apptest`目录。然后你必须输入显示末尾指示的三个命令：`cd apptest`、`npm install`和`npm
    start`。
- en: Once these commands are typed, open a browser and display the URL `http://localhost:3000`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦输入了这些命令，打开浏览器并显示URL `http://localhost:3000`。
- en: 'This is what you will see:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你将看到的内容：
- en: '![Figure 7.6 – Default app home page created with Express'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.6 – 使用Express创建的默认应用程序主页'
- en: '](img/Figure_7.06_B17416.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.06_B17416.jpg)'
- en: Figure 7.6 – Default app home page created with Express
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6 – 使用Express创建的默认应用程序主页
- en: If we look at the source files of the application created in the `apptest` directory,
    we see the `app.js` and `package.json` files, as well as the `bin`, `node_modules`,
    `public`, `routes`, and `views` directories. These directories are those that
    describe the MVC architecture used by Express, which we explain below.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看`apptest`目录中创建的应用程序的源文件，我们会看到`app.js`和`package.json`文件，以及`bin`、`node_modules`、`public`、`routes`和`views`目录。这些目录是描述Express使用的MVC架构的目录，我们将在下面解释。
- en: The MVC pattern used by Express
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Express使用的MVC模式
- en: 'The MVC model is an application architecture model allowing an application
    to be broken down into different parts: models, views, and the controller:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: MVC模型是一个应用程序架构模型，允许应用程序被分解为不同的部分：模型、视图和控制器：
- en: Models correspond to the data manipulated by the application. In general, this
    is data from databases. Node.js is closely tied to the MongoDB database, which
    is explored in the next chapter.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型对应于应用程序操作的数据。通常，这是来自数据库的数据。Node.js与MongoDB数据库紧密相连，这将在下一章中探讨。
- en: Views correspond to the visualization of data, for example, input forms and
    displayed lists. Each display corresponds to a view that will be in the `views`
    directory of the application.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图对应于数据的可视化，例如，输入表单和显示列表。每个显示对应于一个将位于应用程序的`views`目录中的视图。
- en: The controller allows navigation between the different views, depending on the
    data. For this, we use routes (in fact, URLs) that indicate the processing to
    be performed. The `routes` directory describes the routes used by the application
    (and the processing performed for each of them).
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器允许在不同视图之间进行导航，取决于数据。为此，我们使用路由（实际上是URL）来指示要执行的处理。`routes`目录描述了应用程序使用的路由（以及为每个路由执行的处理）。
- en: We can therefore see that the MVC model makes it possible to separate the processing,
    the display, and the data. This split is widely used in web projects and is the
    one proposed by Express.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到MVC模型使得处理、显示和数据分离成为可能。这种分割在Web项目中广泛使用，也是Express提出的。
- en: Let’s first look at how routing works in Express. This corresponds to the controller
    part of the MVC model.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看Express中路由是如何工作的。这对应于MVC模型中的控制器部分。
- en: Using routes with Express
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Express的路由
- en: Routes indicate the processing to be performed based on the requested URL. Compared
    to what we wrote when using the `http` module of Node.js with the `createServer(callback)`
    method, this consists of writing the content of the `callback(req, res)` function
    according to the `req` request received.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 路由指示基于请求的URL要执行的处理。与使用Node.js的`http`模块和`createServer(callback)`方法时我们编写的内容相比，这包括根据接收到的`req`请求编写`callback(req,
    res)`函数的内容。
- en: The routes are described in the `app.js` file, which is the main file created
    by Express. Let’s examine its content.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 路由在`app.js`文件中描述，这是Express创建的主要文件。让我们检查其内容。
- en: The initial content of the app.js file
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: app.js文件的初始内容
- en: 'To understand how routes work in Express, open the `app.js` file located in
    the main application directory, and you will see the content of this file, like
    this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Express中的路由如何工作，请打开位于主应用程序目录中的`app.js`文件，你将看到此文件的内容，如下所示：
- en: app.js file
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: app.js文件
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This file describes how the application built with Express works. It uses the
    `app` variable, which is the return from the `express()` function call and symbolizes
    the application. On this `app` object, the `use()` method is used many times,
    which makes it possible to add processing to be performed for each request received
    on the server.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件描述了使用Express构建的应用程序的工作方式。它使用`app`变量，这是`express()`函数调用的返回值，象征着应用程序。在这个`app`对象上，多次使用`use()`方法，这使得可以为服务器接收到的每个请求添加要执行的处理。
- en: For example, `app.use(logger("dev"))` triggers the `logger()` function for each
    request received on the server. This is why the server console displays the URL
    that was requested in the browser during each request to the server.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`app.use(logger("dev"))`会在服务器接收到的每个请求上触发`logger()`函数。这就是为什么服务器控制台在每次向服务器发送请求时都会显示浏览器中请求的URL。
- en: By having displayed in the browser the URLs `http://localhost:3000` and `http://localhost:3000/users`,
    we obtain the following in the server console.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在浏览器中显示URL`http://localhost:3000`和`http://localhost:3000/users`，我们在服务器控制台中获得了以下内容。
- en: '![Figure 7.7 – Display of URLs in the server console'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.7 – 服务器控制台中URL的显示'
- en: '](img/Figure_7.07_B17416.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.07_B17416.jpg)'
- en: Figure 7.7 – Display of URLs in the server console
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7 – 服务器控制台中URL的显示
- en: Now, let’s look at the meaning of the lines displayed in the server console.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看服务器控制台中显示的行的含义。
- en: Different types of routes possible
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可能存在不同类型的路由
- en: 'In the previous figure, you’ll notice that the word `GET` is displayed in front
    of each URL: `GET /``, GET``/users`.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，你会注意到每个URL前都显示了单词`GET`：`GET /`，`GET /users`。
- en: The word `GET` means that the URL `/` or `/users` is accessed by an HTTP request
    of the `GET` type. The `GET` type is the one used when the accessed URL is displayed
    in the address bar of the browser, for example, when you type it directly or when
    you click on a link on a page.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 单词`GET`表示通过HTTP请求的`GET`类型访问URL`/`或`/users`。`GET`类型是在访问的URL显示在浏览器地址栏时使用的，例如，当你直接输入它或点击页面上的链接时。
- en: Note
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Other types of HTTP requests exist. They make it possible not to display the
    corresponding URL in the address bar of the browser, and thus to hide it from
    users. For example, if the URL for deleting records from the database was visible
    in the browser’s address bar, it would suffice to refresh the page to continue
    deleting records from the database. Hence the interest in other types of HTTP
    requests that allow the current URL to be hidden.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 其他类型的HTTP请求也存在。它们使得不必在浏览器地址栏中显示相应的URL，从而将其隐藏起来。例如，如果从数据库中删除记录的URL在浏览器地址栏中可见，则只需刷新页面即可继续从数据库中删除记录。因此，其他类型的HTTP请求允许隐藏当前URL。
- en: 'The other types of HTTP requests (in addition to `GET`) are mainly `PUT`, `POST`,
    and `DELETE` type requests. These types of requests are used in programs to signify
    an action to be performed on one or more pieces of data (called resources):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`GET`之外的其他类型的HTTP请求主要是`PUT`、`POST`和`DELETE`类型请求。这些类型的请求在程序中用于表示要对一个或多个数据（称为资源）执行的操作：
- en: '`GET` means reading a resource.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`表示读取资源。'
- en: '`POST` means creating a resource.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`表示创建资源。'
- en: '`PUT` means updating a resource.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT`表示更新资源。'
- en: '`DELETE` means deleting a resource.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`表示删除资源。'
- en: Although multiple types of HTTP requests exist, these are the main ones. They
    are used to manipulate resources, allowing them to be created (`POST`), updated
    (`PUT`), deleted (`DELETE`), and read (`GET`).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然存在多种类型的 HTTP 请求，但这些都是主要的。它们用于操作资源，允许创建（`POST`）、更新（`PUT`）、删除（`DELETE`）和读取（`GET`）。
- en: Note
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A route is the association of an HTTP request with a URL. For example, the `GET
    /users` route associates the `/users` URL with the `HTTP GET` request, while the
    `DELETE /users` route associates the same `/users` URL with the `HTTP DELETE`
    request. Although these routes use the same URL, they are different routes because
    the HTTP requests are different.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 路由是将 HTTP 请求与 URL 相关联。例如，`GET /users` 路由将 `/users` URL 与 `HTTP GET` 请求关联起来，而
    `DELETE /users` 路由将相同的 `/users` URL 与 `HTTP DELETE` 请求关联起来。尽管这些路由使用相同的 URL，但由于
    HTTP 请求不同，它们是不同的路由。
- en: Now that we’ve seen the different types of HTTP requests used, let’s look at
    how Express uses them internally.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看到了使用的不同类型的 HTTP 请求，让我们看看 Express 如何在内部使用它们。
- en: Analyzing routes defined in the app.js file
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析 app.js 文件中定义的路由
- en: The `app.use()` method is also used to define new routes, that is, to define
    the processing that will be performed for each new URL used (with the associated
    request type).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.use()` 方法也用于定义新的路由，即定义每个新 URL 使用时（与关联的请求类型）将执行的处理。'
- en: The `app.use(url, callback)` method is used to define the processing to be performed
    when the specified URL is activated. As the type of request is not indicated here,
    all types of requests will activate the treatment indicated in the callback function.
    To indicate the type of request, you must use methods similar to `app.use()`.
    These are the `app.get()`, `app.put()`, `app.post()`, and `app.delete()` methods.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `app.use(url, callback)` 方法定义在指定 URL 激活时将执行的处理。由于此处未指定请求类型，因此将激活回调函数中指示的所有类型的请求处理。要指示请求类型，必须使用类似于
    `app.use()` 的方法。这些是 `app.get()`、`app.put()`、`app.post()` 和 `app.delete()` 方法。
- en: Note
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The callback function of the form `callback(req, res, next)` returns the response
    to the browser. The `next()` parameter corresponds to a function to be called
    at the end of the callback if the processing must continue in the next callback
    function (if the processing to be performed is handled by multiple callback functions).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 形式为 `callback(req, res, next)` 的回调函数将响应返回给浏览器。`next()` 参数对应于在回调结束时需要调用以继续在下一个回调函数中处理（如果要执行的处理由多个回调函数处理）的函数。
- en: The routes already defined in `app.js` are `/` and `/users`, thus making it
    possible to run the processes associated with these routes. These routes are examples
    to show how to implement routes in the `app.js` file. The processing instructions
    are defined in the `indexRouter` and `usersRouter` functions. These functions
    are the variables used in return for the instructions `require('./routes/index')`
    and `require('./routes/users')`. The processing of routes is therefore done here
    in the `index.js` and `users.js` files defined in the `routes` directory.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app.js` 中已定义的路由是 `/` 和 `/users`，这使得能够运行与这些路由关联的过程。这些路由是示例，用于展示如何在 `app.js`
    文件中实现路由。处理指令定义在 `indexRouter` 和 `usersRouter` 函数中。这些函数是用于返回指令 `require('./routes/index')`
    和 `require('./routes/users')` 的变量。因此，路由处理是在 `routes` 目录中定义的 `index.js` 和 `users.js`
    文件中完成的。
- en: 'Let’s open these two files and analyze their contents:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开这两个文件并分析其内容：
- en: index.js file (routes directory)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: index.js 文件（路由目录）
- en: '[PRE51]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: users.js file (routes directory)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: users.js 文件（路由目录）
- en: '[PRE58]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Each of these files uses the `router.get(url, callback)` method, meaning that
    the route is associated with the `/` (it will be concatenated with the URL given
    in the `app.js` file), followed by the callback function of the form `callback(req,
    res, next)`. The `next` parameter corresponds to a function to call if the processing
    must continue in the callback function that follows (if such a function exists,
    which is not the case here).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件中的每一个都使用 `router.get(url, callback)` 方法，这意味着路由与 `/` 相关联（它将与 `app.js` 文件中给出的
    URL 连接），然后是形式为 `callback(req, res, next)` 的回调函数。`next` 参数对应于如果必须在后续的回调函数中继续处理（如果存在这样的函数，这里的情况就是这样）则需要调用的函数。
- en: 'The processing performed in each of the callback functions consists of sending
    the response, which will be displayed in the browser. Here, we use the `res.send()`
    and `res.render()` methods, which allow the response to be sent:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个回调函数中执行的处理包括发送响应，该响应将在浏览器中显示。在这里，我们使用 `res.send()` 和 `res.render()` 方法，这些方法允许发送响应：
- en: The `res.send()` method is similar to `res.end()` (defined in the `"http"` module
    of Node.js), but also allows you to indicate that you are using HTML and `res.send()`
    method must be made in the processing, otherwise, an error occurs.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res.send()` 方法类似于 `res.end()`（在 Node.js 的 `"http"` 模块中定义），但它还允许您指明您正在使用 HTML，并且必须在处理过程中使用
    `res.send()` 方法，否则将发生错误。'
- en: The `res.render()` method allows an external file (called a view) to be displayed.
    Views are written in a special language that depends on the format of the view.
    By default, the views used by Express are JADE files, but it is possible to use
    other formats.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res.render()` 方法允许显示外部文件（称为视图）。视图是用一种特殊语言编写的，这取决于视图的格式。默认情况下，Express 使用的视图是
    JADE 文件，但也可以使用其他格式。'
- en: 'Here, the view displayed by the `res.render()` method corresponds to the `index.jade`
    file located in the `views` directory. Its contents are as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`res.render()` 方法显示的视图对应于位于 `views` 目录中的 `index.jade` 文件。其内容如下：
- en: index.jade file (views directory)
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.jade` 文件（视图目录）'
- en: '[PRE65]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: This file is written using a particular syntax, called JADE. The file will be
    transformed into HTML code by Express before being sent to the browser (which
    can only interpret HTML).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件使用一种特定的语法编写，称为 JADE。Express 将在将文件发送到浏览器（只能解释 HTML）之前将其转换为 HTML 代码。
- en: Note
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Express allows files associated with views to be written using a variety of
    syntaxes. The most common are **JADE** and **EJS**.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Express 允许使用各种语法编写与视图关联的文件。最常见的是 **JADE** 和 **EJS**。
- en: We will explore the JADE syntax in the *Displaying views with Express* section
    in this chapter.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的 *使用 Express 显示视图* 部分中探索 JADE 语法。
- en: 'Note that the `app.js` file allows you to configure the directory associated
    with the views and the syntax used in the views. Here are the corresponding instructions
    from the `app.js` file:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`app.js` 文件允许您配置与视图关联的目录以及视图中所使用的语法。以下是来自 `app.js` 文件的相应说明：
- en: Configuring views (app.js file)
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 配置视图（`app.js` 文件）
- en: '[PRE69]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: We have described the routes already listed in the `app.js` file. Let’s see
    how to create new routes in this file.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经描述了 `app.js` 文件中已经列出的路由。让我们看看如何在这个文件中创建新路由。
- en: Adding a new route in the app.js file
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 `app.js` 文件中添加新路由
- en: Adding a new route in the `app.js` file can be done either by writing the processing
    directly in the `app.js` file or by creating an external file that will be in
    the `routes` directory.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app.js` 文件中添加新路由可以通过直接在 `app.js` 文件中编写处理程序或创建一个位于 `routes` 目录中的外部文件来完成。
- en: Warning
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Any modification of the `app.js` file requires restarting the server by performing
    the `npm start` command; otherwise, the modifications are not taken into account.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 任何对 `app.js` 文件的修改都需要通过执行 `npm start` 命令来重新启动服务器；否则，修改不会被考虑。
- en: Let’s look at these two ways to create a new route.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这两种创建新路由的方法。
- en: Adding route processing directly in the app.js file
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接在 `app.js` 文件中添加路由处理
- en: 'Let’s add the `/clients` route activated following a `app.get()` method to
    define the route:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个由 `app.get()` 方法定义的路由 `/clients` 被激活：
- en: Add the GET /clients route
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 GET /clients 路由
- en: '[PRE71]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The result is displayed in the following figure (*Figure 7.8*).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在以下图中（*图 7.8*）。
- en: Creating an external file to define route processing
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个外部文件来定义路由处理
- en: We use the same principle as that used for the `GET /` and `GET /users` routes
    defined in the `app.js` file. We create the `clients.js` file in the `routes`
    directory, which will be included in the `app.js` file by means of the statement
    `clientsRouter = require("./routes/clients)`. The route is defined in `app.js`
    with the statement `app.use("/clients", clientsRouter)`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用与 `app.js` 文件中定义的 `GET /` 和 `GET /users` 路由相同的原理。我们在 `routes` 目录中创建 `clients.js`
    文件，该文件将通过 `clientsRouter = require("./routes/clients")` 语句包含在 `app.js` 文件中。路由在
    `app.js` 中通过 `app.use("/clients", clientsRouter)` 语句定义。
- en: 'The `clients.js` file describing the processing performed on the route is as
    follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 描述在路由上执行的处理过程的 `clients.js` 文件如下：
- en: clients.js file (routes directory)
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`clients.js` 文件（路由目录）'
- en: '[PRE76]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: In both cases, the result is the same, as seen in the following figure.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，结果都是相同的，如以下图所示。
- en: '![Figure 7.8 – Displaying the GET /clients route'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.8 – 显示 GET /clients 路由'
- en: '](img/Figure_7.08_B17416.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.08_B17416.jpg)'
- en: Figure 7.8 – Displaying the GET /clients route
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – 显示 GET /clients 路由
- en: We studied the controller part of the MVC model using the route system defined
    in Express. Now let’s see how Express allows us to manage the view part of the
    MVC model.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Express中定义的路由系统研究了MVC模型中的控制器部分。现在让我们看看Express如何帮助我们管理MVC模型的视图部分。
- en: Displaying views with Express
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Express显示视图
- en: A view is an external file used to describe the display that you want to view.
    Specific syntaxes have been created to program the view, for example, JADE or
    EJS syntaxes.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是一个外部文件，用于描述你想要查看的显示。已经创建了特定的语法来编程视图，例如，JADE或EJS语法。
- en: The `res.render(name, obj)` method is used to display the `name` view using
    any properties provided in the `obj` object. The view is a file defined in the
    `views` directory using JADE syntax or another.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.render(name, obj)` 方法用于使用在 `obj` 对象中提供的任何属性显示名为 `name` 的视图。视图是一个使用JADE语法或其他语法定义在
    `views` 目录中的文件。'
- en: One of the features of Express is to allow you to create views using the desired
    syntax. The JADE syntax is offered as standard by Express, but other syntax support
    libraries can be added with `npm`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Express的一个特性是允许你使用所需的语法创建视图。JADE语法是Express作为标准提供的，但可以通过 `npm` 添加其他语法支持库。
- en: The JADE syntax is, therefore, the one used by default in Express. It makes
    it possible to replace HTML tags with their tag (for example `<h1>` simply becomes
    `h1`), and the indentation of tags in the code makes it possible to specify their
    nesting. It is also no longer necessary to close the tag previously opened because
    the indentation allows you to see the nesting of the tags.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，JADE语法是Express默认使用的语法。它使得可以用标签的名称替换HTML标签（例如 `<h1>` 简单地变为 `h1`），并且代码中标签的缩进使得可以指定它们的嵌套。也不再需要关闭之前打开的标签，因为缩进允许你看到标签的嵌套。
- en: Note
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Full JADE documentation can be found at [https://jade-lang.com/](https://jade-lang.com/).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的JADE文档可以在[https://jade-lang.com/](https://jade-lang.com/)找到。
- en: 'Let’s use JADE to display the previous client list. We create the `clients.jade`
    view in the `views` directory, and we indicate in `clients.js` that we display
    this view when accessing the `GET /clients` route:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用JADE来显示之前的客户列表。我们在 `views` 目录中创建 `clients.jade` 视图，并在 `clients.js` 中指示在访问
    `GET /clients` 路由时显示此视图：
- en: clients.js file (routes directory)
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: clients.js文件（路由目录）
- en: '[PRE82]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Note that if you do not indicate the file extension of the view (for example,
    by writing `res.render("clients")`), the extension used will be the one indicated
    in the instruction `app.set('view engine' , 'jade')` from `app.js`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果你没有指定视图文件的扩展名（例如，通过写入 `res.render("clients")`），将使用 `app.js` 指令中指定的扩展名 `app.set('view
    engine' , 'jade')`。
- en: 'If, on the other hand, you specify an extension to the view file, it will be
    the one used to display the view even if it is different from the one configured
    in `app.js`. The view `clients.jade` is as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果，另一方面，你指定了视图文件的扩展名，即使它与 `app.js` 中配置的不同，它也将用于显示视图。视图 `clients.jade` 如下所示：
- en: clients.jade file (views directory)
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: clients.jade文件（视图目录）
- en: '[PRE90]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Notice the indentation of the tags. The `ul` tag is at the same level as the
    `h1` tag, otherwise, it would be seen as included in the `h1` tag. The `li` tags
    are shifted to the right to show their inclusion in the preceding `ul` tag. The
    offset must be at least one character. Because of the offsets, we do not use a
    closing tag as in HTML.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 注意标签的缩进。`ul` 标签与 `h1` 标签处于同一级别，否则它会被视为 `h1` 标签的一部分。`li` 标签向右移动以显示它们属于前面的 `ul`
    标签。偏移量至少为字符数。由于偏移量，我们不使用HTML中的关闭标签。
- en: Let’s restart the server with `npm start` because one of the routing files has
    been modified.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其中一个路由文件已被修改，让我们使用 `npm start` 重启服务器。
- en: Note
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Editing files associated with views does not require a server restart, unlike
    the `app.js` file and files associated with routes (in the `routes` directory).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑与视图相关的文件不需要重启服务器，这与 `app.js` 文件和路由目录中的文件不同。
- en: 'Once the server restarts, let’s display the URL `http://localhost:3000` again:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器重启后，再次显示URL `http://localhost:3000`：
- en: '![Figure 7.9 – View displayed using JADE syntax'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.9 – 使用JADE语法显示的视图'
- en: '](img/Figure_7.09_B17416.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.09_B17416.jpg)'
- en: Figure 7.9 – View displayed using JADE syntax
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9 – 使用JADE语法显示的视图
- en: 'The list of clients is, in this example, entered directly into the JADE view.
    It is better to pass it as parameters using the second parameter of the `res.render(name,
    obj)` method. The `clients.js` file then becomes the following:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，客户列表直接输入到JADE视图中。更好的做法是使用`res.render(name, obj)`方法的第二个参数作为参数传递。然后`clients.js`文件变成以下内容：
- en: clients.js file (routes directory)
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: clients.js文件（路由目录）
- en: '[PRE95]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: The `obj` parameter of the `res.render("clients", obj)` method is an object
    containing the list of clients.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.render("clients", obj)`方法的`obj`参数是一个包含客户列表的对象。'
- en: 'The `clients.jade` view uses this passed object as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`clients.jade`视图使用传递的对象如下：'
- en: clients.jade file (views directory)
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: clients.jade文件（视图中目录）
- en: '[PRE107]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: The `obj` object passed in parameters is used in the JADE view, by using its
    `clients` property here.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 传入参数的`obj`对象在JADE视图中使用，这里通过其`clients`属性来使用。
- en: JADE Syntax
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: JADE语法
- en: JavaScript statements can be used in the JADE view by surrounding them with
    `#{` and `}`. Anything between these two markers will be considered JavaScript
    code.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在JADE视图中使用JavaScript语句，通过将它们包围在`#{`和`}`中来使用。这两个标记之间的一切都将被视为JavaScript代码。
- en: You can also use a syntax simplification allowed by JADE, by writing the `=`
    sign directly after each `li` tag. This means that everything following on the
    line must be interpreted in JavaScript. We can use this simplification of writing
    here.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用JADE允许的语法简化，通过在每个`li`标签后直接写上`=`符号。这意味着该行之后的所有内容都必须按JavaScript解释。我们可以在这里使用这种简化写法。
- en: 'Let’s write the `clients.jade` view as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式编写`clients.jade`视图：
- en: clients.jade file (views directory)
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: clients.jade文件（视图中目录）
- en: '[PRE112]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Rather than listing each element of the `clients` array in the view, you can
    also perform a loop using the `each` statement of the JADE syntax to iterate over
    a JavaScript array.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中列出`clients`数组的每个元素，你也可以使用JADE语法的`each`语句来遍历JavaScript数组执行循环。
- en: 'The `clients.jade` view therefore becomes the following:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`clients.jade`视图变成了以下内容：
- en: clients.jade file (views directory)
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: clients.jade文件（视图中目录）
- en: '[PRE117]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: The writing of the view is simplified, but you really have to take into account
    the indentations of the lines otherwise the view will not be displayed.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 视图的编写被简化了，但你需要真正注意行的缩进，否则视图将不会显示。
- en: '![Figure 7.10 – List of clients displayed by the each statement'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.10 – 由each语句显示的客户列表'
- en: '](img/Figure_7.10_B17416.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 7.10_B17416.jpg](img/Figure_7.10_B17416.jpg)'
- en: Figure 7.10 – List of clients displayed by the each statement
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 由each语句显示的客户列表
- en: We see in this example that the JADE syntax makes it easy to display lists of
    data in the views of the application.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们看到JADE语法使得在应用程序的视图中显示数据列表变得很容易。
- en: With this, we come to the end of this chapter.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们就到了本章的结尾。
- en: Summary
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The Express module makes it possible to structure your application efficiently
    by allowing (thanks to the MVC model it uses) you to separate the management of
    routes, the views displayed, and the management of data.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: Express模块通过允许（多亏了它使用的MVC模型）你分离路由管理、显示视图和数据管理，使得高效地构建应用程序成为可能。
- en: We have explained how to write the views of the application using the JADE syntax
    provided by default by Express. Other syntaxes, for example, the EJS syntax, are
    also available by downloading them via `npm`.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经解释了如何使用Express默认提供的JADE语法编写应用程序的视图。其他语法，例如EJS语法，也可以通过通过`npm`下载来获得。
- en: We have also seen the importance of the `app.js` file created by Express, and
    the use of HTTP requests such as **GET**, **POST**, **PUT**, and **DELETE**. We
    will see in [*Chapter 9*](B17416_09_ePub.xhtml#_idTextAnchor165), *Integrating
    Vue.js with Node.js*, the importance of these HTTP requests to build a MEVN application
    (short for MongoDB, Express, Vue.js, Node.js) that manipulates the MongoDB database.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了Express创建的`app.js`文件的重要性，以及HTTP请求如**GET**、**POST**、**PUT**和**DELETE**的使用。我们将在[*第9章*](B17416_09_ePub.xhtml#_idTextAnchor165)，*将Vue.js与Node.js集成*中看到这些HTTP请求在构建一个MEVN应用程序（代表MongoDB,
    Express, Vue.js, Node.js）中的重要性，该应用程序操作MongoDB数据库。
- en: Indeed, data management is often done using the **MongoDB** database, the use
    of which we will explore in the next chapter.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，数据管理通常使用**MongoDB**数据库来完成，我们将在下一章中探讨其使用。
