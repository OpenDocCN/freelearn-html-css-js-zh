- en: '*Chapter 7*: Using Express with Node.js'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw in the previous chapter that a program for the Node.js server is an assembly
    of different modules. Many modules have been created by Node.js developers, which
    can be inserted into our programs using the `npm` utility (see [*Chapter 6*](B17416_06_ePub.xhtml#_idTextAnchor123),
    *Creating and Using Node.js Modules*). One of these modules is called **Express**.
    It is one of the most used modules with Node.js because it allows you to structure
    server programs according to the **Model View Controller** (**MVC**) model.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll study how to create a Node.js application while respecting
    the characteristics of the MVC model by using the Express module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the topics we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Node.js `http` module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Express module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MVC pattern used by Express
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using routes with Express
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying views with Express
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js integrates into its internal modules the possibility to create a web
    server using the `http` module internal to Node.js. We first explain how to use
    this `http` module, and then we will see the contribution that the external Express
    module makes to more easily create a web application built according to the MVC
    model.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the code files for this chapter on GitHub at: [https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%207.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%207.zip).'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Node.js http module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `http` module is an internal Node.js module. It is, therefore, directly
    accessible in our programs using the `require("http")` instruction. With this
    module you can create a web server based on the HTTP protocol and thus display
    web pages in an internet browser.
  prefs: []
  type: TYPE_NORMAL
- en: For creating a web server based on HTTP, we use the `http.createServer(callback)`
    method of the `http` module. The callback function indicated as a parameter is
    of the form `callback(req, res)`, in which `req` corresponds to the request received,
    and `res` corresponds to the response to be sent to the browser. Depending on
    the request received, the corresponding response will be sent.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In the `req` parameter, there is, among other things, the URL of the request
    received, thus making it possible to return, via the `res` parameter, the correct
    response to the browser according to this request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see in the following program how to use the `createServer()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a web server using the http module (test.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `createServer()` method returns an object, here used through the variable
    named `server`, on which we indicate to wait for requests coming from port `3000`
    (the one indicated in the `server.listen(port)` method). This means that each
    time URLs of the form `http://localhost:3000` are accessed via the browser, the
    program previously launched (with the `node test.js` command) will be activated
    and will display the result in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The use of the `server.listen(port)` method is mandatory because it is not enough
    to create a server with the `http.createServer()` method. This server must also
    be listening (with `server.listen(port )`) to HTTP requests addressed to it by
    browsers connecting to this server (here using a URL such as `http://localhost:3000`).
    Port `3000` is used here, but another port number could be used (provided that
    this port is not already used by another server, which would cause an access conflict
    to know to which server the request on the port is addressed).
  prefs: []
  type: TYPE_NORMAL
- en: We send the response to the browser using `res.write(string)` instructions.
    You must finish sending the response with the `res.end()` instruction, which means
    that the browser has received all the elements to display (the server waits to
    receive the `res.end()` instruction to display all the elements sent).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `res.setHeader()` method is used to set HTTP header fields. Here, `"Content-type"`
    is set to the value `"text/html; charset=utf-8"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s launch the previous program by typing the command `node test.js`. The
    program displays a message, then waits for HTTP requests on port `3000`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – HTTP server waiting on port 3000'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.01_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – HTTP server waiting on port 3000
  prefs: []
  type: TYPE_NORMAL
- en: To test the program, display the URL beginning with `http://localhost:3000`
    in a browser. When an HTTP request uses port `3000` (the port on which the server
    is listening), the callback function indicated in the `createServer(callback)`
    method is activated and then the response is sent to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s type the URL `http://localhost:3000` in the browser (see the following
    figure):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Viewing URL http://localhost:3000 in the browser'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.02_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – Viewing URL http://localhost:3000 in the browser
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the URL specified in the browser ( which uses port `3000`), the
    display in the browser remains the same. For the display to be different for different
    URLs, it must be considered in the callback function by using the value of `req.url`,
    which contains the URL typed and returns different strings according to the request
    received.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Express module makes it easy to manage the different requests received
    and display different results depending on the URL entered.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Express module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the Express module is installed using npm, we type the `npm install express`
    command to install it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Installing the Express module with npm'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.03_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – Installing the Express module with npm
  prefs: []
  type: TYPE_NORMAL
- en: The Express module is now installed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A utility related to Express is also useful for creating the architecture of
    our web applications. This is the `"express-generator"` module (this module was
    previously included with Express but is now separate from it, hence it’s uploaded
    here).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s also install the `"express-generator"` module using the `npm install express-generator
    -g` command. We use the `-g` option so that the `express` command defined in this
    module is accessible from any directory.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Installing the "express-generator" module with npm'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.04_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Installing the “express-generator” module with npm
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can verify that the installation is correct by typing the command `express
    -h`. If the installation of the module is correct, help for the `express` command
    is displayed in the window (otherwise an error is displayed).
  prefs: []
  type: TYPE_NORMAL
- en: Once these two modules are installed, you can create a first web application
    based on Express.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, type the `express apptest` command to create the application named
    `apptest`. You should see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Creating the apptest application with Express'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.05_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – Creating the apptest application with Express
  prefs: []
  type: TYPE_NORMAL
- en: 'This command creates an `apptest` directory containing the basic files to run
    the application. You must then type the three commands indicated at the end of
    the display: `cd apptest`, `npm install`, and `npm start`.'
  prefs: []
  type: TYPE_NORMAL
- en: Once these commands are typed, open a browser and display the URL `http://localhost:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what you will see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Default app home page created with Express'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.06_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – Default app home page created with Express
  prefs: []
  type: TYPE_NORMAL
- en: If we look at the source files of the application created in the `apptest` directory,
    we see the `app.js` and `package.json` files, as well as the `bin`, `node_modules`,
    `public`, `routes`, and `views` directories. These directories are those that
    describe the MVC architecture used by Express, which we explain below.
  prefs: []
  type: TYPE_NORMAL
- en: The MVC pattern used by Express
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MVC model is an application architecture model allowing an application
    to be broken down into different parts: models, views, and the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: Models correspond to the data manipulated by the application. In general, this
    is data from databases. Node.js is closely tied to the MongoDB database, which
    is explored in the next chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Views correspond to the visualization of data, for example, input forms and
    displayed lists. Each display corresponds to a view that will be in the `views`
    directory of the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The controller allows navigation between the different views, depending on the
    data. For this, we use routes (in fact, URLs) that indicate the processing to
    be performed. The `routes` directory describes the routes used by the application
    (and the processing performed for each of them).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can therefore see that the MVC model makes it possible to separate the processing,
    the display, and the data. This split is widely used in web projects and is the
    one proposed by Express.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s first look at how routing works in Express. This corresponds to the controller
    part of the MVC model.
  prefs: []
  type: TYPE_NORMAL
- en: Using routes with Express
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Routes indicate the processing to be performed based on the requested URL. Compared
    to what we wrote when using the `http` module of Node.js with the `createServer(callback)`
    method, this consists of writing the content of the `callback(req, res)` function
    according to the `req` request received.
  prefs: []
  type: TYPE_NORMAL
- en: The routes are described in the `app.js` file, which is the main file created
    by Express. Let’s examine its content.
  prefs: []
  type: TYPE_NORMAL
- en: The initial content of the app.js file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand how routes work in Express, open the `app.js` file located in
    the main application directory, and you will see the content of this file, like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: app.js file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: This file describes how the application built with Express works. It uses the
    `app` variable, which is the return from the `express()` function call and symbolizes
    the application. On this `app` object, the `use()` method is used many times,
    which makes it possible to add processing to be performed for each request received
    on the server.
  prefs: []
  type: TYPE_NORMAL
- en: For example, `app.use(logger("dev"))` triggers the `logger()` function for each
    request received on the server. This is why the server console displays the URL
    that was requested in the browser during each request to the server.
  prefs: []
  type: TYPE_NORMAL
- en: By having displayed in the browser the URLs `http://localhost:3000` and `http://localhost:3000/users`,
    we obtain the following in the server console.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Display of URLs in the server console'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.07_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.7 – Display of URLs in the server console
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s look at the meaning of the lines displayed in the server console.
  prefs: []
  type: TYPE_NORMAL
- en: Different types of routes possible
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous figure, you’ll notice that the word `GET` is displayed in front
    of each URL: `GET /``, GET``/users`.'
  prefs: []
  type: TYPE_NORMAL
- en: The word `GET` means that the URL `/` or `/users` is accessed by an HTTP request
    of the `GET` type. The `GET` type is the one used when the accessed URL is displayed
    in the address bar of the browser, for example, when you type it directly or when
    you click on a link on a page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Other types of HTTP requests exist. They make it possible not to display the
    corresponding URL in the address bar of the browser, and thus to hide it from
    users. For example, if the URL for deleting records from the database was visible
    in the browser’s address bar, it would suffice to refresh the page to continue
    deleting records from the database. Hence the interest in other types of HTTP
    requests that allow the current URL to be hidden.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other types of HTTP requests (in addition to `GET`) are mainly `PUT`, `POST`,
    and `DELETE` type requests. These types of requests are used in programs to signify
    an action to be performed on one or more pieces of data (called resources):'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET` means reading a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST` means creating a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT` means updating a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE` means deleting a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although multiple types of HTTP requests exist, these are the main ones. They
    are used to manipulate resources, allowing them to be created (`POST`), updated
    (`PUT`), deleted (`DELETE`), and read (`GET`).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A route is the association of an HTTP request with a URL. For example, the `GET
    /users` route associates the `/users` URL with the `HTTP GET` request, while the
    `DELETE /users` route associates the same `/users` URL with the `HTTP DELETE`
    request. Although these routes use the same URL, they are different routes because
    the HTTP requests are different.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve seen the different types of HTTP requests used, let’s look at
    how Express uses them internally.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing routes defined in the app.js file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `app.use()` method is also used to define new routes, that is, to define
    the processing that will be performed for each new URL used (with the associated
    request type).
  prefs: []
  type: TYPE_NORMAL
- en: The `app.use(url, callback)` method is used to define the processing to be performed
    when the specified URL is activated. As the type of request is not indicated here,
    all types of requests will activate the treatment indicated in the callback function.
    To indicate the type of request, you must use methods similar to `app.use()`.
    These are the `app.get()`, `app.put()`, `app.post()`, and `app.delete()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The callback function of the form `callback(req, res, next)` returns the response
    to the browser. The `next()` parameter corresponds to a function to be called
    at the end of the callback if the processing must continue in the next callback
    function (if the processing to be performed is handled by multiple callback functions).
  prefs: []
  type: TYPE_NORMAL
- en: The routes already defined in `app.js` are `/` and `/users`, thus making it
    possible to run the processes associated with these routes. These routes are examples
    to show how to implement routes in the `app.js` file. The processing instructions
    are defined in the `indexRouter` and `usersRouter` functions. These functions
    are the variables used in return for the instructions `require('./routes/index')`
    and `require('./routes/users')`. The processing of routes is therefore done here
    in the `index.js` and `users.js` files defined in the `routes` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s open these two files and analyze their contents:'
  prefs: []
  type: TYPE_NORMAL
- en: index.js file (routes directory)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: users.js file (routes directory)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Each of these files uses the `router.get(url, callback)` method, meaning that
    the route is associated with the `/` (it will be concatenated with the URL given
    in the `app.js` file), followed by the callback function of the form `callback(req,
    res, next)`. The `next` parameter corresponds to a function to call if the processing
    must continue in the callback function that follows (if such a function exists,
    which is not the case here).
  prefs: []
  type: TYPE_NORMAL
- en: 'The processing performed in each of the callback functions consists of sending
    the response, which will be displayed in the browser. Here, we use the `res.send()`
    and `res.render()` methods, which allow the response to be sent:'
  prefs: []
  type: TYPE_NORMAL
- en: The `res.send()` method is similar to `res.end()` (defined in the `"http"` module
    of Node.js), but also allows you to indicate that you are using HTML and `res.send()`
    method must be made in the processing, otherwise, an error occurs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `res.render()` method allows an external file (called a view) to be displayed.
    Views are written in a special language that depends on the format of the view.
    By default, the views used by Express are JADE files, but it is possible to use
    other formats.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, the view displayed by the `res.render()` method corresponds to the `index.jade`
    file located in the `views` directory. Its contents are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: index.jade file (views directory)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: This file is written using a particular syntax, called JADE. The file will be
    transformed into HTML code by Express before being sent to the browser (which
    can only interpret HTML).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Express allows files associated with views to be written using a variety of
    syntaxes. The most common are **JADE** and **EJS**.
  prefs: []
  type: TYPE_NORMAL
- en: We will explore the JADE syntax in the *Displaying views with Express* section
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the `app.js` file allows you to configure the directory associated
    with the views and the syntax used in the views. Here are the corresponding instructions
    from the `app.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring views (app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: We have described the routes already listed in the `app.js` file. Let’s see
    how to create new routes in this file.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new route in the app.js file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding a new route in the `app.js` file can be done either by writing the processing
    directly in the `app.js` file or by creating an external file that will be in
    the `routes` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Any modification of the `app.js` file requires restarting the server by performing
    the `npm start` command; otherwise, the modifications are not taken into account.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at these two ways to create a new route.
  prefs: []
  type: TYPE_NORMAL
- en: Adding route processing directly in the app.js file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s add the `/clients` route activated following a `app.get()` method to
    define the route:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the GET /clients route
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: The result is displayed in the following figure (*Figure 7.8*).
  prefs: []
  type: TYPE_NORMAL
- en: Creating an external file to define route processing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We use the same principle as that used for the `GET /` and `GET /users` routes
    defined in the `app.js` file. We create the `clients.js` file in the `routes`
    directory, which will be included in the `app.js` file by means of the statement
    `clientsRouter = require("./routes/clients)`. The route is defined in `app.js`
    with the statement `app.use("/clients", clientsRouter)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `clients.js` file describing the processing performed on the route is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: clients.js file (routes directory)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: In both cases, the result is the same, as seen in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Displaying the GET /clients route'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.08_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.8 – Displaying the GET /clients route
  prefs: []
  type: TYPE_NORMAL
- en: We studied the controller part of the MVC model using the route system defined
    in Express. Now let’s see how Express allows us to manage the view part of the
    MVC model.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying views with Express
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A view is an external file used to describe the display that you want to view.
    Specific syntaxes have been created to program the view, for example, JADE or
    EJS syntaxes.
  prefs: []
  type: TYPE_NORMAL
- en: The `res.render(name, obj)` method is used to display the `name` view using
    any properties provided in the `obj` object. The view is a file defined in the
    `views` directory using JADE syntax or another.
  prefs: []
  type: TYPE_NORMAL
- en: One of the features of Express is to allow you to create views using the desired
    syntax. The JADE syntax is offered as standard by Express, but other syntax support
    libraries can be added with `npm`.
  prefs: []
  type: TYPE_NORMAL
- en: The JADE syntax is, therefore, the one used by default in Express. It makes
    it possible to replace HTML tags with their tag (for example `<h1>` simply becomes
    `h1`), and the indentation of tags in the code makes it possible to specify their
    nesting. It is also no longer necessary to close the tag previously opened because
    the indentation allows you to see the nesting of the tags.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Full JADE documentation can be found at [https://jade-lang.com/](https://jade-lang.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use JADE to display the previous client list. We create the `clients.jade`
    view in the `views` directory, and we indicate in `clients.js` that we display
    this view when accessing the `GET /clients` route:'
  prefs: []
  type: TYPE_NORMAL
- en: clients.js file (routes directory)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Note that if you do not indicate the file extension of the view (for example,
    by writing `res.render("clients")`), the extension used will be the one indicated
    in the instruction `app.set('view engine' , 'jade')` from `app.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If, on the other hand, you specify an extension to the view file, it will be
    the one used to display the view even if it is different from the one configured
    in `app.js`. The view `clients.jade` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: clients.jade file (views directory)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Notice the indentation of the tags. The `ul` tag is at the same level as the
    `h1` tag, otherwise, it would be seen as included in the `h1` tag. The `li` tags
    are shifted to the right to show their inclusion in the preceding `ul` tag. The
    offset must be at least one character. Because of the offsets, we do not use a
    closing tag as in HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s restart the server with `npm start` because one of the routing files has
    been modified.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Editing files associated with views does not require a server restart, unlike
    the `app.js` file and files associated with routes (in the `routes` directory).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the server restarts, let’s display the URL `http://localhost:3000` again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – View displayed using JADE syntax'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.09_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.9 – View displayed using JADE syntax
  prefs: []
  type: TYPE_NORMAL
- en: 'The list of clients is, in this example, entered directly into the JADE view.
    It is better to pass it as parameters using the second parameter of the `res.render(name,
    obj)` method. The `clients.js` file then becomes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: clients.js file (routes directory)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: The `obj` parameter of the `res.render("clients", obj)` method is an object
    containing the list of clients.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `clients.jade` view uses this passed object as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: clients.jade file (views directory)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: The `obj` object passed in parameters is used in the JADE view, by using its
    `clients` property here.
  prefs: []
  type: TYPE_NORMAL
- en: JADE Syntax
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript statements can be used in the JADE view by surrounding them with
    `#{` and `}`. Anything between these two markers will be considered JavaScript
    code.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use a syntax simplification allowed by JADE, by writing the `=`
    sign directly after each `li` tag. This means that everything following on the
    line must be interpreted in JavaScript. We can use this simplification of writing
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s write the `clients.jade` view as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: clients.jade file (views directory)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Rather than listing each element of the `clients` array in the view, you can
    also perform a loop using the `each` statement of the JADE syntax to iterate over
    a JavaScript array.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `clients.jade` view therefore becomes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: clients.jade file (views directory)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: The writing of the view is simplified, but you really have to take into account
    the indentations of the lines otherwise the view will not be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10 – List of clients displayed by the each statement'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.10_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.10 – List of clients displayed by the each statement
  prefs: []
  type: TYPE_NORMAL
- en: We see in this example that the JADE syntax makes it easy to display lists of
    data in the views of the application.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we come to the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Express module makes it possible to structure your application efficiently
    by allowing (thanks to the MVC model it uses) you to separate the management of
    routes, the views displayed, and the management of data.
  prefs: []
  type: TYPE_NORMAL
- en: We have explained how to write the views of the application using the JADE syntax
    provided by default by Express. Other syntaxes, for example, the EJS syntax, are
    also available by downloading them via `npm`.
  prefs: []
  type: TYPE_NORMAL
- en: We have also seen the importance of the `app.js` file created by Express, and
    the use of HTTP requests such as **GET**, **POST**, **PUT**, and **DELETE**. We
    will see in [*Chapter 9*](B17416_09_ePub.xhtml#_idTextAnchor165), *Integrating
    Vue.js with Node.js*, the importance of these HTTP requests to build a MEVN application
    (short for MongoDB, Express, Vue.js, Node.js) that manipulates the MongoDB database.
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, data management is often done using the **MongoDB** database, the use
    of which we will explore in the next chapter.
  prefs: []
  type: TYPE_NORMAL
