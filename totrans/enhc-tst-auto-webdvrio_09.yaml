- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: The Ancient Spell Book – Building the Page Object Model
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 古代咒语书 - 构建页面对象模型
- en: All frameworks have three to four abstraction layers. This might best be visualized
    as a book of ancient spells. The easiest incantations are at the beginning. These
    are building blocks for more complex and powerful enchantments in the middle.
    And the darkest secrets are always at the end of the cryptic grimoire. Similarly,
    there is the Test layer, which calls upon the methods referencing objects in the
    middle Page Object Class layer, which in turn utilizes helper wrappers and other
    functionality at the bottom-most Core layer. In a Cucumber framework, there is
    an additional abstraction layer from the Test Feature File layer to the step definitions
    to the Glue code to the core code layer. In this chapter, we focus on creating
    page elements and the methods used to perform actions on the page.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 所有框架都有三到四个抽象层。这最好被想象为一本古代咒语书。最简单的咒语在开头。这些是构建中间更复杂和强大的魔法的基础。而最黑暗的秘密总是隐藏在神秘的咒语书末尾。同样，有一个测试层，它调用中间页面对象类层中引用对象的方法，而这个类层又利用底层核心层中的辅助包装和其他功能。在Cucumber框架中，从测试功能文件层到步骤定义、到粘合代码再到核心代码层，还有一个额外的抽象层。在本章中，我们专注于创建页面元素和用于在页面上执行操作的这些方法。
- en: 'Before that, here''s a list of all the main topics we''ll be covering in the
    chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前，以下是本章我们将涵盖的所有主要主题列表：
- en: Understanding what page object model is
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解页面对象模型是什么
- en: Creating a page class for the tests
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为测试创建页面类
- en: Adding object selectors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加对象选择器
- en: The module.exports statement
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: module.exports语句
- en: Reducing code with common objects and methods
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过常用对象和方法减少代码
- en: POM using Klassi-js
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Klassi-js的POM
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All test examples can be found at this GitHub repository: [https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO](https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试示例都可以在这个GitHub仓库中找到：[https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO](https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO)
- en: What is Page Object Model?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是页面对象模型？
- en: '**Page Object Model** (**POM**) is a design pattern used in test automation
    to create a structured and maintainable framework for web application testing.
    It promotes the separation of test code from the implementation details of the
    web pages.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**页面对象模型**（**POM**）是一种在测试自动化中使用的模式，用于创建一个结构化和可维护的框架，用于Web应用程序测试。它促进了测试代码与网页实现细节的分离。'
- en: In POM, each web page is represented as a separate class, and the properties
    and behaviors of the page are encapsulated within that class. Test methods interact
    with the web pages using the methods provided by the page classes, rather than
    directly accessing the web elements or using low-level browser APIs.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在POM中，每个网页都表示为一个单独的类，页面的属性和行为封装在这个类中。测试方法通过页面类提供的方法与网页交互，而不是直接访问Web元素或使用低级浏览器API。
- en: POM can be implemented in Node.js using frameworks such as WebdriverIO or Klassi-js
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用WebdriverIO或Klassi-js等框架，可以在Node.js中实现POM
- en: What constitutes a good Page Object pattern?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么构成了一个好的页面对象模式？
- en: 'A good Page Object pattern in test automation is one that promotes the maintainability,
    reusability, and readability of the code. Some characteristics of a well-implemented
    Page Object pattern are:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试自动化中，一个好的页面对象模式是那种促进代码的可维护性、可重用性和可读性的模式。一个良好实现的页面对象模式的一些特征包括：
- en: '**Adheres to the Single Responsibility Principle (SRP)**: Each page class should
    have a single responsibility and represent a specific page or component of the
    application. This ensures that the code is well-organized and easy to maintain.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**遵循单一职责原则（SRP）**：每个页面类应该有一个单一职责，并代表应用程序的特定页面或组件。这确保了代码组织良好且易于维护。'
- en: '**Encapsulation**: The page class should encapsulate the details and behavior
    of the web page or component it represents. It should provide methods to interact
    with the page elements without exposing the underlying implementation details.
    This abstraction simplifies test code and makes it more readable.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**封装**：页面类应该封装它所代表的网页或组件的细节和行为。它应该提供方法来与页面元素交互，而不暴露底层实现细节。这种抽象简化了测试代码，并使其更易于阅读。'
- en: '**Modular and reusable**: Page classes should be modular and reusable across
    different tests and test suites. They should provide a consistent interface to
    interact with the page elements, allowing for easy reuse and reducing code duplication.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化和可重用**：页面类应模块化，并在不同的测试和测试套件中可重用。它们应提供一致的接口来与页面元素交互，从而便于重用并减少代码重复。'
- en: '**Adheres to separation of concerns (SoC)**: The Page Object pattern separates
    the test logic from the implementation details of the web pages. Test methods
    should utilize the methods provided by the page classes rather than directly interacting
    with the web elements or using low-level browser APIs. This separation improves
    code maintainability and makes it easier to update the tests when the application
    changes.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**遵循关注点分离（SoC）原则**：页面对象模式将测试逻辑与网页的实现细节分离。测试方法应利用页面类提供的方法，而不是直接与网页元素交互或使用低级浏览器
    API。这种分离提高了代码的可维护性，并使得在应用程序更改时更新测试变得更加容易。'
- en: '**Independent of test framework**: Page classes should be independent of the
    specific test framework being used. They should not have any dependency on the
    testing framework, such as assertions or test execution logic. This ensures that
    the page classes can be easily reused with different testing frameworks or tools.
    Take a look at the following example:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立于测试框架**：页面类应独立于所使用的特定测试框架。它们不应依赖于测试框架，例如断言或测试执行逻辑。这确保了页面类可以轻松地与不同的测试框架或工具一起重用。请看以下示例：'
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Clear naming conventions**: Page classes, methods, and variables should have
    meaningful and descriptive names that accurately represent their purpose and functionality.
    This helps improve code readability and understanding:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清晰的命名约定**：页面类、方法和变量应具有有意义的描述性名称，准确反映其目的和功能。这有助于提高代码的可读性和理解性：'
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Undergoes regular maintenance**: Page classes should be regularly maintained
    and updated as the application evolves. They should be kept in sync with the changes
    in the application’s UI and functionality. Regularly reviewing and updating page
    classes helps ensure their accuracy and reliability.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定期维护**：页面类应随着应用程序的发展而定期维护和更新。它们应与应用程序 UI 和功能的变化保持同步。定期审查和更新页面类有助于确保其准确性和可靠性。'
- en: Creating a page class for the tests
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为测试创建页面类
- en: We have created a `LoginPage` class that represents a specific page of the web
    application. The web element selectors are defined as getters using the `$` function
    from WebdriverIO, which allows us to locate elements on the page using CSS selectors.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已创建一个 `LoginPage` 类，代表网络应用程序的特定页面。网页元素选择器定义为使用 WebdriverIO 的 `$` 函数作为获取器，这允许我们使用
    CSS 选择器在页面上定位元素。
- en: The class also includes page methods such as `enterUsername`, `enterPassword`,
    and `clickLoginButton`. These methods encapsulate actions that can be performed
    on the page, such as entering text into input fields and clicking buttons.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 该类还包括页面方法，如 `enterUsername`、`enterPassword` 和 `clickLoginButton`。这些方法封装了可以在页面上执行的操作，例如在输入字段中输入文本和点击按钮。
- en: 'The `mkdir` command in Linux/Unix allows users to create or make new directories.
    `mkdir` stands for “make directory”:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Linux/Unix 中的 `mkdir` 命令允许用户创建或新建目录。`mkdir` 代表“创建目录”：
- en: 'Go to your `mkdir` command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 转到你的 `mkdir` 命令：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Adding object selectors
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加对象选择器
- en: The `TestClass` test class utilizes the exported instances of the page classes.
    In the test case, we interact with the web pages using the methods defined in
    the page objects.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestClass` 测试类利用了页面类的导出实例。在测试用例中，我们通过页面对象中定义的方法与网页进行交互。'
- en: // LoginPage.ts
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: // LoginPage.ts
- en: '`LoginPage`: This class encapsulates the properties and behaviors of it respective
    web pages:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoginPage`：此类封装了相应网页的属性和行为：'
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: // HomePage.ts
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: // HomePage.ts
- en: '`HomePage`: This class encapsulates the properties and behaviors of their respective
    web pages:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`HomePage`：此类封装了相应网页的属性和行为：'
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: module.exports = new HomePage();Calling methods to be used in the test
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`module.exports = new HomePage();` 调用测试中要使用的方法'
- en: 'The `module.exports` statement is used to export an instance of each page class
    as a module:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `module.exports` 语句导出每个页面类的实例作为一个模块：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: // TestName.ts
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: // TestName.ts
- en: 'The `TestName` test file utilizes the exported instances of the page classes.
    In this example test case, we interact with the LoginPage and the HomePage web
    pages using the methods and objects defined in the respective page classes:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestName`测试文件利用页面类的导出实例。在这个示例测试用例中，我们使用在相应页面类中定义的方法和对象与LoginPage和HomePage网页进行交互：'
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Reducing code with common objects and methods
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用常见对象和方法减少代码
- en: 'Reducing code duplication and improving maintainability can be achieved by
    leveraging common objects and methods in your Page Object pattern. Some strategies
    to achieve code reduction are set out here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用页面对象模式中的常见对象和方法，可以减少代码重复并提高可维护性。以下是一些实现代码减少的策略：
- en: '**Base page class**: Create a base page class that contains common objects
    and methods shared across multiple pages. This base class can encapsulate elements
    and behaviors that are common to multiple pages, such as a **Home** button, **Halloween
    Party** button, and then a **Find My Candy!** button, to reduce duplication:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础页面类**: 创建一个包含多个页面共享的常见对象和方法的基页面类。这个基类可以封装多个页面共有的元素和行为，例如一个**主页**按钮、一个**万圣节派对**按钮，然后是一个**寻找我的糖果！**按钮，以减少重复：'
- en: '![Figure 9.1 – Header of CandyMapper party page website with links common to
    all pages](img/B19395_09_1.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 – CandyMapper派对页面网站头部，包含所有页面共有的链接](img/B19395_09_1.jpg)'
- en: Figure 9.1 – Header of CandyMapper party page website with links common to all
    pages
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – CandyMapper派对页面网站头部，包含所有页面共有的链接
- en: These elements appear in the header of every page of the website. So, it makes
    sense to declare them in the top-level page class and extend it to all other pages.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这些元素出现在网站每个页面的头部。因此，在顶级页面类中声明它们并将其扩展到所有其他页面是有意义的。
- en: '![Figure 9.2 – Header page of the Candymapper landing page with three  common
    links](img/B19395_09_2.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2 – Candymapper着陆页面头部，包含三个常见链接](img/B19395_09_2.jpg)'
- en: Figure 9.2 – Header page of the Candymapper landing page with three common links
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – Candymapper着陆页面头部，包含三个常见链接
- en: 'If the selectors were in every page class, there would be an increasing level
    of maintenance over time. So, we will create selectors in the common page class
    like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择器在每个页面类中，随着时间的推移，维护级别将会增加。因此，我们将创建选择器在公共页面类中，如下所示：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Figure 9.3 – Highlight of HOME link from the link selector](img/B19395_09_3.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图9.3 – 链接选择器中突出显示的HOME链接](img/B19395_09_3.jpg)'
- en: Figure 9.3 – Highlight of HOME link from the link selector
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – 链接选择器中突出显示的HOME链接
- en: 'Let’s take a moment to look at these three examples as some changes could be
    made. These selectors match buttons in the header and the footer of the page.
    We could lock into just the first element match like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间看看这三个例子，因为可能需要进行一些更改。这些选择器匹配页面头部和底部的按钮。我们可以锁定到第一个元素匹配，如下所示：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Figure 9.4 – Locator identified for first Halloween Party link](img/B19395_09_4.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4 – 为第一个万圣节派对链接识别的定位器](img/B19395_09_4.jpg)'
- en: Figure 9.4 – Locator identified for first Halloween Party link
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – 为第一个万圣节派对链接识别的定位器
- en: 'Since these elements are common to all our pages, it would make sense to create
    a common base `Page` class and store all of them there:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些元素在所有我们的页面中都是通用的，因此创建一个通用的基`Page`类并将它们全部存储在那里是有意义的：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Other page classes can now inherit from this base `Page` class all its common
    objects and functionality. We can use the `extends` keyword to add these object
    to any `Page` class:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 其他页面类现在可以继承这个基`Page`类及其所有常见对象和功能。我们可以使用`extends`关键字将这些对象添加到任何`Page`类中：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Last, we use the `super` keyword to reference objects and methods in the common
    parent class to reduce repeated code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`super`关键字来引用公共父类中的对象和方法，以减少重复代码。
- en: 'If we find only the case of the text of common elements is different from page
    to page or is frequently changing release to release , we can use this next approach
    to reduce maintenance. Consider the ''FIND MY CANDY'' link element below:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们发现常见元素的文本在不同页面之间或在不同版本中频繁变化，我们可以使用以下方法来减少维护。考虑下面的‘FIND MY CANDY’链接元素：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Figure 9.5 – Case insensitive match Locator for Find my candy! link](img/B19395_09_5.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5 – 对“寻找我的糖果！”链接的忽略大小写匹配定位器](img/B19395_09_5.jpg)'
- en: Figure 9.5 – Case insensitive match Locator for Find my candy! link
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – 对“寻找我的糖果！”链接的忽略大小写匹配定位器
- en: This is done via the display or visibility property of the element style. There
    is a single trick to find only elements that are visible. Ultimately, a collection
    of elements could be returned and each check for immediate visibility.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过元素的样式显示或可见性属性来完成的。有一个技巧可以找到仅可见的元素。最终，可以返回一个元素集合，并对每个元素进行立即可见性的检查。
- en: Other page classes can be inherited from this base class and inherit its common
    functionality.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 其他页面类可以继承这个基类并继承其通用功能。
- en: '**Page components**: Identify common components or sections within your application’s
    pages that are repeated across multiple pages. Create separate page component
    classes to represent these reusable components. Then, include these components
    within your page classes to reuse the common functionality and reduce code duplication.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面组件**：识别应用程序页面中重复出现在多个页面上的常见组件或部分。创建单独的页面组件类来表示这些可重用组件。然后，将这些组件包含在页面类中以重用通用功能并减少代码重复。'
- en: '**Helper methods**: Identify common operations or actions performed across
    multiple pages, such as logging in, navigating between pages, or handling popups.
    Extract these operations into helper methods that can be called from different
    page classes. This centralizes the implementation and avoids duplicating the code
    for these common actions.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**辅助方法**：识别在多个页面中执行的操作或动作，例如登录、在页面之间导航或处理弹出窗口。将这些操作提取到可以从不同的页面类中调用的辅助方法中。这集中了实现并避免了为这些常见动作重复编写代码。'
- en: '**Parameterization**: If you have similar elements or actions that vary based
    on input parameters, you can create parameterized methods in your page classes.
    These methods can accept parameters and perform the desired actions based on the
    provided input, reducing the need for separate methods for similar functionality.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数化**：如果您有基于输入参数而变化的类似元素或动作，您可以在页面类中创建参数化方法。这些方法可以接受参数并根据提供的输入执行所需动作，从而减少为类似功能创建单独方法的需求。'
- en: '**External configuration**: Move configurable values such as URLs, timeouts,
    or test data into external configuration files. This allows you to centralize
    and reuse the configuration across multiple tests and pages, reducing the need
    for hardcoding values in individual page classes.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部配置**：将可配置的值，如URL、超时或测试数据，移动到外部配置文件中。这允许您在多个测试和页面之间集中和重用配置，减少在单个页面类中硬编码值的需求。'
- en: '**Maintainable selectors:** Use a reliable and maintainable way to locate elements
    on the page, such as CSS selectors or XPath expressions. Avoid using hardcoded
    selectors in your test methods. Instead, define selectors as properties within
    your page classes, making it easier to update them if the UI changes.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可维护的选择器**：使用可靠且可维护的方式来定位页面上的元素，例如CSS选择器或XPath表达式。避免在测试方法中使用硬编码的选择器。相反，将选择器定义为页面类中的属性，这样在UI发生变化时更容易更新它们。'
- en: POM using Klassi-js
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Klassi-js的POM
- en: Klassi-js is a robust and versatile **behavior-driven development** (**BDD**)
    JavaScript test automation framework that empowers developers and QA professionals
    to create and execute comprehensive tests for web and mobile applications. At
    its core, Klassi-js leverages the power of WebdriverIO, which is a cutting-edge
    automation framework for Node.js. This foundation allows Klassi-js to seamlessly
    interact with web browsers and mobile devices, making it an excellent choice for
    cross-browser and cross-platform testing.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Klassi-js是一个强大且灵活的**行为驱动开发**（**BDD**）JavaScript测试自动化框架，它赋予开发人员和QA专业人员创建和执行针对Web和移动应用程序的全面测试的能力。在其核心，Klassi-js利用了WebdriverIO的力量，这是一个Node.js的尖端自动化框架。这个基础使得Klassi-js能够无缝地与Web浏览器和移动设备交互，使其成为跨浏览器和跨平台测试的绝佳选择。
- en: One of Klassi-js’s standout features is its seamless integration with cucumber.js,
    a popular BDD testing tool. This integration allows for the creation of human-readable,
    expressive test scenarios that foster better collaboration between developers,
    testers, and other stakeholders. It promotes a common language for discussing
    application behavior and helps in building more reliable tests.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Klassi-js的一个突出特点是它与cucumber.js的无缝集成，cucumber.js是一个流行的BDD测试工具。这种集成允许创建人类可读的、富有表现力的测试场景，这有助于促进开发人员、测试人员和其他利益相关者之间的更好协作。它推广了一种共同的语言来讨论应用程序的行为，并有助于构建更可靠的测试。
- en: Klassi-js goes a step further by offering integrated visual, accessibility,
    and API testing capabilities, ensuring that your application not only works but
    is also user-friendly, compliant with accessibility standards, and delivers the
    expected API responses. Moreover, Klassi-js provides the flexibility to run tests
    locally or harness the power of cloud-based testing platforms such as LambdaTest,
    BrowserStack, or Sauce Labs, allowing for scalable and efficient testing across
    various environments.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: POM is a design pattern for organizing your UI automation code to make it more
    maintainable and readable. When using Klassi-js with Cucumber, you can implement
    the POM design pattern as follows.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Project structure
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, organize your project structure to separate different concerns. A common
    structure might look like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s break this down:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '`features`: Stores your Cucumber feature files'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`step-definitions`: Stores your Cucumber step definitions'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pages`: Stores your page objects'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cucumber feature files
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create Cucumber feature files in the features directory of your project. These
    feature files describe the behavior of your application in plain text. For example,
    you can create a `login.feature` file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Page objects
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a page object for each web page or component you want to interact with.
    Here’s an example, `login.page.ts`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Cucumber step definitions
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your step definitions, use page objects to interact with web elements. Here’s
    an example, `login.steps.ts`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Running tests
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can run your Cucumber tests as usual with Klassi-js. Use a command such
    as this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Klassi-js will automatically discover your Cucumber feature files and execute
    the corresponding step definitions.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: With this structure, your UI automation code becomes more modular and easier
    to maintain. Each page object encapsulates the functionality and interactions
    with a specific page or component, making it easier to update and manage your
    tests.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following the aforementioned principles, you can create a Page Object pattern
    akin to the meticulous planning of a superhero, ensuring your code becomes more
    maintainable, reusable, and readable. Just as a superhero fine-tunes their abilities
    to be more effective, by adhering to these strategies, you can reduce code duplication
    and enhance maintainability in your Page Object pattern. Reusing common objects,
    methods, and components across pages is like harnessing the compartments of a
    superhero's utility belt, streamlining your code and ensuring that modifications
    are easy to implement and maintain.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue to amplify our framework's prowess by
    leveraging system variables and dynamic configurations, much like a superhero
    adapts to different environments, to seamlessly switch between dev and stage landing
    pages.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
