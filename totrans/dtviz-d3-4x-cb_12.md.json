["```js\n{ \n  \"type\":\"FeatureCollection\", \n  \"features\":[{ \n    \"type\":\"Feature\", \n    \"id\":\"01\", \n    \"properties\":{\"name\":\"AL\"}, \n    \"geometry\":{ \n      \"type\":\"Polygon\", \n      \"coordinates\":[[ \n        [-87.359296,35.00118], \n        [-85.606675,34.984749], \n        [-85.431413,34.124869], \n        [-85.184951,32.859696], \n        ... \n        [-88.202745,34.995703], \n        [-87.359296,35.00118] \n      ]] \n  }] \n} \n\n```", "```js\n<script type=\"text/javascript\"> \n    var width = 960, \n            height = 500; \n\n    var projection = d3.geoAlbersUsa(); \n\n    var path = d3.geoPath() \n            .projection(projection); \n\n    var svg = d3.select(\"body\").append(\"svg\") \n            .attr(\"width\", width) \n            .attr(\"height\", height); \n\n    var g = svg.append('g') \n            .call(d3.zoom() \n                    .scaleExtent([1, 10]) \n                    .on(\"zoom\", zoomHandler)); \n\n    d3.json(\"../../data/us.json\", function (error, us) { // <- A \n        g.insert(\"path\") \n                .datum(topojson.feature(us, us.objects.land)) \n                .attr(\"class\", \"land\") \n                .attr(\"d\", path); \n\n        g.selectAll(\"path.state\") \n                    .data(topojson.feature(us,  \n                          us.objects.states).features) \n                .enter() \n                    .append(\"path\") \n                    .attr(\"class\", \"state\") \n                    .attr(\"d\", path); \n    }); \n\n    function zoomHandler() { \n        var transform = d3.event.transform; \n\n        g.attr(\"transform\", \"translate(\" \n                + transform.x + \",\" + transform.y \n                + \")scale(\" + transform.k + \")\"); \n    } \n</script> \n\n```", "```js\nvar path = d3.geoPath() // <- A \n            .projection(d3.geoAlbersUsa()); \n... \ng.insert(\"path\") // <-B \n                .datum(topojson.feature(us, us.objects.land)) \n                .attr(\"class\", \"land\") \n                .attr(\"d\", path); \n\n        g.selectAll(\"path.state\")                        \n                 .data(topojson.feature(us, \n                      us.objects.states).features) // <-C \n                .enter() \n                    .append(\"path\") \n                    .attr(\"class\", \"state\") \n                    .attr(\"d\", path); \n\n```", "```js\nvar g = svg.append('g') \n            .call(d3.zoom() \n                    .scaleExtent([1, 10]) \n                    .on(\"zoom\", zoomHandler)); \n\n```", "```js\n<script type=\"text/javascript\"> \n    var width = 300, \n        height = 300, \n        translate = [width / 2, height / 2]; \n\n    var projections = [ // <-A \n        {name: 'geoAzimuthalEqualArea', fn: d3.geoAzimuthalEqualArea() \n                .scale(50) \n                .translate(translate)}, \n        {name: 'geoConicEquidistant', fn: d3.geoConicEquidistant() \n                .scale(35) \n                .translate(translate)}, \n        {name: 'geoEquirectangular', fn: d3.geoEquirectangular() \n                .scale(50) \n                .translate(translate)}, \n        {name: 'geoMercator', fn: d3.geoMercator() \n                .scale(50) \n                .translate(translate)}, \n        {name: 'geoOrthographic', fn: d3.geoOrthographic() \n                        .scale(90) \n                        .translate(translate)}, \n        {name: 'geoStereographic', fn: d3.geoStereographic() \n                                .scale(35) \n                                .translate(translate)} \n    ]; \n\nd3.json(\"../../data/world-50m.json\",  \n           function (error, world) { // <-B \n        projections.forEach(function (projection) { \n            var path = d3.geoPath() // <-C \n                    .projection(projection.fn); \n\n            var div = d3.select(\"body\") \n                    .append(\"div\") \n                    .attr(\"class\", \"map\"); \n\n            var svg = div \n                    .append(\"svg\") \n                    .attr(\"width\", width) \n                    .attr(\"height\", height); \n\n            svg.append(\"path\") // <-D \n                    .datum(topojson.feature(world,  \n                             world.objects.land)) \n                    .attr(\"class\", \"land\") \n                    .attr(\"d\", path); \n\n            svg.append(\"path\") // <-E \n                    .datum(topojson.mesh(world,  \n                             world.objects.countries)) \n                    .attr(\"class\", \"boundary\") \n                    .attr(\"d\", path); \n\n            div.append(\"h3\").text(projection.name); \n        }); \n    }); \n</script> \n\n```", "```js\n<script type=\"text/javascript\"> \n    var width = 960, \n            height = 500; \n\n    var color = d3.scaleThreshold() \n            .domain([.02, .04, .06, .08, .10]) // <-A \n            .range([\"#f2f0f7\", \"#dadaeb\", \"#bcbddc\", \n                    \"#9e9ac8\", \"#756bb1\", \"#54278f\"]); \n\n    var projection = d3.geoAlbersUsa(); \n\n    var path = d3.geoPath() \n            .projection(projection); \n\n    var svg = d3.select(\"body\").append(\"svg\") \n            .attr(\"width\", width) \n            .attr(\"height\", height); \n\n    var g = svg.append(\"g\") \n            .call(d3.zoom() \n            .scaleExtent([1, 10]) \n            .on(\"zoom\", zoomHandler)); \n\n    d3.json(\"../../data/us.json\", function (error, us) { // <-B \n        d3.tsv(\"../../data/unemployment.tsv\", \n                function (error, unemployment) { \n            var rateById = {}; \n\n            unemployment.forEach(function (d) { // <-C \n                rateById[d.id] = +d.rate; \n            }); \n\n            g.append(\"g\") \n                    .attr(\"class\", \"counties\") \n                    .selectAll(\"path\") \n                    .data(topojson.feature(us, \n                            us.objects.counties).features) \n                    .enter().append(\"path\") \n                    .attr(\"d\", path) \n                    .style(\"fill\", function (d) { \n                        return color(rateById[d.id]); // <-D \n                    }); \n\n            g.append(\"path\") \n                    .datum(topojson.mesh(us, // <-E \n                            us.objects.states, \n                             function(a, b) {  \n                                 return a !== b;  \n                     }))  \n                    .attr(\"class\", \"states\") \n                    .attr(\"d\", path); \n        }); \n    }); \n\n    function zoomHandler() { \n        var transform = d3.event.transform; \n\n        g.attr(\"transform\", \"translate(\" \n                + transform.x + \",\" + transform.y \n                + \")scale(\" + transform.k + \")\"); \n    } \n</script> \n\n```"]