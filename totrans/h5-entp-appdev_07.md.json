["```js\n$(\"#movies-near-me li\").click(function(){\n  $(this).toggleClass(\"open\")\n});\n```", "```js\n.details-button,.charting-button{\n  width:45px;\n  height:45px;\n  cursor:pointer;\n  position:absolute;\n  bottom:10px;\n  right:0;\n  background:none;\n  border:none;\n  background-image:url(../img/options.png)\n}\n```", "```js\n.details-button{\n  right:45px;\n}\n```", "```js\n.charting-button{\n  background-position:-45px 0;\n}\n```", "```js\n<input type=\"button\" class=\"charting-button\" />\n<input type=\"button\" class=\"details-button\" />\n```", "```js\n<section class=\"charting\">\n  <h3 itemprop=\"name\">movie.title</h3>\n  <p><canvas data-feed= \"MetaCritic:movie.avgMetaCriticRating,EditorBoost:movie.editorBoost,User Rating:movie.avgUserRating\"></canvas></p>\n</section>\n```", "```js\nfor (var item in movies.items) {\n  movie = movies.items[item];\n  var movieDesc=(movie.synopsis &&movie.synopsis.length>200)?movie.synopsis.substr(0,200)+\"...\": movie.synopsis;\n  var movieHTML='<li itemscope itemtype=\"http://schema.org/Movie\">';\n  movieHTML+='<img src=\"img/'+movie.poster+'\" alt=\"'+movie.title+'\" width=\"120\" />';\n  movieHTML+='<section class=\"main-info\">';\n  movieHTML+='<input type=\"button\" class=\"charting-button\" />';\n  movieHTML+='<input type=\"button\" class=\"details-button\" />';\n  movieHTML+='<h3 itemprop=\"name\">'+movie.title+'</h3>';\n  movieHTML+='<p class=\"details genre\" itemprop=\"genre\">'+Array(movie.genre).join(', ')+'</p>';\n  movieHTML+='<p class=\"details\">'+movie.mpaaRating+'</p>';\n  movieHTML+='<p class=\"theater\">'+movie.theater.title+\" \"+movie.theater.address+'</p>';\n  movieHTML+='<p class=\"actors\">'+Array(movie.selectedStar).join(', ')+'</p>';\n  movieHTML+='</section>';\n  movieHTML+='<section class=\"description\">';\n  movieHTML+='<h3 itemprop=\"name\">'+movie.title+'</h3>';\n  movieHTML+='<p>'+movieDesc+'</p>';\n  movieHTML+='</section>';\n  movieHTML+='<section class=\"charting\">';\n  movieHTML+='<h3 itemprop=\"name\">'+movie.title+'</h3>';\n  movieHTML+='<p><canvas data-feed= \"MetaCritic:'+movie.avgMetaCriticRating+\",EditorBoost:\"+movie.editorBoost+\",User Rating:\"+movie.avgUserRating+'\"></canvas></p>';\n  movieHTML+='</section>';\n  movieHTML+='</li>';\n  html+=movieHTML;\n}\n```", "```js\n.charting canvas{\n  margin-top:10px;\n}\n```", "```js\n#movies-near-me li.desc section.description, #movies-near-me li section.charting{\n  display:block;\n}\n#movies-near-me li section.description, #movies-near-me li.desc section.charting{\n  display:none;\n}\n```", "```js\n$(event.target)\n  .parent()\n  .parent()\n  .removeClass(\"desc\")\n  .addClass(\"open\")\n  .find(\"canvas\")[0];\n```", "```js\nthis.showCharts = function(event) {\n  that.charts(\n    $(event.target)\n      .parent()\n      .parent()\n      .removeClass(\"desc\")\n      .addClass(\"open\")\n      .find(\"canvas\")[0]\n  );\n};\n```", "```js\nthis.showDetails = function(event) {\n  $(event.target)\n    .parent()\n    .parent()\n    .addClass(\"desc\")\n    .addClass(\"open\");\n};\n```", "```js\n$(\"#movies-near-me li .details-button\").click(that.showDetails);\n$(\"#movies-near-me li .description, #movies-near-me li .charting\").click(function(){\n  $(this)\n    .parent()\n    .removeClass(\"open\")\n});\t\n$(\"#movies-near-me li .charting-button\").click(that.showCharts);\n```", "```js\nvar movienow = movienow || {};\nmovienow.charts = (function(){\n  var that = this;\n  this.charts = function(canvas){\n    that.drawBarChart(canvas);\n  };\n  this.drawBarChart = function(canvas) {\n  }\n})();\n```", "```js\n<script src=\"img/ios-orientationchange-fix.js\"></script>\n<script src=\"img/jquery-1.8.0.min.js\"></script>\n<script src=\"img/jquery.xdomainajax.js\"></script>\n<script src=\"img/movienow.charts.js\"></script>\n<script src=\"img/movienow.geolocation.js\"></script>\n<script src=\"img/movienow.js\"></script>\n```", "```js\nvar context=chart.getContext(\"2D\");\n```", "```js\ncontext.fillStyle=\"#FF0000\";\n```", "```js\ncontext.fillRect(0,0,20,20);\n```", "```js\nvar context=chart.getContext(\"webgl\");\n```", "```js\nvar context=chart.getContext(\"experimental-webgl\");\n```", "```js\nvar myCanvas=$(canvas);\n```", "```js\nif(!myCanvas.hasClass(\"painted\")){\n  //DRAW HERE\n  myCanvas.addClass(\"painted\");\n}\n```", "```js\nvar values=myCanvas.attr(\"data-feed\").split(\",\");\n```", "```js\nvar context=canvas.getContext(\"2d\");\n```", "```js\ncontext.font = \"bold 14px sans-serif\";\nvar index=0;\n```", "```js\nfor(var i=0; i<values.length; i++){\n      var info=values[i].split(\":\");\n      var val=info[1];\n}\n```", "```js\n        var pos=index*36;\n        context.fillStyle=\"#292929\";\n        context.fillRect(0,pos,290,26);\n```", "```js\nthis.getChartColor = function(val){\n  var result=\"\";\n  if(val<40){\n    result=\"#FF0066\";\n  }else{\n    if(val<80){\n      result=\"#FFCC33\";\n    }else{\n      result=\"#66CC33\";\n    }\n  }\n  return result;\n};\n```", "```js\ncontext.fillStyle=that.getChartColor(val);\ncontext.fillRect(0,pos,val*2.9,26);\n```", "```js\ncontext.fillStyle = \"rgba(255, 255, 255, .9)\";\ncontext.fillText(info[0]+\" \"+val+\"%\", 10, pos+18);\nindex++;\n```", "```js\n    if(index==0){\n   context.fillStyle = \"#FFFFFF\";\n      context.fillText(\"No Data Available\", 40, 50);\n    }\n```", "```js\nthis.drawBarChart = function(canvas) {\n  var myCanvas=$(canvas);\n  if(!myCanvas.hasClass(\"painted\")){\n    var values=myCanvas.attr(\"data-feed\").split(\",\");\n    var context=canvas.getContext(\"2d\");\n    context.font = \"bold 14px sans-serif\";\n    var index=0;\n    for(var i=0; i<values.length; i++){\n      var info=values[i].split(\":\");\n      var val=info[1];\n      if(val>0){\n        var pos=index*36;\n        context.fillStyle=\"#292929\";\n        context.fillRect(0,pos,290,26);\n        context.fillStyle=that.getChartColor(val);\n        context.fillRect(0,pos,val*2.9,26);\n        context.fillStyle = \"rgba(255, 255, 255, .9)\";\n        context.fillText(info[0]+\" \"+val+\"%\", 10, pos+18);\n        index++;\n      }\n    }\n    if(index==0){\n   context.fillStyle = \"#FFFFFF\";\n      context.fillText(\"No Data Available\", 40, 50);\n    }\n    myCanvas.addClass(\"painted\");\n  }\n};\n```", "```js\ncontext.clearRect(0, 0, canvas.width, canvas.height);\n```", "```js\nOrthographicCamera(left, right, top, bottom, near, far)\n```", "```js\nPerspectiveCamera(fov, aspect, near, far)\n```", "```js\n<script src=\"img/ios-orientationchange-fix.js\"></script>        \n<script src=\"img/jquery-1.8.0.min.js\"></script>        \n<script src=\"img/jquery.xdomainajax.js\"></script>        \n<script src=\"img/three.js\"></script>\n<script src=\"img/movienow.charts.js\"></script>       \n<script src=\"img/movienow.geolocation.js\"></script>        \n<script src=\"img/movienow.js\"></script> \n```", "```js\nthis.charts = function(canvas, type){\n switch(type){\n case \"3DChart\":\n that.draw3DChart(canvas);\n break;\n case \"barChart\":\n default:\n      that.drawBarChart(canvas);\n      break;\n }\n};\n```", "```js\nthis.showCharts = function(event) {  \nthat.charts($(event.target).parent().parent().removeClass(\"desc\").addClass(\"open\").find(\"canvas\")[0], \"3DChart\");\n};\n```", "```js\nthis.draw3DChart = function(canvas) {\n}\n```", "```js\nthis.draw3DChart = function(canvas) {\n  var myCanvas=$(canvas);\n  var myCanvasParent=myCanvas.parent();\n  if(!myCanvas.hasClass(\"painted\")){\n    var webGlSupport=false;\n    try {\n      /*** VERIFICATION OF WEBGL SUPPORT ***/\n      webGlSupport = !!window.WebGLRenderingContext && !!document.createElement('canvas').getContext('experimental-webgl');\n    }catch(e){}\n    if (webGlSupport){\n    //DRAW 3D HERE\n    }else{\n      /** IF NOT WEBGL SUPPORT RENDERS CHART IN 2D ***/\n      that.drawBarChart(canvas);\n    }\n  }\n};\n```", "```js\nvar data=myCanvas.attr(\"data-feed\");\nvar values=data.split(\",\");\nvar w = myCanvas.width();\nvar h = myCanvas.height();\nvar lastTime = 0;\n```", "```js\nvar renderer = new THREE.WebGLRenderer();\nrenderer.setSize(w, h);\n```", "```js\nvar newCanvas=$(renderer.domElement);\nnewCanvas.attr(\"data-feed\",data);\nmyCanvas.addClass(\"painted\");\nmyCanvas.replaceWith(newCanvas);\n```", "```js\nvar camera = new THREE.PerspectiveCamera(45, w/h, 1, 1000);\ncamera.position.z = 700;\n```", "```js\nvar scene = new THREE.Scene();\nvar bars=[];\nvar index=0;\nvar labels=\"<div class='chart-labels'>\";\n```", "```js\nvar mainColor=that.getChartColor(val).replace(\"#\", \"0x\");\n```", "```js\nvar colors = [mainColor, mainColor, mainColor, mainColor, mainColor, mainColor];\nvar materials = [];\nlabels+=\"<div>\"+info[0]+\"</div>\";\nfor (var n = 0; n < 6; n++) {\n  materials.push([\n    new THREE.MeshLambertMaterial({\n      color: colors[n],\n      opacity:0.6,\n      transparent: true,\n      shading: THREE.FlatShading,\n      vertexColors: THREE.VertexColors\n    }),\n    new THREE.MeshBasicMaterial({\n      color: colors[n],\n      shading: THREE.FlatShading,\n      wireframe: true,\n      transparent: true\n    })\n  ]);\n}\n```", "```js\nTHREE.MeshLambertMaterial({\n  color: colors[n],\n  opacity:0.6,\n  transparent:\n  true,\n  shading: THREE.FlatShading,\n  vertexColors: THREE.VertexColors\n})\n```", "```js\nnew THREE.MeshBasicMaterial({\n  color: colors[n],\n  shading: THREE.FlatShading,\n  wireframe: true,\n  transparent: true\n})\n```", "```js\nCubeGeometry(width, height, depth, segmentsWidth, segmentsHeight, segmentsDepth)\n```", "```js\nvar bar = new THREE.Mesh(new THREE.CubeGeometry(myWidth, 90, 90, 1, 1, 1, materials), new THREE.MeshFaceMaterial());\n```", "```js\nbar.scale.x=.01;\n```", "```js\nbar.position.y=200-(index*140);\nbar.position.x=-500+(myWidth/2)*bar.scale.x;\nbar.overdraw = true;\n```", "```js\nscene.add(bar);\nbars.push({object:bar, width:myWidth});\nindex++;\n```", "```js\nfor(var i=0; i<values.length; i++){\n  var info=values[i].split(\":\");\n  var val=info[1];\n  if(val>0){\n    var mainColor=that.getChartColor(val).replace(\"#\", \"0x\");\n    var colors = [mainColor, mainColor, mainColor, mainColor, mainColor, mainColor];\n    var materials = [];\n    labels+=\"<div>\"+info[0]+\"</div>\";\n    for (var n = 0; n < 6; n++) {\n      materials.push([\n        new THREE.MeshLambertMaterial({\n          color: colors[n],\n          opacity:0.6,\n          transparent: true,\n          shading: THREE.FlatShading,\n          vertexColors: THREE.VertexColors\n        }),\n        new THREE.MeshBasicMaterial({\n          color: colors[n],\n          shading: THREE.FlatShading,\n          wireframe: true,\n          transparent: true\n        })\n       ]);\n     }\n     var myWidth=val*8;\n     var bar = new THREE.Mesh(new THREE.CubeGeometry(myWidth, 90, 90, 1, 1, 1, materials), new THREE.MeshFaceMaterial());\n     bar.scale.x=.01;\n     bar.position.y=200-(index*140);\n     bar.position.x=-500+(myWidth/2)*bar.scale.x;\n     bar.overdraw = true;\n     scene.add(bar);\n     bars.push({object:bar, width:myWidth});\n     index++;\n  }\n}\n```", "```js\nlabels+\"</div>\";\nmyCanvasParent.append(labels);\n```", "```js\nvar three = {\n  renderer: renderer,\n  camera: camera,\n  scene: scene,\n  bars: bars\n};\nthat.animate3DChart(lastTime, three);\n```", "```js\nthis.draw3DChart = function(canvas) {\n  var myCanvas=$(canvas);\n  var myCanvasParent=myCanvas.parent();\n  if(!myCanvas.hasClass(\"painted\")){\n    var webGlSupport=false;\n    try {\n      /*** VERIFICATION OF WEBGL SUPPORT ***/\n      webGlSupport = !!window.WebGLRenderingContext && !!document.createElement('canvas').getContext('experimental-webgl');\n    }catch(e){}\n    if (webGlSupport){\n      var data=myCanvas.attr(\"data-feed\");\n      var values=data.split(\",\");\n      var w = myCanvas.width();\n      var h = myCanvas.height();\n      var lastTime = 0;\n      var renderer = new THREE.WebGLRenderer();\n      renderer.setSize(w, h);\n      var newCanvas=$(renderer.domElement);\n      newCanvas.attr(\"data-feed\",data);\n      myCanvas.addClass(\"painted\");\n      /*** REPLACES ORIGINAL CANVAS WITH THREE.JS CANVAS ***/\n      myCanvas.replaceWith(newCanvas);\n      /*** CAMERA DEFINITION ***/\n      var camera = new THREE.PerspectiveCamera(45, w/h, 1, 1000);\n      camera.position.z = 700;\n      /*** SCENE DEFINITION ***/\n      var scene = new THREE.Scene();\n      var bars=[];\n      var index=0;\n      var labels=\"<div class='chart-labels'>\";\n      for(var i=0; i<values.length; i++){\n        var info=values[i].split(\":\");\n        var val=info[1];\n        if(val>0){\n          var mainColor=that.getChartColor(val).replace(\"#\", \"0x\");\n          var colors = [mainColor, mainColor, mainColor, mainColor, mainColor, mainColor];\n          var materials = [];\n          labels+=\"<div>\"+info[0]+\"</div>\";\n          for (var n = 0; n < 6; n++) {\n            materials.push([\n              new THREE.MeshLambertMaterial({\n                color: colors[n],\n                opacity:0.6,\n                transparent: true,\n                shading: THREE.FlatShading,\n                vertexColors: THREE.VertexColors\n              }),\n              new THREE.MeshBasicMaterial({\n                color: colors[n],\n                shading: THREE.FlatShading,\n                wireframe: true,\n                transparent: true\n              })\n            ]);\n          }\n          var myWidth=val*8;\n          var bar = new THREE.Mesh(new THREE.CubeGeometry(myWidth, 90, 90, 1, 1, 1, materials), new THREE.MeshFaceMaterial());\n          bar.scale.x=.01;\n          bar.position.y=200-(index*140);\n          bar.position.x=-500+(myWidth/2)*bar.scale.x;\n          bar.overdraw = true;\n          scene.add(bar);\n          bars.push({object:bar, width:myWidth});\n          index++;\n        }\n      }\n      labels+\"</div>\";\n      myCanvasParent.append(labels);\n      /*** SAVE INFORMATION REQUIRED TO RENDER SCENE ***/\n      var three = {\n        renderer: renderer,\n        camera: camera,\n        scene: scene,\n        bars: bars\n      };\n      that.animate3DChart(lastTime, three);\n    }else{\n      /** IF NOT WEBGL SUPPORT RENDERS CHART IN 2D ***/\n      that.drawBarChart(canvas);\n    }\n  }\n};\n```", "```js\nwindow.requestAnimFrame = (function(callback){\n  return window.requestAnimationFrame ||window.webkitRequestAnimationFrame ||window.mozRequestAnimationFrame ||window.oRequestAnimationFrame ||window.msRequestAnimationFrame ||function(callback){\n  /* Using 60FPS */\n    window.setTimeout(callback, 1000 / 60);\n  };\n})();\n```", "```js\nthis.animate3DChart = function(lastTime, three){\n  var isReady=false;\n  for(var i=0; i<three.bars.length; i++){\n    if(three.bars[i].object.scale.x<1){\n      three.bars[i].object.scale.x+=.03;\n      three.bars[i].object.position.x=-500+(three.bars[i].width/2)*three.bars[i].object.scale.x;\n    }\n    isReady=(three.bars[i].object.scale.x>=1);\n  }\n  lastTime = time;\n  /*** SCENE RENDER USING THREE.JS ***/\n  three.renderer.render(three.scene, three.camera);\n  if(!isReady){\n    requestAnimFrame(function(){\n      that.animate3DChart(lastTime, three);\n    });\n  }\n}\n```", "```js\nvar angularSpeed = 1.2;\nvar date = new Date();\nvar time = date.getTime();\nvar timeDiff = time - lastTime;\nvar angleChange = angularSpeed * timeDiff * 2 * Math.PI / 1000;\n```", "```js\nthis.animate3DChart = function(lastTime, three){\n  var angularSpeed = 1.2;\n var date = new Date();\n var time = date.getTime();\n var timeDiff = time - lastTime;\n var angleChange = angularSpeed * timeDiff * 2 * Math.PI / 1000;\n  var isReady=false;\n  for(var i=0; i<three.bars.length; i++){\n    if(three.bars[i].object.scale.x<1){\n      three.bars[i].object.scale.x+=.03;\n      three.bars[i].object.position.x=-500+(three.bars[i].width/2)*three.bars[i].object.scale.x;\n    }\n    //isReady=(three.bars[i].object.scale.x>=1);\n    three.bars[i].object.rotation.x += angleChange;\n  }\n  lastTime = time;\n  /*** SCENE RENDER USING THREE.JS ***/\n  three.renderer.render(three.scene, three.camera);\n  if(!isReady){\n    requestAnimFrame(function(){\n      that.animate3DChart(lastTime, three);\n    });\n  }\n}\n```"]