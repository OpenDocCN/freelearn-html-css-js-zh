["```js\n      /* Add a new user */ \n      app.post('/users', (request, response, next) => { }) \n      /* Get user */ \n      app.get('/users/:id', (request, response, next) => { }) \n      /* Update a user */ \n      app.put('/users/:id', (request, response, next) => { }) \n      /* Delete a user */ \n      app.delete('/users/:id', (request, response, next) => { })  \n```", "```js\n      { \n        \"dependencies\": { \n          \"express\": \"4.16.3\", \n          \"node-fetch\": \"2.1.1\", \n          \"uuid\": \"3.2.1\" \n        } \n      } \n```", "```js\n npm install\n```", "```js\n     const express = require('express') \n      const uuid = require('uuid') \n      const app = express() \n```", "```js\n      let data = [ \n          { id: uuid(), name: 'Bob' }, \n          { id: uuid(), name: 'Alice' }, \n      ] \n```", "```js\n      const usr = { \n          create(name) { \n              const user = { id: uuid(), name } \n              data.push(user) \n              return user \n          }, \n          read(id) { \n              if (id === 'all') return data \n              return data.find(user => user.id === id) \n          }, \n          update(id, name) { \n              const user = data.find(usr => usr.id === id) \n              if (!user) return { status: 'User not found' } \n              user.name = name \n              return user \n          }, \n          delete(id) { \n              data = data.filter(user => user.id !== id) \n              return { status: 'deleted', id } \n          } \n      } \n```", "```js\n      app.post('/users/:name', (req, res) => { \n          res.status(201).json(usr.create(req.params.name)) \n      }) \n```", "```js\n      app.get('/users/:id', (req, res) => { \n          res.status(200).json(usr.read(req.params.id)) \n      }) \n```", "```js\n      app.put('/users/:id=:name', (req, res) => { \n          res.status(200).json(usr.update( \n              req.params.id, \n              req.params.name, \n          )) \n      }) \n```", "```js\n      app.delete('/users/:id', (req, res) => { \n          res.status(200).json(usr.delete(req.params.id)) \n      }) \n```", "```js\n      app.listen( \n          1337, \n          () => console.log('Web Server running on port 1337'), \n      ) \n```", "```js\n node restfulapi.js\n```", "```js\n      const fetch = require('node-fetch') \n      const r = async (url, method) => ( \n          await fetch(`http://localhost:1337${url}`, { method }) \n              .then(r => r.json()) \n      ) \n      const log = (...obj) => ( \n          obj.forEach(o => console.dir(o, { colors: true })) \n      ) \n      async function test() { \n          const users = await r('/users/all', 'get') \n          const { id } = users[0] \n          const getById = await r(`/users/${id}`, 'get') \n          const updateById = await r(`/users/${id}=John`, 'put') \n          const deleteById = await r(`/users/${id}`, 'delete') \n          const addUsr = await r(`/users/Smith`, 'post') \n          const getAll = await r('/users/all', 'get') \n          log('[GET] users:', users) \n          log(`[GET] a user with id=\"${id}\":`, getById) \n          log(`[PUT] a user with id=\"${id}\":`, updateById) \n          log(`[POST] a new user:`, addUsr) \n          log(`[DELETE] a user with id=\"${id}\":`, deleteById) \n          log(`[GET] users:`, getAll) \n      } \n      test() \n```", "```js\n    node test-restfulapi.js\n\n```", "```js\nr(`/users/Smith`, 'post') \n```", "```js\n      const PersonSchema = new Schema({ \n          firstName: String, \n          lastName: String, \n      }) \n      const Person = connection.model('Person', PersonSchema) \n```", "```js\n      const { Schema} = require('mongoose') \n      const PersonSchema = new Schema({ \n          name: String, \n          age: Number, \n          isSingle: Boolean, \n          birthday: Date, \n          description: Buffer, \n      }) \n```", "```js\n      const { Schema, SchemaTypes } = require('mongoose') \n      const PersonSchema = new Schema({ \n          name: SchemaTypes.String, \n          age: SchemaTypes.Number, \n          isSingle: SchemaTypes.Boolean, \n          birthday: SchemaTypes.Date, \n          description: SchemaTypes.Buffer, \n      }) \n```", "```js\n      const { Schema } = require('mongoose') \n      const PersonSchema = new Schema({ \n          name: { type: String, required: true, default: 'Unknown' }, \n          age: { type: Number, min: 18, max: 80, required: true }, \n          isSingle: { type: Boolean }, \n          birthday: { type: Date, required: true }, \n          description: { type: Buffer }, \n      }) \n```", "```js\n      const PersonSchema = new Schema({ \n          name: String, \n          age: Number, \n          likes: [String], \n      }) \n```", "```js\n      { \n        \"dependencies\": { \n          \"mongoose\": \"5.0.11\" \n       } \n     } \n```", "```js\n npm install\n```", "```js\n      const mongoose = require('mongoose') \n      const { connection, Schema } = mongoose \n      mongoose.connect( \n          'mongodb://localhost:27017/test' \n      ).catch(console.error) \n```", "```js\n      const UserSchema = new Schema({ \n          firstName: String, \n          lastName: String, \n          likes: [String], \n      }) \n```", "```js\n      const User = mongoose.model('User', UserSchema) \n```", "```js\n      const addUser = (firstName, lastName) => new User({ \n          firstName, \n          lastName, \n      }).save() \n```", "```js\n      const getUser = (id) => User.findById(id) \n```", "```js\n      const removeUser = (id) => User.remove({ id }) \n```", "```js\n      connection.once('connected', async () => { \n          try { \n              // Create \n              const newUser = await addUser('John', 'Smith') \n              // Read \n              const user = await getUser(newUser.id) \n              // Update \n              user.firstName = 'Jonny' \n              user.lastName = 'Smithy' \n              user.likes = [ \n                  'cooking', \n                  'watching movies', \n                  'ice cream', \n              ] \n              await user.save() \n              console.log(JSON.stringify(user, null, 4)) \n              // Delete \n              await removeUser(user.id) \n          } catch (error) { \n              console.dir(error.message, { colors: true }) \n          } finally { \n              await connection.close() \n          } \n      }) \n```", "```js\n    node mongoose-models.js\n```", "```js\n      { \n          \"likes\": [ \n        \"cooking\", \n              \"watching movies\", \n              \"ice cream\" \n                ], \n          \"_id\": \"[some id]\", \n          \"firstName\": \"Jonny\", \n          \"lastName\": \"Smithy\", \n          \"__v\": 1 \n      } \n```", "```js\n      const user = await User.findOne({ \n          firstName: 'Jonh', \n          age: { $lte: 30 }, \n      }, (error, document) => { \n          if (error) return console.log(error) \n          console.log(document) \n      }) \n```", "```js\n      const user = User.findOne({ \n          firstName: 'Jonh', \n          age: { $lte: 30 }, \n      }) \n      user.exec((error, document) => { \n          if (error) return console.log(error) \n          console.log(document) \n      }) \n```", "```js\n      try { \n          const user = await User.findOne({ \n              firstName: 'Jonh', \n              age: { $lte: 30 }, \n          }) \n          console.log(user) \n      } catch (error) { \n          console.log(error) \n      }  \n```", "```js\n      try { \n          const user = await User.findOne() \n        .where('firstName', 'John') \n              .where('age').lte(30) \n          console.log(user) \n      }       catch (error) { \n          console.log(error) \n      }  \n```", "```js\n      { \n        \"dependencies\": { \n          \"mongoose\": \"5.0.11\" \n        } \n      } \n```", "```js\n npm install  \n```", "```js\n      const mongoose = require('mongoose') \n      const { connection, Schema } = mongoose \n      mongoose.connect( \n          'mongodb://localhost:27017/test' \n      ).catch(console.error) \n```", "```js\n      const UserSchema = new Schema({ \n          firstName: String, \n          lastName: String, \n          age: Number, \n      }) \n```", "```js\n      const User = mongoose.model('User', UserSchema) \n```", "```js\n      connection.once('connected', async () => { \n          try { \n              const user = await new User({ \n                  firstName: 'John', \n                  lastName: 'Snow', \n                  age: 30, \n              }).save() \n              const findUser = await User.findOne() \n                  .where('firstName').equals('John') \n                  .where('age').lte(30) \n                  .select('lastName age') \n              console.log(JSON.stringify(findUser, null, 4)) \n              await user.remove() \n          } catch (error) { \n              console.dir(error.message, { colors: true }) \n          } finally { \n              await connection.close() \n          } \n      }) \n```", "```js\n    node chaining-queries.js\n\n```", "```js\n      const instance = new Model() \n```", "```js\n      Model.findOne([conditions]).then((instance) => {}) \n```", "```js\n{ \n  \"dependencies\": { \n    \"mongoose\": \"5.0.11\" \n  } \n} \n```", "```js\n    npm install\n```", "```js\n      const mongooconst mongoose = require('mongoose') \n      const { connection, Schema } = mongoose \n      mongoose.connect( \n          'mongodb://localhost:27017/test' \n      ).catch(console.error) \n```", "```js\n      const UserSchema = new Schema({ \n          firstName: String, \n          lastName: String, \n          likes: [String], \n      }) \n```", "```js\n      UserSchema.method('setFullName', function setFullName(v) { \n          const fullName = String(v).split(' ') \n          this.lastName = fullName[0] || '' \n          this.firstName = fullName[1] || '' \n      }) \n```", "```js\n      UserSchema.method('getFullName', function getFullName() { \n          return `${this.lastName} ${this.firstName}` \n      }) \n```", "```js\n      UserSchema.method('loves', function loves(stuff) { \n          this.likes.push(stuff) \n      }) \n```", "```js\n      UserSchema.method('dislikes', function dislikes(stuff) { \n          this.likes = this.likes.filter(str => str !== stuff) \n      }) \n```", "```js\n      const User = mongoose.model('User', UserSchema) \n```", "```js\n      connection.once('connected', async () => { \n          try { \n              // Create \n              const user = new User() \n              user.setFullName('Huang Jingxuan') \n              user.loves('kitties') \n              user.loves('strawberries') \n              user.loves('snakes') \n              await user.save() \n              // Update \n              const person = await User.findOne() \n                  .where('firstName', 'Jingxuan') \n                  .where('likes').in(['snakes', 'kitties']) \n              person.dislikes('snakes') \n              await person.save() \n              // Display \n              console.log(person.getFullName()) \n              console.log(JSON.stringify(person, null, 4)) \n              // Remove \n              await user.remove() \n          } catch (error) { \n              console.dir(error.message, { colors: true }) \n          } finally { \n              await connection.close() \n          } \n      }) \n```", "```js\n       node document-methods.js\n```", "```js\nUserSchema.methods.setFullName = function setFullName(v) { \n    const fullName = String(v).split(' ') \n    this.lastName = fullName[0] || '' \n    this.firstName = fullName[1] || '' \n} \n```", "```js\n{ \n  \"dependencies\": { \n    \"mongoose\": \"5.0.11\" \n  } \n} \n```", "```js\nnpm install\n```", "```js\n      const mongoose = require('mongoose') \n      const { connection, Schema } = mongoose \n      mongoose.connect( \n          'mongodb://localhost:27017/test' \n      ).catch(console.error) \n```", "```js\n      const UsrSchm = new Schema({ \n          firstName: String, \n          lastName: String, \n          likes: [String], \n      }) \n```", "```js\n      UsrSchm.static('getByFullName', function getByFullName(v) { \n          const fullName = String(v).split(' ') \n          const lastName = fullName[0] || '' \n          const firstName = fullName[1] || '' \n          return this.findOne() \n              .where('firstName').equals(firstName) \n              .where('lastName').equals(lastName) \n      }) \n```", "```js\n      const User = mongoose.model('User', UsrSchm) \n```", "```js\n      connection.once('connected', async () => { \n          try { \n              // Create \n              const user = new User({ \n                  firstName: 'Jingxuan', \n                  lastName: 'Huang', \n                  likes: ['kitties', 'strawberries'], \n              }) \n              await user.save() \n              // Read \n              const person = await User.getByFullName( \n                  'Huang Jingxuan' \n              ) \n              console.log(JSON.stringify(person, null, 4)) \n              await person.remove() \n              await connection.close() \n          } catch (error) { \n              console.log(error.message) \n          } \n      }) \n```", "```js\n    node static-methods.js\n\n```", "```js\nUsrSchm.statics.getByFullName = function getByFullName(v) { \n    const fullName = String(v).split(' ') \n    const lastName = fullName[0] || '' \n    const firstName = fullName[1] || '' \n    return this.findOne() \n        .where('firstName').equals(firstName) \n        .where('lastName').equals(lastName) \n} \n```", "```js\n      const UserSchema = new Schema({ \n          firstName: String, \n          lastName: String, \n          fullName: String, \n      }) \n      UserSchema.pre('save', async function preSave() { \n          this.fullName = `${this.lastName} ${this.firstName}` \n      }) \n      UserSchema.post('save', async function postSave(doc) { \n          console.log(`New user created: ${doc.fullName}`) \n      }) \n      const User = mongoose.model('User', UserSchema) \n```", "```js\n      const user = new User({ \n          firstName: 'John', \n          lastName: 'Smith', \n      }) \n      await user.save() \n```", "```js\n    New user created: Smith John\n```", "```js\n      { \n        \"dependencies\": { \n          \"mongoose\": \"5.0.11\" \n        } \n      } \n```", "```js\n npm install\n```", "```js\n      const mongoose = require('mongoose') \n      const { connection, Schema } = mongoose \n      mongoose.connect( \n          'mongodb://localhost:27017/test' \n      ).catch(console.error) \n```", "```js\n      const UserSchema = new Schema({ \n          firstName: { type: String, required: true }, \n          lastName: { type: String, required: true }, \n      }) \n```", "```js\n      UserSchema.pre('init', async function preInit() { \n          console.log('A document is going to be initialized.') \n      }) \n      UserSchema.post('init', async function postInit() { \n          console.log('A document was initialized.') \n      }) \n```", "```js\n      UserSchema.pre('validate', async function preValidate() { \n          console.log('A document is going to be validated.') \n      }) \n      UserSchema.post('validate', async function postValidate() { \n          console.log('All validation rules were executed.') \n      }) \n```", "```js\n      UserSchema.pre('save', async function preSave() { \n          console.log('Preparing to save the document') \n      }) \n      UserSchema.post('save', async function postSave() { \n          console.log(`A doc was saved id=${this.id}`) \n      }) \n```", "```js\n      UserSchema.pre('remove', async function preRemove() { \n          console.log(`Doc with id=${this.id} will be removed`) \n      }) \n      UserSchema.post('remove', async function postRemove() { \n          console.log(`Doc with id=${this.id} was removed`) \n      }) \n```", "```js\n      const User = mongoose.model('User', UserSchema) \n```", "```js\n      connection.once('connected', async () => { \n          try { \n              const user = new User({ \n                  firstName: 'John', \n                  lastName: 'Smith', \n              }) \n              await user.save() \n              await User.findById(user.id) \n              await user.remove() \n              await connection.close() \n          } catch (error) { \n              await connection.close() \n              console.dir(error.message, { colors: true }) \n          } \n      }) \n```", "```js\n node document-middleware.js\n```", "```js\n      A document is going to be validated. \n      All validation rules were executed. \n      Preparing to save the document \n      A doc was saved id=[ID] \n      A document is going to be initialized. \n      A document was initialized. \n      Doc with id=[ID] will be removed \n      Doc with id=[ID] was removed \n```", "```js\nUserSchema.pre('save', async function preSave() { \n    this.firstName = this.firstName.toUpperCase() \n    this.lastName = this.lastName.toUpperCase() \n}) \n```", "```js\nUserSchema.pre('save', async function preSave() { \n    throw new Error('Doc was prevented from being saved.') \n}) \n```", "```js\n      const mongoose = require('mongoose') \n      const { connection, Schema } = mongoose \n      mongoose.connect( \n          'mongodb://localhost:27017/test' \n      ).catch(console.error) \n```", "```js\n      const UserSchema = new Schema({ \n          firstName: { type: String, required: true }, \n          lastName: { type: String, required: true }, \n      }) \n```", "```js\n      UserSchema.pre('count', async function preCount() { \n          console.log( \n              `Preparing to count document with this criteria: \n              ${JSON.stringify(this._conditions)}` \n          ) \n      }) \n      UserSchema.post('count', async function postCount(count) { \n          console.log(`Counted ${count} documents that coincide`) \n      }) \n      UserSchema.pre('find', async function preFind() { \n          console.log( \n              `Preparing to find all documents with criteria: \n              ${JSON.stringify(this._conditions)}` \n          ) \n      }) \n      UserSchema.post('find', async function postFind(docs) { \n          console.log(`Found ${docs.length} documents`) \n      }) \n      UserSchema.pre('findOne', async function prefOne() { \n          console.log( \n              `Preparing to find one document with criteria: \n              ${JSON.stringify(this._conditions)}` \n          ) \n      }) \n      UserSchema.post('findOne', async function postfOne(doc) { \n          console.log(`Found 1 document:`, JSON.stringify(doc)) \n      }) \n      UserSchema.pre('update', async function preUpdate() { \n          console.log( \n              `Preparing to update all documents with criteria: \n              ${JSON.stringify(this._conditions)}` \n          ) \n      }) \n      UserSchema.post('update', async function postUpdate(r) { \n          console.log(`${r.result.ok} document(s) were updated`) \n      }) \n```", "```js\n      const User = mongoose.model('User', UserSchema) \n```", "```js\n      connection.once('connected', async () => { \n          try { \n              const user = new User({ \n                  firstName: 'John', \n                  lastName: 'Smith', \n              }) \n              await user.save() \n              await User \n                  .where('firstName').equals('John') \n                  .update({ lastName: 'Anderson' }) \n              await User \n                  .findOne() \n                  .select(['lastName']) \n                  .where('firstName').equals('John') \n              await User \n                  .find() \n                  .where('firstName').equals('John') \n              await User \n                  .where('firstName').equals('Neo') \n                  .count() \n              await user.remove() \n          } catch (error) { \n              console.dir(error, { colors: true }) \n          } finally { \n              await connection.close() \n          } \n      }) \n```", "```js\n node query-middleware.js\n```", "```js\n      Preparing to update all documents with criteria: \n                {\"firstName\":\"John\"} \n      1 document(s) were updated \n      Preparing to find one document with criteria: \n                {\"firstName\":\"John\"} \n      Found 1 document: {\"_id\":\"[ID]\",\"lastName\":\"Anderson\"} \n      Preparing to find all documents with criteria: \n                {\"firstName\":\"John\"} \n      Found 1 documents \n      Preparing to count document with this criteria: \n                {\"firstName\":\"Neo\"} \n      Counted 0 documents that coincide \n```", "```js\n      const mongoose = require('mongoose') \n      const { connection, Schema } = mongoose \n      mongoose.connect( \n          'mongodb://localhost:27017/test' \n      ).catch(console.error) \n```", "```js\n      const UserSchema = new Schema({ \n          firstName: { type: String, required: true }, \n          lastName: { type: String, required: true }, \n      }) \n```", "```js\n      UserSchema.pre('insertMany', async function prMany() { \n          console.log('Preparing docs...') \n      }) \n      UserSchema.post('insertMany', async function psMany(docs) { \n          console.log('The following docs were created:n', docs) \n      }) \n```", "```js\n      const User = mongoose.model('User', UserSchema) \n```", "```js\n      connection.once('connected', async () => { \n          try { \n              await User.insertMany([ \n                  { firstName: 'Leo', lastName: 'Smith' }, \n                  { firstName: 'Neo', lastName: 'Jackson' }, \n              ]) \n          } catch (error) { \n              console.dir(error, { colors: true }) \n          } finally { \n              await connection.close() \n          } \n      }) \n```", "```js\n node query-middleware.js\n```", "```js\n      Preparing docs... \n      The following documents were created: \n      [ { firstName: 'Leo', lastName: 'Smith', _id: [id] }, \n        { firstName: 'Neo', lastName: 'Jackson', _id: [id] } ] \n```", "```js\n      const UserSchema = new Schema({ \n          name: { \n              type: string, \n              required: true, \n              default: 'unknown', \n          } \n      }) \n```", "```js\n      const WishBoxSchema = new Schema({ \n          wishes: { \n              type: [String], \n              required: true, \n              default: [ \n                  'To be a snowman', \n                  'To be a string', \n                  'To be an example', \n              ], \n          }, \n      }) \n```", "```js\n      path: { type: String, required: true } \n      path: { type: String, required: [true, 'Custom error message'] } \n      path: { type: String, required: () => true } \n```", "```js\n      gender: { \n      type: SchemaTypes.String, \n      enum: ['male', 'female', 'other'], \n      } \n```", "```js\n      website: { \n      type: SchemaTypes.String, \n      match: /^www/, \n      } \n```", "```js\n      name: { \n      type: SchemaTypes.String, \n      minlength: 5, \n      maxlength: 20, \n      } \n```", "```js\n      age: { \n      type: String, \n      min: 18, \n      max: 100, \n      } \n```", "```js\n      nickname: { \n      type: String, \n      validate: { \n      validator: function validator(value) { \n      return /^[a-zA-Z-]$/.test(value) \n      }, \n      message: '{VALUE} is not a valid nickname.', \n      }, \n      } \n```", "```js\n      { \n        \"dependencies\": { \n          \"mongoose\": \"5.0.11\" \n        } \n      } \n```", "```js\n npm install  \n```", "```js\n      const mongoose = require('mongoose') \n      const { connection, Schema } = mongoose \n      mongoose.connect( \n          'mongodb://localhost:27017/test' \n      ).catch(console.error) \n```", "```js\n      const UserSchema = new Schema({ \n          username: { \n              type: String, \n              minlength: 6, \n              maxlength: 20, \n              required: [true, 'user is required'], \n              validate: { \n                  message: '{VALUE} is not a valid username', \n                  validator: (val) => /^[a-zA-Z]+$/.test(val), \n              }, \n          }, \n      }) \n```", "```js\n      const User = mongoose.model('User', UserSchema) \n```", "```js\n      connection.once('connected', async () => { \n          try { \n              const user = new User() \n              let errors = null \n              // username field is not defined \n              errors = user.validateSync() \n              console.dir(errors.errors['username'].message) \n              // username contains less than 6 characters \n              user.username = 'Smith' \n              errors = user.validateSync() \n              console.dir(errors.errors['username'].message) \n              // RegExp matching \n              user.username = 'Smith_9876' \n              errors = user.validateSync() \n              console.dir(errors.errors['username'].message) \n          } catch (error) { \n              console.dir(error, { colors: true }) \n          } finally { \n              await connection.close() \n          } \n      }) \n```", "```js\n node custom-validation.js  \n```", "```js\n      'user is required' \n      'Path `username` (`Smith`) is shorter than the minimum allowed             \n       length (6).' \n      'Smith_9876 is not a valid username' \n```", "```js\nnode -i \n```", "```js\n      { \n        \"dependencies\": { \n          \"body-parser\": \"1.18.2\", \n          \"connect-mongo\": \"2.0.1\", \n          \"express\": \"4.16.3\", \n          \"express-session\": \"1.15.6\", \n          \"mongoose\": \"5.0.11\", \n          \"node-fetch\": \"2.1.2\" \n        } \n      } \n```", "```js\nnpm install\n```", "```js\n      const mongoose = require('mongoose') \n      const express = require('express') \n      const session = require('express-session') \n      const bodyParser = require('body-parser') \n      const MongoStore = require('connect-mongo')(session) \n      const api = require('./api/controller') \n      const app = express() \n      const db = mongoose.connect( \n          'mongodb://localhost:27017/test' \n      ).then(conn => conn).catch(console.error) \n```", "```js\n      app.use(bodyParser.json()) \n```", "```js\n      app.use((request, response, next) => {\n        Promise.resolve(db).then(\n        (connection, err) => (\n            typeof connection !== 'undefined'\n            ? next()\n            : next(new Error('MongoError'))\n            )\n          )\n      })\n```", "```js\n      app.use(session({ \n          secret: 'MERN Cookbook Secrets', \n          resave: false, \n          saveUninitialized: true, \n          store: new MongoStore({ \n              collection: 'sessions', \n              mongooseConnection: mongoose.connection, \n          }), \n      })) \n```", "```js\n      app.use('/users', api) \n```", "```js\n      app.listen( \n          1337, \n          () => console.log('Web Server running on port 1337'), \n      ) \n```", "```js\n      const { connection, Schema } = require('mongoose') \n      const crypto = require('crypto') \n```", "```js\n      const UserSchema = new Schema({ \n          username: { \n              type: String, \n              minlength: 4, \n              maxlength: 20, \n              required: [true, 'username field is required.'], \n              validate: { \n                  validator: function (value) { \n                      return /^[a-zA-Z]+$/.test(value) \n                  }, \n                  message: '{VALUE} is not a valid username.', \n              }, \n          }, \n          password: String, \n      }) \n```", "```js\n      UserSchema.static('login', async function(usr, pwd) { \n          const hash = crypto.createHash('sha256') \n              .update(String(pwd)) \n          const user = await this.findOne() \n              .where('username').equals(usr) \n              .where('password').equals(hash.digest('hex')) \n          if (!user) throw new Error('Incorrect credentials.') \n          delete user.password \n          return user \n      }) \n```", "```js\n      UserSchema.static('signup', async function(usr, pwd) { \n          if (pwd.length < 6) { \n              throw new Error('Pwd must have more than 6 chars') \n          } \n          const hash = crypto.createHash('sha256').update(pwd) \n          const exist = await this.findOne() \n              .where('username') \n              .equals(usr) \n          if (exist) throw new Error('Username already exists.') \n          const user = this.create({ \n              username: usr, \n              password: hash.digest('hex'), \n          }) \n          return user \n      }) \n```", "```js\n      UserSchema.method('changePass', async function(pwd) { \n          if (pwd.length < 6) { \n              throw new Error('Pwd must have more than 6 chars') \n          } \n          const hash = crypto.createHash('sha256').update(pwd) \n          this.password = hash.digest('hex') \n          return this.save() \n      }) \n```", "```js\n      module.exports = connection.model('User', UserSchema) \n```", "```js\n      const express = require('express') \n      const User = require('./model') \n      const api = express.Router() \n```", "```js\n      const isLogged = ({ session }, res, next) => { \n          if (!session.user) res.status(403).json({ \n              status: 'You are not logged in!', \n          }) \n          else next() \n      } \n      const isNotLogged = ({ session }, res, next) => { \n          if (session.user) res.status(403).json({ \n              status: 'You are logged in already!', \n          }) \n          else next() \n      } \n```", "```js\n      api.post('/login', isNotLogged, async (req, res) => { \n          try { \n              const { session, body } = req \n        const { username, password } = body \n              const user = await User.login(username, password) \n              session.user = { \n                  _id: user._id, \n                  username: user.username, \n              } \n              session.save(() => { \n                  res.status(200).json({ status: 'Welcome!'}) \n              }) \n          } catch (error) { \n              res.status(403).json({ error: error.message }) \n          } \n      }) \n```", "```js\n      api.post('/logout', isLogged, (req, res) => { \n          req.session.destroy() \n          res.status(200).send({ status: 'Bye bye!' }) \n      }) \n```", "```js\n      api.post('/signup', async (req, res) => { \n          try { \n              const { session, body } = req \n              const { username, password } = body \n              const user = await User.signup(username, password) \n              res.status(201).json({ status: 'Created!'}) \n          } catch (error) { \n              res.status(403).json({ error: error.message }) \n          } \n      }) \n```", "```js\n      api.get('/profile', isLogged, (req, res) => { \n          const { user } = req.session \n          res.status(200).json({ user }) \n      }) \n```", "```js\n      api.put('/changepass', isLogged, async (req, res) => { \n          try { \n              const { session, body } = req \n              const { password } = body \n              const { _id } = session.user \n              const user = await User.findOne({ _id }) \n              if (user) { \n                  await user.changePass(password) \n                  res.status(200).json({ status: 'Pwd changed' }) \n              } else { \n                  res.status(403).json({ status: user }) \n              } \n          } catch (error) { \n              res.status(403).json({ error: error.message }) \n          } \n      }) \n```", "```js\n      api.delete('/delete', isLogged, async (req, res) => { \n          try { \n              const { _id } = req.session.user \n              const user = await User.findOne({ _id }) \n              await user.remove() \n              req.session.destroy((err) => { \n                  if (err) throw new Error(err) \n                  res.status(200).json({ status: 'Deleted!'}) \n              }) \n          } catch (error) { \n              res.status(403).json({ error: error.message }) \n          } \n      }) \n```", "```js\n      module.exports = api \n```", "```js\n      const repl = require('repl') \n      const util = require('util') \n      const vm = require('vm') \n      const fetch = require('node-fetch') \n      const { Headers } = fetch \n```", "```js\n      let cookie = null \n```", "```js\n      const query = (path, ops) => { \n          return fetch(`http://localhost:1337/users/${path}`, { \n              method: ops.method, \n              body: ops.body, \n              credentials: 'include', \n              body: JSON.stringify(ops.body), \n              headers: new Headers({ \n                  ...(ops.headers || {}), \n                  cookie, \n                  Accept: 'application/json', \n                  'Content-Type': 'application/json', \n              }), \n          }).then(async (r) => { \n              cookie = r.headers.get('set-cookie') || cookie \n              return { \n                  data: await r.json(), \n                  status: r.status, \n              } \n          }).catch(error => error) \n      } \n```", "```js\n      const signup = (username, password) => query('/signup', { \n          method: 'POST', \n          body: { username, password }, \n      }) \n```", "```js\n      const login = (username, password) => query('/login', { \n          method: 'POST', \n          body: { username, password }, \n      }) \n```", "```js\n      const logout = () => query('/logout', { \n          method: 'POST', \n      }) \n```", "```js\n      const getProfile = () => query('/profile', { \n          method: 'GET', \n      }) \n```", "```js\n      const changePassword = (password) => query('/changepass', { \n          method: 'PUT', \n          body: { password }, \n      }) \n```", "```js\n      const deleteProfile = () => query('/delete', { \n          method: 'DELETE', \n      }) \n```", "```js\n      const replServer = repl.start({ \n          prompt: '> ', \n          ignoreUndefined: true, \n          async eval(cmd, context, filename, callback) { \n              const script = new vm.Script(cmd) \n              const is_raw = process.stdin.isRaw \n              process.stdin.setRawMode(false) \n              try { \n                  const res = await Promise.resolve( \n                      script.runInContext(context, { \n                          displayErrors: false, \n                          breakOnSigint: true, \n                      }) \n                  ) \n                  callback(null, res) \n              } catch (error) { \n                  callback(error) \n              } finally { \n                  process.stdin.setRawMode(is_raw) \n              } \n          }, \n          writer(output) { \n              return util.inspect(output, { \n                  breakLength: process.stdout.columns, \n                  colors: true, \n                  compact: false, \n              }) \n          } \n      }) \n```", "```js\n      replServer.context.api = { \n          signup, \n          login, \n          logout, \n          getProfile, \n          changePassword, \n          deleteProfile, \n      } \n```", "```js\nnode server.js \n```", "```js\nnode client-repl.js\n```", "```js\n      api.signup('John', 'zxcvbnm') \n      api.login('John', 'zxcvbnm') \n      api.getProfile() \n      api.changePassword('newPwd') \n      api.logout() \n      api.login('John', 'incorrectPwd') \n```"]