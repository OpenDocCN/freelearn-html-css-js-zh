["```js\nvar Book = Backbone.Model.extend();\n```", "```js\n/**\n * This defines a book model.\n */Book = Backbone.Model.extend();\n```", "```js\n     bookNav: function() {\n         router.navigate('bookPage', {silent: true, trigger: true});\n    }\nvs.:\n     navigateSilentlyToBookPage: function() {\n         router.navigate('bookPage', {silent: true, trigger: true});\n    }\n```", "```js\n    example: function(router) {\n        this.model.set('counter', this.model.get('counter') + 1);\n        this.model.save();\n\n        this.siblingView.model = this.model;\n        this.siblingView.render();\n\n        var url = this.url();\n        router.navigate(url, {silent: true, trigger: false});\n    }\n```", "```js\n    incrementCounterAndSave: function() {\n        this.model.set('counter', this.model.get('counter') + 1);\n        this.model.save();\n    },\n    updateAndRenderSiblingView: function() {\n        this.siblingView.model = this.model;\n        this.siblingView.render();\n    },\n    refreshURL: function(router) {\n        var url = this.url();\n        router.navigate(url, {silent: true, trigger: false});\n    },\n    updateCounterAndRefresh: function(router) {\n        this.incrementAndSaveCounter();\n        this.updateAndRenderSiblingView();\n        this.refreshURL(router);\n    }\n```", "```js\nvar BookView = Backbone.View.extend({\n    initialize: function() {\n        this.bookModel = this.model;\n    }\n});\n```", "```js\n// This View takes a \"\"Book\"\" ModelBookView = Backbone.View.extend();\n```", "```js\n/**\n * This View takes a \"\"Book\"\" Model\n */BookView = Backbone.View.extend();\nWhen used this way throughout your code, these documentation sections form easy-to-read alternating blocks, making it trivial to skim through to what you're looking for without having to actually read the code in between:BookView = Backbone.View.extend({\n    /**\n     * This \"\"foo\"\" method does foo stuff\n     */\n    foo: function() {\n        doSomeFooStuff();\n    },\n    /*\n     * This \"\"bar\"\" method takes a \"\"Baz\"\" argument and does bar stuff\n     */\n    bar: function(baz) {\n        doBarStuffWith(baz);\n    }\n});\n```", "```js\n    /**\n     * This \"\"bar\"\" method takes a \"\"Baz\"\" argument and does bar stuff\n     */\n    bar: function(baz) {\n        doBarStuffWith(baz);\n    }\n```", "```js\n    /**\n     * Does bar stuff\n     * @param {Baz} baz this argument is used to do bar stuff\n     */\n    bar: function(baz) {\n        doBarStuffWith(baz);\n    }\n```", "```js\n/**\n  * This model represents a book in our application.\n  * @class\n  */\nvar Book = Backbone.Model({ ...\n```", "```js\n/**\n  * This model represents a book in our application.\n  * @param {object} attributes\n  * @param {string} attributes.title book's title\n  * @param {string} attributes.description description of the book\n  * @param {integer} attributes.pageLength number of pages\n  */Book = Backbone.Model({ ...\n```", "```js\n//     Backbone.js 1.1.2\n\n//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function(root, factory) {\n\n  // Set up Backbone appropriately for the environment. Start with AMD.\n  if (typeof define === 'function' && define.amd) {\n    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      root.Backbone = factory(root, exports, _, $);\n    });\n\n  // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n  } else if (typeof exports !== 'undefined') {\n    var _ = require('underscore');\n    factory(root, exports, _);\n\n  // Finally, as a browser global.\n  } else {\n    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));\n  }\n\n}(this, function(root, Backbone, _, $) {\n\n  // Initial Setup\n  // -------------\n\n  // Save the previous value of the `Backbone` variable, so that it can be\n  // restored later on, if `noConflict` is used.\n  var previousBackbone = root.Backbone;\n```"]