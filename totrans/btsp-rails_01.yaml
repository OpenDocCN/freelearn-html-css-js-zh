- en: Chapter 1. Introducing Web Application Development in Rails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Presenting your application in the best possible way has been the most important
    factor for every web developer for ages. In this mobile-first generation, we are
    forced to go with the wind and make our application compatible with Mobiles, Tables,
    PCs, and every possible display on Earth.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bootstrap** is the one stop solution for all woes that developers have been
    facing. It creates beautiful responsive designs without any extra efforts and
    without any advanced CSS knowledge. It is a true boon for every developer.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, and throughout the book, we will be focusing on how to beautify
    our Rails applications through the help of Bootstrap. In this chapter, we will
    create a basic Todo application with Rails. We will explore the folder structure
    of a Rails application and analyze which folders are important for templating
    a Rails Application. This will be helpful if you want to quickly revisit Rails
    concepts.
  prefs: []
  type: TYPE_NORMAL
- en: We will also see how to create views, link them, and also style them. The styling
    in this chapter will be done traditionally through the application's default CSS
    files. Finally, we will discuss how we can speed up the designing process using
    Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'In short, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Why Bootstrap with Rails?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Todo Application in Rails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing folder structure of a Rails application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling views using CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenges in traditionally styling a Rails Application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why Bootstrap with Rails?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rails is one the most popular Ruby frameworks which is currently at its peak,
    both in terms of demand and technology trend. With more than 3,100 members contributing
    to its development, and tens of thousands of applications already built using
    it, Rails has created a standard for every other framework in the Web today.
  prefs: []
  type: TYPE_NORMAL
- en: Rails was initially developed by David Heinemeier Hansson in 2003 to ease his
    own development process in Ruby. Later, he became generous enough to release Rails
    to the open source community. Today, it is popularly known as **Ruby on Rails**.
  prefs: []
  type: TYPE_NORMAL
- en: Rails shortens the development life cycle by moving the focus from reinventing
    the wheel to innovating new features. It is based on the convention of the configurations
    principle, which means that if you follow the Rails conventions, you would end
    up writing much less code than you would otherwise write.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap, on the other hand, is one of the most popular frontend development
    frameworks. It was initially developed at Twitter for some of its internal projects.
    It makes the life of a novice web developer easier by providing most of the reusable
    components that are already built and are ready to use. Bootstrap can be easily
    integrated with a Rails development environment through various methods. We can
    directly use the `.css` files provided by the framework, or can extend it through
    its Sass version and let Rails compile it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sass is a CSS preprocessor that brings logic and functionality into CSS. It
    includes features like variables, functions, mixins, and others. Using the Sass
    version of Bootstrap is a recommended method in Rails. It gives various options
    to customize Bootstrap's default styles easily.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap also provides various JavaScript components that can be used by those
    who don't have any real JavaScript knowledge. These components are required in
    almost every modern website being built today.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap with Rails is a deadly combination. You can build applications faster
    and invest more time to think about functionality, rather than rewrite codes.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Todo application in Rails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since this book is targeted for Rails developers, I assume that you already
    have basic knowledge of Rails development. You should also have Rails and Ruby
    installed in your machine to start with.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While writing this book, Ruby 2.1.1 and Rails 4.1.4 was used.
  prefs: []
  type: TYPE_NORMAL
- en: Let's first understand what this Todo application will do. Our application will
    allow us to create, update, and delete items from the Todo list. We will first
    analyze the folders that are created while scaffolding this application and which
    of them are necessary for templating the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s dip our feet into the water:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to select our workspace, which can be any folder inside your
    system. Let's create a folder named `Bootstrap_Rails_Project`. Now, open the terminal
    and navigate to this folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It''s time to create our Todo application. Write the following command to create
    a Rails application named `TODO`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will execute a series of various other commands that are necessary
    to create a Rails application. So, just wait for sometime before it stops executing
    all the codes. If you are using a newer version of Rails, then this command will
    also execute `bundle install` command at the end. Bundle install command is used
    to install other dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output for the preceding command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Todo application in Rails](img/7269OS_1_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you should have a new folder inside `Bootstrap_Rails_Project` named `TODO`,
    which was created by the preceding code. Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Todo application in Rails](img/7269OS_1_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Analyzing folder structure of a Rails application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s navigate to the `TODO` folder to check how our application''s folder
    structure looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing folder structure of a Rails application](img/7269OS_1_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let me explain to you some of the important folders here:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one is the `app` folder, which we will be focusing on the most throughout
    this book. All our application's content will be present inside this folder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assets` folder inside the `app` folder is the location to store all the
    static files like JavaScript, CSS, and Images. You can take a sneak peek inside
    them to look at the various files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `controllers` folder handles various requests and responses of the browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `helpers` folder contains various helper methods both for the `views` and
    `controllers`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next folder `mailers`, contains all the necessary files to send an e-mail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `models` folder contains files that interact with the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we have the `views` folder, which contains all the `.erb` files that
    will be complied to HTML files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, let''s start the Rails server and check out our application on the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the `TODO` folder in the terminal and then type the following command
    to start a server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also use the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see that the server is deployed under the port `3000`. So, type the
    following URL to view the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:3000`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also use the following URL: `http://0.0.0.0:3000`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your application is properly set up, you should see the default page of Rails
    in the browser:![Analyzing folder structure of a Rails application](img/7269OS_1_4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be using Rails'' scaffold method to create models, views, and other
    necessary files that Rails needs to make our application live. Here''s the set
    of tasks that our application should perform:'
  prefs: []
  type: TYPE_NORMAL
- en: It should list out the pending items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every task should be clickable, and the details related to that item should
    be seen in a new view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can edit that item's description and some other details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can delete that item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The task looks pretty lengthy, but any Rails developer would know how easy it
    is to do. We don't actually have to do anything to achieve it. We just have to
    pass a single scaffold command, and the rest will be taken care of.
  prefs: []
  type: TYPE_NORMAL
- en: 'Close the Rails server using *Ctrl* + *C* keys and then proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, navigate to the project folder in the terminal. Then, pass the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a new model called `todo` that has various fields like title,
    description, and completed. Each field has a type associated with it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Since we have created a new model, it has to be reflected in the database.
    So, let''s migrate it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will create a new table inside a new database with the associated
    fields.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s analyze what we have done. The scaffold command has created many HTML
    pages or views that are needed for managing the `todo` model. So, let''s check
    out our application. We need to start our server again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to the localhost page `http://localhost:3000` at port number `3000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should still see the Rails'' default page. Now, type the URL: `http://localhost:3000/todos`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see the application, as shown in the following screenshot:![Creating
    views](img/7269OS_1_5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **New Todo**, you will be taken to a form which allows you to fill
    out various fields that we had earlier created. Let's create our first todo and
    click on **submit**. It will be shown on the listing page:![Creating views](img/7269OS_1_6.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It was easy, wasn't it? We haven't done anything yet. That's the power of Rails,
    which people are crazy about.
  prefs: []
  type: TYPE_NORMAL
- en: Styling views using CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Obviously, the application doesn't look insanely great. The table that has been
    presented is extremely confusing and needs some CSS styling. So, let's proceed
    to style our Rails application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the application''s default CSS file to add and modify the styles:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Bootstrap_Rails_Project`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `TODO` folder; go to the `app` folder. Navigate to the `assets` folder.
    There you will find a folder named `stylesheets`. This folder contains all the
    CSS files of the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Currently, you will find three different files: `application.css`, `scaffold.css.scss`,
    and `todos.css.scss`. The first file is an application level CSS file. Anything
    you write inside it will be applied to the whole application. The next two files
    are Sass files. Rails uses SASS to apply styles to the application. These SASS
    files are compiled in the CSS files and included in the application on the go.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using a normal CSS file without any SASS to apply styles to our
    `Todo` application. Let''s first proceed and analyze the HTML source code of our
    application. The screenshot is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling views using CSS](img/7269OS_1_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that all the CSS files are loaded alphabetically here. This can
    be a serious problem where overriding CSS is concerned. We want our CSS file to
    be at the end. This will allow us to override the application level styles at
    some places in future.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s rearrange the CSS files here.To do so, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `application.css` file using a text editor. There you can see some
    code lines with `require_` as their prefix. We need to tweak them a bit in order
    to get the desired result, as shown here:![Styling views using CSS](img/7269OS_1_8.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's create a new CSS file named `styles.css` in the same `stylesheets` folder.
    Now come back to the `application.css` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the following line from the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding line was telling Rails to include all the CSS files in alphabetical
    order.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, add the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding line will include `styles.css` in the application. Ensure that
    `application.css` looks as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Styling views using CSS](img/7269OS_1_9.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The `require_self` command includes the `application.css` file in the application.
    If we inspect the HTML source file now, we should see that there are only two
    CSS files included: `application.css` and `styles.css`. Hence, we are now safe
    to write CSS styles for the application.'
  prefs: []
  type: TYPE_NORMAL
- en: Redesigning the Todo application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, We will write all the CSS files to redesign without the use
    of any framework. This will help us to better understand the amount of CSS code
    we have to write at the end for styling simple links and other HTML elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to redesign our existing Todo application to something that looks
    like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Redesigning the Todo application](img/7269OS_1_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot displays the redesigned version of the home page.
    As you can see, the list of TODO activities are now displayed properly in the
    middle of the screen inside a table-like structure. Even the action links (Show,
    Edit, and Destroy) have been redesigned to look like 3D buttons. Let''s look at
    the redesigned version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Redesigning the Todo application](img/7269OS_1_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot displays the redesigned version of the `New Todo`
    page. The form has been redesigned and a background color has been applied to
    it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Redesigning the Todo application](img/7269OS_1_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot shows the redesigned version of the `Edit TODO` screen,
    which is the same as the `New Todo` screen. The only difference here is the auto
    fill feature that fills the fields as per the data available in the database.
    The input fields are more spacious with a bigger font size for properly displaying
    the text contained in them. Let''s see the screenshot of the `View Todo` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Redesigning the Todo application](img/7269OS_1_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot displays the redesigned version of the `View Todo`
    page. We have kept this page simple and clear for better readability. In all the
    pages, we have centered the content of the website.
  prefs: []
  type: TYPE_NORMAL
- en: Oh! That's lots of designing! Don't worry. We will get through it easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is generally considered as a good practice to organize the designing process
    before jumping into it. In our Todo application, we have three different views:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Home page to list out all Todos: This is at `http://localhost:3000/todos`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New Todo forms and Edit Todo forms: They both are the same view, which is reachable
    through two different types of URLs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Show View Todo: It displays particular TODO details'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s begin by styling the Homepage:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `styles.css`, which we have recently created. All the styles that we are
    going to write should be written in this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will first clear the browser default margin and padding using the universal
    selector in CSS (*). So, our CSS for this will be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s style the title of the page first. If you check out the HTML source
    code of the page, you will see that it is an `H1` element. So, our CSS for this
    will be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code makes the title appear in the center of the page. It also
    adds a light blue color to it. We have also created some space around it using
    the padding property of CSS. Refresh your page to verify it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It''s time to decorate the `table` element. Our CSS for it will be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code makes the table position to the center of the browser. First,
    we applied a width of `800px` to it and then we applied an auto positioned margin
    to it. Since the browser now knows the width of the table element, it will automatically
    divide the extra space on each side of it. This will make our table centered to
    the browser screen. The last property, `text-align` is used to align the text
    present inside the table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s apply some more styles to the elements present inside the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding CSS code, we have applied styles to the `td` and `th` elements
    of the table element. We created some space around the text using padding. We
    also applied a border to each cell. It is a solid border of `1px` width and color
    `#888888`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It''s time to design the application''s links. We will try to make them appear
    like a button so that it appears more clickable. Our CSS for it will be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Links `<a>` are inline HTML elements. Hence in the first line, we have made
    it look like a block-level element using the `display` property. Now, we can apply
    width and margin to it. Just like we did to our table element; we will also apply
    a particular width and make all the links appear centered to their parent elements.
    We have also applied a padding of `5px` to create space around the link text.
  prefs: []
  type: TYPE_NORMAL
- en: To color the links, we applied background to it, and to make the text appear
    more distinct in this background, we applied a color property to it. We have also
    played with the shadow of the button to make it appear more 3D.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to refresh the browser screen to see the changes we are continuously
    applying. Hope you are enjoying the process of designing the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have finally designed the home screen. The form is still not styled! Let''s
    do it now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the `New Todo` file and let''s style it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We applied proper width to the form and made it appear at the center of the
    screen. We have also given a decent background color to it. Padding and border
    is also applied to make it look more spacious and flat.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we have to design the labels and input fields. If you check out the HTML
    source of this page, you will see that every label, and its associated input field,
    is wrapped inside a `div` which has a `field` class. Remember that these classes
    and the HTML structures are not written by us. These have been autogenerated by
    Rails. We are just working with the CSS file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we will use the `field` class to apply style to the elements present inside
    the `New Todo` view. Here we will design the label, input field, and `textarea`
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We applied a decent space inside the `field` with `div` element. Here, we have
    give two different values to the padding property. The first value is for creating
    spaces to the top and bottom, whereas the next value will be used for the left
    and right side.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we applied style to the label element of the `field` element. We have
    made it appear bold using the `font-weight` property. Lastly, we gave both the
    input fields and `textarea` the same set of CSS styles. We made them look spacious
    using padding. A border property is applied to get rid of the browser default
    border around the input and textarea elements. We also applied border-radius to
    make the corners a little rounded. Finally, we fixed the width of both the textarea
    and input elements so that they appear properly aligned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It''s time to design the last element in this HTML page, the `Create Todo`
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Most of the CSS styles that we applied here are similar to what we have applied
    to the input and textarea element. Here, we have added two extra properties, `background`
    and `color` to make it look different and stand out properly in the form.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We have successfully designed the `New Todo` and `Edit Todo` pages. We are now
    only left with the `Show Todo` page. So, without any further delay, let's first
    check out the page. Click on the **Show** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Most of the content is already styled by us. We are only left with designing
    the text on this page, the code is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We applied a fixed width to the `p` element and made it appear to the center
    of the screen using the margin property. We also applied a decent font size to
    them. Now, let's separate them from each other using the margin and padding properties.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This page is also shown after the `New Todo` or `Edit Todo` pages with a notice
    at the top. This element has an `id` element, which is used to show the status,
    whether a new `todo` was successfully created or an existing `todo` was successfully
    updated. Using CSS, we have applied style to it. Make sure that you are not giving
    any space between `p` and `#notice` in the preceding CSS code. We are targeting
    the `p` tag, which has an id, `#notice`, so spaces shouldn't be present between
    the selectors.
  prefs: []
  type: TYPE_NORMAL
- en: Congrats! We have successfully completed designing the whole application.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges in styling a Rails application traditionally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The application which we have created was so basic that we did not write a single
    line of code for its logic part. We didn't even touch the HTML layout of the application.
    You have seen how complex the CSS styling can be at some places, such as designing
    a link. The CSS which we have written here is very poorly organized. We have a
    target element level selector at many places to apply styles to them. This is
    considered as a very poor way of designing.
  prefs: []
  type: TYPE_NORMAL
- en: Our CSS code was not segregated into various, smaller parts. All the styles
    were written directly in one file, `styles.css`. In the coming chapters, we will
    see how we can use SASS to apply styles to our Rails applications. Using SASS,
    we can bring logic to the CSS codes.
  prefs: []
  type: TYPE_NORMAL
- en: We will also overcome the difficulties of styling each and every element in
    our Rails application using Bootstrap. You will realize how easy it can become
    for a Non-CSS developer to design a high-end application using Bootstrap. You
    won't write a single piece of CSS code when using Bootstrap. Its developers have
    written a bunch of CSS codes for you.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main intention of this chapter, was to brief you on how to develop and design
    a simple Rails application without the help of any CSS frontend frameworks. We
    manually styled the application by creating an external CSS file `styles.css`
    and importing it into the application using another CSS file `application.css`.
    We also discussed the complexities that a novice web designer might face on directly
    styling the application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will get our hands dirty with Bootstrap. We will learn
    what it is, and how it can help to design a Rails application quickly. We will
    also learn how to integrate Bootstrap with the Rails application.
  prefs: []
  type: TYPE_NORMAL
