- en: Chapter 2. Getting Skype to Work for You
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：让Skype为你工作
- en: '**Skype** ( [http://www.skype.com](http://www.skype.com) ) is an awesome piece
    of software and a reliable platform that is used by millions of people worldwide
    in order to make calls, organize meetings, and chat with each other. It is used
    for both personal communication as well as for business.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Skype** ([http://www.skype.com](http://www.skype.com)) 是一款出色的软件和可靠的平台，被全球数百万用户使用，用于打电话、组织会议和相互聊天。它既用于个人通信，也用于商业用途。'
- en: One of the great things about Skype is that it allows you make free peer-to-peer
    VoIP calls with any other user that also has a Skype account. It also allows you
    to call phone numbers at very cheap rates and even for free to some locations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Skype的其中一个优点是它允许你与其他任何拥有Skype账户的用户进行免费的点对点VoIP通话。它还允许你以非常低廉的费率甚至免费拨打某些地区的电话号码。
- en: Besides that, Skype can also allow you to receive incoming calls on a real phone
    number or divert them to become text messages. It also allows message forwarding,
    conferencing, group chatting, file transferring, remote desktop presentation,
    viewing, and many other features.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Skype还可以让你通过真实电话号码接收来电或将它们转接为短信。它还允许消息转发、会议、群聊、文件传输、远程桌面演示、查看以及许多其他功能。
- en: So far, it sounds like Skype is a great communication platform, and it is. But
    what about using Skype as an automated agent that can help to get some work done
    and could automate some business processes, in order to make our lives easier?
    Is this even possible?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，听起来Skype是一个出色的通信平台，确实如此。但如果我们把Skype用作一个自动化的代理，可以帮助完成一些工作并自动化一些业务流程，以便让我们的生活更轻松，这又是可能的吗？这是否可行？
- en: The good news is that, indeed, it is possible. Skype is now part of Microsoft
    ([https://www.microsoft.com/en-in](https://www.microsoft.com/en-in)/) and, recently,
    at the build developer's event, a framework for creating interactive bots with
    Skype was unveiled. Skype already has a set of cool and extremely useful APIs,
    which make it relatively easy for developers to interact with the service, and
    is great for all sorts of voice and chat-related applications. However, it does
    not have an API that is solely focused on interactive messaging automation and
    this is where the **Bot Framework** ( [https://dev.botframework.com](https://dev.botframework.com)
    ) comes in to fill the void.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，这确实可能。Skype现在是微软的一部分 ([https://www.microsoft.com/en-in](https://www.microsoft.com/en-in)/)，最近在开发者大会上，推出了用于创建Skype交互式机器人的框架。Skype已经有一套酷炫且极其有用的API，这使得开发者与该服务交互相对容易，非常适合各种语音和聊天相关应用。然而，它没有专注于交互式消息自动化的API，这就是**Bot
    Framework** ([https://dev.botframework.com](https://dev.botframework.com)) 出现填补空白的地方。
- en: In this chapter, we'll explore how to use this framework in order to build a
    Skype bot that acts like a virtual **Human Resources** (**HR**) assistant, which
    should be able to provide information about vacation days, notice periods, and
    other HR-related queries.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何使用这个框架来构建一个像虚拟**人力资源**（**HR**）助手一样的Skype机器人，它应该能够提供有关休假天数、通知期以及其他与人力资源相关查询的信息。
- en: Sounds like a lot of fun! Let's get started.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很有趣！让我们开始吧。
- en: How a Skype bot works
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用Skype机器人
- en: A Skype bot is, in essence, just another Skype contact; the difference is that,
    instead of talking to another person, it's an automated process that knows how
    to reply to the input you provide. Bots can do many things, such as fetch the
    news, check the weather, retrieve photos or information from websites, start a
    game, or order food or a taxi for you.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，Skype机器人只是另一个Skype联系人；区别在于，它不是与另一个人交谈，而是一个知道如何回复你提供的输入的自动化过程。机器人可以做很多事情，比如获取新闻、查看天气、从网站检索照片或信息、开始游戏，或者为你订购食物或出租车。
- en: Anything that can be turned into a service can be converted into an automated
    conversation by using a bot. With Skype, bots can have interactive conversations
    on nearly every platform, at any time, and from anywhere.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可以转化为服务的东西都可以通过使用机器人转化为自动对话。使用Skype，机器人几乎可以在任何平台、任何时间、从任何地方进行交互式对话。
- en: Users can send a Skype bot request, and your bot can send back meaningful feedback
    based on the content received. A Skype bot can also be part of a group conversation
    and send details to all the parties involved in that group.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以发送Skype机器人请求，你的机器人可以根据接收到的内容发送有意义的反馈。Skype机器人也可以是群聊的一部分，并将详细信息发送给该群组中的所有相关人员。
- en: The way a Skype bot technically works is that it connects and listens to the
    bot platform using the Skype bot API directly, or using the C# or Node.js SDK.
    We'll obviously focus our attention on the Node.js SDK.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度来看，Skype 机器人的工作方式是它直接通过 Skype 机器人 API 或使用 C# 或 Node.js SDK 连接到并监听机器人平台。显然，我们将重点关注
    Node.js SDK。
- en: When a user sends a message to your Skype bot, we route this activity to a **Webhook**
    ( [https://en.wikipedia.org/wiki/Webhook](https://en.wikipedia.org/wiki/Webhook)
    ) that is defined for the bot. The bot then sends replies back to the bot platform,
    which passes them on to the user. The Webhooks (which are valid public URLs-HTTP
    Messaging endpoints) will typically run on a cloud service such as **Microsoft**
    **Azure** ( [https://azure.microsoft.com](https://azure.microsoft.com) ).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户向您的 Skype 机器人发送消息时，我们将此活动路由到为机器人定义的 **Webhook** ([https://en.wikipedia.org/wiki/Webhook](https://en.wikipedia.org/wiki/Webhook))。然后机器人将回复发送回机器人平台，平台再将它们传递给用户。Webhooks（有效的公共
    URL-HTTP 消息端点）通常运行在云服务上，例如 **Microsoft Azure** ([https://azure.microsoft.com](https://azure.microsoft.com))。
- en: 'Webhooks are called with JSON-formatted requests. Every JSON object indicates
    some update and looks like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Webhooks 使用 JSON 格式的请求调用。每个 JSON 对象都表示某种更新，其外观如下：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In essence, a bot goes through various stages. Initially the bot can be added
    to a limited number of users for development, which allows the bot details to
    be edited, and also allows for previewing features such as group chat or calling.
    In the example we will build in this chapter, we will focus on chatting (text
    interaction) and not calling, but it is useful to know that this feature is also
    possible. Here are the stages:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，机器人会经历各种阶段。最初，机器人可以添加到有限数量的用户中进行开发，这允许编辑机器人详细信息，并允许预览功能，如群聊或呼叫。在本章的示例中，我们将专注于聊天（文本交互）而不是呼叫，但了解此功能也是可能的。以下是阶段：
- en: Bot creation/editing (initial stage)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器人创建/编辑（初始阶段）
- en: Bot review
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器人审查
- en: Bot published
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器人发布
- en: Following the creation or editing stage is the review stage, which is just before
    publishing your bot. Once in review, you cannot edit the attributes of your bot
    on the portal (such as its name and other properties). It is important to note
    that a bot cannot be submitted using preview features such as group chat or calling.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建或编辑阶段之后是审查阶段，它就在发布您的机器人之前。一旦进入审查状态，您就不能在门户上编辑机器人的属性（如名称和其他属性）。重要的是要注意，机器人不能使用预览功能（如群聊或呼叫）提交。
- en: Once the review of the bot has been accepted, it goes into the published stage.
    At this point in time, the bot can be added by any number of users via the bot
    URL link or button.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦机器人的审查被接受，它就会进入发布阶段。在这个时候，任何数量的用户都可以通过机器人 URL 链接或按钮添加机器人。
- en: Finally, soon after it has been published, the bot is then shown in the Skype
    bot directory.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在发布后不久，机器人就会显示在 Skype 机器人目录中。
- en: Wiring up our Skype bot
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接我们的 Skype 机器人
- en: With the theory behind us, let's now dig into the details of how we can start
    using the Bot Framework with Node.js in order to create our Skype HR bot.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握理论之后，我们现在深入探讨如何使用 Node.js 和 Bot Framework 开始创建我们的 Skype HR 机器人的细节。
- en: In the previous chapter, we saw how to get Node.js installed and also how to
    deploy our Twilio example to Azure website. For our Skype bot, we'll follow a
    very similar process.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了如何安装 Node.js 以及如何将我们的 Twilio 示例部署到 Azure 网站。对于我们的 Skype 机器人，我们将遵循一个非常类似的过程。
- en: 'Let''s first start by creating a folder in our local drive from the Command
    Prompt in order to store our bot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先从命令提示符创建一个本地驱动器文件夹，以便存储我们的机器人：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Assuming we have Node.js and npm installed (if not, please refer to the steps
    in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. The Rise of Bots – Getting
    the Message Across") , *The Rise of Bots – Getting the Message Across*), let''s
    create and initialize our `package.json`, which will store our bot''s dependencies
    and definitions:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经安装了 Node.js 和 npm（如果没有，请参考[第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。机器人的崛起——信息传递")中的步骤，*机器人的崛起——信息传递*)，让我们创建并初始化我们的
    `package.json` 文件，该文件将存储我们的机器人依赖项和定义：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When you go through the `npm init` options (which are very easy to follow),
    you''ll see something similar to this. In some cases you might get an `index.js`
    file created; however, going forward, we''ll instead use the name `app.js` as
    shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当您通过 `npm init` 选项（非常容易遵循）时，您会看到类似的内容。在某些情况下，您可能会创建一个 `index.js` 文件；然而，从现在开始，我们将使用以下截图所示的名称
    `app.js`：
- en: '![Wiring up our Skype bot](img/image00175.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![连接我们的Skype机器人](img/image00175.jpeg)'
- en: 'In your project folder, you''ll see the result, which is your `package.json`
    file:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的项目文件夹中，您将看到结果，即您的`package.json`文件：
- en: '![Wiring up our Skype bot](img/image00176.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![连接我们的Skype机器人](img/image00176.jpeg)'
- en: 'Just like we did in our previous example, we will use **Express** ( [http://expressjs.com](http://expressjs.com)
    ) as our **REST** Node.js framework. We''ll install it and save it to our `package.json`
    file, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在之前的例子中所做的那样，我们将使用**Express**（[http://expressjs.com](http://expressjs.com)）作为我们的**REST**
    Node.js框架。我们将安装它并将其保存到我们的`package.json`文件中，如下所示：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once Express has been installed, you should see something like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Express安装完成，你应该会看到类似以下内容：
- en: '![Wiring up our Skype bot](img/image00177.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![连接我们的Skype机器人](img/image00177.jpeg)'
- en: With Express set up, the next thing to do is to install the `BotBuilder` package,
    which corresponds to the Microsoft Bot Framework Node.js library. Let's do that
    now.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好Express之后，接下来要做的事情是安装`BotBuilder`包，这对应于Microsoft Bot Framework Node.js库。我们现在就来做这件事。
- en: 'In order to install it, run this `npm` command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装它，运行以下`npm`命令：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After `BotBuilder` has been installed, you should see in your command line
    a result similar to the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在`BotBuilder`安装完成后，您应该在命令行中看到类似于以下截图的结果：
- en: '![Wiring up our Skype bot](img/image00178.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![连接我们的Skype机器人](img/image00178.jpeg)'
- en: 'Your `package.json` should then look similar to mine, as shown in the following
    screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`package.json`应该看起来像我下面的截图所示：
- en: '![Wiring up our Skype bot](img/image00179.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![连接我们的Skype机器人](img/image00179.jpeg)'
- en: With our bot all wired up, we can then focus on creating the Express endpoints
    and core logic.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的机器人全部连接好之后，我们就可以专注于创建Express端点和核心逻辑。
- en: Let's create our `app.js` file, which will be the entry point to our bot. You
    can create the `app.js` file by using the applicable menu option in the editor
    of your choice.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的`app.js`文件，这将是我们的机器人的入口点。您可以通过在您选择的编辑器中使用的相应菜单选项来创建`app.js`文件。
- en: 'Our Skype skeleton bot `app.js` should look like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Skype机器人骨架`app.js`应该看起来像这样：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now let''s break this into smaller chunks. The first thing we do is to reference
    the Bot Framework we previously installed using npm:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将其分解成更小的部分。我们首先做的事情是使用npm引用我们之前安装的Bot Framework：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once we''ve indicated this, we need to reference the Express framework, as
    follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们指明了这一点，我们需要引用Express框架，如下所示：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once we have our references all set up, we can proceed to create the `botService`
    object and wire it up an `HTTP POST` endpoint, hosted on Azure websites, which
    the Skype bot service will push incoming messages to for our bot to reply to.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置好所有引用，我们就可以继续创建`botService`对象并将其连接到Azure网站上托管的`HTTP POST`端点，Skype机器人服务将推送传入的消息到该端点以便我们的机器人进行回复。
- en: Please note that the `botService` object requires `APP_ID` and `APP_SECRET`
    variables that we will get from the Bot Framework once we have registered it with
    on the bot developer portal, for which we will go through the steps shortly.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`botService`对象需要`APP_ID`和`APP_SECRET`变量，我们将在将机器人注册到机器人开发者门户后从Bot Framework获取这些变量，我们将很快进行这些步骤。
- en: 'The `botService` object is created as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`botService`对象创建如下：'
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With the `botService` object created, it needs to be wired up so that the Skype
    bot knows where to `POST` the incoming message requests, so they can be processed
    by the bot. This is achieved by adding this to `app.js`, as shown in the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建好`botService`对象后，需要将其连接起来，以便Skype机器人知道在哪里`POST`传入的消息请求，以便它们可以被机器人处理。这是通过在`app.js`中添加以下内容来实现的，如下所示：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This basically registers the `botService` object on the publicly accessible
    `/api/messages` HTTP endpoint exposed through the Azure website where this Node.js
    will be running. Finally, the Node.js app is exposed by listening on the port
    `process.env.port` as follows, by adding this to `app.js`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是在Azure网站上公开可访问的`/api/messages` HTTP端点上注册了`botService`对象。最后，通过在`app.js`中添加以下内容，Node.js应用程序通过监听`process.env.port`端口来公开：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Registering our Skype bot app
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册我们的Skype机器人应用程序
- en: 'In order to for this to work, we''ll need to register our bot within the Bot
    Framework Developer Portal. In order to do this, sign in with your Microsoft account
    at  [https://dev.botframework.com/](https://dev.botframework.com/) . You''ll be
    presented with this screen:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这生效，我们需要在我们的Bot Framework开发者门户内注册我们的机器人。为了做到这一点，请使用您的Microsoft账户登录到[https://dev.botframework.com/](https://dev.botframework.com/)。您将看到以下屏幕：
- en: '![Registering our Skype bot app](img/image00180.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的Skype机器人应用程序](img/image00180.jpeg)'
- en: 'Click on the **Register a bot** option in order to create and register your
    Skype bot. Once you''ve done that, you''ll see the following screen:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**注册机器人**选项以创建和注册您的Skype机器人。一旦完成，您将看到以下屏幕：
- en: '![Registering our Skype bot app](img/image00181.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的Skype机器人应用](img/image00181.jpeg)'
- en: As you can see, there are three basic fields that are mandatory. The first field
    represents the bot's name, which will be used to identify the bot within the bot
    directory (if we later decide to make it public). It cannot be longer than 35
    characters.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，有三个基本字段是必填的。第一个字段代表机器人的名称，它将用于在机器人目录中识别机器人（如果我们后来决定使其公开）。它不能超过35个字符。
- en: The second field is the bot's handle, which will be used as part of the bot's
    public URL. It only allows alphanumeric and underscore characters, and it cannot
    be changed after registration.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个字段是机器人的句柄，它将用作机器人公开URL的一部分。它只允许字母数字和下划线字符，并且注册后不能更改。
- en: The third field is the bot's description. The first 46 characters are displayed
    on the bot's card on the bot directory and the rest of the description is displayed
    under the bot's details.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个字段是机器人的描述。前46个字符显示在机器人目录中的机器人卡片上，其余的描述显示在机器人详情下方。
- en: 'If we scroll down the page, we can see that we are also being asked to enter
    a Messaging endpoint and an App ID. Let''s add some details to our bot. Refer
    to the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们向下滚动页面，我们可以看到我们还被要求输入消息端点和应用ID。让我们为我们的机器人添加一些详细信息。请参考以下截图：
- en: '![Registering our Skype bot app](img/image00182.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的Skype机器人应用](img/image00182.jpeg)'
- en: So far, we've added the three initial fields required for our bot. In this case,
    we'll use the name `NodeJsPacktSkypeBot`; however, you can use any other unique
    name. I recommend using the same name for both the **Name** and **Bot handle**
    fields.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经添加了机器人所需的三个初始字段。在这种情况下，我们将使用名称`NodeJsPacktSkypeBot`；然而，您可以使用任何其他唯一的名称。我建议在**名称**和**机器人句柄**字段中使用相同的名称。
- en: 'So let''s scroll down and carry on, in order to add the other required details:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们向下滚动并继续，以便添加其他所需的详细信息：
- en: '![Registering our Skype bot app](img/image00183.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的Skype机器人应用](img/image00183.jpeg)'
- en: Next we need to add the Messaging endpoint and add the App ID for our bot. So
    let's click on the **Create Microsoft App ID and password** button in order to
    get the required App ID.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要添加消息端点和添加机器人的应用ID。因此，让我们点击**创建Microsoft应用ID和密码**按钮以获取所需的App ID。
- en: 'Once we do this, we get the following result:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这样做，我们将得到以下结果：
- en: '![Registering our Skype bot app](img/image00184.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的Skype机器人应用](img/image00184.jpeg)'
- en: 'The next thing we need to do is to click on the **Generate an app password
    to continue** button. Once you do that, you''ll see the following screen:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要做的是点击**生成应用密码以继续**按钮。一旦完成，您将看到以下屏幕：
- en: '![Registering our Skype bot app](img/image00185.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的Skype机器人应用](img/image00185.jpeg)'
- en: 'Immediately after, click on the **Ok** button, and this will take you back
    to the **Generate App ID** and password screen. Once there, click on the **Finish
    and go back to Bot Framework** button:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 立即点击**确定**按钮，这将带您回到**生成应用ID**和密码的屏幕。一旦到达那里，点击**完成并返回Bot Framework**按钮：
- en: '![Registering our Skype bot app](img/image00186.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的Skype机器人应用](img/image00186.jpeg)'
- en: 'Once you have done that, you''ll be back at the main registration screen. The
    only missing details will be the **Messaging endpoint** and the **Owners** e-mail
    address fields, as shown in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，您将回到主注册屏幕。唯一缺少的细节将是**消息端点**和**所有者电子邮件地址**字段，如下面的截图所示：
- en: '![Registering our Skype bot app](img/image00187.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的Skype机器人应用](img/image00187.jpeg)'
- en: For now, let's leave this as it is (we'll come back to this screen later) because,
    first, we need to deploy our bot to Azure.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们保持现状（我们稍后会回到这个屏幕），因为首先，我们需要将我们的机器人部署到Azure。
- en: Just like we did in the previous chapter, we can deploy our solution to Azure
    websites and host our messaging endpoint there. So, before we actually fill in
    the URL for our Messaging endpoint, let's deploy and push our Skype bot code to
    Azure websites in order to get a publicly accessible URL.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在上一章中所做的那样，我们可以将我们的解决方案部署到Azure网站并在此处托管消息端点。因此，在我们实际填写消息端点的URL之前，让我们将我们的Skype机器人代码部署并推送到Azure网站以获取一个公开可访问的URL。
- en: 'Assuming you have your Azure account set up and ready (if not please refer
    to [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. The Rise of Bots – Getting
    the Message Across") , *The Rise of Bots – Getting the Message Across*, for details
    on how to do this), log in to Azure by executing the following instruction from
    the Command Prompt:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经设置了准备好的Azure账户（如果没有，请参阅[第1章](part0015.xhtml#aid-E9OE1 "第1章。机器人的崛起——信息传递")，*机器人的崛起——信息传递*，了解如何进行此操作），通过在命令提示符中执行以下指令登录Azure：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once that has been done and the credentials provided, you will see a screen
    similar to the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成并提供了凭证，你将看到一个类似于以下截图的屏幕：
- en: '![Registering our Skype bot app](img/image00188.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的Skype机器人应用](img/image00188.jpeg)'
- en: 'Open your browser and enter the URL mentioned on the console response. Then
    enter the code you have been provided with. Once you have done that, you will
    see the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的浏览器并输入控制台响应中提到的URL。然后输入你提供的代码。一旦完成，你将看到以下内容：
- en: '![Registering our Skype bot app](img/image00189.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的Skype机器人应用](img/image00189.jpeg)'
- en: This means that you have successfully logged on to Azure using the command line.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你已经成功使用命令行登录到Azure。
- en: 'The next thing to do is to actually create the Azure website service that will
    host the Skype bot code; this can be done by running this command from the prompt:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步要做的是实际创建将托管Skype机器人代码的Azure网站服务；这可以通过在提示符中运行以下命令来完成：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When you execute this command, you will be asked to choose the Azure region
    to which you wish to deploy the bot, as shown in the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当你执行此命令时，你将被要求选择要将机器人部署到的Azure区域，如下截图所示：
- en: '![Registering our Skype bot app](img/image00190.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的Skype机器人应用](img/image00190.jpeg)'
- en: 'Select the region that is closest to where you are located by typing in the
    appropriate number. After this has been done, you''ll see the following information,
    indicating that the site has been successfully created:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入适当的数字选择离你最近的地域。完成此操作后，你将看到以下信息，表明网站已成功创建：
- en: '![Registering our Skype bot app](img/image00191.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的Skype机器人应用](img/image00191.jpeg)'
- en: Before deploying the bot's code to Azure, first log in to the **Azure Portal**
    ( [http://portal.azure.com](http://portal.azure.com) ) with your account, and
    specify an **FTP/deployment** username and **password**.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在将机器人的代码部署到Azure之前，首先使用你的账户登录到**Azure门户**（[http://portal.azure.com](http://portal.azure.com)），并指定**FTP/部署**用户名和**密码**。
- en: 'This can be done by going into **All resources**, selecting the **nodeskypehrbotsite**,
    then opening the **Deployment credentials** blade, and, finally, entering the
    **FTP/deployment username** and **Password**, as seen in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过进入**所有资源**，选择**nodeskypehrbotsite**，然后打开**部署凭证**刀片，最后输入**FTP/部署用户名**和**密码**来完成，如下截图所示：
- en: Once the username and password have been entered, click on the **Save** button
    at the top of the blade.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦输入了用户名和密码，点击刀片顶部**保存**按钮。
- en: '![Registering our Skype bot app](img/image00192.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的Skype机器人应用](img/image00192.jpeg)'
- en: 'Once this has been done, wait for a couple of minutes. Then we can deploy the
    code to Azure websites as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，等待几分钟。然后我们可以按照以下方式将代码部署到Azure网站：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once these commands have been executed, the bot''s code will be deployed to
    the Azure website and you should see some responses similar to the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行了这些命令，机器人的代码将被部署到Azure网站，你应该会看到一些类似于以下响应：
- en: '![Registering our Skype bot app](img/image00193.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的Skype机器人应用](img/image00193.jpeg)'
- en: With our site deployed, we can finally get the publicly accessible URL, which
    in our case will be `https://nodeskypehrbotsite.azurewebsites.net/api/messages`,
    given that in our code we have defined a `POST` endpoint that our bot will be
    listening on.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的网站部署后，我们最终可以得到公开可访问的URL，在我们的例子中将是`https://nodeskypehrbotsite.azurewebsites.net/api/messages`，前提是在我们的代码中我们定义了一个机器人将监听的`POST`端点。
- en: This is the URL that we need to specify as the **Messaging endpoint**.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们需要指定为**消息端点**的URL。
- en: 'We can then go back to the bot **Registration** website screen where we recently
    entered the bot''s APP ID and we can now enter the **Messaging endpoint**, as
    shown in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以回到我们最近输入了机器人APP ID的机器人**注册**网站屏幕，现在我们可以输入**消息端点**，如下截图所示：
- en: '![Registering our Skype bot app](img/image00194.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的Skype机器人应用](img/image00194.jpeg)'
- en: 'Make sure to check the option for **Privacy statement**, **Terms of use**,
    and **Code of conduct**, then click on the **Register** button, as shown in the
    following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 确保勾选 **隐私声明**、**使用条款** 和 **行为准则** 的选项，然后点击 **注册** 按钮，如下面的截图所示：
- en: '![Registering our Skype bot app](img/image00195.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的 Skype 机器人应用](img/image00195.jpeg)'
- en: 'Once you have clicked on the **Register** button, you''ll receive a popup dialog
    that will say that the bot has been created, as shown in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你点击了 **注册** 按钮，你会收到一个弹出对话框，它会说机器人已经创建，如下面的截图所示：
- en: '![Registering our Skype bot app](img/image00196.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的 Skype 机器人应用](img/image00196.jpeg)'
- en: 'Click on the **OK** button in order to continue. Once you have clicked on **OK**,
    then you''ll be redirected to the following web page:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **确定** 按钮继续。一旦你点击了 **确定**，你将被重定向到以下网页：
- en: '![Registering our Skype bot app](img/image00197.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的 Skype 机器人应用](img/image00197.jpeg)'
- en: There, you can quickly test the connection to the bot by clicking on the **Test**
    button.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在那里，你可以通过点击 **测试** 按钮快速测试与机器人的连接。
- en: As we don't want to make the bot public, there is no need to **Publish** it
    to the Skype bot directory.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不希望将机器人公开，因此没有必要将其 **发布** 到 Skype 机器人目录。
- en: 'If you scroll down a bit, you''ll find the channels that are enabled by default.
    One of them is **Skype**, as shown in the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你向下滚动一点，你会找到默认启用的通道。其中之一是 **Skype**，如下面的截图所示：
- en: '![Registering our Skype bot app](img/image00198.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的 Skype 机器人应用](img/image00198.jpeg)'
- en: 'Let''s go ahead and click on the **Add to Skype** button in order to add the
    bot to our Skype contact list. Once we do that, a new browser tab or window will
    open, and we''ll be presented with the following screen:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们点击 **添加到 Skype** 按钮来将机器人添加到我们的 Skype 联系人列表。一旦我们这样做，就会打开一个新的浏览器标签页或窗口，我们将看到以下屏幕：
- en: '![Registering our Skype bot app](img/image00199.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的 Skype 机器人应用](img/image00199.jpeg)'
- en: In order to add the bot to Skype, click on the **Add to Contacts** button. This
    will launch the Skype application and add it to our contacts list.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将机器人添加到 Skype，点击 **添加到联系人** 按钮。这将启动 Skype 应用程序并将其添加到我们的联系人列表中。
- en: If your Skype account is not the same as your Azure account (and if you are
    logged on with your Azure account), then it will be requested that you sign out
    and then sign in with your Skype account, in order to add the bot to your contacts
    list.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 Skype 账户与你的 Azure 账户不同（并且如果你使用 Azure 账户登录），那么将要求你注销，然后使用你的 Skype 账户登录，以便将机器人添加到你的联系人列表中。
- en: With all the setup behind us, let's modify our code in order to add our bot
    ID, Application ID, and application secret. The bot ID and the Application ID
    that we'll need to add to our code are the same, which is the one entered when
    registering the bot. Once we've done this, we can re-publish it to Azure websites
    and test it.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成所有设置之后，让我们修改我们的代码，以添加我们的机器人 ID、应用程序 ID 和应用程序密钥。我们需要添加到代码中的机器人 ID 和应用程序 ID
    是相同的，即注册机器人时输入的那个。一旦我们完成这个步骤，我们就可以将其重新发布到 Azure 网站，并对其进行测试。
- en: 'Our Skype bot `app.js` should now look like this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们 Skype 机器人的 `app.js` 应该现在看起来像这样：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If we publish the changes to Azure websites and have added our bot to our Skype
    contacts list, using the URL indicated by the label **Add to Skype**, we should
    see the following when we send a message to it.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将更改发布到 Azure 网站，并将我们的机器人添加到 Skype 联系人列表中，使用标签 **添加到 Skype** 指示的 URL，当我们向它发送消息时，我们应该看到以下内容。
- en: The bot, for now, will reply with the same message that we provided as a response
    wrapped up with a nice thank you appended to the original message.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，机器人将回复我们提供的相同消息，并在原始消息后附加一个友好的感谢语。
- en: '![Registering our Skype bot app](img/image00200.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的 Skype 机器人应用](img/image00200.jpeg)'
- en: Now, let's explore where the magic actually happens. Notice that **8:ef_remote**
    is the name of the actual Skype user that sent the message to our bot.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探索魔法实际上发生的地方。注意，**8:ef_remote** 是实际向我们的机器人发送消息的 Skype 用户的名称。
- en: In our code, the part that is responsible for the magic is the `bot.dialog`
    event.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中，负责魔法部分的代码是 `bot.dialog` 事件。
- en: 'This event, as its name explicitly implies, gets triggered when Skype sends
    an `HTTP POST` request when the bot receives a message. Take a look at the following
    code snippet:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事件，正如其名称明确暗示的那样，当机器人收到消息时，Skype 发送一个 `HTTP POST` 请求时会被触发。看看下面的代码片段：
- en: '[PRE15]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `session` object contains the information that Skype passes on to the bot
    app, which describes the session data that has been received and from whom. Notice
    that the session object contains properties such as `message` and `text`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`session`对象包含Skype传递给机器人应用程序的信息，它描述了已接收的会话数据以及来自谁。请注意，会话对象包含`message`和`text`等属性。'
- en: HR Skype bot agent
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HR Skype机器人代理
- en: So far, we've been able to create and deploy to Azure a basic Skype bot that
    essentially responds to any message sent with the same text it received, with
    an appended thank you message.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经能够创建并部署到Azure一个基本的Skype机器人，该机器人基本上会以相同的文本回应收到的任何消息，并在末尾附加一条感谢信息。
- en: In the previous chapter, we briefly mentioned that we would add a `BotBrain`
    method that will basically be responsible for giving an answer to a particular
    message input.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们简要提到了我们将添加一个`BotBrain`方法，它将基本上负责对特定的消息输入给出答案。
- en: Let's now expand our Skype bot in order to create a basic **Human Resources**
    (**HR**) agent that is capable of answering certain requests, such as checking
    how many holidays a person has left or requesting a sick leave.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们扩展我们的Skype机器人，以创建一个基本的**人力资源**（**HR**）代理，该代理能够回答某些请求，例如检查一个人还剩下多少假期或请求病假。
- en: HR is an ample area that covers many topics and, obviously, much more logic
    could be added to an automated HR agent. However, as the purpose is to illustrate
    some sort of automated communication, we'll restrict ourselves to simply processing
    holidays and sick leave requests.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: HR是一个涵盖许多主题的广阔领域，显然，可以为一个自动化的HR代理添加更多的逻辑。然而，由于目的是说明某种自动化通信，我们将仅限于简单地处理假期和病假请求。
- en: As we are already using Azure, we'll use **Table** **Storage** ( [https://azure.microsoft.com/en-us/documentation/articles/storage-introduction](https://azure.microsoft.com/en-us/documentation/articles/storage-introduction)
    ) in order to define some data and some answers that our bot will provide, depending
    on the type of message submitted and the type of request provided by the user.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经在使用Azure，我们将使用**表存储**（[https://azure.microsoft.com/en-us/documentation/articles/storage-introduction](https://azure.microsoft.com/en-us/documentation/articles/storage-introduction)）来定义一些数据和一些我们的机器人将根据提交的消息类型和用户提供的请求类型提供的答案。
- en: Azure table storage as a backend
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure表存储作为后端
- en: The Table Storage service uses a tabular format to store data. Each record represents
    an entity, and the columns represent the various properties of that entity (fields
    within a table).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 表存储服务使用表格格式来存储数据。每条记录代表一个实体，而列代表该实体的各种属性（表内的字段）。
- en: Every entity has a pair of keys (a **PartitionKey** and **RowKey**) to uniquely
    identify it. It also has a timestamp column that the Table Storage service uses
    to know when the entity was last updated (this happens automatically and the timestamp
    value cannot be overwritten; it is internally controlled by the service itself).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 每个实体都有一对键（一个**分区键**和一个**行键**）来唯一标识它。它还有一个时间戳列，表存储服务使用该列来知道实体最后更新时间（这是自动发生的，时间戳值不能被覆盖；它由服务本身内部控制）。
- en: Extensive documentation ( [https://docs.microsoft.com/en-us/azure/storage/](https://docs.microsoft.com/en-us/azure/storage/)
    ) about how the Storage and Table Storage services work can be found directly
    on the Azure website. It is an invaluable resource that is definitely worthwhile
    checking in order to have a better understanding of both services.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure网站上可以找到关于存储和表存储服务如何工作的详细文档（[https://docs.microsoft.com/en-us/azure/storage/](https://docs.microsoft.com/en-us/azure/storage/)）。这是一个非常有价值的资源，绝对值得检查，以便更好地理解这两个服务。
- en: Nevertheless, we'll quickly explore how we can get up and running quickly with
    Azure Table Storage.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们将快速探索如何快速使用Azure Table Storage。
- en: 'In order to get started with a Storage instance on Microsoft Azure, you''ll
    need to sign in to the Azure Portal with a Microsoft account. You can do that
    by going to [http://portal.azure.com](http://portal.azure.com). Refer to the following
    screenshot:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Microsoft Azure上开始使用存储实例，您需要使用Microsoft账户登录到Azure门户。您可以通过访问[http://portal.azure.com](http://portal.azure.com)来完成此操作。请参考以下截图：
- en: '![Azure table storage as a backend](img/image00201.jpeg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![Azure表存储作为后端](img/image00201.jpeg)'
- en: 'Once you''ve signed in to the Azure Portal, you can browse through the list
    of Azure services and select **Storage accounts (classic)**, as shown in the following
    screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您登录到Azure门户，您可以通过浏览Azure服务列表并选择**存储帐户（经典版**），如以下截图所示：
- en: '![Azure table storage as a backend](img/image00202.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![Azure 表存储作为后端](img/image00202.jpeg)'
- en: 'Once you''ve selected **Storage accounts (classic)**, you''ll be presented
    with the following screen, where you can add a new Storage account:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**存储账户（经典版）**后，你会看到以下屏幕，其中你可以添加一个新的存储账户：
- en: '![Azure table storage as a backend](img/image00203.jpeg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![Azure 表存储作为后端](img/image00203.jpeg)'
- en: 'In order to add a new **Storage accounts (classic)**, click on the **Add**
    button. This will then present a screen where you may add the account''s **Name**
    and select the Azure **Location** in which the account will be hosted, as shown
    in the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加新的**存储账户（经典版）**，点击**添加**按钮。这将显示一个屏幕，你可以在这里添加账户的**名称**并选择账户将在其中托管的 Azure
    **位置**，如下面的截图所示：
- en: '![Azure table storage as a backend](img/image00204.jpeg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![Azure 表存储作为后端](img/image00204.jpeg)'
- en: 'Once you have chosen a name and selected the location nearest to you, click
    on the **Create** button. Immediately after, Azure will create the Storage account.
    Once created, it will look as follows. You''ll need your access keys in order
    to interact with the service from your code or any external tool. The keys can
    be found by clicking on the **Keys** setting, as shown in the following screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个名称并选择离你最近的位置后，点击**创建**按钮。紧接着，Azure 将创建存储账户。创建后，它看起来如下。你需要你的访问密钥才能从你的代码或任何外部工具与服务交互。密钥可以通过点击**密钥**设置找到，如下面的截图所示：
- en: '![Azure table storage as a backend](img/image00205.jpeg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![Azure 表存储作为后端](img/image00205.jpeg)'
- en: 'With the Azure Storage account now ready, you can use an open source and very
    handy tool called **Azure Storage Explorer** ( [https://azurestorageexplorer.codeplex.com](https://azurestorageexplorer.codeplex.com)
    ), which will allow you to easily connect to your Storage account and create,
    update, delete, and view any storage tables and data:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Azure存储账户已经准备好了，你可以使用一个开源且非常实用的工具，称为**Azure 存储资源管理器**（[https://azurestorageexplorer.codeplex.com](https://azurestorageexplorer.codeplex.com)），它将允许你轻松连接到你的存储账户并创建、更新、删除和查看任何存储表和数据：
- en: '![Azure table storage as a backend](img/image00206.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![Azure 表存储作为后端](img/image00206.jpeg)'
- en: Once you've downloaded the ZIP file from CodePlex, after you unzip it, you'll
    find an executable that you can run in order to install the tool.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完 CodePlex 上的 ZIP 文件后，解压它，你会找到一个可执行文件，你可以运行它来安装这个工具。
- en: 'The installation wizard is super easy to follow and self-explanatory, requiring
    just a few clicks. Please note that the Azure Storage Explorer application only
    works on Windows. Once installed, you''ll see the following files:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 安装向导非常容易遵循且直观，只需点击几个按钮。请注意，Azure 存储资源管理器应用程序仅在 Windows 上运行。安装后，你会看到以下文件：
- en: '![Azure table storage as a backend](img/image00207.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![Azure 表存储作为后端](img/image00207.jpeg)'
- en: 'In order to run the tool, double-click on the **Azure Storage Explorer** shortcut.
    Once the application is running, you''ll need to connect your Azure Storage account
    to it. This can be done by clicking on the **Add Account** button:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行工具，双击**Azure 存储资源管理器**快捷方式。一旦应用程序运行，你需要将其与你的 Azure 存储账户连接。这可以通过点击**添加账户**按钮来完成：
- en: '![Azure table storage as a backend](img/image00208.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![Azure 表存储作为后端](img/image00208.jpeg)'
- en: 'Once you click on the **Add Account** button, it''ll be requested that you
    add your **Storage account name** and key, as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**添加账户**按钮后，会要求你添加你的**存储账户名称**和密钥，如下所示：
- en: '![Azure table storage as a backend](img/image00209.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![Azure 表存储作为后端](img/image00209.jpeg)'
- en: After entering the requested details, you should click on the **Test Access**
    button in order to check if the connection works. If that is successful, you may
    click on the **Save** button.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 输入所需详细信息后，你应该点击**测试访问**按钮来检查连接是否成功。如果成功，你可以点击**保存**按钮。
- en: With these details stored, next time you open the Azure Storage Explorer application,
    you'll be able to access your Storage account from the dropdown next to the **Add
    Account** button.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 存储这些详细信息后，下次你打开 Azure 存储资源管理器应用程序时，你将能够从**添加账户**按钮旁边的下拉菜单访问你的存储账户。
- en: HR agent guidelines
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HR 代理指南
- en: Having set up our Azure Table Storage account and seen how to use Storage Explorer
    in order to connect to it, let's now create a table with some data that our Skype
    bot will use in order to interpret requests and function as an automated HR agent.
    Sounds exciting, so let's roll up our sleeves and get started.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置了我们的Azure表存储账户并了解了如何使用存储资源管理器来连接到它之后，现在让我们创建一个表格，其中包含我们的Skype机器人将使用的数据，以便解释请求并作为自动化的HR代理。听起来很令人兴奋，所以让我们卷起袖子开始吧。
- en: We'll create a table called `HolidaysHRBot`, which will contain as its `PartitionKey`
    the name of the Skype user and as its `RowKey` the full name of the person in
    the form of `FirstName-LastName`. Both the `PartitionKey` and `RowKey` fields
    are strings. It will also have a third field called `DaysLeft`, which will be
    an integer and represent the number of vacation days that a person has left to
    use.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`HolidaysHRBot`的表格，其中`PartitionKey`包含Skype用户的名称，`RowKey`以`FirstName-LastName`的形式包含人员的全名。`PartitionKey`和`RowKey`字段都是字符串。它还将有一个名为`DaysLeft`的第三个字段，它是一个整数，代表一个人剩余可以使用的假期天数。
- en: Let's assume that `DaysLeft` will start with a value of 25 (representing 25
    days of vacation available to use). Finally, we can add another field that will
    indicate the number of sick days used. Let's call this field `DaysSick` and define
    it as an integer, which will be initially set to zero.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`DaysLeft`的初始值将是25（代表有25天的假期可以使用）。最后，我们可以添加另一个字段来指示使用的病假天数。让我们称这个字段为`DaysSick`，并将其定义为整数，初始值设为零。
- en: 'So, let''s create the table using Storage Explorer and add some data. Refer
    to the following screenshot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们使用存储资源管理器创建表格并添加一些数据。请参考以下截图：
- en: '![HR agent guidelines](img/image00210.jpeg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![HR代理指南](img/image00210.jpeg)'
- en: The way the logic of our HR agent will work is that, once a user has been verified,
    and a holiday or sick request has been placed, the bot will reply back with the
    option selected.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的人力资源代理的逻辑工作方式是，一旦用户经过验证，并提交了假期或病假请求，机器人将回复所选的选项。
- en: So, having defined these basic rules, let's develop the `BotBrain` method that
    can take care of this. Looks like a lot of fun!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在定义了这些基本规则之后，让我们开发`BotBrain`方法，它可以处理这些。看起来很有趣！
- en: Accessing the Azure table through code
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过代码访问Azure表
- en: So, let's see how we can connect to Azure Table Storage through Node.js, read
    the information on the database table, and, furthermore, update it.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们看看我们如何通过Node.js连接到Azure表存储，读取数据库表中的信息，并且进一步更新它。
- en: 'In order to get started, the first thing to do is to add Azure Storage to our
    project as an npm package. This can be done, as follows, from the command line:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，首先要做的是将Azure存储添加到我们的项目中作为npm包。这可以通过以下命令行操作完成：
- en: '[PRE16]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will update our `package.json` file, adding a reference to the Azure Storage
    library. Once the package has been installed, let''s add a reference to it in
    our code:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更新我们的`package.json`文件，添加对Azure存储库的引用。一旦安装了包，让我们在代码中添加对它的引用：
- en: '[PRE17]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: With the reference added, we can go ahead and create the `tableSvc` object that
    we will be using to connect to and communicate with our `HolidaysHRBot` table.
    It is necessary to pass the `AZURE_ACCOUNT` and `ACCOUNT_KEY`, which can be found
    on the Azure Portal.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了引用之后，我们可以继续创建`tableSvc`对象，我们将使用它来连接和与我们的`HolidaysHRBot`表进行通信。必须传递`AZURE_ACCOUNT`和`ACCOUNT_KEY`，这些可以在Azure门户中找到。
- en: '[PRE18]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Because we have manually added data to our table using Storage Explorer, in
    order to retrieve data based on the `PartitionKey` and `RowKey` we''ll need to
    use the `retrieveEntity` method from the `tableSvc` object. Here''s how:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经使用存储资源管理器手动向我们的表添加了数据，为了根据`PartitionKey`和`RowKey`检索数据，我们需要使用`tableSvc`对象的`retrieveEntity`方法。下面是如何操作的：
- en: '[PRE19]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'So, now let''s create a small user verification method that takes the first
    message from the user and checks on the Azure table if the user actually exists,
    and if so, the bot carries out the rest of the interactive messaging process.
    This will be the entry point for our `BotBrain` method. Take a look at the following
    code snippet:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，现在让我们创建一个小的用户验证方法，该方法从用户那里获取第一条消息，并在Azure表中检查用户是否实际存在。如果存在，机器人将执行剩余的交互式消息过程。这将是我们的`BotBrain`方法的入口点。请看以下代码片段：
- en: '[PRE20]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: What we've done here is to basically wrap up the `retrieveEntity` function into
    a method for which, depending on what result is fetched from the `AZURE_TABLE`,
    a given `session.send` is sent back to the user.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的是将`retrieveEntity`函数封装成一个方法，该方法根据从`AZURE_TABLE`获取的结果，向用户发送一个特定的`session.send`。
- en: If, for the user, there is a matching record for the `userId` (PartitionKey)
    and `userName` (RowKey) specified, then the state is set to authenticated and
    the entity `retrieved` (record) is copied to the `userEntity` object.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对于用户来说，存在与指定的`userId`（PartitionKey）和`userName`（RowKey）匹配的记录，则状态设置为已认证，并将实体`retrieved`（记录）复制到`userEntity`对象中。
- en: HR agent bot logic
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HR代理机器人逻辑
- en: 'Now let''s close the loop and tie all this up by outlining the bot''s full
    code, as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过概述机器人的完整代码来闭合这个循环，如下所示：
- en: '[PRE21]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Given that we already explained some parts of the code when we went through
    the process of registering the bot with Skype and we also reviewed how to hook
    up to the Skype API events that allow the bot to receive incoming messages from
    users, we won't be covering those parts further. Instead, we will focus on the
    `BotBrain` function and how the actual process flows. Let's analyze this.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在将机器人注册到Skype的过程中已经解释了代码的一些部分，并且我们也回顾了如何连接到允许机器人接收用户传入消息的Skype API事件，因此我们不会进一步覆盖这些部分。相反，我们将专注于`BotBrain`函数以及实际流程的流程。让我们分析一下。
- en: 'The first thing to notice is that, when the `bot.Dialog` event gets triggered,
    the `BotBrain` function is invoked:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，当`bot.Dialog`事件被触发时，会调用`BotBrain`函数：
- en: '[PRE22]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Another important part is that somehow we need to keep the state in order to
    be able to determine what stage of the conversation our bot is at with the user.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的部分是，我们需要以某种方式保持状态，以便能够确定我们的机器人在与用户的对话中处于哪个阶段。
- en: A relatively simple way to do this is by using variables that keep the state
    of the conversation or apply it to some parts.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 做这件事的一个相对简单的方法是使用变量来保持对话的状态或将其应用于某些部分。
- en: We'll need to know when the user has been authenticated, which basically means
    that their Skype Id and name have been checked against the data contained within
    the `AZURE_TABLE`. Further to that, we'll also need to keep the `userId`, `userName`,
    and `userEntity` (representing the record on the table) for the authenticated
    user.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要知道用户何时被认证，这基本上意味着他们的Skype ID和名字已经与`AZURE_TABLE`中的数据进行了核对。进一步来说，我们还需要保留已认证用户的`userId`、`userName`和`userEntity`（代表表上的记录）。
- en: It is also important to know if the user has sent a `holidays` request or a
    `sick` leave request. With these variables, we can keep the state in a very simple
    way.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 也很重要的是要知道用户是否发送了`holidays`请假请求或`sick`病假请求。有了这些变量，我们可以非常简单地保持状态。
- en: 'Ideally, for multiple users requesting interaction with the bot at the same
    time, the state should be kept individually for each user logged on or authenticated.
    However, this is far beyond the scope of this example and we shall not cover this.
    Take a look at the following code snippet:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，对于同时请求与机器人交互的多个用户，应该为每个登录或认证的用户单独保持状态。然而，这远远超出了本例的范围，我们不会涉及这一点。请看以下代码片段：
- en: '[PRE23]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: With the problem of managing the state covered, let's now focus on the internals
    of the `BotBrain` function. Let's dissect it into smaller chunks.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决了状态管理的问题之后，现在让我们专注于`BotBrain`函数的内部结构。让我们将其分解成更小的部分。
- en: 'There are basically two main parts that are important. One is whether the user
    has already been authenticated (the user has been verified to exist on the `AZURE_TABLE`)
    and the other is where the user has yet not been authenticated, which corresponds
    to the initial stage of the conversation:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上有两个主要部分是重要的。一个是用户是否已经认证（用户已被验证存在于`AZURE_TABLE`上），另一个是用户尚未认证，这对应于对话的初始阶段：
- en: '[PRE24]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here we can see that, in order to start the conversation, the user must write
    a message including the word `hi`. Following that, the bot responds and requests
    that the user enters their name in the form of `FirstName-LastName` (proper casing
    should be used).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到，为了开始对话，用户必须写一条包含单词`hi`的消息。随后，机器人会响应并要求用户以`FirstName-LastName`（应使用正确的大小写）的形式输入他们的名字。
- en: '`FirstName-LastName` will be used in order to query the RowKey of the `AZURE_TABLE`
    and verify if the `userId` (the user''s Skype Id) corresponds to the record that
    also contains the value specified by `FirstName-LastName`. This is done within
    the `userVerification` function.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`FirstName-LastName`将被用来查询`AZURE_TABLE`的RowKey并验证`userId`（用户的Skype ID）是否与包含由`FirstName-LastName`指定的值的记录相对应。这是在`userVerification`函数中完成的。'
- en: 'Once the user''s identity has been verified, then `authenticated` is set to
    `true` and therefore the bot can ask what type of action the user wants to carry
    out. Let''s check this:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户的身份得到验证，`authenticated`就被设置为`true`，因此机器人可以询问用户想要执行哪种类型的操作。让我们检查一下：
- en: '[PRE25]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Once the user has been verified and the bot''s state has been authenticated,
    the bot then requests that the user chooses if he or she wants to request some
    vacation days or sick leave days. Once the user responds, each state is then stored
    using Boolean variables called `holidays` and `sick`, which are then used by the
    bot to send back a reply asking how many days the user wants to book. Take a look
    at the following screenshot:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户经过验证并且机器人的状态得到认证，机器人就会请求用户选择他或她是否想要申请一些假期或病假。一旦用户做出回应，每个状态就会使用名为`holidays`和`sick`的布尔变量进行存储，这些变量随后被机器人用来发送回复询问用户想要预订多少天。请查看以下截图：
- en: '![HR agent bot logic](img/image00211.jpeg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![HR代理机器人逻辑](img/image00211.jpeg)'
- en: 'When the user provides the number of days, the bot then replies back confirming
    the request. The output can be seen as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提供天数时，机器人随后回复确认请求。输出如下所示：
- en: '![HR agent bot logic](img/image00212.jpeg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![HR代理机器人逻辑](img/image00212.jpeg)'
- en: It's important to note that there's room to add additional logic and perform
    more operations, such as actually changing the values on the `AZURE_TABLE` once
    the days request has been entered, so there's plenty of opportunity to keep exploring
    and expanding the functionality of the bot.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，有空间添加额外的逻辑和执行更多操作，例如在输入天数请求后实际上更改`AZURE_TABLE`上的值，因此有大量的机会继续探索和扩展机器人的功能。
- en: Summary
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: It's been an interesting journey on how to connect and interact with Skype services,
    and how to create a bot to leverage some basic but interesting and interactive
    functionality.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在如何连接和交互Skype服务以及如何创建一个利用一些基本但有趣且交互式功能来创建机器人的过程中，这是一段有趣的旅程。
- en: We've see how to get our bot all set up with Skype, how to install the related npm
    packages, and implement the basic skeleton and structure for our app.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何将我们的机器人设置好与Skype连接，如何安装相关的npm包，以及实现我们应用程序的基本骨架和结构。
- en: Further to this, you've also learned how to create the bot's brains in order
    to perform certain tasks and send the right response based on the input received.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还学会了如何创建机器人的大脑，以便执行某些任务并根据接收到的输入发送正确的回复。
- en: If you'd like to expand on this a bit further, something interesting to think
    about is how to keep the state for multiple users simultaneously and also add
    more interactive functionality.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要进一步扩展，一个有趣的想法是如何同时保持多个用户的状态，并添加更多交互式功能。
- en: Hopefully, this has given you some inspiration, food for thought, and an eagerness
    to continue exploring many more possibilities for implementing Skype bots. Thanks
    so much for reading.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这能给你带来一些灵感，思考的素材，以及对继续探索更多实现Skype机器人的可能性的渴望。非常感谢阅读。
