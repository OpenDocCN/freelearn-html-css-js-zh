- en: Chapter 2. Getting Skype to Work for You
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Skype** ( [http://www.skype.com](http://www.skype.com) ) is an awesome piece
    of software and a reliable platform that is used by millions of people worldwide
    in order to make calls, organize meetings, and chat with each other. It is used
    for both personal communication as well as for business.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the great things about Skype is that it allows you make free peer-to-peer
    VoIP calls with any other user that also has a Skype account. It also allows you
    to call phone numbers at very cheap rates and even for free to some locations.
  prefs: []
  type: TYPE_NORMAL
- en: Besides that, Skype can also allow you to receive incoming calls on a real phone
    number or divert them to become text messages. It also allows message forwarding,
    conferencing, group chatting, file transferring, remote desktop presentation,
    viewing, and many other features.
  prefs: []
  type: TYPE_NORMAL
- en: So far, it sounds like Skype is a great communication platform, and it is. But
    what about using Skype as an automated agent that can help to get some work done
    and could automate some business processes, in order to make our lives easier?
    Is this even possible?
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that, indeed, it is possible. Skype is now part of Microsoft
    ([https://www.microsoft.com/en-in](https://www.microsoft.com/en-in)/) and, recently,
    at the build developer's event, a framework for creating interactive bots with
    Skype was unveiled. Skype already has a set of cool and extremely useful APIs,
    which make it relatively easy for developers to interact with the service, and
    is great for all sorts of voice and chat-related applications. However, it does
    not have an API that is solely focused on interactive messaging automation and
    this is where the **Bot Framework** ( [https://dev.botframework.com](https://dev.botframework.com)
    ) comes in to fill the void.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll explore how to use this framework in order to build a
    Skype bot that acts like a virtual **Human Resources** (**HR**) assistant, which
    should be able to provide information about vacation days, notice periods, and
    other HR-related queries.
  prefs: []
  type: TYPE_NORMAL
- en: Sounds like a lot of fun! Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: How a Skype bot works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Skype bot is, in essence, just another Skype contact; the difference is that,
    instead of talking to another person, it's an automated process that knows how
    to reply to the input you provide. Bots can do many things, such as fetch the
    news, check the weather, retrieve photos or information from websites, start a
    game, or order food or a taxi for you.
  prefs: []
  type: TYPE_NORMAL
- en: Anything that can be turned into a service can be converted into an automated
    conversation by using a bot. With Skype, bots can have interactive conversations
    on nearly every platform, at any time, and from anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: Users can send a Skype bot request, and your bot can send back meaningful feedback
    based on the content received. A Skype bot can also be part of a group conversation
    and send details to all the parties involved in that group.
  prefs: []
  type: TYPE_NORMAL
- en: The way a Skype bot technically works is that it connects and listens to the
    bot platform using the Skype bot API directly, or using the C# or Node.js SDK.
    We'll obviously focus our attention on the Node.js SDK.
  prefs: []
  type: TYPE_NORMAL
- en: When a user sends a message to your Skype bot, we route this activity to a **Webhook**
    ( [https://en.wikipedia.org/wiki/Webhook](https://en.wikipedia.org/wiki/Webhook)
    ) that is defined for the bot. The bot then sends replies back to the bot platform,
    which passes them on to the user. The Webhooks (which are valid public URLs-HTTP
    Messaging endpoints) will typically run on a cloud service such as **Microsoft**
    **Azure** ( [https://azure.microsoft.com](https://azure.microsoft.com) ).
  prefs: []
  type: TYPE_NORMAL
- en: 'Webhooks are called with JSON-formatted requests. Every JSON object indicates
    some update and looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In essence, a bot goes through various stages. Initially the bot can be added
    to a limited number of users for development, which allows the bot details to
    be edited, and also allows for previewing features such as group chat or calling.
    In the example we will build in this chapter, we will focus on chatting (text
    interaction) and not calling, but it is useful to know that this feature is also
    possible. Here are the stages:'
  prefs: []
  type: TYPE_NORMAL
- en: Bot creation/editing (initial stage)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bot review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bot published
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following the creation or editing stage is the review stage, which is just before
    publishing your bot. Once in review, you cannot edit the attributes of your bot
    on the portal (such as its name and other properties). It is important to note
    that a bot cannot be submitted using preview features such as group chat or calling.
  prefs: []
  type: TYPE_NORMAL
- en: Once the review of the bot has been accepted, it goes into the published stage.
    At this point in time, the bot can be added by any number of users via the bot
    URL link or button.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, soon after it has been published, the bot is then shown in the Skype
    bot directory.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up our Skype bot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the theory behind us, let's now dig into the details of how we can start
    using the Bot Framework with Node.js in order to create our Skype HR bot.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we saw how to get Node.js installed and also how to
    deploy our Twilio example to Azure website. For our Skype bot, we'll follow a
    very similar process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first start by creating a folder in our local drive from the Command
    Prompt in order to store our bot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming we have Node.js and npm installed (if not, please refer to the steps
    in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. The Rise of Bots – Getting
    the Message Across") , *The Rise of Bots – Getting the Message Across*), let''s
    create and initialize our `package.json`, which will store our bot''s dependencies
    and definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When you go through the `npm init` options (which are very easy to follow),
    you''ll see something similar to this. In some cases you might get an `index.js`
    file created; however, going forward, we''ll instead use the name `app.js` as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wiring up our Skype bot](img/image00175.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In your project folder, you''ll see the result, which is your `package.json`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wiring up our Skype bot](img/image00176.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Just like we did in our previous example, we will use **Express** ( [http://expressjs.com](http://expressjs.com)
    ) as our **REST** Node.js framework. We''ll install it and save it to our `package.json`
    file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Express has been installed, you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wiring up our Skype bot](img/image00177.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With Express set up, the next thing to do is to install the `BotBuilder` package,
    which corresponds to the Microsoft Bot Framework Node.js library. Let's do that
    now.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to install it, run this `npm` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After `BotBuilder` has been installed, you should see in your command line
    a result similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wiring up our Skype bot](img/image00178.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Your `package.json` should then look similar to mine, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wiring up our Skype bot](img/image00179.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With our bot all wired up, we can then focus on creating the Express endpoints
    and core logic.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create our `app.js` file, which will be the entry point to our bot. You
    can create the `app.js` file by using the applicable menu option in the editor
    of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Skype skeleton bot `app.js` should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s break this into smaller chunks. The first thing we do is to reference
    the Bot Framework we previously installed using npm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we''ve indicated this, we need to reference the Express framework, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Once we have our references all set up, we can proceed to create the `botService`
    object and wire it up an `HTTP POST` endpoint, hosted on Azure websites, which
    the Skype bot service will push incoming messages to for our bot to reply to.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the `botService` object requires `APP_ID` and `APP_SECRET`
    variables that we will get from the Bot Framework once we have registered it with
    on the bot developer portal, for which we will go through the steps shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `botService` object is created as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `botService` object created, it needs to be wired up so that the Skype
    bot knows where to `POST` the incoming message requests, so they can be processed
    by the bot. This is achieved by adding this to `app.js`, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This basically registers the `botService` object on the publicly accessible
    `/api/messages` HTTP endpoint exposed through the Azure website where this Node.js
    will be running. Finally, the Node.js app is exposed by listening on the port
    `process.env.port` as follows, by adding this to `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Registering our Skype bot app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to for this to work, we''ll need to register our bot within the Bot
    Framework Developer Portal. In order to do this, sign in with your Microsoft account
    at  [https://dev.botframework.com/](https://dev.botframework.com/) . You''ll be
    presented with this screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00180.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Register a bot** option in order to create and register your
    Skype bot. Once you''ve done that, you''ll see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00181.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there are three basic fields that are mandatory. The first field
    represents the bot's name, which will be used to identify the bot within the bot
    directory (if we later decide to make it public). It cannot be longer than 35
    characters.
  prefs: []
  type: TYPE_NORMAL
- en: The second field is the bot's handle, which will be used as part of the bot's
    public URL. It only allows alphanumeric and underscore characters, and it cannot
    be changed after registration.
  prefs: []
  type: TYPE_NORMAL
- en: The third field is the bot's description. The first 46 characters are displayed
    on the bot's card on the bot directory and the rest of the description is displayed
    under the bot's details.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we scroll down the page, we can see that we are also being asked to enter
    a Messaging endpoint and an App ID. Let''s add some details to our bot. Refer
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00182.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So far, we've added the three initial fields required for our bot. In this case,
    we'll use the name `NodeJsPacktSkypeBot`; however, you can use any other unique
    name. I recommend using the same name for both the **Name** and **Bot handle**
    fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s scroll down and carry on, in order to add the other required details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00183.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next we need to add the Messaging endpoint and add the App ID for our bot. So
    let's click on the **Create Microsoft App ID and password** button in order to
    get the required App ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we do this, we get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00184.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next thing we need to do is to click on the **Generate an app password
    to continue** button. Once you do that, you''ll see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00185.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Immediately after, click on the **Ok** button, and this will take you back
    to the **Generate App ID** and password screen. Once there, click on the **Finish
    and go back to Bot Framework** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00186.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have done that, you''ll be back at the main registration screen. The
    only missing details will be the **Messaging endpoint** and the **Owners** e-mail
    address fields, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00187.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For now, let's leave this as it is (we'll come back to this screen later) because,
    first, we need to deploy our bot to Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Just like we did in the previous chapter, we can deploy our solution to Azure
    websites and host our messaging endpoint there. So, before we actually fill in
    the URL for our Messaging endpoint, let's deploy and push our Skype bot code to
    Azure websites in order to get a publicly accessible URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you have your Azure account set up and ready (if not please refer
    to [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. The Rise of Bots – Getting
    the Message Across") , *The Rise of Bots – Getting the Message Across*, for details
    on how to do this), log in to Azure by executing the following instruction from
    the Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once that has been done and the credentials provided, you will see a screen
    similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00188.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open your browser and enter the URL mentioned on the console response. Then
    enter the code you have been provided with. Once you have done that, you will
    see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00189.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This means that you have successfully logged on to Azure using the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next thing to do is to actually create the Azure website service that will
    host the Skype bot code; this can be done by running this command from the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When you execute this command, you will be asked to choose the Azure region
    to which you wish to deploy the bot, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00190.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the region that is closest to where you are located by typing in the
    appropriate number. After this has been done, you''ll see the following information,
    indicating that the site has been successfully created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00191.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Before deploying the bot's code to Azure, first log in to the **Azure Portal**
    ( [http://portal.azure.com](http://portal.azure.com) ) with your account, and
    specify an **FTP/deployment** username and **password**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be done by going into **All resources**, selecting the **nodeskypehrbotsite**,
    then opening the **Deployment credentials** blade, and, finally, entering the
    **FTP/deployment username** and **Password**, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: Once the username and password have been entered, click on the **Save** button
    at the top of the blade.
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00192.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once this has been done, wait for a couple of minutes. Then we can deploy the
    code to Azure websites as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Once these commands have been executed, the bot''s code will be deployed to
    the Azure website and you should see some responses similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00193.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With our site deployed, we can finally get the publicly accessible URL, which
    in our case will be `https://nodeskypehrbotsite.azurewebsites.net/api/messages`,
    given that in our code we have defined a `POST` endpoint that our bot will be
    listening on.
  prefs: []
  type: TYPE_NORMAL
- en: This is the URL that we need to specify as the **Messaging endpoint**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then go back to the bot **Registration** website screen where we recently
    entered the bot''s APP ID and we can now enter the **Messaging endpoint**, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00194.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Make sure to check the option for **Privacy statement**, **Terms of use**,
    and **Code of conduct**, then click on the **Register** button, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00195.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have clicked on the **Register** button, you''ll receive a popup dialog
    that will say that the bot has been created, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00196.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **OK** button in order to continue. Once you have clicked on **OK**,
    then you''ll be redirected to the following web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00197.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There, you can quickly test the connection to the bot by clicking on the **Test**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: As we don't want to make the bot public, there is no need to **Publish** it
    to the Skype bot directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you scroll down a bit, you''ll find the channels that are enabled by default.
    One of them is **Skype**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00198.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go ahead and click on the **Add to Skype** button in order to add the
    bot to our Skype contact list. Once we do that, a new browser tab or window will
    open, and we''ll be presented with the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00199.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In order to add the bot to Skype, click on the **Add to Contacts** button. This
    will launch the Skype application and add it to our contacts list.
  prefs: []
  type: TYPE_NORMAL
- en: If your Skype account is not the same as your Azure account (and if you are
    logged on with your Azure account), then it will be requested that you sign out
    and then sign in with your Skype account, in order to add the bot to your contacts
    list.
  prefs: []
  type: TYPE_NORMAL
- en: With all the setup behind us, let's modify our code in order to add our bot
    ID, Application ID, and application secret. The bot ID and the Application ID
    that we'll need to add to our code are the same, which is the one entered when
    registering the bot. Once we've done this, we can re-publish it to Azure websites
    and test it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Skype bot `app.js` should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If we publish the changes to Azure websites and have added our bot to our Skype
    contacts list, using the URL indicated by the label **Add to Skype**, we should
    see the following when we send a message to it.
  prefs: []
  type: TYPE_NORMAL
- en: The bot, for now, will reply with the same message that we provided as a response
    wrapped up with a nice thank you appended to the original message.
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our Skype bot app](img/image00200.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's explore where the magic actually happens. Notice that **8:ef_remote**
    is the name of the actual Skype user that sent the message to our bot.
  prefs: []
  type: TYPE_NORMAL
- en: In our code, the part that is responsible for the magic is the `bot.dialog`
    event.
  prefs: []
  type: TYPE_NORMAL
- en: 'This event, as its name explicitly implies, gets triggered when Skype sends
    an `HTTP POST` request when the bot receives a message. Take a look at the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `session` object contains the information that Skype passes on to the bot
    app, which describes the session data that has been received and from whom. Notice
    that the session object contains properties such as `message` and `text`.
  prefs: []
  type: TYPE_NORMAL
- en: HR Skype bot agent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we've been able to create and deploy to Azure a basic Skype bot that
    essentially responds to any message sent with the same text it received, with
    an appended thank you message.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we briefly mentioned that we would add a `BotBrain`
    method that will basically be responsible for giving an answer to a particular
    message input.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now expand our Skype bot in order to create a basic **Human Resources**
    (**HR**) agent that is capable of answering certain requests, such as checking
    how many holidays a person has left or requesting a sick leave.
  prefs: []
  type: TYPE_NORMAL
- en: HR is an ample area that covers many topics and, obviously, much more logic
    could be added to an automated HR agent. However, as the purpose is to illustrate
    some sort of automated communication, we'll restrict ourselves to simply processing
    holidays and sick leave requests.
  prefs: []
  type: TYPE_NORMAL
- en: As we are already using Azure, we'll use **Table** **Storage** ( [https://azure.microsoft.com/en-us/documentation/articles/storage-introduction](https://azure.microsoft.com/en-us/documentation/articles/storage-introduction)
    ) in order to define some data and some answers that our bot will provide, depending
    on the type of message submitted and the type of request provided by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Azure table storage as a backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Table Storage service uses a tabular format to store data. Each record represents
    an entity, and the columns represent the various properties of that entity (fields
    within a table).
  prefs: []
  type: TYPE_NORMAL
- en: Every entity has a pair of keys (a **PartitionKey** and **RowKey**) to uniquely
    identify it. It also has a timestamp column that the Table Storage service uses
    to know when the entity was last updated (this happens automatically and the timestamp
    value cannot be overwritten; it is internally controlled by the service itself).
  prefs: []
  type: TYPE_NORMAL
- en: Extensive documentation ( [https://docs.microsoft.com/en-us/azure/storage/](https://docs.microsoft.com/en-us/azure/storage/)
    ) about how the Storage and Table Storage services work can be found directly
    on the Azure website. It is an invaluable resource that is definitely worthwhile
    checking in order to have a better understanding of both services.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, we'll quickly explore how we can get up and running quickly with
    Azure Table Storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to get started with a Storage instance on Microsoft Azure, you''ll
    need to sign in to the Azure Portal with a Microsoft account. You can do that
    by going to [http://portal.azure.com](http://portal.azure.com). Refer to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Azure table storage as a backend](img/image00201.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve signed in to the Azure Portal, you can browse through the list
    of Azure services and select **Storage accounts (classic)**, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Azure table storage as a backend](img/image00202.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve selected **Storage accounts (classic)**, you''ll be presented
    with the following screen, where you can add a new Storage account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Azure table storage as a backend](img/image00203.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to add a new **Storage accounts (classic)**, click on the **Add**
    button. This will then present a screen where you may add the account''s **Name**
    and select the Azure **Location** in which the account will be hosted, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Azure table storage as a backend](img/image00204.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have chosen a name and selected the location nearest to you, click
    on the **Create** button. Immediately after, Azure will create the Storage account.
    Once created, it will look as follows. You''ll need your access keys in order
    to interact with the service from your code or any external tool. The keys can
    be found by clicking on the **Keys** setting, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Azure table storage as a backend](img/image00205.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'With the Azure Storage account now ready, you can use an open source and very
    handy tool called **Azure Storage Explorer** ( [https://azurestorageexplorer.codeplex.com](https://azurestorageexplorer.codeplex.com)
    ), which will allow you to easily connect to your Storage account and create,
    update, delete, and view any storage tables and data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Azure table storage as a backend](img/image00206.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you've downloaded the ZIP file from CodePlex, after you unzip it, you'll
    find an executable that you can run in order to install the tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation wizard is super easy to follow and self-explanatory, requiring
    just a few clicks. Please note that the Azure Storage Explorer application only
    works on Windows. Once installed, you''ll see the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Azure table storage as a backend](img/image00207.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to run the tool, double-click on the **Azure Storage Explorer** shortcut.
    Once the application is running, you''ll need to connect your Azure Storage account
    to it. This can be done by clicking on the **Add Account** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Azure table storage as a backend](img/image00208.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on the **Add Account** button, it''ll be requested that you
    add your **Storage account name** and key, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Azure table storage as a backend](img/image00209.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After entering the requested details, you should click on the **Test Access**
    button in order to check if the connection works. If that is successful, you may
    click on the **Save** button.
  prefs: []
  type: TYPE_NORMAL
- en: With these details stored, next time you open the Azure Storage Explorer application,
    you'll be able to access your Storage account from the dropdown next to the **Add
    Account** button.
  prefs: []
  type: TYPE_NORMAL
- en: HR agent guidelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having set up our Azure Table Storage account and seen how to use Storage Explorer
    in order to connect to it, let's now create a table with some data that our Skype
    bot will use in order to interpret requests and function as an automated HR agent.
    Sounds exciting, so let's roll up our sleeves and get started.
  prefs: []
  type: TYPE_NORMAL
- en: We'll create a table called `HolidaysHRBot`, which will contain as its `PartitionKey`
    the name of the Skype user and as its `RowKey` the full name of the person in
    the form of `FirstName-LastName`. Both the `PartitionKey` and `RowKey` fields
    are strings. It will also have a third field called `DaysLeft`, which will be
    an integer and represent the number of vacation days that a person has left to
    use.
  prefs: []
  type: TYPE_NORMAL
- en: Let's assume that `DaysLeft` will start with a value of 25 (representing 25
    days of vacation available to use). Finally, we can add another field that will
    indicate the number of sick days used. Let's call this field `DaysSick` and define
    it as an integer, which will be initially set to zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s create the table using Storage Explorer and add some data. Refer
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![HR agent guidelines](img/image00210.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The way the logic of our HR agent will work is that, once a user has been verified,
    and a holiday or sick request has been placed, the bot will reply back with the
    option selected.
  prefs: []
  type: TYPE_NORMAL
- en: So, having defined these basic rules, let's develop the `BotBrain` method that
    can take care of this. Looks like a lot of fun!
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Azure table through code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, let's see how we can connect to Azure Table Storage through Node.js, read
    the information on the database table, and, furthermore, update it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to get started, the first thing to do is to add Azure Storage to our
    project as an npm package. This can be done, as follows, from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This will update our `package.json` file, adding a reference to the Azure Storage
    library. Once the package has been installed, let''s add a reference to it in
    our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: With the reference added, we can go ahead and create the `tableSvc` object that
    we will be using to connect to and communicate with our `HolidaysHRBot` table.
    It is necessary to pass the `AZURE_ACCOUNT` and `ACCOUNT_KEY`, which can be found
    on the Azure Portal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Because we have manually added data to our table using Storage Explorer, in
    order to retrieve data based on the `PartitionKey` and `RowKey` we''ll need to
    use the `retrieveEntity` method from the `tableSvc` object. Here''s how:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'So, now let''s create a small user verification method that takes the first
    message from the user and checks on the Azure table if the user actually exists,
    and if so, the bot carries out the rest of the interactive messaging process.
    This will be the entry point for our `BotBrain` method. Take a look at the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: What we've done here is to basically wrap up the `retrieveEntity` function into
    a method for which, depending on what result is fetched from the `AZURE_TABLE`,
    a given `session.send` is sent back to the user.
  prefs: []
  type: TYPE_NORMAL
- en: If, for the user, there is a matching record for the `userId` (PartitionKey)
    and `userName` (RowKey) specified, then the state is set to authenticated and
    the entity `retrieved` (record) is copied to the `userEntity` object.
  prefs: []
  type: TYPE_NORMAL
- en: HR agent bot logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s close the loop and tie all this up by outlining the bot''s full
    code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Given that we already explained some parts of the code when we went through
    the process of registering the bot with Skype and we also reviewed how to hook
    up to the Skype API events that allow the bot to receive incoming messages from
    users, we won't be covering those parts further. Instead, we will focus on the
    `BotBrain` function and how the actual process flows. Let's analyze this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing to notice is that, when the `bot.Dialog` event gets triggered,
    the `BotBrain` function is invoked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Another important part is that somehow we need to keep the state in order to
    be able to determine what stage of the conversation our bot is at with the user.
  prefs: []
  type: TYPE_NORMAL
- en: A relatively simple way to do this is by using variables that keep the state
    of the conversation or apply it to some parts.
  prefs: []
  type: TYPE_NORMAL
- en: We'll need to know when the user has been authenticated, which basically means
    that their Skype Id and name have been checked against the data contained within
    the `AZURE_TABLE`. Further to that, we'll also need to keep the `userId`, `userName`,
    and `userEntity` (representing the record on the table) for the authenticated
    user.
  prefs: []
  type: TYPE_NORMAL
- en: It is also important to know if the user has sent a `holidays` request or a
    `sick` leave request. With these variables, we can keep the state in a very simple
    way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, for multiple users requesting interaction with the bot at the same
    time, the state should be kept individually for each user logged on or authenticated.
    However, this is far beyond the scope of this example and we shall not cover this.
    Take a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: With the problem of managing the state covered, let's now focus on the internals
    of the `BotBrain` function. Let's dissect it into smaller chunks.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are basically two main parts that are important. One is whether the user
    has already been authenticated (the user has been verified to exist on the `AZURE_TABLE`)
    and the other is where the user has yet not been authenticated, which corresponds
    to the initial stage of the conversation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Here we can see that, in order to start the conversation, the user must write
    a message including the word `hi`. Following that, the bot responds and requests
    that the user enters their name in the form of `FirstName-LastName` (proper casing
    should be used).
  prefs: []
  type: TYPE_NORMAL
- en: '`FirstName-LastName` will be used in order to query the RowKey of the `AZURE_TABLE`
    and verify if the `userId` (the user''s Skype Id) corresponds to the record that
    also contains the value specified by `FirstName-LastName`. This is done within
    the `userVerification` function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the user''s identity has been verified, then `authenticated` is set to
    `true` and therefore the bot can ask what type of action the user wants to carry
    out. Let''s check this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the user has been verified and the bot''s state has been authenticated,
    the bot then requests that the user chooses if he or she wants to request some
    vacation days or sick leave days. Once the user responds, each state is then stored
    using Boolean variables called `holidays` and `sick`, which are then used by the
    bot to send back a reply asking how many days the user wants to book. Take a look
    at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![HR agent bot logic](img/image00211.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user provides the number of days, the bot then replies back confirming
    the request. The output can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![HR agent bot logic](img/image00212.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It's important to note that there's room to add additional logic and perform
    more operations, such as actually changing the values on the `AZURE_TABLE` once
    the days request has been entered, so there's plenty of opportunity to keep exploring
    and expanding the functionality of the bot.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's been an interesting journey on how to connect and interact with Skype services,
    and how to create a bot to leverage some basic but interesting and interactive
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: We've see how to get our bot all set up with Skype, how to install the related npm
    packages, and implement the basic skeleton and structure for our app.
  prefs: []
  type: TYPE_NORMAL
- en: Further to this, you've also learned how to create the bot's brains in order
    to perform certain tasks and send the right response based on the input received.
  prefs: []
  type: TYPE_NORMAL
- en: If you'd like to expand on this a bit further, something interesting to think
    about is how to keep the state for multiple users simultaneously and also add
    more interactive functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, this has given you some inspiration, food for thought, and an eagerness
    to continue exploring many more possibilities for implementing Skype bots. Thanks
    so much for reading.
  prefs: []
  type: TYPE_NORMAL
