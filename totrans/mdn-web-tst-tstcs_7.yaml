- en: '*Chapter 7:* Findings from TestCafe'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main learning goal in this chapter is to optimize our test actions with
    functions and get familiar with how to use npm scripts to run the tests. We will
    also review the main direction of TestCafe framework development, along with some
    references to useful resources.
  prefs: []
  type: TYPE_NORMAL
- en: This knowledge will give us some additional ideas on how to refactor tests,
    how to run them more efficiently, and where to search for further improvements.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Taking a final step with test functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping up the test project with npm scripts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring TestCafe development and future plans.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional references to useful resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All code examples for this chapter can be found on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7).'
  prefs: []
  type: TYPE_NORMAL
- en: Taking a final step with test functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The tests that we created consist of chains of actions. Some of them, such
    as the `Creating a new project` test, are still being repeated. So, one final
    logical step to take will be to separate such sequences of actions into the functions.
    Let''s see how this can be achieved with the `createNewProject`, `createNewIssue`,
    and `uploadFile` functions inside `redmine-page.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we moved `getPageUrl` and `regularUser` to `redmine-page.js`
    as it is quite convenient to have all the utility functions concentrated in one
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the `createNewProject` function, which will contain all the
    actions to create a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'There is one more function to add, which will contain all the actions to create
    a new issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, add the function that contains all the actions to upload a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/tests/redmine-page4.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/tests/redmine-page4.js).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the updated `Create a new project` test will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you probably noticed, now, only `Selector` is required from `testcafe`, as
    `ClientFunction`, `Role`, and `t` were moved to `redmine-page.js`. In addition,
    we are now using `redminePage.regularUser` instead of just `regularUser` - this
    is due to moving the `regularUser` function to `redmine-page.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated `Create a new issue` test will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Verify that the issue is displayed on a project page` test will also look
    shorter now, as we are using the `createNewProject` and `createNewIssue` functions
    inside it to create corresponding entities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Upload a file` test, we will utilize the `createNewProject` and `uploadFile`
    functions so that it will look more compact, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how the updated `Edit the issue` test with the `createNewProject` and
    `createNewIssue` functions will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And the refactored `Verify that the updated issue is displayed on a project
    page` test with the `createNewProject` and `createNewIssue` functions will now
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Search for the issue` test will also benefit from utilizing the `createNewProject`
    and `createNewIssue` functions as it will become significantly shorter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, here is what the refactored `Delete the issue` and `Delete the
    file` tests will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/tests/basic-tests22.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/tests/basic-tests22.js).'
  prefs: []
  type: TYPE_NORMAL
- en: So, we have optimized our set of tests to be granular and utilize functions
    instead of repeated actions. Now, let's wrap up the test project with npm scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up the test project with npm scripts
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have finished refactoring our tests, let''s see how to run them more
    efficiently. As we recall from [*Chapter 3*](B16280_03_Final_JM_ePub.xhtml#_idTextAnchor043)*,
    Setting Up the Environment*, where we initiated `package.json`, and [*Chapter
    4*](B16280_04_Final_JM_ePub.xhtml#_idTextAnchor099)*, Building a Test Suite with
    TestCafe*, where we added the `js-automation-tools` library, our basic `package.json`
    file currently looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We are currently running our tests by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, as we discussed in [*Chapter 5*](B16280_05_Final_JM_ePub.xhtml#_idTextAnchor125),
    *Improving the Tests*, we utilize a double dash debug-on-fail flag to make our
    life easier while developing new tests (this will pause the test when it fails
    and will allow you to view the tested page and determine the cause of the fail):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use one additional flag:`--speed` (sets the rate of test execution)
    â€“ to reduce the test execution speed for debugging:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'It is starting to look quite long now, isn''t it? To overcome this problem,
    we can use npm scripts. Let''s create a `test-debug` alias inside `package.json`
    to launch tests with debugging flags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'So, now we can run our tests with **debugging flags** by executing a short
    command with the alias that we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As we have discussed how to use npm scripts to add commands for local test
    debugging, let''s now imagine that we will also need to run our tests on a `--quarantine-mode`
    flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/package.json](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch7/test-project/package.json).'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, now we can run our tests on CI by executing a short and simple command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: To sum up, in this section, we discussed how to create short aliases for the
    local and remote (continuous integration) commands with npm scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's explore how to keep a finger on the pulse of TestCafe development
    and where to look for further improvements.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring TestCafe development and future plans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The birth of TestCafe can be traced back to early 2010, when developers from
    DevExpress started working on it. Initially, when released in 2013, it was a commercial
    testing framework. In 2016, it was decided to open source the core of TestCafe.
    Since then, there have been more than 760,000 downloads per month and the figures
    are still growing. DevExpress also released a commercial testing IDE called TestCafe
    Studio ([https://www.devexpress.com/products/testcafestudio/](https://www.devexpress.com/products/testcafestudio/)),
    which was built on top of the open source TestCafe core. So, it looks like TestCafe
    is here to stay. DevExpress will keep developing it because this will add new
    features to TestCafe Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s recap some of the advantages of TestCafe:'
  prefs: []
  type: TYPE_NORMAL
- en: Open source.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy and fast installation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Headless testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-platform and cross-browser out of the box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Supports one of the most popular programming languages for web development:
    JavaScript/TypeScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A clear, flexible, and well-documented API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart assertion and automatic waiting mechanisms out of the box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Free custom plugins for browser providers, framework-specific selectors, custom
    reporters, Cucumber support, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As for the future direction of development for TestCafe, according to the roadmap
    ([https://devexpress.github.io/testcafe/roadmap/](https://devexpress.github.io/testcafe/roadmap/)),
    there is a plan to support API testing by adding methods for sending HTTP requests
    and checking the response details. In addition to this, the TestCafe team is actively
    working on multiple browser windows feature and a plan is afoot to improve the
    TestCafe debugging flow further.
  prefs: []
  type: TYPE_NORMAL
- en: 'One more piece of advice that is definitely worth mentioning: keep an eye on
    TestCafe changelog ([https://github.com/DevExpress/testcafe/blob/master/CHANGELOG.md](https://github.com/DevExpress/testcafe/blob/master/CHANGELOG.md)).
    It contains tons of useful information about new features and updates. This way,
    you will always know when a new version gets released, and what to expect from
    it.'
  prefs: []
  type: TYPE_NORMAL
- en: As we have reviewed the development of TestCafe and touched on its future plans,
    let's now explore some resources that can be of use in terms of further test automation
    with TestCafe.
  prefs: []
  type: TYPE_NORMAL
- en: Additional references to useful resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some great sources of information on TestCafe:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TestCafe documentation**: [https://devexpress.github.io/testcafe/documentation/reference/](https://devexpress.github.io/testcafe/documentation/reference/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TestCafe changelog**: [https://github.com/DevExpress/testcafe/blob/master/CHANGELOG.md](https://github.com/DevExpress/testcafe/blob/master/CHANGELOG.md).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TestCafe future roadmap**: [https://devexpress.github.io/testcafe/roadmap/](https://devexpress.github.io/testcafe/roadmap/)
    and [https://github.com/DevExpress/testcafe/projects](https://github.com/DevExpress/testcafe/projects).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TestCafe Team Blog**: [https://devexpress.github.io/testcafe/media/team-blog/](https://devexpress.github.io/testcafe/media/team-blog/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stack Overflow filter for the most recent questions regarding TestCafe**:
    [https://stackoverflow.com/questions/tagged/testcafe](https://stackoverflow.com/questions/tagged/testcafe).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored how to optimize test actions with functions, and
    how to use npm scripts to run the tests. We also reviewed the development of the
    TestCafe framework, and some references to useful resources. These skills and
    lessons are intended to help you with any further test automation development
    by highlighting a number of ideas on how to refactor tests, how to run them more
    effectively, and where to look for further improvements.
  prefs: []
  type: TYPE_NORMAL
- en: This wraps up our fruitful exploration of TestCafe, the rising star of test
    automation. I hope that you enjoyed it and will continue using this magnificent
    tool in your future projects!
  prefs: []
  type: TYPE_NORMAL
