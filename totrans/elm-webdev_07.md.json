["```js\n{\"coord\":{\"lon\":-87.62,\"lat\":41.88},\"weather\":[{\"id\":802,\"main\":\"Clouds\",\"description\":\"scattered clouds\",\"icon\":\"03n\"}],\"base\":\"stations\",\"main\":{\"temp\":268.9,\"pressure\":1025,\"humidity\":86,\"temp_min\":267.15,\"temp_max\":270.15},\"visibility\":16093,\"wind\":{\"speed\":2.1,\"deg\":260},\"clouds\":{\"all\":40},\"dt\":1518941700,\"sys\":{\"type\":1,\"id\":1030,\"message\":0.0033,\"country\":\"US\",\"sunrise\":1518957687,\"sunset\":1518996470},\"id\":4887398,\"name\":\"Chicago\",\"cod\":200}\n```", "```js\nmodule Main exposing (..)\n\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (..)\n\n-- Model\ninit =\n    {}\n\n-- Update\ntype Msg\n    = Nothing\n\nupdate msg model =\n    model\n\n-- View\nview model =\n    div [] [ text \"Everything will go here\" ]\n\n-- Main\nmain =\n    beginnerProgram\n        { model = init\n        , view = view\n        , update = update\n        }\n```", "```js\nmodule Main exposing (..)\nimport Html exposing (..)\n\n-- Model\ntype alias Model =\n    {}\n\ninit : ( Model, Cmd Msg )\ninit =\n    ( Model, Cmd.none )\n\n-- Update\ntype Msg\n    = Noop\n\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        Noop ->\n            ( model, Cmd.none )\n\n-- View\nview : Model -> Html Msg\nview model =\n    div [] [ text \"Everything will go here, this time using Html.program\" ]\n\n-- Subscriptions\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n    Sub.none\n\n-- Main\nmain : Program Never Model Msg\nmain =\n    Html.program\n        { init = init\n        , view = view\n        , update = update\n        , subscriptions = subscriptions\n        }\n```", "```js\nelm package install elm-lang/http 1.0.0\n```", "```js\nTo install elm-lang/http I would like to add the following\ndependency to elm-package.json:\n\n \"elm-lang/http\": \"1.0.0 <= v < 2.0.0\"\n\nMay I add that to elm-package.json for you? [Y/n]\n```", "```js\nSome new packages are needed. Here is the upgrade plan.\n\n Install:\n elm-lang/http 1.0.0\n\nDo you approve of this plan? [Y/n]\n```", "```js\nStarting downloads...\n\n ● elm-lang/http 1.0.0\n\nPackages configured successfully!\n```", "```js\n{\n    \"version\": \"1.0.0\",\n    \"summary\": \"helpful summary of your project, less than 80 characters\",\n    \"repository\": \"https://github.com/user/project.git\",\n    \"license\": \"BSD3\",\n    \"source-directories\": [\n        \"src\"\n    ],\n    \"exposed-modules\": [],\n    \"dependencies\": {\n        \"elm-lang/core\": \"5.1.1 <= v < 6.0.0\",\n        \"elm-lang/html\": \"2.0.0 <= v < 3.0.0\",\n        \"elm-lang/http\": \"1.0.0 <= v < 2.0.0\"\n    },\n    \"elm-version\": \"0.18.0 <= v < 0.19.0\"\n}\n```", "```js\nmodule Main exposing (..)\n\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (..)\nimport Http\nimport Json.Decode as Decode\n```", "```js\nModule `Html.Attributes` is unused.\nBest to remove it. Don't save code quality for later!\n```", "```js\ntype alias Model =\n    { temperatureInfo : TemperatureInfo\n    , city : String\n    }\n\ntype alias TemperatureInfo =\n    { name : String\n    , windSpeed : Float\n    , temperature : Float\n    , pressure : Float\n    , humidity : Float\n    }\n```", "```js\ninit =\n    ( Model (TemperatureInfo \"Did not load\" 0 0 0 0) \"\"\n    , Cmd.none\n    )\n```", "```js\ntype Msg\n    = GetTemp\n    | CityInput String\n    | NewTemp (Result Http.Error String)\n```", "```js\nNewTemp (Result Http.Error String)\n```", "```js\ntype Result error value\n    = Ok value\n    | Err error\n```", "```js\nimport Date\nDate.fromString \"2018-02-18\"\n```", "```js\nOk <Sun Feb 18 2018 00:00:00 GMT+0000 (UTC)> : Result.Result String Date.Date\n```", "```js\nDate.fromString \"0\"\n```", "```js\nOk <Sat Jan 01 2000 00:00:00 GMT+0000 (UTC)> : Result.Result String Date.Date\n```", "```js\nDate.fromString \"abc\"\n```", "```js\nErr \"Unable to parse 'abc' as a date. Dates must be in the ISO 8601 format.\"\n : Result.Result String Date.Date\n```", "```js\ntype Maybe a\n  = Just a\n  | Nothing\n```", "```js\ntestingMaybe = Just 1\n```", "```js\nJust 1 : Maybe.Maybe number\n```", "```js\ntestingMaybe = Just 1.1\n```", "```js\nJust 1.1 : Maybe.Maybe Float\n```", "```js\ntestingMaybe = Nothing\n```", "```js\nNothing : Maybe.Maybe a\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (Html, text)\n\n-- A person, but maybe we do not know their age.\ntype alias Person =\n    { name : String\n    , age : Maybe String\n    }\ntom = { name = \"Tom\", age = Just \"42\" }\nsue = { name = \"Sue\", age = Nothing }\n\nmain =\n    text <| \n    case tom.age of \n        Nothing ->\n            \"No age for this person\"\n        Just val ->\n            val\n```", "```js\ncase sue.age of\n```", "```js\nResult.withDefault 0 (Ok 1)\n```", "```js\n1 : number\n```", "```js\nResult.withDefault \"This is default.\" (Ok \"This is OK\")\n```", "```js\n\"This is OK\" : String\n```", "```js\nMaybe.withDefault 0 Nothing\n```", "```js\n0 : number\n```", "```js\nMaybe.withDefault \"abc\" Nothing\n```", "```js\n\"abc\" : String\n```", "```js\nMaybe.withDefault {} Nothing\n```", "```js\n{} : {}\n```", "```js\nupdate msg model =\n    case msg of\n        GetTemp ->\n            ( model, getTemperature model.city )\n\n        NewTemp (Ok json) ->\n            let\n                newTemperatureInfo =\n                    decodeTemperatureInfo json\n            in\n            ( { model | temperatureInfo = newTemperatureInfo }, Cmd.none )\n\n        NewTemp (Err _) ->\n            ( model, Cmd.none )\n\n        CityInput city ->\n            ( { model | city = city }, Cmd.none )\n```", "```js\nimport Json.Decode exposing (..)\ndecodeString int \"100\"\n```", "```js\nOk 100 : Result.Result String Int\n```", "```js\ndecodeString int \"true\"\n```", "```js\nErr \"Expecting an Int but instead got: true\" : Result.Result String Int\n```", "```js\ndecodeString float \"1.234\"\n```", "```js\nOk 1.234 : Result.Result String Float\n```", "```js\ndecodeString string \"abcd\"\n```", "```js\nErr \"Given an invalid JSON: Unexpected token a\" : Result.Result String String\n```", "```js\ndecodeString string \"\\\"abcd\\\"\"\n```", "```js\nOk \"abcd\" : Result.Result String String\n```", "```js\ndecodeString bool \"false\"\n```", "```js\nOk False : Result.Result String Bool\n```", "```js\nimport Json.Decode exposing (..)\nint\n<decoder> : Json.Decode.Decoder Int\nfloat\n<decoder> : Json.Decode.Decoder Float\nstring\n<decoder> : Json.Decode.Decoder String\nbool\n<decoder> : Json.Decode.Decoder Bool\n```", "```js\n{  \n   \"coord\":{  \n      \"lon\":-87.62,\n      \"lat\":41.88\n   },\n   \"weather\":[  \n      {  \n         \"id\":802,\n         \"main\":\"Clouds\",\n         \"description\":\"scattered clouds\",\n         \"icon\":\"03n\"\n      }\n   ],\n   \"base\":\"stations\",\n   \"main\":{  \n      \"temp\":268.9,\n      \"pressure\":1025,\n      \"humidity\":86,\n      \"temp_min\":267.15,\n      \"temp_max\":270.15\n   },\n   \"visibility\":16093,\n   \"wind\":{  \n      \"speed\":2.1,\n      \"deg\":260\n   },\n   \"clouds\":{  \n      \"all\":40\n   },\n   \"dt\":1518941700,\n   \"sys\":{  \n      \"type\":1,\n      \"id\":1030,\n      \"message\":0.0033,\n      \"country\":\"US\",\n      \"sunrise\":1518957687,\n      \"sunset\":1518996470\n   },\n   \"id\":4887398,\n   \"name\":\"Chicago\",\n   \"cod\":200\n}\n```", "```js\nimport Html exposing (..)\nimport Json.Decode exposing (..)\n\nmain = text (toString (decodeString weatherDataDecoder (json)))\n\ntype alias WeatherData =\n { name : String }\n\njson = \"\"\"\n{ \n \"coord\":{ \n \"lon\":-87.62,\n \"lat\":41.88\n },\n \"weather\":[ \n { \n \"id\":802,\n \"main\":\"Clouds\",\n \"description\":\"scattered clouds\",\n \"icon\":\"03n\"\n }\n ],\n \"base\":\"stations\",\n \"main\":{ \n \"temp\":268.9,\n \"pressure\":1025,\n \"humidity\":86,\n \"temp_min\":267.15,\n \"temp_max\":270.15\n },\n \"visibility\":16093,\n \"wind\":{ \n \"speed\":2.1,\n \"deg\":260\n },\n \"clouds\":{ \n \"all\":40\n },\n \"dt\":1518941700,\n \"sys\":{ \n \"type\":1,\n \"id\":1030,\n \"message\":0.0033,\n \"country\":\"US\",\n \"sunrise\":1518957687,\n \"sunset\":1518996470\n },\n \"id\":4887398,\n \"name\":\"Chicago\",\n \"cod\":200\n}\n\"\"\"\n\nweatherDataDecoder =\n Json.Decode.map\n WeatherData\n (field \"name\" string)\n```", "```js\nOk { name = \"Chicago\" }\n```", "```js\nimport Html exposing (..)\nimport Json.Decode exposing (..)\n\nmain = text (toString (decodeString weatherDataDecoder (json)))\n\ntype alias WeatherData =\n  { id : Int \n  , name : String \n  }\n\njson = \"\"\"\n{ \n   \"coord\":{ \n      \"lon\":-87.62,\n      \"lat\":41.88\n   },\n   \"weather\":[ \n      { \n         \"id\":802,\n         \"main\":\"Clouds\",\n         \"description\":\"scattered clouds\",\n         \"icon\":\"03n\"\n      }\n   ],\n   \"base\":\"stations\",\n   \"main\":{ \n      \"temp\":268.9,\n      \"pressure\":1025,\n      \"humidity\":86,\n      \"temp_min\":267.15,\n      \"temp_max\":270.15\n   },\n   \"visibility\":16093,\n   \"wind\":{ \n      \"speed\":2.1,\n      \"deg\":260\n   },\n   \"clouds\":{ \n      \"all\":40\n   },\n   \"dt\":1518941700,\n   \"sys\":{ \n      \"type\":1,\n      \"id\":1030,\n      \"message\":0.0033,\n      \"country\":\"US\",\n      \"sunrise\":1518957687,\n      \"sunset\":1518996470\n   },\n   \"id\":4887398,\n   \"name\":\"Chicago\",\n   \"cod\":200\n}\n\"\"\"\n\nweatherDataDecoder =\n  Json.Decode.map2\n    WeatherData\n    (field \"id\" int)\n    (field \"name\" string)\n```", "```js\nOk { id = 4887398, name = \"Chicago\" }\n```", "```js\ntype alias WeatherData =\n  { id : Int \n  , name : String \n  }\n```", "```js\nweatherDataDecoder =\n  Json.Decode.map2\n    WeatherData\n    (field \"id\" int)\n    (field \"name\" string)\n```", "```js\nweatherDataDecoder =\n  Json.Decode.map3\n    WeatherData\n    (field \"id\" int)\n    (field \"name\" string)\n    (at [\"sys\", \"country\"] string)\n```", "```js\ntype alias WeatherData =\n  { id : Int \n  , name : String \n  , country: String\n  }\n```", "```js\nOk { id = 4887398, name = \"Chicago\", country = \"US\" }\n```", "```js\ngetTemperature city =\n    let\n        url =\n            \"http://api.openweathermap.org/data/2.5/weather?q=\" ++ city ++ \"&APPID=b30c7031a64e301cb64ceaa346e24a83\"\n    in\n    Http.send NewTemp (Http.getString url)\n```", "```js\ndecodeTemperatureInfo : String -> TemperatureInfo\ndecodeTemperatureInfo json =\n    let\n        name =\n            Result.withDefault \"Error decoding data!\" (Decode.decodeString (Decode.field \"name\" Decode.string) json)\n\n        windSpeed =\n            Result.withDefault 0 (Decode.decodeString (Decode.at [ \"wind\", \"speed\" ] Decode.float) json)\n\n        temperature =\n            Result.withDefault 0 (Decode.decodeString (Decode.at [ \"main\", \"temp\" ] Decode.float) json)\n\n        pressure =\n            Result.withDefault 0 (Decode.decodeString (Decode.at [ \"main\", \"pressure\" ] Decode.float) json)\n\n        humidity =\n            Result.withDefault 0 (Decode.decodeString (Decode.at [ \"main\", \"humidity\" ] Decode.float) json)\n    in\n    TemperatureInfo name windSpeed temperature pressure humidity\n```", "```js\nview model =\n    div []\n        [ input [ placeholder \"City\", onInput CityInput ] []\n        , br [] []\n        , button [ onClick GetTemp ] [ text \"Get temperature\" ]\n        , br [] []\n        , div [] [ text \"Name: \", text model.temperatureInfo.name ]\n        , div [] [ text \"Temp: \", text (toString model.temperatureInfo.temperature) ]\n        , div [] [ text \"Wind: \", text (toString model.temperatureInfo.windSpeed) ]\n        , div [] [ text \"Pressure: \", text (toString model.temperatureInfo.pressure) ]\n        , div [] [ text \"Humidity: \", text (toString model.temperatureInfo.humidity) ]\n        ]\n```", "```js\nmodule Main exposing (..)\n\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (..)\nimport Http\nimport Json.Decode as Decode\n\nmain =\n    Html.program\n        { init = init\n        , view = view\n        , update = update\n        , subscriptions = subscriptions\n        }\n\ntype alias Model =\n    { temperatureInfo : TemperatureInfo\n    , city : String\n    }\n\ntype alias TemperatureInfo =\n    { name : String\n    , windSpeed : Float\n    , temperature : Float\n    , pressure : Float\n    , humidity : Float\n    }\n\ninit : ( Model, Cmd Msg )\ninit =\n    ( Model (TemperatureInfo \"Did not load\" 0 0 0 0) \"\"\n    , Cmd.none\n    )\n\ntype Msg\n    = GetTemp\n    | CityInput String\n    | NewTemp (Result Http.Error String)\n\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        GetTemp ->\n            ( model, getTemperature model.city )\n\n        NewTemp (Ok json) ->\n            let\n                newTemperatureInfo =\n                    decodeTemperatureInfo json\n            in\n                ( { model | temperatureInfo = newTemperatureInfo }, Cmd.none )\n\n        NewTemp (Err _) ->\n            ( model, Cmd.none )\n\n        CityInput city ->\n            ( { model | city = city }, Cmd.none )\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ input [ placeholder \"City\", onInput CityInput ] []\n        , br [] []\n        , button [ onClick GetTemp ] [ text \"Get temperature\" ]\n        , br [] []\n        , div [] [ text \"Name: \", text (model.temperatureInfo.name) ]\n        , div [] [ text \"Temp: \", text (toString model.temperatureInfo.temperature) ]\n        , div [] [ text \"Wind: \", text (toString model.temperatureInfo.windSpeed) ]\n        , div [] [ text \"Pressure: \", text (toString model.temperatureInfo.pressure) ]\n        , div [] [ text \"Humidity: \", text (toString model.temperatureInfo.humidity) ]\n        ]\n\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n    Sub.none\n\ngetTemperature : String -> Cmd Msg\ngetTemperature city =\n    let\n        url =\n            \"http://api.openweathermap.org/data/2.5/weather?q=\" ++ city ++ \"&APPID=b30c7031a64e301cb64ceaa346e24a83\"\n    in\n        Http.send NewTemp (Http.getString url)\n\ndecodeTemperatureInfo : String -> TemperatureInfo\ndecodeTemperatureInfo json =\n    let\n        name =\n            Result.withDefault \"Error decoding data!\" (Decode.decodeString (Decode.field \"name\" Decode.string) json)\n\n        windSpeed =\n            Result.withDefault 0 (Decode.decodeString (Decode.at [ \"wind\", \"speed\" ] Decode.float) json)\n\n        temperature =\n            Result.withDefault 0 (Decode.decodeString (Decode.at [ \"main\", \"temp\" ] Decode.float) json)\n\n        pressure =\n            Result.withDefault 0 (Decode.decodeString (Decode.at [ \"main\", \"pressure\" ] Decode.float) json)\n\n        humidity =\n            Result.withDefault 0 (Decode.decodeString (Decode.at [ \"main\", \"humidity\" ] Decode.float) json)\n    in\n        TemperatureInfo name windSpeed temperature pressure humidity\n```"]