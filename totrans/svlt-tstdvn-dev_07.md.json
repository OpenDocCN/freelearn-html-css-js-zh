["```js\n    export class BirthdayListPage {\n      constructor(page) {\n        this.page = page;\n      }\n      async goto() {\n        await this.page.goto('/birthdays');\n      }\n    }\n    ```", "```js\n    import {\n      BirthdayListPage\n    } from './BirthdayListPage.js';\n    ```", "```js\n    test('edits a birthday', async ({ page }) => {\n      await page.goto('/birthdays');\n      ...\n    });\n    ```", "```js\ntest('edits a birthday', async ({ page }) => {\n  const birthdayListPage = new BirthdayListPage(page);\n  await birthdayListPage.goto();\n  ...\n});\n```", "```js\n    // add a birthday using the form\n    await page.getByLabel('Name').fill('Ares');\n    await page\n      .getByLabel('Date of birth')\n      .fill('1985-01-01');\n    await page\n      .getByRole('button', { name: 'Save' })\n      .click();\n    ```", "```js\nexport class BirthdayListPage {\n  ...\n  dateOfBirthField = () =>\n    this.page.getByLabel('Date of birth');\nnameField = () => this.page.getByLabel('Name');\n  saveButton = () =>\n    this.page.getByRole('button', { name: 'Save' });\n}\n```", "```js\n    export class BirthdayListPage {\n      ...\n      saveNameAndDateOfBirth = async (name, dob) => {\n        await this.nameField().fill(name);\n        await this.dateOfBirthField().fill(dob);\n        await this.saveButton().click();\n    };\n    ```", "```js\n    test('edits a birthday', async ({ page }) => {\n      const birthdayListPage = new BirthdayListPage(page);\n      await birthdayListPage.goto();\n      await birthdayListPage.saveNameAndDateOfBirth(\n        'Ares',\n        '1985-01-01'\n      );\n      ...\n    );\n    ```", "```js\n// find the Edit button for that person\nawait page\n  .getByRole('listitem')\n  .filter({ hasText: 'Ares' })\n  .getByRole('button', { name: 'Edit' })\n  .click();\n```", "```js\nentryFor = (name) =>\n  this.page\n    .getByRole('listitem')\n    .filter({ hasText: name });\n```", "```js\n    beginEditingFor = (name) =>\n      this.entryFor(name)\n        .getByRole('button', { name: 'Edit' })\n        .click();\n    ```", "```js\n    test('edits a birthday', async ({ page }) => {\n      const birthdayListPage = new BirthdayListPage(page);\n      await birthdayListPage.goto();\n      await birthdayListPage.saveNameAndDateOfBirth(\n        'Ares',\n        '1985-01-01'\n      );\n      await birthdayListPage.beginEditingFor('Ares');\n      ...\n    });\n    ```", "```js\n    test('edits a birthday', async ({ page }) => {\n      ...\n      await birthdayListPage.beginEditingFor('Ares');\n      await birthdayListPage.saveNameAndDateOfBirth(\n        'Ares',\n        '1995-01-01'\n      );\n      ...\n    });\n    ```", "```js\n    test('edits a birthday', async ({ page }) => {\n      const birthdayListPage = new BirthdayListPage(page);\n      await birthdayListPage.goto();\n      await birthdayListPage.saveNameAndDateOfBirth(\n        'Ares',\n        '1985-01-01'\n      );\n      await birthdayListPage.beginEditingFor('Ares');\n      await birthdayListPage.saveNameAndDateOfBirth(\n        'Ares',\n        '1995-01-01'\n      );\n      await expect(\n        birthdayListPage.entryFor('Ares')\n      ).not.toContainText('1985-01-01');\n      await expect(\n        birthdayListPage.entryFor('Ares')\n      ).toContainText('1995-01-01');\n    });\n    ```", "```js\nconst request = createFormDataRequest({\n // ... the form data object ...\n});\nawait actions.default({ request });\n```", "```js\n    const performFormAction = (formData) =>\n      actions.default({\n        request: createFormDataRequest(formData)\n      });\n    ```", "```js\n    it('adds a new birthday into the list', async () => {\n      await performFormAction({\n        name: 'Zeus',\n        dob: '2009-02-02'\n      });\n      expect(birthdayStore.getAll()).toContainEqual(\n        expect.objectContaining({\n          name: 'Zeus',\n          dob: '2009-02-02'\n        });\n      });\n    });\n    ```", "```js\ncreateBirthday('Zeus Ex', '2007-02-02', { id: storedId() })\n```", "```js\n    export const createBirthday = (\n      name,\n      dob,\n      extra = {}\n    ) => ({ name, dob, ...extra });\n    ```", "```js\n    import {\n      createBirthday\n    } from src/factories/birthday.js';\n    ```", "```js\n    render(Birthday, {\n      ...exampleBirthday,\n      name: 'Hercules'\n    });\n    ```", "```js\nrender(\n  Birthday,\n  createBirthday('Hercules', '1996-03-03')\n);\n```", "```js\n    import {\n      createBirthday\n    } from 'src/factories/birthday.js';\n    ```", "```js\n    await performFormAction({\n      name: 'Zeus',\n      dob: '2009-02-02'\n    });\n    ```", "```js\nawait performFormAction(\n  createBirthday('Zeus', '2009-02-02')\n);\n```", "```js\nit('saves unique ids onto each new birthday', async () => {\n  const request = createBirthday(\n    'Zeus',\n    '2009-02-02'\n  );\n  await performFormAction(request);\n  await performFormAction(request);\n  expect(birthdayStore.getAll()[0].id).not.toEqual(\n    birthdayStore.getAll()[1].id\n  );\n});\n```", "```js\nit('updates an entry that shares the same id', async () => {\n  await performFormAction(\n    createBirthday('Zeus', '2009-02-02')\n  );\n  await performFormAction(\n    createBirthday('Zeus Ex', '2007-02-02', { id:\n      storedId() })\n  );\n  expect(birthdayStore.getAll()).toHaveLength(1);\n  expect(birthdayStore.getAll()).toContainEqual({\n    id,\n    name: 'Zeus Ex',\n    dob: '2007-02-02'\n  });\n});\n```", "```js\n    const birthdays = [\n      createBirthday('Hercules', '1994-02-02', {\n        id: '123'\n      }),\n      createBirthday('Athena', '1989-01-01', {\n        id: '234'\n      })\n    ];\n    ```", "```js\n    it('displays all the birthdays passed to it', () => {\n      render(Page, {\n        data: {\n          birthdays: [\n            createBirthday('Hercules', '1994-02-02', {\n            id: '123'\n            })\n          ]\n        },\n        form: {\n          ...createBirthday('Hercules', 'bad dob', {\n            id: '123'\n            }),\n          error: 'An error'\n        }\n      });\n    });\n    ```"]