- en: Chapter 10. Static Sites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a basic site project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a page to the site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding content to the site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding data to the site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and using a site layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating pages from a collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a template helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the areas where Grunt really shines is in the management of static website
    projects. Using Grunt for generating a static website can result in a fast and
    easily modifiable site, replacing the complexity and cost of building a traditional
    server-generated site when its advantages would not be useful to the situation.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we'll be focusing on making use of the **Assemble** framework
    to build a static website. At its core, Assemble is a Grunt plugin, but it also
    uses Grunt to bring together all its other related tools.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we'll build a simple static website to represent us on the Internet
    in an individual capacity. Think of it as a résumé made available to the public
    via the **World Wide Web** (**WWW**).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a basic site project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To speed up the process of starting a new project based on the **Assemble**
    framework, we'll make use of a **Yeoman** generator provided by the developer
    community. The generator will produce a minimal project setup, with everything
    we'll need to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only requirement for this recipe is a global installation of Node.js, with
    Grunt installed on top of it as per the *Installing the Grunt CLI* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*. Be sure to refer to it if you are not yet familiar with its
    contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through installing the Yeoman tool and using it
    to generate a basic Assemble project.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we''ll need to install the Yeoman tool globally using the `npm` utility.
    This is done by entering the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll also need to install the Yeoman generator that is specifically geared
    toward generating an Assemble project. This is done by entering the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next we''ll create a directory called `mysite` that will contain our static
    website project, and navigate into it using a command similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With Yeoman and the required generator installed, we can now use it to generate
    our plugin project by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After running the previous command, we will be presented with a series of questions
    that will assist the generator in creating the project. This interaction should
    look something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Be sure you replace the example `me` GitHub username with your own, and to opt-out
    of installing any extra Assemble plugins. Making use of extra plugins will be
    discussed later in this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After the questions have been answered, the generator will create the files
    required for a simple static website project. Output similar to the following
    will inform us of these actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After creating the aforementioned files the generator should also automatically
    install the required dependencies mentioned in the newly created `package.json`
    and `bower.json` files. If however it appears that the dependencies have not been
    installed, you can try to do so manually using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the necessary files created and dependencies installed, we can now build
    our site and have it locally hosted, using the `grunt server` command. This should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once the `server` task has completed, it should automatically open your default
    browser on `http://localhost:9000/`, which should show you the standard generated
    site. At the time of writing, it looked something like the following:![How to
    do it...](img/image00281.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a page to the site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As its core, a static website is just a collection of pages. With our basic
    setup in place we can look at adding a page that contains some biographical information
    about us.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we'll work with the basic project structure that we created in
    the *Setting up a basic site project* recipe earlier in this chapter. Be sure
    to refer to it if you are not yet familiar with it's content. Before we start
    we should also make sure that the site builder and server are running. If they
    aren't yet running, they can be started using the `grunt server` command.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps take us through adding a page to our static site that will
    contain our simple biography:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First we''ll create a file called `bio.hbs` in the `src/templates/pages` directory
    and fill it with some information about our new page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The initial part of the file is called the **YAML front matter** section which
    can be used to provide metadata about a page to the site building tool. You can
    read more about it at the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://assemble.io/docs/YAML-front-matter.html](http://assemble.io/docs/YAML-front-matter.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With our page information added to the file, we can proceed to add the HTML
    content of the page. Let''s do that by adding the following after the front matter
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The default template language provided by the Assemble project generator is
    Handlebars, which was used in the preceding code. You can read more about Handlebars
    at the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://handlebarsjs.com/](http://handlebarsjs.com/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also be sure to observe that the metadata provided in the front matter section
    can be used in the page templates. An example of this can be seen with the usage
    of the `heading` variable in the preceding code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After saving our newly created page file, the site builder that we initially
    started up should automatically detect that it has been added and proceed to recompile
    our site, producing output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once it has finished with the compilation it should refresh our browser view
    of `http://localhost:9000/`, after which we should now see a new `Bio` item in
    our navigation bar at the top of the site. If we select this item we should be
    presented with our new page that should look something like the following:![How
    to do it...](img/image00282.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding content to the site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing a website it is usually recommended that the structure and content
    of a site remain separated. Having it organized in this fashion makes it easy
    for us to edit the ever changing content of a site, without having to get involved
    with it's relatively static structure every time we do so.
  prefs: []
  type: TYPE_NORMAL
- en: The **Assemble** framework comes bundled with a library that implements the
    **Markdown** text formatting syntax; this allows us to easily create content documents
    with a minimal structure that is rendered to well-formed HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about the Markdown syntax at following the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://daringfireball.net/projects/markdown/](http://daringfireball.net/projects/markdown/)'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we'll continue working on the project from the *Adding a page
    to the site* recipe in this chapter. Be sure to refer to it if you are not yet
    familiar with its contents. Before we start we should also make sure that the
    site builder and server are running. If they aren't yet running they can be started
    using the `grunt server` command.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a markdown document to contain
    our biography and using it in a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll create a new file called `bio.md` in the `src/content` directory
    and fill it with the contents of our biography in Markdown format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A handy cheatsheet for the Markdown syntax supported by Assemble can be found
    at the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://assemble.io/docs/Cheatsheet-Markdown.html](http://assemble.io/docs/Cheatsheet-Markdown.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With our content file created we now need to use it on our site. We''ll do
    that by changing the contents of the `src/templates/pages/bio.hbs` file to the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `md` **Handlebars** helper is provided by the `handlebars-helpers` package
    that comes bundled with Assemble. It can be used to render a Markdown file by
    providing either a string or a variable that contains a file path.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After saving the altered `bio.hbs` file, the site builder that we initially
    started up should automatically detect that it has been modified and proceed to
    recompile our site, producing output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we now have a look at our biography page at `http://localhost:9000/bio.html`
    we'll see that our new content is now displayed on it; it should look something
    like the following:![How to do it...](img/image00283.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding data to the site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quite often we'll find that the majority of the content on a site repeats a
    pattern, and that only certain parts of the content differ from page to page.
    A site that displays articles for instance, will display each article using the
    same layout, and also have them listed in a repetitive manner. As developers,
    we'd probably like to avoid having to create each of these similar structured
    pages or items by hand.
  prefs: []
  type: TYPE_NORMAL
- en: For this purpose it's usually recommended to store the content we like to display
    in this fashion as data, which we can then render using a template or layout that
    will present each of them with the same template.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we'll continue working with the project from the *Adding content
    to the site* recipe found earlier in this chapter. Be sure to refer to it if you
    are not yet familiar with its contents. Before we start we should also make sure
    that the site builder and server are running. If they aren't yet running they
    can be started using the `grunt server` command.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through adding data that represents the items in
    our navigation bar and using that data to customize the rendering of the navigation
    bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Due to there only being one navigation bar for our site, we might as well just
    add it to the existing `site.yml` file located in the `src/data` directory. This
    file is used for storing data related to the site itself. Let''s add the following
    `sections` collection to its contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding file has its data stored in the YAML format. The following URL
    provides more information about the YAML format at [http://yaml.org/](http://yaml.org/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next we''ll be altering the template of the navigation bar to use the `sections`
    data we''ve provided in the `site.yml` file. To do this we will first need to
    find the following block of code in the `navbar-fixed-top.hbs` file located in
    the `src/templates/partials` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we''ve found the aforementioned block of code, we can replace the it with
    the code that will list navigation items according to the `sections` data. This
    is done by replacing it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, the `#is` helper is used to check that the full path name of the page
    is the same as the one that should be linked to by the navigation bar item. If
    they match, then the item should be rendered as the currently activated one.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `relative` helper is used here to determine the relative path from the current
    page to the one that the navigation item should be linked to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Both the helpers mentioned here are provided by the `handlebars-helpers` library
    bundled along with Assemble.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Assemble framework makes the data contained in the `src/data` directory
    available according to variables with the same names as the filenames the directory
    contains. This is how we can use the `site` variable name in the previous example
    to access the data contained in the `site.yml` file
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After saving the altered `navbar-fixed-top.hbs` file the site builder that
    we initially started up should automatically detect that it has been modified,
    and proceed to recompile our site, producing output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we now have a look at any of the pages at `http://localhost:9000/` we'll
    see that the items in the navigation bar are now ordered according to the order
    of the items in the `sections` data:![How to do it...](img/image00284.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating and using a site layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having a consistent layout across a site can drastically improve its usability
    and also save time in its development. The Assemble framework allows us to easily
    create and use layouts in various ways.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we'll continue working on the project from the *Adding data to
    the site* recipe in this chapter. Be sure to refer to it if you are not yet familiar
    with it's contents. Before we start we should also make sure that the site builder
    and server are running. If they aren't yet running they can be started using the
    `grunt server` command
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a new layout template and setting
    up some sample blog pages that use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll create a new layout template that will provide the layout for
    our sample blog post pages. Let''s create a file called `post.hbs` in the `src/templates/layouts`
    directory and fill it with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the top of the file in the YAML front matter section, we made use of the
    special `layout` property to indicate the parent template that should be used
    for this template. You can read more about how template inheritance works in Assemble
    at the following web address:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://assemble.io/docs/Layouts.html](http://assemble.io/docs/Layouts.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The combination of HTML and CSS used to build this layout is provided by the
    **Bootstrap** project that is included by default when using the Assemble Yeoman
    generator we used to set up this project. You can read more about Bootstrap at
    the following web address:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://getbootstrap.com/](http://getbootstrap.com/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we''ll create some sample blog pages that will be making use of our newly
    created layout. We''ll do this by creating three files called in the `src/templates/pages/posts`
    directory with the following names: `one.hbs`, `two.hbs`, and `three.hbs`. Each
    of these should contain something similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The content of these pages can be pretty much anything, as long as there is
    at least a front matter section containing a `title` and some HTML content after
    that.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In order for our newly created pages to be rendered we will have to add a new
    `assemble` task target. This target will however be sharing many of the options
    of the existing `pages` target, so what we''ll do next is move the `options` of
    the `pages` target into the `assemble` task configuration itself, so that it can
    be shared across all the targets in the `assemble` task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the options shared across all targets now, we can add the `task` target
    that will be rendering our sample post pages for us. Let''s add the following
    task target called `posts` to the assemble task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order for us to reach these newly generated pages to make some changes to
    the blog post listing page. This can be done by changing the contents of the `blog.hbs`
    file in the `src/templates/pages` directory to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before we continue we''ll also have to take care of a slight side effect we
    caused when placing our sample page templates in the `src/templates/pages/posts`
    directory. The default `watch` task setup that triggers automatic compilation
    of changed templates isn''t configured to look for changes deeper than the `src/templates/pages`
    directory itself. This means that changes to our sample page templates won''t
    trigger a re-compilation. Let''s take care of this problem by changing the `files`
    configuration of the `assemble` target of the `watch` task to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can restart our server that was running so that the configuration
    changes may take effect. After restarting, we should see some extra output with
    regards to the rendering of our sample post pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we now navigate to the blog section of our site at `http://localhost:9000/blog.html`
    and follow one of the listed links we should now see the selected post page rendered
    using our new layout template:![How to do it...](img/image00285.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generating pages from a collection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In case we've got a collection of items in our site data, we might very well
    want to generate some pages using that collection. A site that displays blog posts,
    for instance, would probably want an individual page generated for each post in
    the collection of posts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we'll be continuing work on the project from the *Creating and
    using a site layout* recipe in this chapter. Be sure to refer to it if you are
    not yet familiar with it's content. Before we start we should also make sure that
    the site builder and server are running. If they aren't yet running they can be
    started using the `grunt server` command.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a data file that contains a collection
    of our blog posts, and configuring our project to generate pages using that collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with creating the collection data that we''ll be generating pages
    from. We can do this by creating a file called `posts.yml` in the `src/data` directory
    and giving it the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In each of the page objects, the `filename` property indicates the filename
    of the page that is to be generated, the `data` property can be used to send any
    kind of metadata to the page, and the `content` property can be used to provide
    the content that should be rendered by the `body` tag.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The aforementioned format is determined by the `pages` option for the `assemble`
    task that will be used later in this recipe.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we've got the out blog posts in a data collection, we can remove the
    page templates we previously used to represent them. This can be done by simply
    deleting the entire `src/templates/pages/posts` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With our collection ready and the old page templates removed, we can now alter
    our configuration to render the post pages from the collection. We''ll do this
    by making the following changes to the `posts` target in the `assemble` task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The collection that should be used to generate the new pages from is indicated
    using the pages option. As can be seen in the preceding example, we're also making
    use of the `grunt.file.readYAML` utility to load the collection from the `src/data/posts.yml`
    file we created earlier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The destination in the files object no longer indicates specific `files` that
    should be rendered, but now indicates the directory into which newly generated
    pages should be saved to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we can restart our server that was running in the background for the
    configuration changes may take effect. After restarting, we should see some extra
    output with regards to the rendering of our post pages from the provided collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we now navigate around the blog post items in our site, we should see that
    they now reflect the data that is being provided by the posts collection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a template helper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the process of building page templates, we often come across patterns that
    are repeated in their rendering logic. Template helpers allow us to wrap one of
    these identified patterns in such a way that it can be easily reused in our templates
    across our site.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments can be passed to template helpers, and the logic of the helpers themselves
    are implemented using a regular programming language, making the possibilities
    of what can be achieved with them quite numerous.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we'll be continuing work on the project from the *Generating
    pages from a collection* recipe. Be sure to refer to it if you are not yet familiar
    with it's content. Before we start we should also make sure that the site builder
    and server are running. If they aren't yet running they can be started using the
    `grunt server` command.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a template tag for automatically
    listing our posts on our blog page using the data in the posts collection.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by creating the `lib/helpers` directory, which is used to contain
    the source files that contain the code for our helpers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With our directory ready now, we can create a file called `pages.js` in the
    `lib/helpers` directory and fill it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding helper uses the name of the task target, provided by the `target`
    argument, to find the appropriate target configuration. It then extracts the `pages`
    collection from it and loops over this collection to render the helper's body,
    with each item as the context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can read more about the structure of this file and registering custom helpers
    at the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://assemble.io/docs/Custom-Helpers.html](http://assemble.io/docs/Custom-Helpers.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To keep with the convention of our Grunt configuration file, we''ll add a property
    to the `config` task that indicates the name of the directory that will contain
    reusable libraries. After adding the property, the task should look similar to
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since we''ve added more code to our project in the form of the template helpers,
    we should probably alter our `watch` task so that changes to the template helper
    code would also trigger a rebuild of our site. This can be done by making the
    following changes to the `assemble` target in the `watch` task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next we''ll alter our configuration to load the helpers in our `lib/helpers`
    directory, making them available for use in all our templates. This can be done
    by adding the following `helpers` option to the collection of options for the
    `assemble` task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our template helpers loaded and ready to be used, we can make use of it
    on our site''s blog page to list links to all the posts in our posts collection.
    We do this by changing the contents of `src/templates/pages/blog.hbs` to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally we can restart `server` that was running in the background so that the
    configuration changes can take effect. After restarting we should see that the
    list rendered on the blog page of the site at `http://localhost:9000/blog.html`
    now reflects the items in the posts collection:![How to do it...](img/image00286.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using a plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the purpose of extending its core functionality, the Assemble framework
    provides a plugin system. There are currently only a handful of plugins available
    for Assemble, but having the plugin system available makes it easy for us to create
    and reuse extensions of our own, and perhaps even share them with the community.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we'll be continuing working on the project from the *Creating
    a template helper* recipe. Be sure to refer to it if you are not yet familiar
    with it's content. Before we start we should also make sure that the site builder
    and server are running. If they aren't yet running they can be started using the
    `grunt server` command.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through making use of the `assemble-middleware-sitemap`
    plugin to generate a well-formed **sitemap** that can be used by web crawlers
    to navigate and index the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to install the package that contains the `assemble-middleware-sitemap`
    plugin, and save it to our package dependencies. The following command does this
    for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next we''ll need to indicate that the plugin should be used by all the targets
    of the `assemble` tasks. This can be done by adding `plugins` configuration options
    to the `assemble` task in the Grunt configuration, indicating the name of the
    newly installed plugin package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, we can restart our server that was running in the background so that
    the configuration changes may take effect. After restarting we should see that
    the `robots.txt` and `site.xml` files have been generated in the `dist` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
