- en: Debugging the Script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be taking a look at debugging. Debugging is a very
    important aspect of creating working ServiceNow scripts. We will be taking a look
    at the script and session debugger, and how these are both used. We will then
    look at field watchers, debugging applications, the JavaScript log, and debug
    window. Finally, we will see how to debug REST and SOAP messages in a ServiceNow
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The script debugger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The session debugger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Field Watcher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The JavaScript Log and Debug window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging REST
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SOAP debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script debugger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The script debugger allows developers to debug server-side script to discover
    errors or issues with their code. We had a brief look at the script debugger in
    [Chapter 5](170b38f0-5b60-4c8d-aef3-6833efee13f1.xhtml), *Introduction to Server-Side
    Scripting*.
  prefs: []
  type: TYPE_NORMAL
- en: To recap, we can set breakpoints in the server-side script we have written to
    debug the script when it is run by using the script debugger. This is the only
    way we can use breakpoints in ServiceNow to step through and into our script.
  prefs: []
  type: TYPE_NORMAL
- en: To use the script debugger, we first need to set a breakpoint in one of our
    server-side scripts. This can be any script you want to step through, either a
    system script or one you have built yourself. A good example is the `incident_events`
    business rule, as we can also see how different events are triggered from the
    incident form, too.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, we add a breakpoint in the `incident_events` business rule, as seen
    in *Figure 9.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2abc56f5-f4f5-4068-ad46-0c6f43453cbe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: Business rule incident_events with break point added'
  prefs: []
  type: TYPE_NORMAL
- en: To set this breakpoint, we simply click in the margin of the code to make the
    breakpoint appear, as shown by the arrow. To remove it, we simply click on the
    blue arrow, and the breakpoint is removed. Once the breakpoint is set, we can
    open the script debugger.
  prefs: []
  type: TYPE_NORMAL
- en: To open the script debugger, we can navigate to System Diagnostics | Script
    Debugger. This opens the script debugger in a separate window. We can also open
    the script debugger from any script type field. We need to click on the script
    debugger icon that looks like a small insect with a scroll to open the script
    debugger from this type of field.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see this icon highlighted in *Figure 9.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d8e9a9c-b30f-4d11-a7fa-8ac432ce3482.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: Script type field showing the script debugger'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now run the `incident_events` script by updating any existing incident,
    and when we see the window shown in *Figure 9.3*, we click Start Debugging to
    look at the script stopped at our breakpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd6f4c74-977f-4415-87d3-481fdd05e72d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: Script debugger popup window'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are into the process of debugging, we can switch to the debugging
    window. From here, we have some fairly standard debugging options that can be
    seen in the upper right-hand corner of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see these in *Figure 9.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a31d1f85-df36-4846-a1d5-c01086d6beb2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4: Script debugging options'
  prefs: []
  type: TYPE_NORMAL
- en: 'The options we have for debugging are, from left to right:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pause debugging**: The pausing debugger turns the debugger off. This changes
    the icon to a power icon, but by clicking this changed icon, we can turn the debugger
    back on again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resume script execution**: This will resume the script from after the current
    breakpoint until the next breakpoint, or until the script is complete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step over next function call**: This button allows you to step through the
    code and over any function calls, which means skipping over them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step into next function call**: Clicking this icon steps through the script
    and into any function called in the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step out of current function**: This will step through the current script,
    but out of any function that the code is currently in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These buttons allow you to move through the code you have written from the start
    point of a breakpoint and find where any issues may lie.
  prefs: []
  type: TYPE_NORMAL
- en: This type of debugging is quite typical in a lot of software debugging, with
    options to pause, resume, and step in, out, and over functions. If this is new
    to you, however, spend some time familiarizing yourself with these buttons, as
    it can save you time when debugging longer scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at what the full window looks like in *Figure 9.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa0652c0-fd91-4bcc-918d-c1b7251c2219.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.5: Script debugging window'
  prefs: []
  type: TYPE_NORMAL
- en: This debugging method is very helpful and something that was missing from earlier
    versions of ServiceNow. With the script debugger, we have a much more rounded
    debugging experience.
  prefs: []
  type: TYPE_NORMAL
- en: Adding breakpoints in scripts and being able to step through them adds an extra
    level of debugging, beyond just logging outputs.
  prefs: []
  type: TYPE_NORMAL
- en: The session debugger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The session debugger allows you to debug certain aspects of the ServiceNow platform
    during the ServiceNow session. You are also able to turn on or off all session
    debugging. Session debugging will give you a lot of information, but it can sometimes
    be information overload, so it can be worth picking individual aspects you want
    to specifically debug. I often find the security debug to be the most useful.
  prefs: []
  type: TYPE_NORMAL
- en: Session debugging is found in system diagnostics and contains a number of modules.
    You can enable any of the session debugging areas by clicking the module you would
    like session debugging turned on for. You can also turn on all debugging by selecting
    Enable All. You cannot turn off individual debugging areas, though, except for
    UI policies, and debugging is disabled by clicking Disable All or when the session
    ends, as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the session debug modules in *Figure 9.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9aa0c183-63de-4301-807b-9a5df79f12f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.6: Session debugging modules'
  prefs: []
  type: TYPE_NORMAL
- en: The session debug information appears on each page that you load when information
    on debugging has been requested, normally at the bottom of the loaded page.
  prefs: []
  type: TYPE_NORMAL
- en: It is also worth noting that it may be that you have to scroll quite far down
    to see the information provided to you, especially on bigger forms or lists.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of information can be displayed, which can make this method of debugging
    a little generic, and weaker than a more targeted debugging approach. However,
    this method of debugging can give information to you that is difficult to find
    elsewhere in the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at some example session debug output.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will take a look at security. Security in ServiceNow can be a tricky
    issue to solve if the relevant access is not appearing for the users you are logging
    in as.
  prefs: []
  type: TYPE_NORMAL
- en: Because is it possible to have multiple access controls for each type of access
    in ServiceNow, it can be difficult to find the exact rule that is causing issues.
  prefs: []
  type: TYPE_NORMAL
- en: Using session debug, we can see which access controls allowed access and which
    ones denied it. This can be very helpful in working out whether the access control
    we are looking at is incorrect and needs to be altered, or if there is an access
    control we were not aware of that is causing access issues for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 9.7*, we can see some session debug output for security on the incident
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0da264dd-55c2-47ac-8108-1452730aa092.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7:  Security session debug output
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see where security rules for the incident form were checked when
    the incident form was loaded. As you can see, there is a lot of information provided,
    and this example is only a small section of the session debug information provided
    for loading an incident form.
  prefs: []
  type: TYPE_NORMAL
- en: The green ticks indicate that the checks against security rules were successful.
    At the bottom of the example, there are some larger blocks of checks which relate
    to a specific security check taking place. We can see after PATH = the check that
    is being performed, so, for the bottom check we are looking at record/incident.subcategory/read,
    which means we are seeing whether the logged-in user can read the subcategory
    field on the incident record. In this case, it is successful, so the field is
    displayed to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see some business rule session debugging.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 9.8*, we can see an example of business rule debugging on the incident
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/629927e1-9428-4417-b5ad-98bb243a7bb4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.8: Business rule session debugging'
  prefs: []
  type: TYPE_NORMAL
- en: In this example section of the business rule session debug script, we can see
    timestamps for business rule execution and where business rules start and end.
    The timestamps are to a one thousandth of a second so that the execution order
    is easier to determine.
  prefs: []
  type: TYPE_NORMAL
- en: Where you can see a ==>, a business rule execution is starting, and a <== indicates
    the business rule completing. We can also see, in this example, where business
    rules are skipped due to the business rule condition not being matched, which
    can be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Again, the preceding is just a sample of the information given during a load
    of the incident form with business rule session debugging switched on, so there
    is quite a lot of data to search through to find what you might be looking for.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will take a look at a log session debug.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see an example of a log session debug in *Figure 9.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb1d8dbb-57f3-4e22-8336-a061842f00a4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.9: Log session debugging sample'
  prefs: []
  type: TYPE_NORMAL
- en: The logs will give you logs relating to the opening of the record; in our example,
    opening the incident form. I do not tend to use this session debugs as much as
    others, but it can help to track whether any important logs that can lead to information
    on potential issues occur when records are opened.
  prefs: []
  type: TYPE_NORMAL
- en: The Field Watcher
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Field Watcher debugging functionality allows you to watch an individual
    field and monitor any changes that occur to that field. You can only watch one
    field at a time using the Field Watcher. If there is a particular field you can
    see changing, but are not sure what is modifying the value, this can be a helpful
    tool to use.
  prefs: []
  type: TYPE_NORMAL
- en: To watch a field, right-click on the field in the form view, and at the bottom
    of the context menu, you should see an option to watch the field. Once this has
    been selected, a small bug icon appears to show that the field is being watched,
    and a Field Watcher window appears from the bottom of the frame.
  prefs: []
  type: TYPE_NORMAL
- en: The Field Watcher frame shows any changes to the field, and using tick boxes
    in the Field Watcher window, you can switch which type of changes the Field Watcher
    will check for, for example, business rule, client script, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good example to show the Field Watcher in action is to watch the priority
    field on an incident. If you then change the impact or urgency on the form, you
    will see the Field Watcher catching the change in the value of the priority field.
    We can see this in *Figure 9.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ad38f6a-c024-4e5f-b39e-01d2808f4aeb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.10: Field watcher showing change to priority field'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding figure, we can see that because the Impact field was changed
    to 1 - High, the Priority changed from 5 - Planning to 3 - Moderate. This was
    captured in the Field Watcher and the client script that ran as a result of this
    change to the field.
  prefs: []
  type: TYPE_NORMAL
- en: The Field Watcher can be a useful tool if you know exactly which field you are
    interested in and want to know why the value is changing.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When debugging applications, we are often interested in the scope at given
    times while our code is running. Some of the tools given to debug applications
    are actually session debugging modules. We saw the modules, ServiceNow classes
    as application debugging, along with others, in the session debugging section.
    These are:'
  prefs: []
  type: TYPE_NORMAL
- en: Debug business rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debug business rules (details)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debug security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debug scopes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business rules and security can be useful whether we are in an application or
    not, but the scope is very important for application coding. To show how debugging
    the scope works, we can create a test application, and a business rule for that
    application, in the application scope.
  prefs: []
  type: TYPE_NORMAL
- en: Once the application and the business rule have been created, we need to click
    the debug scopes and debug business rules modules in the session debugging. As
    an example, we can see this when updating an incident in the session debug logging.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see this in *Figure 9.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28aabe26-3154-453d-86a8-be23af433f46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.11: Session debugging for scopes and business rules'
  prefs: []
  type: TYPE_NORMAL
- en: We can see in the logging that, as we enter the business rule from our test
    application, we also enter the scope of our test application. Once the business
    rule has completed executing, we revert back to the global scope.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in [Chapter 5](170b38f0-5b60-4c8d-aef3-6833efee13f1.xhtml), *Introduction
    to Server-Side Scripting*, when we debug using GlideSystem in an application,
    we need to remember that `gs.log` will not work. For debugging in an application,
    we need to use four scoped application logging levels.
  prefs: []
  type: TYPE_NORMAL
- en: 'To recap, these scoped application logging levels are:'
  prefs: []
  type: TYPE_NORMAL
- en: Error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Info
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These logging levels and their levels of verbosity are helpful to log messages
    to the system logs when checking values during a script.
  prefs: []
  type: TYPE_NORMAL
- en: We can also enable session debugging for a particular application. This can
    be enabled from the application page for the related links. Scripts from the application
    will generate logs to the system log if they use the GlideSystem logging method.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see this in *Figure 9.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f091ae5-ea00-47b0-ab14-aaa7c3ac0e7f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.12: Application related links'
  prefs: []
  type: TYPE_NORMAL
- en: To enable session debugging, the Related Links needs to be clicked. The related
    link will change and show as disable session debug while the debugging is active.
    It can be selected again to disable session debugging.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript Log and Debug window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The JavaScript Log window is a further way that logs can be viewed in the ServiceNow
    platform. Rather than using the GlideSystem logging methods, this method allows
    you to define a different type of log to send to a window that appears at the
    bottom of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: To see the JavaScript Log window, you can go to the system settings of the instance
    you are working on. Once displayed, select the Developer option. From here, set
    the JavaScript Log and Field Watcher attribute to show the JavaScript Log window.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the attribute set in *Figure 9.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/769ba908-1dff-43d6-bdbf-f6470f13084e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.13: Developer system settings showing the JavaScript log and Field
    Watcher option'
  prefs: []
  type: TYPE_NORMAL
- en: Once the JavaScript Log and Field Watcher attribute has been set, you will see
    a window appear at the bottom of the screen. This is the same window that appears
    to show a watched field, but this time, the tab set will be JavaScript Log.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the window that appears in *Figure 9.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68eafea7-ea7a-45a2-944a-6f4ded983d8d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.14: JavaScript Log window'
  prefs: []
  type: TYPE_NORMAL
- en: This example of the JavaScript window shows no logs, and the window can be cleared
    from all logging by clicking the circle with a line through it, towards the right-hand
    side of the header bar.
  prefs: []
  type: TYPE_NORMAL
- en: We can also change the size of the window by clicking on the Small, Medium,
    and Large buttons in the header bar. The down arrow button in the far-right corner
    closes the window down.
  prefs: []
  type: TYPE_NORMAL
- en: Logs in the JavaScript Log window are added to the bottom of the list of current
    logs while the window is open. Logs are timestamped so that you can see which
    order the logs were added in. This can be especially helpful when looking to see
    what order client scripts ran in when opening a form in the platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'To log to the JavaScript Log window, we use `jslog()`, which is a global function.
    This works in a very similar way to `gs.log`. We can see an example of how to
    use `jslog` in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If we add the preceding code to an incident `onLoad` client script, we can see
    the log in the JavaScript Log window.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see this in *Figure 9.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2d72fcd-8c93-4cd2-b7ee-a0ec556d31de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.15: JavaScript Log with sample log'
  prefs: []
  type: TYPE_NORMAL
- en: This method of debugging can be helpful as an alternative to using GlideSystem
    logs. Some mature instances will sometimes have so many system logs per second,
    it can be difficult to debug, so this JavaScript Log window can be helpful in
    this case.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging REST
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: REST messages are very helpful for integrating between ServiceNow instances
    and with third-party software. When debugging your ServiceNow instance, you may
    also need to see logging for REST messages.
  prefs: []
  type: TYPE_NORMAL
- en: To debug REST messages, we need to set the system property `glide.rest.debug` found
    in the system properties table (sys_properties) to `true`. This property may well
    need to be created, as it is not included in the baseline system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at an example of this system property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/947eb808-4ab9-4b6c-a3b3-b0ff9796903d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.16: System property glide.rest.debug'
  prefs: []
  type: TYPE_NORMAL
- en: In the example, we can see our created system property. The Name needs to be
    `glide.rest.debug` and the Value set to `true`. It is also good practice to write
    a good description with any system property you create, to assist other administrators.
  prefs: []
  type: TYPE_NORMAL
- en: Once this property is set to `true`, when activating the session debugging debug
    log we saw earlier on in the chapter, REST message logs will also be added to
    the log that is output. Once this type of debugging has been completed, this property
    should be set to `false` to avoid using up system resources.
  prefs: []
  type: TYPE_NORMAL
- en: SOAP debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a way similar to REST messages, SOAP messages are very important when integrating
    with other systems. It can be necessary to find out when messages have been received
    and what exact message came into the instance.
  prefs: []
  type: TYPE_NORMAL
- en: To debug SOAP messages, we need to add a system property, or amend it if it
    was previously added. The system property that needs to be added is `glide.processor.debug.SOAPProcessor`
    and the Value needs to be set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see a completed example of this system property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61def292-0be4-455e-8823-d62bfc8baff8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.17: System property glide.processor.debug.SOAPProcessor'
  prefs: []
  type: TYPE_NORMAL
- en: The example shows the system property that needs to be created for debugging
    SOAP envelopes. The name must be exact, and the value set to `true`. A good description
    will also help others looking through the system properties to explain its function.
  prefs: []
  type: TYPE_NORMAL
- en: Once this property is set, we will start to see an incoming SOAP envelope XML
    in the system logs. This is very helpful to see what was received by the instance
    when messages are received.
  prefs: []
  type: TYPE_NORMAL
- en: Once debugging has been completed, this system property should be set to `false`
    to stop excessive logging in the instance. This also stops resources from being
    used to provide these logs when they are no longer being monitored.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The focus of this chapter was debugging. We looked at the various tools ServiceNow
    gives us to debug our code and the methods we can use to make the most of them.
    We looked at the script debugger and making breakpoints, the session debugging
    modules, and debugging applications. We also took a look at the JavaScript Log
    and Field Watcher window, and how this can aid us in our debugging.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore ServiceNow best practices. This includes
    best practices when writing and debugging script on the client and server side.
    We will also investigate how this affects system performance and how we can streamline
    our code to make the best use of instance resources.
  prefs: []
  type: TYPE_NORMAL
