- en: Debugging the Script
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本调试
- en: In this chapter, we will be taking a look at debugging. Debugging is a very
    important aspect of creating working ServiceNow scripts. We will be taking a look
    at the script and session debugger, and how these are both used. We will then
    look at field watchers, debugging applications, the JavaScript log, and debug
    window. Finally, we will see how to debug REST and SOAP messages in a ServiceNow
    instance.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨调试。调试是创建有效的ServiceNow脚本的重要方面。我们将探讨脚本和会话调试器，以及它们是如何被使用的。然后，我们将探讨字段监视器、调试应用程序、JavaScript日志和调试窗口。最后，我们将了解如何在ServiceNow实例中调试REST和SOAP消息。
- en: 'In this chapter, we will look at the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: The script debugger
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本调试器
- en: The session debugger
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话调试器
- en: The Field Watcher
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段监视器
- en: Debugging applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试应用程序
- en: The JavaScript Log and Debug window
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript日志和调试窗口
- en: Debugging REST
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试REST
- en: SOAP debugging
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOAP调试
- en: The script debugger
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本调试器
- en: The script debugger allows developers to debug server-side script to discover
    errors or issues with their code. We had a brief look at the script debugger in
    [Chapter 5](170b38f0-5b60-4c8d-aef3-6833efee13f1.xhtml), *Introduction to Server-Side
    Scripting*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本调试器允许开发者调试服务器端脚本以发现代码中的错误或问题。我们在[第5章](170b38f0-5b60-4c8d-aef3-6833efee13f1.xhtml)，“服务器端脚本简介”中简要介绍了脚本调试器。
- en: To recap, we can set breakpoints in the server-side script we have written to
    debug the script when it is run by using the script debugger. This is the only
    way we can use breakpoints in ServiceNow to step through and into our script.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回顾，我们可以在我们编写的服务器端脚本中设置断点，以使用脚本调试器在脚本运行时进行调试。这是我们在ServiceNow中使用断点的唯一方法。
- en: To use the script debugger, we first need to set a breakpoint in one of our
    server-side scripts. This can be any script you want to step through, either a
    system script or one you have built yourself. A good example is the `incident_events`
    business rule, as we can also see how different events are triggered from the
    incident form, too.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用脚本调试器，我们首先需要在我们的服务器端脚本中设置一个断点。这可以是任何您想要逐步执行的脚本，无论是系统脚本还是您自己构建的脚本。一个很好的例子是`incident_events`业务规则，因为我们还可以看到如何从事件表单触发不同的事件。
- en: 'To start, we add a breakpoint in the `incident_events` business rule, as seen
    in *Figure 9.1*:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在`incident_events`业务规则中添加一个断点，如图*图9.1*所示：
- en: '![](img/2abc56f5-f4f5-4068-ad46-0c6f43453cbe.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2abc56f5-f4f5-4068-ad46-0c6f43453cbe.png)'
- en: 'Figure 9.1: Business rule incident_events with break point added'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1：添加了断点的业务规则事件
- en: To set this breakpoint, we simply click in the margin of the code to make the
    breakpoint appear, as shown by the arrow. To remove it, we simply click on the
    blue arrow, and the breakpoint is removed. Once the breakpoint is set, we can
    open the script debugger.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置此断点，我们只需在代码的边缘点击，使断点出现，如图中箭头所示。要删除它，我们只需点击蓝色箭头，断点就会被移除。一旦设置了断点，我们就可以打开脚本调试器。
- en: To open the script debugger, we can navigate to System Diagnostics | Script
    Debugger. This opens the script debugger in a separate window. We can also open
    the script debugger from any script type field. We need to click on the script
    debugger icon that looks like a small insect with a scroll to open the script
    debugger from this type of field.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开脚本调试器，我们可以导航到系统诊断|脚本调试器。这将在一个单独的窗口中打开脚本调试器。我们还可以从任何脚本类型字段打开脚本调试器。我们需要点击一个看起来像带有滚动条的小昆虫的脚本调试器图标，从这种类型的字段打开脚本调试器。
- en: 'We can see this icon highlighted in *Figure 9.2*:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在*图9.2*中看到这个图标被突出显示：
- en: '![](img/4d8e9a9c-b30f-4d11-a7fa-8ac432ce3482.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d8e9a9c-b30f-4d11-a7fa-8ac432ce3482.png)'
- en: 'Figure 9.2: Script type field showing the script debugger'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2：显示脚本调试器的脚本类型字段
- en: 'We can now run the `incident_events` script by updating any existing incident,
    and when we see the window shown in *Figure 9.3*, we click Start Debugging to
    look at the script stopped at our breakpoint:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过更新任何现有事件来运行`incident_events`脚本，当我们看到*图9.3*所示的窗口时，我们点击“开始调试”来查看在断点处停止的脚本：
- en: '![](img/bd6f4c74-977f-4415-87d3-481fdd05e72d.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd6f4c74-977f-4415-87d3-481fdd05e72d.png)'
- en: 'Figure 9.3: Script debugger popup window'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3：脚本调试器弹出窗口
- en: Now that we are into the process of debugging, we can switch to the debugging
    window. From here, we have some fairly standard debugging options that can be
    seen in the upper right-hand corner of the screen.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经进入了调试过程，我们可以切换到调试窗口。从这里，我们可以看到屏幕右上角的一些相当标准的调试选项。
- en: 'We can see these in *Figure 9.4*:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在*图9.4*中看到这些：
- en: '![](img/a31d1f85-df36-4846-a1d5-c01086d6beb2.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a31d1f85-df36-4846-a1d5-c01086d6beb2.png)'
- en: 'Figure 9.4: Script debugging options'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4：脚本调试选项
- en: 'The options we have for debugging are, from left to right:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用于调试的选项，从左到右排列：
- en: '**Pause debugging**: The pausing debugger turns the debugger off. This changes
    the icon to a power icon, but by clicking this changed icon, we can turn the debugger
    back on again.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**暂停调试**：暂停调试器会关闭调试器。这会将图标更改为电源图标，但通过点击这个更改后的图标，我们可以再次打开调试器。'
- en: '**Resume script execution**: This will resume the script from after the current
    breakpoint until the next breakpoint, or until the script is complete.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恢复脚本执行**：这将从当前断点之后恢复脚本，直到下一个断点，或者直到脚本完成。'
- en: '**Step over next function call**: This button allows you to step through the
    code and over any function calls, which means skipping over them.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跳过下一个函数调用**：此按钮允许你遍历代码并跳过任何函数调用，这意味着跳过它们。'
- en: '**Step into next function call**: Clicking this icon steps through the script
    and into any function called in the code.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进入下一个函数调用**：点击此图标将遍历脚本并进入代码中调用的任何函数。'
- en: '**Step out of current function**: This will step through the current script,
    but out of any function that the code is currently in.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**退出当前函数**：这将遍历当前脚本，但会退出代码当前所在的任何函数。'
- en: These buttons allow you to move through the code you have written from the start
    point of a breakpoint and find where any issues may lie.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些按钮允许你从断点的起点开始遍历你编写的代码，找到可能存在的问题。
- en: This type of debugging is quite typical in a lot of software debugging, with
    options to pause, resume, and step in, out, and over functions. If this is new
    to you, however, spend some time familiarizing yourself with these buttons, as
    it can save you time when debugging longer scripts.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这种调试方式在许多软件调试中很典型，提供了暂停、恢复和进入、退出、跳过函数的选项。然而，如果你对此不熟悉，花些时间熟悉这些按钮是有益的，因为它们可以在调试较长的脚本时节省你的时间。
- en: 'Let''s have a look at what the full window looks like in *Figure 9.5*:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看*图9.5*中完整窗口的样子：
- en: '![](img/fa0652c0-fd91-4bcc-918d-c1b7251c2219.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fa0652c0-fd91-4bcc-918d-c1b7251c2219.png)'
- en: 'Figure 9.5: Script debugging window'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5：脚本调试窗口
- en: This debugging method is very helpful and something that was missing from earlier
    versions of ServiceNow. With the script debugger, we have a much more rounded
    debugging experience.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种调试方法非常有帮助，并且是ServiceNow早期版本中缺失的功能。有了脚本调试器，我们有了更全面的调试体验。
- en: Adding breakpoints in scripts and being able to step through them adds an extra
    level of debugging, beyond just logging outputs.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中添加断点并能够遍历它们，为调试增加了额外的层次，而不仅仅是记录输出。
- en: The session debugger
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话调试器
- en: The session debugger allows you to debug certain aspects of the ServiceNow platform
    during the ServiceNow session. You are also able to turn on or off all session
    debugging. Session debugging will give you a lot of information, but it can sometimes
    be information overload, so it can be worth picking individual aspects you want
    to specifically debug. I often find the security debug to be the most useful.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 会话调试器允许你在ServiceNow会话期间调试ServiceNow平台的一些方面。你还可以打开或关闭所有会话调试。会话调试会提供大量信息，但有时可能会信息过载，因此选择你想要特别调试的个别方面可能是有价值的。我经常发现安全调试是最有用的。
- en: Session debugging is found in system diagnostics and contains a number of modules.
    You can enable any of the session debugging areas by clicking the module you would
    like session debugging turned on for. You can also turn on all debugging by selecting
    Enable All. You cannot turn off individual debugging areas, though, except for
    UI policies, and debugging is disabled by clicking Disable All or when the session
    ends, as well.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 会话调试位于系统诊断中，包含多个模块。你可以通过点击你想要开启会话调试的模块来启用任何会话调试区域。你也可以通过选择“启用所有”来打开所有调试。不过，除了UI策略外，你不能关闭单个调试区域，调试是通过点击“禁用所有”或会话结束时禁用的。
- en: 'We can see the session debug modules in *Figure 9.6*:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在*图9.6*中看到会话调试模块：
- en: '![](img/9aa0c183-63de-4301-807b-9a5df79f12f4.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9aa0c183-63de-4301-807b-9a5df79f12f4.png)'
- en: 'Figure 9.6: Session debugging modules'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6：会话调试模块
- en: The session debug information appears on each page that you load when information
    on debugging has been requested, normally at the bottom of the loaded page.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求调试信息时，会话调试信息会出现在你加载的每一页上，通常在加载页面的底部。
- en: It is also worth noting that it may be that you have to scroll quite far down
    to see the information provided to you, especially on bigger forms or lists.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，您可能需要向下滚动很多才能看到提供的信息，尤其是在较大的表单或列表中。
- en: A lot of information can be displayed, which can make this method of debugging
    a little generic, and weaker than a more targeted debugging approach. However,
    this method of debugging can give information to you that is difficult to find
    elsewhere in the platform.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可以显示大量信息，这使得这种调试方法略显通用，并且不如更有针对性的调试方法强大。然而，这种调试方法可以提供在其他平台其他地方难以找到的信息。
- en: Let's have a look at some example session debug output.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下一些示例会话调试输出。
- en: First, we will take a look at security. Security in ServiceNow can be a tricky
    issue to solve if the relevant access is not appearing for the users you are logging
    in as.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将查看安全。如果以登录用户身份登录时没有出现相关访问权限，ServiceNow中的安全可能是一个棘手的问题。
- en: Because is it possible to have multiple access controls for each type of access
    in ServiceNow, it can be difficult to find the exact rule that is causing issues.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于ServiceNow中每种访问类型都可能存在多个访问控制，因此找到导致问题的确切规则可能很困难。
- en: Using session debug, we can see which access controls allowed access and which
    ones denied it. This can be very helpful in working out whether the access control
    we are looking at is incorrect and needs to be altered, or if there is an access
    control we were not aware of that is causing access issues for us.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用会话调试，我们可以看到哪些访问控制允许访问，哪些访问控制拒绝访问。这可以帮助我们确定我们正在查看的访问控制是否不正确并需要修改，或者是否存在我们未意识到的访问控制，这导致我们遇到访问问题。
- en: 'In *Figure 9.7*, we can see some session debug output for security on the incident
    form:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图9.7* 中，我们可以看到事件表单上的会话调试输出：
- en: '![](img/0da264dd-55c2-47ac-8108-1452730aa092.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0da264dd-55c2-47ac-8108-1452730aa092.png)'
- en: Figure 9.7:  Security session debug output
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7：安全会话调试输出
- en: Here, we can see where security rules for the incident form were checked when
    the incident form was loaded. As you can see, there is a lot of information provided,
    and this example is only a small section of the session debug information provided
    for loading an incident form.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到在加载事件表单时检查了事件表单的安全规则。如您所见，提供了大量信息，而这个示例只是加载事件表单提供的会话调试信息的一个小部分。
- en: The green ticks indicate that the checks against security rules were successful.
    At the bottom of the example, there are some larger blocks of checks which relate
    to a specific security check taking place. We can see after PATH = the check that
    is being performed, so, for the bottom check we are looking at record/incident.subcategory/read,
    which means we are seeing whether the logged-in user can read the subcategory
    field on the incident record. In this case, it is successful, so the field is
    displayed to the user.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 绿色勾选表示对安全规则的检查成功。在示例的底部，有一些较大的检查块，这些检查与特定的安全检查相关。我们可以看到在 PATH = 后的检查是正在进行的，因此，对于底部的检查，我们正在查看
    record/incident.subcategory/read，这意味着我们正在查看登录用户是否可以读取事件记录上的子类别字段。在这种情况下，它是成功的，因此该字段显示给用户。
- en: Now, let's see some business rule session debugging.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看一些业务规则会话调试。
- en: 'In *Figure 9.8*, we can see an example of business rule debugging on the incident
    form:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图9.8* 中，我们可以看到一个业务规则在事件表单上的调试示例：
- en: '![](img/629927e1-9428-4417-b5ad-98bb243a7bb4.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/629927e1-9428-4417-b5ad-98bb243a7bb4.png)'
- en: 'Figure 9.8: Business rule session debugging'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8：业务规则会话调试
- en: In this example section of the business rule session debug script, we can see
    timestamps for business rule execution and where business rules start and end.
    The timestamps are to a one thousandth of a second so that the execution order
    is easier to determine.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个业务规则会话调试脚本示例部分中，我们可以看到业务规则执行的日期和时间戳，以及业务规则开始和结束的位置。时间戳精确到千分之一秒，以便更容易确定执行顺序。
- en: Where you can see a ==>, a business rule execution is starting, and a <== indicates
    the business rule completing. We can also see, in this example, where business
    rules are skipped due to the business rule condition not being matched, which
    can be helpful.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在您看到 ==>, 表示业务规则执行开始，而 <== 则表示业务规则完成。我们还可以看到，在这个例子中，由于业务规则条件不匹配而跳过的业务规则，这可能很有帮助。
- en: Again, the preceding is just a sample of the information given during a load
    of the incident form with business rule session debugging switched on, so there
    is quite a lot of data to search through to find what you might be looking for.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，前面的只是一个示例，展示了在开启业务规则会话调试时加载事件表单期间提供的信息，因此有大量数据需要搜索以找到你可能正在寻找的内容。
- en: Finally, we will take a look at a log session debug.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将查看一个日志会话调试。
- en: 'We can see an example of a log session debug in *Figure 9.9*:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在*图9.9*中看到一个日志会话调试的例子：
- en: '![](img/cb1d8dbb-57f3-4e22-8336-a061842f00a4.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb1d8dbb-57f3-4e22-8336-a061842f00a4.png)'
- en: 'Figure 9.9: Log session debugging sample'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9：日志会话调试示例
- en: The logs will give you logs relating to the opening of the record; in our example,
    opening the incident form. I do not tend to use this session debugs as much as
    others, but it can help to track whether any important logs that can lead to information
    on potential issues occur when records are opened.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 日志将提供与记录打开相关的日志；在我们的例子中，打开事件表单。我通常不像其他人那样使用这个会话调试，但它可以帮助跟踪在记录打开时是否发生任何可能导致潜在问题信息的日志。
- en: The Field Watcher
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字段观察者
- en: The Field Watcher debugging functionality allows you to watch an individual
    field and monitor any changes that occur to that field. You can only watch one
    field at a time using the Field Watcher. If there is a particular field you can
    see changing, but are not sure what is modifying the value, this can be a helpful
    tool to use.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 字段观察者调试功能允许你监视一个单独的字段，并监控该字段发生的任何更改。你一次只能使用字段观察者监视一个字段。如果你看到一个特定的字段正在更改，但不确定是什么修改了该值，这可以是一个有用的工具。
- en: To watch a field, right-click on the field in the form view, and at the bottom
    of the context menu, you should see an option to watch the field. Once this has
    been selected, a small bug icon appears to show that the field is being watched,
    and a Field Watcher window appears from the bottom of the frame.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要监视一个字段，在表单视图中右键单击该字段，然后在上下文菜单的底部，你应该看到一个监视字段的选项。一旦选择，就会显示一个小虫图标，表示该字段正在被监视，并且从框架底部出现字段观察者窗口。
- en: The Field Watcher frame shows any changes to the field, and using tick boxes
    in the Field Watcher window, you can switch which type of changes the Field Watcher
    will check for, for example, business rule, client script, and so on.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 字段观察者框架显示字段的任何更改，并且使用字段观察者窗口中的复选框，你可以切换字段观察者将检查哪种类型的更改，例如，业务规则、客户端脚本等。
- en: 'A good example to show the Field Watcher in action is to watch the priority
    field on an incident. If you then change the impact or urgency on the form, you
    will see the Field Watcher catching the change in the value of the priority field.
    We can see this in *Figure 9.10*:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 展示字段观察者实际操作的良例是观察一个事件上的优先级字段。如果你随后在表单上更改影响或紧急程度，你将看到字段观察者捕捉到优先级字段值的更改。我们可以在*图9.10*中看到这一点：
- en: '![](img/6ad38f6a-c024-4e5f-b39e-01d2808f4aeb.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ad38f6a-c024-4e5f-b39e-01d2808f4aeb.png)'
- en: 'Figure 9.10: Field watcher showing change to priority field'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10：字段观察者显示对优先级字段的更改
- en: In the preceding figure, we can see that because the Impact field was changed
    to 1 - High, the Priority changed from 5 - Planning to 3 - Moderate. This was
    captured in the Field Watcher and the client script that ran as a result of this
    change to the field.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们可以看到，由于影响字段被更改为1 - 高，优先级从5 - 规划变为3 - 中等。这一点在字段观察者和由此字段更改而运行的客户端脚本中被捕获。
- en: The Field Watcher can be a useful tool if you know exactly which field you are
    interested in and want to know why the value is changing.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确切知道你感兴趣的哪个字段，并且想知道为什么值在变化，字段观察者可以是一个有用的工具。
- en: Debugging applications
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试应用程序
- en: 'When debugging applications, we are often interested in the scope at given
    times while our code is running. Some of the tools given to debug applications
    are actually session debugging modules. We saw the modules, ServiceNow classes
    as application debugging, along with others, in the session debugging section.
    These are:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当调试应用程序时，我们通常对代码运行时特定时间点的范围感兴趣。一些用于调试应用程序的工具实际上是会话调试模块。我们在会话调试部分看到了这些模块，ServiceNow类作为应用程序调试，以及其他一些模块。这些是：
- en: Debug business rules
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试业务规则
- en: Debug business rules (details)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试业务规则（详情）
- en: Debug security
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试安全
- en: Debug scopes
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试范围
- en: Business rules and security can be useful whether we are in an application or
    not, but the scope is very important for application coding. To show how debugging
    the scope works, we can create a test application, and a business rule for that
    application, in the application scope.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 业务规则和安全性无论我们是否在应用程序中都很有用，但对于应用程序编码来说，范围非常重要。为了展示范围调试的工作方式，我们可以在应用程序范围内创建一个测试应用程序及其业务规则。
- en: Once the application and the business rule have been created, we need to click
    the debug scopes and debug business rules modules in the session debugging. As
    an example, we can see this when updating an incident in the session debug logging.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了应用程序和业务规则，我们需要在会话调试中点击调试范围和调试业务规则模块。例如，我们可以在会话调试日志中更新事件时看到这一点。
- en: 'We can see this in *Figure 9.11*:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在*图9.11*中看到这一点：
- en: '![](img/28aabe26-3154-453d-86a8-be23af433f46.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28aabe26-3154-453d-86a8-be23af433f46.png)'
- en: 'Figure 9.11: Session debugging for scopes and business rules'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.11：会话调试范围和业务规则
- en: We can see in the logging that, as we enter the business rule from our test
    application, we also enter the scope of our test application. Once the business
    rule has completed executing, we revert back to the global scope.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在日志中看到，当我们从测试应用程序进入业务规则时，我们也进入了测试应用程序的范围。一旦业务规则执行完成，我们就回到全局范围。
- en: As we saw in [Chapter 5](170b38f0-5b60-4c8d-aef3-6833efee13f1.xhtml), *Introduction
    to Server-Side Scripting*, when we debug using GlideSystem in an application,
    we need to remember that `gs.log` will not work. For debugging in an application,
    we need to use four scoped application logging levels.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在[第5章](170b38f0-5b60-4c8d-aef3-6833efee13f1.xhtml)“服务器端脚本简介”中看到的，当我们使用GlideSystem在应用程序中调试时，我们需要记住`gs.log`将不起作用。在应用程序中调试时，我们需要使用四个范围应用程序日志级别。
- en: 'To recap, these scoped application logging levels are:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，这些范围应用程序日志级别是：
- en: Error
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Error
- en: Warn
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Warn
- en: Info
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Info
- en: Debug
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Debug
- en: These logging levels and their levels of verbosity are helpful to log messages
    to the system logs when checking values during a script.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这些日志级别及其详细程度有助于在检查脚本中的值时将日志消息记录到系统日志中。
- en: We can also enable session debugging for a particular application. This can
    be enabled from the application page for the related links. Scripts from the application
    will generate logs to the system log if they use the GlideSystem logging method.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以为特定应用程序启用会话调试。这可以通过相关链接的应用程序页面来启用。如果应用程序脚本使用GlideSystem日志方法，它们将生成系统日志。
- en: 'We can see this in *Figure 9.12*:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在*图9.12*中看到这一点：
- en: '![](img/3f091ae5-ea00-47b0-ab14-aaa7c3ac0e7f.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f091ae5-ea00-47b0-ab14-aaa7c3ac0e7f.png)'
- en: 'Figure 9.12: Application related links'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.12：与应用程序相关的链接
- en: To enable session debugging, the Related Links needs to be clicked. The related
    link will change and show as disable session debug while the debugging is active.
    It can be selected again to disable session debugging.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用会话调试，需要点击相关链接。当调试活动正在进行时，相关链接将改变并显示为禁用会话调试。它可以再次被选中以禁用会话调试。
- en: The JavaScript Log and Debug window
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript日志和调试窗口
- en: The JavaScript Log window is a further way that logs can be viewed in the ServiceNow
    platform. Rather than using the GlideSystem logging methods, this method allows
    you to define a different type of log to send to a window that appears at the
    bottom of the screen.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript日志窗口是查看ServiceNow平台中日志的另一种方式。与使用GlideSystem日志方法不同，这种方法允许你定义一种不同类型的日志发送到屏幕底部的窗口。
- en: To see the JavaScript Log window, you can go to the system settings of the instance
    you are working on. Once displayed, select the Developer option. From here, set
    the JavaScript Log and Field Watcher attribute to show the JavaScript Log window.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看JavaScript日志窗口，您可以访问您正在工作的实例的系统设置。一旦显示，选择开发者选项。从这里，将JavaScript日志和字段监视器属性设置为显示JavaScript日志窗口。
- en: 'We can see the attribute set in *Figure 9.13*:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在*图9.13*中看到设置的属性：
- en: '![](img/769ba908-1dff-43d6-bdbf-f6470f13084e.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/769ba908-1dff-43d6-bdbf-f6470f13084e.png)'
- en: 'Figure 9.13: Developer system settings showing the JavaScript log and Field
    Watcher option'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.13：开发者系统设置显示JavaScript日志和字段监视器选项
- en: Once the JavaScript Log and Field Watcher attribute has been set, you will see
    a window appear at the bottom of the screen. This is the same window that appears
    to show a watched field, but this time, the tab set will be JavaScript Log.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了JavaScript日志和字段监视器属性，你将在屏幕底部看到一个窗口出现。这个窗口与显示监视字段的窗口相同，但这次，设置的标签将是JavaScript日志。
- en: 'We can see the window that appears in *Figure 9.14*:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 *图 9.14* 中看到出现的窗口：
- en: '![](img/68eafea7-ea7a-45a2-944a-6f4ded983d8d.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/68eafea7-ea7a-45a2-944a-6f4ded983d8d.png)'
- en: 'Figure 9.14: JavaScript Log window'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.14：JavaScript 日志窗口
- en: This example of the JavaScript window shows no logs, and the window can be cleared
    from all logging by clicking the circle with a line through it, towards the right-hand
    side of the header bar.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 JavaScript 窗口的示例没有显示日志，可以通过点击标题栏右侧的带有斜线的圆形按钮清除窗口中的所有日志。
- en: We can also change the size of the window by clicking on the Small, Medium,
    and Large buttons in the header bar. The down arrow button in the far-right corner
    closes the window down.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过点击标题栏中的小、中、大按钮来更改窗口的大小。最右侧的向下箭头按钮可以关闭窗口。
- en: Logs in the JavaScript Log window are added to the bottom of the list of current
    logs while the window is open. Logs are timestamped so that you can see which
    order the logs were added in. This can be especially helpful when looking to see
    what order client scripts ran in when opening a form in the platform.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 日志窗口打开时，日志被添加到当前日志列表的底部。日志带有时间戳，这样您就可以看到日志的添加顺序。当在平台上打开表单时，查看客户端脚本运行的顺序时，这特别有帮助。
- en: 'To log to the JavaScript Log window, we use `jslog()`, which is a global function.
    This works in a very similar way to `gs.log`. We can see an example of how to
    use `jslog` in the following code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要将日志记录到 JavaScript 日志窗口，我们使用 `jslog()`，这是一个全局函数。这与 `gs.log` 的工作方式非常相似。我们可以在以下代码中看到如何使用
    `jslog` 的示例：
- en: '[PRE0]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If we add the preceding code to an incident `onLoad` client script, we can see
    the log in the JavaScript Log window.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将前面的代码添加到 `onLoad` 客户端脚本中，我们可以在 JavaScript 日志窗口中看到日志。
- en: 'We can see this in *Figure 9.15*:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 *图 9.15* 中看到这一点：
- en: '![](img/e2d72fcd-8c93-4cd2-b7ee-a0ec556d31de.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e2d72fcd-8c93-4cd2-b7ee-a0ec556d31de.png)'
- en: 'Figure 9.15: JavaScript Log with sample log'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.15：带有示例日志的 JavaScript 日志
- en: This method of debugging can be helpful as an alternative to using GlideSystem
    logs. Some mature instances will sometimes have so many system logs per second,
    it can be difficult to debug, so this JavaScript Log window can be helpful in
    this case.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这种调试方法可以作为使用 GlideSystem 日志的替代方案。一些成熟的实例有时每秒会有很多系统日志，这可能会使调试变得困难，因此在这种情况下，JavaScript
    日志窗口可能会有所帮助。
- en: Debugging REST
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试 REST
- en: REST messages are very helpful for integrating between ServiceNow instances
    and with third-party software. When debugging your ServiceNow instance, you may
    also need to see logging for REST messages.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: REST 消息对于在 ServiceNow 实例之间以及与第三方软件集成非常有帮助。在调试 ServiceNow 实例时，您可能还需要查看 REST 消息的日志。
- en: To debug REST messages, we need to set the system property `glide.rest.debug` found
    in the system properties table (sys_properties) to `true`. This property may well
    need to be created, as it is not included in the baseline system.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调试 REST 消息，我们需要将系统属性 `glide.rest.debug` 设置为 `true`，该属性位于系统属性表（sys_properties）中。这个属性可能需要创建，因为它不包括在基线系统中。
- en: 'Let''s have a look at an example of this system property:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个系统属性的示例：
- en: '![](img/947eb808-4ab9-4b6c-a3b3-b0ff9796903d.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/947eb808-4ab9-4b6c-a3b3-b0ff9796903d.png)'
- en: 'Figure 9.16: System property glide.rest.debug'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.16：系统属性 glide.rest.debug
- en: In the example, we can see our created system property. The Name needs to be
    `glide.rest.debug` and the Value set to `true`. It is also good practice to write
    a good description with any system property you create, to assist other administrators.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们可以看到我们创建的系统属性。名称需要是 `glide.rest.debug`，值设置为 `true`。对于创建的任何系统属性编写良好的描述也是一个好习惯，以帮助其他管理员。
- en: Once this property is set to `true`, when activating the session debugging debug
    log we saw earlier on in the chapter, REST message logs will also be added to
    the log that is output. Once this type of debugging has been completed, this property
    should be set to `false` to avoid using up system resources.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个属性设置为 `true`，当激活本章前面提到的会话调试日志时，REST 消息日志也将被添加到输出的日志中。一旦完成这种类型的调试，应该将此属性设置为
    `false` 以避免耗尽系统资源。
- en: SOAP debugging
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SOAP 调试
- en: In a way similar to REST messages, SOAP messages are very important when integrating
    with other systems. It can be necessary to find out when messages have been received
    and what exact message came into the instance.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 与 REST 消息类似，SOAP 消息在与其他系统集成时非常重要。可能需要找出消息何时被接收以及确切的消息是什么。
- en: To debug SOAP messages, we need to add a system property, or amend it if it
    was previously added. The system property that needs to be added is `glide.processor.debug.SOAPProcessor`
    and the Value needs to be set to `true`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调试 SOAP 消息，我们需要添加一个系统属性，如果之前已经添加过，则需要修改它。需要添加的系统属性是 `glide.processor.debug.SOAPProcessor`，其值需要设置为
    `true`。
- en: 'Let''s see a completed example of this system property:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个系统属性的完成示例：
- en: '![](img/61def292-0be4-455e-8823-d62bfc8baff8.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/61def292-0be4-455e-8823-d62bfc8baff8.png)'
- en: 'Figure 9.17: System property glide.processor.debug.SOAPProcessor'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.17：系统属性 glide.processor.debug.SOAPProcessor
- en: The example shows the system property that needs to be created for debugging
    SOAP envelopes. The name must be exact, and the value set to `true`. A good description
    will also help others looking through the system properties to explain its function.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 示例显示了为调试 SOAP 封装需要创建的系统属性。名称必须准确无误，值设置为 `true`。一个良好的描述也将有助于其他人查看系统属性时解释其功能。
- en: Once this property is set, we will start to see an incoming SOAP envelope XML
    in the system logs. This is very helpful to see what was received by the instance
    when messages are received.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了这个属性，我们将在系统日志中开始看到传入的 SOAP 封装 XML。这在查看实例在接收到消息时接收到了什么内容时非常有帮助。
- en: Once debugging has been completed, this system property should be set to `false`
    to stop excessive logging in the instance. This also stops resources from being
    used to provide these logs when they are no longer being monitored.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 调试完成后，应将此系统属性设置为 `false` 以停止实例中的过度记录。这也停止了在不再被监控时使用资源来提供这些日志。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The focus of this chapter was debugging. We looked at the various tools ServiceNow
    gives us to debug our code and the methods we can use to make the most of them.
    We looked at the script debugger and making breakpoints, the session debugging
    modules, and debugging applications. We also took a look at the JavaScript Log
    and Field Watcher window, and how this can aid us in our debugging.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是调试。我们探讨了 ServiceNow 提供的各种调试代码的工具以及我们可以用来充分利用它们的技巧。我们探讨了脚本调试器和设置断点，会话调试模块和调试应用程序。我们还查看了一下
    JavaScript 日志和字段观察窗口，以及这些如何帮助我们进行调试。
- en: In the next chapter, we will explore ServiceNow best practices. This includes
    best practices when writing and debugging script on the client and server side.
    We will also investigate how this affects system performance and how we can streamline
    our code to make the best use of instance resources.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 ServiceNow 的最佳实践。这包括在客户端和服务器端编写和调试脚本时的最佳实践。我们还将研究这如何影响系统性能以及我们如何可以优化代码以最佳利用实例资源。
