["```js\n<canvas id=\"renderCanvas\"></canvas> \n\n```", "```js\n<style> \n    html, body { \n        overflow: hidden; \n        width: 100%; \n        height: 100%; \n        margin: 0; \n        padding: 0; \n    } \n\n    #renderCanvas { \n        width: 100%; \n        height: 100%; \n    } \n</style> \n\n```", "```js\nvar canvas = document.getElementById(\"renderCanvas\"); \n\n```", "```js\nvar engine: BABYLON.Engine = new BABYLON.Engine(canvas); \n\n```", "```js\nvar scene: BABYLON.Scene = new BABYLON.Scene(engine); \n\n```", "```js\n// runRenderLoop with TypeScript. The anonymous function doesn't \n// have any parameter \nengine.runRenderLoop(() => { \n    scene.render(); \n}); \n\n```", "```js\nvar camera =  new BABYLON.FreeCamera(\"cameraName\", new BABYLON.Vector3(10, 20, 30), scene); \n\n```", "```js\ncamera.position = new BABYLON.Vector3(10, 0, 10).addInPlace(new BABYLON.Vector3(0, 10, 0)); \n\n```", "```js\nvar light = new BABYLON.PointLight(\"lightName\", BABYLON.Vector3.Zero(), scene); \n\n```", "```js\nlight.position = new BABYLON.Vector3(20, 20, 20); \nlight.diffuse = new BABYLON.Color3(0, 1, 0); \nlight.specular = new BABYLON.Color3(1, 0, 0); \nlight.intensity = 1.0; \n\n```", "```js\nvar box = BABYLON.Mesh.CreateBox(\"boxName\", size, scene); \n\n```", "```js\nbox.position = new BABYLON.Vector3(0, 2.5, 0); \nbox.rotation = new BABYLON.Vector3(0, Math.PI / 4, 0); \nbox.scaling = new BABYLON.Vector3(2, 2, 2); \n\n```", "```js\nvar sphere = BABYLON.Mesh.CreateSphere(\"sphereName\", segments, size, scene); \nvar plane = BABYLON.Mesh.CreatePlane(\"planeName\", size, scene); \n\n```", "```js\nlight.parent = camera; \n\n```", "```js\nnode1.position = new BABYLON.Vector3(0, 0, 0); \nnode1.parent = node2; \n\n```", "```js\nengine.runRenderLoop(() => { \n  node1.position = node2.position; \n  node1.rotation = node2.rotation; \n  node1.scaling = node2.scaling; \n}); \n\n```", "```js\nexport class BasicScene { \n  public camera: BABYLON.ArcRotateCamera; // Our camera \n  public light: BABYLON.PointLight; // Our light \n  public box: BABYLON.Mesh; // Our box \n\n  private _engine: BABYLON.Engine; // The Babylon.js engine \n  private _scene: BABYLON.Scene; // The scene where to add the nodes \n\n  // Our constructor. The constructor provides the canvas reference \n  // Then, we can create the Babylon.js engine \n  constructor(canvas: HTMLCanvasElement) { \n    // Create engine \n    this._engine = new BABYLON.Engine(canvas); \n\n    // Create the scene \n    this._scene = new BABYLON.Scene(this._engine); \n\n    // Create the camera \n    this.camera = new BABYLON.ArcRotateCamera(\"camera\", 0, 0, 30,        BABYLON.Vector3.Zero(), \n        this._scene); \n    this.camera.attachControl(canvas, true); \n\n    // Create the light \n    this.light = new BABYLON.PointLight(\"light\",new BABYLON.Vector3(20, 20, 20), \n        this._scene); \n    this.light.diffuse = new BABYLON.Color3(0, 1, 0); \nthis.light.specular = new BABYLON.Color3(1, 0, 1); \nthis.light.intensity = 1.0; \n\n// Create the box \nthis.box = BABYLON.Mesh.CreateBox(\"cube\", 5, this._scene); \n  } \n} \n\n```", "```js\npublic runRenderLoop(): void { \n  this._engine.runRenderLoop(() => { \n    this._scene.render(); \n  }); \n} \n\n```", "```js\npublic setCameraParentOfLight(): void { \n  this.light.parent = this.camera; \n} \n\n```"]