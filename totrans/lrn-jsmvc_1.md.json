["```js\n    $ mkdir Todo && cp -r javascriptmvc-3.2.2/* Todo && cd Todo\n\n    ```", "```js\n    $ mkdir Todo && cd Todo\n    ```", "```js\n    $ git init\n    ```", "```js\n    $ git submodule add git://github.com/bitovi/steal.git\n    $ git submodule add git://github.com/bitovi/documentjs.git\n    $ git submodule add git://github.com/bitovi/funcunit.git\n    $ git submodule add git://github.com/jupiterjs/jquerymx jquery\n    ```", "```js\n    $ git submodule init\n    $ git submodule update\n    ```", "```js\n    $ cd funcunit\n    $ git submodule init\n    $ git submodule update\n    ```", "```js\n    $ cd syn/\n    $ git checkout master\n    ```", "```js\n    $ cd ../..\n    ```", "```js\n    $ ./steal/js steal/make.js\n    ```", "```js\n.git\n.gitmodules\ndocumentjs\nfuncunit\njquery\njs\njs.bat\nsteal\n```", "```js\nTodo/\n    .git\n    .gitmodules\n    todo/\n        todo.html\n        todo.js\n    documentjs\n    funcunit\n    jquery\n    js\n    js.bat\n    steal\n```", "```js\n<!doctype html>\n\n<html>\n    <head>\n        <title>Todo List</title>\n        <meta charset=\"UTF-8\" />\n    </head>\n    <body>\n        <ul id=\"todos\">\n            <li>all done!</li>\n        </ul>\n\n        <script src=\"img/steal.js?todo\"></script>\n    </body>\n</html>\n```", "```js\nsteal(\n    'jquery/class',\n    'jquery/model',\n    'jquery/dom/fixture',\n    'jquery/view/ejs',\n    'jquery/controller',\n    'jquery/controller/route',\n\n    function ($) {\n\n    }\n);\n```", "```js\nsteal(\n    'jquery/class',\n    'jquery/model',\n    'jquery/dom/fixture',\n    'jquery/view/ejs',\n    'jquery/controller',\n    'jquery/controller/route',\n\n    function ($) {\n $.Model('Todo', {\n findAll: 'GET /todos',\n findOne: 'GET /todos/{id}',\n create:  'POST /todos',\n update:  'PUT /todos/{id}',\n destroy: 'DELETE /todos/{id}'\n },\n {\n\n }\n );\n    }\n);\n```", "```js\n    var todo = new Todo({name: 'write a book'});\n    ```", "```js\n    todo.attr('name');\n    ```", "```js\n    todo.attr('name', 'write JavaScript book');\n    ```", "```js\n    todo.attrs({name: 'write JavaScriptMVC book!'});\n    ```", "```js\n    todo.attrs({\n        person: 'Wojtek',\n        dueDate: '1 December 1012'\n    });\n    ```", "```js\n    Todo.attrs();\n    ```", "```js\nsteal(\n    'jquery/class',\n    'jquery/model',\n    'jquery/util/fixture',\n    'jquery/view/ejs',\n    'jquery/controller',\n    'jquery/controller/route',\n\n    function ($) {\n        $.Model('Todo', {\n                findAll: 'GET /todos',\n                findOne: 'GET /todos/{id}',\n                create:  'POST /todos',\n                update:  'PUT /todos/{id}',\n                destroy: 'DELETE /todos/{id}'\n            },\n            {\n\n            }\n        );\n\n // Fixtures\n (function () {\n\n var TODOS = [\n // list of todos\n {\n id:   1,\n name: 'read The Good Parts'\n },\n {\n id:   2,\n name: 'read Pro Git'\n },\n {\n id:   3,\n name: 'read Programming Ruby'\n }\n ];\n\n // findAll\n $.fixture('GET /todos', function () {\n return [TODOS];\n });\n\n // findOne\n $.fixture('GET /todos/{id}', function (orig) {\n return TODOS[(+orig.data.id) - 1];\n });\n\n // create\n var id = 4;\n $.fixture('POST /todos', function () {\n return {\n id: (id++)\n };\n });\n\n // update\n $.fixture('PUT /todos/{id}', function () {\n return {};\n });\n\n // destroy\n $.fixture('DELETE /todos/{id}', function () {\n return {};\n });\n\n }());\n    }\n);\n```", "```js\nTodo.findAll({}, function(todos) {\n    console.log('todos: ', todos);\n});\n```", "```js\n<% $.each(this, function(i, todo) { %>\n\n    <li <%= ($el) -> $el.model(todo) %>>\n        <strong><%= todo.name %></strong>\n        <em class=\"destroy\">delete</em>\n    </li>\n\n<% }) %>\n```", "```js\n$('#todos').html('todos.ejs', Todo.findAll());\n```", "```js\n($el) -> $el.model(todo)\n```", "```js\nfunction ($el) {\n    return $el.model(todo)\n}\n```", "```js\n$.Controller('Todos', {\n    // init method is called when new instance is created\n    'init': function (element, options) {\n        this.element.html('todos.ejs', Todo.findAll());\n    },\n\n    // add event listener to strong element on click\n    'li strong click': function (el, e) {\n        // trigger custom event\n        el.trigger('selected', el.closest('li').model());\n\n        // log current model to the console\n        console.log('li strong click', el.closest('.todo').model());\n    },\n\n    // add event listener to em element on click\n    'li .destroy click': function (el, e) {\n        // call destroy on the model to prevent memory leaking\n        el.closest('.todo').model().destroy();\n    },\n\n    // add event listener to Todo model on destroyed\n    '{Todo} destroyed': function (Todo, e, destroyedTodo) {\n        // remove element from the DOM tree\n        destroyedTodo.elements(this.element).remove();\n\n        console.log('destroyed: ', destroyedTodo);\n    }\n});\n\n// create new controller instance\nnew Todos('#todos');\n```", "```js\n// create new Todo controller instance\nnew Todos('#todos');\n```", "```js\n// routing\n$.Controller('Routing', {\n    init: function () {\n        new Todos('#todos');\n    },\n\n    // the index page\n    'route': function () {\n        console.log('default route');\n    },\n\n    // handle URL witch hash\n    ':id route': function (data) {\n        Todo.findOne(data, $.proxy(function (todo) {\n            // increase font size for current todo item\n            todo.elements(this.element).animate({fontSize: '125%'}, 750);\n        }, this));\n    },\n\n    // add event listener on selected\n    '.todo selected':  function (el, e, todo) {\n        // pass todo id as a parameter to the router\n        $.route.attr('id', todo.id);\n    }\n});\n\n// create new Routing controller instance\nnew Routing(document.body);\n```", "```js\nsteal(\n    'jquery/class',\n    'jquery/model',\n    'jquery/util/fixture',\n    'jquery/view/ejs',\n    'jquery/controller',\n    'jquery/controller/route',\n\n    function ($) {\n        $.Model('Todo', {\n                findAll: 'GET /todos',\n                findOne: 'GET /todos/{id}',\n                create:  'POST /todos',\n                update:  'PUT /todos/{id}',\n                destroy: 'DELETE /todos/{id}'\n            },\n            {\n\n            }\n        );\n\n        // Fixtures\n        (function () {\n            var TODOS = [\n                // list of todos\n                {\n                    id:   1,\n                    name: 'read The Good Parts'\n                },\n                {\n                    id:   2,\n                    name: 'read Pro Git'\n                },\n                {\n                    id:   3,\n                    name: 'read Programming Ruby'\n                }\n            ];\n\n            // findAll\n            $.fixture('GET /todos', function () {\n                return [TODOS];\n            });\n\n            // findOne\n            $.fixture('GET /todos/{id}', function (orig) {\n                return TODOS[(+orig.data.id) - 1];\n            });\n\n            // create\n            var id = 4;\n            $.fixture('POST /todos', function () {\n                return {\n                    id: (id++)\n                };\n            });\n\n            // update\n            $.fixture('PUT /todos/{id}', function () {\n                return {};\n            });\n\n            // destroy\n            $.fixture('DELETE /todos/{id}', function () {\n                return {};\n            });\n        }());\n\n        $.Controller('Todos', {\n            // init method is called when new instance is created\n            'init': function (element, options) {\n                this.element.html('todos.ejs', Todo.findAll());\n            },\n\n            // add event listener to strong element on click\n            'li strong click': function (el, e) {\n                // trigger custom event\n                el.trigger('selected', el.closest('li').model());\n\n                // log current model to the console\n                console.log('li strong click', el.closest('.todo').model());\n            },\n\n            // add event listener to em element on click\n            'li .destroy click': function (el, e) {\n                // call destroy on the model to prevent memory leaking\n                el.closest('.todo').model().destroy();\n            },\n\n            // add event listener to Todo model on destroyed\n            '{Todo} destroyed': function (Todo, e, destroyedTodo) {\n                // remove element from the DOM tree\n                destroyedTodo.elements(this.element).remove();\n\n                console.log('destroyed: ', destroyedTodo);\n            }\n        });\n\n        // routing\n        $.Controller('Routing', {\n            init: function () {\n                new Todos('#todos');\n            },\n\n            // the index page\n            'route': function () {\n                console.log('default route');\n            },\n\n            // handle URL witch hash\n            ':id route': function (data) {\n                Todo.findOne(data, $.proxy(function (todo) {\n                    // increase font size for current todo item\n                    todo.elements(this.element).animate({fontSize: '125%'}, 750);\n                }, this));\n            },\n\n            // add event listener on selected\n            '.todo selected':  function (el, e, todo) {\n                // pass todo id as a parameter to the router\n                $.route.attr('id', todo.id);\n            }\n        });\n\n        // create new Routing controller instance\n        new Routing(document.body);\n    }\n);\n```"]