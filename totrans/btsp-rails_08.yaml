- en: Chapter 8. Working with Bootstrap Modals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every developer has used an alert/prompt window when dealing with web development.
    They are generally used to display important messages, accept information from
    the user, display warning messages, and for many different purposes. The problem
    with these traditional dialog windows is that they have become outdated, and our
    visitors probably hate them. It's no longer recommended to use dialog windows
    from a better user experience perspective.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this problem, web developers discovered another better way to replace
    pop-up windows. They used a hidden HTML element inside the same web page. Whenever
    needed, this hidden element was displayed with the help of some JavaScript code
    and CSS styling. Bootstrap's modal does exactly the same. It is a flexible dialog
    prompt with minimum required functionality. It has got its own Bootstrap styling
    and animation.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to create a Bootstrap modal and its various
    types and functionalities. We will also integrate a modal component in our Rails
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with modals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we will create a static application to create and test various types
    of Bootstrap modals. Once we are done with the basics of modals, we will proceed
    to integrate it in our existing `Online Shopping Rails` application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder called `Bootstrap Modals` in your system. Now, create a
    new file called `index.html` and paste the following starter template in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s delete the `Hello World` tag from the preceding template and insert
    the markup needed for a modal. To create a modal, we need to define a `<div>`
    element with a `.modal` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally, you can also add the `.fade` class to apply the `.fade-in` animation
    to the modal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `.modal` class creates a wrapper for the modal component. It hides the HTML
    web page's scrolling attribute by setting the CSS `overflow` property to `hidden`.
    It also creates an HTML area with `fixed` positioning on top of all the HTML elements
    present on the same page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add a markup for placing contents inside the modal. The procedure
    goes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The classes `.modal-dialog` and `.modal-content` are, together, responsible
    for properly centering a white-colored content area in a modal component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s proceed to create the modal''s body area for placing the HTML contents
    inside a modal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can place any HTML element, as per your requirement, inside this `.modal-body`
    div. You can use it to display a long `Terms & Conditions` text, a `login` form,
    a warning text, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We are ready with our first basic modal. If you load this HTML page inside the
    browser, you will find a blank page. It's because we have created a modal, but
    didn't create any element which will trigger this modal. Modals are hidden components
    in Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a Bootstrap button to trigger the preceding modal when clicked
    on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This button should have two very important custom attributes to trigger a modal:
    `data-toggle` and `data-target`. The first attribute tells Bootstrap''s JavaScript
    which component it''s concerned with, while the second attribute specifies which
    particular modal to open. The second attribute holds the ID of the modal you want
    to open. Let''s also apply this ID to our preceding modal. Hence, the final markup
    for our modal should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get a modal that looks like the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with modals](img/7269OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A modal component also has a header and footer area, apart from the `.modal-body`
    area. They are created using the `.modal-header` and `.modal-footer` classes.
    We can apply a header and footer by adding code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It is recommended that you use an `<h4>` tag with a `.modal-title` class inside
    `.modal-header`. All the default elements inside the modal''s footer will appear
    right, aligned, as per Bootstrap''s CSS. You can modify it by overriding its CSS
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding modal a with a header and footer should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with modals](img/7269OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing Bootstrap's modal size
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bootstrap''s modals also come in various sizes: large, normal, and small. You
    need to use the following classes to change the size of the modal:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.modal-lg`: This is for larger modals'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No class: This is for normal sized modals'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.modal-sm`: This is for smaller modals'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You have to add the preceding classes to the `.modal-dialog` element in the
    modal''s markup. Take the following code as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding markup will create a larger modal, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing Bootstrap''s modal size](img/7269OS_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Additional Bootstrap modal features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bootstrap provides many features for the modal component. These features are
    generally provided as `JSON` properties, while triggering the modal component.
    Alternatively, you can use these features by using custom `data-*` attributes
    in the `.modal` element. Bootstrap''s additional features are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data-backdrop`: This attribute accepts `static` or `true` values. When set
    to `static`, it disables the closing of the modal when clicked outside the modal
    body.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-keyboard`: This accepts Boolean values and is set to `true` by default.
    When `true`, features of `data-keyboard` closes the modal when the *Esc* key is
    pressed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-show`: This accepts Boolean values and is set to `false` by default.
    When `true`, `data-shows` the modal when it was initialized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching remote content from a Bootstrap modal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, `data-remote` is a special data attribute in Bootstrap's modal component.
    It is used to load a remote web page inside a modal, when data is triggered. This
    feature is only available from Bootstrap v 3.0 to v 3.2.0; I believe it is really
    very useful!
  prefs: []
  type: TYPE_NORMAL
- en: Let's check out an example of how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new HTML page named `page2.html` inside the same Bootstrap
    Model project folder. Place the following basic HTML inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This page should look like the following in a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fetching remote content from a Bootstrap modal](img/7269OS_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now load this page inside our previous modal, whenever it is triggered.
    Modify the previously created modal markup, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that this time we have added an additional attribute `data-remote`, and
    the path to `page2.html` as the value. Let''s refresh the browser and trigger
    the modal. This time, you should see `page2.html` loaded inside the modal instead
    of the default content. The screenshot is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fetching remote content from a Bootstrap modal](img/7269OS_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should be very careful while using cross-domain links as remote content.
    Many browsers might not allow that.
  prefs: []
  type: TYPE_NORMAL
- en: Using Bootstrap's modal in a Rails application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our `Demo Shopping` Application, created in previous chapters, we had all
    the products listed in a single page. We will add an additional button, named
    **Buy,** beside the **Show** button in each product. When a user clicks on the
    **Buy** button, the browser will display a modal confirming his/her action to
    add the particular product to the cart. The modal will have an **Add to cart**
    button, which will simulate the behavior of the product that is being added to
    the cart and then will close the modal. We won't be creating a real shopping cart
    in this book. It's up to you to decide which method you would like to use to create
    a shopping cart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `application.html.erb` file present in the `layouts` folder by navigating
    to **app** | **views** | **layouts**. We will create a global modal in this file.
    This modal will get triggered whenever the **Buy** button is clicked. The markup
    for this modal is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that you place this modal markup outside the entire markup that was
    previously created. Bootstrap recommends you to always place a modal's markup
    in the topmost level.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are done with placing a dummy modal. Let's proceed to create a **Buy**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `index.html.erb` file present inside the `products` folder by navigating
    to **app** | **views** | **products**. Search for the previously created **Show**
    button, which had the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We will place another button with no `href` attribute and add custom data attributes
    to trigger the modal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This will create a new **Buy** button beside each **Show** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Bootstrap''s modal in a Rails application](img/7269OS_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add custom data attributes to trigger the modal component. Modify the
    **Buy** button, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `data-target` attribute will hold the `#buyModal` value, which is
    also the ID of our modal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you click on the **Buy** button, it will display the modal, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Bootstrap''s modal in a Rails application](img/7269OS_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add a functionality which will dismiss the modal when we click on the
    `Add to cart` button. For this, we need to again edit the `application.html.erb`
    file. We have to add an extra data attribute `data-dismiss` with the value as
    `modal` to the **Add to cart** button. Let''s add the data attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Adding the preceding data attribute will let Bootstrap's JavaScript know which
    component to close.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you enjoyed learning how to create a flexible Bootstrap modal component.
    Through this chapter, we learnt how to create a basic modal in a static project.
    We then moved on to add extra functionalities to it. We also saw how to create
    modals of different sizes by using additional classes such as `.modal-lg` and
    `.modal-sm`. Finally, we integrated a modal component to our shopping application.
    We learnt how to simulate the `Add to cart` functionality through the dummy confirm
    modal. The field is now open for you to experiment more with modals.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to understand one of the most interesting
    Bootstrap components, Carousels. We will see how we can use the carousel component
    and create beautiful image slideshows.
  prefs: []
  type: TYPE_NORMAL
