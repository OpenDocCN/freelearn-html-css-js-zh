["```js\nvar fs = require('fs');\nvar contents = fs.readFileSync('fake.js', 'utf8');\nconsole.log(contents);\n```", "```js\nvar fs = require('fs');\nfs.readFile('DATA', 'utf8', function(err, contents) {   \n    console.log(contents);\n});\nconsole.log('after calling readFile');\n```", "```js\n    // 1\\. define the function\n    let add = (a, b) => {  \n        return a + b;\n    }\n    // 2\\. Call the defined function\n    console.log(\"Sum of 12 and 34 is\", add(12, 34));\n    ```", "```js\nconst path = require('path');\n```", "```js\nconst myModule = require('./modules/myModule');\n```", "```js\n    $ npm install express //i is the shortcut to install. (npm i express)\n    ```", "```js\n    $ npm update express\n    ```", "```js\n    $ npm remove express // rm is the shortcut to remove. (npm rm express)\n    ```", "```js\n    $ npm publish\n    ```", "```js\n    $ npm search express\n    ```", "```js\n$ npminit\n```", "```js\n$ npm publish\n```", "```js\n    $ npm install <module_name> --save\n    ```", "```js\n    $ npm start\n    ```", "```js\nconst url = require('url');\n```", "```js\n    const url = require('url');\n    ```", "```js\n    const url = url.parse('https://www.google.com/maps#horizontal');\n    ```", "```js\n    url.host ='maps.google.com'; // https://maps.google.com/maps#horizontal\n    url.pathname = '/q'; // https://maps.google.com/q\n    url.hash = 'vertical'; // https://maps.google.com/q#vertical\n    ```", "```js\n    console.log(URL.format(url));\n    ```", "```js\n    var fs = require('fs');\n    fs.readFile('sample.txt', 'utf-8', (err, data) => {\n            if (err) { console.log(err) }\n            console.log('Data read from file: ', data);\n    });\n    ```", "```js\n    var fs = require('fs');\n    var data = \"\\nLearn Node.js with the help of a well built Node.js tutorial.\";\n    fs.appendFile('sample.txt', data, 'utf8',\n    // using the callback function\n    function (err) {\n    if (err) throw err;\n    // if there is no error\n        console.log(\"New data was appended to file successfully.\")\n    });\n    ```", "```js\n    var fs = require('fs');\n    fs.rename('sample.txt', 'introduction.txt', (err) => {\n            if (err) { console.log(err) }\n            console.log('Done');\n    })\n    ```", "```js\n    var fs = require('fs');\n    fs.unlink('introduction.txt', (err) => {\n            if (err) { console.log(err) }\n            console.log('Done');\n    })\n    ```", "```js\nconst os = require('os');\n```", "```js\n    const os = require('os');\n    ```", "```js\n    console.log(os.arch()); //x32, x64\n    console.log(os.platform()); //win32, Win64, Darwin, Linux\n    ```", "```js\nconst path = require('path');\n```", "```js\n    let dir = 'C:/Packt';\n    let otherDir = '/assets/images/';\n    let file = path.js';\n    ```", "```js\n    // On Windows: \"C:/Packt\"\n    path.dirname(dir+file);\n    ```", "```js\n    path.extname(file); // \".js\"\n    ```", "```js\n    path.join(dir, otherDir + file)\n    ```", "```js\n    const path = require('path');\n    let dir = \"C:/Packt\";\n    let otherDir = \"/assets/images/\";\n    let file = \"path.js\";\n    console.log(path.dirname(dir + file));\n    console.log(path.extname(file));\n    console.log(path.join(dir, otherDir + file));\n    ```", "```js\nres.writeHead(200, {'Content-Type': 'application/json'});\n```", "```js\n    var http = require('http');\n    var port = 3000;\n    // Start the server instance\n    let server = http.createServer( function (req, res) {\n            res.write( 'Hello World!' ); // Response content\n            res.end(); // End response\n    });\n    server.listen( port ); // the server object listens on port 3000\n    ```", "```js\n    $ npm i express\n    ```", "```js\n$ npm i express\n```", "```js\nconst express = require('express')\nconst app = express()\napp.get('/', (req, res) => res.send('Hello World!'))\napp.listen(3000, () => console.log('Example app listening on port 3000)));}!'))\n```", "```js\nconst express = require('express')\nconst app = express()\n// GET\napp.get('/', function (req, res) {\n  res.send('Hello World!')\n})\n// POST\napp.post('/', function (req, res) {\n  res.send('Got a POST request')\n})\n// PUT\napp.put('/user', function (req, res) {\n  res.send('Got a PUT request at /user')\n})\n// DELETE\napp.delete('/user', function (req, res) {\n  res.send('Got a DELETE request at /user')\n})\n```", "```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n```", "```js\n$ npm install morgan --save\n```", "```js\nvar morgan = require('morgan')\n```", "```js\napp.use(morgan(':method :status :url - :response-time ms'));\n```", "```js\nvar connection = MySQL.createConnection({\n        host: 'localhost', // 127.0.0.1\n        user: 'me',\n        password: 'secret',\n        database: 'my_db'\n});\n```", "```js\n    $ npm install mysql\n    ```", "```js\n    var MySQL = require('mysql');\n    ```", "```js\n    var connection = MySQL.createConnection({\n            host: 'localhost',\n            user: 'me',\n            password: 'secret',\n            database: 'my_db'\n    });\n    connection.connect(function (err) {\n            if (err) {\n                    console.error('error connecting: ' + err.stack);\n                    return;\n            }\n            console.log('connected as id ' + connection.threadId);\n    }\n    );\n    Code runs connection and logs thread ID to console. From here on, the reader should be able to run queries like,connection.query('SELECT * FROM table, function(err, result, fields)  \n    { \n      if (err) throw err;\n      console.log(result); \n    });\n    ```", "```js\n    connection.query('SELECT 1 + 1 AS solution', function (error, results, fields) {\n            if (error) throw error;\n            console.log('The solution is: ', results[0].solution);\n          });  \n    ```", "```js\n    connection.end();\n    ```", "```js\n    if(connection.state === 'disconnected'){\n         return respond(null, { status: 'fail', message: 'server down'});\n       } else (\"continue with app code\")\n    ```", "```js\n    $ npm install mongodb --save\n    ```", "```js\n    const MongoClient = require('mongodb').MongoClient;\n    ```", "```js\n    mongodb://[username:password@]host1[:port1][,...hostN[:portN]]][/[database][?options]]\n    ```", "```js\n    const url = 'mongodb://localhost:27017';\n    MongoClient.connect(url, function(err, client) {\n      assert.equal(null, err);\n      console.log(\"Connected successfully to server\");\n\n      const db = client.db(dbName);\n\n      client.close();\n    });\n    ```", "```js\n$ npm install socket.io --save  \n```", "```js\nconst express = require('express')\nconst app = express();\nserver.listen(3000);\nconst io = require('socket.io')(server)\n```", "```js\nio.on('connection', client => {\n        client.on('event', data => { /* … */ });\n        client.on('disconnect', () => { /* … */ });\n      });      \n```", "```js\n    const express = require('express')\n    const app = express()\n    // Listen on port 3000\n    server = app.listen(3000)\n    // Configuring Socket\n    const io = require('socket.io')(server)\n    ```", "```js\n    io.on('connection', (socket) => {\n            //listen on change_username\n            socket.on('change_username', (data) => {\n                socket.username = data.username\n            })\n\n            //listen on typing\n            socket.on('typing', (data) => {\n            socket.broadcast.emit('typing',{username : socket.username\n    })\n    })\n    })\n    ```", "```js\n    <script src='/socket.io/socket.io.js'></script>\n    ```", "```js\n    index.html\n    2 <html>\n    3 <head>\n    4     <meta http-equiv=\"Content-Type\" const=\"text/html;charset=UTF-8\" />\n    5     <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/boot       strap.min.css\"\n    6         integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"           crossorigin=\"anonymous\">\n    7     <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n    8     <script src=\"img/socket.io.js\"></script>\n    9     <title>Packt - Chat App Exercise</title>\n    10 </head>\n    11 \n    12 <body>\n    13     <header>\n    14         <h1>Avengers Chatroom</h1>\n    15     </header>\n    The full code is available at: https://packt.live/2NIGAjn\n    ```", "```js\n    var socket = io.connect('http://localhost:3000');\n    ```", "```js\n    socket.on('typing', (data) => {\n    feedback.html(\"<p><i><b>\" + data.username + \"</b> is typing a message...\" + \"</i></p>\")\n    })\n\n    //Listen on typing\n    socket.on('stop_typing', (data) => {\n    feedback.html(\"\")\n    })\n    ```", "```js\n    § npm start\n    ```"]