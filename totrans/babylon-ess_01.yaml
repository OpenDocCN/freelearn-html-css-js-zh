- en: Chapter 1. Babylon.js and the TypeScript Language
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. Babylon.js 和 TypeScript 语言
- en: Babylon.js is a framework that allows you to create complete 3D applications
    and 3D video games for the Web. Babylon.js has a community that grows day after
    day; a community that actively contributes to the project, adding more and more
    features. This chapter gives you a brief introduction to the framework's vision
    and the TypeScript language as, Babylon.js was developed using this.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Babylon.js 是一个允许你为 Web 创建完整的 3D 应用程序和 3D 视频游戏的框架。Babylon.js 拥有一个日益增长的社区；一个积极为项目做出贡献、添加更多功能的社区。本章简要介绍了框架的愿景和
    TypeScript 语言，因为 Babylon.js 就是使用这个语言开发的。
- en: The Babylon.js framework embeds all the necessary tools to handle specific 3D
    applications. It allows you to load and draw 3D objects, manage these 3D objects,
    create and manage special effects, play and manage spatialized sounds, create
    gameplays, and more. Babylon.js is an easy-to-use framework as you can set up
    (you'll see this later) these things with the minimum lines of code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Babylon.js 框架集成了处理特定 3D 应用所需的所有工具。它允许你加载和绘制 3D 对象，管理这些 3D 对象，创建和管理特殊效果，播放和管理空间化声音，创建游戏玩法，等等。Babylon.js
    是一个易于使用的框架，因为你可以用最少的代码行设置这些事情（你稍后就会看到）。
- en: Babylon.js is a JavaScript framework developed using TypeScript. TypeScript
    is a compiled and multiplatform language that generates pure JavaScript files.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Babylon.js 是一个使用 TypeScript 开发的 JavaScript 框架。TypeScript 是一种编译型和多平台语言，它生成纯 JavaScript
    文件。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: An introduction to Babylon.js
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Babylon.js 简介
- en: The reason Babylon.js has been developed using TypeScript
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Babylon.js 使用 TypeScript 的原因
- en: An introduction to TypeScript
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript 简介
- en: The creators
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创始人
- en: Babylon.js was created by David Catuhe (`@deltakosh`), David Rousset (`@davrous`),
    Pierre Lagarde (`@pierlag`), and Michel Rousseau (`@rousseau_michel`). It's an
    open source project essentially developed in their spare time. When they started
    Babylon.js, they wanted it to be designed as *easy-to-use* and then get an accessible
    3D engine for everyone. The official web site ([http://www.babylonjs.com/](http://www.babylonjs.com/))
    contains a lot of tutorials for beginners (even in 3D) to more advanced users
    with examples for each feature and scenes as examples.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Babylon.js 是由 David Catuhe (`@deltakosh`)、David Rousset (`@davrous`)、Pierre
    Lagarde (`@pierlag`) 和 Michel Rousseau (`@rousseau_michel`) 创建的。它是一个本质上在他们的业余时间开发的开源项目。当他们开始
    Babylon.js 时，他们希望它设计得**易于使用**，然后为每个人提供一个可访问的 3D 引擎。官方网站 ([http://www.babylonjs.com/](http://www.babylonjs.com/))
    包含了大量针对初学者（甚至是在 3D 方面）到更高级用户的教程，每个功能都有示例，场景作为示例。
- en: Online tools provided by the Babylon.js solution
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Babylon.js 解决方案提供的在线工具
- en: 'Babylon.js provides you with several online tools to help developers and artists
    experiment and try their productions:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Babylon.js 为你提供了几个在线工具，以帮助开发者和艺术家进行实验和尝试他们的作品：
- en: For developers, the Playground ([http://www.babylonjs-playground.com/](http://www.babylonjs-playground.com/))
    allows you to experiment and train. It shows a code editor with autocompletion
    (Monaco) and canvas to see the results. It also provides some examples of code
    to train with.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于开发者来说，游乐场 ([http://www.babylonjs-playground.com/](http://www.babylonjs-playground.com/))
    允许你进行实验和训练。它展示了一个带有自动补全（Monaco）的代码编辑器和画布来查看结果。它还提供了一些代码示例供你训练使用。
- en: For artists, the Sandbox ([http://www.babylonjs.com/sandbox/](http://www.babylonjs.com/sandbox/))
    allows you to drag and drop exported Babylon.js scenes (Blender and 3ds Max) to
    the browser to see the results in real time. The Sandbox provides you with debugging
    tools to activate/deactivate features and see the impact on real-time performances.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于艺术家来说，沙盒 ([http://www.babylonjs.com/sandbox/](http://www.babylonjs.com/sandbox/))
    允许你将导出的 Babylon.js 场景（Blender 和 3ds Max）拖放到浏览器中，以实时查看结果。沙盒为你提供了调试工具，可以激活/停用功能并查看对实时性能的影响。
- en: The **Create Your Own Shader** (**CYOS**) allows developers to develop shaders
    and see the results in real time. There are also several shaders already available
    to train and experiment with.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建您的自定义着色器**（**CYOS**）允许开发者开发着色器并实时查看结果。还有几个现成的着色器可供训练和实验。'
- en: Why is Babylon.js developed using TypeScript?
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么 Babylon.js 使用 TypeScript 开发？
- en: Babylon.js is a big project with increasing contributions since its creation
    on GitHub. It provides you with a lot of functions and, sometimes, with a lot
    of parameters for more flexibility. The TypeScript language is useful for robust
    code as its goal is to improve and secure the production of JavaScript code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: The TypeScript language
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScript (**TS**) is a free and open source language developed by Microsoft.
    It is a compiled language to produce JavaScript (the TS code is, in fact, transcompiled)
    and provides a static typing system, which is optional. The typing system is used
    in Babylon.js in order to get a cleaner and more descriptive code. It means that
    if a function has a lot of parameters, it's easier to fill and understand them
    instead of always using the documentation as a reference. Moreover, it allows
    developers to declare classes (as the ECMAScript 6 specifications do) and interfaces
    for a better understandable architecture and structure of code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: The TypeScript features
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The typing system is powerful as it allows developers to create interfaces,
    enumerated types, and classes and handle generics and union typing. Overall, developers
    use the typing system for a better understanding and security of the libraries
    that they are building and using.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: The TS language supports inheritance (classes) and also provides access specifiers
    (private / public / protected) to modify the access rights for the classes' members.
    Then, developers can see at a glance the members that they can use and modify.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to TypeScript - what you have to know
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s introduce TypeScript with some feature examples and configurations:
    how to compile TS files to JS files, work with classes / types / union types,
    functions, inheritance, and interfaces.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Compilation using Gulp
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gulp is a task runner available as an npm package. It provides a plugin to handle
    the TypeScript compilation. The only thing to do is to configure a task using
    gulp with gulp-typescript.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'To download the gulp packages, you have to install Node.js ([https://nodejs.org/](https://nodejs.org/))
    to get access to the npm packages:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Gulp using the following command line:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install Gulp-Typescript using the following command lines:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To configure the Gulp task, just provide a JS file named `gulpfile.js` containing
    the task description.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import Gulp and Gulp-TypeScript:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Define the default task to transcompile your TS files:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once the default task lists all the TS files to transcompile, just call Gulp
    using the following command line:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Working with typed variables
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Working with TypeScript is really similar to JS as the typing system is optional.
    Nevertheless, the common types in TS are as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: String
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Void
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enum
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Array
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With JS, you should write the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, you can write exactly the same with TS. The TS compiler will process
    the type inference and guess the variable type for you:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To specify the type of a variable with TS, type the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, with the previous example, add the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'However, it''s forbidden to assign a new value with a different type even if
    you don''t mention the type as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To get the JS flexibility with variables, let''s introduce the `any` type.
    The `any` type allows developers to create variables without any static type.
    The following is an example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following is the screenshot of the `types.ts` file:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with typed variables](img/image_01_001.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: Let's introduce some specific types. It's the occasion to introduce the generics
    using TypeScript and enumerated types. The usage of numbers, Booleans, and strings
    is the same in TypeScript and JavaScript. So, no need to learn more.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Enumerated types
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Working with enumerated types (`enum`) is like working with numbers. The syntax
    is as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This generates the following JS code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Access to an enumerated type in both the languages is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Array
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Defining an array with TS is also similar to JS. The following is an example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With TS, array is a generic class. Then, you can specify the item''s type contained
    in the array as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: With TS, typing new `Array()` is equivalent to new `Array<any>()`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now access the common functions as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Working with classes and interfaces
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Classes and interfaces allow you to build types just as the `Array` class does.
    Once you create a class, you can create instances using the keyword `new`, which
    creates an object in the memory.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Creating a class
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax in TS to define a class is as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This generates the following in JS:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In both languages, you can create an instance of `Writer`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can also use modules that work as namespaces:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Access:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Creating class members
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With JS and the conventions, you can write the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'With TS, you can explicitly specify the access specifier of a member (public,
    private, and protected), which has been explained as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '**Public**: Any block of code can access the member to read and write'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private**: Only this can access this member to read and write'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Protected**: External blocks of code cannot access the member; only this
    and specializers (inheritance) can access this member to read and write'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s experiment using the Writer class:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Working with inheritance
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's create a new class that specializes the `Writer` class. The specialized
    classes can access all the public and protected members of the base class thanks
    to the inheritance. The `extends` keyword represents the inheritance.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new class named `BetterWriter` that specializes (extends) the `Writer`
    class:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Using interfaces
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Interfaces are used to create contracts. It means that if a class implements
    an interface, the class must provide all the functions and members defined in
    the interface. If not, it doesn't respect the contract, and the compiler will
    output an error.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: All the defined functions are public and all the defined members are public.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: With Babylon.js, a good example is to use the `IDisposable` interface. It means
    that the users can call the method named `dispose()`. This function's job is to
    deactivate and/or deallocate the systems used.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Babylon.js 时，一个很好的例子是使用 `IDisposable` 接口。这意味着用户可以调用名为 `dispose()` 的方法。这个函数的职责是停用和/或释放所使用的系统。
- en: 'The following is an example:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you obtained the necessary knowledge to develop programs using
    TypeScript with Babylon.js. You'll see that working with TypeScript can be more
    productive and secure in most cases. Additionally, some developers will be more
    comfortable when using types as they are used to development with typing.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你获得了使用 Babylon.js 开发程序所需的必要知识。你会发现，在大多数情况下，使用 TypeScript 可以更高效、更安全。此外，一些开发者可能会更习惯使用类型，因为他们已经习惯了使用类型进行开发。
- en: Don't hesitate to manipulate TypeScript with the attached example files. Don't
    forget to install gulp and run the command lines.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 不要犹豫，使用附带的示例文件操作 TypeScript。别忘了安装 gulp 并运行命令行。
- en: 'You can also run the following command line:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令行：
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This will track and recompile the TS files at each modification automatically.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动跟踪并重新编译每次修改的 TS 文件。
- en: In the next chapter, let's get straight to the heart of the matter with an introduction
    to the Babylon.js framework, and how to create an engine and scene entities such
    as lights, cameras, and meshes (3D objects). You'll build your first 3D scene
    with Babylon.js and understand the architecture of the framework really quickly!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，让我们直接进入主题，通过介绍 Babylon.js 框架以及如何创建引擎和场景实体（如灯光、相机和网格（3D 对象））来了解 Babylon.js。你将使用
    Babylon.js 构建你的第一个 3D 场景，并快速理解框架的架构！
