- en: Chapter 1. Babylon.js and the TypeScript Language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Babylon.js is a framework that allows you to create complete 3D applications
    and 3D video games for the Web. Babylon.js has a community that grows day after
    day; a community that actively contributes to the project, adding more and more
    features. This chapter gives you a brief introduction to the framework's vision
    and the TypeScript language as, Babylon.js was developed using this.
  prefs: []
  type: TYPE_NORMAL
- en: The Babylon.js framework embeds all the necessary tools to handle specific 3D
    applications. It allows you to load and draw 3D objects, manage these 3D objects,
    create and manage special effects, play and manage spatialized sounds, create
    gameplays, and more. Babylon.js is an easy-to-use framework as you can set up
    (you'll see this later) these things with the minimum lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: Babylon.js is a JavaScript framework developed using TypeScript. TypeScript
    is a compiled and multiplatform language that generates pure JavaScript files.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Babylon.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reason Babylon.js has been developed using TypeScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to TypeScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The creators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Babylon.js was created by David Catuhe (`@deltakosh`), David Rousset (`@davrous`),
    Pierre Lagarde (`@pierlag`), and Michel Rousseau (`@rousseau_michel`). It's an
    open source project essentially developed in their spare time. When they started
    Babylon.js, they wanted it to be designed as *easy-to-use* and then get an accessible
    3D engine for everyone. The official web site ([http://www.babylonjs.com/](http://www.babylonjs.com/))
    contains a lot of tutorials for beginners (even in 3D) to more advanced users
    with examples for each feature and scenes as examples.
  prefs: []
  type: TYPE_NORMAL
- en: Online tools provided by the Babylon.js solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Babylon.js provides you with several online tools to help developers and artists
    experiment and try their productions:'
  prefs: []
  type: TYPE_NORMAL
- en: For developers, the Playground ([http://www.babylonjs-playground.com/](http://www.babylonjs-playground.com/))
    allows you to experiment and train. It shows a code editor with autocompletion
    (Monaco) and canvas to see the results. It also provides some examples of code
    to train with.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For artists, the Sandbox ([http://www.babylonjs.com/sandbox/](http://www.babylonjs.com/sandbox/))
    allows you to drag and drop exported Babylon.js scenes (Blender and 3ds Max) to
    the browser to see the results in real time. The Sandbox provides you with debugging
    tools to activate/deactivate features and see the impact on real-time performances.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Create Your Own Shader** (**CYOS**) allows developers to develop shaders
    and see the results in real time. There are also several shaders already available
    to train and experiment with.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why is Babylon.js developed using TypeScript?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Babylon.js is a big project with increasing contributions since its creation
    on GitHub. It provides you with a lot of functions and, sometimes, with a lot
    of parameters for more flexibility. The TypeScript language is useful for robust
    code as its goal is to improve and secure the production of JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: The TypeScript language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TypeScript (**TS**) is a free and open source language developed by Microsoft.
    It is a compiled language to produce JavaScript (the TS code is, in fact, transcompiled)
    and provides a static typing system, which is optional. The typing system is used
    in Babylon.js in order to get a cleaner and more descriptive code. It means that
    if a function has a lot of parameters, it's easier to fill and understand them
    instead of always using the documentation as a reference. Moreover, it allows
    developers to declare classes (as the ECMAScript 6 specifications do) and interfaces
    for a better understandable architecture and structure of code.
  prefs: []
  type: TYPE_NORMAL
- en: The TypeScript features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The typing system is powerful as it allows developers to create interfaces,
    enumerated types, and classes and handle generics and union typing. Overall, developers
    use the typing system for a better understanding and security of the libraries
    that they are building and using.
  prefs: []
  type: TYPE_NORMAL
- en: The TS language supports inheritance (classes) and also provides access specifiers
    (private / public / protected) to modify the access rights for the classes' members.
    Then, developers can see at a glance the members that they can use and modify.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to TypeScript - what you have to know
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s introduce TypeScript with some feature examples and configurations:
    how to compile TS files to JS files, work with classes / types / union types,
    functions, inheritance, and interfaces.'
  prefs: []
  type: TYPE_NORMAL
- en: Compilation using Gulp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gulp is a task runner available as an npm package. It provides a plugin to handle
    the TypeScript compilation. The only thing to do is to configure a task using
    gulp with gulp-typescript.
  prefs: []
  type: TYPE_NORMAL
- en: 'To download the gulp packages, you have to install Node.js ([https://nodejs.org/](https://nodejs.org/))
    to get access to the npm packages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Gulp using the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install Gulp-Typescript using the following command lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To configure the Gulp task, just provide a JS file named `gulpfile.js` containing
    the task description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import Gulp and Gulp-TypeScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the default task to transcompile your TS files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the default task lists all the TS files to transcompile, just call Gulp
    using the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Working with typed variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Working with TypeScript is really similar to JS as the typing system is optional.
    Nevertheless, the common types in TS are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Void
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With JS, you should write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can write exactly the same with TS. The TS compiler will process
    the type inference and guess the variable type for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To specify the type of a variable with TS, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, with the previous example, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'However, it''s forbidden to assign a new value with a different type even if
    you don''t mention the type as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the JS flexibility with variables, let''s introduce the `any` type.
    The `any` type allows developers to create variables without any static type.
    The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the screenshot of the `types.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with typed variables](img/image_01_001.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's introduce some specific types. It's the occasion to introduce the generics
    using TypeScript and enumerated types. The usage of numbers, Booleans, and strings
    is the same in TypeScript and JavaScript. So, no need to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerated types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Working with enumerated types (`enum`) is like working with numbers. The syntax
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the following JS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Access to an enumerated type in both the languages is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Array
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Defining an array with TS is also similar to JS. The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'With TS, array is a generic class. Then, you can specify the item''s type contained
    in the array as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: With TS, typing new `Array()` is equivalent to new `Array<any>()`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now access the common functions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Working with classes and interfaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Classes and interfaces allow you to build types just as the `Array` class does.
    Once you create a class, you can create instances using the keyword `new`, which
    creates an object in the memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Creating a class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax in TS to define a class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the following in JS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In both languages, you can create an instance of `Writer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use modules that work as namespaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Creating class members
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With JS and the conventions, you can write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'With TS, you can explicitly specify the access specifier of a member (public,
    private, and protected), which has been explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Public**: Any block of code can access the member to read and write'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private**: Only this can access this member to read and write'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Protected**: External blocks of code cannot access the member; only this
    and specializers (inheritance) can access this member to read and write'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s experiment using the Writer class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Working with inheritance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's create a new class that specializes the `Writer` class. The specialized
    classes can access all the public and protected members of the base class thanks
    to the inheritance. The `extends` keyword represents the inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new class named `BetterWriter` that specializes (extends) the `Writer`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Using interfaces
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Interfaces are used to create contracts. It means that if a class implements
    an interface, the class must provide all the functions and members defined in
    the interface. If not, it doesn't respect the contract, and the compiler will
    output an error.
  prefs: []
  type: TYPE_NORMAL
- en: All the defined functions are public and all the defined members are public.
  prefs: []
  type: TYPE_NORMAL
- en: With Babylon.js, a good example is to use the `IDisposable` interface. It means
    that the users can call the method named `dispose()`. This function's job is to
    deactivate and/or deallocate the systems used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you obtained the necessary knowledge to develop programs using
    TypeScript with Babylon.js. You'll see that working with TypeScript can be more
    productive and secure in most cases. Additionally, some developers will be more
    comfortable when using types as they are used to development with typing.
  prefs: []
  type: TYPE_NORMAL
- en: Don't hesitate to manipulate TypeScript with the attached example files. Don't
    forget to install gulp and run the command lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also run the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This will track and recompile the TS files at each modification automatically.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, let's get straight to the heart of the matter with an introduction
    to the Babylon.js framework, and how to create an engine and scene entities such
    as lights, cameras, and meshes (3D objects). You'll build your first 3D scene
    with Babylon.js and understand the architecture of the framework really quickly!
  prefs: []
  type: TYPE_NORMAL
