- en: Chapter 1. Starting with Backbone Marionette
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This practical guide provides clear steps to the basics of writing scalable
    applications using `Marionette.js`. As you progress through the initial examples,
    you will develop an understanding of how the framework components work together
    to create a composite application. But before we go through in-depth examples,
    here are some things that you will find in this introductory chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Description and characteristicsof `Marionette.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The role of `Marionette.js` in the Backbone applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of the framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of architecture and scalability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instructions for installation and documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Marionette.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A composite application library for `Backbone.js` is `Backbone.marionette`,
    also known as `Marionette.js`. It gives us the core constructs and simplifies
    many of the patterns and practices that your JavaScript applications need to be
    scalable.
  prefs: []
  type: TYPE_NORMAL
- en: Backbone needs Marionette.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An increasingly popular framework for building single-page and small- to mid-sized
    applications is `Backbone.js`. It provides a great set of building blocks to organize
    your frontend development and build applications that support mobile devices.
    However, it leaves much of the application design, architecture, and scalability
    to developers. Nevertheless, `Marionette.js` fills in some blanks that `Backbone.js`
    doesn't provide by itself and gives us conventions that you can take advantage
    of to build your own custom objects. Simply put, `Marionette.js` makes your life
    easier when you are developing the Backbone applications.
  prefs: []
  type: TYPE_NORMAL
- en: Key benefits of Marionette.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding a lot of key patterns and tools used to create real-world applications,
    `Marionette.js` found its place in Backbone. The following are some of the benefits
    that you can find within this framework:'
  prefs: []
  type: TYPE_NORMAL
- en: Structure, organization, and patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composite application architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event-driven architecture with the event aggregator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boilerplate for views can be reduced
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise messaging pattern influence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modularization options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incremental use; because it's not an all or nothing framework, which means that
    you can use just the components you need
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for nested views and layouts within visual regions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in memory management and zombie killing in views, regions, and layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lot of application infrastructural components needed to build an application
    of any module size is provided by `Marionette.js`.
  prefs: []
  type: TYPE_NORMAL
- en: A wide set of objects are provided by `Marionette.js` that facilitate the creation
    of well-structured applications of virtually any size and complexity. It achieves
    this goal by providing a collection of common design and implementation patterns
    found in the applications that the creator, Derick Bailey, used to develop the
    modular Backbone applications.
  prefs: []
  type: TYPE_NORMAL
- en: Building large applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When planning the architecture for your application, you normally try to think
    ahead as much as possible, attempting to achieve a decoupled architecture with
    functionality broken down into independent modules, and to avoid making direct
    calls between these modules. Therefore, you can add and remove modules without
    affecting its behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | "The secret to building large apps is never build large apps. Break your
    applications into small pieces. Then, assemble those testable, bite-sized pieces
    into your big application" |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | -- Justin Meyer, author of JavaScriptMVC. |'
  prefs: []
  type: TYPE_TB
- en: Consider that components tied to each other are difficult to change and scale
    without affecting each other. A very incremental and modular approach is provided
    by `Marionette.js`, using the module definition. It relies on the event aggregator
    to send messages between the modules to coordinate functionality from other parts
    of the system, without adding direct references to them among many more object
    types that facilitate the application's design.
  prefs: []
  type: TYPE_NORMAL
- en: Incremental use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is one of the basic concepts that the creator of `Marionette.js` used to
    create the framework. An incremental and modular approach is facilitated by `Marionette.js`,
    providing the application object and the module architecture to scale applications
    across subapplications, features, and files. All of them are built to stand alone
    and to work with the core pieces of Backbone to accomplish the application's specific
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | "The key is to acknowledge from the start that you have no idea how this
    will grow. When you accept that you don''t know everything, you begin to design
    the system defensively ... You should spend most of your time thinking about interfaces
    rather than implementations." |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | -- Nicholas Zakas, author "High-performance JavaScript websites" |'
  prefs: []
  type: TYPE_TB
- en: One of the main benefits of `Marionette.js` is that you don't need to use all
    of its components. A jQuery-jQuery UI comparison can also be applied here. The
    fact that you use the jQuery calendar by any means forces you to use the entire
    UI library. The same can be applied to Marionette because the fact that you use
    just one of its components that makes sense for your application does not obligate
    you to use the other components of Marionette.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Marionette.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will go over how to download and set up a development environment so that
    you can get started with `Marionette.js` in some easy steps. If you're already
    comfortable with installing `Marionette.js`, you may want to skip the remaining
    parts of this chapter. Feel free to jump to [Chapter 2](ch02.html "Chapter 2. Our
    First Application"), *Our First Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Text editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While building large and scalable applications, you will spend most of your
    time on a code editor. We recommend that you use an editor that works for you.
    Notepad++ or Sublime Text are definitely good options. Sublime Text already has
    a lot of snippets and packages that will help you in your development.
  prefs: []
  type: TYPE_NORMAL
- en: Web browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Working with complex client-side applications requires a good set of developer
    tools. For the purpose of this guide, we will use mostly Google Chrome and Mozilla
    Firefox, but all the code and examples should work in all modern browsers (IE9+,
    Opera, and Safari).
  prefs: []
  type: TYPE_NORMAL
- en: We will use [jsfiddle.net](http://jsfiddle.net) in order to show you the running
    examples. The use of this site is pretty simple and most of the time, you will
    only need to run the code to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the time of this writing, the current stable version of `Marionette.js`
    is v1.3.0 and it relies on the following libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`JSON2.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jQuery` (v1.7, v1.8, and v1.9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Underscore.js` (v1.4.4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Backbone.js` (v1.0.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backbone.wreqr.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backbone.babysitter.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We would like to point that having basic knowledge on Backbone and Underscore
    will help you to get the best out of this book and to understand the benefits
    of Marionette over plain Backbone development.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Marionette.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best way to get the latest build of `Marionette.js` is by going to the project
    website, [http://marionettejs.com/](http://marionettejs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: They have a **Pre-packaged** option. The `.zip` contains all of the files that
    you need to get started with `Marionette.js`, including Backbone, jQuery, and
    other prerequisites. You can also download the `Marionette.js` file without all
    the dependencies and just use the CDN versions of these libraries if they are
    available.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the documentation for each piece of `Marionette.js` from [https://github.com/Marionette.jsjs/Marionette.js/tree/master/docs](https://github.com/Marionette.jsjs/Marionette.js/tree/master/docs).
    The documentation is split into multiple files. The annotated source code can
    be found at [http://marionettejs.com/docs/backbone.marionette.html](http://marionettejs.com/docs/backbone.marionette.html).
    You can find articles, blog posts, presentations, FAQs, and more on its wiki page,
    [https://github.com/marionettejs/backbone.marionette/wiki](https://github.com/marionettejs/backbone.marionette/wiki).
  prefs: []
  type: TYPE_NORMAL
- en: Derick Bailey, the creator of Marionette, has created a sample application that
    can be used as a reference for building the Backbone applications with `Marionette.js`.
    The name of the application is `BBCloneMail` and it is a great example to demonstrate
    a composite application. You can find `BBCloneMail` online at [http://bbclonemail.heroku.com](http://bbclonemail.heroku.com)
    and the source code at [http://github.com/derickbailey/bbclonemail](http://github.com/derickbailey/bbclonemail).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at some of the core concepts and benefits that `Marionette.js`
    offers for building scalable applications. We also provided links to find, download,
    and install the basic tools needed to perform your development. In the next chapter,
    you will be introduced to the components or building blocks that make up the `Marionette.js`
    applications.
  prefs: []
  type: TYPE_NORMAL
