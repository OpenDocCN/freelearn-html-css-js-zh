- en: Chapter 3. Creating Responsive Layouts Using Bootstrap CSS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章：使用 Bootstrap CSS 创建响应式布局
- en: The basic idea and thumb rule in working with Bootstrap is that you shouldn't
    create your own CSS classes and styles; rather, you should always utilize and
    adapt the classes provided by the framework. This way you will be able to leverage
    the full power and potential offered by Bootstrap. For this, you must be aware
    of all the classes supplied by the framework. Of course, you can update and extend
    the classes as per your needs and branding; we will see how to do this later.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Bootstrap 时的基本想法和规则是，你不应该创建自己的 CSS 类和样式；相反，你应该始终利用和适应框架提供的类。这样，你将能够利用 Bootstrap
    提供的全部功能和潜力。为此，你必须了解框架提供的所有类。当然，你可以根据你的需求和品牌更新和扩展这些类；我们将在稍后看到如何做到这一点。
- en: 'In this chapter we will go through most of the major CSS classes that Bootstrap
    is equipped with. We will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 Bootstrap 所配备的多数主要 CSS 类。我们将涵盖以下内容：
- en: The Bootstrap HTML file structure
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap 的 HTML 文件结构
- en: Basic HTML elements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本 HTML 元素
- en: The details of responsive classes in Bootstrap
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap 中响应式类别的详细信息
- en: Handling images
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理图片
- en: Understanding the all-important grid system in Bootstrap
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Bootstrap 中的至关重要的网格系统
- en: Building data-entry forms
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建数据输入表单
- en: Basic HTML structure for Bootstrap
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootstrap 的基本 HTML 结构
- en: In this section we will explore the basic HTML file structure when you will
    use Bootstrap as the front-end framework.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨当你使用 Bootstrap 作为前端框架时基本的 HTML 文件结构。
- en: The head section
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: head 部分
- en: 'Just to recap, your HTML file must be marked as HTML5 `doctype`. Thus you always
    include this at the very beginning of your file:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 只为了回顾，你的 HTML 文件必须标记为 HTML5 `doctype`。因此，你总是在文件的开始处包含这个：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Second important thing is that you must include `meta viewport` tag in your
    head section. For example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个重要的事情是，你必须在你的 head 部分包含 `meta viewport` 标签。例如：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After this, you would of course include the Bootstrap CSS and JS files. Thus,
    the minimalistic head section of your HTML file would look as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你当然会包含 Bootstrap CSS 和 JS 文件。因此，你的 HTML 文件的简约 head 部分看起来如下：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The body section
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正文部分
- en: 'All of your HTML body section must be positioned inside a `div` element with
    class attached as `container` or `container-fluid`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你所有的 HTML 正文部分必须放置在具有 `container` 或 `container-fluid` 类的 `div` 元素内部：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `container` class ensures that your page will be rendered as a responsive
    fixed width style. While, the `container-fluid` class renders your page as a responsive
    full-width design. Hence, if you want your page to be of fixed width in the middle
    of the screen irrespective of the width of the browser window, then use `container`
    class. On the other hand, if you want that your page always consumes the full
    screen, you need to use `container-fluid` class instead. The following diagrams
    illustrates this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`container` 类确保你的页面将以响应式固定宽度样式渲染。而 `container-fluid` 类则将你的页面渲染为响应式全宽度设计。因此，如果你想让你的页面在屏幕中间具有固定宽度，而不考虑浏览器窗口的宽度，那么请使用
    `container` 类。另一方面，如果你想让你的页面始终占用整个屏幕，你需要使用 `container-fluid` 类。以下图表说明了这一点：'
- en: '![The body section](img/B03987_03_10.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![正文部分](img/B03987_03_10.jpg)'
- en: Basic HTML elements
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本 HTML 元素
- en: As you might expect, all the standard HTML5 elements are considered and styled
    in Bootstrap. Thus you would simply use any basic HTML elements and these will
    be rendered as Bootstrap specific styles and behavior.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所预期，所有标准 HTML5 元素在 Bootstrap 中都被考虑并进行了样式化。因此，你只需简单地使用任何基本 HTML 元素，这些元素将被渲染为
    Bootstrap 特定的样式和行为。
- en: 'For example, all heading tags from H1 to H6 can be used as they are. You simply
    write:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，从 H1 到 H6 的所有标题标签都可以直接使用。你只需简单地写：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Interestingly enough, if you want to use the same heading styles in any of your
    other elements, you can simply use the provided `.h1 CSS` class.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 趣味的是，如果你想在其他任何元素中使用相同的标题样式，你可以简单地使用提供的 `.h1 CSS` 类。
- en: 'All the following standard HTML5 elements are covered in Bootstrap''s responsive
    styling set:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所有以下标准 HTML5 元素都包含在 Bootstrap 的响应式样式集中：
- en: Paragraph – `<p>`
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 段落 – `<p>`
- en: Highlight – `<mark>`
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突出显示 – `<mark>`
- en: Deleted text – `<del>`
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除文本 – `<del>`
- en: Inserted text – `<ins>`
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入文本 – `<ins>`
- en: Strikethrough – `<s>`
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除线 – `<s>`
- en: Underline – `<u>`
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下划线 – `<u>`
- en: Bold – `<strong>` or `<b>`
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 粗体 – `<strong>` 或 `<b>`
- en: Italic – `<em>` or `<i>`
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 斜体 – `<em>` 或 `<i>`
- en: Abbreviation – `<abbr>`
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩写 – `<abbr>`
- en: Address – `<address>`
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地址 – `<address>`
- en: Blockquote – `<blockquote>`
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用块 – `<blockquote>`
- en: Lists – `<ul>`, `<ol>`, `<li>`
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表 – `<ul>`, `<ol>`, `<li>`
- en: Description lists – `<dl>`, `<dd>`
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述列表 – `<dl>`, `<dd>`
- en: Codes – `<code>`, `<samp>`, `<kbd>`, `<var>`
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码 – `<code>`, `<samp>`, `<kbd>`, `<var>`
- en: Tables – `<table>`, `<thead>`, `<tbody>`, `<tr>`, `<td>`
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格 – `<table>`, `<thead>`, `<tbody>`, `<tr>`, `<td>`
- en: Form elements – `<form>`, `<label>`, `<text>`, `<textarea>`, `<password>`, `<datetime>`,
    `<number>`, `<email>`, `<date>`, `<month>`, `<week>`, `<time>`, `<tel>`, `<color>`,
    `<url>`, `<search>`, `<input>`, `<button>`
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单元素 – `<form>`, `<label>`, `<text>`, `<textarea>`, `<password>`, `<datetime>`,
    `<number>`, `<email>`, `<date>`, `<month>`, `<week>`, `<time>`, `<tel>`, `<color>`,
    `<url>`, `<search>`, `<input>`, `<button>`
- en: Responsive classes
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式类
- en: Since the main focus of Bootstrap is to create mobile optimized website with
    a minimal effort, the framework offers a number of classes to control your desktop
    and mobile version of the website.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Bootstrap的主要重点是创建最小努力优化的移动网站，因此该框架提供了一些类来控制你的桌面和移动网站版本。
- en: Understanding the basics
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解基础知识
- en: 'Across all the packaged classes and styles Bootstrap uses four different markers
    for controlling and mentioning element and device sizes. The following table lists
    and details these four markers:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap使用四个不同的标记来控制和提及元素和设备尺寸。以下表格列出了这些标记并详细说明了它们：
- en: '| Marker name | Target device / screen size | Element |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 标记名称 | 目标设备/屏幕尺寸 | 元素 |'
- en: '| --- | --- | --- |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `xs` | Applies to extra small devices, such as phones with < 768px width.Example
    class name: `.hidden-xs` | Will render the element with extra small size.For example,
    in case of buttons, font-size will be 12px, and line-height will be 1.5, padding
    will be 1px 5px.Use: `.btn-xs` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `xs` | 适用于超小设备，例如宽度<768px的手机。示例类名：`.hidden-xs` | 将渲染具有超小尺寸的元素。例如，在按钮的情况下，字体大小将是12px，行高将是1.5，填充将是1px
    5px。使用：`.btn-xs` |'
- en: '| `sm` | Applies to small devices, such as phablets and tablets with width
    ≥ 768px and < 992pxExample class name: `.hidden-sm` | Will render the element
    with small size. For example, in case of buttons font-size will be 12px, and line-height
    will be 1.5, and padding will be 5px 10px.Use: `.btn-sm` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `sm` | 适用于小设备，例如宽度≥768px且<992px的平板电脑和手机。示例类名：`.hidden-sm` | 将渲染具有小尺寸的元素。例如，在按钮的情况下，字体大小将是12px，行高将是1.5，填充将是5px
    10px。使用：`.btn-sm` |'
- en: '| `md` | Applies to medium size devices, such as desktops with width ≥992px
    and <1200pxExample class name: `.hidden-md` | Default size |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `md` | 适用于中等尺寸设备，例如宽度≥992px且<1200px的桌面。示例类名：`.hidden-md` | 默认尺寸 |'
- en: '| `lg` | Applies to large devices, such as big desktop monitors and TVs with
    ≥1200px widthExample class name: .`hidden-lg` | Will render the element with large
    size. For example, in case of buttons, font-size will be 18px, line-height will
    be 1.33, and padding will be 10px 16px.Use: `.btn-lg` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `lg` | 适用于大设备，例如宽度≥1200px的大桌面显示器和电视。示例类名：`.hidden-lg` | 将渲染具有大尺寸的元素。例如，在按钮的情况下，字体大小将是18px，行高将是1.33，填充将是10px
    16px。使用：`.btn-lg` |'
- en: Controlling display of elements across devices
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制跨设备的元素显示
- en: If you add a `div` element in your HTML code with CSS class as `.hidden-sm`,
    this `div` element will be hidden in all small devices (devices with width ≥768px
    and <992px); and will be displayed in all the other devices (those that do not
    lie within this defined width range). Bootstrap automatically detects the size
    and resolution of the client device, and will render the elements correspondingly.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在你的HTML代码中添加一个带有CSS类`.hidden-sm`的`div`元素，这个`div`元素将在所有小设备（宽度≥768px且<992px的设备）中隐藏；而在所有其他设备（那些不在这个定义的宽度范围内的设备）中显示。Bootstrap会自动检测客户端设备的尺寸和分辨率，并相应地渲染元素。
- en: 'The following table lists these classes and corresponding renditions:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了这些类及其对应的渲染效果：
- en: '| Class name | Extra small devices, such as phones with <768px width | Small
    devices, such as phablets and tablets with width ≥768px and <992px | Medium sized
    devices, such as desktops with width ≥992px and <1200px | Large devices, such
    as big desktop monitors and TVs with ≥1200px width |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 类名 | 超小设备，例如宽度<768px的手机 | 小设备，例如宽度≥768px且<992px的平板电脑和手机 | 中等尺寸设备，例如宽度≥992px且<1200px的桌面
    | 大设备，例如宽度≥1200px的大桌面显示器和电视 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| `.hidden-xs` | ✗ | ✓ | ✓ | ✓ |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `.hidden-xs` | ✗ | ✓ | ✓ | ✓ |'
- en: '| `.hidden-sm` | ✓ | ✗ | ✓ | ✓ |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `.hidden-sm` | ✓ | ✗ | ✓ | ✓ |'
- en: '| `.hidden-md` | ✓ | ✓ | ✗ | ✓ |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `.hidden-md` | ✓ | ✓ | ✗ | ✓ |'
- en: '| `.hidden-lg` | ✓ | ✓ | ✓ | ✗ |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `.hidden-lg` | ✓ | ✓ | ✓ | ✗ |'
- en: 'For example, see the following code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，查看以下代码：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Similarly, if you want that your `div` element should be displayed only in
    case of large devices and not in smaller devices (a very common use case when
    you do not want a heavy media file to be rendered in a mobile phone), you just
    use the class `.visible-lg-block`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果您希望您的`div`元素仅在大型设备上显示，而在较小设备上不显示（当您不希望在手机上渲染大型媒体文件时，这是一个非常常见的用例），您只需使用类`.visible-lg-block`：
- en: '| Class name | Extra small devices, such as phones with <768px width | Small
    devices, such as phablets and tablets with width ≥768px and <992px | Medium size
    devices, such as desktops with width ≥992px and <1200px | Large devices, such
    as big desktop monitors and TVs with ≥1200px width |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 类名 | 非常小的设备，例如宽度小于768px的手机 | 小型设备，例如宽度在768px至992px之间的平板电脑和手机 | 中等尺寸设备，例如宽度在992px至1200px之间的桌面电脑
    | 大型设备，例如宽度大于等于1200px的大桌面显示器和电视 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| `.visible-xs-block`, `.visible-xs-inline`, `.visible-xs-inline-block` | ✓
    | ✗ | ✗ | ✗ |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `.visible-xs-block`, `.visible-xs-inline`, `.visible-xs-inline-block` | ✓
    | ✗ | ✗ | ✗ |'
- en: '| `.visible-sm-block`, `.visible-sm-inline`, `.visible-sm-inline-block` | ✗
    | ✓ | ✗ | ✗ |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `.visible-sm-block`, `.visible-sm-inline`, `.visible-sm-inline-block` | ✗
    | ✓ | ✗ | ✗ |'
- en: '| `.visible-md-block`, `.visible-md-inline`, `.visible-md-inline-block` | ✗
    | ✗ | ✓ | ✗ |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `.visible-md-block`, `.visible-md-inline`, `.visible-md-inline-block` | ✗
    | ✗ | ✓ | ✗ |'
- en: '| `.visible-lg-block`, `.visible-lg-inline`, `.visible-lg-inline-block` | ✗
    | ✗ | ✗ | ✓ |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `.visible-lg-block`, `.visible-lg-inline`, `.visible-lg-inline-block` | ✗
    | ✗ | ✗ | ✓ |'
- en: 'For example, see the following code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，请看以下代码：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Thus you can control the visibility of your HTML elements depending on the target
    device the end user is using with the help of the preceding classes. In the previous
    example, the `div` element will only be displayed in large devices, not in any
    smaller or medium devices.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以通过使用前面的类来控制您的HTML元素的可视性，根据最终用户使用的目标设备。在先前的例子中，`div`元素仅在大型设备上显示，而在任何较小或中等设备上都不会显示。
- en: If you want your HTML element to be shown in both medium and large devices,
    but not in smaller devices, you can add both the classes `.visible-md-block` and
    `.visible-lg-block`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望您的HTML元素在中等和大型设备上显示，但在较小设备上不显示，您可以添加类`.visible-md-block`和`.visible-lg-block`。
- en: Rendering images
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染图片
- en: As you know, controlling the image rendering as per the available space and
    screen size is a challenge, especially in case of responsive web sites.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，根据可用空间和屏幕大小控制图片渲染是一个挑战，尤其是在响应式网站上。
- en: Bootstrap again comes to the rescue – you just add `.img-responsive` class into
    your `IMG HTML` element, and this's all.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap再次提供了解决方案——您只需将`.img-responsive`类添加到您的`IMG HTML`元素中，这就足够了。
- en: Tip
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is important to note that, except the images, most of the other HTML elements
    respond to the target device automatically when you include the Bootstrap CSS
    in your page. However, in case of images, you need to add this class manually.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，除了图片之外，当您在页面中包含Bootstrap CSS时，大多数其他HTML元素会自动响应用户设备。然而，在图片的情况下，您需要手动添加此类。
- en: 'This simply adds the following CSS styles to your image:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是给您的图片添加以下CSS样式：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Thus, the image captures full width as per its container element size, and the
    height of the image is scaled as per its aspect ratio, this happens irrespective
    of the actual size of the image.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，图片将根据其容器元素的宽度全宽显示，图片的高度将根据其宽高比进行缩放，这不受图片实际大小的影响。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As you can see, the responsive image class consumes 100 percent width of the
    container element, it is up to you to structure the parent elements properly.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，响应式图片类消耗了容器元素的100%宽度，至于如何正确地构建父元素结构，则取决于您。
- en: For example, if you fix the width of the parent element with hard coded size,
    then whole purpose of having this `.img-responsive` class is voided. You always
    need to make sure that you are not putting any fix width on any of your HTML elements
    in your page in order to make your web page properly responsive.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您使用硬编码的大小固定父元素的宽度，那么拥有这个`.img-responsive`类的整个目的就被取消了。您始终需要确保您在页面上的HTML元素上没有设置任何固定宽度，以便使您的网页正确响应。
- en: 'There are a few utility classes as well that come handy for styling your image.
    For example, if you want your image to be rendered with soft rounded corners (a
    pattern that is most popular after iOS design), you use the class `.img-rounded`.
    It does nothing but add a 6px border radius to the image:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 也有一些实用类，对于您的图片样式非常有用。例如，如果您希望您的图片以柔和的圆角（iOS设计之后最受欢迎的模式）渲染，您可以使用类`.img-rounded`。它只是给图片添加一个6px的边框半径：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Also if you want your image to be rendered as a circle (or oval, depending
    on the aspect ratio of the image), you use the class `.img-circle`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想将图片渲染为圆形（或椭圆形，取决于图片的宽高比），则使用类`.img-circle`：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, if you want a small outline border for your image, use the class `.img-thumbnail`.
    Thus, to create a rounded responsive image you use both the classes `.img-rounded`
    and `.img-responsive`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您想为图片添加一个小边框，请使用类`.img-thumbnail`。
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: One exception is `.img-thumbnail` class; you need not include the `.img-responsive`
    class if you are using the `.img-thumbnail` class, since most of the responsive
    stylings are included in the thumbnail class itself.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例外是`.img-thumbnail`类；如果您使用`.img-thumbnail`类，则不需要包含`.img-responsive`类，因为大多数响应式样式都包含在缩略图类本身中。
- en: Showing responsive images in a sample application
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在示例应用程序中显示响应式图片
- en: 'Let''s now add some product images in our shopping cart web application. Here''s
    the code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在在我们的购物车Web应用程序中添加一些产品图片。以下是代码：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output will be similar to the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下截图：
- en: '![Showing responsive images in a sample application](img/B03987_03_01.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![在示例应用程序中显示响应式图片](img/B03987_03_01.jpg)'
- en: 'Please note that the following points:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意以下要点：
- en: We have used the `.list-inline` class of UL in order to show the product images
    in a single horizontal line
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用了UL的`.list-inline`类来在单行中显示产品图片
- en: However, in case of mobile phones with very small width, the images will be
    stacked vertically.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，在非常窄的手机屏幕上，图片将会垂直堆叠。
- en: The **You recently visited** caption does not come from the preceding code;
    we will see the full code soon in the coming sections.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**您最近访问**的标题并非来自前面的代码；我们将在接下来的章节中很快看到完整的代码。'
- en: The grid system
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网格系统
- en: One of the basic thumb rule of designing a responsive website is to get rid
    of traditional HTML tables as far as possible and use fluid div elements instead.
    Bootstrap offers very strong framework of grid system with extensive use of `div`
    elements which is dynamically compatible with all the devices and screens currently
    available in the market.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 设计响应式网站的基本规则之一是尽可能去除传统的HTML表格，并使用流体div元素。
- en: 'Basic architecture of the grid system of Bootstrap is that the screen is horizontally
    divided into maximum 12 columns (logically). And Bootstrap has provided classes
    to create each combination of columns – for each device sizes. The following matrix
    illustrates this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap网格系统的基本架构是将屏幕水平划分为最多12列（逻辑上）。Bootstrap提供了类来创建每种设备尺寸的列组合 - 如下矩阵所示：
- en: '| Class Names | Description |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 类名 | 描述 |'
- en: '| --- | --- |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| .col-xs-1, .col-sm-1, .col-md-1, .col-lg-1 | Classes to use to consume one
    column in the corresponding device size. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| .col-xs-1, .col-sm-1, .col-md-1, .col-lg-1 | 用于在相应设备尺寸中占用一列的类。|'
- en: '| .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2 | Classes to use to consume two
    columns in the corresponding device size. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2 | 用于在相应设备尺寸中占用两列的类。|'
- en: '| .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3 | Classes to use to consume three
    columns in the corresponding device size. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3 | 用于在相应设备尺寸中占用三列的类。|'
- en: '| .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4 | Classes to use to consume four
    columns in the corresponding device size. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4 | 用于在相应设备尺寸中占用四列的类。|'
- en: '| .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5 | Classes to use to consume five
    columns in the corresponding device size. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5 | 用于在相应设备尺寸中占用五列的类。|'
- en: '| .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6 | Classes to use to consume six
    columns in the corresponding device size. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6 | 用于在相应设备尺寸中占用六列的类。|'
- en: '| .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7 | Classes to use to consume seven
    columns in the corresponding device size. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7 | 用于在相应设备尺寸中占用七列的类。|'
- en: '| .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8 | Classes to use to consume eight
    columns in the corresponding device size. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8 | 用于在相应设备尺寸中占用八列的类。|'
- en: '| .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9 | Classes to use to consume nine
    columns in the corresponding device size. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9 | 用于在相应设备尺寸中占用九列的类。|'
- en: '| .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10 | Classes to use to consume
    ten columns in the corresponding device size. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10 | 在相应设备大小中用于占用十个列的类。|'
- en: '| .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11 | Classes to use to consume
    eleven columns in the corresponding device size. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11 | 在相应设备大小中用于占用十一个列的类。|'
- en: '| .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 | Classes to use to consume
    all twelve columns in the corresponding device size. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 | 在相应设备大小中用于占用所有十二列的类。|'
- en: 'We will take a few example scenarios to make this clear. In our first scenario,
    suppose we want to create three equal columns – irrespective of all device sizes.
    The code for this is as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将举几个示例场景来说明这一点。在我们的第一个场景中，假设我们想要创建三个等宽的列——无论所有设备大小如何。这个代码如下：
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is the output (as seen in all the devices):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是输出（在所有设备上可见）：
- en: '![The grid system](img/B03987_03_02.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![网格系统](img/B03987_03_02.jpg)'
- en: 'In our second scenario, suppose we want to display only first two columns in
    smaller screens, third column will not be displayed and in bigger screens we retain
    the same design. Our code is as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第二个场景中，假设我们只想在较小屏幕上显示前两列，第三列将不会显示，而在较大屏幕上我们保持相同的设计。我们的代码如下：
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'So the output is as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，输出如下：
- en: '![The grid system](img/B03987_03_03.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![网格系统](img/B03987_03_03.jpg)'
- en: 'In the third scenario, suppose in smaller screens we need all the columns to
    be vertical. In medium screens first two columns should consume more space while
    in large screens they should be equal. Here is our code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三个场景中，假设在较小屏幕上我们需要所有列都垂直排列。在中等屏幕上，前两列应占用更多空间，而在大屏幕上它们应该是相等的。以下是我们的代码：
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And the output is as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![The grid system](img/B03987_03_04.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![网格系统](img/B03987_03_04.jpg)'
- en: As you can see, the width (and visibility) of the three columns are being automatically
    controlled by the classes as per the target device and screen size.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，三列的宽度（和可见性）正由类根据目标设备和屏幕大小自动控制。
- en: To create a placeholder of one column width, you use the `.col-*-1` class, for
    two columns width, you use the `.col-*-2` class; and so on. For a placeholder
    which consumes all 12 columns of space, you use `.col-*-12` class. Here `*` stands
    for the corresponding device size you are targeting (such as `xs`, `sm`, `md`
    and `lg`).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个一列宽度的占位符，您使用`.col-*-1`类；对于两列宽度，您使用`.col-*-2`类；依此类推。对于一个占用所有12列空间的占位符，您使用`.col-*-12`类。这里的`*`代表您要针对的相应设备大小（如`xs`、`sm`、`md`和`lg`）。
- en: One of the most important points here is that the total size of the columns
    must always be 12 – if it is less than 12, some space will be left unused, if
    it is more than 12, the last placeholder will be wrapped in the next line.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最重要的一个点就是列的总大小必须始终为12——如果小于12，则会有一些空间未被使用，如果大于12，则最后一个占位符将被换行。
- en: This is why in the first scenario, we have used classes with column size of
    four for all the device sizes as in `col-xs-4`, `col-sm-4`, and so on. Since we
    have three placeholders in a row, each placeholder becomes of size `4` (*3X4 =
    12*).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是为什么在第一个场景中，我们为所有设备大小使用了具有四列大小的类，如`col-xs-4`、`col-sm-4`等。由于我们有三个占位符在一行中，每个占位符的大小变为`4`（3X4=12）。
- en: In the second scenario, for extra small devices we have made first two placeholders
    each with `col-xs-6` while the third placeholder is hidden (*6+6 = 12*).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个场景中，对于超小设备，我们使前两个占位符每个都使用`col-xs-6`，而第三个占位符被隐藏（6+6=12）。
- en: In case of the third scenario, we have made the first placeholder spanning across
    the full width for smallest devices (`col-xs-12`). For medium devices, we have
    made first two columns consuming most space (*5+5+2 = 12*). And for large devices,
    all placeholders are equal.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三个场景中，我们使第一个占位符在最小设备上跨越整个宽度（`col-xs-12`）。对于中等设备，我们使前两列占用大部分空间（5+5+2=12）。而对于大设备，所有占位符都是相等的。
- en: Thus you can see, Bootstrap's grid system enables you to create tabular layouts
    for all the device sizes quite effortlessly, and without any extra complex CSS/JavaScript
    coding.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以看到，Bootstrap的网格系统使您能够轻松地为所有设备大小创建表格布局，而且无需任何额外的复杂CSS/JavaScript编码。
- en: Constructing data entry forms
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建数据输入表单
- en: '**Forms** are integral parts of a web page – whenever you need to capture any
    information from the user you need to create a web form in your page. Bootstrap
    offers a variety of ways to design and create HTML forms for both mobile devices
    and desktops.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**表单**是网页的组成部分——无论何时您需要从用户那里捕获任何信息，您都需要在页面上创建一个网络表单。Bootstrap 提供了多种方式来设计和创建适用于移动设备和桌面的
    HTML 表单。'
- en: 'Let''s create a *Contact Us* form for our web application. Here is our code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的网络应用程序创建一个 *联系我们* 表单。以下是我们的代码：
- en: '[PRE15]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here is what the form would look like:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是表单可能的样子：
- en: '![Constructing data entry forms](img/B03987_03_05.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![构建数据输入表单](img/B03987_03_05.jpg)'
- en: Making the form horizontal
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使表单水平排列
- en: 'Suppose that now we want to show the labels horizontally alongside the controls.
    The code to do this is as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 假设现在我们想要将标签水平地与控件并排显示。执行此操作的代码如下：
- en: '[PRE16]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output is as shown here:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下所示：
- en: '![Making the form horizontal](img/B03987_03_06.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![使表单水平排列](img/B03987_03_06.jpg)'
- en: Finalizing the Contact Us page
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成联系我们页面
- en: 'Let''s beautify the form a little bit more by adding some contextual icons
    for each of the text controls. We will create a full *Contact Us* page in our
    application. Here is the code:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过为每个文本控件添加一些上下文图标来进一步美化表单。我们将在应用程序中创建一个完整的 *联系我们* 页面。以下是代码：
- en: '[PRE17]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following is how the page would look:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是页面可能的样子：
- en: '![Finalizing the Contact Us page](img/B03987_03_07.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![完成联系我们页面](img/B03987_03_07.jpg)'
- en: 'Let''s now look at what has happened behind the scenes:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看幕后发生了什么：
- en: The `.form-group` class is used to encapsulate multiple controls in a group
    – just as we have done for labels and corresponding text boxes.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.form-group` 类用于封装组内的多个控件——就像我们对标签和相应的文本框所做的那样。'
- en: The `.control-label` and `.form-control` classes are used to style the labels
    and form elements respectively.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.control-label` 和 `.form-control` 类分别用于设置标签和表单元素的样式。'
- en: If you want to create a form with horizontal labels and controls – use the `.form-horizontal`
    class and place the labels and controls as grid columns. The `.control-group`
    class will act as each row in the form.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想要创建一个具有水平标签和控件的表单——请使用 `.form-horizontal` 类，并将标签和控件放置为网格列。`.control-group`
    类将作为表单中的每一行。
- en: Using the `.input-group` class you can associate multiple controls in adjacently.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `.input-group` 类可以将多个控件关联在一起。
- en: You can create inline forms using the `.form-inline` class, instead of the `form-horizontal`
    class.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用 `.form-inline` 类创建内联表单，而不是使用 `form-horizontal` 类。
- en: You can use `disabled` or `readonly` state for the controls – Bootstrap will
    associate necessary styles automatically, however, all the controls must have
    `.form-control` class added.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以为控件使用 `disabled` 或 `readonly` 状态——Bootstrap 将自动关联必要的样式，但是，所有控件都必须添加 `.form-control`
    类。
- en: Use `.has-success`, `.has-warning`, `.has-error` classes to reflect various
    validation states.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `.has-success`、`.has-warning`、`.has-error` 类来反映各种验证状态。
- en: In order to control the sizes you can use `.input-lg`, `.input-sm` classes.
    For controlling the size of a group you can use `.form-group-lg` or `.form-group-sm`
    classes.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了控制大小，您可以使用 `.input-lg`、`.input-sm` 类。为了控制一组的大小，您可以使用 `.form-group-lg` 或 `.form-group-sm`
    类。
- en: For showing up any help texts, you can use `.help-block` class in a separate
    label. This will show the texts in a new line.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了显示任何帮助文本，您可以在单独的标签中使用 `.help-block` 类。这将使文本在新的一行中显示。
- en: We have styled our button with `.btn-primary` class. Apart from this the other
    available classes are `.btn-success`, `.btn-warning`, `.btn-info`, `.btn-danger`
    and `.btn-link`.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 `.btn-primary` 类来设置按钮样式。除此之外，其他可用的类包括 `.btn-success`、`.btn-warning`、`.btn-info`、`.btn-danger`
    和 `.btn-link`。
- en: We have used `Glyphicons` to beautify the form. This concept is detailed in
    later chapters.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经使用 `Glyphicons` 来美化表单。这个概念在后面的章节中会详细介绍。
- en: Other utility classes
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他实用类
- en: 'Bootstrap offers a number of other utility CSS classes that you can use for
    a number of occasions and purposes:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 提供了多种其他实用 CSS 类，您可以在多种场合和目的中使用：
- en: For web sites that should follow the Web Accessibility standards ([http://www.w3.org/WAI/](http://www.w3.org/WAI/)),
    contents must be compatible with screen readers and other equivalent devices.
    For that, you use `.sr-only` and `.sr-only-focusable` classes. This would ensure
    that the content is not rendered for normal people and screens; however, it will
    be spelt out by screen readers.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于应遵循 Web 可访问性标准的网站（[http://www.w3.org/WAI/](http://www.w3.org/WAI/)），内容必须与屏幕阅读器和其他等效设备兼容。为此，您使用
    `.sr-only` 和 `.sr-only-focusable` 类。这将确保内容对于普通人和屏幕不会被渲染；然而，它将被屏幕阅读器读出。
- en: For showing or hiding a content you should use `.show` and `.hide` classes respectively.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于显示或隐藏内容，您应该分别使用 `.show` 和 `.hide` 类。
- en: For horizontal alignment of content, available classes are `.pull-left` and
    `.pull-right`.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于内容的水平对齐，可用的类有 `.pull-left` 和 `.pull-right`。
- en: Bootstrap provides five different color classes for foreground – `.text-primary`,
    `.text-danger`, `.text-warning`, `.text-info` and `.text-success`. Similarly,
    for background you have `.bg-primary`, `.bg-danger`, `.bg-warning`, `.bg-info`
    and `.bg-success`.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap 提供了五种不同的前景颜色类 – `.text-primary`、`.text-danger`、`.text-warning`、`.text-info`
    和 `.text-success`。同样地，对于背景，您有 `.bg-primary`、`.bg-danger`、`.bg-warning`、`.bg-info`
    和 `.bg-success`。
- en: For creating tables, you would use a standard `<table>` tag; however, along
    with this we should also use `.table` class for the element. For rendering borders
    around the tables and cells, the class is `.table-bordered`; and for displaying
    alternate colored rows you should use `.table-striped` class. Similarly, for changing
    colors of the rows while mouse hovering, you would use the `.table-hover` class.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于创建表格，您会使用标准的 `<table>` 标签；然而，除了这个之外，我们还应该使用 `.table` 类来设置元素。为了在表格和单元格周围渲染边框，使用的是
    `.table-bordered` 类；而对于显示交替颜色的行，您应该使用 `.table-striped` 类。同样地，为了在鼠标悬停时改变行的颜色，您会使用
    `.table-hover` 类。
- en: Importantly, in order to create responsive tables, you should use the `.table-responsive`
    class. Please note that this class only affects the display on devices less than
    768px, for larger devices there would be no effect.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重要的是，为了创建响应式表格，您应该使用 `.table-responsive` 类。请注意，这个类只影响小于 768px 的设备上的显示，对于更大的设备则没有效果。
- en: Encapsulating everything
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 封装一切
- en: We now rewrite our sample application home page using the classes and styles
    we have discussed in this chapter.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在使用本章讨论的类和样式重写我们的示例应用程序主页。
- en: Note
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The full source code can be downloaded from Packt Publishing website.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的源代码可以从 Packt Publishing 网站下载。
- en: 'The page now looks like this on a desktop:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在桌面上，页面现在看起来是这样的：
- en: '![Encapsulating everything](img/B03987_03_08.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![封装一切](img/B03987_03_08.jpg)'
- en: 'And in case of devices with smaller screen size the page is look as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 对于屏幕尺寸较小的设备，页面看起来如下：
- en: '![Encapsulating everything](img/B03987_03_09.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![封装一切](img/B03987_03_09.jpg)'
- en: Summary
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned about the CSS classes and features offered
    in the Bootstrap framework. Of course this does not cover all the classes and
    functionalities that Bootstrap offers in terms of CSS, one chapter may not be
    enough to cover all the entire range of capabilities that Bootstrap provides.
    However, we have still covered almost all the major features; and will carry on
    with the other functionalities in next chapters. We have also added a new page
    in our sample application as *Contact Us* and restyled our home page with some
    new layouts and pretty sections.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Bootstrap 框架提供的 CSS 类和功能。当然，这并不涵盖 Bootstrap 在 CSS 方面提供的所有类和功能，一个章节可能不足以涵盖
    Bootstrap 提供的所有功能范围。然而，我们仍然涵盖了几乎所有的主要功能；接下来章节中我们将继续介绍其他功能。我们还在我们的示例应用程序中添加了一个新的页面，即“联系我们”，并用一些新的布局和漂亮的区域重新设计了主页。
- en: In the next chapter we will learn about the packaged components that come with
    Bootstrap.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习 Bootstrap 一起提供的打包组件。
