- en: Chapter 3. Creating Responsive Layouts Using Bootstrap CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basic idea and thumb rule in working with Bootstrap is that you shouldn't
    create your own CSS classes and styles; rather, you should always utilize and
    adapt the classes provided by the framework. This way you will be able to leverage
    the full power and potential offered by Bootstrap. For this, you must be aware
    of all the classes supplied by the framework. Of course, you can update and extend
    the classes as per your needs and branding; we will see how to do this later.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will go through most of the major CSS classes that Bootstrap
    is equipped with. We will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The Bootstrap HTML file structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic HTML elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The details of responsive classes in Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the all-important grid system in Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building data-entry forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic HTML structure for Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will explore the basic HTML file structure when you will
    use Bootstrap as the front-end framework.
  prefs: []
  type: TYPE_NORMAL
- en: The head section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just to recap, your HTML file must be marked as HTML5 `doctype`. Thus you always
    include this at the very beginning of your file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Second important thing is that you must include `meta viewport` tag in your
    head section. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, you would of course include the Bootstrap CSS and JS files. Thus,
    the minimalistic head section of your HTML file would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The body section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All of your HTML body section must be positioned inside a `div` element with
    class attached as `container` or `container-fluid`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `container` class ensures that your page will be rendered as a responsive
    fixed width style. While, the `container-fluid` class renders your page as a responsive
    full-width design. Hence, if you want your page to be of fixed width in the middle
    of the screen irrespective of the width of the browser window, then use `container`
    class. On the other hand, if you want that your page always consumes the full
    screen, you need to use `container-fluid` class instead. The following diagrams
    illustrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The body section](img/B03987_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Basic HTML elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you might expect, all the standard HTML5 elements are considered and styled
    in Bootstrap. Thus you would simply use any basic HTML elements and these will
    be rendered as Bootstrap specific styles and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, all heading tags from H1 to H6 can be used as they are. You simply
    write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Interestingly enough, if you want to use the same heading styles in any of your
    other elements, you can simply use the provided `.h1 CSS` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the following standard HTML5 elements are covered in Bootstrap''s responsive
    styling set:'
  prefs: []
  type: TYPE_NORMAL
- en: Paragraph – `<p>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlight – `<mark>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleted text – `<del>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserted text – `<ins>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strikethrough – `<s>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Underline – `<u>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bold – `<strong>` or `<b>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Italic – `<em>` or `<i>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abbreviation – `<abbr>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Address – `<address>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockquote – `<blockquote>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lists – `<ul>`, `<ol>`, `<li>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description lists – `<dl>`, `<dd>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Codes – `<code>`, `<samp>`, `<kbd>`, `<var>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tables – `<table>`, `<thead>`, `<tbody>`, `<tr>`, `<td>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form elements – `<form>`, `<label>`, `<text>`, `<textarea>`, `<password>`, `<datetime>`,
    `<number>`, `<email>`, `<date>`, `<month>`, `<week>`, `<time>`, `<tel>`, `<color>`,
    `<url>`, `<search>`, `<input>`, `<button>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsive classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the main focus of Bootstrap is to create mobile optimized website with
    a minimal effort, the framework offers a number of classes to control your desktop
    and mobile version of the website.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Across all the packaged classes and styles Bootstrap uses four different markers
    for controlling and mentioning element and device sizes. The following table lists
    and details these four markers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Marker name | Target device / screen size | Element |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `xs` | Applies to extra small devices, such as phones with < 768px width.Example
    class name: `.hidden-xs` | Will render the element with extra small size.For example,
    in case of buttons, font-size will be 12px, and line-height will be 1.5, padding
    will be 1px 5px.Use: `.btn-xs` |'
  prefs: []
  type: TYPE_TB
- en: '| `sm` | Applies to small devices, such as phablets and tablets with width
    ≥ 768px and < 992pxExample class name: `.hidden-sm` | Will render the element
    with small size. For example, in case of buttons font-size will be 12px, and line-height
    will be 1.5, and padding will be 5px 10px.Use: `.btn-sm` |'
  prefs: []
  type: TYPE_TB
- en: '| `md` | Applies to medium size devices, such as desktops with width ≥992px
    and <1200pxExample class name: `.hidden-md` | Default size |'
  prefs: []
  type: TYPE_TB
- en: '| `lg` | Applies to large devices, such as big desktop monitors and TVs with
    ≥1200px widthExample class name: .`hidden-lg` | Will render the element with large
    size. For example, in case of buttons, font-size will be 18px, line-height will
    be 1.33, and padding will be 10px 16px.Use: `.btn-lg` |'
  prefs: []
  type: TYPE_TB
- en: Controlling display of elements across devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you add a `div` element in your HTML code with CSS class as `.hidden-sm`,
    this `div` element will be hidden in all small devices (devices with width ≥768px
    and <992px); and will be displayed in all the other devices (those that do not
    lie within this defined width range). Bootstrap automatically detects the size
    and resolution of the client device, and will render the elements correspondingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists these classes and corresponding renditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Class name | Extra small devices, such as phones with <768px width | Small
    devices, such as phablets and tablets with width ≥768px and <992px | Medium sized
    devices, such as desktops with width ≥992px and <1200px | Large devices, such
    as big desktop monitors and TVs with ≥1200px width |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `.hidden-xs` | ✗ | ✓ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `.hidden-sm` | ✓ | ✗ | ✓ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `.hidden-md` | ✓ | ✓ | ✗ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: '| `.hidden-lg` | ✓ | ✓ | ✓ | ✗ |'
  prefs: []
  type: TYPE_TB
- en: 'For example, see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, if you want that your `div` element should be displayed only in
    case of large devices and not in smaller devices (a very common use case when
    you do not want a heavy media file to be rendered in a mobile phone), you just
    use the class `.visible-lg-block`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Class name | Extra small devices, such as phones with <768px width | Small
    devices, such as phablets and tablets with width ≥768px and <992px | Medium size
    devices, such as desktops with width ≥992px and <1200px | Large devices, such
    as big desktop monitors and TVs with ≥1200px width |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `.visible-xs-block`, `.visible-xs-inline`, `.visible-xs-inline-block` | ✓
    | ✗ | ✗ | ✗ |'
  prefs: []
  type: TYPE_TB
- en: '| `.visible-sm-block`, `.visible-sm-inline`, `.visible-sm-inline-block` | ✗
    | ✓ | ✗ | ✗ |'
  prefs: []
  type: TYPE_TB
- en: '| `.visible-md-block`, `.visible-md-inline`, `.visible-md-inline-block` | ✗
    | ✗ | ✓ | ✗ |'
  prefs: []
  type: TYPE_TB
- en: '| `.visible-lg-block`, `.visible-lg-inline`, `.visible-lg-inline-block` | ✗
    | ✗ | ✗ | ✓ |'
  prefs: []
  type: TYPE_TB
- en: 'For example, see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Thus you can control the visibility of your HTML elements depending on the target
    device the end user is using with the help of the preceding classes. In the previous
    example, the `div` element will only be displayed in large devices, not in any
    smaller or medium devices.
  prefs: []
  type: TYPE_NORMAL
- en: If you want your HTML element to be shown in both medium and large devices,
    but not in smaller devices, you can add both the classes `.visible-md-block` and
    `.visible-lg-block`.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know, controlling the image rendering as per the available space and
    screen size is a challenge, especially in case of responsive web sites.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap again comes to the rescue – you just add `.img-responsive` class into
    your `IMG HTML` element, and this's all.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to note that, except the images, most of the other HTML elements
    respond to the target device automatically when you include the Bootstrap CSS
    in your page. However, in case of images, you need to add this class manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'This simply adds the following CSS styles to your image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Thus, the image captures full width as per its container element size, and the
    height of the image is scaled as per its aspect ratio, this happens irrespective
    of the actual size of the image.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you can see, the responsive image class consumes 100 percent width of the
    container element, it is up to you to structure the parent elements properly.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you fix the width of the parent element with hard coded size,
    then whole purpose of having this `.img-responsive` class is voided. You always
    need to make sure that you are not putting any fix width on any of your HTML elements
    in your page in order to make your web page properly responsive.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few utility classes as well that come handy for styling your image.
    For example, if you want your image to be rendered with soft rounded corners (a
    pattern that is most popular after iOS design), you use the class `.img-rounded`.
    It does nothing but add a 6px border radius to the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Also if you want your image to be rendered as a circle (or oval, depending
    on the aspect ratio of the image), you use the class `.img-circle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, if you want a small outline border for your image, use the class `.img-thumbnail`.
    Thus, to create a rounded responsive image you use both the classes `.img-rounded`
    and `.img-responsive`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One exception is `.img-thumbnail` class; you need not include the `.img-responsive`
    class if you are using the `.img-thumbnail` class, since most of the responsive
    stylings are included in the thumbnail class itself.
  prefs: []
  type: TYPE_NORMAL
- en: Showing responsive images in a sample application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s now add some product images in our shopping cart web application. Here''s
    the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing responsive images in a sample application](img/B03987_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Please note that the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: We have used the `.list-inline` class of UL in order to show the product images
    in a single horizontal line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, in case of mobile phones with very small width, the images will be
    stacked vertically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **You recently visited** caption does not come from the preceding code;
    we will see the full code soon in the coming sections.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The grid system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the basic thumb rule of designing a responsive website is to get rid
    of traditional HTML tables as far as possible and use fluid div elements instead.
    Bootstrap offers very strong framework of grid system with extensive use of `div`
    elements which is dynamically compatible with all the devices and screens currently
    available in the market.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic architecture of the grid system of Bootstrap is that the screen is horizontally
    divided into maximum 12 columns (logically). And Bootstrap has provided classes
    to create each combination of columns – for each device sizes. The following matrix
    illustrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Class Names | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| .col-xs-1, .col-sm-1, .col-md-1, .col-lg-1 | Classes to use to consume one
    column in the corresponding device size. |'
  prefs: []
  type: TYPE_TB
- en: '| .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2 | Classes to use to consume two
    columns in the corresponding device size. |'
  prefs: []
  type: TYPE_TB
- en: '| .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3 | Classes to use to consume three
    columns in the corresponding device size. |'
  prefs: []
  type: TYPE_TB
- en: '| .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4 | Classes to use to consume four
    columns in the corresponding device size. |'
  prefs: []
  type: TYPE_TB
- en: '| .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5 | Classes to use to consume five
    columns in the corresponding device size. |'
  prefs: []
  type: TYPE_TB
- en: '| .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6 | Classes to use to consume six
    columns in the corresponding device size. |'
  prefs: []
  type: TYPE_TB
- en: '| .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7 | Classes to use to consume seven
    columns in the corresponding device size. |'
  prefs: []
  type: TYPE_TB
- en: '| .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8 | Classes to use to consume eight
    columns in the corresponding device size. |'
  prefs: []
  type: TYPE_TB
- en: '| .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9 | Classes to use to consume nine
    columns in the corresponding device size. |'
  prefs: []
  type: TYPE_TB
- en: '| .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10 | Classes to use to consume
    ten columns in the corresponding device size. |'
  prefs: []
  type: TYPE_TB
- en: '| .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11 | Classes to use to consume
    eleven columns in the corresponding device size. |'
  prefs: []
  type: TYPE_TB
- en: '| .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 | Classes to use to consume
    all twelve columns in the corresponding device size. |'
  prefs: []
  type: TYPE_TB
- en: 'We will take a few example scenarios to make this clear. In our first scenario,
    suppose we want to create three equal columns – irrespective of all device sizes.
    The code for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output (as seen in all the devices):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The grid system](img/B03987_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In our second scenario, suppose we want to display only first two columns in
    smaller screens, third column will not be displayed and in bigger screens we retain
    the same design. Our code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'So the output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The grid system](img/B03987_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the third scenario, suppose in smaller screens we need all the columns to
    be vertical. In medium screens first two columns should consume more space while
    in large screens they should be equal. Here is our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The grid system](img/B03987_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the width (and visibility) of the three columns are being automatically
    controlled by the classes as per the target device and screen size.
  prefs: []
  type: TYPE_NORMAL
- en: To create a placeholder of one column width, you use the `.col-*-1` class, for
    two columns width, you use the `.col-*-2` class; and so on. For a placeholder
    which consumes all 12 columns of space, you use `.col-*-12` class. Here `*` stands
    for the corresponding device size you are targeting (such as `xs`, `sm`, `md`
    and `lg`).
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important points here is that the total size of the columns
    must always be 12 – if it is less than 12, some space will be left unused, if
    it is more than 12, the last placeholder will be wrapped in the next line.
  prefs: []
  type: TYPE_NORMAL
- en: This is why in the first scenario, we have used classes with column size of
    four for all the device sizes as in `col-xs-4`, `col-sm-4`, and so on. Since we
    have three placeholders in a row, each placeholder becomes of size `4` (*3X4 =
    12*).
  prefs: []
  type: TYPE_NORMAL
- en: In the second scenario, for extra small devices we have made first two placeholders
    each with `col-xs-6` while the third placeholder is hidden (*6+6 = 12*).
  prefs: []
  type: TYPE_NORMAL
- en: In case of the third scenario, we have made the first placeholder spanning across
    the full width for smallest devices (`col-xs-12`). For medium devices, we have
    made first two columns consuming most space (*5+5+2 = 12*). And for large devices,
    all placeholders are equal.
  prefs: []
  type: TYPE_NORMAL
- en: Thus you can see, Bootstrap's grid system enables you to create tabular layouts
    for all the device sizes quite effortlessly, and without any extra complex CSS/JavaScript
    coding.
  prefs: []
  type: TYPE_NORMAL
- en: Constructing data entry forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Forms** are integral parts of a web page – whenever you need to capture any
    information from the user you need to create a web form in your page. Bootstrap
    offers a variety of ways to design and create HTML forms for both mobile devices
    and desktops.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a *Contact Us* form for our web application. Here is our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what the form would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Constructing data entry forms](img/B03987_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Making the form horizontal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose that now we want to show the labels horizontally alongside the controls.
    The code to do this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making the form horizontal](img/B03987_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finalizing the Contact Us page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s beautify the form a little bit more by adding some contextual icons
    for each of the text controls. We will create a full *Contact Us* page in our
    application. Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is how the page would look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Finalizing the Contact Us page](img/B03987_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now look at what has happened behind the scenes:'
  prefs: []
  type: TYPE_NORMAL
- en: The `.form-group` class is used to encapsulate multiple controls in a group
    – just as we have done for labels and corresponding text boxes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.control-label` and `.form-control` classes are used to style the labels
    and form elements respectively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to create a form with horizontal labels and controls – use the `.form-horizontal`
    class and place the labels and controls as grid columns. The `.control-group`
    class will act as each row in the form.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `.input-group` class you can associate multiple controls in adjacently.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can create inline forms using the `.form-inline` class, instead of the `form-horizontal`
    class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use `disabled` or `readonly` state for the controls – Bootstrap will
    associate necessary styles automatically, however, all the controls must have
    `.form-control` class added.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `.has-success`, `.has-warning`, `.has-error` classes to reflect various
    validation states.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to control the sizes you can use `.input-lg`, `.input-sm` classes.
    For controlling the size of a group you can use `.form-group-lg` or `.form-group-sm`
    classes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For showing up any help texts, you can use `.help-block` class in a separate
    label. This will show the texts in a new line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have styled our button with `.btn-primary` class. Apart from this the other
    available classes are `.btn-success`, `.btn-warning`, `.btn-info`, `.btn-danger`
    and `.btn-link`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have used `Glyphicons` to beautify the form. This concept is detailed in
    later chapters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other utility classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bootstrap offers a number of other utility CSS classes that you can use for
    a number of occasions and purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: For web sites that should follow the Web Accessibility standards ([http://www.w3.org/WAI/](http://www.w3.org/WAI/)),
    contents must be compatible with screen readers and other equivalent devices.
    For that, you use `.sr-only` and `.sr-only-focusable` classes. This would ensure
    that the content is not rendered for normal people and screens; however, it will
    be spelt out by screen readers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For showing or hiding a content you should use `.show` and `.hide` classes respectively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For horizontal alignment of content, available classes are `.pull-left` and
    `.pull-right`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap provides five different color classes for foreground – `.text-primary`,
    `.text-danger`, `.text-warning`, `.text-info` and `.text-success`. Similarly,
    for background you have `.bg-primary`, `.bg-danger`, `.bg-warning`, `.bg-info`
    and `.bg-success`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For creating tables, you would use a standard `<table>` tag; however, along
    with this we should also use `.table` class for the element. For rendering borders
    around the tables and cells, the class is `.table-bordered`; and for displaying
    alternate colored rows you should use `.table-striped` class. Similarly, for changing
    colors of the rows while mouse hovering, you would use the `.table-hover` class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importantly, in order to create responsive tables, you should use the `.table-responsive`
    class. Please note that this class only affects the display on devices less than
    768px, for larger devices there would be no effect.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encapsulating everything
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now rewrite our sample application home page using the classes and styles
    we have discussed in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The full source code can be downloaded from Packt Publishing website.
  prefs: []
  type: TYPE_NORMAL
- en: 'The page now looks like this on a desktop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Encapsulating everything](img/B03987_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And in case of devices with smaller screen size the page is look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Encapsulating everything](img/B03987_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about the CSS classes and features offered
    in the Bootstrap framework. Of course this does not cover all the classes and
    functionalities that Bootstrap offers in terms of CSS, one chapter may not be
    enough to cover all the entire range of capabilities that Bootstrap provides.
    However, we have still covered almost all the major features; and will carry on
    with the other functionalities in next chapters. We have also added a new page
    in our sample application as *Contact Us* and restyled our home page with some
    new layouts and pretty sections.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will learn about the packaged components that come with
    Bootstrap.
  prefs: []
  type: TYPE_NORMAL
