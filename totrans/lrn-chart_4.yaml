- en: Creating Charts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建图表
- en: This chapter covers several charts that can be created with Chart.js to efficiently
    communicate quantitative information and relationships. The choice of a chart
    depends on the type of data, how each set of values is related to one another,
    and what kind of relationships you want to show. In the previous chapter, we learned
    how to efficiently display data in bar charts and compare quantitative information
    related to different categories. In this chapter, you will create line and radar
    charts to compare sequences of one-dimensional data, pie and doughnut charts to
    compare proportions, scatterplots and bubble charts to represent two or more dimensions,
    and polar area charts to display quantitative data in a radial grid.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了使用 Chart.js 创建的几个图表，这些图表可以有效地传达定量信息和关系。图表的选择取决于数据的类型，每一组值之间的关系，以及你想要展示的关系类型。在前一章中，我们学习了如何高效地在柱状图中展示数据，并比较不同类别相关的定量信息。在本章中，你将创建折线图和雷达图来比较一维数据的序列，饼图和环形图来比较比例，散点图和气泡图来表示两个或更多维度，以及极坐标图来在径向网格中显示定量数据。
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解以下主题：
- en: Line and area charts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 折线和面积图
- en: Radar and polar area charts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 雷达图和极坐标图
- en: Pie and doughnut charts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 饼图和环形图
- en: Scatterplots and bubble charts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 散点图和气泡图
- en: Line and area charts
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 折线和面积图
- en: Line charts are used to display a correlation between two sets of data, where
    one of the sets should contain categorical or ordered data (ascending or descending).
    The most common application of a line chart is th*e* time series*,* where the
    ordered set consists of instants of time. If arbitrary categories are used, it
    should be possible to establish some kind of connected sequence with them (for
    example, an ordered sequence of steps).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 折线图用于显示两组数据之间的相关性，其中一组应包含分类或有序数据（升序或降序）。折线图最常见应用是时间序列，其中有序集由时间点组成。如果使用任意类别，应能够与它们建立某种类型的连接序列（例如，步骤的有序序列）。
- en: Line charts display estimates. The points that correlate the datasets are connected
    with straight or curved lines that represent estimated values. Line charts can
    be used to predict intermediate values and reveal trends.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 折线图显示估计值。将数据集相关联的点通过代表估计值的直线或曲线连接起来。折线图可以用来预测中间值并揭示趋势。
- en: Creating a simple line chart
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建简单的折线图
- en: 'Just like the bar chart, you need to load the Chart.js JavaScript library,
    place a `<canvas>` object somewhere in the `<body>` of your page, and create a
    new chart referring to the ID of the canvas, and an object with the chart data.
    The `chart` object should specify `line` as the chart type. The following code
    is the minimum you need to create a line chart with the global defaults provided
    by Chart.js:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 就像柱状图一样，你需要加载 Chart.js JavaScript 库，在页面的 `<body>` 中放置一个 `<canvas>` 对象，并创建一个新的图表，引用画布的
    ID 和包含图表数据的对象。`chart` 对象应指定 `line` 作为图表类型。以下代码是创建折线图所需的最小代码，使用 Chart.js 提供的全局默认值：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This data contains average global temperatures for 2016, obtained from NASA.
    The result is shown as follows. As you can see, the default line chart has a gray
    line and a gray fill. You can change these defaults using the *options* or *dataset*
    configurations. The full code is in `LineArea/line-1.html`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这份数据包含来自 NASA 的 2016 年全球平均温度，结果如下所示。正如你所见，默认的折线图有灰色线条和灰色填充。你可以使用 *options* 或
    *dataset* 配置来更改这些默认值。完整代码在 `LineArea/line-1.html`：
- en: '![](img/d50c0ef7-cc8f-43d0-a3b7-4854e0925677.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d50c0ef7-cc8f-43d0-a3b7-4854e0925677.png)'
- en: 'Simple line chart with default Chart.js properties showing average global temperatures
    in 2016 (code: *LineArea/line-1.html)*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的折线图，显示默认的 Chart.js 属性，2016 年全球平均温度（代码：*LineArea/line-1.html)*
- en: Dataset configuration
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据集配置
- en: 'Dataset-specific options can be applied to control attributes, such as color
    and width of each line. Adding a `borderColor` attribute to the dataset will set
    the color of the line (and legend box), as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可以应用特定于数据集的选项来控制属性，例如每条线的颜色和宽度。向数据集添加 `borderColor` 属性将设置线的颜色（以及图例框），如下所示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following chart shows the effect of setting `borderColor` and `backgroundColor`
    for a dataset. This configuration only affects one dataset. You can also configure
    properties that affect all datasets. In this example, the legend was also removed
    using the options configuration (explained in a separate section). You can see
    the full code in `LineArea/line-2.html`, as shown in the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了为数据集设置 `borderColor` 和 `backgroundColor` 的效果。此配置仅影响一个数据集。您还可以配置影响所有数据集的属性。在此示例中，图例也通过选项配置（在单独的部分中解释）被移除。您可以在
    `LineArea/line-2.html` 中查看完整的代码，如下面的截图所示：
- en: '![](img/7be3bf28-c583-4fde-ba9f-72229ac1082e.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7be3bf28-c583-4fde-ba9f-72229ac1082e.png)'
- en: 'Simple line chart with average global temperatures measured in 2016 (code:
    *LineArea/line-2.html)*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的折线图，展示了2016年测量的平均全球温度（代码：*LineArea/line-2.html)*
- en: 'The following listed dataset properties can be declared for each object of
    the `datasets` array. Many are also shared by other charts that display numerical
    data, such as radar, scatter, and bubble charts:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出的数据集属性可以用于 `datasets` 数组中的每个对象。许多属性也与其他显示数值数据的图表共享，例如雷达图、散点图和气泡图：
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **值** | **描述** |'
- en: '| `data` | `Number[]` | An array of numbers containing the data to display
    (mandatory). |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `data` | `Number[]` | 包含要显示的数据的数字数组（必填）。 |'
- en: '| `label` | `String` | A label for the dataset (appears in legend and tooltips).
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `label` | `String` | 数据集的标签（出现在图例和工具提示中）。 |'
- en: '| `backgroundColor` | A CSS color property value string | The fill color under
    (or above) the line. Position depends on the `fill` property. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `backgroundColor` | CSS 颜色属性值字符串 | 在线（或上方）下的填充颜色。位置取决于 `fill` 属性。 |'
- en: '| `borderColor` | A CSS color property value string | The color of the line.
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `borderColor` | CSS 颜色属性值字符串 | 线的颜色。 |'
- en: '| `borderWidth` | `Number` | The width of the line in pixels. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `borderWidth` | `Number` | 线的像素宽度。 |'
- en: '| `borderDash` | `Number[]` | The canvas `setLineDash` method. An array describing
    the width of alternated line and space. For example, `[5, 10]` will create a dashed
    line with 5 pixel dashes and 10 pixel spaces. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `borderDash` | `Number[]` | 画布 `setLineDash` 方法。描述交替线宽和空间的数组。例如，`[5, 10]`
    将创建一个具有 5 像素划线和 10 像素空间的虚线。 |'
- en: '| `borderDashOffset` | `Number` | The canvas `lineDashOffset` property. An
    offset for line dashes. If zero (default), a `[10,10]` dash will start with a
    `10` pixel line. If `10`, it will start with the 10 pixel space. If `5`, it will
    start with a `5` pixel line, followed by a `10` pixel space, `10` pixel line,
    and so on. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `borderDashOffset` | `Number` | 画布 `lineDashOffset` 属性。线段的偏移量。如果为零（默认），则
    `[10,10]` 划线将从 `10` 像素线开始。如果 `10`，它将从 `10` 像素空间开始。如果 `5`，它将从 `5` 像素线开始，然后是 `10`
    像素空间，`10` 像素线，以此类推。 |'
- en: '| `borderJoinStyle` | `''bevel''`, `''round''`, or `''miter''` (default) |
    The canvas `lineJoin` property. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `borderJoinStyle` | `''bevel''`，`''round''`，或 `''miter''`（默认） | 画布 `lineJoin`
    属性。 |'
- en: '| `borderCapStyle` | `''butt''` (default), `''round''`, or `''square''` | The
    canvas `lineCap` property. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `borderCapStyle` | `''butt''`（默认），`''round''`，或 `''square''` | 画布 `lineCap`
    属性。 |'
- en: '| `pointBackgroundColor` | `Color` or `Color[]` | The background color of the
    point. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `pointBackgroundColor` | `Color` 或 `Color[]` | 点的背景颜色。 |'
- en: '| `pointBorderColor` | `Color` or `Color[]` | The border color of the point.
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `pointBorderColor` | `Color` 或 `Color[]` | 点的边框颜色。 |'
- en: '| `pointBorderWidth` | `Number` or `Number[]` | The border width of the point.
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `pointBorderWidth` | `Number` 或 `Number[]` | 点的边框宽度。 |'
- en: '| `pointRadius` | `String` or `String[]` | The radius of the point. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `pointRadius` | `String` 或 `String[]` | 点的半径。 |'
- en: '| `pointStyle` | `circle `(default), `cross`, `line`, `crossRot`, `dash`, `rectRounded`,
    `rectRot`, `star`, or `triangle` | The style of the point. A string or a DOM reference
    to an `Image` object. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `pointStyle` | `circle`（默认），`cross`，`line`，`crossRot`，`dash`，`rectRounded`，`rectRot`，`star`，或
    `triangle` | 点的样式。一个字符串或指向 `Image` 对象的 DOM 引用。 |'
- en: '| `pointHoverBackgroundColor` | `Color` or `Color[]` | The background color
    of the point when the mouse hovers over it. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `pointHoverBackgroundColor` | `Color` 或 `Color[]` | 鼠标悬停时点的背景颜色。 |'
- en: '| `pointHoverBorderColor` | `Color` or `Color[]` | The border color of the
    point when the mouse hovers over it. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `pointHoverBorderColor` | `Color` 或 `Color[]` | 鼠标悬停时点的边框颜色。 |'
- en: '| `pointHoverBorderWidth` | `Number` or `Number[]` | The width of the point
    when the mouse hovers over it. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `pointHoverBorderWidth` | `Number` 或 `Number[]` | 鼠标悬停时点的宽度。 |'
- en: '| `pointHoverRadius` | `Number` or `Number[]` | The radius of the point when
    the mouse hovers over it. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `pointHoverRadius` | `Number` 或 `Number[]` | 鼠标悬停时点的半径。 |'
- en: '| `pointHitRadius` | `Number` or `Number[]` | The invisible radius of the point
    that reacts to the mouse hover (to show a tooltip). |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `pointHitRadius` | `Number` 或 `Number[]` | 点的不可见半径，该点对鼠标悬停做出反应（以显示工具提示）。
    |'
- en: '| `cubicInterpolationMode` | `''default''` or `''monotone''` | The default
    algorithm employs a cubic weighted interpolation. It doesn''t guarantee monotonicity
    (so, if values increase or decrease, the default algorithm may deviate from this
    behavior). |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `cubicInterpolationMode` | `''default''` 或 `''monotone''` | 默认算法采用立方加权插值。它不保证单调性（因此，如果值增加或减少，默认算法可能会偏离此行为）。
    |'
- en: '| `lineTension` | `Number` | The cubic bezier line tension (this applies only
    to default interpolation mode). If zero, the chart will draw straight lines. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `lineTension` | `Number` | 立方贝塞尔线张力（这仅适用于默认插值模式）。如果为零，则图表将绘制直线。 |'
- en: '| `fill` | `false`, `start`, `end`, `origin`, or dataset index (relative or
    absolute) | This property describes how the space between lines is filled. `false`
    turns the feature off. `start` fills the space above or before the line, `end`
    fills the opposite space, `origin` fills to the origin of the chart, and index
    values fill the space between two datasets. A number represents the absolute index
    of a dataset. A string containing a signed number (for example: `+2`) represents
    a relative dataset (for example: the preceding two datasets). |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `fill` | `false`，`start`，`end`，`origin` 或数据集索引（相对或绝对） | 此属性描述了线条之间的空间填充方式。`false`
    关闭此功能。`start` 填充线条上方或之前的空间，`end` 填充相反的空间，`origin` 填充到图表的原点，索引值填充两个数据集之间的空间。一个数字表示数据集的绝对索引。包含有符号数字的字符串（例如：`+2`）表示相对数据集（例如：前两个数据集）。
    |'
- en: '| `spanGaps` | `''bottom''`, `''left''`, `''top''`, or `''right''` | If `false`,
    a null value or *NaN* (not zero) will cause a break in the line. The default is
    `false`. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `spanGaps` | `''bottom''`，`''left''`，`''top''` 或 `''right''` | 如果为 `false`，则空值或
    *NaN*（非零）将导致线条中断。默认为 `false`。 |'
- en: '| `showLine` | Boolean | If `false`, the line for this dataset is not shown
    (only points will be displayed). |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `showLine` | Boolean | 如果为 `false`，则不会显示此数据集的行（仅显示点）。 |'
- en: '| `steppedLine` | `true` = `''before''`, `false` (default), or `''after''`
    | Draws line as a sequence of steps. If `true` or `before`, the initial point
    is used. If `after`, the final value is used. The default is `false`, which disables
    this algorithm. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `steppedLine` | `true` = `''before''`，`false`（默认），或 `''after''` | 以一系列步骤绘制线条。如果为
    `true` 或 `before`，则使用初始点。如果为 `after`，则使用最终值。默认为 `false`，这将禁用此算法。 |'
- en: '| `yAxisID` and `xAxisID` | An axis ID (see [Chapter 7,](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml)* Advanced
    Chart.js*) | This is used in axis configuration. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `yAxisID` 和 `xAxisID` | 轴 ID（见 [第 7 章](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml)* 高级
    Chart.js*) | 这用于轴配置。 |'
- en: Dataset properties for line charts
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 折线图的数据集属性
- en: 'Data points represent the actual data in a dataset, and serve as an anchor
    for tooltips. There are several different data point styles that can be selected
    with the `pointStyle` property. These are shown as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 数据点代表数据集中的实际数据，并作为工具提示的锚点。可以通过 `pointStyle` 属性选择几种不同的数据点样式。如下所示：
- en: '![](img/5379279d-700a-4066-bec1-07f1682da665.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5379279d-700a-4066-bec1-07f1682da665.png)'
- en: 'Point styles available for line charts (code: *LineArea/line-3-pointStyle.html)*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于折线图的数据点样式（代码：*LineArea/line-3-pointStyle.html)*
- en: Data points can also configure radius, background color, border color, and tooltip
    behaviors. In a line chart, only the points represent actual values. The lines
    are just estimates. Depending on the kind of data you are displaying or the amount
    of points you have to display, it may not make sense to show them. You might also
    want to render them differently.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 数据点还可以配置半径、背景颜色、边框颜色和工具提示行为。在折线图中，只有点代表实际值。线条只是估计值。根据您显示的数据类型或要显示的点数，可能没有必要显示它们。您可能还想以不同的方式渲染它们。
- en: 'There are several options to control the algorithm that draws the lines. The
    `lineTension` property is a number (usually between `0` and `0.5`) that configures
    the cubic Bezier interpolation of each line, drawing smooth curves between each
    point. If you set it to zero, the chart will draw straight lines, as demonstrated
    in the following diagram:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个选项可以控制绘制线条的算法。`lineTension` 属性是一个数字（通常在 `0` 和 `0.5` 之间），它配置每条线的立方贝塞尔插值，在每两点之间绘制平滑曲线。如果将其设置为零，则图表将绘制直线，如下面的图例所示：
- en: '![](img/6bbd7036-f2a8-4819-8fdd-cf7db290db7c.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bbd7036-f2a8-4819-8fdd-cf7db290db7c.png)'
- en: 'Comparing different values for the lineTension property (code: *LineArea/line-4-tension.html)*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 比较 lineTension 属性的不同值（代码：*LineArea/line-4-tension.html)*
- en: 'If you are plotting discrete values, you may prefer to draw the lines as *steps*.
    You can place the step on a line based on the first or the second point of the
    line segment by choosing between the `before` or `after` strategies for the `steppedLine`
    property. The effects are shown as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在绘制离散值，可能更喜欢将线条绘制为 *阶梯状*。您可以通过选择 `steppedLine` 属性的 `before` 或 `after` 策略，根据线段的第一个或第二个点来放置阶梯。效果如下所示：
- en: '![](img/f283de6f-583b-4c77-96a6-481b16fc8a8d.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f283de6f-583b-4c77-96a6-481b16fc8a8d.png)'
- en: 'The effect of using different strategies for the steppedLine property (code:
    LineArea/line-5-stepped.html)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不同策略对 steppedLine 属性的影响（代码：LineArea/line-5-stepped.html）
- en: Options configuration for line charts
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 折线图的选项配置
- en: 'The same general options we used for bar charts can be used to configure line
    charts, but there are some chart specific options, too. All charts come preconfigured
    with defaults, which can be overridden using local or global properties. One of
    the ways to remove the shading for all charts that use lines (instead of setting
    transparency per dataset) is to declare the fill global property for line elements
    as false, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用于条形图的相同通用选项也可以用于配置折线图，但也有一些图表特定的选项。所有图表都预配置了默认值，可以使用本地或全局属性来覆盖这些默认值。移除使用线条的所有图表的阴影（而不是按数据集设置透明度）的一种方法是将线条元素的填充全局属性声明为
    `false`，如下所示：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, you can configure options per-chart setting properties in the options
    configuration object. We improved the way our first line chart was rendered, removing
    the legend, which is not necessary as there is only one dataset (see `LineArea/line-2.html`),
    as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您可以通过在选项配置对象中设置每个图表的属性来配置选项。我们改进了第一个折线图的渲染方式，移除了图例，因为只有一个数据集，所以不需要图例（见 `LineArea/line-2.html`），如下所示：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Data points can be completely hidden by setting `pointRadius` to zero in each
    dataset. However, you can also configure them for all datasets and charts globally
    by setting the values of the properties in `Chart.defaults.global.elements.point.radius`.
    This hides all points from all charts that use points, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将每个数据集的 `pointRadius` 设置为零，可以完全隐藏数据点。然而，您也可以通过设置 `Chart.defaults.global.elements.point.radius`
    中属性的值来为所有数据集和图表全局配置它们。这将隐藏使用点的所有图表中的所有点，如下所示：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you have a very large number of points, you may not want to draw the lines.
    To hide the line of a specific dataset, you can set its `showLine` property to
    `false`, but you can also configure line drawing for all lines with the options
    properties listed as follows.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有很多点，可能不想绘制线条。要隐藏特定数据集的线条，可以将它的 `showLine` 属性设置为 `false`，但也可以使用以下列出的选项属性配置所有线条的绘制。
- en: 'They can be set locally for the current chart or globally for all charts:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以设置为当前图表的本地值或所有图表的全局值：
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **值** | **描述** |'
- en: '| `showLines` | `true` or `false` | If this property is `false`, the lines
    between the points are not drawn. The default for line charts is `true`. The default for
    scatter charts is `false` . |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `showLines` | `true` 或 `false` | 如果此属性为 `false`，则不绘制点之间的线条。折线图的默认值为 `true`。散点图的默认值为
    `false`。 |'
- en: '| `spanGaps` | `true` or `false` | A *null* value or *NaN* (not zero) causes
    a break in the line if this property is `false`. The default is `false`. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `spanGaps` | `true` 或 `false` | 如果此属性为 `false`，则 `null` 值或 `NaN`（非零）会导致线条中断。默认值为
    `false`。 |'
- en: Configuration properties for line charts
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 折线图的配置属性
- en: 'Global options for line elements are configured using the `Chart.defaults.line`
    object. To hide all lines as default, use the following code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Chart.defaults.line` 对象配置线元素的全球选项。要默认隐藏所有线条，请使用以下代码：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Locally, they are defined directly inside the `options` object. You can override
    the default in a chart with the following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 本地定义在 `options` 对象内部。您可以使用以下代码覆盖图表的默认值：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Line charts with more than one dataset
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包含多个数据集的折线图
- en: 'Each dataset is displayed in a line chart by a separate line. The following
    example adds a new set of values to our chart, that is, the average monthly temperatures
    measured in 1880\. We can now plot both datasets in the same grid and compare
    them with the average temperatures in 2016, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数据集通过单独的线条在折线图中显示。以下示例向我们的图表添加了一组新的值，即 1880 年测量的平均月温度。现在我们可以将两个数据集绘制在同一个网格中，并比较它们与
    2016 年的平均温度，如下所示：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The result of the preceding code is shown in the following chart. The full
    code is in `LineArea/line-6-datasets.html`. The chart reveals that the average
    temperature anomalies in 2016 are approximately 1° C higher than the measurements
    in 1880:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的结果显示在以下图表中。完整代码位于`LineArea/line-6-datasets.html`。该图表显示，2016年的平均温度异常值比1880年的测量值高约1°C：
- en: '![](img/369524ec-645e-49a1-9ef0-9058595c80d2.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/369524ec-645e-49a1-9ef0-9058595c80d2.png)'
- en: 'Line chart with two datasets (code: *LineArea/line-6-datasets.html)*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 包含两个数据集的折线图（代码：*LineArea/line-6-datasets.html*）
- en: 'The `fill` property can be used with a Boolean value to turn on/off shading
    for all lines, but it can also be used as a `dataset` property to configure a
    shading strategy for individual datasets. In this case, it receives a string identifying
    an axis line: `''start''`, `''end''`, or `''origin''`, which will shade the chart
    between the line and an axis line (smallest, largest, or zero axis, respectively).
    It can also shade between lines, specifying a relative number as a string: `''-1''`
    will shade between the current dataset and the previous one, `''+2''`, will shade
    from the current dataset to the dataset that is two positions higher in the `dataset`
    array. You can also refer to an absolute index of the `dataset` array. The following
    chart compares the effects of some of these fill strategies:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`fill`属性与布尔值一起使用来打开/关闭所有线条的阴影，但它也可以用作`dataset`属性来为单个数据集配置阴影策略。在这种情况下，它接收一个标识轴线的字符串：`'start'`、`'end'`或`'origin'`，这将使图表在线条和轴线之间（最小、最大或零轴线）着色。它也可以在线条之间着色，指定一个相对数字作为字符串：`'-1'`将在当前数据集和上一个数据集之间着色，`'+2'`将从当前数据集着色到`dataset`数组中高两个位置的数据集。您还可以引用`dataset`数组的绝对索引。以下图表比较了这些填充策略的一些效果：
- en: '![](img/0a265173-0a29-4668-bd97-2b513726430d.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0a265173-0a29-4668-bd97-2b513726430d.png)'
- en: 'Fill strategies for line charts (code: *LineArea/line-7-fill.html)*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 折线图填充策略（代码：*LineArea/line-7-fill.html*）
- en: Loading data from external files
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从外部文件加载数据
- en: Line charts are great for revealing trends and relationships in large amounts
    of data. Public data is widely available in standard formats, such as CSV and
    JSON, but usually needs to be downscaled, parsed, and converted to a data format
    expected by Chart.js before using. In this section, we will extract data from
    a public data file and turn it into a trend-revealing visualization.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 折线图非常适合揭示大量数据中的趋势和关系。公共数据通常以CSV和JSON等标准格式广泛可用，但在使用之前通常需要降级、解析并转换为Chart.js期望的数据格式。在本节中，我们将从公共数据文件中提取数据并将其转换为揭示趋势的可视化。
- en: For all examples that use external files, you need to open your files using
    a web server. Double-clicking on the HTML file and opening it in your browser
    won't work. If you are not running your files with a web server, see the section *Loading
    d**ata files*, in [Chapter 2](25edc904-3528-40cc-8865-75ccf1fc78eb.xhtml), *Technology
    Fundamentals,* on how to configure a web server for testing.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有使用外部文件的示例，您需要使用Web服务器打开您的文件。双击HTML文件并在浏览器中打开它不会起作用。如果您没有使用Web服务器运行文件，请参阅[第2章](25edc904-3528-40cc-8865-75ccf1fc78eb.xhtml)中“技术基础”部分的*加载数据文件*部分，了解如何配置Web服务器进行测试。
- en: The temperature data in the previous example was extracted from a JSON file
    obtained from the NASA **Goddard Institute for Space Studies** (**GISS**) website
    ([data.giss.nasa.gov/gistemp](http://data.giss.nasa.gov/gistemp)), which includes
    monthly measurements for each year between 1880 and 2016\. It would be very interesting
    to plot the numbers for all months in a single chart. We can do by this loading
    the file and using JavaScript to extract the data we want.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 之前示例中的温度数据是从NASA **戈达德太空研究所**（**GISS**）网站（[data.giss.nasa.gov/gistemp](http://data.giss.nasa.gov/gistemp)）获取的JSON文件中提取的，该网站包含了1880年至2016年之间每年的月度测量数据。将所有月份的数据绘制在一张图表上将会非常有趣。我们可以通过加载文件并使用JavaScript提取所需的数据来实现这一点。
- en: 'The following is a fragment of the JSON file from the GISS site. It''s also
    available from the GitHub repository for this chapter in `Data/monthly_json.json`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从GISS网站JSON文件中提取的片段。它也可以在GitHub上本章的存储库中找到，位于`Data/monthly_json.json`：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Files should be loaded asynchronously. You can use any Ajax library for this
    (for example, JQuery) or use standard ES2015 features, supported by all modern
    browsers. In this book, we will use the standard JavaScript `fetch()` command
    (in the GitHub repository, there are also JQuery alternatives for most examples).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 文件应该异步加载。你可以使用任何Ajax库来完成此操作（例如，JQuery）或使用所有现代浏览器都支持的标准的ES2015功能。在这本书中，我们将使用标准的JavaScript
    `fetch()`命令（在GitHub仓库中，大多数示例也有JQuery替代方案）。
- en: 'The `fetch()` command is reactive. It will wait until the whole file is loaded
    into memory before moving to the first `then()` step, which processes the response
    and extracts the JSON string (using the `text()` method). The second `then()`
    step only starts after all of the contents are placed in a string, made available
    for parsing in the final step, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetch()`命令是响应式的。它将等待整个文件加载到内存中，然后才移动到第一个`then()`步骤，该步骤处理响应并提取JSON字符串（使用`text()`方法）。第二个`then()`步骤仅在所有内容都放置在字符串中，并在最终步骤中可用于解析之后才开始，如下所示：'
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Before using a JSON file (which is a string), we need to parse it so that it
    will become a JavaScript object, from which we can read individual fields using
    the dot operator. This can be done with the standard JavaScript command, `JSON.parse()`,
    as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用JSON文件（它是一个字符串）之前，我们需要解析它，使其成为一个JavaScript对象，然后我们可以使用点操作符读取单个字段。这可以通过标准的JavaScript命令`JSON.parse()`完成，如下所示：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you are using JQuery or some other library instead of `fetch()`, you might
    prefer to use a function that loads and parses JSON. In this case, you should
    not run the preceding command.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用`fetch()`而不是JQuery或其他库，你可能更喜欢使用一个加载并解析JSON的函数。在这种情况下，你不应该运行前面的命令。
- en: 'The data contains two measurements, labeled `GCAC` and `GISTEMP`. We only need
    one of them, so we will filter only the objects that have `GISTEMP` as `Source`.
    We will also reverse the array so that the earlier measurements appear first in
    the chart. We can do all of this in one line, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 数据包含两个测量值，分别标记为`GCAC`和`GISTEMP`。我们只需要其中一个，因此我们将仅过滤具有`GISTEMP`作为`Source`的对象。我们还将反转数组，以便较早的测量值在图表中首先出现。我们可以在一行中完成所有这些，如下所示：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The last line will print the following code in your browser''s JavaScript console:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一条将在你的浏览器JavaScript控制台中打印以下代码：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, it''s easy to select the data we need to build a dataset for each year.
    The best way to do that is to create a `Map` storing each value and month, and
    use the year as a retrieval key. Split the date components to extract the year
    and month, and then store these values and the temperature anomaly in a new object
    (with properties: `year`, `month`, and `value`) for each `Map` entry.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，选择我们需要的用于构建每年数据集的数据变得容易了。最好的方法是创建一个`Map`，存储每个值和月份，并使用年份作为检索键。将日期组件拆分以提取年份和月份，然后将这些值和温度异常存储在一个新的对象（具有`year`、`month`和`value`属性）中，为每个`Map`条目。
- en: 'These steps are performed in the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤在以下代码中执行：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The resulting map will contain one key for each year in the dataset. The value
    of each entry will be an array of 12 objects, one for each month. Use your browser's
    JavaScript console to inspect the generated map.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的地图将包含数据集中每一年份的一个键。每个条目的值将是一个包含12个对象的数组，每个对象代表一个月。使用浏览器中的JavaScript控制台来检查生成的地图。
- en: 'The `draw()` function will convert `dataMap` into a format that Chart.js can
    use. For each entry it will create a `dataset` object and add it to the `datasets`
    array. Each `dataset` object contains a `data` property with an array of data
    values (one per month), and dataset configuration properties, such as line color
    and label. The map''s key (year) is the label, and the colors are generated in
    a gradient sequence using the year to change the hue, as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`draw()`函数将`dataMap`转换为Chart.js可以使用的形式。对于每个条目，它将创建一个`dataset`对象并将其添加到`datasets`数组中。每个`dataset`对象包含一个具有数据值数组的`data`属性（每月一个），以及数据集配置属性，如线条颜色和标签。地图的键（年份）是标签，颜色使用渐变序列生成，根据年份改变色调，如下所示：'
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we can assemble the data object and instantiate the line chart, as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以组装数据对象并实例化折线图，如下所示：
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The final result is shown as follows. The full code is available in `LineArea/line-8-load-fetch.html`
    (fetch version), and `LineArea/line-8-load-jquery.html` (JQuery Version):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果如下所示。完整的代码可在`LineArea/line-8-load-fetch.html`（fetch版本）和`LineArea/line-8-load-jquery.html`（JQuery版本）中找到：
- en: '![](img/d0a19ccb-f79b-4d17-9463-f554971970d7.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0a19ccb-f79b-4d17-9463-f554971970d7.png)'
- en: 'Line chart using external data showing temperature variation from 1880 to 2016
    (data: NASA/GISS; and code: *LineArea/line-8-load-fetch.html* for fetch version,
    or *LineArea/line-8-load-jquery.html* for JQuery version)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用外部数据绘制的折线图，显示从1880年到2016年的温度变化（数据：NASA/GISS；代码：*LineArea/line-8-load-fetch.html*
    用于获取版本，或 *LineArea/line-8-load-jquery.html* 用于jQuery版本）
- en: 'It looks nice, but there is too much information. We could filter out some
    results, but we can also just reduce the amount of labels. The `options.legend.labels.filter`
    property supports a `callback` function that we can use to filter out selected
    labels. In the following code, it will only display labels that are 20 years apart:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错，但信息太多。我们可以过滤掉一些结果，但也可以简单地减少标签的数量。`options.legend.labels.filter`属性支持一个`callback`函数，我们可以使用它来过滤掉选定的标签。在下面的代码中，它将只显示间隔20年的标签：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The result is shown as follows and the full code is in `LineArea/line-10-filter.html`.
    Now only a few legends are shown, and the colors differ enough to relate them
    to different parts of the chart. Although there is still a lot of information
    in the chart, the colors are sufficient to reveal a trend toward increasing temperatures:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示，完整代码在`LineArea/line-10-filter.html`中。现在只显示了几个图例，颜色差异足够大，可以与图表的不同部分相关联。尽管图表中仍然有大量信息，但颜色足以揭示温度上升的趋势：
- en: '![](img/7aee54a0-e921-446d-86f1-987c5ef8bb0b.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7aee54a0-e921-446d-86f1-987c5ef8bb0b.png)'
- en: 'Line chart using external data after filtering out excess labels (code: *LineArea/line-10-filter.html)*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用外部数据过滤掉多余标签后的折线图（代码：*LineArea/line-10-filter.html)*
- en: Stacked area charts
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 堆叠面积图
- en: A line chart could be used to show how much CO2 that each country releases in
    the atmosphere each year. It would reveal if a country's emissions were increasing,
    stable, or decreasing, but such a line chart would not be very useful to show
    the *total* amount of CO2 released in the air, and how each country contributes
    to this total. You can display this kind of information using a stacked area chart.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用折线图来显示每个国家每年向大气中排放的二氧化碳量。这将揭示一个国家的排放量是增加、稳定还是减少，但这样的折线图对于显示*总*排放到空气中的二氧化碳量以及每个国家对此总量的贡献并不是非常有用。你可以使用堆叠面积图来显示这类信息。
- en: There is no special `area` type chart in Chart.js. Instead, you can create a
    simple overlapping area chart configuring the fill properties for each dataset
    in a line chart. To create a stacked area chart, you will need to set the stacked
    property to `true` in the *x* and y-axes.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Chart.js中没有特殊的`area`类型图表。相反，你可以通过配置每个数据集在折线图中的填充属性来创建一个简单的重叠面积图。要创建堆叠面积图，你需要将x轴和y轴的堆叠属性设置为`true`。
- en: 'Let''s try an example. We will use a JSON file containing data about carbon
    emissions (in kilotonnes) from selected countries from 1960 to 2014\. It''s based
    on a CSV file containing data for all countries, which is available for download
    from the World Bank public database. I created a JSON Version of this file containing
    only the six greatest polluters, adding up all of the other countries in a single
    entry. This is the file we will use `(Data/world_bank_co2_kt.json)`, as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一个例子。我们将使用一个包含1960年至2014年选定国家碳排放（以千吨为单位）数据的JSON文件。它基于包含所有国家数据的CSV文件，该文件可以从世界银行公共数据库中下载。我创建了一个只包含六个最大污染者的JSON版本文件，将其他所有国家的数据合并到一个条目中。这是我们将会使用的文件`(Data/world_bank_co2_kt.json)`，如下所示：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As in the previous example, we need to load the file and parse the JSON string,
    as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，我们需要加载文件并解析JSON字符串，如下所示：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The next step is to set up an array of `labels` and `datasets` from the data.
    The JSON file already contains an array with the years, so all you have to do
    is copy it directly into the chart''s data object `labels` property. The `datasets`
    array is assembled iterating through each entry in the data file''s entries array
    to extract the label of the dataset (from the `country` property) and the data
    array (from the `data` property). We will use the array''s index to generate different
    colors, as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是设置一个从数据中获取的`labels`和`datasets`数组。JSON文件已经包含了一个包含年份的数组，所以你只需要直接将其复制到图表的数据对象的`labels`属性中。`datasets`数组是通过遍历数据文件条目数组中的每个条目来组装的，从中提取数据集的标签（来自`country`属性）和数据数组（来自`data`属性）。我们将使用数组的索引来生成不同的颜色，如下所示：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The result of this code is shown as follows. The full code is in `LineArea/line-11-area.html`.
    The step between 1990 and 1992 is caused by a lack of data in previous years,
    mostly from Warsaw Pact countries and the Soviet Union:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码的结果如下。完整的代码在`LineArea/line-11-area.html`中。1990年和1992年之间的步骤是由前几年数据不足造成的，主要来自华沙条约国家和苏联：
- en: '![](img/ed1bdad4-d713-4c64-9688-d04cdd530ee1.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图表示例](img/ed1bdad4-d713-4c64-9688-d04cdd530ee1.png)'
- en: 'An area chart with overlapped (not stacked) datasets (code: *LineArea/line-11-area.html)*'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 展示重叠（非堆叠）数据集的面积图（代码：*LineArea/line-11-area.html)*
- en: The `Chart` is probably not what you would expect. It's not stacking the data.
    The other dataset is overlapping all of the other datasets.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chart`可能不是你预期的样子。它并没有堆叠数据。其他数据集覆盖了所有其他数据集。'
- en: 'Datasets could be stacked in two ways: on the *x *axis, or on the *y *axis,
    so you have to tell Chart.js how you want to do it. In this example, it doesn''t
    make sense to add up the years, but it does to add up carbon emissions, so we
    have to stack the *y *axis. This is done by setting the `scales.yAxes[0].stacked`
    property to `true`, in the options configuration object, as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集可以以两种方式堆叠：在*x*轴上，或者在*y*轴上，因此你必须告诉Chart.js你想要如何操作。在这个例子中，将年份相加没有意义，但将碳排放量相加是有意义的，因此我们必须堆叠*y*轴。这是通过将选项配置对象中的`scales.yAxes[0].stacked`属性设置为`true`来实现的，如下所示：
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the preceding options configuration, we have also reduced the size of the
    legend boxes to half (the `boxWidth` property). You can see the final result as
    follows. The full code is in `LineArea/line-12-area-stacked.html`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的选项配置中，我们还减小了图例框的大小到一半（`boxWidth`属性）。你可以看到最终结果如下。完整的代码在`LineArea/line-12-area-stacked.html`中：
- en: '![](img/9ce1ca19-ef3c-4b99-a011-7b210d1ce32d.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图表示例](img/9ce1ca19-ef3c-4b99-a011-7b210d1ce32d.png)'
- en: 'A stacked area chart showing total and per-country CO2 emissions (code: *LineArea/line-12-area-stacked.html)*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 展示总排放量和按国家排放的CO2排放量的堆叠面积图（代码：*LineArea/line-12-area-stacked.html)*
- en: Now the chart reveals that the step from 1990 to 1992 is mostly due to Russia,
    for which the World Bank didn't have any carbon emission data before 1990, when
    it was the Soviet Union.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在图表显示，从1990年到1992年的步骤主要归因于俄罗斯，因为世界银行在1990年之前没有俄罗斯（当时是苏联）的碳排放数据。
- en: Radar charts
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 雷达图
- en: Radar charts are line charts plotted on a radial axis. They can be used with
    one or more datasets that contain at least three values each. There is only one
    axis, which starts from the center. Each line begins and ends at the same point
    and, for that reason, radar charts are usually used to display values that are
    either cyclic in nature (such as hours, months, schedules, or repeating events),
    a sequential list of categories which end at the same place where it begins (such
    as round-trip), or categories that have no specific order. A radar chart can be
    used to compare different datasets by revealing strong and weak points, or showing
    outliers and commonality in data. It usually works best with a small number of
    datasets (that is, no more than three or four).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 雷达图是在径向轴上绘制的折线图。它们可以与包含至少三个值的单个或多个数据集一起使用。只有一个轴，它从中心开始。每条线从同一点开始和结束，因此雷达图通常用于显示具有循环性质（例如小时、月份、日程安排或重复事件）的值，一个以相同位置开始和结束的类别顺序列表（例如往返），或者没有特定顺序的类别。雷达图可以通过揭示强项和弱项，或显示数据的异常值和共性来比较不同的数据集。它通常与少量数据集（即不超过三到四个）配合使用效果最好。
- en: Radar charts are usually a poor choice for large datasets. In these cases, it's
    usually better to use a Cartesian line chart or a bar chart. Radial distances
    are also harder to perceive, although this limitation can be minimized with the
    grid.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 雷达图通常不适合大型数据集。在这些情况下，通常更好的选择是使用笛卡尔线图或条形图。径向距离也较难感知，尽管可以通过网格最小化这种限制。
- en: The configurable properties for radar charts are the same as line charts. You
    can even reuse the same datasets and labels. The data property of each dataset
    must contain an array of numbers and the `chart` object should be configured with
    `type='radar'`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 雷达图的配置属性与线图相同。你甚至可以重用相同的 datasets 和标签。每个数据集的数据属性必须包含一个数字数组，并且`chart`对象应该配置为`type='radar'`。
- en: 'In the following example, a radar chart is being used to compare three different
    travel schedules for a 30-day trip. Each dataset lists the number of days spent
    in each city. Using this chart, a tourist can quickly visualize how the days of
    the trip will be distributed, per city, making it easier to choose the best schedule:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，雷达图被用来比较为期30天的旅行三种不同的行程安排。每个数据集列出了在每座城市花费的天数。使用这个图表，游客可以快速可视化旅行中每天将如何分配到每个城市，这使得选择最佳行程变得更容易：
- en: '[PRE21]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Instead of a `scales` property containing *x* axes and *y* axes, a radar chart
    has a single `scale` property. The grid structure is configured within the `ticks`
    property (more about scales at the end of this chapter).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 雷达图没有包含*x*轴和*y*轴的`scales`属性，而只有一个`scale`属性。网格结构在`ticks`属性中配置（关于刻度的更多信息请参阅本章末尾）。
- en: 'The result is shown as follows. You can see the full code in `Radar/radar-1.html`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示。你可以在`Radar/radar-1.html`中查看完整的代码：
- en: '![](img/89f74b3a-ca86-4a17-adc5-cd027376a91c.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89f74b3a-ca86-4a17-adc5-cd027376a91c.png)'
- en: 'Radar chart comparing three different trip schedules for a 30-day trip (code:
    *Radar/radar-1.html)*'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 比较为期30天的旅行三种不同行程安排的雷达图（代码：*Radar/radar-1.html)*
- en: Radar charts are great for cyclic data, such as the months in a year. Let's
    try to transform the Cartesian line chart we created in the previous section into
    a radar chart with the same data. Most of the code is the same. You only need
    to change the chart type, but some minor changes in the configuration will make
    it look better.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 雷达图非常适合周期性数据，例如一年中的月份。让我们尝试将上一节中创建的笛卡尔线图转换为具有相同数据的雷达图。大部分代码都是相同的。你只需要更改图表类型，但一些细微的配置更改会使它看起来更好。
- en: 'The following code shows a slightly modified `draw()` function that uses the
    same NASA/GISS monthly temperature data, but draws the lines in a radar chart:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了略微修改后的`draw()`函数，它使用相同的NASA/GISS月度温度数据，但在雷达图中绘制线条：
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The default line tension is `0` for radar charts, which draws straight lines.
    Since the values are averages, we selected a value between 0 and 0.5 for the `lineTension`
    property to make the chart draw curved lines.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 雷达图的默认线张力为`0`，这会绘制直线。由于这些值是平均值，我们为`lineTension`属性选择了介于0和0.5之间的值，以便图表绘制出曲线。
- en: 'The full code is available in `Radar/radar-3.html`. The result is shown as
    follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码可在`Radar/radar-3.html`中找到。结果如下所示：
- en: '![](img/ac6637f1-2594-45cc-8800-dee2e3e9d673.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac6637f1-2594-45cc-8800-dee2e3e9d673.png)'
- en: 'A radar chart showing the increase in global temperatures from 1880 to 2016
    (code: *Radar/radar-3.html)*'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 展示从1880年到2016年全球温度上升的雷达图（代码：*Radar/radar-3.html)*
- en: 'The variation in color is sufficient to reveal that temperatures are increasing
    year after year. However, if you wish for more precision, you can try filtering
    out some `datasets` and display only the data for every two decades, as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色的变化足以揭示温度逐年上升。然而，如果你希望有更高的精度，可以尝试过滤掉一些`datasets`，并仅显示每二十年的数据，如下所示：
- en: '[PRE23]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The result, showing only eight years is demonstrated as follows. The full code
    is in `Radar/radar-4.html`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 结果仅展示八年，如下所示。完整的代码在`Radar/radar-4.html`中：
- en: '![](img/b73b782a-ed1d-40b7-aa04-047128bb116b.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b73b782a-ed1d-40b7-aa04-047128bb116b.png)'
- en: 'A radar chart showing the increase in global temperatures every 20 years from
    1880 to 2016 (code: *Radar/radar-4.html)*'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 展示从1880年到2016年每20年全球温度上升的雷达图（代码：*Radar/radar-4.html)*
- en: Pie and doughnut charts
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 饼图和环形图
- en: Pie and doughnut charts are used to display numerical proportion between data
    as parts of a whole. Each data value is represented as a slice, which represents
    a proportional quantity. These charts are very popular but are also widely criticized.
    Since we don't perceive angles very well, it's much harder to compare data displayed
    in a pie chart, than in a bar or line chart. Using pie charts to compare only
    very small sets of data can avoid or reduce these problems.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图和环形图用于显示数据作为整体部分之间的数值比例。每个数据值都表示为一个切片，代表一个成比例的数量。这些图表非常受欢迎，但也受到广泛的批评。由于我们不太擅长感知角度，与条形图或折线图相比，比较饼图中的数据要困难得多。使用饼图来比较非常小的数据集可以避免或减少这些问题。
- en: 'A pie chart is usually used to display a single dataset. The `type` property
    of the chart object should be `pie`. Doughnut charts are equivalent to pie charts,
    but they are created with `type: doughnut`. You can also transform any pie chart
    into a doughnut by simply changing the dataset property `cutoutPercentage` to
    `50` (or some other value different than zero).'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '饼图通常用于显示单个数据集。图表对象的 `type` 属性应该是 `pie`。环形图与饼图等效，但它们是通过 `type: doughnut` 创建的。您还可以通过简单地更改数据集属性
    `cutoutPercentage` 为 `50`（或任何非零值）将任何饼图转换为环形图。'
- en: Creating a simple pie chart
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的饼图
- en: 'Let''s create a simple pie chart to compare CO2 emissions among the world''s
    greatest polluters for a single year. You can use the same data we used for the
    area chart, but you will need to choose one of the datasets, place the country
    names in a `labels` array, the data for one year in the `data` array, and generate
    colors for each slice. All this can be done in JavaScript (see `Pie/pie-2-fetch.html`),
    but for the sake of simplicity and to focus on the construction of a simple pie
    chart, we will include the data directly in the HTML file, as shown in the following
    code block:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的饼图来比较世界最大污染者在某一年内的二氧化碳排放量。您可以使用我们用于区域图的相同数据，但您需要选择一个数据集，将国家名称放在 `labels`
    数组中，将一年的数据放在 `data` 数组中，并为每个切片生成颜色。所有这些都可以在 JavaScript 中完成（见 `Pie/pie-2-fetch.html`），但为了简单起见，并专注于简单饼图的构建，我们将直接在
    HTML 文件中包含数据，如下面的代码块所示：
- en: '[PRE24]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `datasets` array contains a single dataset, as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`datasets` 数组包含一个数据集，如下所示：'
- en: '[PRE25]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The chart type should be `pie`, as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图表类型应该是 `pie`，如下所示：
- en: '[PRE26]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The results are shown as follows. You can also see the full code in `Pie/pie-1.html`.
    Note that slices don''t have any labels. You can only see the value of each slice
    if you hover the mouse over it. It will be shown in a tooltip:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示。您还可以在 `Pie/pie-1.html` 中查看完整的代码。请注意，切片没有标签。只有当您将鼠标悬停在切片上时，您才能看到每个切片的值。它将在工具提示中显示：
- en: '![](img/80ccafb3-5f6a-4c58-8dc7-c711e806ec5d.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80ccafb3-5f6a-4c58-8dc7-c711e806ec5d.png)'
- en: 'A simple pie chart showing CO2 emissions by the greatest polluters in billions
    of tonnes (code: *Pie/pie-1.html)*'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的饼图，显示了最大的污染者按百万吨计的二氧化碳排放量（代码：*Pie/pie-1.html)*
- en: Dataset properties for pie charts
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 饼图的数据集属性
- en: 'Besides `data` and `labels` properties, several other properties (listed as
    follows) can be used in each dataset object to configure the colors and style
    of each slice. All properties receive an array of attributes, and each attribute
    is applied to the corresponding slice:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `data` 和 `labels` 属性外，还可以在每个数据集对象中使用以下列出的其他属性来配置每个切片的颜色和样式。所有属性都接受一个属性数组，并且每个属性都应用于相应的切片：
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **值** | **描述** |'
- en: '| `backgroundColor` | Array of CSS color strings | The fill color of the slice
    |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `backgroundColor` | CSS 颜色字符串数组 | 切片的填充颜色 |'
- en: '| `borderColor` | Array of CSS color strings | The border color of the slice
    |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `borderColor` | CSS 颜色字符串数组 | 切片的边框颜色 |'
- en: '| `borderWidth` | Array of numbers | The border width of the slice |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `borderWidth` | 数字数组 | 切片的边框宽度 |'
- en: '| `hoverBackgroundColor` | Array of CSS color strings | The fill color of the
    slice when the mouse hovers over it |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `hoverBackgroundColor` | CSS 颜色字符串数组 | 鼠标悬停时切片的填充颜色 |'
- en: '| `hoverBorderColor` | Array of CSS color strings | The border color of the
    slice when the mouse hovers over it |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `hoverBorderColor` | CSS 颜色字符串数组 | 鼠标悬停时切片的边框颜色 |'
- en: '| `hoverBorderWidth` | Array of numbers | The border width of the slice when
    the mouse hovers over it |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `hoverBorderWidth` | 数字数组 | 鼠标悬停时切片的边框宽度 |'
- en: Dataset options for pie and doughnut charts
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图和环形图的数据集选项
- en: Configuration options
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置选项
- en: 'Common configuration options are inherited for pie charts, but there are also
    some options that are specific to pie and doughnut charts. These are listed in
    the following table:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图的常见配置选项是继承的，但也有一些特定于饼图和环形图的选项。这些选项如下表所示：
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **值** | **描述** |'
- en: '| `cutoutPercentage` | `Number. Defaults`: `0` for `''pie''`, and `''50''`
    for doughnut | A percentage of the chart that is cut out from the middle |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `cutoutPercentage` | 数字。默认值：对于 `''pie''` 为 `0`，对于 `''doughnut''` 为 `''50''`
    | 从图表中间切掉的部分的百分比 |'
- en: '| `rotation` | `Number. Default`: *-0.5 * Math.PI* | The starting angle to
    draw the arcs |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `rotation` | 数字。默认值：*-0.5 * Math.PI* | 绘制弧线的起始角度 |'
- en: '| `circumference` | `Number. Default`: *2 * Math.PI* | The circumference of
    the pie |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `circumference` | `Number. 默认值：*2 * Math.PI*` | 饼图的周长|'
- en: Configuration options for pie and doughnut charts
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图和环形图的配置选项
- en: These options are merged (and override) global configuration options. Default
    options for each type of chart can also be set through the `Chart.defaults.doughnut`
    and `Chart.defaults.pie` objects, which support the same properties listed earlier.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项将合并（并覆盖）全局配置选项。也可以通过`Chart.defaults.doughnut`和`Chart.defaults.pie`对象设置每种图表类型的默认选项，它们支持前面列出的相同属性。
- en: How to show values in the slices
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在饼图的切片中显示值
- en: 'Currently, there is no native Chart.js way to show values or percentages in
    a pie chart without tooltips. But you can achieve this using a plugin or extension.
    In the following example, we will use a very simple library called `Chart.Piecelabel.js`.
    You can download it from [github.com/emn178/Chart.PieceLabel.js](http://github.com/emn178/Chart.PieceLabel.js)
    and include it your page using a script tag:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，没有原生的Chart.js方法在饼图中显示值或百分比而不使用工具提示。但你可以通过插件或扩展来实现这一点。在以下示例中，我们将使用一个非常简单的库，称为`Chart.Piecelabel.js`。你可以从[gihub.com/emn178/Chart.PieceLabel.js](http://github.com/emn178/Chart.PieceLabel.js)下载它，并使用脚本标签将其包含在你的页面中：
- en: '[PRE27]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'That''s it! Now you can add the `pieceLabel` property to the `options` object,
    and configure labels for the slices. You can display absolute values or percentages,
    place the labels inside, at the border or outside the slices, draw the text on
    the arc and configure several font attributes. The following is a selection of
    these properties (you can check the library''s documentation for more properties):'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在你可以将`pieceLabel`属性添加到`options`对象中，并配置切片的标签。你可以显示绝对值或百分比，将标签放置在切片内部、边缘或外部，在弧上绘制文本，并配置多个字体属性。以下是一些这些属性的示例（你可以查看库的文档以获取更多属性）：
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **值** | **描述** |'
- en: '| `render` | `''percentage''` (default) or `''value''` | Displays the percentage
    or the value of the slice. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `render` | `''percentage''`（默认）或 `''value''` | 显示切片的百分比或值。|'
- en: '| `precision` | Number | The `precision` (number of digits after the decimal
    point) for percentages (does not work with other values). |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `precision` | 数字 | 百分比（小数点后的数字）的`precision`（不适用于其他值）。|'
- en: '| `fontSize`, `fontColor`, `fontSize`, and `fontFamily` | CSS property value
    strings | Changes font attributes for the label. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `fontSize`, `fontColor`, `fontSize`, 和 `fontFamily` | CSS属性值字符串 | 更改标签的字体属性。|'
- en: '| `textShadow` | `true` or `false` | Applies a shadow to the label (the shadow
    attributes, such as offset and color, can also be configured with additional properties).
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `textShadow` | `true` 或 `false` | 将阴影应用于标签（阴影属性，如偏移量和颜色，也可以通过其他属性进行配置）。|'
- en: '| `position` | `''default''`, `''border''` or `''outside''` | Places the label
    in the different positions. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `position` | `''default''`, `''border''` 或 `''outside''` | 将标签放置在不同的位置。|'
- en: '| `arc` | `true` or `false` | Draws the text aligned with the arc. Works better
    when the position is `''outside''`. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `arc` | `true` 或 `false` | 绘制与弧对齐的文本。当位置为`''outside''`时效果更好。|'
- en: Some configuration options for the *Chart.PieceLabel.js* plugin
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '*Chart.PieceLabel.js*插件的某些配置选项'
- en: 'To include labels in the pie chart you created in the previous example, add
    the following property to the `options` object of your chart (see `Pie/pie-3-plugin.html`):'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 要在上一示例中创建的饼图中包含标签，请将以下属性添加到你的图表的`options`对象中（见`Pie/pie-3-plugin.html`）：
- en: '[PRE28]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run the script and you have labels containing the value represented by each
    slice, as shown in the following chart:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，你将得到包含每个切片所表示的值的标签，如下面的图表所示：
- en: '![](img/851535b1-6a8a-4df7-994c-391df477464e.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/851535b1-6a8a-4df7-994c-391df477464e.png)'
- en: 'A simple pie chart using the Chart.PieceLabel.js extension to display labels
    on each slice (code: *Pie/pie-3-plugin.html)*'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Chart.PieceLabel.js扩展显示每个切片上的标签的简单饼图（代码：*Pie/pie-3-plugin.html)*
- en: If you want even more customization, you can try other plugins such as `ChartJS-Datalabels`
    and `ChartJS-Outlabels`, which support sophisticated label placement options.
    These two plugins will be explored in [Chapter 6](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml),
    *Configuring Styles and Interactivity*.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更多的定制，你可以尝试其他插件，如`ChartJS-Datalabels`和`ChartJS-Outlabels`，它们支持复杂的标签放置选项。这两个插件将在[第6章](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml)，*配置样式和交互性*中探讨。
- en: Preparing data for pie and doughnut charts
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备饼图和环形图的图表数据
- en: 'Pie charts can''t be used with any type of data. They should only be used to
    display part-whole relationships and contain not much more than half a dozen data
    values. The following screenshot shows what happens when you create a pie or doughnut
    chart with too much data. In this example, we loaded a doughnut chart containing
    the populations of almost 200 countries. It may be art, but not really a useful
    visualization:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图不能用于任何类型的数据。它们应该仅用于显示部分与整体的关系，并且包含的数据值不应超过六七个。以下截图显示了当你创建包含过多数据的饼图或环形图时会发生什么。在这个例子中，我们加载了一个包含近
    200 个国家人口的环形图。它可能是一种艺术，但并不是真正有用的可视化：
- en: '![](img/fdf60085-508b-47c5-8815-7dd9c584c601.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fdf60085-508b-47c5-8815-7dd9c584c601.png)'
- en: 'Abusing a pie chart (code: Pie/pie-4-evilpie.html; see also *Pie/pie-6-evilpie.html)*'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 滥用饼图（代码：Pie/pie-4-evilpie.html；另见 *Pie/pie-6-evilpie.html)*
- en: Even if you reduce this dataset to less than 20 values, it would still not be
    efficiently displayed in a pie chart. There aren't enough colors, and it would
    be difficult to place labels inside or beside so many slices, not considering
    the fact that angles are much harder to compare. In such cases, you should switch
    to a bar chart, which can be used to efficiently compare 20 values or even more.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 即使将此数据集减少到不到 20 个值，它仍然不能有效地在饼图中显示。颜色不够，而且很难在这么多切片中放置标签，更不用说角度比较起来要困难得多。在这种情况下，你应该切换到条形图，它可以有效地比较
    20 个值甚至更多。
- en: 'The following screenshot shows a bar chart created with the same data, filtered
    to show the 35 most populous countries:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用相同数据创建的条形图，过滤以显示 35 个人口最多的国家：
- en: '![](img/67232af8-3a59-4064-b119-482277744876.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67232af8-3a59-4064-b119-482277744876.png)'
- en: 'A bar chart is a better choice than a pie chart to compare large datasets (code:
    Pie/pie-5-evilpie-as-bar.html; see also *Pie/pie-7-evilpie-as-bar.html)*'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 与饼图相比，条形图更适合比较大型数据集（代码：Pie/pie-5-evilpie-as-bar.html；另见 *Pie/pie-7-evilpie-as-bar.html)*
- en: If you still want to use a pie chart, you need to reduce the data sample, but
    it's not enough to simply filter out data (for example, by including only the
    most populous countries). Since a pie chart should display part-whole relationships,
    but you also need to add the excluded items (for example, add up the populations
    of the smaller countries, as in the CO2 emissions example).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然想使用饼图，你需要减少数据样本，但仅仅过滤数据（例如，只包括人口最多的国家）是不够的。因为饼图应该显示部分与整体的关系，但你还需要添加被排除的项目（例如，将小国的人口加起来，就像在二氧化碳排放的例子中那样）。
- en: 'This is done in the following example: it loads and parses a CSV data file,
    sorts the data by population, creates an array of objects with the largest countries,
    and finally, adds up all of the other populations into a new others entry.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中执行此操作：它加载并解析 CSV 数据文件，按人口排序数据，创建包含最大国家的对象数组，最后将所有其他人口加到新的 `others` 条目中。
- en: 'To parse the CSV, we are using the popular `PapaParse` library ([github.com/mholt/PapaParse](http://github.com/mholt/PapaParse)).
    You can include it in your page using the following code:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 解析 CSV 时，我们使用流行的 `PapaParse` 库 ([github.com/mholt/PapaParse](http://github.com/mholt/PapaParse)).
    你可以使用以下代码将其包含在你的页面中：
- en: '[PRE29]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`PapaParse` reads CSV and transforms the data into a JavaScript array, where
    each row is an object with the column headers as keys. To obtain the data from
    any CSV file where the first row contains the headers (which is the most common
    case), use the following code:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`PapaParse` 读取 CSV 并将数据转换为 JavaScript 数组，其中每行都是一个对象，列标题作为键。要从任何包含标题的第一行（这是最常见的情况）的
    CSV 文件中获取数据，请使用以下代码：'
- en: '[PRE30]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now, for each array item, you can access the values using `item.header` or `item['header']`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于每个数组项，你可以使用 `item.header` 或 `item['header']` 访问值。
- en: 'The following code loads the CSV, parses it, and calls a function to reduce
    the data. The reduced data is then passed to the `drawData()` function that will
    use Chart.js to draw the pie, as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码加载 CSV，解析它，并调用一个函数来减少数据。然后，减少后的数据传递给 `drawData()` 函数，该函数将使用 Chart.js 绘制饼图，如下所示：
- en: '[PRE31]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `reduceData()` function filters the countries with the largest population
    (that is, by sorting by population, and then slicing the array), and adds the
    populations of the remaining countries to create the `others` entry, as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`reduceData()` 函数通过按人口排序并切片数组来过滤人口最多的国家，并将剩余国家的人口添加到 `others` 条目中，如下所示：'
- en: '[PRE32]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `drawData()` function prepares the data so that it can be used by Chart.js,
    and uses the result to populate the chart''s labels, `datasets[0].data` and `datasets[0].backgroundColor`,
    as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`drawData()` 函数准备数据以便 Chart.js 使用，并使用结果填充图表的标签、`datasets[0].data` 和 `datasets[0].backgroundColor`，如下所示：'
- en: '[PRE33]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can see the full code in `Pie/pie-8-filter.html`. The final result, showing
    six countries compared to all of the others, is shown as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `Pie/pie-8-filter.html` 中查看完整代码。以下结果图表显示了六个国家与其他所有国家的比较：
- en: '![](img/aa763a56-cc19-4d17-8c60-a4e8d75cabf5.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa763a56-cc19-4d17-8c60-a4e8d75cabf5.png)'
- en: 'A doughnut chart comparing the most populous countries with the rest of the
    world (code: *Pie/pie-8-filter.html)*'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 一个比较人口最多的国家和世界上其他国家的环图（代码：*Pie/pie-8-filter.html)*
- en: Changing the circumference
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改变圆周
- en: Pie and doughnut charts don't have to be complete circles. You can set the value
    of the `circumference` property (in radians) and use less than 360 degrees (*2
    * Math.PI* radians). Using `Math.PI` as the circumference, you get a half-pie
    or half-doughnut chart. These charts are good to compare two or three values and
    may fit better in reduced spaces.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图和环图不必是完整的圆。您可以设置 `circumference` 属性的值（以弧度为单位）并使用小于360度的值（*2 * Math.PI* 弧度）。使用
    `Math.PI` 作为圆周，您可以得到半饼图或半环图。这些图表适合比较两个或三个值，并且可能更适合在较小的空间中使用。
- en: 'We modified the previous chart in the following example. It compares the 2017
    populations of China and India with the rest of the world using a half-doughnut.
    The following fragment contains the relevant code. You can see the full code in
    `Pie/pie-9-halfpie.html`:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们修改了之前的图表。它使用半饼图比较了中国和印度的2017年人口与世界上其他国家的人口。以下片段包含相关代码。您可以在 `Pie/pie-9-halfpie.html`
    中查看完整代码：
- en: '[PRE34]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The resulting chart is shown as follows. The `rotation` property doesn''t contain
    the amount of rotation, but a position (that is, the starting angle from where
    the arcs are drawn), and the default rotation position is *-Math.PI/2*, so the
    value of *Math.PI/2* actually rotates it 180 degrees, not 90 degrees, as it might
    seem (for that, use Math.PI to move it to a perpendicular position):'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 结果图表如下所示。`rotation` 属性不包含旋转量，而是一个位置（即绘制弧线的起始角度），默认旋转位置是 *-Math.PI/2*，因此 *Math.PI/2*
    的值实际上旋转了180度，而不是90度，这可能与预期不同（为了达到垂直位置，请使用 Math.PI）：
- en: '![](img/276597cc-77f0-466a-9836-078add048752.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](img/276597cc-77f0-466a-9836-078add048752.png)'
- en: 'Changing the circumference and rotation properties of a doughnut chart (code:
    *Pie/pie-9-halfpie.html)*'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 改变饼图的圆周和旋转属性（代码：*Pie/pie-9-halfpie.html)*
- en: Pie and doughnut charts with multiple datasets
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包含多个数据集的饼图和环图
- en: Normally, you only display a single dataset with a pie chart, but multiple datasets
    are supported. They are displayed as concentric circles. Labeling the data in
    this case is mandatory, since it's impossible to visually compare the sizes of
    the slices.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您只使用饼图显示单个数据集，但支持多个数据集。它们显示为同心圆。在这种情况下，标记数据是强制性的，因为无法直观地比较切片的大小。
- en: 'The following example uses two datasets containing country population estimates
    from 1980 and 2015 to create a doughnut chart with the 1980 values in the inner
    circle, and the 2015 values in the outer circle. The relevant code fragments are
    shown as follows. You can see the full code in `Pie/pie-10-multiset.html`:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用包含1980年和2015年国家人口估计的两个数据集来创建饼图，1980年的值在内部圆圈中，2015年的值在外部圆圈中。以下代码片段如下所示。您可以在
    `Pie/pie-10-multiset.html` 中查看完整代码：
- en: '[PRE35]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The label in the center of the doughnuts was created by drawing directly on
    the canvas. If you need to do that, you must use a callback. The `onComplete`
    callback (configured under `options.animation`) is called when the chart has finished
    drawing. If you don't use a callback, Chart.js may erase whatever you draw. This
    behavior will be detailed in [Chapter 6](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml),
    *Configuring Styles and*
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图和环图中心的标签是通过直接在画布上绘制创建的。如果您需要这样做，必须使用回调。当图表绘制完成时，会调用 `onComplete` 回调（在 `options.animation`
    下配置）。如果您不使用回调，Chart.js 可能会擦除您所绘制的任何内容。此行为将在[第6章](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml)，*配置样式和*
- en: '*Interactivity*.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '*交互性*。'
- en: 'The result is shown as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![](img/88acb19f-9e25-482d-9f08-dfbb9d327478.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88acb19f-9e25-482d-9f08-dfbb9d327478.png)'
- en: 'A doughnut chart with two datasets (code: Pie/pie-10-multiset.html)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含两个数据集的饼图（代码：Pie/pie-10-multiset.html）
- en: 'These charts may be visually attractive, but they can introduce some serious
    perception errors. The outer arcs are perceived to be much larger than they actually
    are. It''s an optical illusion. A population growth in the preceding chart won''t
    be noticed unless the difference is significant. You can visualize this problem
    if you invert the order of the datasets, placing the 1980 values on the outer
    circle. This is shown in the following chart, where it seems that some populations
    grew in proportion to the whole, when all of them actually decreased. This chart
    is lying to us:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图表可能视觉上吸引人，但它们可能会引入一些严重的感知错误。外弧被感知得比实际大得多。这是一种视觉错觉。在前面的图表中，人口增长不会引起注意，除非差异显著。如果您反转数据集的顺序，将1980年的值放在外圈上，就可以可视化这个问题。以下图表显示了这一点，其中似乎有些人口按整个比例增长，而实际上它们都在减少。这个图表在欺骗我们：
- en: '![](img/0f8a6030-8ed6-4d5a-a63d-95455cbaa943.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f8a6030-8ed6-4d5a-a63d-95455cbaa943.png)'
- en: 'Multiple datasets cannot be compared in pie and doughnut charts: the smaller
    values seem to be larger (code: Pie/pie-11-evilmultiset.html)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在饼图和环形图中无法比较多个数据集：较小的值看起来似乎更大（代码：Pie/pie-11-evilmultiset.html）
- en: Polar area charts
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 极坐标面积图
- en: Polar area charts are like bar charts rendered on a radial axis. A bar chart
    is usually a better option if you need precision, but you might choose a polar
    area chart for its visual effects.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 极坐标面积图类似于在径向轴上渲染的条形图。如果您需要精度，条形图通常是更好的选择，但您可能会选择极坐标面积图来获得其视觉效果。
- en: To create a polar area chart, you set up the data the same way you would for
    a bar chart, then change the type to `polarArea`. As in the radar chart, there
    is only one `scale` property and axis to configure.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建极坐标面积图，您需要以与条形图相同的方式设置数据，然后将类型更改为 `polarArea`。与雷达图一样，只有一个 `scale` 属性和轴需要配置。
- en: In the following example, we use a polar area chart to compare the volumes of
    the world's oceans. It is based on the bar chart with the same data we created
    in [Chapter 3](af85e307-a9bc-47c5-be74-52727cbb7c2e.xhtml),* Chart.js – Quick
    Start*.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们使用极坐标面积图来比较世界海洋的体积。它是基于我们在[第3章](af85e307-a9bc-47c5-be74-52727cbb7c2e.xhtml)，*Chart.js
    – 快速入门*中创建的具有相同数据的条形图。
- en: '[PRE36]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You can see the full code in `PolarArea/polar-area-1.html`. The result is shown
    as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `PolarArea/polar-area-1.html` 中查看完整的代码。结果如下所示：
- en: '![](img/6d563c44-54f2-440c-b273-b6790d900a3d.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d563c44-54f2-440c-b273-b6790d900a3d.png)'
- en: 'A polar area chart comparing the volume of water in each ocean (code: *PolarArea/polar-area-1.html)*'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 比较每个海洋中水体积的极坐标面积图（代码：*PolarArea/polar-area-1.html)*
- en: Polar area charts share the same dataset properties as pie and doughnut charts,
    which consist mostly of properties to set the border widths, border colors, and
    fill colors of the slices.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 极坐标面积图与饼图和环形图共享相同的数据集属性，主要由设置切片边框宽度、边框颜色和填充颜色的属性组成。
- en: 'There is one configuration option specific to polar area charts, listed as
    follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 极坐标面积图有一个特定的配置选项，如下所示：
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **值** | **描述** |'
- en: '| `startAngle` | Number | The angle to start drawing the arcs |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| `startAngle` | 数字 | 开始绘制弧线的角度 |'
- en: Configuration options for polar area charts
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 极坐标面积图的配置选项
- en: You can draw polar area charts containing multiple datasets, but they will be
    overlapped. The current version of Chart.js (2.7.2) does not support stacking
    or other ways of showing multiple datasets in these charts. You can also see `PolarArea/polar-area-2.html`
    and `polar-area-3.html` for other ways to configure polar area charts.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以绘制包含多个数据集的极坐标面积图，但它们将会重叠。当前版本的 Chart.js（2.7.2）不支持在这些图表中堆叠或其他显示多个数据集的方式。您还可以查看
    `PolarArea/polar-area-2.html` 和 `polar-area-3.html` 以了解其他配置极坐标面积图的方法。
- en: Scatter and bubble charts
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 散点图和气泡图
- en: Scatter charts or scatterplots are very popular in data science and statistics.
    They can be used to explore various kinds of correlations between variables, revealing
    trends, clusters, linear, and non-linear relationships. It's an essential tool
    in problem solving procedures and decision-making.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图或散点图在数据科学和统计学中非常受欢迎。它们可以用来探索变量之间的各种相关性，揭示趋势、集群、线性关系和非线性关系。它是问题解决程序和决策过程中的一个基本工具。
- en: Scatter charts display the correlation between two variables by plotting their
    points in a system of Cartesian coordinates. Additional variables can be displayed
    by using different shapes and/or colors for the points.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图通过在笛卡尔坐标系中绘制两个变量的点来显示它们之间的相关性。可以通过使用不同的形状和/或颜色来显示额外的变量。
- en: A bubble chart is a scatter chart that uses circles with different radii to
    display an additional variable. It's also common to overlap scatter charts with
    other charts, such as line and bar charts, as to emphasize patterns and compare
    raw data with estimates, such as trendlines (best-fit).
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 气泡图是一种散点图，它使用不同半径的圆来显示额外的变量。将散点图与其他图表（如折线图和柱状图）重叠也是常见的，这样可以强调模式并比较原始数据与估计值（如趋势线，最佳拟合）。
- en: Creating a scatter chart
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建散点图
- en: 'The `type` property should be `scatter`. Scatter charts support the same properties
    as line charts, but instead of an array of numbers, the data property should contain
    an array of point objects with the following structure:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`type`属性应该是`scatter`。散点图支持与折线图相同的属性，但数据属性应包含一个包含以下结构的点对象数组：'
- en: '[PRE37]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following example creates a simple scatter chart with a single dataset.
    The data values consist of a sequence of numbers generated for the *x* property,
    and the sine function of each number for the *y* property:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例创建了一个包含单个数据集的简单散点图。数据值由为*x*属性生成的数字序列组成，以及每个数字的正弦函数为*y*属性：
- en: '[PRE38]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You can see the full code in `ScatterBubble/scatter-1.html`. The result is
    shown as follows:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`ScatterBubble/scatter-1.html`中查看完整的代码。结果如下所示：
- en: '![](img/981fdbb7-7a24-4e0f-94e7-43d4671c9de2.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](img/981fdbb7-7a24-4e0f-94e7-43d4671c9de2.png)'
- en: 'A simple scatter chart with x = n and y = sin(x) (code: *ScatterBubble/scatter-1.html)*'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的散点图，其中x = n，y = sin(x)（代码：*ScatterBubble/scatter-1.html*）
- en: 'Multiple datasets can be displayed on the same chart. This following example
    generates two more mathematical functions and displays their graphs using the
    same scales:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在同一张图表上显示多个数据集。以下示例生成两个额外的数学函数，并使用相同的刻度显示它们的图形：
- en: '[PRE39]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You can see the full code in `ScatterBubble/scatter-3.html`. The result is
    shown as follows:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`ScatterBubble/scatter-3.html`中查看完整的代码。结果如下所示：
- en: '![](img/67da03c1-1cab-41e2-a1c5-9d5ad18de72e.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67da03c1-1cab-41e2-a1c5-9d5ad18de72e.png)'
- en: 'Scatterplot with multiple datasets (code: *ScatterBubble/scatter-3.html)*'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 包含多个数据集的散点图（代码：*ScatterBubble/scatter-3.html*）
- en: Revealing correlations with scatter charts
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用散点图揭示相关性
- en: Scatter charts are great to show correlations between data. The following example
    will combine NASA/GISS global temperature data (`Data/monthly_json.json`) and
    CO2 emission data (`Data/co2_mm_mlo.csv`) measured in Mauna Loa, Hawaii, to discover
    if there is any correlation between the two. Since the Mauna Loa data is only
    available after 1959, we will only use the GISS data after that year.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图非常适合展示数据之间的相关性。以下示例将结合NASA/GISS全球温度数据（`Data/monthly_json.json`）和夏威夷莫纳罗亚山测量的CO2排放数据（`Data/co2_mm_mlo.csv`），以探究两者之间是否存在相关性。由于莫纳罗亚山的数据仅从1959年后可用，我们将仅使用该年份之后的GISS数据。
- en: 'Since we must load multiple files, we will use JavaScript promises. Each data
    source is parsed and the data is sent to the `combine()` function, which returns
    an array that can be used by Chart.js, as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们必须加载多个文件，我们将使用JavaScript承诺。每个数据源被解析，并将数据发送到`combine()`函数，该函数返回一个可以由Chart.js使用的数组，如下所示：
- en: '[PRE40]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `combine()` function iterates through each object in the CO2 data, extracts
    the year and the month and uses it to obtain the corresponding mean temperature,
    then creates an object with the CO2 and temperature for each month/year. Each
    object is pushed into an array that is returned, as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`combine()`函数遍历CO2数据中的每个对象，提取年份和月份，并使用它来获取相应的平均温度，然后创建一个包含每个月/年的CO2和温度的对象。每个对象被推入一个返回的数组中，如下所示：'
- en: '[PRE41]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following `drawData()` function uses the array of objects that contains `co2`
    and `temp` properties to draw the scatter chart by copying these values into `{x,y}`
    objects:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`drawData()`函数使用包含`co2`和`temp`属性的数组对象来绘制散点图，通过将这些值复制到`{x,y}`对象中来实现：
- en: '[PRE42]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You can see the full code in `ScatterBubble/scatter-4.html`. The result is
    shown in the following chart and reveals a possible relationship between growing
    CO2 emissions and global temperatures. It also shows some data that we should
    have filtered out (if we had read the documentation that comes with the data),
    such as missing CO2 measurements, which appear as *-99.99*:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`ScatterBubble/scatter-4.html`中查看完整的代码。以下图表显示了结果，并揭示了增长中的CO2排放量和全球温度之间可能存在的关系。它还显示了我们应该过滤掉的一些数据，例如缺失的CO2测量值，这些值显示为*-99.99*：
- en: '![](img/48d10353-e78c-49c0-a587-fb29b1e770bc.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48d10353-e78c-49c0-a587-fb29b1e770bc.png)'
- en: 'Comparing CO2 emissions (source: Mauna Loa) and global temperature (source:
    NASA; code: *ScatterBubble/scatter-4.html)*'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 比较二氧化碳排放量（来源：马乌纳洛亚）和全球温度（来源：NASA；代码：*ScatterBubble/scatter-4.html*）
- en: 'We can filter out the bad measurements by adding an extra predicate to the
    `co2Data` filter, as follows:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向`co2Data`过滤器添加额外的谓词来过滤掉不良的测量值，如下所示：
- en: '[PRE43]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'It''s also a good idea to label the axes, so the viewer knows what kind of
    data is being compared. The following configuration adds axis titles and also
    a title for the chart. The full code is in `ScatterBubble/scatter-5.html`:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 也是一个好主意为坐标轴添加标签，这样观众就能知道正在比较的数据类型。下面的配置添加了坐标轴标题以及图表的标题。完整的代码位于`ScatterBubble/scatter-5.html`中：
- en: '[PRE44]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The final chart is shown as follows:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的图表如下所示：
- en: '![](img/741dddba-ae85-4a90-b258-15483c9e31fa.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](img/741dddba-ae85-4a90-b258-15483c9e31fa.png)'
- en: 'CO2 vs temperature scatter chart after filtering out wrong measurements (code:
    *ScatterBubble/scatter-5.html)*'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤掉错误测量值后的CO2与温度散点图（代码：*ScatterBubble/scatter-5.html*）
- en: Scatter charts with large quantities of data
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大量数据的散点图
- en: 'Scatter charts are great to reveal hidden patterns in large datasets. In the
    following example, we will use a huge file obtained from a public database ([geonames.org](http://geonames.org))
    to plot a scatter chart showing the position of cities based on their latitude
    and longitude. The file contains a list of locations with populations above 15,000
    (`Data/cities_15000.csv`). It contains over 100,000 entries (and because of this,
    it will take a few seconds to load). This is the general structure of the CSV
    file:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图非常适合揭示大型数据集中的隐藏模式。在下面的例子中，我们将使用从公共数据库（[geonames.org](http://geonames.org)）获得的大量文件来绘制散点图，显示基于纬度和经度的城市位置。该文件包含人口超过15,000的地点列表（`Data/cities_15000.csv`）。它包含超过10万个条目（因此，加载将需要几秒钟）。这是CSV文件的一般结构：
- en: '[PRE45]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'To build the scatter chart, we need to process the file and convert latitudes
    and longitudes into the point data format. The axes also have to be configured
    to represent a cylindrical projection of the globe (limited by longitude: *-180*
    to *180* and latitude: *-90* to *90*). The following code configures the scales,
    loads the files, parses the data, builds the point object for each coordinate
    pair, and draws the chart:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建散点图，我们需要处理文件并将纬度和经度转换为点数据格式。坐标轴也必须配置为表示地球的圆柱投影（经度限制为*-180*到*180*，纬度限制为*-90*到*90*）。下面的代码配置了刻度，加载了文件，解析了数据，为每个坐标对创建了点对象，并绘制了图表：
- en: '[PRE46]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You can see the full code in `ScatterBubble/scatter-6-world.html`. The result
    reveals a surprising hidden pattern (and correlation between land and humans).
    You can move the mouse over the points and it will reveal the name and coordinates
    of the location (this was configured using tooltip callbacks):'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`ScatterBubble/scatter-6-world.html`中查看完整的代码。结果显示了一个令人惊讶的隐藏模式（以及陆地和人类之间的相关性）。您可以将鼠标移到点上，它将显示位置名称和坐标（这是使用提示回调函数配置的）：
- en: '![](img/0010d633-267c-457b-b4f4-8c237c1a5a85.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0010d633-267c-457b-b4f4-8c237c1a5a85.png)'
- en: 'Scatter chart showing the position of over 100,000 human-populated locations
    (code: *ScatterBubble/scatter-6-world.html)*'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 显示超过10万个有人类居住地点位置的散点图（代码：*ScatterBubble/scatter-6-world.html*）
- en: Bubble charts
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 气泡图
- en: 'Bubble charts are just like scatter charts, but they can display an extra variable
    in the diameter of the point (or shape). The `type` property should be `bubble`.
    Although they share the same dataset properties as scatter charts, most of them
    can receive callbacks in bubble charts, which allow a higher degree of interactivity.
    The data structure for bubble charts contains three properties, as follows:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 气泡图就像散点图一样，但它们可以在点的直径（或形状）中显示额外的变量。`type`属性应该是`bubble`。尽管它们与散点图共享相同的数据集属性，但大多数气泡图可以接收回调函数，这允许更高的交互性。气泡图的数据结构包含三个属性，如下所示：
- en: '[PRE47]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The properties `x` and `y` are scaled automatically when the chart is scaled.
    The `r` property is the raw radius of the circle in pixels and is not scaled (but
    you can configure a callback if you need to scale it).
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 当图表缩放时，`x`和`y`属性会自动缩放。`r`属性是像素中的原始圆半径，不会缩放（但您可以在需要缩放时配置回调函数）。
- en: 'The following code (`ScatterBubble/bubble-1.html`) creates a simple bubble
    chart with a single dataset containing five entries. The color of each bubble
    is generated automatically according to the radius of the bubble using a callback:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码（`ScatterBubble/bubble-1.html`）创建了一个包含五个条目的简单气泡图，每个气泡的颜色根据气泡的半径自动生成，使用回调函数：
- en: '[PRE48]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The result is shown as follows. Note that if you resize the chart, the bubble
    sizes don''t change:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示。请注意，如果您调整图表大小，气泡大小不会改变：
- en: '![](img/3d415249-e7e3-4a19-a01f-9e88dee674ff.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d415249-e7e3-4a19-a01f-9e88dee674ff.png)'
- en: 'A simple bubble chart with one dataset (code: *ScatterBubble/bubble-1.html)*'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的气泡图，包含一个数据集（代码：*ScatterBubble/bubble-1.html)*
- en: Bubble charts are as not as informative as scatter charts when displaying large
    amounts of data, but they can still reveal interesting information. The following
    example converts the previously shown scatter chart into a bubble chart using
    the population of each location to generate the radius of the bubble.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 当显示大量数据时，气泡图不如散点图信息丰富，但它们仍然可以揭示有趣的信息。以下示例将之前显示的散点图转换为气泡图，使用每个位置的population生成气泡的半径。
- en: 'Since bubbles may overlap, the dataset is sorted so that the smaller populations
    stay on top. The `scaleR()` function creates a simple scale to convert populations
    into circle radii, as follows:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 由于气泡可能会重叠，数据集被排序，使得人口较少的气泡保持在顶部。`scaleR()`函数创建了一个简单的比例，将population转换为圆的半径，如下所示：
- en: '[PRE49]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The `drawData()` function creates a data point object for the bubble chart,
    with three properties `x`, `y` containing the longitudes and latitudes, and the
    scaled population converted into a radius, as follows:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`drawData()`函数为气泡图创建一个数据点对象，包含三个属性`x`、`y`，包含经纬度，以及缩放后的population转换为半径，如下所示：'
- en: '[PRE50]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The data object includes the data array as its data, and configures the `backgroundColor`
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 数据对象包含数据数组作为其数据，并配置了`backgroundColor`
- en: 'property as a callback that returns different colors for the bubbles depending
    on the value of the radius, as follows:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 将属性作为回调函数返回不同颜色的气泡，取决于半径的值，如下所示：
- en: '[PRE51]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You can see the full code in `ScatterBubble/bubble-2.html`. The result is shown
    as follows:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`ScatterBubble/bubble-2.html`中看到完整的代码。结果如下所示：
- en: '![](img/0993b6e9-4d5e-4788-814a-b2a9f4546fe4.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0993b6e9-4d5e-4788-814a-b2a9f4546fe4.png)'
- en: 'A bubble map of cities. The bubble''s radius is proportional to the population
    of each location (code: *ScatterBubble/bubble-2.html)*'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 城市的气泡地图。气泡的半径与每个位置的population成比例（代码：*ScatterBubble/bubble-2.html)*
- en: Summary
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we learned how to create all of the standard types of charts
    supported by Chart.js: bar, horizontal bar, line, area, pie, doughnut, polar area,
    radar, scatter, and bubble charts.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建Chart.js支持的所有标准图表类型：柱状图、水平柱状图、折线图、面积图、饼图、环形图、极坐标面积图、雷达图、散点图和气泡图。
- en: Different charts are more suited for certain types of datasets and purposes
    than others. We explored the same examples with different charts and saw how each
    type communicates different aspects of the data, revealing correlations, proportions,
    trends, and hidden patterns.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的图表更适合某些类型的数据集和目的，而不是其他图表。我们用不同的图表探索了相同的例子，并看到了每种类型如何传达数据的不同方面，揭示相关性、比例、趋势和隐藏的模式。
- en: Each chart was introduced with a simple example, but we also created some real
    world visualizations using public CSV and JSON data, which needed to be downscaled,
    combined, filtered, and mapped to data formats expected by Chart.js.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 每个图表都通过一个简单的示例进行介绍，但我们还创建了一些使用公共CSV和JSON数据的真实世界可视化，这些数据需要缩小、合并、过滤并映射到Chart.js期望的数据格式。
- en: We also experimented with several configuration properties, for graphical elements,
    datasets, and charts, allowing a high degree of customization. Many of these will
    be explored in greater detail in the next chapters.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还尝试了几个配置属性，包括图形元素、数据集和图表，允许高度定制。其中许多将在下一章中更详细地探讨。
- en: References
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '**Books and websites**:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '**书籍和网站**：'
- en: 'Chart.js official documentation and samples: [https://www.chartjs.org/docs/latest/](https://www.chartjs.org/docs/latest/)'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chart.js官方文档和示例：[https://www.chartjs.org/docs/latest/](https://www.chartjs.org/docs/latest/)
- en: PieceLabel plugin (`Chart.PieceLabel.js`) [https://github.com/emn178/Chart.PieceLabel.js](https://github.com/emn178/Chart.PieceLabel.js)
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PieceLabel插件（`Chart.PieceLabel.js`）[https://github.com/emn178/Chart.PieceLabel.js](https://github.com/emn178/Chart.PieceLabel.js)
- en: '**Data sources**:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据来源**：'
- en: 'Mauna Loa CO2 measurements: `Chapter04/Data/co2_mm_mlo.csv`*.* Dr. Pieter Tans,
    NOAA/ESRL ([www.esrl.noaa.gov/gmd/ccgg/trends/](http://www.esrl.noaa.gov/gmd/ccgg/trends/))
    and Dr. Ralph Keeling, Scripps Institution of Oceanography ([scrippsco2.ucsd.edu/](http://scrippsco2.ucsd.edu/)).'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mauna Loa CO2测量数据：`Chapter04/Data/co2_mm_mlo.csv`*.* Pieter Tans博士，NOAA/ESRL
    ([www.esrl.noaa.gov/gmd/ccgg/trends/](http://www.esrl.noaa.gov/gmd/ccgg/trends/))
    和 Ralph Keeling博士，斯克里普斯海洋研究所 ([scrippsco2.ucsd.edu/](http://scrippsco2.ucsd.edu/))。
- en: 'Ocean temperatures: `Chapter04/Data/monthly_json.json`. GISTEMP Team, *2019: GISS
    Surface Temperature Analysis (GISTEMP)*. NASA Goddard Institute for Space Studies.
    Dataset accessed 2019-02-01 at [https://data.giss.nasa.gov/gistemp/](https://data.giss.nasa.gov/gistemp/).
    Hansen, J., R. Ruedy, M. Sato, and K. Lo, 2010: Global surface temperature change, Rev.
    Geophys., 48, RG4004, doi:10.1029/2010RG000345.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 海洋温度：`Chapter04/Data/monthly_json.json`。GISTEMP团队，*2019：GISS地表温度分析（GISTEMP）*。NASA戈达德太空研究所。数据访问时间：2019-02-01，[https://data.giss.nasa.gov/gistemp/](https://data.giss.nasa.gov/gistemp/)。Hansen,
    J., R. Ruedy, M. Sato, and K. Lo, 2010：全球地表温度变化，Rev. Geophys., 48, RG4004, doi:10.1029/2010RG000345。
- en: 'Geographical database: `Chapter02/Data/cities1000.csv`. GeoNames geographical
    database: [www.geonames.org](http://www.geonames.org).'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理数据库：`Chapter02/Data/cities1000.csv`。GeoNames地理数据库：[www.geonames.org](http://www.geonames.org)。
- en: 'CO2 emissions per country in kilotons (1960-2014): `Chapter04/world_bank_co2_kt.json`.
    *World bank public data.* [https://data.worldbank.org](https://data.worldbank.org)'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每国二氧化碳排放量（1960-2014）：`Chapter04/world_bank_co2_kt.json`。*世界银行公开数据*。[https://data.worldbank.org](https://data.worldbank.org)
- en: 'World population: `Chapter04/WPP2017_UN.csv`. *United Nations World Population
    Prospects 2017*. [https://www.un.org](https://www.un.org)'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 世界人口：`Chapter04/WPP2017_UN.csv`。*联合国2017年世界人口展望*。[https://www.un.org](https://www.un.org)
