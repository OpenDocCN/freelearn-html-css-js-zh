- en: Creating Charts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers several charts that can be created with Chart.js to efficiently
    communicate quantitative information and relationships. The choice of a chart
    depends on the type of data, how each set of values is related to one another,
    and what kind of relationships you want to show. In the previous chapter, we learned
    how to efficiently display data in bar charts and compare quantitative information
    related to different categories. In this chapter, you will create line and radar
    charts to compare sequences of one-dimensional data, pie and doughnut charts to
    compare proportions, scatterplots and bubble charts to represent two or more dimensions,
    and polar area charts to display quantitative data in a radial grid.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Line and area charts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Radar and polar area charts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pie and doughnut charts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scatterplots and bubble charts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line and area charts
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Line charts are used to display a correlation between two sets of data, where
    one of the sets should contain categorical or ordered data (ascending or descending).
    The most common application of a line chart is th*e* time series*,* where the
    ordered set consists of instants of time. If arbitrary categories are used, it
    should be possible to establish some kind of connected sequence with them (for
    example, an ordered sequence of steps).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Line charts display estimates. The points that correlate the datasets are connected
    with straight or curved lines that represent estimated values. Line charts can
    be used to predict intermediate values and reveal trends.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple line chart
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like the bar chart, you need to load the Chart.js JavaScript library,
    place a `<canvas>` object somewhere in the `<body>` of your page, and create a
    new chart referring to the ID of the canvas, and an object with the chart data.
    The `chart` object should specify `line` as the chart type. The following code
    is the minimum you need to create a line chart with the global defaults provided
    by Chart.js:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This data contains average global temperatures for 2016, obtained from NASA.
    The result is shown as follows. As you can see, the default line chart has a gray
    line and a gray fill. You can change these defaults using the *options* or *dataset*
    configurations. The full code is in `LineArea/line-1.html`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d50c0ef7-cc8f-43d0-a3b7-4854e0925677.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: 'Simple line chart with default Chart.js properties showing average global temperatures
    in 2016 (code: *LineArea/line-1.html)*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Dataset configuration
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dataset-specific options can be applied to control attributes, such as color
    and width of each line. Adding a `borderColor` attribute to the dataset will set
    the color of the line (and legend box), as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following chart shows the effect of setting `borderColor` and `backgroundColor`
    for a dataset. This configuration only affects one dataset. You can also configure
    properties that affect all datasets. In this example, the legend was also removed
    using the options configuration (explained in a separate section). You can see
    the full code in `LineArea/line-2.html`, as shown in the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7be3bf28-c583-4fde-ba9f-72229ac1082e.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: 'Simple line chart with average global temperatures measured in 2016 (code:
    *LineArea/line-2.html)*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'The following listed dataset properties can be declared for each object of
    the `datasets` array. Many are also shared by other charts that display numerical
    data, such as radar, scatter, and bubble charts:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
- en: '| `data` | `Number[]` | An array of numbers containing the data to display
    (mandatory). |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
- en: '| `label` | `String` | A label for the dataset (appears in legend and tooltips).
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
- en: '| `backgroundColor` | A CSS color property value string | The fill color under
    (or above) the line. Position depends on the `fill` property. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
- en: '| `borderColor` | A CSS color property value string | The color of the line.
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
- en: '| `borderWidth` | `Number` | The width of the line in pixels. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
- en: '| `borderDash` | `Number[]` | The canvas `setLineDash` method. An array describing
    the width of alternated line and space. For example, `[5, 10]` will create a dashed
    line with 5 pixel dashes and 10 pixel spaces. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
- en: '| `borderDashOffset` | `Number` | The canvas `lineDashOffset` property. An
    offset for line dashes. If zero (default), a `[10,10]` dash will start with a
    `10` pixel line. If `10`, it will start with the 10 pixel space. If `5`, it will
    start with a `5` pixel line, followed by a `10` pixel space, `10` pixel line,
    and so on. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
- en: '| `borderJoinStyle` | `''bevel''`, `''round''`, or `''miter''` (default) |
    The canvas `lineJoin` property. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
- en: '| `borderCapStyle` | `''butt''` (default), `''round''`, or `''square''` | The
    canvas `lineCap` property. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
- en: '| `pointBackgroundColor` | `Color` or `Color[]` | The background color of the
    point. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
- en: '| `pointBorderColor` | `Color` or `Color[]` | The border color of the point.
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
- en: '| `pointBorderWidth` | `Number` or `Number[]` | The border width of the point.
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: '| `pointRadius` | `String` or `String[]` | The radius of the point. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| `pointStyle` | `circle `(default), `cross`, `line`, `crossRot`, `dash`, `rectRounded`,
    `rectRot`, `star`, or `triangle` | The style of the point. A string or a DOM reference
    to an `Image` object. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: '| `pointHoverBackgroundColor` | `Color` or `Color[]` | The background color
    of the point when the mouse hovers over it. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| `pointHoverBorderColor` | `Color` or `Color[]` | The border color of the
    point when the mouse hovers over it. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: '| `pointHoverBorderWidth` | `Number` or `Number[]` | The width of the point
    when the mouse hovers over it. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| `pointHoverRadius` | `Number` or `Number[]` | The radius of the point when
    the mouse hovers over it. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| `pointHitRadius` | `Number` or `Number[]` | The invisible radius of the point
    that reacts to the mouse hover (to show a tooltip). |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: '| `cubicInterpolationMode` | `''default''` or `''monotone''` | The default
    algorithm employs a cubic weighted interpolation. It doesn''t guarantee monotonicity
    (so, if values increase or decrease, the default algorithm may deviate from this
    behavior). |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: '| `lineTension` | `Number` | The cubic bezier line tension (this applies only
    to default interpolation mode). If zero, the chart will draw straight lines. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
- en: '| `fill` | `false`, `start`, `end`, `origin`, or dataset index (relative or
    absolute) | This property describes how the space between lines is filled. `false`
    turns the feature off. `start` fills the space above or before the line, `end`
    fills the opposite space, `origin` fills to the origin of the chart, and index
    values fill the space between two datasets. A number represents the absolute index
    of a dataset. A string containing a signed number (for example: `+2`) represents
    a relative dataset (for example: the preceding two datasets). |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
- en: '| `spanGaps` | `''bottom''`, `''left''`, `''top''`, or `''right''` | If `false`,
    a null value or *NaN* (not zero) will cause a break in the line. The default is
    `false`. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
- en: '| `showLine` | Boolean | If `false`, the line for this dataset is not shown
    (only points will be displayed). |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
- en: '| `steppedLine` | `true` = `''before''`, `false` (default), or `''after''`
    | Draws line as a sequence of steps. If `true` or `before`, the initial point
    is used. If `after`, the final value is used. The default is `false`, which disables
    this algorithm. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| `yAxisID` and `xAxisID` | An axis ID (see [Chapter 7,](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml)* Advanced
    Chart.js*) | This is used in axis configuration. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: Dataset properties for line charts
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'Data points represent the actual data in a dataset, and serve as an anchor
    for tooltips. There are several different data point styles that can be selected
    with the `pointStyle` property. These are shown as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5379279d-700a-4066-bec1-07f1682da665.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: 'Point styles available for line charts (code: *LineArea/line-3-pointStyle.html)*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Data points can also configure radius, background color, border color, and tooltip
    behaviors. In a line chart, only the points represent actual values. The lines
    are just estimates. Depending on the kind of data you are displaying or the amount
    of points you have to display, it may not make sense to show them. You might also
    want to render them differently.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several options to control the algorithm that draws the lines. The
    `lineTension` property is a number (usually between `0` and `0.5`) that configures
    the cubic Bezier interpolation of each line, drawing smooth curves between each
    point. If you set it to zero, the chart will draw straight lines, as demonstrated
    in the following diagram:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6bbd7036-f2a8-4819-8fdd-cf7db290db7c.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: 'Comparing different values for the lineTension property (code: *LineArea/line-4-tension.html)*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are plotting discrete values, you may prefer to draw the lines as *steps*.
    You can place the step on a line based on the first or the second point of the
    line segment by choosing between the `before` or `after` strategies for the `steppedLine`
    property. The effects are shown as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f283de6f-583b-4c77-96a6-481b16fc8a8d.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: 'The effect of using different strategies for the steppedLine property (code:
    LineArea/line-5-stepped.html)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Options configuration for line charts
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The same general options we used for bar charts can be used to configure line
    charts, but there are some chart specific options, too. All charts come preconfigured
    with defaults, which can be overridden using local or global properties. One of
    the ways to remove the shading for all charts that use lines (instead of setting
    transparency per dataset) is to declare the fill global property for line elements
    as false, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, you can configure options per-chart setting properties in the options
    configuration object. We improved the way our first line chart was rendered, removing
    the legend, which is not necessary as there is only one dataset (see `LineArea/line-2.html`),
    as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Data points can be completely hidden by setting `pointRadius` to zero in each
    dataset. However, you can also configure them for all datasets and charts globally
    by setting the values of the properties in `Chart.defaults.global.elements.point.radius`.
    This hides all points from all charts that use points, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you have a very large number of points, you may not want to draw the lines.
    To hide the line of a specific dataset, you can set its `showLine` property to
    `false`, but you can also configure line drawing for all lines with the options
    properties listed as follows.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'They can be set locally for the current chart or globally for all charts:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
- en: '| `showLines` | `true` or `false` | If this property is `false`, the lines
    between the points are not drawn. The default for line charts is `true`. The default for
    scatter charts is `false` . |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
- en: '| `spanGaps` | `true` or `false` | A *null* value or *NaN* (not zero) causes
    a break in the line if this property is `false`. The default is `false`. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
- en: Configuration properties for line charts
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Global options for line elements are configured using the `Chart.defaults.line`
    object. To hide all lines as default, use the following code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Locally, they are defined directly inside the `options` object. You can override
    the default in a chart with the following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Line charts with more than one dataset
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each dataset is displayed in a line chart by a separate line. The following
    example adds a new set of values to our chart, that is, the average monthly temperatures
    measured in 1880\. We can now plot both datasets in the same grid and compare
    them with the average temperatures in 2016, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The result of the preceding code is shown in the following chart. The full
    code is in `LineArea/line-6-datasets.html`. The chart reveals that the average
    temperature anomalies in 2016 are approximately 1° C higher than the measurements
    in 1880:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的结果显示在以下图表中。完整代码位于`LineArea/line-6-datasets.html`。该图表显示，2016年的平均温度异常值比1880年的测量值高约1°C：
- en: '![](img/369524ec-645e-49a1-9ef0-9058595c80d2.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/369524ec-645e-49a1-9ef0-9058595c80d2.png)'
- en: 'Line chart with two datasets (code: *LineArea/line-6-datasets.html)*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 包含两个数据集的折线图（代码：*LineArea/line-6-datasets.html*）
- en: 'The `fill` property can be used with a Boolean value to turn on/off shading
    for all lines, but it can also be used as a `dataset` property to configure a
    shading strategy for individual datasets. In this case, it receives a string identifying
    an axis line: `''start''`, `''end''`, or `''origin''`, which will shade the chart
    between the line and an axis line (smallest, largest, or zero axis, respectively).
    It can also shade between lines, specifying a relative number as a string: `''-1''`
    will shade between the current dataset and the previous one, `''+2''`, will shade
    from the current dataset to the dataset that is two positions higher in the `dataset`
    array. You can also refer to an absolute index of the `dataset` array. The following
    chart compares the effects of some of these fill strategies:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`fill`属性与布尔值一起使用来打开/关闭所有线条的阴影，但它也可以用作`dataset`属性来为单个数据集配置阴影策略。在这种情况下，它接收一个标识轴线的字符串：`'start'`、`'end'`或`'origin'`，这将使图表在线条和轴线之间（最小、最大或零轴线）着色。它也可以在线条之间着色，指定一个相对数字作为字符串：`'-1'`将在当前数据集和上一个数据集之间着色，`'+2'`将从当前数据集着色到`dataset`数组中高两个位置的数据集。您还可以引用`dataset`数组的绝对索引。以下图表比较了这些填充策略的一些效果：
- en: '![](img/0a265173-0a29-4668-bd97-2b513726430d.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0a265173-0a29-4668-bd97-2b513726430d.png)'
- en: 'Fill strategies for line charts (code: *LineArea/line-7-fill.html)*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 折线图填充策略（代码：*LineArea/line-7-fill.html*）
- en: Loading data from external files
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从外部文件加载数据
- en: Line charts are great for revealing trends and relationships in large amounts
    of data. Public data is widely available in standard formats, such as CSV and
    JSON, but usually needs to be downscaled, parsed, and converted to a data format
    expected by Chart.js before using. In this section, we will extract data from
    a public data file and turn it into a trend-revealing visualization.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 折线图非常适合揭示大量数据中的趋势和关系。公共数据通常以CSV和JSON等标准格式广泛可用，但在使用之前通常需要降级、解析并转换为Chart.js期望的数据格式。在本节中，我们将从公共数据文件中提取数据并将其转换为揭示趋势的可视化。
- en: For all examples that use external files, you need to open your files using
    a web server. Double-clicking on the HTML file and opening it in your browser
    won't work. If you are not running your files with a web server, see the section *Loading
    d**ata files*, in [Chapter 2](25edc904-3528-40cc-8865-75ccf1fc78eb.xhtml), *Technology
    Fundamentals,* on how to configure a web server for testing.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有使用外部文件的示例，您需要使用Web服务器打开您的文件。双击HTML文件并在浏览器中打开它不会起作用。如果您没有使用Web服务器运行文件，请参阅[第2章](25edc904-3528-40cc-8865-75ccf1fc78eb.xhtml)中“技术基础”部分的*加载数据文件*部分，了解如何配置Web服务器进行测试。
- en: The temperature data in the previous example was extracted from a JSON file
    obtained from the NASA **Goddard Institute for Space Studies** (**GISS**) website
    ([data.giss.nasa.gov/gistemp](http://data.giss.nasa.gov/gistemp)), which includes
    monthly measurements for each year between 1880 and 2016\. It would be very interesting
    to plot the numbers for all months in a single chart. We can do by this loading
    the file and using JavaScript to extract the data we want.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 之前示例中的温度数据是从NASA **戈达德太空研究所**（**GISS**）网站（[data.giss.nasa.gov/gistemp](http://data.giss.nasa.gov/gistemp)）获取的JSON文件中提取的，该网站包含了1880年至2016年之间每年的月度测量数据。将所有月份的数据绘制在一张图表上将会非常有趣。我们可以通过加载文件并使用JavaScript提取所需的数据来实现这一点。
- en: 'The following is a fragment of the JSON file from the GISS site. It''s also
    available from the GitHub repository for this chapter in `Data/monthly_json.json`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从GISS网站JSON文件中提取的片段。它也可以在GitHub上本章的存储库中找到，位于`Data/monthly_json.json`：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Files should be loaded asynchronously. You can use any Ajax library for this
    (for example, JQuery) or use standard ES2015 features, supported by all modern
    browsers. In this book, we will use the standard JavaScript `fetch()` command
    (in the GitHub repository, there are also JQuery alternatives for most examples).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'The `fetch()` command is reactive. It will wait until the whole file is loaded
    into memory before moving to the first `then()` step, which processes the response
    and extracts the JSON string (using the `text()` method). The second `then()`
    step only starts after all of the contents are placed in a string, made available
    for parsing in the final step, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Before using a JSON file (which is a string), we need to parse it so that it
    will become a JavaScript object, from which we can read individual fields using
    the dot operator. This can be done with the standard JavaScript command, `JSON.parse()`,
    as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you are using JQuery or some other library instead of `fetch()`, you might
    prefer to use a function that loads and parses JSON. In this case, you should
    not run the preceding command.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'The data contains two measurements, labeled `GCAC` and `GISTEMP`. We only need
    one of them, so we will filter only the objects that have `GISTEMP` as `Source`.
    We will also reverse the array so that the earlier measurements appear first in
    the chart. We can do all of this in one line, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The last line will print the following code in your browser''s JavaScript console:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, it''s easy to select the data we need to build a dataset for each year.
    The best way to do that is to create a `Map` storing each value and month, and
    use the year as a retrieval key. Split the date components to extract the year
    and month, and then store these values and the temperature anomaly in a new object
    (with properties: `year`, `month`, and `value`) for each `Map` entry.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'These steps are performed in the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The resulting map will contain one key for each year in the dataset. The value
    of each entry will be an array of 12 objects, one for each month. Use your browser's
    JavaScript console to inspect the generated map.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'The `draw()` function will convert `dataMap` into a format that Chart.js can
    use. For each entry it will create a `dataset` object and add it to the `datasets`
    array. Each `dataset` object contains a `data` property with an array of data
    values (one per month), and dataset configuration properties, such as line color
    and label. The map''s key (year) is the label, and the colors are generated in
    a gradient sequence using the year to change the hue, as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we can assemble the data object and instantiate the line chart, as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The final result is shown as follows. The full code is available in `LineArea/line-8-load-fetch.html`
    (fetch version), and `LineArea/line-8-load-jquery.html` (JQuery Version):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0a19ccb-f79b-4d17-9463-f554971970d7.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: 'Line chart using external data showing temperature variation from 1880 to 2016
    (data: NASA/GISS; and code: *LineArea/line-8-load-fetch.html* for fetch version,
    or *LineArea/line-8-load-jquery.html* for JQuery version)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用外部数据绘制的折线图，显示从1880年到2016年的温度变化（数据：NASA/GISS；代码：*LineArea/line-8-load-fetch.html*
    用于获取版本，或 *LineArea/line-8-load-jquery.html* 用于jQuery版本）
- en: 'It looks nice, but there is too much information. We could filter out some
    results, but we can also just reduce the amount of labels. The `options.legend.labels.filter`
    property supports a `callback` function that we can use to filter out selected
    labels. In the following code, it will only display labels that are 20 years apart:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错，但信息太多。我们可以过滤掉一些结果，但也可以简单地减少标签的数量。`options.legend.labels.filter`属性支持一个`callback`函数，我们可以使用它来过滤掉选定的标签。在下面的代码中，它将只显示间隔20年的标签：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The result is shown as follows and the full code is in `LineArea/line-10-filter.html`.
    Now only a few legends are shown, and the colors differ enough to relate them
    to different parts of the chart. Although there is still a lot of information
    in the chart, the colors are sufficient to reveal a trend toward increasing temperatures:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示，完整代码在`LineArea/line-10-filter.html`中。现在只显示了几个图例，颜色差异足够大，可以与图表的不同部分相关联。尽管图表中仍然有大量信息，但颜色足以揭示温度上升的趋势：
- en: '![](img/7aee54a0-e921-446d-86f1-987c5ef8bb0b.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7aee54a0-e921-446d-86f1-987c5ef8bb0b.png)'
- en: 'Line chart using external data after filtering out excess labels (code: *LineArea/line-10-filter.html)*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用外部数据过滤掉多余标签后的折线图（代码：*LineArea/line-10-filter.html)*
- en: Stacked area charts
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 堆叠面积图
- en: A line chart could be used to show how much CO2 that each country releases in
    the atmosphere each year. It would reveal if a country's emissions were increasing,
    stable, or decreasing, but such a line chart would not be very useful to show
    the *total* amount of CO2 released in the air, and how each country contributes
    to this total. You can display this kind of information using a stacked area chart.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用折线图来显示每个国家每年向大气中排放的二氧化碳量。这将揭示一个国家的排放量是增加、稳定还是减少，但这样的折线图对于显示*总*排放到空气中的二氧化碳量以及每个国家对此总量的贡献并不是非常有用。你可以使用堆叠面积图来显示这类信息。
- en: There is no special `area` type chart in Chart.js. Instead, you can create a
    simple overlapping area chart configuring the fill properties for each dataset
    in a line chart. To create a stacked area chart, you will need to set the stacked
    property to `true` in the *x* and y-axes.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Chart.js中没有特殊的`area`类型图表。相反，你可以通过配置每个数据集在折线图中的填充属性来创建一个简单的重叠面积图。要创建堆叠面积图，你需要将x轴和y轴的堆叠属性设置为`true`。
- en: 'Let''s try an example. We will use a JSON file containing data about carbon
    emissions (in kilotonnes) from selected countries from 1960 to 2014\. It''s based
    on a CSV file containing data for all countries, which is available for download
    from the World Bank public database. I created a JSON Version of this file containing
    only the six greatest polluters, adding up all of the other countries in a single
    entry. This is the file we will use `(Data/world_bank_co2_kt.json)`, as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一个例子。我们将使用一个包含1960年至2014年选定国家碳排放（以千吨为单位）数据的JSON文件。它基于包含所有国家数据的CSV文件，该文件可以从世界银行公共数据库中下载。我创建了一个只包含六个最大污染者的JSON版本文件，将其他所有国家的数据合并到一个条目中。这是我们将会使用的文件`(Data/world_bank_co2_kt.json)`，如下所示：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As in the previous example, we need to load the file and parse the JSON string,
    as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，我们需要加载文件并解析JSON字符串，如下所示：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The next step is to set up an array of `labels` and `datasets` from the data.
    The JSON file already contains an array with the years, so all you have to do
    is copy it directly into the chart''s data object `labels` property. The `datasets`
    array is assembled iterating through each entry in the data file''s entries array
    to extract the label of the dataset (from the `country` property) and the data
    array (from the `data` property). We will use the array''s index to generate different
    colors, as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是设置一个从数据中获取的`labels`和`datasets`数组。JSON文件已经包含了一个包含年份的数组，所以你只需要直接将其复制到图表的数据对象的`labels`属性中。`datasets`数组是通过遍历数据文件条目数组中的每个条目来组装的，从中提取数据集的标签（来自`country`属性）和数据数组（来自`data`属性）。我们将使用数组的索引来生成不同的颜色，如下所示：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The result of this code is shown as follows. The full code is in `LineArea/line-11-area.html`.
    The step between 1990 and 1992 is caused by a lack of data in previous years,
    mostly from Warsaw Pact countries and the Soviet Union:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed1bdad4-d713-4c64-9688-d04cdd530ee1.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
- en: 'An area chart with overlapped (not stacked) datasets (code: *LineArea/line-11-area.html)*'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: The `Chart` is probably not what you would expect. It's not stacking the data.
    The other dataset is overlapping all of the other datasets.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'Datasets could be stacked in two ways: on the *x *axis, or on the *y *axis,
    so you have to tell Chart.js how you want to do it. In this example, it doesn''t
    make sense to add up the years, but it does to add up carbon emissions, so we
    have to stack the *y *axis. This is done by setting the `scales.yAxes[0].stacked`
    property to `true`, in the options configuration object, as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the preceding options configuration, we have also reduced the size of the
    legend boxes to half (the `boxWidth` property). You can see the final result as
    follows. The full code is in `LineArea/line-12-area-stacked.html`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ce1ca19-ef3c-4b99-a011-7b210d1ce32d.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
- en: 'A stacked area chart showing total and per-country CO2 emissions (code: *LineArea/line-12-area-stacked.html)*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Now the chart reveals that the step from 1990 to 1992 is mostly due to Russia,
    for which the World Bank didn't have any carbon emission data before 1990, when
    it was the Soviet Union.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Radar charts
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Radar charts are line charts plotted on a radial axis. They can be used with
    one or more datasets that contain at least three values each. There is only one
    axis, which starts from the center. Each line begins and ends at the same point
    and, for that reason, radar charts are usually used to display values that are
    either cyclic in nature (such as hours, months, schedules, or repeating events),
    a sequential list of categories which end at the same place where it begins (such
    as round-trip), or categories that have no specific order. A radar chart can be
    used to compare different datasets by revealing strong and weak points, or showing
    outliers and commonality in data. It usually works best with a small number of
    datasets (that is, no more than three or four).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Radar charts are usually a poor choice for large datasets. In these cases, it's
    usually better to use a Cartesian line chart or a bar chart. Radial distances
    are also harder to perceive, although this limitation can be minimized with the
    grid.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: The configurable properties for radar charts are the same as line charts. You
    can even reuse the same datasets and labels. The data property of each dataset
    must contain an array of numbers and the `chart` object should be configured with
    `type='radar'`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, a radar chart is being used to compare three different
    travel schedules for a 30-day trip. Each dataset lists the number of days spent
    in each city. Using this chart, a tourist can quickly visualize how the days of
    the trip will be distributed, per city, making it easier to choose the best schedule:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Instead of a `scales` property containing *x* axes and *y* axes, a radar chart
    has a single `scale` property. The grid structure is configured within the `ticks`
    property (more about scales at the end of this chapter).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is shown as follows. You can see the full code in `Radar/radar-1.html`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89f74b3a-ca86-4a17-adc5-cd027376a91c.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: 'Radar chart comparing three different trip schedules for a 30-day trip (code:
    *Radar/radar-1.html)*'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Radar charts are great for cyclic data, such as the months in a year. Let's
    try to transform the Cartesian line chart we created in the previous section into
    a radar chart with the same data. Most of the code is the same. You only need
    to change the chart type, but some minor changes in the configuration will make
    it look better.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows a slightly modified `draw()` function that uses the
    same NASA/GISS monthly temperature data, but draws the lines in a radar chart:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The default line tension is `0` for radar charts, which draws straight lines.
    Since the values are averages, we selected a value between 0 and 0.5 for the `lineTension`
    property to make the chart draw curved lines.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'The full code is available in `Radar/radar-3.html`. The result is shown as
    follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac6637f1-2594-45cc-8800-dee2e3e9d673.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: 'A radar chart showing the increase in global temperatures from 1880 to 2016
    (code: *Radar/radar-3.html)*'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'The variation in color is sufficient to reveal that temperatures are increasing
    year after year. However, if you wish for more precision, you can try filtering
    out some `datasets` and display only the data for every two decades, as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The result, showing only eight years is demonstrated as follows. The full code
    is in `Radar/radar-4.html`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b73b782a-ed1d-40b7-aa04-047128bb116b.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
- en: 'A radar chart showing the increase in global temperatures every 20 years from
    1880 to 2016 (code: *Radar/radar-4.html)*'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Pie and doughnut charts
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pie and doughnut charts are used to display numerical proportion between data
    as parts of a whole. Each data value is represented as a slice, which represents
    a proportional quantity. These charts are very popular but are also widely criticized.
    Since we don't perceive angles very well, it's much harder to compare data displayed
    in a pie chart, than in a bar or line chart. Using pie charts to compare only
    very small sets of data can avoid or reduce these problems.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 'A pie chart is usually used to display a single dataset. The `type` property
    of the chart object should be `pie`. Doughnut charts are equivalent to pie charts,
    but they are created with `type: doughnut`. You can also transform any pie chart
    into a doughnut by simply changing the dataset property `cutoutPercentage` to
    `50` (or some other value different than zero).'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple pie chart
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a simple pie chart to compare CO2 emissions among the world''s
    greatest polluters for a single year. You can use the same data we used for the
    area chart, but you will need to choose one of the datasets, place the country
    names in a `labels` array, the data for one year in the `data` array, and generate
    colors for each slice. All this can be done in JavaScript (see `Pie/pie-2-fetch.html`),
    but for the sake of simplicity and to focus on the construction of a simple pie
    chart, we will include the data directly in the HTML file, as shown in the following
    code block:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `datasets` array contains a single dataset, as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The chart type should be `pie`, as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The results are shown as follows. You can also see the full code in `Pie/pie-1.html`.
    Note that slices don''t have any labels. You can only see the value of each slice
    if you hover the mouse over it. It will be shown in a tooltip:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80ccafb3-5f6a-4c58-8dc7-c711e806ec5d.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
- en: 'A simple pie chart showing CO2 emissions by the greatest polluters in billions
    of tonnes (code: *Pie/pie-1.html)*'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Dataset properties for pie charts
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides `data` and `labels` properties, several other properties (listed as
    follows) can be used in each dataset object to configure the colors and style
    of each slice. All properties receive an array of attributes, and each attribute
    is applied to the corresponding slice:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
- en: '| `backgroundColor` | Array of CSS color strings | The fill color of the slice
    |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
- en: '| `borderColor` | Array of CSS color strings | The border color of the slice
    |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
- en: '| `borderWidth` | Array of numbers | The border width of the slice |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
- en: '| `hoverBackgroundColor` | Array of CSS color strings | The fill color of the
    slice when the mouse hovers over it |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
- en: '| `hoverBorderColor` | Array of CSS color strings | The border color of the
    slice when the mouse hovers over it |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
- en: '| `hoverBorderWidth` | Array of numbers | The border width of the slice when
    the mouse hovers over it |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
- en: Dataset options for pie and doughnut charts
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Common configuration options are inherited for pie charts, but there are also
    some options that are specific to pie and doughnut charts. These are listed in
    the following table:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
- en: '| `cutoutPercentage` | `Number. Defaults`: `0` for `''pie''`, and `''50''`
    for doughnut | A percentage of the chart that is cut out from the middle |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
- en: '| `rotation` | `Number. Default`: *-0.5 * Math.PI* | The starting angle to
    draw the arcs |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
- en: '| `circumference` | `Number. Default`: *2 * Math.PI* | The circumference of
    the pie |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
- en: Configuration options for pie and doughnut charts
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: These options are merged (and override) global configuration options. Default
    options for each type of chart can also be set through the `Chart.defaults.doughnut`
    and `Chart.defaults.pie` objects, which support the same properties listed earlier.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: How to show values in the slices
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, there is no native Chart.js way to show values or percentages in
    a pie chart without tooltips. But you can achieve this using a plugin or extension.
    In the following example, we will use a very simple library called `Chart.Piecelabel.js`.
    You can download it from [github.com/emn178/Chart.PieceLabel.js](http://github.com/emn178/Chart.PieceLabel.js)
    and include it your page using a script tag:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'That''s it! Now you can add the `pieceLabel` property to the `options` object,
    and configure labels for the slices. You can display absolute values or percentages,
    place the labels inside, at the border or outside the slices, draw the text on
    the arc and configure several font attributes. The following is a selection of
    these properties (you can check the library''s documentation for more properties):'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
- en: '| `render` | `''percentage''` (default) or `''value''` | Displays the percentage
    or the value of the slice. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
- en: '| `precision` | Number | The `precision` (number of digits after the decimal
    point) for percentages (does not work with other values). |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
- en: '| `fontSize`, `fontColor`, `fontSize`, and `fontFamily` | CSS property value
    strings | Changes font attributes for the label. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
- en: '| `textShadow` | `true` or `false` | Applies a shadow to the label (the shadow
    attributes, such as offset and color, can also be configured with additional properties).
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
- en: '| `position` | `''default''`, `''border''` or `''outside''` | Places the label
    in the different positions. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
- en: '| `arc` | `true` or `false` | Draws the text aligned with the arc. Works better
    when the position is `''outside''`. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
- en: Some configuration options for the *Chart.PieceLabel.js* plugin
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'To include labels in the pie chart you created in the previous example, add
    the following property to the `options` object of your chart (see `Pie/pie-3-plugin.html`):'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run the script and you have labels containing the value represented by each
    slice, as shown in the following chart:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/851535b1-6a8a-4df7-994c-391df477464e.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
- en: 'A simple pie chart using the Chart.PieceLabel.js extension to display labels
    on each slice (code: *Pie/pie-3-plugin.html)*'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: If you want even more customization, you can try other plugins such as `ChartJS-Datalabels`
    and `ChartJS-Outlabels`, which support sophisticated label placement options.
    These two plugins will be explored in [Chapter 6](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml),
    *Configuring Styles and Interactivity*.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Preparing data for pie and doughnut charts
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pie charts can''t be used with any type of data. They should only be used to
    display part-whole relationships and contain not much more than half a dozen data
    values. The following screenshot shows what happens when you create a pie or doughnut
    chart with too much data. In this example, we loaded a doughnut chart containing
    the populations of almost 200 countries. It may be art, but not really a useful
    visualization:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fdf60085-508b-47c5-8815-7dd9c584c601.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
- en: 'Abusing a pie chart (code: Pie/pie-4-evilpie.html; see also *Pie/pie-6-evilpie.html)*'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Even if you reduce this dataset to less than 20 values, it would still not be
    efficiently displayed in a pie chart. There aren't enough colors, and it would
    be difficult to place labels inside or beside so many slices, not considering
    the fact that angles are much harder to compare. In such cases, you should switch
    to a bar chart, which can be used to efficiently compare 20 values or even more.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a bar chart created with the same data, filtered
    to show the 35 most populous countries:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67232af8-3a59-4064-b119-482277744876.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
- en: 'A bar chart is a better choice than a pie chart to compare large datasets (code:
    Pie/pie-5-evilpie-as-bar.html; see also *Pie/pie-7-evilpie-as-bar.html)*'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: If you still want to use a pie chart, you need to reduce the data sample, but
    it's not enough to simply filter out data (for example, by including only the
    most populous countries). Since a pie chart should display part-whole relationships,
    but you also need to add the excluded items (for example, add up the populations
    of the smaller countries, as in the CO2 emissions example).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'This is done in the following example: it loads and parses a CSV data file,
    sorts the data by population, creates an array of objects with the largest countries,
    and finally, adds up all of the other populations into a new others entry.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: 'To parse the CSV, we are using the popular `PapaParse` library ([github.com/mholt/PapaParse](http://github.com/mholt/PapaParse)).
    You can include it in your page using the following code:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`PapaParse` reads CSV and transforms the data into a JavaScript array, where
    each row is an object with the column headers as keys. To obtain the data from
    any CSV file where the first row contains the headers (which is the most common
    case), use the following code:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now, for each array item, you can access the values using `item.header` or `item['header']`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code loads the CSV, parses it, and calls a function to reduce
    the data. The reduced data is then passed to the `drawData()` function that will
    use Chart.js to draw the pie, as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `reduceData()` function filters the countries with the largest population
    (that is, by sorting by population, and then slicing the array), and adds the
    populations of the remaining countries to create the `others` entry, as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `drawData()` function prepares the data so that it can be used by Chart.js,
    and uses the result to populate the chart''s labels, `datasets[0].data` and `datasets[0].backgroundColor`,
    as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can see the full code in `Pie/pie-8-filter.html`. The final result, showing
    six countries compared to all of the others, is shown as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa763a56-cc19-4d17-8c60-a4e8d75cabf5.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
- en: 'A doughnut chart comparing the most populous countries with the rest of the
    world (code: *Pie/pie-8-filter.html)*'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Changing the circumference
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pie and doughnut charts don't have to be complete circles. You can set the value
    of the `circumference` property (in radians) and use less than 360 degrees (*2
    * Math.PI* radians). Using `Math.PI` as the circumference, you get a half-pie
    or half-doughnut chart. These charts are good to compare two or three values and
    may fit better in reduced spaces.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: 'We modified the previous chart in the following example. It compares the 2017
    populations of China and India with the rest of the world using a half-doughnut.
    The following fragment contains the relevant code. You can see the full code in
    `Pie/pie-9-halfpie.html`:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The resulting chart is shown as follows. The `rotation` property doesn''t contain
    the amount of rotation, but a position (that is, the starting angle from where
    the arcs are drawn), and the default rotation position is *-Math.PI/2*, so the
    value of *Math.PI/2* actually rotates it 180 degrees, not 90 degrees, as it might
    seem (for that, use Math.PI to move it to a perpendicular position):'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/276597cc-77f0-466a-9836-078add048752.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: 'Changing the circumference and rotation properties of a doughnut chart (code:
    *Pie/pie-9-halfpie.html)*'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Pie and doughnut charts with multiple datasets
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Normally, you only display a single dataset with a pie chart, but multiple datasets
    are supported. They are displayed as concentric circles. Labeling the data in
    this case is mandatory, since it's impossible to visually compare the sizes of
    the slices.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example uses two datasets containing country population estimates
    from 1980 and 2015 to create a doughnut chart with the 1980 values in the inner
    circle, and the 2015 values in the outer circle. The relevant code fragments are
    shown as follows. You can see the full code in `Pie/pie-10-multiset.html`:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The label in the center of the doughnuts was created by drawing directly on
    the canvas. If you need to do that, you must use a callback. The `onComplete`
    callback (configured under `options.animation`) is called when the chart has finished
    drawing. If you don't use a callback, Chart.js may erase whatever you draw. This
    behavior will be detailed in [Chapter 6](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml),
    *Configuring Styles and*
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '*Interactivity*.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is shown as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88acb19f-9e25-482d-9f08-dfbb9d327478.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
- en: 'A doughnut chart with two datasets (code: Pie/pie-10-multiset.html)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 'These charts may be visually attractive, but they can introduce some serious
    perception errors. The outer arcs are perceived to be much larger than they actually
    are. It''s an optical illusion. A population growth in the preceding chart won''t
    be noticed unless the difference is significant. You can visualize this problem
    if you invert the order of the datasets, placing the 1980 values on the outer
    circle. This is shown in the following chart, where it seems that some populations
    grew in proportion to the whole, when all of them actually decreased. This chart
    is lying to us:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f8a6030-8ed6-4d5a-a63d-95455cbaa943.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
- en: 'Multiple datasets cannot be compared in pie and doughnut charts: the smaller
    values seem to be larger (code: Pie/pie-11-evilmultiset.html)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Polar area charts
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Polar area charts are like bar charts rendered on a radial axis. A bar chart
    is usually a better option if you need precision, but you might choose a polar
    area chart for its visual effects.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: To create a polar area chart, you set up the data the same way you would for
    a bar chart, then change the type to `polarArea`. As in the radar chart, there
    is only one `scale` property and axis to configure.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we use a polar area chart to compare the volumes of
    the world's oceans. It is based on the bar chart with the same data we created
    in [Chapter 3](af85e307-a9bc-47c5-be74-52727cbb7c2e.xhtml),* Chart.js – Quick
    Start*.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You can see the full code in `PolarArea/polar-area-1.html`. The result is shown
    as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d563c44-54f2-440c-b273-b6790d900a3d.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
- en: 'A polar area chart comparing the volume of water in each ocean (code: *PolarArea/polar-area-1.html)*'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Polar area charts share the same dataset properties as pie and doughnut charts,
    which consist mostly of properties to set the border widths, border colors, and
    fill colors of the slices.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one configuration option specific to polar area charts, listed as
    follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
- en: '| `startAngle` | Number | The angle to start drawing the arcs |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
- en: Configuration options for polar area charts
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: You can draw polar area charts containing multiple datasets, but they will be
    overlapped. The current version of Chart.js (2.7.2) does not support stacking
    or other ways of showing multiple datasets in these charts. You can also see `PolarArea/polar-area-2.html`
    and `polar-area-3.html` for other ways to configure polar area charts.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Scatter and bubble charts
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scatter charts or scatterplots are very popular in data science and statistics.
    They can be used to explore various kinds of correlations between variables, revealing
    trends, clusters, linear, and non-linear relationships. It's an essential tool
    in problem solving procedures and decision-making.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Scatter charts display the correlation between two variables by plotting their
    points in a system of Cartesian coordinates. Additional variables can be displayed
    by using different shapes and/or colors for the points.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: A bubble chart is a scatter chart that uses circles with different radii to
    display an additional variable. It's also common to overlap scatter charts with
    other charts, such as line and bar charts, as to emphasize patterns and compare
    raw data with estimates, such as trendlines (best-fit).
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Creating a scatter chart
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `type` property should be `scatter`. Scatter charts support the same properties
    as line charts, but instead of an array of numbers, the data property should contain
    an array of point objects with the following structure:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following example creates a simple scatter chart with a single dataset.
    The data values consist of a sequence of numbers generated for the *x* property,
    and the sine function of each number for the *y* property:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You can see the full code in `ScatterBubble/scatter-1.html`. The result is
    shown as follows:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/981fdbb7-7a24-4e0f-94e7-43d4671c9de2.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
- en: 'A simple scatter chart with x = n and y = sin(x) (code: *ScatterBubble/scatter-1.html)*'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiple datasets can be displayed on the same chart. This following example
    generates two more mathematical functions and displays their graphs using the
    same scales:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You can see the full code in `ScatterBubble/scatter-3.html`. The result is
    shown as follows:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67da03c1-1cab-41e2-a1c5-9d5ad18de72e.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
- en: 'Scatterplot with multiple datasets (code: *ScatterBubble/scatter-3.html)*'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Revealing correlations with scatter charts
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scatter charts are great to show correlations between data. The following example
    will combine NASA/GISS global temperature data (`Data/monthly_json.json`) and
    CO2 emission data (`Data/co2_mm_mlo.csv`) measured in Mauna Loa, Hawaii, to discover
    if there is any correlation between the two. Since the Mauna Loa data is only
    available after 1959, we will only use the GISS data after that year.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we must load multiple files, we will use JavaScript promises. Each data
    source is parsed and the data is sent to the `combine()` function, which returns
    an array that can be used by Chart.js, as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `combine()` function iterates through each object in the CO2 data, extracts
    the year and the month and uses it to obtain the corresponding mean temperature,
    then creates an object with the CO2 and temperature for each month/year. Each
    object is pushed into an array that is returned, as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following `drawData()` function uses the array of objects that contains `co2`
    and `temp` properties to draw the scatter chart by copying these values into `{x,y}`
    objects:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You can see the full code in `ScatterBubble/scatter-4.html`. The result is
    shown in the following chart and reveals a possible relationship between growing
    CO2 emissions and global temperatures. It also shows some data that we should
    have filtered out (if we had read the documentation that comes with the data),
    such as missing CO2 measurements, which appear as *-99.99*:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48d10353-e78c-49c0-a587-fb29b1e770bc.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
- en: 'Comparing CO2 emissions (source: Mauna Loa) and global temperature (source:
    NASA; code: *ScatterBubble/scatter-4.html)*'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: 'We can filter out the bad measurements by adding an extra predicate to the
    `co2Data` filter, as follows:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'It''s also a good idea to label the axes, so the viewer knows what kind of
    data is being compared. The following configuration adds axis titles and also
    a title for the chart. The full code is in `ScatterBubble/scatter-5.html`:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The final chart is shown as follows:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/741dddba-ae85-4a90-b258-15483c9e31fa.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
- en: 'CO2 vs temperature scatter chart after filtering out wrong measurements (code:
    *ScatterBubble/scatter-5.html)*'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Scatter charts with large quantities of data
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Scatter charts are great to reveal hidden patterns in large datasets. In the
    following example, we will use a huge file obtained from a public database ([geonames.org](http://geonames.org))
    to plot a scatter chart showing the position of cities based on their latitude
    and longitude. The file contains a list of locations with populations above 15,000
    (`Data/cities_15000.csv`). It contains over 100,000 entries (and because of this,
    it will take a few seconds to load). This is the general structure of the CSV
    file:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'To build the scatter chart, we need to process the file and convert latitudes
    and longitudes into the point data format. The axes also have to be configured
    to represent a cylindrical projection of the globe (limited by longitude: *-180*
    to *180* and latitude: *-90* to *90*). The following code configures the scales,
    loads the files, parses the data, builds the point object for each coordinate
    pair, and draws the chart:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You can see the full code in `ScatterBubble/scatter-6-world.html`. The result
    reveals a surprising hidden pattern (and correlation between land and humans).
    You can move the mouse over the points and it will reveal the name and coordinates
    of the location (this was configured using tooltip callbacks):'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0010d633-267c-457b-b4f4-8c237c1a5a85.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
- en: 'Scatter chart showing the position of over 100,000 human-populated locations
    (code: *ScatterBubble/scatter-6-world.html)*'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Bubble charts
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bubble charts are just like scatter charts, but they can display an extra variable
    in the diameter of the point (or shape). The `type` property should be `bubble`.
    Although they share the same dataset properties as scatter charts, most of them
    can receive callbacks in bubble charts, which allow a higher degree of interactivity.
    The data structure for bubble charts contains three properties, as follows:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The properties `x` and `y` are scaled automatically when the chart is scaled.
    The `r` property is the raw radius of the circle in pixels and is not scaled (but
    you can configure a callback if you need to scale it).
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code (`ScatterBubble/bubble-1.html`) creates a simple bubble
    chart with a single dataset containing five entries. The color of each bubble
    is generated automatically according to the radius of the bubble using a callback:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The result is shown as follows. Note that if you resize the chart, the bubble
    sizes don''t change:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d415249-e7e3-4a19-a01f-9e88dee674ff.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
- en: 'A simple bubble chart with one dataset (code: *ScatterBubble/bubble-1.html)*'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: Bubble charts are as not as informative as scatter charts when displaying large
    amounts of data, but they can still reveal interesting information. The following
    example converts the previously shown scatter chart into a bubble chart using
    the population of each location to generate the radius of the bubble.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: 'Since bubbles may overlap, the dataset is sorted so that the smaller populations
    stay on top. The `scaleR()` function creates a simple scale to convert populations
    into circle radii, as follows:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The `drawData()` function creates a data point object for the bubble chart,
    with three properties `x`, `y` containing the longitudes and latitudes, and the
    scaled population converted into a radius, as follows:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The data object includes the data array as its data, and configures the `backgroundColor`
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: 'property as a callback that returns different colors for the bubbles depending
    on the value of the radius, as follows:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You can see the full code in `ScatterBubble/bubble-2.html`. The result is shown
    as follows:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0993b6e9-4d5e-4788-814a-b2a9f4546fe4.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
- en: 'A bubble map of cities. The bubble''s radius is proportional to the population
    of each location (code: *ScatterBubble/bubble-2.html)*'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learned how to create all of the standard types of charts
    supported by Chart.js: bar, horizontal bar, line, area, pie, doughnut, polar area,
    radar, scatter, and bubble charts.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: Different charts are more suited for certain types of datasets and purposes
    than others. We explored the same examples with different charts and saw how each
    type communicates different aspects of the data, revealing correlations, proportions,
    trends, and hidden patterns.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: Each chart was introduced with a simple example, but we also created some real
    world visualizations using public CSV and JSON data, which needed to be downscaled,
    combined, filtered, and mapped to data formats expected by Chart.js.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: We also experimented with several configuration properties, for graphical elements,
    datasets, and charts, allowing a high degree of customization. Many of these will
    be explored in greater detail in the next chapters.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Books and websites**:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: 'Chart.js official documentation and samples: [https://www.chartjs.org/docs/latest/](https://www.chartjs.org/docs/latest/)'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PieceLabel plugin (`Chart.PieceLabel.js`) [https://github.com/emn178/Chart.PieceLabel.js](https://github.com/emn178/Chart.PieceLabel.js)
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data sources**:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: 'Mauna Loa CO2 measurements: `Chapter04/Data/co2_mm_mlo.csv`*.* Dr. Pieter Tans,
    NOAA/ESRL ([www.esrl.noaa.gov/gmd/ccgg/trends/](http://www.esrl.noaa.gov/gmd/ccgg/trends/))
    and Dr. Ralph Keeling, Scripps Institution of Oceanography ([scrippsco2.ucsd.edu/](http://scrippsco2.ucsd.edu/)).'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ocean temperatures: `Chapter04/Data/monthly_json.json`. GISTEMP Team, *2019: GISS
    Surface Temperature Analysis (GISTEMP)*. NASA Goddard Institute for Space Studies.
    Dataset accessed 2019-02-01 at [https://data.giss.nasa.gov/gistemp/](https://data.giss.nasa.gov/gistemp/).
    Hansen, J., R. Ruedy, M. Sato, and K. Lo, 2010: Global surface temperature change, Rev.
    Geophys., 48, RG4004, doi:10.1029/2010RG000345.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 海洋温度：`Chapter04/Data/monthly_json.json`。GISTEMP团队，*2019：GISS地表温度分析（GISTEMP）*。NASA戈达德太空研究所。数据访问时间：2019-02-01，[https://data.giss.nasa.gov/gistemp/](https://data.giss.nasa.gov/gistemp/)。Hansen,
    J., R. Ruedy, M. Sato, and K. Lo, 2010：全球地表温度变化，Rev. Geophys., 48, RG4004, doi:10.1029/2010RG000345。
- en: 'Geographical database: `Chapter02/Data/cities1000.csv`. GeoNames geographical
    database: [www.geonames.org](http://www.geonames.org).'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理数据库：`Chapter02/Data/cities1000.csv`。GeoNames地理数据库：[www.geonames.org](http://www.geonames.org)。
- en: 'CO2 emissions per country in kilotons (1960-2014): `Chapter04/world_bank_co2_kt.json`.
    *World bank public data.* [https://data.worldbank.org](https://data.worldbank.org)'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每国二氧化碳排放量（1960-2014）：`Chapter04/world_bank_co2_kt.json`。*世界银行公开数据*。[https://data.worldbank.org](https://data.worldbank.org)
- en: 'World population: `Chapter04/WPP2017_UN.csv`. *United Nations World Population
    Prospects 2017*. [https://www.un.org](https://www.un.org)'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 世界人口：`Chapter04/WPP2017_UN.csv`。*联合国2017年世界人口展望*。[https://www.un.org](https://www.un.org)
