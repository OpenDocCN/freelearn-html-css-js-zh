- en: Chapter 2. Adding Raster Layers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。添加栅格层
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Styling of Google base maps
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌基础地图的样式
- en: Using different tile sources as base maps
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同的瓦片源作为基础地图
- en: Adding tile overlays to maps
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向地图添加瓦片叠加
- en: Adding image overlays to maps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向地图添加图像叠加
- en: Changing the transparency of overlays
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改叠加的透明度
- en: Creating a heat map
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建热图
- en: Adding a traffic layer
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加交通图层
- en: Adding a transit layer
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加公交图层
- en: Adding a bicycling layer
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加自行车图层
- en: Adding weather and cloud layers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加天气和云层
- en: Adding a Panoramio layer
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加Panoramio图层
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter will cover everything about working with raster layers. The collection
    of recipes is composed of the most common use cases of handling raster layers
    in the Google Maps JavaScript API.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖关于使用栅格层的所有内容。食谱集合由在谷歌地图JavaScript API中处理栅格层的最常见用例组成。
- en: '**Raster** is one of the prime data types in the **GIS** world. The Google
    Maps JavaScript API presents an extensive set of tools to integrate external sources
    of imagery. Also, the API enables application developers to change the styling
    of its base maps with a palette of practically unlimited array of choices.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**栅格**是**GIS**世界中的主要数据类型之一。谷歌地图JavaScript API提供了一套广泛的工具，用于集成外部图像源。此外，API还允许应用程序开发者使用几乎无限的选择范围更改其基础地图的样式。'
- en: This chapter will introduce you to changing the styling of base maps and will
    then continue by covering how to display raster data, focusing on external **TMS**
    (**Tile Map Services**), where the raster layer is composed of organized tiles
    in the map display (for example, OpenStreetMap). Lastly, there are a number of
    raster layers (traffic, transit, weather, bicycle, and Panoramio) that can be
    presented on the map by integrating them with the Google Maps JavaScript API.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍如何更改基础地图的样式，然后继续介绍如何显示栅格数据，重点关注外部**TMS**（**瓦片地图服务**），其中栅格层由地图显示中的组织化瓦片组成（例如，OpenStreetMap）。最后，还有许多栅格层（交通、公交、天气、自行车和Panoramio），可以通过与谷歌地图JavaScript
    API集成在地图上展示。
- en: Styling of Google base maps
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谷歌基础地图的样式
- en: '**Google base maps** show a variety of details such as water bodies (oceans,
    seas, rivers, lakes, and so on), roads, parks, and built-up areas (residential,
    industrial, and so on). As you have observed in the first chapter, all these are
    shown in predefined cartographic parameters. With the styling capability of base
    maps, you have a virtually unlimited set of choices in terms of the cartographic
    representation of base maps.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**谷歌基础地图**显示了各种细节，如水体（海洋、海域、河流、湖泊等）、道路、公园和建成区（住宅、工业等）。正如您在第1章中观察到的，所有这些都在预定义的制图参数中显示。通过基础地图的样式功能，您在基础地图的制图表示方面几乎有无限的选择。'
- en: In your web or mobile applications, it is very beneficial to have a diversity
    of representations (in all different color schemes with different emphasis) in
    order to keep your audience more involved; maps blend neatly into your website
    design.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Web或移动应用程序中，拥有多样化的表示（使用不同的色彩方案和不同的强调）非常有益，这样可以保持您的观众更加投入；地图可以完美地融入您的网站设计。
- en: This recipe will guide you through the process of changing the styling of base
    maps.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将指导您通过更改基础地图的样式。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We can continue from the *Creating a simple map in a custom DIV element* recipe
    from [Chapter 1](ch01.html "Chapter 1. Google Maps JavaScript API Basics"), *Google
    Maps JavaScript API Basics*, as we do not need to recall the basics of creating
    the map.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从[第1章](ch01.html "第1章。谷歌地图JavaScript API基础")中的*在自定义DIV元素中创建简单地图*食谱继续，因为我们不需要回顾创建地图的基本知识。
- en: How to do it…
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The end product of the recipe will look like bluish Google Maps if you follow
    the given steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您按照给定的步骤操作，本食谱的最终产品将类似于蓝色的谷歌地图：
- en: 'Create an array of styles as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建如下样式数组：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Add your `style` array to the `initMap()` function.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的`style`数组添加到`initMap()`函数中。
- en: 'Within the `initMap()` function, create a `styledMapType` object with its name
    and reference it with the `style` array:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initMap()`函数中，创建一个`styledMapType`对象，并使用其名称引用它，与`style`数组相关联：
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the `mapTypeControlOptions` object having the `mapTypeIds` property to
    your original `mapOptions` object:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将具有`mapTypeIds`属性的`mapTypeControlOptions`对象添加到您的原始`mapOptions`对象中：
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Relate the new `mapTypeId` property to your `styledMapType` object:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的`mapTypeId`属性与您的`styledMapType`对象相关联：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And lastly, set this new `mapTypeId` property to be displayed:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将此新的`mapTypeId`属性设置为显示：
- en: '[PRE4]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can now observe the bluish-styled Google base maps as seen in the following
    screenshot:![How to do it…](img/8825OT_02_01.jpg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以观察以下截图中的蓝色风格的 Google 基础地图：![如何操作…](img/8825OT_02_01.jpg)
- en: How it works...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Firstly, let''s look at the `bluishStyle` array consisting of one or more `google.maps.MapTypeStyle`
    objects arranged as shown in the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看由一个或多个 `google.maps.MapTypeStyle` 对象组成的 `bluishStyle` 数组，这些对象按照以下代码所示排列：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this array, you can include several styles for the different map features
    and their respective elements such as their geometries, labels, and so on (all
    these are specified in `google.maps.MapTypeStyleElementType`).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在此数组中，您可以包括针对不同地图特征及其相应元素（如几何形状、标签等）的几种样式（所有这些都在 `google.maps.MapTypeStyleElementType`
    中指定）。
- en: Map features embrace the types of geographic representations that are found
    in the base maps. Administrative areas, landscape features, points of interest,
    roads, and water bodies are examples of map features.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 地图特征包括在基础地图中找到的地理表示类型。行政区域、景观特征、兴趣点、道路和水体是地图特征的例子。
- en: 'In addition to these general definitions of map features, the Google Maps JavaScript
    API enables you to specify the subtypes of these features. For example, you may
    wish to change the default style on specific `poi` types by giving them the `featureType`
    property as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些地图特征的通用定义之外，Google Maps JavaScript API 允许您指定这些特征的子类型。例如，您可能希望通过给它们指定 `featureType`
    属性来更改特定 `poi` 类型的默认样式，如下所示：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Or, you can be more specific on the landscape map features:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以对景观地图功能进行更具体的说明：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**More about the google.maps.MapTypeStyleFeatureType object**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于 google.maps.MapTypeStyleFeatureType 对象的更多信息**'
- en: A complete listing of the `MapTypeStyleFeatureType` object specification can
    be found at [https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyleFeatureType](https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyleFeatureType).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapTypeStyleFeatureType` 对象的完整列表可以在[https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyleFeatureType](https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyleFeatureType)找到。'
- en: 'Please note that the first element of our `bluishstyle` array does not include
    any `featureType` property, making the styler options valid for the entire base
    map as shown in the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的 `bluishstyle` 数组的第一个元素不包含任何 `featureType` 属性，这使得样式选项对整个基础地图有效，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In addition to `google.maps.MapTypeStyleFeatureType` and its constants, you
    can also detail each of its map features such as the geometries, geometry strokes
    and fills, labels, label texts (also text fill and stroke), and label icons. Taking
    this opportunity, you can style the geometries of roads in different settings
    than their related icons.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `google.maps.MapTypeStyleFeatureType` 及其常量之外，您还可以详细说明其地图的每个功能，例如几何形状、几何形状的描边和填充、标签、标签文本（也包括文本填充和描边）以及标签图标。利用这个机会，您可以为与相关图标不同的设置中的道路几何形状进行样式设计。
- en: 'In our recipe, we have disabled the visibility of all the label texts of the
    roads, not touching their geometry or label icons as shown in the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的配方中，我们已禁用了所有道路标签文本的可见性，没有触及它们的几何形状或标签图标，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**More about the google.maps.MapTypeStyleElementType object**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于 google.maps.MapTypeStyleElementType 对象的更多信息**'
- en: A complete listing of the `MapTypeStyleElementType` object specification can
    be found at [https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyleElementType](https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyleElementType).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapTypeStyleElementType` 对象的完整列表可以在[https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyleElementType](https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyleElementType)找到。'
- en: 'For every feature type and its element type, you can specify a `google.maps.MapTypeStyler`
    object that covers the options of `hue`, `lightness`, `saturation`, `gamma`, `inverse_lightness`,
    `visibility`, and `weight` as an array. In our recipe, the styler option that
    makes the highway road appear in pink is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个特征类型及其元素类型，您可以指定一个 `google.maps.MapTypeStyler` 对象，该对象覆盖了 `hue`、`lightness`、`saturation`、`gamma`、`inverse_lightness`、`visibility`
    和 `weight` 作为数组。在我们的配方中，使高速公路道路以粉色出现的样式选项如下：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, the `color` option in the `stylers` array is an RGB Hex string of a pink
    tone, while `weight` defines the weight of the feature in pixels.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`stylers` 数组中的 `color` 选项是一个粉色调的 RGB Hex 字符串，而 `weight` 定义了该特征在像素中的权重。
- en: Tip
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**More about the google.maps.MapTypeStyler object**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于 google.maps.MapTypeStyler 对象的更多信息**'
- en: A complete listing of the `MapTypeStyler` object specification can be found
    at [https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyler](https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyler).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapTypeStyler` 对象的完整规范列表可以在[https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyler](https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyler)找到。'
- en: 'After defining the `style` array in our `initMap()` function, we created a
    `StyledMapType` object:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `initMap()` 函数中定义 `style` 数组后，我们创建了一个 `StyledMapType` 对象：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This object takes two arguments—the first one is the `style` array and the second
    one is a `google.maps.StyledMapTypeOptions` object. Here, we have included only
    the `name` property; however, you can additionally include the `maxZoom` and `minZoom`
    properties between which the `StyledMapType` object will be displayed. In the
    screenshot of this recipe, you can see that the value we have assigned for the
    `name` property is displayed in the interface.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象接受两个参数——第一个是 `style` 数组，第二个是 `google.maps.StyledMapTypeOptions` 对象。在这里，我们只包括了
    `name` 属性；然而，您还可以包括 `maxZoom` 和 `minZoom` 属性，在这些属性之间将显示 `StyledMapType` 对象。在本配方截图中，您可以看到我们分配给
    `name` 属性的值在界面中显示。
- en: 'After we created the `StyledMapType` object, we added an additional object
    called `mapTypeControlOptions`, which takes the `mapTypeIds` array in the `mapOptions`
    object, replacing the `mapTypeId` property:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建了 `StyledMapType` 对象后，我们添加了一个额外的对象，称为 `mapTypeControlOptions`，它接受 `mapOptions`
    对象中的 `mapTypeIds` 数组，替换了 `mapTypeId` 属性：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This enables us to add multiple styles in addition to the standard `ROADMAP`
    map type.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够除了标准的 `ROADMAP` 地图类型外，添加多种样式。
- en: 'Next comes the step of linking the `mapTypeId (''new_bluish_style'')` property
    that we have specified in the `mapTypeIds` array with the `StyledMapType` object
    (`bluishStyledMap`):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是步骤，将我们在 `mapTypeIds` 数组中指定的 `mapTypeId ('new_bluish_style')` 属性与 `StyledMapType`
    对象（`bluishStyledMap`）链接：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After linking the `mapTypeId` property with the `StyledMapType` object, we
    can end with the following line of code so that the map interface opens with a
    base map styled as per our intentions:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 `mapTypeId` 属性与 `StyledMapType` 对象链接后，我们可以使用以下代码行结束，以便地图界面以我们意图的样式打开基础地图：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In our recipe, we have covered how to style the base maps according to our taste.
    We have made use of the `google.maps.MapTypeStyle` object to select the feature
    types (`google.maps.MapTypeStyleFeatureType`) and the related elements (`google.maps.MapTypeStyleElementType`)
    and styled them using the `google.maps.MapTypeStyler` object. Then, we have added
    our `StyledMapType` object to the map, showing our own styling of the base maps
    of Google Maps.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的配方中，我们介绍了如何根据我们的喜好来样式化基础地图。我们使用了 `google.maps.MapTypeStyle` 对象来选择特征类型（`google.maps.MapTypeStyleFeatureType`）和相关元素（`google.maps.MapTypeStyleElementType`），并使用
    `google.maps.MapTypeStyler` 对象来样式化它们。然后，我们将我们的 `StyledMapType` 对象添加到地图中，展示了我们对谷歌地图基础地图的自定义样式。
- en: There's more...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Using the `StyledMapType` object is only one of the ways of handling the user-defined
    styled base maps in the Google Maps Javascript API.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `StyledMapType` 对象只是处理 Google Maps Javascript API 中用户定义的样式化基础地图的多种方法之一。
- en: 'Another simpler usage is specifying the `style` array in the `styles` property
    of the `mapOptions` object:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种更简单的用法是在 `mapOptions` 对象的 `styles` 属性中指定 `style` 数组：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Another alternative is that after defining our `mapOptions` object, we can
    add the `styles` property later with the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是在定义我们的 `mapOptions` 对象后，可以使用以下代码稍后添加 `styles` 属性：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: There is an important difference between using the `StyledMapType` object and
    the `style` property of the `mapOptions` object. Using the `StyledMapType` object
    enables us to define a number of (virtually infinite) styles as map types. In
    addition, these map types can be seen in the map type control of the map interface,
    so it is very easy for the user to switch back and forth between the map types.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `StyledMapType` 对象与 `mapOptions` 对象的 `style` 属性之间存在一个重要的区别。使用 `StyledMapType`
    对象使我们能够定义许多（实际上无限）样式作为地图类型。此外，这些地图类型可以在地图界面的地图类型控制中看到，因此用户很容易在地图类型之间切换。
- en: However, if the styles are attached to the map by the `mapOptions` object's
    `style` property, there is no way for the user to change multiple styles. In fact,
    in the map type control, there will be an option for you to select new styles,
    because styles are not attached to a `StyledMapType` object, and therefore cannot
    be identified as map types.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果样式是通过`mapOptions`对象的`style`属性附加到地图上的，用户将无法更改多个样式。实际上，在地图类型控制中，将有一个选项供您选择新的样式，因为样式没有附加到`StyledMapType`对象上，因此不能被识别为地图类型。
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can get information on how to use the Styled Maps Wizard at [http://gmaps-samples-v3.googlecode.com/svn/trunk/styledmaps/wizard/index.html](http://gmaps-samples-v3.googlecode.com/svn/trunk/styledmaps/wizard/index.html).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://gmaps-samples-v3.googlecode.com/svn/trunk/styledmaps/wizard/index.html](http://gmaps-samples-v3.googlecode.com/svn/trunk/styledmaps/wizard/index.html)上获取有关如何使用样式地图向导的信息。
- en: Preparing the `style` arrays is a job with many cartographic details. Finding
    the correct combination for each feature and the element type in stylers would
    take too much time, especially if the only way of editing is in a text editor.
    Google has done a great job by creating the Styled Map Wizard to ease this time-consuming
    task. It enables you to perform all your styling tasks in an interface, so you
    can have an overview of what you are changing in real time. After you finish your
    work, you can export your styles as JSON to be used as a `style` array in your
    application.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 准备`style`数组是一项包含许多制图细节的工作。在样式化器中找到每个特征和元素类型的正确组合将花费太多时间，尤其是在只有通过文本编辑器进行编辑的情况下。谷歌通过创建样式地图向导来简化这项耗时的工作，做得非常出色。它允许您在界面中执行所有样式化任务，因此您可以实时查看您正在更改的内容。完成工作后，您可以导出您的样式作为JSON，以便在您的应用程序中用作`style`数组。
- en: Using different tile sources as base maps
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不同的瓦片源作为基本地图
- en: Google base maps display an immense amount of content (local POI information,
    road hierarchies, driving directions, and so on) and a large styling palette.
    In addition, it provides tools to change the styling of its base maps in its JavaScript
    API.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌基本地图显示大量内容（本地POI信息、道路等级、驾驶方向等）和大量的样式调色板。此外，它在其JavaScript API中提供了更改基本地图样式的工具。
- en: Moreover, you can have your other map tile sources displayed as base maps in
    the Google Maps interface. This feature enables you to display your tiled maps
    in the Google Maps interface, utilizing most of the tools of the Google Maps JavaScript
    API.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以在谷歌地图界面中将其他地图瓦片源显示为基本地图。此功能使您能够在谷歌地图界面中显示您的瓦片地图，利用大多数谷歌地图JavaScript API的工具。
- en: In this recipe, we will go through displaying OpenStreetMap tiles as base maps
    in the Google Maps interface, using the JavaScript API.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将通过使用JavaScript API在谷歌地图界面中显示OpenStreetMap瓦片作为基本地图来操作。
- en: Getting ready
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We can continue on from the *Creating a simple map in a custom DIV element*
    recipe from [Chapter 1](ch01.html "Chapter 1. Google Maps JavaScript API Basics"),
    *Google Maps JavaScript API Basics*, as we do not need to reiterate the basics
    of getting the map on screen.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续从[第1章](ch01.html "第1章。谷歌地图JavaScript API基础")的*在自定义DIV元素中创建简单地图*菜谱，因为我们不需要重复介绍将地图显示在屏幕上的基础知识。
- en: How to do it…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'With this recipe, you will see the OpenStreetMap tiles on top of Google Maps
    after completing the given steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个菜谱，您将在完成给定的步骤后看到OpenStreetMap瓦片覆盖在谷歌地图瓦片之上：
- en: 'In your `initMap()` function, create an `ImageMapType` object with the following
    code:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`initMap()`函数中，使用以下代码创建一个`ImageMapType`对象：
- en: '[PRE17]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the `google.maps.mapTypeControlOptions` object having the `mapTypeIds`
    property to your original `google.maps.MapTypeId` object and the `ImageMapType`
    object:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将具有`mapTypeIds`属性的`google.maps.mapTypeControlOptions`对象添加到您的原始`google.maps.MapTypeId`对象和`ImageMapType`对象中：
- en: '[PRE18]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Relate the new `mapTypeId` array to your `ImageMapType` object:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的`mapTypeId`数组关联到您的`ImageMapType`对象：
- en: '[PRE19]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'And lastly, set this new `google.maps.mapTypeId` object to be displayed:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，设置这个新的`google.maps.mapTypeId`对象以显示：
- en: '[PRE20]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You can see the OpenStreetMap tiles on top of the Google base map tiles as shown
    in the following screenshot:![How to do it…](img/8825OT_02_02.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在以下屏幕截图中看到OpenStreetMap瓦片覆盖在谷歌基本地图瓦片之上：![如何操作…](img/8825OT_02_02.jpg)
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You might have observed that there is indeed little difference between the structure
    of code extracts of the *Styling of the Google base maps* recipe and this recipe.
    In the former, we have used the `StyledMapType` object to change the styles of
    the original base maps, while in this recipe, we have used the `ImageMapType`
    object.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经观察到，*Google 基础地图样式* 配方的代码摘录结构与这个配方几乎没有区别。在前者中，我们使用了 `StyledMapType` 对象来更改原始基础地图的样式，而在这个配方中，我们使用了
    `ImageMapType` 对象。
- en: This is because both the `StyledMapType` and `ImageMapType` objects are all
    special types of the `MapType` object (`google.maps.MapType`), in addition to
    the original base map types such as Roadmap, Satellite, Hybrid, and Terrain, which
    were introduced in the previous chapter.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 `StyledMapType` 和 `ImageMapType` 对象都是 `MapType` 对象（`google.maps.MapType`）的特殊类型，除了在上一章中介绍的原生基础地图类型，如路线图、卫星图、混合图和地形图。
- en: 'Let''s move step by step:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步来：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This part of the recipe creates an `osmMapType` object of `ImageMapType`. To
    create an `ImageMapType` object, we must supply two required properties: `getTileUrl`
    and `tileSize`.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分配方创建了一个 `osmMapType` 对象，它是 `ImageMapType` 类型。要创建一个 `ImageMapType` 对象，我们必须提供两个必需的属性：`getTileUrl`
    和 `tileSize`。
- en: Before filling in these two parameters, we must make sure we have a tiled map
    service of which we can use tiles. OpenStreetMap ([http://www.openstreetmap.org/](http://www.openstreetmap.org/))
    is a kind of a map service, built and existing thanks to the community efforts
    around the world.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在填写这两个参数之前，我们必须确保我们有一个可以使用的瓦片地图服务。OpenStreetMap ([http://www.openstreetmap.org/](http://www.openstreetmap.org/))
    是一种地图服务，它是由全球社区的努力建立和存在的。
- en: 'Tiled map services are organized in a manner that the cartographic imagery
    is broken into parts (tiles) for each predetermined zoom level. These tiles are
    to be located alongside the x and y axis so that the tile map service consumers
    (such as the Google Maps API) can recognize their respective locations as seen
    in the following diagram:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 瓦片地图服务以这种方式组织，即对于每个预定的缩放级别，将地图图像分割成部分（瓦片）。这些瓦片应位于 x 和 y 轴旁边，以便瓦片地图服务消费者（如 Google
    Maps API）可以识别它们在以下图中所示的位置：
- en: '![How it works...](img/8825OT_02_03.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/8825OT_02_03.jpg)'
- en: The upper-left tile's coordinate is (0,0), and it is called the origin tile.
    In Google Maps, the origin is at the upper-left (northwest) corner of the map
    interface.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 左上角的瓦片坐标是 (0,0)，它被称为原点瓦片。在 Google Maps 中，原点位于地图界面的左上角（西北角）。
- en: 'Remember that for the `getTileUrl` property, we supply a function that has
    two parameters: `coord` and `zoom`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，对于 `getTileUrl` 属性，我们提供了一个具有两个参数的函数：`coord` 和 `zoom`：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `coord` parameter is exactly the coordinate pair that takes the value of
    the tile coordinates introduced in the preceding screenshot. In other words, in
    the upper-left corner, `coord.x` should be 0 and `coord.y` should be 0.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`coord` 参数正是前面截图中所介绍的瓦片坐标值所对应的坐标对。换句话说，在左上角，`coord.x` 应该是 0，而 `coord.y` 应该是
    0。'
- en: 'Assuming that we are at zoom level 0, we can try and get a tile from the Openstreetmap
    URL supplied for the `getTileUrl` property:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们处于缩放级别 0，我们可以尝试从为 `getTileUrl` 属性提供的 Openstreetmap URL 中获取一个瓦片：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This will give the following output:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出以下输出：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you copy this URL to the address bar of your browser, you will get the output
    as shown in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将此 URL 复制到浏览器的地址栏，你将得到以下截图所示的输出：
- en: '![How it works...](img/8825OT_02_04.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/8825OT_02_04.jpg)'
- en: This image is a single tile from Openstreetmap at zoom level 0\. It is understood
    that the single OpenStreetMap tile at zoom level 0 covers the entire world.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图像是 Openstreetmap 在缩放级别 0 的单个瓦片。理解到单个 OpenStreetMap 瓦片在缩放级别 0 时覆盖整个世界。
- en: 'Now, let''s continue with zoom level 1:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续缩放级别 1：
- en: '[http://tile.openstreetmap.org/1/0/0.png](http://tile.openstreetmap.org/1/0/0.png)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://tile.openstreetmap.org/1/0/0.png](http://tile.openstreetmap.org/1/0/0.png)'
- en: '![How it works...](img/8825OT_02_05.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/8825OT_02_05.jpg)'
- en: You might have noticed that the level of detail has increased as the zoom level
    has increased from 0 to 1\. Also, the coverage area for each tile has been dramatically
    reduced (one-fourth in this case).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，随着缩放级别从 0 增加到 1，细节级别有所提高。此外，每个瓦片的覆盖区域已经大幅减少（在这个例子中是四分之一）。
- en: 'You can see the complete tile layout at zoom level 1 in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下截图中看到缩放级别 1 的完整瓦片布局：
- en: '![How it works...](img/8825OT_02_06.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/8825OT_02_06.jpg)'
- en: An important property of the tiled map services is that at each zoom level,
    each tile of the previous zoom level is tiled again to possess the level of detail
    required for the current zoom level.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 瓦片地图服务的一个重要特性是，在每一个缩放级别，前一个缩放级别的每个瓦片都会再次瓦片化，以拥有当前缩放级别所需的细节级别。
- en: Returning to our `osmMapType` creation, the function for the `getTileUrl` property
    works for placing the tiles of an external source (OpenStreetMap in our recipe).
    The two arguments named `coord` and `zoom` are handled by the Google Maps API
    itself. The API detects the bounding box of the map and builds up the tile layout
    for each zoom level. Therefore, the API recognizes which tile coordinate should
    be requested at which zoom level. The only thing that is left for you to do is
    to present the tile URLs of the external tiled map source, which is what you have
    done in the `getTileUrl` property.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到我们的 `osmMapType` 创建，`getTileUrl` 属性的函数用于放置外部源（在我们的菜谱中是 OpenStreetMap）的瓦片。名为
    `coord` 和 `zoom` 的两个参数由 Google Maps API 本身处理。API 检测地图的边界框并为每个缩放级别构建瓦片布局。因此，API
    识别出在哪个缩放级别应该请求哪个瓦片坐标。剩下要做的就是向您提供外部瓦片地图源瓦片的 URL，这正是您在 `getTileUrl` 属性中所做的。
- en: The second property is the `tileSize` property, which accepts a `google.maps.Size`
    object. As its name implies, this property defines the width and height of each
    tile in terms of pixel values. The Google Maps tile layout is outlined for 256
    px by 256 px tiles; so we supply `google.maps.Size(256,256)`, where the first
    parameter stands for width and the second parameter stands for height.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个属性是 `tileSize` 属性，它接受一个 `google.maps.Size` 对象。正如其名称所暗示的，该属性以像素值定义了每个瓦片的宽度和高度。Google
    Maps 的瓦片布局为 256 像素乘以 256 像素的瓦片；因此我们提供 `google.maps.Size(256,256)`，其中第一个参数代表宽度，第二个参数代表高度。
- en: The `maxZoom` property sets the maximum zoom level of display for the tiled
    map service. The external base maps will not be shown at zoom level 19 as `maxZoom`
    is set at `18` in this recipe.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`maxZoom` 属性设置了瓦片地图服务的最大显示缩放级别。在此菜谱中，由于 `maxZoom` 设置为 `18`，外部基础地图在缩放级别 19 时将不会显示。'
- en: The `name` property is set for the name of your choice for the tiled map service.
    It is directly seen in the `mapTypeControl` object at the upper-right corner of
    the map interface.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`name` 属性用于设置瓦片地图服务的名称。它直接显示在地图界面右上角的 `mapTypeControl` 对象中。'
- en: 'The final two lines are the same as the ones in the previous recipe; the first
    one relates to the `osmMapType` object of `ImageMapType` with `OSM` set for the
    `mapTypeID` object specified in the `mapTypeControlOptions` property of `mapOptions`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两行与上一菜谱中的相同；第一行与 `mapOptions` 属性中 `mapTypeControlOptions` 指定的 `mapTypeID`
    对象设置为 `OSM` 的 `ImageMapType` 对象的 `osmMapType` 相关：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: See also
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Detailed explanations of tile coordinates, pixel coordinates, and world coordinates
    in conjunction with projection details will be covered in the oncoming chapters.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，将涵盖与投影细节相结合的瓦片坐标、像素坐标和世界坐标的详细解释。
- en: Furthermore, using tiled map services as overlays to base maps will be covered
    in the next recipe.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，下一菜谱将涵盖将瓦片地图服务作为基础地图的叠加层使用。
- en: Adding tile overlays to maps
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向地图添加瓦片叠加
- en: Google Maps has a selection of base maps as street maps and satellite imagery,
    which we discussed in the previous chapter; we will now discuss how additional
    base maps can be introduced to the Google Maps interface.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps 提供了一系列基础地图，包括街道地图和卫星图像，我们已在上一章中讨论过；现在我们将讨论如何将额外的基础地图引入 Google Maps
    界面。
- en: We can also use tiled map services as overlays to the base maps. By overlay,
    you can think of a separate sheet of map tiles put over the base maps. You can
    observe the details of the overlaid layer together with the base map. Examples
    of overlay layers might be of the boundaries of areas of interest, special POIs
    that are not found in the Google Maps' base maps, statistical results to be presented
    with aerial or point styling, and so on.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将瓦片地图服务用作基础地图的叠加层。通过叠加，你可以想象在基础地图上放置一张单独的地图瓦片。你可以观察叠加层的细节以及基础地图。叠加层的例子可能包括感兴趣区域的边界、在
    Google Maps 基础地图中找不到的特殊 POI、以空中或点样式展示的统计结果等等。
- en: The tile map services that are used as base maps can technically be used as
    overlays in the Google Maps JavaScript API. However, using these tile map services
    (such as OpenStreetMaps) as overlays results in blocking the original base maps
    of Google Maps, as there would be no blank space in the map of overlaid tile map
    services (originally aimed to be base maps). This is because both the Google Maps
    base maps and the overlaid tile map services are designed to be base maps. Therefore,
    it is not recommended to use another tile map service that is meant for base maps
    as an overlay layer on top of the Google Maps base maps.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 作为基础地图使用的瓦片地图服务在技术上可以用作叠加层在Google Maps JavaScript API中。然而，使用这些瓦片地图服务（如OpenStreetMaps）作为叠加层会导致阻塞Google
    Maps的原有基础地图，因为叠加的瓦片地图服务（原本旨在作为基础地图）的地图上不会有空白空间。这是因为Google Maps的基础地图和叠加的瓦片地图服务都被设计成基础地图。因此，不建议使用旨在作为基础地图的另一个瓦片地图服务作为Google
    Maps基础地图上的叠加层。
- en: In this recipe, we will cover how to show the OpenStreetMap tiles as overlay
    layers in the Google Maps interface using the JavaScript API.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将介绍如何在Google Maps界面中使用JavaScript API将OpenStreetMap瓦片显示为叠加层。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We can use the previous recipe's code and change it a bit for this recipe in
    order to eliminate the need of rewriting the `osmMapType` object details.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用前一个菜谱的代码，并对其进行一些修改，以便消除重写`osmMapType`对象细节的需要。
- en: How to do it…
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In this recipe, you will see the OpenStreetMap tiles as an overlay layer if
    you follow the given steps:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，如果您按照给定的步骤操作，您将看到OpenStreetMap瓦片作为叠加层：
- en: 'In your `initMap()` function, leave the `osmMapType` object as it is:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`initMap()`函数中，将`osmMapType`对象保持原样：
- en: '[PRE26]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Change the `google.maps.mapTypeControlOptions` object having `mapTypeIds` of
    both `google.maps.MapTypeId.ROADMAP` and `google.maps.MapTypeId.SATELLITE` in
    your `mapOptions` object:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`mapOptions`对象中更改具有`mapTypeIds`的`google.maps.MapTypeId.ROADMAP`和`google.maps.MapTypeId.SATELLITE`的`google.maps.mapTypeControlOptions`对象：
- en: '[PRE27]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Delete the following line of code (as no other base maps were specified in
    the preceding step):'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除以下代码行（因为在上一个步骤中没有指定其他基础地图）：
- en: '[PRE28]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Set the `ROADMAP` map type to be displayed as the base map:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ROADMAP`地图类型设置为要显示的基础地图：
- en: '[PRE29]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Overlay the `osmMapType` map type on top of the base map:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在基础地图上叠加`osmMapType`地图类型：
- en: '[PRE30]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![How to do it…](img/8825OT_02_07.jpg)'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点…](img/8825OT_02_07.jpg)'
- en: You now have the OpenStreetMap tiles as an overlay layer, as shown in the preceding
    screenshot.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在已经有了OpenStreetMap瓦片作为叠加层，如图中所示的前一个屏幕截图。
- en: How it works...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: There is little difference between the preceding recipe and this recipe as you
    might have noticed. We have used the same custom `osmMapType` object of `google.maps.imageMapType`.
    We have used another tiled map service, but the structure remains the same.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经注意到的，前一个菜谱和这个菜谱之间几乎没有区别。我们使用了相同的自定义`osmMapType`对象，即`google.maps.imageMapType`。我们使用了另一个瓦片地图服务，但结构保持不变。
- en: 'The modifications have begun with the used `mapTypes` object in the `mapTypeControlOptions`
    property of the `mapOptions` object:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 修改从`mapOptions`对象的`mapTypeControlOptions`属性中使用的`mapTypes`对象开始：
- en: '[PRE31]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We have included both the `ROADMAP` and `SATELLITE` map types to be selected
    as base maps.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经包括了`ROADMAP`和`SATELLITE`地图类型，以便作为基础地图进行选择。
- en: 'Step 3 is important; we delete the following line:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 第3步很重要；我们删除以下行：
- en: '[PRE32]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We are deleting this because we do not want the `osmMapType` object to be considered
    as a base map. We will just use it as an overlay.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在删除它，因为我们不希望`osmMapType`对象被视为基础地图。我们只将其用作叠加。
- en: In the next step, we are selecting our default base map as `ROADMAP`. You can
    change the code line for `SATELLITE` or you can make the switch from the `mapTypeControl`
    object in the map interface.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个步骤中，我们正在选择默认的基础地图为`ROADMAP`。您可以更改`SATELLITE`的代码行，或者您可以从地图界面中的`mapTypeControl`对象进行切换。
- en: 'The final line is the line where our overlay operation happens:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行是我们叠加操作发生的行：
- en: '[PRE33]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Here, the `overlayMapTypes` property is an array (`google.maps.MVCArray`). The
    `insertAt` method of `MVCArray` inserts objects at the specified index, and we
    have inserted our `imageMapType` object at index 0.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`overlayMapTypes`属性是一个数组（`google.maps.MVCArray`）。`MVCArray`的`insertAt`方法在指定的索引处插入对象，并且我们在索引0处插入了我们的`imageMapType`对象。
- en: Tip
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**More on google.maps.MVCArray**'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于google.maps.MVCArray的更多内容**'
- en: The `google.maps.MVCArray` array is a Google implementation of the ordinary
    JavaScript array. You can construct an MVC Array from an array. More details can
    be found at [https://developers.google.com/maps/documentation/javascript/reference#MVCArray](https://developers.google.com/maps/documentation/javascript/reference#MVCArray).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`google.maps.MVCArray` 数组是 Google 对普通 JavaScript 数组的实现。您可以从一个数组中构建一个 MVC 数组。更多详细信息可以在[https://developers.google.com/maps/documentation/javascript/reference#MVCArray](https://developers.google.com/maps/documentation/javascript/reference#MVCArray)找到。'
- en: 'You can have multiple overlays over the Google Maps base maps. You must use
    the `overlayMapTypes` property to set the associated orders for the overlay maps
    with the first parameter of the `insertAt` method as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 Google 地图基础地图上拥有多个叠加层。您必须使用 `overlayMapTypes` 属性通过 `insertAt` 方法的第一个参数设置叠加地图的关联顺序，如下所示：
- en: '[PRE34]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: There's more...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Overlay layers are placed on top of the base maps, and it is a good practice
    to turn them on and off to see the base maps. If you need to turn the overlay
    off, you need to include the following code:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 叠加层放置在基础地图之上，打开和关闭它们以查看基础地图是一个好习惯。如果您需要关闭叠加层，需要包含以下代码：
- en: '[PRE35]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This makes the overlay layer go off the map interface, but remember that the
    slot in the `overlayMapTypes` array is already allocated by the `insertAt` method.
    Therefore, if you want to present your user with the opportunity to toggle the
    overlay layers on and off (by means of a checkbox or so on), you can follow the
    given steps (copy the code of your current recipe before proceeding):'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '这使得叠加层从地图界面消失，但请记住，`overlayMapTypes` 数组中的槽位已经被 `insertAt` 方法分配。因此，如果您想给用户提供切换叠加层打开和关闭的机会（通过复选框等方式），您可以遵循以下步骤（在继续之前复制您当前菜谱的代码）： '
- en: 'In the `<body>` tag of your HTML code, add a checkbox:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 HTML 代码的 `<body>` 标签中添加一个复选框：
- en: '[PRE36]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Make `osmMaptype` a global variable outside the `initMap()` function:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `initMap()` 函数外部将 `osmMaptype` 设为全局变量：
- en: '[PRE37]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Change the `osmMapType` declaration in your `initMap()` function to assign
    the new global variable:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `initMap()` 函数中的 `osmMapType` 声明更改为分配新的全局变量：
- en: '[PRE38]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Replace the `insertAt` method with the `pull(null)` method:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `insertAt` 方法替换为 `pull(null)` 方法：
- en: '[PRE39]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add an overlay layer toggling function:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加叠加层切换功能：
- en: '[PRE40]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The main trick of the preceding code extract is to first open a space in the
    `overlayMapTypes` array of the `initMap()` function. After that, you can call
    the `setAt()` method to turn the overlay layer on or off.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述代码片段的主要技巧是首先在 `initMap()` 函数的 `overlayMapTypes` 数组中打开一个空间。之后，您可以调用 `setAt()`
    方法来打开或关闭叠加层。
- en: Adding image overlays to maps
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向地图添加图像叠加
- en: Overlaying tiled map services is a big capability on hand. It enables a variety
    of tiled map services that come into the scene using the Google Maps API. The
    existing stock of tiled map services are, in general, global map services, which
    means that they cover the whole world or at least some continent/country.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 叠加瓦片地图服务是一个强大的功能。它通过 Google Maps API 使各种瓦片地图服务进入场景。现有的瓦片地图服务通常是全球地图服务，这意味着它们覆盖整个世界或至少某些大陆/国家。
- en: We may be interested, for instance, to overlay a map for a university campus,
    having its rough plan on hand. Or, we may have found some map of a historical
    sheet and want to make use of it. Or, we may have an internal building plan of
    a particular building and we would like to see this building plan on top of Google
    Maps.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可能对叠加一个大学校园的地图感兴趣，手头有该校园的大致规划。或者，我们可能找到了一些历史地图，并希望利用它。或者，我们可能有一个特定建筑的内部建筑规划，并希望在
    Google 地图上查看这个建筑规划。
- en: Is it possible to overlay these microscale images on top of Google Maps? Yes,
    certainly! In fact, technically, there would be no difference between using campus
    plans or building plans instead of tiled map services as overlays. The important
    thing to note is that those plan sheets should be aligned as tiles similar to
    the tiled map services on top of base maps.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 是否可以在 Google 地图上叠加这些微尺度图像？当然可以！实际上，在技术上，使用校园规划或建筑规划而不是瓦片地图服务作为叠加层，两者之间没有区别。需要注意的是，这些规划图应该与基础地图上的瓦片地图服务对齐。
- en: In this recipe, we will not go through the details of preparing the tiles, but
    using them by means of the Google Maps JavaScript API. For convenience, we will
    use the plan of Google I/O's 2010 venue at Moscone Center, San Francisco.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们不会详细介绍准备瓦片的过程，而是通过 Google Maps JavaScript API 来使用它们。为了方便，我们将使用 2010
    年 Google I/O 在旧金山 Moscone 中心的场地规划。
- en: Note
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are tools to prepare image tiles which can be used as overlays. The most
    prominent ones are MapTiler ([www.maptiler.org](http://www.maptiler.org)) and
    GDAL2Tiles ([http://www.klokan.cz/projects/gdal2tiles/](http://www.klokan.cz/projects/gdal2tiles/)).
    With these tools, you can georeference, rectify, and tile your images for the
    zoom levels of your choice.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 有工具可以准备图像瓦片，这些瓦片可以用作叠加层。最突出的是 MapTiler ([www.maptiler.org](http://www.maptiler.org))
    和 GDAL2Tiles ([http://www.klokan.cz/projects/gdal2tiles/](http://www.klokan.cz/projects/gdal2tiles/))。使用这些工具，您可以为您选择的缩放级别对图像进行地理参照、正射和瓦片化。
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We can use the code from the *Using different tile sources as base maps* recipe,
    as very few modifications are required.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 *使用不同的瓦片源作为基础地图* 菜谱中的代码，因为需要的修改很少。
- en: How to do it…
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'You will have an overlay layer—a building—on top of the Google Maps base maps
    if you follow the following steps:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遵循以下步骤，您将在 Google Maps 基础地图上有一个叠加层——一座建筑：
- en: 'Insert a `bounds` object:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入一个 `bounds` 对象：
- en: '[PRE41]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Replace the `osmMapType` object with the `buildPlanMapType` object:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `osmMapType` 对象替换为 `buildPlanMapType` 对象：
- en: '[PRE42]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Change the last line to:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最后一行更改为：
- en: '[PRE43]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Center the map on the Moscone Center:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将地图中心定位在 Moscone Center：
- en: '[PRE44]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '![How to do it…](img/8825OT_02_08.jpg)'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点…](img/8825OT_02_08.jpg)'
- en: You can see the building floor plan supplied as an image organized in tiles
    on top of the Google Maps base maps in the preceding screenshot.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在先前的屏幕截图中看到，在 Google Maps 基础地图上叠加了作为图像提供的建筑平面图，该图像按瓦片组织。
- en: How it works...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: You may have observed that the main structure stays the same as in the previous
    recipe. First, you define a `google.maps.ImageMapType` object and then overlay
    it on top of base maps by using the `overlayMapTypes.insertAt` array of the `map`
    object.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，主要结构与先前的菜谱相同。首先，您定义一个 `google.maps.ImageMapType` 对象，然后使用 `map` 对象的
    `overlayMapTypes.insertAt` 数组将其叠加在基础地图上。
- en: The only change introduced in this recipe is due to the example building plan's
    boundaries (bounding box). In the previous recipe, the boundaries of the overlaid
    tiled map service were of the world, whereas in this recipe, we have limited it
    to the building, comparably on a much higher scale.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中引入的唯一更改是由于示例建筑计划的边界（边界框）。在先前的菜谱中，叠加瓦片地图服务的边界是全球的，而在这个菜谱中，我们将其限制在建筑上，相当于在一个更高的比例尺上。
- en: Therefore, we have included the `bounds` object defining the boundaries in terms
    of tile coordinates for each zoom level. We have limited the zoom level from 17
    to 20 as lower zoom levels (<17) would not show the building in a sensible fashion.
    The building would be just a small rectangle in zoom levels 16 and 15, and it
    would not show up in zoom levels lower than 14.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们包括了定义每个缩放级别边界的 `bounds` 对象。我们将缩放级别限制在 17 到 20 之间，因为较低的缩放级别（<17）不会以合理的方式显示建筑。在缩放级别
    16 和 15 中，建筑将只是一个小的矩形，并且它不会在低于 14 的缩放级别中显示。
- en: For each zoom level property in the `bounds` object, we have an array of x and
    y tile coordinates, x being the first and y being the second. Inside these arrays,
    the lower and upper bounds for the tile coordinates are found.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `bounds` 对象的每个缩放级别属性中，我们都有一个 x 和 y 瓦片坐标的数组，x 是第一个，y 是第二个。在这些数组内部，可以找到瓦片坐标的下限和上限。
- en: 'At this point, you may be wondering how these specific numbers are found:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您可能想知道这些特定数字是如何找到的：
- en: '[PRE45]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'These numbers are actually the tile coordinates that intersect with the boundaries
    of the Moscone Center as shown in the following screenshot:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数字实际上是与以下截图所示的 Moscone Center 边界相交的瓦片坐标：
- en: '![How it works...](img/8825OT_02_09.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/8825OT_02_09.jpg)'
- en: You can observe that in the 17th zoom level, the x coordinate must be between
    20969 and 20970, and the y coordinate must be between 50657 and 50658 for our
    image overlay.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以观察到在第 17 个缩放级别中，x 坐标必须在 20969 和 20970 之间，y 坐标必须在 50657 和 50658 之间，以实现我们的图像叠加。
- en: The `bounds` object is used to create constraints for a restricted number of
    zoom levels to fetch tiles in the definition of the `buildPlanMapType` object's
    `getTileUrl` function. The function for the `getTileUrl` property checks each
    tile coordinate against the `bounds` object's items, so that the API does not
    try to fetch tiles that do not intersect with the boundaries of the building plan.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`bounds` 对象用于在 `buildPlanMapType` 对象的 `getTileUrl` 函数定义中创建限制特定缩放级别的约束，以便获取瓦片。`getTileUrl`
    属性的函数会检查每个瓦片坐标与 `bounds` 对象的项目，这样 API 就不会尝试获取与建筑计划边界不交叉的瓦片。'
- en: Changing the transparency of overlays
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改变叠加层的透明度
- en: The Google Maps JavaScript API supports third-party tiled map services or images
    to be overlaid on top of base maps. However, there is a problem with the overlay
    layers; they come on top of base maps and make them invisible. Of course, you
    can turn them on or off according to your choice; however, this is not a solution
    if you want to see the base maps together with the overlay layers.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps JavaScript API支持第三方瓦片地图服务或图像叠加在基础地图之上。然而，覆盖层存在一个问题；它们叠加在基础地图之上，使其变得不可见。当然，你可以根据你的选择打开或关闭它们；然而，如果你想要同时看到基础地图和覆盖层，这并不是一个解决方案。
- en: In fact, you can just modify the opacity of the overlay layers to see the base
    maps and the overlay layers.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你只需修改覆盖层的透明度，就可以看到基础地图和覆盖层。
- en: This recipe is focused on changing the transparency of the overlay layers introduced
    in the last two recipes.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱专注于更改最后两个食谱中引入的覆盖层的透明度。
- en: Getting ready
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We can use the code introduced in the *Adding tile overlays to maps* recipe
    of this chapter and modify it a little to achieve the result. Be sure to copy
    the code of the recipe first.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用本章“向地图添加瓦片覆盖”食谱中引入的代码，稍作修改以实现所需的结果。请务必首先复制食谱中的代码。
- en: How to do it…
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'You will be able to make your overlay layer transparent after completing the
    one-step operation presented in the following code:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下代码中展示的单步操作后，你将能够使你的覆盖层变得透明：
- en: 'Just change the `osmMapType` object:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需更改`osmMapType`对象：
- en: '[PRE46]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: You can adjust the transparency of your overlay layers as shown in the following
    screenshot:![How to do it…](img/8825OT_02_10.jpg)
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以调整你的覆盖层透明度，如以下截图所示：![如何操作…](img/8825OT_02_10.jpg)
- en: How it works...
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Changing the transparency of overlay layers is very simple. Adding the following
    code to the `imageMapType` object does our work:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 改变覆盖层的透明度非常简单。将以下代码添加到`imageMapType`对象中即可完成任务：
- en: '[PRE47]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The opacity property of the `imageMapType` object makes the incoming tiles transparent
    according to the values supplied. The value for the opacity property must be between
    1 and 0, where 1.0 stands for fully opaque overlays, while 0 stands for fully
    transparent overlays.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`imageMapType`对象的透明度属性根据提供的值使传入的瓦片透明。透明度属性的值必须在1和0之间，其中1.0表示完全不透明的覆盖层，而0表示完全不透明的覆盖层。'
- en: Creating a heat map
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建热力图
- en: The Google Maps API lays the foundation for several map-based analysis, including
    heat maps. A heat map is a form of visualization that shows the concentration
    of points through gradient color scales.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps API为包括热力图在内的基于地图的分析奠定了基础。热力图是一种通过渐变颜色刻度显示点浓度的可视化形式。
- en: Points, in this respect, may be the representation of any geographically represented
    items such as hospitals, houses, schools, measured values of sea pollution tagged
    with coordinates, the location of waste collection bins, and so on. The list is
    practically infinite.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面，点可能是任何地理上表示的项目（如医院、房屋、学校）、带有坐标的海污染测量值、垃圾收集箱的位置等等的表示。这个列表实际上几乎是无限的。
- en: 'Heat maps are very important inputs for geostatistics. In a map display, you
    capture the intensity in a moment compared to the sole display of the locations
    of points:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 热力图是地理统计学非常重要的输入。在地图显示中，你捕捉到的是某一时刻的强度，与仅显示点位置的情况相比：
- en: '![Creating a heat map](img/8825OT_02_11.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![创建热力图](img/8825OT_02_11.jpg)'
- en: The preceding screenshot depicts the location of the OpenStreetMap points layer
    in İstanbul, Turkey, as of July. You might just get an idea of where the concentration
    of points is from the preceding screenshot, but the following screenshot shows
    it more clearly. The most intensely concentrated locations are colored in red,
    whereas lesser concentrated locations are in yellow. And, as you might have guessed,
    the green-colored locations are the least concentrated ones.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图展示了截至7月的土耳其伊斯坦布尔的OpenStreetMap点层位置。你可能只是从上述截图中得到关于点浓度的一个大致概念，但以下截图显示了更清晰的情况。最密集的地点用红色标出，而浓度较低的地点用黄色标出。而且，正如你可能已经猜到的，绿色标出的地点是浓度最低的。
- en: '![Creating a heat map](img/8825OT_02_12.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![创建热力图](img/8825OT_02_12.jpg)'
- en: In this recipe, we will create a heat map from a set of points using the Google
    Maps JavaScript API. It is worth noticing that this feature is not available within
    the standard Google Maps API; you need to load the visualization library to the
    API as shown in this recipe.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用Google Maps JavaScript API从一组点创建热力图。值得注意的是，这个功能在标准的Google Maps API中不可用；你需要将可视化库加载到API中，如本食谱所示。
- en: Getting ready
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We can use the first recipe of [Chapter 1](ch01.html "Chapter 1. Google Maps
    JavaScript API Basics"), *Google Maps JavaScript API Basics,* as a base, because
    we do not need to reiterate the code for the map display. Please do not forget
    to copy the code from the original recipe before editing for this recipe.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用[第1章](ch01.html "第1章。Google Maps JavaScript API基础")的第一部分，*Google Maps
    JavaScript API基础*，作为基础，因为我们不需要重复编写地图显示的代码。请记住，在编辑此食谱之前，从原始食谱中复制代码。
- en: How to do it…
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'You will have a heatmap overlay from the set of points you use if you follow
    the given steps:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遵循给定的步骤，你将使用你使用的点集创建热力图覆盖层：
- en: 'Reference the `visualization` libraries where you reference the Google Maps
    API:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在引用Google Maps API的地方引用`visualization`库：
- en: '[PRE48]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Open up a new text file in the same directory that contains our HTML file and
    name it `ch2_heatMapPoints.js`.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含我们的HTML文件的同一目录下打开一个新的文本文件，并将其命名为`ch2_heatMapPoints.js`。
- en: 'Create an array of `google.maps.LatLng` objects (the complete array consists
    of 217 objects, which you can get from the downloaded code) in the newly created
    JavaScript file from the previous step:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一步骤中创建的新的JavaScript文件中创建一个`google.maps.LatLng`对象的数组（完整的数组由217个对象组成，你可以从下载的代码中获得）：
- en: '[PRE49]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Reference the `ch2_heatMapPoints.js` file in your HTML code:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的HTML代码中引用`ch2_heatMapPoints.js`文件：
- en: '[PRE50]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Create the heatmap layer:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建热力图层：
- en: '[PRE51]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Add the heatmap layer to the map:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将热力图层添加到地图：
- en: '[PRE52]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: You should now have your heatmap overlay from your set of points, as shown in
    the following screenshot:![How to do it…](img/8825OT_02_13.jpg)
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你应该已经从你的点集中创建出了热力图覆盖层，如下面的截图所示：![如何操作…](img/8825OT_02_13.jpg)
- en: How it works...
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Firstly, creating a heatmap layer in the Google Maps JavaScript API requires
    the `visualization` library of the API to be added to the section where the Google
    Maps JavaScript API is referenced:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在Google Maps JavaScript API中创建热力图层需要将API的`visualization`库添加到引用Google Maps
    JavaScript API的部分：
- en: '[PRE53]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: With this addition, you can use the `google.maps.visualization.HeatmapLayer`
    object to create the heatmap layers.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个添加，你可以使用`google.maps.visualization.HeatmapLayer`对象来创建热力图层。
- en: 'The `google.maps.visualization.HeatmapLayer` object needs a JavaScript array
    or the `google.maps.MVCArray` object (an array) in which its elements are the
    `google.maps.LatLng` objects:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`google.maps.visualization.HeatmapLayer`对象需要一个JavaScript数组或`google.maps.MVCArray`对象（一个数组），其中其元素是`google.maps.LatLng`对象：'
- en: '[PRE54]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The `google.maps.LatLng` object is constructed with two parameters with a longitude
    and latitude coordinate pair, to mention a point:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 使用经纬度坐标对构造`google.maps.LatLng`对象，以提及一个点：
- en: '[PRE55]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: We have created the array object and its contents with 217 points in another
    JavaScript file, because it would take too much space in our original HTML file.
    Also, it is a good practice to have our data and related objects in another file
    to avoid potential structural problems.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在另一个JavaScript文件中创建了包含217个点的数组对象及其内容，因为它们在我们的原始HTML文件中会占用太多空间。此外，将我们的数据和相关的对象放在另一个文件中是一种良好的实践，以避免潜在的架构问题。
- en: 'Finally, we can add our heatmap layer to our current map with the following
    code:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用以下代码将我们的热力图层添加到当前地图中：
- en: '[PRE56]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'As you can toggle the overlay layers introduced in the previous recipes, you
    can also toggle the heatmap layers with the following:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可以切换之前食谱中引入的覆盖层一样，你也可以使用以下方法切换热力图层：
- en: '[PRE57]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: There's more...
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Heat maps are created from a set of points, and these points can be at different
    places as well as the same places. In other words, multiple `google.maps.LatLng`
    objects may be placed at the same place. The following code is an example:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 热力图是由一组点创建的，这些点可以位于不同的地方，也可以位于相同的地方。换句话说，多个`google.maps.LatLng`对象可以放置在同一个地方。以下代码是一个示例：
- en: '[PRE58]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: This will increase the intensity of this point; it will be likely to be seen
    in red in the heat map.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这将增加这个点的强度；它很可能会在热力图中以红色显示。
- en: 'But what if the instances of the `google.maps.LatLng` objects sharing the same
    coordinate pair increases? One method is to copy the lines as shown in the preceding
    code. However, there is another smarter way:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果共享相同坐标对的 `google.maps.LatLng` 对象实例增加呢？一种方法是复制前面代码中显示的行。然而，还有一种更智能的方法：
- en: '[PRE59]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'This object is `google.maps.visualization.WeightedLocation`, and it takes two
    properties: one is the `google.maps.LatLng` object, and the other one is `weight`.
    This `weight` parameter takes any numeric value representing the occurrence count
    of the points.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象是 `google.maps.visualization.WeightedLocation`，它接受两个属性：一个是 `google.maps.LatLng`
    对象，另一个是 `weight`。此 `weight` 参数接受任何表示点发生次数的数值。
- en: By default, the `LatLng` object itself has a weight of 1\. Therefore, having
    a `WeightedLocation` object with the `weight` property set to `3` is equivalent
    to having the same `LatLng` object.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`LatLng` 对象本身具有权重 1。因此，具有 `weight` 属性设置为 `3` 的 `WeightedLocation` 对象等同于具有相同的
    `LatLng` 对象。
- en: The `WeightedLocation` and `LatLng` objects may be used together in the array
    supplied for the heatmap layer's `data` property.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在为热力图层的 `data` 属性提供的数组中一起使用 `WeightedLocation` 和 `LatLng` 对象。
- en: The heatmap layer's object possesses a range of options including `gradient`,
    `radius`, `opacity`, `maxIntensity`, and `dissipating`.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 热力图层对象具有包括 `gradient`、`radius`、`opacity`、`maxIntensity` 和 `dissipating` 在内的多种选项。
- en: 'The `gradient` option takes an array of colors:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradient` 选项接受一个颜色数组：'
- en: '[PRE60]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'You can set the gradient property by adding a property to the `HeatmapLayer`
    constructor:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过向 `HeatmapLayer` 构造函数添加属性来设置渐变属性：
- en: '[PRE61]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Alternatively, you can set the options later:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以稍后设置选项：
- en: '[PRE62]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The `dissipating` option is for adjusting the pixels needed to show intensity
    across zoom levels. Its default value is `false`, and this allows more pixels
    to be colored per point for intensity when the zoom level is increased.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`dissipating` 选项用于调整显示不同缩放级别强度所需的像素数。其默认值为 `false`，这允许在缩放级别增加时每个点有更多的像素用于强度着色。'
- en: 'By using the `maxIntensity` property, you can scroll up or down the heatmap
    layer:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `maxIntensity` 属性，你可以滚动热力图层：
- en: '[PRE63]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The preceding code makes this recipe's output greenish because the intensity
    is increased. More points at the same location are required to make the heat map
    look reddish.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码使本食谱的输出呈绿色，因为强度增加了。在相同位置需要更多的点来使热力图看起来呈红色。
- en: You can tweak the `radius` property to adjust the radius of the intensity for
    each point. The unit is in pixels.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以调整 `radius` 属性来调整每个点的强度半径。单位是像素。
- en: See also
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: You can create heat maps using Fusion Tables in the cloud, which will be introduced
    later in the book. There are pros and cons when creating a heat map in either
    a browser or the cloud; this will be discussed in detail later in the book.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用云端的 Fusion Tables 创建热力图，这将在本书的后续部分介绍。在浏览器或云端创建热力图各有优缺点；这将在本书的后续部分详细讨论。
- en: Details on the `LatLng` object and its use to create point vector overlays will
    be covered in the next chapter.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `LatLng` 对象及其用于创建点矢量覆盖的使用将在下一章中介绍。
- en: Adding the traffic layer
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加交通层
- en: In today's world, the condition of traffic is very important information in
    cities. If there is an accident on the way or a recent construction that blocks
    an important street, it affects your whole day. How useful would it be to have
    real-time traffic information directly on your maps?
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今世界，交通状况是城市中非常重要的信息。如果路上发生事故或近期有施工阻碍了重要街道，这会影响你一整天。在地图上直接获取实时交通信息会有多有用？
- en: The Google Maps JavaScript API has a very handy aspect that lets you have traffic
    information fed on a real-time basis on top of your base maps.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps JavaScript API 具有一个非常实用的功能，允许你在基础地图上实时获取交通信息。
- en: In this recipe, we will cover how to display traffic information on your Google
    Maps.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将介绍如何在 Google Maps 上显示交通信息。
- en: Getting ready
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We can use the first recipe of [Chapter 1](ch01.html "Chapter 1. Google Maps
    JavaScript API Basics"), *Google Maps JavaScript API Basics,* as a base for the
    basic map display. After copying the code of the original recipe, you can proceed
    forward.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 [第 1 章](ch01.html "第 1 章。Google Maps JavaScript API 基础") 的第一个食谱，*Google
    Maps JavaScript API 基础*，作为基本地图显示的基础。在复制原始食谱的代码后，你可以继续前进。
- en: How to do it…
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Here are the steps to show the traffic layer:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是显示交通层的步骤：
- en: 'Firstly, change the center of your map to a location where the traffic layer
    is served (details will be available in the *How it works...* section). For instance,
    for Barcelona, Spain, use the following values:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将地图中心更改为提供交通层的服务位置（详细信息将在*如何工作...*部分中提供）。例如，对于西班牙巴塞罗那，使用以下值：
- en: '[PRE64]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Construct the `TrafficLayer` object:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建一个`TrafficLayer`对象：
- en: '[PRE65]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Add the `TrafficLayer` object to the map:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`TrafficLayer`对象添加到地图中：
- en: '[PRE66]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: You can see the traffic layer colored according to the density of the real-time
    traffic condition as shown in the following screenshot:![How to do it…](img/8825OT_02_14.jpg)
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在以下屏幕截图中看到根据实时交通状况密度着色的交通层：![如何操作…](img/8825OT_02_14.jpg)
- en: How it works...
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the first step, you might have noticed that we have switched to Barcelona,
    Spain, because in some countries, the traffic layer is not available. For the
    list of countries with the availability of traffic layers, you must view the spreadsheet
    at [http://gmaps-samples.googlecode.com/svn/trunk/mapcoverage_filtered.html](http://gmaps-samples.googlecode.com/svn/trunk/mapcoverage_filtered.html).
    You can filter the **traffic** column to see all the countries with traffic layers.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，您可能已经注意到我们切换到了西班牙巴塞罗那，因为在一些国家，交通层不可用。要查看具有交通层可用性的国家列表，您必须查看[http://gmaps-samples.googlecode.com/svn/trunk/mapcoverage_filtered.html](http://gmaps-samples.googlecode.com/svn/trunk/mapcoverage_filtered.html)上的电子表格。您可以通过筛选**交通**列来查看所有具有交通层的国家。
- en: The construction of the `TrafficLayer` object and its addition to the map is
    straightforward. There is no property involved in the construction of the `TrafficLayer`
    object.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`TrafficLayer`对象的构建及其添加到地图中非常直接。在构建`TrafficLayer`对象的过程中不涉及任何属性。'
- en: 'You can toggle the `TrafficLayer` object off with the following code:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下代码关闭`TrafficLayer`对象：
- en: '[PRE67]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Adding the transit layer
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加交通层
- en: Public transit lines have immense importance in cities, especially for tourists
    and foreigners in the city. Mapping these transit lines (bus, underground, and
    so on) onto the base maps of several cities is a tedious task, and this is what
    the Google Maps JavaScript API offers through its special objects.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 公共交通线路在城市中具有极其重要的地位，尤其是对于城市中的游客和外国人。将这些交通线路（公共汽车、地铁等）映射到几个城市的基图中是一项繁琐的任务，这正是Google
    Maps JavaScript API通过其特殊对象提供的。
- en: In this recipe, we will add transit layers to the Google Maps map interface.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将向Google Maps地图界面添加交通层。
- en: Getting ready
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Continuing from the previous recipe, *Adding the traffic layer*, will simplify
    our work, as we will only replace the `TrafficLayer` object with `TransitLayer`
    classes. Remember to copy the code of the original recipe.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 从上一个菜谱“添加交通层”继续，这将简化我们的工作，因为我们只需将`TrafficLayer`对象替换为`TransitLayer`类。请记住复制原始菜谱中的代码。
- en: How to do it…
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to show public transit lines as an overlay:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是显示公共交通线路作为叠加层的步骤：
- en: Delete `TrafficLayer` related lines (the last two lines).
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除与`TrafficLayer`相关的行（最后两行）。
- en: 'Instead of the `TrafficLayer` object, use the `TransitLayer` object:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要使用`TrafficLayer`对象，而是使用`TransitLayer`对象：
- en: '[PRE68]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Add the `TransitLayer` object to the map:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`TransitLayer`对象添加到地图中：
- en: '[PRE69]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: You can see the public transit lines as an overlay on Google Maps in your area
    of preference as shown in the following screenshot:![How to do it…](img/8825OT_02_15.jpg)
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在您偏好的区域看到Google Maps上的公共交通线路叠加，如下面的屏幕截图所示：![如何操作…](img/8825OT_02_15.jpg)
- en: How it works...
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The transit layer is offered in certain cities around the world, and you can
    find the complete listing of these cities at [http://www.google.com/intl/en/landing/transit/](http://www.google.com/intl/en/landing/transit/).
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 交通层在世界某些城市的某些地区提供，您可以在[http://www.google.com/intl/en/landing/transit/](http://www.google.com/intl/en/landing/transit/)上找到这些城市的完整列表。
- en: The `TransitLayer` object can bring multiple colored public transit lines. The
    color choices are not random; they are selected based on distinct transit line
    operators.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`TransitLayer`对象可以带来多种颜色的公共交通线路。颜色选择并非随机；它们是根据不同的交通线路运营商选择的。'
- en: The construction and display of the `TransitLayer` object is the same as the
    `TrafficLayer` object.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`TransitLayer`对象的构建和显示与`TrafficLayer`对象相同。'
- en: Adding the bicycling layer
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加自行车层
- en: It is good to have the information about the cycling paths and common routes
    on top of base maps; Google Maps offers this as an overlay layer.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在基础地图上显示自行车路径和常用路线的信息是很有用的；Google Maps提供此叠加层。
- en: In this recipe, we will introduce the bicycling layer and its usage as an overlay
    in the Google Maps JavaScript API.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将介绍自行车图层及其在Google Maps JavaScript API中作为覆盖层的用法。
- en: Getting ready
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Continuing from the previous recipe, *Adding the traffic layer*, will simplify
    our work, as we will only replace the `TransitLayer` object with the `BicyclingLayer`
    classes. Remember to copy the code of the original recipe.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的配方*添加交通图层*继续，将简化我们的工作，因为我们只需将`TransitLayer`对象替换为`BicyclingLayer`类。请记住复制原始配方的代码。
- en: How to do it…
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The steps required for showing the cycling paths and routes are presented as
    follows:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 显示自行车路径和路线所需的步骤如下所示：
- en: 'Change the two lines containing `TransitLayer`, supplanting the `BicyclingLayer`
    object instead of the `TransitLayer` object:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将包含`TransitLayer`的两行代码替换为包含`BicyclingLayer`对象的代码：
- en: '[PRE70]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: You can observe the cycling paths and routes on top of the Google Maps base
    maps as shown in the following screenshot:![How to do it…](img/8825OT_02_16.jpg)
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在以下屏幕截图中观察Google Maps基础地图上的自行车路径和路线：![如何操作…](img/8825OT_02_16.jpg)
- en: How it works...
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The bicycling layer has its own subdivisions reflected in its styles; the dark
    green routes represent the paths dedicated for cycling, while the light green
    ones represent streets with bike lanes. Lastly, the dashed routes represent the
    bicycle paths and streets recommended for use, but are not dedicated.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 自行车图层在其样式中有自己的细分；深绿色路线代表专门用于骑行的路径，而浅绿色路线代表有自行车道的街道。最后，虚线路线代表推荐使用但不是专门为自行车设计的路径和街道。
- en: The steps to display the bicycling layer are totally identical to the transit
    or traffic layers, so there is no additional detail for the specifics of the bicycling
    layer.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 显示自行车图层的步骤与交通或交通图层完全相同，因此没有关于自行车图层具体细节的额外说明。
- en: Adding the weather and cloud layers
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加天气和云图层
- en: Information on the temperature and weather conditions coupled with a map display
    is very common in weather reports on TVs; Google has put a feature in its API
    so that we can have this information in our own maps.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 温度和天气状况的信息与地图显示结合在一起，在电视上的天气预报中非常常见；Google在其API中添加了一个功能，这样我们就可以在我们的地图中拥有这些信息。
- en: In this recipe, we will learn how to display weather-related information on
    top of base maps as overlays.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何在基础地图上作为覆盖层显示与天气相关的信息。
- en: Getting ready
  id: totrans-352
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We can continue on from the *Creating a simple map in a custom DIV element*
    recipe from [Chapter 1](ch01.html "Chapter 1. Google Maps JavaScript API Basics"),
    *Google Maps JavaScript API Basics*, as we do not need to go into detail for the
    basic map display.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续从[第1章](ch01.html "第1章. Google Maps JavaScript API基础知识")中的*在自定义DIV元素中创建简单地图*配方开始，因为对于基本地图显示我们不需要深入了解。
- en: How to do it…
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to show the respective temperatures and cloud conditions
    in your maps:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是显示您地图中相应温度和云状况的步骤：
- en: 'Add the weather library to the end of the reference for the Google Maps JavaScript
    API:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将天气库添加到Google Maps JavaScript API引用的末尾：
- en: '[PRE71]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Change the center and zoom of the map in the `mapOptions` object so that we
    can make use of the related layers:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`mapOptions`对象中更改地图的中心和缩放，以便我们可以使用相关的图层：
- en: '[PRE72]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Construct an instance of the `google.maps.weatherLayer` object named `weatherLayer`:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构造一个名为`weatherLayer`的`google.maps.weatherLayer`对象实例：
- en: '[PRE73]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Add `weatherLayer` to the map:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`weatherLayer`添加到地图中：
- en: '[PRE74]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Construct an instance of `google.maps.weather.cloudLayer` named `cloudLayer`:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构造一个名为`cloudLayer`的`google.maps.weather.cloudLayer`实例：
- en: '[PRE75]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Add `cloudLayer` to the map:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`cloudLayer`添加到地图中：
- en: '[PRE76]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: You can see the respective temperatures and cloud conditions in your Google
    Maps application as shown in the following screenshot:![How to do it…](img/8825OT_02_17.jpg)
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在以下屏幕截图中看到您的Google Maps应用程序中的相应温度和云状况：![如何操作…](img/8825OT_02_17.jpg)
- en: How it works...
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In order to see weather-specific layers, we have to reference the `weather`
    libraries exactly in the same way we have referenced the `visualization` libraries
    for the heatmap overlays.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到天气特定的图层，我们必须以与引用热力图覆盖的`visualization`库相同的方式精确引用`weather`库。
- en: We have changed the center and zoom of the map for a purpose. The zoom is set
    to 5 as cloud layers are only visible between the zoom levels of 0 and 6\. Also,
    we have arranged the center of the map in the Mediterranean to view a couple of
    countries with the weather information of their big cities.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更改了地图的中心和缩放是为了某个目的。缩放设置为5，因为云层仅在0到6的缩放级别之间可见。此外，我们将地图中心定位在地中海，以便查看几个大城市的天气信息。
- en: It is important to note that together with the weather layers, administrative
    labels such as street and city names are not shown. Also, the weather layer is
    applicable between the zoom levels of 0 and 12.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，与天气层一起，街道和城市名称等行政标签不会显示。此外，天气层适用于0到12的缩放级别之间。
- en: 'In the construction of the `google.maps.weather.weatherLayer` object, you can
    specify the temperature units through the `temperatureUnits` property. The possible
    values are defined in `google.maps.weather.TemperatureUnit`:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建`google.maps.weather.weatherLayer`对象时，你可以通过`temperatureUnits`属性指定温度单位。可能的值在`google.maps.weather.TemperatureUnit`中定义：
- en: '[PRE77]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: You can add the `weatherLayer` and `cloudLayer` layers to the map by calling
    their respective `setMap()` method and supplying the `map` object as the only
    argument.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过调用各自的`setMap()`方法并将`map`对象作为唯一参数来将`weatherLayer`和`cloudLayer`层添加到地图中。
- en: Displaying the weather layer, you view the cities' weather conditions with the
    temperature information fed by [http://www.weather.com](http://www.weather.com).
    The icons displayed on top of the cities will change according to the real-time
    weather, whether it is the sun, clouds, or rain. Also, clicking on an icon will
    open a detailed popup showing the weather conditions for the next four days.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 显示天气层，你可以通过[http://www.weather.com](http://www.weather.com)提供的温度信息查看城市的天气状况。显示在城市的图标将根据实时天气变化，无论是太阳、云还是雨。此外，点击图标将打开一个详细弹出窗口，显示未来四天的天气状况。
- en: There's more...
  id: totrans-377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can tweak additional properties besides `temperatureUnits` for the `weatherLayer`
    object. You can suppress the detailed pop-up window or you can set the units for
    the wind speed and so on.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为`weatherLayer`对象调整除了`temperatureUnits`以外的其他属性。你可以抑制详细弹出窗口，或者你可以设置风速的单位等等。
- en: Tip
  id: totrans-379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**More about WeatherLayerOptions**'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于WeatherLayerOptions的更多信息**'
- en: The complete listing on `WeatherLayerOptions` can be found at [https://developers.google.com/maps/documentation/javascript/reference#WeatherLayerOptions](https://developers.google.com/maps/documentation/javascript/reference#WeatherLayerOptions).
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`WeatherLayerOptions`的完整列表可以在[https://developers.google.com/maps/documentation/javascript/reference#WeatherLayerOptions](https://developers.google.com/maps/documentation/javascript/reference#WeatherLayerOptions)找到。'
- en: Adding the Panoramio layer
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Panoramio层
- en: Panoramio is a geotagged photo-sharing website. This means you can upload your
    photos provided you geotag (georeference) them. Geotagging involves attaching
    a coordinate pair to the target object, whether it is a photo, video, or any other
    resource. You can find detailed information on how to use Panoramio at [http://www.panoramio.com/](http://www.panoramio.com/).
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: Panoramio是一个带有地理标签的图片分享网站。这意味着只要你对这些图片进行地理标签（地理参考），你就可以上传它们。地理标签涉及将一对坐标附加到目标对象上，无论它是照片、视频还是任何其他资源。你可以在[http://www.panoramio.com/](http://www.panoramio.com/)找到有关如何使用Panoramio的详细信息。
- en: You can view Panoramio photos on Google Maps, and this recipe will cover the
    basics of how to do it.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Google Maps上查看Panoramio照片，本食谱将涵盖如何做到这一点的基础知识。
- en: Getting ready
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We can continue on from the *Creating a simple map in a custom DIV element*
    recipe from [Chapter 1](ch01.html "Chapter 1. Google Maps JavaScript API Basics"),
    *Google Maps JavaScript API Basics*, as map display basics are already covered
    here.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从[第1章](ch01.html "第1章。Google Maps JavaScript API基础")的“在自定义DIV元素中创建简单地图”食谱继续，因为地图显示的基本知识已经在这里介绍。
- en: As always, please copy the original recipe before proceeding.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，请在继续之前复制原始食谱。
- en: How to do it…
  id: totrans-388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'You can overlay the variety of Panoramio image stocks on top of Google Maps
    if you follow the steps presented:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遵循所提供的步骤，你可以在Google Maps上叠加各种Panoramio图像库存：
- en: 'Add the Panoramio library to the referenced libraries:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Panoramio库添加到引用库中：
- en: '[PRE78]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Construct a new `google.maps.panoramio.PanoramioLayer()` object named `panoramioLayer`
    after the creation of the map object:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建地图对象后，创建一个名为`panoramioLayer`的新`google.maps.panoramio.PanoramioLayer()`对象：
- en: '[PRE79]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Add the `panoramioLayer` object to the map:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`panoramioLayer`对象添加到地图中：
- en: '[PRE80]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: You can now have the Panoramio images overlaid on top of Google Maps as shown
    in the following screenshot:![How to do it…](img/8825OT_02_18.jpg)
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以将 Panoramio 图像叠加到 Google Maps 上，如下面的截图所示：![如何操作…](img/8825OT_02_18.jpg)
- en: How it works...
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Adding the Panoramio layer is technically no different from what we did in the
    previous recipe. We add the related reference library, construct the layer, and
    add it to the map in the same pattern.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术上，添加 Panoramio 层与我们之前所做的没有区别。我们添加相关的参考库，构建层，并以相同的方式将其添加到地图中。
- en: You can click on the thumbnail photos and a detailed pop-up window will open.
    In this popup, you can view the photo in a larger size along with its name and
    the username of the person who uploaded the photo.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以点击缩略图照片，将打开一个详细弹出窗口。在这个弹出窗口中，您可以查看照片的更大尺寸，以及上传照片的人的用户名。
- en: There's more...
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The Panoramio layer provides extra capability to customize the overlay layer.
    For instance, you can restrict the photos by filtering tags using the `setTag()`
    method:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: Panoramio 层提供了额外的能力来自定义叠加层。例如，您可以使用 `setTag()` 方法通过过滤标签来限制照片：
- en: '[PRE81]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: This will filter the displayed thumbnails to the ones that include the `Eiffel`
    keyword in their tags.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 这将过滤显示的缩略图，只显示标签中包含 `Eiffel` 关键词的照片。
- en: Also, you can filter according to the user ID by calling the `setUserId()` method,
    supplying the `userId` string as an argument.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以通过调用 `setUserId()` 方法并根据用户 ID 进行过滤，将 `userId` 字符串作为参数提供。
- en: 'You can also suppress the detailed pop-up window that opens by using the `suppressInfoWindows`
    property that the `PanoramioLayer` object takes:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过使用 `PanoramioLayer` 对象的 `suppressInfoWindows` 属性来抑制打开的详细弹出窗口：
- en: '[PRE82]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Tip
  id: totrans-407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**More about PanoramioLayer**'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于 PanoramioLayer 的更多信息**'
- en: The complete listing on `PanoramioLayer` can be found at [https://developers.google.com/maps/documentation/javascript/reference#PanoramioLayerOptions](https://developers.google.com/maps/documentation/javascript/reference#PanoramioLayerOptions).
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '`PanoramioLayer` 的完整列表可以在 [https://developers.google.com/maps/documentation/javascript/reference#PanoramioLayerOptions](https://developers.google.com/maps/documentation/javascript/reference#PanoramioLayerOptions)
    找到。'
