- en: Chapter 2. Adding Raster Layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Styling of Google base maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using different tile sources as base maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding tile overlays to maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding image overlays to maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the transparency of overlays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a heat map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a traffic layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a transit layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a bicycling layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding weather and cloud layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a Panoramio layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will cover everything about working with raster layers. The collection
    of recipes is composed of the most common use cases of handling raster layers
    in the Google Maps JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: '**Raster** is one of the prime data types in the **GIS** world. The Google
    Maps JavaScript API presents an extensive set of tools to integrate external sources
    of imagery. Also, the API enables application developers to change the styling
    of its base maps with a palette of practically unlimited array of choices.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will introduce you to changing the styling of base maps and will
    then continue by covering how to display raster data, focusing on external **TMS**
    (**Tile Map Services**), where the raster layer is composed of organized tiles
    in the map display (for example, OpenStreetMap). Lastly, there are a number of
    raster layers (traffic, transit, weather, bicycle, and Panoramio) that can be
    presented on the map by integrating them with the Google Maps JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: Styling of Google base maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Google base maps** show a variety of details such as water bodies (oceans,
    seas, rivers, lakes, and so on), roads, parks, and built-up areas (residential,
    industrial, and so on). As you have observed in the first chapter, all these are
    shown in predefined cartographic parameters. With the styling capability of base
    maps, you have a virtually unlimited set of choices in terms of the cartographic
    representation of base maps.'
  prefs: []
  type: TYPE_NORMAL
- en: In your web or mobile applications, it is very beneficial to have a diversity
    of representations (in all different color schemes with different emphasis) in
    order to keep your audience more involved; maps blend neatly into your website
    design.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will guide you through the process of changing the styling of base
    maps.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can continue from the *Creating a simple map in a custom DIV element* recipe
    from [Chapter 1](ch01.html "Chapter 1. Google Maps JavaScript API Basics"), *Google
    Maps JavaScript API Basics*, as we do not need to recall the basics of creating
    the map.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The end product of the recipe will look like bluish Google Maps if you follow
    the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an array of styles as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add your `style` array to the `initMap()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the `initMap()` function, create a `styledMapType` object with its name
    and reference it with the `style` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `mapTypeControlOptions` object having the `mapTypeIds` property to
    your original `mapOptions` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Relate the new `mapTypeId` property to your `styledMapType` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And lastly, set this new `mapTypeId` property to be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can now observe the bluish-styled Google base maps as seen in the following
    screenshot:![How to do it…](img/8825OT_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firstly, let''s look at the `bluishStyle` array consisting of one or more `google.maps.MapTypeStyle`
    objects arranged as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this array, you can include several styles for the different map features
    and their respective elements such as their geometries, labels, and so on (all
    these are specified in `google.maps.MapTypeStyleElementType`).
  prefs: []
  type: TYPE_NORMAL
- en: Map features embrace the types of geographic representations that are found
    in the base maps. Administrative areas, landscape features, points of interest,
    roads, and water bodies are examples of map features.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to these general definitions of map features, the Google Maps JavaScript
    API enables you to specify the subtypes of these features. For example, you may
    wish to change the default style on specific `poi` types by giving them the `featureType`
    property as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, you can be more specific on the landscape map features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**More about the google.maps.MapTypeStyleFeatureType object**'
  prefs: []
  type: TYPE_NORMAL
- en: A complete listing of the `MapTypeStyleFeatureType` object specification can
    be found at [https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyleFeatureType](https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyleFeatureType).
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note that the first element of our `bluishstyle` array does not include
    any `featureType` property, making the styler options valid for the entire base
    map as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In addition to `google.maps.MapTypeStyleFeatureType` and its constants, you
    can also detail each of its map features such as the geometries, geometry strokes
    and fills, labels, label texts (also text fill and stroke), and label icons. Taking
    this opportunity, you can style the geometries of roads in different settings
    than their related icons.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our recipe, we have disabled the visibility of all the label texts of the
    roads, not touching their geometry or label icons as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**More about the google.maps.MapTypeStyleElementType object**'
  prefs: []
  type: TYPE_NORMAL
- en: A complete listing of the `MapTypeStyleElementType` object specification can
    be found at [https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyleElementType](https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyleElementType).
  prefs: []
  type: TYPE_NORMAL
- en: 'For every feature type and its element type, you can specify a `google.maps.MapTypeStyler`
    object that covers the options of `hue`, `lightness`, `saturation`, `gamma`, `inverse_lightness`,
    `visibility`, and `weight` as an array. In our recipe, the styler option that
    makes the highway road appear in pink is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `color` option in the `stylers` array is an RGB Hex string of a pink
    tone, while `weight` defines the weight of the feature in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**More about the google.maps.MapTypeStyler object**'
  prefs: []
  type: TYPE_NORMAL
- en: A complete listing of the `MapTypeStyler` object specification can be found
    at [https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyler](https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyler).
  prefs: []
  type: TYPE_NORMAL
- en: 'After defining the `style` array in our `initMap()` function, we created a
    `StyledMapType` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This object takes two arguments—the first one is the `style` array and the second
    one is a `google.maps.StyledMapTypeOptions` object. Here, we have included only
    the `name` property; however, you can additionally include the `maxZoom` and `minZoom`
    properties between which the `StyledMapType` object will be displayed. In the
    screenshot of this recipe, you can see that the value we have assigned for the
    `name` property is displayed in the interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we created the `StyledMapType` object, we added an additional object
    called `mapTypeControlOptions`, which takes the `mapTypeIds` array in the `mapOptions`
    object, replacing the `mapTypeId` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This enables us to add multiple styles in addition to the standard `ROADMAP`
    map type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next comes the step of linking the `mapTypeId (''new_bluish_style'')` property
    that we have specified in the `mapTypeIds` array with the `StyledMapType` object
    (`bluishStyledMap`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'After linking the `mapTypeId` property with the `StyledMapType` object, we
    can end with the following line of code so that the map interface opens with a
    base map styled as per our intentions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In our recipe, we have covered how to style the base maps according to our taste.
    We have made use of the `google.maps.MapTypeStyle` object to select the feature
    types (`google.maps.MapTypeStyleFeatureType`) and the related elements (`google.maps.MapTypeStyleElementType`)
    and styled them using the `google.maps.MapTypeStyler` object. Then, we have added
    our `StyledMapType` object to the map, showing our own styling of the base maps
    of Google Maps.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the `StyledMapType` object is only one of the ways of handling the user-defined
    styled base maps in the Google Maps Javascript API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another simpler usage is specifying the `style` array in the `styles` property
    of the `mapOptions` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Another alternative is that after defining our `mapOptions` object, we can
    add the `styles` property later with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: There is an important difference between using the `StyledMapType` object and
    the `style` property of the `mapOptions` object. Using the `StyledMapType` object
    enables us to define a number of (virtually infinite) styles as map types. In
    addition, these map types can be seen in the map type control of the map interface,
    so it is very easy for the user to switch back and forth between the map types.
  prefs: []
  type: TYPE_NORMAL
- en: However, if the styles are attached to the map by the `mapOptions` object's
    `style` property, there is no way for the user to change multiple styles. In fact,
    in the map type control, there will be an option for you to select new styles,
    because styles are not attached to a `StyledMapType` object, and therefore cannot
    be identified as map types.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can get information on how to use the Styled Maps Wizard at [http://gmaps-samples-v3.googlecode.com/svn/trunk/styledmaps/wizard/index.html](http://gmaps-samples-v3.googlecode.com/svn/trunk/styledmaps/wizard/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the `style` arrays is a job with many cartographic details. Finding
    the correct combination for each feature and the element type in stylers would
    take too much time, especially if the only way of editing is in a text editor.
    Google has done a great job by creating the Styled Map Wizard to ease this time-consuming
    task. It enables you to perform all your styling tasks in an interface, so you
    can have an overview of what you are changing in real time. After you finish your
    work, you can export your styles as JSON to be used as a `style` array in your
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Using different tile sources as base maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google base maps display an immense amount of content (local POI information,
    road hierarchies, driving directions, and so on) and a large styling palette.
    In addition, it provides tools to change the styling of its base maps in its JavaScript
    API.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, you can have your other map tile sources displayed as base maps in
    the Google Maps interface. This feature enables you to display your tiled maps
    in the Google Maps interface, utilizing most of the tools of the Google Maps JavaScript
    API.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will go through displaying OpenStreetMap tiles as base maps
    in the Google Maps interface, using the JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can continue on from the *Creating a simple map in a custom DIV element*
    recipe from [Chapter 1](ch01.html "Chapter 1. Google Maps JavaScript API Basics"),
    *Google Maps JavaScript API Basics*, as we do not need to reiterate the basics
    of getting the map on screen.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With this recipe, you will see the OpenStreetMap tiles on top of Google Maps
    after completing the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `initMap()` function, create an `ImageMapType` object with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `google.maps.mapTypeControlOptions` object having the `mapTypeIds`
    property to your original `google.maps.MapTypeId` object and the `ImageMapType`
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Relate the new `mapTypeId` array to your `ImageMapType` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And lastly, set this new `google.maps.mapTypeId` object to be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can see the OpenStreetMap tiles on top of the Google base map tiles as shown
    in the following screenshot:![How to do it…](img/8825OT_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might have observed that there is indeed little difference between the structure
    of code extracts of the *Styling of the Google base maps* recipe and this recipe.
    In the former, we have used the `StyledMapType` object to change the styles of
    the original base maps, while in this recipe, we have used the `ImageMapType`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: This is because both the `StyledMapType` and `ImageMapType` objects are all
    special types of the `MapType` object (`google.maps.MapType`), in addition to
    the original base map types such as Roadmap, Satellite, Hybrid, and Terrain, which
    were introduced in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This part of the recipe creates an `osmMapType` object of `ImageMapType`. To
    create an `ImageMapType` object, we must supply two required properties: `getTileUrl`
    and `tileSize`.'
  prefs: []
  type: TYPE_NORMAL
- en: Before filling in these two parameters, we must make sure we have a tiled map
    service of which we can use tiles. OpenStreetMap ([http://www.openstreetmap.org/](http://www.openstreetmap.org/))
    is a kind of a map service, built and existing thanks to the community efforts
    around the world.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tiled map services are organized in a manner that the cartographic imagery
    is broken into parts (tiles) for each predetermined zoom level. These tiles are
    to be located alongside the x and y axis so that the tile map service consumers
    (such as the Google Maps API) can recognize their respective locations as seen
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/8825OT_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The upper-left tile's coordinate is (0,0), and it is called the origin tile.
    In Google Maps, the origin is at the upper-left (northwest) corner of the map
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that for the `getTileUrl` property, we supply a function that has
    two parameters: `coord` and `zoom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `coord` parameter is exactly the coordinate pair that takes the value of
    the tile coordinates introduced in the preceding screenshot. In other words, in
    the upper-left corner, `coord.x` should be 0 and `coord.y` should be 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that we are at zoom level 0, we can try and get a tile from the Openstreetmap
    URL supplied for the `getTileUrl` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If you copy this URL to the address bar of your browser, you will get the output
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/8825OT_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This image is a single tile from Openstreetmap at zoom level 0\. It is understood
    that the single OpenStreetMap tile at zoom level 0 covers the entire world.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s continue with zoom level 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tile.openstreetmap.org/1/0/0.png](http://tile.openstreetmap.org/1/0/0.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/8825OT_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You might have noticed that the level of detail has increased as the zoom level
    has increased from 0 to 1\. Also, the coverage area for each tile has been dramatically
    reduced (one-fourth in this case).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the complete tile layout at zoom level 1 in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/8825OT_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An important property of the tiled map services is that at each zoom level,
    each tile of the previous zoom level is tiled again to possess the level of detail
    required for the current zoom level.
  prefs: []
  type: TYPE_NORMAL
- en: Returning to our `osmMapType` creation, the function for the `getTileUrl` property
    works for placing the tiles of an external source (OpenStreetMap in our recipe).
    The two arguments named `coord` and `zoom` are handled by the Google Maps API
    itself. The API detects the bounding box of the map and builds up the tile layout
    for each zoom level. Therefore, the API recognizes which tile coordinate should
    be requested at which zoom level. The only thing that is left for you to do is
    to present the tile URLs of the external tiled map source, which is what you have
    done in the `getTileUrl` property.
  prefs: []
  type: TYPE_NORMAL
- en: The second property is the `tileSize` property, which accepts a `google.maps.Size`
    object. As its name implies, this property defines the width and height of each
    tile in terms of pixel values. The Google Maps tile layout is outlined for 256
    px by 256 px tiles; so we supply `google.maps.Size(256,256)`, where the first
    parameter stands for width and the second parameter stands for height.
  prefs: []
  type: TYPE_NORMAL
- en: The `maxZoom` property sets the maximum zoom level of display for the tiled
    map service. The external base maps will not be shown at zoom level 19 as `maxZoom`
    is set at `18` in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The `name` property is set for the name of your choice for the tiled map service.
    It is directly seen in the `mapTypeControl` object at the upper-right corner of
    the map interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final two lines are the same as the ones in the previous recipe; the first
    one relates to the `osmMapType` object of `ImageMapType` with `OSM` set for the
    `mapTypeID` object specified in the `mapTypeControlOptions` property of `mapOptions`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Detailed explanations of tile coordinates, pixel coordinates, and world coordinates
    in conjunction with projection details will be covered in the oncoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, using tiled map services as overlays to base maps will be covered
    in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Adding tile overlays to maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Maps has a selection of base maps as street maps and satellite imagery,
    which we discussed in the previous chapter; we will now discuss how additional
    base maps can be introduced to the Google Maps interface.
  prefs: []
  type: TYPE_NORMAL
- en: We can also use tiled map services as overlays to the base maps. By overlay,
    you can think of a separate sheet of map tiles put over the base maps. You can
    observe the details of the overlaid layer together with the base map. Examples
    of overlay layers might be of the boundaries of areas of interest, special POIs
    that are not found in the Google Maps' base maps, statistical results to be presented
    with aerial or point styling, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The tile map services that are used as base maps can technically be used as
    overlays in the Google Maps JavaScript API. However, using these tile map services
    (such as OpenStreetMaps) as overlays results in blocking the original base maps
    of Google Maps, as there would be no blank space in the map of overlaid tile map
    services (originally aimed to be base maps). This is because both the Google Maps
    base maps and the overlaid tile map services are designed to be base maps. Therefore,
    it is not recommended to use another tile map service that is meant for base maps
    as an overlay layer on top of the Google Maps base maps.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will cover how to show the OpenStreetMap tiles as overlay
    layers in the Google Maps interface using the JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the previous recipe's code and change it a bit for this recipe in
    order to eliminate the need of rewriting the `osmMapType` object details.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, you will see the OpenStreetMap tiles as an overlay layer if
    you follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `initMap()` function, leave the `osmMapType` object as it is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `google.maps.mapTypeControlOptions` object having `mapTypeIds` of
    both `google.maps.MapTypeId.ROADMAP` and `google.maps.MapTypeId.SATELLITE` in
    your `mapOptions` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Delete the following line of code (as no other base maps were specified in
    the preceding step):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the `ROADMAP` map type to be displayed as the base map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Overlay the `osmMapType` map type on top of the base map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/8825OT_02_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You now have the OpenStreetMap tiles as an overlay layer, as shown in the preceding
    screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is little difference between the preceding recipe and this recipe as you
    might have noticed. We have used the same custom `osmMapType` object of `google.maps.imageMapType`.
    We have used another tiled map service, but the structure remains the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'The modifications have begun with the used `mapTypes` object in the `mapTypeControlOptions`
    property of the `mapOptions` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We have included both the `ROADMAP` and `SATELLITE` map types to be selected
    as base maps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3 is important; we delete the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We are deleting this because we do not want the `osmMapType` object to be considered
    as a base map. We will just use it as an overlay.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, we are selecting our default base map as `ROADMAP`. You can
    change the code line for `SATELLITE` or you can make the switch from the `mapTypeControl`
    object in the map interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final line is the line where our overlay operation happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `overlayMapTypes` property is an array (`google.maps.MVCArray`). The
    `insertAt` method of `MVCArray` inserts objects at the specified index, and we
    have inserted our `imageMapType` object at index 0.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**More on google.maps.MVCArray**'
  prefs: []
  type: TYPE_NORMAL
- en: The `google.maps.MVCArray` array is a Google implementation of the ordinary
    JavaScript array. You can construct an MVC Array from an array. More details can
    be found at [https://developers.google.com/maps/documentation/javascript/reference#MVCArray](https://developers.google.com/maps/documentation/javascript/reference#MVCArray).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can have multiple overlays over the Google Maps base maps. You must use
    the `overlayMapTypes` property to set the associated orders for the overlay maps
    with the first parameter of the `insertAt` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Overlay layers are placed on top of the base maps, and it is a good practice
    to turn them on and off to see the base maps. If you need to turn the overlay
    off, you need to include the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This makes the overlay layer go off the map interface, but remember that the
    slot in the `overlayMapTypes` array is already allocated by the `insertAt` method.
    Therefore, if you want to present your user with the opportunity to toggle the
    overlay layers on and off (by means of a checkbox or so on), you can follow the
    given steps (copy the code of your current recipe before proceeding):'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `<body>` tag of your HTML code, add a checkbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make `osmMaptype` a global variable outside the `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `osmMapType` declaration in your `initMap()` function to assign
    the new global variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the `insertAt` method with the `pull(null)` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an overlay layer toggling function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The main trick of the preceding code extract is to first open a space in the
    `overlayMapTypes` array of the `initMap()` function. After that, you can call
    the `setAt()` method to turn the overlay layer on or off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding image overlays to maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overlaying tiled map services is a big capability on hand. It enables a variety
    of tiled map services that come into the scene using the Google Maps API. The
    existing stock of tiled map services are, in general, global map services, which
    means that they cover the whole world or at least some continent/country.
  prefs: []
  type: TYPE_NORMAL
- en: We may be interested, for instance, to overlay a map for a university campus,
    having its rough plan on hand. Or, we may have found some map of a historical
    sheet and want to make use of it. Or, we may have an internal building plan of
    a particular building and we would like to see this building plan on top of Google
    Maps.
  prefs: []
  type: TYPE_NORMAL
- en: Is it possible to overlay these microscale images on top of Google Maps? Yes,
    certainly! In fact, technically, there would be no difference between using campus
    plans or building plans instead of tiled map services as overlays. The important
    thing to note is that those plan sheets should be aligned as tiles similar to
    the tiled map services on top of base maps.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will not go through the details of preparing the tiles, but
    using them by means of the Google Maps JavaScript API. For convenience, we will
    use the plan of Google I/O's 2010 venue at Moscone Center, San Francisco.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are tools to prepare image tiles which can be used as overlays. The most
    prominent ones are MapTiler ([www.maptiler.org](http://www.maptiler.org)) and
    GDAL2Tiles ([http://www.klokan.cz/projects/gdal2tiles/](http://www.klokan.cz/projects/gdal2tiles/)).
    With these tools, you can georeference, rectify, and tile your images for the
    zoom levels of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the code from the *Using different tile sources as base maps* recipe,
    as very few modifications are required.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will have an overlay layer—a building—on top of the Google Maps base maps
    if you follow the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert a `bounds` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the `osmMapType` object with the `buildPlanMapType` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the last line to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Center the map on the Moscone Center:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/8825OT_02_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You can see the building floor plan supplied as an image organized in tiles
    on top of the Google Maps base maps in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have observed that the main structure stays the same as in the previous
    recipe. First, you define a `google.maps.ImageMapType` object and then overlay
    it on top of base maps by using the `overlayMapTypes.insertAt` array of the `map`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: The only change introduced in this recipe is due to the example building plan's
    boundaries (bounding box). In the previous recipe, the boundaries of the overlaid
    tiled map service were of the world, whereas in this recipe, we have limited it
    to the building, comparably on a much higher scale.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we have included the `bounds` object defining the boundaries in terms
    of tile coordinates for each zoom level. We have limited the zoom level from 17
    to 20 as lower zoom levels (<17) would not show the building in a sensible fashion.
    The building would be just a small rectangle in zoom levels 16 and 15, and it
    would not show up in zoom levels lower than 14.
  prefs: []
  type: TYPE_NORMAL
- en: For each zoom level property in the `bounds` object, we have an array of x and
    y tile coordinates, x being the first and y being the second. Inside these arrays,
    the lower and upper bounds for the tile coordinates are found.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you may be wondering how these specific numbers are found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'These numbers are actually the tile coordinates that intersect with the boundaries
    of the Moscone Center as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/8825OT_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can observe that in the 17th zoom level, the x coordinate must be between
    20969 and 20970, and the y coordinate must be between 50657 and 50658 for our
    image overlay.
  prefs: []
  type: TYPE_NORMAL
- en: The `bounds` object is used to create constraints for a restricted number of
    zoom levels to fetch tiles in the definition of the `buildPlanMapType` object's
    `getTileUrl` function. The function for the `getTileUrl` property checks each
    tile coordinate against the `bounds` object's items, so that the API does not
    try to fetch tiles that do not intersect with the boundaries of the building plan.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the transparency of overlays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API supports third-party tiled map services or images
    to be overlaid on top of base maps. However, there is a problem with the overlay
    layers; they come on top of base maps and make them invisible. Of course, you
    can turn them on or off according to your choice; however, this is not a solution
    if you want to see the base maps together with the overlay layers.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, you can just modify the opacity of the overlay layers to see the base
    maps and the overlay layers.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is focused on changing the transparency of the overlay layers introduced
    in the last two recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the code introduced in the *Adding tile overlays to maps* recipe
    of this chapter and modify it a little to achieve the result. Be sure to copy
    the code of the recipe first.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will be able to make your overlay layer transparent after completing the
    one-step operation presented in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Just change the `osmMapType` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can adjust the transparency of your overlay layers as shown in the following
    screenshot:![How to do it…](img/8825OT_02_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Changing the transparency of overlay layers is very simple. Adding the following
    code to the `imageMapType` object does our work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The opacity property of the `imageMapType` object makes the incoming tiles transparent
    according to the values supplied. The value for the opacity property must be between
    1 and 0, where 1.0 stands for fully opaque overlays, while 0 stands for fully
    transparent overlays.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a heat map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Google Maps API lays the foundation for several map-based analysis, including
    heat maps. A heat map is a form of visualization that shows the concentration
    of points through gradient color scales.
  prefs: []
  type: TYPE_NORMAL
- en: Points, in this respect, may be the representation of any geographically represented
    items such as hospitals, houses, schools, measured values of sea pollution tagged
    with coordinates, the location of waste collection bins, and so on. The list is
    practically infinite.
  prefs: []
  type: TYPE_NORMAL
- en: 'Heat maps are very important inputs for geostatistics. In a map display, you
    capture the intensity in a moment compared to the sole display of the locations
    of points:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a heat map](img/8825OT_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot depicts the location of the OpenStreetMap points layer
    in İstanbul, Turkey, as of July. You might just get an idea of where the concentration
    of points is from the preceding screenshot, but the following screenshot shows
    it more clearly. The most intensely concentrated locations are colored in red,
    whereas lesser concentrated locations are in yellow. And, as you might have guessed,
    the green-colored locations are the least concentrated ones.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a heat map](img/8825OT_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we will create a heat map from a set of points using the Google
    Maps JavaScript API. It is worth noticing that this feature is not available within
    the standard Google Maps API; you need to load the visualization library to the
    API as shown in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the first recipe of [Chapter 1](ch01.html "Chapter 1. Google Maps
    JavaScript API Basics"), *Google Maps JavaScript API Basics,* as a base, because
    we do not need to reiterate the code for the map display. Please do not forget
    to copy the code from the original recipe before editing for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will have a heatmap overlay from the set of points you use if you follow
    the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference the `visualization` libraries where you reference the Google Maps
    API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open up a new text file in the same directory that contains our HTML file and
    name it `ch2_heatMapPoints.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an array of `google.maps.LatLng` objects (the complete array consists
    of 217 objects, which you can get from the downloaded code) in the newly created
    JavaScript file from the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the `ch2_heatMapPoints.js` file in your HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the heatmap layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the heatmap layer to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should now have your heatmap overlay from your set of points, as shown in
    the following screenshot:![How to do it…](img/8825OT_02_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firstly, creating a heatmap layer in the Google Maps JavaScript API requires
    the `visualization` library of the API to be added to the section where the Google
    Maps JavaScript API is referenced:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: With this addition, you can use the `google.maps.visualization.HeatmapLayer`
    object to create the heatmap layers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `google.maps.visualization.HeatmapLayer` object needs a JavaScript array
    or the `google.maps.MVCArray` object (an array) in which its elements are the
    `google.maps.LatLng` objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The `google.maps.LatLng` object is constructed with two parameters with a longitude
    and latitude coordinate pair, to mention a point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: We have created the array object and its contents with 217 points in another
    JavaScript file, because it would take too much space in our original HTML file.
    Also, it is a good practice to have our data and related objects in another file
    to avoid potential structural problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can add our heatmap layer to our current map with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can toggle the overlay layers introduced in the previous recipes, you
    can also toggle the heatmap layers with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Heat maps are created from a set of points, and these points can be at different
    places as well as the same places. In other words, multiple `google.maps.LatLng`
    objects may be placed at the same place. The following code is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: This will increase the intensity of this point; it will be likely to be seen
    in red in the heat map.
  prefs: []
  type: TYPE_NORMAL
- en: 'But what if the instances of the `google.maps.LatLng` objects sharing the same
    coordinate pair increases? One method is to copy the lines as shown in the preceding
    code. However, there is another smarter way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'This object is `google.maps.visualization.WeightedLocation`, and it takes two
    properties: one is the `google.maps.LatLng` object, and the other one is `weight`.
    This `weight` parameter takes any numeric value representing the occurrence count
    of the points.'
  prefs: []
  type: TYPE_NORMAL
- en: By default, the `LatLng` object itself has a weight of 1\. Therefore, having
    a `WeightedLocation` object with the `weight` property set to `3` is equivalent
    to having the same `LatLng` object.
  prefs: []
  type: TYPE_NORMAL
- en: The `WeightedLocation` and `LatLng` objects may be used together in the array
    supplied for the heatmap layer's `data` property.
  prefs: []
  type: TYPE_NORMAL
- en: The heatmap layer's object possesses a range of options including `gradient`,
    `radius`, `opacity`, `maxIntensity`, and `dissipating`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `gradient` option takes an array of colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'You can set the gradient property by adding a property to the `HeatmapLayer`
    constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can set the options later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: The `dissipating` option is for adjusting the pixels needed to show intensity
    across zoom levels. Its default value is `false`, and this allows more pixels
    to be colored per point for intensity when the zoom level is increased.
  prefs: []
  type: TYPE_NORMAL
- en: 'By using the `maxIntensity` property, you can scroll up or down the heatmap
    layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code makes this recipe's output greenish because the intensity
    is increased. More points at the same location are required to make the heat map
    look reddish.
  prefs: []
  type: TYPE_NORMAL
- en: You can tweak the `radius` property to adjust the radius of the intensity for
    each point. The unit is in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can create heat maps using Fusion Tables in the cloud, which will be introduced
    later in the book. There are pros and cons when creating a heat map in either
    a browser or the cloud; this will be discussed in detail later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Details on the `LatLng` object and its use to create point vector overlays will
    be covered in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the traffic layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In today's world, the condition of traffic is very important information in
    cities. If there is an accident on the way or a recent construction that blocks
    an important street, it affects your whole day. How useful would it be to have
    real-time traffic information directly on your maps?
  prefs: []
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API has a very handy aspect that lets you have traffic
    information fed on a real-time basis on top of your base maps.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will cover how to display traffic information on your Google
    Maps.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the first recipe of [Chapter 1](ch01.html "Chapter 1. Google Maps
    JavaScript API Basics"), *Google Maps JavaScript API Basics,* as a base for the
    basic map display. After copying the code of the original recipe, you can proceed
    forward.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to show the traffic layer:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, change the center of your map to a location where the traffic layer
    is served (details will be available in the *How it works...* section). For instance,
    for Barcelona, Spain, use the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Construct the `TrafficLayer` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `TrafficLayer` object to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can see the traffic layer colored according to the density of the real-time
    traffic condition as shown in the following screenshot:![How to do it…](img/8825OT_02_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first step, you might have noticed that we have switched to Barcelona,
    Spain, because in some countries, the traffic layer is not available. For the
    list of countries with the availability of traffic layers, you must view the spreadsheet
    at [http://gmaps-samples.googlecode.com/svn/trunk/mapcoverage_filtered.html](http://gmaps-samples.googlecode.com/svn/trunk/mapcoverage_filtered.html).
    You can filter the **traffic** column to see all the countries with traffic layers.
  prefs: []
  type: TYPE_NORMAL
- en: The construction of the `TrafficLayer` object and its addition to the map is
    straightforward. There is no property involved in the construction of the `TrafficLayer`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can toggle the `TrafficLayer` object off with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Adding the transit layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public transit lines have immense importance in cities, especially for tourists
    and foreigners in the city. Mapping these transit lines (bus, underground, and
    so on) onto the base maps of several cities is a tedious task, and this is what
    the Google Maps JavaScript API offers through its special objects.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will add transit layers to the Google Maps map interface.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuing from the previous recipe, *Adding the traffic layer*, will simplify
    our work, as we will only replace the `TrafficLayer` object with `TransitLayer`
    classes. Remember to copy the code of the original recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to show public transit lines as an overlay:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete `TrafficLayer` related lines (the last two lines).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Instead of the `TrafficLayer` object, use the `TransitLayer` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `TransitLayer` object to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can see the public transit lines as an overlay on Google Maps in your area
    of preference as shown in the following screenshot:![How to do it…](img/8825OT_02_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The transit layer is offered in certain cities around the world, and you can
    find the complete listing of these cities at [http://www.google.com/intl/en/landing/transit/](http://www.google.com/intl/en/landing/transit/).
  prefs: []
  type: TYPE_NORMAL
- en: The `TransitLayer` object can bring multiple colored public transit lines. The
    color choices are not random; they are selected based on distinct transit line
    operators.
  prefs: []
  type: TYPE_NORMAL
- en: The construction and display of the `TransitLayer` object is the same as the
    `TrafficLayer` object.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the bicycling layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is good to have the information about the cycling paths and common routes
    on top of base maps; Google Maps offers this as an overlay layer.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will introduce the bicycling layer and its usage as an overlay
    in the Google Maps JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuing from the previous recipe, *Adding the traffic layer*, will simplify
    our work, as we will only replace the `TransitLayer` object with the `BicyclingLayer`
    classes. Remember to copy the code of the original recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps required for showing the cycling paths and routes are presented as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the two lines containing `TransitLayer`, supplanting the `BicyclingLayer`
    object instead of the `TransitLayer` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can observe the cycling paths and routes on top of the Google Maps base
    maps as shown in the following screenshot:![How to do it…](img/8825OT_02_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The bicycling layer has its own subdivisions reflected in its styles; the dark
    green routes represent the paths dedicated for cycling, while the light green
    ones represent streets with bike lanes. Lastly, the dashed routes represent the
    bicycle paths and streets recommended for use, but are not dedicated.
  prefs: []
  type: TYPE_NORMAL
- en: The steps to display the bicycling layer are totally identical to the transit
    or traffic layers, so there is no additional detail for the specifics of the bicycling
    layer.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the weather and cloud layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Information on the temperature and weather conditions coupled with a map display
    is very common in weather reports on TVs; Google has put a feature in its API
    so that we can have this information in our own maps.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to display weather-related information on
    top of base maps as overlays.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can continue on from the *Creating a simple map in a custom DIV element*
    recipe from [Chapter 1](ch01.html "Chapter 1. Google Maps JavaScript API Basics"),
    *Google Maps JavaScript API Basics*, as we do not need to go into detail for the
    basic map display.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to show the respective temperatures and cloud conditions
    in your maps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the weather library to the end of the reference for the Google Maps JavaScript
    API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the center and zoom of the map in the `mapOptions` object so that we
    can make use of the related layers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Construct an instance of the `google.maps.weatherLayer` object named `weatherLayer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `weatherLayer` to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Construct an instance of `google.maps.weather.cloudLayer` named `cloudLayer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `cloudLayer` to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can see the respective temperatures and cloud conditions in your Google
    Maps application as shown in the following screenshot:![How to do it…](img/8825OT_02_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to see weather-specific layers, we have to reference the `weather`
    libraries exactly in the same way we have referenced the `visualization` libraries
    for the heatmap overlays.
  prefs: []
  type: TYPE_NORMAL
- en: We have changed the center and zoom of the map for a purpose. The zoom is set
    to 5 as cloud layers are only visible between the zoom levels of 0 and 6\. Also,
    we have arranged the center of the map in the Mediterranean to view a couple of
    countries with the weather information of their big cities.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that together with the weather layers, administrative
    labels such as street and city names are not shown. Also, the weather layer is
    applicable between the zoom levels of 0 and 12.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the construction of the `google.maps.weather.weatherLayer` object, you can
    specify the temperature units through the `temperatureUnits` property. The possible
    values are defined in `google.maps.weather.TemperatureUnit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: You can add the `weatherLayer` and `cloudLayer` layers to the map by calling
    their respective `setMap()` method and supplying the `map` object as the only
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the weather layer, you view the cities' weather conditions with the
    temperature information fed by [http://www.weather.com](http://www.weather.com).
    The icons displayed on top of the cities will change according to the real-time
    weather, whether it is the sun, clouds, or rain. Also, clicking on an icon will
    open a detailed popup showing the weather conditions for the next four days.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can tweak additional properties besides `temperatureUnits` for the `weatherLayer`
    object. You can suppress the detailed pop-up window or you can set the units for
    the wind speed and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**More about WeatherLayerOptions**'
  prefs: []
  type: TYPE_NORMAL
- en: The complete listing on `WeatherLayerOptions` can be found at [https://developers.google.com/maps/documentation/javascript/reference#WeatherLayerOptions](https://developers.google.com/maps/documentation/javascript/reference#WeatherLayerOptions).
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Panoramio layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Panoramio is a geotagged photo-sharing website. This means you can upload your
    photos provided you geotag (georeference) them. Geotagging involves attaching
    a coordinate pair to the target object, whether it is a photo, video, or any other
    resource. You can find detailed information on how to use Panoramio at [http://www.panoramio.com/](http://www.panoramio.com/).
  prefs: []
  type: TYPE_NORMAL
- en: You can view Panoramio photos on Google Maps, and this recipe will cover the
    basics of how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can continue on from the *Creating a simple map in a custom DIV element*
    recipe from [Chapter 1](ch01.html "Chapter 1. Google Maps JavaScript API Basics"),
    *Google Maps JavaScript API Basics*, as map display basics are already covered
    here.
  prefs: []
  type: TYPE_NORMAL
- en: As always, please copy the original recipe before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can overlay the variety of Panoramio image stocks on top of Google Maps
    if you follow the steps presented:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Panoramio library to the referenced libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Construct a new `google.maps.panoramio.PanoramioLayer()` object named `panoramioLayer`
    after the creation of the map object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `panoramioLayer` object to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can now have the Panoramio images overlaid on top of Google Maps as shown
    in the following screenshot:![How to do it…](img/8825OT_02_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding the Panoramio layer is technically no different from what we did in the
    previous recipe. We add the related reference library, construct the layer, and
    add it to the map in the same pattern.
  prefs: []
  type: TYPE_NORMAL
- en: You can click on the thumbnail photos and a detailed pop-up window will open.
    In this popup, you can view the photo in a larger size along with its name and
    the username of the person who uploaded the photo.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Panoramio layer provides extra capability to customize the overlay layer.
    For instance, you can restrict the photos by filtering tags using the `setTag()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: This will filter the displayed thumbnails to the ones that include the `Eiffel`
    keyword in their tags.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you can filter according to the user ID by calling the `setUserId()` method,
    supplying the `userId` string as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also suppress the detailed pop-up window that opens by using the `suppressInfoWindows`
    property that the `PanoramioLayer` object takes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**More about PanoramioLayer**'
  prefs: []
  type: TYPE_NORMAL
- en: The complete listing on `PanoramioLayer` can be found at [https://developers.google.com/maps/documentation/javascript/reference#PanoramioLayerOptions](https://developers.google.com/maps/documentation/javascript/reference#PanoramioLayerOptions).
  prefs: []
  type: TYPE_NORMAL
