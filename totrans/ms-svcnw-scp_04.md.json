["```js\nonClick();\n```", "```js\nfunction onClick() {\n// Write script here to run when an UI Action is selected\n\n}\n```", "```js\ngsftSubmit(null, g_form.getFormElement(), '<ui_action_name>');\n```", "```js\nif(typeof window == 'undefined')\nserverSideCode();\n\nfunction serverSideCode() {\n//Run the server side UI Action code\n\n}\n```", "```js\nfunction onClick() {\n// Write script here to run when an UI Action is selected\ngsftSubmit(null, g_form.getFormElement(), 'incident_ui_action');\n\n}\n\nif(typeof window == 'undefined')\nserverSideCode();\n\nfunction serverSideCode() {\n//Run the server side code\n\n}\n```", "```js\nvar ajaxCall = new GlideAjax('serverAjax');\najaxCall.addParam('sysparm_name','getUserLocation');\najaxCall.addParam('sysparm_user_id', g_form.getValue('caller_id'));\najaxCall.getXML(ajaxResponse);\n\nfunction ajaxResponse(response) {\n   var answer = response.responseXML.documentElement.getAttribute(\"answer\");\n   alert(answer);\n}\n```", "```js\nvar serverAjax = Class.create();\nserverAjax.prototype = Object.extendsObject(AbstractAjaxProcessor, {\n\n  getUserLocation: function getUserLocation() {\n    var userRecord = new GlideRecord('sys_user');\n    userRecord.get(this.getParameter('sysparm_user_id')); \n    return userRecord.location.getDisplayValue();\n\n  } \n\n});\n```", "```js\nfunction validateForm() {\n  g_form.setMandatory('justification', true);\n\n  //Call the UI Action to run the server side script\n  gsftSubmit(null, g_form.getFormElement(), 'authorize');\n  g_form.setMandatory('justification', false);\n}\n\nif(typeof window == 'undefined')\n  setToAuthorize();\n\nfunction setToAuthorize() {\n  current.state = -3;  //Authorize state\n  current.update();\n\n}\n```", "```js\nfunction onChange(control, oldValue, newValue, isLoading) {\n  if (isLoading) {\n    return;\n  }\n\n  //Clear the Access field when the user changes to ensure a valid selection is made.\n  g_form.setValue('variables.access', ''); \n\n  if (newValue == '') {\n    return;\n  }\n\n  //Ensure a selected user has some active access else clear field\n  var ga = new GlideAjax('accessCheck');\n  ga.addParam('sysparm_name','userHasAccess');\n  ga.addParam('sysparm_user', newValue);\n  ga.getXML(AJAXParse);\n\n}\n\nfunction AJAXParse(response) {\n  var answer = response.responseXML.documentElement.getAttribute(\"answer\"); \n  if (answer == 'false') {\n    g_form.addErrorMessage('User has no access to remove.');\n    g_form.setValue('variables.user', ''); \n  }\n} \n```", "```js\nvar accessCheck = Class.create();\naccessCheck.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {\n\n  /**\n  * Ajax Call - Returns whether a user has an active access record \n  */ \n  userHasAccess: function userHasAccess() {\n\n    var uAccess = new GlideRecord('u_access');\n    uAccess.addQuery('u_user', this.getParameter('sysparm_user'));    \n    uAccess.query(); \n    if (uAccess.next()) {\n      return true;\n    } \n    return false;\n  }\n\n});\n```", "```js\nfunction onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if (newValue === '') {\n    return;\n  }\n\n  //Check whether change request has open tasks\n  var ga = new GlideAjax('changeScripts');\n  ga.addParam('sysparm_name','changeHasOpenTasks');\n  ga.addParam('sysparm_change', newValue);\n  ga.getXML(AJAXCall); \n\n}\n\nfunction AJAXCall(response) {\n  var answer = response.responseXML.documentElement.getAttribute(\"answer\");\n\n  if (answer == 'true') {\n    g_form.showFieldMsg('rfc', 'Change has open tasks', 'error');\n  } else {\n    g_form.showFieldMsg('rfc', 'Change has no open tasks', 'info');\n  }\n}\n```", "```js\nvar changeScripts = Class.create();\nchangeScripts.prototype = Object.extendsObject(AbstractAjaxProcessor, {\n\n  /**\n  * Ajax Call - Returns whether a change has open tasks \n  */ \n  changeHasOpenTasks: function changeHasOpenTasks() {\n\n    var cTask = new GlideRecord('change_task');\n    cTask.addQuery('change_request', this.getParameter('sysparm_change')); \n    cTask.addQuery('state', 'NOT IN', '3,4'); //Closed and Cancelled\n    cTask.query(); \n    if (cTask.next()) {\n      return true;\n    } \n    return false;\n  }\n});\n```"]