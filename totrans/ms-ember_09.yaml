- en: Chapter 9. Logging, Debugging, and Error Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Until now, we have learned the basics of architecting and building Ember.js
    applications. In this chapter, we will learn how to debug these applications in
    order to not only reduce development time, but also to make development more fun.
    We will, therefore, cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracing events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Ember.js inspector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging and debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ember.js can be downloaded in two formats that are meant to be used in development
    and production environments accordingly. The development (magnified) build is
    recommended to be used during the application development period for easier debugging.
    There are various ways to log and inspect objects created inside an application.
    We will discuss how to log and debug each of these objects in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides the logging functions already provided by the browser''s `console`
    object, Ember.js provides the following `Ember.Logger` logging utilities that
    are specifically meant to log Ember.js objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assert`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`debug`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`error`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`info`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`warn`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ember.js bindings can be logged as they occur. To enable this logging, add
    the following code to a program before the application is initialized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Most browsers allow setting breakpoints at predetermined points in an application.
    Breakpoints pause the execution of a program using the `debugger` keyword. Pausing
    a program can help troubleshoot problems as well as trace events. For example,
    we could set a breakpoint that will let us know whether a property was computed
    as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates a breakpoint, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Objects](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Hitting the *F8* key resumes the execution of the application. Multiple breakpoints
    could be set up to trace the execution of an event. The sidebar on the right-hand
    side of the developer tools could then be used to enable, disable, or inspect
    these points.
  prefs: []
  type: TYPE_NORMAL
- en: Router and routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When an application transitions from one route to another, it may be necessary
    to trace these events in the case of misbehavior. Enabling this behavior is easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'More detailed logging can be enabled by additionally passing the `LOG_TRANSITIONS_INTERNAL`
    option as `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Even with this simple application, running it will log the following transition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The application controller houses two useful pieces of information about the
    current application state. To get the current application route name, we will
    reference this from the application controller, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The full path of this current route could be looked up appropriately, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Any instantiated route can be referenced from the application container, shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we''ve seen time and again, templates can be looked up from the `Ember.TEMPLATES`
    object; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Breakpoints can also be set right from templates! For example, consider that
    we have an `index` template defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We may want to inspect the rendering of this template by using the `debugger`
    expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Logging from the template is also possible using the `log` expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This logs the route's model to the browser's console.
  prefs: []
  type: TYPE_NORMAL
- en: Controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A specific controller can be looked up globally via the main application container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This application container registers classes to be instantiated by the application,
    which can, in turn, be referenced. Note that the preceding example should be used
    for debug purposes only. Controller dependency should instead be used to access
    other controllers from routes and controllers, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can enable logs that will indicate generation of controllers by
    passing another option during application instantiation, as shown in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instantiated views have unique IDs and can therefore be looked up accordingly,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Just as with routes, we can also log view events on route transitions. This
    may be useful in cases where we need to verify whether registered view classes
    are being used. This behavior can be enabled as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Using the Ember.js inspector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An Ember.js application can be inspected via a browser extension that is available
    for Chrome, Opera, and Firefox. This extension lets you inspect objects in your
    application from an Ember.js tab that is created in the developer tools. To get
    started in Chrome, you''ll need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit `chrome://flags` and ensure **Experimental Extension APIs** is enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the extension at [https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi](https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your Ember.js application and press the *Ctrl* + *U* keys to launch the
    developer tools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An **Ember** tab should have been created next to the **Console** tab, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Ember.js inspector](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the sidebar, clicking on **View Tree** gives detailed information about
    the current state of the application, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Ember.js inspector](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next tab shows all the routes, views, controllers, and templates registered
    in the application. Here is a screenshot taken from the **Todos** application
    used in the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Ember.js inspector](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If an application uses Ember.js data, the **Data** tab will display all the
    loaded models:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Ember.js inspector](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Client-side tracing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When developing an Ember.js or any other MVC application, it may be wise to
    trace events that occur in the application. Tracing events has the benefit of
    yielding data that becomes meaningful when presented as graphs. A simple tracer
    could be implemented by logging the timestamp of predetermined points of an ongoing
    event. For example, let''s create an application that traces progress in loading
    models from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce logs similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Graphing this data could help us gain an insight into the performance of our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Error management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to saving logs back to the server, we could also `POST` any errors
    that could occur in the application by the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just learned how to log events as well as debug bottlenecks in our Ember.js
    applications. A lot of development time could be saved as a result of the proper
    logging and tracing of events in client-side applications. In the next chapter,
    we'll learn how to write and run tests for our applications.
  prefs: []
  type: TYPE_NORMAL
