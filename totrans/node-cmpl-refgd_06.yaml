- en: Implementing the Mobile-First Paradigm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that our first Express application is usable, we act on the mantra of this
    age of software development: mobile-first. Mobile devices, whether they be smartphones,
    tablet computers, automobile dashboards, refrigerator doors, or bathroom mirrors,
    are taking over the world.'
  prefs: []
  type: TYPE_NORMAL
- en: Another issue is mobile-first indexing, meaning that search engines are starting
    to preference indexing the mobile version of a website. Search engines so far
    concentrated on indexing the desktop version of websites, but the growing popularity
    of mobile devices means search engine results are skewed away from what folks
    are using. Google says it is not fair to mobile users if the search result, which was
    derived from the desktop version, does not match the mobile version of a website.
    For Google's take, including technical tips on the markup to use, see [http://webmasters.googleblog.com/2017/12/getting-your-site-ready-for-mobile.html](http://webmasters.googleblog.com/2017/12/getting-your-site-ready-for-mobile.html).
  prefs: []
  type: TYPE_NORMAL
- en: The primary considerations in designing for mobiles are the small screen sizes,
    the touch-oriented interaction, that there's no mouse, and the somewhat different
    user interface expectations. With the *Notes* application, our user interface
    needs are modest, and the lack of a mouse doesn't make any difference to us.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we won''t do much Node.js development. Instead, we''ll:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify the templates for better mobile presentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit CSS and SASS files to customize the style
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about Bootstrap 4, a popular framework for responsive UI design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By doing so, we'll dip our toes in the water of what it means to be a full stack
    web engineer.
  prefs: []
  type: TYPE_NORMAL
- en: Problem – the Notes app isn't mobile friendly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by quantifying the problem. We need to explore how well (or not)
    the application behaves on a mobile device. This is simple to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the *Notes* application. Determine the IP address of the host system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using your mobile device, connect to the service using the IP address, and browse
    around the *Notes* application, putting it through its paces, noting any difficulties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another way to approach this is to use your desktop browser, resizing it to
    be very narrow. The Chrome DevTools also includes a mobile device emulator. Either
    way, you can mimic the small screen size of a smartphone on your desktop.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see a real user interface problem on a mobile screen, edit `views/noteedit.ejs` and
    change this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'What''s changed is the `cols=80` parameter. We want this `textarea` element
    to be overly large so that you can experience how a non-responsive web app appears
    on a mobile device. View the application on a mobile device and you''ll see something
    like one of the screens in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e17c4d5-7d65-4711-bc7d-1bb1b6cf1a4e.png)'
  prefs: []
  type: TYPE_IMG
- en: Viewing a note works well on an iPhone 6, but the screen for editing/adding
    a note is not good. The text entry area is so wide that it runs off the side of
    the screen. Even though interaction with `FORM` elements work well, it's clumsy.
    In general, browsing the *Notes* application gives an acceptable mobile user experience
    that doesn't suck and won't make our users give rave reviews.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile-first paradigm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile devices have a smaller screen, are generally touch oriented, and have
    different user experience expectations than a desktop computer.
  prefs: []
  type: TYPE_NORMAL
- en: To accommodate smaller screens, we use **responsive web design** techniques.
    This means designing the application to accommodate the screen size and ensuring
    websites provide optimal viewing and interaction across a wide range of devices.
    Techniques include changing font sizes, rearranging elements on the screen, using
    collapsible elements that open when touched, and resizing images or videos to
    fit available space. This is called **responsive** because the application responds to
    device characteristics by making these changes.
  prefs: []
  type: TYPE_NORMAL
- en: By mobile-first, we mean that you design the application first to work well
    on a mobile device and then move on to devices with larger screens. It's about
    prioritizing mobile devices first.
  prefs: []
  type: TYPE_NORMAL
- en: The primary technique is using media queries in stylesheets to detect device
    characteristics. Each media query section targets a range of devices, using CSS
    declaration to appropriately restyle content.
  prefs: []
  type: TYPE_NORMAL
- en: Let's consult a concrete example. The **Twenty Twelve** theme for Wordpress
    has a straightforward responsive design implementation. It's not built with any
    framework, so you can see clearly how the mechanism works, and the stylesheet
    is small enough to be easily digestible. Refer to its source code in the Wordpress
    repository at [https://themes.svn.wordpress.org/twentytwelve/1.9/style.css](https://themes.svn.wordpress.org/twentytwelve/1.9/style.css).
  prefs: []
  type: TYPE_NORMAL
- en: The stylesheet starts with a number of **resets**, where the stylesheet overrides
    some typical browser style settings with clear defaults. Then, the bulk of the
    stylesheet defines styling for mobile devices. Toward the bottom of the stylesheet
    is a section labeled Media queries where, for certain sized screens, the styles
    defined for mobile devices are overridden to work on devices with larger screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'It does this with the following two media queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first segment of the stylesheet configures the page layout for all devices.
    Next, for any browser viewport at least `600px` wide, reconfigure the page to
    display on the larger screen. Then, for any browser viewport at least `960px`
    wide, reconfigure it again. The stylesheet has a final media query to cover print
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: These widths are what's called a **breakpoint**. Those threshold viewport widths
    are where the design changes itself around. You can see breakpoints in action
    by going to any responsive website, then resizing the browser window. Watch how
    the design jumps at certain sizes. Those are the breakpoints chosen by the author
    of that website.
  prefs: []
  type: TYPE_NORMAL
- en: There's a wide range of differing opinions about the best strategy to choose
    your breakpoints. Do you target specific devices or do you target general characteristics?
    The Twenty Twelve theme did fairly well on mobile devices using only two viewport-size media
    queries. The CSS-Tricks blog has posted an extensive list of specific media queries
    for every known device, which is available at [https://css-tricks.com/snippets/css/media-queries-for-standard-devices/](https://css-tricks.com/snippets/css/media-queries-for-standard-devices/).
  prefs: []
  type: TYPE_NORMAL
- en: 'We should at least target these devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Small**: This includes iPhone 5 SE.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Medium**: This can refer to tablet computers or the larger smartphones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Large**: This includes larger tablet computers or the smaller desktop computers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extra-large**: This refers to larger desktop computers and other large screens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Landscape/portrait**: You may want to create a distinction between landscape
    mode and portrait mode. Switching between the two of course changes viewport width,
    possibly pushing it past a breakpoint. However, your application may need to behave
    differently in the two modes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enough with the theory; let's get back to our code.
  prefs: []
  type: TYPE_NORMAL
- en: Using Twitter Bootstrap on the Notes application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap is a mobile-first framework consisting of HTML5, CSS3, and JavaScript
    code providing a comprehensive set of world class, responsive web design components.
    It was developed by engineers at Twitter and then released to the world in August
    2011.
  prefs: []
  type: TYPE_NORMAL
- en: The framework includes code to retrofit modern features onto older browsers,
    a responsive 12-column grid system, and a long list of components (some using
    JavaScript) for building web applications and websites. It's meant to provide
    a strong foundation on which to build your application.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [http://getbootstrap.com](http://getbootstrap.com) for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Setting it up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to duplicate the code you created in the previous chapter.
    If, for example, you created a directory named `chap05/notes`, then create one
    named `chap06/notes` from the content of `chap05/notes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to go about adding Bootstrap''s code in the *Notes* application.
    The Bootstrap website suggests loading the required CSS and JavaScript files out
    of the Bootstrap (and jQuery) public CDN. While that''s easy to do, we won''t
    do this for two reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It violates the principle of keeping all dependencies local to the application
    and not relying on global dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It prevents us from generating a custom theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead, we'll install a local copy of Bootstrap. There are several ways to
    install Bootstrap. For example, the Bootstrap website offers a downloadable TAR/GZIP
    archive (tarball). The better approach is an automated dependency management tool.
  prefs: []
  type: TYPE_NORMAL
- en: The most straightforward choice is using Bootstrap ([https://www.npmjs.com/package/bootstrap](https://www.npmjs.com/package/bootstrap)),
    popper.js ([https://www.npmjs.com/package/popper.js](https://www.npmjs.com/package/popper.js)),
    and jQuery ([https://www.npmjs.com/package/jquery](https://www.npmjs.com/package/jquery))
    packages in the npm repository. These packages provide no Node.js modules, and
    instead are frontend code distributed through npm.
  prefs: []
  type: TYPE_NORMAL
- en: 'We install the packages using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As we see here, when we install Bootstrap, it helpfully tells us the corresponding
    versions of jQuery and `popper.js` to use. Therefore, we dutifully install those
    versions. What''s most important is to see what got downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Within each of these directories are the CSS and JavaScript files that are meant
    to be used in the browser. More importantly, these files are located in a given
    directory whose pathname is known—specifically, the directories we just inspected.
    Let's see how to configure our Express app to use those three packages on the
    browser side.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Bootstrap to application templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the Bootstrap website, they give a recommended HTML structure. We'll be interpolating
    from their recommendation to use Bootstrap code provided through the CDN to instead
    use the local copies of Bootstrap, jQuery, and Popper that we just installed.
    Refer to the Getting started page at [http://getbootstrap.com/docs/4.0/getting-started/introduction/](http://getbootstrap.com/docs/4.0/getting-started/introduction/).
  prefs: []
  type: TYPE_NORMAL
- en: 'What we''ll do is modify `views/layout.hbs` to match their recommended template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is largely the template shown on the Bootstrap site, incorporating the
    previous content of `views/layout.hbs`. Our own stylesheet is loaded following
    the Bootstrap stylesheet, giving us the opportunity to override anything in Bootstrap
    we want to change. What's different is that instead of loading Bootstrap, `popper.js`,
    and jQuery packages from their respective CDNs, we use the path `/assets/vendor/product-name`
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: This is the same as recommended on the Bootstrap website except the URLs point
    to our own site rather than relying on the public CDN.
  prefs: []
  type: TYPE_NORMAL
- en: 'This `/assets/vendor` URL is not currently recognized by the `Notes` application.
    To add this support, edit `app.js` to add these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `public` directory, we have a little house-keeping to do. When `express-generator`
    set up the initial project, it generated `public/images`, `public/javascripts`,
    and `public/stylesheets` directories. We want each to be within the `/assets`
    directory, so do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have our asset files, including Bootstrap, `popper.js`, and jQuery,
    all available to the `Notes` application under the `/assets` directory. The page
    layout refers to these assets and should give us the default Bootstrap theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The on-screen differences are minor, but this is the proof necessary that the
    CSS and JavaScript files for Bootstrap are being loaded. We have accomplished
    the first major goal—using a modern, mobile-friendly framework to implement a
    mobile-first design.
  prefs: []
  type: TYPE_NORMAL
- en: Alternative layout frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bootstrap isn''t the only JavaScript/CSS framework providing a responsive layout
    and useful components. We''re using Bootstrap in this project because of its popularity.
    These frameworks are worthy of a look:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pure.css ( [https://purecss.io/](https://purecss.io/)): A responsive CSS framework
    with an emphasis on a small code footprint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Picnic CSS ([https://picnicss.com/](https://picnicss.com/)): A responsive CSS
    framework emphasizing small size and beauty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Shoelace ([https://shoelace.style/](https://shoelace.style/)): A CSS framework
    emphasizing using future CSS, meaning it uses CSS constructs at the leading edge
    of CSS standardization. Since most browsers don''t support those features, cssnext
    ([http://cssnext.io/](http://cssnext.io/)) is used to retrofit that support. Shoelace
    uses a grid layout system based on Bootstrap''s grid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PaperCSS ([https://www.getpapercss.com/](https://www.getpapercss.com/)): An
    informal CSS framework which looks like it was hand drawn.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Foundation ([https://foundation.zurb.com/](https://foundation.zurb.com/)):
    Self-described as the most advanced responsive frontend framework in the world.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Base ([http://getbase.org/](http://getbase.org/)): A lightweight modern CSS
    framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5 Boilerplate ([https://html5boilerplate.com/](https://html5boilerplate.com/))
    is an extremely useful basis from which to code the HTML and other assets. It
    contains the current best practices for the HTML code in web pages, as well as
    tools to normalize CSS support and configuration files for several web servers.
  prefs: []
  type: TYPE_NORMAL
- en: Flexbox and CSS Grids
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Other new technologies impacting web application development are two new CSS
    layout methodologies. The CSS3 committee has been working on several fronts, including
    page layout.
  prefs: []
  type: TYPE_NORMAL
- en: In the distant past, we used nested HTML tables for page layout. That is a bad
    memory that we don't have to revisit. More recently, we've been using a box model
    using DIVs, and even at times using absolute or relative placement techniques.
    All these techniques have been suboptimal in several ways, some more than others.
  prefs: []
  type: TYPE_NORMAL
- en: One popular layout technique is to divide the horizontal space into columns
    and assign a certain number of columns to each thing on the page. With some frameworks,
    we can even have nested DIVs, each with their own set of columns. Bootstrap 3,
    and other modern frameworks, used that layout technique.
  prefs: []
  type: TYPE_NORMAL
- en: The two new CSS layout methodologies, Flexbox ([https://en.wikipedia.org/wiki/CSS_flex-box_layout](https://en.wikipedia.org/wiki/CSS_flex-box_layout))
    and CSS Grids ([https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)),
    are a significant improvement over all previous methodologies. We are mentioning
    these technologies because they're both worthy of attention. Both are somewhat
    early in their adoption curve—they've been standardized by committees and adopted
    in the latest browsers, but of course there are a lot of old browsers in the field.
  prefs: []
  type: TYPE_NORMAL
- en: With Bootstrap 4, the Bootstrap team chose to go with Flexbox. Therefore, under
    the hood are Flexbox CSS constructs.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile-first design for the Notes application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've learned about the basics of responsive design and Bootstrap, and we hooked
    the Bootstrap framework into our application. Now we're ready to launch a redesign
    of the application so that it works well on mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Laying the Bootstrap grid foundation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap uses a 12-column grid system to control layout, giving applications
    a responsive mobile-first foundation on which to build. It automatically scales
    components as the viewport changes size or shape. The method relies on `<div>`
    elements with classes to describe the role each `<div>` plays in the layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic layout pattern is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The outermost layer is the `.container` or `.container-fluid` element. Containers
    provide a means to center or horizontally pad the content. Containers marked as
    `.container-fluid` act as if they have `width: 100%`, meaning they expand to fill
    the horizontal space.'
  prefs: []
  type: TYPE_NORMAL
- en: A `.row` is what it sounds like, a `"row"`. Technically, a row is a wrapper
    for columns. Containers are wrappers for rows, and rows are wrappers for columns,
    and columns contain the stuff displayed to our users. Got that?
  prefs: []
  type: TYPE_NORMAL
- en: Columns are marked with variations of the `.col` class. With the basic column
    class, `.col`, the columns divide equally into the available space. You can specify
    a numerical column count to assign different widths to each column. Bootstrap
    supports up to 12 numbered columns, hence each row in the example adds up to 12
    columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also specify a breakpoint to which the column applies:'
  prefs: []
  type: TYPE_NORMAL
- en: Using `col-xs` targets extra-small devices (smartphones, `<576px`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `col-sm` targets small devices (`>= 576px`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `col-md` targets medium devices (`>= 768px`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `col-lg` targets large devices (`>= 992px`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `col-xl` targets extra-large devices (`>= 1200px`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying a breakpoint, for example `col-sm`, means that it applies to devices
    matching that breakpoint, or larger. Hence, in the example shown earlier, the
    column definitions applied to `col-sm`, `col-md`, `col-lg`, and `col-xl` devices,
    but not to `col-xs` devices.
  prefs: []
  type: TYPE_NORMAL
- en: The column count is appended to the class name. That means using `col-#` when
    not targeting a breakpoint, for example, `col-4`,  or `col-{breakpoint}-#` when
    targeting a breakpoint, for example, `col-md-4`. If the columns add up to more
    than 12, the columns beyond the twelfth column wrap around to become a new row.
    The word `auto` can be used instead of a numerical column count to size the column
    to the natural width of its content.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s possible to mix and match to target multiple breakpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This declares three different layouts, one for extra-small devices, another
    for medium devices, and the last for large devices. This gives us enough to start
    modifying the `Notes` application. The grid system can do a lot more. For details,
    see the documentation: [http://getbootstrap.com/docs/4.0/layout/grid/](http://getbootstrap.com/docs/4.0/layout/grid/).
  prefs: []
  type: TYPE_NORMAL
- en: Responsive page structure for the Notes application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We structured each of the page layouts as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The page content therefore has two visible rows: the header and the main content.
    At the bottom of the page are invisible things like the JavaScript files for Bootstrap
    and jQuery.'
  prefs: []
  type: TYPE_NORMAL
- en: No change is required in `views/layout.hbs`. One might think the `container-fluid`
    wrapper would be in that file, with the rows and columns specified in the other
    templates. Instead, we'll do it in the templates to give us the most layout freedom.
  prefs: []
  type: TYPE_NORMAL
- en: Using icon libraries and improving visual appeal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The world around us isn't constructed of words, but instead things. Hence, a
    pictorial style, as icons, should help computer software to be more comprehensible.
    Giving a good user experience should make our users reward us with more likes
    in the app store.
  prefs: []
  type: TYPE_NORMAL
- en: There are several icon libraries that can be used in a website. The Bootstrap
    team has a curated list at [http://getbootstrap.com/docs/4.1/extend/icons/](http://getbootstrap.com/docs/4.1/extend/icons/).
    For this project, we'll use Feather Icons ([https://feathericons.com/](https://feathericons.com/))
    and its conveniently available npm package, [https://www.npmjs.com/package/feather-icons](https://www.npmjs.com/package/feather-icons).
  prefs: []
  type: TYPE_NORMAL
- en: 'In `package.json`, add this to the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Then run `npm install` to download the new package. You can then inspect the
    downloaded package and see that `./node_modules/feather-icons/dist/feather.js` contains
    browser-side code, making it easy to use the icons.
  prefs: []
  type: TYPE_NORMAL
- en: 'We make that directory available by mounting it in `app.js`, just as we did
    for Bootstrap and jQuery libraries. Add this code to `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Going by the documentation, we must put this at the bottom of `views/layout.hbs` to
    enable `feather-icons` support:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To use one of the icons, use a `data-feather` attribute specifying one of the
    icon names, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: What's important is the `data-feather` attribute, which the Feather Icons library
    uses to identify the SVG file to use. The Feather Icons library completely replaces
    the element where it found the `data-feather` attribute. Therefore, if you want
    the icon to be a clickable link, it's necessary to wrap the icon definition with
    an `<a>` tag, rather than adding `data-feather` to the `<a>` tag. The next section
    shows an example.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive page header navigation bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The header section we designed before contains a page title and a little navigation
    bar. Bootstrap has several ways to spiff this up, and even give us a responsive
    navigation bar which neatly collapses to a menu on small devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `views/pageHeader.ejs`, make this change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Adding `class="page-header"` informs Bootstrap this is, well, the page header.
    Within that we have the `<h1>` header as before, giving the page title, and then
    a responsive Bootstrap `navbar`.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default the `navbar` is expanded—meaning the components inside the `navbar`
    are visible—because of the `navbar-expand-md` class. This `navbar` is using a
    `navbar-toggler` button which governs the responsiveness of the `navbar`. By default,
    this button is hidden and the body of the `navbar` is visible. If the screen is
    small enough, the `navbar-toggler` is switched so it''s visible, the body of the
    `navbar` is invisible, and when clicking on the now-visible `navbar-toggler`,
    a menu drops down containing the body of the `navbar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61e44e72-923f-4e83-a47a-8dd50590ebec.png)'
  prefs: []
  type: TYPE_IMG
- en: We chose the feather icons *home* icon because it says go home. It's intended
    that the middle portion of the `navbar` will contain a breadcrumb as we navigate
    around the *Notes* application.
  prefs: []
  type: TYPE_NORMAL
- en: The ADD Note button is glued to the right-hand-side with a little Flexbox magic.
    The container is a Flexbox, meaning we can use the Bootstrap classes to control
    the space consumed by each item. The breadcrumb area is empty in this case, but
    the `<div>` that would contain it is there and declared with `class="col"`, meaning
    that it takes up a column unit. The ADD Note button is, on the other hand, declared
    with `class="col-auto"`, meaning it takes up only the room required for itself.
    It is the empty breadcrumb area that will expand to fill the space, while the
    ADD Note button fills only its own space, and is therefore pushed over to the
    side.
  prefs: []
  type: TYPE_NORMAL
- en: Because it's the same application, the functionality all works; we're simply
    working on the presentation. We've added a few notes but the presentation of the
    list on the front page leaves a lot to be desired. The small size of the title
    is not very touch-friendly, since it doesn't present a large target area for a
    fingertip. And can you explain why the `notekey` value has to be displayed on
    the home page?
  prefs: []
  type: TYPE_NORMAL
- en: Improving the Notes list on the front page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The current home page has a simple text list that's not terribly touch-friendly
    and showing the *key* at the front of the line might be inexplicable to the user.
    Let's fix this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `views/index.hbs` and make this change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The first change is to switch away from using a list and to use a vertical button
    group. By making the text links look and behave like buttons, we're improving
    the user interface, especially its touch friendliness. We chose the `btn-outline-dark` button
    style because it looks good in the user interface. We use large buttons (`btn-lg`)
    that fill the width of the container (`btn-block`).
  prefs: []
  type: TYPE_NORMAL
- en: 'We eliminated showing the notekey to the user. This information doesn''t add
    anything to the user experience:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4dc489ea-d737-4280-ba76-c7805486d2a6.png)'
  prefs: []
  type: TYPE_IMG
- en: This is beginning to take shape, with a decent-looking home page that handles
    resizing very nicely and is touch friendly.
  prefs: []
  type: TYPE_NORMAL
- en: There's still something more to do with this, since the header area is taking
    up a fair amount of space. We should always feel free to rethink a plan as we
    look at intermediate results. Earlier, we created one design for the header area,
    but on reflection that design looks to be too large. The intention had been to
    insert a breadcrumb just to the right of the home icon, and to leave the `<h1>`
    title at the top of the header area. But this is taking up vertical space and
    we can tighten up the header and possibly improve the appearance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `partials/header.hbs` and replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This removes the `<h1>` tag at the top of the header area, immediately tightening
    the presentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the `navbar-collapse` area, we''ve replaced what had been intended as
    the breadcrumb, with a simple `navbar-text` component. To keep the ADD Note button
    glued to the right, we''re maintaining the `class="col"` and `class="col-auto"`
    settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4a53d717-88b6-48c7-85a9-8b7d2a057de0.png)'
  prefs: []
  type: TYPE_IMG
- en: Which header area design is better? That's a good question. Since beauty is
    in the eye of the beholder, both designs are probably equally good. What we have
    demonstrated is the ease with which we can update the design by editing the template
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up the Note viewing experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Viewing a Note isn't bad, but the user experience can be improved. The user
    does not need to see the notekey, for example.  Additionally, Bootstrap has nicer-looking
    buttons we can use.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `views/noteview.hbs`, make these changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We have declared two rows, one for the Note, and another for buttons to act
    on the Note. Both are declared to consume all 12 columns, and therefore take up
    the full available width. The buttons are again contained within a button group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/768c14aa-610d-474d-aa48-2a2ee93b8f1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Do we really need to show the notekey to the user?  We'll leave it there, but
    that's an open question for the user experience team. Otherwise, we've improved
    the note-reading experience.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up the add/edit note form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next major glaring problem is the form for adding and editing notes. As
    we said earlier, it's easy to get the text input area to overflow a small screen.
    On the other hand, Bootstrap has extensive support for making nice-looking forms
    that work well on mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the `form` in `views/noteedit.hbs` to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s a lot going on here. What we''ve done is reorganize the `form` so
    Bootstrap can do the right things with it. The first thing to note is that we
    have several instances of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: These are contained within a `container-fluid`, meaning that we've set up three
    rows in the form.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap uses `form-group` elements to add structure to forms, and to encourage
    proper use of `<label>` elements, along with other form elements. It's good practice
    to use a `<label>` with every `<input>` to improve assistive behavior in the browser,
    rather than if you simply left some dangling text.
  prefs: []
  type: TYPE_NORMAL
- en: Every form element has `class="form-control"`. Bootstrap uses this to identify
    the controls so it can add styling and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Bootstrap formats `form-group` elements so the `label` appears on
    another line from the input control. Note that we've added `class="col-1"` to
    the labels and `class="col"` to the `<div>` wrapping the input. This declares
    two columns, the first consuming one column unit and the other consuming the remainder.
  prefs: []
  type: TYPE_NORMAL
- en: The `placeholder='key'` attribute puts sample text in an otherwise empty text
    input element. It disappears as soon as the user types something and is an excellent
    way to prompt the user with what's expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we changed the Submit button to be a Bootstrap button. These look
    nice, and Bootstrap makes sure that they work great:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/abf9d97c-b6fc-44eb-ab64-d94223d17baf.png)'
  prefs: []
  type: TYPE_IMG
- en: The result looks good and works well on the iPhone. It automatically sizes itself
    to whatever screen it's on. Everything behaves nicely. In this screenshot, we've
    resized the window small enough to cause the navbar to collapse. Clicking on the
    so-called hamburger icon on the right (the three horizontal lines) causes the
    navbar contents to pop up as a menu.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up the delete-note window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The window used to verify the desire to delete a Note doesn't look bad, but
    it can be improved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `views/notedestroy.hbs` to contain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We've reworked everything to use Bootstrap form goodness. The question about
    deleting the Note is wrapped with `class="form-text"` so that Bootstrap can display
    this properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The buttons are wrapped with `class="btn-group"` as before. The buttons have
    exactly the same styling as on other screens, giving a consistent look across
    the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab3b21c8-0194-4fc5-9c3f-f9591c92556e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There is an issue that the title text in the navbar does not use the word `Delete`.
    In `routes/notes.js`, we can make this change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: What we've done is changed the `title` parameter passed to the template. We'd
    done this in the `/notes/edit` route handler and seemingly missed doing so in
    this handler.
  prefs: []
  type: TYPE_NORMAL
- en: Building a customized Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One reason to use Bootstrap is that you can easily build a customized version.
    Stylesheets are built using SASS, which is one of the CSS preprocessors to simplify
    CSS development. In Bootstrap's code, one file (`scss/_variables.scss`) contains
    variables used throughout the rest of Bootstrap's `.scss` files. Change one variable
    and it can automatically affect the rest of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier, we overrode a couple of Bootstrap behaviors with our custom CSS file,
    `public/stylesheets/style.css`. This is an easy way to change a couple of specific
    things, but it doesn't work for large-scale changes to Bootstrap. Serious Bootstrap
    customization requires generating a customized Bootstrap build.
  prefs: []
  type: TYPE_NORMAL
- en: The official documentation on the Bootstrap website ([http://getbootstrap.com/docs/4.1/getting-started/build-tools/](http://getbootstrap.com/docs/4.1/getting-started/build-tools/))
    is useful for reference on the build process.
  prefs: []
  type: TYPE_NORMAL
- en: If you've followed the directions given earlier, you have a directory, `chap06/notes`,
    containing the `Notes` application source code. Create a directory named `chap06/notes/theme`,
    within which we'll set up a custom Bootstrap build process.
  prefs: []
  type: TYPE_NORMAL
- en: As students of the Twelve Factor Application model, we'll be using a `package.json` in
    that directory to automate the build process. There isn't any Node.js code involved;
    npm is also a convenient tool to automate the software build processes.
  prefs: []
  type: TYPE_NORMAL
- en: To start, download the Bootstrap source tree from [https://github.com/twbs/bootstrap](https://github.com/twbs/bootstrap).
    While the Bootstrap npm package includes SASS source files, it isn't sufficient
    to build Bootstrap, and therefore one must download the source tree. What we do
    is navigate to the GitHub repository, click on the Releases tab, and select the
    URL for the most recent release.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `theme/package.json` containing this `scripts` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Type this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This downloads the tar-gzip (tarball) archive from the Bootstrap repository
    and immediately unpacks it. If you are on Windows, it will be easiest to run that
    script in Windows Subsystem for Linux to execute these commands. After downloading
    and unpacking the archive, the `postdownload` step runs `npm install` in the directory.
    The Bootstrap team uses their `package.json`, not only to track all the dependencies
    required to build Bootstrap, but to drive the build process.
  prefs: []
  type: TYPE_NORMAL
- en: The `npm install` for Bootstrap will take a long time, so be patient.
  prefs: []
  type: TYPE_NORMAL
- en: This much only installs the tools necessary to build Bootstrap. Building the
    Bootstrap documentation requires installing additional Ruby-based tools (Jekyll
    and some plugins).
  prefs: []
  type: TYPE_NORMAL
- en: 'To build Bootstrap, let''s add the following lines to the `scripts` section
    in our `theme/package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Obviously you'll need to adjust the directory name as the Bootstrap project
    issues new releases. In the Bootstrap source tree, running `npm run dist` builds
    Bootstrap, while `npm run watch` sets up an automated process to scan for changed
    files and rebuilds Bootstrap upon changing any file. By adding these lines to
    our `theme/package.json`, we can start this in the terminal and it automatically
    reruns the build as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now run a build with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The built files land in the `theme/bootstrap-4.1.0/dist` directory. The content
    of that directory will match the contents of the corresponding npm package.
  prefs: []
  type: TYPE_NORMAL
- en: In case it hasn't been obvious all along—there are Bootstrap version numbers
    embedded in these URLs and file or directory names. As new Bootstrap releases
    are issued, you must adjust the pathnames to match the current version number.
  prefs: []
  type: TYPE_NORMAL
- en: Before proceeding, let's take a look around the Bootstrap source tree. The `scss`
    directory contains the SASS source that will be compiled into the Bootstrap CSS
    files. To generate a customized Bootstrap build will require a few modifications
    in that directory.
  prefs: []
  type: TYPE_NORMAL
- en: The `bootstrap-4.1.0/scss/bootstrap.scss` file contains `@import` directives
    to pull in all Bootstrap components. The file `bootstrap-4.1.0/scss/_variables.scss` contains
    definitions used in the remainder of the Bootstrap SASS source. Editing, or overriding,
    these values will change the look of websites using the resulting Bootstrap build.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, these definitions determine the main color values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: These are similar to CSS statements. The `!default` attribute designates these
    values as the default. Any `!default` values can be overridden without editing
    `_values.scss`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file, `theme/_custom.scss`, containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This reverses the values for the `$body-bg` and `$body-color` settings in `_variables.scss`.
    The Notes app will now use white text on a dark background, rather than the default
    white background with dark text. Because these declarations do not use `!default`,
    they'll override the values in `_variables.scss`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then make a copy of `scss/bootstrap.scss` in the theme directory and modify
    it, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re importing the `_custom.scss` file we just created. Finally, add this
    line to the `scripts` section of `theme/package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'With that in place, before building Bootstrap these two files will be copied
    in place. Next, rebuild Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'While that''s building, let''s modify `notes/app.js` to mount the build directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: What we've done is switch from the Bootstrap in `node_modules` to what we just
    built in the `theme` directory. The Bootstrap version number shows up here, so
    this must also be updated as new Bootstrap releases are adopted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then reload the application, and you''ll see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa5801c6-c8ea-4622-a4f1-6fa89c824492.png)'
  prefs: []
  type: TYPE_IMG
- en: To get exactly this, you may need to make a change in the templates. The Button
    elements we used earlier have the `btn-outline-dark` class, which works well on
    a light background. The background is now dark and these buttons need to use light
    coloring.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the buttons, in `views/index.hbs` make this change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a similar change in `views/noteview.hbs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: That's cool, we can now rework the Bootstrap color scheme any way we want. Don't
    show this to your user experience team, because they'll throw a fit. We did this
    to prove the point that we can edit `_custom.scss` and change the Bootstrap theme.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-built custom Bootstrap themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If all this is too complicated for you, several websites provide pre-built Bootstrap
    themes, or else simplified tools to generate a Bootstrap build. To get our feet
    wet, let's download a theme from Bootswatch ([https://bootswatch.com/](https://bootswatch.com/)).
    This is both a collection of free and open source themes and a build system for
    generating custom Bootstrap themes ([https://github.com/thomaspark/bootswatch/](https://github.com/thomaspark/bootswatch/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use the **Minty** theme from Bootswatch to explore the needed changes.
    You can download the theme from the website or add the following to the `scripts`
    section of `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This will download the prebuilt CSS files for our chosen theme. In passing,
    notice that the Bootswatch website offers `_variables.scss` and `_bootswatch.scss`
    files which should be usable with a workflow similar to what we implemented in
    the previous section. The GitHub repository matching the Bootswatch website has
    a complete build procedure for building custom themes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the download:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'In `app.js` we will need to change the Bootstrap mounts to separately mount
    the JavaScript and CSS files. Use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Instead of one mount for `/vendor/bootstrap`, we now have two mounts for each
    of the subdirectories. Simply make the `/vendor/bootstrap/css` mount point to
    a directory containing the CSS files you downloaded from the theme provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because Minty is a light-colored theme, the buttons need to use the dark style.
    We had earlier changed the buttons to use a light style because of the dark background.
    We must now switch from `btn-outline-light` back to `btn-outline-dark`. In `partials/header.hbs`,
    the color scheme requires a change to the navbar content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We selected `text-dark` and `btn-dark` classes to provide some contrast against
    the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'Re-run the application and you''ll see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dcdb99ab-5a30-425a-ae9c-d03a3110e293.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The possibilities for using Bootstrap are endless. While we covered a lot of
    material, we only touched the surface, and we could have done much more to the
    *Notes* application.
  prefs: []
  type: TYPE_NORMAL
- en: You learned what the Twitter Bootstrap framework can do. Bootstrap's goal is
    to make mobile-responsive development easy. We used Bootstrap to make great improvements
    to the way the `Notes` app looks and feels. We customized Bootstrap, dipping our
    toes into generating a custom theme.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we want to get back to writing Node.js code. We left off [Chapter 5](e4322e55-673b-45c5-b64e-fc107d57ef03.xhtml),
    *Your First Express Application*, with the problem of persistence so that the
    *Notes* application can be stopped and restarted without losing our notes. In
    Chapter 7, *Data Storage and Retrieval*, we'll dive into using databases to store
    our data.
  prefs: []
  type: TYPE_NORMAL
- en: To give ourselves some experience with the ES6 Module format, we'll rewrite
    the *Notes* application accordingly.
  prefs: []
  type: TYPE_NORMAL
