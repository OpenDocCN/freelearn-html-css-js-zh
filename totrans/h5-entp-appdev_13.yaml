- en: 'Chapter 13. Finishing Up: Performance'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章. 完成工作：性能
- en: We will finish off by talking about performance and with good reason. While
    it is important to think about performance while developing your enterprise application,
    you may end up optimizing for things that do not exhibit any performance issues
    later on. This is often referred to as premature optimization and can end up wasting
    a lot of time. Although it is a good practice to understand performance implications
    of every decision of the development process, web performance optimization should
    not be conceived as a final goal; instead it is a constant tuning to improve and
    reach acceptable speed times for our enterprise application. Our real goal is
    to build our application and ensure that it functions correctly, then, if it is
    still necessary, improve the response times.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将结束讨论性能，这是有充分理由的。虽然在你开发企业应用时考虑性能很重要，但你可能会最终优化那些后来没有表现出任何性能问题的东西。这通常被称为过早优化，最终可能会浪费很多时间。尽管理解开发过程中每个决策的性能影响是一个好习惯，但网络性能优化不应被视为最终目标；相反，它是一个持续的调整，以改善并达到我们企业应用可接受的速度。我们的真正目标是构建我们的应用，并确保它正确运行，然后，如果必要，提高响应时间。
- en: 'In this chapter we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Web Performance Optimization (WPO)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络性能优化（WPO）
- en: Following standards
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循标准
- en: Optimizing images
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化图像
- en: Optimizing CSS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化CSS
- en: JavaScript performance considerations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript性能考虑
- en: Additional page performance considerations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他页面性能考虑
- en: Performance analytics
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能分析
- en: Web Performance Optimization (WPO)
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络性能优化（WPO）
- en: Because an HTML5 enterprise application has many different moving parts, it
    is important to consider which parts you are optimizing. By and large, your HTML5
    enterprise application will consist of HTML, images, and CSS and JavaScript code,
    and there are ways to optimize all three.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于HTML5企业应用有许多不同的组成部分，考虑你正在优化的部分很重要。总的来说，你的HTML5企业应用将包括HTML、图像以及CSS和JavaScript代码，并且有方法可以优化这三者。
- en: Following standards
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遵循标准
- en: HTML was developed to be a forgiving language; that is, mistakes in syntax rather
    than blowing up the page and causing endless debugging nightmares are dealt with
    in a more graceful manner. The rendering engine attempts to ascertain the intent
    of the markup and lays out the page accordingly. In essence, it stumbles but manages
    to keep its footing. Of course, a race run without hurdles goes faster than one
    run with hurdles. In addition, different web browsers will recover from such errors
    in different ways leading to inconsistent results when your HTML5 enterprise application
    is viewed in different browsers. That is why it is important to deliver clean,
    standards-compliant markup to the browser.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: HTML被设计成一种宽容的语言；也就是说，语法错误不是通过使页面崩溃和引起无尽的调试噩梦来处理的，而是以一种更优雅的方式处理。渲染引擎试图确定标记的意图，并据此布局页面。本质上，它会跌跌撞撞，但最终还能保持平衡。当然，没有障碍的赛跑比有障碍的赛跑要快。此外，不同的网络浏览器将以不同的方式从这些错误中恢复，导致当你的HTML5企业应用在不同浏览器中查看时，结果不一致。这就是为什么向浏览器提供干净、符合标准标记的重要性。
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Despite the fact that following standards is a good base to start our optimizations,
    this could lead, in some cases, to more verbose code (increasing parsing time).
    Moreover, HTML5, unlike its previous versions, is not a finished standard yet
    and should be considered as a guidance more than as a set of rules.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管遵循标准是我们开始优化的良好基础，但在某些情况下，这可能会导致更冗长的代码（增加解析时间）。此外，HTML5与之前的版本不同，它还不是一项完成的标准，应被视为一种指导而非一套规则。
- en: Fortunately, there are many tools out there that will validate your markup for
    you. The **World Wide Web Consortium** (**W3C**), which is the body that develops
    web standards, has its own validation tools that can be found at [http://validator.w3.org/](http://validator.w3.org/).
    There are also tools such as HTML Lint ([http://lint.brihten.com/html/](http://lint.brihten.com/html/))
    and HTML Tidy ([http://infohound.net/tidy/](http://infohound.net/tidy/)) that
    will clean your markup for you. It is a good practice to validate your markup
    to make sure your enterprise applications behave quickly and consistently.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有许多工具可以帮助你验证你的标记。负责制定 Web 标准的机构 **World Wide Web Consortium**（**W3C**）有自己的验证工具，可以在
    [http://validator.w3.org/](http://validator.w3.org/) 找到。还有像 HTML Lint ([http://lint.brihten.com/html/](http://lint.brihten.com/html/))
    和 HTML Tidy ([http://infohound.net/tidy/](http://infohound.net/tidy/)) 这样的工具可以帮助你清理你的标记。验证你的标记是一个好习惯，以确保你的企业应用程序运行快速且一致。
- en: Optimizing images
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化图像
- en: Most websites these days embed images, and often these images are the biggest
    offenders when it comes to performance. Because of limited bandwidth and the large
    sizes of image files, your enterprise application could be in fact fairly snappy
    only to force users to wait while large images are delivered to their browsers.
    It is key to web optimize your images before using them in your web application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，大多数网站都嵌入图像，而这些图像往往是性能问题的主要来源。由于带宽有限和图像文件的大尺寸，你的企业应用程序可能实际上运行得相当快，但会迫使用户等待大图像传输到他们的浏览器。在将图像用于
    Web 应用程序之前，优化你的图像是至关重要的。
- en: 'There are two considerations for web optimization: size and type. With regard
    to size, while it is possible to set the width and height dimensions of an image
    in the `img` tag, it is a common mistake to take a single large image and use
    it for different purposes on a web application that calls for different sizes.
    For example, when displaying thumbnails, it is a bad practice to size a larger
    image down using only the `img` tag properties. Instead you should create different
    variants or renditions of the image for different purposes.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于网络优化，有两个考虑因素：大小和类型。关于大小，虽然可以在 `img` 标签中设置图像的宽度和高度维度，但将单个大图像用于需要不同尺寸的 Web 应用程序的不同目的是一种常见的错误。例如，在显示缩略图时，仅使用
    `img` 标签属性缩小较大图像是一种不良做法。相反，你应该为不同的目的创建图像的不同变体或版本。
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Specifying the `width` and `height` attributes on the `img` tag lets the browser
    know what real estate to allot an image before the image is actually downloaded,
    avoiding layout changes and undesired "jumps" in the UI. Be aware that this disagrees
    with the best practice of separate content and presentation layer to a great extent.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `img` 标签上指定 `width` 和 `height` 属性让浏览器知道在图像实际下载之前为图像分配多少空间，从而避免布局变化和 UI 中的不希望出现的“跳跃”。请注意，这在很大程度上与将内容层和表示层分离的最佳实践相矛盾。
- en: 'With regard to type, there are indeed three types of images used on the web:
    GIF, JPEG, and PNG. These are based on different compression algorithms built
    for very different purposes. GIF images are optimized for low color palette images.
    They support 256 colors and are lossless and interlaced, which means they are
    rendered in layers rather than all at once (going from blurry to focused as you
    download and render them). They are ideal for logos and site graphics based on
    a lower color palette. JPEG images are ideal for high resolution photos as they
    support a higher color palette of 16 million colors. PNG images can support 256,
    24 bit or 32 bit color palettes image formats with optional transparency, a very
    flexible and highly compressed lossless format, with superior transparency support
    and compression than GIF. The PNG algorithm was created as an open alternative
    to the GIF compression format, whose original creator, Unisys, announced in 1995
    that it would be enforcing its patent on the algorithm.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关于图像类型，在网络上确实有三种常用的图像格式：GIF、JPEG 和 PNG。这些格式基于不同的压缩算法，用于非常不同的目的。GIF 图像针对低色阶图像进行了优化。它们支持
    256 种颜色，是无损和交错式的，这意味着它们是分层渲染的，而不是一次性渲染（当你下载和渲染它们时，从模糊到清晰）。它们非常适合基于低色阶的标志和网站图形。JPEG
    图像非常适合高分辨率照片，因为它们支持高达 1600 万色的颜色调色板。PNG 图像可以支持 256、24 位或 32 位色阶的图像格式，具有可选的透明度，这是一种非常灵活且高度压缩的无损格式，比
    GIF 具有更好的透明度和压缩性能。PNG 算法是为了作为 GIF 压缩格式的开放替代品而创建的，其原始创造者 Unisys 在 1995 年宣布将执行其对该算法的专利权。
- en: Tip
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Internet Explorer 6 and previous versions do not support PNG transparency based
    on HTML standards; instead it is necessary to use proprietary filters. For example,
    `filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='image.png' ,sizingMethod='crop');`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Internet Explorer 6及之前的版本不支持基于HTML标准的PNG透明度；相反，必须使用专有过滤器。例如，`filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='image.png'
    ,sizingMethod='crop');`。
- en: Optimizing CSS
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化CSS
- en: The best way to optimize your CSS is to reduce the file size. There are a number
    of things you can do to accomplish this. You can reduce whitespace by placing
    styles on a single line.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 优化CSS的最佳方式是减小文件大小。你可以做很多事情来实现这一点。你可以通过将样式放在一行中来减少空白。
- en: 'Implement the following line of code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实现以下代码行：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Instead of this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是这样：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can use shorthand for many rules.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为许多规则使用缩写。
- en: 'Implement the following line of code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 实现以下代码行：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Instead of this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是这样：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It is also best to group similar styles as close together as possible and to
    combine duplicated styles wherever necessary.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最好尽可能地将相似样式分组在一起，并在必要时合并重复的样式。
- en: 'Implement the following line of code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 实现以下代码行：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Instead of this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是这样：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you decide not to follow these recommendations to maintain readability, or
    even if you follow them, it is always possible to minify your code (as we explain
    in the following sections).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定不遵循这些建议以保持可读性，或者即使遵循了这些建议，也始终可以对你的代码进行压缩（正如我们在以下章节中解释的）。
- en: Another alternative is to use a dynamic stylesheet language such as **Less**
    ([http://lesscss.org](http://lesscss.org)). Less extends basic CSS functionality,
    allowing us to use more complex and elegant structures that will be translated
    in a standard CSS after a compilation process.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是使用动态样式表语言，如**Less** ([http://lesscss.org](http://lesscss.org))。Less扩展了基本的CSS功能，允许我们使用更复杂和优雅的结构，这些结构在编译过程中将被转换为标准的CSS。
- en: 'With normal CSS you need to repeat common properties such as colors:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用常规CSS，你需要重复使用常见的属性，如颜色：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Using Less you can define a variable `@active-color` and then use it through
    your styles, so you only need to change the value of those variables to change
    the color of multiple properties:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Less，你可以定义一个变量`@active-color`，然后在你的样式中使用它，这样你只需要更改这些变量的值就可以更改多个属性的颜色的值：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can even create nested structures like so:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以创建嵌套结构，如下所示：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'That will translate after compile in the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后，这将转换为以下内容：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: JavaScript performance considerations
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript性能考虑
- en: While writing JavaScript can be fraught with peril as it is very easy to introduce
    slow running code, keeping some simple guidelines in mind could keep your enterprise
    application from running too slow.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然编写JavaScript可能会充满危险，因为它很容易引入运行缓慢的代码，但记住一些简单的指南可以帮助你的企业级应用避免运行得太慢。
- en: '![JavaScript performance considerations](img/5689_13_05.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript性能考虑](img/5689_13_05.jpg)'
- en: First of all, traversing the DOM can be expensive. You want to minimize the
    number of times you invoke `document.getElementById` and, even worse, `document.getElementsByTagName`.
    Capturing a reference to a DOM element into a variable and using the variable
    can save on expensive calls to the DOM.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，遍历DOM可能很昂贵。你想要最小化调用`document.getElementById`和，更糟糕的是，`document.getElementsByTagName`的次数。将DOM元素的引用捕获到变量中并使用该变量可以节省对DOM的昂贵调用。
- en: 'So instead of implementing the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，而不是实现以下代码：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Or implementing its equivalent in jQuery:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用jQuery实现其等效功能：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can implement the following code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以实现以下代码：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Or you can implement its equivalent in jQuery:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以使用jQuery实现其等效功能：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Secondly, avoid constructs such as `with()` and `for-in`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，避免使用`with()`和`for-in`这样的结构。
- en: 'Thirdly, remember that arrays can be slow. Traversing an array—especially a
    deep array—can be costly. If you are pulling the same element from an array many
    times, it is better to capture it in a variable first. That is, instead of the
    following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，记住数组可能会很慢。遍历数组——特别是深层数组——可能会很昂贵。如果你多次从数组中提取相同的元素，最好先将其捕获到变量中。也就是说，而不是以下代码：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Or this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 或者这样：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Fourthly, arrays are not as slow as DOM collections. Looping over `document.getElementsByTagName('p')`
    is much slower than capturing the result in an array and looping over that.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第四，数组并不像DOM集合那样慢。遍历`document.getElementsByTagName('p')`比捕获结果到数组并遍历它要慢得多。
- en: Lastly, changing classes on a DOM element is less expensive than change styles.
    It is better to define multiple CSS classes and toggle between them than directly
    changing the style of an element.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，改变 DOM 元素的类比改变样式要便宜。最好定义多个 CSS 类并在它们之间切换，而不是直接改变元素的风格。
- en: 'So, instead of the following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，而不是以下代码：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Or its jQuery version:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 或者它的 jQuery 版本：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can implement the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以实现以下代码：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Or this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 或者这样：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can also benchmark your JavaScript using a tool called **jsPerf** ([http://jsperf.com/](http://jsperf.com/)).
    It provides a way to create test cases for JavaScript code snippets so that you
    can benchmark their performance. If you are wondering which is faster, `document.getElementsByTagName`
    or `document.getElementsByClassName`, this tool will allow you to test your theory
    on your browser. Furthermore, it allows you to share your test cases so that others
    can test on different browsers giving you statistics across various browsers and
    platforms.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用一个名为 **jsPerf** 的工具来基准测试你的 JavaScript ([http://jsperf.com/](http://jsperf.com/))。它提供了一种创建
    JavaScript 代码片段测试用例的方法，以便你可以基准测试它们的性能。如果你想知道哪个更快，`document.getElementsByTagName`
    还是 `document.getElementsByClassName`，这个工具将允许你在浏览器上测试你的理论。此外，它还允许你分享你的测试用例，这样其他人就可以在不同的浏览器上测试，为你提供跨各种浏览器和平台的统计数据。
- en: Additional page performance considerations
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外的页面性能考虑因素
- en: 'An enterprise application can be composed of many files including HTML, CSS,
    JavaScript, and images. Although for maintainability, it is proper to break out
    your CSS and JavaScript files. When deploying your code, combining and minifying
    your files leads to better performance. **Minification** is a compression technique
    for code in which all unnecessary characters are removed while the behavior is
    preserved. There are a number of tools that will do this for you including the
    following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 企业应用程序可以由许多文件组成，包括 HTML、CSS、JavaScript 和图像。尽管为了可维护性，将 CSS 和 JavaScript 文件分离出来是合适的。在部署你的代码时，合并和压缩你的文件会导致更好的性能。**压缩**是一种代码压缩技术，其中移除了所有不必要的字符，同时保留行为。有许多工具可以为你完成这项工作，包括以下这些：
- en: JSMin ([http://www.crockford.com/javascript/jsmin.html](http://www.crockford.com/javascript/jsmin.html))
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSMin ([http://www.crockford.com/javascript/jsmin.html](http://www.crockford.com/javascript/jsmin.html))
- en: Packer ([http://dean.edwards.name/packer/](http://dean.edwards.name/packer/))
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包器 ([http://dean.edwards.name/packer/](http://dean.edwards.name/packer/))
- en: YUI Compressor ([http://developer.yahoo.com/yui/compressor/](http://developer.yahoo.com/yui/compressor/))
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YUI 压缩工具 ([http://developer.yahoo.com/yui/compressor/](http://developer.yahoo.com/yui/compressor/))
- en: In the vein of reducing file size, minimizing requests, and in general using
    as little bandwidth as possible, the use of CSS sprites has become common these
    days wherein all of the static graphic elements for an application are combined
    into a single image, parts of which are displayed using CSS. This way only one
    image needs to be downloaded once instead of many.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在减少文件大小、最小化请求以及总体上尽可能少使用带宽的方面，CSS Sprites 的使用已经变得很普遍，其中应用程序的所有静态图形元素都被组合成单个图像，其中的一部分使用
    CSS 显示。这样，只需要下载一次一个图像，而不是多个。
- en: Server-side considerations
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器端考虑因素
- en: An enterprise application often has many static assets that are downloaded from
    the server with each page request. As this creates a lot of unnecessary traffic
    on the server, one way to offload the burden is to use a content delivery network
    or CDN. A CDN allows you to mirror your pages on a network of servers that are
    optimized for delivering static assets quickly. You can place your static assets
    on a CDN such as Akamai, Edgecast, or Cloudflare as well as use CDN-hosted versions
    of popular libraries. Google hosts a number of libraries for public consumption
    such as jQuery in its CDN ([https://developers.google.com/speed/libraries/](https://developers.google.com/speed/libraries/))
    as does cdnjs ([http://cdnjs.com/](http://cdnjs.com/)).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 企业应用程序通常包含许多静态资源，这些资源在每次页面请求时都会从服务器下载。由于这会在服务器上产生大量的不必要流量，一种减轻负担的方法是使用内容分发网络或
    CDN。CDN 允许你在优化的服务器网络上镜像你的页面，以便快速交付静态资源。你可以在 Akamai、Edgecast 或 Cloudflare 等 CDN
    上放置你的静态资源，以及使用流行的库的 CDN 托管版本。Google 在其 CDN ([https://developers.google.com/speed/libraries/](https://developers.google.com/speed/libraries/))
    上托管了多个公共库，如 jQuery，同样 cdnjs ([http://cdnjs.com/](http://cdnjs.com/)) 也是如此。
- en: Many web servers such as Apache can be instructed to compress what they send
    to the browser before they send it. If you are able to, adding a `Content-Encoding`
    header set to `gzip` in your response can reduce the amount of data transferred
    by 70 percent.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网络服务器，如 Apache，可以被指示在发送给浏览器之前压缩它们发送的内容。如果您能够做到，在您的响应中添加一个设置为 `gzip` 的 `Content-Encoding`
    标头可以减少数据传输量高达 70%。
- en: 'It is important to consider caching in your enterprise application. If the
    same request is made over and over again, and the response is always the same
    or seldom changes, cache the response and send it back when subsequent requests
    are made. Browsers intrinsically support this with the `Cache-Control` header
    and the `Expires` header. While `Expires` tells the browser how long to keep content
    in the page cache, `Cache-Control` provides a set of rules for when to keep and
    when to invalidate the cache. Some useful parameters include the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的企业应用程序中考虑缓存是很重要的。如果相同的请求被反复提出，并且响应始终相同或很少更改，则在后续请求时缓存响应并返回。浏览器通过 `Cache-Control`
    标头和 `Expires` 标头固有地支持这一点。虽然 `Expires` 告诉浏览器在页面缓存中保留内容的时间，但 `Cache-Control` 提供了一组规则，用于何时保留缓存以及何时使缓存无效。一些有用的参数包括以下内容：
- en: '`max-age`: This indicates the maximum amount of time before a piece of content
    should be refreshed'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max-age`: 这表示在内容应该刷新之前的最长时间'
- en: '`public`: This indicates that a piece of content is cacheable even though it
    requires authentication'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public`: 这表示即使内容需要认证，该内容也是可缓存的'
- en: '`private`: This indicates that a piece of content is cacheable on a per-user
    basis'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`private`: 这表示内容可以按用户基础进行缓存'
- en: '`no-cache`: This indicates that a piece of content can be cached but should
    be refreshed on every request'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`no-cache`: 这表示内容可以被缓存，但在每次请求时都应该刷新'
- en: '`no-store`: This indicates that a piece of content should not be kept in cache'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`no-store`: 这表示不应将内容保存在缓存中'
- en: '`must-revalidate`: This indicates that the browser must check with the server
    first before serving a cached version'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`must-revalidate`: 这表示浏览器在提供缓存版本之前必须先与服务器进行验证'
- en: Caching not only helps to improve response times, it relieves your server load
    and reduces network traffic.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存不仅有助于提高响应时间，还能减轻服务器负载并减少网络流量。
- en: Yahoo! has provided a number of useful guidelines for ensuring page performance.
    While many of these topics have already been covered, you are encouraged to check
    out the guidelines for yourself at [http://developer.yahoo.com/performance/](http://developer.yahoo.com/performance/).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Yahoo! 提供了一系列有用的指南，以确保页面性能。虽然许多这些主题已经有所涉及，但鼓励您亲自查看[http://developer.yahoo.com/performance/](http://developer.yahoo.com/performance/)上的指南。
- en: Performance analytics
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能分析
- en: You may yet follow all of the rules for optimal performance and still find yourself
    with a slow application. When this happens, you need to become adept at assessing
    load times and profiling your application. Fortunately, there are many tools available
    to help pinpoint the bottlenecks; these tools are explained in the coming sections.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 即使遵循所有最佳性能规则，您可能仍然会遇到加载缓慢的应用程序。当这种情况发生时，您需要擅长评估加载时间和分析您的应用程序。幸运的是，有许多工具可以帮助定位瓶颈；这些工具将在接下来的章节中解释。
- en: Load times
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载时间
- en: 'All of the major browsers include a network tab that will graphically display
    all of the requests and responses between the browser and the servers it contacts.
    Firefox includes a **Net** tab as part of the Firebug add-on as shown in the following
    screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 所有主要浏览器都包含一个网络标签，可以图形化显示浏览器与其接触的服务器之间的所有请求和响应。Firefox 将 **Net** 标签作为 Firebug
    插件的一部分，如下面的屏幕截图所示：
- en: '![Load times](img/5689_13_06.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![加载时间](img/5689_13_06.jpg)'
- en: 'It displays a set of bars that indicate load time per request over time. Here
    you can see the web page loading piece-by-piece including how it loads the HTML
    first and then requests the ancillary assets afterward: image files, CSS files,
    JavaScript files, and even subsequent AJAX requests. As you can see in the following
    screenshot, when you hover over each bar, you will see statistics about that request
    including DNS lookup, connection time, the time to send the request, wait, and
    receive the response, and so on.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示一组条形图，表示随时间变化的每个请求的加载时间。在这里，您可以看到网页逐部分加载，包括它首先加载 HTML，然后请求辅助资产：图像文件、CSS 文件、JavaScript
    文件，甚至后续的 AJAX 请求。正如您在下面的屏幕截图中所见，当您悬停在每根条形图上时，您将看到有关该请求的统计数据，包括 DNS 查询、连接时间、发送请求的时间、等待时间和接收响应的时间等。
- en: '![Load times](img/5689_13_07.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![加载时间](img/5689_13_07.jpg)'
- en: This is particularly helpful when attempting to debug a performance problem
    because it tells you very clearly whether slowness is due to a connection problem
    or a page load problem, for example, how the HTML is constructed and parsed. Knowing
    these finer details helps greatly to uncover and remove bottlenecks.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当尝试调试性能问题时，这尤其有帮助，因为它会非常清楚地告诉你缓慢的原因是由于连接问题还是页面加载问题，例如HTML是如何构建和解析的。了解这些更详细的细节有助于大大揭示并消除瓶颈。
- en: 'In addition to browser-based tools to assess load time, there are external
    services that allow you to assess load time. In particular, Pingdom ([http://tools.pingdom.com/fpt/](http://tools.pingdom.com/fpt/))
    provides a service that you can use to periodically test the load times of your
    web application. It provides a similar chart for determining where your bottlenecks
    are. Alternatives include the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基于浏览器的工具来评估加载时间外，还有外部服务允许你评估加载时间。特别是，Pingdom ([http://tools.pingdom.com/fpt/](http://tools.pingdom.com/fpt/))
    提供了一个你可以用来定期测试你的Web应用程序加载时间的服务。它提供了一个类似的图表来确定你的瓶颈在哪里。其他替代方案包括以下：
- en: Google Speed ([https://developers.google.com/speed/](https://developers.google.com/speed/))
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Speed ([https://developers.google.com/speed/](https://developers.google.com/speed/))
- en: YSlow ([http://developer.yahoo.com/yslow/](http://developer.yahoo.com/yslow/))
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YSlow ([http://developer.yahoo.com/yslow/](http://developer.yahoo.com/yslow/))
- en: Gomez([http://www.gomez.com/website-performance-test/](http://www.gomez.com/website-performance-test/))
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gomez([http://www.gomez.com/website-performance-test/](http://www.gomez.com/website-performance-test/))
- en: Profilers
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能分析器
- en: Profilers are another way to assess performance. Typically, they list JavaScript
    calls in order of execution time, which can be really helpful to pinpoint slow-running
    functions. Some browsers such as Google Chrome and Safari include a CSS selector
    profiler, which lists the slowest running CSS selectors.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 性能分析器是评估性能的另一种方式。通常，它们按执行时间顺序列出JavaScript调用，这有助于确定运行缓慢的函数。一些浏览器，如Google Chrome和Safari，包括CSS选择器性能分析器，它列出了运行最慢的CSS选择器。
- en: Firefox has a profiler built into its Firebug add-on. Click on the **Console**
    tab and click on **Profile**.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Firefox在其Firebug插件中集成了性能分析器。点击**控制台**标签，然后点击**分析**。
- en: '![Profilers](img/5689_13_01.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![性能分析器](img/5689_13_01.jpg)'
- en: In Google Chrome's **Developer Tools**, you will find a **Profiles** tab.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Google Chrome的**开发者工具**中，你会找到一个**配置文件**标签页。
- en: Safari provides an **Instrument** tab.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Safari提供了一个**工具**标签页。
- en: Internet Explorer 9 offers a profiler as well in its Developer Tools. Click
    on **Profiler** and then the **Start profiling** button to get started.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在Internet Explorer 9的开发者工具中同样提供了性能分析器。点击**性能分析器**然后点击**开始分析**按钮开始使用。
- en: Profilers will usually list out the slowest running functions, how many times
    they were invoked, and the amount of time they took to execute. They typically
    split the notion of execution time into two categories. Some call it exclusive
    time while others call it self or own time. This is the execution time while within
    a function, excluding the execution time of other functions invoked from within
    that function. The other category is referred to as inclusive time, total time,
    or just time. This is the execution time of a function including functions that
    are invoked from within it.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 性能分析器通常会列出运行最慢的函数，它们被调用的次数以及执行所需的时间。它们通常将执行时间分为两个类别。有些人称之为独占时间，而其他人称之为自时间或拥有时间。这是在函数内部执行的时间，不包括从该函数内部调用的其他函数的执行时间。另一个类别被称为包含时间、总时间或只是时间。这是包括从该函数内部调用的函数在内的函数执行时间。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We covered ways to ensure performance of your enterprise application on many
    different levels. There are ways to ensure clean HTML that your browser will understand,
    and there are ways to ensure optimal CSS and JavaScript. There are ways to reduce
    the page footprint, decrease the number of requests, and place less of a burden
    on the browser. While each of these is important in their own way, real performance
    gains are not always apparent until you put them all together.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了在多个不同层面上确保企业应用程序性能的方法。有确保浏览器能理解的干净HTML的方法，也有确保最优CSS和JavaScript的方法。有减少页面占用空间、减少请求数量和减轻浏览器负担的方法。虽然这些方法各自都很重要，但真正的性能提升并不总是显而易见的，直到你将它们全部结合起来。
- en: We have built our example application, MovieNow, including the most important
    steps to build any enterprise application; from the definition of a meaningful
    structure using semantic tags, to the styling and animations with CSS3, showing
    new and exciting features such as canvas 2D and WebGL, geolocation, video, audio,
    drag-and-drop, and web workers. We practised the use of real world APIs such as
    Twitter, and reviewed a set of tools and libraries to facilitate the process of
    development, testing, and performance improvement.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经构建了我们的示例应用，MovieNow，包括构建任何企业应用的重要步骤；从使用语义标签定义有意义的结构，到使用CSS3进行样式和动画设计，展示了新的和令人兴奋的功能，如2D画布和WebGL、地理位置、视频、音频、拖放和Web
    Workers。我们实践了使用真实世界的API，如Twitter，并回顾了一系列工具和库，以促进开发、测试和性能改进的过程。
- en: We encourage you to continue reading about new web technologies. As we speak,
    there are many developers who are creating not only new enterprise applications
    but new libraries, techniques, tools, and paradigms of thought that can redefine
    the web as we know it.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励你继续阅读有关新网络技术的文章。正如我们所说，现在有许多开发者正在创建不仅新的企业应用，还有新的库、技术、工具和思维范式，这些都可以重新定义我们所知道的互联网。
- en: Finally, we hope you have enjoyed this journey as much as we have, and that
    the initial guidelines of this book lead you to many successful HTML5 projects.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望您像我们一样享受这段旅程，并且这本书的初始指南能引导您走向许多成功的HTML5项目。
