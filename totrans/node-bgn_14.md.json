["```js\nexecuteThisFunction()\n```", "```js\nexecuteThisFunction()\nReferenceError: executeThisFunction is not defined\n    at file:///file.js:1:1\n    at ModuleJob.run (node:internal/modules/esm/module_job:192:25)\n    at async DefaultModuleLoader.import (node:internal/modules/esm/loader:228:24)\n    at async loadESM (node:internal/process/esm_loader:40:7)\n    at async handleMainPromise (node:internal/modules/run_main:66:12)\n```", "```js\nconst myError = new Error('This is an error message')\nthrow myError\n```", "```js\nfile:///file.js:1\nconst myError = new Error('This is an error message')\n                ^\nError: This is an error message\n    at file:///file.js:1:17\n    at ModuleJob.run (node:internal/modules/esm/module_job:192:25)\n    at async DefaultModuleLoader.import (node:internal/modules/esm/loader:228:24)\n    at async loadESM (node:internal/process/esm_loader:40:7)\n    at async handleMainPromise (node:internal/modules/run_main:66:12)\nNode.js v20.11.0\n```", "```js\nclass NotEnoughSleep extends Error {\n  constructor (message) {\n    super(message)\n    this.requireSleep = true\n    this.isRecoverable = true\n  }\n}\nthrow new NotEnoughSleep('Looks like you need more sleep')\n```", "```js\nfile:///file.js:9\n  throw new NotEnoughSleep('Looks like you need more sleep')\nNotEnoughSleep [Error]: Looks like you need more sleep\n    at file:///file.js:9:9\n    at ModuleJob.run (node:internal/modules/esm/module_job:192:25)\n    at async DefaultModuleLoader.import (node:internal/modules/esm/loader:228:24)\n    at async loadESM (node:internal/process/esm_loader:40:7)\n    at async handleMainPromise (node:internal/modules/run_main:66:12) {\n  requireSleep: true,\n  isRecoverable: true\n}\n```", "```js\ntry {\n  throw new NotEnoughSleep(\"Looks like you need more sleep\");\n} catch (error) {\n  if (error.isRecoverable) {\n    console.log(\"You are lucky, because you can recover from this error\");\n  }\n  if (error.requireSleep) {\n    console.log(\"Please, go to sleep!\");\n  }\n}\n```", "```js\nYou are lucky, because you can recover from this error\nPlease, go to sleep!\n```", "```js\nimport express from 'express'\nconst app = express()\n// Other middlewares...\napp.use((err, req, res, next) => {\n  console.error(err.stack)\n  res.status(500).send('Something broke!')\n})\n// Route handler...\n```", "```js\nclass NotFoundError extends Error {\n  constructor (message) {\n    super(message)\n    this.statusCode = 404\n  }\n}\ntry {\n  throw new NotFoundError('The resource was not found')\n} catch (error) {\n  console.log(error.statusCode)\n  res.status(error.statusCode).send(error.message)\n}\n```", "```js\nconst events = ['uncaughtException','unhandledRejection', 'exit', 'SIGINT'];\nevents.forEach(event => {\n  process.on(event, (error) => {\n    console.log(`This is an ${event} that we track!`)\n  })\n})\nsetTimeout(() => {\n  throw new Error('Exception!')\n}, 10000)\nsetTimeout(() => {\n  Promise.reject(new Error('Rejection!'))\n}, 20000)\n```", "```js\nThis is an uncaughtException that we track!\nThis is an unhandledRejection that we track!\nThis is an exit that we track!\n```", "```js\nprocess.on('uncaughtException', (error) => {\n  console.log('We are not going to exit the application!')\n})\nsetInterval(() => {\n    executeThisFunction()\n}, 1000)\n```", "```js\nWe are not going to exit the application!\nWe are not going to exit the application!\nWe are not going to exit the application!\nWe are not going to exit the application!\nWe are not going to exit the application!\n```", "```js\nprocess.on(\"uncaughtException\", (error) => {\n  console.log(\"Now, exit the application!\");\n  process.exit(1);\n});\nsetInterval(() => {\n  executeThisFunction();\n}, 1000);\n```", "```js\nNow, exit the application!\n```"]