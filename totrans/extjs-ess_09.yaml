- en: Chapter 9. Visualizing Your Application's Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。可视化应用程序的数据
- en: This chapter will demonstrate how to visualize your data with charts and graphs.
    It will focus on the most popular types of graphs and how your data sources can
    be integrated with them. We will also discuss how to integrate visualizations
    into other components, such as grids.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将演示如何使用图表和图形来可视化您的数据。它将重点介绍最受欢迎的图表类型以及如何将数据源与它们集成。我们还将讨论如何将可视化集成到其他组件中，例如网格。
- en: 'We will cover the most common topics relating to charts. These are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖与图表相关的最常见主题。以下是一些：
- en: Understanding visualization technologies and how charting works in Ext JS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解可视化技术和Ext JS中图表的工作原理
- en: 'Examples and explanations of how to work with common charts, namely:'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见图表的示例和说明，包括：
- en: Line
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 折线图
- en: Bar
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 柱状图
- en: Pie
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 饼图
- en: Integrating these visualizations into other components, such as a grid
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将这些可视化集成到其他组件中，例如网格
- en: Anatomy of chart components
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图表组件的解剖结构
- en: Ext JS provides a very flexible and feature-rich charting toolkit to visually
    represent data to users. To get the most out of the chart's package, it is worthwhile
    to have an understanding of the anatomy of the chart.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS提供了一个非常灵活且功能丰富的图表工具包，用于向用户直观地展示数据。为了充分利用图表包，了解图表的解剖结构是值得的。
- en: Series
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系列
- en: In Ext JS, the series is essentially the chart type. The series is the most
    complicated part of the chart and handles how the elements are animated, shown,
    or hidden. In addition to this, the series handles how the data is labeled.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ext JS中，系列基本上是图表类型。系列是图表中最复杂的一部分，负责处理元素如何动画、显示或隐藏。此外，系列还处理数据的标签。
- en: If, for example, the application requires a bar chart, then it's the Bar or
    Bar3D series classes you need to look out for.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果应用程序需要柱状图，那么您需要关注的是柱状图或柱状图3D系列类。
- en: 'Out of the box, Ext JS 5 offers the following charts:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS 5默认提供的以下图表：
- en: Bar (and a 3D variant)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 柱状图（以及3D变体）
- en: OHCL/Candlestick
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OHCL/蜡烛图
- en: Area
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面积图
- en: Pie (and a 3D variant)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 饼图（以及3D变体）
- en: Line
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 折线图
- en: Gauge
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仪表盘
- en: Scatter
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 散点图
- en: Radar
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 雷达图
- en: Polar
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极坐标图
- en: Axes
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轴
- en: As with any other chart, you'll typically be required to define axes for your
    chart components. The numeric and category axes are the most commonly used. The
    framework comes with a number of layouts and a method to segment data if you require
    something that's not necessarily out of the box.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他图表一样，您通常需要为图表组件定义轴。数值轴和类别轴是最常用的。如果需要非标准的东西，框架提供了一系列布局和分段数据的方法。
- en: Labels
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签
- en: Chart labels are simply a way to display the label for the data point. Ext JS
    enables us to customize how these are displayed and animated.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图表标签只是显示数据点标签的一种方式。Ext JS使我们能够自定义这些标签的显示和动画。
- en: Interactions
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交互
- en: Interactions simply refer to how the user interfaces with the chart. For example,
    using an interaction might allow the user to click and drag a part of the chart
    to zoom into the data.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 交互简单地指的是用户如何与图表交互。例如，使用交互可能允许用户单击并拖动图表的一部分来放大数据。
- en: Creating a line chart
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建折线图
- en: Line charts are one of the most commonly used types of graphs and are most suited
    to representing trending data, which is often regularly updated and required to
    be analyzed in real time.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 折线图是最常用的图表类型之一，最适合表示趋势数据，这些数据通常定期更新，并需要实时分析。
- en: 'One of the great advantages of the Ext JS charting package is that we can work
    with the data in real time. It''s possible to do this a number of ways:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS图表包的一个巨大优势是我们可以在实时中处理数据。这可以通过多种方式实现：
- en: Simply poll periodically for updates
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单地定期轮询以获取更新
- en: Bind the store to a `WebSocket` and push updates from the server side
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将存储绑定到 `WebSocket` 并从服务器端推送更新
- en: To continue the running theme of our BizDash business dashboard, we will create
    a line chart that shows how many people are currently visiting our website.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续我们的BizDash商业仪表板的主题，我们将创建一个折线图，显示目前有多少人正在访问我们的网站。
- en: Creating the store and model
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建存储和模型
- en: As we saw in [Chapter 5](ch05.html "Chapter 5. Modeling Data Structures for
    Your UI"), *Modeling Data Structures for Your UI*, we need to start by defining
    a model to represent an individual record being retrieved by the store.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第5章](ch05.html "第5章。为您的UI建模数据结构")中看到的，“为您的UI建模数据结构”，我们需要首先定义一个模型来表示存储检索的个别记录。
- en: 'Before we get into the details of creating the line chart, we need to create
    a store and a model. We don''t yet have a `WebSiteVisitor` model in our application.
    So, let''s create one:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解创建折线图之前，我们需要创建一个存储和模型。在我们的应用程序中还没有`WebSiteVisitor`模型。所以，让我们创建一个：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Polling the server for new data
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轮询服务器获取新数据
- en: 'It would be straightforward to have our store poll the server every 10 seconds
    and plot the number of visits at that moment in time with a `setInterval` or similar:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要让我们的存储每10秒轮询服务器一次，并使用`setInterval`或类似方法绘制该时刻的访问次数，是非常直接的：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `addRecords` configuration is passed into the store's `load` method. By
    setting this property to `true`, any new records retrieved by the load operation
    are appended to the existing dataset rather than replacing what is already there,
    which is the default behavior.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`addRecords`配置传递给存储的`load`方法。通过将此属性设置为`true`，通过加载操作检索的新记录将附加到现有数据集，而不是替换已经存在的记录，这是默认行为。'
- en: 'The configuration of the chart itself is surprisingly straightforward. We''ll
    do this in a new view to remain in keeping with the rest of our application:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图表的配置本身非常简单。我们将在一个新的视图中这样做，以保持与我们的应用程序的其他部分一致：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is how it will look:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的样子：
- en: '![Polling the server for new data](img/3717_09_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![轮询服务器获取新数据](img/3717_09_01.jpg)'
- en: The line chart we have created is set up in a fairly standard way. The two numeric
    axes bind to the integer fields within the `WebSiteVisitor` model. The line itself
    is displayed by the `Ext.chart.series.Line` class where it is tied to the data
    via the `xField` and `yField` properties.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的折线图设置在一个相当标准的方式。两个数值轴绑定到`WebSiteVisitor`模型内的整数字段。线条本身是通过`Ext.chart.series.Line`类显示的，它通过`xField`和`yField`属性与数据相关联。
- en: Presenting data in a bar chart
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在柱状图中展示数据
- en: A bar chart is an incredibly useful way of presenting quantitative data to users.
    We will quickly demonstrate how to create a bar chart and have it load data asynchronously
    from the server.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 柱状图是向用户展示定量数据的一种极其有用的方式。我们将快速演示如何创建柱状图，并从服务器异步加载数据。
- en: 'As with the line chart, we''re going to require a model and store to get things
    started:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 与折线图一样，我们需要一个模型和存储来开始：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this contrived example, the data we return from the server must have a `name`
    and `value` property, as we have defined these as fields in our model.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个虚构的例子中，从服务器返回的数据必须有一个`name`和`value`属性，因为我们已经将这些定义为模型中的字段。
- en: The store we defined in this example is used as the client-side cache for our
    data. By associating the `BarChart` model to the store, we ensure that the data
    is correctly represented in the chart component.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中定义的存储用作我们数据的客户端缓存。通过将`BarChart`模型关联到存储，我们确保数据在图表组件中正确表示。
- en: Now that the store is ready, we just need a component to bind it to. We will
    now create a new view called `BizDash.view.chart.BarChart` containing a Cartesian
    chart with a bar series. This gives us basic charting functionality to which we
    can add axes and series and bind our store to it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在存储已经准备好了，我们只需要一个组件来绑定它。现在我们将创建一个新的视图`BizDash.view.chart.BarChart`，其中包含一个带有柱状系列的笛卡尔图表。这为我们提供了基本的图表功能，我们可以添加轴和系列，并将存储绑定到它。
- en: The axes are used to define the boundaries of the chart and, in this instance,
    create the horizontal and vertical axes. The series handles the rendering of the
    data points across the chart. Here, we've used the `Ext.chart.series.Bar` class
    to create a simple bar chart. In the bar configuration, `xField` and `yField`
    must contain the same name fields we defined in our model.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 轴用于定义图表的边界，在本例中，创建水平和垂直轴。系列负责在图表上渲染数据点。在这里，我们使用了`Ext.chart.series.Bar`类来创建一个简单的柱状图。在柱状图配置中，`xField`和`yField`必须包含我们在模型中定义的相同名称的字段。
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is how the graph will now look:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是图表现在的样子：
- en: '![Presenting data in a bar chart](img/3717_09_02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![在柱状图中展示数据](img/3717_09_02.jpg)'
- en: Creating a pie chart in Ext JS
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Ext JS中创建饼图
- en: The pie chart is a very common chart type and is excellent at representing proportional
    data, where each slice of the pie equates to the percentage that particular slice
    holds against the sum of the entire dataset.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图是一种非常常见的图表类型，非常适合表示比例数据，其中饼图的每一块等于该块相对于整个数据集总和的百分比。
- en: In this section, we will demonstrate how to create a pie chart representing
    the distribution of products (by stock level) we have in our warehouse.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将演示如何创建一个饼图，以展示我们仓库中产品（按库存水平）的分布情况。
- en: 'We already have a products store and model defined earlier in the book ([Chapter
    5](ch05.html "Chapter 5. Modeling Data Structures for Your UI"), *Modeling Data
    Structures for Your UI*, and [Chapter 7](ch07.html "Chapter 7. Constructing Common
    UI Widgets"), *Constructing Common UI Widgets*). As a reminder, here''s what we
    defined:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在本书中定义了产品存储和模型（[第5章](ch05.html "第5章。为您的UI建模数据结构")，*为您的UI建模数据结构*，和[第7章](ch07.html
    "第7章。构建常见UI小部件")，*构建常见UI小部件*）。作为提醒，以下是我们定义的内容：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we have the store and model organized, we need to create a new view
    for our pie chart:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经组织好了存储和模型，我们需要为我们的饼图创建一个新的视图：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Amazingly, it''s as simple as that. You can see the output in the following
    image:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 惊人的是，就这么简单。您可以在以下图像中看到输出：
- en: '![Creating a pie chart in Ext JS](img/3717_09_03.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![在Ext JS中创建饼图](img/3717_09_03.jpg)'
- en: As with other charts that have polar coordinates, the `Ext.chart.PolarChart`
    class provides the infrastructure and canvas for our specific chart type to be
    rendered.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他具有极坐标的图表一样，`Ext.chart.PolarChart`类为我们特定的图表类型提供了基础设施和画布以进行渲染。
- en: We use the pie series type to have the `Ext.chart.series.Pie` class process
    the records contained in the bound store and turn it into a series of sprites
    to form a chart. This series will convert each of the records in the store into
    a slice of the pie.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用饼图系列类型，让`Ext.chart.series.Pie`类处理绑定存储中的记录，并将其转换为一系列精灵以形成图表。此系列将存储中的每个记录转换为饼图的切片。
- en: The most important configuration of this series type is `xField`. This tells
    the series which of our model fields holds the numeric value that will be used
    when calculating the size of each record's slice.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此系列类型最重要的配置是`xField`。这告诉系列我们的模型字段中哪个字段包含用于计算每个记录切片大小的数值。
- en: We add labels to the chart by using the `labels` property to configure the `Ext.chart.Label`
    mixin, which is applied to the `Ext.chart.series.Pie` class. These options allow
    us to configure how the labels are positioned and styled. By choosing the rotate
    value for the `display` property, the labels are positioned along the length of
    the slice. While discussing the look of the chart, it's perhaps worth highlighting
    that the `donut` config is the radius of the hole (as a percentage) that's cut
    out in the middle of the pie chart.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用`labels`属性配置`Ext.chart.Label`混合，并将其应用于`Ext.chart.series.Pie`类，为图表添加标签。这些选项允许我们配置标签的位置和样式。通过选择`display`属性的旋转值，标签将定位在切片的长度上。在讨论图表的外观时，也许值得强调的是，`donut`配置是饼图中中间挖空的孔的半径（以百分比表示）。
- en: Integrating visualizations in grids
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在网格中集成可视化
- en: The grid widget is one of the best known features of Ext JS and the framework
    now supports the concept of widget columns. The widget column lets you embed a
    widget which, unlike a standard component, is a lightweight component that is
    quick to render and update. Widgets are suited perfectly to grids, where you may
    be displaying dozens of them at the same time.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 网格小部件是Ext JS最知名的功能之一，该框架现在支持小部件列的概念。小部件列允许您嵌入一个小部件，与标准组件不同，它是一个轻量级组件，渲染和更新速度快。小部件非常适合网格，在网格中您可能同时显示数十个小部件。
- en: Ext JS 5 introduces a number of lightweight widgets for grids, but the sparkline
    widget is without doubt the perfect widget to show a chart in a grid. It is an
    ultra-lightweight chart designed to represent a series of values with minimum
    real estate.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS 5引入了多个轻量级网格小部件，但毫无疑问，Sparkline小部件是展示网格中图表的完美小部件。它是一个超轻量级的图表，旨在用最小的空间表示一系列值。
- en: 'There are a number of different sparklines to work with:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的Sparkline可以工作：
- en: Bar
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 柱状图
- en: Line
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线形图
- en: Pie
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 饼图
- en: Bullet
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目符号
- en: Range map
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 范围图
- en: TriState
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三态
- en: Box plot
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箱线图
- en: 'To demonstrate a sparkline in action, we''re going to go back to [Chapter 7](ch07.html
    "Chapter 7. Constructing Common UI Widgets"), *Constructing Common UI Widgets*,
    and make use of our `product` grid:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示Sparkline的实际应用，我们将回到[第7章](ch07.html "第7章。构建常见UI小部件")，*构建常见UI小部件*，并利用我们的`product`网格：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A sparkline graph must be attached to a single data field, which contains an
    array of points that will be plotted. To demonstrate this feature, we will add
    a `HistoricSales` field to our Product model which will hold the data that we
    will plot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Sparkline图必须附加到单个数据字段，该字段包含将要绘制的点数组。为了演示这个功能，我们将向我们的Product模型添加一个`HistoricSales`字段，该字段将保存我们将要绘制的数据：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This grid already has a store and model bound to it, so it''s simply a case
    of adding a new `widgetcolumn` to the `columns` array as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网格已经绑定了一个存储和模型，所以只需将一个新的 `widgetcolumn` 添加到 `columns` 数组中，如下所示：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `widget` config allows us to specify the xtype of the sparkline that will
    be rendered in the column (possible values include `sparklinebar`, `sparklinepie`,
    `sparklinebullet`, and `sparklinediscrete`). The following screenshot shows how
    this line graph is rendered:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget` 配置允许我们指定将在列中渲染的 sparkline 的 xtype（可能的值包括 `sparklinebar`、`sparklinepie`、`sparklinebullet`
    和 `sparklinediscrete`）。以下截图显示了如何渲染此线形图：'
- en: '![Integrating visualizations in grids](img/3717_09_04.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![在网格中集成可视化](img/3717_09_04.jpg)'
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Throughout this chapter, we have explored the details of adding charting visualizations
    to our Ext JS application. We have:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了将图表可视化添加到我们的 Ext JS 应用程序中的细节。我们：
- en: Covered the basics on how charts are created
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍了图表创建的基础知识
- en: Understood the components of a chart
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解了图表的组成部分
- en: Built a line chart
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立了一个折线图
- en: Built a bar chart
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立了一个柱状图
- en: Built a pie chart
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立了一个饼图
- en: Integrated a visualization into a grid
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将可视化集成到网格中
- en: The next chapter dives into testing your Ext JS application by teaching you
    how to write testable JavaScript and unit tests for your Ext JS application.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将深入探讨如何通过教授你如何编写可测试的 JavaScript 和单元测试来测试你的 Ext JS 应用程序。
