- en: Chapter 9. Visualizing Your Application's Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will demonstrate how to visualize your data with charts and graphs.
    It will focus on the most popular types of graphs and how your data sources can
    be integrated with them. We will also discuss how to integrate visualizations
    into other components, such as grids.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the most common topics relating to charts. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding visualization technologies and how charting works in Ext JS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples and explanations of how to work with common charts, namely:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bar
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pie
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating these visualizations into other components, such as a grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anatomy of chart components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ext JS provides a very flexible and feature-rich charting toolkit to visually
    represent data to users. To get the most out of the chart's package, it is worthwhile
    to have an understanding of the anatomy of the chart.
  prefs: []
  type: TYPE_NORMAL
- en: Series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Ext JS, the series is essentially the chart type. The series is the most
    complicated part of the chart and handles how the elements are animated, shown,
    or hidden. In addition to this, the series handles how the data is labeled.
  prefs: []
  type: TYPE_NORMAL
- en: If, for example, the application requires a bar chart, then it's the Bar or
    Bar3D series classes you need to look out for.
  prefs: []
  type: TYPE_NORMAL
- en: 'Out of the box, Ext JS 5 offers the following charts:'
  prefs: []
  type: TYPE_NORMAL
- en: Bar (and a 3D variant)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OHCL/Candlestick
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pie (and a 3D variant)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gauge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scatter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Radar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Axes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with any other chart, you'll typically be required to define axes for your
    chart components. The numeric and category axes are the most commonly used. The
    framework comes with a number of layouts and a method to segment data if you require
    something that's not necessarily out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: Labels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Chart labels are simply a way to display the label for the data point. Ext JS
    enables us to customize how these are displayed and animated.
  prefs: []
  type: TYPE_NORMAL
- en: Interactions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Interactions simply refer to how the user interfaces with the chart. For example,
    using an interaction might allow the user to click and drag a part of the chart
    to zoom into the data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a line chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Line charts are one of the most commonly used types of graphs and are most suited
    to representing trending data, which is often regularly updated and required to
    be analyzed in real time.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the great advantages of the Ext JS charting package is that we can work
    with the data in real time. It''s possible to do this a number of ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Simply poll periodically for updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bind the store to a `WebSocket` and push updates from the server side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To continue the running theme of our BizDash business dashboard, we will create
    a line chart that shows how many people are currently visiting our website.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the store and model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we saw in [Chapter 5](ch05.html "Chapter 5. Modeling Data Structures for
    Your UI"), *Modeling Data Structures for Your UI*, we need to start by defining
    a model to represent an individual record being retrieved by the store.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we get into the details of creating the line chart, we need to create
    a store and a model. We don''t yet have a `WebSiteVisitor` model in our application.
    So, let''s create one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Polling the server for new data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It would be straightforward to have our store poll the server every 10 seconds
    and plot the number of visits at that moment in time with a `setInterval` or similar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `addRecords` configuration is passed into the store's `load` method. By
    setting this property to `true`, any new records retrieved by the load operation
    are appended to the existing dataset rather than replacing what is already there,
    which is the default behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration of the chart itself is surprisingly straightforward. We''ll
    do this in a new view to remain in keeping with the rest of our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how it will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Polling the server for new data](img/3717_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The line chart we have created is set up in a fairly standard way. The two numeric
    axes bind to the integer fields within the `WebSiteVisitor` model. The line itself
    is displayed by the `Ext.chart.series.Line` class where it is tied to the data
    via the `xField` and `yField` properties.
  prefs: []
  type: TYPE_NORMAL
- en: Presenting data in a bar chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A bar chart is an incredibly useful way of presenting quantitative data to users.
    We will quickly demonstrate how to create a bar chart and have it load data asynchronously
    from the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with the line chart, we''re going to require a model and store to get things
    started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this contrived example, the data we return from the server must have a `name`
    and `value` property, as we have defined these as fields in our model.
  prefs: []
  type: TYPE_NORMAL
- en: The store we defined in this example is used as the client-side cache for our
    data. By associating the `BarChart` model to the store, we ensure that the data
    is correctly represented in the chart component.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the store is ready, we just need a component to bind it to. We will
    now create a new view called `BizDash.view.chart.BarChart` containing a Cartesian
    chart with a bar series. This gives us basic charting functionality to which we
    can add axes and series and bind our store to it.
  prefs: []
  type: TYPE_NORMAL
- en: The axes are used to define the boundaries of the chart and, in this instance,
    create the horizontal and vertical axes. The series handles the rendering of the
    data points across the chart. Here, we've used the `Ext.chart.series.Bar` class
    to create a simple bar chart. In the bar configuration, `xField` and `yField`
    must contain the same name fields we defined in our model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the graph will now look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Presenting data in a bar chart](img/3717_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a pie chart in Ext JS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The pie chart is a very common chart type and is excellent at representing proportional
    data, where each slice of the pie equates to the percentage that particular slice
    holds against the sum of the entire dataset.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will demonstrate how to create a pie chart representing
    the distribution of products (by stock level) we have in our warehouse.
  prefs: []
  type: TYPE_NORMAL
- en: 'We already have a products store and model defined earlier in the book ([Chapter
    5](ch05.html "Chapter 5. Modeling Data Structures for Your UI"), *Modeling Data
    Structures for Your UI*, and [Chapter 7](ch07.html "Chapter 7. Constructing Common
    UI Widgets"), *Constructing Common UI Widgets*). As a reminder, here''s what we
    defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the store and model organized, we need to create a new view
    for our pie chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Amazingly, it''s as simple as that. You can see the output in the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a pie chart in Ext JS](img/3717_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As with other charts that have polar coordinates, the `Ext.chart.PolarChart`
    class provides the infrastructure and canvas for our specific chart type to be
    rendered.
  prefs: []
  type: TYPE_NORMAL
- en: We use the pie series type to have the `Ext.chart.series.Pie` class process
    the records contained in the bound store and turn it into a series of sprites
    to form a chart. This series will convert each of the records in the store into
    a slice of the pie.
  prefs: []
  type: TYPE_NORMAL
- en: The most important configuration of this series type is `xField`. This tells
    the series which of our model fields holds the numeric value that will be used
    when calculating the size of each record's slice.
  prefs: []
  type: TYPE_NORMAL
- en: We add labels to the chart by using the `labels` property to configure the `Ext.chart.Label`
    mixin, which is applied to the `Ext.chart.series.Pie` class. These options allow
    us to configure how the labels are positioned and styled. By choosing the rotate
    value for the `display` property, the labels are positioned along the length of
    the slice. While discussing the look of the chart, it's perhaps worth highlighting
    that the `donut` config is the radius of the hole (as a percentage) that's cut
    out in the middle of the pie chart.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating visualizations in grids
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The grid widget is one of the best known features of Ext JS and the framework
    now supports the concept of widget columns. The widget column lets you embed a
    widget which, unlike a standard component, is a lightweight component that is
    quick to render and update. Widgets are suited perfectly to grids, where you may
    be displaying dozens of them at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Ext JS 5 introduces a number of lightweight widgets for grids, but the sparkline
    widget is without doubt the perfect widget to show a chart in a grid. It is an
    ultra-lightweight chart designed to represent a series of values with minimum
    real estate.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of different sparklines to work with:'
  prefs: []
  type: TYPE_NORMAL
- en: Bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pie
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bullet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Range map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TriState
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Box plot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To demonstrate a sparkline in action, we''re going to go back to [Chapter 7](ch07.html
    "Chapter 7. Constructing Common UI Widgets"), *Constructing Common UI Widgets*,
    and make use of our `product` grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'A sparkline graph must be attached to a single data field, which contains an
    array of points that will be plotted. To demonstrate this feature, we will add
    a `HistoricSales` field to our Product model which will hold the data that we
    will plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This grid already has a store and model bound to it, so it''s simply a case
    of adding a new `widgetcolumn` to the `columns` array as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `widget` config allows us to specify the xtype of the sparkline that will
    be rendered in the column (possible values include `sparklinebar`, `sparklinepie`,
    `sparklinebullet`, and `sparklinediscrete`). The following screenshot shows how
    this line graph is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating visualizations in grids](img/3717_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout this chapter, we have explored the details of adding charting visualizations
    to our Ext JS application. We have:'
  prefs: []
  type: TYPE_NORMAL
- en: Covered the basics on how charts are created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understood the components of a chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built a line chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built a bar chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built a pie chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated a visualization into a grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next chapter dives into testing your Ext JS application by teaching you
    how to write testable JavaScript and unit tests for your Ext JS application.
  prefs: []
  type: TYPE_NORMAL
