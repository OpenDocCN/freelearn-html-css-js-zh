["```js\nnew ImaginaryCalendar({ container: containerElement })\n```", "```js\n<script>\n  let containerElement;\n</script>\n<div bind:this={containerElement} />\n```", "```js\n<script>\n  import { onMount } from 'svelte';\n  let containerElement;\n  let calendar;\n  onMount(() => {\n    calendar = new ImaginaryCalendar({ container: containerElement });\n    return () => calendar.cleanup();\n  });\n</script>\n```", "```js\ncalendar.setDate(date);\n```", "```js\nif (calendar) calendar.setDate(date).\n```", "```js\n<script>\n  import { onMount } from 'svelte';\n  let containerElement;\n  let calendar;\n  onMount(() => {\n    if (containerElement) {\n      calendar = new ImaginaryCalendar({ container: containerElement });\n      return () => calendar.cleanup();\n    }\n  });\n</script>\n{#if someCondition}\n  <div bind:this={containerElement} />\n{/if}\n```", "```js\n<script>\n  function calendar(containerElement) {\n    const calendar = new ImaginaryCalendar({ container: containerElement });\n    return {\n      destroy() {\n        calendar.cleanup();\n      }\n    };\n  }\n</script>\n{#if someCondition}\n  <div use:calendar />\n{/if}\n```", "```js\n{#if someCondition}\n  <div use:calendar />\n{/if}\n<!-- Look we can have as many calendars as we want -->\n<div use:calendar />\n{#each [1, 2, 3] as item}\n  <div use:calendar />\n{/each}\n```", "```js\n<div use:calendar={date} />\n```", "```js\n<script>\n  function calendar(containerElement, date) {\n    const calendar = new ImaginaryCalendar({ container: containerElement });\n    calendar.setDate(date);\n    return {\n      update(newDate) {\n        calendar.setDate(newDate);\n      },\n      destroy() {\n        calendar.cleanup();\n      }\n    };\n  }\n</script>\n<div use:calendar={new Date(2022, 10, 5)} />\n```", "```js\n{#each dates as date}\n  <div use:calendar={date} />\n{/each}\n```", "```js\n<div use:calendar={{ date, mode }} />\n```", "```js\nfunction calendar(node, { date, mode }) {\n  const calendar = new ImaginaryCalendar({ container: containerElement });\n  calendar.setDate(date);\n  calendar.setMode(mode);\n  return {\n    update({ date: newDate, mode: newMode }) {\n      calendar.setDate(newDate);\n      calendar.setMode(newMode);\n    },\n    destroy() { ... }\n  };\n}\n```", "```js\nfunction calendar(node, { date, mode }) {\n  const calendar = new ImaginaryCalendar({ container: containerElement });\n  calendar.setDate(date);\n  calendar.setMode(mode);\n  return {\n    update({ date: newDate, mode: newMode }) {\n      if (date !== newDate) {\n        calendar.setDate(newDate);\n        date = newDate;\n      }\n      if (mode !== newMode) {\n        calendar.setMode(newMode);\n        mode = newMode;\n      }\n    },\n    destroy() { ... }\n  };\n}\n```", "```js\n<!-- ImaginaryCalendarComponent.svelte -->\n<script>\n  import { onMount } from 'svelte';\n  let containerElement;\n  let calendar;\n  onMount(() => { ... });\n</script>\n<div bind:this={containerElement} />\n```", "```js\n<script>\n  import ImaginaryCalendarComponent from './ ImaginaryCalendarComponent.svelte';\n</script>\n{#if someCondition}\n  <ImaginaryCalendarComponent />\n{/if}\n```", "```js\n{#if someCondition}\n  <ImaginaryCalendarComponent />\n{/if}\n<!-- Look we can have as many calendars as we want -->\n<ImaginaryCalendarComponent />\n{#each array as item}\n  <ImaginaryCalendarComponent />\n{/each}\n```", "```js\n<ImaginaryCalendarComponent>\n  <!—Customize how each cell of the calendar looks ––>\n  <svelte:fragment sl\"t=\"c\"ll\" let:date>\n    {date}\n  </svelte:fragment>\n</ImaginaryCalendarComponent>\n```", "```js\nimport tippy from 'tippy.js';\nimport 'tippy.js/dist/tippy.css';\n```", "```js\ntippy('#id');\ntippy(document.getElementById('my-element'));\n```", "```js\n<button data-tippy-content=\"hello\" />\n```", "```js\ntippy(element, { content: 'hello' });\n```", "```js\ntooltipInstance.setContent(\"bye\");\n```", "```js\ntooltipInstance.destroy();\n```", "```js\n<div use:tippy={tooltipContent} />\n```", "```js\nfunction tippy(element, content) {\n  // TODO #1: initialize the library\n  return {\n    update(newContent) {\n      // TODO #2: do something when action data changes\n    },\n    destroy() {\n      // TODO #3: clean up\n    }\n  };\n}\n```", "```js\n// TODO #1: initialize the library\nconst tooltipInstance = tippy(element, { content });\n```", "```js\n// TODO #2: do something when action data changes\ntooltipInstance.setContent(newContent);\n```", "```js\n// TODO #3: clean up\ntooltipInstance.destroy();\n```", "```js\nimport CodeMirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\n```", "```js\nconst myCodeMirror = CodeMirror(document.body);\n```", "```js\nmyCodeMirror.on('change', () => { ... });\n```", "```js\n<div use:codemirror on:change={onChangeHandler} />\n```", "```js\nfunction codemirror(element) {\n  const editor = CodeMirror(element);\n  editor.on('change', () => {\n    // trigger 'change' event on the element\n    // whenever the editor changes\n    element.dispatchEvent(new CustomEvent('change'));\n  });\n}\n```", "```js\nimport ReactDOM from 'react-dom';\nconst root = ReactDOM.createRoot(container);\nroot.render(<h1>Hello, world</h1>);\n```", "```js\nimport { jsx } from 'react/jsx-runtime';\nconst root = ReactDOM.createRoot(container)\nroot.render(jsx('h1', { children: 'Hello, world' }));\n```", "```js\nimport { createApp } from 'vue'\nimport App from './App.vue'\nconst app = createApp(App);\napp.mount(container);\n```", "```js\nroot.unmount();\n```", "```js\napp.unmount();\n```", "```js\n<Component prop_name={value} />\n```", "```js\njsx(Component, { prop_name: value });\n```", "```js\nroot.render(jsx(App, { prop_name: 123 }));\n// some time later\nroot.render(jsx(App, { prop_name: 456 }));\n```", "```js\nconst app = createApp(Component, { prop_name: value });\n```", "```js\nconst value = ref(123);\nconst app = createApp(Component, { prop_name: ref });\n// some time later\nvalue.value = 456;\n```", "```js\n<div\n  use:calendar={selectedDate}\n  on:change={(event) => selectedDate = event.detail}\n/>\n```", "```js\nfunction calendar(element, date) {\n  // TODO #1: render the react-calendar into the element\n  // TODO #2: the onChange handler to dispatch a new custom event\n  return {\n    update(newDate) {\n      // TODO #3: re-render the calendar again when there's a new date value\n    },\n    destroy() {\n      // TODO #4: clean up\n    }\n  };\n}\n```", "```js\nimport { jsx } from 'react/jsx-runtime';\nimport ReactDOM from 'react-dom';\nfunction calendar(element, date) {\n  # TODO #1: render the react-calendar into the element\n  const app = ReactDOM.createRoot(element);\n  app.render(jsx(Calendar, { value: date, onChange }));\n  // ...\n}\n```", "```js\n# TODO #2: the onChange handler to dispatch a new custom event\nfunction onChange(value) {\n  element.dispatchEvent(\n  new CustomEvent('change', { detail: value })\n  );\n}\n```", "```js\n// TODO #3: re-render the calendar again when there's a new date value\napp.render(jsx(Calendar, { value: newDate, onChange }));\n```", "```js\n// TODO #4: clean up\napp.unmount();\n```"]