- en: '*Chapter 10*: Using Bootstrap 5 with Advanced Sass and CSS Features'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at advanced Sass and CSS features related to Bootstrap
    5\. In the previous chapters, we customized the look and feel of the website,
    but this time we will primarily change the way we write our code without any effect
    on the look and feel. And in addition to that, we will look at various other features
    through some isolated examples.
  prefs: []
  type: TYPE_NORMAL
- en: We will first see how we can use various Bootstrap 5 Sass mixins to write our
    code in different ways, and after that, we will see some examples of the Bootstrap
    5 Sass functions.
  prefs: []
  type: TYPE_NORMAL
- en: Then we will see how we can use the extend feature of Sass for semantic HTML
    and to create custom components.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we will learn about the best – and recommended – approach to creating
    custom components using the Bootstrap 5 variables, mixins, and functions.
  prefs: []
  type: TYPE_NORMAL
- en: Towards the end of the chapter, we will see how we can take advantage of the
    CSS custom properties that come with Bootstrap 5 to create a dark color theme
    and customize a component and a helper.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will look at Bootstrap’s side project, RFS, and learn how to use
    it for calculating automated responsive CSS values.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Bootstrap 5 Sass mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bootstrap 5 Sass functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending Bootstrap 5 classes for semantic HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending Bootstrap 5 classes to create custom components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom component using Bootstrap 5 variables, mixins, and functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bootstrap 5 CSS custom properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the RFS Sass plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned previously, for some of these topics we will update parts of our
    code for the website, while for other topics we will only see isolated examples
    related to that topic.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To preview the examples, you will need a code editor and a browser. The source
    code for all code examples can be found here: [https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide](https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To compile Sass to CSS, you will need one of the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js**, if you prefer a **command-line interface** (**CLI**) using Terminal
    (Mac) or Command Prompt (Windows)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scout-App**, if you prefer a **graphical user interface** (**GUI**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**, if you prefer to use an extension from the Visual Studio
    Code Marketplace'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All these approaches are explained in [*Chapter 2*](B17143_02_epub.xhtml#_idTextAnchor033)*,
    Using and Compiling Sass*.
  prefs: []
  type: TYPE_NORMAL
- en: Using Bootstrap 5 Sass mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap 5 contains many Sass mixins. Some of them are used by other parts
    of Bootstrap 5, while a few of them are not. All of them can be used in your own
    Sass code as well. In this section, we will first get an overview of the various
    mixins contained in Bootstrap 5, what they are used for, and how they relate to
    other Bootstrap 5 code. Then we will see different examples of how to use some
    of these mixins.
  prefs: []
  type: TYPE_NORMAL
- en: Mixin overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `mixins` folder, we have a total of 25 files, which are all Sass partials.
    Here’s an overview of the files with comments about which elements (components,
    helpers, or other) of Bootstrap 5 are using these mixins, if any:'
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap/scss/mixins
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We will now see how we can group some of these mixins in three different ways
    depending on their usage.
  prefs: []
  type: TYPE_NORMAL
- en: Mixins depending on global options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some mixins depend on the global options that we learned about in [*Chapter
    4*](B17143_04_epub.xhtml#_idTextAnchor079)*, Bootstrap 5 Global Options and Colors*.
    So, these mixins will only return code if the specific option is enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Mixins that are not used
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some mixins are actually not used by other Bootstrap 5 code. We will see what
    some of these mixins can be used for later in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Mixins used for variants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some mixins are used to create different variations of primarily Bootstrap
    5 components. This could be variations for contextual color, size, and breakpoint-specific
    behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now see a few examples of how we can use some of the mixins in our own
    code. We will not update our website with these mixins but instead, see some standalone
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive grid system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we will create a responsive grid system, including a container,
    using various mixins.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we have the following semantic HTML using only default HTML
    elements and no classes:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/mixins/responsive-grid-system/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: We will now first add a container to the `<body>` element. When using a mixin
    for this, it will create a fluid container, and this is what we will use in our
    example. It requires some more custom code to create the same behavior as the
    default `.container` class with different `max-width` instances across breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: After adding the container, we will create a simple responsive grid using the
    `<main>` element as the row and the `<nav>`, `<article>`, and `<aside>` elements
    as columns. We won’t add any mixins to the `<header>` and `<footer>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The necessary Sass code for this example is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/mixins/responsive-grid-system/scss/style.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: When this example is viewed in a browser, we will see that the layout of the
    page is now using a container and a responsive grid system.
  prefs: []
  type: TYPE_NORMAL
- en: Media queries for breakpoints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we will take a closer look at mixins for media queries for
    breakpoints. In the `_breakpoints.scss` file, we will find four mixins and four
    functions, where three of the functions are primarily used by those mixins and
    one, `breakpoint-infix()`, is used by various components in other files. For now,
    we will focus on the mixins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an overview of the various mixins for media queries for breakpoints
    together with a short description of what they do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: For viewport sizes with the minimum breakpoint width
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breakpoint specified by the `$name` argument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The content block passed to the mixin will be applied to the specified breakpoint
    width and wider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No media query for the smallest breakpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: For viewport sizes with the maximum breakpoint width
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breakpoint specified by the `$name` argument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The content block passed to the mixin will be applied to the specified breakpoint
    width and narrower
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: For viewport sizes that span multiple breakpoint widths
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breakpoints specified by the `$lower` and `$upper` arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The content block passed to the mixin will be applied between the specified
    lower and upper breakpoint widths
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: For viewport sizes between the minimum and maximum breakpoint widths
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breakpoint specified by the `$name` argument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The content block passed to the mixin will be applied between the specified
    breakpoint’s minimum and maximum widths only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `$breakpoints` argument is an optional argument with the default value `$grid-breakpoints`.
    This means that it will use the breakpoint widths defined in the `$grid-breakpoints`
    map.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see these mixins in action, here’s an example that initially hides some
    elements and then displays them with the use of the different mixins. First, here’s
    the HTML for the example, where we use the classes `.up`, `.down`, `.between`,
    and `.only`, which will be used as selectors in our Sass:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/mixins/media-queries-for-breakpoints/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s the Sass code, where we initially hide all elements and then display
    them using the various mixins:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/mixins/media-queries-for-breakpoints/scss/style.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: If you look at this example in a browser and resize the window, you will then
    see that the `<div>` elements are only visible at certain breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Helpers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we will use two of the helper mixins. We will use the visually
    hidden mixin for a heading element and the text truncation mixin for a paragraph
    element. The HTML code for this example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/mixins/helpers/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'The Sass code used for this example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/mixins/helpers/scss/style.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: When this example is viewed in a browser, the heading element will now be hidden
    from the screen, but visible to screen readers, while the paragraph will have
    its text on one line only with the text being truncated at the end followed by
    an ellipsis.
  prefs: []
  type: TYPE_NORMAL
- en: Dark color theme
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we will see how we can define a dark color theme (also known
    as dark mode) using the color scheme mixin. The mixin is effective when the user
    is browsing with *dark mode* turned on in their browser or operating system. The
    color scheme mixin is currently not used by Bootstrap 5, but is still made available
    for us to use if we want to. In the next minor version of Bootstrap 5, v5.3.0,
    Bootstrap will have support for *dark mode*, and then the mixin will probably
    be used across various elements of the Sass code. Until then, we will create our
    own dark color theme for *dark mode*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for the mixin looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap/scss/mixins/_color-scheme.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we pass the name of the color theme (which in this case is
    *dark*) to the mixin and then all the CSS rules inside of it. Those rules are
    then placed inside a media query, and the name is used as the value for the media
    feature `prefers-color-scheme: #{$name}`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now use the mixin to create a dark color theme for our website. Inside
    of the mixin, we will add various CSS rules to target the elements where we want
    the color to change. Basically, we want the light colors to be dark and the dark
    colors to be light. Our code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/website/scss/_custom-styles.scss line 22-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code, we are first defining some base colors
    for the `<body>` element. Then we’re overwriting the background color utilities
    for light and dark colors using the `!important` rule since utility classes by
    default have the `!important` rule. Finally, we’re overwriting those components
    that have a light background color or dark text color.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dark color theme can be seen in all detail when viewing our updated website
    (the `website` folder in the code for this chapter) in a browser, and here’s a
    screenshot of the Home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Home page of the website with the dark color theme ](img/Figure_10.01_B17143(a).jpg)![Figure
    10.1 – Home page of the website with the dark color theme ](img/Figure_10.01_B17143(b).jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Home page of the website with the dark color theme
  prefs: []
  type: TYPE_NORMAL
- en: You might want to experiment with other dark and light colors for the dark color
    theme, but this is the method to use.
  prefs: []
  type: TYPE_NORMAL
- en: Gradients
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we will see how we can use various gradient mixins. Depending
    on the specific gradient mixin, various arguments can be specified, including
    color, degree, angle, and stop. In our example, we will just use the default mixin
    arguments along with some color utilities to better see these gradients.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the HTML for this example, we have a number of `<div>` elements with some
    sizing and color utilities added. Notice that we have added a background color
    to the first and last example since those gradients are white by default. We also
    add the name of the mixin as a class and as the text of the `<div>` element, and
    that class will be used in our Sass code. First, here’s the HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/mixins/gradients/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: In our Sass code, we will first set the global option `$enable-gradients` to
    `true`, which is required to be able to use the `gradient-bg` mixin. Instead,
    it’s also possible to use the `.bg-gradient` class on an element without the need
    to enable the global option for gradients. But since this section is about using
    mixins, we will use the mixin version of this gradient.
  prefs: []
  type: TYPE_NORMAL
- en: 'After enabling the global option for gradients, we will use the before-mentioned
    classes as CSS selectors in our Sass code and include the various gradient mixins:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/mixins/gradients/scss/style.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: 'The various gradients look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Examples of all the gradient mixins ](img/Figure_10.02_B17143.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Examples of all the gradient mixins
  prefs: []
  type: TYPE_NORMAL
- en: Using Bootstrap 5 Sass functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap 5 contains various Sass functions, and most of them are placed in
    the `_functions.scss` file. Some of these functions are used to evaluate the source
    code or manipulate Sass maps, but in this section, we will focus on the more useful
    color functions. There are a number of different color functions in Bootstrap
    5, and we will now see examples of how we can use some of those in our own Sass
    code. We won’t use any of these functions for our website but instead, look at
    some isolated examples.
  prefs: []
  type: TYPE_NORMAL
- en: Tint color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `tint-color()` function increases the lightness of a color by mixing it
    with white using the color mix function of Sass. You specify the `$color` and
    how much you want it to lighten, defined as the `$weight`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the function looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap/scss/_functions.scss line 205-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s an example of how to tint the `$primary` color by `25%`:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/functions/scss/style.scss line 4-6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting CSS will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/functions/css/style.css
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can see what this looks like in the browser, shown together with
    the `$primary` color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Example of the tint-color function used with the primary color
    ](img/Figure_10.03_B17143.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Example of the tint-color function used with the primary color
  prefs: []
  type: TYPE_NORMAL
- en: Shade color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `shade-color()` function increases the darkness of a color by mixing it
    with black using the color mix function of Sass. You specify the `$color` and
    how much you want it to darken, defined as the `$weight`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the function looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap/scss/_functions.scss line 210-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s an example of how to shade the `$primary` color by `25%`:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/functions/scss/style.scss line 7-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting CSS will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/functions/css/style.css
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can see what this looks like in the browser, shown together with
    the `$primary` color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Example of the shade-color function used with the primary color
    ](img/Figure_10.04_B17143.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Example of the shade-color function used with the primary color
  prefs: []
  type: TYPE_NORMAL
- en: Shift color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `shift-color()` function is a combination of the tint and shade color functions.
    If the `$weight` is positive, the `$color` will be shaded, else it will be tinted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the function looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap/scss/_functions.scss line 215-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s an example of how to shift the `$primary` color by `25%` and `-25%`
    respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/functions/scss/style.scss line 10-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting CSS will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/functions/css/style.css
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can see what this looks like in the browser, shown together with
    the `$primary` color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Example of the shift-color function used with the primary color
    ](img/Figure_10.05_B17143.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Example of the shift-color function used with the primary color
  prefs: []
  type: TYPE_NORMAL
- en: Color contrast
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `color-contrast()` function returns a contrast color (by default, either
    the `$black` or `$white` color) based on a specified base color with regards to
    accessibility standards. This is useful when looping through a map of colors,
    where you want to assure that, for example, the text color has the right color
    contrast ratio in relation to the background color specified in the map. We now
    want to see how we can do just that: generate a contrast color for each color
    in the `$theme-colors` map. Here’s the Sass code we will use to generate classes
    using the names of the colors in the map prefixed with `.contrast-color-`:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/functions/scss/style.scss line 17-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: 'This will then generate the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/functions/css/style.css
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: In the CSS, we can see that either the contrast color `#fff` (white) or `#000`
    (black) has been selected for each color in the `$theme-colors` map when using
    the `color-contrast()` function to ensure a high-enough color contrast ratio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can see what this looks like in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Example of the color-contrast function used with the theme
    colors ](img/Figure_10.06_B17143.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Example of the color-contrast function used with the theme colors
  prefs: []
  type: TYPE_NORMAL
- en: We have now seen how to use some of Bootstrap 5’s color functions with Sass.
    Next up, we will take a look at how to extend Bootstrap 5 classes for semantic
    HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Bootstrap 5 classes for semantic HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using Bootstrap 5, you can end up adding a lot of classes to your markup,
    which will make it hard to swap out the Bootstrap 5 styles with your own set of
    styles, should you wish to do that sometime in the future. Instead, you can choose
    to only use semantic HTML elements, while still using the Bootstrap 5 styling.
    Your HTML can have no classes at all or only the classes you choose (and the naming
    of these classes as well). So, the structure of the HTML and the (optional) classes
    can be anything you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand why this might be desirable, we will consider the Bootstrap 5
    CSS rulesets as two different things:'
  prefs: []
  type: TYPE_NORMAL
- en: A set of styling rules (the CSS declaration blocks)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A vocabulary for these styling rules (the selectors)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want the benefits of the styling rules, but we don’t want to rely on its
    vocabulary, which is the specific Bootstrap 5 classes. We can achieve this by
    using semantic HTML on our page and extending the Bootstrap 5 classes with Sass
    instead of using them directly in the markup.
  prefs: []
  type: TYPE_NORMAL
- en: It’s a big task to apply this method to all the HTML in our website, so instead,
    we will simply see an example of how this works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this simple layout created the normal way using Bootstrap 5 classes:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/semantic-extend/default/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will remove all the Bootstrap 5 classes and only rely on semantic HTML
    elements:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/semantic-extend/extended-classes/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: 'Now there’s no evidence of Bootstrap 5 in our markup. To still benefit from
    the Bootstrap 5 styling, we need to extend the Bootstrap 5 classes using the `@extend`
    rule of Sass, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/semantic-extend/extended-classes/scss/style.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: We will now see the same visual result in the browser. The markup has been changed,
    but the visual style remains the same.
  prefs: []
  type: TYPE_NORMAL
- en: Semantic HTML with Bootstrap 5
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that it is completely possible to use semantic HTML elements
    together with the Bootstrap 5 classes since these classes can be used for any
    HTML element you want. The method described in this section is intended for use
    with semantic HTML without any classes or only with the classes (and the naming
    of these classes) we want.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Bootstrap 5 classes to create custom components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how we can extend existing Bootstrap 5 classes
    using the `@extend` rule of Sass. With this method, it will be possible to create
    the same UI elements, but with less HTML code, which is better for readability.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use this method for three of our UI elements in our website: the **Page**
    title global module, the blockquote in the **Reviews** section of the **Product**
    page, and the bottom border of the **Summary** section of the **Cart** page.'
  prefs: []
  type: TYPE_NORMAL
- en: The Page title global module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Page title global module is used on all pages except for the **Home** page
    and **Product** page. The visual style of this module looks like the jumbotron
    component found in previous versions of Bootstrap. We will now extend the Bootstrap
    5 classes being used by the Page title global module to make the markup simpler.
    We will use the name *jumbotron* for this custom component.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our HTML for the new custom component, we have to keep a parent element
    (`.jumbotron`), so that we can give the component a background color spanning
    the full width, and then restrain the actual content within a child element (`.jumbotron-heading`)
    by extending the `.container` class there:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/website/shop.xhtml line 67-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: 'In our style sheet, we can now extend all the classes like so:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/website/scss/_custom-styles.scss line 53-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE485]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: Blockquote in the Reviews section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `quote` for this custom component.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our HTML for the new custom component, we could have just extended the classes
    being used by the icon, and then kept the parent `.blockquote` class. But we want
    to make this an alternative component to the default blockquote element, and that’s
    why we will also extend the `.blockquote` class on the parent, so that we can
    give it a new name:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/website/product.xhtml line 307-310
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE499]'
  prefs: []
  type: TYPE_PRE
- en: 'In our style sheet, we can now extend all the classes like so:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/website/scss/_custom-styles.scss line 61-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE500]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE501]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE502]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE503]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE504]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE505]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE506]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE507]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE508]'
  prefs: []
  type: TYPE_PRE
- en: Border in the Summary section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `summary-border` for this custom component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated HTML code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/website/cart.xhtml line 271
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE509]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE510]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE511]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE512]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE513]'
  prefs: []
  type: TYPE_PRE
- en: 'In our style sheet, we can now extend all the classes like so:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/website/scss/_custom-styles.scss line 69-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE514]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE515]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE516]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE517]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE518]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE519]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE520]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE521]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE522]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE523]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE524]'
  prefs: []
  type: TYPE_PRE
- en: Important rote about the @extend rule
  prefs: []
  type: TYPE_NORMAL
- en: The `@extend` rule of Sass is becoming less popular and many recommend not using
    it. The reason is that it will alter the source order and create unwanted groupings
    of the CSS. Even though it might reduce the CSS file size, it might end up being
    bad for network performance. This discussion will quickly become technical and
    lengthy, so if you want to learn more, I encourage you to google “Sass extend
    performance” or similar. The `@placeholder` and `@mixin` rules of Sass might be
    better to achieve the same things, but when you don’t want to alter the source
    code (which we don’t want when using Bootstrap 5, as explained earlier in this
    book), then the method described here is viable.
  prefs: []
  type: TYPE_NORMAL
- en: We have now learned how to extend Bootstrap 5 classes to create custom components.
    Next up, we will see how we can create a custom component in another way using
    Bootstrap 5 variables, mixins, and functions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom component using Bootstrap 5 variables, mixins, and functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we saw how we could extend existing Bootstrap 5 classes
    using the `@extend` rule of Sass to create a custom component. In this section,
    we will see how we can create a custom component with Sass using the approach
    recommended by the team behind Bootstrap. This approach first of all entails reusing
    as many Bootstrap variables, mixins, and functions as possible, so that the custom
    component will be affected by any customization of the global options and Bootstrap
    variables. Secondly, the component will be based on a base class that groups as
    many shared properties as possible, and then a range of modifier classes that
    group individual styles together.
  prefs: []
  type: TYPE_NORMAL
- en: 'The custom component that we’re going to create is a timeline component, and
    it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7 – The custom timeline component ](img/Figure_10.07_B17143.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – The custom timeline component
  prefs: []
  type: TYPE_NORMAL
- en: In the screenshot, we see the base class being used, but we will also create
    modifier classes for contextual color variants and responsive horizontal variants.
    For the timeline component, we’re using an unordered list with a number of list
    items inside. We’re using the class `.timeline` for the parent element and the
    class `.timeline-item` for the list items inside. Inside each list item, we then
    have an element with the class `.timeline-time` for the time of each event and
    a paragraph with the class `.timeline-text` for the description of each event.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML for this custom component looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/custom-component/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE525]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE526]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE527]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE528]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE529]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE530]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE531]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE532]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE533]'
  prefs: []
  type: TYPE_PRE
- en: In our Sass code, we first import the Bootstrap 5 files, and then we define
    the CSS rules using as many Bootstrap 5 variables and mixins as possible, so our
    component will be affected by any customization we might use elsewhere in our
    Sass code. We’re using Bootstrap 5 variables for spacing, borders, colors, and
    font weight, and we’re using mixins to create an unstyled list and to add a shadow
    if the global option for shadows (`$enable-shadows`) is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Sass code for our custom component is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/custom-component/scss/style.scss line 1-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE534]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE535]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE536]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE537]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE538]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE539]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE540]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE541]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE542]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE543]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE544]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE545]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE546]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE547]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE548]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE549]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE550]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE551]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE552]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE553]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE554]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE555]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE556]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE557]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE558]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE559]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE560]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE561]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE562]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE563]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE564]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE565]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE566]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE567]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE568]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE569]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE570]'
  prefs: []
  type: TYPE_PRE
- en: Creating contextual color variants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we will create contextual color variants for our component. We want the
    component to have a range of modifier classes that can be added to individual
    timeline items, which will then set the color of the following three items:'
  prefs: []
  type: TYPE_NORMAL
- en: The text color of the `.timeline-time` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The border color of the `.timeline-item` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The border color of the `::before` pseudo-element of the `.timeline-item` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To generate the various modifier classes for the contextual color variants,
    we will use a Sass loop to loop through the `$theme-colors` map. In that loop,
    the key is assigned to the `$state` variable and the value is assigned to the
    `$value` variable. The `$state` variable is then used to generate the various
    classes, while the `$value` variable is used to add the color to the different
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Sass code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/custom-component/scss/style.scss line 42-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE571]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE572]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE573]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE574]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE575]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE576]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE577]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE578]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE579]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE580]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE581]'
  prefs: []
  type: TYPE_PRE
- en: 'Using this method, we will generate modifier classes for each theme color,
    such as, for example, the `.timeline-item-primary` modifier class for the `$primary`
    color. These modifier classes will then be added to our HTML in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/custom-component/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE582]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE583]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE584]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE585]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE586]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE587]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE588]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE589]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE590]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE591]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a screenshot of what the different contextual color variants look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.8 – The custom timeline component with the contextual color variants
    ](img/Figure_10.08_B17143.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – The custom timeline component with the contextual color variants
  prefs: []
  type: TYPE_NORMAL
- en: Creating responsive horizontal variants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we will create responsive horizontal variants for our component. We want
    the component to have a range of modifier classes that can be added to the parent
    element, which will then define at what breakpoint the component will be displayed
    in the horizontal version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a screenshot of what the horizontal version looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.9 – The custom timeline component in the horizontal version ](img/Figure_10.09_B17143.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – The custom timeline component in the horizontal version
  prefs: []
  type: TYPE_NORMAL
- en: To generate the various modifier classes for the responsive horizontal variants,
    we will use a Sass loop to loop through the `$grid-breakpoints` map. In that loop,
    the key is assigned to the `$breakpoint` variable and is then first used as an
    argument for the `media-breakpoint-up()` mixin. Inside the media query, the `$breakpoint`
    variable is used as an argument for the `breakpoint-infix()` function to generate
    a value for the `$infix` variable, which is then used to generate the various
    class names with the correct breakpoint infix (`-sm`, `-md`, `-lg`, `-xl`, or
    `-xxl`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Sass code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/custom-component/scss/style.scss line 56-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE592]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE593]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE594]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE595]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE596]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE597]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE598]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE599]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE600]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE601]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE602]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE603]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE604]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE605]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE606]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE607]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE608]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE609]'
  prefs: []
  type: TYPE_PRE
- en: Using this method, we will generate modifier classes for each breakpoint, such
    as, for example, the `.timeline-horizontal-sm` modifier class for the `sm` breakpoint.
    Notice that we will also generate the modifier class `.timeline-horizontal`, which
    will display the component in the horizontal version for all screen sizes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The modifier classes can be added to our HTML in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/custom-component/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE610]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE611]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE612]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE613]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE614]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE615]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE616]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE617]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE618]'
  prefs: []
  type: TYPE_PRE
- en: When viewing this example in a browser, you can see how the different timeline
    components turn into horizontal versions at various breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have seen how to create a custom component using the approach
    recommended by the team behind Bootstrap. We have created a timeline component,
    but the method can be used to create any kind of custom component that you want.
  prefs: []
  type: TYPE_NORMAL
- en: Using Bootstrap 5 CSS custom properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap 5 includes many CSS custom properties in its compiled CSS file (`bootstrap/dist/css/bootstrap.css`).
    This gives us global access to values for colors, typography, and borders, as
    well as local access to various values for most components and some utilities
    when the Bootstrap 5 CSS is loaded. With these CSS custom properties, we can do
    customization without having to recompile the Sass code using a CSS preprocessor.
  prefs: []
  type: TYPE_NORMAL
- en: CSS custom properties or CSS variables?
  prefs: []
  type: TYPE_NORMAL
- en: CSS custom properties are also often referred to as CSS variables. This is also
    the way the Bootstrap team refers to them in the official documentation, but in
    this chapter, I will refer to them as CSS custom properties, to better distinguish
    them from Sass variables.
  prefs: []
  type: TYPE_NORMAL
- en: Groups of CSS custom properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Bootstrap 5, there are three major groups of CSS custom properties:'
  prefs: []
  type: TYPE_NORMAL
- en: Root CSS custom properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component CSS custom properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utility CSS custom properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Root CSS custom properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The root CSS custom properties are added to the `:root` pseudo-class, which
    is equal to the `<html>` element in an HTML document. This placement gives us
    global access to them from all other HTML elements on our page. They are located
    before all other code in the compiled Bootstrap 5 CSS (`bootstrap/dist/css/bootstrap.css`).
  prefs: []
  type: TYPE_NORMAL
- en: The root custom properties are generated from the `_root.scss` file. The first
    part of the file generates CSS custom properties for various colors by using a
    Sass loop for the `$colors`, `$grays`, `$theme-colors`, and `$theme-colors-rgb`
    map as well as a few other CSS custom properties. The next part of the file generates
    CSS custom properties for various typography styles, such as the font stacks and
    the base styles for the `<body>` element, as well as a CSS custom property for
    the default `$gradient`. The last part of the file generates CSS custom properties
    for borders and the border radius. Most of the CSS custom properties for typography
    are used by the `_reboot.scss` file to style the `<body>` element, and the CSS
    custom properties for borders and the border radius are used for generating border
    and border radius utilities and within a few components. Finally, the CSS custom
    properties for colors are simply made globally available to use for customization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of how to change the primary, secondary, and success color
    by overriding the following CSS custom properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE619]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE620]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE621]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE622]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE623]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE624]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE625]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE626]'
  prefs: []
  type: TYPE_PRE
- en: This should be placed somewhere after the compiled Bootstrap 5 code to work.
    The example has not been implemented on our website but is just shown here as
    an example of how to use the root CSS custom properties.
  prefs: []
  type: TYPE_NORMAL
- en: Component CSS custom properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The component CSS custom properties are locally scoped to the individual components
    of Bootstrap 5\. Since they are local, they can only be accessed by the element
    where they are defined and not globally like the root custom properties. All components,
    except the scrollspy and close button components, have CSS custom properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a partial `.scss` file for a component, the technique of using Sass variables
    and CSS custom properties is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: CSS custom properties are added to the parent (or main) class of the component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sass variables from `_variables.scss` are assigned as values to the CSS custom
    properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS custom properties are used as values for the regular CSS properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s the source code of the `badge` component that shows this technique (comments
    have been removed):'
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap/scss/_badge.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE627]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE628]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE629]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE630]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE631]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE632]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE633]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE634]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE635]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE636]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE637]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE638]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE639]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE640]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE641]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE642]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE643]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE644]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE645]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE646]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE647]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE648]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE649]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE650]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s the compiled CSS for that component:'
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap/dist/css/bootstrap.css line 4809-4829
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE651]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE652]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE653]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE654]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE655]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE656]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE657]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE658]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE659]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE660]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE661]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE662]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE663]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE664]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE665]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE666]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE667]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE668]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE669]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE670]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE671]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE672]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the component has six different CSS custom properties, which
    are not used out of the box. Instead, they are available to us for customizing
    this component. We will make use of that by increasing the horizontal and vertical
    padding with the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/website/scss/_custom-styles.scss line 74-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE673]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE674]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE675]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE676]'
  prefs: []
  type: TYPE_PRE
- en: When we have compiled our CSS, we will now see these CSS custom property overrides
    taking effect with increased padding on the badge component.
  prefs: []
  type: TYPE_NORMAL
- en: Utility CSS custom properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The utility CSS custom properties are defined for the background, color, and
    border utilities, and they are locally scoped like the component CSS custom properties.
    Using these CSS custom properties, we can, for example, control the alpha transparency
    value of `rgba()` colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take the background utility as an example, the `.bg-primary` utility
    has the following CSS styles:'
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap/dist/css/bootstrap.css line 8402-8405
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE677]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE678]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE679]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE680]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE681]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the utility has the `--bs-bg-opacity: 1` CSS custom property,
    which is used by the `background-color` property to specify the `a` part of the
    `rgba()` color function. We can now add, for example, the class `.bg-opacity-25`
    or `.bg-opacity-50` to the same element to change the opacity from `1` to `0.25`
    or `0.5`. If we want the opacity to be somewhere in between, we can overwrite
    the CSS custom property, for example, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE682]'
  prefs: []
  type: TYPE_PRE
- en: Limitations of CSS custom properties for customization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can do powerful customization with CSS custom properties. However, you
    can’t just replace the usage of Sass variables in all situations. As an example
    of this, let’s consider the global styling for border radiuses. These are initially
    defined as six different Sass variables in the `_variables.scss` file:'
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap/scss/_variables.scss line 495-500
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE683]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE684]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE685]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE686]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE687]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE688]'
  prefs: []
  type: TYPE_PRE
- en: 'These Sass variables are then used to generate the CSS custom properties for
    border radius in the `_root.scss` file like so:'
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap/scss/_root.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE689]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE690]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE691]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE692]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE693]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE694]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now use the compiled Bootstrap 5 CSS and we want to change the border
    radius of buttons, we can target the `.btn` in our own CSS and override the CSS
    custom property for border radius like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE695]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE696]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE697]'
  prefs: []
  type: TYPE_PRE
- en: 'The limitation here is that we can’t define the `$border-radius` Sass variable,
    which is used across many components, using a CSS custom property. So, in our
    example, the border radius of button elements will change, but not the border
    radius of input elements, even though they use the same border radius value in
    the Sass code:'
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap/scss/_variables.scss line 774 and 835
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE698]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE699]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, this is a limitation. So, even though customization with CSS
    custom properties is powerful and we don’t need to use a CSS preprocessor, we
    can’t do the same kinds of customizations as we can using Sass. Nonetheless, we
    will now take a look at a few more examples of how we can use CSS custom properties
    for customization.
  prefs: []
  type: TYPE_NORMAL
- en: The dark color theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We previously saw how to create styles for a dark color theme using the `color-scheme`
    mixin and color variables. It’s also possible to create the same dark color theme
    styles using a media query and CSS custom properties. The necessary CSS code for
    this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/website/css/darkmode.css
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE700]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE701]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE702]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE703]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE704]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE705]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE706]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE707]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE708]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE709]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE710]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE711]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE712]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE713]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE714]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE715]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE716]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE717]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE718]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE719]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE720]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE721]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE722]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE723]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE724]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE725]'
  prefs: []
  type: TYPE_PRE
- en: 'To use it, you simply include the `darkmode.css` file in the `<head>` somewhere
    after the compiled Bootstrap 5 CSS file; for example, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE726]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE727]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE728]'
  prefs: []
  type: TYPE_PRE
- en: Since we have already created the dark color theme for our website with Sass,
    we will keep that and not update our code to use the `darkmode.css` file, but
    it’s included in the `css` folder for you to use if you want to. If you choose
    to use it, remember to remove the styling for the dark color theme in the `_custom-styles.scss`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Breadcrumb
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We previously changed the breadcrumb divider by overriding the `$breadcrumb-divider`
    variable in the `_default-variable-overrides.scss` file. We can use the `--bs-breadcrumb-divider`
    CSS custom property for this instead since the Sass variable is actually just
    a fallback to the CSS custom property.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this update to our website, we will first remove our Sass customization
    for the `breadcrumb` divider:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/website/scss/_default-variable-overrides.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE729]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE730]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead, we will now use the CSS custom property by assigning a value to it
    in an inline style on the `<nav>` element wrapping the breadcrumb component on
    the **Shop** and **Product** pages, which are the only places we’re using that
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/website/shop.xhtml line 216-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE731]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE732]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE733]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE734]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE735]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE736]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE737]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE738]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE739]'
  prefs: []
  type: TYPE_PRE
- en: We won’t see any visual change in the browser, which means that we have successfully
    updated our code.
  prefs: []
  type: TYPE_NORMAL
- en: Helper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We previously added a new ratio helper class with the aspect ratio `5x3` by
    creating a `$custom-ratio` map and merging it with the default `$aspect-ratios`
    map. This required several lines of code at the end of our `_variable-value-using-variable.scss`
    file. We can use the `--bs-aspect-ratio` CSS custom property for this instead
    since the Sass code for the ratio helper is already using the values in the `$aspect-ratios`
    map to set the value of that CSS custom property.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this update to our website, we will first remove our Sass customization
    for the ratio helper:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/website/scss/_variable-value-using-variable.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE740]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE741]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE742]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE743]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE744]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE745]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE746]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead, we will now use the CSS custom property by assigning a value to it
    in an inline style on the ratio helper wrapping the `<iframe>` with the Google
    Maps map on the **Contact** page, which is the only place we’re using the ratio
    helper:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/website/contact.xhtml line 177-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE747]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE748]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE749]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE750]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE751]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE752]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE753]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE754]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE755]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE756]'
  prefs: []
  type: TYPE_PRE
- en: To keep it short and simple, we’re using the value `60%`, which is simply the
    result of `calc(3 / 5 * 100%)`. The aspect ratio will now stay the same when we
    view the page with the updated code in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Prefix for CSS custom properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, all Bootstrap 5 CSS custom properties are prefixed with `bs-` (the
    double hyphen `--` in front of the prefix `bs-` is how you declare a CSS custom
    property, and this can’t be omitted). Should you wish to change this prefix, it
    can be done by overriding the `$prefix` variable defined on line 357 in the `_variables.scss`
    file. The default value for this variable is `bs-`.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated variable for the CSS custom property prefix
  prefs: []
  type: TYPE_NORMAL
- en: The variable to specify the CSS custom property prefix used to be `$variable-prefix`,
    but from version v5.2.0 of Bootstrap, this will be deprecated and replaced by
    the shorter `$prefix`. So, in this current version, v5.2.0, both variables are
    found in the code.
  prefs: []
  type: TYPE_NORMAL
- en: Using the RFS Sass plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RFS is officially described as a “unit resizing engine” that “automates responsive
    resizing.” In other words, RFS is a collection of Sass mixins and functions for
    calculating automated responsive CSS values based on the width of the viewport.
    Being an abbreviation for *Responsive Font Sizes*, it was originally developed
    for font resizing, but it’s now capable of resizing almost any value for any CSS
    property with units. RFS can be downloaded from its official website at GitHub
    at [github.com/twbs/rfs/](http://github.com/twbs/rfs/) or through NPM with the
    command `npm install rfs`. As you can see from the GitHub URL, the repository
    lives side by side with Bootstrap, since RFS is a side project from the team behind
    Bootstrap. In fact, RFS comes packaged with Bootstrap 5 as the file `_rfs.scss`
    in the `vendor` folder, and it’s used for resizing font sizes. This is most apparent
    in headings. RFS is enabled by default by the global option `$enable-rfs` and
    can therefore also be disabled by setting that variable to `false`, as we saw
    in [*Chapter 4*](B17143_04_epub.xhtml#_idTextAnchor079), *Bootstrap 5 Global Options
    and Colors*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for RFS is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE757]'
  prefs: []
  type: TYPE_PRE
- en: '`[max-value]` is the value you would like for the specified `[property]` on
    large screens. RFS will use this value when the width of the viewport is `1200px`
    or larger (so from the `xl` breakpoint and up). Below that, the value will dynamically
    scale in relation to the width of the viewport, until it reaches the base value
    of `1.25rem`, after which it will no longer scale. These two options can be customized
    using the `$rfs-breakpoint` and `$rfs-base-value` variables along with other options.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also the following shorthand mixins for font size, padding, and margin
    we can use, so we don’t need to specify the property explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap/scss/vendor/_rfs.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE758]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE759]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE760]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE761]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE762]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE763]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE764]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE765]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE766]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE767]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE768]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE769]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE770]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE771]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE772]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE773]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE774]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE775]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE776]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE777]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE778]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE779]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE780]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE781]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE782]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE783]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE784]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE785]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE786]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE787]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE788]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE789]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE790]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE791]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s see an example where we’re using RFS to set the padding of a box.
    In the HTML, we first have a box using RFS for padding and then another box using
    a spacing utility for padding:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/rfs/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE792]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE793]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE794]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE795]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE796]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE797]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE798]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE799]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE800]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE801]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE802]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE803]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE804]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE805]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE806]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE807]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE808]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE809]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE810]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE811]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE812]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE813]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in our Sass, we first import Bootstrap 5 and then use the shorthand mixin
    for padding on our `.box` class like so:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/rfs/scss/style.scss
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE814]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE815]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE816]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE817]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE818]'
  prefs: []
  type: TYPE_PRE
- en: We’re using the value `3rem`, which is the same value that’s used by the `.p-5`
    class on the first box. In that way, it’s easy to see what difference the RFS
    makes. Following are two screenshots showing the difference, and I also suggest
    that you view the example in a browser, where you can better see the automatic
    calculations done by RFS when resizing the width of the browser.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.10 – Viewed on a small device (576px): calculated value is being
    used for padding ](img/Figure_10.10_B17143.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.10 – Viewed on a small device (576px): calculated value is being
    used for padding'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.11 – Viewed on an extra large device (1200px): the max value is
    being used for padding ](img/Figure_10.11_B17143.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.11 – Viewed on an extra large device (1200px): the max value is being
    used for padding'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have had a look at various advanced Sass and CSS features
    related to Bootstrap 5\. We first saw how we could use various Bootstrap 5 mixins
    and functions and how to use the extend feature for various purposes. We then
    learned about the recommended approach to creating custom components using the
    Bootstrap 5 variables, mixins, and functions. After that, we saw how to use the
    Bootstrap 5 CSS custom properties to create a dark color theme and to customize
    a component and a helper. Finally, we learned how to use Bootstrap’s side project,
    RFS, to calculate automated responsive CSS values.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a closer look at the JavaScript features of
    Bootstrap 5.
  prefs: []
  type: TYPE_NORMAL
