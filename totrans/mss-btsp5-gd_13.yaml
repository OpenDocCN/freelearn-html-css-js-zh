- en: '*Chapter 10*: Using Bootstrap 5 with Advanced Sass and CSS Features'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 10 章*：使用 Bootstrap 5 和高级 Sass 及 CSS 功能'
- en: In this chapter, we will look at advanced Sass and CSS features related to Bootstrap
    5\. In the previous chapters, we customized the look and feel of the website,
    but this time we will primarily change the way we write our code without any effect
    on the look and feel. And in addition to that, we will look at various other features
    through some isolated examples.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨与 Bootstrap 5 相关的高级 Sass 和 CSS 功能。在前几章中，我们定制了网站的外观和感觉，但这次我们将主要改变编写代码的方式，而不会影响外观和感觉。此外，我们还将通过一些独立的示例来查看各种其他功能。
- en: We will first see how we can use various Bootstrap 5 Sass mixins to write our
    code in different ways, and after that, we will see some examples of the Bootstrap
    5 Sass functions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将了解如何使用各种 Bootstrap 5 Sass 混合以不同的方式编写代码，之后，我们将看到一些 Bootstrap 5 Sass 函数的示例。
- en: Then we will see how we can use the extend feature of Sass for semantic HTML
    and to create custom components.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将看到如何利用 Sass 的扩展功能来处理语义化 HTML 并创建自定义组件。
- en: After that, we will learn about the best – and recommended – approach to creating
    custom components using the Bootstrap 5 variables, mixins, and functions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将了解创建自定义组件的最佳和推荐方法，使用 Bootstrap 5 变量、混合和函数。
- en: Towards the end of the chapter, we will see how we can take advantage of the
    CSS custom properties that come with Bootstrap 5 to create a dark color theme
    and customize a component and a helper.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的末尾，我们将看到如何利用 Bootstrap 5 带来的 CSS 自定义属性来创建深色主题，并定制组件和辅助工具。
- en: Finally, we will look at Bootstrap’s side project, RFS, and learn how to use
    it for calculating automated responsive CSS values.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将探讨 Bootstrap 的侧项目 RFS，并学习如何使用它来计算自动响应式 CSS 值。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Using Bootstrap 5 Sass mixins
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Bootstrap 5 Sass 混合
- en: Using Bootstrap 5 Sass functions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Bootstrap 5 Sass 函数
- en: Extending Bootstrap 5 classes for semantic HTML
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展 Bootstrap 5 类以实现语义化 HTML
- en: Extending Bootstrap 5 classes to create custom components
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展 Bootstrap 5 类以创建自定义组件
- en: Creating a custom component using Bootstrap 5 variables, mixins, and functions
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Bootstrap 5 变量、混合和函数创建自定义组件
- en: Using Bootstrap 5 CSS custom properties
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Bootstrap 5 CSS 自定义属性
- en: Using the RFS Sass plugin
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 RFS Sass 插件
- en: As mentioned previously, for some of these topics we will update parts of our
    code for the website, while for other topics we will only see isolated examples
    related to that topic.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，对于这些主题中的某些，我们将更新网站的部分代码，而对于其他主题，我们只会看到与该主题相关的独立示例。
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To preview the examples, you will need a code editor and a browser. The source
    code for all code examples can be found here: [https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide](https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了预览这些示例，您需要一个代码编辑器和浏览器。所有代码示例的源代码都可以在这里找到：[https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide](https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide)
- en: 'To compile Sass to CSS, you will need one of the following:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将 Sass 编译为 CSS，您需要以下之一：
- en: '**Node.js**, if you prefer a **command-line interface** (**CLI**) using Terminal
    (Mac) or Command Prompt (Windows)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js**，如果您更喜欢使用终端（Mac）或命令提示符（Windows）的**命令行界面**（**CLI**）'
- en: '**Scout-App**, if you prefer a **graphical user interface** (**GUI**)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Scout-App**，如果您更喜欢**图形用户界面**（**GUI**）'
- en: '**Visual Studio Code**, if you prefer to use an extension from the Visual Studio
    Code Marketplace'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**，如果您更喜欢使用 Visual Studio Code 市场上的扩展'
- en: All these approaches are explained in [*Chapter 2*](B17143_02_epub.xhtml#_idTextAnchor033)*,
    Using and Compiling Sass*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些方法都在[*第 2 章*](B17143_02_epub.xhtml#_idTextAnchor033)*，使用和编译 Sass*中进行了解释。
- en: Using Bootstrap 5 Sass mixins
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Bootstrap 5 Sass 混合
- en: Bootstrap 5 contains many Sass mixins. Some of them are used by other parts
    of Bootstrap 5, while a few of them are not. All of them can be used in your own
    Sass code as well. In this section, we will first get an overview of the various
    mixins contained in Bootstrap 5, what they are used for, and how they relate to
    other Bootstrap 5 code. Then we will see different examples of how to use some
    of these mixins.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 5 包含许多 Sass 混合。其中一些被 Bootstrap 5 的其他部分使用，而少数则没有。所有这些都可以在您的 Sass 代码中使用。在本节中，我们将首先概述
    Bootstrap 5 中包含的各种混合，它们的作用以及它们如何与其他 Bootstrap 5 代码相关。然后，我们将看到如何使用这些混合的一些不同示例。
- en: Mixin overview
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合概述
- en: 'In the `mixins` folder, we have a total of 25 files, which are all Sass partials.
    Here’s an overview of the files with comments about which elements (components,
    helpers, or other) of Bootstrap 5 are using these mixins, if any:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mixins`文件夹中，我们总共有25个文件，这些都是Sass部分。以下是这些文件的概述，包括关于Bootstrap 5中哪些元素（组件、助手或其他）使用了这些混入（如果有的话）的注释：
- en: bootstrap/scss/mixins
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: bootstrap/scss/mixins
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We will now see how we can group some of these mixins in three different ways
    depending on their usage.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到如何根据它们的用法以三种不同的方式将这些混入分组。
- en: Mixins depending on global options
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖于全局选项的混入
- en: 'Some mixins depend on the global options that we learned about in [*Chapter
    4*](B17143_04_epub.xhtml#_idTextAnchor079)*, Bootstrap 5 Global Options and Colors*.
    So, these mixins will only return code if the specific option is enabled:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一些混入（mixins）依赖于我们在[*第4章*](B17143_04_epub.xhtml#_idTextAnchor079)中学习到的全局选项，即Bootstrap
    5全局选项和颜色。因此，只有当特定选项被启用时，这些混入才会返回代码：
- en: '[PRE25]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Mixins that are not used
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未使用的混入
- en: 'Some mixins are actually not used by other Bootstrap 5 code. We will see what
    some of these mixins can be used for later in this section:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一些混入实际上没有被其他Bootstrap 5代码使用。我们将在本节稍后看到一些这些混入的用途：
- en: '[PRE32]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Mixins used for variants
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于变体的混入
- en: 'Some mixins are used to create different variations of primarily Bootstrap
    5 components. This could be variations for contextual color, size, and breakpoint-specific
    behavior:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一些混入用于创建Bootstrap 5组件的不同变体。这可能是针对上下文颜色、大小和断点特定行为的变体：
- en: '[PRE35]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Examples
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: We will now see a few examples of how we can use some of the mixins in our own
    code. We will not update our website with these mixins but instead, see some standalone
    examples.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将看到一些示例，展示我们如何在我们的代码中使用一些混入。我们不会使用这些混入更新我们的网站，而是查看一些独立的示例。
- en: Responsive grid system
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 响应式网格系统
- en: In this example, we will create a responsive grid system, including a container,
    using various mixins.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将创建一个响应式网格系统，包括一个容器，使用各种混入。
- en: 'For this example, we have the following semantic HTML using only default HTML
    elements and no classes:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此示例，我们使用了以下仅使用默认HTML元素且不包含类的语义HTML：
- en: part-3/chapter-10/examples/mixins/responsive-grid-system/index.xhtml
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/mixins/responsive-grid-system/index.xhtml
- en: '[PRE40]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: We will now first add a container to the `<body>` element. When using a mixin
    for this, it will create a fluid container, and this is what we will use in our
    example. It requires some more custom code to create the same behavior as the
    default `.container` class with different `max-width` instances across breakpoints.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们首先将一个容器添加到`<body>`元素中。当使用混入时，它将创建一个流体容器，这就是我们在示例中将使用的。它需要一些额外的自定义代码来创建与默认`.container`类在不同断点上的不同`max-width`实例相同的行为。
- en: After adding the container, we will create a simple responsive grid using the
    `<main>` element as the row and the `<nav>`, `<article>`, and `<aside>` elements
    as columns. We won’t add any mixins to the `<header>` and `<footer>`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加容器后，我们将使用`<main>`元素作为行和`<nav>`、`<article>`和`<aside>`元素作为列创建一个简单的响应式网格。我们不会向`<header>`和`<footer>`添加任何混入。
- en: 'The necessary Sass code for this example is the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例所需的Sass代码如下：
- en: part-3/chapter-10/examples/mixins/responsive-grid-system/scss/style.scss
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/mixins/responsive-grid-system/scss/style.scss
- en: '[PRE59]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: When this example is viewed in a browser, we will see that the layout of the
    page is now using a container and a responsive grid system.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个示例在浏览器中查看时，我们将看到页面的布局现在正在使用一个容器和一个响应式网格系统。
- en: Media queries for breakpoints
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 断点媒体查询
- en: In this example, we will take a closer look at mixins for media queries for
    breakpoints. In the `_breakpoints.scss` file, we will find four mixins and four
    functions, where three of the functions are primarily used by those mixins and
    one, `breakpoint-infix()`, is used by various components in other files. For now,
    we will focus on the mixins.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将更详细地查看用于断点的媒体查询混入。在`_breakpoints.scss`文件中，我们将找到四个混入和四个函数，其中三个函数主要被这些混入使用，一个函数`breakpoint-infix()`被其他文件中的各种组件使用。现在，我们将专注于混入。
- en: 'Here’s an overview of the various mixins for media queries for breakpoints
    together with a short description of what they do:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是各种断点媒体查询混入的概述，以及它们所做简短描述：
- en: '[PRE85]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: For viewport sizes with the minimum breakpoint width
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于具有最小断点宽度的视口大小
- en: Breakpoint specified by the `$name` argument
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由`$name`参数指定的断点
- en: The content block passed to the mixin will be applied to the specified breakpoint
    width and wider
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递给混入的内容块将被应用于指定的断点宽度及其更宽的范围
- en: No media query for the smallest breakpoint
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于最小的断点没有媒体查询
- en: '[PRE86]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: For viewport sizes with the maximum breakpoint width
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于最大断点宽度的视口大小
- en: Breakpoint specified by the `$name` argument
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 `$name` 参数指定的断点
- en: The content block passed to the mixin will be applied to the specified breakpoint
    width and narrower
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递给混入函数的内容块将应用于指定的断点宽度和更窄的宽度
- en: '[PRE87]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: For viewport sizes that span multiple breakpoint widths
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于跨越多个断点宽度的视口大小
- en: Breakpoints specified by the `$lower` and `$upper` arguments
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 `$lower` 和 `$upper` 参数指定的断点
- en: The content block passed to the mixin will be applied between the specified
    lower and upper breakpoint widths
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递给混入函数的内容块将应用于指定的下限和上限断点宽度之间
- en: '[PRE88]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: For viewport sizes between the minimum and maximum breakpoint widths
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于介于最小和最大断点宽度之间的视口大小
- en: Breakpoint specified by the `$name` argument
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 `$name` 参数指定的断点
- en: The content block passed to the mixin will be applied between the specified
    breakpoint’s minimum and maximum widths only
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递给混入函数的内容块将仅在指定的断点最小和最大宽度之间应用
- en: The `$breakpoints` argument is an optional argument with the default value `$grid-breakpoints`.
    This means that it will use the breakpoint widths defined in the `$grid-breakpoints`
    map.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`$breakpoints` 参数是一个可选参数，默认值为 `$grid-breakpoints`。这意味着它将使用 `$grid-breakpoints`
    映射中定义的断点宽度。'
- en: 'To see these mixins in action, here’s an example that initially hides some
    elements and then displays them with the use of the different mixins. First, here’s
    the HTML for the example, where we use the classes `.up`, `.down`, `.between`,
    and `.only`, which will be used as selectors in our Sass:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这些混入函数的实际效果，这里有一个示例，它最初隐藏一些元素，然后使用不同的混入函数显示它们。首先，这是示例的 HTML 代码，我们使用了 `.up`、`.down`、`.between`
    和 `.only` 类，这些类将作为我们的 Sass 中的选择器使用：
- en: part-3/chapter-10/examples/mixins/media-queries-for-breakpoints/index.xhtml
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/mixins/media-queries-for-breakpoints/index.xhtml
- en: '[PRE89]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'And here’s the Sass code, where we initially hide all elements and then display
    them using the various mixins:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Sass 代码，其中我们最初隐藏所有元素，然后使用各种混入函数显示它们：
- en: part-3/chapter-10/examples/mixins/media-queries-for-breakpoints/scss/style.scss
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/mixins/media-queries-for-breakpoints/scss/style.scss
- en: '[PRE110]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: If you look at this example in a browser and resize the window, you will then
    see that the `<div>` elements are only visible at certain breakpoints.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个浏览器中查看这个示例并调整窗口大小，你会看到 `<div>` 元素仅在特定的断点可见。
- en: Helpers
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 辅助函数
- en: 'In this example, we will use two of the helper mixins. We will use the visually
    hidden mixin for a heading element and the text truncation mixin for a paragraph
    element. The HTML code for this example is as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将使用两个辅助混入函数。我们将使用视觉隐藏混入函数用于标题元素，以及文本截断混入函数用于段落元素。此示例的 HTML 代码如下：
- en: part-3/chapter-10/examples/mixins/helpers/index.xhtml
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/mixins/helpers/index.xhtml
- en: '[PRE136]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'The Sass code used for this example is as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 用于此示例的 Sass 代码如下所示：
- en: part-3/chapter-10/examples/mixins/helpers/scss/style.scss
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/mixins/helpers/scss/style.scss
- en: '[PRE158]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: When this example is viewed in a browser, the heading element will now be hidden
    from the screen, but visible to screen readers, while the paragraph will have
    its text on one line only with the text being truncated at the end followed by
    an ellipsis.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个示例在浏览器中查看时，标题元素现在将不会在屏幕上显示，但对屏幕阅读器可见，而段落将只有一行文本，文本在末尾被截断，后面跟着省略号。
- en: Dark color theme
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 深色主题
- en: In this example, we will see how we can define a dark color theme (also known
    as dark mode) using the color scheme mixin. The mixin is effective when the user
    is browsing with *dark mode* turned on in their browser or operating system. The
    color scheme mixin is currently not used by Bootstrap 5, but is still made available
    for us to use if we want to. In the next minor version of Bootstrap 5, v5.3.0,
    Bootstrap will have support for *dark mode*, and then the mixin will probably
    be used across various elements of the Sass code. Until then, we will create our
    own dark color theme for *dark mode*.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将看到如何使用颜色方案混入函数定义深色主题（也称为暗模式）。当用户在浏览器或操作系统中开启 *暗模式* 浏览时，混入函数是有效的。颜色方案混入函数目前在
    Bootstrap 5 中尚未使用，但仍然提供给我们使用。在 Bootstrap 5 的下一个小版本 v5.3.0 中，Bootstrap 将支持 *暗模式*，届时混入函数可能会在
    Sass 代码的各个元素中使用。在此之前，我们将为 *暗模式* 创建自己的深色主题。
- en: 'The source code for the mixin looks like this:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 混入函数的源代码如下所示：
- en: bootstrap/scss/mixins/_color-scheme.scss
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: bootstrap/scss/mixins/_color-scheme.scss
- en: '[PRE166]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'As you can see, we pass the name of the color theme (which in this case is
    *dark*) to the mixin and then all the CSS rules inside of it. Those rules are
    then placed inside a media query, and the name is used as the value for the media
    feature `prefers-color-scheme: #{$name}`.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '如您所见，我们向混入传递了颜色主题的名称（在这种情况下是*dark*），然后是它内部的全部CSS规则。然后，这些规则被放置在一个媒体查询中，名称被用作媒体特性`prefers-color-scheme:
    #{$name}`的值。'
- en: 'We will now use the mixin to create a dark color theme for our website. Inside
    of the mixin, we will add various CSS rules to target the elements where we want
    the color to change. Basically, we want the light colors to be dark and the dark
    colors to be light. Our code looks like this:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用混入为我们的网站创建一个深色主题。在混入内部，我们将添加各种CSS规则以针对我们想要颜色变化的元素。基本上，我们希望亮色变暗，暗色变亮。我们的代码如下所示：
- en: part-3/chapter-10/website/scss/_custom-styles.scss line 22-51
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/website/scss/_custom-styles.scss 行 22-51
- en: '[PRE171]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: As you can see in the preceding code, we are first defining some base colors
    for the `<body>` element. Then we’re overwriting the background color utilities
    for light and dark colors using the `!important` rule since utility classes by
    default have the `!important` rule. Finally, we’re overwriting those components
    that have a light background color or dark text color.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码所示，我们首先为`<body>`元素定义了一些基础颜色。然后，我们使用`!important`规则覆盖了亮色和暗色的背景颜色工具，因为默认情况下工具类具有`!important`规则。最后，我们覆盖了具有亮色背景或暗色文字颜色的组件。
- en: 'The dark color theme can be seen in all detail when viewing our updated website
    (the `website` folder in the code for this chapter) in a browser, and here’s a
    screenshot of the Home page:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 深色主题在浏览器中查看我们更新的网站（本章代码中的`website`文件夹）时可以清晰地看到所有细节，以下是主页的截图：
- en: '![Figure 10.1 – Home page of the website with the dark color theme ](img/Figure_10.01_B17143(a).jpg)![Figure
    10.1 – Home page of the website with the dark color theme ](img/Figure_10.01_B17143(b).jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – 带有深色主题的网站主页](img/Figure_10.01_B17143(a).jpg)![图10.1 – 带有深色主题的网站主页](img/Figure_10.01_B17143(b).jpg)'
- en: Figure 10.1 – Home page of the website with the dark color theme
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 带有深色主题的网站主页
- en: You might want to experiment with other dark and light colors for the dark color
    theme, but this is the method to use.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想尝试其他亮色和暗色来为深色主题进行实验，但这是使用的方法。
- en: Gradients
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 渐变
- en: In this example, we will see how we can use various gradient mixins. Depending
    on the specific gradient mixin, various arguments can be specified, including
    color, degree, angle, and stop. In our example, we will just use the default mixin
    arguments along with some color utilities to better see these gradients.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将看到如何使用各种渐变混入。根据具体的渐变混入，可以指定各种参数，包括颜色、程度、角度和停止点。在我们的例子中，我们将仅使用默认混入参数和一些颜色工具，以便更好地查看这些渐变。
- en: 'In the HTML for this example, we have a number of `<div>` elements with some
    sizing and color utilities added. Notice that we have added a background color
    to the first and last example since those gradients are white by default. We also
    add the name of the mixin as a class and as the text of the `<div>` element, and
    that class will be used in our Sass code. First, here’s the HTML code:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例的HTML中，我们有一些添加了大小和颜色工具的`<div>`元素。请注意，我们已将背景颜色添加到第一个和最后一个示例中，因为那些渐变默认是白色的。我们还添加了混入的名称作为类和`<div>`元素的文本，这个类将在我们的Sass代码中使用。首先，这是HTML代码：
- en: part-3/chapter-10/examples/mixins/gradients/index.xhtml
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/mixins/gradients/index.xhtml
- en: '[PRE201]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: In our Sass code, we will first set the global option `$enable-gradients` to
    `true`, which is required to be able to use the `gradient-bg` mixin. Instead,
    it’s also possible to use the `.bg-gradient` class on an element without the need
    to enable the global option for gradients. But since this section is about using
    mixins, we will use the mixin version of this gradient.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Sass代码中，我们首先将全局选项`$enable-gradients`设置为`true`，这是使用`gradient-bg`混入所必需的。另外，也可以在元素上使用`.bg-gradient`类而不需要启用渐变的全局选项。但鉴于本节是关于使用混入，我们将使用这个渐变的混入版本。
- en: 'After enabling the global option for gradients, we will use the before-mentioned
    classes as CSS selectors in our Sass code and include the various gradient mixins:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 启用渐变的全局选项后，我们将在Sass代码中使用前面提到的类作为CSS选择器，并包含各种渐变混入：
- en: part-3/chapter-10/examples/mixins/gradients/scss/style.scss
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/mixins/gradients/scss/style.scss
- en: '[PRE227]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: 'The various gradients look like this:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 各种渐变看起来是这样的：
- en: '![Figure 10.2 – Examples of all the gradient mixins ](img/Figure_10.02_B17143.jpg)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – 所有渐变混入示例](img/Figure_10.02_B17143.jpg)'
- en: Figure 10.2 – Examples of all the gradient mixins
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 所有渐变混入示例
- en: Using Bootstrap 5 Sass functions
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Bootstrap 5 Sass函数
- en: Bootstrap 5 contains various Sass functions, and most of them are placed in
    the `_functions.scss` file. Some of these functions are used to evaluate the source
    code or manipulate Sass maps, but in this section, we will focus on the more useful
    color functions. There are a number of different color functions in Bootstrap
    5, and we will now see examples of how we can use some of those in our own Sass
    code. We won’t use any of these functions for our website but instead, look at
    some isolated examples.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 5 包含各种Sass函数，其中大多数都放在`_functions.scss`文件中。其中一些函数用于评估源代码或操作Sass映射，但在这个部分，我们将关注更有用的颜色函数。Bootstrap
    5 中有多个不同的颜色函数，现在我们将看到如何在我们自己的Sass代码中使用其中的一些示例。我们不会在我们的网站上使用这些函数，而是查看一些独立的示例。
- en: Tint color
  id: totrans-352
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 着色颜色
- en: The `tint-color()` function increases the lightness of a color by mixing it
    with white using the color mix function of Sass. You specify the `$color` and
    how much you want it to lighten, defined as the `$weight`.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`tint-color()`函数通过使用Sass的颜色混合函数将颜色与白色混合来增加颜色的亮度。你指定`$color`以及你想要它变亮多少，定义为`$weight`。'
- en: 'The code for the function looks like this:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的代码如下：
- en: bootstrap/scss/_functions.scss line 205-208
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: bootstrap/scss/_functions.scss 行 205-208
- en: '[PRE254]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'Here’s an example of how to tint the `$primary` color by `25%`:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何将`$primary`颜色着色`25%`的示例：
- en: part-3/chapter-10/examples/functions/scss/style.scss line 4-6
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/functions/scss/style.scss 行 4-6
- en: '[PRE257]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: 'The resulting CSS will be as follows:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的CSS将如下所示：
- en: part-3/chapter-10/examples/functions/css/style.css
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/functions/css/style.css
- en: '[PRE260]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: 'Here, you can see what this looks like in the browser, shown together with
    the `$primary` color:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到在浏览器中的效果，它与`$primary`颜色一起显示：
- en: '![Figure 10.3 – Example of the tint-color function used with the primary color
    ](img/Figure_10.03_B17143.jpg)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3 – 使用主颜色着色颜色函数的示例](img/Figure_10.03_B17143.jpg)'
- en: Figure 10.3 – Example of the tint-color function used with the primary color
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 使用主颜色着色颜色函数的示例
- en: Shade color
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阴影颜色
- en: The `shade-color()` function increases the darkness of a color by mixing it
    with black using the color mix function of Sass. You specify the `$color` and
    how much you want it to darken, defined as the `$weight`.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`shade-color()`函数通过使用Sass的颜色混合函数将颜色与黑色混合来增加颜色的暗度。你指定`$color`以及你想要它变暗多少，定义为`$weight`。'
- en: 'The code for the function looks like this:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的代码如下：
- en: bootstrap/scss/_functions.scss line 210-213
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: bootstrap/scss/_functions.scss 行 210-213
- en: '[PRE263]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: 'Here’s an example of how to shade the `$primary` color by `25%`:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何将`$primary`颜色阴影`25%`的示例：
- en: part-3/chapter-10/examples/functions/scss/style.scss line 7-9
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/functions/scss/style.scss 行 7-9
- en: '[PRE266]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: 'The resulting CSS will be as follows:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的CSS将如下所示：
- en: part-3/chapter-10/examples/functions/css/style.css
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/functions/css/style.css
- en: '[PRE269]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: 'Here, you can see what this looks like in the browser, shown together with
    the `$primary` color:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到在浏览器中的效果，它与`$primary`颜色一起显示：
- en: '![Figure 10.4 – Example of the shade-color function used with the primary color
    ](img/Figure_10.04_B17143.jpg)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4 – 使用主颜色阴影颜色函数的示例](img/Figure_10.04_B17143.jpg)'
- en: Figure 10.4 – Example of the shade-color function used with the primary color
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – 使用主颜色阴影颜色函数的示例
- en: Shift color
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整颜色
- en: The `shift-color()` function is a combination of the tint and shade color functions.
    If the `$weight` is positive, the `$color` will be shaded, else it will be tinted.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`shift-color()`函数是着色和阴影颜色函数的组合。如果`$weight`为正，则`$color`将被阴影化，否则将被着色。'
- en: 'The code for the function looks like this:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的代码如下：
- en: bootstrap/scss/_functions.scss line 215-218
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: bootstrap/scss/_functions.scss 行 215-218
- en: '[PRE272]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: 'Here’s an example of how to shift the `$primary` color by `25%` and `-25%`
    respectively:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何将`$primary`颜色分别调整`25%`和`-25%`的示例：
- en: part-3/chapter-10/examples/functions/scss/style.scss line 10-15
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/functions/scss/style.scss 行 10-15
- en: '[PRE276]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: 'The resulting CSS will be as follows:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的CSS将如下所示：
- en: part-3/chapter-10/examples/functions/css/style.css
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/functions/css/style.css
- en: '[PRE282]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: 'Here, you can see what this looks like in the browser, shown together with
    the `$primary` color:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到在浏览器中的效果，它与`$primary`颜色一起显示：
- en: '![Figure 10.5 – Example of the shift-color function used with the primary color
    ](img/Figure_10.05_B17143.jpg)'
  id: totrans-417
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.5 – 使用主色调的 shift-color 函数示例](img/Figure_10.05_B17143.jpg)'
- en: Figure 10.5 – Example of the shift-color function used with the primary color
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – 使用主色调的 shift-color 函数示例
- en: Color contrast
  id: totrans-419
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 颜色对比度
- en: 'The `color-contrast()` function returns a contrast color (by default, either
    the `$black` or `$white` color) based on a specified base color with regards to
    accessibility standards. This is useful when looping through a map of colors,
    where you want to assure that, for example, the text color has the right color
    contrast ratio in relation to the background color specified in the map. We now
    want to see how we can do just that: generate a contrast color for each color
    in the `$theme-colors` map. Here’s the Sass code we will use to generate classes
    using the names of the colors in the map prefixed with `.contrast-color-`:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '`color-contrast()` 函数根据指定的基本颜色（默认情况下为 `$black` 或 `$white` 颜色）返回一个对比色，考虑到可访问性标准。这在遍历颜色映射时很有用，其中你想要确保，例如，文本颜色与映射中指定的背景颜色具有正确的颜色对比度比率。我们现在想看看我们如何做到这一点：为
    `$theme-colors` 映射中的每个颜色生成一个对比色。以下是我们将使用以生成类的 Sass 代码，使用映射中颜色的名称，并以前缀 `.contrast-color-`
    开头：'
- en: part-3/chapter-10/examples/functions/scss/style.scss line 17-21
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/functions/scss/style.scss 行 17-21
- en: '[PRE288]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: 'This will then generate the following CSS:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下 CSS：
- en: part-3/chapter-10/examples/functions/css/style.css
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/functions/css/style.css
- en: '[PRE293]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: In the CSS, we can see that either the contrast color `#fff` (white) or `#000`
    (black) has been selected for each color in the `$theme-colors` map when using
    the `color-contrast()` function to ensure a high-enough color contrast ratio.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSS 中，我们可以看到当使用 `color-contrast()` 函数时，在 `$theme-colors` 映射中为每个颜色选择了对比色 `#fff`（白色）或
    `#000`（黑色），以确保足够的颜色对比度比率。
- en: 'Here, you can see what this looks like in the browser:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到它在浏览器中的样子：
- en: '![Figure 10.6 – Example of the color-contrast function used with the theme
    colors ](img/Figure_10.06_B17143.jpg)'
  id: totrans-439
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.6 – 使用主题颜色的 color-contrast 函数示例](img/Figure_10.06_B17143.jpg)'
- en: Figure 10.6 – Example of the color-contrast function used with the theme colors
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6 – 使用主题颜色的 color-contrast 函数示例
- en: We have now seen how to use some of Bootstrap 5’s color functions with Sass.
    Next up, we will take a look at how to extend Bootstrap 5 classes for semantic
    HTML.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用一些 Bootstrap 5 的颜色函数与 Sass。接下来，我们将看看如何为语义 HTML 扩展 Bootstrap 5 类。
- en: Extending Bootstrap 5 classes for semantic HTML
  id: totrans-442
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为语义 HTML 扩展 Bootstrap 5 类
- en: When using Bootstrap 5, you can end up adding a lot of classes to your markup,
    which will make it hard to swap out the Bootstrap 5 styles with your own set of
    styles, should you wish to do that sometime in the future. Instead, you can choose
    to only use semantic HTML elements, while still using the Bootstrap 5 styling.
    Your HTML can have no classes at all or only the classes you choose (and the naming
    of these classes as well). So, the structure of the HTML and the (optional) classes
    can be anything you want.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Bootstrap 5 时，你可能会在你的标记中添加很多类，这会使你在将来想要替换 Bootstrap 5 样式时很难。相反，你可以选择只使用语义
    HTML 元素，同时仍然使用 Bootstrap 5 样式。你的 HTML 可以没有任何类，或者只有你选择的类（以及这些类的命名）。因此，HTML 的结构和（可选）类可以是任何你想要的。
- en: 'To understand why this might be desirable, we will consider the Bootstrap 5
    CSS rulesets as two different things:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解为什么这可能是有吸引力的，我们将考虑 Bootstrap 5 CSS 规则集为两件不同的事情：
- en: A set of styling rules (the CSS declaration blocks)
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组样式规则（CSS 声明块）
- en: A vocabulary for these styling rules (the selectors)
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些样式规则的词汇（选择器）
- en: We want the benefits of the styling rules, but we don’t want to rely on its
    vocabulary, which is the specific Bootstrap 5 classes. We can achieve this by
    using semantic HTML on our page and extending the Bootstrap 5 classes with Sass
    instead of using them directly in the markup.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望获得样式规则的好处，但不想依赖于其词汇，即特定的 Bootstrap 5 类。我们可以通过在我们的页面上使用语义 HTML 并用 Sass 扩展
    Bootstrap 5 类来代替直接在标记中使用它们来实现这一点。
- en: It’s a big task to apply this method to all the HTML in our website, so instead,
    we will simply see an example of how this works.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 将这种方法应用于我们网站上的所有 HTML 是一项艰巨的任务，所以我们只是简单地看看这个例子是如何工作的。
- en: 'Consider this simple layout created the normal way using Bootstrap 5 classes:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个使用 Bootstrap 5 类以常规方式创建的简单布局：
- en: part-3/chapter-10/examples/semantic-extend/default/index.xhtml
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/semantic-extend/default/index.xhtml
- en: '[PRE301]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: 'Now, we will remove all the Bootstrap 5 classes and only rely on semantic HTML
    elements:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将移除所有Bootstrap 5类，并仅依赖于语义HTML元素：
- en: part-3/chapter-10/examples/semantic-extend/extended-classes/index.xhtml
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/semantic-extend/extended-classes/index.xhtml
- en: '[PRE364]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: 'Now there’s no evidence of Bootstrap 5 in our markup. To still benefit from
    the Bootstrap 5 styling, we need to extend the Bootstrap 5 classes using the `@extend`
    rule of Sass, like so:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的标记中没有Bootstrap 5的证据。为了仍然从Bootstrap 5的样式中获得好处，我们需要使用Sass的`@extend`规则扩展Bootstrap
    5类，如下所示：
- en: part-3/chapter-10/examples/semantic-extend/extended-classes/scss/style.scss
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/semantic-extend/extended-classes/scss/style.scss
- en: '[PRE419]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: '[PRE427]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '[PRE429]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '[PRE434]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '[PRE451]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: '[PRE452]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: '[PRE454]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '[PRE459]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: '[PRE460]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '[PRE461]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '[PRE462]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: '[PRE463]'
  id: totrans-617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: '[PRE464]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: '[PRE465]'
  id: totrans-619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: '[PRE466]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '[PRE467]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: We will now see the same visual result in the browser. The markup has been changed,
    but the visual style remains the same.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在浏览器中看到相同的视觉结果。标记已经更改，但视觉风格保持不变。
- en: Semantic HTML with Bootstrap 5
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 带有Bootstrap 5的语义HTML
- en: It should be noted that it is completely possible to use semantic HTML elements
    together with the Bootstrap 5 classes since these classes can be used for any
    HTML element you want. The method described in this section is intended for use
    with semantic HTML without any classes or only with the classes (and the naming
    of these classes) we want.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，完全有可能将语义HTML元素与Bootstrap 5类一起使用，因为这些类可以用于任何你想要的HTML元素。本节中描述的方法旨在与没有类或仅使用我们想要的类（以及这些类的命名）的语义HTML一起使用。
- en: Extending Bootstrap 5 classes to create custom components
  id: totrans-627
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展Bootstrap 5类以创建自定义组件
- en: In this section, we will see how we can extend existing Bootstrap 5 classes
    using the `@extend` rule of Sass. With this method, it will be possible to create
    the same UI elements, but with less HTML code, which is better for readability.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用Sass的`@extend`规则扩展现有的Bootstrap 5类。使用这种方法，将有可能创建相同的UI元素，但HTML代码更少，这对可读性更好。
- en: 'We will use this method for three of our UI elements in our website: the **Page**
    title global module, the blockquote in the **Reviews** section of the **Product**
    page, and the bottom border of the **Summary** section of the **Cart** page.'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的网站中的三个UI元素上使用此方法：**页面**标题全局模块、**产品**页面中的**评论**部分的blockquote，以及**购物车**页面**摘要**部分的底部边框。
- en: The Page title global module
  id: totrans-630
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面标题全局模块
- en: The Page title global module is used on all pages except for the **Home** page
    and **Product** page. The visual style of this module looks like the jumbotron
    component found in previous versions of Bootstrap. We will now extend the Bootstrap
    5 classes being used by the Page title global module to make the markup simpler.
    We will use the name *jumbotron* for this custom component.
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 页面标题全局模块用于所有页面，除了**主页**和**产品**页面。此模块的视觉风格类似于在Bootstrap的早期版本中找到的jumbotron组件。现在，我们将扩展页面标题全局模块使用的Bootstrap
    5类，以使标记更简单。我们将为此自定义组件使用名称*jumbotron*。
- en: 'In our HTML for the new custom component, we have to keep a parent element
    (`.jumbotron`), so that we can give the component a background color spanning
    the full width, and then restrain the actual content within a child element (`.jumbotron-heading`)
    by extending the `.container` class there:'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们新自定义组件的HTML中，我们必须保留一个父元素（`.jumbotron`），这样我们就可以给组件一个覆盖全宽的背景色，然后通过扩展`.container`类来限制实际内容在子元素（`.jumbotron-heading`）内：
- en: part-3/chapter-10/website/shop.xhtml line 67-69
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/website/shop.xhtml 行 67-69
- en: '[PRE470]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: '[PRE471]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: '[PRE472]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '[PRE473]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: '[PRE474]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: '[PRE475]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: '[PRE476]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: '[PRE477]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: '[PRE478]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: '[PRE479]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: 'In our style sheet, we can now extend all the classes like so:'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的样式表中，我们现在可以扩展所有类，如下所示：
- en: part-3/chapter-10/website/scss/_custom-styles.scss line 53-59
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/website/scss/_custom-styles.scss 行 53-59
- en: '[PRE480]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '[PRE481]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '[PRE482]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: '[PRE483]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE483]'
- en: '[PRE484]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE484]'
- en: '[PRE485]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE485]'
- en: '[PRE486]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE486]'
- en: '[PRE487]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: Blockquote in the Reviews section
  id: totrans-654
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评论部分的Blockquote
- en: In the `quote` for this custom component.
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 在此自定义组件的`quote`中。
- en: 'In our HTML for the new custom component, we could have just extended the classes
    being used by the icon, and then kept the parent `.blockquote` class. But we want
    to make this an alternative component to the default blockquote element, and that’s
    why we will also extend the `.blockquote` class on the parent, so that we can
    give it a new name:'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们新自定义组件的HTML中，我们本可以仅扩展图标使用的类，并保留父`.blockquote`类。但我们要将其作为一个默认的blockquote元素的替代组件，这就是为什么我们还将扩展父`.blockquote`类，这样我们就可以给它一个新的名称：
- en: part-3/chapter-10/website/product.xhtml line 307-310
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/website/product.xhtml 行 307-310
- en: '[PRE488]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: '[PRE489]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: '[PRE490]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: '[PRE491]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: '[PRE492]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: '[PRE493]'
  id: totrans-663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: '[PRE494]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: '[PRE495]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: '[PRE496]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: '[PRE497]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: '[PRE498]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: '[PRE499]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: 'In our style sheet, we can now extend all the classes like so:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的样式表中，我们现在可以扩展所有类，如下所示：
- en: part-3/chapter-10/website/scss/_custom-styles.scss line 61-67
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/website/scss/_custom-styles.scss 行 61-67
- en: '[PRE500]'
  id: totrans-672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: '[PRE501]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: '[PRE502]'
  id: totrans-674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: '[PRE503]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: '[PRE504]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: '[PRE505]'
  id: totrans-677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: '[PRE506]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: '[PRE507]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: '[PRE508]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: Border in the Summary section
  id: totrans-681
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要部分的边框
- en: In the `summary-border` for this custom component.
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated HTML code looks like this:'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/website/cart.xhtml line 271
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE509]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: '[PRE510]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: '[PRE511]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: '[PRE512]'
  id: totrans-688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: '[PRE513]'
  id: totrans-689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: 'In our style sheet, we can now extend all the classes like so:'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/website/scss/_custom-styles.scss line 69-72
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE514]'
  id: totrans-692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: '[PRE515]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: '[PRE516]'
  id: totrans-694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE516]'
- en: '[PRE517]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE517]'
- en: '[PRE518]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE518]'
- en: '[PRE519]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: '[PRE520]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: '[PRE521]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE521]'
- en: '[PRE522]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE522]'
- en: '[PRE523]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE523]'
- en: '[PRE524]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE524]'
- en: Important rote about the @extend rule
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
- en: The `@extend` rule of Sass is becoming less popular and many recommend not using
    it. The reason is that it will alter the source order and create unwanted groupings
    of the CSS. Even though it might reduce the CSS file size, it might end up being
    bad for network performance. This discussion will quickly become technical and
    lengthy, so if you want to learn more, I encourage you to google “Sass extend
    performance” or similar. The `@placeholder` and `@mixin` rules of Sass might be
    better to achieve the same things, but when you don’t want to alter the source
    code (which we don’t want when using Bootstrap 5, as explained earlier in this
    book), then the method described here is viable.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: We have now learned how to extend Bootstrap 5 classes to create custom components.
    Next up, we will see how we can create a custom component in another way using
    Bootstrap 5 variables, mixins, and functions.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom component using Bootstrap 5 variables, mixins, and functions
  id: totrans-706
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we saw how we could extend existing Bootstrap 5 classes
    using the `@extend` rule of Sass to create a custom component. In this section,
    we will see how we can create a custom component with Sass using the approach
    recommended by the team behind Bootstrap. This approach first of all entails reusing
    as many Bootstrap variables, mixins, and functions as possible, so that the custom
    component will be affected by any customization of the global options and Bootstrap
    variables. Secondly, the component will be based on a base class that groups as
    many shared properties as possible, and then a range of modifier classes that
    group individual styles together.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: 'The custom component that we’re going to create is a timeline component, and
    it looks like this:'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7 – The custom timeline component ](img/Figure_10.07_B17143.jpg)'
  id: totrans-709
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – The custom timeline component
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: In the screenshot, we see the base class being used, but we will also create
    modifier classes for contextual color variants and responsive horizontal variants.
    For the timeline component, we’re using an unordered list with a number of list
    items inside. We’re using the class `.timeline` for the parent element and the
    class `.timeline-item` for the list items inside. Inside each list item, we then
    have an element with the class `.timeline-time` for the time of each event and
    a paragraph with the class `.timeline-text` for the description of each event.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML for this custom component looks like this:'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-10/examples/custom-component/index.xhtml
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE525]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE525]'
- en: '[PRE526]'
  id: totrans-715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE526]'
- en: '[PRE527]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE527]'
- en: '[PRE528]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE528]'
- en: '[PRE529]'
  id: totrans-718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE529]'
- en: '[PRE530]'
  id: totrans-719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE530]'
- en: '[PRE531]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE531]'
- en: '[PRE532]'
  id: totrans-721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE532]'
- en: '[PRE533]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE533]'
- en: In our Sass code, we first import the Bootstrap 5 files, and then we define
    the CSS rules using as many Bootstrap 5 variables and mixins as possible, so our
    component will be affected by any customization we might use elsewhere in our
    Sass code. We’re using Bootstrap 5 variables for spacing, borders, colors, and
    font weight, and we’re using mixins to create an unstyled list and to add a shadow
    if the global option for shadows (`$enable-shadows`) is enabled.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 Sass 代码中，我们首先导入 Bootstrap 5 文件，然后尽可能多地使用 Bootstrap 5 变量和混入定义 CSS 规则，这样我们的组件就会受到我们在
    Sass 代码中可能使用的任何自定义的影响。我们使用 Bootstrap 5 变量进行间距、边框、颜色和字体粗细，并使用混入创建无样式的列表，并在全局阴影选项
    (`$enable-shadows`) 启用时添加阴影。
- en: 'The Sass code for our custom component is as follows:'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 我们自定义组件的 Sass 代码如下：
- en: part-3/chapter-10/examples/custom-component/scss/style.scss line 1-40
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/custom-component/scss/style.scss 行 1-40
- en: '[PRE534]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE534]'
- en: '[PRE535]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE535]'
- en: '[PRE536]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE536]'
- en: '[PRE537]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE537]'
- en: '[PRE538]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE538]'
- en: '[PRE539]'
  id: totrans-731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE539]'
- en: '[PRE540]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE540]'
- en: '[PRE541]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE541]'
- en: '[PRE542]'
  id: totrans-734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE542]'
- en: '[PRE543]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE543]'
- en: '[PRE544]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE544]'
- en: '[PRE545]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE545]'
- en: '[PRE546]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE546]'
- en: '[PRE547]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE547]'
- en: '[PRE548]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE548]'
- en: '[PRE549]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE549]'
- en: '[PRE550]'
  id: totrans-742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE550]'
- en: '[PRE551]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE551]'
- en: '[PRE552]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE552]'
- en: '[PRE553]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE553]'
- en: '[PRE554]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE554]'
- en: '[PRE555]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE555]'
- en: '[PRE556]'
  id: totrans-748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE556]'
- en: '[PRE557]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE557]'
- en: '[PRE558]'
  id: totrans-750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE558]'
- en: '[PRE559]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE559]'
- en: '[PRE560]'
  id: totrans-752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE560]'
- en: '[PRE561]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE561]'
- en: '[PRE562]'
  id: totrans-754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE562]'
- en: '[PRE563]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE563]'
- en: '[PRE564]'
  id: totrans-756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE564]'
- en: '[PRE565]'
  id: totrans-757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE565]'
- en: '[PRE566]'
  id: totrans-758
  prefs: []
  type: TYPE_PRE
  zh: '[PRE566]'
- en: '[PRE567]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE567]'
- en: '[PRE568]'
  id: totrans-760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE568]'
- en: '[PRE569]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE569]'
- en: '[PRE570]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE570]'
- en: Creating contextual color variants
  id: totrans-763
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建上下文颜色变体
- en: 'Now, we will create contextual color variants for our component. We want the
    component to have a range of modifier classes that can be added to individual
    timeline items, which will then set the color of the following three items:'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为我们的组件创建上下文颜色变体。我们希望组件能够有一系列修饰类，可以添加到单个时间轴项中，这样就会设置以下三个项目的颜色：
- en: The text color of the `.timeline-time` element
  id: totrans-765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.timeline-time` 元素的文本颜色'
- en: The border color of the `.timeline-item` element
  id: totrans-766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.timeline-item` 元素的边框颜色'
- en: The border color of the `::before` pseudo-element of the `.timeline-item` element
  id: totrans-767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.timeline-item` 元素的 `::before` 伪元素的边框颜色'
- en: To generate the various modifier classes for the contextual color variants,
    we will use a Sass loop to loop through the `$theme-colors` map. In that loop,
    the key is assigned to the `$state` variable and the value is assigned to the
    `$value` variable. The `$state` variable is then used to generate the various
    classes, while the `$value` variable is used to add the color to the different
    elements.
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成上下文颜色变体的各种修饰类，我们将使用 Sass 循环遍历 `$theme-colors` 映射。在循环中，键被分配给 `$state` 变量，值被分配给
    `$value` 变量。然后使用 `$state` 变量生成各种类，而 `$value` 变量用于将颜色添加到不同的元素中。
- en: 'The Sass code looks like this:'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: Sass 代码看起来是这样的：
- en: part-3/chapter-10/examples/custom-component/scss/style.scss line 42-54
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/custom-component/scss/style.scss 行 42-54
- en: '[PRE571]'
  id: totrans-771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE571]'
- en: '[PRE572]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE572]'
- en: '[PRE573]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE573]'
- en: '[PRE574]'
  id: totrans-774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE574]'
- en: '[PRE575]'
  id: totrans-775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE575]'
- en: '[PRE576]'
  id: totrans-776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE576]'
- en: '[PRE577]'
  id: totrans-777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE577]'
- en: '[PRE578]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE578]'
- en: '[PRE579]'
  id: totrans-779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE579]'
- en: '[PRE580]'
  id: totrans-780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE580]'
- en: '[PRE581]'
  id: totrans-781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE581]'
- en: 'Using this method, we will generate modifier classes for each theme color,
    such as, for example, the `.timeline-item-primary` modifier class for the `$primary`
    color. These modifier classes will then be added to our HTML in the following
    way:'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，我们将为每个主题颜色生成修饰类，例如，例如，为 `$primary` 颜色生成 `.timeline-item-primary` 修饰类。然后，这些修饰类将以以下方式添加到我们的
    HTML 中：
- en: part-3/chapter-10/examples/custom-component/index.xhtml
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/custom-component/index.xhtml
- en: '[PRE582]'
  id: totrans-784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE582]'
- en: '[PRE583]'
  id: totrans-785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE583]'
- en: '[PRE584]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE584]'
- en: '[PRE585]'
  id: totrans-787
  prefs: []
  type: TYPE_PRE
  zh: '[PRE585]'
- en: '[PRE586]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE586]'
- en: '[PRE587]'
  id: totrans-789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE587]'
- en: '[PRE588]'
  id: totrans-790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE588]'
- en: '[PRE589]'
  id: totrans-791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE589]'
- en: '[PRE590]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE590]'
- en: '[PRE591]'
  id: totrans-793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE591]'
- en: 'Here’s a screenshot of what the different contextual color variants look like:'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是不同上下文颜色变体的截图：
- en: '![Figure 10.8 – The custom timeline component with the contextual color variants
    ](img/Figure_10.08_B17143.jpg)'
  id: totrans-795
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.8 – 带有上下文颜色变体的自定义时间轴组件](img/Figure_10.08_B17143.jpg)'
- en: Figure 10.8 – The custom timeline component with the contextual color variants
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8 – 带有上下文颜色变体的自定义时间轴组件
- en: Creating responsive horizontal variants
  id: totrans-797
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建响应式水平变体
- en: Now, we will create responsive horizontal variants for our component. We want
    the component to have a range of modifier classes that can be added to the parent
    element, which will then define at what breakpoint the component will be displayed
    in the horizontal version.
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为我们的组件创建响应式水平变体。我们希望组件能够有一系列修饰类，可以添加到父元素中，这样就会定义在什么断点下组件将在水平版本中显示。
- en: 'Here’s a screenshot of what the horizontal version looks like:'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是水平版本的截图：
- en: '![Figure 10.9 – The custom timeline component in the horizontal version ](img/Figure_10.09_B17143.jpg)'
  id: totrans-800
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.9 – 水平版本的自定义时间轴组件](img/Figure_10.09_B17143.jpg)'
- en: Figure 10.9 – The custom timeline component in the horizontal version
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9 – 水平版本的自定义时间轴组件
- en: To generate the various modifier classes for the responsive horizontal variants,
    we will use a Sass loop to loop through the `$grid-breakpoints` map. In that loop,
    the key is assigned to the `$breakpoint` variable and is then first used as an
    argument for the `media-breakpoint-up()` mixin. Inside the media query, the `$breakpoint`
    variable is used as an argument for the `breakpoint-infix()` function to generate
    a value for the `$infix` variable, which is then used to generate the various
    class names with the correct breakpoint infix (`-sm`, `-md`, `-lg`, `-xl`, or
    `-xxl`).
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成响应式水平变体的各种修饰类，我们将使用 Sass 循环遍历 `$grid-breakpoints` 映射。在那个循环中，键被分配给 `$breakpoint`
    变量，然后首先用作 `media-breakpoint-up()` 混合函数的参数。在媒体查询内部，`$breakpoint` 变量用作 `breakpoint-infix()`
    函数的参数以生成 `$infix` 变量的值，然后使用该值生成具有正确断点后缀（`-sm`、`-md`、`-lg`、`-xl` 或 `-xxl`）的各种类名。
- en: 'The Sass code looks like this:'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: Sass 代码如下所示：
- en: part-3/chapter-10/examples/custom-component/scss/style.scss line 56-75
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/custom-component/scss/style.scss 行 56-75
- en: '[PRE592]'
  id: totrans-805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE592]'
- en: '[PRE593]'
  id: totrans-806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE593]'
- en: '[PRE594]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE594]'
- en: '[PRE595]'
  id: totrans-808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE595]'
- en: '[PRE596]'
  id: totrans-809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE596]'
- en: '[PRE597]'
  id: totrans-810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE597]'
- en: '[PRE598]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE598]'
- en: '[PRE599]'
  id: totrans-812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE599]'
- en: '[PRE600]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE600]'
- en: '[PRE601]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE601]'
- en: '[PRE602]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE602]'
- en: '[PRE603]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE603]'
- en: '[PRE604]'
  id: totrans-817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE604]'
- en: '[PRE605]'
  id: totrans-818
  prefs: []
  type: TYPE_PRE
  zh: '[PRE605]'
- en: '[PRE606]'
  id: totrans-819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE606]'
- en: '[PRE607]'
  id: totrans-820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE607]'
- en: '[PRE608]'
  id: totrans-821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE608]'
- en: '[PRE609]'
  id: totrans-822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE609]'
- en: Using this method, we will generate modifier classes for each breakpoint, such
    as, for example, the `.timeline-horizontal-sm` modifier class for the `sm` breakpoint.
    Notice that we will also generate the modifier class `.timeline-horizontal`, which
    will display the component in the horizontal version for all screen sizes.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此方法，我们将为每个断点生成修饰类，例如，例如，为 `sm` 断点生成 `.timeline-horizontal-sm` 修饰类。请注意，我们还将生成
    `.timeline-horizontal` 修饰类，该类将在所有屏幕尺寸下显示组件的水平版本。
- en: 'The modifier classes can be added to our HTML in the following way:'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 修饰类可以通过以下方式添加到我们的 HTML 中：
- en: part-3/chapter-10/examples/custom-component/index.xhtml
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/custom-component/index.xhtml
- en: '[PRE610]'
  id: totrans-826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE610]'
- en: '[PRE611]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE611]'
- en: '[PRE612]'
  id: totrans-828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE612]'
- en: '[PRE613]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE613]'
- en: '[PRE614]'
  id: totrans-830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE614]'
- en: '[PRE615]'
  id: totrans-831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE615]'
- en: '[PRE616]'
  id: totrans-832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE616]'
- en: '[PRE617]'
  id: totrans-833
  prefs: []
  type: TYPE_PRE
  zh: '[PRE617]'
- en: '[PRE618]'
  id: totrans-834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE618]'
- en: When viewing this example in a browser, you can see how the different timeline
    components turn into horizontal versions at various breakpoints.
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看此示例时，您可以看到不同的时间线组件如何在不同的断点处转换为水平版本。
- en: In this section, we have seen how to create a custom component using the approach
    recommended by the team behind Bootstrap. We have created a timeline component,
    but the method can be used to create any kind of custom component that you want.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们看到了如何使用 Bootstrap 背后团队推荐的方法创建自定义组件。我们创建了一个时间线组件，但此方法可以用于创建您想要的任何类型的自定义组件。
- en: Using Bootstrap 5 CSS custom properties
  id: totrans-837
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Bootstrap 5 CSS 自定义属性
- en: Bootstrap 5 includes many CSS custom properties in its compiled CSS file (`bootstrap/dist/css/bootstrap.css`).
    This gives us global access to values for colors, typography, and borders, as
    well as local access to various values for most components and some utilities
    when the Bootstrap 5 CSS is loaded. With these CSS custom properties, we can do
    customization without having to recompile the Sass code using a CSS preprocessor.
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 5 在其编译后的 CSS 文件（`bootstrap/dist/css/bootstrap.css`）中包含了许多 CSS 自定义属性。这使我们能够全局访问颜色、排版和边框的值，以及当加载
    Bootstrap 5 CSS 时，对大多数组件和一些工具的局部访问。使用这些 CSS 自定义属性，我们可以进行自定义，而无需使用 CSS 预处理器重新编译
    Sass 代码。
- en: CSS custom properties or CSS variables?
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 自定义属性或 CSS 变量？
- en: CSS custom properties are also often referred to as CSS variables. This is also
    the way the Bootstrap team refers to them in the official documentation, but in
    this chapter, I will refer to them as CSS custom properties, to better distinguish
    them from Sass variables.
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 自定义属性也常被称为 CSS 变量。这也是 Bootstrap 团队在官方文档中称呼它们的方式，但在此章节中，我将称其为 CSS 自定义属性，以更好地区分它们与
    Sass 变量。
- en: Groups of CSS custom properties
  id: totrans-841
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS 自定义属性组
- en: 'In Bootstrap 5, there are three major groups of CSS custom properties:'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Bootstrap 5 中，CSS 自定义属性分为三大组：
- en: Root CSS custom properties
  id: totrans-843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根 CSS 自定义属性
- en: Component CSS custom properties
  id: totrans-844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件 CSS 自定义属性
- en: Utility CSS custom properties
  id: totrans-845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具 CSS 自定义属性
- en: Root CSS custom properties
  id: totrans-846
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 根 CSS 自定义属性
- en: The root CSS custom properties are added to the `:root` pseudo-class, which
    is equal to the `<html>` element in an HTML document. This placement gives us
    global access to them from all other HTML elements on our page. They are located
    before all other code in the compiled Bootstrap 5 CSS (`bootstrap/dist/css/bootstrap.css`).
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 根 CSS 自定义属性添加到 `:root` 伪类，这相当于 HTML 文档中的 `<html>` 元素。这种放置方式使我们能够从页面上的所有其他 HTML
    元素全局访问它们。它们位于编译后的 Bootstrap 5 CSS (`bootstrap/dist/css/bootstrap.css`) 中的所有其他代码之前。
- en: The root custom properties are generated from the `_root.scss` file. The first
    part of the file generates CSS custom properties for various colors by using a
    Sass loop for the `$colors`, `$grays`, `$theme-colors`, and `$theme-colors-rgb`
    map as well as a few other CSS custom properties. The next part of the file generates
    CSS custom properties for various typography styles, such as the font stacks and
    the base styles for the `<body>` element, as well as a CSS custom property for
    the default `$gradient`. The last part of the file generates CSS custom properties
    for borders and the border radius. Most of the CSS custom properties for typography
    are used by the `_reboot.scss` file to style the `<body>` element, and the CSS
    custom properties for borders and the border radius are used for generating border
    and border radius utilities and within a few components. Finally, the CSS custom
    properties for colors are simply made globally available to use for customization.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 根自定义属性是由 `_root.scss` 文件生成的。文件的前一部分通过使用 `$colors`、`$grays`、`$theme-colors` 和
    `$theme-colors-rgb` 映射以及一些其他 CSS 自定义属性的 Sass 循环来生成各种颜色的 CSS 自定义属性。文件的下一部分生成各种排版样式的
    CSS 自定义属性，例如字体堆栈和 `<body>` 元素的基本样式，以及默认 `$gradient` 的 CSS 自定义属性。文件的最后一部分生成边框和边框半径的
    CSS 自定义属性。大多数排版 CSS 自定义属性由 `_reboot.scss` 文件用于样式化 `<body>` 元素，边框和边框半径的 CSS 自定义属性用于生成边框和边框半径工具以及一些组件中。最后，颜色的
    CSS 自定义属性被简单地全局可用，以便用于自定义。
- en: 'Here’s an example of how to change the primary, secondary, and success color
    by overriding the following CSS custom properties:'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个如何通过覆盖以下 CSS 自定义属性来更改主要、次要和成功颜色的示例：
- en: '[PRE619]'
  id: totrans-850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE619]'
- en: '[PRE620]'
  id: totrans-851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE620]'
- en: '[PRE621]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE621]'
- en: '[PRE622]'
  id: totrans-853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE622]'
- en: '[PRE623]'
  id: totrans-854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE623]'
- en: '[PRE624]'
  id: totrans-855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE624]'
- en: '[PRE625]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE625]'
- en: '[PRE626]'
  id: totrans-857
  prefs: []
  type: TYPE_PRE
  zh: '[PRE626]'
- en: This should be placed somewhere after the compiled Bootstrap 5 code to work.
    The example has not been implemented on our website but is just shown here as
    an example of how to use the root CSS custom properties.
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该放在编译后的 Bootstrap 5 代码之后某处才能工作。示例尚未在我们的网站上实现，这里只是作为一个如何使用根 CSS 自定义属性的示例。
- en: Component CSS custom properties
  id: totrans-859
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组件 CSS 自定义属性
- en: The component CSS custom properties are locally scoped to the individual components
    of Bootstrap 5\. Since they are local, they can only be accessed by the element
    where they are defined and not globally like the root custom properties. All components,
    except the scrollspy and close button components, have CSS custom properties.
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 5 的组件 CSS 自定义属性是局部作用域的，仅限于单个组件。由于它们是局部的，因此只能通过定义它们的元素访问，而不是像根自定义属性那样全局访问。所有组件，除了滚动跟踪和关闭按钮组件，都有
    CSS 自定义属性。
- en: 'In a partial `.scss` file for a component, the technique of using Sass variables
    and CSS custom properties is as follows:'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件的局部 `.scss` 文件中，使用 Sass 变量和 CSS 自定义属性的技巧如下：
- en: CSS custom properties are added to the parent (or main) class of the component
  id: totrans-862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS 自定义属性被添加到组件的父类（或主类）中
- en: Sass variables from `_variables.scss` are assigned as values to the CSS custom
    properties
  id: totrans-863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_variables.scss` 中的 Sass 变量被分配为 CSS 自定义属性的值'
- en: CSS custom properties are used as values for the regular CSS properties
  id: totrans-864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS 自定义属性被用作常规 CSS 属性的值
- en: 'Here’s the source code of the `badge` component that shows this technique (comments
    have been removed):'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是展示这个技巧的 `badge` 组件的源代码（注释已被移除）：
- en: bootstrap/scss/_badge.scss
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: bootstrap/scss/_badge.scss
- en: '[PRE627]'
  id: totrans-867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE627]'
- en: '[PRE628]'
  id: totrans-868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE628]'
- en: '[PRE629]'
  id: totrans-869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE629]'
- en: '[PRE630]'
  id: totrans-870
  prefs: []
  type: TYPE_PRE
  zh: '[PRE630]'
- en: '[PRE631]'
  id: totrans-871
  prefs: []
  type: TYPE_PRE
  zh: '[PRE631]'
- en: '[PRE632]'
  id: totrans-872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE632]'
- en: '[PRE633]'
  id: totrans-873
  prefs: []
  type: TYPE_PRE
  zh: '[PRE633]'
- en: '[PRE634]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE634]'
- en: '[PRE635]'
  id: totrans-875
  prefs: []
  type: TYPE_PRE
  zh: '[PRE635]'
- en: '[PRE636]'
  id: totrans-876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE636]'
- en: '[PRE637]'
  id: totrans-877
  prefs: []
  type: TYPE_PRE
  zh: '[PRE637]'
- en: '[PRE638]'
  id: totrans-878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE638]'
- en: '[PRE639]'
  id: totrans-879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE639]'
- en: '[PRE640]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE640]'
- en: '[PRE641]'
  id: totrans-881
  prefs: []
  type: TYPE_PRE
  zh: '[PRE641]'
- en: '[PRE642]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE642]'
- en: '[PRE643]'
  id: totrans-883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE643]'
- en: '[PRE644]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE644]'
- en: '[PRE645]'
  id: totrans-885
  prefs: []
  type: TYPE_PRE
  zh: '[PRE645]'
- en: '[PRE646]'
  id: totrans-886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE646]'
- en: '[PRE647]'
  id: totrans-887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE647]'
- en: '[PRE648]'
  id: totrans-888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE648]'
- en: '[PRE649]'
  id: totrans-889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE649]'
- en: '[PRE650]'
  id: totrans-890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE650]'
- en: 'And here’s the compiled CSS for that component:'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是这个组件的编译后的 CSS：
- en: bootstrap/dist/css/bootstrap.css line 4809-4829
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: bootstrap/dist/css/bootstrap.css 行 4809-4829
- en: '[PRE651]'
  id: totrans-893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE651]'
- en: '[PRE652]'
  id: totrans-894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE652]'
- en: '[PRE653]'
  id: totrans-895
  prefs: []
  type: TYPE_PRE
  zh: '[PRE653]'
- en: '[PRE654]'
  id: totrans-896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE654]'
- en: '[PRE655]'
  id: totrans-897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE655]'
- en: '[PRE656]'
  id: totrans-898
  prefs: []
  type: TYPE_PRE
  zh: '[PRE656]'
- en: '[PRE657]'
  id: totrans-899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE657]'
- en: '[PRE658]'
  id: totrans-900
  prefs: []
  type: TYPE_PRE
  zh: '[PRE658]'
- en: '[PRE659]'
  id: totrans-901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE659]'
- en: '[PRE660]'
  id: totrans-902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE660]'
- en: '[PRE661]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE661]'
- en: '[PRE662]'
  id: totrans-904
  prefs: []
  type: TYPE_PRE
  zh: '[PRE662]'
- en: '[PRE663]'
  id: totrans-905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE663]'
- en: '[PRE664]'
  id: totrans-906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE664]'
- en: '[PRE665]'
  id: totrans-907
  prefs: []
  type: TYPE_PRE
  zh: '[PRE665]'
- en: '[PRE666]'
  id: totrans-908
  prefs: []
  type: TYPE_PRE
  zh: '[PRE666]'
- en: '[PRE667]'
  id: totrans-909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE667]'
- en: '[PRE668]'
  id: totrans-910
  prefs: []
  type: TYPE_PRE
  zh: '[PRE668]'
- en: '[PRE669]'
  id: totrans-911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE669]'
- en: '[PRE670]'
  id: totrans-912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE670]'
- en: '[PRE671]'
  id: totrans-913
  prefs: []
  type: TYPE_PRE
  zh: '[PRE671]'
- en: '[PRE672]'
  id: totrans-914
  prefs: []
  type: TYPE_PRE
  zh: '[PRE672]'
- en: 'We can see that the component has six different CSS custom properties, which
    are not used out of the box. Instead, they are available to us for customizing
    this component. We will make use of that by increasing the horizontal and vertical
    padding with the following lines of code:'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到该组件有六个不同的 CSS 自定义属性，它们不是默认使用的。相反，它们可供我们自定义此组件使用。我们将通过以下代码行增加水平和垂直填充来利用这一点：
- en: part-3/chapter-10/website/scss/_custom-styles.scss line 74-77
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/website/scss/_custom-styles.scss 行 74-77
- en: '[PRE673]'
  id: totrans-917
  prefs: []
  type: TYPE_PRE
  zh: '[PRE673]'
- en: '[PRE674]'
  id: totrans-918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE674]'
- en: '[PRE675]'
  id: totrans-919
  prefs: []
  type: TYPE_PRE
  zh: '[PRE675]'
- en: '[PRE676]'
  id: totrans-920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE676]'
- en: When we have compiled our CSS, we will now see these CSS custom property overrides
    taking effect with increased padding on the badge component.
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编译了 CSS 后，现在我们将看到这些 CSS 自定义属性覆盖生效，对徽章组件增加了填充。
- en: Utility CSS custom properties
  id: totrans-922
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具 CSS 自定义属性
- en: The utility CSS custom properties are defined for the background, color, and
    border utilities, and they are locally scoped like the component CSS custom properties.
    Using these CSS custom properties, we can, for example, control the alpha transparency
    value of `rgba()` colors.
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 通用CSS自定义属性被定义为背景、颜色和边框工具，并且它们的作用域是局部的，就像组件CSS自定义属性一样。使用这些CSS自定义属性，例如，我们可以控制`rgba()`颜色的alpha透明度值。
- en: 'If we take the background utility as an example, the `.bg-primary` utility
    has the following CSS styles:'
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 以背景工具为例，`.bg-primary`工具具有以下CSS样式：
- en: bootstrap/dist/css/bootstrap.css line 8402-8405
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: bootstrap/dist/css/bootstrap.css 行 8402-8405
- en: '[PRE677]'
  id: totrans-926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE677]'
- en: '[PRE678]'
  id: totrans-927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE678]'
- en: '[PRE679]'
  id: totrans-928
  prefs: []
  type: TYPE_PRE
  zh: '[PRE679]'
- en: '[PRE680]'
  id: totrans-929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE680]'
- en: '[PRE681]'
  id: totrans-930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE681]'
- en: 'We can see that the utility has the `--bs-bg-opacity: 1` CSS custom property,
    which is used by the `background-color` property to specify the `a` part of the
    `rgba()` color function. We can now add, for example, the class `.bg-opacity-25`
    or `.bg-opacity-50` to the same element to change the opacity from `1` to `0.25`
    or `0.5`. If we want the opacity to be somewhere in between, we can overwrite
    the CSS custom property, for example, like so:'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以看到，工具具有`--bs-bg-opacity: 1` CSS自定义属性，该属性被`background-color`属性用来指定`rgba()`颜色函数的`a`部分。现在，例如，我们可以添加`.bg-opacity-25`或`.bg-opacity-50`类到同一个元素上，以将不透明度从`1`改为`0.25`或`0.5`。如果我们想要不透明度在两者之间，我们可以覆盖CSS自定义属性，例如，如下所示：'
- en: HTML
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: HTML
- en: '[PRE682]'
  id: totrans-933
  prefs: []
  type: TYPE_PRE
  zh: '[PRE682]'
- en: Limitations of CSS custom properties for customization
  id: totrans-934
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS自定义属性在定制化方面的局限性
- en: 'You can do powerful customization with CSS custom properties. However, you
    can’t just replace the usage of Sass variables in all situations. As an example
    of this, let’s consider the global styling for border radiuses. These are initially
    defined as six different Sass variables in the `_variables.scss` file:'
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用CSS自定义属性进行强大的定制化。然而，你并不能在所有情况下都替换Sass变量的使用。作为一个例子，让我们考虑全局边框半径的样式。这些最初在`_variables.scss`文件中定义为六个不同的Sass变量：
- en: bootstrap/scss/_variables.scss line 495-500
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: bootstrap/scss/_variables.scss 行 495-500
- en: '[PRE683]'
  id: totrans-937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE683]'
- en: '[PRE684]'
  id: totrans-938
  prefs: []
  type: TYPE_PRE
  zh: '[PRE684]'
- en: '[PRE685]'
  id: totrans-939
  prefs: []
  type: TYPE_PRE
  zh: '[PRE685]'
- en: '[PRE686]'
  id: totrans-940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE686]'
- en: '[PRE687]'
  id: totrans-941
  prefs: []
  type: TYPE_PRE
  zh: '[PRE687]'
- en: '[PRE688]'
  id: totrans-942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE688]'
- en: 'These Sass variables are then used to generate the CSS custom properties for
    border radius in the `_root.scss` file like so:'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 这些Sass变量随后被用于在`_root.scss`文件中生成边框半径的CSS自定义属性，如下所示：
- en: bootstrap/scss/_root.scss
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: bootstrap/scss/_root.scss
- en: '[PRE689]'
  id: totrans-945
  prefs: []
  type: TYPE_PRE
  zh: '[PRE689]'
- en: '[PRE690]'
  id: totrans-946
  prefs: []
  type: TYPE_PRE
  zh: '[PRE690]'
- en: '[PRE691]'
  id: totrans-947
  prefs: []
  type: TYPE_PRE
  zh: '[PRE691]'
- en: '[PRE692]'
  id: totrans-948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE692]'
- en: '[PRE693]'
  id: totrans-949
  prefs: []
  type: TYPE_PRE
  zh: '[PRE693]'
- en: '[PRE694]'
  id: totrans-950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE694]'
- en: 'If we now use the compiled Bootstrap 5 CSS and we want to change the border
    radius of buttons, we can target the `.btn` in our own CSS and override the CSS
    custom property for border radius like so:'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在使用编译后的Bootstrap 5 CSS，并且想要改变按钮的边框半径，我们可以在自己的CSS中针对`.btn`，并像这样覆盖边框半径的CSS自定义属性：
- en: '[PRE695]'
  id: totrans-952
  prefs: []
  type: TYPE_PRE
  zh: '[PRE695]'
- en: '[PRE696]'
  id: totrans-953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE696]'
- en: '[PRE697]'
  id: totrans-954
  prefs: []
  type: TYPE_PRE
  zh: '[PRE697]'
- en: 'The limitation here is that we can’t define the `$border-radius` Sass variable,
    which is used across many components, using a CSS custom property. So, in our
    example, the border radius of button elements will change, but not the border
    radius of input elements, even though they use the same border radius value in
    the Sass code:'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的局限性在于我们无法使用CSS自定义属性定义跨多个组件使用的`$border-radius` Sass变量。因此，在我们的例子中，按钮元素的边框半径会改变，但输入元素的边框半径不会改变，尽管在Sass代码中它们使用相同的边框半径值：
- en: bootstrap/scss/_variables.scss line 774 and 835
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: bootstrap/scss/_variables.scss 行 774 和 835
- en: '[PRE698]'
  id: totrans-957
  prefs: []
  type: TYPE_PRE
  zh: '[PRE698]'
- en: '[PRE699]'
  id: totrans-958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE699]'
- en: As we can see, this is a limitation. So, even though customization with CSS
    custom properties is powerful and we don’t need to use a CSS preprocessor, we
    can’t do the same kinds of customizations as we can using Sass. Nonetheless, we
    will now take a look at a few more examples of how we can use CSS custom properties
    for customization.
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这是一个局限性。因此，尽管使用CSS自定义属性进行定制化非常强大，我们不需要使用CSS预处理器，但我们不能像使用Sass那样进行相同的定制化。尽管如此，我们现在将看看一些更多关于如何使用CSS自定义属性进行定制的例子。
- en: The dark color theme
  id: totrans-960
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深色主题
- en: 'We previously saw how to create styles for a dark color theme using the `color-scheme`
    mixin and color variables. It’s also possible to create the same dark color theme
    styles using a media query and CSS custom properties. The necessary CSS code for
    this is as follows:'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看到了如何使用`color-scheme`混合和颜色变量创建深色主题的样式。同样，也可以使用媒体查询和CSS自定义属性来创建相同的深色主题样式。实现这一功能的必要CSS代码如下：
- en: part-3/chapter-10/website/css/darkmode.css
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/website/css/darkmode.css
- en: '[PRE700]'
  id: totrans-963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE700]'
- en: '[PRE701]'
  id: totrans-964
  prefs: []
  type: TYPE_PRE
  zh: '[PRE701]'
- en: '[PRE702]'
  id: totrans-965
  prefs: []
  type: TYPE_PRE
  zh: '[PRE702]'
- en: '[PRE703]'
  id: totrans-966
  prefs: []
  type: TYPE_PRE
  zh: '[PRE703]'
- en: '[PRE704]'
  id: totrans-967
  prefs: []
  type: TYPE_PRE
  zh: '[PRE704]'
- en: '[PRE705]'
  id: totrans-968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE705]'
- en: '[PRE706]'
  id: totrans-969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE706]'
- en: '[PRE707]'
  id: totrans-970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE707]'
- en: '[PRE708]'
  id: totrans-971
  prefs: []
  type: TYPE_PRE
  zh: '[PRE708]'
- en: '[PRE709]'
  id: totrans-972
  prefs: []
  type: TYPE_PRE
  zh: '[PRE709]'
- en: '[PRE710]'
  id: totrans-973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE710]'
- en: '[PRE711]'
  id: totrans-974
  prefs: []
  type: TYPE_PRE
  zh: '[PRE711]'
- en: '[PRE712]'
  id: totrans-975
  prefs: []
  type: TYPE_PRE
  zh: '[PRE712]'
- en: '[PRE713]'
  id: totrans-976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE713]'
- en: '[PRE714]'
  id: totrans-977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE714]'
- en: '[PRE715]'
  id: totrans-978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE715]'
- en: '[PRE716]'
  id: totrans-979
  prefs: []
  type: TYPE_PRE
  zh: '[PRE716]'
- en: '[PRE717]'
  id: totrans-980
  prefs: []
  type: TYPE_PRE
  zh: '[PRE717]'
- en: '[PRE718]'
  id: totrans-981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE718]'
- en: '[PRE719]'
  id: totrans-982
  prefs: []
  type: TYPE_PRE
  zh: '[PRE719]'
- en: '[PRE720]'
  id: totrans-983
  prefs: []
  type: TYPE_PRE
  zh: '[PRE720]'
- en: '[PRE721]'
  id: totrans-984
  prefs: []
  type: TYPE_PRE
  zh: '[PRE721]'
- en: '[PRE722]'
  id: totrans-985
  prefs: []
  type: TYPE_PRE
  zh: '[PRE722]'
- en: '[PRE723]'
  id: totrans-986
  prefs: []
  type: TYPE_PRE
  zh: '[PRE723]'
- en: '[PRE724]'
  id: totrans-987
  prefs: []
  type: TYPE_PRE
  zh: '[PRE724]'
- en: '[PRE725]'
  id: totrans-988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE725]'
- en: 'To use it, you simply include the `darkmode.css` file in the `<head>` somewhere
    after the compiled Bootstrap 5 CSS file; for example, like this:'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用它，你只需在`<head>`中包含`darkmode.css`文件，位置在编译后的Bootstrap 5 CSS文件之后某处；例如，如下所示：
- en: '[PRE726]'
  id: totrans-990
  prefs: []
  type: TYPE_PRE
  zh: '[PRE726]'
- en: '[PRE727]'
  id: totrans-991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE727]'
- en: '[PRE728]'
  id: totrans-992
  prefs: []
  type: TYPE_PRE
  zh: '[PRE728]'
- en: Since we have already created the dark color theme for our website with Sass,
    we will keep that and not update our code to use the `darkmode.css` file, but
    it’s included in the `css` folder for you to use if you want to. If you choose
    to use it, remember to remove the styling for the dark color theme in the `_custom-styles.scss`
    file.
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经在网站上使用 Sass 创建了深色主题，我们将保留它，而不会更新我们的代码以使用 `darkmode.css` 文件，但如果你需要使用，它已包含在
    `css` 文件夹中。如果你选择使用它，请记住在 `_custom-styles.scss` 文件中移除深色主题的样式。
- en: Breadcrumb
  id: totrans-994
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面包屑导航
- en: We previously changed the breadcrumb divider by overriding the `$breadcrumb-divider`
    variable in the `_default-variable-overrides.scss` file. We can use the `--bs-breadcrumb-divider`
    CSS custom property for this instead since the Sass variable is actually just
    a fallback to the CSS custom property.
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前通过在 `_default-variable-overrides.scss` 文件中覆盖 `$breadcrumb-divider` 变量来更改面包屑分隔符。我们可以使用
    `--bs-breadcrumb-divider` CSS 自定义属性来代替，因为 Sass 变量实际上只是 CSS 自定义属性的回退。
- en: 'To make this update to our website, we will first remove our Sass customization
    for the `breadcrumb` divider:'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将这个更新应用到我们的网站上，我们首先将移除我们对 `breadcrumb` 分隔符的 Sass 定制化：
- en: part-3/chapter-10/website/scss/_default-variable-overrides.scss
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/website/scss/_default-variable-overrides.scss
- en: '[PRE729]'
  id: totrans-998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE729]'
- en: '[PRE730]'
  id: totrans-999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE730]'
- en: 'Instead, we will now use the CSS custom property by assigning a value to it
    in an inline style on the `<nav>` element wrapping the breadcrumb component on
    the **Shop** and **Product** pages, which are the only places we’re using that
    component:'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们现在将通过在包含面包屑组件的 `<nav>` 元素上的行内样式中分配值来使用 CSS 自定义属性，这是唯一使用该组件的 **商店** 和 **产品**
    页面：
- en: part-3/chapter-10/website/shop.xhtml line 216-222
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/website/shop.xhtml 行 216-222
- en: '[PRE731]'
  id: totrans-1002
  prefs: []
  type: TYPE_PRE
  zh: '[PRE731]'
- en: '[PRE732]'
  id: totrans-1003
  prefs: []
  type: TYPE_PRE
  zh: '[PRE732]'
- en: '[PRE733]'
  id: totrans-1004
  prefs: []
  type: TYPE_PRE
  zh: '[PRE733]'
- en: '[PRE734]'
  id: totrans-1005
  prefs: []
  type: TYPE_PRE
  zh: '[PRE734]'
- en: '[PRE735]'
  id: totrans-1006
  prefs: []
  type: TYPE_PRE
  zh: '[PRE735]'
- en: '[PRE736]'
  id: totrans-1007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE736]'
- en: '[PRE737]'
  id: totrans-1008
  prefs: []
  type: TYPE_PRE
  zh: '[PRE737]'
- en: '[PRE738]'
  id: totrans-1009
  prefs: []
  type: TYPE_PRE
  zh: '[PRE738]'
- en: '[PRE739]'
  id: totrans-1010
  prefs: []
  type: TYPE_PRE
  zh: '[PRE739]'
- en: We won’t see any visual change in the browser, which means that we have successfully
    updated our code.
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在浏览器中不会看到任何视觉变化，这意味着我们已经成功更新了我们的代码。
- en: Helper
  id: totrans-1012
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 辅助工具
- en: We previously added a new ratio helper class with the aspect ratio `5x3` by
    creating a `$custom-ratio` map and merging it with the default `$aspect-ratios`
    map. This required several lines of code at the end of our `_variable-value-using-variable.scss`
    file. We can use the `--bs-aspect-ratio` CSS custom property for this instead
    since the Sass code for the ratio helper is already using the values in the `$aspect-ratios`
    map to set the value of that CSS custom property.
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前通过创建 `$custom-ratio` 映射并将其与默认的 `$aspect-ratios` 映射合并，添加了一个新的比例辅助类，其宽高比为
    `5x3`。这需要在 `_variable-value-using-variable.scss` 文件末尾编写几行代码。我们可以使用 `--bs-aspect-ratio`
    CSS 自定义属性来代替，因为比例辅助工具的 Sass 代码已经使用 `$aspect-ratios` 映射中的值来设置该 CSS 自定义属性的值。
- en: 'To make this update to our website, we will first remove our Sass customization
    for the ratio helper:'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将这个更新应用到我们的网站上，我们首先将移除我们对比例辅助工具的 Sass 定制化：
- en: part-3/chapter-10/website/scss/_variable-value-using-variable.scss
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/website/scss/_variable-value-using-variable.scss
- en: '[PRE740]'
  id: totrans-1016
  prefs: []
  type: TYPE_PRE
  zh: '[PRE740]'
- en: '[PRE741]'
  id: totrans-1017
  prefs: []
  type: TYPE_PRE
  zh: '[PRE741]'
- en: '[PRE742]'
  id: totrans-1018
  prefs: []
  type: TYPE_PRE
  zh: '[PRE742]'
- en: '[PRE743]'
  id: totrans-1019
  prefs: []
  type: TYPE_PRE
  zh: '[PRE743]'
- en: '[PRE744]'
  id: totrans-1020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE744]'
- en: '[PRE745]'
  id: totrans-1021
  prefs: []
  type: TYPE_PRE
  zh: '[PRE745]'
- en: '[PRE746]'
  id: totrans-1022
  prefs: []
  type: TYPE_PRE
  zh: '[PRE746]'
- en: 'Instead, we will now use the CSS custom property by assigning a value to it
    in an inline style on the ratio helper wrapping the `<iframe>` with the Google
    Maps map on the **Contact** page, which is the only place we’re using the ratio
    helper:'
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们现在将通过在包含 Google 地图 `<iframe>` 的 **联系** 页面上的比例辅助工具的行内样式中分配值来使用 CSS 自定义属性，这是唯一使用比例辅助工具的地方：
- en: part-3/chapter-10/website/contact.xhtml line 177-179
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/website/contact.xhtml 行 177-179
- en: '[PRE747]'
  id: totrans-1025
  prefs: []
  type: TYPE_PRE
  zh: '[PRE747]'
- en: '[PRE748]'
  id: totrans-1026
  prefs: []
  type: TYPE_PRE
  zh: '[PRE748]'
- en: '[PRE749]'
  id: totrans-1027
  prefs: []
  type: TYPE_PRE
  zh: '[PRE749]'
- en: '[PRE750]'
  id: totrans-1028
  prefs: []
  type: TYPE_PRE
  zh: '[PRE750]'
- en: '[PRE751]'
  id: totrans-1029
  prefs: []
  type: TYPE_PRE
  zh: '[PRE751]'
- en: '[PRE752]'
  id: totrans-1030
  prefs: []
  type: TYPE_PRE
  zh: '[PRE752]'
- en: '[PRE753]'
  id: totrans-1031
  prefs: []
  type: TYPE_PRE
  zh: '[PRE753]'
- en: '[PRE754]'
  id: totrans-1032
  prefs: []
  type: TYPE_PRE
  zh: '[PRE754]'
- en: '[PRE755]'
  id: totrans-1033
  prefs: []
  type: TYPE_PRE
  zh: '[PRE755]'
- en: '[PRE756]'
  id: totrans-1034
  prefs: []
  type: TYPE_PRE
  zh: '[PRE756]'
- en: To keep it short and simple, we’re using the value `60%`, which is simply the
    result of `calc(3 / 5 * 100%)`. The aspect ratio will now stay the same when we
    view the page with the updated code in the browser.
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持简洁，我们使用 `60%` 的值，这仅仅是 `calc(3 / 5 * 100%)` 的结果。现在，当我们使用浏览器查看更新后的代码时，宽高比将保持不变。
- en: Prefix for CSS custom properties
  id: totrans-1036
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS 自定义属性的前缀
- en: By default, all Bootstrap 5 CSS custom properties are prefixed with `bs-` (the
    double hyphen `--` in front of the prefix `bs-` is how you declare a CSS custom
    property, and this can’t be omitted). Should you wish to change this prefix, it
    can be done by overriding the `$prefix` variable defined on line 357 in the `_variables.scss`
    file. The default value for this variable is `bs-`.
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有 Bootstrap 5 CSS 自定义属性都以前缀 `bs-` 开头（前缀 `bs-` 前的双短横线 `--` 是声明 CSS 自定义属性的方式，并且不能省略）。如果你想更改这个前缀，可以在
    `_variables.scss` 文件中定义的 `$prefix` 变量上进行覆盖。这个变量的默认值是 `bs-`。
- en: Deprecated variable for the CSS custom property prefix
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 已废弃的 CSS 自定义属性前缀变量
- en: The variable to specify the CSS custom property prefix used to be `$variable-prefix`,
    but from version v5.2.0 of Bootstrap, this will be deprecated and replaced by
    the shorter `$prefix`. So, in this current version, v5.2.0, both variables are
    found in the code.
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 用于指定 CSS 自定义属性前缀的变量曾经是 `$variable-prefix`，但从 Bootstrap 的 v5.2.0 版本开始，它将被弃用并替换为更短的
    `$prefix`。因此，在当前版本 v5.2.0 中，这两个变量都存在于代码中。
- en: Using the RFS Sass plugin
  id: totrans-1040
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 RFS Sass 插件
- en: RFS is officially described as a “unit resizing engine” that “automates responsive
    resizing.” In other words, RFS is a collection of Sass mixins and functions for
    calculating automated responsive CSS values based on the width of the viewport.
    Being an abbreviation for *Responsive Font Sizes*, it was originally developed
    for font resizing, but it’s now capable of resizing almost any value for any CSS
    property with units. RFS can be downloaded from its official website at GitHub
    at [github.com/twbs/rfs/](http://github.com/twbs/rfs/) or through NPM with the
    command `npm install rfs`. As you can see from the GitHub URL, the repository
    lives side by side with Bootstrap, since RFS is a side project from the team behind
    Bootstrap. In fact, RFS comes packaged with Bootstrap 5 as the file `_rfs.scss`
    in the `vendor` folder, and it’s used for resizing font sizes. This is most apparent
    in headings. RFS is enabled by default by the global option `$enable-rfs` and
    can therefore also be disabled by setting that variable to `false`, as we saw
    in [*Chapter 4*](B17143_04_epub.xhtml#_idTextAnchor079), *Bootstrap 5 Global Options
    and Colors*.
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: RFS 被官方描述为“单位缩放引擎”，它“自动化响应式缩放”。换句话说，RFS 是一组 Sass 混入和函数，用于根据视口宽度计算自动响应式 CSS 值。作为“响应式字体大小”的缩写，它最初是为了字体缩放而开发的，但现在它几乎可以缩放任何
    CSS 属性的任何值。RFS 可以从其官方 GitHub 网站下载，网址为 [github.com/twbs/rfs/](http://github.com/twbs/rfs/)，或者通过
    NPM 使用命令 `npm install rfs` 进行安装。正如您从 GitHub 网址中看到的，该存储库与 Bootstrap 并列存在，因为 RFS
    是 Bootstrap 背后团队的一个侧项目。实际上，RFS 作为 Bootstrap 5 的 `_rfs.scss` 文件包含在 `vendor` 文件夹中，用于缩放字体大小。这在标题中最为明显。RFS
    默认通过全局选项 `$enable-rfs` 启用，因此也可以通过将该变量设置为 `false` 来禁用，正如我们在 [*第 4 章*](B17143_04_epub.xhtml#_idTextAnchor079)
    中看到的，*Bootstrap 5 全局选项和颜色*。
- en: 'The syntax for RFS is as follows:'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: RFS 的语法如下：
- en: '[PRE757]'
  id: totrans-1043
  prefs: []
  type: TYPE_PRE
  zh: '[PRE757]'
- en: '`[max-value]` is the value you would like for the specified `[property]` on
    large screens. RFS will use this value when the width of the viewport is `1200px`
    or larger (so from the `xl` breakpoint and up). Below that, the value will dynamically
    scale in relation to the width of the viewport, until it reaches the base value
    of `1.25rem`, after which it will no longer scale. These two options can be customized
    using the `$rfs-breakpoint` and `$rfs-base-value` variables along with other options.'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: '`[max-value]` 是您希望在大型屏幕上指定的 `[property]` 的值。RFS 将在视口宽度为 `1200px` 或更大时使用此值（因此从
    `xl` 断点开始）。在此之下，该值将根据视口宽度动态缩放，直到达到基本值 `1.25rem`，之后将不再缩放。这两个选项可以使用 `$rfs-breakpoint`
    和 `$rfs-base-value` 变量以及其他选项进行自定义。'
- en: 'There are also the following shorthand mixins for font size, padding, and margin
    we can use, so we don’t need to specify the property explicitly:'
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下用于字体大小、填充和边距的缩写混入，因此我们不需要显式指定属性：
- en: bootstrap/scss/vendor/_rfs.scss
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: bootstrap/scss/vendor/_rfs.scss
- en: '[PRE758]'
  id: totrans-1047
  prefs: []
  type: TYPE_PRE
  zh: '[PRE758]'
- en: '[PRE759]'
  id: totrans-1048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE759]'
- en: '[PRE760]'
  id: totrans-1049
  prefs: []
  type: TYPE_PRE
  zh: '[PRE760]'
- en: '[PRE761]'
  id: totrans-1050
  prefs: []
  type: TYPE_PRE
  zh: '[PRE761]'
- en: '[PRE762]'
  id: totrans-1051
  prefs: []
  type: TYPE_PRE
  zh: '[PRE762]'
- en: '[PRE763]'
  id: totrans-1052
  prefs: []
  type: TYPE_PRE
  zh: '[PRE763]'
- en: '[PRE764]'
  id: totrans-1053
  prefs: []
  type: TYPE_PRE
  zh: '[PRE764]'
- en: '[PRE765]'
  id: totrans-1054
  prefs: []
  type: TYPE_PRE
  zh: '[PRE765]'
- en: '[PRE766]'
  id: totrans-1055
  prefs: []
  type: TYPE_PRE
  zh: '[PRE766]'
- en: '[PRE767]'
  id: totrans-1056
  prefs: []
  type: TYPE_PRE
  zh: '[PRE767]'
- en: '[PRE768]'
  id: totrans-1057
  prefs: []
  type: TYPE_PRE
  zh: '[PRE768]'
- en: '[PRE769]'
  id: totrans-1058
  prefs: []
  type: TYPE_PRE
  zh: '[PRE769]'
- en: '[PRE770]'
  id: totrans-1059
  prefs: []
  type: TYPE_PRE
  zh: '[PRE770]'
- en: '[PRE771]'
  id: totrans-1060
  prefs: []
  type: TYPE_PRE
  zh: '[PRE771]'
- en: '[PRE772]'
  id: totrans-1061
  prefs: []
  type: TYPE_PRE
  zh: '[PRE772]'
- en: '[PRE773]'
  id: totrans-1062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE773]'
- en: '[PRE774]'
  id: totrans-1063
  prefs: []
  type: TYPE_PRE
  zh: '[PRE774]'
- en: '[PRE775]'
  id: totrans-1064
  prefs: []
  type: TYPE_PRE
  zh: '[PRE775]'
- en: '[PRE776]'
  id: totrans-1065
  prefs: []
  type: TYPE_PRE
  zh: '[PRE776]'
- en: '[PRE777]'
  id: totrans-1066
  prefs: []
  type: TYPE_PRE
  zh: '[PRE777]'
- en: '[PRE778]'
  id: totrans-1067
  prefs: []
  type: TYPE_PRE
  zh: '[PRE778]'
- en: '[PRE779]'
  id: totrans-1068
  prefs: []
  type: TYPE_PRE
  zh: '[PRE779]'
- en: '[PRE780]'
  id: totrans-1069
  prefs: []
  type: TYPE_PRE
  zh: '[PRE780]'
- en: '[PRE781]'
  id: totrans-1070
  prefs: []
  type: TYPE_PRE
  zh: '[PRE781]'
- en: '[PRE782]'
  id: totrans-1071
  prefs: []
  type: TYPE_PRE
  zh: '[PRE782]'
- en: '[PRE783]'
  id: totrans-1072
  prefs: []
  type: TYPE_PRE
  zh: '[PRE783]'
- en: '[PRE784]'
  id: totrans-1073
  prefs: []
  type: TYPE_PRE
  zh: '[PRE784]'
- en: '[PRE785]'
  id: totrans-1074
  prefs: []
  type: TYPE_PRE
  zh: '[PRE785]'
- en: '[PRE786]'
  id: totrans-1075
  prefs: []
  type: TYPE_PRE
  zh: '[PRE786]'
- en: '[PRE787]'
  id: totrans-1076
  prefs: []
  type: TYPE_PRE
  zh: '[PRE787]'
- en: '[PRE788]'
  id: totrans-1077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE788]'
- en: '[PRE789]'
  id: totrans-1078
  prefs: []
  type: TYPE_PRE
  zh: '[PRE789]'
- en: '[PRE790]'
  id: totrans-1079
  prefs: []
  type: TYPE_PRE
  zh: '[PRE790]'
- en: '[PRE791]'
  id: totrans-1080
  prefs: []
  type: TYPE_PRE
  zh: '[PRE791]'
- en: 'Now, let’s see an example where we’re using RFS to set the padding of a box.
    In the HTML, we first have a box using RFS for padding and then another box using
    a spacing utility for padding:'
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看一个使用 RFS 设置盒子填充的示例。在 HTML 中，我们首先有一个使用 RFS 进行填充的盒子，然后是另一个使用间距实用工具进行填充的盒子：
- en: part-3/chapter-10/examples/rfs/index.xhtml
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/rfs/index.xhtml
- en: '[PRE792]'
  id: totrans-1083
  prefs: []
  type: TYPE_PRE
  zh: '[PRE792]'
- en: '[PRE793]'
  id: totrans-1084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE793]'
- en: '[PRE794]'
  id: totrans-1085
  prefs: []
  type: TYPE_PRE
  zh: '[PRE794]'
- en: '[PRE795]'
  id: totrans-1086
  prefs: []
  type: TYPE_PRE
  zh: '[PRE795]'
- en: '[PRE796]'
  id: totrans-1087
  prefs: []
  type: TYPE_PRE
  zh: '[PRE796]'
- en: '[PRE797]'
  id: totrans-1088
  prefs: []
  type: TYPE_PRE
  zh: '[PRE797]'
- en: '[PRE798]'
  id: totrans-1089
  prefs: []
  type: TYPE_PRE
  zh: '[PRE798]'
- en: '[PRE799]'
  id: totrans-1090
  prefs: []
  type: TYPE_PRE
  zh: '[PRE799]'
- en: '[PRE800]'
  id: totrans-1091
  prefs: []
  type: TYPE_PRE
  zh: '[PRE800]'
- en: '[PRE801]'
  id: totrans-1092
  prefs: []
  type: TYPE_PRE
  zh: '[PRE801]'
- en: '[PRE802]'
  id: totrans-1093
  prefs: []
  type: TYPE_PRE
  zh: '[PRE802]'
- en: '[PRE803]'
  id: totrans-1094
  prefs: []
  type: TYPE_PRE
  zh: '[PRE803]'
- en: '[PRE804]'
  id: totrans-1095
  prefs: []
  type: TYPE_PRE
  zh: '[PRE804]'
- en: '[PRE805]'
  id: totrans-1096
  prefs: []
  type: TYPE_PRE
  zh: '[PRE805]'
- en: '[PRE806]'
  id: totrans-1097
  prefs: []
  type: TYPE_PRE
  zh: '[PRE806]'
- en: '[PRE807]'
  id: totrans-1098
  prefs: []
  type: TYPE_PRE
  zh: '[PRE807]'
- en: '[PRE808]'
  id: totrans-1099
  prefs: []
  type: TYPE_PRE
  zh: '[PRE808]'
- en: '[PRE809]'
  id: totrans-1100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE809]'
- en: '[PRE810]'
  id: totrans-1101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE810]'
- en: '[PRE811]'
  id: totrans-1102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE811]'
- en: '[PRE812]'
  id: totrans-1103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE812]'
- en: '[PRE813]'
  id: totrans-1104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE813]'
- en: 'Then, in our Sass, we first import Bootstrap 5 and then use the shorthand mixin
    for padding on our `.box` class like so:'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在我们的 Sass 中，我们首先导入 Bootstrap 5，然后像这样在我们的 `.box` 类上使用填充的缩写混入：
- en: part-3/chapter-10/examples/rfs/scss/style.scss
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: part-3/chapter-10/examples/rfs/scss/style.scss
- en: '[PRE814]'
  id: totrans-1107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE814]'
- en: '[PRE815]'
  id: totrans-1108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE815]'
- en: '[PRE816]'
  id: totrans-1109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE816]'
- en: '[PRE817]'
  id: totrans-1110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE817]'
- en: '[PRE818]'
  id: totrans-1111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE818]'
- en: We’re using the value `3rem`, which is the same value that’s used by the `.p-5`
    class on the first box. In that way, it’s easy to see what difference the RFS
    makes. Following are two screenshots showing the difference, and I also suggest
    that you view the example in a browser, where you can better see the automatic
    calculations done by RFS when resizing the width of the browser.
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的是 `3rem` 的值，这与第一个盒子上的 `.p-5` 类使用的值相同。这样，很容易看出 RFS 做出的差异。以下是两个显示差异的屏幕截图，我还建议您在浏览器中查看示例，在那里您可以更好地看到
    RFS 在调整浏览器宽度时进行的自动计算。
- en: '![Figure 10.10 – Viewed on a small device (576px): calculated value is being
    used for padding ](img/Figure_10.10_B17143.jpg)'
  id: totrans-1113
  prefs: []
  type: TYPE_IMG
  zh: '![图10.10 – 在小型设备（576px）上查看：正在使用计算值进行填充](img/Figure_10.10_B17143.jpg)'
- en: 'Figure 10.10 – Viewed on a small device (576px): calculated value is being
    used for padding'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.10 – 在小型设备（576px）上查看：正在使用计算值进行填充
- en: '![Figure 10.11 – Viewed on an extra large device (1200px): the max value is
    being used for padding ](img/Figure_10.11_B17143.jpg)'
  id: totrans-1115
  prefs: []
  type: TYPE_IMG
  zh: '![图10.11 – 在超大设备（1200px）上查看：正在使用最大值进行填充](img/Figure_10.11_B17143.jpg)'
- en: 'Figure 10.11 – Viewed on an extra large device (1200px): the max value is being
    used for padding'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.11 – 在超大设备（1200px）上查看：正在使用最大值进行填充
- en: Summary
  id: totrans-1117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have had a look at various advanced Sass and CSS features
    related to Bootstrap 5\. We first saw how we could use various Bootstrap 5 mixins
    and functions and how to use the extend feature for various purposes. We then
    learned about the recommended approach to creating custom components using the
    Bootstrap 5 variables, mixins, and functions. After that, we saw how to use the
    Bootstrap 5 CSS custom properties to create a dark color theme and to customize
    a component and a helper. Finally, we learned how to use Bootstrap’s side project,
    RFS, to calculate automated responsive CSS values.
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了与Bootstrap 5相关的各种高级Sass和CSS功能。我们首先看到了如何使用各种Bootstrap 5混入（mixins）和函数，以及如何使用extend功能实现各种目的。然后，我们学习了使用Bootstrap
    5变量、混入和函数创建自定义组件的推荐方法。之后，我们了解了如何使用Bootstrap 5的CSS自定义属性来创建深色主题，以及如何自定义组件和辅助工具。最后，我们学习了如何使用Bootstrap的侧项目RFS来计算自动响应式CSS值。
- en: In the next chapter, we will take a closer look at the JavaScript features of
    Bootstrap 5.
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更详细地探讨Bootstrap 5的JavaScript功能。
