- en: Chapter 7. Supporting Device Functionalities Using Ionic Native
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章. 使用 Ionic Native 支持设备功能
- en: 'In this chapter, we will cover the following tasks related to native device
    feature support:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍与原生设备功能支持相关的以下任务：
- en: Taking a photo using the camera plugin
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用相机插件拍照
- en: Sharing content using the social sharing plugin
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用社交分享插件共享内容
- en: Displaying a term of service using InAppBrowser
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 InAppBrowser 显示服务条款
- en: Creating a Taxi app using the Google Maps plugin and geocode support
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Google Maps 插件和地理编码支持创建出租车应用
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, you will learn how to access some common features of a device,
    such as the camera, contact list, e-mail, and maps. Some of these features can
    be written in a JavaScript-only environment, but the performance is not on a par
    with native support.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何访问设备的一些常见功能，例如相机、联系人列表、电子邮件和地图。其中一些功能可以在仅 JavaScript 的环境中编写，但性能并不与原生支持相媲美。
- en: Cordova has a very well supported community with many plugins. You may want
    to check out [http://plugins.cordova.io/](http://plugins.cordova.io/) to understand
    what is out there. Luckily, you don't need to deal with these plugins directly.
    You will use the Ionic Native ([http://ionicframework.com/docs/v2/native/](http://ionicframework.com/docs/v2/native/))
    service on top of Cordova and Angular 2\. Keep in mind that you have to use Ionic
    Native instead of ngCordova for Ionic 2 because of compatibility issues. You can
    only use ngCordova for Ionic 1.x.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Cordova 有一个非常受支持的社区和许多插件。你可能想查看 [http://plugins.cordova.io/](http://plugins.cordova.io/)
    以了解有哪些选择。幸运的是，你不需要直接处理这些插件。你将使用基于 Cordova 和 Angular 2 的 Ionic Native ([http://ionicframework.com/docs/v2/native/](http://ionicframework.com/docs/v2/native/))
    服务。请注意，由于兼容性问题，你必须使用 Ionic Native 而不是 ngCordova 来支持 Ionic 2。你只能使用 ngCordova 来支持
    Ionic 1.x。
- en: Taking a photo using the camera plugin
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用相机插件拍照
- en: 'For this section, you will make an app to take a picture using the device camera
    or load an existing picture from the device album. The picture could be either
    in the Base64 format or saved in a local filesystem relating to your app. The
    following is a screenshot of the app:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，你将制作一个应用，使用设备相机拍照或从设备相册加载现有图片。图片可以是 Base64 格式，也可以保存在与你的应用相关的本地文件系统中。以下是该应用的截图：
- en: '![Taking a photo using the camera plugin](img/image00371.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![使用相机插件拍照](img/image00371.jpeg)'
- en: 'Here is the high-level process:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是高级流程：
- en: Access the Cordova camera plugin to trigger camera capture and get the image
    back in the Base64 or URI format
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 Cordova 相机插件以触发相机捕获并获取 Base64 或 URI 格式的图像
- en: Parse the Base64 data or URI on an `<img>` DOM object
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<img>` DOM 对象上解析 Base64 数据或 URI
- en: Display the URI if it's in the URI format
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是 URI 格式，显示 URI
- en: Capture an event of a toggle component
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获切换组件的事件
- en: Display long data (for example, URI) using horizontal scroll
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用水平滚动显示长数据（例如，URI）
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a physical device ready in order to test the camera capability.
    It's possible to just run the code via an emulator, but the filesystem support
    might look different across the various platforms.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该准备一个物理设备来测试相机功能。你可以通过模拟器运行代码，但不同平台上的文件系统支持可能会有所不同。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The following are the instructions to add camera support:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在添加相机支持时的说明：
- en: 'Start a blank project (for example, `MyCamera`) and go to that folder:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个空白项目（例如，`MyCamera`）并进入该文件夹：
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the Cordova camera plugin using the following code:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码添加 Cordova 相机插件：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You no longer need to add ngCordova separately. Also, you should not use the
    `cordova add` command line directly; instead but use `ionic plugin add`
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你不再需要单独添加 ngCordova。此外，你不应该直接使用 `cordova add` 命令行；相反，使用 `ionic plugin add`
- en: You should be able to see a new folder `org.apache.cordova.camera` being added
    in the `/plugins` folder.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该能够看到在 `/plugins` 文件夹中添加了一个新的文件夹 `org.apache.cordova.camera`。
- en: 'Replace `./src/pages/home/home.html` with the following code:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `./src/pages/home/home.html` 替换为以下代码：
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Since you have only one page, this template will show two buttons and an area
    to display the image.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于你只有一个页面，这个模板将显示两个按钮和一个显示图像的区域。
- en: 'Replace `./src/pages/home/home.ts` with the following code:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `./src/pages/home/home.ts` 替换为以下代码：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There is only one method: `getPicture()`. This method will return the photo
    data so that the template can render.'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有一个方法：`getPicture()`。此方法将返回照片数据，以便模板可以渲染。
- en: 'Replace `/app/pages/home/home.scss` with the following code:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `/app/pages/home/home.scss` 替换为以下代码：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are only a few minor changes in the styling so that you can keep them
    simple.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样式上只有少数的改动，这样你可以保持它们简单。
- en: Connect your device to your computer.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的设备连接到电脑。
- en: 'Go to the Terminal and execute the following command line for iOS:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往终端并执行以下命令行以运行iOS：
- en: '[PRE5]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are not able to push the app to your physical device using the preceding
    command line, you can use `ionic run ios --device` to specify the CLI to use the
    physical device instead of a simulator.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你无法使用前面的命令行将应用推送到物理设备，你可以使用`ionic run ios --device`来指定CLI，使其使用物理设备而不是模拟器。
- en: 'If you want to run the app in your Android device, use the following code:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想在Android设备上运行应用，请使用以下代码：
- en: '[PRE6]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you run the app and take a picture, you should see the app as shown in
    the following screenshot:![How to do it...](img/image00372.jpeg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你运行应用并拍照时，你应该会看到如下截图所示的应用界面：![如何操作...](img/image00372.jpeg)
- en: How it works…
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`Camera.getPicture()` is just an abstraction of `navigator.camera.getPicture()`
    from the Cordova camera plugin. If you are already familiar with Cordova or ngCordova
    from Ionic 1, this should be very familiar. Let''s start from the template. You
    have the following two buttons, which trigger the same, `getPicture()`, method:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`Camera.getPicture()`只是Cordova相机插件中的`navigator.camera.getPicture()`的一个抽象。如果你已经熟悉Cordova或Ionic
    1中的ngCordova，这应该非常熟悉。让我们从模板开始。你有以下两个按钮，它们触发相同的`getPicture()`方法：'
- en: '`<button ion-button (click)="getPicture(1)">Show Camera</button>`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<button ion-button (click)="getPicture(1)">显示相机</button>`'
- en: '`<button ion-button (click)="getPicture(0)">Show Album</button>`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<button ion-button (click)="getPicture(0)">显示相册</button>`'
- en: 'These are just different ways to access photos: either from the camera itself
    or from the existing photos in the phone''s album. For the photo to render, you
    need to pass the photo data into the `src` attribute, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是访问照片的不同方式：要么从相机本身，要么从手机相册中的现有照片。为了使照片渲染，你需要将照片数据传递到`src`属性，如下所示：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Note that you only want to show this `<img>` tag when `imageData` exists with
    some data. The `imageData` variable could be Base64 or an internal URL of the
    photo. To specify this option, there is a toggle button, as shown:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你只想在`imageData`存在且包含数据时显示此`<img>`标签。`imageData`变量可以是Base64或照片的内部URL。为了指定此选项，有一个切换按钮，如下所示：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You will use the `useURI` variable inside the class, as illustrated, to determine
    which format to return the photo data in.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在类中使用`useURI`变量，如图所示，以确定返回照片数据的格式。
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Both `useURI` and `sourceType` will be used in the `getPicture()` function,
    as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`useURI`和`sourceType`都将用于`getPicture()`函数，如下所示：'
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It's important to adjust the quality, `targetWidth` and `targetHeight` to low
    so that the photo is not too big, which could crash the device, especially when
    it doesn't have enough memory. When you return the Base64 data, it must be prefixed
    with the string `data:image/jpeg;base64`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 调整质量、`targetWidth`和`targetHeight`到低值，这样照片不会太大，否则可能会使设备崩溃，尤其是在内存不足的情况下。当你返回Base64数据时，必须在字符串前加上`data:image/jpeg;base64`。
- en: One item that isn't discussed here is the ability to post image data to the
    server. The common scenario is to upload the file from the filesystem. It's not
    a good idea to send data as Base64 because of the data size, which is double the
    original binary size.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有讨论的一项功能是向服务器发送图像数据的能力。常见的场景是从文件系统中上传文件。由于数据大小是原始二进制大小的两倍，所以发送Base64数据不是一个好主意。
- en: There's more…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It is possible to create Instagram-like filter effects using just JavaScript.
    You can leverage an existing library, such as Filterous ([https://github.com/girliemac/Filterous](https://github.com/girliemac/Filterous)),
    to modify the image canvas directly.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 只需使用JavaScript就可以创建类似Instagram的滤镜效果。你可以利用现有的库，例如Filterous ([https://github.com/girliemac/Filterous](https://github.com/girliemac/Filterous))，直接修改图像画布。
- en: There is an Instagram plugin ([https://github.com/vstirbu/InstagramPlugin](https://github.com/vstirbu/InstagramPlugin))
    for Cordova on GitHub. You could write some extra code to pass the image to Instagram.
    The user must have Instagram installed on the phone first, though. This idea is
    nice when you plan to do some cool image processing (for example, adding funny
    text) before letting Instagram perform the photo filter operation.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub上有一个Instagram插件([https://github.com/vstirbu/InstagramPlugin](https://github.com/vstirbu/InstagramPlugin))，适用于Cordova。你可以编写一些额外的代码将图像传递到Instagram。不过，用户必须首先在手机上安装Instagram。当你计划在Instagram执行照片滤镜操作之前做一些酷炫的图像处理（例如，添加有趣的文字）时，这个想法很不错。
- en: You could even add the Cordova's social network plugin and post the resulting
    images to Twitter or Facebook.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以添加 Cordova 的社交网络插件，并将生成的图片发布到推特或 Facebook。
- en: Sharing content using the social sharing plugin
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用社交分享插件分享内容
- en: If you develop an app with shareable content, you might want to utilize the
    native device feature to share via the device's authorized social media accounts.
    There are several benefits from using this approach. First, users don't need to
    open a separate browser to log in to their social media account each time they
    want to share. Second, all the information can be filled out programmatically,
    such as title, body, link, or image. Finally, since this is a native feature of
    the device, the menu selection allows users to see multiple accounts, which they
    are already familiar with, to choose from. The social sharing plugin can greatly
    enhance the user experience.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您开发一个具有可分享内容的应用程序，您可能希望利用设备的原生功能通过设备授权的社交媒体账户进行分享。使用这种方法有几个好处。首先，用户不需要每次分享时都打开一个单独的浏览器来登录他们的社交媒体账户。其次，所有信息都可以通过编程方式填写，例如标题、正文、链接或图片。最后，由于这是设备的原生功能，菜单选择允许用户看到他们已经熟悉的多个账户，从而进行选择。社交分享插件可以极大地提升用户体验。
- en: 'This is the app that you will build:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您将要构建的应用程序：
- en: '![Sharing content using the social sharing plugin](img/image00373.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![使用社交分享插件分享内容](img/image00373.jpeg)'
- en: 'When the user clicks on the **Share** button, the app will show the following
    native button menu for social media account selection:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 **分享** 按钮时，应用程序将显示以下原生按钮菜单，用于选择社交媒体账户：
- en: '![Sharing content using the social sharing plugin](img/image00374.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![使用社交分享插件分享内容](img/image00374.jpeg)'
- en: 'If the user selects Twitter, a popup will show up with all the information
    prefilled, as illustrated:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户选择推特，将弹出一个包含所有预先填写信息的弹出窗口，如下所示：
- en: '![Sharing content using the social sharing plugin](img/image00375.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![使用社交分享插件分享内容](img/image00375.jpeg)'
- en: After posting on Twitter, the user goes right back to the app without ever leaving
    it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在推特上发布后，用户可以直接返回应用程序，而无需离开。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a physical device or simulator ready in order to test the social
    sharing capability.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该准备好一个物理设备或模拟器，以便测试社交分享功能。
- en: How to do it…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following are the instructions:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是指令：
- en: 'Start a blank project (for example, `LinkSocialShare`), as follows, and go
    to that folder:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个空白项目（例如，`LinkSocialShare`），如下所示，并进入该文件夹：
- en: '[PRE11]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the Cordova camera plugin with the following command line:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令行添加 Cordova 摄像头插件：
- en: '[PRE12]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Open `./src/pages/home/index.html` and replace its contents with the following
    code:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/pages/home/index.html` 并将其内容替换为以下代码：
- en: '[PRE13]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This is a very simple page with the card element. The **Like** button is there
    just for cosmetic reasons without code implementation. However, all the JavaScript
    logic will focus on the **Share** button:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的页面，包含卡片元素。**点赞**按钮仅出于美观考虑，没有代码实现。然而，所有的 JavaScript 逻辑都将集中在 **分享** 按钮上：
- en: 'Open `./src/pages/home/home.ts`, as shown:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/pages/home/home.ts`，如下所示：
- en: '[PRE14]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Go to the Terminal and execute either of the following command lines:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往终端并执行以下任意一条命令行：
- en: '[PRE15]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works…
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'You can start looking at the template because that is where the social media
    content is extracted from. The subject value is from the `#messageSubject` local
    variable, as illustrated:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以开始查看模板，因为社交媒体内容就是从这里提取的。主题值来自 `#messageSubject` 本地变量，如下所示：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding case, the subject is `Ionic Developer` because you will access
    `messageSubject.innerText` later on. `messageSubject` is just referencing your
    H2 DOM node.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，主题是 `Ionic Developer`，因为您稍后将会访问 `messageSubject.innerText`。`messageSubject`
    只是对您的 H2 DOM 节点的引用。
- en: 'Similarly, the body is from `#messageBody`, as shown:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，主体内容来自 `#messageBody`，如下所示：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When the user clicks on the **Share** button, it will trigger the `sendShare()`
    method, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 **分享** 按钮时，将触发 `sendShare()` 方法，如下所示：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Let's take a look at your `home.ts` to understand how `sendShare()` works.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看您的 `home.ts` 文件，以了解 `sendShare()` 函数是如何工作的。
- en: 'First, you need to import the `SocialSharing` module from Ionic Native, as
    illustrated:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要从 Ionic Native 中导入 `SocialSharing` 模块，如下所示：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Ionic 2 makes it very convenient because you don't need to install ngCordova
    separately. Ionic Native is actually a default option that comes with the project
    during its creation.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic 2 使得这非常方便，因为您不需要单独安装 ngCordova。Ionic Native 实际上是项目创建时自带的一个默认选项。
- en: 'To share your content and trigger the social media menu, the logic, as shown,
    is very simple:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要分享你的内容并触发社交媒体菜单，逻辑，如图所示，非常简单：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you want to share a file, you can replace the third parameter (where it is
    `null`) with the URL to the user's local filesystem. This is useful when you want
    people to send a PDF or JPG via e-mail or post it on Facebook.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要分享一个文件，你可以将第三个参数（其中是 `null`）替换为用户本地文件系统的 URL。这在你想让人们通过电子邮件发送 PDF 或 JPG
    或者在 Facebook 上发布时非常有用。
- en: There's more…
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: To see the latest update of the Social Share plugin, you can visit the documentation
    page at [http://ionicframework.com/docs/v2/native/social-sharing/](http://ionicframework.com/docs/v2/native/social-sharing/)
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查看 Social Share 插件的最新更新，你可以访问文档页面 [http://ionicframework.com/docs/v2/native/social-sharing/](http://ionicframework.com/docs/v2/native/social-sharing/)
- en: Displaying a term of service using InAppBrowser
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 InAppBrowser 显示服务条款
- en: In many apps, you sometimes require users to accept a term of service before
    they can move on to the next page. The typical approach is to create a popup modal
    or a new page showing the term of service. Once users finish reading, they can
    click on the **Done** or **Back** button. However, if the content of your term
    of service changes, you may need to ask users to update the app. In many cases,
    users don't update apps often. So, the terms of service that they accepted could
    be older than your current version. Therefore, there is a need to maintain term
    of service content separately from the app itself. The InAppBrowser plugin is
    the best solution for this because you can point users to the same Term of Service
    page that is already on your website.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多应用程序中，你有时需要用户在接受服务条款之前才能继续到下一页。典型的方法是创建一个弹出模态或新页面来显示服务条款。一旦用户阅读完毕，他们可以点击
    **完成** 或 **返回** 按钮。然而，如果你的服务条款内容发生变化，你可能需要要求用户更新应用程序。在许多情况下，用户不会经常更新应用程序。因此，他们接受的服务条款可能比你的当前版本要旧。因此，有必要将服务条款内容与应用程序本身分开维护。InAppBrowser
    插件是最佳解决方案，因为你可以将用户指向已经在你的网站上存在的相同的服务条款页面。
- en: 'The app will just have a simple checkbox and button to demonstrate how InAppBrowser
    works:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将只有一个简单的复选框和按钮来演示 InAppBrowser 的工作方式：
- en: '![Displaying a term of service using InAppBrowser](img/image00376.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![使用 InAppBrowser 显示服务条款](img/image00376.jpeg)'
- en: 'Once the user clicks on the **Please agree to our terms** checkbox, they will
    go to the InAppBrowser page:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户点击 **请同意我们的条款** 复选框，他们就会转到 InAppBrowser 页面：
- en: '![Displaying a term of service using InAppBrowser](img/image00377.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![使用 InAppBrowser 显示服务条款](img/image00377.jpeg)'
- en: 'After going through the term of service content, they can click on **Done**
    and go back to the previous page with the **Next** button enabled:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读完服务条款内容后，他们可以点击 **完成** 并使用启用的 **下一步** 按钮返回上一页：
- en: '![Displaying a term of service using InAppBrowser](img/image00378.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![使用 InAppBrowser 显示服务条款](img/image00378.jpeg)'
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a physical device ready in order to test InAppBrowser, as this
    won't work in the browser as an iframe.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该准备一个物理设备来测试 InAppBrowser，因为作为 iframe 它在浏览器中不会工作。
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the instructions:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是说明：
- en: 'Create a blank Ionic app (for example, `OnlineTOS`) and `cd` to that folder,
    as shown:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空的 Ionic 应用（例如，`OnlineTOS`）并 `cd` 到该文件夹，如图所示：
- en: '[PRE21]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Install the InAppBrowser plugin using the following command:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装 InAppBrowser 插件：
- en: '[PRE22]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Open `/config.xml` in the project folder and insert the following two lines
    under `<access origin="*"/>`, as shown:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件夹中打开 `/config.xml` 并在 `<access origin="*"/>` 之下插入以下两行，如图所示：
- en: '[PRE23]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This will tell Cordova that it's okay to allow navigation to any website. Otherwise,
    the device security will block InAppBrowser. You can read more about this on the
    Cordova documentation page at [https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-whitelist/](https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-whitelist/).
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将告诉 Cordova 允许导航到任何网站是安全的。否则，设备安全将阻止 InAppBrowser。你可以在 Cordova 文档页面 [https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-whitelist/](https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-whitelist/)
    上了解更多信息。
- en: 'Open `./src/pages/home/index.html` and replace with the following code:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/pages/home/index.html` 并替换为以下代码：
- en: '[PRE24]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Open `./src/pages/home/home.ts` and replace with the following code:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/pages/home/home.ts` 并替换为以下代码：
- en: '[PRE25]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open `./src/pages/home/home.scss` and replace with the following code:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/pages/home/home.scss` 并替换为以下代码：
- en: '[PRE26]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This is just to provide minor styling to the page.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这只是为了给页面提供一些微小的样式。
- en: 'Run the app in the Terminal using the following command line:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令行在终端中运行应用：
- en: '[PRE27]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works…
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'First, let''s take a look at the `template home.html`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看 `template home.html`：
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: There are two areas that you should make a note on. When the `<ion-checkbox>`
    component is clicked on, it will trigger the `openTOS()` method, which will open
    the URL via InAppBrowser. The **Next** button is disabled by default (via the
    `readTOS` variable). So, when the user checks the checkbox, this `readTOS` will
    be `True` and the button will be enabled.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个区域你应该注意。当 `<ion-checkbox>` 组件被点击时，它将触发 `openTOS()` 方法，通过 InAppBrowser 打开
    URL。**下一步**按钮默认禁用（通过 `readTOS` 变量）。所以，当用户勾选复选框时，这个 `readTOS` 将为 `True`，按钮将被启用。
- en: 'In your `home.ts`, you must import the `InAppBrowser` module first, as shown:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `home.ts` 中，你必须首先导入 `InAppBrowser` 模块，如下所示：
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This will make the `InAppBrowser` object available for use in your class.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使 `InAppBrowser` 对象可用于你的类中。
- en: 'Here is the `openTOS()` method:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 `openTOS()` 方法：
- en: '[PRE30]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Tip
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You have to wrap everything inside `platform.ready()` because sometimes Cordova
    plugin loads more slowly than the app itself and it will cause an error if the
    user clicks on the button too fast to trigger it InAppBrowser.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须将所有内容包裹在 `platform.ready()` 中，因为有时 Cordova 插件加载速度比应用本身慢，如果用户点击按钮太快触发 InAppBrowser，则会导致错误。
- en: 'To trigger InAppBrowser, you just need to call `InAppBrowser.open` and pass
    the following three parameters:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要触发 InAppBrowser，你只需调用 `InAppBrowser.open` 并传递以下三个参数：
- en: The URL to load.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要加载的 URL。
- en: The target to open the URL. There are four options only—`_self`, `_blank`, and
    `_system`. `_self` will overwrite your current Ionic app; thus, you should never
    need to use this option. `_blank` is typically what you want because it leaves
    you a way to come back to your app. Finally, `_system` opens a separate browser
    outside the app.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 URL 的目标。只有四个选项——`_self`, `_blank` 和 `_system`。`_self` 将覆盖你的当前 Ionic 应用；因此，你永远不需要使用此选项。`_blank`
    通常是你想要的，因为它为你提供了返回应用的方式。最后，`_system` 在应用外部打开一个单独的浏览器。
- en: Options is the last parameter where you have to pass a string. You can visit
    the official document for more information ([https://github.com/apache/cordova-plugin-inappbrowser#cordovainappbrowseropen](https://github.com/apache/cordova-plugin-inappbrowser#cordovainappbrowseropen)).
    In general, you just need to set `location=true` so that the user can see the
    current URL.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选项是最后一个参数，你必须传递一个字符串。你可以访问官方文档获取更多信息 ([https://github.com/apache/cordova-plugin-inappbrowser#cordovainappbrowseropen](https://github.com/apache/cordova-plugin-inappbrowser#cordovainappbrowseropen))。一般来说，你只需要设置
    `location=true`，这样用户就可以看到当前的 URL。
- en: Tip
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Android and iOS have different options; so, you should check the GitHub page
    to compare the different platforms.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Android 和 iOS 有不同的选项；因此，你应该检查 GitHub 页面以比较不同的平台。
- en: InAppBrowser also has an `exit` event, where you can listen via `ref.on()`.
    This is useful when you want to pop up a Thank You dialog or record an event (via
    the REST API to your server).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: InAppBrowser 还有一个 `exit` 事件，你可以通过 `ref.on()` 来监听。当你想要弹出感谢对话框或记录事件（通过 REST API
    到你的服务器）时，这很有用。
- en: There's more…
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: To stay up to date with the latest changes in InAppBrowser, you can visit [https://github.com/apache/cordova-plugin-inappbrowser](https://github.com/apache/cordova-plugin-inappbrowser)
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解 InAppBrowser 的最新更改，你可以访问 [https://github.com/apache/cordova-plugin-inappbrowser](https://github.com/apache/cordova-plugin-inappbrowser)
- en: Official support for Ionic Native's InAppBrowser is located at [http://ionicframework.com/docs/v2/native/inappbrowser/](http://ionicframework.com/docs/v2/native/inappbrowser/)
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ionic Native 的 InAppBrowser 的官方支持位于 [http://ionicframework.com/docs/v2/native/inappbrowser/](http://ionicframework.com/docs/v2/native/inappbrowser/)
- en: Creating a Taxi app using the Google Maps plugin and geocode support
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Google Maps 插件和地理编码支持创建出租车应用
- en: Today, many mobile apps utilize different mapping features, such as showing
    the current location, creating routes, and providing suggestive business searches.
    This section will show you how to use Ionic Native's Google Maps plugin to provide
    mapping support.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，许多移动应用利用不同的地图功能，例如显示当前位置、创建路线和提供建议性的商业搜索。本节将展示如何使用 Ionic Native 的 Google
    Maps 插件提供地图支持。
- en: 'You will create a Taxi app that can do the following things:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建一个可以执行以下操作的出租车应用：
- en: Display Google Maps in fullscreen
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全屏显示 Google Maps
- en: Add a button overlay on top of the map
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在地图上添加按钮覆盖
- en: Detect the current device location
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测当前设备位置
- en: Add a marker with any text
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加任何文本的标记
- en: 'This is the screenshot of the Taxi app:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是出租车应用的截图：
- en: '![Creating a Taxi app using the Google Maps plugin and geocode support](img/image00379.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Google Maps 插件和地理编码支持创建出租车应用](img/image00379.jpeg)'
- en: 'When users click on the **PICK ME UP** button, it will go to the current device
    location and show longitude and latitude information:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 **PICK ME UP** 按钮时，它将跳转到当前设备位置并显示经纬度信息：
- en: '![Creating a Taxi app using the Google Maps plugin and geocode support](img/image00380.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Google Maps 插件和地理编码支持创建出租车应用](img/image00380.jpeg)'
- en: It is possible to use the HTML5 and JavaScript version of geolocation and maps
    instead of the Cordova plugin's. However, you will see a negative impact on performance.
    It's very obvious that if you use the SDK, map rendering and optimization tends
    to be faster. In addition, HTML5 geolocation sometimes has some strange bugs that
    require the user to accept permission twice—once for the app and once for the
    inside browser object.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 HTML5 和 JavaScript 版本的地理位置和地图，而不是 Cordova 插件。然而，你将看到性能上的负面影响。很明显，如果你使用
    SDK，地图渲染和优化通常会更快。此外，HTML5 地理位置有时会有一些奇怪的错误，需要用户接受两次权限——一次是应用，一次是内部浏览器对象。
- en: Getting ready
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: The Google Maps plugin requires a Google Maps API key for your project. You
    need a Google account and login to get started.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps 插件需要为你的项目提供一个 Google Maps API 密钥。你需要一个 Google 账户并登录才能开始。
- en: Navigate to the Google APIs Console at [https://code.google.com/apis/console/](https://code.google.com/apis/console/).
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 Google APIs 控制台 [https://code.google.com/apis/console/](https://code.google.com/apis/console/)。
- en: Create a project if you don't have one yet. Just fill in the required fields:![Getting
    ready](img/image00381.jpeg)
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有创建项目，请创建一个。只需填写所需的字段：![准备就绪](img/image00381.jpeg)
- en: You need to enable the **Google Maps SDK for iOS**, the **Google Maps Android
    API**, or both. It depends on how many platforms you plan to support. Let's select
    **Google Maps SDK for iOS** for this example:![Getting ready](img/image00382.jpeg)
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要启用 **Google Maps SDK for iOS**、**Google Maps Android API** 或两者都启用。这取决于你计划支持多少平台。在这个例子中，让我们选择
    **Google Maps SDK for iOS**：![准备就绪](img/image00382.jpeg)
- en: Click on the **Enable API** button:![Getting ready](img/image00383.jpeg)
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **启用 API** 按钮：![准备就绪](img/image00383.jpeg)
- en: Go to **Credentials** to create your own key:![Getting ready](img/image00384.jpeg)
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 **凭证** 创建你自己的密钥：![准备就绪](img/image00384.jpeg)
- en: Click on the **Create credential** | **API key** option:![Getting ready](img/image00385.jpeg)
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建凭证** | **API 密钥** 选项：![准备就绪](img/image00385.jpeg)
- en: Select the restriction option. In the following example, you will select the
    **iOS apps** radio button:![Getting ready](img/image00386.jpeg)
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择限制选项。在以下示例中，你将选择 **iOS apps** 单选按钮：![准备就绪](img/image00386.jpeg)
- en: Fill in your app's Bundle ID. You might not know exactly what it is yet because
    Ionic will create a random ID. So just put in `com.ionicframework.starter` and
    change that later.![Getting ready](img/image00387.jpeg)
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写你应用的 Bundle ID。你可能还不知道它是什么，因为 Ionic 会创建一个随机 ID。所以只需填写 `com.ionicframework.starter`
    并稍后更改它。![准备就绪](img/image00387.jpeg)
- en: Click on the **Save** button.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **保存** 按钮。
- en: Now you should see the key for the iOS applications section as follows:![Getting
    ready](img/image00388.jpeg)
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你应该会看到 iOS 应用程序部分的密钥如下：![准备就绪](img/image00388.jpeg)
- en: Copy the API key so that you can use it to add the Cordova Google Maps plugin.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 API 密钥，以便你可以使用它来添加 Cordova Google Maps 插件。
- en: How to do it...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s start an Ionic project from scratch and add Google Maps features, as
    follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从零开始创建一个 Ionic 项目并添加 Google Maps 功能，如下所示：
- en: 'Create a blank Ionic project, as shown, and go to that folder:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空白 Ionic 项目，如图所示，并进入该文件夹：
- en: '[PRE31]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Replace the iOS platform with version 3.9.0 with the following command lines:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令行将 iOS 平台版本 3.9.0 替换：
- en: '[PRE32]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You have to pick `ios@3.9.0` specifically because the current version of the
    Cordova Google Maps plugin only works with this version. Otherwise, your build
    will fail. You should experiment with the newest version if possible.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你必须特别选择 `ios@3.9.0`，因为当前版本的 Cordova Google Maps 插件仅与此版本兼容。否则，你的构建将失败。如果可能的话，你应该尝试最新的版本。
- en: 'Install the Google Maps plugin with your copied key replacing `` `YOUR_IOS_API_KEY_IS_HERE
    ``, as follows:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你复制的密钥安装 Google Maps 插件，如下所示，将 `` `YOUR_IOS_API_KEY_IS_HERE `` 替换为你的 iOS API
    密钥：
- en: '[PRE33]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If you do this for both iOS and Android, use the following command line:'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你同时为 iOS 和 Android 操作，请使用以下命令行：
- en: '[PRE34]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Tip
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You have to use the Cordova CLI here because using the Ionic CLI to add Google
    Maps with the API Key will not work.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你必须在这里使用 Cordova CLI，因为使用 Ionic CLI 添加带有 API 密钥的 Google Maps 不会起作用。
- en: 'Open `./src/pages/home/home.html` to modify your template, as shown:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/pages/home/home.html`以修改您的模板，如下所示：
- en: '[PRE35]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The main element here is your `div` with `map` ID because that is where you
    have to inject the Google Maps object.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的主要元素是你的具有`map` ID的`div`，因为那里是你必须注入Google Maps对象的地方。
- en: 'Edit your `./src/pages/home/home.ts` in the same folder:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件夹中编辑你的`./src/pages/home/home.ts`：
- en: '[PRE36]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, make some minor adjustments to the stylesheet so that the map can
    take over the fullscreen. Edit `./src/pages/home/home.scss`, as illustrated:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，对样式表进行一些小的调整，以便地图可以全屏显示。编辑`./src/pages/home/home.scss`，如图所示：
- en: '[PRE37]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Run the app in the Terminal with the following command line:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令行在终端中运行应用程序：
- en: '[PRE38]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: You can use either one of the preceding command lines, depending on the platform.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 根据平台，你可以使用上述任一命令行。
- en: How it works…
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The core of this app is mainly in the JavaScript code—`home.ts`. In order to
    use the plugin object, you should declare it on top, as shown:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序的核心主要在于JavaScript代码——`home.ts`。为了使用插件对象，你应在顶部声明它，如下所示：
- en: '[PRE39]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'While it might seem that there are a lot of moving parts, the basic flow is
    very simple, as listed:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然看起来有很多移动部件，但基本流程非常简单，如下所示：
- en: Whenever Ionic and Cordova are ready, trigger `platform.ready().then` to initialize
    the map by calling `showMap()` in the constructor of the `HomePage`.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无论何时Ionic和Cordova都准备好了，通过在`HomePage`构造函数中调用`showMap()`来初始化地图，触发`platform.ready().then`。
- en: When a user clicks on the button, the app will call `getMyLocation` to get the
    location data.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击按钮时，应用程序将调用`getMyLocation`以获取位置数据。
- en: The data will be used to create the marker and move the map's camera to center
    on that location.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些数据将用于创建标记并将地图的相机移动到该位置的中心。
- en: It's important to know that `plugin.google.maps.Map.getMap` does take some time
    to process, and it will trigger a *ready* event once it has successfully created
    the map. That's why you need to add an event listener for `plugin.google.maps.event.MAP_READY`.
    This example does not do anything right after the map is ready, but later, you
    could add more processing functions, such as jumping to the current location automatically
    or adding more markers on top of the map.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 需要知道的是，`plugin.google.maps.Map.getMap`确实需要一些时间来处理，并且一旦成功创建地图，它将触发一个*ready*事件。这就是为什么你需要添加一个监听器来监听`plugin.google.maps.event.MAP_READY`。这个示例在地图准备好后并没有立即做任何事情，但稍后，你可以添加更多的处理函数，例如自动跳转到当前位置或在上面的地图上添加更多标记。
- en: When the user clicks on the `PICK ME UP` button, it will trigger the `getMyLocation()`
    method. The location object returned will contain the latitude (`location.latLng.lat`)
    and longitude (`location.latLng.lng`). To move the camera anywhere, just call
    `map.moveCamera` by passing the location coordinate (`location.latLng`). To add
    a marker, call `map.addMarker` with the position and title as HTML.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击`PICK ME UP`按钮时，将触发`getMyLocation()`方法。返回的位置对象将包含纬度（`location.latLng.lat`）和经度（`location.latLng.lng`）。要移动相机到任何地方，只需通过传递位置坐标（`location.latLng`）调用`map.moveCamera`。要添加标记，请使用位置和标题作为HTML调用`map.addMarker`。
- en: There's more…
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The Cordova Google Maps plugin has many more features, such as the following
    ones:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Cordova Google Maps插件具有许多其他功能，如下所示：
- en: Showing an InfoWindow
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示信息窗口
- en: Adding a marker with multiple lines
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加多行标记
- en: Modifying icon
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改图标
- en: Text styling
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本样式
- en: Base64-encoded icons
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Base64编码的图标
- en: Clicking on a marker
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击标记
- en: Clicking on an InfoWindow
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击信息窗口
- en: Creating a draggable marker
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可拖动的标记
- en: Dragging events
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拖动事件
- en: Creating a flat marker
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建平面标记
- en: 'Since you cannot pop up a `div` on top of native Google Maps, the marker features
    are very handy. Some additional scenarios are as listed:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你无法在原生的Google Maps上弹出`div`，因此标记功能非常实用。一些额外的场景如下所示：
- en: '**Touch a marker and go to a page**: You just need to listen to the `plugin.google.maps.event.MARKER_CLICK`
    event and do whatever is needed in the callback function.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触摸标记并跳转到页面**：你只需要监听`plugin.google.maps.event.MARKER_CLICK`事件，并在回调函数中执行所需的任何操作。'
- en: '**Show an avatar/profile image as a marker**: The `addMarker` does take the
    Base64 image string. Thus, you can pass something like this in the argument title—`canvas.toDataURL()`.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示头像/个人图像作为标记**：`addMarker`确实接受Base64图像字符串。因此，你可以在参数标题中传递类似这样的内容——`canvas.toDataURL()`。'
- en: 'Note that Google has a quota on free API usage. For example, you cannot exceed
    one request per second per use, and you can only have a couple of thousand requests
    per day. This quota changes all the time, but it''s important to know about it.
    In any case, if you have problems with your key, you have to go back to the **Credentials**
    page and regenerate the key. In order to change the key manually in your app,
    you have to edit `` `/plugins/ios.json` ``. Look for the following two places:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Google 对免费 API 使用量有限额。例如，您每秒不能超过一个请求，并且每天只能有几千个请求。这个限额会不断变化，但了解这一点很重要。无论如何，如果您遇到密钥问题，您必须回到
    **凭证** 页面并重新生成密钥。为了在您的应用程序中手动更改密钥，您必须编辑 `` `/plugins/ios.json` ``。查找以下两个位置：
- en: '[PRE40]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Along with the following code:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 伴随以下代码：
- en: '[PRE41]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: You just need to edit the `YOUR_IOS_API_KEY_IS_HERE` line and replace it with
    your new key.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需编辑 `YOUR_IOS_API_KEY_IS_HERE` 这一行，并将其替换为您的新的密钥。
- en: There are a lot of ways to work with Google Maps. You can visit the GitHub page
    of the Google Maps plugin to learn more, at [https://github.com/mapsplugin/cordova-plugin-googlemaps](https://github.com/mapsplugin/cordova-plugin-googlemaps).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Google Maps 一起工作有很多种方式。您可以访问 Google Maps 插件的 GitHub 页面了解更多信息，链接为 [https://github.com/mapsplugin/cordova-plugin-googlemaps](https://github.com/mapsplugin/cordova-plugin-googlemaps)。
