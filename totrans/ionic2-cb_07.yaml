- en: Chapter 7. Supporting Device Functionalities Using Ionic Native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following tasks related to native device
    feature support:'
  prefs: []
  type: TYPE_NORMAL
- en: Taking a photo using the camera plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing content using the social sharing plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a term of service using InAppBrowser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Taxi app using the Google Maps plugin and geocode support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to access some common features of a device,
    such as the camera, contact list, e-mail, and maps. Some of these features can
    be written in a JavaScript-only environment, but the performance is not on a par
    with native support.
  prefs: []
  type: TYPE_NORMAL
- en: Cordova has a very well supported community with many plugins. You may want
    to check out [http://plugins.cordova.io/](http://plugins.cordova.io/) to understand
    what is out there. Luckily, you don't need to deal with these plugins directly.
    You will use the Ionic Native ([http://ionicframework.com/docs/v2/native/](http://ionicframework.com/docs/v2/native/))
    service on top of Cordova and Angular 2\. Keep in mind that you have to use Ionic
    Native instead of ngCordova for Ionic 2 because of compatibility issues. You can
    only use ngCordova for Ionic 1.x.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a photo using the camera plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this section, you will make an app to take a picture using the device camera
    or load an existing picture from the device album. The picture could be either
    in the Base64 format or saved in a local filesystem relating to your app. The
    following is a screenshot of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Taking a photo using the camera plugin](img/image00371.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the high-level process:'
  prefs: []
  type: TYPE_NORMAL
- en: Access the Cordova camera plugin to trigger camera capture and get the image
    back in the Base64 or URI format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parse the Base64 data or URI on an `<img>` DOM object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display the URI if it's in the URI format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capture an event of a toggle component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display long data (for example, URI) using horizontal scroll
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should have a physical device ready in order to test the camera capability.
    It's possible to just run the code via an emulator, but the filesystem support
    might look different across the various platforms.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the instructions to add camera support:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start a blank project (for example, `MyCamera`) and go to that folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Cordova camera plugin using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You no longer need to add ngCordova separately. Also, you should not use the
    `cordova add` command line directly; instead but use `ionic plugin add`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You should be able to see a new folder `org.apache.cordova.camera` being added
    in the `/plugins` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Replace `./src/pages/home/home.html` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Since you have only one page, this template will show two buttons and an area
    to display the image.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Replace `./src/pages/home/home.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'There is only one method: `getPicture()`. This method will return the photo
    data so that the template can render.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Replace `/app/pages/home/home.scss` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There are only a few minor changes in the styling so that you can keep them
    simple.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connect your device to your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the Terminal and execute the following command line for iOS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are not able to push the app to your physical device using the preceding
    command line, you can use `ionic run ios --device` to specify the CLI to use the
    physical device instead of a simulator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you want to run the app in your Android device, use the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you run the app and take a picture, you should see the app as shown in
    the following screenshot:![How to do it...](img/image00372.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Camera.getPicture()` is just an abstraction of `navigator.camera.getPicture()`
    from the Cordova camera plugin. If you are already familiar with Cordova or ngCordova
    from Ionic 1, this should be very familiar. Let''s start from the template. You
    have the following two buttons, which trigger the same, `getPicture()`, method:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<button ion-button (click)="getPicture(1)">Show Camera</button>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<button ion-button (click)="getPicture(0)">Show Album</button>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are just different ways to access photos: either from the camera itself
    or from the existing photos in the phone''s album. For the photo to render, you
    need to pass the photo data into the `src` attribute, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that you only want to show this `<img>` tag when `imageData` exists with
    some data. The `imageData` variable could be Base64 or an internal URL of the
    photo. To specify this option, there is a toggle button, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You will use the `useURI` variable inside the class, as illustrated, to determine
    which format to return the photo data in.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Both `useURI` and `sourceType` will be used in the `getPicture()` function,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It's important to adjust the quality, `targetWidth` and `targetHeight` to low
    so that the photo is not too big, which could crash the device, especially when
    it doesn't have enough memory. When you return the Base64 data, it must be prefixed
    with the string `data:image/jpeg;base64`.
  prefs: []
  type: TYPE_NORMAL
- en: One item that isn't discussed here is the ability to post image data to the
    server. The common scenario is to upload the file from the filesystem. It's not
    a good idea to send data as Base64 because of the data size, which is double the
    original binary size.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is possible to create Instagram-like filter effects using just JavaScript.
    You can leverage an existing library, such as Filterous ([https://github.com/girliemac/Filterous](https://github.com/girliemac/Filterous)),
    to modify the image canvas directly.
  prefs: []
  type: TYPE_NORMAL
- en: There is an Instagram plugin ([https://github.com/vstirbu/InstagramPlugin](https://github.com/vstirbu/InstagramPlugin))
    for Cordova on GitHub. You could write some extra code to pass the image to Instagram.
    The user must have Instagram installed on the phone first, though. This idea is
    nice when you plan to do some cool image processing (for example, adding funny
    text) before letting Instagram perform the photo filter operation.
  prefs: []
  type: TYPE_NORMAL
- en: You could even add the Cordova's social network plugin and post the resulting
    images to Twitter or Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing content using the social sharing plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you develop an app with shareable content, you might want to utilize the
    native device feature to share via the device's authorized social media accounts.
    There are several benefits from using this approach. First, users don't need to
    open a separate browser to log in to their social media account each time they
    want to share. Second, all the information can be filled out programmatically,
    such as title, body, link, or image. Finally, since this is a native feature of
    the device, the menu selection allows users to see multiple accounts, which they
    are already familiar with, to choose from. The social sharing plugin can greatly
    enhance the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the app that you will build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing content using the social sharing plugin](img/image00373.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user clicks on the **Share** button, the app will show the following
    native button menu for social media account selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing content using the social sharing plugin](img/image00374.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the user selects Twitter, a popup will show up with all the information
    prefilled, as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing content using the social sharing plugin](img/image00375.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After posting on Twitter, the user goes right back to the app without ever leaving
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should have a physical device or simulator ready in order to test the social
    sharing capability.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start a blank project (for example, `LinkSocialShare`), as follows, and go
    to that folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Cordova camera plugin with the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `./src/pages/home/index.html` and replace its contents with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is a very simple page with the card element. The **Like** button is there
    just for cosmetic reasons without code implementation. However, all the JavaScript
    logic will focus on the **Share** button:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./src/pages/home/home.ts`, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to the Terminal and execute either of the following command lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can start looking at the template because that is where the social media
    content is extracted from. The subject value is from the `#messageSubject` local
    variable, as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding case, the subject is `Ionic Developer` because you will access
    `messageSubject.innerText` later on. `messageSubject` is just referencing your
    H2 DOM node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, the body is from `#messageBody`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user clicks on the **Share** button, it will trigger the `sendShare()`
    method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Let's take a look at your `home.ts` to understand how `sendShare()` works.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to import the `SocialSharing` module from Ionic Native, as
    illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Ionic 2 makes it very convenient because you don't need to install ngCordova
    separately. Ionic Native is actually a default option that comes with the project
    during its creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To share your content and trigger the social media menu, the logic, as shown,
    is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If you want to share a file, you can replace the third parameter (where it is
    `null`) with the URL to the user's local filesystem. This is useful when you want
    people to send a PDF or JPG via e-mail or post it on Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To see the latest update of the Social Share plugin, you can visit the documentation
    page at [http://ionicframework.com/docs/v2/native/social-sharing/](http://ionicframework.com/docs/v2/native/social-sharing/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a term of service using InAppBrowser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many apps, you sometimes require users to accept a term of service before
    they can move on to the next page. The typical approach is to create a popup modal
    or a new page showing the term of service. Once users finish reading, they can
    click on the **Done** or **Back** button. However, if the content of your term
    of service changes, you may need to ask users to update the app. In many cases,
    users don't update apps often. So, the terms of service that they accepted could
    be older than your current version. Therefore, there is a need to maintain term
    of service content separately from the app itself. The InAppBrowser plugin is
    the best solution for this because you can point users to the same Term of Service
    page that is already on your website.
  prefs: []
  type: TYPE_NORMAL
- en: 'The app will just have a simple checkbox and button to demonstrate how InAppBrowser
    works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying a term of service using InAppBrowser](img/image00376.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the user clicks on the **Please agree to our terms** checkbox, they will
    go to the InAppBrowser page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying a term of service using InAppBrowser](img/image00377.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After going through the term of service content, they can click on **Done**
    and go back to the previous page with the **Next** button enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying a term of service using InAppBrowser](img/image00378.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should have a physical device ready in order to test InAppBrowser, as this
    won't work in the browser as an iframe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a blank Ionic app (for example, `OnlineTOS`) and `cd` to that folder,
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the InAppBrowser plugin using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `/config.xml` in the project folder and insert the following two lines
    under `<access origin="*"/>`, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will tell Cordova that it's okay to allow navigation to any website. Otherwise,
    the device security will block InAppBrowser. You can read more about this on the
    Cordova documentation page at [https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-whitelist/](https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-whitelist/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `./src/pages/home/index.html` and replace with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `./src/pages/home/home.ts` and replace with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `./src/pages/home/home.scss` and replace with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is just to provide minor styling to the page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the app in the Terminal using the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s take a look at the `template home.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: There are two areas that you should make a note on. When the `<ion-checkbox>`
    component is clicked on, it will trigger the `openTOS()` method, which will open
    the URL via InAppBrowser. The **Next** button is disabled by default (via the
    `readTOS` variable). So, when the user checks the checkbox, this `readTOS` will
    be `True` and the button will be enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `home.ts`, you must import the `InAppBrowser` module first, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This will make the `InAppBrowser` object available for use in your class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the `openTOS()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have to wrap everything inside `platform.ready()` because sometimes Cordova
    plugin loads more slowly than the app itself and it will cause an error if the
    user clicks on the button too fast to trigger it InAppBrowser.
  prefs: []
  type: TYPE_NORMAL
- en: 'To trigger InAppBrowser, you just need to call `InAppBrowser.open` and pass
    the following three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The URL to load.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The target to open the URL. There are four options only—`_self`, `_blank`, and
    `_system`. `_self` will overwrite your current Ionic app; thus, you should never
    need to use this option. `_blank` is typically what you want because it leaves
    you a way to come back to your app. Finally, `_system` opens a separate browser
    outside the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Options is the last parameter where you have to pass a string. You can visit
    the official document for more information ([https://github.com/apache/cordova-plugin-inappbrowser#cordovainappbrowseropen](https://github.com/apache/cordova-plugin-inappbrowser#cordovainappbrowseropen)).
    In general, you just need to set `location=true` so that the user can see the
    current URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Android and iOS have different options; so, you should check the GitHub page
    to compare the different platforms.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: InAppBrowser also has an `exit` event, where you can listen via `ref.on()`.
    This is useful when you want to pop up a Thank You dialog or record an event (via
    the REST API to your server).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To stay up to date with the latest changes in InAppBrowser, you can visit [https://github.com/apache/cordova-plugin-inappbrowser](https://github.com/apache/cordova-plugin-inappbrowser)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Official support for Ionic Native's InAppBrowser is located at [http://ionicframework.com/docs/v2/native/inappbrowser/](http://ionicframework.com/docs/v2/native/inappbrowser/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Taxi app using the Google Maps plugin and geocode support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, many mobile apps utilize different mapping features, such as showing
    the current location, creating routes, and providing suggestive business searches.
    This section will show you how to use Ionic Native's Google Maps plugin to provide
    mapping support.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will create a Taxi app that can do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Display Google Maps in fullscreen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a button overlay on top of the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detect the current device location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a marker with any text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is the screenshot of the Taxi app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Taxi app using the Google Maps plugin and geocode support](img/image00379.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When users click on the **PICK ME UP** button, it will go to the current device
    location and show longitude and latitude information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Taxi app using the Google Maps plugin and geocode support](img/image00380.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It is possible to use the HTML5 and JavaScript version of geolocation and maps
    instead of the Cordova plugin's. However, you will see a negative impact on performance.
    It's very obvious that if you use the SDK, map rendering and optimization tends
    to be faster. In addition, HTML5 geolocation sometimes has some strange bugs that
    require the user to accept permission twice—once for the app and once for the
    inside browser object.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Google Maps plugin requires a Google Maps API key for your project. You
    need a Google account and login to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Google APIs Console at [https://code.google.com/apis/console/](https://code.google.com/apis/console/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a project if you don't have one yet. Just fill in the required fields:![Getting
    ready](img/image00381.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to enable the **Google Maps SDK for iOS**, the **Google Maps Android
    API**, or both. It depends on how many platforms you plan to support. Let's select
    **Google Maps SDK for iOS** for this example:![Getting ready](img/image00382.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Enable API** button:![Getting ready](img/image00383.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Credentials** to create your own key:![Getting ready](img/image00384.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create credential** | **API key** option:![Getting ready](img/image00385.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the restriction option. In the following example, you will select the
    **iOS apps** radio button:![Getting ready](img/image00386.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in your app's Bundle ID. You might not know exactly what it is yet because
    Ionic will create a random ID. So just put in `com.ionicframework.starter` and
    change that later.![Getting ready](img/image00387.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you should see the key for the iOS applications section as follows:![Getting
    ready](img/image00388.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the API key so that you can use it to add the Cordova Google Maps plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start an Ionic project from scratch and add Google Maps features, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a blank Ionic project, as shown, and go to that folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the iOS platform with version 3.9.0 with the following command lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You have to pick `ios@3.9.0` specifically because the current version of the
    Cordova Google Maps plugin only works with this version. Otherwise, your build
    will fail. You should experiment with the newest version if possible.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Install the Google Maps plugin with your copied key replacing `` `YOUR_IOS_API_KEY_IS_HERE
    ``, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you do this for both iOS and Android, use the following command line:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You have to use the Cordova CLI here because using the Ionic CLI to add Google
    Maps with the API Key will not work.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `./src/pages/home/home.html` to modify your template, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The main element here is your `div` with `map` ID because that is where you
    have to inject the Google Maps object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit your `./src/pages/home/home.ts` in the same folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, make some minor adjustments to the stylesheet so that the map can
    take over the fullscreen. Edit `./src/pages/home/home.scss`, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the app in the Terminal with the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can use either one of the preceding command lines, depending on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The core of this app is mainly in the JavaScript code—`home.ts`. In order to
    use the plugin object, you should declare it on top, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'While it might seem that there are a lot of moving parts, the basic flow is
    very simple, as listed:'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever Ionic and Cordova are ready, trigger `platform.ready().then` to initialize
    the map by calling `showMap()` in the constructor of the `HomePage`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a user clicks on the button, the app will call `getMyLocation` to get the
    location data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The data will be used to create the marker and move the map's camera to center
    on that location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's important to know that `plugin.google.maps.Map.getMap` does take some time
    to process, and it will trigger a *ready* event once it has successfully created
    the map. That's why you need to add an event listener for `plugin.google.maps.event.MAP_READY`.
    This example does not do anything right after the map is ready, but later, you
    could add more processing functions, such as jumping to the current location automatically
    or adding more markers on top of the map.
  prefs: []
  type: TYPE_NORMAL
- en: When the user clicks on the `PICK ME UP` button, it will trigger the `getMyLocation()`
    method. The location object returned will contain the latitude (`location.latLng.lat`)
    and longitude (`location.latLng.lng`). To move the camera anywhere, just call
    `map.moveCamera` by passing the location coordinate (`location.latLng`). To add
    a marker, call `map.addMarker` with the position and title as HTML.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Cordova Google Maps plugin has many more features, such as the following
    ones:'
  prefs: []
  type: TYPE_NORMAL
- en: Showing an InfoWindow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a marker with multiple lines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Base64-encoded icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicking on a marker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicking on an InfoWindow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a draggable marker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dragging events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a flat marker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since you cannot pop up a `div` on top of native Google Maps, the marker features
    are very handy. Some additional scenarios are as listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Touch a marker and go to a page**: You just need to listen to the `plugin.google.maps.event.MARKER_CLICK`
    event and do whatever is needed in the callback function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show an avatar/profile image as a marker**: The `addMarker` does take the
    Base64 image string. Thus, you can pass something like this in the argument title—`canvas.toDataURL()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that Google has a quota on free API usage. For example, you cannot exceed
    one request per second per use, and you can only have a couple of thousand requests
    per day. This quota changes all the time, but it''s important to know about it.
    In any case, if you have problems with your key, you have to go back to the **Credentials**
    page and regenerate the key. In order to change the key manually in your app,
    you have to edit `` `/plugins/ios.json` ``. Look for the following two places:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Along with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: You just need to edit the `YOUR_IOS_API_KEY_IS_HERE` line and replace it with
    your new key.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of ways to work with Google Maps. You can visit the GitHub page
    of the Google Maps plugin to learn more, at [https://github.com/mapsplugin/cordova-plugin-googlemaps](https://github.com/mapsplugin/cordova-plugin-googlemaps).
  prefs: []
  type: TYPE_NORMAL
