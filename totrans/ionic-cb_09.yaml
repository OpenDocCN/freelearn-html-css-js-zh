- en: Advanced Topics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级主题
- en: 'In this chapter, we will cover some advanced topics, as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖一些高级主题，如下所示：
- en: Lazy loading pages in Ionic
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Ionic 中懒加载页面
- en: Internationalization (i18n) using `ngx-translate`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `ngx-translate` 进行国际化（i18n）
- en: Creating documentation for Ionic apps
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Ionic 应用程序创建文档
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will work on some advanced topics related to Ionic apps,
    such as lazy loading pages for performance, deep linking Ionic pages, and adding
    a multiple languages feature and creating documentation for Ionic apps.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一些与 Ionic 应用程序相关的高级主题，例如为了性能而懒加载页面、深度链接 Ionic 页面，以及添加多语言功能和为 Ionic
    应用程序创建文档。
- en: Lazy loading in Ionic
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic 中的懒加载
- en: Web applications have become bigger and more complex day by day. We have a web
    version of Photoshop now, and there are even more complex applications that exist
    on the web. The web was not conceived for these kinds of applications. If your
    application is very big, and you are loading your whole application at the first
    load, chances are that your application has bad performance. What if you can load
    only that part of JavaScript that is required for that particular page/view? This
    is where lazy loading comes in. Lazy loading is the process of loading only part
    of an application that a user wants to see. You can lazy load not only JavaScript
    but also CSS.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，Web 应用程序变得越来越庞大和复杂。现在我们有了 Photoshop 的 Web 版本，甚至还有更多复杂的 Web 应用程序。Web
    并不是为了这些类型的应用程序而设计的。如果你的应用程序非常大，并且在第一次加载时加载了整个应用程序，那么你的应用程序可能性能不佳。如果你只能加载特定页面/视图所需的
    JavaScript 部分，那会怎么样？这就是懒加载的用武之地。懒加载是仅加载用户想要看到的应用程序部分的过程。你可以懒加载的不仅仅是 JavaScript，还可以是
    CSS。
- en: In Angular, you can do lazy loading using router configuration. However, Ionic
    doesn't have Angular router or router config. In this recipe, you will learn how
    to do lazy loading in Ionic.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 中，你可以通过路由配置进行懒加载。然而，Ionic 没有Angular 路由或路由配置。在本教程中，你将学习如何在 Ionic 中进行懒加载。
- en: Getting ready
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: You can test your app in the browser because lazy loading is not dependent on
    the device.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在浏览器中测试你的应用程序，因为懒加载不依赖于设备。
- en: How to do it...
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'The following are the instructions for lazy loading:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为懒加载的说明：
- en: 'Create a new app `LazyLoading` using the `blank` template and navigate to the
    Lazy Loading folder, as follows:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `blank` 模板创建一个新的应用程序 `LazyLoading` 并导航到懒加载文件夹，如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a new file named `home.module.ts` inside the `/src/pages/home` folder,
    and add the following content to it:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/src/pages/home` 文件夹内创建一个名为 `home.module.ts` 的新文件，并将以下内容添加到其中：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the `IonicPage` decorator to the HomePage''s Component, as follows:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `IonicPage` 装饰器添加到 HomePage 组件中，如下所示：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a `/src/pages/second/second.ts` file and add the following content:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `/src/pages/second/second.ts` 文件，并添加以下内容：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a `/src/pages/second/second.html` file with the following content:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `/src/pages/second/second.html` 文件，并添加以下内容：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create the `/src/pages/second/second.module.ts` file with the following content:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `/src/pages/second/second.module.ts` 文件，并添加以下内容：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open `/src/app/app.component.ts` and update the value of `rootPage`, as follows:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `/src/app/app.component.ts` 并按照以下方式更新 `rootPage` 的值：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open `/src/app/app.module.ts` and update it as follows:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `/src/app/app.module.ts` 并按照以下方式更新它：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, run the app using the following command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下命令运行应用程序：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The idea of lazy loading is the same as any other type of technology. However,
    the implementation of Ionic is very different, even if you compare it with Angular's
    lazy loading.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 懒加载的想法与其他任何类型的技术相同。然而，Ionic 的实现与 Angular 的懒加载相比非常不同。
- en: 'First, you need to create a feature module for the Ionic Page that you want
    to lazy load. In our case, we created `home.module.ts`. It looks as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要为想要懒加载的 Ionic 页面创建一个功能模块。在我们的例子中，我们创建了 `home.module.ts`。它看起来如下所示：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It's a feature module where a declarations array has `HomePage`, and we use
    the `IonicPageModule.forChild` method in the imports array with `HomePage` as
    an input to it so that we can access `Ionic` inside HomePage.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个功能模块，其中声明数组包含 `HomePage`，我们在导入数组中使用 `IonicPageModule.forChild` 方法，并将 `HomePage`
    作为输入，以便我们可以在 `HomePage` 内部访问 `Ionic`。
- en: 'Secondly, we need to decorate our `HomePage` class using the `IonicPage` decorator
    in `home.ts`, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们需要在 `home.ts` 中使用 `IonicPage` 装饰器装饰我们的 `HomePage` 类，如下所示：
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, we need to substitute `HomePage` to `''HomePage''` (in quotes) to
    make lazy loading possible. For example, whenever we want to push `HomePage` to
    navigation stack, we would call the `push` function, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '`navCtrl.push(''HomePage'');` instead of:`navCtrl.push(HomePage);`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Also, we need to remove any import of the page that we are lazily loading. Owing
    to this, we had to remove reference to `HomePage` from `app.module.ts`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you configure lazy loading for Ionic application, you are also adding one
    more feature, that is, access to pages using URL. Along with deep linking Cordova
    plugin and this feature, you can easily implement deep linking for Ionic applications—think
    of this as an exercise.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: You can find the link to deep linking plugin at [https://github.com/BranchMetrics/cordova-ionic-phonegap-branch-deep-linking](https://github.com/BranchMetrics/cordova-ionic-phonegap-branch-deep-linking).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Check out more on lazy loading in this blog post at [https://webpack.js.org/guides/lazy-loading/](https://webpack.js.org/guides/lazy-loading/).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Internationalization (i18n) using ngx-translate
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having English as the primary language for your application is good. However,
    chances are that there are people who don't know English who may use your application.
    It's good to have multiple languages for using application. This is called as
    internationalization of application. In this part, we will use the `ngx-translate`
    library of Angular to implement the multiple language features in the Ionic application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the app looks like:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc769d59-4e12-4afa-ab0b-9f2d83d57342.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can run this application inside the browser.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the instructions to do it:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `TranslateApp` using the `blank` template and navigate inside
    the folder, as follows:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Install `ngx-translate/core` and `ngx-translate/http-loader`, as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create the `en.json` file inside the `/src/assets/i18n` folder and add the
    following content:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create the `de.json` file inside the `/src/assets/i18n` folder and add the
    following content:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open `/src/pages/home/home.html` and update it as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Open `/src/pages/home/home.ts` and update it as follows:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open `app.module.ts` inside the `/src/app` folder and update it as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Run the app, as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we are using `ngx-translate` for internationalization. It's
    a fairly simple process. The basic idea is that we have a `JSON` file for each
    of the languages that we want to support in our app. For example, `en.json` for
    English and `de.json` for German. In the JSON file, we have keys and values. Values
    are translated texted that we want to show in our app, and keys are something
    that we are going to put inside the app.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s also important that we need to have the same keys for multiple languages
    and different values based on the translation. Take a look at the following two
    JSON files:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '`en.json`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`de.json`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Both files have two key-value pairs, keys are same but the values are different.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个文件都有两个键值对，键相同但值不同。
- en: 'Now, in our templates, we use those two keys:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们的模板中，我们使用这两个键：
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We use Angular interpolation and add the key with quotes here along with the
    `translate` pipe, which comes from the `ngx-translate` library. Basically, it
    transforms the `key` into the correct `value` based on the selected language.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Angular 插值并在这里添加带有引号的键，以及来自 `ngx-translate` 库的 `translate` 管道。基本上，它根据所选语言将
    `key` 转换为正确的 `value`。
- en: To change the language, we use `TranslateService` from `ngx-translate`. It has
    the `setDefault` method to set the default language, and the `use` method to switch
    language. So, in our `home.html`, when a user switches the language using `ion-select`,
    we call our `setLang` function, which under the hood calls the TranslateService's
    `use` method with the appropriate language code, such as *en* or *de*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改语言，我们使用来自 `ngx-translate` 的 `TranslateService`。它有 `setDefault` 方法来设置默认语言，以及
    `use` 方法来切换语言。所以，在我们的 `home.html` 中，当用户使用 `ion-select` 切换语言时，我们调用我们的 `setLang`
    函数，该函数底层调用 TranslateService 的 `use` 方法，并传入适当的语言代码，如 *en* 或 *de*。
- en: Finally, we also need to configure `ngx-translate` in `app.module.ts`. We need
    to import `TranslateModule.forRoot()` in the root `NgModule` of the application.
    We also have to configure the loader for `TranslateModule`. Here, we are using
    `TranslateHttpLoader` to load translations from `/assets/i18n/[lang].json` were
    lang code is alphabetic language code such `en` for English.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还需要在 `app.module.ts` 中配置 `ngx-translate`。我们需要在应用的根 `NgModule` 中导入 `TranslateModule.forRoot()`。我们还得配置
    `TranslateModule` 的加载器。在这里，我们使用 `TranslateHttpLoader` 从 `/assets/i18n/[lang].json`
    加载翻译，其中 lang code 是字母语言代码，例如 `en` 代表英语。
- en: 'It''s also important to note that in order to use **AOT** (**Ahead of Time**)
    compilation, we will need to use factory function, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，为了使用 **AOT**（**提前编译**），我们需要使用工厂函数，如下所示：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'So, the configuration looks as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，配置如下所示：
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: See also
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考信息
- en: Check out the documentation for `ngx-translate`, at [https://github.com/ngx-translate/core](https://github.com/ngx-translate/core).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 查看关于 `ngx-translate` 的文档，请访问 [https://github.com/ngx-translate/core](https://github.com/ngx-translate/core)。
- en: Creating documentation for Ionic app
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Ionic 应用的文档
- en: So far, we have added things and features which are targeted at the user of
    the application. In this recipe, we will add the ability to generate documentation
    from source code using TSDocs, Gulp, and Ionic CLI Hooks. Documentation is a very
    important aspect of the developer experience. I personally believe that it should
    be part of Ionic by default.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经添加了一些针对应用用户的功能和特性。在这个配方中，我们将添加从源代码生成文档的能力，使用 TSDocs、Gulp 和 Ionic CLI
    Hooks。文档是开发者体验的一个重要方面。我个人认为，它应该是 Ionic 的默认部分。
- en: 'This is how the documentation will look like:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是文档将呈现的样子：
- en: '![](img/71bb74da-9c1a-42cb-97e3-7f5d5906334d.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71bb74da-9c1a-42cb-97e3-7f5d5906334d.png)'
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You can run this inside the browser.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在浏览器中运行此操作。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following are the instructions to create the example app:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何创建示例应用的说明：
- en: 'Create a new `DocApp` using a `blank` template and navigate inside the folder,
    as follows:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `blank` 模板创建一个新的 `DocApp` 并在文件夹内导航，如下所示：
- en: '[PRE24]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Install the following `npm` dev dependencies for using `typedoc`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装以下 `npm` 开发依赖以使用 `typedoc`：
- en: '[PRE25]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create `gulpfile.js` in the `root` directory of the app and add the following
    content:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用的 `root` 目录中创建 `gulpfile.js` 并添加以下内容：
- en: '[PRE26]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Open `/src/pages/home/home.ts` and update it as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `/src/pages/home/home.ts` 并按照以下方式更新：
- en: '[PRE27]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Run the app, as follows:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用，如下所示：
- en: '[PRE28]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We are using `TypeDoc`, which is a documentation generator for a TypeScript
    application. It uses TSDoc comments, which are very similar to the popular JSDoc.
    All of the magic work is done in `gulpfile.js`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用 `TypeDoc`，这是一个用于 TypeScript 应用的文档生成器。它使用 TSDoc 注释，与流行的 JSDoc 非常相似。所有的魔法工作都是在
    `gulpfile.js` 中完成的。
- en: First, we have a typedoc task. Basically, it takes all TypeScript src files
    using `gulp.src(["src/**/*.ts"])` and pipe it to typedoc. Then, typedoc generates
    the documentation based on the class's structure and TSDoc comments in the file.
    You can learn about the configuration about TypeDoc from their website at [http://typedoc.org](http://typedoc.org).
    Basically, here we are configuring site title, the location of docs, and the bunch
    of other things.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有一个 typedoc 任务。基本上，它使用 `gulp.src(["src/**/*.ts"])` 选取所有 TypeScript 源文件并将其管道传输到
    typedoc。然后，typedoc 根据文件中的类结构和 TSDoc 注释生成文档。你可以从他们的网站 [http://typedoc.org](http://typedoc.org)
    了解有关 TypeDoc 的配置信息。基本上，这里我们正在配置站点标题、文档位置以及其他一些事情。
- en: 'If you take a look inside `home.ts`, we have `dummyFunction`, which looks as
    follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看 `home.ts` 文件内部，我们有一个 `dummyFunction`，其看起来如下：
- en: '[PRE29]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The comments before the function are the TSDoc comments. They have a specific
    structure that we need to learn and with the help of these comments we can generate
    meaningful documentation.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 函数之前的注释是 TSDoc 注释。它们具有特定的结构，我们需要学习和掌握，借助这些注释我们可以生成有意义的文档。
- en: Finally, we run a gulp task, `gulp serve:docs`, in the terminal, which generate
    and serves the docs using a web server in the browser.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在终端中运行一个 gulp 任务，`gulp serve:docs`，它使用浏览器中的网络服务器生成并提供服务文档。
- en: See also
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: You can also make it work along with Ionic CLI, as generating docs while serving
    the app using Ionic serve. Take a look at Ionic CLI Hooks at [https://ionicframework.com/docs/cli/configuring.html#hooks](https://ionicframework.com/docs/cli/configuring.html#hooks).
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你也可以让它与 Ionic CLI 一起工作，在用 Ionic serve 提供应用服务的同时生成文档。查看 [https://ionicframework.com/docs/cli/configuring.html#hooks](https://ionicframework.com/docs/cli/configuring.html#hooks)
    中的 Ionic CLI Hooks。
- en: Learn more on TSDoc at [https://github.com/Microsoft/tsdoc](https://github.com/Microsoft/tsdoc).
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [https://github.com/Microsoft/tsdoc](https://github.com/Microsoft/tsdoc) 了解更多关于
    TSDoc 的信息。
