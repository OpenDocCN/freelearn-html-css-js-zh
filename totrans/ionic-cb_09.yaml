- en: Advanced Topics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover some advanced topics, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Lazy loading pages in Ionic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internationalization (i18n) using `ngx-translate`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating documentation for Ionic apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will work on some advanced topics related to Ionic apps,
    such as lazy loading pages for performance, deep linking Ionic pages, and adding
    a multiple languages feature and creating documentation for Ionic apps.
  prefs: []
  type: TYPE_NORMAL
- en: Lazy loading in Ionic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications have become bigger and more complex day by day. We have a web
    version of Photoshop now, and there are even more complex applications that exist
    on the web. The web was not conceived for these kinds of applications. If your
    application is very big, and you are loading your whole application at the first
    load, chances are that your application has bad performance. What if you can load
    only that part of JavaScript that is required for that particular page/view? This
    is where lazy loading comes in. Lazy loading is the process of loading only part
    of an application that a user wants to see. You can lazy load not only JavaScript
    but also CSS.
  prefs: []
  type: TYPE_NORMAL
- en: In Angular, you can do lazy loading using router configuration. However, Ionic
    doesn't have Angular router or router config. In this recipe, you will learn how
    to do lazy loading in Ionic.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can test your app in the browser because lazy loading is not dependent on
    the device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the instructions for lazy loading:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new app `LazyLoading` using the `blank` template and navigate to the
    Lazy Loading folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new file named `home.module.ts` inside the `/src/pages/home` folder,
    and add the following content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `IonicPage` decorator to the HomePage''s Component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `/src/pages/second/second.ts` file and add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `/src/pages/second/second.html` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `/src/pages/second/second.module.ts` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `/src/app/app.component.ts` and update the value of `rootPage`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `/src/app/app.module.ts` and update it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the app using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The idea of lazy loading is the same as any other type of technology. However,
    the implementation of Ionic is very different, even if you compare it with Angular's
    lazy loading.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to create a feature module for the Ionic Page that you want
    to lazy load. In our case, we created `home.module.ts`. It looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: It's a feature module where a declarations array has `HomePage`, and we use
    the `IonicPageModule.forChild` method in the imports array with `HomePage` as
    an input to it so that we can access `Ionic` inside HomePage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Secondly, we need to decorate our `HomePage` class using the `IonicPage` decorator
    in `home.ts`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to substitute `HomePage` to `''HomePage''` (in quotes) to
    make lazy loading possible. For example, whenever we want to push `HomePage` to
    navigation stack, we would call the `push` function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`navCtrl.push(''HomePage'');` instead of:`navCtrl.push(HomePage);`'
  prefs: []
  type: TYPE_NORMAL
- en: Also, we need to remove any import of the page that we are lazily loading. Owing
    to this, we had to remove reference to `HomePage` from `app.module.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you configure lazy loading for Ionic application, you are also adding one
    more feature, that is, access to pages using URL. Along with deep linking Cordova
    plugin and this feature, you can easily implement deep linking for Ionic applicationsâ€”think
    of this as an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the link to deep linking plugin at [https://github.com/BranchMetrics/cordova-ionic-phonegap-branch-deep-linking](https://github.com/BranchMetrics/cordova-ionic-phonegap-branch-deep-linking).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Check out more on lazy loading in this blog post at [https://webpack.js.org/guides/lazy-loading/](https://webpack.js.org/guides/lazy-loading/).
  prefs: []
  type: TYPE_NORMAL
- en: Internationalization (i18n) using ngx-translate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having English as the primary language for your application is good. However,
    chances are that there are people who don't know English who may use your application.
    It's good to have multiple languages for using application. This is called as
    internationalization of application. In this part, we will use the `ngx-translate`
    library of Angular to implement the multiple language features in the Ionic application.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the app looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc769d59-4e12-4afa-ab0b-9f2d83d57342.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can run this application inside the browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the instructions to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `TranslateApp` using the `blank` template and navigate inside
    the folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Install `ngx-translate/core` and `ngx-translate/http-loader`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `en.json` file inside the `/src/assets/i18n` folder and add the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `de.json` file inside the `/src/assets/i18n` folder and add the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `/src/pages/home/home.html` and update it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `/src/pages/home/home.ts` and update it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `app.module.ts` inside the `/src/app` folder and update it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we are using `ngx-translate` for internationalization. It's
    a fairly simple process. The basic idea is that we have a `JSON` file for each
    of the languages that we want to support in our app. For example, `en.json` for
    English and `de.json` for German. In the JSON file, we have keys and values. Values
    are translated texted that we want to show in our app, and keys are something
    that we are going to put inside the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s also important that we need to have the same keys for multiple languages
    and different values based on the translation. Take a look at the following two
    JSON files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`en.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`de.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Both files have two key-value pairs, keys are same but the values are different.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in our templates, we use those two keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We use Angular interpolation and add the key with quotes here along with the
    `translate` pipe, which comes from the `ngx-translate` library. Basically, it
    transforms the `key` into the correct `value` based on the selected language.
  prefs: []
  type: TYPE_NORMAL
- en: To change the language, we use `TranslateService` from `ngx-translate`. It has
    the `setDefault` method to set the default language, and the `use` method to switch
    language. So, in our `home.html`, when a user switches the language using `ion-select`,
    we call our `setLang` function, which under the hood calls the TranslateService's
    `use` method with the appropriate language code, such as *en* or *de*.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we also need to configure `ngx-translate` in `app.module.ts`. We need
    to import `TranslateModule.forRoot()` in the root `NgModule` of the application.
    We also have to configure the loader for `TranslateModule`. Here, we are using
    `TranslateHttpLoader` to load translations from `/assets/i18n/[lang].json` were
    lang code is alphabetic language code such `en` for English.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s also important to note that in order to use **AOT** (**Ahead of Time**)
    compilation, we will need to use factory function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'So, the configuration looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Check out the documentation for `ngx-translate`, at [https://github.com/ngx-translate/core](https://github.com/ngx-translate/core).
  prefs: []
  type: TYPE_NORMAL
- en: Creating documentation for Ionic app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have added things and features which are targeted at the user of
    the application. In this recipe, we will add the ability to generate documentation
    from source code using TSDocs, Gulp, and Ionic CLI Hooks. Documentation is a very
    important aspect of the developer experience. I personally believe that it should
    be part of Ionic by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the documentation will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71bb74da-9c1a-42cb-97e3-7f5d5906334d.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can run this inside the browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the instructions to create the example app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `DocApp` using a `blank` template and navigate inside the folder,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the following `npm` dev dependencies for using `typedoc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `gulpfile.js` in the `root` directory of the app and add the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `/src/pages/home/home.ts` and update it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are using `TypeDoc`, which is a documentation generator for a TypeScript
    application. It uses TSDoc comments, which are very similar to the popular JSDoc.
    All of the magic work is done in `gulpfile.js`.
  prefs: []
  type: TYPE_NORMAL
- en: First, we have a typedoc task. Basically, it takes all TypeScript src files
    using `gulp.src(["src/**/*.ts"])` and pipe it to typedoc. Then, typedoc generates
    the documentation based on the class's structure and TSDoc comments in the file.
    You can learn about the configuration about TypeDoc from their website at [http://typedoc.org](http://typedoc.org).
    Basically, here we are configuring site title, the location of docs, and the bunch
    of other things.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you take a look inside `home.ts`, we have `dummyFunction`, which looks as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The comments before the function are the TSDoc comments. They have a specific
    structure that we need to learn and with the help of these comments we can generate
    meaningful documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we run a gulp task, `gulp serve:docs`, in the terminal, which generate
    and serves the docs using a web server in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also make it work along with Ionic CLI, as generating docs while serving
    the app using Ionic serve. Take a look at Ionic CLI Hooks at [https://ionicframework.com/docs/cli/configuring.html#hooks](https://ionicframework.com/docs/cli/configuring.html#hooks).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on TSDoc at [https://github.com/Microsoft/tsdoc](https://github.com/Microsoft/tsdoc).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
