["```js\nnew THREE.PlaneGeometry(width, height, widthSegments, heightSegments)\n```", "```js\nconst deg2rad = (degrees) => (degrees * Math.PI) / 180\nconst rad2deg = (radians) => (radians * 180) / Math.PI\n```", "```js\nnew THREE.CircleGeometry(3, 12)\n```", "```js\nnew THREE.CircleGeometry(3, 12, 0, Math.PI);\n```", "```js\nmesh.rotation.x =- Math.PI/2;\n```", "```js\nconst drawShape = () => {\n  // create a basic shape\n  const shape = new THREE.Shape()\n  // startpoint\n  // straight line upwards\n  shape.lineTo(10, 40)\n  // the top of the figure, curve to the right\n  shape.bezierCurveTo(15, 25, 25, 25, 30, 40)\n  // spline back down\n  shape.splineThru([new THREE.Vector2(32, 30), new\n    THREE.Vector2(28, 20), new THREE.Vector2(30, 10)])\n  // add 'eye' hole one\n  const hole1 = new THREE.Path()\n  hole1.absellipse(16, 24, 2, 3, 0, Math.PI * 2, true)\n  shape.holes.push(hole1)\n  // add 'eye hole 2'\n  const hole2 = new THREE.Path()\n  hole2.absellipse(23, 24, 2, 3, 0, Math.PI * 2, true)\n  shape.holes.push(hole2)\n  // add 'mouth'\n  const hole3 = new THREE.Path()\n  hole3.absarc(20, 16, 2, 0, Math.PI, true)\n  shape.holes.push(hole3)\n  return shape\n}\n```", "```js\nnew THREE.ShapeGeometry(drawShape())\n```", "```js\nnew THREE.BoxGeometry(10,10,10);\n```", "```js\nconst vertices = [\n 1,  1,  1,\n-1, -1,  1,\n-1,  1, -1,\n 1, -1, -1\n];\nconst indices = [\n2,  1,  0,\n0,  3,  2,\n1,  3,  0,\n2,  3,  1\n];\nnew THREE.PolyhedronBufferGeometry(vertices, indices, radius, detail)\n```"]