- en: Deployments with the Update Sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be looking at how to use update sets. Update sets are
    a big part of ServiceNow and move new functionality from non-production instances
    to production instances with minimal risk. We will look at when and how to use
    update sets, as well as how to use them to transfer functionality from one instance
    to another. After this, we will explore pitfalls to be avoided and best practices
    for update sets.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: When to use update sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use scope with update sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transferring update sets between instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update set pitfalls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update set best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When to use update sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Update sets are used in ServiceNow to move functionality from one instance to
    another. If you are making some changes in a development instance which you would
    like to later move to a production instance, then update sets are recommended.
  prefs: []
  type: TYPE_NORMAL
- en: An update set captures changes that you make to an instance, inside the update
    set, while they are being made. Once all the changes that you would like captured
    are finished, the update set is complete and is ready to be moved to another instance.
    When moved to another instance, the update set can be previewed to check that
    the changes are compatible with the instance and committed to apply the changes.
  prefs: []
  type: TYPE_NORMAL
- en: Before making any changes that you intend to move to another instance, your
    first task should be to create a new update set to contain those changes. Before
    you start making changes, ensure that you are working inside the update set. Once
    the updates are complete, complete the update set that is ready to move to another
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: How to use scope with update sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using update sets, we need to remember what scope we are currently working
    in. Before we use any kind of scope in an instance, we are in the global scope,
    and before we create any update sets in an instance, we are in the default update
    set.
  prefs: []
  type: TYPE_NORMAL
- en: If we are not in a created update set, then we will also be in the default update
    set. However, there is a different default update set for each scope in a ServiceNow
    instance. This is important to know so that if you do switch scopes, then your
    update set automatically changes, as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see this change in the update set picker if we change the scope we are
    working on in an instance. In *Figure 11.1*, we can see an instance in the Global
    scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c514327-d286-4872-8b70-0ce942066cc4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: Application and update set picker in the global scope'
  prefs: []
  type: TYPE_NORMAL
- en: Because we are in the Global scope, the default update set selected for us is
    the default update set for the Global scope. We can see that this is shown to
    us by the ServiceNow instance by the text inside the square brackets in the update
    set picker.
  prefs: []
  type: TYPE_NORMAL
- en: If we change only the application, and, therefore, the scope, we can see the
    change in the update picker, too. Let's change the application to Guided Setup
    as an example, to see the change.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see these changes in *Figure 11.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f280dff-ef1a-4021-969e-2ff454cedafe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: Application and update set picker in the guided setup scope'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the update set is automatically changed for us. This means that
    there can be a number of different default update sets in an instance, and each
    application will have its own.
  prefs: []
  type: TYPE_NORMAL
- en: The example brings us nicely on to another point about using update sets in
    different scopes. Each update set can only exist in a single scope. Before creating
    an update set, ensure that you are currently in the correct scope, so that changes
    you make can be added to the update set. Once created, ServiceNow security stops
    anyone from writing to the application field of an update set. This is set by
    a security rule and should not be amended.
  prefs: []
  type: TYPE_NORMAL
- en: Transferring update sets between instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once an update set has been completed, it is ready to be transferred to another
    instance.  Transferring update sets between instances takes a few steps, and once
    initially set up, it can be a quick process.
  prefs: []
  type: TYPE_NORMAL
- en: To start the process of moving an update set between two instances, we first
    need to log in to the instance we want to move the update set to, or the destination
    instance. Then we navigate to System Update Sets | Update Sources and click New.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the new update source screen in *Figure 11.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc6f5d76-370e-42e2-8763-bbb75457e2c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.3: New update source form'
  prefs: []
  type: TYPE_NORMAL
- en: On this form, there are some key fields to fill in. Let's start with the mandatory
    fields first: Name and URL. The Name field is exactly that – a name to give to
    our update source so a system admin can easily recognize this update source. This
    is often the name of the instance we are taking the update set from, or the source
    instance. The URL field needs to be the URL of the source instance in the format
    `<instance_name>.service-now.com`.
  prefs: []
  type: TYPE_NORMAL
- en: The other important fields on this form are the Username and Password fields.
    These need to be a username and password for the source instance, and the account
    has to be an admin account for that instance.
  prefs: []
  type: TYPE_NORMAL
- en: The Type and Short description fields can also be filled in to add extra labels
    to help identify the update source. Once the form is complete, click Test connection
    to ensure that the source instance can be accessed. If the connection fails, you
    may need to check the information you provided and make sure the source instance
    can be accessed and does not have any IP access controls that could be causing
    a failure.
  prefs: []
  type: TYPE_NORMAL
- en: If the connection is a success, then the form can be saved. Once an update source
    has been saved, we can then start to bring in update sets from the source instance.
    A related link called Retrieve Completed Update Sets is now available to click.
    Once this is selected, all completed update sets will be transferred to the destination
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to complete any update sets you want to move to another instance, as
    incomplete update sets will not be moved.
  prefs: []
  type: TYPE_NORMAL
- en: To see the update sets that have been moved to the destination instance, we
    can navigate to System Update Sets | Retrieved Update Sets. Now that the update
    set exists in the destination instance, we need to apply the customization to
    the destination instance, too.
  prefs: []
  type: TYPE_NORMAL
- en: The update sets that have been retrieved should have been automatically previewed;
    however, in older instances, this may not be the case, and it may need to be done
    manually. Sometimes a preview may bring up some warnings or errors that need to
    be reviewed before an update set can be committed. This can mean that there are
    missing tables or that a newer update for a particular customization exists on
    the destination instance. Most of the time, these errors and warnings still end
    up with the remote update being accepted and committed, but review each one to
    ensure you should be committing all the updates.
  prefs: []
  type: TYPE_NORMAL
- en: Once the preview process is complete, you can commit your update set. This will
    add all of the customizations in the update set from the source instance to the
    destination instance, excluding any marked to skip as part of the preview process.
  prefs: []
  type: TYPE_NORMAL
- en: When the commit is complete, you have successfully transferred an update set
    from one instance to another.
  prefs: []
  type: TYPE_NORMAL
- en: Update set pitfalls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Update sets are a great way to move configurations between instances. However,
    when using update sets, there are some pitfalls that can easily be fallen into.
  prefs: []
  type: TYPE_NORMAL
- en: The main issue that most developers face is what customization will be added
    to an update set. Not all changes to tables are added to update sets. Whether
    changes to a table are added to an update set or not depends on whether the records
    in the table are considered data or not. Tables that are considered as data are
    not added to an update set; as otherwise, update sets would be filled with unnecessary
    records.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the incident table was included in update sets, any incidents
    modified or created in a development instance would be moved across to a production
    instance, which would not be a good idea. Most tables are included or excluded
    from update sets as you would expect, but some are not always obvious, so it is
    worth checking.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid missing updates in our update sets or including updates we do not want,
    we can check to see which tables we are working with and send updates to an update
    set. To do this, we can look at the dictionary entry of the table we are working
    with.
  prefs: []
  type: TYPE_NORMAL
- en: From the list of dictionary entries for a table, we are interested in the record
    with a type of Collection. This gives the definition of the table and also holds
    the attributes for the table, which is what we need to look at. The attribute
    that adds updates to a table to update sets is called Update synch, and it needs
    to be true. Usually, if this attribute has been added it will be set to true,
    and if it is omitted then it will be false.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the dictionary entry for the incident table shown in
    *Figure 11.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1e6d83e-920f-4947-91ee-e71f8652734e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.4: Dictionary entry for the incident table'
  prefs: []
  type: TYPE_NORMAL
- en: As the incident table holds incident data, we do not want incident records in
    our update sets. As we can see, the Update synch attribute does not appear here,
    so any incidents we create or modify will not end up in the update set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s see the dictionary entry for client scripts. We can see this in
    *Figure 11.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55b327eb-c097-4d84-8590-5d3b78c64e9c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.5: Dictionary entry for the client script table'
  prefs: []
  type: TYPE_NORMAL
- en: In the Attributes of the client script dictionary entry, we can see the Update
    synch attribute, and it is set to true. This means that client script records
    will be added to update sets.
  prefs: []
  type: TYPE_NORMAL
- en: One table that is not included in update sets that is often assumed to be included
    is the scheduled job table. Because most records containing script are added to
    update sets, this can often catch developers out. A scheduled job can be moved
    by exporting it to XML and importing it into another instance.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, the table that many developers do not realize will be added to
    update sets is the `System Properties` table. Sometimes settings for developer
    instances, such as notifications set up to stop notifications being sent out,
    can end up being transferred to a production instance by mistake. This is a pitfall
    I have seen a few times over the years.
  prefs: []
  type: TYPE_NORMAL
- en: Update set best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using update sets, there are some best practices we can adhere to to ensure
    we avoid adding bad customizations to our production instance and use update sets
    to their full potential.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, it is always a good idea to check the updates contained in your update
    set before completing it. Sometimes a developer can inadvertently add an update
    they did not mean to to their update set. Therefore, it is always a good idea
    to check each individual update contained in your update set. In particular, pay
    special attention to any updates where the action is `DELETE`, as this can be
    harder to undo.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see some example updates in an update set in *Figure 11.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6188356d-ecac-48f2-a431-7cfc4d37e899.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.6: Update set containing sample updates'
  prefs: []
  type: TYPE_NORMAL
- en: We can see the updates in this update set in the Customer Updates tab of the
    related lists. We can see three updates in the update set example, including two
    client scripts and a business rule. We need to ensure that every customer update
    we see is a change we want to include in this update set, and no additional updates
    have been included in this update set by mistake.
  prefs: []
  type: TYPE_NORMAL
- en: In the Action column, the action that will be taken when this update set is
    committed is shown. Of the three updates, we want to pay special attention to
    the one with the DELETE action to ensure this action does indeed need to be taken.
    Once a record is deleted, it can be more difficult to undo the action. An insert
    or update is a much easier update to change or revert to an earlier version.
  prefs: []
  type: TYPE_NORMAL
- en: It is also a good idea to have a naming convention for your update sets. At
    first ,when update sets are small in number, this seems unnecessary; but as an
    instance matures and the number of update sets grows, it can be extremely helpful.
    The naming convention does not need to be complex, just consistent. Common naming
    conventions can be for releases, sprints, or the record number of stories or defects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples of naming conventions are:'
  prefs: []
  type: TYPE_NORMAL
- en: Description - Release - Date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Story/Defect: Developer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sprint/Month
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When deciding on a naming convention, decide on the details that are relevant
    for your process and instance, and make sure the convention is adhered to.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw earlier in this chapter, when setting up an update source, we need
    to provide a username and password for an admin account for the instance we are
    taking update sets from. It is good practice to ensure the account details used
    for the update source are for an account that will not be amended frequently,
    as this will stop the update source from being able to pull update sets from that
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: With update sets, it is good practice to ensure that update sets being committed
    in a production instance are done so at an appropriate time. As with any change
    to a production system, there is a level of risk associated. This means committing
    update sets should be done outside of business hours if possible, or at least
    at a quiet period of time, in case any problems arise.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We looked at update sets in this chapter. We saw how to use update sets and
    how they are used with different application scopes. In this chapter, we also
    explored transferring update sets between instances, avoiding pitfalls for update
    sets, and best practices when using update sets, especially when checking each
    update set update.
  prefs: []
  type: TYPE_NORMAL
- en: In the final chapter, we will use all that we have learned to build a custom
    application in ServiceNow. We will look at how to create a custom application
    and, specifically, how to use script in a custom application. We will discover
    end-to-end development of a custom application, as well as how to test and deploy
    the custom application we have made.
  prefs: []
  type: TYPE_NORMAL
