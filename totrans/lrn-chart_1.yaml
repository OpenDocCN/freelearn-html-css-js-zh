- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a book about data visualization using JavaScript with Chart.js, one
    of the most popular data visualization libraries, and also one of the easiest
    to use. Chart.js provides ready-to-use interactive visualizations for your data
    with minimal coding. After loading your data into a standard JavaScript array,
    you can add styles and other configuration using simple object-based declarative
    structures. Chart.js automatically scales your data, generates ticks and grid
    lines, creates interactive tooltips, and fits the available space, making your
    chart automatically responsive. It's a great way to start creating data visualizations
    for the Web.
  prefs: []
  type: TYPE_NORMAL
- en: Chart.js is free, open source, and maintained by an active community of developers
    on GitHub. As a data visualization library, it is in second place on GitHub in
    terms of the number of stars it has. First place belongs to D3.js, a much larger
    and complex library with a steep learning curve. You still need to know JavaScript,
    HTML, and CSS to use Chart.js, but you don't have to be a guru. Besides JavaScript,
    it's also based on other Web standards, such as DOM, CSS, and Canvas. Charts are
    automatically rendered in Canvas and control all canvas configuration, resizing,
    and pixel ratios. The only thing you need to know about Canvas is how to include
    a `<canvas>` tag in your page and obtain a context, but Canvas knowledge can be
    useful in advanced charts.
  prefs: []
  type: TYPE_NORMAL
- en: This book assumes you know some JavaScript, HTML, and CSS. The next chapter
    provides a quick refresher on specific topics and the main technologies you are
    likely to encounter while learning Chart.js. You can skip it and jump straight
    to [Chapter 3](af85e307-a9bc-47c5-be74-52727cbb7c2e.xhtml), *Chart.js – Quick
    Start*, if you wish. This chapter provides a brief introduction to data visualization
    and data visualization frameworks, and gives an overview of the rest of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Data visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why use a data visualization library?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual representations provide data with contexts that stimulate the viewer's
    brain, revealing information that is usually not obvious from tabular data. It's
    normally much more natural to capture the substantive content of data using visual
    artifacts. Charts and maps are a powerful, clear, and effective means to tell
    stories through data. They can pack huge quantities of information in small spaces
    and make it easier to compare data, provide insights, and reveal trends, relationships,
    causality, and other patterns hidden in the numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Charts reveal and emphasize data by attracting the viewer's attention. They
    can simplify complex data sets to foster discovery and comprehension, helping
    viewers to analyze and reason about data in different contexts. But they can also
    exaggerate, mislead, and even lie. A visually attractive chart is important, but
    designers should discover how to achieve a balance between form and function.
  prefs: []
  type: TYPE_NORMAL
- en: Data visualization is both an art and a science. A chart does not need to explain
    everything. It doesn't always have to be precise. It may be directed toward a
    specific audience, which should provide the context necessary to understand and
    decode it.
  prefs: []
  type: TYPE_NORMAL
- en: Chart types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data visualization usually refers to the visual display of quantitative information,
    as in statistical and information charts, plots, data maps, and so on. but it
    can include any kind of visual representation of data, such as mathematical graphics,
    path networks (subway systems, roads, electronic circuit diagrams), word clouds,
    musical and sound representations, timelines, geographical information systems,
    chemical and atomic diagrams, or any other way of coding of data using visual
    artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: You can create any type of visualization if you use a data-driven library such
    as D3.js. A charting library such as Chart.js, which comes with a set of pre-configured
    formats, is more limited, but much easier to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chart.js supports eight basic types of chart:'
  prefs: []
  type: TYPE_NORMAL
- en: Bar (horizontal and vertical)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line/area (including stacked)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Radar (radial line)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polar area (radial bar)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scatter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bubble
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pie
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doughnut
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It doesn't offer support for network diagrams, trees, or geographical maps,
    but you can create Chart.js visualizations that share data with other graphics.
    In [Chapter 4](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml),* Creating Charts*,
    we will create a bubble chart, representing populations of cities around the world,
    and plot them on a map with Chart.js.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Choosing a chart requires knowing your data. Charts are a means of communication
    aimed at revealing information, so the main question is: what do you want to show?
    Once you''ve answered that question, you should analyze your data and discover
    what kind of data you have. Data values used in visualizations can usually be
    classified as one of these three types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Quantitative**: A value that can be measured or counted (a number, a length,
    an area, an angle)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ordinal**: A value can be ranked or compared (color saturation, area, angle,
    length, words)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nominal:** A category (a name)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the purpose of you chart? Do you wish to reveal relationships, trends,
    or causality? What kind of relationship do you wish to emphasize? Do your variables
    relate to time or space?
  prefs: []
  type: TYPE_NORMAL
- en: 'Visualizations can be organized into categories, which make it easier to choose
    the kind of chart you need. Most charts and maps can be placed in one of these
    categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Time-series* (plots a single variable over a period of time). For example,
    a line chart that demonstrates a trend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Temporal/linear* (categories placed in a time-line). For example, a series
    of events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Spatial/planar/volumetric* (categories distributed in a spatial map). For
    example, a *cartogram* or *choropleth* with data distributed on a geographical
    map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Comparison* (categories associated with quantities are compared and ranked
    during a single period). For example, a bar chart that compares values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Part-to-whole* (categorical subdivisions as ratio to a whole). For example,
    a pie chart with slices as percentages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Correlation* (comparing two or more variables). For example, a scatterplot
    comparing two variables, or a bubble chart comparing three.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In his classic book, *The Visual Display of Quantitative Information*, Edward
    Tufte defines some aspects that can be used to measure the quality and integrity
    of visualizations. They are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data-ink ratio**: The amount of ink (or pixels) dedicated to the data shown'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chartjunk**: Visual garbage that is irrelevant to the data shown (and that
    frequently get in the way)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lie factor**: A number that measures the integrity of a visualization; for
    example, charts that lie by not representing proportions and lengths with enough
    precision'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data-ink ratio can be improved by removing chart-junk such as unnecessary
    lines and labels from charts. Sometimes the lines are important for context, but
    in interactive Web visualizations you can be very minimalistic. You can always
    provide details of demand with tooltips or other interactive resources.
  prefs: []
  type: TYPE_NORMAL
- en: Communication is deeply affected by the way humans perceive graphics, and may
    be improved or distorted by optical illusions. There are no charts with a lie
    factor of zero, but an adequate choice can improve it significantly. A bad choice
    increases the lie factor and can induce viewers to false perceptions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Position and length are best for representing quantitative information. Direction
    and angles come next, then area, volume, curvature, and finally shadows, saturation,
    and color. Since lengths and positions are easier to perceive and compare than
    angles and areas, data in a bar chart is perceived with greater accuracy than
    the same data in a pie chart. Consider the following pie chart, which compares
    the areas of continents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b844ffab-b6a9-4f39-82a6-86c57b141b03.png)'
  prefs: []
  type: TYPE_IMG
- en: A pie chart comparing areas of continents
  prefs: []
  type: TYPE_NORMAL
- en: 'Now look at the exact same data represented in a bar chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa89ee60-a425-439a-b257-d044f438fea9.png)'
  prefs: []
  type: TYPE_IMG
- en: A bar chart comparing areas of continents
  prefs: []
  type: TYPE_NORMAL
- en: Which one is clearer? While the pie chart is good for showing proportions, angles
    are much harder to compare. Differences in length are much easier to compare and
    a bar chart is better in this case. But it would probably be clearer to use a
    pie chart to compare *two* values as *part of a whole*, such as the area of one
    continent compared to the remaining area, to reveal the proportion of land it
    occupies compared to the rest of the planet.
  prefs: []
  type: TYPE_NORMAL
- en: 'To have both proportions and lengths, you might be tempted to try a single
    stacked bar chart, but it still rates worse than the simple bar chart, since stacked
    bars aren''t as easy to compare as when they are placed side-by-side:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1607a547-03a5-4b5b-b22c-f30bf5398fdf.png)'
  prefs: []
  type: TYPE_IMG
- en: A stacked bar chart comparing areas of continents
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you can choose a chart for other reasons, but it's important to know
    what you lose and gain in each case. Analytic and exploratory visualizations require
    a high degree of accuracy, but you might want to use a more attractive visualization
    at the price of losing some accuracy if you need to capture the attention of your
    audience.
  prefs: []
  type: TYPE_NORMAL
- en: Web-based visualizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Edward Tufte wrote his classic books on data visualization, most of it
    was intended for printed media. Today, you can create visualizations that use
    data that can be updated in real time, with dynamic interfaces that allows interaction
    by the user. The design guidelines for web-based visualizations are different.
    They *can* and *should be* dynamic and interactive. Interactive charts can pack
    in much more information by hiding the details, which can be requested by the
    user on demand. Charts are sometimes rendered as overviews or sparklines, only
    revealing details through strategies such as zooming and brushing.
  prefs: []
  type: TYPE_NORMAL
- en: Why use a data visualization library?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Actually, you don't need any coding to create fantastic and interactive visualizations
    for the web. You can always use a charting service. There are many; some are paid,
    others are free. They offer configuration screens and data transformation tools
    that allow you to create all kinds of beautiful charts. Popular services include
    *Google Charts*, *Tableau*, *Infogram*, and *Plotly*. If they fully satisfy your
    data visualization needs, you don't really need this book.
  prefs: []
  type: TYPE_NORMAL
- en: But if you know HTML, CSS, and JavaScript, you don't need to use these platforms.
    Web standards provide all the tools you need to create any sophisticated graphics,
    with no restrictions imposed by a platform or a plan. Using web standards also
    facilitates the integration of your visualizations with web applications, frontend
    frameworks (such as *React*, *Angular*, and *Vue*) and backend web services (such
    as resources and data provided by RESTful services).
  prefs: []
  type: TYPE_NORMAL
- en: But do you really need to use a library like Chart.js? Can't you just use standard
    JavaScript, HTML, CSS, and Canvas?
  prefs: []
  type: TYPE_NORMAL
- en: Creating data visualizations for the Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You don't really need any libraries or frameworks to create and display interactive
    and animated data visualizations on the Web. Plain standard HTML, CSS, and JavaScript
    already do that for you. Basic HTML provides structural elements that can be styled
    with CSS to display simple graphical elements such as colored rectangles. That
    means you can create a basic static bar chart just applying different widths in
    CSS to `div` elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following HTML and CSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run it in a web browser, you get the following chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5774a5b-899c-45b7-8195-499bff26098a.png)'
  prefs: []
  type: TYPE_IMG
- en: A simple static bar chart created with just HTML and CSS
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this is not the best way to draw a bar chart. The numbers were inserted
    somewhat arbitrarily in the HTML, and the lengths are defined by CSS width properties.
    You have to calculate the scales yourself. It's easy to make a mistake and reveal
    the wrong numbers. This is just to illustrate that all the graphical tools already
    exist in HTML and CSS. All we need is a library that generates that code for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the **Document Object Model** (**DOM**) allows scripting languages to
    access and change style attributes of an element, widths can be specified in JavaScript
    and can even respond to events or change with time, allowing the creation of interactive
    graphics with animation. Adding the following JavaScript function to the previous
    chart, you can the change value, length, and colors of the bars when the user
    clicks on the chart using standard DOM commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the same chart as the preceding one after clicking,
    with new colors and values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1f2eb15-110f-4cf5-9f50-e6a8b9c1aa00.png)'
  prefs: []
  type: TYPE_IMG
- en: An interactive bar chart created with the standard DOM, CSS, HTML, and Javascript
  prefs: []
  type: TYPE_NORMAL
- en: 'But you don''t have to use `div` and CSS to draw bars. Since HTML5, you can
    also use the Canvas API—a complete graphical library that can be used to create
    any kind of graphics, not just rectangles. The following example displays the
    same data as a pie chart using only standard HTML and no extra libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can download all these code examples from the GitHub repository for this
    chapter. See the last section for details. The result is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fce774f0-4439-4d5a-86e0-8aa7e717ed73.png)'
  prefs: []
  type: TYPE_IMG
- en: A simple pie chart created using HTML Canvas
  prefs: []
  type: TYPE_NORMAL
- en: You can make even nicer pie charts in Chart.js without writing a single line
    of Canvas code, and you won't have to worry about calculating angles in radians
    or adjusting scales to fit the page. You also get free tooltips with far fewer
    lines of code than we used previously. Chart.js may not satisfy all your data
    visualization needs, but it certainly is a great way to start. You can then apply
    your knowledge of HTML and JavaScript and extend it with plugins, integrate with
    other charting solutions, or migrate to a larger and unrestricted library such
    as D3.js.
  prefs: []
  type: TYPE_NORMAL
- en: How to use this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book was designed as a practical hands-on guide on how to create data visualizations
    with Chart.js. It doesn't cover all aspects of Chart.js, but does cover most of
    the features you are likely to use to create visualizations. All eight Chart.js
    charts are covered, exploring different configurations and applications using
    external data obtained from public repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Each chapter covers fundamental concepts. Each concept is always illustrated
    with a simple code example, but more complex examples that might require extra
    JavaScript programming are also presented in each chapter, and include solutions
    to real-world problems, such as downloading, parsing, and filtering a data file
    to convert it into a format usable by Chart.js.
  prefs: []
  type: TYPE_NORMAL
- en: Code listings are used throughout the book, but most of the time, they focus
    on a specific feature and show only a fragment of the full code. But you can download
    the full listing. All the code examples used in the book are available from a
    public GitHub repository located at: [https://github.com/PacktPublishing/Learn-charts.js](https://github.com/PacktPublishing/Learn-charts.js).
  prefs: []
  type: TYPE_NORMAL
- en: There is a folder for each chapter in the repository, named `Chapter01`, `Chapter02`,
    and so on. Each code listing and every image generated by code contains a relative
    reference to a file located in the corresponding folder for each chapter. You
    can try out all the code examples as you learn. You can also use it in any way
    you like, since it's free and open source.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a brief summary of each chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](25edc904-3528-40cc-8865-75ccf1fc78eb.xhtml),* Technology Fundamentals*,
    covers technology fundamentals, data formats, and also explores some techniques
    for loading and parsing files. It gives a general background on topics used by
    Chart.js, such as JavaScript, CSS, DOM, and Canvas. You may skip these sections
    if you wish.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](af85e307-a9bc-47c5-be74-52727cbb7c2e.xhtml)*, Chart.js – Quick
    Start*, includes a quick start and overview of several Chart.js features. It shows
    how to set up a web page to use Chart.js and how to create your first chart. You
    will learn a bit of everything Chart.js has to offer. It also introduces the bar
    chart type (vertical and horizontal).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml), *Creating Charts*,
    covers all other chart types available: line/area, radar, polar area, pie, doughnut,
    scatter, and bubble. It also shows how to load and parse external CSV and JSON
    data from public data portals and use them to create real-world visualizations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](0f37b129-1e84-459d-ba78-bb918d7f1b0b.xhtml),* Scales and Grid Configuration*,
    focuses on configuring scales, axes, and grid lines for all charts. You will learn
    how to use radial grids and Cartesian grids with linear, logarithmic, category,
    and time axes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml), *Configuring Styles
    and Interactivity*, deals with configuration of several properties, for which
    Chart.js already provides defaults: fonts, titles, and labels. It also explores
    some neat labeling plugins and color schemes, which are important for accessible
    charts. This chapter also shows how to configure transitions, animations, and
    interactions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml)*, Advanced Charts.js*,
    covers some advanced features that you will are less likely to use on a regular
    basis, since Chart.js already provides good defaults. These include tooltip configuration,
    creating custom legends, mixed charts, how to display multiple charts on a single
    page, overlaying Chart.js on a Canvas, and creating plugins.'
  prefs: []
  type: TYPE_NORMAL
- en: I believe the book covers the most important topics in Chart.js. It leaves out
    some advanced programming topics, several plugins, and integration with front-end
    frameworks, which are also not covered.
  prefs: []
  type: TYPE_NORMAL
- en: I am not affiliated with Chart.js in any way and this book does not replace
    the official Chart.js documentation, which is the ultimate reference guide on
    the topic. The documentation is community-maintained and freely available at [www.chartjs.org/docs/latest](http://www.chartjs.org/docs/latest).
    There are also many samples that explore its main features that are also part
    of the documentation at [www.chartjs.org/samples/latest](http://www.chartjs.org/samples/latest).
  prefs: []
  type: TYPE_NORMAL
- en: When writing this book, I did my best to provide the most accurate information
    possible. All code listings were tested, and additional efforts were made to guarantee
    that all code examples are properly referenced in the book and work as expected.
    This book is based on Chart.js version 2.7.3\. I expect that the examples should
    continue working with any 2.x version, but there is a small possibility that some
    code may not work as expected if you are using a later version.
  prefs: []
  type: TYPE_NORMAL
- en: The Chart.js community is very active on *GitHub* and *StackOverflow*. If you
    have any questions about Chart.js, you can submit a question on [stackoverflow.com](http://stackoverflow.com)
    and you will probably have an answer within a few hours or less.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoy this book and have as much fun as I had when learning Chart.js.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provided a quick introduction to data visualization topics and
    introduced Chart.js, the JavaScript library with which you will learn to create
    responsive interactive visualizations for the web. We also demonstrated how standard
    web technologies provide all you need to create charts for the web, and how a
    data visualization library such as Chart.js can be beneficial.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover the fundamentals of some standard technologies
    used by Chart.js—data formats and data manipulation techniques—but if you want
    to start using Chart.js right away, you can skip it and jump straight to [Chapter
    3](af85e307-a9bc-47c5-be74-52727cbb7c2e.xhtml)*, Chart.js – Quick Start*.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Books and websites**:'
  prefs: []
  type: TYPE_NORMAL
- en: Edward R. Tufte. *The Visual Display of Quantitative Information*. Graphics
    Press, 1997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isabel Meirelles. *Design for Information*. Rockport Publishers, 2013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stephen Few. *Data Visualization: past, present and future*. Perceptual Edge,
    2007'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: David Kahneman. *Thinking Fast and Slow*. Farrar, Straus and Giroux. 2011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ben Bederson and Ben Schneiderman. *The Craft of Information Visualization*.
    2003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
