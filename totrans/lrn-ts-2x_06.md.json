["```js\nfunction foo(a: number): number { \n    const value = 12; \n    return value + a; \n} \n\nfunction bar(b: number): number { \n    const value = 4; \n    return foo(value * b); \n} \n```", "```js\nbar(21); \n```", "```js\nfunction foo(a: number): number { \n    const value = 12; \n    return bar(value + a); \n} \n\nfunction bar(b: number): number { \n    const value = 4; \n    return foo(value * b); \n} \n```", "```js\nconsole.log(this === window); // true \nthis.a = 37; \nconsole.log(window.a); // 37 \nconsole.log(window.document === this.document); // true \nconsole.log(this.document === document); // true \nconsole.log(window.document === document); // true \n```", "```js\nfunction f1() { \n  return this; \n} \nf1() === window; // true \n```", "```js\nconsole.log(this); // global (window) \n\nfunction f2() { \n  \"use strict\"; \n  return this; // undefined \n} \n\nconsole.log(f2()); // undefined \nconsole.log(this); // window \n```", "```js\nconst person = { \n  age: 37, \n  getAge: function() { \n    return this.age; // this points to the instance (person) \n  } \n}; \nconsole.log(person.getAge()); // 37 \n```", "```js\nfunction Person() {} \nPerson.prototype.age = 37; \nPerson .prototype.getAge = function () { \n  return this.age; \n} \nconst person = new Person(); \nperson.age;    // 37 \nperson.getAge(); // 37 \n```", "```js\nfunction Person() { // function used as a constructor \n  this.age = 37; \n} \nconst person = new Person(); \nconsole.log(person.age); // logs 37 \n```", "```js\nclass Person { \n\n  public name: string; \n  public surname: string; \n\n  public constructor(name: string, surname: string) { \n    this.name = name; \n    this.surname = surname; \n  } \n\n  public greet(city: string, country: string) { \n    // we use the \"this\" operator to access name and surname  \n    let msg = `Hi, my name is ${this.name} ${this.surname}.`; \n    msg += `I'm from ${city} (${country}).`; \n    console.log(msg); \n  } \n\n} \n```", "```js\nconst person = new Person(\"remo\", \"Jansen\"); \n```", "```js\nperson.greet(\"Seville\", \"Spain\"); \n```", "```js\nperson.greet.call(person, \"Seville\", \"Spain\"); \nperson.greet.apply(person, [\"Seville\", \"Spain\"]); \n```", "```js\nperson.greet.call(null, \"Seville\", \"Spain\"); \nperson.greet.apply(null, [\"Seville\", \"Spain\"]); \n```", "```js\nconst valueOfThis = { name : \"Anakin\", surname : \"Skywalker\" }; \nperson.greet.call(valueOfThis, \"Mos espa\", \"Tatooine\"); \nperson.greet.apply(valueOfThis, [\"Mos espa\", \"Tatooine\"]); \n```", "```js\nconst person = new Person(\"Remo\", \"Jansen\"); \n```", "```js\nconst greet = person.greet.bind(person); \n```", "```js\ngreet.call(person, \"Seville\", \"Spain\"); \ngreet.apply(person, [\"Seville\", \"Spain\"]); \n// Hi, my name is Remo Jansen. I'm from Seville Spain. \n\ngreet.call(null, \"Seville\", \"Spain\"); \ngreet.apply(null, [\"Seville\", \"Spain\"]); \n// Hi, my name is Remo Jansen. I'm from Seville Spain. \n\nconst valueOfThis = { name: \"Anakin\", surname: \"Skywalker\" }; \ngreet.call(valueOfThis, \"Mos espa\", \"Tatooine\"); \ngreet.apply(valueOfThis, [\"Mos espa\", \"Tatooine\"]); \n// Hi, my name is Remo Jansen. I'm from Mos espa Tatooine. \n```", "```js\nconst valueOfThis = { name: \"Anakin\", surname: \"Skywalker\" }; \nconst greet = person.greet.bind(valueOfThis); \ngreet.call(valueOfThis, \"Mos espa\", \"Tatooine\"); \ngreet.apply(valueOfThis, [\"Mos espa\", \"Tatooine\"]); \n// Hi, my name is Remo Jansen. I'm from Mos espa Tatooine. \n```", "```js\nclass Person { \n\n    public name: string; \n    public surname: string; \n    public age: number = 0; \n\n    public constructor(name: string, surname: string) { \n        this.name = name; \n        this.surname = surname; \n    } \n\n    public greet() { \n        let msg = `Hi! my name is ${this.name} ${this.surname}`; \n        msg += `I'm ${this.age}`; \n    } \n\n} \n```", "```js\nvar Person = (function() { \n    function Person(name, surname) { \n        this.age = 0; \n        this.name = name; \n        this.surname = surname; \n    } \n    Person.prototype.greet = function() { \n        let msg = \"Hi! my name is \" + this.name + \n                    \" \" + this.surname; \n        msg += \"I'm \" + this.age; \n    }; \n    return Person; \n})(); \n```", "```js\nfunction Person(name, surname) { \n      // instance properties \n      this.name = name; \n      this.surname = surname; \n} \nconst person = new Person(\"Remo\", \"Jansen\"); \nperson.age = 27; \n```", "```js\nfor(let property in person) { \n  console.log(\"property: \" + property + \", value: '\" + \n   person[property] + \"'\"); \n} \n// property: name, value: 'remo' \n// property: surname, value: 'jansen' \n// property: age, value: 27 \n// property: greet, value: 'function (city, country) { \n//        let msg = \"Hi, my name is \" + this.name + \" \" + \n //this.surname; \n//        msg += \"nI'm from \" + city + \" \" + country; \n//        console.log(msg); \n//    }' \n```", "```js\nlet person2 = new Person(\"John\", \"Wick\"); \nperson2.name; // \"John\"  \nperson1.name; // \"Remo\" \n```", "```js\nPerson.prototype.name = name;    // instance property  \nPerson.prototype.name = surname; // instance property \n```", "```js\nfunction MathHelper() {  \n  /* ... */  \n} \n\n// class property \nMathHelper.PI = 3.14159265359; \n```", "```js\nfunction MathHelper() { /* ... */ } \n\n// class property \nMathHelper.PI = 3.14159265359; \n\n// class method \nMathHelper.areaOfCircle = function(radius) { \n  return radius * radius * MathHelper.PI;  \n} \n```", "```js\nfunction MathHelper() { \n  // instance property \n  this.PI = 3.14159265359; \n} \n```", "```js\n// class method \nMathHelper.areaOfCircle = function(radius) { \n  return radius * radius * this.PI;  // this.PI is undefined \n} \n\nMathHelper.areaOfCircle(5); // NaN \n```", "```js\nfunction MathHelper () { /* ... */ } \n\n// class property  \nMathHelper.PI = 3.14159265359; \n\n// instance method  \nMathHelper.prototype.areaOfCircle = function(radius) {  \n    return radius * radius * this.constructor.PI;  \n} \n\nconst math = new MathHelper ();  \nconsole.log(MathHelper.areaOfCircle(5)); // 78.53981633975 \n```", "```js\nthis === MathHelper.prototype \n```", "```js\nclass SuperHero extends Person { \n    public superpower: string; \n    public constructor( \n        name: string, \n        surname: string, \n        superpower: string \n    ) { \n        super(name, surname); \n        this.superpower = superpower; \n    } \n    public userSuperPower() { \n        return `I'm using my ${this.superpower}`; \n    } \n}\n```", "```js\nvar __extends = this.__extends || function (d, b) { \n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; \n    function __() { this.constructor = d; } \n    __.prototype = b.prototype; \n    d.prototype = new __(); \n}; \n```", "```js\nvar __extends = this.__extends || function (d, b) { // ... \n```", "```js\nfunction (d, b) { \n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; \n    function __() { this.constructor = d; } \n    __.prototype = b.prototype; \n    d.prototype = new __(); \n} \n```", "```js\nfor (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; \n```", "```js\nfunction __() { this.constructor = d; } \n```", "```js\n__.prototype = b.prototype; \n```", "```js\nvar instance = new d(): \n```", "```js\nvar SuperHero = (function (_super) { \n    __extends(SuperHero, _super); \n    function SuperHero(name, surname, superpower) { \n        _super.call(this, name, surname); \n        this.superpower = superpower;  \n    } \n    SuperHero.prototype.userSuperPower = function () { \n        return \"I'm using my \" + superpower; \n    }; \n    return SuperHero; \n})(Person); \n```", "```js\n_super.call(this, name, surname); \n```", "```js\nfunction Person(name, surname) { \n      // this points to the instance of SuperHero being created \n      this.name = name; \n      this.surname = surname; \n} \n```", "```js\nclass Base { \n    public method1() { return 1; } \n    public method2() { return 2; } \n} \n\nclass Derived extends Base { \n    public method2() { return 3; } \n    public method3() { return 4; } \n} \n```", "```js\nvar Base = (function () { \n    function Base() { \n    } \n    Base.prototype.method1 = function () { return 1; }; \n    Base.prototype.method2 = function () { return 2; }; \n    return Base; \n})(); \nvar Derived = (function (_super) { \n    __extends(Derived, _super); \n    function Derived() { \n        _super.apply(this, arguments); \n    } \n    Derived.prototype.method2 = function () { return 3; }; \n    Derived.prototype.method3 = function () { return 4; }; \n    return Derived; \n})(Base); \n```", "```js\nvar derived = new Derived(); \n```", "```js\nconsole.log(derived.method1); // 1 \n```", "```js\nconsole.log(derived.method2); // 3 \n```", "```js\nconsole.log(derived.method3); // 4 \n```", "```js\nconsole.log(derived.method4); // error \n```", "```js\nconst person = new Person(\"remote\", \"Jansen\"); \n```", "```js\nfunction makeArmy() { \n    const shooters = []; \n    for (let i = 0; i < 10; i++) { \n        const shooter = () => { // a shooter is a function \n            console.log(i); // which should display it's number \n        }; \n        shooters.push(shooter); \n    } \n    return shooters; \n} \n```", "```js\nconst army = makeArmy();  \n```", "```js\narmy[0](); // 10 (expected 0) \narmy[5](); // 10 (expected 5) \n```", "```js\nfunction makeArmy() { \n    const shooters = []; \n    for (let i = 0; i < 10; i++) { \n        ((index: number) => { \n            const shooter = () => { \n                console.log(index); \n            }; \n            shooters.push(shooter); \n        })(i); \n    } \n    return shooters; \n} \n\nconst army = makeArmy(); \narmy[0](); // 0 \narmy[5](); // 5 \n```", "```js\nclass Counter { \n    private static _COUNTER = 0; \n    public increment() { \n        this._changeBy(1); \n    } \n    public decrement() { \n        this._changeBy(-1); \n    } \n    public value() { \n        return Counter._COUNTER; \n    } \n    private _changeBy(val: number) { \n        Counter._COUNTER += val; \n    } \n} \n```", "```js\nvar Counter = (function () { \n    function Counter() { \n    } \n    Counter.prototype._changeBy = function (val) { \n        Counter._COUNTER += val; \n    }; \n    Counter.prototype.increment = function () { \n        this._changeBy(1); \n    }; \n    Counter.prototype.decrement = function () { \n        this._changeBy(-1); \n    }; \n    Counter.prototype.value = function () { \n        return Counter._COUNTER; \n    }; \n    Counter._COUNTER = 0; \n    return Counter; \n})(); \n```", "```js\nvar Counter = (function() { \n\n    // closure context \n    let _COUNTER = 0; \n\n    function changeBy(val) { \n        _COUNTER += val; \n    } \n\n    function Counter() {}; \n\n    // closure functions \n    Counter.prototype.increment = function() { \n      changeBy(1);  \n    }; \n    Counter.prototype.decrement = function() { \n      changeBy(-1); \n    }; \n    Counter.prototype.value = function() { \n      return _COUNTER; \n    }; \n    return Counter; \n})(); \n```", "```js\nlet counter1 = new Counter(); \nlet counter2 = new Counter(); \nconsole.log(counter1.value()); // 0 \nconsole.log(counter2.value()); // 0 \ncounter1.increment(); \ncounter1.increment(); \nconsole.log(counter1.value()); // 2 \nconsole.log(counter2.value()); // 2 (expected 0) \ncounter1.decrement(); \nconsole.log(counter1.value()); // 1 \nconsole.log(counter2.value()); // 1 (expected 0) \n```", "```js\nfunction makeCounter() { \n\n    // closure context \n    let _COUNTER = 0; \n\n    function changeBy(val: number) { \n        _COUNTER += val; \n    } \n\n    class Counter { \n        public increment() { \n            changeBy(1); \n        } \n        public decrement() { \n            changeBy(-1); \n        } \n        public value() { \n            return _COUNTER; \n        } \n    } \n} \n```", "```js\nlet counter1 = makeCounter(); \nlet counter2 = makeCounter(); \nconsole.log(counter1.value()); // 0 \nconsole.log(counter2.value()); // 0 \ncounter1.increment(); \ncounter1.increment(); \nconsole.log(counter1.value()); // 2 \nconsole.log(counter2.value()); // 0 (expected 0) \ncounter1.decrement(); \nconsole.log(counter1.value()); // 1 \nconsole.log(counter2.value()); // 0 (expected 0)  \n```", "```js\nconsole.log(counter1.counter); // undefined \ncounter1.changeBy(2); // changeBy is not a function \nconsole.log(counter1.value()); // 1 \n```"]