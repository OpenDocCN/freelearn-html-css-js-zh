- en: Chapter 1. Instant Testing with CasperJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to *Instant Testing with CasperJS*. This book will cover how to practice
    efficient and solid web page testing using CasperJS. CasperJS is a cross-platform,
    command-line utility that is able to load and script any web page.
  prefs: []
  type: TYPE_NORMAL
- en: Installing CasperJS (Simple)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will cover the steps to install CasperJS and its dependencies
    on Windows, Mac OS X, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The CasperJS sources are managed on GitHub. So, to get them on our local machine,
    we need Git.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Git on Windows, we can use msysGit to deploy the Git command-line
    utility plus a graphical interface:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://msysgit.github.io/](http://msysgit.github.io/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Downloads** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the latest version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To install Git on Mac, the easiest way is to use Git for OS X graphical interface:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://code.google.com/p/git-osx-installer/](https://code.google.com/p/git-osx-installer/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Downloads** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the latest version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also install Git from the MacPorts:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure MacPorts is installed (if not, go to [http://www.macports.org/](http://www.macports.org/)
    and follow the instructions).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From a command line, enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To install Git on Linux, use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Debian/Ubuntu, enter the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Fedora, enter the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, we need to install PhantomJS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following steps to install PhantomJS on Windows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go to [http://phantomjs.org/download.html](http://phantomjs.org/download.html).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Windows version.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract its content.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `phantomjs.exe` path to the `PATH` environment variable, assuming it
    is located at `C:\PhantomJS`:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Perform the following steps to install PhantomJS on Mac and Linux:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go to [http://phantomjs.org/download.html](http://phantomjs.org/download.html).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the appropriate version (Mac OS X / Linux 32 bits / Linux 64 bits).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract its content.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make `bin/phamtomjs` available in your system path using the following command:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we should be able to run `phantomjs` from a command line:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we can install CasperJS using Git. We need to locally clone the official
    CasperJS repository from GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This can be achieved using the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should produce an output similar to the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To check out the last stable version, we need to run the following Git command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will get the following message:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's check if CasperJS is properly installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To check if CasperJS is installed properly on Windows, use the following commands:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To check if CasperJS is installed properly on Mac OS X / Linux, use the following
    commands:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We should obtain the following result:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To complete the installation, we will now make sure that the `casperjs` executable
    is available in our system path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To complete the installation on Windows add the following path to `casperjs.bat`
    to the `PATH` environment variable, assuming the repository is located in `C:\casperjs`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To complete the installation on Mac and Linux, link `bin/casperjs` in `/usr/local/bin`
    using the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can check if `casperjs` is in the system path using the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The setup is now complete.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just after cloning the repository, we launched a Git command to get the Version
    1.1 (which was still a beta version at the time we were writing those lines).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we had not launched the Git command, we would still have had a correct CasperJS
    setup, but be careful; Git has downloaded all the CasperJS revisions since the
    very beginning of CasperJS''s development till today, and *has automatically checked
    out the last one*. So, we try using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We will obtain something similar to the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: It means that we are running the current development version and using a development
    version is probably not what we want as it might be unstable or even broken.
  prefs: []
  type: TYPE_NORMAL
- en: That is why we need to check out the 1.1 tagged revision specifically.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's discuss some installation options.
  prefs: []
  type: TYPE_NORMAL
- en: Installing CasperJS with Homebrew on Mac OS X
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Homebrew is a package manager for Mac OS X. It is a very handy way to deploy
    PhantomJS and CasperJS using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Installing PhantomJS on Ubuntu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful; on Ubuntu, if we install PhantomJS from the distribution packages,
    we will get an old version (Version 1.4 or 1.6, depending on our Ubuntu version).
  prefs: []
  type: TYPE_NORMAL
- en: But CasperJS needs at least PhantomJS 1.7\. So, package installation is not
    an option.
  prefs: []
  type: TYPE_NORMAL
- en: Using the CasperJS Ruby executable
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On Mac OS X and Linux, the default `casperjs` executable is a Python script.
    Python should be available on our system (unless we use an exotic Linux distribution),
    so it makes no problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nevertheless, if we prefer to launch CasperJS using a Ruby script, we do have
    one in `./rubybin`. So, we just need to make it available in our system path this
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Getting started with CasperJS (Simple)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will explain how to write basic CasperJS tests and will help us
    get familiar with the CasperJS approach.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will build simple web pages in order to run our CasperJS
    tests in an appropriate context.
  prefs: []
  type: TYPE_NORMAL
- en: As we need to serve just static content (HTML, CSS, JavaScript), we need a very
    basic HTTP server and the simplest existing HTTP server is the Python 2 SimpleHTTTPServer,
    as it is part of the standard Python installation (so that no extra deployment
    is needed), and it does not need any system configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Mac OS X and Linux, Python 2 is part of the system; we just launch the following
    command line from the folder containing our web content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command should return this message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The message means that our local web server is running on the `8000` port and
    we can access it with our web browser using the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`'
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows, we can do the very same thing but Python is not installed by default,
    so we first need to install it this way:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://www.python.org/getit/](http://www.python.org/getit/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Python 2.7 Windows installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add Python to our system path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now ready to write CasperJS tests. For our first test, we will not need
    our local web server as we will use the Wikipedia website:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the following file and name it `example1.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When we run our script, we get the following output:![How to do it...](img/9431OS_01_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s see how it works:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the first line, we get a new `'casper'` instance.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, in the second line, we start this instance and open the Wikipedia page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We give the `start()` method a function that will be executed once the page
    is loaded. In this function, the context (`this`) is the `casper` instance. Here,
    we just use the `echo()` method to display the current page title (obtained using
    `getTitle()`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the last line, we launch the registered steps.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s change a little bit of our script in order to perform a search
    on Wikipedia about `''javascript''`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's run it:![How to do it...](img/9431OS_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have made two changes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We used the `fill()` method to submit our search keyword to the Wikipedia search
    form
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We added a new step in our script using the `then()` method to make sure that
    we wait for the search result to be returned; we also displayed the current URL
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As we can see, it works perfectly as we obtained the URL of the Wikipedia article
    about JavaScript. Now, let's "assert" the world!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We just wrote a basic CasperJS script, but it is not a very efficient test script
    as a test script is supposed to check if an expected behavior is properly performed
    by the web page that we are testing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To do that, CasperJS provides a tester API, which can be accessed via the `test`
    property of our CasperJS instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s create the following example page and name it `example2.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, let's launch our SimpleHTTPServer and see what the page looks like by going
    to `http://localhost:8000/example2.html`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It shows a **Click me** button and if we click on it, its label is changed to
    **Done**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following is a CasperJS test that could validate this behavior:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's save this script as `example2.js` and run it using the `casperjs test`
    command:![How to do it...](img/9431OS_01_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `casperjs test` command allows us to use the `casper.test` property, which
    provides all the testing methods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When using the `casperjs test` command, we do not need to create the `casper`
    instance, but we need to call the `begin` method and end the test with the `done`
    method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: First, with `assertVisible`, we make sure that our button is visible. The most
    common way to designate an element is by providing an accurate CSS selector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we use `assertSelectorHasText` to check the text content of the button
    before and after clicking on it. We can see that all our tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `begin` method takes a description and the number of expected tests (beside
    the test itself) as parameters. The number of successful and failed tests are
    displayed in the final line.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s break our tests by changing the second `assertSelectorHasText`
    tester as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: And the result is as follows:![How to do it...](img/9431OS_01_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We clearly see that our two assertions still pass, but one is now failing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Timing is everything
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When developing with JavaScript, we often need to chain two pieces of code (for
    instance, first we load some JSON data, then we update the page content using
    that data). But, each step is generally non-blocking, which means that the rest
    of the code will continue to execute even if the step is not complete, and there
    is no way to predict when the first step will be complete.
  prefs: []
  type: TYPE_NORMAL
- en: The most solid and common approach to solve this problem is the *callback* mechanism.
    We put the second piece of code in a function and pass it as a parameter to the
    first one, so that it can call that function when it finishes.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, there is no linear and predictably-ordered execution of the code.
    This makes testing a little bit tricky.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example (`example3.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The demo account we are using here to access the Geonames.org service has a
    daily limit, if the limit is reached, we can go [http://www.geonames.org/login](http://www.geonames.org/login)
    and create our own account. The preceding code will create a page that contains
    a text input field, a button, and an empty div with an ID as `''results''`. When
    we click on the button, the JavaScript function `geonamesSearch` does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It puts the `'searching'` class on the `results` div and inserts the **Searching...**
    mention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It reads the text input's current value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It calls the GeoNames JSON web services to get the place names matching the
    value that you input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This JSON call is performed by jQuery and we provide it with a callback function
    that will be called when the GeoNames web service will respond and read the results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is no result, it changes the `results` div class to `'noresults'` and
    its text to **No matching place.**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are some results, it sets the class to `'success'` and displays the
    matching place names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can try it with our web browser and see it work nicely.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s test this page with the following script (`example3.js`), which
    enters the value `''barcelona''` and asserts that we do get **Barcelona (Catalonia)**
    in the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need to set up a regular user agent to make sure that `geonames.org` will
    accept to process our request.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run it, we get a failure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Timing is everything](img/9431OS_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Why is that? Because our `this.click()` triggers the `geonamesSearch` function
    and immediately after that we try to assert the result content. However, as the
    GeoNames web service did not have enough time to respond, the content is not yet
    the one expected at the time the assertion is performed.
  prefs: []
  type: TYPE_NORMAL
- en: To manage these kinds of cases, CasperJS offers us the ability to wait before
    executing the rest of our tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a working test script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the tests pass successfully now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Timing is everything](img/9431OS_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With `waitForSelector`, we make sure that the assertion will be performed only
    when the `results` div will have the `'success'` class, and it will happen only
    once our JSON loading callback function has been called.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `waitForSelector` method will not wait forever; it does have a timeout (with
    a default value of 5000 milliseconds, which can be changed) and we can provide
    a second function that will be called if the timeout is reached before the selector
    is satisfied.
  prefs: []
  type: TYPE_NORMAL
- en: Live recording
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Writing tests can take time. A quick and convenient way to produce tests is
    to record an actual usage sequence directly from our web browser (just like the
    Firefox Selenium plug-in).
  prefs: []
  type: TYPE_NORMAL
- en: To record web sequences as CasperJS tests, we can use a Chrome extension named
    **Resurrectio**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We install it from the Chrome Web Store (go to [https://chrome.google.com/webstore/](https://chrome.google.com/webstore/),
    search for `resurrectio`, and then click on the add button), and it just appends
    a new button next to the URL bar:'
  prefs: []
  type: TYPE_NORMAL
- en: We click on the **Resurrectio** button to start a recording:![Live recording](img/9431OS_01_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can then navigate or perform any regular action in our window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By right-clicking, we can add some assertions or screenshots:![Live recording](img/9431OS_01_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By clicking again on the **Resurrectio** button, we can stop the recording and
    then export the previous sequence as a a CasperJS test:![Live recording](img/9431OS_01_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Nevertheless, be careful; in some cases, we might need to manually modify the
    generated test because of the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It might contain a lot of useless assertions (due to extra clicks during the
    recording).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It might be too heavy and verbose, making it more difficult to maintain. So,
    we would prefer to simplify it to focus on the most meaningful aspects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All assertions cannot be registered from Resurrectio, and we might need different
    assertions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the key advantages of CasperJS is its ability to chain test steps, knowing
    that these steps will be executed in the order they have been registered in.
  prefs: []
  type: TYPE_NORMAL
- en: 'As explained previously, the way to chain steps in JavaScript is by using callback
    functions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: If we were using PhantomJS directly, that would be how our tests would look,
    and it would not be very convenient to read or maintain.
  prefs: []
  type: TYPE_NORMAL
- en: But with CasperJS, using the `then()` or `waitFor()` methods, we can declare
    successive steps without this infinite callback nesting cascade.
  prefs: []
  type: TYPE_NORMAL
- en: CasperJS does that callback chaining for us behind the scenes, creating much
    more readable test scripts.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's see a few more details about the different features we have just used
    here.
  prefs: []
  type: TYPE_NORMAL
- en: XPath selectors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, CasperJS uses CSS3 selectors, but we can use XPath selectors if
    we prefer or if we have to.
  prefs: []
  type: TYPE_NORMAL
- en: XPath selectors are less readable than CSS3 selectors but they are more powerful
    (for instance, while matching text contents or putting conditions on the DOM element's
    ascendants or descendants).
  prefs: []
  type: TYPE_NORMAL
- en: 'To use XPath selectors, we just need to load the CasperJS `selectXPath` utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Assertion methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CasperJS tester API offers a large collection of assertion methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can assert conditions and function results in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: The `assert(Boolean condition[, String message])` method asserts that the condition
    is strictly `true`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertNot(mixed subject[, String message])` method asserts that the condition
    is not `true`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertTruthy(Mixed subject[, String message])` method asserts that the
    subject is `truthy`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertFalsy(Mixed subject[, String message])` method asserts that the subject
    is `falsy`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's explain what `true`, `false`, `truthy,` and `falsy` is.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In JavaScript, `true` and `false` are the two Boolean values stricto sensu.
    Values such as `null`, `undefined`, the empty string `''`, the number `0`, the
    number `NaN` are `falsy`, which means that if they are evaluated in a condition,
    they will return `false`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: And any other values are `truthy`, which means that if they are evaluated in
    a condition, they will return `true`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `assertEquals(mixed testValue, mixed expected[, String message])` method
    asserts that the two parameters are equal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertNotEquals(mixed testValue, mixed expected[, String message])` method
    asserts that the two parameters are not equal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertEval(Function fn[, String message, Mixed arguments])` method asserts
    that the function evaluated in the page DOM returns `true`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `assertEvalEquals(Function fn, mixed expected[, String message, Mixed arguments])`
    method asserts that the function evaluated in the DOM page returns the expected
    value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertMatch(mixed subject, RegExp pattern[, String message])` method asserts
    that the value matches the regular expression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertRaises(Function fn, Array args[, String message])` method asserts
    that the function called with the provided arguments raises an error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertType(mixed value, String type[, String message])` method asserts
    that the value type is the expected one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can assert the DOM elements in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: The `assertExists(String selector[, String message])` method asserts that the
    selector matches at least one element in the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertDoesntExist(String selector[, String message])` method asserts that
    the selector does not match any element in the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertField(String inputName, String expected[, String message])` method
    asserts that the form field has the expected value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertVisible(String selector[, String message])` method asserts that the
    element is visible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertNotVisible(String selector[, String message])` method asserts that
    the matched element is not visible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertSelectorHasText(String selector, String text[, String message])`
    method asserts that the matched element contains the expected text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertSelectorDoesntHaveText(String selector, String text[, String message])`
    method asserts that the matched element does not contain the given text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can assert the page information in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: The `assertHttpStatus(Number status[, String message])` method asserts that
    the current HTTP status is the expected one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertResourceExists(Function testFx[, String message])` method asserts
    that the resource exists on the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The parameter can be a string (the resource name), a regular expression (supposed
    to match at least one existing resource), or a function (supposed to return `true`
    for at least one of the existing resources).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `assertTextExists(String expected[, String message])` method asserts that
    the page contains the expected text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertTextDoesntExist(String unexpected[, String message])` method asserts
    that the page does not contain the given text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertTitle(String expected[, String message])` method asserts that the
    page title is the expected one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertTitleMatch(RegExp pattern[, String message])` method asserts that
    the page title matches the given regular expression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assertUrlMatch(Regexp pattern[, String message])` method asserts that the
    page URL matches the given regular expression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The WaitFor methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following is the list of the CasperJS `waitFor` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: The `waitForText(String|RegExp pattern[, Function then, Function onTimeout,
    Number timeout])` method waits until the text is present
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `waitForSelector(String selector[, Function then, Function onTimeout, Number
    timeout])` method waits until the selector is satisfied
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `waitWhileSelector(String selector[, Function then, Function onTimeout,
    Number timeout])` method waits until the selector is not satisfied anymore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `waitUntilVisible(String selector[, Function then, Function onTimeout, Number
    timeout])` method waits until the selected element is visible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `waitWhileVisible(String selector[, Function then, Function onTimeout, Number
    timeout])` method waits until the selected element is not visible anymore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `waitFor(Function testFx[, Function then, Function onTimeout, Number timeout])`
    method waits until the function returns true
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `waitForResource(Function testFx[, Function then, Function onTimeout, Number
    timeout])` method waits until the function matches an existing resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `waitForPopup(String|RegExp urlPattern[, Function then, Function onTimeout,
    Number timeout])` method waits until the pattern matches a pop-up URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The wait() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the list of `waitFor` methods, we have not mentioned the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: It just waits for a certain amount of time (in milliseconds).
  prefs: []
  type: TYPE_NORMAL
- en: But as discussed previously, in JavaScript, *time is nothing and timing is everything*.
    Similarly, in JavaScript, waiting for a given amount of time brings no guarantee
    to the accuracy of our test.Generally, we use `wait()` when we are desperate.
    For instance, if we have no way to modify the tested page, we cannot append an
    interesting signal to observe such as the `'noresult'` and `'success'` classes
    in our example.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, let's just note a relevant usage of the `wait()` method. When
    our page contains some progressive JPEG images and we want to capture a new image
    (see the *Beyond testing (Advanced)* recipe), we need to wait for some time before
    capturing, in order to let our images render entirely.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Resurrectio from the GitHub sources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Resurrectio is not entirely stable yet, so it might be interesting to use the
    current development version.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, you have to clone the `resurrectio` GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: It will produce a `./resurrectio` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in Chrome, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Tools** | **Extensions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Developer mode** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Load unpacked extension** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `./resurrectio` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Writing advanced tests (Intermediate)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will detail how to simulate rich web interactions using CasperJS,
    in order to achieve more complex testing.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following sections cover the various steps in writing advanced tests.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, let''s learn how to download files. The most common way to download
    a file from a web page is by providing a link to this file as follows (`example4.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create the following CasperJS script (`example4.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: It should open our page, click on the first link, log the current page URL,
    reopen the page, click on the second link, and log the current page URL.
  prefs: []
  type: TYPE_NORMAL
- en: To complete our test, let's create a folder named `files`, add two dummy files
    in this folder (`text.txt` and `text.pdf`), and start our SimpleHTTPServer web
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading files](img/9431OS_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we clicked on the first link, we actually opened the `.txt` file as a page,
    but when we clicked on the second one, we opened the file that was kept in the
    original location. If we check the current folder content, we will see that nothing
    has been downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: So the `click()` method will not help us in downloading any file; it will navigate
    to the corresponding link if PhantomJS is able to open it, or it will open the
    file that was kept in the original location, producing no error and no output.
  prefs: []
  type: TYPE_NORMAL
- en: 'The right way to download a file is by using the `download()` method. Let''s
    fix our test using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The outcome looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading files](img/9431OS_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that our files have been downloaded, let's discover how to upload files.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To perform a file upload during a test, we will use the `fill()` method. The
    `fill()` method allows us to fill in a form and optionally, to submit it. Plus,
    it is able to manage file inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example (`example5.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You can perform the following steps with this test:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://imagebin.org](http://imagebin.org).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add your image now!** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, fill in the image submission form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assert that we obtain a page containing our image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display this page URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, the `'image'` field is managed the same way as the other fields;
    its value is just the path to our local image.
  prefs: []
  type: TYPE_NORMAL
- en: After passing the first parameter containing the fields values, we pass `true`
    as a second parameter to `fill()`, so that the form is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running the test, we make sure that we put an image named `test.png`
    in our current folder and when we run the test, the following is what we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Uploading files](img/9431OS_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s see how we can manage authentication. When we try to open a page that
    requires authentication, we get a 401 HTTP error (`example6.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The outcome is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authentication](img/9431OS_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s use the `setHttpAuth()` method to log in properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is what we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authentication](img/9431OS_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `setHttpAuth()` method can only be used for HTTP authentication. When our
    targeted page uses a web form authentication, we just need to fill the authentication
    form. The following is an example (`example7.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The output looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authentication](img/9431OS_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Keyboard and mouse events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Simulating keyboard and mouse events is another very common use case. Let''s
    consider the following page (`example8.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: If we launch our simple HTTP server, we can try opening the page at `http://localhost:8000/example8.html`.
  prefs: []
  type: TYPE_NORMAL
- en: When we enter a value in the input text, a message is displayed under the input
    text, indicating the number of characters we have entered.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test this behavior, we can use the `sendKeys()` method (`example8.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the code, we will see the following result. If you enter `Eric`
    in the text input, the message will display **You have entered 4 characters**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Keyboard and mouse events](img/9431OS_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `sendKeys()` method inserted the text into the text input and also triggered
    the `onkeyup` event.
  prefs: []
  type: TYPE_NORMAL
- en: The `sendKeys()` method can produce a key event on any element of the page (not
    necessarily inputs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change the page `example8.html` so that the header becomes editable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Now if we click on the header, we can change its text content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify our test script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, perform the following steps with this test:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the header and enter a new text at its beginning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assert the new header content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Keyboard and mouse events](img/9431OS_01_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we have an extra assertion in our test script now, we have changed the `begin()`
    method's second parameter from `1` to `2`.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding mouse events, we have already used the `casper.click()` method. It
    takes a selector as a parameter and triggers a click event on the designated element.
  prefs: []
  type: TYPE_NORMAL
- en: We use it to click on links or buttons, for instance.
  prefs: []
  type: TYPE_NORMAL
- en: We can also trigger other mouse events using the `mouseEvent()` method; its
    first parameter is the event type and the second is the targeted element selector.
  prefs: []
  type: TYPE_NORMAL
- en: 'It can trigger the following events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouseup`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mousedown`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`click`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mousemove`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseover`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseout`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s create the following web page (`example9.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: It presents a list of headers and when the mouse goes over any of them, a counter
    is incremented.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can test this page using `mouseEvent()`, as shown in the following test
    (`example9.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The outcome is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Keyboard and mouse events](img/9431OS_01_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: But CasperJS also provides a specific `'mouse'` module to control the mouse
    directly. It allows to move the mouse and to control the click (down, up, click,
    double-click).
  prefs: []
  type: TYPE_NORMAL
- en: 'It might be useful if we want to test complex mouse interaction such as drag-and-drop.
    The following is a web page that provides a draggable box (`example10.html`) using
    the jQueryUI `draggable()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'We can test this page using the CasperJS mouse module (`example10.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Keyboard and mouse events](img/9431OS_01_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that there are a lot of interesting things in this test:'
  prefs: []
  type: TYPE_NORMAL
- en: We set the viewport size (using the `viewportSize` option). In our case, it
    is useful because we need to make sure that we have enough room to move the box
    where we want.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use jQuery to get the current position of the box! As jQuery is loaded in
    our tested page, we can use it through `assertEval()`, as *it runs the code in
    the tested page*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use `down()`, then `move()`, and then `up()` to produce a drag-and-drop move
    from point (5,5) to point (400,200).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even if they might seem quite similar, there are differences between `casper.click()`
    and `casper.mouse.click()`.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, `casper.click()` only accepts a selector as a parameter, while
    `casper.mouse.click()` accepts either a selector or a (x, y) position.
  prefs: []
  type: TYPE_NORMAL
- en: But more importantly, they do not work the same way; `casper.click()` creates
    an event and *dispatches* it to the targeted event, but `casper.mouse.click()`
    does not deal with any element and just *produces a mouse action* at the given
    position.
  prefs: []
  type: TYPE_NORMAL
- en: If `casper.click()` is not able to dispatch the event (because of a `preventDefault()`
    method hanging somewhere), it will default to the `casper.mouse.click()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`casper.mouseEvent()` works exactly as `casper.click()`.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's explore a few more details about the different features we have just used
    in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Passing parameters to the download() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `download()` method might also accept two extra parameters as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: So, we can produce an HTTP request using the method we want and pass the needed
    arguments in the data object.
  prefs: []
  type: TYPE_NORMAL
- en: setHttpAuth might have surprising timing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Consider that we come back to our test (`example6.js`) about `setHttpAuth()`
    and try to chain the two versions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'We would expect the tests to be successful due to the following conditions:
    we get a 401 error if we are anonymous and are able to view the page if we log
    in.'
  prefs: []
  type: TYPE_NORMAL
- en: 'But, the following is what we obtain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![setHttpAuth might have surprising timing](img/9431OS_01_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first test fails; we do not get a 401 error, but we get a 200 status instead!
    This means we are actually logged in.
  prefs: []
  type: TYPE_NORMAL
- en: Why is that? It's because CasperJS chains the steps that are enclosed into `then()`
    blocks. If `setHttpAuth()` is not enclosed in a `then()` block, it will be effective
    right from the beginning (the `start()` call) to the end.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s enclose it in a `then()` block as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, the tests pass as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![setHttpAuth might have surprising timing](img/9431OS_01_example6-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Best practices (Intermediate)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will discuss the essential best practices for web functional testing
    with CasperJS.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the real thing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our software quality depends on our tests' accuracy. Testing is always good,
    but if we don't test the software's behavior accurately, we might miss out on
    some potential problems. To create accurate tests, we must forget about the system
    and how it works, and we must focus on user interactions.
  prefs: []
  type: TYPE_NORMAL
- en: It might sound obvious but it is not, because most of the time we design and
    code the system and do not use it (as a standard user) a lot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider a typical example of a basic web form. Here is an important
    thing to know about web forms: *users never submit web forms*. They actually do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter values into inputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the **Submit** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These actions do produce a form submission, but the users don't actually submit
    the form by themselves; their web browsers do it for them. Or, let's say the system
    does it for them.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, if we want to test this system, we cannot rely on its supposed behavior.
  prefs: []
  type: TYPE_NORMAL
- en: That is why our tests must produce the real user interactions and then assert
    that the resulting behavior is correct.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the following example (`example11.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'This page shows the following three forms:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one contains first name, last name, and age, and a **Save** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second one has the same fields but no **Save** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third one has all the fields and a **Save** button, but the `age` field
    is hidden
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we launch our simple HTTP server, the first one will work fine, but the other
    two will not be usable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s test it as follows (`example11-1.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This test uses `casper.fill()` to submit the form with a value for each field
    and then asserts so we obtain the three values in the resulting URL.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this test, we use `casper.cli.options` to read options passed to the `casperjs`
    command; this way, we can use the same script to test the three different forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run it. The following screenshot shows the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the real thing](img/9431OS_01_example11-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The tests pass with the first form as expected, but they also pass with the
    other two!
  prefs: []
  type: TYPE_NORMAL
- en: Why is that? It's because the `fill()` method is blind to the mistakes we have
    introduced in the forms; it just performs a submission without checking if a real
    user could actually do the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a test that is closer to real user interaction (`example11-2.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Here we use `sendKeys()` to enter the values in the inputs, and we use the `click()`method
    to click on the **Submit** button. This is basically what the user would do with
    his or her keyboard and mouse.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s run it. The following screenshot shows the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the real thing](img/9431OS_01_example11-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is much better; now our tests fail at the second and third forms.
  prefs: []
  type: TYPE_NORMAL
- en: This does not mean that we must never use the `fill()` method. That was just
    an example. The main point here is that we must always be careful to keep as close
    as possible to the user interactions. But of course, we also need to create concise
    and maintainable tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'So a good approach is to write several kinds of tests, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Some precise tests focusing on the user interactions (where we will use `sendKeys()`
    and `click()` instead of `fill()`, for instance) to make sure each page is usable
    by itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some concise tests focusing on screen chaining and usage scenarios (where we
    can use `fill()`, for instance) to make sure the complete application is working
    fine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Surviving design changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some people prefer to write tests at the end of their development, when they
    know everything is pretty much stable.
  prefs: []
  type: TYPE_NORMAL
- en: But the best time to write tests is from the beginning to the end of the development.
    This has already been demonstrated in a lot of books, but one of the most obvious
    reasons is that we usually produce the biggest part of our bugs during the development
    phase, and tests are a great help to fight bugs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, people who write tests at the end are right: the website is
    (usually) more stable after development than during development.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the aspects that might change a lot is the design. Design changes should
    not impact application features. But sometimes they do, and there may be a lot
    of reasons for it, such as a CSS attribute can make a button invisible, modification
    in an element's ID can break a JavaScript call, and so on. But we do not mind
    this much, because if the design breaks any feature, our tests will warn us immediately.
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that sometimes our tests fail even if the design changes haven't
    broken any features. This is very bad because it implies that we cannot trust
    our tests to know whether something is broken or not.
  prefs: []
  type: TYPE_NORMAL
- en: Why our tests would fail if all the features have been preserved? This is just
    because our tests are less design-proof than our web page features, and the writing
    of design-proof tests depends mainly on selectors.
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, our test inner logic (for example, if we click *here*, we should get
    *that*) should not be impacted by design changes.
  prefs: []
  type: TYPE_NORMAL
- en: But what could easily break if we are not careful enough is the way we define
    *here* and *that*. They will be defined using selectors. We must choose selectors
    that focus on the logic and not on the layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Instead of | Prefer | Because |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `"div#form-container span input"` | `"form[name=''registration''] input[name=''firstname'']"`
    | We only depend on form elements and their names |'
  prefs: []
  type: TYPE_TB
- en: '| `"div ul li:first-child a"` | `"#results .result:first-child a"` | We use
    IDs and classes instead of tag names |'
  prefs: []
  type: TYPE_TB
- en: '| `"a#reset-btn"` | `x("//a[normalize-space(text())=''Reset'']")` | We use
    the link text instead of its ID (and to do this, we switch to the XPath selector)
    |'
  prefs: []
  type: TYPE_TB
- en: 'By doing this, we can change our design, switch from Bootstrap to Foundation,
    reorganize the layout, and so on, and be sure that if the tests fail, they do
    for a good reason: because we have actually broken the logic.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating test suites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until now, we have created single test scripts for our different example pages,
    but when we test our real applications, we will need to test a lot of different
    features and scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: It will definitely work if we do it in a single long test script, but obviously,
    it will be more difficult to refactor it, maintain it, share it with a team, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: So, quite a simple, good practice is to split our different feature tests and
    testing scenarios into separate scripts. And fortunately, CasperJS provides the
    `casperjs test` command so we can run all our tests at once.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s reuse our `example8.html` page from the previous chapter. This page
    proposes two features: an editable header and a simple form with text input.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's imagine that we want to create two different tests for these two features.
    So let's create a folder (named `suit`, for instance), and in this folder, create
    the files `test_editable_header.js` and `test_form.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `test_editable_header.js` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `test_form.js js` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, let''s launch our tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating test suites](img/9431OS_01_example12-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, we have passed our folder path to
    the `casperjs test` command, and it has run all the tests contained in this folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `casperjs test` command offers interesting options, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--fail-fast`: This is used to stop the test suite at the *first error*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--pre=pre-test.js`: This is used to run a test *before* executing the test
    suite'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--post=post-test.js`: This is used to run a test *after* executing the test
    suite'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--includes=file1.js,file2.js`: This is used to include some tests *before*
    running *each test* in the suite'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--direct`: This is used to output the log message in the console'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--log-level=<level>`: This is used to choose the log level (`DEBUG`, `INFO`,
    `WARNING`, or `ERROR`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--xunit=<filename>`: This is used to export the test results to the xUnit
    format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `--pre` and `--post` options are typically used to implement a pre-test
    setup and post-test tear down, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if our system allows users to modify their preferences and we
    want to test it, the pre-test setup will create a fake user profile so we can
    test profile preference change. The post-test tear down will remove this fake
    user profile, so the next time we run the test suite, it will not break because
    the profile already exists.
  prefs: []
  type: TYPE_NORMAL
- en: Running CasperJS on Jenkins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Writing tests is a good starting point, but then we have to make sure we run
    them often enough. One of the **Continuous Integration** (**CI**) principles is
    to run the tests each time we commit a change in the source repository. To do
    this, we need a CI tool, and Jenkins is one of the most widely used ones.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will not cover the detailed Jenkins installation and configuration here as
    it is not a desktop application but a service exposed by a server. We assume it
    is deployed on one of our servers.
  prefs: []
  type: TYPE_NORMAL
- en: To run our CasperJS tests on Jenkins, we need first to make sure that PhantomJS
    and CasperJS are installed on the machine where Jenkins is running (refer to the
    *Installing CasperJS* section).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we open the Jenkins web interface and click on **New Job** as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running CasperJS on Jenkins](img/9431OS_01_jenkins1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the **Build** section, we add a new **Execute shell** step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running CasperJS on Jenkins](img/9431OS_01_jenkins2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then we click on **Save** and enter our test command in the **Build** section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming our tests are in a folder named `tests` at the root of our repository,
    we would enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the textbox in which we will add the preceding
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running CasperJS on Jenkins](img/9431OS_01_jenkins3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now launch a build manually or let Jenkins launch builds automatically
    (depending on the triggers we have chosen). Jenkins will directly interpret the
    CasperJS output, and we will get a build history showing failures and successes
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running CasperJS on Jenkins](img/9431OS_01_jenkins4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also see the details of a given build as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running CasperJS on Jenkins](img/9431OS_01_jenkins5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running CasperJS on Travis-CI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Travis-CI is a Cloud service that can be hooked to our GitHub repositories.
    It is free for public repositories. Each time we push changes to GitHub, Travis-CI
    does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a blank virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checks the current sources from GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploys our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runs the tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifies the user (via e-mail, IRC, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also does the same when we receive a pull request on our GitHub repository
    so we know whether the submitted pull request breaks the tests or not before merging
    it. This information is displayed directly on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run CasperJS tests on Travis-CI, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [travis-ci.org](http://travis-ci.org) and sign in with our GitHub account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Profile** and copy the token.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the GitHub repository, click on **Settings / Service Hooks**, choose **Travis-CI**,
    enter our GitHub ID and the previously copied Travis token, check **Active**,
    and click on **Update**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `.travis.yml` file in the root of our repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This `.travis.yml` file is used to explain to Travis how to deploy the test
    environment and how to run the tests.
  prefs: []
  type: TYPE_NORMAL
- en: We just need to deploy CasperJS because PhantomJS is preinstalled on Travis.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since PhantomJS is completely headless, there is no need run Xvfb.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a typical `.travis.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: In the `install` section, we download the CasperJS code and check the last stable
    version. In the `before_script` section, we set up PhantomJS to allow access to
    external URLs, and in the `script` section, we launch the tests.
  prefs: []
  type: TYPE_NORMAL
- en: Just like Jenkins, Travis-CI will interpret the CasperJS output result as a
    success or failure, and we will be notified accordingly. Our tests can target
    a local server, and if so, our `.travis.yml` file will need to deploy the needed
    HTTP server and its components.
  prefs: []
  type: TYPE_NORMAL
- en: But the tests can also target an external URL, and if so, we have to make sure
    the code is updated on the real server as soon as it is pushed to GitHub. This
    can be done conveniently using GitHub pages.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond testing (Advanced)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will present other CasperJS usages apart from testing.
  prefs: []
  type: TYPE_NORMAL
- en: Web scripting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Web scripting means to run a script that will use web pages as a backend service.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, scripting a web page is quite a brutal way to obtain a service. Using
    a REST API (or any API) would be much more elegant. But in some cases there is
    no API. CasperJS is able to simulate user interaction on our web pages in order
    to test them.
  prefs: []
  type: TYPE_NORMAL
- en: But obviously, we can use its abilities to simulate user interaction on any
    web page in order to automate a process. That is why CasperJS is a very efficient
    web scripting tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we want a script to tell us how many unread messages we have in
    our Gmail inbox. We could use a script like the following (`example12.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'In this script, we log in and get the HTML code for the **Inbox** link (in
    the left menu) as it contains the number of unread e-mails, like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: To extract the number, we use a regular expression, `/\((\d+)\)/`, that will
    look for any number enclosed in brackets.
  prefs: []
  type: TYPE_NORMAL
- en: 'And the following is what we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Web scripting](img/9431OS_01_example12-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s try to get a local weather report (`example13.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we just load the Yahoo! Weather home page and then extract the information
    we want (the current temperature, our location, and the immediate forecast). After
    we have done this, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Web scripting](img/9431OS_01_example13-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Nice!
  prefs: []
  type: TYPE_NORMAL
- en: But be careful; if Yahoo! decides to change its weather page's layout, the selectors
    we have used might become invalid and our service would be down. This is the main
    weakness of the web scripting approach. And, in this very use case (getting Yahoo!
    Weather reports), we will build a much safer service by using the excellent Yahoo!
    Query Language REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, web scripting might sometimes be a light and convenient solution
    when we are facing complex cross-platform integration issues.
  prefs: []
  type: TYPE_NORMAL
- en: Screenshot production
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CasperJS is able to produce an image from the current page using the following
    two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`this.capture(String filepath)`: This takes a screenshot of the entire page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`this.captureSelector(String filepath, String selector)`: This restricts the
    capture to a specific element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A simple example (`example14.js`) is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: If we run it, it'll work just fine, but we will obtain a very large image because
    this Wikipedia page is very long and we have captured it entirely.
  prefs: []
  type: TYPE_NORMAL
- en: 'Being able to obtain a screenshot of a very long page is not always easy, so
    this feature can be helpful. If we want to reduce the captured area, we can set
    the viewport size and use `captureSelector` on the `html` element as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: And now we get a smaller image.
  prefs: []
  type: TYPE_NORMAL
- en: A typical usage of the capture methods is obviously **debugging**; when we do
    not know why our CasperJS is not working as expected, before spending time logging
    everything or inspecting all the elements, a simple screenshot might show us that
    we just forgot to perform a valid authentication due to which we are still blocked
    at the login page.
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting usage is **documentation**. Writing a good user manual often
    involves inserting a lot of screenshots. Producing these screenshots can be quite
    long and painful, and it will be even more painful when we have to update them
    because the design may have changed since the last time we published the user
    manual.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, how about using CasperJS to generate all the screenshots we need automatically
    from the current version of our web application? The principle is simple: we write
    a CasperJS script that reproduces the usage scenarios described in our documentation,
    we obtain a set of images, and we fuse them with our documentation text. Markdown,
    reStructuredText4, Textile, or similar formats are good candidates.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Resurrectio (see the *Getting started with CasperJS (Simple)* section) proposes
    to export any recorded sequence in two versions: a CasperJS version (which has
    our actual test scripts) and a reStructuredText version (which only contains comments
    and screenshots).'
  prefs: []
  type: TYPE_NORMAL
- en: So we can run the test, obtain the screenshots, and compile our reStructuredText
    (with `rst2html`, `rst2doc`, `rst2pdf`, or so on) to get our document. Every time
    the design changes, we just re-run the test, recompile the text, and the document
    is updated automatically.
  prefs: []
  type: TYPE_NORMAL
- en: We can also use the capture methods from dynamically generated rendering to
    *produce static contents*.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if we use **d3.js** ([http://d3js.org/](http://d3js.org/)) to
    draw gorgeous charts on our web page but would like to insert them in a newsletter
    or allow an old web browser to see them, we can turn them into images using CasperJS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take the following example from the [d3js.org](http://d3js.org) tutorial
    (`example15.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: It reads a CSV file that contains population by age group and draws a donut
    chart using SVG.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s provide the needed data (`data.csv`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Now we can launch our simple HTTP server and have a look. It will work well
    if we are using Chrome, for instance, but won't work with Internet Explorer 8.
  prefs: []
  type: TYPE_NORMAL
- en: 'CasperJS can be used to capture this chart so we can serve an equivalent image
    to the web browser that is not able to render SVG (`example15.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'And the following is what we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot production](img/9431OS_01_example15-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: CasperJS can also be a smart way to provide a **server-side printing service**.
  prefs: []
  type: TYPE_NORMAL
- en: When we want our users to print our web pages, the most common and simple approach
    for them to use would be the web browser `print` feature. If we need to customize
    the rendering for printing (hide the navigation bar, change some colors or fonts,
    and so on), we can easily do so using a specific CSS for print (by mentioning
    `media="print"` inside the `link` tag). However, sometimes this is not enough.
  prefs: []
  type: TYPE_NORMAL
- en: Background images are a typical instance of where standard printing can be annoying;
    background images are hidden during printing, and it makes sense as we prefer
    to print text on a white background. But if we use them for a specific goal, such
    as filling the different bars of a bar chart, the printed result will be disappointing.
    (In our case, all the bars will be white, so we will not be able to distinguish
    between them.)
  prefs: []
  type: TYPE_NORMAL
- en: We will also have problems when we want to change the displayed information
    between screen and print. For instance, our page might contain a map with few
    markers. On the screen, we display a label when the mouse goes over a marker,
    but on print, we would prefer that all the labels are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: In these problematic cases, a good solution is to use CasperJS as a **backend
    printing service**. The purpose is to highlight a service that takes as a parameter
    any URL, which returns an image capture of the corresponding page ready to be
    printed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our service will simply run a CasperJS script that will open the provided URL
    and then capture it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'As we cannot use the `media="print"` attribute to apply some print-specific
    CSS (as CasperJS will open the page in the screen mode), we can dynamically add
    a specific class on the body element before capturing so we can easily style the
    rendering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'And if we want to allow a specific process to be performed before capturing
    (such as displaying all the marker labels on a map as discussed before), we might
    wait for a specific selector to be available. The list of selectors is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our target page, we add a JavaScript in charge of setting up the page for
    printing and adding a marker class on the `body` element as desired:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In CasperJS, we wait for this marker class to appear before capturing the output:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This service can be implemented with any web framework (we just need to be able
    to make a system call to run our CasperJS script).
  prefs: []
  type: TYPE_NORMAL
- en: '**Django Screamshot** is a Django implementation and can be found at [https://github.com/makinacorpus/django-screamshot](https://github.com/makinacorpus/django-screamshot).'
  prefs: []
  type: TYPE_NORMAL
