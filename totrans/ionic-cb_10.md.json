["```js\n$ ionic start MyAppVersion blank \n$ cd MyAppVersion\n```", "```js\n$ ionic cordova plugin add cordova-plugin-app-version\n$ npm install --save @ionic-native/app-version\n```", "```js\n<widget id=\"com.ionicframework.myappversion637242\" version=\"0.0.123\"  >\n```", "```js\n$ mkdir ./src/services\n```", "```js\nimport { Injectable } from \"@angular/core\";\nimport { AppVersion } from \"@ionic-native/app-version\";\n\n@Injectable()\nexport class MyEnv {\n  constructor(private appVersion: AppVersion) {}\n\n  getAppVersion() {\n    return this.appVersion.getVersionCode();\n  }\n}\n```", "```js\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { ErrorHandler, NgModule } from \"@angular/core\";\nimport { IonicApp, IonicErrorHandler, IonicModule } from \"ionic-angular\";\nimport { SplashScreen } from \"@ionic-native/splash-screen\";\nimport { StatusBar } from \"@ionic-native/status-bar\";\nimport { AppVersion } from \"@ionic-native/app-version\";\nimport { MyEnv } from \"../services/myenv\";\n\nimport { MyApp } from \"./app.component\";\nimport { HomePage } from \"../pages/home/home\";\n\n@NgModule({\n  declarations: [MyApp, HomePage],\n  imports: [BrowserModule, IonicModule.forRoot(MyApp)],\n  bootstrap: [IonicApp],\n  entryComponents: [MyApp, HomePage],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    AppVersion,\n    MyEnv,\n    { provide: ErrorHandler, useClass: IonicErrorHandler }\n  ]\n})\nexport class AppModule {}\n```", "```js\n<ion-header>\n  <ion-navbar>\n    <ion-title>\n      MyAppVersion\n    </ion-title>\n  </ion-navbar>\n</ion-header>\n\n<ion-content padding class=\"center home\">\n  <button ion-button (click)=\"getVersion()\">Get App Version</button>\n  <p class=\"large\" *ngIf=\"ver\">\n    MyAppVersion {{ ver }}\n  </p>\n</ion-content>\n```", "```js\nimport { Component } from \"@angular/core\";\nimport { NavController } from \"ionic-angular\";\nimport { MyEnv } from \"../../services/myenv\";\n\n@Component({\n  selector: \"page-home\",\n  templateUrl: \"home.html\"\n})\nexport class HomePage {\n  public ver: string;\n\n  constructor(private navCtrl: NavController, public myEnv: MyEnv) {}\n\n  getVersion() {\n    console.log(this.myEnv.getAppVersion());\n    this.myEnv.getAppVersion().then(data => (this.ver = data));\n  }\n}\n```", "```js\npage-home {\n  .home {\n    p.large {\n      font-size: 16px;\n    }\n  }\n\n  ion-content {\n    &.center {\n      text-align: center;\n    }\n  }\n}\n```", "```js\n$ ionic cordova run ios\n```", "```js\n$ ionic cordova run android\n```", "```js\nproviders: [MyEnv] \n```", "```js\n  getAppVersion() { \n    return this.appVersion.getVersionCode(); \n  }\n```", "```js\n  getVersion() { \n    console.log(this.myEnv.getAppVersion()); \n    this.myEnv.getAppVersion().then((data) => this.ver = data); \n  } \n```", "```js\n$ ionic cordova build ios\n```", "```js\n~/Library/Developer/Xcode/Archives \n```", "```js\n $ ionic cordova build --release android\n```", "```js\n$ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000 \n```", "```js\n$ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore HelloWorld-release-unsigned.apk alias_name \n```", "```js\n$ zipalign -v 4 HelloWorld-release-unsigned.apk HelloWorld.ap\n```"]