["```js\nnpm install\nnpm install socket.io --save\n\n```", "```js\nvar http = require('http');\nvar socketio = require('socket.io');\n```", "```js\nvar server = http.createServer(app);\n```", "```js\nvar io = socketio.listen(server);\n```", "```js\nserver.listen(3000);\n```", "```js\n<script src=\"img/backbone.marionette.js\"></script>\n<script src=\"img/socket.io.js\"></script>\n```", "```js\nvar SOCKET = io.connect('http://localhost:3000');\n\nBackbone.sync = function (method, model, options) {\n  var success = function (data) {\n    if (options.success) options.success(data, null, null);\n    model.trigger('sync', model, data, options);\n  };\n\n  var data;\n  if (method === 'create' || method === 'update') {\n    data = model.toJSON();\n  } else {\n    data = { id: model.get('id') };\n  }\n  socket.emit(method, data, success);\n};\n```", "```js\n_.templateSettings = {\n  interpolate: /\\{\\{(.+?)\\}\\}/g\n};\n\nvar App = new Backbone.Marionette.Application();\nApp.on('initialize:after', function () {\n  Backbone.history.start({ pushState: true });\n});\n```", "```js\nApp.module('Socket', function (Socket) {\n  Socket.io = io.connect('http://localhost:3000');\n});\n```", "```js\nApp.module('User', function (User) { \n  var UserModel = Backbone.Model.extend({});\n\n  User.Collection = Backbone.Collection.extend({\n    model: UserModel,\n    initialize: function () {\n      var thiz = this;\n      App.Socket.io.on('user:join', function (user) {\n        thiz.add(user);\n      });\n\n      App.Socket.io.on('user:leave', function (user) {\n        thiz.findWhere(user).destroy();\n      });\n    }\n  });\n});\n```", "```js\nvar ItemView = Backbone.Marionette.ItemView.extend({\n  tagName: 'li', \n  template: '#user'\n});\n\nUser.CollectionView = Backbone.Marionette.CollectionView.extend({\n  tagName: 'ul',\n  itemView: ItemView\n});\n```", "```js\n<script type='text/template' id='user'>\n  {{ name }}x\n</script>\n```", "```js\n<script src=\"img/app.js\"></script>\n<script src=\"img/socket.js\"></script>\n<script src='/users.js'></script>\n```", "```js\nApp.module('Layout', function (Layout, App) {\n  Layout.Layout = Backbone.Marionette.Layout.extend({\n    template: '#appLayout',\n    regions: {\n      users: '#users',\n      rooms: '#rooms',\n      conversation: '#conversation',\n      controls: '#controls' \n    }\n  });\n\n  Layout.MainRegion = Backbone.Marionette.Region.extend({\n    el: '#main'\n  });\n});\n```", "```js\n<script type='text/template' id='appLayout'>\n  <div id='users'></div>\n  <div id='conversation'></div>\n  <div id='rooms'></div>\n  <div id='controls'></div>\n</script>\n```", "```js\nApp.addInitializer(function () {\n  App.addRegions({\n    main: App.Layout.MainRegion\n  });\n});\n```", "```js\nApp.module('Router', function (Router) {\n  var Router = Backbone.Marionette.AppRouter.extend({\n    initialize: function () {\n      App.layout = new App.Layout.Layout();\n      App.main.show(App.layout);\n    },\n    appRoutes: {\n      '': 'index'\n    }\n  });\n});\n```", "```js\nfunction Controller () {\n  this.users = new App.User.Collection();\n}\nController.prototype.index = function () {\n  App.layout.users.show(new App.User.CollectionView({\n    collection: this.users\n  }));\n};\n```", "```js\nApp.addInitializer(function () {\n  var r = new Router({\n    controller: new Controller()    \n  });\n});\n```", "```js\n<script src='/layout.js'></script>\n<script src='/router.js'></script>\n<script>\n  App.start();\n</script>\n```", "```js\naddUser: function (name, callback, context) {\n  App.Socket.io.emit('join', name, function (joined) {\n    if (joined) App.name = name;\n    callback.call(context joined);\n  });\n}\n```", "```js\nvar users = {};\nio.sockets.on('connection', function (socket) {\n});\n```", "```js\nsocket.on('join', function (name, response) {\n  if (userExists(name)) {\n    response(false); \n  } else {\n    response(true);\n    users[socket.id] = { name: name };\n    io.sockets.emit('user:join', { name: name });\n  }\n});\n```", "```js\nObject.keys(users).forEach(function (id) {\n  socket.emit('user:join', users[id]);\n});\n```", "```js\nUser.LogInView = Backbone.Marionette.ItemView.extend({\n  tagName: 'form',\n  template: '#form',\n  model: new Backbone.Model({ \n    placeholder: 'name',\n    button: 'Join' \n  }),\n  events: {\n    'click button': 'addUser'\n  },\n  ui: {\n    'input': 'input'\n  },\n  addUser: function (e) {\n    e.preventDefault();\n    var name = this.ui.input.val();\n    this.collection.addUser(name, function (joined) {\n      if (joined) {\n        this.trigger('user-added');\n      } else {\n        this.ui.input.val('');\n      }\n    }, this);\n    return false;\n  }\n});\n```", "```js\n<script type='text/template' id='form'>\n  <input type='text' placeholder='{{placeholder}}' />\n  <button> {{button}} </button>\n</script>\n```", "```js\nvar loginView = new App.User.LogInView({\n  collection: this.users\n});\t\nApp.layout.controls.show(loginView);\n```", "```js\nsocket.on('disconnect', function () {\n  if (users[socket.id]) {\n    io.sockets.emit('user:leave', users[socket.id]);\n    delete users[socket.id]; \n  }\n});\n```", "```js\nonRender: function () {\n  if (this.model.get('name') === App.name) {\n    this.el.className = \"highlight\";\n  }\n}\n```", "```js\nApp.module('Room', function (Room) {\n  var RoomModel = Backbone.Model.extend({\n    url: function () {\n      return '/room/' + this.get('name');\n    }\n  });\n});\n```", "```js\nRoom.Collection = Backbone.Collection.extend({\n  model: RoomModel,\n  initialize: function () {\n    App.Socket.io.on('room:new', this.getRoom.bind(this));\n  },\n  getRoom: function(room) {\n    return this.findWhere({ name: room }) || this.add({ name: room });\n  }\n});\n```", "```js\naddRoom: function (room) {\n  if (!this.findWhere({ name: room }).length) {\n    this.add({ name: room });\n  }\n}\n```", "```js\ndb.find(function (err, records) {\n  var rooms = {};\n  records.forEach(function (record) { rooms[record.room] = 0; });\n  Object.keys(rooms).forEach(function (room) {\n    socket.emit('room:new', room);\n  })\n});\n```", "```js\nvar RoomView = Backbone.Marionette.ItemView.extend({\n  tagName: 'li',\n  template: '#room',\n  events: {\n    'click a': 'chooseRoom'\n  },\n  chooseRoom: function (e) {\n    e.preventDefault();\n    Backbone.history.navigate(this.model.url(), { trigger: true });\n  }\n});\n\nRoom.CollectionView = Backbone.Marionette.CollectionView.extend({\n  tagName: 'ul',\n  itemView: RoomView\n});\n```", "```js\n<script type='text/template' id='room'>\n  <a href='/room/{{ name }}'>{{ name }}</a>\n</script>\n```", "```js\nRoom.CreateRoomView = Backbone.Marionette.ItemView.extend({\n  tagName: 'form',\n  template: '#form',\n  model: new Backbone.Model({ \n    placeholder: 'room name', \n    button: 'Join' \n  }),\n  events: {\n    'click button': 'createRoom'\n  },\n  ui: {\n    'input': 'input'\n  },\n  createRoom: function (e) {\n    e.preventDefault();\n    var name = this.ui.input.val().toLowerCase()\n          .replace('/ /g, '_').replace(/\\W/g, ''),\n        room = this.collection.getRoom(name);\n    Backbone.history.navigate(room.url(), { trigger: true });\n    return false;\n  }\n});\n```", "```js\n<script src='/rooms.js'></script>\n```", "```js\nthis.rooms = new App.Room.Collection();\n```", "```js\nController.prototype.index = function () {\n  App.layout.users.show(new App.User.CollectionView({ \n    collection: this.users \n  }));\n  App.layout.rooms.show(new App.Room.CollectionView({ \n    collection: this.rooms \n  }));\n\n  var loginView = new App.User.LogInView({\n    collection: this.users\n  });\n  App.layout.controls.show(loginView);\n  loginView.on('user-added', function () {\n    App.layout.controls.show(new App.Room.CreateRoomView({ \n      collection: this.rooms \n    }));\n  }, this);\n};\n```", "```js\n'room/:room': 'room'\n```", "```js\nController.prototype.showUsersAndRooms = function () {\n  App.layout.users.show(new App.User.CollectionView({\n    collection: this.users \n  }));\n  App.layout.rooms.show(new App.Room.CollectionView({\n    collection: this.rooms \n  }));\n};\n```", "```js\nController.prototype.showLogin = function () {\n  var loginView = new App.User.LogInView({\n    collection: this.users\n  });\n  App.layout.controls.show(loginView);\n  return loginView;\n};\n```", "```js\nController.prototype.index = function () {\n  this.showUsersAndRooms();\n  this.showLogin().on('user-added', function () {\n    App.layout.controls.show(new App.Room.CreateRoomView({ \n      collection: this.rooms \n    }));\n  }, this);\n};\n```", "```js\nController.prototype.room = function (room) {\n  this.showUsersAndRooms();\n  App.room = this.rooms.getRoom(room);\n  if (!App.name) {\n    this.showLogin().on('user-added', function () { \n      // render chat room conversation\n    });\n  } else {\n    // render chat room conversation\n  }\n};\n```", "```js\nApp.module('Chat', function (Chat) {\n  var Message = Backbone.Model.extend({});\n\n  Chat.Collection = Backbone.Collection.extend({\n    model: Message,\n    initialize: function (models, options) {\n      var thiz = this;\n      App.Socket.io.emit('room:join', options.room, this.add.bind(this)); \n\n      App.Socket.io.on('message:new', function (data) {\n        if (data.room === options.room) {\n          thiz.add(data);\n        }\n      });\n    }\n  });\n});\n```", "```js\nvar MessageView = Backbone.Marionette.ItemView.extend({\n  tagName: 'li',\n  template: '#message'\n});\n\nChat.CollectionView = Backbone.Marionette.CollectionView.extend({\n  tagName: 'ul',\n  itemView: MessageView,\n  onRender: function () {\n    setTimeout(this.render.bind(this), 60000);\n  }\n});\n```", "```js\n<script type='text/template' id='message'>\n  <strong> {{ user }} </strong>: \n  {{ text }}\n  <span> {{ moment(date).fromNow() }} </span>\n</script>\n```", "```js\nChat.CreateMessageView = Backbone.Marionette.ItemView.extend({\n  tagName: 'form',\n  template: '#form',\n  model: new Backbone.Model({ \n    placeholder: 'message', \n    button: 'Post' \n  }),\n  events: {\n    'click button': 'addMessage'\n  },\n  ui: {\n    'input': 'input'\n  },\n  addMessage: function (e) {\n    e.preventDefault();\n    App.Socket.io.emit('message:new', { \n      user: App.name,\n      text: this.ui.input.val(), \n      room: App.room.get('name'),\n      date: new Date()\n    });\n    this.ui.input.val('').focus();\n    return false;\n  }\n});\n```", "```js\nsocket.on('message:new', function (data) {\n  db.insert(data, function (msg) {\n    io.sockets.emit('message:new', msg);\n\n    db.find({ room:data.room }, function (msgs) {\n      if (msgs.length === 1) {\n        io.sockets.emit('room:new', data.room);\n      }\n    });\n  });\n});\n```", "```js\nController.prototype.showChat = function () {\n  App.layout.controls.show(new App.Chat.CreateMessageView());\n  App.layout.conversation.show(new App.Chat.CollectionView({\n    collection: new App.Chat.Collection([], { \n      room: App.room.get('name') \n    })\n  }));\n};\n```", "```js\nController.prototype.room = function (room) {\n  this.showUsersAndRooms();\n  App.room = this.rooms.getRoom(room);\n  if (!App.name) {\n    this.showLogin().on('user-added', this.showChat.bind(this));\n  } else {\n    this.showChat();\n  }\n};\n```", "```js\n'user/:user': 'user'\n```", "```js\nController.prototype.user = function (user) {\n  this.showUsersAndRooms();\n\n  this.users.addUser(user, function (joined) {\n    if (joined) {\n      App.layout.controls.show(new App.Room.CreateRoomView({\n        collection: this.rooms \n      }));\n    } else {\n      Backbone.history.navigate('', { trigger: true });\n    }\n  }, this);\n};\n```", "```js\n/room/Pets/name/Andrew\n/name/Andrew/room/Pets\n```", "```js\n'room/:room/user/:user': 'room_user',\n'user/:user/room/:room': 'user_room'\n```", "```js\nController.prototype.room_user = function (room, user) {\n  this.showUsersAndRooms();\n  App.room = this.rooms.getRoom(room);\n\n  this.users.addUser(user, function (joined) {\n    if (joined) {\n      this.showChat(room);\n    } else {\n      Backbone.history.navigate(App.room.url(), { trigger: true });\n    }\n  }, this);\n};\n```", "```js\nController.prototype.user_room = function (user, room) {\n  this.room_user(room, user);\n};\n```", "```js\n<link rel=\"stylesheet\"  href=\"/style.css\" />\n```", "```js\nbody {\n  font-family: sans-serif;  \n  padding: 0;\n  margin: 0;\n}\n\nul {\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n}\n```", "```js\n#users, #rooms {\n  float: left;\n  width: 13%;\n  margin: 1%;\n  font-size: 80%;\n}\n\n#users li {\n  padding: 5px;\n  border-bottom: 1px solid #ccc;\n}\n.highlight {\n  font-weight: bold;\n  background: #ececec;\n}\n```", "```js\n#rooms li {\n  padding: 0;\n  border-bottom: 1px solid #ccc;\n}\n#rooms li a {\n  text-decoration: none;\n  color: #000;\n  display: block;\n  padding: 5px;\n}\n#rooms li a:hover {\n  background: #ececec;\n}\n```", "```js\n#conversation {\n  float: left;\n  width:68%;\n  margin: 1%;\n  margin-bottom: 60px;\n}\n\n#conversation li {\n  padding: 10px;\n  border-bottom: 1px solid #ececec;\n}\n#conversation li span {\n  color: #ccc;\n  font-size: 75%;\n  float: right;\n}\n```", "```js\n#controls {\n  background: #ececec;\n  padding: 10px;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n}\n\n#controls input {\n  border: 1px solid #ccc;\n  padding: 5px;\n  width: 300px;\n}\n\n#controls button {\n  border: 1px solid #ccc;\n  background: #efefef;\n  padding: 5px 15px;\n}\n```"]