["```js\n/* src/Ch03/Ch03_Greet.re */\nlet *greet*(*person*: *Ch02_Demo*.person) = /* (1), (2), (3) */\n  \"Hello, \" ++ /* (4), (5) */\n  *person.name* ++\n  \" with ID \" ++\n  *string_of_int*(*person.id*) ++ /* (6) */\n  \"!\";\n```", "```js\n// src/Ch03/Ch03_Greet.bs.js\nfunction *greet*(*person*) {\n  return \"Hello, \"\n    + *person*[1]\n    + \" with ID \"\n    + *String*(*person*[0])\n    + \"!\";\n}\n```", "```js\n/* src/Ch03/Ch03_Domain.re */\nmodule *Person* = {\n  type t = {*id*: int, *name*: string};\n  let *make*(*id*, *name*) = {*id*, *name*};\n};\n\nmodule *Company* = {\n  type t = {*id*: int, *name*: string, *employees*: list(*Person*.t)};\n};\n```", "```js\n// src/Ch03/Ch03_Domain.bs.js\nfunction *make*(*id*, *name*) { return [*id*, *name*]; }\n\nvar *Person* = [*make*];\nvar *Company* = [];\n*exports.Person*  = *Person*;\n*exports.Company* = *Company*;\n```", "```js\n/* src/Ch03/Ch03_GreetAgain.re */\nlet *greetAgain*(*person*) = /* (1) */\n  \"Hello again, \" ++\n  *person.Ch03_Domain.Person.name* ++ /* (2) */\n  \" with ID \" ++\n  *string_of_int*(*person.id*) ++\n  \"!\";\n```", "```js\n/** src/Ch03/Ch03_GreetAgain.rei (1), (2)\n    Contains a way to greet a person. */\n\n/** Greet someone with a name and ID, again. (3) */\nlet *greetAgain*: *Ch03_Domain.Person*.t => string; /* (4) */\n```", "```js\n/* src/Ch03/Ch03_ModuleType.re */\nmodule type PersonType = {\n  type t = {*id*: int, *name*: string};\n  let *make*: (int, string) => t; /* (1) */\n};\n\nmodule *Person*: PersonType = { /* (2) */\n  type t = {*id*: int, *name*: string};\n\n  let *massage*(*name*) = *String.trim*(*String.capitalize*(*name*)); /* (3) */\n  let *make*(*id*, *name*) = {*id*, *name*: *massage*(*name*)}; /* (4) */\n};\n```", "```js\n// src/Ch03/Ch03_ModuleType.bs.js\nvar *$$String* = *require*(\"bs-platform/lib/js/string.js\"); // (1)\nfunction *make*(*id*, *name*) {\n  return [*id*, *$$String*.*trim*(*$$String*.*capitalize*(*name*))]; // (2)\n}\nvar *Person* = [*make*];\n*exports*.*Person* = *Person*;\n```", "```js\n(Output from bsb -w)\n  We've found a bug for you!\n  /Users/yawar/src/learning-tydd-reason/src/Ch03/Ch03_ModuleType.re 8:29-11:1\n\n   6 │ };\n   7 │ \n   8 │ module Person: PersonType = {\n   9 │   type t = {id: int, name: string};\n  10 │   let massage(name) = String.trim(String.capitalize(name));\n  11 │ };\n\n  Signature mismatch:\n  Modules do not match:\n    { type t = { id: int, name: string, }; let massage: (string) => string; }\n  is not included in\n    PersonType\n  The value `make' is required but not provided\n  File \"/Users/yawar/src/learning-tydd-reason/src/Ch03/Ch03_ModuleType.re\", line 5, characters 3-31:\n    Expected declaration\n```", "```js\n(Output from bsb -w)\n  We've found a bug for you!\n  /Users/yawar/src/learning-tydd-reason/src/Ch03/Ch03_ModuleType.re 10:23-40\n\n   8 │   type t = {id: int, name: string};\n   9 │ \n  10 │   let massage(name) = Ch03_Greet.process(name);\n  11 │   let make(id, name) = {id, name: massage(name)};\n  12 │ };\n\n  The value process can't be found in Ch03_Greet\n```", "```js\nlet *bob* = {*Ch03_ModuleType.Person.id*: 1, *name*: \" bob    \"};\n```", "```js\n/** src/Ch03/Ch03_AbstractPerson.rei */\n\ntype id = int;\ntype name = string;\ntype t; /* (1) */\n\nlet *make*: (id, name) => t;\nlet *id*: t => id;\nlet *name*: t => name;\n\n/* src/Ch03/Ch03_AbstractPerson.re */\ntype id = int; /* (2) */\ntype name = string;\ntype t = {*id*, *name*}; /* (3) */\n\nlet *id*(*t*) = *t.id*;\nlet *name*(*t*) = *t.name*;\nlet *massage*(*name*) = *String.trim*(*String.capitalize*(*name*));\nlet *make*(*id*, *name*) = {*id*, *name*: *massage*(*name*)};\n```", "```js\n/* src/Ch03/Ch03_Person.rei */\n\nmodule *Name*: { /* (1) */\n  type t;\n  let *make*: string => t;\n  let *toString*: t => string;\n};\n\ntype id = int; /* (2) */\ntype t = {*id*, *name*: *Name*.t}; /* (3) */\n\nlet *make*: (id, *Name*.t) => t; /* (4) */\nlet *id*: t => id;\nlet *name*: t => *Name*.t;\n\n/* src/Ch03/Ch03_Person.re */\nmodule *Name* = {\n  type t = string; /* (5) */\n  let *make*(*string*) = *String*.(*capitalize*(*trim*(*string*))); /* (6) */\n  let *toString*(*t*) = *t*; /* (7) */\n};\n\ntype id = int;\ntype t = {*id*, *name*: *Name*.t};\n\nlet *make*(*id*, *name*) = {*id*, *name*};\nlet *id*(*t*) = *t.id*;\nlet *name*(*t*) = *t.name*;\n```", "```js\nlet *payBill*(*personId*, *businessId*) = ...;\n*payBill*(*acmeCo.id*, *bob.id*);\n```", "```js\n/* src/Ch03/Ch03_Id.re */\nmodule type Id = { /* (1) */\n  type t;\n  let *make*: int => t;\n  let *toInt*: t => int;\n};\n\nmodule *IntId* = { /* (2) */\n  type t = int;\n  let *make*(*int*) = *int*;\n  let *toInt*(*t*) = *t*;\n};\n\nmodule *PersonId*: Id = *IntId*; /* (3) */\nmodule *CompanyId*: Id = *IntId*;\n\nlet *bobId* = *PersonId.make*(1); /* (4) */\nlet *acmeCoId* = *CompanyId.make*(1);\n/*\nlet result = bobId == acmeCoId; /* (5) */\n*/\n```", "```js\n(Output from bsb -w)\n  We've found a bug for you!\n  /Users/yawar/src/learning-tydd-reason/src/Ch03/Ch03_Id.re 19:23-30\n\n  17 │ let bobId = PersonId.make(1);\n  18 │ let acmeCoId = CompanyId.make(1);\n  19 │ let result = bobId == acmeCoId;\n\n  This has type:\n    CompanyId.t\n  But somewhere wanted:\n    PersonId.t\n```", "```js\n// src/Ch03/Ch03_Id.bs.js\nfunction *make*(*$$int*) { return *$$int*; }\nfunction *toInt*(*t*) { return *t*; }\n\nvar *IntId* = [*make*, *toInt*];\nvar *PersonId* = *IntId*;\nvar *CompanyId* = *IntId*;\n\nvar *bobId* = 1;\nvar *acmeCoId* = 1;\n```"]