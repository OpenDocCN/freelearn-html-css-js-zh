["```js\nvar http = require('http');\n\nvar server = http.createServer(function(request, response) {\n  console.log('Got Request Headers: ');\n  console.log(request.headers);\n  response.writeHead(200, {\n    'Content-Type': 'text/plain'\n  });\n  response.write('PONG');\n  response.end();\n}).listen(8080);\n```", "```js\nvar http = require('http');\nvar server = new http.Server();\n\nserver.on(\"connection\", function(socket) {\n  console.log(\"Client arrived: \" + new Date());\n  socket.on(\"end\", function() {\n    console.log(\"Client left: \" + new Date());\n  });\n})\n\nserver.listen(8080);\n```", "```js\nserver.on(\"request\", function(request, response) {\n  request.setEncoding(\"utf8\");\n  request.on(\"readable\", function() {\n    console.log(request.read())\n  });\n});\n```", "```js\ncurl http://localhost:8080 -d \"Here is some data\"\n```", "```js\nserver.setTimeout(2000, function(socket) {\n  socket.write(\"Too Slow!\", \"utf8\");\n  socket.end();\n});\n```", "```js\nvar http = require('http');\n\nhttp.request({\n  host: 'www.google.com',\n  method: 'GET',\n  path: \"/\"\n}, function(response) {\n  response.setEncoding('utf8');\n  response.on('readable', function() {\n    console.log(response.read())\n  });\n}).end();\n```", "```js\nhttp.get(\"http://www.google.com/\", function(response) {\n  console.log(\"Status: \" + response.statusCode);\n}).on('error', function(err) {\n  console.log(\"Error: \" + err.message);\n});\n```", "```js\nvar http = require('http');\nvar server = new http.Server();\n\nserver.on(\"request\", function(request, socket) {\n  http.request({\n    host: 'www.google.com',\n    method: 'GET',\n    path: \"/\",\n    port: 80\n  }, function(response) {\n    response.pipe(socket);\n  }).end();\n});\n\nserver.listen(8080);\n```", "```js\nvar http = require('http');\nvar net = require('net');\nvar url = require('url');\nvar proxy = new http.Server();\n\nproxy.on('connect', function(request, clientSocket, head) {\n  var reqData = url.parse('http://' + request.url);\n  var remoteSocket = net.connect(reqData.port, reqData.hostname, function() {\n    clientSocket.write('HTTP/1.1 200 \\r\\n\\r\\n');\n    remoteSocket.write(head);\n\n    // The bi-directional tunnel\n    remoteSocket.pipe(clientSocket);\n    clientSocket.pipe(remoteSocket);\n  });\n}).listen(8080, function() {\n```", "```js\n  var request = http.request({\n    port: 8080,\n    hostname: 'localhost',\n    method: 'CONNECT',\n    path: 'www.google.com:80'\n  });\n  request.end();\n```", "```js\n  request.on('connect', function(res, socket, head) {\n    socket.setEncoding(\"utf8\");\n    socket.write('GET / HTTP/1.1\\r\\nHost: www.google.com:80\\r\\nConnection: close\\r\\n\\r\\n');\n    socket.on('readable', function() {\n      console.log(socket.read());\n    });\n    socket.on('end', function() {\n      proxy.close();\n    });\n  });\n});\n```", "```js\nopenssl genrsa -out server-key.pem 2048\nopenssl req -new -key server-key.pem -out server-csr.pem\nopenssl x509 -req -in server-csr.pem -signkey server-key.pem -out server-cert.pem\n\n```", "```js\nvar https = require('https');\nvar fs = require('fs');\n\nhttps.createServer({\n  key: fs.readFileSync('server-key.pem'),\n  cert: fs.readFileSync('server-cert.pem')\n}, function(req,res) {\n   ...\n}).listen(443)\n```", "```js\nvar options = {\n  key  : fs.readFileSync('mysite.key'),\n  cert  : fs.readFileSync('mysite.com.crt'),\n  ca  : [ fs.readFileSync('gd_bundle.crt') ]\n};\n```", "```js\n\"scripts\": {\n  \"start\": \"node server.js\"\n}\n```", "```js\nweb: node server.js\n```", "```js\nAdding mongolab on mighty-hamlet-7855... done, v14 (free)\nWelcome to MongoLab. Your new subscription is being created and will be available shortly. Please consult the MongoLab Add-on Admin UI to check on its progress.\n\n```", "```js\nMONGOLAB_URI: mongodb://heroku_app2485743:ie02k3nnic3l0tjfgi3135inq@ds035488.mongolab.com:35488/heroku_app2487483\n\n```", "```js\nvar mongodb = require('mongodb');\nvar db = new mongodb.Db('your_db_identifier',\n  new mongodb.Server('dt019963.mongolab.com', 29960, {})\n);\ndb.open(function (err, db_p) {\n  if (err) { throw err; }\n  db.authenticate('your_username', '6i490i5d3teoen62524vqkccgu', function (err, replies) {\n    // You are now connected and authenticated.\n  });\n});\n```", "```js\ngit init\ngit add .\ngit commit -m \"initial commit\"\n\n```", "```js\nheroku create\n\n```", "```js\nCreating mighty-hamlet-7855... done, stack is cedar\nhttp://mighty-hamlet-7855.herokuapp.com/ | git@heroku.com:mighty-hamlet-7855.git\nGit remote heroku added\n\n```", "```js\ngit push heroku master\n\n```", "```js\n-----> Node.js app detected\n-----> Requested node range: 0.10.x\n...\n-----> Building runtime environment\n-----> Discovering process types\n Procfile declares types -> web\n...\n-----> Launching... done, v3\n http://mighty-hamlet-7855.herokuapp.com/ deployed to Heroku\n\n```", "```js\nheroku ps:scale web=1\n\n```", "```js\nScaling dynos... done, now running web at 1:1X.\n\n```", "```js\n=== web (1X): `node server.js`\nweb.1: up 2014/04/04 17:40:34 (~ 27m ago)\n\n```", "```js\nvar editor = new jsoneditor.JSONEditor(container, {\n  change : function() {\n    var json = editor.get();\n\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', '/update', true);\n    xhr.onload = function () {\n      console.log(\"POST RESPONSE: \", this.responseText);\n    };\n    xhr.send('data=' + JSON.stringify(json));\n  },\n  mode : \"form\"\n});\n```", "```js\nNODE_ENV=PRODUCTION node myprogram.js\n\n```", "```js\nconsole.log(process.env.NODE_ENV);\n// production\n```", "```js\nheroku ps:scale web=0\n```", "```js\nv11 Deploy 310fe56  nataxia@gmail.com 2014/05/04 18:19:45 (~ 6m ago)\nv10 Deploy a0c6005  nataxia@gmail.com 2014/05/04 18:15:17 (~ 10m ago)\n...\n\n```", "```js\n> heroku releases:info v11\n=== Release v11\nBy:   spasquali@gmail.com\nChange: Deploy 310fe56\nWhen:  2014/04/04 18:19:45 (~ 8m ago)\n\n```", "```js\n> heroku rollback v11\nRolling back mighty-hamlet-7855... done, v11\n\n```", "```js\nsudo gem install rhc\ngem update rhc\n\n```", "```js\nrhc app create MyApp nodejs-0.10 mongodb-2.4\nApplication Options\n-------------------\nDomain:   <your namespace>\nCartridges: nodejs-0.10, mongodb-2.4\nGear Size: default\nScaling:  no\n\nCreating application 'MyApp' ...\n...\nYour application 'myapp' is now available.\n\nURL:    http://yoursub.rhcloud.com/\nSSH to:   5366e4cc500446d15300022d@yoursub.rhcloud.com\nGit remote: ssh://5366e4cc500446d15300022d@yoursub.rhcloud.com/~/git/myapp.git/\nCloned to: /json_editor/myapp\n\n```", "```js\nindex.html\njsoneditor.css\njsoneditor.js\npackage.json\nserver.js\n/img\n```", "```js\n}).listen(8081);\n```", "```js\n}).listen(process.env.OPENSHIFT_NODEJS_PORT || 8081, process.env.OPENSHIFT_NODEJS_IP || \"127.0.0.1\");\n```", "```js\ngit add .\ngit commit -m \"first\"\ngit push\n\n```", "```js\nremote: Starting MongoDB cartridge\nremote: Starting NodeJS cartridge\nremote: Starting application 'myapp' ...\nremote: -------------------------\nremote: Git Post-Receive Result: success\nremote: Activation status: success\nremote: Deployment completed with status: success\n\n```", "```js\nrhc ssh myapp\n\n```", "```js\nmongodb.log\nnodejs.log\n\n```", "```js\nrhc tail\n\n```", "```js\nCentOS release 6.5 (Final)\n\n```", "```js\nLinux version 2.6.32-279.14.1.el6.x86_64 (mockbuild@cb79.bsys.dev.centos.org) (gcc version 4.4.6 20120305 (Red Hat 4.4.6-4) (GCC) ) #1 SMP Tue Nov 6 23:43:09 UTC 2012\n\n```", "```js\n> fuser 8080/tcp\n8080/tcp:      31878\n\n```", "```js\nlrwxrwxrwx 1 root root 0 Oct 9 2013 /proc/31878/exe -> /root/nvm/v0.10.20/bin/node\n\n```", "```js\n> lsof -i :8080\nCOMMAND  PID USER  FD  TYPE  DEVICE NODE NAME\nnode  31878 root  10u IPv4 22570201 TCP *:webcache (LISTEN)\n\n```", "```js\nservice docker start\n\n```", "```js\nservice docker stop\n\n```", "```js\ndocker info\n\n```", "```js\n{\n  \"name\": \"docker-example\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"description\": \"Example of running a Node app within a CENTOS container\",\n  \"author\": \"Sandro Pasquali <spasquali@gmail.com>\",\n  \"dependencies\": {\n    \"express\": \"4.1.1\"\n  }\n}\n```", "```js\nvar express = require('express');\n\nvar port = 8087;\n\nvar app = express();\napp.get('/', function (req, res) {\n  res.send('You just deployed some Node!\\n');\n});\n\napp.listen(port);\nconsole.log('Running on http://localhost:' + port);\n```", "```js\nnpm install;\nnode app.js\n// Running on http://localhost:8087\n\n```", "```js\n# DOCKER-VERSION 0.9.0\nFROM  centos:6.4\n\n```", "```js\n# Enable EPEL for Node.js\nRUN   rpm -Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\n# Install Node.js and npm\nRUN   yum install -y npm\n\n```", "```js\n# Bundle app source\nADD . /src\n\n```", "```js\n# Install app\nRUN cd /src; npm install\n\n```", "```js\nEXPOSE 8087\n\n```", "```js\nCMD [\"node\", \"/src/app.js\"]\n\n```", "```js\ndocker build -t docker/example .\n\n```", "```js\nREPOSITORY   TAG   IMAGE ID   CREATED    VIRTUAL SIZE\ndocker/example latest d8bb295407f1 20 minutes ago   667.8 MB\ncentos     6.4  539c0211cd76 2 months ago    300.6 MB\n\n```", "```js\ndocker run -p 49001:8087 -d docker/example\n\n```"]