- en: Chapter 2. File Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Copying files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compressing files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating symbolic links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concatenating files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching a single URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching multiple URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll be focused on making use of Grunt for our every-day file
    management tasks. A day rarely passes without us copying, compressing, downloading,
    or concatenating files, and with the help of Grunt, we can automate even these
    simple tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Copying files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our quest for ultimate project automation, it won't be long before we'll
    want to automate the copying of files or directories from one part of our project
    to another. The `contrib-copy(0.5.0)` plugin provides us with this functionality,
    along with some other options that become especially useful in the process of
    copying files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps will take us through copying a single file from one directory
    to another.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-copy` plugin
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s also set up a sample file in our project, which we can try out with
    the copy operation. Create a file named `sample.txt` in the `src` directory with
    the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can add the configuration for our `copy` task, which will instruct
    it to copy our sample file from the `src` directory to the `dest` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the destination directory specified in the copy operation will be
    automatically created if it does not yet exist.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we can run the `grunt copy` command, which should provide output informing
    us of the successful copy operation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To confirm that the sample file was copied, we can now open the `dest/sample.txt`
    file using our favorite editor and confirm that its contents match the original
    file's contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `copy` task provides some useful configuration options that allow us to
    process the contents of the files that are being copied, copy the source file's
    permissions, and set the file permissions for destination files.
  prefs: []
  type: TYPE_NORMAL
- en: Processing file contents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `copy` task provides the option of altering the contents of files as they
    are being copied. There are a number of useful applications for this functionality,
    such as rendering a template or replacing parts of a file that are matched by
    a regular expression.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we'll simply focus on prepending a string to a copied
    file. We'll build upon our work earlier in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by providing a stub function for the `process` option that just
    passes through the content without altering anything. This will change the configuration
    of our `copy` task to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can alter the function passed to the `process` option so that it prepends
    a string to the contents of the file being copied, making it look similar to the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now run the `grunt copy` command again, we will see a confirmation of
    the file being copied, and looking at the contents of the `dest/sample.txt` file,
    we should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copying the source file's permissions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The permissions attached to a file are usually of great importance. By default,
    the copy task will ignore the file permissions of the source file, but if you''d
    like them to be applied to the destination file, then the `mode` option can be
    set to `true` as per the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Setting the permissions of the destination file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case you'd like to specify the permissions that the destination files of
    a copy operation should get, you can do so by setting the `mode` option to the
    desired permission mode using the traditional Unix permissions in octal format.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read more about the traditional Unix permissions convention at [http://en.wikipedia.org/wiki/File_system_permissions](http://en.wikipedia.org/wiki/File_system_permissions).
  prefs: []
  type: TYPE_NORMAL
- en: There's also a handy Unix file permissions calculator available at [http://permissions-calculator.org/](http://permissions-calculator.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example configuration will make the destination file readable
    and writable, only for their owner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Compressing files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The compression of files is quite a common practice within our local system,
    and across the World Wide Web. The most prominent use for file compression is
    to reduce the size of data that will be transferred across a network.
  prefs: []
  type: TYPE_NORMAL
- en: For our own purposes, we may at some point want to automate the compression
    of a file or folder that we'd like to make available for download or prepare for
    a transfer. The `contrib-compress (0.10.0)` plugin provides us with this functionality,
    along with options to specify the archive type and algorithms used in the process.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps will take us through compressing a single sample file using
    the default settings of the `compress` task.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-compress` plugin
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we can create a sample file to demonstrate the compression functionality.
    Let's download a book in text format as an example and save it as `book.txt` in
    our project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The text version of Jane Austen''s *Pride and Prejudice* can be downloaded
    at the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://www.gutenberg.org/cache/epub/1342/pg1342.txt](http://www.gutenberg.org/cache/epub/1342/pg1342.txt)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we can add the following configuration for the `compress` task, which
    will compress our sample file into the `book.txt.gz` archive file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To try it out, we can run the `grunt compress` command, which should produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we take a look at the `book.txt.gz` file, we'll see that it's about half
    the size of the `book.txt` file. We can also go as far as extracting this file
    using our favorite archive extractor to confirm that it contains the original
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `compress` task provides us with several options that allow us to archive
    a collection of files, specify the compression mode, and specify the archive compression
    level.
  prefs: []
  type: TYPE_NORMAL
- en: Archiving a collection of files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our main recipe, we compressed a single file on its own, but it's possibly
    more common to archive a collection of files into one single file. In order to
    do this, we alter our `src` configuration to specify the files that should be
    archived, remove the `dest` configuration, and then provide a filename for our
    archive file using the `archive` option.
  prefs: []
  type: TYPE_NORMAL
- en: The following steps continues from the work we did earlier in this recipe, through
    to archiving and compressing a collection of files into a single file.
  prefs: []
  type: TYPE_NORMAL
- en: First, we'll add some more files that we'd like to have archived and compressed.
    Let's change the name of our previously downloaded book from `book.txt` to `austen.txt`
    and download a couple more, renaming them as `wells.txt` and `thoreau.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The two sample books mentioned can be downloaded from the following URLs in
    the same order they were mentioned:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://www.gutenberg.org/cache/epub/36/pg36.txt](http://www.gutenberg.org/cache/epub/36/pg36.txt)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://www.gutenberg.org/files/205/205-0.txt](http://www.gutenberg.org/files/205/205-0.txt)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we can change our `compress` task''s configuration from just compressing
    the file named `book.txt` to including all three downloaded books in an archive
    file named `books.zip`. We do this by changing its configuration to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s try it out by running the `grunt compress` command, which should provide
    us with output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We should now see the `books.zip` archive in our project directory. To confirm
    that it contains all the files we specified, you can use your favorite archiving
    tool to explore or extract it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specifying the compression mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, the `compress` task will determine the compression mode to use in
    its operations by looking at the extension of the file name specified in `archive`
    option. This behavior can be altered by indicating the compression mode using
    the `mode` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example will make use of the `zip` mode despite the extension
    of the filename specified in the `archive` option being `tgz`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of publication, the compression modes supported for the `mode` option
    were `gzip`, `deflate`, `deflateRaw`, `tar`, `tgz`, and `zip`.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the archive compression level
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case we'd like to specify a compression rate when using either the `zip`
    or `gzip` compression modes, we can do so using the `level` option. This option
    is set to `1` by default, but can be set to any integer up to `9`, the latter
    indicating better compression at the cost of slower performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following configuration will compress our books to level `9`, which takes
    a little longer, but decreases the size of the produced archive by about 10 percent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Creating symbolic links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating references to files and directories can be quite useful in various
    circumstances, most notably when we'd like to distribute duplicates of a file
    and keep them up to date without having to manually copy them after each change.
  prefs: []
  type: TYPE_NORMAL
- en: The functionality of creating symbolic links is provided to us by the `contrib-symlink`
    `(0.3.0)` plugin. It's a very simple plugin but provides all the standard Grunt
    configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps will take us through creating a symbolic link to a file
    named `assets/img/logo.png` inside the `www/img` directory.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-symlink` plugin
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we can add the following configuration, which will create the symbolic
    link in the `img/www` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To try it out, we can run the `grunt symlink` command, which should inform
    us of the creation of the symbolic link with output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you now take a look inside the `www/img` directory, you should see a symbolic
    link called `logo.png`, which points to the `assets/img/logo.png` file. You can
    perhaps also try to change the contents of the image to see them reflected in
    the symbolic link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Concatenating files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The practice of concatenating files is quite often found in the routines of
    all kinds of developers. Be it combining fragmented log files or many smaller
    source files into one big code base, joining files end-to-end comes in handy on
    a regular basis.
  prefs: []
  type: TYPE_NORMAL
- en: Concatenation functionality can be provided to us by the `contrib-concat` `(0.4.0)`
    plugin. Along with the standard Grunt configurations, it also provides a large
    set of options to tailor its behavior according to our unique requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps will take us through concatenating three JavaScript source
    files into one combined source file, so that we only have to serve one source
    file along with our web application.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-concat` plugin
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For our example, we''ll also require three JavaScript source files. Let''s
    call them `one.js`, `two.js`, and `three.js`, and provide them each with the following
    contents, only replacing `<filename>` with their names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can add the following configuration for the `concat` task, which will
    combine our three sample files into the `all.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To try out our task, we can run the `grunt concat` command, which will produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now take a look at the `all.js` file that was created, which will contain
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `concat` task provides us with several options that allow us to join the
    files with a custom separator, strip banners before concatenation, add a banner
    and footer to the concatenated result, and process the source file's contents
    before concatenation.
  prefs: []
  type: TYPE_NORMAL
- en: Joining files with a custom separator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's usually preferable to have a prominent separator between the joined files
    so that it's easier to distinguish between them, in case we need to review the
    contents of the concatenated result.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `concat` task will just separate joined files with a linefeed
    character, but a custom separator can be provided using the `separator` option
    as per the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the task with the preceding example code should produce a `all.js`
    file with contents similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Stripping banners before concatenation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The need to remove banners from JavaScript source files before joining them
    is quite common since they usually take up quite a bit of extra storage space,
    and as every web developer knows, every bit counts.
  prefs: []
  type: TYPE_NORMAL
- en: 'To automatically strip banners from JavaScript source files, we can make use
    of the `stripBanners` option as per the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Adding a banner and footer to the concatenated result
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once the concatenated result is generated, it can often be useful to add a
    banner or footer that provides some extra information. The following example does
    just that by making use of the `banner` and `footer` options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the task with the preceding example code should produce an `all.js`
    file with contents similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Processing the source file's contents before concatenation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case we'd like to alter the contents of the files we're joining, the `concat`
    task provides the option of doing so with code, before concatenating them. This
    can be done by providing a function to the `process` option, which receives the
    file content, modifies it, and returns it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example makes use of this functionality to create a banner above
    each joined file that indicates its filename:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the task with the preceding example code should produce an `all.js`
    file with contents similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Fetching a single URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're working on web-based projects, you'll probably want to download something
    at some point. Downloading a file is quite a simple operation, but automating
    it can save you a significant amount of time in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: We'll make use of the relatively popular `curl` `(2.0.2)` plugin to download
    a resource from the Internet. The `curl` task is provided by this plugin to download
    single files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps will take us through using the **OpenWeatherMap API** to
    download the current weather for the city of London and saving it to the `london.json`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `curl` plugin as per
    the instructions provided in the *Installing a plugin* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we can add the following configuration to download London''s current weather
    information to the `london.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To test our setup, we can run the `grunt curl` command, which should provide
    us with output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we now take a look at the project directory, we should see the downloaded
    weather information saved to the `london.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we need more flexibility in our requests to download content, the `curl`
    task allows us to do so using the `request` HTTP client utility provided by the
    `request` package. The same options that can be used for the `request` utility
    can be provided in the `src` configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about the `request` HTTP client utility at the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/mikeal/request](https://github.com/mikeal/request)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example uses this functionality to provide an object for the
    query string of the request, instead of having it included in the URL string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Fetching multiple URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're automating resource downloads for your project, you'll probably want
    to download more than one resource to the same directory, and probably from the
    same site.
  prefs: []
  type: TYPE_NORMAL
- en: We'll make use of the relatively popular `curl` `(2.0.2)` plugin to download
    multiple resources from the Internet. It provides the `curl-dir` task specifically
    to download multiple resources.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through downloading both the Grunt and Node.js logos
    into the `logos` directory.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `curl` plugin as per
    the instructions provided in the *Installing a plugin* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we can add the following `curl-dir` task configuration, which will download
    the two logos into the `logos` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To test the task, we can run it using the `grunt curl-dir` command, which should
    provide output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We should now have a directory called `logos` in our project path that contains
    both the Grunt and Node.js logos.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `curl-dir` task provides us with several options that allow us to download
    similar URLs, save downloaded files to altered filenames, and download files using
    special request options.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading similar URLs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's also quite common that we might want to download multiple URLs that are
    very similar. In this case, we can make use of the brace expansion support provided
    by the `curl-dir` task.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following configuration example illustrates how we would go about downloading
    the weather information for London, Paris, and Tokyo, without having to repeat
    the start of each URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Saving downloaded files to altered filenames
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is also quite common to save downloaded resources to filenames other than
    the ones contained in their URLs. The `router` configuration provided by the `curl-dir`
    task allows us to specify a function that receives the URL we downloaded and return
    the filename that the resource should be saved to.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following configuration example illustrates how we can download weather
    information for three cities and save each of the results to a file with only
    the city name and the `.json` file extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Downloading files using special request options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we need more flexibility in our requests to download content, the `curl-dir`
    task allows us to do so using the `request` HTTP client utility provided by the
    `request` package. The same options that can be used for the `request` utility
    can be provided in the `src` configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following configuration example makes use of this functionality by providing
    the query parameters as objects rather than strings that are appended to the URLs,
    and also demonstrates using the `router` configuration discussed earlier for this
    type of setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
