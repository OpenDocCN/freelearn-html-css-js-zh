["```js\n    doctype html\n    html\n      head\n        title Sample Site\n      body\n        h1 Welcome to my Sample Site!\n    ```", "```js\n    clean: {\n      all: ['www']\n    },\n    jade: {\n      www: {\n        expand: true,\n        cwd: 'templates',\n        src: '**/*.jade',\n        dest: 'www',\n        ext: '.html'\n      }\n    },\n    connect: {\n      dev: {\n        options: {\n          base: 'www'\n        }\n      }\n    },\n    watch: {\n      www: {\n        files: 'templates/**/*.jade',\n        tasks: ['jade:www']\n      }\n    }\n    ```", "```js\n    grunt.registerTask('run', [\n      'clean:all',\n      'jade:www',\n      'connect:dev',\n      'watch:www'\n    ]);\n    ```", "```js\n    Running \"clean:all\" (clean) task\n    >> 0 paths cleaned.\n\n    Running \"jade:www\" (jade) task\n    >> 1 file created.\n\n    Running \"connect:dev\" (connect) task\n    Started connect web server on http://localhost:8000\n\n    Running \"watch\" task\n    Waitingâ€¦\n\n    ```", "```js\ngrunt.registerTask('default', [\n  'clean:all',\n  'jade:www',\n  'connect:dev',\n  'watch:www'\n]);\n```", "```js\n    module.exports = function (grunt) {\n      grunt.initConfig({});\n      grunt.registerTask('default', []);\n     grunt.registerTask(\n     'datetime',\n     'Prints out the current date and time.',\n     function () {\n     }\n     );\n    };\n    ```", "```js\n    grunt.registerTask(\n      'datetime',\n      'Prints out the current date and time.',\n      function () {\n        var date = new Date();\n     grunt.log.writeln(date.toString());\n      }\n    );\n    ```", "```js\n    Running \"datetime\" task\n    Thu Jan 1 2015 12:00:00 GMT\n\n    ```", "```js\n    module.exports = function (grunt) {\n      grunt.initConfig({\n        location: 'Earth',\n     datetime: '<%= new Date().toString() %>',\n     project: {\n     name: 'Life'\n     }\n      });\n      grunt.registerTask('default', []);\n    };\n    ```", "```js\n    grunt.registerTask(\n      'describe',\n      'Describes the situation.',\n      function () {\n      }\n    )\n    ```", "```js\n    var projectName = grunt.config('project.name');\n    var location = grunt.config('location');\n    var datetime = grunt.config('datetime');\n    grunt.log.write(\n      projectName + ' on ' + location + ' at ' + datetime\n    );\n    ```", "```js\n    Running \"describe\" task\n    Life on Earth at Thu Jan 1 2015 12:00:00 GMT\n    ```", "```js\n    module.exports = function (grunt) {\n      grunt.initConfig({\n        integral: 'check',\n     complex: {\n     important: 'present'\n     }\n      });\n    };\n    ```", "```js\n    grunt.registerTask(\n      'complete',\n      'Complete Configuration.',\n      function () {\n        grunt.config.requires('integral');\n        grunt.config.requires('complex.important');\n        grunt.log.write('Complete: Success!');\n      }\n    );\n    ```", "```js\n    grunt.registerTask(\n      'incomplete',\n      'Incomplete Configuration.',\n      function () {\n        grunt.config.requires('missing');\n        grunt.log.write('Incomplete: Success!');\n      }\n    );\n    ```", "```js\n    Running \"complete\" task\n    Complete: Success!\n\n    ```", "```js\n    Running \"incomplete\" task\n    Verifying property missing exists in config...ERROR\n    >> Unable to process task.\n\n    Aborted due to warnings.\n\n    ```", "```js\n    grunt.registerTask(\n      'independent',\n      'Independent task.',\n      function () {\n        grunt.log.write('Independent: Success!')\n      }\n    );\n    ```", "```js\n    grunt.registerTask(\n      'dependent',\n      'Dependent task.',\n      function () {\n        grunt.task.requires('independent');\n        grunt.log.write('Dependent: Success!')\n      }\n    );\n    ```", "```js\n    Running \"dependent\" task\n    Warning: Required task \"independent\" must be run first. Use --force to continue.\n\n    Aborted due to warnings.\n\n    ```", "```js\n    Running \"independent\" task\n    Independent: Success!\n    Running \"dependent\" task\n    Dependent: Success!\n    Done, without errors.\n\n    ```", "```js\n    grunt.registerTask(\n      'clock',\n      'Prints the time every second for 5 seconds.',\n      function () {\n      }\n    );\n    ```", "```js\n    var done = this.async();\n    var count = 5;\n    var interval = null;\n    ```", "```js\n    printTime = function () {\n      grunt.log.writeln(new Date());\n      count -= 1;\n      if (count <= 0) {\n        clearInterval(interval);\n        done();\n      }\n    };\n    ```", "```js\n    interval = setInterval(printTime, 1000);\n    ```", "```js\n    Running \"clock\" task\n    Thu Apr 1 2015 12:00:00 GMT\n    Thu Apr 1 2015 12:00:01 GMT\n    Thu Apr 1 2015 12:00:02 GMT\n    Thu Apr 1 2015 12:00:03 GMT\n    Thu Apr 1 2015 12:00:04 GMT\n\n    Done, without errors.\n\n    ```", "```js\n    grunt.registerTask(\n      'check',\n      'Fails if indicated in configuration.',\n      function () {\n      }\n    );\n    ```", "```js\n    var fail = grunt.config('shouldFail');\n    if (fail === true) {\n      return new Error('Error Message.');\n    } else {\n      grunt.log.writeln('Success!');\n    }\n    ```", "```js\n    grunt.initConfig({\n      shouldFail: false\n    });\n    ```", "```js\n    Running \"check\" task\n    Success!\n\n    Done, without errors.\n\n    ```", "```js\n    grunt.initConfig({\n      shouldFail: true\n    });\n    ```", "```js\n    Running \"check\" task\n    Warning: Task \"check\" failed. Use --force to continue.\n\n    Aborted due to warnings.\n\n    ```", "```js\ngrunt.registerTask(\n  'check',\n  'Fails if indicated in configuration.',\n  function () {\n var done = this.async();\n    var fail = grunt.config('shouldFail');\n    if (fail === true) {\n done(new Error('Error Message.'));\n    } else {\n      grunt.log.writeln('Success!');\n    }\n  }\n);\n```", "```js\ngrunt.registerTask(\n  'check',\n  'Fails if indicated in configuration.',\n  function () {\n    var fail = grunt.config('shouldFail');\n    if (fail === true) {\n      grunt.fail.fatal('Error message.');\n    } else {\n      grunt.log.writeln('Success!');\n    }\n  }\n);\n```", "```js\n    grunt.registerTask(\n      'welcome',\n      'Displays a welcome message.',\n      function () {\n      }\n    );\n    ```", "```js\n    var message = 'Welcome to ' + city + ', ' + name + '!';\n    grunt.log.writeln(message);\n    ```", "```js\n    Running \"welcome:Aaron:London\" (welcome) task\n    Welcome to London, Aaron!\n\n    ```", "```js\n    grunt.registerTask('first', function() {\n      grunt.log.write('First Task');\n    });\n    ```", "```js\n    grunt.registerTask('second', function() {\n      grunt.log.write('Second Task');\n      grunt.task.run('first');\n    });\n    ```", "```js\n    Running \"second\" task\n    Second Task\n    Running \"first\" task\n    First Task\n\n    ```", "```js\n    grunt.registerMultiTask(\n      'display',\n      'Displays target name and related configuration',\n      function() {\n      }\n    );\n    ```", "```js\n    grunt.log.write(\n      'Displaying ' + this.target + ' with ' + this.data\n    );\n    ```", "```js\n    grunt.initConfig({\n      display: {\n     foo: 'these configurations',\n     bar: 'those configurations'\n     }\n    });\n    ```", "```js\n    Running \"display:foo\" (display) task\n    Displaying foo with these configurations\n    Running \"display:bar\" (display) task\n    Displaying bar with those configurations\n\n    ```", "```js\n    Running \"display:foo\" (display) task\n    Displaying foo with these configurations\n\n    ```", "```js\n    grunt.registerMultiTask(\n      'display',\n      \"Displays the value of the 'foo' option\",\n      function() {\n      }\n    );\n    ```", "```js\n    var options = this.options();\n    grunt.log.write(\"The value of foo is '\" + options.foo + \"'.\");\n    ```", "```js\n    grunt.initConfig({\n      display: {\n     options: {\n     foo: 'initial'\n     },\n     first: {},\n     second: {\n     options: {\n     foo: 'override'\n     }\n     }\n     }\n    });\n    ```", "```js\n    Running \"display:first\" (display) task\n    The value of foo is 'initial'.\n\n    ```", "```js\n    Running \"display:second\" (display) task\n    The value of foo is 'override'.\n    ```", "```js\n    one.dat - Initial sample data.\n    two.dat - Some more sample data.\n    ```", "```js\n    grunt.registerMultiTask(\n      'display',\n      \"Displays the contents of the specified files.\",\n      function() {\n      }\n    );\n    ```", "```js\n    this.files.forEach(function(file) {\n      file.src.forEach(function(filepath) {\n        var content = grunt.file.read(filepath);\n        grunt.log.write(content);\n      });\n    });\n    ```", "```js\n    grunt.initConfig({\n      display: {\n     sample: {\n     src: 'data/*'\n     }\n     }\n    });\n    ```", "```js\n    Running \"display:sample\" (display) task\n    Initial sample data.\n    Some more sample data.\n\n    ```", "```js\n    this.files.forEach(function(file) {\n      var content = file.src.map(function(filepath) {\n     return grunt.file.read(filepath);\n     }).join('');\n     grunt.file.write(file.dest, content);\n    });\n    ```", "```js\n    grunt.initConfig({\n      display: {\n        sample: {\n          src: 'data/*',\n          dest: 'output.dat'\n        }\n      }\n    });\n    ```", "```js\n    Running \"display:sample\" (display) task\n\n    ```", "```js\n    Initial sample data.\n    Some more sample data.\n    ```"]