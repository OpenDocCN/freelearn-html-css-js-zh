["```js\n// main.js \nexport function main() {\n    const usLaunchLocation = Symbol.for('Kennedy Space Center');\n    const duplicateLaunchLocation = Symbol.for('Kennedy Space \n    Center');\n    console.log(usLaunchLocation, duplicateLaunchLocation);\n    console.log('Identical launch locations: ', usLaunchLocation \n    === duplicateLaunchLocation);\n    const rocketNumber = Symbol.for(5);\n    const duplicateRocketNumber = Symbol.for(5);\n    const stringDuplicateRocketNumber = Symbol.for(\"5\");\n    console.log(rocketNumber, duplicateRocketNumber, \n    stringDuplicateRocketNumber);\n    console.log('Identical rocket numbers: ', rocketNumber === \n    duplicateRocketNumber);\n    console.log(\n        'Identical string rocket numbers: ',\n        rocketNumber ===    stringDuplicateRocketNumber\n    );\n}\n```", "```js\n// main.js\nexport function main() {\n    // ...\n    console.log(Symbol.keyFor(rocketNumber), \n    Symbol.keyFor(stringDuplicateRocketNumber));\n    // print type\n    console.log(\n        typeof Symbol.keyFor(rocketNumber),\n        typeof Symbol.keyFor(stringDuplicateRocketNumber)\n    )\n}\n```", "```js\n// main.js \nexport function main() { \n  const usLaunchLocation = Symbol.for('Kennedy Space Center'); \n  const duplicateLaunchLocation = Symbol.for('Kennedy Space \n  Center'); \n  console.log(usLaunchLocation, duplicateLaunchLocation); \n  console.log('Identical launch locations: ', usLaunchLocation \n  === duplicateLaunchLocation); \n\n  const rocketNumber = Symbol.for(5); \n  const duplicateRocketNumber = Symbol.for(5); \n  const badDuplicateRocketNumber = Symbol.for('5'); \n  console.log(rocketNumber, duplicateRocketNumber, \n  badDuplicateRocketNumber); \n  console.log('Identical rocket numbers: ', rocketNumber === \n  duplicateRocketNumber); \n  console.log('Identical bad rocket numbers: ', rocketNumber \n  === duplicateRocketNumber); \n}  \n```", "```js\n// main.js \nconst LaunchSite = { \n  KENNEDY_SPACE_CENTER: Symbol('Kennedy Space Center'), \n  WHITE_SANDS: Symbol('White Sands Missile Range'), \n  BAIKONUR: Symbol('Baikonur Cosmodrome'), \n  BROGLIO: Symbol('Broglio Space Center'), \n  VIKRAM_SARABHAI: Symbol('Vikram Sarabhai Space Centre') \n}   \n```", "```js\n// main.js \nexport function main() { \n  console.log(\"Kennedy Space Center Site: \", LaunchSite.KENNEDY_SPACE_CENTER); \n  console.log(\"Duplicate String: \", LaunchSite.KENNEDY_SPACE_CENTER === 'Kennedy Space Center'); \n  console.log(\"Duplicate Symbol: \", LaunchSite.KENNEDY_SPACE_CENTER === Symbol('Kennedy Space Center')); \n  console.log(\"Duplicate Global Symbol: \", LaunchSite.KENNEDY_SPACE_CENTER === Symbol.for('kennedy Space Center')); \n}  \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n   } \n```", "```js\n// main.js \nconst LaunchSite = { \n  KENNEDY_SPACE_CENTER: Symbol('Kennedy Space Center'), \n  JUIQUAN: Symbol('Jiuquan Satellite Launch Center'), \n  WHITE_SANDS: Symbol('Jiuquan Satellite Launch Center'), \n  BAIKONUR: Symbol('Baikonur Cosmodrome') \n}  \n```", "```js\n// main.js \nexport function main() { \n  const rocketSiteMap = new Map(); \n\n  rocketSiteMap.set(LaunchSite.KENNEDY_SPACE_CENTER, new Rocket('US: \n  Saturn V')); \n  const falconHeavy = new Rocket('US: Falcon Heavy'); \n  rocketSiteMap.set(LaunchSite.WHITE_SANDS, falconHeavy); \n  console.log(rocketSiteMap.get(LaunchSite.KENNEDY_SPACE_CENTER)); \n  console.log(rocketSiteMap.get(LaunchSite.WHITE_SANDS)); \n\n  rocketSiteMap.set(LaunchSite.KENNEDY_SPACE_CENTER, new Rocket('US: \n  Space Shuttle')); \n  rocketSiteMap.delete(LaunchSite.WHITE_SANDS); \n  console.log(rocketSiteMap.get(LaunchSite.KENNEDY_SPACE_CENTER)); \n  console.log(rocketSiteMap.get(LaunchSite.WHITE_SANDS));} \n\n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n   } \n```", "```js\n// main.js \nconst LaunchSite = { \n  KENNEDY_SPACE_CENTER: Symbol('Kennedy Space Center'), \n  JUIQUAN: Symbol('Jiuquan Satellite Launch Center'), \n  WHITE_SANDS: Symbol('Jiuquan Satellite Launch Center'), \n  BAIKONUR: Symbol('Baikonur Cosmodrome') \n}  \n```", "```js\n// main.js \nexport function main() { \n  const rocketSites = [ \n    [ LaunchSite.KENNEDY_SPACE_CENTER, new Rocket('US: Saturn \n    V'),], \n    [ LaunchSite.WHITE_SANDS, new Rocket('US: Falcon Heavy') ], \n    [ LaunchSite.BAIKONUR, new Rocket('USSR: Soyuz') ], \n    [ LaunchSite.JUIQUAN, new Rocket('CN: Long March') ] ] \n\n  const rocketSiteMap = new Map(rocketSites); \n  console.log(rocketSiteMap) \n} \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n   } \n```", "```js\n// main.js \nclass RocketSiteMap { \n  constructor () { \n    this.map = new Map(); \n     }    \n   } \n```", "```js\n// main.js \nclass RocketSiteMap { \n  set (site, rocket) { \n    if (!(rocket instanceof Rocket)) { \n      throw new Error('Value of `RocketMap` must be of type \n      `Rocket`'); \n    } \n    else if (typeof site !== 'symbol') { \n      throw new Error('Key of `RocketMap` must be of type \n      `Symbol`'); \n    } \n\n    this.map.set(site, rocket); \n  }   \n   } \n```", "```js\n// main.js \nclass RocketSiteMap { \n  get (key) { \n    return this.get(key); \n   } \n```", "```js\n// main.js \nconst LaunchSite = { \n  KENNEDY_SPACE_CENTER: Symbol('Kennedy Space Center'), \n  JUIQUAN: Symbol('Jiuquan Satellite Launch Center'), \n  WHITE_SANDS: Symbol('Jiuquan Satellite Launch Center'), \n  BAIKONUR: Symbol('Baikonur Cosmodrome') \n}  \n```", "```js\n// main.js \nexport function main() { \n  const rocketSiteMap = new RocketSiteMap(); \n  rocketSiteMap.set(LaunchSite.KENNEDY_SPACE_CENTER, new Rocket('US: \n  Saturn V')); \n  rocketSiteMap.set(LaunchSite.WHITE_SANDS, new Rocket('US: Falcon \n  Heavy')); \n  console.log(rocketSiteMap) \n\n  try { \n    rocketSiteMap.set(LaunchSite.KENNEDY_SPACE_CENTER, 'Buzz \n    Lightyear'); \n  } catch (e) { \n    console.error(e); \n  } \n\n  try { \n    rocketSiteMap.set('Invalid Lanch Site', new Rocket('Long \n    March')); \n  } catch (e) { \n    console.error(e); \n  } \n} \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n   } \n```", "```js\n// main.js \nconst LaunchSite = { \n  KENNEDY_SPACE_CENTER: Symbol('Kennedy Space Center'), \n  JUIQUAN: Symbol('Jiuquan Satellite Launch Center'), \n  WHITE_SANDS: Symbol('Jiuquan Satellite Launch Center'), \n  BAIKONUR: Symbol('Baikonur Cosmodrome') \n} \n```", "```js\n// main.js \nexport function main() { \n  const falconHeavy = new Rocket('US: Falcon Heavy'); \n  const rocketSiteMap = new WeakMap(); \n\n  rocketSiteMap.set(new Rocket('US: Saturn V'), \n  LaunchSite.KENNEDY_SPACE_CENTER); \n  rocketSiteMap.set(falconHeavy, \n  LaunchSite.KENNEDY_SPACE_CENTER); \n  console.log(rocketSiteMap) \n\n  rocketSiteMap.delete(falconHeavy); \n  console.log(rocketSiteMap) \n\n  // try to set with a symbol; expect error \n  rocketSiteMap.set(LaunchSite.KENNEDY_SPACE_CENTER, falconHeavy); \n} \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n   } \n```", "```js\n// main.js \nconst LaunchSite = { \n  KENNEDY_SPACE_CENTER: Symbol('Kennedy Space Center'), \n  JUIQUAN: Symbol('Jiuquan Satellite Launch Center'), \n  WHITE_SANDS: Symbol('Jiuquan Satellite Launch Center'), \n  BAIKONUR: Symbol('Baikonur Cosmodrome') \n}  \n```", "```js\n// main.js \nexport function main() { \n  const rocketSites = [ \n    [ new Rocket('US: Saturn V'), LaunchSite.KENNEDY_SPACE_CENTER \n    ], \n    [ new Rocket('US: Falcon Heavy'), LaunchSite.WHITE_SANDS ], \n    [ new Rocket('USSR: Soyuz'), LaunchSite.BAIKONUR ], \n    [ new Rocket('CN: Dong Feng'), LaunchSite.JUIQUAN ], \n    [ new Rocket('CN: Long March'), LaunchSite.JUIQUAN ] ]; \n\n  const rocketSiteMap = new WeakMap(rocketSites); \n  console.log(rocketSiteMap); \n} \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n} \n```", "```js\n// main.js \nclass RocketSiteMap { \n  constructor () { \n    this.map = new WeakMap(); \n     }    \n   } \n```", "```js\n// main.js \nclass RocketSiteMap { \nset (rocket, site) { \n    if (!(rocket instanceof Rocket)) { \n      throw new Error('Key of `RocketMap` must be of type \n      `Rocket`'); \n    } \n    else if (typeof site !== 'symbol') { \n      throw new Error('Values of `RocketMap` must be of type \n      `Symbol`'); \n    } \n\n    this.map.set(rocket, site); \n  } \n\n  get (key) { \n    return this.get(key); \n     } \n   } \n```", "```js\n// main.js \nclass RocketSiteMap { \n  get (key) { \n    return this.get(key); \n   } \n```", "```js\n// main.js \nconst LaunchSite = { \n  KENNEDY_SPACE_CENTER: Symbol('Kennedy Space Center'), \n  JUIQUAN: Symbol('Jiuquan Satellite Launch Center'), \n  WHITE_SANDS: Symbol('Jiuquan Satellite Launch Center'), \n  BAIKONUR: Symbol('Baikonur Cosmodrome') \n}  \n```", "```js\n// main.js \nexport function main() { \n  const rocketSiteMap = new RocketSiteMap(); \n  rocketSiteMap.set(LaunchSite.KENNEDY_SPACE_CENTER, new \n  Rocket('US: \n  Saturn V')); \n  rocketSiteMap.set(LaunchSite.WHITE_SANDS, new Rocket('US: \n  Falcon \n  Heavy')); \n  console.log(rocketSiteMap) \n\n  try { \n    rocketSiteMap.set(LaunchSite.KENNEDY_SPACE_CENTER, 'Buzz \n    Lightyear'); \n  } catch (e) { \n    console.error(e); \n  } \n\n  try { \n    rocketSiteMap.set('Invalid Lanch Site', new Rocket('Long \n    March')); \n  } catch (e) { \n    console.error(e); \n  } \n} \n```"]