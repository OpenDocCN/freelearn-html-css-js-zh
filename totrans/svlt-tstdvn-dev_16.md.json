["```js\n{\n  \"scripts\": {\n    ...,\n  \"test\": \"PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS=1\n    playwright test\",\n  ...\n  }\n}\n```", "```js\nconst waitForServiceWorkerActivation = (page) =>\n  page.evaluate(async () => {\n    const registration =\n      await\n        window.navigator.serviceWorker.getRegistration();\n    if (registration.active?.state === 'activated')\n      return;\n    await new Promise((res) =>\n      window.navigator.serviceWorker.addEventListener(\n        'controllerchange',\n        res\n      )\n    );\n  });\n```", "```js\nconst disableNetwork = (context) =>\n  context.route('', (route) => route.abort());\n```", "```js\ntest('site is available offline', async ({\n  page,\n  context,\n  browser\n}) => {\n  await page.goto('/birthdays');\n  await waitForServiceWorkerActivation(page);\n  await disableNetwork(context);\n  await page.goto('/birthdays');\n  await expect(\n    page.getByText('Birthday list')\n  ).toBeVisible();\n});\n```", "```js\nimport {\n  build,\n  files,\n  version\n} from '$service-worker';\nimport {\n  addFilesToCache,\n  deleteOldCaches,\n  fetchWithCacheOnError\n} from './lib/service-worker.js';\nconst cacheId = `cache-${version}`;\nconst appFiles = ['/birthdays'];\nconst assets = [...build, ...files, ...appFiles];\nself.addEventListener('install', (event) => {\n  event.waitUntil(addFilesToCache(cacheId, assets));\n});\nself.addEventListener('activate', (event) => {\n  event.waitUntil(deleteOldCaches(cacheId));\n  event.waitUntil(self.clients.claim());\n});\nself.addEventListener('fetch', (event) => {\n  if (event.request.method !== 'GET') return;\n  event.respondWith(\n    fetchWithCacheOnError(cacheId, event.request)\n  );\n});\n```", "```js\nexport const addFilesToCache = async (\n  cacheId,\n  assets\n) => {\n  const cache = await caches.open(cacheId);\n  await cache.addAll(assets);\n};\n```", "```js\nglobal.caches = {\n  open: () => {},\n  keys: () => {},\n  delete: () => {}\n};\n```", "```js\ndescribe('addFilesToCache', () => {\n  let cache;\n  beforeEach(() => {\n    cache = {\n      addAll: vi.fn()\n    };\n    vi.spyOn(global.caches, 'open');\n    caches.open.mockResolvedValue(cache);\n  });\n});\n```", "```js\nit('opens the cache with the given id', async () => {\n  await addFilesToCache('cache-id', []);\n  expect(global.caches.open).toBeCalledWith(\n    'cache-id'\n  );\n});\nit('adds all provided assets to the cache', async () => {\n  const assets = [1, 2, 3];\n  await addFilesToCache('cache-id', assets);\n  expect(cache.addAll).toBeCalledWith(assets);\n});\n```", "```js\nexport const deleteOldCaches = async (cacheId) => {\n  for (const key of await caches.keys()) {\n    if (key !== cacheId) await caches.delete(key);\n  }\n};\n```", "```js\ndescribe('deleteOldCaches', () => {\n  beforeEach(() => {\n    vi.spyOn(global.caches, 'keys');\n    vi.spyOn(global.caches, 'delete');\n  });\n```", "```js\nit('calls keys to retrieve all keys', async () => {\n  caches.keys.mockResolvedValue([]);\n  await deleteOldCaches('cache-id');\n  expect(caches.keys).toBeCalled();\n});\nit('delete all caches with the provided keys', async () => {\n  caches.keys.mockResolvedValue([\n    'cache-one',\n    'cache-two'\n  ]);\n  await deleteOldCaches('cache-id');\n  expect(caches.delete).toBeCalledWith('cache-one');\n  expect(caches.delete).toBeCalledWith('cache-two');\n});\nit('does not delete the cache with the provided id', async () => {\n  caches.keys.mockResolvedValue(['cache-id']);\n  await deleteOldCaches('cache-id');\n  expect(caches.delete).not.toBeCalledWith(\n    'cache-id'\n  );\n});\n```", "```js\nexport const fetchWithCacheOnError = async (\n  cacheId,\n  request\n) => {\n  const cache = await caches.open(cacheId);\n  try {\n    const response = await fetch(request);\n    if (response.status === 200) {\n      cache.put(request, response.clone());\n    }\n    return response;\n  } catch {\n    return cache.match(request);\n  }\n};\n```", "```js\ndescribe('fetchWithCacheOnError', () => {\n  const successResponse = {\n    status: 200,\n    clone: () => 'cloned response'\n  };\n  const request = 'request';\n  let cache;\n  beforeEach(() => {\n    cache = {\n      put: vi.fn(),\n      match: vi.fn()\n    };\n    vi.spyOn(global.caches, 'open');\n    caches.open.mockResolvedValue(cache);\n    vi.spyOn(global, 'fetch');\n    fetch.mockResolvedValue(successResponse);\n  });\n});\n```", "```js\nit('opens the cache with the given id', async () => {\n  await fetchWithCacheOnError('cache-id', request);\n  expect(global.caches.open).toBeCalledWith(\n    'cache-id'\n  );\n});\nit('calls fetch with the request', async () => {\n  await fetchWithCacheOnError('cache-id', request);\n  expect(global.fetch).toBeCalledWith(request);\n});\nit('caches the response after cloning', async () => {\n  await fetchWithCacheOnError('cache-id', request);\n  expect(cache.put).toBeCalledWith(\n    request,\n    'cloned response'\n  );\n});\nit('returns the response', async () => {\n  const result = await fetchWithCacheOnError(\n    'cache-id',\n    request\n  );\n  expect(result).toEqual(successResponse);\n});\n```", "```js\nit('does not cache the response if the status code is not 200', async () => {\n  fetch.mockResolvedValue({ status: 404 });\n  await fetchWithCacheOnError('cache-id', request);\n  expect(cache.put).not.toBeCalled();\n});\n```", "```js\ndescribe('when fetch returns a network error', () => {\n  let cachedResponse = 'cached-response';\n  beforeEach(() => {\n    fetch.mockRejectedValue({});\n    cache.match.mockResolvedValue(cachedResponse);\n  });\n  it('retrieve the cached value', async () => {\n    await fetchWithCacheOnError(\n      'cache-id',\n      request\n    );\n    expect(cache.match).toBeCalledWith(request);\n  });\n  it('returns the cached value', async () => {\n    const result = await fetchWithCacheOnError(\n      'cache-id',\n      request\n    );\n    expect(result).toEqual(cachedResponse);\n  });\n});\n```"]