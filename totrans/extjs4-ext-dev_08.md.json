["```js\nExt.define('Examples.ux.MessageBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.ux-msgbar',\n  activeThreadId: 0,\n  dock: 'bottom',\n  config: {\n    cls: 'x-messagebar',\n    emptyText: '',\n    defaultText: '',\n    autoClear: 5000\n  },\n\n  initComponent: function () {\n    this.callParent(arguments);\n  },\nâ€¦\n```", "```js\nafterRender: function () {\n\n  this.el.addCls('x-message-msgbar-body');\n\n  this.currIconCls = this.iconCls || this.defaultIconCls;\n  var me = this;\n\n  setTimeout(function () {\n\n    var tpl = new Ext.XTemplate(\n      '<div id=\"{id}-bar\" class=\"{bodyCls}\"',\n      ' style=\"width: {width}px; {left}\">',\n      '<div class=\"{msgCls}\"></div>',\n      '<div style=\"float:right\" class=\"{closeCls}\">X</div>',\n      '</div>'\n    );\n\n    tpl = tpl.apply({\n      id: me.id,\n      bodyCls: 'x-message-msgbar-body',\n      width: me.ownerCt.getWidth() - 10,\n      left: Ext.isIE8 ? 'left:5px' : '',\n      msgCls: 'x-message-bar-msg',\n      closeCls: 'x-message-bar-close'\n    });\n\n    me.ownerCt.el.createChild(tpl);\n\n    Ext.select('.x-message-bar-close').on('click', function () {\n      me.clearMessage();\n    });\n\n  }, 500);\n\n  this.hide();\n  this.callParent(arguments);\n}\n```", "```js\nthis.ownerCt.on('resize', function (ownerContainer, width, height) {\n  if (width == this.parentWidth && height == this.parentHeight) {\n    return;\n  }\n\n  var bar = Ext.get(this.id + '-bar');\n\n  if (bar) {\n    bar.setStyle('width', (this.ownerCt.getWidth()-10)  + 'px');\n  }\n}, this);\n```", "```js\nshowMessage: function (msg) {\n\n  if (Ext.isString(msg)) {\n    msg = {\n      text: msg\n    }\n  }\n\n  this.setMessage({\n    text: msg.text,\n    iconCls: 'x-message-'\n    + (msg.type || '') + ' ',\n    clear: Ext.isDefined(msg.clear) ? msg.clear : true\n  });\n\n}\n```", "```js\nsetMessage: function (o) {\n  if (o && (o.text == '' || o.text == '&nbsp;')) {\n    return;\n  } else {\n    var cmp = Ext.get(this.id + '-bar');\n    if (cmp) {\n      cmp.slideIn('b', {\n        duration: 300,\n        easing: 'easeIn',\n        callback: function () {\n          this.setMessageData(o);\n        },\n        scope: this\n      });\n    }\n  }\n}\n```", "```js\nsetMessageData: function (o) {\n  o = o || {};\n  if (o.text !== undefined) {\n    this.setText(o.text);\n  }\n  if (o.iconCls !== undefined) {\n    var bar = Ext.get(this.id + '-bar');\n    if (o.iconCls == 'x-message-error ') {\n      bar.removeCls('x-message-msg-body');\n      bar.addCls('x-message-error-body');\n    } else {\n      bar.removeCls('x-message-error-body');\n      bar.addCls('x-message-msg-body');\n    }\n    this.setIcon(o.iconCls);\n  }\n  if (o.clear) {\n    var c = o.clear, wait = this.autoClear, defaults = {\n      useDefaults: true,\n      anim: true\n    };\n    if (Ext.isObject(c)) {\n      c = Ext.applyIf(c, defaults);\n      if (c.wait) {\n        wait = c.wait;\n      }\n    } else if (Ext.isNumber(c)) {\n      wait = c;\n      c = defaults;\n    } else if (Ext.isBoolean(c)) {\n      c = defaults;\n    }\n    c.threadId = this.activeThreadId;\n    if (this.clearTimer) {\n      clearTimeout(this.clearTimer);\n    }\n    this.clearTimer = Ext.defer(this.clearMessage, wait, this, [c]);\n  }\n}\n```", "```js\nclearMessage: function (o) {\n  o = o || {};\n  if (o.threadId && o.threadId !== this.activeThreadId) {\n    return this;\n  }\n  var bar = Ext.get(this.id + '-bar');\n  if (bar) {\n    Ext.get(this.id + '-bar').slideOut('b', {\n      duration: 300,\n      easing: 'easeOut',\n      callback: function () {\n        var text = o.useDefaults ? this.defaultText : this.emptyText,\n        iconCls = o.useDefaults ? (this.defaultIconCls ? this.defaultIconCls : '') : '';\n        this.setMessage({\n          text: text,\n          iconCls: iconCls\n        });\n      },\n      scope: this\n    });\n  }\n  return this;\n}\n```"]