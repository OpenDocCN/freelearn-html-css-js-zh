["```js\n// Enable CDN\nbundles.UseCdn = true;\n\n// CDN paths for kendo stylesheet files\nvar kendoCommonCssPath = \"http://cdn.kendostatic.com/2013.1.319/styles/kendo.common.min.css\";\nvar kendoDefaultCssPath = \"http://cdn.kendostatic.com/2013.1.319/styles/kendo.default.min.css\";\n\n// CDN paths for kendo javascript files\nvar kendoWebJsPath = \"http://cdn.kendostatic.com/2012.2.710/js/kendo.web.min.js\";\n```", "```js\n// Create the CDN bundles for kendo javascript files\nbundles.Add(new ScriptBundle(\"~/bundles/kendo/web/js\", kendoWebJsPath)\n.Include(\"~/Scripts/kendo/kendo.web.js\"));\n// The ASP.NET MVC script file is not available from the Kendo Static CDN,\n// so we will include the bundle reference without the CDN path.\nbundles.Add(new ScriptBundle(\"~/bundles/kendo/mvc/js\")\n.Include(\"~/Scripts/kendo/kendo.aspnetmvc.js\"));\n\n// Create the CDN bundles for the kendo styleshseet files\nbundles.Add(new StyleBundle(\"~/bundles/kendo/common/css\", kendoCommonCssPath)\n    .Include(\"~/Content/kendo/kendo.common.css\"));\nbundles.Add(new StyleBundle(\"~/bundles/kendo/default/css\", kendoDefaultCssPath)\n    .Include(\"~/Content/kendo/kendo.default.css\"));\n```", "```js\n@using Kendo.Mvc.UI;\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width\" />\n<title>@ViewBag.Title</title>\n@Styles.Render(\"~/Content/css\")\n@Styles.Render(\"~/bundles/kendo/common/css\")\n@Styles.Render(\"~/bundles/kendo/default/css\")\n@Scripts.Render(\"~/bundles/jquery\")\n@Scripts.Render(\"~/bundles/kendo/web/js\")\n@Scripts.Render(\"~/bundles/kendo/mvc/js\")\n</head>\n<body>\n@RenderBody()\n\n@RenderSection(\"scripts\", required: false)\n</body>\n</html>\n```", "```js\n    <pages>\n    <namespaces>\n      <add namespace=\"System.Web.Helpers\" />\n      <add namespace=\"System.Web.Mvc\" />\n      <add namespace=\"System.Web.Mvc.Ajax\" />\n      <add namespace=\"System.Web.Mvc.Html\" />\n      <add namespace=\"System.Web.Optimization\" />\n      <add namespace=\"System.Web.Routing\" />\n      <add namespace=\"System.Web.WebPages\" />\n      <add namespace=\"Kendo.Mvc.UI\" />\n    </namespaces>\n    </pages>\n    ```", "```js\n/// <reference path=\"kendo/jquery.js\" />\n/// <reference path=\"kendo/kendo.web.js\" />\n/// <reference path=\"kendo/kendo.aspnetmvc.js\" />\n```", "```js\n<input type=\"date\" id=\"makeMeADatePicker\" />\n<script type=\"text/javascript\">\n    $(\"#makeMeADatePicker\").kendoDatePicker();\n</script>\n```", "```js\n<input type=\"date\" id=\"makeMeADatePicker\" data-role=\"datepicker\" />\n<script type=\"text/javascript\">\nkendo.init($(\"#makeMeADatePicker\"));\n</script>\n```", "```js\n@(Html.Kendo().DatePicker().Name(\"datePickerField\"))\n```", "```js\n<input class=\"k-input\" id=\"datePicker\" name=\"datePicker\" type=\"date\" />\n<script>\njQuery(function(){jQuery(\"#datePicker\").kendoDatePicker({format:\"M/d/yyyy\",\nmin:new Date(1900,0,1,0,0,0,0),max:new Date(2099,11,31,0,0,0,0)});});\n</script>\n```", "```js\n@model IEnumerable<LearningKendoUIWeb.Models.StateTerritory>\n<textarea id=\"serverData\" style=\"display:none\">\n@Html.Raw(ViewBag.serverData)\n</textarea>\n<script type=\"text/javascript\">\nvarserverData = eval($(\"#serverData\").html());\nfor (var i = 0; i<serverData.length; i++) {\nconsole.log(serverData[i].Name);\n    }\n</script>\n```", "```js\npublicActionResultAutoCompletePage()\n{\nvar repository = new SampleRepository();\nvar data = repository.GetStatesAndTerritories();\nViewBag.serverData = new JavaScriptSerializer().Serialize(data);\nreturn View(data);\n}\n```", "```js\nvar template = kendo.template(\"<span>#= horseColor #</span>\");\n$(\"#horseDiv\").html(template({\n  horseColor: 'brown}));\n```", "```js\n<div id='horseDiv'><span>brown</span></div>\n```", "```js\n<script type=\"text/x-kendo-template\" id=\"template\">\n<tr>\n<td>#= rank #</td>\n<td>#= rating #</td>\n<td>#= title #</td>\n<td>#= year #</td>\n</tr>\n</script>\n```", "```js\n<script type=\"text/javascript\">\nvar template = kendo.template($(\"#template\").html());\n\nfunctionshowMovies() {\n$(\"#moviesTable\").html(template(\n            {rank: 1, rating: 9.2, title: 'Prometheus', year: 2012}\n        ));\n    }\nshowMovies();\n</script>\n```", "```js\n<table id=\"moviesTable\">\n<tr>\n<td>1</td>\n<td>9.2</td>\n<td>Prometheus</td>\n<td>2012</td>\n</tr>\n</table>\n```", "```js\n<script type=\"text/x-kendo-template\" id=\"template\">\n# for(vari=0; i<data.length; i++) { #\n<tr>\n<td>#= data[i].rank #</td>\n<td>#= data[i].rating #</td>\n<td>#= data[i].title #</td>\n<td>#= data[i].year #</td>\n</tr>\n    # } #\n</script>\n```", "```js\nvar dataSource = new kendo.data.DataSource({...<properties>...});\n```", "```js\nvar Service = kendo.data.Model.define( {\nid: \"serviceId\", // the identifier of the model\nfields: {\n\"serviceName\": {\ntype: \"string\"\n        },\n\"unitPrice\": {\ntype: \"number\"\n        },\n\"serviceId\": {\ntype: \"number\"\n  }\n    }\n});\n\nvar currentService = new Service( {\nserviceName: \"Rotate Tires\",\nunitPrice: 29.95,\nserviceId: 400\n});\n\nconsole.log(currentService.get(\"serviceName\")); // outputs \"Rotate Tires\"\nconsole.log(currentService.get(\"unitPrice\")); // outputs 29.95\n```", "```js\nfields: {\n\"serviceName\": {    // Property name for a field\ntype: \"string\", // \"string\"(default), \"number\", \"boolean\", or \"date\"\ndefaultValue: \"Inspection\", // Default value for field when model is\n                           / created. Default for string is \"\", number\n                         // is 0, and date is new Date() (.i.e. today)\neditable: true, // Specifies whether field is editable\nnullable: false, // Specifies if default value should be used when empty\nparse: function(){...} // Specifies custom parser for field value\nvalidation: {...} // Specifies the validation options used by Kendo\n                      // Validator such as 'required', 'min', and 'max'.\n    },...\n}\n```", "```js\nvar Product = kendo.data.Model.define( {\nid: \"id\", // the identifier is the \"id\" field (declared below)\nfields: {\n  /* name of the field */ \nname: {\ntype: \"string\", // the field is a string\nvalidation: { // validation rules\nrequired: true // the field is required\n    },\ndefaultValue: \"<empty>\" // default field value\n  },\n\n  /* name of the field */ price: {\ntype: \"number\", // the field is a number\nvalidation: { // validation rules\nrequired: true, // the field is required\nmin: 1 // the minimum value is 1\n    },\ndefaultValue: 99.99 // default field value\n  },\n\n  /* name of the field */ id: {\neditable: false, // this field is not editable\nnullable: true // a default value will not be assigned\n        }\n    }\n});\n```", "```js\ncurrentService.bind('change', function(e){\nalert(e.field + \" just changed its value to \" +\ncurrentService.get([e.field]));\n});\n```", "```js\nschema: {\n  errors: function(response) {\n    return response.errors;\n  },\n  aggregates: function(response) {\n    return response.aggregates;\n  },\n  data: function(response) {\n    return response.data;\n  },\n  total: function(response) {\n    return response.totalCount;\n  }\n}\n```", "```js\nschema: {\n  errors: \"errors_field_name\",\n  aggregates: \"aggregates_field_name\",\n  data: \"data_field_name\",\n  total: \"total_field_name\"\n}\n```", "```js\n{\nunitPrice: {   // Field Name\n  max: 100,     // Aggregate function and value\n  min: 1     // Aggregate function and value\n  },\nproductName: {  // Field Name\n  count: 42     // Aggregate function and value\n  }\n}\n```", "```js\nvar dataSource = new kendo.data.DataSource({\nschema: {\n  model: {\n    id: \"ProductID\",\n    fields: {\n    ProductID: {\n      editable: false,\n      nullable: true\n      },\n      ...\n```", "```js\nvardataSource = new kendo.data.DataSource({\nschema: {\nmodel: Product // Use the existing Product model\n    }\n});\n```", "```js\ntransport: {\n  create: { // this sets configuration for creating new records\n            // on the remote server\n  },\n  destroy: { // this sets configuration for deleting records\n             // on the remote server\n  },\n  read: {  // this sets configuration for reading records\n           // from the remote server\n  },\n  update: { // this sets configuration for updating records\n            // on the remote server\n  },\n  autoSync: false, // set true to automatically sync all changes\n  batch: false     // set true to enable batch mode\n}\n```", "```js\ncreate: { // for creating data records on remote source.\nurl: \"/orders/create\", // the url to the create service.\ndata: {  // data to send to the create service as part of the request.\n// this can also be specified as a function call.\norderId: $(\"#input\").val()\n},\ncache: true, // make false to force fresh requests every time.\ncontentType: \"application/json\", // default is \n  // \"application/w-www-form-urlencoded\"\ndataType: \"json\", // \"jsonp\" is also common.\ntype: \"POST\" // which http verb to use.\n  }\n```", "```js\ndestroy: {  // same options as \"create\", with some alternatives shown.\n      // this is how you use $.ajax() to run this remote service call.\n          // this option can be used with \"create\", \"destroy\", \"read\",\n              // and \"update\"\n    $.ajax( {\nurl: \"/orders/destroy\",\ndata: options.data, // the data field contains paging, sorting,\n                          // filtering, and grouping data\nsuccess: function(result) {\n               // notify the DataSource that the operation is complete\nOptions.success(result);\n}\n});\n}\n```", "```js\nread: {  // same options as above in \"create\" and \"destroy\".\ndata: function() {  // this is how you specify data as a function.\nreturn {\nid: 42,\nname: \"John Doe\"\n};\n}\n}\n```", "```js\nvar someData = [{ title: 'Prometheus', year: 2012, rating: 9, rank: 25 }];\n\nvar dataSource = new kendo.data.DataSource({\ndata: someData\n});\n```", "```js\naggregate: [{ field: 'title', aggregate: 'count' }]\n```", "```js\n// simple object\nfilter: { field: 'title', operator: 'startswith', value: 'Shawshank' }\n\n// ...or array...\nfilter: [{field: 'year', operator: 'eq', value: '1998'}, {field: ...\n\n// ...or configurable object...\nfilter:{\nlogic: \"or\",\nfilters: [\n{ field: 'title', operator: 'startswith', value: 'Shawshank' }]\n}\n```", "```js\ngroup: { field: 'year', dir: 'asc' }\nsort: { field: 'title', dir: 'desc' }\n```", "```js\n// get the current group descriptors\nvar g = dataSource.group();\n\n// set a new value for filtering\ndataSource.filter({ field: 'year', operator: 'gt', value: 1990 });\n```", "```js\n// add a new item\ndataSource.add({ year: 1997, title: 'The Fifth Element', rating: 10 });\n\n// insert an item at the 6th position in the DataSource\ndataSource.insert(5, {year: 1995, title: 'Twelve Monkeys', rating 9.5});\n\n// remove an item from the DataSource\nvar movie = dataSource.at(5);\ndataSource.remove(movie);\n```", "```js\n// get the 3rd item in the DataSource\nvar movie = dataSource.at(2);\n\n// get the model instance with an id of 5\n// (id is determined by the value of the schema.model.id property)\nvar movie = dataSource.get(5);\n\n// get the model instance, or ObservableObject if no model has been set\n// uid is a property inherited from ObservableObject\nvaruid = $(\"tr\").data(\"uid\");\nvar movie = dataSource.getByUid(uid);\n```", "```js\n// fetches data using the current filter/sort/group/paging information.\n// will fetch data from transport if data is not already available in memory.\ndataSource.fetch(); // can optionally take a callback function which\n                    // is executed once the data is ready.\n\n// executes a query over the data (i.e. paging/sorting/filtering/grouping)\n// this effects what the call to dataSource.view() will return.\ndataSource.query({ page: 5, pageSize: 20, group:{field:'year',dir:'asc'}});\n\n// read data into the DataSource using the transport.read setting\ndataSource.read();  // also conveniently causes the change event to fire\n\n// synchronizes changes through the transport for any pending CRUD operations.\n// if batch mode is enabled, it uses only one call per operation type (create,\n//   read, update, destroy)\ndataSource.sync();\n\n// discards all un-synced changes made to the DataSource\ndataSource.cancelChanges();\n\n// returns the current state of the items in the DataSource with all applied\n//settings such as paging, sorting, filtering, and grouping.\n// to ensure that data is available, this method should be used from\n//within the change event of the DataSource\nchange: function(e){\n    ...\nkendo.render(template, dataSource.view());\n}\n```", "```js\n// retrieve an observable array of items (the current data within the DataSource)\nvar movies = dataSource.data();\n\n// set the DataSource to some new data\ndatSource.data([{year: 2009, title: 'Cargo', rating: 6.8}, {year: ... ]);\n\n// get, but not set, the total number of items in the DataSource\nvar total = dataSource.total();\n\n// get, but not set, the total number of pages of items in the DataSource\nvar pages = dataSource.totalPages();\n```", "```js\n// set event handler as part of DataSource definition\nvar dataSource = new kendo.data.DataSource({\nchange: function(e){\n        // handle event\n    }\n});\n\n// or set event handler later through the bind method\ndataSource.bind(\"error\", function(e){\n    // handle event\n});\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n<title>DataSource</title>\n<script src=\"img/jquery.js\"></script>\n<script src=\"img/kendo.all.js\"></script>\n<link href=\"/Content/kendo/kendo.common.css\" rel=\"stylesheet\" />\n<link href=\"/Content/kendo/kendo.default.css\" rel=\"stylesheet\" />\n</head>\n<body>\n<div id=\"example\" class=\"k-content\">\n<table id=\"movies\">\n<thead>\n<tr>\n<th>Rank</th>\n<th>Rating</th>\n<th>Title</th>\n<th>Year</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td colspan=\"4\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n</body>\n</html>\n```", "```js\n<script id=\"template\" type=\"text/x-kendo-template\">\n<tr>\n<td>#= rank #</td>\n<td>#= rating #</td>\n<td>#= title #</td>\n<td>#= year #</td>\n</tr>\n<script>\n```", "```js\n<script type=\"text/javascript\">\n    $(document).ready(function() {\n        // create a template using the above definition\nvar template = kendo.template($(\"#template\").html());\n\nvar movies = [\n{ \"rank\": 1, \"rating\": 9.2, \"year\": 1994,\n\"title\": \"The Shawshank Redemption\" },\n{ \"rank\": 2, \"rating\": 9.2, \"year\": 1972,\n\"title\": \"The Godfather\" },\n{ \"rank\": 3, \"rating\": 9, \"year\": 1974,\n\"title\": \"The Godfather: Part II\" },\n{ \"rank\": 4, \"rating\": 8.9, \"year\": 1966,\n\"title\": \"Il buono, ilbrutto, ilcattivo.\" },\n{ \"rank\": 5, \"rating\": 8.9, \"year\": 1994,\n\"title\": \"Pulp Fiction\" },\n{ \"rank\": 6, \"rating\": 8.9, \"year\": 1957,\n\"title\": \"12 Angry Men\" },\n{ \"rank\": 7, \"rating\": 8.9, \"year\": 1993, \n\"title\": \"Schindler's List\" },\n{ \"rank\": 8, \"rating\": 8.8, \"year\": 1975, \n\"title\": \"One Flew Over the Cuckoo's Nest\" },\n{ \"rank\": 9, \"rating\": 8.8, \"year\": 2010, \n\"title\": \"Inception\" },\n{ \"rank\": 10, \"rating\": 8.8, \"year\": 2008, \n\"title\": \"The Dark Knight\" }\n        ];\n\nvar dataSource = new kendo.data.DataSource({\ndata: movies,\nchange: function () {\n// subscribe to the CHANGE event of the data source\n$(\"#movies tbody\").html(\nkendo.render(template, this.view())); // populate the table\n            }\n        });\n\n// read data from the \"movies\" array\ndataSource.read();\n    });\n</script>\n```", "```js\n// GET: /Kendo/\n\npublic ActionResult Index()\n{\nreturn View();\n}\n```", "```js\npublicJsonResultRemoteData()\n{\nvar repository = new SampleRepository();\nvar data = repository.GetAllMovies();\nreturnJson(result, JsonRequestBehavior.AllowGet);\n}\n```", "```js\nnamespace LearningKendoUIWeb.Models\n{\npublic class Movie\n  {\npublic int Rank { get; set; }\npublic double Rating { get; set; }\npublic int Year { get; set; }\npublic string Title { get; set; }\n  }\n}\n```", "```js\nusing LearningKendoUIWeb.Models;\n\nnamespaceLearningKendoUIWeb.Repository\n{\npublic class SampleRepository\n  {\npublic List<Movie>GetAllMovies()\n    {\nvar movies = new List<Movie>{\nnew Movie { Rank = 1, Rating = 9.2, \n                    Title = \"The Shawshank Redemption\", Year = 1994 },\nnew Movie { Rank = 2, Rating = 9.1,\n                    Title = \"The Godfather\", Year = 1974 }\n            };\n            Return movies;\n      }\n   }\n}\n```", "```js\nvar dataSource = new kendo.data.DataSource({\n  transport: {\nread: {\nurl: 'Kendo/RemoteData/'\n        }\n    },\nchange: function () {\n        $(\"#movies tbody\").html(kendo.render(template, this.view()));\n    }\n});\n```", "```js\ndataSource.read();\n```", "```js\n<script type=\"text/javascript\">\nvar repairs = [{\nname: \"State Inspection\",\nprice: 39.75,\nlabor: 1,\nstaff: 1\n            },\n            {\nname: \"Brake & Clutch System Service\",\nprice: 149.95,\nlabor: 3,\nstaff: 1\n            },\n            {\nname: \"Power Steering Service\",\nprice: 109.96,\nlabor: 3,\nstaff: 1\n            },\n            {\nname: \"Cooling System Service\",\nprice: 126.95,\nlabor: 2,\nstaff: 1\n            },\n            {\nname: \"Oil Change\",\nprice: 37.77,\nlabor: 1,\nstaff: 1\n            },\n            {\nname: \"CV Axle Replacement\",\nprice: 271.11,\nlabor: 5,\nstaff: 2\n            },\n            {\nname: \"Battery Cabling Replacement\",\nprice: 179.97,\nlabor: 2,\nstaff: 1\n            },\n            {\nname: \"Battery Replacement\",\nprice: 118.38,\nlabor: 1,\nstaff: 1\n            },\n            {\nname: \"Fuel Induction Service\",\nprice: 168.88,\nlabor: 3,\nstaff: 2\n            },\n            {\nname: \"Engine Air Filter Replacement\",\nprice: 36.63,\nlabor: 1,\nstaff: 1\n            },\n            {\nname: \"Timing Belt Replacement\",\nprice: 221.75,\nlabor: 3,\nstaff: 2\n            },\n            {\nname: \"Drive Belt Replacement\",\nprice: 194.79,\nlabor: 3,\nstaff: 2\n            }\n        ];\n</script>\n```", "```js\n<div id=\"repairsGrid\"></div>\n<script type=\"text/javascript\">\n        $(\"#repairsGrid\").kendoGrid({\ndataSource: repairs\n        });\n</script>\n```", "```js\n$(\"#repairsGrid\").kendoGrid({\n...\ncolumns: [{\nfield: \"name\",\ntitle: \"Service\",\nwidth: 300\n    },\n    {\nfield: \"price\",\ntitle: \"Price\",\nwidth: 50,\nformat: \"${0:##.##}\"\n    },\n    {\nfield: \"labor\",\ntitle: \"Labor\",\nwidth: 50,\ntemplate: \"#= labor# hour(s)\"\n    },\n    {\nfield: \"staff\",\ntitle: \"Staff\",\nwidth: 50,\ntemplate: \"#= staff # tech(s)\"\n    }]\n```", "```js\n$(\"#repairsGrid\").kendoGrid({\n    ...\ncolumns: [{\nfield: \"name\",\ntitle: \"Service\",\nwidth: 300,\nsortable: true,\nfilterable: true\n    },\n    {\nfield: \"price\",\ntitle: \"Price\",\nwidth: 50,\nformat: \"${0:##.##}\",\nsortable: true,\nfilterable: true\n    },\n    {\nfield: \"labor\",\ntitle: \"Labor\",\nwidth: 50,\ntemplate: \"#= labor # hour(s)\",\nsortable: true,\nfilterable: true\n    },\n    {\nfield: \"staff\",\ntitle: \"Staff\",\nwidth: 50,\ntemplate: \"#= staff # tech(s)\",\nsortable: false,\nfilterable: false\n    }],\nsortable: true,\nfilterable: true\n```", "```js\n$(\"#repairsGrid\").kendoGrid({\ndataSource: repairs,\ncolumns: [\n  {\ntitle: \"Action\",\nwidth: 75,\ncommand: [\"edit\"]\n  },\n{\nfield: \"name\",\ntitle: \"Service\",\nwidth: 300,\nsortable: true,\nfilterable: true\n  },\n{\nfield: \"price\",\ntitle: \"Price\",\nwidth: 50,\nformat: \"${0:##.##}\",\nsortable: true,\nfilterable: true\n  },\n{\nfield: \"labor\",\ntitle: \"Labor\",\nwidth: 50,\ntemplate: \"#= labor # hour(s)\",\nsortable: true,\nfilterable: true,\neditor: function (container, options) {\nvarselectEditor = $(\"<select name=\" + options.field +\n\"></select>\");\nselectEditor.append(new Option(\"1\", 1));\nselectEditor.append(new Option(\"2\", 2));\nselectEditor.append(new Option(\"3\", 3));\nselectEditor.append(new Option(\"4\", 4));\nselectEditor.append(new Option(\"5\", 5));\nselectEditor.appendTo(container);\n    }\n  },\n  {\nfield: \"staff\",\ntitle: \"Staff\",\nwidth: 50,\ntemplate: \"#= staff # tech(s)\",\nsortable: false,\nfilterable: false\n  }],\nsortable: true,\nfilterable: true,\neditable: \"inline\"\n```", "```js\n...\neditable: {\nconfirmation: \"Are you sure?\", // text displayed to confirm a delete operation\ndestroy: true,         // whether or not to delete item when button is clicked\nmode: \"popup\",                 // options are \"incell\", \"inline\", and \"popup\"\ntemplate: \"#= ... #\",          // template to use for pop-up editing\nupdate: true                   // switch item to edit mode when clicked?\n}\n```", "```js\n...\nsortable: true,\nfilterable: true,\neditable: \"inline\",\nnavigatable: true,\ngroupable: {\nmessages: {\nempty: \"Drag column header here for grouping\"\n    }\n}\n```", "```js\n...\npageable: {\npageSize: 10,\npreviousNext: true, // show buttons navigating to first/last/next/previous\nnumeric: true, // show numeric portion of the pager in the Grid?\nbuttonCount: 10, // number of buttons to show in numeric pager\ninput: true, // create input element allowing user to navigate to page\npageSizes: [5,10,20], //array of page size choices for user\nrefresh: true, //  show a refresh button in the Grid?\ninfo: true, // show a label with current paging information in it\nmessages: {\ndisplay: \"Detail Template – {1} of {2} items\", // info text\nempty: \"No Records\", // text to show when there are no records\npage: \"Page\", // first part of text of input option\nof: \"of Detail Template\", // last part of text of input option\nitemsPerPage: \"items per page\", // text for selecting page size\nfirst: \"Go to first page\", // text of first page button tooltip\nprevious: \"Go to the previous page\", // previous page tooltip\nnext: \"Go to next page\", // next page tooltip\nlast: \"Go to the last page\", // last page tooltip\nrefresh: \"Refresh\" // text of refresh button tooltip\n  }\n}\n```", "```js\n...\nsortable: true,\nfilterable: true,\neditable: \"inline\",\nnavigatable: true,\ngroupable: {\nmessages: {\nempty: \"Drag column header here for grouping\"\n}\n},\npageable: {\npageSize: 10\n}\n\n```", "```js\n...\ntoolbar: [\n\"create\",\n{ name: \"save\", text: \"Save This Record\" },\n{ name: \"cancel\", text: \"Cancel Changes: }]\n```"]