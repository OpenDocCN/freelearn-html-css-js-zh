["```js\n    functions:\n      retrieveUsers:\n        handler: handlers.retrieveUsers\n        events:\n          - http: GET users\n      deleteUser:\n        handler: handlers.deleteUser\n        events:\n          - http: DELETE users\n      retrieveProducts:\n        handler: handlers.retrieveProducts\n        events:\n          - http: GET products\n      createProduct:\n        handler: handlers.createProduct\n        events:\n          - http: POST products\n\n```", "```js\n    functions:\n      users:\n        handler: handlers.users\n        events:\n          - http: GET users\n          - http: DELETE users\n      products:\n        handler: handlers.products\n        events:\n          - http: GET products\n          - http: POST products\n\n```", "```js\n    module.exports.users = (event, context, callback) => {\n\n      switch(`${event.httpMethod} ${event.resource}`) {\n        case 'GET /users':      \n          users.retrieveUsers(callback);\n          break;\n        case 'DELETE /users':  \n          let id = JSON.parse(event.body).id;    \n          users.deleteUser(id, callback);\n          break;\n        default:\n          // handle unexpected path\n      }\n    };\n\n```", "```js\n    functions:\n      store:\n        handler: handler.store\n        events:\n          - http: GET users\n          - http: DELETE users\n          - http: GET products\n          - http: POST products\n\n```", "```js\n    functions:\n      store:\n        handler: handler.store\n        events:\n          - http: POST query\n\n```", "```js\n        const { graphql, buildSchema } = require('graphql');\n\n```", "```js\n        const schema = buildSchema(`\n          type Query {\n            cart: ShoppingCart\n          }\n\n          type ShoppingCart {\n            products: [Product],\n            promotionCode: String,\n            discountPercentage: Int\n          }\n\n          type Product {\n            name: String,\n            code: String,\n            quantity: Int,\n            price: Int\n          }\n        `);\n\n```", "```js\n        const data = {\n          \"cart\": {\n            \"products\": [\n              {\n                \"name\": \"Lonely Bird\",\n                \"code\": \"FOO\",\n                \"quantity\": 1,\n                \"price\": 2999\n              },\n              {\n                \"name\": \"Solid Friendship\",\n                \"code\": \"BAR\",\n                \"quantity\": 1,\n                \"price\": 1999\n              }\n            ],\n            promotionCode: null,\n            discountPercentage: 0\n          }\n        };\n\n```", "```js\n        const query = `{\n          cart {\n            products {\n              name\n              quantity\n              price\n            }\n            discountPercentage\n          }\n        }`;\n\n```", "```js\n        module.exports.store = (event, context, callback) => {\n\n          const query = JSON.parse(event.body);\n\n          graphql(schema, query, data).then((resp) => {\n\n            const response = {\n              statusCode: 200, \n              body: JSON.stringify(resp)\n            };\n\n            callback(null, response);\n          });\n        };\n\n```", "```js\n        {\n          \"data\": {\n            \"cart\": {\n              \"products\": [\n                {\n                  \"name\": \"Lonely Bird\",\n                  \"quantity\": 1,\n                  \"price\": 2999\n                },\n                {\n                  \"name\": \"Solid Friendship\",\n                  \"quantity\": 1,\n                  \"price\": 1999\n                }\n              ],\n              discountPercentage: 0\n            } \n          }\n        }\n\n```", "```js\n    functions:\n      hello:\n        handler: handler.hello\n\n```", "```js\n    functions:\n      hello:\n        handler: subfolder/handler.hello\n      goodbye:\n        handler: lambdas/greetings.bye\n\n```", "```js\n    functions:\n      products:\n        handler: functions/products.handler\n\n```", "```js\n    module.exports.saySomething = () => 'hello';\n\n```", "```js\n    const response = {\n      statusCode: 200,\n      body: JSON.stringify({\n       message: greetings.saySomething()\n      })\n    };\n\n```", "```js\n    const greetings = require('./greetings');\n\n```", "```js\n    const greetings = require('../service1/greetings');\n\n```", "```js\n npm pack\n\n```", "```js\n npm install ../path/to/pack.tgz\n\n```", "```js\n    functions:\n      products:\n        handler: functions/products.handler\n        events:\n          - http: GET products\n          - http: POST cart     # create the cart (new order)\n          - http: OPTIONS cart\n          - http: PUT checkout  # update the order (status = sent)\n          - http: OPTIONS checkout\n\n```", "```js\n    module.exports.handler = (event, context, callback) => {\n\n      const userId = '1'; // TODO: retrieve from authentication headers\n      try {\n        switch(`${event.httpMethod} ${event.resource}`) { \n case 'GET /products': \n            products.retrieveAll(userId, callback);\n            break;\n case 'POST /cart': \n            const selectedProducts = JSON.parse(event.body).products;\n            cart.saveCart(userId, selectedProducts, callback);\n            break;\n case 'OPTIONS /cart': \n            utils.optionsHandler(callback);\n            break;\n case 'PUT /checkout':            const id = JSON.parse(event.body).id;\n            checkout.processCheckout(id, callback);\n            break; \n case 'OPTIONS /checkout': \n            utils.optionsHandler(callback);\n            break;\n          default:\n            utils.notFoundHandler(callback);\n        }\n      } catch (err) {\n        utils.errorHandler(err, callback);\n      }\n    };\n\n```", "```js\n    const corsHeaders = { \n      'Access-Control-Allow-Origin': '*' \n    };\n\n    module.exports.successHandler = (obj, callback) => {\n      callback(null, {\n        statusCode: 200,\n        headers: corsHeaders,\n        body: JSON.stringify(obj)\n      });\n    };\n\n    module.exports.errorHandler = (err, callback) => {\n      callback(null, {\n        statusCode: 500,\n        headers: corsHeaders,\n        body: JSON.stringify({\n          message: 'Internal Server Error',\n          error: err.toString()\n        })\n      });\n    };\n\n    module.exports.notFoundHandler = (callback) => {\n      callback(null, {\n        statusCode: 404,\n        headers: corsHeaders,\n        body: JSON.stringify({ message: 'Not Found' })\n      });\n    };\n\n```", "```js\n    module.exports.optionsHandler = (callback) => {\n      callback(null, {\n        statusCode: 200,\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\":\n            \"GET, POST, PUT, PATCH, DELETE, OPTIONS\",\n          \"Access-Control-Allow-Headers\":\n            \"Accept, Content-Type, Origin\"\n        }\n      });\n    };\n\n```", "```js\n    const db = require('../repositories/fakedb');\n    const utils = require('./utils');\n\n    module.exports.retrieveAll = (userId, callback) => {\n      db.retrieveAllProducts(userId, (err, res) => {\n        if (err) utils.errorHandler(err, callback);\n        else utils.successHandler(res, callback);\n      });\n    };\n\n```", "```js\n    module.exports.retrieveAllProducts = (userId, callback) => {\n      const comments = [{\n        id: 1,\n        username: \"John Doe\",\n        age: \"3 days ago\",\n        text: \"I'm using this to decorate my desk. I liked it.\"\n      }];\n\n      const products = [{\n        id: \"lonely-bird\",\n        name: \"Lonely Bird\",\n        image: 'https://s3.amazonaws.com/...',\n        price: 29.99,\n        isSelected: yes,\n        comments: comments\n      }];\n\n      callback(null, products);\n    };\n\n```"]