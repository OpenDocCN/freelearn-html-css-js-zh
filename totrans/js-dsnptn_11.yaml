- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Event-Driven Programming Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Event-driven programming in JavaScript is very widespread and is the only way
    to handle certain scenarios. Maintaining performance and security around event
    listeners is of paramount importance. Mismanaged event listeners have been a historical
    source of bugs and critical performance issues; we’ll address this via the event
    delegation pattern. Secure messaging between frames and contexts has always been
    crucial in the context of payments. More recently, new primitives are being added
    to the web platform and JavaScript that exposes an event/messaging interface for
    maintaining isolation between contexts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing event delegation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the **postMessage** interface to communicate across contexts with an example
    of a payment iframe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common event listener antipatterns and how to remediate them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of this chapter, you’ll have learned how to use advanced event-driven
    programming concepts in JavaScript to keep your code performant and secure.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/Javascript-Design-Patterns](https://github.com/PacktPublishing/Javascript-Design-Patterns)
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing event listeners through event delegation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Event delegation is a common event listener pattern used to go from “many elements,
    many event listeners” to a “many elements, single event listener.” At its core,
    event delegation attaches one event listener to the page’s `Document`, and inside
    that listener, it checks what the `target` of the event is in order to figure
    out how the event should be handled.
  prefs: []
  type: TYPE_NORMAL
- en: Event delegation means fewer listeners are attached. There’s only one per root
    node; if we’re doing event delegation at the document level, that means one listener.
    Another benefit is that DOM nodes can be attached and removed without worrying
    about adding or removing the relevant event listeners.
  prefs: []
  type: TYPE_NORMAL
- en: The following sequence diagram details an implementation of listening to clicks
    on two buttons.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1: Event handling without event delegation](img/B19109_08_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.1: Event handling without event delegation'
  prefs: []
  type: TYPE_NORMAL
- en: Event handling without event delegation can be contrasted with the event delegation
    sequence, which instead of attaching one handler per event/element, attaches one
    and computes the relevant action in the single listener.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2: Event handling with event delegation](img/B19109_08_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.2: Event handling with event delegation'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll implement simple event delegation for an email subscription form that
    is submitted via client-side JavaScript with `fetch`. To begin with, we’ll start
    laying out a form. We have a form with the `data-newsletter-form` attribute, which
    we’ll pick up in JavaScript, a heading, a label, an email input, and a submit
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To start on the event part of event delegation, we add a click listener to
    the document. This listener switches based on `event.target.tagName`; `tagName`
    takes uppercase values such as `P`, `BUTTON`, and `DIV`. In order to make the
    code easier to follow, we’ll switch on the lowercase version of `tagName`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When we detect a click on a button element, we then check whether the `event.target`
    is inside a form, whether `event.target` is of the `submit` type, and whether
    the form that contains the event target element includes `newsletterForm` in its
    `dataset`, in other words whether it has `data-newsletter-form`. In this case,
    we call `event.preventDefault`. We’ll be handling the form submission using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'We provide some feedback to the user that the form is submitting by changing
    the contents of the event target button (to `Submitting`) and we set the `disabled`
    attribute so that the form can’t be submitted again until our handler execution
    completes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When we click the **Submit** button, it now gets disabled, and its content is
    set to **Submitting**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3: When the Submit button is clicked, it is disabled and the text
    changes to Submitting](img/B19109_08_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3: When the Submit button is clicked, it is disabled and the text
    changes to Submitting'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll now work on submitting the newsletter form. In order to do this, we need
    a `fetch`-based function that will `POST` the given `email` parameter to `jsonplaceholder.typicode.com/users`.
    We then await the `fetch` promise and extract the JSON response using `res.json()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll now extend the `button` `type=submit` handler to call `submitNewsletterSubscription`.
    The `email` value comes from `formValues.get(''email'')` (the email field of the
    form). when `submitNewsletterSubscription` completes successfully (i.e.. the Promise
    resolves), we reset the `submit` button to have the text `disabled` attribute):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To highlight the requests/responses, we’ll add a `storeLogEvent` function and
    an API request/response log to our page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then use `storeLogEvent` before and after calling `submitNewsletterSubscription`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we click `POST`-ed to `jsonplaceholder` and we get a response back,
    as we can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4: When we enter an email and click Submit, we the API response
    is displayed](img/B19109_08_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.4: When we enter an email and click Submit, we the API response is
    displayed'
  prefs: []
  type: TYPE_NORMAL
- en: To showcase the benefit of event delegation in a situation where DOM elements
    can get dynamically added, we’ll create an **Add a form** button that will append
    an additional newsletter form to the document.
  prefs: []
  type: TYPE_NORMAL
- en: First, we add a `button` with `data-add-form`, we’ll use the data attribute
    to detect and handle clicks on the `button`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: document.addEventListener('click', (event) => {
  prefs: []
  type: TYPE_NORMAL
- en: switch (event.target.tagName?.toLowerCase()) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''button'': {'
  prefs: []
  type: TYPE_NORMAL
- en: if ('addForm' in event.target.dataset) {
  prefs: []
  type: TYPE_NORMAL
- en: return;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // no change to newsletter form handling
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: document.addEventListener('click', (event) => {
  prefs: []
  type: TYPE_NORMAL
- en: switch (event.target.tagName?.toLowerCase()) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''button'': {'
  prefs: []
  type: TYPE_NORMAL
- en: if ('addForm' in event.target.dataset) {
  prefs: []
  type: TYPE_NORMAL
- en: const $newsletterFormTemplate = document.
  prefs: []
  type: TYPE_NORMAL
- en: querySelector(
  prefs: []
  type: TYPE_NORMAL
- en: '''[data-newsletter-form]'','
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: const newForm = $newsletterFormTemplate.
  prefs: []
  type: TYPE_NORMAL
- en: cloneNode(true);
  prefs: []
  type: TYPE_NORMAL
- en: newForm.querySelector('h3').innerText += `
  prefs: []
  type: TYPE_NORMAL
- en: (${Math.floor(
  prefs: []
  type: TYPE_NORMAL
- en: Math.random() * 100,
  prefs: []
  type: TYPE_NORMAL
- en: )})`;
  prefs: []
  type: TYPE_NORMAL
- en: newForm.querySelector('[name=email]').value = '';
  prefs: []
  type: TYPE_NORMAL
- en: document.body.appendChild(newForm);
  prefs: []
  type: TYPE_NORMAL
- en: return;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // no change to newsletter form handling
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <form>
  prefs: []
  type: TYPE_NORMAL
- en: <h2>Checkout form</h2>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: '<span>Price: <span>200</span>€</span>'
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <h3>Customer Details</h3>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <label for="email">Email</label>
  prefs: []
  type: TYPE_NORMAL
- en: <input id="email" type="email" name="email"
  prefs: []
  type: TYPE_NORMAL
- en: required="required" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <iframe id="payment-capture" width="100%"
  prefs: []
  type: TYPE_NORMAL
- en: height="300px"></iframe>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <button type="submit">Pay</button>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </form>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: window.addEventListener('message', (event) => {
  prefs: []
  type: TYPE_NORMAL
- en: if (event?.data) {
  prefs: []
  type: TYPE_NORMAL
- en: const { type, data } = JSON.parse(event?.data);
  prefs: []
  type: TYPE_NORMAL
- en: switch (type) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''init'': {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Parent received init message');
  prefs: []
  type: TYPE_NORMAL
- en: return;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: // no change to the message listener
  prefs: []
  type: TYPE_NORMAL
- en: const $paymentCaptureIframe = document.querySelector
  prefs: []
  type: TYPE_NORMAL
- en: ('#payment-capture');
  prefs: []
  type: TYPE_NORMAL
- en: // on iframe load, we'll send a message
  prefs: []
  type: TYPE_NORMAL
- en: $paymentCaptureIframe.addEventListener('load', () => {
  prefs: []
  type: TYPE_NORMAL
- en: $paymentCaptureIframe.contentWindow.postMessage(
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON.stringify({ type: ''init'', data: { price: 20000,'
  prefs: []
  type: TYPE_NORMAL
- en: 'currency: ''EUR'' } }),'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: // no change to message and iframe load listeners
  prefs: []
  type: TYPE_NORMAL
- en: $paymentCaptureIframe.setAttribute(
  prefs: []
  type: TYPE_NORMAL
- en: '''src'','
  prefs: []
  type: TYPE_NORMAL
- en: new URL('/frame-content.html', window.location.origin),
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: <h2>Payment iframe</h2>
  prefs: []
  type: TYPE_NORMAL
- en: <form>
  prefs: []
  type: TYPE_NORMAL
- en: <input type="hidden" name="price" />
  prefs: []
  type: TYPE_NORMAL
- en: <input type="hidden" name="currency" />
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <label for="cardnumber">Card Number</label>
  prefs: []
  type: TYPE_NORMAL
- en: <input required="required" name="cardnumber"
  prefs: []
  type: TYPE_NORMAL
- en: id="cardnumber" type="text" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <label for="cardexpiry">Expiry Date</label>
  prefs: []
  type: TYPE_NORMAL
- en: <input required="required" name="cardexpiry"
  prefs: []
  type: TYPE_NORMAL
- en: id="cardexpiry" type="text" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <label for="cardcvv">CVV</label>
  prefs: []
  type: TYPE_NORMAL
- en: <input name="cardcvv" id="cardcvv" type="text" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </form>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <h3>Messages</h3>
  prefs: []
  type: TYPE_NORMAL
- en: <pre><code></code></pre>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: window.addEventListener('message', async (event) => {
  prefs: []
  type: TYPE_NORMAL
- en: document.querySelector('pre code').innerText +=
  prefs: []
  type: TYPE_NORMAL
- en: '`Received: ${event.data}\n`;'
  prefs: []
  type: TYPE_NORMAL
- en: const { type, data } = JSON.parse(event.data);
  prefs: []
  type: TYPE_NORMAL
- en: switch (type) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''init'': {'
  prefs: []
  type: TYPE_NORMAL
- en: document.querySelector('[name=price]').value =
  prefs: []
  type: TYPE_NORMAL
- en: data.price;
  prefs: []
  type: TYPE_NORMAL
- en: document.querySelector('[name=currency]').value =
  prefs: []
  type: TYPE_NORMAL
- en: data.currency;
  prefs: []
  type: TYPE_NORMAL
- en: return;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: // no change to the message event listener
  prefs: []
  type: TYPE_NORMAL
- en: 'const initMessage = JSON.stringify({ type: ''init'' });'
  prefs: []
  type: TYPE_NORMAL
- en: 'document.querySelector(''pre code'').innerText += `Sent:'
  prefs: []
  type: TYPE_NORMAL
- en: ${initMessage}\n`;
  prefs: []
  type: TYPE_NORMAL
- en: window.parent.postMessage(initMessage);
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: // no message to iframe initialization code
  prefs: []
  type: TYPE_NORMAL
- en: document.querySelector('form').addEventListener('submit',
  prefs: []
  type: TYPE_NORMAL
- en: (event) => {
  prefs: []
  type: TYPE_NORMAL
- en: event.preventDefault();
  prefs: []
  type: TYPE_NORMAL
- en: $paymentCaptureIframe.contentWindow.postMessage(
  prefs: []
  type: TYPE_NORMAL
- en: JSON.stringify({
  prefs: []
  type: TYPE_NORMAL
- en: 'type: ''submit'','
  prefs: []
  type: TYPE_NORMAL
- en: '}),'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: window.addEventListener('message', async (event) => {
  prefs: []
  type: TYPE_NORMAL
- en: // no change outside of the switch
  prefs: []
  type: TYPE_NORMAL
- en: switch (type) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''submit'': {'
  prefs: []
  type: TYPE_NORMAL
- en: $form = document.querySelector('form');
  prefs: []
  type: TYPE_NORMAL
- en: const isFormValid = $form.reportValidity();
  prefs: []
  type: TYPE_NORMAL
- en: if (!isFormValid) {
  prefs: []
  type: TYPE_NORMAL
- en: const fields = [...$form];
  prefs: []
  type: TYPE_NORMAL
- en: const invalidFields = fields
  prefs: []
  type: TYPE_NORMAL
- en: .filter((f) => f.type !== 'hidden' &&
  prefs: []
  type: TYPE_NORMAL
- en: '!f.validity?.valid)'
  prefs: []
  type: TYPE_NORMAL
- en: .map((f) => f.name);
  prefs: []
  type: TYPE_NORMAL
- en: const message = JSON.stringify({
  prefs: []
  type: TYPE_NORMAL
- en: 'type: ''validation-error'','
  prefs: []
  type: TYPE_NORMAL
- en: 'data: invalidFields,'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: window.parent.postMessage(message);
  prefs: []
  type: TYPE_NORMAL
- en: document.querySelector('pre code').innerText +=
  prefs: []
  type: TYPE_NORMAL
- en: '`Sent: ${message}\n`;'
  prefs: []
  type: TYPE_NORMAL
- en: return;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // no change to other "case" statements
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: window.addEventListener('message', (event) => {
  prefs: []
  type: TYPE_NORMAL
- en: if (event?.data) {
  prefs: []
  type: TYPE_NORMAL
- en: const { type, data } = JSON.parse(event?.data);
  prefs: []
  type: TYPE_NORMAL
- en: switch (type) {
  prefs: []
  type: TYPE_NORMAL
- en: // no change to other "case" statements
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''validation-error'': {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Received message', type, data);
  prefs: []
  type: TYPE_NORMAL
- en: return;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: async function encryptToBase64(message) {
  prefs: []
  type: TYPE_NORMAL
- en: const msgUint8 = new TextEncoder().encode(message);
  prefs: []
  type: TYPE_NORMAL
- en: const publicKeyExport = await fetch
  prefs: []
  type: TYPE_NORMAL
- en: ('./public-key.json').then((res) =>
  prefs: []
  type: TYPE_NORMAL
- en: res.json(),
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: const publicKey = await crypto.subtle.importKey(
  prefs: []
  type: TYPE_NORMAL
- en: '''jwk'','
  prefs: []
  type: TYPE_NORMAL
- en: publicKeyExport,
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ''RSA-OAEP'','
  prefs: []
  type: TYPE_NORMAL
- en: 'hash: ''SHA-256'','
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: true,
  prefs: []
  type: TYPE_NORMAL
- en: '[''encrypt''],'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: const encryptedBuffer = await crypto.subtle.encrypt(
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ''RSA-OAEP'','
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: publicKey,
  prefs: []
  type: TYPE_NORMAL
- en: msgUint8,
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: return btoa(
  prefs: []
  type: TYPE_NORMAL
- en: return [...new Uint8Array(encryptedBuffer)]
  prefs: []
  type: TYPE_NORMAL
- en: .map((el) => String.fromCharCode(el))
  prefs: []
  type: TYPE_NORMAL
- en: .join(''),
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: window.addEventListener('message', async (event) => {
  prefs: []
  type: TYPE_NORMAL
- en: // no change outside of the switch
  prefs: []
  type: TYPE_NORMAL
- en: switch (type) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''submit'': {'
  prefs: []
  type: TYPE_NORMAL
- en: $form = document.querySelector('form');
  prefs: []
  type: TYPE_NORMAL
- en: // no change to form validity validation
  prefs: []
  type: TYPE_NORMAL
- en: const data = new FormData($form);
  prefs: []
  type: TYPE_NORMAL
- en: const serializableData = Object.fromEntries
  prefs: []
  type: TYPE_NORMAL
- en: (data.entries());
  prefs: []
  type: TYPE_NORMAL
- en: const message = JSON.stringify({
  prefs: []
  type: TYPE_NORMAL
- en: 'type: ''submit-response'','
  prefs: []
  type: TYPE_NORMAL
- en: 'data: await encryptToBase64'
  prefs: []
  type: TYPE_NORMAL
- en: (JSON.stringify(serializableData)),
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: window.parent.postMessage(message);
  prefs: []
  type: TYPE_NORMAL
- en: document.querySelector('pre code').innerText +=
  prefs: []
  type: TYPE_NORMAL
- en: '`Sent: ${message}\n`;'
  prefs: []
  type: TYPE_NORMAL
- en: return;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // no change to other "case" statements
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: window.addEventListener('message', (event) => {
  prefs: []
  type: TYPE_NORMAL
- en: if (event?.data) {
  prefs: []
  type: TYPE_NORMAL
- en: const { type, data } = JSON.parse(event?.data);
  prefs: []
  type: TYPE_NORMAL
- en: switch (type) {
  prefs: []
  type: TYPE_NORMAL
- en: // no change to other "case" statements
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''submit-response'': {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('received submit-response');
  prefs: []
  type: TYPE_NORMAL
- en: console.log(event.data);
  prefs: []
  type: TYPE_NORMAL
- en: const formData = new FormData
  prefs: []
  type: TYPE_NORMAL
- en: (document.querySelector('form'));
  prefs: []
  type: TYPE_NORMAL
- en: Const pageData = Object.fromEntries
  prefs: []
  type: TYPE_NORMAL
- en: (formData.entries());
  prefs: []
  type: TYPE_NORMAL
- en: return;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: // handle receiving messages from iframe -> parent
  prefs: []
  type: TYPE_NORMAL
- en: const allowedMessageOrigins = ['http://127.0.0.1:8000'];
  prefs: []
  type: TYPE_NORMAL
- en: window.addEventListener('message', (event) => {
  prefs: []
  type: TYPE_NORMAL
- en: if (!allowedMessageOrigins.includes(event.origin)) {
  prefs: []
  type: TYPE_NORMAL
- en: console.warn(
  prefs: []
  type: TYPE_NORMAL
- en: '`Dropping message due to non-allowlisted origin'
  prefs: []
  type: TYPE_NORMAL
- en: ${event.origin}`,
  prefs: []
  type: TYPE_NORMAL
- en: event,
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: return;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // no change to the rest of the message handler
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: document.addEventListener(
  prefs: []
  type: TYPE_NORMAL
- en: '''scroll'','
  prefs: []
  type: TYPE_NORMAL
- en: (event) => {},
  prefs: []
  type: TYPE_NORMAL
- en: '{ passive: true }'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
