- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Event-Driven Programming Patterns
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件驱动编程模式
- en: Event-driven programming in JavaScript is very widespread and is the only way
    to handle certain scenarios. Maintaining performance and security around event
    listeners is of paramount importance. Mismanaged event listeners have been a historical
    source of bugs and critical performance issues; we’ll address this via the event
    delegation pattern. Secure messaging between frames and contexts has always been
    crucial in the context of payments. More recently, new primitives are being added
    to the web platform and JavaScript that exposes an event/messaging interface for
    maintaining isolation between contexts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的事件驱动编程非常普遍，并且是处理某些场景的唯一方式。在事件监听器周围维护性能和安全至关重要。管理不善的事件监听器一直是历史性的错误来源和关键性能问题；我们将通过事件委托模式解决这个问题。在支付环境中，帧和上下文之间的安全消息传递始终至关重要。最近，Web平台和JavaScript正在添加新的原语，这些原语暴露了一个事件/消息接口，用于在上下文之间保持隔离。
- en: 'In this chapter, we’ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Implementing event delegation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现事件委托
- en: Using the **postMessage** interface to communicate across contexts with an example
    of a payment iframe
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**postMessage**接口在上下文之间进行通信，以下是一个支付iframe的示例
- en: Common event listener antipatterns and how to remediate them
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的事件监听器反模式及其修复方法
- en: At the end of this chapter, you’ll have learned how to use advanced event-driven
    programming concepts in JavaScript to keep your code performant and secure.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将学会如何使用JavaScript中高级的事件驱动编程概念来保持代码的性能和安全性。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/Javascript-Design-Patterns](https://github.com/PacktPublishing/Javascript-Design-Patterns)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码文件，链接为[https://github.com/PacktPublishing/Javascript-Design-Patterns](https://github.com/PacktPublishing/Javascript-Design-Patterns)
- en: Optimizing event listeners through event delegation
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过事件委托优化事件监听器
- en: Event delegation is a common event listener pattern used to go from “many elements,
    many event listeners” to a “many elements, single event listener.” At its core,
    event delegation attaches one event listener to the page’s `Document`, and inside
    that listener, it checks what the `target` of the event is in order to figure
    out how the event should be handled.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 事件委托是一种常见的事件监听器模式，用于从“许多元素，许多事件监听器”转换为“许多元素，单个事件监听器”。在其核心，事件委托将一个事件监听器附加到页面的`Document`上，并在该监听器内部检查事件的`target`，以确定如何处理该事件。
- en: Event delegation means fewer listeners are attached. There’s only one per root
    node; if we’re doing event delegation at the document level, that means one listener.
    Another benefit is that DOM nodes can be attached and removed without worrying
    about adding or removing the relevant event listeners.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 事件委托意味着附加的监听器更少。每个根节点只有一个；如果我们是在文档级别进行事件委托，那么意味着只有一个监听器。另一个好处是，可以在不担心添加或删除相关事件监听器的情况下添加和删除DOM节点。
- en: The following sequence diagram details an implementation of listening to clicks
    on two buttons.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下序列图详细说明了监听两个按钮点击的实现。
- en: '![Figure 8.1: Event handling without event delegation](img/B19109_08_1.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1：没有事件委托的事件处理](img/B19109_08_1.jpg)'
- en: 'Figure 8.1: Event handling without event delegation'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1：没有事件委托的事件处理
- en: Event handling without event delegation can be contrasted with the event delegation
    sequence, which instead of attaching one handler per event/element, attaches one
    and computes the relevant action in the single listener.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 没有事件委托的事件处理可以与事件委托序列进行对比，后者不是为每个事件/元素附加一个处理程序，而是附加一个处理程序并在单个监听器中计算相关操作。
- en: '![Figure 8.2: Event handling with event delegation](img/B19109_08_2.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2：使用事件委托的事件处理](img/B19109_08_2.jpg)'
- en: 'Figure 8.2: Event handling with event delegation'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2：使用事件委托的事件处理
- en: 'We’ll implement simple event delegation for an email subscription form that
    is submitted via client-side JavaScript with `fetch`. To begin with, we’ll start
    laying out a form. We have a form with the `data-newsletter-form` attribute, which
    we’ll pick up in JavaScript, a heading, a label, an email input, and a submit
    button:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现一个简单的邮件订阅表单的事件委托，该表单通过客户端JavaScript使用`fetch`提交。首先，我们将开始布局一个表单。我们有一个带有`data-newsletter-form`属性的表单，我们将在JavaScript中获取它，一个标题，一个标签，一个电子邮件输入框和一个提交按钮：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To start on the event part of event delegation, we add a click listener to
    the document. This listener switches based on `event.target.tagName`; `tagName`
    takes uppercase values such as `P`, `BUTTON`, and `DIV`. In order to make the
    code easier to follow, we’ll switch on the lowercase version of `tagName`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要从事件委托的事件部分开始，我们向文档添加一个点击监听器。这个监听器根据`event.target.tagName`进行切换；`tagName`取大写值，如`P`、`BUTTON`和`DIV`。为了使代码更容易理解，我们将切换到`tagName`的小写版本：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When we detect a click on a button element, we then check whether the `event.target`
    is inside a form, whether `event.target` is of the `submit` type, and whether
    the form that contains the event target element includes `newsletterForm` in its
    `dataset`, in other words whether it has `data-newsletter-form`. In this case,
    we call `event.preventDefault`. We’ll be handling the form submission using JavaScript.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们检测到按钮元素的点击时，然后检查`event.target`是否在表单内，`event.target`是否为`submit`类型，以及包含事件目标元素的表单是否在其`dataset`中包含`newsletterForm`，换句话说，它是否有`data-newsletter-form`。在这种情况下，我们调用`event.preventDefault`。我们将使用JavaScript处理表单提交。
- en: 'We provide some feedback to the user that the form is submitting by changing
    the contents of the event target button (to `Submitting`) and we set the `disabled`
    attribute so that the form can’t be submitted again until our handler execution
    completes:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过更改事件目标按钮的内容（到`Submitting`）并设置`disabled`属性来向用户提供反馈，表明表单正在提交，这样在处理程序执行完成之前，表单就不能再次提交：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When we click the **Submit** button, it now gets disabled, and its content is
    set to **Submitting**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击**提交**按钮时，它现在被禁用，其内容设置为**提交中**。
- en: '![Figure 8.3: When the Submit button is clicked, it is disabled and the text
    changes to Submitting](img/B19109_08_3.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3：当点击提交按钮时，它被禁用，文本变为提交中](img/B19109_08_3.jpg)'
- en: 'Figure 8.3: When the Submit button is clicked, it is disabled and the text
    changes to Submitting'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3：当点击提交按钮时，它被禁用，文本变为提交中
- en: 'We’ll now work on submitting the newsletter form. In order to do this, we need
    a `fetch`-based function that will `POST` the given `email` parameter to `jsonplaceholder.typicode.com/users`.
    We then await the `fetch` promise and extract the JSON response using `res.json()`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将处理提交新闻通讯表单。为了做到这一点，我们需要一个基于`fetch`的函数，该函数将`POST`给定的`email`参数到`jsonplaceholder.typicode.com/users`。然后我们等待`fetch`承诺，并使用`res.json()`提取JSON响应：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We’ll now extend the `button` `type=submit` handler to call `submitNewsletterSubscription`.
    The `email` value comes from `formValues.get(''email'')` (the email field of the
    form). when `submitNewsletterSubscription` completes successfully (i.e.. the Promise
    resolves), we reset the `submit` button to have the text `disabled` attribute):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将扩展`button`的`type=submit`处理程序，以调用`submitNewsletterSubscription`。`email`值来自`formValues.get('email')`（表单的电子邮件字段）。当`submitNewsletterSubscription`成功完成（即Promise解析）时，我们将重置`submit`按钮以具有`disabled`属性：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To highlight the requests/responses, we’ll add a `storeLogEvent` function and
    an API request/response log to our page:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了突出显示请求/响应，我们将在我们的页面上添加一个`storeLogEvent`函数和一个API请求/响应日志：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can then use `storeLogEvent` before and after calling `submitNewsletterSubscription`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在调用`submitNewsletterSubscription`之前和之后使用`storeLogEvent`：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, when we click `POST`-ed to `jsonplaceholder` and we get a response back,
    as we can see in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们点击`POST`到`jsonplaceholder`并收到响应时，正如我们可以在以下屏幕截图中所见：
- en: '![Figure 8.4: When we enter an email and click Submit, we the API response
    is displayed](img/B19109_08_4.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4：当我们输入电子邮件并点击提交时，API响应被显示](img/B19109_08_4.jpg)'
- en: 'Figure 8.4: When we enter an email and click Submit, we the API response is
    displayed'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4：当我们输入电子邮件并点击提交时，API响应被显示
- en: To showcase the benefit of event delegation in a situation where DOM elements
    can get dynamically added, we’ll create an **Add a form** button that will append
    an additional newsletter form to the document.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示在DOM元素可以动态添加的情况下事件委托的优势，我们将创建一个**添加表单**按钮，该按钮将向文档中附加一个额外的新闻通讯表单。
- en: First, we add a `button` with `data-add-form`, we’ll use the data attribute
    to detect and handle clicks on the `button`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们添加一个带有`data-add-form`的`button`，我们将使用数据属性来检测和处理按钮的点击。
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <script>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: document.addEventListener('click', (event) => {
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: document.addEventListener('click', (event) => {
- en: switch (event.target.tagName?.toLowerCase()) {
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: switch (event.target.tagName?.toLowerCase()) {
- en: 'case ''button'': {'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 'case ''button'': {'
- en: if ('addForm' in event.target.dataset) {
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: if ('addForm' in event.target.dataset) {
- en: return;
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: return;
- en: '}'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // no change to newsletter form handling
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: // 对新闻通讯表单处理没有变化
- en: '}'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: </script>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <script>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: document.addEventListener('click', (event) => {
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: switch (event.target.tagName?.toLowerCase()) {
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''button'': {'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: if ('addForm' in event.target.dataset) {
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: const $newsletterFormTemplate = document.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: querySelector(
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '''[data-newsletter-form]'','
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: const newForm = $newsletterFormTemplate.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: cloneNode(true);
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: newForm.querySelector('h3').innerText += `
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: (${Math.floor(
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Math.random() * 100,
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: )})`;
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: newForm.querySelector('[name=email]').value = '';
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: document.body.appendChild(newForm);
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: return;
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: // no change to newsletter form handling
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <form>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: <h2>Checkout form</h2>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '<span>Price: <span>200</span>€</span>'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: <h3>Customer Details</h3>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: <label for="email">Email</label>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: <input id="email" type="email" name="email"
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: required="required" />
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: <iframe id="payment-capture" width="100%"
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: height="300px"></iframe>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: <button type="submit">Pay</button>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: </form>
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <script>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: window.addEventListener('message', (event) => {
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: if (event?.data) {
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: const { type, data } = JSON.parse(event?.data);
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: switch (type) {
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''init'': {'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Parent received init message');
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: return;
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: <script>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: // no change to the message listener
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: const $paymentCaptureIframe = document.querySelector
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: ('#payment-capture');
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: // on iframe load, we'll send a message
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: $paymentCaptureIframe.addEventListener('load', () => {
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: $paymentCaptureIframe.contentWindow.postMessage(
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON.stringify({ type: ''init'', data: { price: 20000,'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'currency: ''EUR'' } }),'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: <script>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: // no change to message and iframe load listeners
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: $paymentCaptureIframe.setAttribute(
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '''src'','
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: new URL('/frame-content.html', window.location.origin),
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: <h2>Payment iframe</h2>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: <form>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: <input type="hidden" name="price" />
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: <input type="hidden" name="currency" />
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: <label for="cardnumber">Card Number</label>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: <input required="required" name="cardnumber"
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: id="cardnumber" type="text" />
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: <label for="cardexpiry">Expiry Date</label>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: <input required="required" name="cardexpiry"
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: id="cardexpiry" type="text" />
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: <label for="cardcvv">CVV</label>
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: <input name="cardcvv" id="cardcvv" type="text" />
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: </form>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: <h3>Messages</h3>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: <pre><code></code></pre>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: <script>
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: window.addEventListener('message', async (event) => {
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: document.querySelector('pre code').innerText +=
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '`Received: ${event.data}\n`;'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: const { type, data } = JSON.parse(event.data);
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: switch (type) {
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''init'': {'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: document.querySelector('[name=price]').value =
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: data.price;
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: document.querySelector('[name=currency]').value =
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: data.currency;
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: return;
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: <script>
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: // no change to the message event listener
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'const initMessage = JSON.stringify({ type: ''init'' });'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'document.querySelector(''pre code'').innerText += `Sent:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: ${initMessage}\n`;
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: window.parent.postMessage(initMessage);
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: <script>
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: // no message to iframe initialization code
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: document.querySelector('form').addEventListener('submit',
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: (event) => {
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: event.preventDefault();
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: $paymentCaptureIframe.contentWindow.postMessage(
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: JSON.stringify({
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'type: ''submit'','
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '}),'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: <script>
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: window.addEventListener('message', async (event) => {
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: // no change outside of the switch
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: switch (type) {
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''submit'': {'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: $form = document.querySelector('form');
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: const isFormValid = $form.reportValidity();
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: if (!isFormValid) {
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: const fields = [...$form];
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: const invalidFields = fields
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: .filter((f) => f.type !== 'hidden' &&
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '!f.validity?.valid)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: .map((f) => f.name);
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: const message = JSON.stringify({
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'type: ''validation-error'','
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'data: invalidFields,'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: window.parent.postMessage(message);
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: document.querySelector('pre code').innerText +=
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '`Sent: ${message}\n`;'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: return;
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: // no change to other "case" statements
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: <script>
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: window.addEventListener('message', (event) => {
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: if (event?.data) {
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: const { type, data } = JSON.parse(event?.data);
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: switch (type) {
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: // no change to other "case" statements
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''validation-error'': {'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Received message', type, data);
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: return;
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: <script>
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: async function encryptToBase64(message) {
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: const msgUint8 = new TextEncoder().encode(message);
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: const publicKeyExport = await fetch
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: ('./public-key.json').then((res) =>
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: res.json(),
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: const publicKey = await crypto.subtle.importKey(
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '''jwk'','
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: publicKeyExport,
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ''RSA-OAEP'','
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: 'hash: ''SHA-256'','
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: true,
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '[''encrypt''],'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: const encryptedBuffer = await crypto.subtle.encrypt(
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ''RSA-OAEP'','
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: publicKey,
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: msgUint8,
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: return btoa(
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: return [...new Uint8Array(encryptedBuffer)]
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: .map((el) => String.fromCharCode(el))
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: .join(''),
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: <script>
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: window.addEventListener('message', async (event) => {
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: // no change outside of the switch
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: switch (type) {
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''submit'': {'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: $form = document.querySelector('form');
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: // no change to form validity validation
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: const data = new FormData($form);
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: const serializableData = Object.fromEntries
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: (data.entries());
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: const message = JSON.stringify({
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: 'type: ''submit-response'','
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: 'data: await encryptToBase64'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: (JSON.stringify(serializableData)),
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: window.parent.postMessage(message);
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: document.querySelector('pre code').innerText +=
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '`Sent: ${message}\n`;'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: return;
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: // no change to other "case" statements
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: <script>
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: window.addEventListener('message', (event) => {
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: if (event?.data) {
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: const { type, data } = JSON.parse(event?.data);
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: switch (type) {
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: // no change to other "case" statements
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''submit-response'': {'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: console.log('received submit-response');
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: console.log(event.data);
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: const formData = new FormData
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: (document.querySelector('form'));
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Const pageData = Object.fromEntries
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: (formData.entries());
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: return;
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: <script>
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: // handle receiving messages from iframe -> parent
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: const allowedMessageOrigins = ['http://127.0.0.1:8000'];
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: window.addEventListener('message', (event) => {
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: if (!allowedMessageOrigins.includes(event.origin)) {
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: console.warn(
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '`Dropping message due to non-allowlisted origin'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: ${event.origin}`,
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: event,
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: return;
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: // no change to the rest of the message handler
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: document.addEventListener(
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '''scroll'','
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: (event) => {},
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '{ passive: true }'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
