["```js\nwebServer: {\n  command:\n    'npm run build && npm run preview',\n  port: 4173,\n  env: {\n    PATH: process.env.PATH,\n    VITE_ALLOW_CREDENTIALS: true\n  }\n},\n```", "```js\nimport GitHubProvider from '@auth/core/providers/github';\nimport CredentialsProvider from '@auth/core/providers/credentials';\nimport {\n  GITHUB_ID,\n  GITHUB_SECRET\n} from '$env/static/private';\nconst allowCredentials =\n  import.meta.env.VITE_ALLOW_CREDENTIALS === 'true';\nconst GitHub = GitHubProvider({\n  clientId: GITHUB_ID,\n  clientSecret: GITHUB_SECRET\n});\nconst credentials = CredentialsProvider({\n  credentials: {\n    username: { label: 'Username', type: 'text' }\n  },\n  async authorize({ username }, req) {\n    if (username === 'api')\n      return { id: '1', name: 'api' };\n  }\n});\nconst devAuthProviders = {\n  GitHub,\n  credentials\n};\nconst prodAuthProviders = { GitHub };\nexport const authProviders = allowCredentials\n  ? devAuthProviders\n  : prodAuthProviders;\n```", "```js\nimport { expect, test } from '@playwright/test';\ntest('logs in and returns to the application', async ({\n  page\n}) => {\n  await page.goto('/birthdays');\n  await page.waitForLoadState('networkidle');\n  await page\n    .getByRole('button', { name: /Sign in with\n      credentials/i })\n    .click();\n  await page.getByRole('textbox').fill('api');\n  await page\n    .getByRole('button', { name: /Sign in with\n      credentials/i })\n    .click();\n  await expect(\n    page.getByText('Birthday list')\n  ).toBeVisible();\n});\n```", "```js\ntest('does not log in if log in fails', async ({\n  page\n}) => {\n  await page.goto('/birthdays');\n  await expect(\n    page.getByText('Please login')\n  ).toBeVisible();\n  await page.waitForLoadState('networkidle');\n  await page\n    .getByRole('button', { name: /Sign in with\n      credentials/i })\n    .click();\n  await page\n    .getByRole('textbox')\n    .fill('unknown user');\n  await page\n    .getByRole('button', { name: /Sign in with\n      credentials/i })\n    .click();\n  await expect(\n    page.getByText(\n      'Sign in failed. Check the details you provided are\n        correct.'\n    )\n  ).toBeVisible();\n});\n```", "```js\nconst login = async ({ context, baseURL }) => {\n  const response = await context.request.get(\n    '/auth/csrf'\n  );\n  const { csrfToken } = await response.json();\n  const response2 = await context.request.post(\n    '/auth/callback/credentials',\n    {\n      form: {\n        username: 'api',\n        csrfToken\n      },\n      headers: {\n        origin: baseURL\n      }\n    }\n  );\n};\n```", "```js\ntest.beforeEach(login);\n```", "```js\nimport { vi } from 'vitest';\nconst validSession = { user: 'api ' };\nexport const loggedInSession = () => ({\n  session: validSession\n});\nexport const loggedOutSession = () => ({\n  session: null\n});\nexport const loggedInLocalsSession = () => ({\n  getSession: vi.fn().mockResolvedValue(validSession)\n});\nexport const loggedOutLocalsSession = () => ({\n  getSession: vi.fn().mockResolvedValue(null)\n});\n```", "```js\nimport {\n  loggedInSession,\n  loggedOutSession,\n} from 'src/factories/session.js';\n```", "```js\ndescribe('/birthdays - load', () => {\n  const parent = vi.fn();\n  beforeEach(() => {\n    parent.mockResolvedValue(loggedInSession());\n  });\n  ...\n});\n```", "```js\nit('calls fetch with /api/birthdays', async () => {\n  const fetch = vi.fn();\n  fetch.mockResolvedValue(fetchResponseOk());\n  const result = await load({ fetch, parent });\n  expect(fetch).toBeCalledWith('/api/birthdays');\n});\n```", "```js\nit('redirects if the request is not authorised', async () => {\n  parent.mockResolvedValue(loggedOutSession());\n  expect.hasAssertions();\n  try {\n    await load({ parent });\n  } catch (error) {\n    expect(error.status).toEqual(303);\n    expect(error.location).toEqual('/login');\n  }\n});\n```", "```js\nimport {\n  loggedInSession,\n  loggedOutSession,\n  loggedInLocalsSession,\n  loggedOutLocalsSession\n} from 'src/factories/session.js';\n```", "```js\ndescribe('/birthdays - default action', () => {\n  const fetch = vi.fn();\n  let locals;\n  beforeEach(() => {\n    fetch.mockResolvedValue(fetchResponseOk());\n    locals = loggedInLocalsSession();\n  });\n  ...\n});\n```", "```js\n  const performFormAction = (formData) =>\n    actions.default({\n      request: createFormDataRequest(formData),\n      fetch,\n      locals\n    });\n```", "```js\ndescribe('when not authorised', () => {\n  beforeEach(() => {\n    locals = loggedOutLocalsSession();\n  });\n  it('returns a failure', async () => {\n    const result = await performFormAction({});\n    expect(result.status).toEqual(300);\n  });\n});\n```"]