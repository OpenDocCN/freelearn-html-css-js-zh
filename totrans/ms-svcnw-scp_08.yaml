- en: Scripting with Jelly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to look at scripting with Jelly. We will look
    at how to write Jelly code to create custom pages and scripts to meet your needs.
    We will also take a look at UI macros and how these are created in ServiceNow,
    as well as look at an example to further our knowledge in this area.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Jelly scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI macros
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jelly scripting examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jelly scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jelly scripting knowledge is important to build custom pages and scripts, and
    also to amend Jelly code that exists in ServiceNow as part of the platform to
    work in a different way for your own purposes. We introduced Jelly scripting and
    how it can be used in a UI page in the last chapter. Let''s remind ourselves what
    the Jelly tags ServiceNow gives us look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once these tags are in place, we can start to include our Jelly code inside.
    This can be added to a UI page or UI macro. We will take a look at UI macros later
    in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let's have a look at the `<g:evaluate>` tag. This tag allows us to write
    JavaScript inside the tag and set a variable value at the end, if required.
  prefs: []
  type: TYPE_NORMAL
- en: The `<g:evaluate>` tag is arguably the most used tag in Jelly, and is certainly
    one to get to grips with. Remember that we can use `g` or `g2` for our tag, depending
    on which phase we want this script to run in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at an example of the `<g:evaluate>` tag in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we are going to run the code in the second phase,
    so we are using `g2` in the tag we define. In the tag definition, we are also
    defining a variable name to use with `var="jvar_variable"`. We can name the variable
    different names, but we must always prefix the variable with `jvar` for it to
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are setting `jvar_variable` to the string value in the script. In an
    `evaluate` tag, we just need to make the last line of our expression the variable
    we want to set the evaluate variable to. In our example, we have used `setVariable`,
    so `jvar_variable` becomes the value of `setVariable`, which is our string.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some parameters we can use in a `<g:evaluate>` tag; let''s see these
    used in another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we can see two new parameters for the `<g:evaluate>` tag:
    `object` and `jelly`. The `object` tag dictates whether the `jvar` variable should
    be treated as an `object`. For our example, it would be the `GlideRecord` query,
    and so we would want this held as an object for later scripting.'
  prefs: []
  type: TYPE_NORMAL
- en: The other new parameter is `jelly`. This parameter, if set to `true`, allows
    us to use `jelly` variables in our script. For our example, we are using the `jvar_onHoldState`
    variable, which we are assuming has been set to `3` in a previous `<g:evaluate>
    tag`. We need the `jelly` parameter set to `true` so we can use this variable
    in our example script.
  prefs: []
  type: TYPE_NORMAL
- en: If
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `if` tag in Jelly script works in a similar way to a JavaScript `if` statement.
    It is used to run code if a set condition is met. As we can set `if` statements
    in JavaScript, whether you want to use the Jelly `if` rather than the JavaScript
    `if` is up to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `if` tag to check whether a `GlideRecord` object has any records
    inside it. Let''s have a look at how this is done using our example from the `evaluate`
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In our example, we are showing a message depending on whether there are currently
    on-hold incidents in the instance. The `if` statement has one parameter, which
    is `test`, which is the expression we need to evaluate to `true` to run the code
    inside the script in the tag.
  prefs: []
  type: TYPE_NORMAL
- en: This type of `if` statement is helpful to run conditions against `GlideRecord`
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: UI macros
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: UI macros are scripts that can be included in UI pages and in other areas throughout
    the ServiceNow platform. By separating them out from individual UI pages, it makes
    them easy to reuse across the platform, too.
  prefs: []
  type: TYPE_NORMAL
- en: UI macros are seen throughout the ServiceNow platform, running the service catalog
    cart and approval summarizers. Let's have a look at how they are created.
  prefs: []
  type: TYPE_NORMAL
- en: A UI macro is quite a simple form, with only a few fields. First, we need to
    give our UI macro a name. After that, we can add a description, and then complete
    the XML field. The XML field is an XML type field and works in a very similar
    way to the HTML field on a UI page. We fill in the XML field with the Jelly script
    we want to run when this UI macro is run.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are also given the same Jelly code that we are given when creating a new
    UI page in the XML field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To recap, these tags introduce Jelly scripting, and we can start writing our
    Jelly script inside the Jelly tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also invoke a macro from a UI page by using a `macro_invoke` tag. Let''s
    see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We use the `macro_invoke` tag and the macro parameter to invoke our UI macro.
    We just need to give the name of the UI macro in the macro parameter, as in the
    preceding example. This example will invoke the `kb_article_footer` UI macro.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to invoke a UI macro inside a UI macro, too. To do this, we
    use a `g` tag with the name of the macro inside the tag. We can see how this works
    in the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will invoke the `ui_button` inside this UI macro.
  prefs: []
  type: TYPE_NORMAL
- en: UI macros are a great way of writing chunks of Jelly code that can easily be
    reused throughout the ServiceNow platform. They are especially useful to add to
    your UI pages.
  prefs: []
  type: TYPE_NORMAL
- en: Script examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how to script in Jelly and how to create a UI
    page ourselves. Let's bring these two abilities together to make a working UI
    macro.
  prefs: []
  type: TYPE_NORMAL
- en: This is an example of a request I have been asked for before – an approval summary
    on the group approval record. Here, we need to create a UI macro and a formatter
    to add to the group approval form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with our group approval summarizer code, creating a brief summary
    of the task record we will be approving with our group approval:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, in this example, there is a fair amount of code, but a lot of
    this is HTML tags, so there is not much real content. In the example, we are creating
    a table containing some of the details of the record being approved so that the
    current group approver can see what they are approving.
  prefs: []
  type: TYPE_NORMAL
- en: The labels and spacing are HTML, and you can find this type of script in the
    UI macros ServiceNow provides for you. The interesting aspect of the code is in
    setting the task values. We use the dollar sign to declare the start of the variable,
    then curly or square brackets for phase one or phase two variables, respectively.
    Here, we are using square brackets to use the second phase, as our data will change
    and we do not want it to be cached.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have named this UI macro `group_approval_summarizer`; let''s take a look
    at what it looks like in ServiceNow in *Figure 8.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ad02886-33ca-43a4-a478-fb0df40bda04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.1: UI macro to show a summary of a record being approved'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our UI macro, we need to build a formatter to link to the
    UI macro that we can place on the group approval form. The Formatter needs a Name,
    a link to the UI macro, and to be on the group approval table. We can see an example
    of the formatter in *Figure 8.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4fb0593a-4e12-45ca-85db-0f3ddbb6e4cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.2: Formatter to display a UI macro'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the formatter, we can add the formatter to the group approval
    form layout to see our UI macro appear. The results of our UI macro on a group
    approval form can be seen in *Figure 8.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb9b0e56-e05d-4fb5-94cf-e5ef240a574a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3: Group approval form with added approval summary'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding figure, we can see the output from our UI macro. This example
    shows how you can make a UI macro add value to forms in ServiceNow, adding extra
    data you cannot add with the form layout or designer.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at scripting in Jelly. We explored the various tags
    of Jelly and how to use them together to create Jelly scripts. Using these Jelly
    techniques, we looked at how to create a UI macro containing Jelly script and
    saw a practical example of creating a UI macro to use in the ServiceNow platform.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at debugging in ServiceNow. We will look at
    the debugging tools ServiceNow provides for you in debugging scripts, fields,
    and the logs you have access to, to help fix errors.
  prefs: []
  type: TYPE_NORMAL
