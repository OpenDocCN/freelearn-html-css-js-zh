["```js\n<html>\n <head>\n     <script src=\"img/Chart.min.js\"></script>\n </head>\n <body>\n\n <canvas id=\"my-line-chart\" width=\"400\" height=\"200\"></canvas>\n\n <script>\n     const values =\n       [1.17,1.35,1.3,1.09,0.93,0.76,0.83,0.98,0.87,0.89,0.93,0.81];\n     const labels =\n\n[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\n\n     const dataObj = {\n         labels: labels,\n         datasets: [{ data: values }]\n     }\n     const chartObj = {\n         type: \"line\",\n         data: dataObj\n     };\n     new Chart(\"my-line-chart\", chartObj);\n </script>\n </body></html>\n```", "```js\nlet dataObj = {\n     labels: labels,\n     datasets: [{\n         data: values,\n         borderColor: 'hsla(300,100%,50%,1)'\n         backgroundColor: 'transparent';\n     }]\n }\n```", "```js\nChart.defaults.global.elements.line.fill = false;\n```", "```js\nlet chartObj = {\n     type: \"line\",\n     data: dataObj,\n     options:{\n         legend: {\n             display: false\n         }\n     }\n };\n new Chart(\"my-line-chart\", chartObj);\n```", "```js\nChart.defaults.global.elements.point.radius = 0;\n```", "```js\nChart.defaults.line.showLines = false;\n```", "```js\noptions: { showLines: true }\n```", "```js\n// NASA/GISS Temperature anomalies from 1880 to 2016\n let values2016 =\n   [1.17,1.35,1.3,1.09,0.93,0.76,0.83,0.98,0.87,0.89,0.93,0.81];\n let values1880 =\n   [-0.3,-0.21,-0.18,-0.27,-0.14,-0.29,-0.24,-0.08,-0.17,-0.16,-0.19,\n   -0.22];\n Chart.defaults.global.elements.line.fill = false;\n\n let labels =\n   [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\n   \"Dec\"];\n\n let dataObj = {\n     labels: labels,\n     datasets: [{\n         label: '2016',\n         data: values2016,\n         borderColor: 'hsla(300,100%,50%,1)',\n         borderDash: [5, 5],\n     },{\n         label: '1880',\n         data: values1880,\n         borderColor: 'hsla(200,100%,50%,1)'\n     }]\n }\n// the rest of the code is identical\n```", "```js\n[\n   {\"Date\": \"2016-12-27\", \"Mean\": 0.7895,  \"Source\": \"GCAG\"},\n   {\"Date\": \"2016-12-27\", \"Mean\": 0.81, \"Source\": \"GISTEMP\"},\n   {\"Date\": \"2016-11-27\", \"Mean\": 0.7504,  \"Source\": \"GCAG\"},\n   {\"Date\": \"2016-11-27\", \"Mean\": 0.93, \"Source\": \"GISTEMP\"},\n   {\"Date\": \"2016-10-27\", \"Mean\": 0.7292,  \"Source\": \"GCAG\"},\n   {\"Date\": \"2016-10-27\", \"Mean\": 0.89, \"Source\": \"GISTEMP\"},\n   /* ... many, many more lines ... */\n   {\"Date\": \"1880-02-27\", \"Mean\": -0.1229,  \"Source\": \"GCAG\"},\n   {\"Date\": \"1880-02-27\", \"Mean\": -0.21, \"Source\": \"GISTEMP\"},\n   {\"Date\": \"1880-01-27\", \"Mean\": 0.0009,   \"Source\": \"GCAG\"},\n   {\"Date\": \"1880-01-27\", \"Mean\": -0.3,  \"Source\": \"GISTEMP\"}\n ]\n```", "```js\nfetch('monthly_json.json') \n    .then(response => response.text())\n    .then((json) => {\n        const dataMap = new Map();\n    ...\n    });\n```", "```js\nconst obj = JSON.parse(json);\n```", "```js\nconst obj = JSON.parse(json).reverse()\n                            .filter(field => field.Source == 'GISTEMP');\nconsole.log(obj);\n```", "```js\n Array(1644)\n  [0 ... 99]\n 0:{Date: \"1880-01-27\", Mean: -0.3, Source: \"GISTEMP\"}\n 1:{Date: \"1880-02-27\", Mean: -0.21, Source: \"GISTEMP\"}\n 2:{Date: \"1880-03-27\", Mean: -0.18, Source: \"GISTEMP\"}\n 3:{Date: \"1880-04-27\", Mean: -0.27, Source: \"GISTEMP\"}\n …\n```", "```js\nconst dataMap = new Map();\nobj.forEach(d => {\n    const year = d.Date.split(\"-\")[0], month = d.Date.split(\"-\")[1];\n    if(dataMap.get(year)) {\n        dataMap.get(year).push({year: year, month: month, value: d.Mean});\n     } else {\n        dataMap.set(year, [{year: year, month: month, value: d.Mean}]);\n     }\n });\nconsole.log(dataMap); // check the structure of the generated map!\ndraw(dataMap);\n```", "```js\nfunction draw(dataMap) {\n    const datasets = [];\n    dataMap.forEach((entry, key) => {\n        const dataset = {\n            label: key, // the year\n            data: entry.map(n => n.value), \n            // array w temperature for each month\n            borderColor:     'hsla('+(key*2)+',50%,50%,0.9)', \n            //gradient\n            backgroundColor: 'hsla('+(key*2)+',50%,50%,0.9)',\n            borderWidth: 1,\n            pointRadius: 0 // hide the data points\n         };\n         datasets.push(dataset);\n     });\n ...\n```", "```js\n    const months = [\"Jan\",\"Feb\", ...,\"Oct\",\"Nov\",\"Dec\"];\n    Chart.defaults.global.elements.line.fill = false;\n    const chartObj = {\n        type: \"line\",\n        data: {\n            labels: months,\n            datasets: datasets\n        }\n    };\n    new Chart(\"my-line-chart\", chartObj);\n }\n```", "```js\nconst chartObj = {\n    type: \"line\",\n    data: {\n        labels: labels,\n        datasets: datasets\n    }\n    options:{\n        legend: {\n            labels: {\n                filter: function(item, chart) {\n                    return new Number(item.text) % 20 == 0;\n                }\n            }\n        }\n    }\n};\n```", "```js\n{ \"labels\":[1960,1961,…,2013,2014],\n   \"entries\":[\n      {\"country\":\"Others\",\n       \"data\":[983835.74025,1015886.52639,\n        …,10073290.7688,10300830.9827]},\n      {\"country\":\"Russian Federation\",\n       \"data\":[0,0,… ,1778561.006,1705345.684]},\n      {\"country\":\"India\",\n       \"data\":[120581.961,130402.187,… ,2034752.294,2238377.137]},\n      {\"country\":\"Japan\",\n       \"data\":[232781.16,283118.069,… ,1246515.976,1214048.358]},\n      {\"country\":\"China\",\n       \"data\":[780726.302,552066.85,… ,10258007.128,10291926.878]},\n      {\"country\":\"European Union\",\n       \"data\":[2359594.88616257,2445945.66448806,… \n        ,3421472.348,3241844.353]},\n      {\"country\":\"United States\",\n       \"data\":[2890696.1,2880505.507,2987207.873,… \n        ,5159160.972,5254279.285]}\n ]}\n```", "```js\nfetch('world_bank_co2_kt.json')\n         .then(response => response.text())\n         .then((json) => {\n     draw(JSON.parse(json));\n });\n```", "```js\n function draw(datasetsObj) {\n     const datasets = [];\n     datasetsObj.entries.forEach((entry, index) => {\n         const color = 'hsla('+(index+5)*50+',75%,75%,1)';\n         const dataset = {\n             label: entry.country,\n             data: entry.data,\n             borderColor: color,\n             backgroundColor: color,\n             borderWidth: 3,\n             fill: 'start', // fills the space below each line\n             pointRadius: 0\n         };\n         datasets.push(dataset);\n     });\n\n     const dataObj = {\n         labels: datasetsObj.labels, // copied from the JSON data\n         datasets: datasets\n     }\n\n     new Chart(\"my-area-chart\", {type: \"line\", data: dataObj });\n```", "```js\n const chartObj = {\n     type: \"line\",\n     data: dataObj,\n     options:{\n        scales: {\n            yAxes: [{\n               stacked: true\n            }]\n       },\n           legend: {\n            labels: {\n                boxWidth: 20,\n            }\n         }\n     }\n };\n```", "```js\n    let dataObj = {\n         labels: [\"Lisbon\", \"Paris\", \"Berlin\", \"Moscow\", \"Rome\", \n         \"Barcelona\"],\n         datasets: [\n             {\n                 label: \"Trip schedule #1\",\n                 data: [5,5,5,5,5,5],\n                 borderColor: 'red',\n                 backgroundColor: 'hsla(0,75%,75%,.25)'\n             },{\n                 label: \"Trip schedule #2\",\n                 data: [7,3,3,3,7,7],\n                 borderColor: 'blue',\n                 backgroundColor: 'hsla(240,75%,75%,.25)'\n             },{\n                 label: \"Trip schedule #3\",\n                 data: [4,7,7,7,3,2],\n                 borderColor: 'yellow',\n                 backgroundColor: 'hsla(60,75%,75%,.25)'\n             }\n         ]\n     }\n\n     const chartObj = {\n         type: \"radar\",\n         data: dataObj,\n         options: {\n             scale: {\n                 ticks: {\n                     beginAtZero: true,\n                     stepSize: 1 // show one gridline per day\n                 }\n             }\n         }\n     };\n     new Chart(\"my-radar-chart\", chartObj);\n```", "```js\n const months = [\"Jan\", \"Feb\", \"Mar\", ... , \"Sep\", \"Oct\", \"Nov\", \n \"Dec\"];\n\n function draw(datasetMap) {\n     const datasets = [];\n\n     datasetMap.forEach((entry, key) => {\n         const dataset = {\n             label: key,\n             data: entry.map(n => n.value),\n             borderColor:     'hsla('+(key*2)+',50%,50%,.9)',\n             backgroundColor: 'hsla('+(key*2)+',50%,50%,0.1)',\n             borderWidth: 1,\n             pointRadius: 0, // don't show the data points\n             lineTension: .4 // do draw lines as curves (not default in \n                              radar)\n         };\n         datasets.push(dataset);\n     });\n\n     const dataObj = {\n         labels: months,\n         datasets: datasets\n     }\n\n     const chartObj = {\n         type: \"radar\",\n         data: dataObj,\n         options: {\n             animation: {\n                 duration: 0\n             },\n             scale: {\n                 ticks: {\n                     max: 1.5\n                 }\n             },\n             legend: {\n                 labels: {\n                     boxWidth: 20,\n                     filter: function(item, chart) {\n                         return new Number(item.text) % 20 == 0\n                                       || item.text % 2016 == 0;\n                     }\n                 }\n             }\n         }\n     };\n\n     new Chart(\"my-radar-chart\", chartObj);\n }\n```", "```js\ndatasets: datasets.filter(d => d.label % 20 == 0 || d.label % 2016 == 0)\n```", "```js\n const dataset = [1.21, 1.71, 2.24, 3.24, 5.25, 10.29, 10.3]; // 2014 data\n const labels = [\"Japan\", \"Russian Federation\", \"India\", \"European Union\",\n                 \"United States\", \"China\", \"Others\"];\n const colors = [];\n\n dataset.forEach((entry, index) => { // generate some colors\n     colors.push('hsla('+((index+5)*50)+',75%,75%,1)');\n });\n```", "```js\nconst dataObj = {\n     labels: labels,\n     datasets: [{\n         data: dataset,\n         backgroundColor: colors,\n         borderWidth: 3\n     }]\n }\n```", "```js\nconst chartObj = {\n     type: \"pie\",\n     data: dataObj,\n     options:{\n         title: {\n             text: \"CO2 emissions (billions of tonnes)\",\n             display: true,\n             fontSize: 24\n         },\n         legend: {\n             labels: {\n                 boxWidth: 20,\n             },\n             position: 'right'\n         }\n\n     }\n };\n new Chart(\"my-pie-chart\", chartObj);\n```", "```js\n<script src=\"img/Chart.PieceLabel.js\"></script>\n```", "```js\noptions:{\n     pieceLabel: {\n        fontColor: '#000',\n        render: 'value',\n        textShadow: true,\n        position: 'border'\n    },\n …\n```", "```js\n<script   \nsrc=\"img/papaparse.min.js\">\n </script>\n```", "```js\nconst data = Papa.parse(csv, {header: true}).data;\n```", "```js\n const numberOfEntries = 6; // change this to include more countries\n\n fetch('../Data/WPP2017_UN.csv')\n     .then(response => response.text())\n     .then((csv) => {\n         const data = Papa.parse(csv, {header: true}).data;\n         const reduced = reduceData(data);\n         drawData(reduced);\n });\n```", "```js\n function reduceData(array) {\n     array.sort((a, b) =>  a[\"2015\"] - b[\"2015\"]);\n\n     const topEntries =\n         array.slice(array.length - numberOfEntries,array.length)\n              .map(d => ({country: d[\"Country or region\"], data: \n              +d[\"2015\"]}));\n\n     let others = array.slice(0, array.length - numberOfEntries);\n     const sumOthers = others.map(d => +d[\"2015\"]).reduce((a,b) => a+b, 0);\n     others = {country: \"Others\", data: sumOthers};\n     topEntries.push(others);\n     return topEntries;\n }\n```", "```js\n function drawData(data) {\n     const dataset = [], labels = [], colors = [];\n     let count = 0;\n     data.forEach(d => {\n         dataset.push(Math.round(d.data/1000));\n         labels.push(d.country);\n         colors.push('hsla('+(count++ * \n         300/numberOfEntries)+',100%,70%,.9)');\n     });\n\n     const dataObj = {\n         labels: labels,\n         datasets: [\n             {\n                 data: dataset,\n                 backgroundColor: colors,\n                 borderWidth: 5,\n                 hoverBackgroundColor: 'black',\n                 hoverBorderColor: 'white'\n             }\n         ]\n     }\n\n     const chartObj = {\n         type: \"doughnut\",\n         data: dataObj,\n         options: {\n             title: {\n                 display: true,\n                 position: 'left',\n                 fontSize: 24,\n                 text: \"World population (millions)\"\n             },\n             legend: {\n                 position: 'right'\n             },\n             pieceLabel: {\n                 fontColor: '#000',\n                 render: 'value',\n                 textShadow: true,\n                 position: 'border'\n             }\n         }\n     };\n     new Chart(\"my-pie-chart\", chartObj);\n }\n```", "```js\n const numberOfEntries = 2;\n // ...\n const chartObj = {\n     type: \"doughnut\",\n     data: dataObj,\n     options: {\n         circumference: Math.PI, // creates the half-pie\n         rotation: Math.PI / 2,  // rotates the half-pie 180 degrees\n         title: {...},\n         legend: {...},\n         pieceLabel: {...}\n     }\n };\nnew Chart(\"my-pie-chart\", chartObj);\n```", "```js\n const dataset2015 = [189,206,258,320,1309,1397,3703],\n       dataset1980 = [78,121,147,230,697,994,2191];\n\n const labels = [\"Pakistan\", \"Brazil\", \"Indonesia\", \"United States of \n                America\", \"India\", \"China\", \"Others\"];\n\n const colors2015 = [], colors1980 = [];\n\n let count = 0;\n labels.forEach(d => {\n     count++;\n     colors2015.push('hsla('+(count * 300 / labels.length)+', 100%,\n     50%, .9)');\n     colors1980.push('hsla('+(count * 300 / labels.length)+', 100%,\n     75%, .9)');\n });\n\n const dataObj = {\n     labels: labels,\n     datasets: [\n         { data: dataset2015, backgroundColor: colors2015 },\n         { data: dataset1980, backgroundColor: colors1980 }\n     ]\n }\n const canvas = document.getElementById(\"my-pie-chart\");\n const ctx = canvas.getContext(\"2d\");\n\n const chartObj = {\n     type: \"doughnut\",\n     data: dataObj,\n     options: {\n         animation: { // to draw on canvas use this callback\n             onComplete: function() {\n                 ctx.fillText(\"Population in 1980\",\n                               canvas.width/2 - 140,canvas.height/2);\n                 ctx.fillText(\"Population in 2015\",\n                               canvas.width/2 + 70,canvas.height - 10);\n             }\n         } // ...\n     }\n };\n\n const chart = new Chart(\"my-pie-chart\", chartObj);\n chart.update();\n```", "```js\n const labels = [\"Arctic\", \"Southern\", \"North Atlantic\", \"South \n                Atlantic\", \"Indian\", \"South Pacific\", \"North Pacific\"];\n const volume = [18750, 71800,146000,160000,264000,329000,341000]; \n // km3*10^3\n\n Chart.defaults.global.elements.rectangle.borderWidth = 1;\n\n const chartObj = {\n     labels: labels,\n     datasets: [\n         {\n             label: \"Volume\",\n             data: volume,\n             borderWidth: 2,\n             backgroundColor: [\n                 'hsla(260,100%,75%,.7',\n                 'hsla(245,100%,75%,.7',\n                 'hsla(230,100%,75%,.7',\n                 'hsla(210,100%,75%,.7',\n                 'hsla(195,100%,75%,.7',\n                 'hsla(180,100%,75%,.7',\n                 'hsla(165,100%,75%,.7']\n         }\n     ]\n }\n new Chart(\"my-polar-area-chart\", {\n     type: \"polarArea\",\n     data: chartObj,\n     options: {\n         title: {\n             display: true,\n             position: 'left',\n             fontSize: 24,\n             text: \"Volume of water (in 1000 cubic km)\"\n         },\n         legend: {\n             position: 'right'\n         }\n     }\n });\n```", "```js\n{\n     x: number,\n     y: number\n }\n```", "```js\nconst dataset = [];\n for(let i = 0; i <= 360; i+= 5) {\n     const point = {\n         x: i,\n         y: Math.sin(i * Math.PI / 180)\n     }\n     dataset.push(point);\n }\n\n const dataObj = {\n     datasets: [\n         {\n             data: dataset,\n             pointRadius: 2,\n             backgroundColor: 'red'\n         }\n     ]\n }\n\n const chartObj = {\n     type: \"scatter\",\n     data: dataObj,\n     options: {\n         legend: {\n             display: false\n         },\n\n     }\n };\n new Chart(\"my-scatter-chart\", chartObj);\n```", "```js\nconst dataset1 = [], dataset2 = [], dataset3 = [];\n for(let i = 0; i <= 360; i+= 5) {\n     const n = i * Math.PI / 180;\n     const point1 = { x: n - Math.PI, y: Math.sin(n) }\n     const point2 = { x: n - Math.PI, y: Math.cos(n) }\n     const point3 = { x: Math.cos(n) + Math.sin(n), y: Math.cos(n) -\n     Math.sin(n) }\n     dataset1.push(point1);\n     dataset2.push(point2);\n     dataset3.push(point3);\n }\n\n const dataObj = {\n     datasets: [\n         {   data: dataset1,\n             pointRadius: 2,\n             backgroundColor: 'red'\n         },{\n             data: dataset2,\n             pointRadius: 2,\n             backgroundColor: 'blue'\n         },{\n             data: dataset3,\n             pointRadius: 2,\n             backgroundColor: 'green'\n         }\n     ]\n }\n\n const chartObj = {\n     type: \"scatter\",\n     data: dataObj,\n     options: {\n         legend: { display: false },\n         scales: {\n             yAxes: [{\n                 ticks: {min: -2, max: 2}\n             }]\n         }\n     }\n };\n new Chart(\"my-scatter-chart\", chartObj);\n```", "```js\nconst canvas = document.getElementById(\"my-scatter-chart\");\n const files = ['../Data/monthly_json.json', '../Data/co2_mm_mlo.csv'];\n var promises = files.map(file => fetch(file).then(resp => resp.text()));\n Promise.all(promises).then(results => {\n     const temperatures = JSON.parse(results[0]);\n     const co2emissions = Papa.parse(results[1], {header: true}).data;\n     const data = combine(temperatures, co2emissions);\n     drawData(data);\n });\n```", "```js\nfunction combine(tempData, co2Data) {\n     const entries = [];\n     co2Data.filter(n => +n.year >= 1959).forEach(measure => {\n        const year = measure.year, month = measure.month;\n        let temperature = 0;\n        tempData.filter(n => n.Source=='GISTEMP' && +n.Date.split(\"-\")\n        [0] >= 1959)\n                .forEach(temp => {\n                     if(+temp.Date.split(\"-\")[0] == year\n                        && +temp.Date.split(\"-\")[1] == month) {\n                            temperature = temp.Mean;\n                        }\n                 });\n        entries.push({ co2: measure.average, temp: temperature });\n     });\n     return entries;\n }\n```", "```js\nfunction drawData(datasets) {\n     const entries = [];\n     datasets.forEach(entry => {\n         const obj = { x: entry.co2, y: entry.temp };\n         entries.push(obj);\n     });\n     const dataObj = {\n         datasets: [\n             {\n                 data: entries,\n                 pointRadius: 2,\n                 pointBackgroundColor: 'rgba(255,0,0,.5)'\n             }\n         ]\n     }\n     const chartObj = {\n         type: \"scatter\",\n         data: dataObj,\n         options: { legend: { display: false } }\n     };\n     new Chart(\"my-scatter-chart\", chartObj);\n }\n```", "```js\nco2Data.filter(n => +n.year >= 1959 && n.average > 0)\n```", "```js\nconst chartObj = {\n     type: \"scatter\",\n     data: dataObj,\n     options: {\n         legend: { display: false},\n         title: {\n             display: true,\n             text: 'CO2 emissions vs. Global temperatures',\n             fontSize: 24\n         },\n         scales: {\n             xAxes: [{\n                 scaleLabel: {\n                     labelString: 'CO2 emissions (ppm)',\n                     display: true\n                 }\n             }],\n             yAxes: [{\n                 scaleLabel: {\n                     labelString: 'Temperature anomaly (Celsius)',\n                     display: true\n                 }\n             }],\n         }\n     }\n };\n new Chart(\"my-scatter-chart\", chartObj);\n```", "```js\ngeonameid;asciiname;latitude;longitude;country_code;population;timezone14256;Azadshahr;34.79049;48.57011;IR;514102;Asia/Tehran\n18918;Protaras;35.0125;34.05833;CY;20230;Asia/Nicosia\n23814;Kahriz;34.3838;47.0553;IR;766706;Asia/Tehran\n24851;Nurabad;34.0734;47.9725;IR;73528;Asia/Tehran\n// + than 100 000 lines\n```", "```js\nfetch('../Data/cities15000.csv')\n    .then(response => response.text())\n    .then(csv => drawData(Papa.parse(csv, {header: true}).data));\n\n function drawData(datasets) {\n     const locations = [];\n     datasets.forEach(city => {\n         const obj = {\n             x: city.longitude,\n             y: city.latitude,\n             name: city.asciiname\n         }\n         locations.push(obj);\n     });\n\n     const dataObj = {\n         datasets: [\n             {\n                 label: \"Label\",\n                 data: locations,\n                 pointRadius: .25,\n                 pointBackgroundColor: 'red'\n             }\n         ]\n     }\n\n     const chartObj = {\n         type: \"scatter\",\n         data: dataObj,\n         options: {\n             animation: { duration: 0 },\n             title: { display: false },\n             responsive: false,\n             legend: { display: false },\n             scales: {\n                 xAxes: [ { ticks: { min: -180, max: 180 } } ],\n                 yAxes: [ { ticks: { min: -90,  max: 90  } } ]\n             },\n             tooltips: {\n                 callbacks: {\n                     title: (items,data) => locations[items[0].index].name\n                 }\n             }\n         }\n     };\n\n     new Chart(\"my-scatter-chart\", chartObj);\n }\n```", "```js\n{x: number, y: number, r: number}\n```", "```js\nconst dataObj = {\n     datasets: [\n         {\n             data: [{x:5, y:1, r:60},{x:3, y:1, r:30},{x:1, y:2, r:15},\n                    {x:3, y:5, r:90},{x:2, y:4, r:20}],\n             backgroundColor: function(context) {\n                 const point = context.dataset.data[context.dataIndex];\n                 return 'hsla('+(point.r * 4)+',100%,70%,.6)'\n             }\n         }\n     ]\n }\n\n const chartObj = { type: \"bubble\", data: dataObj,\n     options: {\n         scales: {\n             xAxes: [{ticks: {min: 0, max: 6}}],\n             yAxes: [{ticks: {min: 0, max: 7}}]\n         },\n     }\n };\n new Chart(\"my-bubble-chart\", chartObj);\n```", "```js\nfetch('../Data/cities15000.csv')\n         .then(response => response.text())\n         .then(csv => {\n             const data = Papa.parse(csv, {header: true}).data;\n             drawData(data.sort((a, b) =>  b.population - a.population));\n          });\n\n function scaleR(value) {\n     const r = Math.floor(value / 100000);\n     return r != 0 ? r/10 : .25;\n }\n```", "```js\nfunction drawData(datasets) {\n     const coordset = [];\n     datasets.forEach(city => {\n         const obj = {\n             x: city.longitude,\n             y: city.latitude,\n             r: scaleR(city.population)\n         };\n         coordset.push(obj);\n     });\n```", "```js\n     const dataObj = {\n         datasets: [\n             {\n                 label: \"Label\",\n                 data: coordset,\n                 backgroundColor: function(context) {\n                     const value =     \n                     context.dataset.data[context.dataIndex].r;\n                     if(value > 20) return 'hsla(0,100%,50%,.4)';\n                     if(value > 10) return 'hsla(30,100%,50%,.5)';\n                     if(value > 5) return 'hsla(60,100%,50%,.6)';\n                     if(value > 1) return 'hsla(120,100%,50%,.7)';\n                     else return 'hsla(0,0%,50%,1)';\n                 }\n             }\n         ]\n     }\n\n     new Chart(\"my-bubble-chart\", {type: 'bubble', data: dataObj, options: {...});\n }\n```"]