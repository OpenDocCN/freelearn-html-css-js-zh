["```js\nnpm install @inquirer/prompts@3.3.0 \n```", "```js\nimport { select } from \"@inquirer/prompts\";\nimport { ops } from \"./operations.mjs\";\n(async function run() {\n    let loop = true;\n    while (loop) {\n        const selection = await select({\n            message: \"Select an operation\",\n            choices: [...Object.keys(ops).map(k => {return { value: k }})]\n        });\n        await ops[selection]();\n    }\n})(); \n```", "```js\nexport const ops = {\n    \"Test\": () => {\n        console.log(\"Test operation selected\");\n    },\n    \"Exit\": () => process.exit()\n} \n```", "```js\n...\n\"scripts\": {\n    \"server\": \"tsc-watch --noClear --onsuccess \\\"node dist/server/server.js\\\"\",\n    \"client\": \"webpack serve\",\n    \"start\": \"npm-run-all --parallel server client\",\n    **\"cmdline\": \"node --watch ./src/cmdline/main.mjs\"**\n},\n... \n```", "```js\nimport { Express } from \"express\";\nexport const createApi = (app: Express) => {\n    // TODO - implement API\n} \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\nimport httpProxy from \"http-proxy\";\nimport helmet from \"helmet\";\nimport { engine } from \"express-handlebars\";\nimport { registerFormMiddleware, registerFormRoutes } from \"./forms\";\n**import { createApi } from \"./api\"****;**\nconst port = 5000;\nconst expressApp: Express = express();\nconst proxy = httpProxy.createProxyServer({\n    target: \"http://localhost:5100\", ws: true\n});\nexpressApp.set(\"views\", \"templates/server\");\nexpressApp.engine(\"handlebars\", engine());\nexpressApp.set(\"view engine\", \"handlebars\");\nexpressApp.use(helmet());\nexpressApp.use(express.json());\nregisterFormMiddleware(expressApp);\nregisterFormRoutes(expressApp);\n**createApi(expressApp);**\nexpressApp.use(\"^/$\", (req, resp) => resp.redirect(\"/form\"));\nexpressApp.use(express.static(\"static\"));\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\nexpressApp.use((req, resp) => proxy.web(req, resp));\nconst server = createServer(expressApp);\nserver.on('upgrade', (req, socket, head) => proxy.ws(req, socket, head));\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nnpm start \n```", "```js\nnpm run cmdline \n```", "```js\n? Select an operation (Use arrow keys)\n> Test\nExit \n```", "```js\n/api/results/1 \n```", "```js\n`GET` \n```", "```js\n`/api/results/1` \n```", "```js\n`GET` \n```", "```js\n`/api/results` \n```", "```js\n`GET` \n```", "```js\n`/api/results?name=Alice` \n```", "```js\n`POST` \n```", "```js\n`/api/results` \n```", "```js\n`DELETE` \n```", "```js\n`/api/results/1` \n```", "```js\nimport { Express } from \"express\";\n**import repository from \"../data\"****;**\nexport const createApi = (app: Express) => {\n   ** app.get(\"/api/results\", async (req, resp) => {**\n **if (req.query****.name) {**\n **const data = await repository.getResultsByName(**\n **req.query.name.toString(), 10);**\n **if (data.length** **> 0) {**\n **resp.json(data);**\n **} else {**\n **resp.writeHead(404);**\n **}**\n **}   else {**\n **resp.json(await repository.getAllResults(10****));**\n **}**\n **resp.end();**\n **});**\n} \n```", "```js\n**import { input } from \"@inquirer/prompts\";**\n**const baseUrl = \"http://localhost:5000\";**\nexport const ops = {\n    **\"Get All\": () => sendRequest(\"GET\", \"/api/results\"),**\n **\"Get Name\": async () => {**\n**const name = await input({ message: \"Name?\"});**\n **await sendRequest(\"GET\", `/api/results?name=${name}`);**\n **},**\n    \"Exit\": () => process.exit()\n}\n**const sendRequest = async (method, url, body, contentType) => {**\n **const response = await fetch****(baseUrl + url, {**\n **method, headers: { \"Content-Type\": contentType ?? \"application/json\"},**\n **body: JSON.stringify(body)**\n **});**\n **if (response.status == 200) {**\n **const** **data = await response.json();**\n **(Array.isArray(data) ? data : [data])**\n **.forEach(elem => console.log(JSON.****stringify(elem)));**\n **} else {**\n **console.log(response.status + \" \" + response.statusText);**\n **}**\n**}** \n```", "```js\n...\n{\"id\":3,\"name\":\"Alice\",\"age\":35,\"years\":10,\"nextage\":45}\n{\"id\":2,\"name\":\"Bob\",\"age\":35,\"years\":10,\"nextage\":45}\n{\"id\":1,\"name\":\"Alice\",\"age\":35,\"years\":5,\"nextage\":40}\n... \n```", "```js\n...\n{\"id\":3,\"name\":\"Alice\",\"age\":35,\"years\":10,\"nextage\":45}\n{\"id\":1,\"name\":\"Alice\",\"age\":35,\"years\":5,\"nextage\":40}\n... \n```", "```js\nexport interface Result {\n    id: number,\n    name: string,\n    age: number,\n    years: number,\n    nextage: number\n}\nexport interface Repository {\n    saveResult(r: Result):  Promise<number>;\n    getAllResults(limit: number) : Promise<Result[]>;\n    getResultsByName(name: string, limit: number): Promise<Result[]>;\n}\n**export interface ApiRepository extends** **Repository {**\n **getResultById(id: number): Promise<Result | undefined>;**\n **delete(id: number) :** **Promise<boolean>;**\n**}** \n```", "```js\nimport { Sequelize } from \"sequelize\";\n**import { ApiRepository, Result } from \"./repository\";**\nimport { addSeedData, defineRelationships,\n    fromOrmModel, initializeModels } from \"./orm_helpers\";\nimport { Calculation, Person, ResultModel } from \"./orm_models\";\n**export class OrmRepository implements ApiRepository {**\n    sequelize: Sequelize;\n    // ...constructor and methods omitted for brevity...\n    **async getResultById(id: number): Promise<Result | undefined> {**\n **const model =** **await ResultModel.findByPk(id, {**\n **include: [Person, Calculation ]**\n **});**\n **return model ? fromOrmModel(model): undefined;**\n **}**\n**async delete(id: number): Promise<boolean> {**\n **const count = await ResultModel.destroy({ where: { id }});**\n **return count ==** **1;**\n **}**\n} \n```", "```js\n**import { ApiRepository } from \"./repository\";**\nimport { OrmRepository } from \"./orm_repository\";\n**const repository: ApiRepository = new OrmRepository();**\nexport default repository; \n```", "```js\nimport { Express } from \"express\";\nimport repository from \"../data\";\nexport const createApi = (app: Express) => {\n    app.get(\"/api/results\", async (req, resp) => {\n        if (req.query.name) {\n            const data = await repository.getResultsByName(\n                req.query.name.toString(), 10);\n            if (data.length > 0) {\n                resp.json(data);\n            } else {\n                resp.writeHead(404);\n            }\n        }   else {\n                resp.json(await repository.getAllResults(10));\n        }\n        resp.end();\n    });\n   **app.all(\"/api/results/:id\",** **async (req, resp) => {**\n **const id = Number.parseInt(req.params.id);**\n **if (req.method == \"GET\") {**\n **const result =** **await repository.getResultById(id);**\n **if (result == undefined) {**\n **resp.writeHead(404);**\n **} else {**\n **resp.json(result);**\n **}**\n **} else if (req.****method == \"DELETE\") {**\n **let deleted = await repository.delete(id);**\n **resp.json({ deleted });**\n **}**\n **resp.end();**\n **})**\n **app.post(\"/api/results\", async (req, resp) => {**\n**const { name, age, years} = req.body;**\n **const nextage = Number.parseInt(age) + Number.parseInt(years);**\n **const id = await repository.saveResult({** **id: 0, name, age,**\n **years, nextage});**\n **resp.json(await repository.getResultById(id));**\n **resp.end();**\n **});**\n} \n```", "```js\n...\nexport const ops = {\n    \"Get All\": () => sendRequest(\"GET\", \"/api/results\"),\n    \"Get Name\": async () => {\n        const name = await input({ message: \"Name?\"});\n        await sendRequest(\"GET\", `/api/results?name=${name}`);\n    },\n    **\"Get ID\": async () => {**\n **const id = await input({** **message: \"ID?\"});**\n **await sendRequest(\"GET\", `/api/results/${id}`);**\n **},**\n **\"Store\":** **async () => {**\n **const values = {**\n **name: await input({message: \"Name?\"}),**\n **age: await input({****message: \"Age?\"}),**\n **years: await input({message: \"Years?\"})**\n **};**\n **await sendRequest(\"POST\", \"****/api/results\", values);**\n **},**\n **\"Delete\": async () => {**\n **const id = await input({ message: \"ID?\"});**\n**await sendRequest(\"DELETE\", `/api/results/${id}`);**\n **},**\n    \"Exit\": () => process.exit()\n}\n... \n```", "```js\n...\n{\"id\":3,\"name\":\"Alice\",\"age\":35,\"years\":10,\"nextage\":45}\n... \n```", "```js\n...\n{\"id\":4,\"name\":\"Drew\",\"age\":50,\"years\":5,\"nextage\":55}\n... \n```", "```js\n...\n**{\"id\":4,\"name\":\"Drew\",\"age\":50,\"years\":5,\"nextage\":55}**\n{\"id\":3,\"name\":\"Alice\",\"age\":35,\"years\":10,\"nextage\":45}\n{\"id\":2,\"name\":\"Bob\",\"age\":35,\"years\":10,\"nextage\":45}\n{\"id\":1,\"name\":\"Alice\",\"age\":35,\"years\":5,\"nextage\":40}\n... \n```", "```js\n...\n{\"deleted\":true}\n... \n```", "```js\n...\n**app.all****(\"/api/results/:id\", async (req, resp) => {**\n    const id = Number.parseInt(req.params.id);\n    if (**req.method** == \"GET\") {\n        const result = await repository.getResultById(id);\n        if (result == undefined) {\n            resp.writeHead(404);\n        } else {\n            resp.json(result);\n        }\n    } **else if (req.method** == \"DELETE\") {\n        let deleted = await repository.delete(id);\n        resp.json({ deleted });\n    }\n    resp.end();\n})\n... \n```", "```js\nimport { Express, Response } from \"express\";\nexport interface WebService<T> {\n    getOne(id: any) : Promise<T | undefined>;\n    getMany(query: any) : Promise<T[]>;\n    store(data: any) : Promise<T | undefined>;\n    delete(id: any): Promise<boolean>;\n}\nexport function createAdapter<T>(app: Express, ws: WebService<T>, baseUrl: string) {\n    app.get(baseUrl, async (req, resp) => {\n        try {\n            resp.json(await ws.getMany(req.query));\n            resp.end();\n        } catch (err) { writeErrorResponse(err, resp) }\n    });\n    app.get(`${baseUrl}/:id`, async (req, resp) => {\n        try {\n            const data = await ws.getOne((req.params.id));\n            if (data == undefined) {\n                    resp.writeHead(404);\n            } else {\n                    resp.json(data);\n            }\n            resp.end();\n        } catch (err) { writeErrorResponse(err, resp) }\n    });\n    app.post(baseUrl, async (req, resp) => {\n        try {\n            const data = await ws.store(req.body);\n            resp.json(data);\n            resp.end();\n        } catch (err) { writeErrorResponse(err, resp) }\n    });\n    app.delete(`${baseUrl}/:id`, async (req, resp) => {\n        try {\n            resp.json(await ws.delete(req.params.id));\n            resp.end();\n        } catch (err) { writeErrorResponse(err, resp) }\n    });\n    const writeErrorResponse = (err: any, resp: Response) => {\n        console.error(err);\n        resp.writeHead(500);\n        resp.end();\n    }\n} \n```", "```js\nimport { WebService } from \"./http_adapter\";\n**import { Result } from \"../data/repository\";**\n**import repository from \"../data\";**\n**export class ResultWebService** **implements WebService<Result> {**\n **getOne(id: any): Promise<Result | undefined> {**\n **return repository.getResultById(Number****.parseInt(id));**\n **}**\n **getMany(query: any): Promise<Result[]> {**\n **if (query.name) {**\n **return repository.getResultsByName(query.name****, 10);**\n **} else {**\n **return repository.getAllResults(10);**\n **}**\n **}**\n **async store(data: any): Promise<Result** **| undefined> {**\n **const { name, age, years} = data;**\n **const nextage = Number.parseInt(age) + Number.parseInt(years);**\n **const id = await repository.saveResult****({ id: 0, name, age,**\n **years, nextage});**\n **return await repository.getResultById(id);** \n **}**\n **delete(id: any): Promise<boolean> {**\n **return repository.delete****(Number.parseInt(id));**\n **}**\n**}** \n```", "```js\nimport { Express } from \"express\";\n**//import repository from \"../data\";**\nimport { createAdapter } from \"./http_adapter\";\nimport { ResultWebService } from \"./results_api\";\nexport const createApi = (app: Express) => {\n    **createAdapter(app, new ResultWebService(), \"/api/results\");**\n} \n```", "```js\n...\nexport interface ApiRepository extends Repository {\n    getResultById(id: number): Promise<Result | undefined>;\n    delete(id: number) : Promise<boolean>;\n    **update(r: Result) : Promise<Result** **| undefined>** \n}\n... \n```", "```js\nimport { Sequelize, or } from \"sequelize\";\nimport { ApiRepository, Result } from \"./repository\";\nimport { addSeedData, defineRelationships,\n    fromOrmModel, initializeModels } from \"./orm_helpers\";\nimport { Calculation, Person, ResultModel } from \"./orm_models\";\nexport class OrmRepository implements ApiRepository {\n    sequelize: Sequelize;\n    // ...constructor and methods omitted for brevity...\n  **async** **update(r: Result) : Promise<Result | undefined > {**\n **const mod = await this.sequelize.****transaction(async (transaction) => {**\n **const stored = await ResultModel.findByPk(r.id);**\n **if (stored !== null) {**\n **const [person] =** **await Person.findOrCreate({**\n **where: { name : r.name}, transaction**\n **});** \n **const [calculation] = await Calculation.findOrCreate({**\n **where: {**\n**age: r.age, years: r.years, nextage: r.nextage**\n **}, transaction**\n **});**\n **stored.personId = person.id;**\n **stored.calculationId = calculation.id;**\n**return await stored.save({transaction});**\n **}**\n **});**\n **return mod ? this.getResultById(mod.id) : undefined;**\n **}**\n} \n```", "```js\n...\nconst stored = await ResultModel.findByPk(r.id);\n... \n```", "```js\n...\nstored.personId = person.id;\nstored.calculationId = calculation.id;\nreturn await stored.save({transaction});\n... \n```", "```js\nimport { Express, Response } from \"express\";\nexport interface WebService<T> {\n    getOne(id: any) : Promise<T | undefined>;\n    getMany(query: any) : Promise<T[]>;\n    store(data: any) : Promise<T | undefined>;\n    delete(id: any): Promise<boolean>;\n  **  replace(id: any, data: any): Promise<T | undefined>;**\n}\nexport function createAdapter<T>(app: Express, ws: WebService<T>, baseUrl: string) {\n    // ...routes omitted for brevity...\n **   app.put(`${baseUrl}/:id`, async** **(req, resp) => {**\n **try {**\n **resp.json(await ws.replace(req.params.id, req.body));**\n **resp.end();**\n **} catch (err) { writeErrorResponse****(err, resp) }**\n **});**\n    const writeErrorResponse = (err: any, resp: Response) => {\n        console.error(err);\n        resp.writeHead(500);\n        resp.end();\n    }\n} \n```", "```js\nimport { WebService } from \"./http_adapter\";\nimport { Result } from \"../data/repository\";\nimport repository from \"../data\";\nexport class ResultWebService implements WebService<Result> {\n    // ...methods omitted for brevity...\n    **replace(id: any, data: any): Promise<Result | undefined> {**\n **const { name, age, years, nextage } = data;**\n**return repository.update({ id, name, age, years, nextage });**\n **}**\n} \n```", "```js\n...\nexport const ops = {\n    // ...properties/functions omitted for brevity...\n   ** \"Replace\": async () => {**\n **const id = await input({ message: \"ID?\"});**\n **const values = {**\n **name****: await input({message: \"Name?\"}),**\n **age: await input({message: \"Age?\"}),**\n **years****: await input({message: \"Years?\"}),**\n **nextage: await input({message: \"Next Age?\"})**\n **};**\n **await** **sendRequest(\"PUT\", `/api/results/${id}`, values);**\n **},**\n    \"Exit\": () => process.exit()\n}\n... \n```", "```js\n...\n? Select an operation Replace\n? ID? 1\n? Name? Joe\n? Age? 35\n? Years? 10\n? Next Age? 45\n{\"id\":1,\"name\":\"Joe\",\"age\":35,\"years\":10,\"nextage\":45}\n? Select an operation Get All\n{\"id\":3,\"name\":\"Alice\",\"age\":35,\"years\":10,\"nextage\":45}\n{\"id\":2,\"name\":\"Bob\",\"age\":35,\"years\":10,\"nextage\":45}\n**{\"id\":1,\"name\":\"Joe\",\"age\":35,\"years\":10,\"nextage\":45}**\n... \n```", "```js\nimport { Express, Response } from \"express\";\nexport interface WebService<T> {\n    getOne(id: any) : Promise<T | undefined>;\n    getMany(query: any) : Promise<T[]>;\n    store(data: any) : Promise<T | undefined>;\n    delete(id: any): Promise<boolean>;\n    replace(id: any, data: any): Promise<T | undefined>;\n    **modify****(id: any, data: any): Promise<T | undefined>;** \n}\nexport function createAdapter<T>(app: Express, ws: WebService<T>, baseUrl: string) {\n    // ...routes omitted for brevity...\n    **app.patch(`${baseUrl}/:id`, async (req, resp) => {**\n **try {**\n **resp.json(await** **ws.modify(req.params.id, req.body));**\n **resp.end();**\n **} catch (err) { writeErrorResponse(err, resp) }**\n **});**\n    const writeErrorResponse = (err: any, resp: Response) => {\n        console.error(err);\n        resp.writeHead(500);\n        resp.end();\n    }\n} \n```", "```js\nimport { WebService } from \"./http_adapter\";\nimport { Result } from \"../data/repository\";\nimport repository from \"../data\";\nexport class ResultWebService implements WebService<Result> {\n    // ...methods omitted for brevity...\n    async modify(id: any, data: any): Promise<Result | undefined> {\n    **    const dbData = await this.getOne(id);**\n **if (dbData !== undefined) {**\n **Object.entries(dbData).****forEach(([prop, val]) => {**\n **(dbData as any)[prop] = data[prop] ?? val;**\n **});**\n **return await this.replace(id, dbData)**\n **}**\n **}**\n} \n```", "```js\n...\nexport const ops = {\n    // ...properties/functions omitted for brevity...\n    **\"Modify\": async () => {**\n **const id = await** **input({ message: \"ID?\"});**\n **const values = {**\n **name: await input({message: \"Name?\"****}),**\n **age: await input({message: \"Age?\"}),**\n **years: await input({message: \"Years?\"****}),**\n **nextage: await input({message: \"Next Age?\"})**\n **};**\n **await sendRequest(\"PATCH\", `/api/results/${id}`****,**\n **Object.fromEntries(Object.entries(values)**\n **.filter(([p, v]) => v !== \"\")));**\n **},**\n    \"Exit\": () => process.exit()\n}\n... \n```", "```js\n...\n? Select an operation Modify\n? ID? 2\n? Name? Clara\n? Age?\n? Years?\n? Next Age?\n{\"id\":2,\"name\":\"Clara\",\"age\":35,\"years\":10,\"nextage\":45}\n? Select an operation Get All\n{\"id\":3,\"name\":\"Alice\",\"age\":35,\"years\":10,\"nextage\":45}\n**{\"id\":2,\"name\":\"Clara\",\"age\":35,\"years\":10,\"nextage\":45}**\n{\"id\":1,\"name\":\"Alice\",\"age\":35,\"years\":5,\"nextage\":40}\n... \n```", "```js\n...\n[{ \"op\": \"replace\", \"path\": \"/name\", \"value\": \"Bob\" }]\n... \n```", "```js\n`add` \n```", "```js\n`remove` \n```", "```js\n`replace` \n```", "```js\n`copy` \n```", "```js\n`move` \n```", "```js\n`test` \n```", "```js\nnpm install fast-json-patch@3.1.1 \n```", "```js\nimport { WebService } from \"./http_adapter\";\nimport { Result } from \"../data/repository\";\nimport repository from \"../data\";\n**import * as jsonpatch from \"fast-json-patch\";**\nexport class ResultWebService implements WebService<Result> {\n    // ...methods omitted for brevity...\n    async modify(id: any, data: any): Promise<Result | undefined> {\n        const dbData = await this.getOne(id);\n        if (dbData !== undefined) {\n           ** return await this.replace(id,**\n **jsonpatch.****applyPatch(dbData, data).newDocument);**\n        }\n    }\n} \n```", "```js\n...\nexpressApp.use(helmet());\n**expressApp.use(express.json({**\n **type: [\"application/json\", \"application/json-patch+json\"]**\n**}));**\nregisterFormMiddleware(expressApp);\nregisterFormRoutes(expressApp);\n... \n```", "```js\n...\n\"Modify\": async () => {\n    const id = await input({ message: \"ID?\"});\n    const values = {\n        name: await input({message: \"Name?\"}),\n        age: await input({message: \"Age?\"}),\n        years: await input({message: \"Years?\"}),\n        nextage: await input({message: \"Next Age?\"})\n    };\n   ** await sendRequest(\"PATCH\", `/api/results/${id}`,**\n **Object.entries(values).filter((****[p, v]) => v !== \"\")**\n **.map(([p, v]) => ({ op: \"replace\", path: \"/\" + p, value****: v})),**\n **\"application/json-patch+json\");**\n},\n... \n```", "```js\n...\n? Select an operation Modify\n? ID? 2\n? Name? Clara\n? Age?\n? Years?\n? Next Age?\n{\"id\":2,\"name\":\"Clara\",\"age\":35,\"years\":10,\"nextage\":45}\n? Select an operation Get All\n{\"id\":3,\"name\":\"Alice\",\"age\":35,\"years\":10,\"nextage\":45}\n**{\"id\":2,\"name\":\"Clara\",\"age\":35,\"years\":10,\"nextage\":45}**\n{\"id\":1,\"name\":\"Alice\",\"age\":35,\"years\":5,\"nextage\":40}\n... \n```", "```js\nexport interface WebServiceValidation  {\n    keyValidator?: ValidationRule;\n    getMany?: ValidationRequirements;\n    store?: ValidationRequirements;\n    replace?: ValidationRequirements;\n    modify?: ValidationRequirements;\n}\nexport type ValidationRequirements = {\n    [key: string] : ValidationRule\n}\nexport type ValidationRule =\n    ((value: any) => boolean)[] |\n    {\n        required? : boolean,\n        validation: ((value: any) => boolean)[],\n        converter?: (value: any) => any,\n    }\nexport class ValidationError implements Error {\n    constructor(public name: string, public message: string) {}\n    stack?: string | undefined;\n    cause?: unknown;\n} \n```", "```js\nimport { ValidationError, ValidationRequirements, ValidationRule,\n    WebServiceValidation } from \"./validation_types\";\nexport type ValidationResult = [valid: boolean, value: any];\nexport function validate(data: any, reqs: ValidationRequirements): any {\n    let validatedData: any = {};\n    Object.entries(reqs).forEach(([prop, rule]) => {\n        const [valid, value] = applyRule(data[prop], rule);\n        if (valid) {\n            validatedData[prop] = value;\n        } else {\n            throw new ValidationError(prop, \"Validation Error\");\n        }\n    });\n    return validatedData;\n}\nfunction applyRule(val: any,\n        rule: ValidationRule): ValidationResult {\n    const required = Array.isArray(rule) ? true : rule.required;\n    const checks = Array.isArray(rule) ? rule : rule.validation;\n    const convert = Array.isArray(rule) ? (v: any) => v : rule.converter;\n    if (val === null || val == undefined || val === \"\") {\n        return [required ? false : true, val];\n    }\n    let valid = true;\n    checks.forEach(check => {\n        if (!check(val)) {\n            valid = false;\n        }\n    });\n    return [valid, convert ? convert(val) : val];\n}\nexport function validateIdProperty<T>(val: any,\n        v: WebServiceValidation) : any {\n    if (v.keyValidator) {\n        const [valid, value] = applyRule(val, v.keyValidator);\n        if (valid) {\n            return value;\n        }\n        throw new ValidationError(\"ID\", \"Validation Error\");               \n    }\n    return val;\n} \n```", "```js\nimport { WebService } from \"./http_adapter\";\nimport { validate, validateIdProperty } from \"./validation_functions\";\nimport { WebServiceValidation } from \"./validation_types\";\nexport class Validator<T> implements WebService<T> {\n    constructor(private ws: WebService<T>,\n        private validation: WebServiceValidation) {}\n    getOne(id: any): Promise<T | undefined> {\n        return this.ws.getOne(this.validateId(id));\n    }\n    getMany(query: any): Promise<T[]> {\n        if (this.validation.getMany) {\n            query = validate(query, this.validation.getMany);\n        }\n        return this.ws.getMany(query);\n    }\n    store(data: any): Promise<T | undefined> {\n        if (this.validation.store) {\n            data = validate(data, this.validation.store);\n        }\n        return this.ws.store(data);\n    }\n    delete(id: any): Promise<boolean> {\n        return this.ws.delete(this.validateId(id));\n    }\n    replace(id: any, data: any): Promise<T | undefined> {\n        if (this.validation.replace) {\n            data = validate(data, this.validation.replace);\n        }\n        return this.ws.replace(this.validateId(id), data);\n    }\n    modify(id: any, data: any): Promise<T | undefined> {\n        if (this.validation.modify) {\n            data = validate(data, this.validation.modify);\n        }\n        return this.ws.modify(this.validateId(id), data);\n    }\n    validateId(val: any) {\n        return validateIdProperty(val, this.validation);\n    }\n} \n```", "```js\nimport { Express, Response } from \"express\";\n**import { ValidationError } from \"./validation_types\";**\nexport interface WebService<T> {\n    getOne(id: any) : Promise<T | undefined>;\n    getMany(query: any) : Promise<T[]>;\n    store(data: any) : Promise<T | undefined>;\n    delete(id: any): Promise<boolean>;\n    replace(id: any, data: any): Promise<T | undefined>,\n    modify(id: any, data: any): Promise<T | undefined>   \n}\nexport function createAdapter<T>(app: Express, ws: WebService<T>, baseUrl: string) {\n    // ...routes omitted for brevity...\n    const writeErrorResponse = (err: any, resp: Response) => {\n        console.error(err);\n       **resp.writeHead(err** **instanceof ValidationError ? 400 : 500);**\n resp.end();\n    }\n} \n```", "```js\nimport { ValidationRequirements, ValidationRule,\n    WebServiceValidation } from \"./validation_types\";\nimport validator from \"validator\";\nconst intValidator : ValidationRule = {\n    validation: [val => validator.isInt(val)],\n    converter: (val) => Number.parseInt(val)\n}\nconst partialResultValidator: ValidationRequirements = {\n    name: [(val) => !validator.isEmpty(val)],\n    age: intValidator,\n    years: intValidator\n}\nexport const ResultWebServiceValidation: WebServiceValidation = {\n    keyValidator: intValidator,\n    store: partialResultValidator,\n    replace: {\n        ...partialResultValidator,\n        nextage: intValidator\n    }\n} \n```", "```js\nimport { Express } from \"express\";\nimport { createAdapter } from \"./http_adapter\";\nimport { ResultWebService } from \"./results_api\";\n**import { Validator } from \"./validation_adapter\";**\n**import { ResultWebServiceValidation } from \"****./results_api_validation\";**\nexport const createApi = (app: Express) => {\n    **createAdapter(app, new Validator(new** **ResultWebService(),**\n       ** ResultWebServiceValidation), \"/api/results\");**\n} \n```", "```js\n...\nasync store(data: any): Promise<Result | undefined> {\n    const { name, age, years} = data;\n   ** //const nextage = Number.parseInt(age) + Number.parseInt(years);**\n **const nextage = age + years;**     \n    const id = await repository.saveResult({ id: 0, name, age,\n        years, nextage});\n    return await repository.getResultById(id);       \n}\n... \n```", "```js\n...\n? Select an operation Get ID\n? ID? ABC\n400 Bad Request\n... \n```", "```js\nexport interface WebServiceValidation  {\n    keyValidator?: ValidationRule;\n    getMany?: ValidationRequirements;\n    store?: ValidationRequirements;\n    replace?: ValidationRequirements;\n    modify?: ValidationRequirements;\n}\nexport type ValidationRequirements = {\n    [key: string] : ValidationRule\n}\nexport type ValidationRule =\n    ((value: any) => boolean)[] |\n    {\n        required? : boolean,\n        validation: ((value: any) => boolean)[],\n        converter?: (value: any) => any,\n    }\nexport class ValidationError implements Error {\n    constructor(public name: string, public message: string) {}\n    stack?: string | undefined;\n    cause?: unknown;\n}\n**export type ModelValidation = {**\n **modelRule?: ValidationRule,**\n **propertyRules?: ValidationRequirements**\n**}** \n```", "```js\n**import { ModelValidation, ValidationError, ValidationRequirements****,**\n **ValidationRule, WebServiceValidation } from \"./validation_types\";**\nexport type ValidationResult = [valid: boolean, value: any];\n// ...functions omitted for brevity...\n**export function validateModel(model: any, rules: ModelValidation) : any {**\n **if (rules.propertyRules) {**\n **model = validate(model, rules.propertyRules);**\n **}**\n **if (rules.modelRule) {**\n**const [valid, data] = applyRule(model, rules.modelRule);**\n **if (valid) {**\n **return data;**\n **}**\n **throw new ValidationError(\"Model\", \"Validation Error\");** \n **}**\n**}** \n```", "```js\n**import { ModelValidation, ValidationRequirements, ValidationRule,**\n **WebServiceValidation } from \"****./validation_types\";**\nimport validator from \"validator\";\nconst intValidator : ValidationRule = {\n    **validation: [val => validator.isInt(val.****toString())],**\n    converter: (val) => Number.parseInt(val)\n}\nconst partialResultValidator: ValidationRequirements = {\n    name: [(val) => !validator.isEmpty(val)],\n    age: intValidator,\n    years: intValidator\n}\nexport const ResultWebServiceValidation: WebServiceValidation = {\n    keyValidator: intValidator,\n    store: partialResultValidator,\n    replace: {\n        ...partialResultValidator,\n        nextage: intValidator\n    }\n}\n**export const ResultModelValidation : ModelValidation = {**\n **propertyRules: { ...partialResultValidator, nextage: intValidator },**\n **modelRule****: [(m: any) => m.nextage === m.age + m.years]**\n**}** \n```", "```js\nimport { WebService } from \"./http_adapter\";\nimport { Result } from \"../data/repository\";\nimport repository from \"../data\";\nimport * as jsonpatch from \"fast-json-patch\";\n**import { validateModel } from \"./validation_functions\";**\n**import { ResultModelValidation } from \"./results_api_validation\"****;**\nexport class ResultWebService implements WebService<Result> {\n    getOne(id: any): Promise<Result | undefined> {\n        **return repository.getResultById(id);**\n    }\n    getMany(query: any): Promise<Result[]> {\n        if (query.name) {\n            return repository.getResultsByName(query.name, 10);\n        } else {\n            return repository.getAllResults(10);\n        }\n    }\n    async store(data: any): Promise<Result | undefined> {\n        const { name, age, years} = data;\n        const nextage = age + years;\n        const id = await repository.saveResult({ id: 0, name, age,\n            years, nextage});\n        return await repository.getResultById(id);       \n    }\n    delete(id: any): Promise<boolean> {\n        return repository.delete(Number.parseInt(id));\n    }\n    replace(id: any, data: any): Promise<Result | undefined> {\n        const { name, age, years, nextage } = data;\n        **const validated = validateModel****({ name, age, years, nextage },**\n **ResultModelValidation)**\n **return repository.update({ id, ...validated });**\n    }\n    async modify(id: any, data: any): Promise<Result | undefined> {\n        const dbData = await this.getOne(id);\n        if (dbData !== undefined) {\n            return await this.replace(id,\n                jsonpatch.applyPatch(dbData, data).newDocument);\n        }\n    }\n} \n```", "```js\n...\n? Select an operation Replace\n? ID? 1\n? Name? Joe\n? Age? 20\n? Years? 10\n? Next Age? 25\n400 Bad Request\n... \n```", "```js\nnpm install @feathersjs/feathers@5.0.14\nnpm install @feathersjs/express@5.0.14 \n```", "```js\n{\n    \"extends\": \"@tsconfig/node20/tsconfig.json\",\n     \"compilerOptions\": {                      \n         \"rootDir\": \"src/server\",  \n         \"outDir\": \"dist/server/\",\n         **\"noImplicitAny\": false**\n     },\n     \"include\": [\"src/server/**/*\"]\n} \n```", "```js\nimport { Id, NullableId, Params } from \"@feathersjs/feathers\";\nimport { WebService } from \"./http_adapter\";\nexport class FeathersWrapper<T> {\n\n    constructor(private ws: WebService<T>) {}\n    get(id: Id) {\n        return this.ws.getOne(id);\n    }\n    find(params: Params) {\n        return this.ws.getMany(params.query);\n    }\n    create(data: any, params: Params) {\n        return this.ws.store(data);\n    }\n    remove(id: NullableId, params: Params) {\n        return this.ws.delete(id);\n    }  \n    update(id: NullableId, data: any, params: Params) {\n        return this.ws.replace(id, data);\n    }\n    patch(id: NullableId, data: any, params: Params) {\n        return this.ws.modify(id, data);\n    }\n} \n```", "```js\nimport { Express } from \"express\";\nimport { createAdapter } from \"./http_adapter\";\nimport { ResultWebService } from \"./results_api\";\nimport { Validator } from \"./validation_adapter\";\nimport { ResultWebServiceValidation } from \"./results_api_validation\";\n**import** **{ FeathersWrapper } from \"./feathers_adapter\";**\n**import { feathers } from \"@feathersjs/feathers\";**\n**import feathersExpress, { rest } from \"@feathersjs/express\";**\n**import** **{ ValidationError } from \"./validation_types\";**\nexport const createApi = (app: Express) => {\n    **// createAdapter(app, new Validator(new ResultWebService(),**\n **//     ResultWebServiceValidation), \"/api/results\");**\n **const feathersApp = feathersExpress(feathers(), app).configure(rest());**\n **const service = new Validator(****new ResultWebService(),**\n **ResultWebServiceValidation);**\n **feathersApp.use('/api/results', new FeathersWrapper(service));**\n **feathersApp.hooks({**\n**error: {**\n **all: [(ctx) => {** \n **if (ctx.error instanceof ValidationError) {**\n **ctx.http = { status:** **400};**\n **ctx.error = undefined;**\n **}**\n **}]**\n **}**\n **});**\n} \n```", "```js\n...\nconst feathersApp = feathersExpress(feathers(), app).configure(rest());\n... \n```", "```js\n...\nfeathersApp.hooks({\n    error: {\n        all: [(ctx) => {\n            if (ctx.error instanceof ValidationError) {\n                ctx.http = { status: 400};\n                ctx.error = undefined;\n            }\n        }]\n    }\n});\n... \n```"]