- en: Publishing Your Visualization with Github Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once done with the hard work of creating your visualization, you should show
    it to the world, and the internet seems the perfect place for that.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to publish your visualization online. There
    are several ways to do so, stretching from simple command line one-liners using
    your machine as a server, to full-fledged hosting services that require you to
    build and deploy a server yourself. We will focus on a simple, fast and convenient
    way—**GitHub Pages**. Here’s what we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Get an understanding of Git, GitHub, and GitHub Pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a GitHub repository with your files and folders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload your files to GitHub and edit them for publishing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish your visualization on GitHub Pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are all easy steps, no matter whether you are a seasoned Git and GitHub
    user or if you have just started out. Let’s dive into it.
  prefs: []
  type: TYPE_NORMAL
- en: What we will publish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, you need something to publish. Let’s assume that after mapping so many
    earthly things, you were reaching for outer space—mapping our solar system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9d10ab8-3739-40a8-a02e-3de166cd7333.png)'
  prefs: []
  type: TYPE_IMG
- en: Planets in pink
  prefs: []
  type: TYPE_NORMAL
- en: This visual shows all planets of our solar system in a row, ordered from left
    to right by their distance to the sun and showing their scaled sizes in relation
    to each other. It also shows the sun (not a planet, but a star) and Pluto (officially,
    a dwarf planet).
  prefs: []
  type: TYPE_NORMAL
- en: So, at this stage, you have a visualization in an HTML file or in a set of files
    stitched together in an HTML or JavaScript file; that's all you need. Your published
    work is just a few clicks away, thanks to how simple GitHub Pages makes the process.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to take a peek at the GitHub account we will set up, including the
    code at [https://github.com/GoodToBeHere/pink-planets](https://github.com/GoodToBeHere/pink-planets)
    as well as the published visual at [https://goodtobehere.github.io/pink-planets/](https://goodtobehere.github.io/pink-planets/)
    or at [planetsin.pink/](http://planetsin.pink/).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the type of content you can publish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we jump into it, let's briefly consider what type of content GitHub Pages
    can host. In short, GitHub Pages will let you serve any **static web page** or
    pages with **dynamic client-side scripting**. If you want to host projects with
    dynamic server-side scripting, you might want to opt for a different setup, for
    example, **Heroku**.
  prefs: []
  type: TYPE_NORMAL
- en: In simple terms, static or flat web pages consist of a set of files—or at least
    a single HTML file that serves the same content to every user. If you want to
    change the content, you need to change the source code.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic web pages consist of a set of files that await external requests or
    inputs to then build, change, and serve the content on the fly. They might show
    different contents for different users, or for different times of the day or operating
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of dynamic web pages:'
  prefs: []
  type: TYPE_NORMAL
- en: Web pages with **client-side scripting** usually use JavaScript and its derivatives
    to translate user input to a changed DOM structure. It does so *client-side*,
    which means that it happens entirely within the bounds of the browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web pages with **server-side scripting** require input parameters passed all
    the way to the application’s server. Server-side languages such as PHP, Python,
    Node.js, or the like assemble the page content in a situation-bespoke way, often
    with information retrieved from databases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In short, you can host your project on GitHub Pages if it’s not dependent on
    server-side scripting. You can facilitate user input as long as it happens within
    the bounds of the client. You can join and update all data that comes from a flat
    file stored as such on your GitHub page. This can be a `.csv` or otherwise delimited
    data file, but you can’t connect to, for example, a relational SQL database (which
    relies on structured interrelationships). You can, of course, calculate and recalculate
    data, as long as it happens client-side.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to be aware of this limitation in order to choose the right
    hosting technology to publish your visualization. However, many D3 projects in
    the wild can be hosted as static web pages or dynamic pages with exclusive client-side
    scripting.
  prefs: []
  type: TYPE_NORMAL
- en: Hosting your code on GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll set you up for the publishing of your visual. We’ll explain
    a few key terms that will help understand GitHub and its purpose; we create an
    account, upload our content, and prepare it for publishing. This will be a gentle
    introduction to GitHub. If you already have an account and know about repositories,
    committing, pulling, pushing, merging, and branches feel free to jump on to the
    *Publishing your project on GitHub Pages* section.
  prefs: []
  type: TYPE_NORMAL
- en: Making sense of some key terms and concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s look at some terminology first. If you are a seasoned Git or GitHub user,
    feel free to skip this introduction.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very high-level introduction to Git and GitHub, and by no means complete.
    If you want to learn more about Git, I recommend reading the excellent documentation
    at [https://git-scm.com/](https://git-scm.com/). If you want to know more about
    GitHub, [https://guides.github.com/activities/hello-world/](https://guides.github.com/activities/hello-world/)
    is a great place to start.
  prefs: []
  type: TYPE_NORMAL
- en: Git is a **distributed version control system**. Let’s break that down. **Version
    control** of a file (usually a text file such as a `.html` or `.js` file) just
    means keeping track of all the changes made to the file. Before you can use it,
    you need to download, install, and initialize it in the folder you would like
    to track files in. Git has three core concepts that make your coding life easier.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking historic changes of your files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once initialized in a folder, Git allows you to save or **commit** a file to
    that folder after you changed it. Without Git, you might stoop to making explicit
    copies of a file you’re working on and misusing its name to represent the version
    such as `myFile-v01.html` and `myFile-v02.html`. Instead, Git will assign a commit
    ID to each commit. Going back through all your commits is easy; just open or check
    out the version you would like to see. Usually, you don’t just version control
    a single file but many files living in different project folders. The root folder
    of all the key files you want to version control, the one you initialized Git
    in, is called the Git **repository**.
  prefs: []
  type: TYPE_NORMAL
- en: Collaborating on a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The big advantage of Git, as compared to its predecessors, is that it is distributed.
    It allows many people to access the same project files and each person with granted
    access sees the full history of versions for each file. It is made for collaboration.
    To share a repository, it needs to be accessible by some sort of network, for
    example, the internet. This is where GitHub comes into play.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that you start a project with the bold goal of visualizing our solar
    system, you can start coding on your own. You create your own local repository
    and add and commit the files you want to track in the repository. A few days and
    many commits later, you realize that this is much too large a task for you to
    pull off alone. You invite friends to help you. In order to work on the code base
    together, you upload all your files to GitHub and tie it to your local repository
    via Git. Git now knows that there is a local repository of your project and a
    remote repository mirroring the local repository.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have made changes to a file locally and committed them, you can overwrite
    the same file on the remote GitHub repository by **push**ing this file up. Your
    friends can **pull** the changes you made down to their local machines and see
    the exact same files you see, including the file with the changes you just made
    and all changes made previously.
  prefs: []
  type: TYPE_NORMAL
- en: Working on project branches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also maintain parallel **branches** of your project. Each branch is
    a copy of your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine that you have a production version of your project that lives on a
    website visited by millions of people each day. This production version will be
    your **master branch**. Now you want to add a new feature; for example, a button
    that changes the planets’ color from pink to purple. You don’t want to develop
    this feature in the production version. This can be dangerous as things might
    break and your millions of visitors might turn away in disgust. So, you create
    a copy of your project—a branch you might call the *purple* bra*nch*. You can
    now merrily develop locally, commit different versions of it, and make and fix
    mistakes. You can push your changes up to GitHub to collaborate with your friends
    until it works, is tested, and makes you happy. Then, you copy all changes from
    the *purple* branch to the *master* branch, or better expressed in Git-terminology:
    you **merge** the purple branch into the master branch.'
  prefs: []
  type: TYPE_NORMAL
- en: As said, this can only be a quick tour past the bare bones of Git and GitHub.
    There’s surely more, but being comfortable with these key concepts and terms,
    you can now confidently set up yourself and your project on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a GitHub account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As setting up an online account is something you have probably done a lot of
    times in your life, we won’t spend much time on this. Here we go:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22b4086e-691e-4227-b433-b0080388f7c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up a GitHub account
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://github.com/](https://github.com/), click on **Sign in**, and
    follow the steps. We express our generally positive attitude to GitHub by choosing
    the Username `GoodToBeHere` and enter our email address and a Password. On the
    second screen, we opt for the free account and, after answering a few optional
    questions on the third screen, we complete our signup.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we want to set up a repository. Remember that a repository is the root
    folder of your project holding all your files and folders. There are two ways
    to create this repository on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: You can push up a local repository—a project folder on your local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can create a new repository online via GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will only look at the second way and do everything online.
  prefs: []
  type: TYPE_NORMAL
- en: It makes sense to connect your project to GitHub via the command line if you
    are working continuously with Git and GitHub. It only requires basic familiarity
    with the command line, and you can learn more about it at [https://help.github*.com*/articles/adding-an-existing-project-to-github-using-the-command-line/](https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/).
  prefs: []
  type: TYPE_NORMAL
- en: 'After setting up your account, you will be directed to your very own GitHub
    dashboard, as you can see in the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62f695cc-f087-452e-8467-6e2cefe538b3.png)'
  prefs: []
  type: TYPE_IMG
- en: Your GitHub dashboard
  prefs: []
  type: TYPE_NORMAL
- en: To create a new repository, click on New repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Considering the next screenshot, we will first name our repository. All your
    repositories will be owned by you, so they will all start with your username.
    Each repository needs to have a unique name within your list of repositories.
    For now, you are pretty flexible as this is your first and only repository so
    far. We’ll appropriately call our repository `pink-planets`, avoiding any spaces
    in the name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bef6f303-8c15-4c3b-b9ac-8e005326155c.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a repository
  prefs: []
  type: TYPE_NORMAL
- en: All our repositories will be Public, which means that everyone can see all your
    code! If you would like or need to keep your code private, you can opt for a paid
    personal plan.
  prefs: []
  type: TYPE_NORMAL
- en: It’s a good practice to initialize the repository with a `README` file, which
    allows a description of your project. Don’t worry about the `.gitignore` file,
    we won’t need it here. Lastly, we add a license, in our case, an Apache License
    2.0\. There are several licenses you can choose from, and it’s a good idea to
    make yourself acquainted with the options here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we hit the big green Create repository button, which does exactly that
    and brings us straight to the repository’s page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/280cad99-6f50-4c59-9dce-72fcc2f153bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Our repository’s page
  prefs: []
  type: TYPE_NORMAL
- en: You can see the name of your repository, a control bar with several tabs displaying
    the contents of the Code tab in focus, and a quick description. Next, there’s
    a bar showing you some general information such as how many commits (or file saves)
    have been done, how many branches (or project copies) this repository boasts,
    how many releases there are, and how many contributors have access to this repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the row of button controls, we have a folder view of all files and folders
    in our repository. Currently, there are only the two files we just created: the
    `LICENSE` and the `README.md` file; `.md` stands for **markdown**, which allows
    you to format text files with a simple syntax. You can learn the gist of it within
    a few minutes at, for example, [https://guides.github.com/features/mastering-markdown/](https://guides.github.com/features/mastering-markdown/).'
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom, you see the contents of the `README` file, giving visitors or
    collaborators a quick summary of what your project is about.
  prefs: []
  type: TYPE_NORMAL
- en: It’s still a little bland, so let’s change it and, at the same time, learn how
    to edit a file via GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Editing a file on GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to edit a file, you first need to click on its link in your repository.
    Next, you click on the Edit this file pencil in the upper-right corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/790d7b46-6bcb-40d4-8f9c-1a66923687f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Opening a file for edit
  prefs: []
  type: TYPE_NORMAL
- en: 'This will direct you to an editable view of the file. In here, you can change
    the name of the file above the editor window (we leave that as we’re happy with
    `README.md` as a name), and you can change the file’s content in the Edit file
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93bc1d88-95a6-4738-8fc8-5ca5aeaef2f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing the README.md file
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve only done a few changes here: we capitalized the title and added some
    text to describe what the project is about. We’re using markdown syntax to mark
    the headline as headline 1 with the `#` before the text. We also use markdown
    to print `sun` in bold with the prepending and trailing asterisks. The great thing
    about markdown files is that we can also use normal HTML tags for styling, as
    we do here with the word `dwarfed`*—*writing it in subscript.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done with our edits, we can change from the Edit file tab to the Preview
    changes tab and see what we’ve done. The preview marks our changes clearly with
    coloring and strike-through:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10a92c3e-5afb-498e-8888-4af87ec2c8be.png)'
  prefs: []
  type: TYPE_IMG
- en: Previewing our changes
  prefs: []
  type: TYPE_NORMAL
- en: We now want to save these changes, which, in Git's language, means **commit**.
    We can do this with the big green button at the bottom. However, before we do
    so, we have to add a commit message consisting of a mandatory short summary line
    and an optional extended description. We can add those to the text fields under
    Commit changes. Think of the commit summary line as an email title and the extended
    description as the email body.
  prefs: []
  type: TYPE_NORMAL
- en: A good commit summary line is short (less than 70 characters) and completes
    the sentence *This commit will…*, summarizing concisely what the changes include.
    GitHub is so kind as to offer us a predefined description depending on the changes
    we made. In this case, it offers us Update README.md, which we’re perfectly happy
    with, so we won’t change it. We’ll leave the optional extended description field
    blank, and click on Commit changes.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading files to the repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s now upload our project files and folders. Back on our repository page,
    we find the Upload files button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d31e71c-d58a-4b06-bcbf-fb7bfc5e7a38.png)'
  prefs: []
  type: TYPE_IMG
- en: Uploading files
  prefs: []
  type: TYPE_NORMAL
- en: 'We get to an upload field and drag all our project files over, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c95c1668-df42-4910-a82c-d3eed5ac0d7c.png)'
  prefs: []
  type: TYPE_IMG
- en: Dragging our files to upload
  prefs: []
  type: TYPE_NORMAL
- en: Our project consists of four files in three folders. We have a `planets.html`
    file in the root directory, three folders called `/css`, `/data`, and `/js` containing
    the `planets.css`, `planets.csv` and `planets.js` files. We just grab them from
    our folder and drag them over.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d99a0ba6-ec44-42f0-bf41-4b0f3ec22f26.png)'
  prefs: []
  type: TYPE_IMG
- en: Committing our project files and folders
  prefs: []
  type: TYPE_NORMAL
- en: Once uploaded, we need to commit our changes. We add a short commit message
    summary and click on Commit changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll be redirected to the repository page and can see all our uploaded files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7580a636-0193-4ccb-973b-ae2348e6830f.png)'
  prefs: []
  type: TYPE_IMG
- en: The repository with all our project files
  prefs: []
  type: TYPE_NORMAL
- en: Publishing your project on GitHub Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Great, you have your project on GitHub. It doesn’t get any more complex. You’re
    just two small preparations and a few clicks away from having your project online!
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the files for publishing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can click on that publish button, we need to ensure that your files
    are interlinked in the right way, and that your main HTML file is called `index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping your paths absolute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let’s check all our file references. There are two links from within
    our HTML file, one to our `.css` file and one to our `.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03061ce8-853f-4112-ac9b-c8f59a6db320.png)'
  prefs: []
  type: TYPE_IMG
- en: Correct links within the HTML file
  prefs: []
  type: TYPE_NORMAL
- en: All paths on GitHub can be referenced as absolute paths pointing to the root
    directory. This saves you from working out the relative path from any file at
    any depth of your directory tree. However, it also means that you might have to
    change relative paths from your local directory to root-based absolute paths.
    Your HTML file `planets.html` (we will change this to `index.html` in the next
    step) lives in the root directory. Both the `css` and `js` folders are also saved
    in the root directory, so the two paths are absolute to root and will work locally
    as well as in GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, in our project, we’re also referencing the `data/planets.csv` file
    from the `js/planets.js` file. Locally, you may reference this as a relative path,
    first moving up a level with `../` as in `''../data/planets.csv''`. However, in
    GitHub, the following will work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48bf7bec-46ea-4d24-80bf-6b079eddb9e8.png)'
  prefs: []
  type: TYPE_IMG
- en: An absolute path used within a nested file
  prefs: []
  type: TYPE_NORMAL
- en: In short, you can always use absolute paths relative to root within your GitHub
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the main HTML filename to index.html
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Your main HTML file might already be called `index.html`. If it’s not, just
    go to the file and rename it to `index.html`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a09ed18f-716e-458d-a317-07a0e3f57008.png)'
  prefs: []
  type: TYPE_IMG
- en: Ensuring that our main HTML file is called **index.html**
  prefs: []
  type: TYPE_NORMAL
- en: Well done, that’s all the preparation required. Now, let’s publish!
  prefs: []
  type: TYPE_NORMAL
- en: Publishing your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After all that, erm, hard work, you deserve a simple process to publish. Well,
    you are exactly five clicks away from viewing your project online. Here they are:'
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Click on the Settings tab from your repository home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34bf895c-e6eb-4495-9a4f-ac61cae97a65.png)'
  prefs: []
  type: TYPE_IMG
- en: Your repository settings
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Navigate to the GitHub Pages area and expand the drop-down menu in the
    Source field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9592f97b-5faa-4ebd-83f9-882a304fb9a6.png)'
  prefs: []
  type: TYPE_IMG
- en: You are nearly there
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Choose the master branch to publish from (we didn’t create any other branches,
    so this is the one) and 4\. click on Save.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will see the following message offering you a link to your online
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91640700-0595-44ca-bf10-50065e17cdb6.png)'
  prefs: []
  type: TYPE_IMG
- en: Just one more click!
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Click it! It might take a moment for the project to take its rightful place,
    so you might want to wait a painful minute, but eventually, it will be published:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c9c90b1-fc15-4753-bfb0-76b8d7ee4c3d.png)'
  prefs: []
  type: TYPE_IMG
- en: Your published work
  prefs: []
  type: TYPE_NORMAL
- en: Marvelous! Your work is published, and the rest is history! Congratulations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our URL is [https://goodtobehere.github.io/pink-planets/](https://goodtobehere.github.io/pink-planets/),
    or more generally, `https://<your username>.github.io/<the repository’s name>`.
    Although this is a logical construct, it might appear a little clunky. You can
    change it to a custom URL, like we did in our example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc37aa2a-fb49-4229-94a5-c3adc230955b.png)'
  prefs: []
  type: TYPE_IMG
- en: A custom domain
  prefs: []
  type: TYPE_NORMAL
- en: It will require you to use a domain you have secured with the DNS Provider of
    your choice, and change a few settings on the DNS Provider side as well as, in
    some cases, on GitHub, but it’s also a simple process that you might want to consider.
  prefs: []
  type: TYPE_NORMAL
- en: For excellent guidance regarding a custom domain, check out [https://help.github.com/articles/using-a-custom-domain-with-github-pages/](https://help.github.com/articles/using-a-custom-domain-with-github-pages/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to publish your visualization, or in fact any
    project, on GitHub Pages. You learned what type of pages you can and can’t publish
    on GitHub Pages. You glimpsed the powers of Git and the merits of GitHub before
    using it as a home for your code. After minor tweaking and prepping, you eventually
    published your project online. One way to look at this feat is that your project
    now claims the same online real estate as any other page on the web, which is
    something to build upon.
  prefs: []
  type: TYPE_NORMAL
