- en: Chapter 10. Bootstrapping E-Commerce
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having built our business home page, it's time to design our online store.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll build on the design from the previous chapter, adding a new page with
    the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: A grid of product thumbnails, titles, and descriptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A left-hand sidebar with options to filter our products by category, brand,
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breadcrumbs and pagination to ease navigation through our inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take a few moments to visit websites such as Zappos ([http://www.zappos.com](http://www.zappos.com))
    and Amazon ([http://www.amazon.com](http://www.amazon.com)). Search or browse
    for products and you will see product grids with features similar to what we will
    be creating in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'When complete, we want our products page to look like the following screenshot
    on medium, large and extra-large screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrapping E-Commerce](img/00193.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Layout for medium large and extra-large screens
  prefs: []
  type: TYPE_NORMAL
- en: 'On extra-small screens, we want our products page to adjust to the following
    single column layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrapping E-Commerce](img/00194.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Bootstrap gives us a big head start in accomplishing this design-after which
    we can use the power of Sass to refine things to completion.
  prefs: []
  type: TYPE_NORMAL
- en: Surveying the markup for our products page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll find this chapter's files prepared and ready in the folder `Lesson 10/start`.
    This project builds directly on the completed design from [Lesson 9](part0103_split_000.html#3279U1-d17423bd3b664255b5fd09e37e25e334
    "Chapter 9. Bootstrapping Business"), *Bootstrapping Business*. If anything in
    these files seems strange, you may want to review [Lesson 9](part0103_split_000.html#3279U1-d17423bd3b664255b5fd09e37e25e334
    "Chapter 9. Bootstrapping Business"), *Bootstrapping Business*, before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you've not already downloaded the exercise files, you can find them at [http://packtpub.com/support](http://packtpub.com/support).
  prefs: []
  type: TYPE_NORMAL
- en: Run the `bower install` and `npm install` commands in your console before going
    on with the next steps! For this chapter, there is one new file in the `html/pages`
    directory, `products.html`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Surveying the markup for our products page](img/00195.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Open `products.html` in your editor to view the markup. Let's survey its contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `main role="main"` element is where we''ll find what''s new. Here,
    you''ll find the following elements in the same order as they appear:'
  prefs: []
  type: TYPE_NORMAL
- en: Breadcrumb links marked up as an ordered list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A page title within a `h1` heading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A series of options for filtering products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nine products with thumbnails, titles, descriptions, and a button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An unordered list of pagination links just below the products and before
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can run the `bootstrap watch` command and point your browser to `http://localhost:8080/products.html`
    to view the file in your browser. You'll see that much remains to be done. Breadcrumbs
    do not yet look like breadcrumbs, the filtering options look like a long series
    of bulleted lists, the layout of our product items is uneven (and in places broken),
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t let these current imperfections worry you. These are the things that
    we''ll be addressing in the following steps. Here is what''s coming:'
  prefs: []
  type: TYPE_NORMAL
- en: We will apply Bootstrap's built-in styles to the breadcrumbs, page title, and
    pagination, and then customize them further
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will improve the layout of the nine product items, innovating the Bootstrap
    grid system to maintain a visually well-organized grid across breakpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will style the filtering options by enhancing the layout and then using the
    Font Awesome icons to provide checkboxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the `bootstrap watch` or `gulp` command in your console and point your browser
    to `http://localhost:8080/products.html`. Your browser will automatically reload
    now after saving the Sass or HTML templates.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a plan, let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Styling the breadcrumbs, page title, and pagination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following steps, we''ll apply Bootstrap styles to our breadcrumbs, page
    title, and pagination, and then customize them to fit our design:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `products.html` in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the ordered list just above the `h1` page title, add the `"breadcrumb"`
    class to the `ol` tag, and then add the `"active"` class to the last list item,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These classes correspond with Bootstrap breadcrumb styles, which you will find
    documented at [http://v4-alpha.getbootstrap.com/components/breadcrumb/](http://v4-alpha.getbootstrap.com/components/breadcrumb/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save and refresh your browser. You should see the result shown in the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Styling the breadcrumbs, page title, and pagination](img/00196.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: To customize the breadcrumbs for this design, let's remove the light gray background
    and the extra padding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's set the `padding` to `0` and remove the `background-color` entirely
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a new Sass partial in the `scss/_includes` directory called `_breadcrumb.scss`
    and add the following SCSS to it:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Do not forget to import the `new _breadcrumb.scss` partial file into your `app.scss`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now for the page title. The page title works by nesting the top-level page
    heading within a `div` tag of the `page-header` class. The SCSS code for the `page-header`
    class can be edited in a new `scss/includes/_page-header.scss` partial and may
    look as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that you'll have to declare the `$page-header-border-color;` variable
    in the `scss/includes/_varaibels.scss` file and of course also have to import
    the `scss/includes/_page-header.scss` partial in the main `app.scss` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s adjust our markup accordingly. For the title, a `h1` tag with Bootstrap''s
    `display-*` classes will be used. Let''s also add some text within a `small` tag
    having Bootstrap''s `text-muted` class to take advantage of the Bootstrap style
    for adding the explanatory notes to our headings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That will produce the following result:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Styling the breadcrumbs, page title, and pagination](img/00197.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'You can read more about Bootstrap''s typography and heading classes at the
    following URL: [v4-alpha.getbootstrap.com/content/typography/#headings](http://v4-alpha.getbootstrap.com/content/typography/#headings).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, the pagination. Our markup for this is found just a few lines above
    the closing `main` tag (`</main>`). Above that closing tag, you''ll see commented
    closing `div` tags for the `.container`, `.row`, and `.products-grid`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Bootstrap's documentation for pagination styles is found at [v4-alpha.getbootstrap.com/components/pagination](http://v4-alpha.getbootstrap.com/components/pagination).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To apply these styles here, we only need to add `class="pagination"` to the
    `ul` tag that you will find a few lines above the closing `.products-grid` tag:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The markup for the navigation links may contain different classes to set the
    state of a link. The active CSS class makes clear that the link has an active
    state, whilst the disabled CSS class enables you to give some links a disabled
    state.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The HTML code for a disabled item may look like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Neither disabled nor active items are clickable. You can add the add pagination-lg
    or pagination-sm CSS classes for larger or smaller pagination as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Also notice that Bootstrap takes accessibility into account. The navigation
    contains various `aria-*` attributes. **Accessible Rich Internet Applications**
    (**ARIA**) is a set of special accessibility attributes that can be added to any
    markup, but is especially suited to HTML. You can read more about ARIA in HTML
    at the website of the **World Wide Web Consortium** (**W3C**), see [https://www.w3.org/TR/html-aria/](https://www.w3.org/TR/html-aria/). Elements
    with Bootstrap's sr-only class provided additional information for only screen
    readers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the `Next` and `Prev` items, I''ve already provided the `span` tags for
    the Font Awesome icons, `fa-chevron-left` and `-right`. This gives us the result
    shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Styling the breadcrumbs, page title, and pagination](img/00198.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Let''s center align the pagination below our grid. First, wrap it in a parent
    `div` tag. We''ll place the `row` class on this to ensure it clears the content
    above it, and then we''ll add an appropriately named Bootstrap class `text-xs-center`.
    The `xs` in the naming means for the extra small grid and up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adjusting the products grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you start you should notice that the product images, provided by the
    holder.js image placeholders as described in [Lesson 9](part0103_split_000.html#3279U1-d17423bd3b664255b5fd09e37e25e334
    "Chapter 9. Bootstrapping Business"), *Bootstrapping Business*, are not responsive.
    Let''s make all images responsive by default by adding the following lines of
    SCSS code to our `app.scss` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The process of making images responsive by default. It influence all images.
    The logo in the also becomes responsive now and ignores the width we've set in
    the `scss/includes/_header.scss` file before. You can solve that by putting the
    SCSS code for the responsive image before the import of the `_header.scss` file
    in the `app.scss` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also inspect the footer logo after making the images responsive
    by default. You''ll find that the logo does not center anymore. The `img-fluid`
    class changes your images into block level element. Block level elements cannot
    be centered by the text-align: center; declaration. You can use the following
    CSS code in the file to center the logo again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now let's make our products grid look as it should. Before we start, we move
    the product grid to its own HTML template file. Create a new HTML partial called
    `html/includes/products-grid.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `html/includes/products.html` file, use the following code to include
    the product grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If you inspect the markup for our product items, you''ll see that each item
    has been given a class of `col-sm-4`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we want our grid to reduce to two products per row for the medium screens,
    while large and extra-large viewports will have three items per row. To accomplish
    this, we need to find and replace the classes in each of our product items so
    that they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: These classes will set each product item to half width within extra-small and
    small viewports, and then transition to one-third width for medium and large viewports.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding change also means that we have to replace and extend our responsive
    column resets as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After each third item the HTML code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `hidden-sm-down` class in the preceding code has been replaced with the
    class `hidden-sm-down`. And then add the following lines of HTML after each second
    item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the sixth item you will get the following HTML code now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The HTML code after the sixth item above should be replaced with this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Product items will now be laid out in two columns on a medium viewport:![Adjusting
    the products grid](img/00200.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, our grid will transform to a three-column layout in large and extra-large
    viewports:![Adjusting the products grid](img/00201.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's adjust the styles of our grid items to enhance their visual presentation.
    Having done that, we can fix this layout problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we'll be writing custom styles, create and have the `sccs/includes/_products-grid.scss`
    file open in your editor and import it into the main `app.scss` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s write styles to adjust image width, font size, padding, and margins,
    as shown in the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'These styles will accomplish the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add bottom padding to each product item.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reduce the `h2` heading font size to the size of our `$font-size-lg`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reduce the `p` font size to our `$font-size-sm` value.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reduce `h2` padding by adding `!important` to override any conflicting rules
    .that we've written to apply in the standard pages.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `p` font color to `$gray`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save these new styles, and run the `bootstrap watch` or `gulp` command. Though
    the layout will still be broken in places, you should see significant improvement
    in the styling of the product items, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting the products grid](img/00202.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It's a beautiful thing to behold.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget the Card module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding section you used Bootstrap Grid to build to the product grid.
    You can also use Bootstrap's new card module to build the product grid. Cards
    include header, footers, top and bottom image caps.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a new HTML partial called `html/includes/product-grid-cards.html`
    to rebuild the product grid using the Cards module. The HTML code for each card
    should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Bootstrap enables you to organize your cards in Groups or Decks. In this example,
    you will use decks. Decks contain a set of equal width and height cards that aren''t
    attached to one another. The HTML structure of a Deck of Cards will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You'll have to wrap each block of three cards into its own card-deck wrapper.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Card and Deck groups got a single breakpoint at between the extra small
    and small grid at 576 pixels. Below the breakpoint, the cards will stack. For
    the small grid between 576 and 768 pixels there are three cards in a row too.
    This cards are very small, so you''ll have to reduce the size of the button for
    the small grid by using the following SCSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we've reduced the size of the button in the small viewport.
    Now let's add some space between the card for the larger viewports.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `scss/includes/_product-grid.scss` you can add the following SCSS code to
    create some space between the cards:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'With the Card Deck, your product grid may look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Don''t forget the Card module](img/00203.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Cards with the CSS3 Flexbox layout module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bootstrap has option flexbox support built in. You can enable flexbox support
    by setting the `$enable-flex` Sass variable to true.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new HTML partial called `html/includes/product-grid-cards-flexbox.html`
    to test the flexbox layout. Don''t forget to replace the include statement in
    the `html/product.html` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `scss/includes/_variables.scss` file, add the following line of SCSS
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `html/includes/product-grid-cards-flexbox.html` file may contain HTML code
    similar to the HTML code used in the `html/includes/product-grid-cards-flexbox.html`
    file. The card-deck-wrapper wrapper is not required when the flexbox support is
    enabled. You can wrap all Cards into a single card-deck wrapper. The breakpoint
    is still set at 576 pixels. For viewports wider than the breakpoint the flexbox
    is responsive by default. The more space there is, the more Cards there are on
    each row. On large and extra-large viewports there are four cards on each row
    by default. Use the flex-basis property to get three cards on each row. The flex-basis
    property specifies the initial length of a flexible item. You can use the following
    SCSS code to set the flex-basis property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'On a medium grid you will got two cards in each row. The last row has only
    one card, because of we have an odd number of cards. The last card takes 100%
    of the available space and will look like that shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cards with the CSS3 Flexbox layout module](img/00204.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can try to fix this with Sass by setting the max-width for each card as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Or alternatively, add an empty card that''s only visible on the medium grid
    by using Bootstrap''s responsive utilities classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''ve not removed the borders and rounded corners of the cards, you should
    remove them for the empty card. You can remove the borders and/or rounded corners
    with Sass. Use the following SCSS code to remove the borders from the empty card:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, :last-child is a CSS pseudo-class. CSS pseudo-classes
    can be added to selectors that specifies a special state of the element to be
    selected. The last-child pseudo-class selects any element that is the last child
    element of its parent. You can read more about the last-child pseudo-class at
    the following URL: [https://developer.mozilla.org/nl/docs/Web/CSS/:last-child](https://developer.mozilla.org/nl/docs/Web/CSS/:last-child).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Notice that the SCSS code with the `&` parent reference in front of the last-child
    pseudo-class compiles into CSS code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.card-deck .card:last-child order: initial; }`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the last cards on the medium grid should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cards with the CSS3 Flexbox layout module](img/00205.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Of course, you can you can also remove just the rounded corners by using the
    following SCSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about the CSS3 flexbox layout module at the following URL:
    [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes).
    Internet Explorer 9 and earlier do not support flexbox.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll style the filtering options sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the options sidebar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's style our filtering options. These appear just before the markup
    for our product items. In small, medium, and large viewports, they appear as a
    left-hand sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, they appear like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the options sidebar](img/00206.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For our final design, we want to transform the **Clearance Sale** link into
    an attractive extra-large button and arrange the filtering options into two columns
    with checkboxes rather than bullets, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the options sidebar](img/00207.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's begin by setting up some basic styles to lay a basic groundwork.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up basic styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll start by adjusting fonts, colors, margins, and padding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add these rules to a new Sass partial called `_grid-options.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Adds Bootstrap Card styles to our sidebar (see the relevant Bootstrap documentation
    at [v4-alpha.getbootstrap.com/components/card/](http://v4-alpha.getbootstrap.com/components/card/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds top and bottom padding to the sidebar so that our new background extends
    past the sidebar content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusts font size, line-height, and color for the `h2` heading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notice that you should not forget to import the `_grid-options.scss` file into
    your `app.scss` file.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will style the **Clearance Sale** link.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the Clearance Sale link
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to transform our **Clearance Sale** link into an extra-large attractive
    button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s adjust the markup to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Turn the linked heading and paragraph into a button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the custom button `btn-feature` class, which we created in [Lesson 9](part0103_split_000.html#3279U1-d17423bd3b664255b5fd09e37e25e334
    "Chapter 9. Bootstrapping Business"), *Bootstrapping Business*, to give the button
    our special featured color—red.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a Font Awesome icon for a sale tag. We'll make it three times the normal
    size by using Font Awesome's built-in `icon-3x` class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about Font Awesome's special sizing classes, see the documentation
    at [http://fontawesome.io/examples/#larger](http://fontawesome.io/examples/#larger).
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting HTML markup is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This immediately gives us a good start towards our desired result as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the Clearance Sale link](img/00208.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now to polish it up, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Display the **Clearance Sale** button as a block-level element by setting the
    display property to block and center it `by extending` Bootstrap's `m-x-auto`
    class. The `m-x-auto` class is part of Bootstrap's Utility classes and centers
    fixed-width block level content by setting the horizontal margins to auto.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Force its width to fill 92.5 percent of its containing column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add top and bottom padding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Override Bootstrap's `white-space:nowrap` rule for buttons, so that our text
    can wrap as it should (See Bootstrap's `white-space` rule in `/bootstrap/scss/_buttons.scss`.
    You can learn more about the `white-space` property at [http://css-tricks.com/almanac/properties/w/whitespace/](http://css-tricks.com/almanac/properties/w/whitespace/).)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position it relatively so that we can apply absolute positioning to the tag
    icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjust font, color, font-size, and margins on our heading and paragraph.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position the tag icon at the top right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can accomplish these goals by adding the following style rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that the background-color of the **Clearance Sale** button is set by
    the class in the HTML code in the `html/pages/products.html` file. The `btn-feature`
    class is generated via the `scss/includes/_buttons.scss` partial file with the
    following SCSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end, this gives us a pleasing result, as is evident from the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the Clearance Sale link](img/00209.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As a bonus, these styles work well across viewport sizes. Take a few moments
    to test it. Then of course, as always, feel free to take what we've begun and
    beautify it further.
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, let's move down to the options for filtering our products.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the options list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will transform our lists of product filtering options.
  prefs: []
  type: TYPE_NORMAL
- en: If you take a moment to examine the markup of product filtering options in a
    store such as Amazon ([http://www.amazon.com](http://www.amazon.com)) or Zappos
    ([http://www.zappos.com](http://www.zappos.com)), you'll find that they are composed
    lists of links that have been specially styled to appear like checkboxes. We will
    style our links to look like checkboxes, which will appear as checked once selected,
    and we'll adjust them to work nicely across devices, such as tablet and phone
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On e-commerce websites such as Amazon and Zappos, the filter options are connected
    to a content management system, which dynamically updates the grid of shown products
    in response to the options selected. Bootstrap is a frontend design framework,
    and not a content management system. Thus, we will not be dynamically filtering
    our products as a part of this project. Instead, we will prepare a design that
    is ready to be used in the context of a complete content management system.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the coming section, we''ll use the HTML code from the `html/pages/products.html`
    file. The HTML code of an option list may look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit your SCSS code in the `scss/includes/_grid-options.scss` partial file.
    We''ll start with the `h3` headings for the lists, adjusting their size, line-height,
    margin, and color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need to use the `>h3` child selector since we don't want these rules to apply
    to other `h3` tags, especially the one within our **Clearance Sale** button.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's turn our attention to the unordered lists. These have a special class
    of `options-list`, which we'll use as our selector to ensure we're targeting only
    these special lists.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s remove bullets and padding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Now we'll style the links. Shortly, we'll also style the list items, so we'll
    include them in the sequence of nested selectors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The rules we just set accomplish the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll use the power of Sass' extend feature to pull in the fundamental button
    styles associated with the `btn` class that includes displaying the `inline-block`
    link and the addition of padding.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since we added no other button class, there is no background color
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we gain from these basic button styles is a convenient way to make our
    links user-friendly click targets-including fingers on touch devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then extend the styles associated with the `btn-sm` class to reduce padding
    and for the font-size to be a bit smaller than the standard button (for a refresher
    on Bootstrap button classes, go to [v4-alpha.getbootstrap.com/components/buttons/](http://v4-alpha.getbootstrap.com/components/buttons/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then remove unneeded left and right padding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We change the color of our link text to `$gray`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we set the color of hovered, focused, and active links to our `$link-color`
    value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You may want to save, compile, and test the results. The following screenshot
    depicts the result we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the options list](img/00210.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Our option links have gained improved padding and font size and taken our desired
    colors.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may be wondering why I've chosen to extend the button styles by using the
    `.btn` and `.btn-sm` classes in our Sass files rather than adding the classes
    directly to the markup. We could do the latter, but given the number of option
    links, I think you will agree that it is far more efficient to apply the styles
    via CSS as we've done. In the section that follows, I will continue this pattern
    and extend it by bringing in Font Awesome icons via Sass rather than by adding
    markup.
  prefs: []
  type: TYPE_NORMAL
- en: Now we'll add checkboxes to our option links.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Font Awesome checkboxes to our option links
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll use Font Awesome icons to add an empty checkbox to the
    left of each option link. Rather than adding icons in the markup, we will do it
    here via Sass as it will be far more efficient. Then we'll push a step further,
    adding styles to pull in an alternate Font Awesome icon-for a checked checkbox
    - to the hovered, focused, and active option links.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding icons via Sass requires extending Font Awesome styles. First, we will
    take these fundamental styles from the fa base class, which can be found in the
    `_core.scss` file in the `bower_components/font-awesome` folder. In this file,
    you''ll find the following key styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the preceding code we''ve used the `.#{$fa-css-prefix}` selector, which
    is based on Sass'' variable interpolation. The Sass compiler uses the #{} interpolation
    syntax to compile variables into selectors and property names. Read more about
    variable interpolation in Sass at the following URL: [http://sass-lang.com/documentation/file.SASS_REFERENCE.html#interpolation_](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#interpolation_)'
  prefs: []
  type: TYPE_NORMAL
- en: These styles establish the fundamental rules for all Font Awesome icons, including
    the Font Awesome icon for the font family and then refine the details of its presentation.
  prefs: []
  type: TYPE_NORMAL
- en: For our present purposes, we do not need the selector or the braces but only
    the rules. We will take these and apply them to our links. Primarily, we'll use
    the `:before` pseudo-element as it ensures the best results.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about the CSS2.1 `:before` pseudo-element, go to [http://coding.smashingmagazine.com/2011/07/13/learning-to-use-the-before-and-after-pseudo-elements-in-css/](http://coding.smashingmagazine.com/2011/07/13/learning-to-use-the-before-and-after-pseudo-elements-in-css/).
  prefs: []
  type: TYPE_NORMAL
- en: 'So edit the following rules in the _`grid-options.scss` file, nested as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'These rules establish the fundamentals. Next, we need to specify which Font
    Awesome icon to use. Browsing the options at [http://fontawesome.io/icons/](http://fontawesome.io/icons/),
    we find the following open checkbox icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Font Awesome checkboxes to our option links](img/00211.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Sass rules for this icon are found in the `_icons.scss` file inside the
    `font-awesome` folder. By opening that file and searching for the `}-square-o`
    string (including the closing curly brace before `-square-o` to narrow the results),
    we can find the following relevant line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'From the previous line, we only need `content: $fa-var-square-o`, which we
    can copy and paste in the `_grid-options.scss` file directly after the preceding
    rules, which are applied to our `a:before` selector or alternatively extend the
    `.fa-square-o:before` selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we want to grab Font Awesome styles to give our icons a fixed width
    and to avoid any shifting when the icon changes to the checked version. These
    styles are found in the `_fixed-width.scss` file inside the `font-awesome` folder.
    Extend the `.fa-fw` class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding these rules, run the bootstrap watch command and inspect the results
    in your browser. You should see the checkboxes appear as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Font Awesome checkboxes to our option links](img/00212.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, following the same approach, we''ll add the following selectors and rules
    to apply the checked version of the Font Awesome icon to the hovered, focused,
    and active states of our links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Bootstrap's `hover-focus-active` mixin can be found in the b`ower_components/bootstrap/scss/mixins/_hover.sccs`
    partial. You can use this mixin to set the active, hover, and focus states once.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the file, and inspect the results in your browser. You''ll find that the
    checked version of the square icon appears when you hover on one of the links,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Font Awesome checkboxes to our option links](img/00213.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a reminder, it is not currently possible to force one of these links to stay
    in the active state as we have no content management system in place. What we
    do have is a set of styles ready and waiting to go to work in the context of such
    a content management system.
  prefs: []
  type: TYPE_NORMAL
- en: That's it! We've successfully given our links the appearance of checkboxes to
    provide desired user feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's make more efficient use of our space by floating our options side
    by side.
  prefs: []
  type: TYPE_NORMAL
- en: Using Sass mixins to arrange option links in columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, we used custom Sass rules to accomplish things that
    might have been accomplished by adding markup. Given the number of option links
    we need to manage, this has proven significantly more efficient. The same dynamic
    applies when we want to arrange our option links into columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'We might accomplish our desired result by using Bootstrap row and column classes,
    adjusting our markup with the following pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Lesson 9](part0103_split_000.html#3279U1-d17423bd3b664255b5fd09e37e25e334
    "Chapter 9. Bootstrapping Business"), *Bootstrapping Business*, you saw that the
    Panini template engine does support loops and iterations. Using loops in your
    template is also an alternative for DRY coding and preventing duplicate code.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example can be found in the `html/pages/products.html` file. The code of
    the first list looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The numbers-10 variable is read from the file, which contains the number 1 through
    10 in YAML format. Using the index of the iteration seem to make more sense, but
    unfortunately, Panini does not support this feature of Handlebars. See also [https://github.com/zurb/panini/issues/67](https://github.com/zurb/panini/issues/67).
  prefs: []
  type: TYPE_NORMAL
- en: 'Thanks to the power of Bootstrap''s mixins, we can accomplish the same result
    with a few lines of Sass, as shown in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll apply the `make-row()` mixin to the `options-list` selector,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This mixin applies the same styles to our options list that we would have gained
    by applying the `row` class in the markup. In this case, it's simply more efficient
    to do it here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we can use a `make-col(6)` mixin and set the number of column to six
    to apply column rules to our list items as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will apply the same styles to our list items as would be applied if we
    had added the `col-xs-6` class to each of the relevant `li` tags. Later on, you
    will read how to make the columns responsive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After adding the preceding lines, save the file, compile to CSS, and refresh
    your browser. You should see the option links line up in two columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Sass mixins to arrange option links in columns](img/00214.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Not bad!
  prefs: []
  type: TYPE_NORMAL
- en: We will now make some adjustments for smaller viewports.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the options list layout for tablets and phones
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to constrain the width of our options panel so that it does not range
    too widely in tablet-width devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the medium grid for tablets, between 768 and 992 pixels, neither the **Clearance
    Sale** button nor the options fit the column, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting the options list layout for tablets and phones](img/00215.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can fix this issues with the options by using Sass and force the options
    into a single column again for the medium grid as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The preceding SCSS code does not fix the **Clearance Sale** button for the medium
    grid. You may try the reduce the font size to fix it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can adopt the main grid the solve the issues on the medium
    grid. In the `html/pages/products.html` file change the grid classes as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The grid-options area will span four columns on the medium grid now. The problems
    for the medium grid are fixed. Let's take on the small grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right now, our **Clearance Sale** button stretches too wide, and our options
    list items spread too far apart on viewports between 480 pixels and 768 pixels
    wide. Thus, they can end up appearing like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting the options list layout for tablets and phones](img/00216.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This can be easily fixed by setting a `max-width` property with a value of
    480 pixels for the entire options panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s adjust our option list items so that they organize themselves in
    three columns in small viewports. Using Sass, we can nest a media query within
    the appropriate selector and add an adjusted `make-col(4)` mixin, as shown in
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'After making these adjustments, save the file and test in a narrow viewport.
    You should see the result shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting the options list layout for tablets and phones](img/00217.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s address the next problem facing our single-column layout: we need
    to hide our options away until they''re needed.'
  prefs: []
  type: TYPE_NORMAL
- en: Collapsing the options panel for phone users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At present, our options take up a considerable amount of vertical space. This
    creates a problem in narrow viewports. The single-column layout winds up pushing
    our grid of products far down the page.
  prefs: []
  type: TYPE_NORMAL
- en: This is a great deal of vertical space for options that are not needed. The
    products themselves are priority items. We need to allow users of phones to find
    the products more quickly while still allowing them to access the filtering options
    when desired.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll use Bootstrap''s collapse plugin for this. In the following steps, we''ll
    apply the collapse plugin to the options panel, add a button to expand the panel
    when desired, and restrict the behavior to narrow viewports only:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your editor with `products.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new `div` tag to wrap our **Clearance Sale** button and three options
    lists. We need to give this new `div` a special class of collapse as well as a
    distinctive ID so that we can target it with our JavaScript plugin. For good measure,
    we''ll give it a matching special class as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice that the `collapse` class in the previous step hides the content for
    all viewports. You can add the `navbar-toggleable-sm` class to ensure the content
    is always visible on larger viewports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Bootstrap's collapse JavaScript plugin is what powers the collapsible responsive
    navbar. It may also be put to other uses, such as the one shown in the Bootstrap
    documentation at [v4-alpha.getbootstrap.com/components/collapse/](http://v4-alpha.getbootstrap.com/components/collapse/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the file and refresh it in your browser. You should see that the **Clearance
    Sale** button and options lists will now be hidden from view. All that remains
    of the options panel content will be the `h2` heading **Narrow your selection**,
    as shown in the following screenshot:![Collapsing the options panel for phone
    users](img/00218.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need a toggle button to expand our filter options when clicked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the still visible `h2` heading that reads **Narrow your selection**,
    add a button element with the following attribute structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following points explain what the preceding markup will do:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `clearfix` class will ensure that the `h2` heading will contain the toggle
    button, which will float to the right due to the pull-right class.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The `btn` and `btn-primary` classes will style our new `button` element with
    the Bootstrap's `btn` styles, which includes our background color of $brand-primary
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The `hidden-md-up` class hides the button on larger viewports.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the `button` element, we've placed a Font Awesome icon using the `fa-2x`
    class to double its size.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save this and find the following result in your browser:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Collapsing the options panel for phone users](img/00219.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In narrow viewports, the options list is collapsed and the toggle button is
    visible:![Collapsing the options panel for phone users](img/00220.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In small, medium, and large viewports, the toggle button is hidden, and the
    options list is visible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Collapsing the options panel for phone users](img/00221.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a search form to your designing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding sections we've build a navigation structure. About fifty percent
    of your visitors will use this navigation, the other half will prefer to search
    your content. So a good ability to search the content and your products must always
    be represented on your pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add a search form in the header of our page, which should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a search form to your designing](img/00222.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Edit the following HTML code in the `html/includes/header.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The following points explain what the preceding markup will do:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The form-inline and form-control classes are Bootstrap classes for inline forms.
    You can read more about Bootstrap''s inline forms at the following URL: [v4-alpha.getbootstrap.com/components/forms/#inline-forms](http://v4-alpha.getbootstrap.com/components/forms/#inline-forms).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pull-md-right` class will ensure that the form float on the right side
    of the header for
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `hidden-sm-down` class hides the search button on the small viewports; only
    the search input is visible in these viewports.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The preceding code overlaps the icons; you can fix this by setting a padding-top
    using the following SCSS code in the `scss/includes/_header.scss` Sass partial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The `media-breakpoint-up(md)` mixin call ensures that the padding is only added
    for medium and larger viewports.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Typeahead plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding an autocomplete function to your search form may improve the usability
    of search function. The typeahead plugin from Bootstrap 2 can be used to build
    an autocomplete function. More information about this plugin can be found at the
    following URL: [https://github.com/bassjobsen/Bootstrap-3-Typeahead](https://github.com/bassjobsen/Bootstrap-3-Typeahead).
    The plugin is ready to use with Bootstrap 4.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps describe how to integrate the Typeahead plugin in your
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add the plugin to your bower project dependencies to the bower.json
    file of your project, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Then run the `bootstrap update` or `bower update` command in your console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then edit the `compile-js` task in Gruntfile.js to ensure that the plugin is
    included in your project:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Then initiate the plugin and attached it to the search form. Open the `js/main.js`
    and edit the following JavaScript code into it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'And lastly, set the CSS z-index value of the suggestions menu to prevent the
    navbar overlapping it. You can set the `scss/includes/_header.scss` partial by
    using the following SCSS code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Now your search form with autocomplete is ready. Run the Bootstrap watch command
    and expect the result in your browser. Type the capital A in the search form and
    you will find that a drop-down list with suggestions appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Typeahead plugin](img/00223.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Bootstrap team dropped the typeahead plugin in version 3 in favor of using
    `typeahead.js`; see [https://github.com/twitter/typeahead.js](https://github.com/twitter/typeahead.js).
    To use `typeahead.js` with Bootstrap 4, some additional CSS code is required.
    The required CSS code, include the generation SCSS code, can be found at the following
    URL: [https://github.com/bassjobsen/typeahead.js-bootstrap4-css/](https://github.com/bassjobsen/typeahead.js-bootstrap4-css/).'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! With the search form, we have accomplished our design.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have employed Bootstrap styles to quickly set up breadcrumbs,
    a page title, and pagination customized according to our needs. Then we created
    a visually pleasing grid of product items, all of the same height so as to ensure
    a regular grid by using Bootstrap's mobile first and responsive grid styles.
  prefs: []
  type: TYPE_NORMAL
- en: We finished our design by adding a complex **Clearance Sale** button with a
    `$brand-feature` red background color and a list of filter options that are easily
    clickable. We also used Bootstrap column classes with responsive adjustments to
    arrange our options list items optimally for multiple viewport widths.
  prefs: []
  type: TYPE_NORMAL
- en: At the end, we also added a search form with an autocomplete function.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! We now have an attractive business website with a well-crafted
    e-commerce section.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's take our skills another step forward by rebuilding our project with
    Angular 2.
  prefs: []
  type: TYPE_NORMAL
- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following snippet will set `max-width` for cards?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$include media-breakpoint-up(md) {.card-deck .card {width: 46%;}}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@include media-breakpoint-up(sm) {.card-deck .card {max-width: 46%;}}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both i & iib
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the following snippet do?![Assessments](img/00224.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adds Bootstrap Card styles to our sidebar
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Adds top and bottom padding to the sidebar so that our new background extends
    past the sidebar content
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjusts font size, line-height, and color for the h2 heading
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of setting the CSS `z-index` value of the suggestions menu?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To prevent the navbar overlapping the menu
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To add plugin to your bower project dependencies
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To edit the `compile-js` task in `Gruntfile.js` to ensure that the plugin is
    included in your project
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the advantage of adding an autocomplete function to your search form?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To read more about Bootstrap's inline forms
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To acquire more information about this plugin
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To improve the usability of search function
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is the use of the `clearfix` class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It ensures that the heading will contain the `toggle button`, which will float
    to the right due to the `pull-right` class
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It allows users of phones to find the products more quickly while still allowing
    them to access the filtering options when desired.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It uses Sass, to nest a media query within the appropriate selector and adds
    an adjusted `make-col(4)` mixin
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
