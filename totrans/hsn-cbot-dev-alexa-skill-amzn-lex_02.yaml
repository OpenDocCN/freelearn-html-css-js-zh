- en: Getting Started with AWS and Amazon CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Amazon Web Services** (**AWS**) is the collection of all the tools and services
    that Amazon provides for developers in the cloud. There is a huge range of services
    available, from a server hosting to machine learning, from game streaming to digital
    marketing. Each of these services has been designed to perform one thing really
    well, but the biggest benefit is how well each of the services works together.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will create an AWS account and explore the AWS console.
    Once we've got our account set up we'll learn about Lambda functions, creating
    one of our own. This will start out as a very simple Lambda, but we'll increase
    the functionality as we go through the rest of this book.
  prefs: []
  type: TYPE_NORMAL
- en: The next section of this chapter will talk about the different ways in which
    we can edit Lambdas and the advantages and disadvantages of each method.
  prefs: []
  type: TYPE_NORMAL
- en: The final section will cover how to create an amazing local development environment,
    using AWS CLI, build scripts, and Git. By the end of this chapter, we'll have
    a local environment where we can easily deploy our Lambdas without ever having
    to go onto AWS and we can back up all of our work to remote Git repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and configuring an AWS account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Lambda in AWS Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three methods for editing Lambdas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an amazing local development environment using AWS CLI, build scripts,
    and Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll be creating a few Lambdas as well as creating a build
    script.
  prefs: []
  type: TYPE_NORMAL
- en: All of the code can be found at [http://bit.ly/chatbot-ch2.](http://bit.ly/chatbot-ch2)
  prefs: []
  type: TYPE_NORMAL
- en: Creating an account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To access all of these services you need to create a free AWS developer account.
    Go to [aws.amazon.com](https://aws.amazon.com/) and click Create a Free Account.
    To create an account you need to follow the sign-up process. The process is very
    thorough and requires you to enter payment details and receive an automated phone
    call. This process is to validate that you are a genuine user.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've created your AWS account you can access all of the services through
    the Amazon Console ([console.aws.amazon.com](https://console.aws.amazon.com/)).
    There is a lot of useful information on the console page. Build a solution and
    Learn to build are tutorials and information on how to use some of the services.
  prefs: []
  type: TYPE_NORMAL
- en: Setting your region
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this book, you will need to set your region to N. Virginia or Ireland. Lex
    is currently (April 2018) available in those two regions.
  prefs: []
  type: TYPE_NORMAL
- en: AWS has this concept of regions, which are locations around the world where
    Amazon have their cloud service centers. Each region is separate from all the
    others for most applications. It is best practice to deploy services to the regions
    closest to where they'll be used. If your customers are on the west coast of America
    then choosing N. California or Oregon would be best, whilst choosing Ireland wouldn't
    be a great choice. Their data would have to go halfway around the world and back
    each time they use your product.
  prefs: []
  type: TYPE_NORMAL
- en: One other consideration for the regions is that not every region is equal. Some
    regions have the larger working capacity, while some don't even have all of the
    services.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating around AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Getting around AWS has been designed to be as easy as possible. At the top
    of every page is a banner with a link to the console home page, a dropdown with
    every service available, account and location settings, and a support menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42294334-3023-4260-94e9-2bc9ea8662c7.png)'
  prefs: []
  type: TYPE_IMG
- en: AWS menu and Service dropdown
  prefs: []
  type: TYPE_NORMAL
- en: The link to the home page and the service dropdown are the two options that
    you'll be using a lot throughout your time in AWS. When you're editing a Lambda
    and need to check a table name in Dynamo or you're creating an API Gateway for
    your EC2, you'll be switching between services a lot.
  prefs: []
  type: TYPE_NORMAL
- en: You can also pin your favorite service to your banner using the drawing pin
    icon. This makes switching between your most used services even quicker.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Lambda functions are incredible! They’re functions that are hosted on AWS
    that can be triggered in many different ways. Lambda functions are *serverless*,
    which means that you don't need to run a server to use them. This makes it a lot
    quicker and easier to set up and use.
  prefs: []
  type: TYPE_NORMAL
- en: One of the best parts of AWS Lambdas is that you only pay for the time the Lambda
    function is running. Got something that only runs once an hour and only takes
    two seconds? You’ll only be charged for 48 seconds a day! That’s insane compared
    to running a 24/7 AWS EC2 server or your own private server.
  prefs: []
  type: TYPE_NORMAL
- en: Today, we’ll create a Lambda function and look at the three best ways to work
    with the code.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve got your AWS account set up, there are a few ways to create a new
    Lambda function. We’re going to start by using the AWS Console.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Within the AWS Console, you can find AWS Lambda in Services | Compute | Lambda,
    which takes you to the Lambda Console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35b426c5-b280-4400-bfd0-3a95f8af2eb6.png)'
  prefs: []
  type: TYPE_IMG
- en: AWS Compute services
  prefs: []
  type: TYPE_NORMAL
- en: This is what you’ll see if this is your first Lambda. Click that Create function
    button to start setting up your first function.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll end up on the setup page, where you configure some aspects of the function
    (name, runtime, role). You can create a Lambda from Blueprints or Serverless Application
    Repos, but in this example, we'll select Author from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Enter the name for your function (this must be unique to your user or sub-account),
    choose your Runtime (We''ll use Node.js 8.10), and select *Create new role from
    template(s)*. Give this new role a relevant name, such as `lambdaBasic` or `NoPolicyRol`,
    and leave Policy templates blank. When we create a more complex Lambda, we''ll
    have to create a role with policies and permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7357f583-b6b1-4c2c-9168-2b33b66652cd.png)'
  prefs: []
  type: TYPE_IMG
- en: New Lambda with a new role
  prefs: []
  type: TYPE_NORMAL
- en: Writing your Lambda function's code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've created your Lambda you are sent into the function editor within
    the Lambda Management Console. There is a lot going on this page, but we're focused
    on the section titled Function code.
  prefs: []
  type: TYPE_NORMAL
- en: When you first create a Lambda, it is created with a very basic function already
    implemented. This is nice as it gives you a starting point to build your function
    on. As we're using Node.js 8.10 as our runtime, there will be a single parameter
    of the `event` and then we will return our answer.
  prefs: []
  type: TYPE_NORMAL
- en: As a basic example, we'll create a Lambda that takes your name and age and tells
    you what your maximum heart rate is. This can be done more efficiently than the
    way we are going to do it, but this is done more as a way to demonstrate some
    techniques for use within Lambdas.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, we will `console.log` out the event and then extract the `name`and
    `age`. I''m going to use ES6 destructuring but you can also do this using normal
    variable declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the `name` and `age` from the event, we can pass those into
    a function that converts them into a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you haven't seen this sort of string before, they're called **template strings**
    and they're much neater than previous string concatenation. Backticks start and
    end the string and you can insert data using `${data}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can change `''Hello from Lambda!''` to `createString(name, age)` and
    our function will return our new string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure to save your changes by clicking the bright orange Save button in
    the upper-right corner of your Lambda toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d33992ac-6b2c-4ef3-b769-598772ca56bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Lambda toolbar
  prefs: []
  type: TYPE_NORMAL
- en: To test this out, we can click Test in the Lambda toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we click on *Test*, a Configure test event popup opens. We can use this
    to decide what gets sent to our Lambda in the event payload. Give your test a
    name and then we can configure our data. For this Lambda it is very simple, just
    an object with keys of `"name"` and `"age"`. Here''s mine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can set your values to whatever you want and then click Save at the bottom
    of the configuration screen. Now the dropdown to the left of the Test button has
    changed to be your new test name. To run the test, simply click the Test button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8593e166-dfc9-4963-9546-865e1b6bb62f.png)'
  prefs: []
  type: TYPE_IMG
- en: Lambda result
  prefs: []
  type: TYPE_NORMAL
- en: 'If your response is still `''Hello from Lambda!''`, then make sure you''ve
    saved your function and run the test again. As you can see, I got the response
    of "Hi Sam, you are 24 years old.", which is what we expected. As well as the
    response, we get a RequestID and Function Logs. Remember when we added that `console.log(event)`
    to our code? You can now see that the object `{ name: ''Sam'', age: ''24'' }`
    was logged out. If you want to see more of your logs or logs from previous Lambda
    calls, they''re all stored in CloudWatch. To get to CloudWatch you can either
    search for it in the services or get there by selecting Monitoring at the top
    of the Lambda Console and then clicking *View logs in CloudWatch*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also some interesting graphs inside Monitoring that can tell you
    a lot about how well your function is working:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9840468-0791-4883-a5d2-b8f2a2ad466b.png)'
  prefs: []
  type: TYPE_IMG
- en: View logs in CloudWatch
  prefs: []
  type: TYPE_NORMAL
- en: Lambda functions can be created in a single file like we have done, but they
    also work with multiple files. When your Lambda is doing very complex tasks, you
    can break each section out into its own file to improve organization and readability.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to create a new file called `hr.js`, and inside we''re going to
    create and export another function. This function is going to calculate your maximum
    heart rate based on your age. Create the new file by right-clicking in the folder
    menu and selecting New File and call it `hr.js`. Open up that file and we''ll
    create a `calculateHR` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, back in our `index.js` file we need to import our `hr.js` file and call
    the `calculateHR` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When we run our last test again, we get a new response of `"Hi Sam, you are
    24 years old and have a maximum heart rate of 196."`. This could have been done
    a lot more effectively, but this was done more to show you some ways that you
    can write code in Lambda functions.
  prefs: []
  type: TYPE_NORMAL
- en: Triggering Lambdas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In your first Lambda, the way that we tested it was by triggering it with a
    test. To make Lambdas useful, we need to be able to trigger it from different
    places.
  prefs: []
  type: TYPE_NORMAL
- en: In the Lambda Console, near the top, there is a Designer section. This section
    allows you to change how the Lambda interacts with other services and therefore
    the user. On the left of the section is an Add triggers menu with a selection
    of options. Each of these is a system of services that you can set up to trigger
    the function. These are not all of the ways to trigger a Lambda and we'll be using
    other methods in the future.
  prefs: []
  type: TYPE_NORMAL
- en: The most important ones for us are API Gateway and Alexa Skill Kit, but the
    other triggers can be very useful for other projects. API Gateway is the way to
    expose the Lambda to the outside world. You create an API endpoint, and anyone
    can hit that endpoint and that data will be processed by your Lambda. We'll be
    creating an API in [Chapter 7](55111d86-d89c-4d8e-9577-8625a9654f4a.xhtml), *Publishing
    Your Chatbot to Facebook, Slack, Twilio and HTTP*. The Alexa Skill Kit is a service
    for building Alexa Skills and these can trigger Lambdas too, and we'll be doing
    this in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Methods for working with Lambdas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the big advantages of Lambdas is that you can choose how you write and
    edit them. There are three main ways to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Lambda Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On your local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’m going to cover all three and discuss the advantages and disadvantages of
    each of them.
  prefs: []
  type: TYPE_NORMAL
- en: Method 1 – Lambda Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the way that we have just created our first Lambda function. In the
    Lambda Console, we have a basic editor. It’s based on the Cloud9 IDE and works
    well for simple Lambda functions.
  prefs: []
  type: TYPE_NORMAL
- en: '**The advantages:**'
  prefs: []
  type: TYPE_NORMAL
- en: It’s a good editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can access it from any computer through your AWS Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The disadvantages:**'
  prefs: []
  type: TYPE_NORMAL
- en: It doesn’t seem to be very stable. Sometimes it doesn’t let you save so you
    have to copy all of your work to a local file, reload the page, and copy your
    work back. I hope that this gets fixed soon!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It doesn’t have a command-line interface. This means that you can’t install
    `npm` packages using this method alone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need internet access to work on your Lambdas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method 2 – Cloud9 editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon recently acquired Cloud9, an online development platform. It runs a very
    basic version of Ubuntu that is integrated with the rest of the AWS platform.
  prefs: []
  type: TYPE_NORMAL
- en: Search for `Cloud9` in the AWS Console, go to the page, and select Create environment.
    From here you give your environment a name and go to the next step.
  prefs: []
  type: TYPE_NORMAL
- en: Here you get to choose what you want to run this environment on. The great thing
    is that t2.micro is free-tier-eligible, so you can use this method without getting
    charged anything if you're on the free tier. I’ve never needed anything more powerful
    than a t2.micro.
  prefs: []
  type: TYPE_NORMAL
- en: Complete the setup process and you’ll end up in your new Cloud9 environment!
  prefs: []
  type: TYPE_NORMAL
- en: 'The cool thing about this is that you have access to all of your Lambda functions
    from inside your Cloud9 environment. Click AWS Resources and under Remote Functions,
    you''ll find all of your functions. Click on the Lambda function you want to edit
    and then hit the download icon above to import it into your environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98dd55ee-b2c7-47d0-a9dd-de1484fd7669.png)'
  prefs: []
  type: TYPE_IMG
- en: Accessing remote Lambdas
  prefs: []
  type: TYPE_NORMAL
- en: Once that's done, it'll just be like you're working on it locally.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’re finished, just select the function you’ve been working on from the
    local list and hit the upload button. Within a few seconds, it’ll be live with
    all your changes.
  prefs: []
  type: TYPE_NORMAL
- en: '**The advantages**:'
  prefs: []
  type: TYPE_NORMAL
- en: Again, this is all remote so you don’t need to worry about forgetting to commit
    your work or saving it to a memory stick if you work on multiple machines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing your functions and reuploading them is super easy. This is by far
    the best bit about this method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You now have an integrated terminal, allowing you to install `npm` packages
    and do everything else you want to do using the terminal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The disadvantages**:'
  prefs: []
  type: TYPE_NORMAL
- en: It still has the same stability issues that the Lambda Console editor has. I’ve
    had multiple occasions where I’ve tried to save the function but couldn’t, and
    have had to copy to local, refresh, and recopy to Cloud 9\. This becomes very
    annoying very quickly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need internet access to work on your Lambdas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method 3 – Local editing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'm going to do this one a little differently. I'll list the advantages and
    disadvantages of a basic usage and then show you how to make it much better.
  prefs: []
  type: TYPE_NORMAL
- en: '**The advantages**:'
  prefs: []
  type: TYPE_NORMAL
- en: Local editing is how most developers will work. We can use our favorite IDE,
    extensions, and color schemes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s stable (as long as your computer is).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can work on your Lambdas without needing an internet connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The disadvantages**:'
  prefs: []
  type: TYPE_NORMAL
- en: There’s no fancy button to get and upload your work to AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your work is local, so having multiple users or just working on multiple devices
    is more complex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To make this method into the perfect system, we are going to make use of Amazon
    CLI and Git. It should take about 15 minutes to set up everything we need!
  prefs: []
  type: TYPE_NORMAL
- en: Creating the best local development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we've already seen, there are some brilliant aspects of writing Lambdas locally,
    which is why we are going to use it throughout this book. We're going to choose
    an IDE and install NodeJS and NPM before setting up a folder structure for our
    Lambdas. Finally, we'll use the AWS CLI and Git to create awesome tools to get
    rid of the normal disadvantages of working locally.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing an IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which IDE you use is down to personal preference; there are a few great ones
    out there, including Atom, Komodo, and Brackets. If you already have a personal
    favorite then you can use that, but all of the examples will use **Visual Studio
    Code** (**VS Code**).
  prefs: []
  type: TYPE_NORMAL
- en: VS Code is an open source IDE developed by Microsoft and is made for macOS,
    Linux, and Windows. It has built-in support for JavaScript, Node, and TypeScript
    and you can install extensions from the extension library. These extensions are
    one of the biggest advantages to using VS Code as they allow you to customize
    so much about your experience. From colored indentations to linting, from better
    icons to auto-formatters. They vary from the *sort of interesting* to the *making
    your life far easier*.
  prefs: []
  type: TYPE_NORMAL
- en: As well as the extensions, VS Code has more great features such as an integrated
    terminal, Git integration, and a built-in debugger. If you've not tried it before,
    I would recommend trying it out for a week and seeing how it compares to your
    current IDE of choice.
  prefs: []
  type: TYPE_NORMAL
- en: To install VS Code, just go to [code.visualstudio.com](https://code.visualstudio.com/)
    and download the version you need for your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node and NPM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node is the runtime that allows us to run JavaScript code on a server. It has
    gained massive favor over the last few years and is powering applications in almost
    every sector of technology. It is also one of the runtimes that can be chosen
    on Lambda functions.
  prefs: []
  type: TYPE_NORMAL
- en: Along with Node, we get **Node Package Manager** (`npm`), which is the largest
    ecosystem of open source libraries in the world. This is great for us and we'll
    be using some of these packages throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: To install Node and `npm` you can download the installation packages from [nodejs.org](https://nodejs.org/)
    or through a package manager. Make sure that you install at least version 8.11.1
    because we will be using *async/await* in our work, and this requires at least
    version 8\. Once you have installed everything you can test that it's working
    by typing `node -v` ; you should get something like `v8.11.1`. You can also test
    `npm` by typing `npm -v`.
  prefs: []
  type: TYPE_NORMAL
- en: Folder structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To properly organize all of your Lambdas it is a good idea to have them all
    stored in a single folder. This will allow a single script to create and update
    all of your Lambdas. Within this main folder, having sub-folders containing groups
    of Lambdas is definitely a good idea. You can very quickly build up a large number
    of Lambdas.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up AWS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To upload our work directly to AWS, we can use the AWS CLI. This allows us to
    manage our AWS services from the command line and create scripts to automate common
    tasks. For us, the most important CLI commands are the ones that allow us to create
    and update Lambdas. With automated scripts we now have the ability to quickly
    and easily create and deploy Lambdas, fixing the first of the *local editing*
    limitations.
  prefs: []
  type: TYPE_NORMAL
- en: To use the AWS CLI, we first need to set it up. You can install it by typing
    `npm install -g aws-cli` into your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to set up a user for our CLI to log in as. Log in to your AWS Console
    and navigate to or search for `IAM`. Click Add user so we can set up a user for
    our CLI. You''re asked to give the user a name, so choose something like `cli-user`
    so that it is easily identifiable. Select Programmatic access, which will allow
    us to act as the user remotely, and click Next: Permissions.'
  prefs: []
  type: TYPE_NORMAL
- en: In the Permissions screen, choose to Attach existing policies directly and select
    AdministratorAccess. This will let you do whatever you want through your CLI.
    You can set stricter policies on this user if you want, or if you are giving another
    person access to your account.
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s another screen before you end up being shown your access keys. Copy
    your access keys and open a terminal. Run the command `aws configure`, which will
    ask you for four things:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The first two are found on the last page of the user creation. The third must
    be the region you chose earlier (`eu-west-1` or `us-east-1`), and the last one
    can be left as default.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Lambda using AWS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we’ve got the CLI set up, we can use it to make our lives much easier.
    To create a new function, you need to have a folder containing an `index.js` file
    with a basic Lambda code in. Navigate into that folder in your terminal and now
    you can run these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Switch out the `your-lambda-role` for the `arn` of the role that you created
    earlier. You can find this by going back to the `IAM` service in AWS and selecting
    `Roles` and clicking on your Lambda role:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8709b28d-257e-4a49-bc49-42b1e9789a1e.png)'
  prefs: []
  type: TYPE_IMG
- en: Find your role ARN
  prefs: []
  type: TYPE_NORMAL
- en: When you run this it will return a JSON blob with some information about your
    newly created Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you edit your `index.js` code and want to update the Lambda, then there
    are three commands you need to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Using these scripts, you can now write your code locally and deploy it to AWS.
    This is good but it can be improved, which is what we're going to do next.
  prefs: []
  type: TYPE_NORMAL
- en: AWS CLI build script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These CLI commands are good, but typing this all out every time you want to
    upload a new Lambda version becomes annoying. We’re going to use a build script
    to automate these commands and add in a few extra features.
  prefs: []
  type: TYPE_NORMAL
- en: This script is going to be a bash script, so if you are running macOS or Linux
    then this will work natively. If you are on Windows then you'll need to install
    a bash terminal on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this exact script to work, you need to have a folder structure as shown
    in the following screenshot. Each Lambda has a folder with the relevant files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1dd899f5-315e-48ba-aa00-aef0dcf573c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Folder structure
  prefs: []
  type: TYPE_NORMAL
- en: We will create a script that not only runs the basic AWS CLI commands, but also
    does extra checks, runs `npm install`, and echos out details about the progress.
    This script will be executed by running `./build lambda-folder`.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `build.sh` in your `lambdas` folder. Alternatively,
    you can download this file from [http://bit.ly/chatbot-ch2](http://bit.ly/chatbot-ch2)
    and follow along to see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, we will check that exactly one parameter has been passed in the command.
    `"$#"` means the number of parameters and `-ne 1` means not equal to 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to move into the folder for the selected Lambda and check that
    the folder exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We don''t want to upload our Lambda without making sure that we''ve installed
    all of the dependencies, so we make sure to run `npm install` and check that it
    has been successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The last of the setup steps is to check that `aws-cli` is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'With everything set up, we can create our new ZIP file. Before creating the
    new `.zip` file, we''ll delete the old one. Creating a new one this time is a
    little bit more advanced than before. We exclude `.git`, `.sh`, and `.zip` files
    as well as excluding `test` folders and `node_modules/aws-sdk` from the file.
    We can exclude `aws-sdk` because it is already installed on all Lambda functions
    and we don''t want to upload Git files, bash scripts, or other `.zip` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, all there is left to do is to upload it to AWS. We want to make this as
    easy as possible so we''re going to try creating a new function. If that errors
    then we''ll try updating the function. This could be done as a *get* and then
    *create* or *update*, but a failure to *create* is actually quicker than a *get*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: To make the script executable, we need to change the permissions on the file.
    To do this, we run `chmod +x ./build.sh`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, all you need to do is to navigate to the main folder where the Lambdas
    function resides and run `./build.sh example-lambda`. If you have Lambdas folders
    nested in groups, then navigate into the group folders and run `../build.sh lambda-in-group`.
  prefs: []
  type: TYPE_NORMAL
- en: If you want, you can move the build script to your home directory to make execution
    `~/build.sh lambda-function`, which is only useful if you have Lambdas in separate
    folders or highly nested folders.
  prefs: []
  type: TYPE_NORMAL
- en: This script could be modified and expanded to include region-specific uploading,
    batch uploading multiple Lambda functions, Git integration, and lots more.
  prefs: []
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A lot of people reading this will use Git already. There’s a reason for that—it
    makes life simpler. Having a Git repository for all of your Lambda functions is
    a great way to work with teams of developers or by yourself on multiple machines.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git on your system varies depending on your operating system. Linux
    users can install Git through the command line, macOS users can install using
    Homebrew or via download, and Windows users have to install Git via download.
    Details on exactly how to install for your system are available on [git-scm.com](https://git-scm.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have Git installed, navigate in the terminal to your Lambda folder.
    When inside that folder, run `git init` to create an empty repository. When you
    open your Lambda folder in VS Code, you will now have a number hovering over the
    Git symbol. This means that you have edited that number of files since your last
    Git commit.
  prefs: []
  type: TYPE_NORMAL
- en: Committing to Git is like taking a snapshot of all of the work in the folder
    and saving it. This is useful as it allows you to see how your work changes over
    time. To commit your work (take the snapshot) you have two options.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the Git integration with VS Code to create the commit. Click on
    the Git symbol with the number hovering over it. When you click on that, it opens
    the changes menu, showing you all of the files that you have changed since your
    last commit, or all of your files if this is your first commit. To commit the
    changed work, type a message into the message box at the top and click the tick
    above that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7408a1da-e61a-47c4-8823-59ba000b021a.png)'
  prefs: []
  type: TYPE_IMG
- en: Git commit using VS Code integration
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use the command line you need to enter `git add *` to add all
    of your changed files to the commit you're about to do. Then type `git commit
    -m "My first git commit!"`. The text between the quote marks is your commit message.
  prefs: []
  type: TYPE_NORMAL
- en: In both cases, your commit message should describe the changes that you've made
    in this commit. Your first commit will probably be `"creating my first function"`.
  prefs: []
  type: TYPE_NORMAL
- en: Another massive advantage to Git is that you can easily create remote Git repositories.
    These are data centers that will store your Git commits so you can access them
    from anywhere in the world. The major two are GitHub and Bitbucket but there are
    lots more. They both have free versions, but GitHub is only free for public repositories
    so anyone can see your work.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've signed up for an account and created a repository, you'll be given
    a URL for it. In your terminal, navigate to your folder and run `git add remote
    origin <your url>`. This means that you can send work from your local machine
    to your online repository. Just type `git push origin master` to send your latest
    commits to your online repository. Getting them back is just as simple; just type
    `git pull origin master` and your local code will update to add in any changes
    made in your repository.
  prefs: []
  type: TYPE_NORMAL
- en: This is great for teams as it allows you to all work on your own machines but
    be able to get each other's changes.
  prefs: []
  type: TYPE_NORMAL
- en: Local development setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To summarize your new local development setup, you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A powerful IDE – VS Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon CLI-powered build scripts to create and update functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git to store your work remotely and allow easier teamwork
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about Amazon Web Services and created an account,
    giving us access to all of these services.
  prefs: []
  type: TYPE_NORMAL
- en: We created our first Lambda function using the Lambda Console, and advanced
    it to use multiple functions, template strings, and requiring in code from other
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we discussed the three main ways to create Lambdas, namely the Lambda
    Console, Cloud9, and using local development. We also looked at the advantages
    and disadvantages of each.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we used the AWS-CLI and Git to make our local development setup far
    more powerful. The build script that we used allows us to create and update Lambdas
    without ever having to go onto AWS.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn to build our first Alexa Skills using the
    Alexa Skills Kit.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Name the three main ways to create and edit Lambda functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does AWS stand for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the two main limitations of a basic local development setup?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tools do we use to improve our local development setup?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
