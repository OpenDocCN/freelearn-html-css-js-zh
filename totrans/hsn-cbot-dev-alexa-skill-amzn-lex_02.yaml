- en: Getting Started with AWS and Amazon CLI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 和 Amazon CLI 入门
- en: '**Amazon Web Services** (**AWS**) is the collection of all the tools and services
    that Amazon provides for developers in the cloud. There is a huge range of services
    available, from a server hosting to machine learning, from game streaming to digital
    marketing. Each of these services has been designed to perform one thing really
    well, but the biggest benefit is how well each of the services works together.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚马逊网络服务**（**AWS**）是亚马逊为开发者提供的所有工具和服务的集合。提供了大量的服务，从服务器托管到机器学习，从游戏流媒体到数字营销。每个服务都设计得非常好，能够完成一项任务，但最大的好处是每个服务之间协作得非常好。'
- en: In this chapter, we will create an AWS account and explore the AWS console.
    Once we've got our account set up we'll learn about Lambda functions, creating
    one of our own. This will start out as a very simple Lambda, but we'll increase
    the functionality as we go through the rest of this book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个 AWS 账户并探索 AWS 控制台。一旦我们设置了账户，我们将了解 Lambda 函数，创建我们自己的一个。这将从一个非常简单的
    Lambda 开始，但随着我们继续阅读本书的其余部分，我们将增加其功能。
- en: The next section of this chapter will talk about the different ways in which
    we can edit Lambdas and the advantages and disadvantages of each method.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的下一段将讨论我们可以编辑 Lambdas 的不同方法以及每种方法的优缺点。
- en: The final section will cover how to create an amazing local development environment,
    using AWS CLI, build scripts, and Git. By the end of this chapter, we'll have
    a local environment where we can easily deploy our Lambdas without ever having
    to go onto AWS and we can back up all of our work to remote Git repositories.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的部分将介绍如何使用 AWS CLI、构建脚本和 Git 创建一个出色的本地开发环境。到本章结束时，我们将拥有一个本地环境，我们可以轻松地部署我们的
    Lambda，而无需进入 AWS，并且可以将所有工作备份到远程 Git 仓库。
- en: 'This chapter will cover the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Creating and configuring an AWS account
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和配置 AWS 账户
- en: Creating a Lambda in AWS Console
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中创建 Lambda
- en: Three methods for editing Lambdas
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑 Lambdas 的三种方法
- en: Creating an amazing local development environment using AWS CLI, build scripts,
    and Git
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AWS CLI、构建脚本和 Git 创建一个出色的本地开发环境
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we'll be creating a few Lambdas as well as creating a build
    script.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建几个 Lambda 以及创建一个构建脚本。
- en: All of the code can be found at [http://bit.ly/chatbot-ch2.](http://bit.ly/chatbot-ch2)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码都可以在 [http://bit.ly/chatbot-ch2](http://bit.ly/chatbot-ch2) 找到。
- en: Creating an account
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建账户
- en: To access all of these services you need to create a free AWS developer account.
    Go to [aws.amazon.com](https://aws.amazon.com/) and click Create a Free Account.
    To create an account you need to follow the sign-up process. The process is very
    thorough and requires you to enter payment details and receive an automated phone
    call. This process is to validate that you are a genuine user.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问所有这些服务，您需要创建一个免费的 AWS 开发者账户。访问 [aws.amazon.com](https://aws.amazon.com/)
    并点击创建免费账户。要创建账户，您需要遵循注册流程。这个过程非常彻底，需要您输入付款详情并接收自动电话呼叫。这个过程是为了验证您是一个真正的用户。
- en: Once you've created your AWS account you can access all of the services through
    the Amazon Console ([console.aws.amazon.com](https://console.aws.amazon.com/)).
    There is a lot of useful information on the console page. Build a solution and
    Learn to build are tutorials and information on how to use some of the services.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您创建了 AWS 账户，您就可以通过 Amazon 控制台（[console.aws.amazon.com](https://console.aws.amazon.com/)）访问所有服务。控制台页面上有大量有用的信息。构建解决方案和学习构建是关于如何使用一些服务的教程和信息。
- en: Setting your region
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的区域
- en: For this book, you will need to set your region to N. Virginia or Ireland. Lex
    is currently (April 2018) available in those two regions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，您需要将您的区域设置为弗吉尼亚州北部或爱尔兰。Lex 目前（2018 年 4 月）在这两个区域可用。
- en: AWS has this concept of regions, which are locations around the world where
    Amazon have their cloud service centers. Each region is separate from all the
    others for most applications. It is best practice to deploy services to the regions
    closest to where they'll be used. If your customers are on the west coast of America
    then choosing N. California or Oregon would be best, whilst choosing Ireland wouldn't
    be a great choice. Their data would have to go halfway around the world and back
    each time they use your product.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 有一个概念，即区域，这些区域是全球各地亚马逊的云服务中心的位置。对于大多数应用程序，每个区域都与所有其他区域分开。将服务部署到它们将被使用的位置附近是最佳实践。如果您的客户位于美国西海岸，那么选择北加州或俄勒冈州将是最佳选择，而选择爱尔兰则不是很好的选择。每次他们使用您的产品时，他们的数据都必须绕地球半圈再回来。
- en: One other consideration for the regions is that not every region is equal. Some
    regions have the larger working capacity, while some don't even have all of the
    services.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于区域，还有一个考虑因素，那就是并非每个区域都是平等的。一些区域有更大的工作容量，而一些区域甚至没有所有服务。
- en: Navigating around AWS
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 AWS 中导航
- en: 'Getting around AWS has been designed to be as easy as possible. At the top
    of every page is a banner with a link to the console home page, a dropdown with
    every service available, account and location settings, and a support menu:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 中导航已被设计得尽可能简单。在每一页的顶部都有一个横幅，其中包含控制台主页的链接、包含所有可用服务的下拉菜单、账户和位置设置以及支持菜单：
- en: '![](img/42294334-3023-4260-94e9-2bc9ea8662c7.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/42294334-3023-4260-94e9-2bc9ea8662c7.png)'
- en: AWS menu and Service dropdown
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 菜单和服务下拉菜单
- en: The link to the home page and the service dropdown are the two options that
    you'll be using a lot throughout your time in AWS. When you're editing a Lambda
    and need to check a table name in Dynamo or you're creating an API Gateway for
    your EC2, you'll be switching between services a lot.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 期间，您将大量使用主页链接和服务下拉菜单这两个选项。当您正在编辑 Lambda 并需要检查 DynamoDB 中的表名，或者您正在为 EC2
    创建 API 网关时，您将频繁地在服务之间切换。
- en: You can also pin your favorite service to your banner using the drawing pin
    icon. This makes switching between your most used services even quicker.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用图钉图标将您最喜欢的服务固定到您的横幅上。这使得在您最常用的服务之间切换变得更加快捷。
- en: Creating a Lambda
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Lambda
- en: AWS Lambda functions are incredible! They’re functions that are hosted on AWS
    that can be triggered in many different ways. Lambda functions are *serverless*,
    which means that you don't need to run a server to use them. This makes it a lot
    quicker and easier to set up and use.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda 函数非常出色！它们是托管在 AWS 上的函数，可以通过许多不同的方式触发。Lambda 函数是*无服务器*的，这意味着您不需要运行服务器就可以使用它们。这使得设置和使用变得更加快速和简单。
- en: One of the best parts of AWS Lambdas is that you only pay for the time the Lambda
    function is running. Got something that only runs once an hour and only takes
    two seconds? You’ll only be charged for 48 seconds a day! That’s insane compared
    to running a 24/7 AWS EC2 server or your own private server.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda 最好的部分之一是您只为 Lambda 函数运行的时间付费。有什么东西每小时只运行一次，只持续两秒钟？您每天只需支付 48 秒！与全天候运行的
    AWS EC2 服务器或您自己的私有服务器相比，这简直是疯狂。
- en: Today, we’ll create a Lambda function and look at the three best ways to work
    with the code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们将创建一个 Lambda 函数，并查看三种最佳的工作代码方式。
- en: Once you’ve got your AWS account set up, there are a few ways to create a new
    Lambda function. We’re going to start by using the AWS Console.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您设置了 AWS 账户，就有几种方法可以创建一个新的 Lambda 函数。我们将从使用 AWS 控制台开始。
- en: AWS Console
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 控制台
- en: 'Within the AWS Console, you can find AWS Lambda in Services | Compute | Lambda,
    which takes you to the Lambda Console:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中，您可以在服务 | 计算 | Lambda 中找到 AWS Lambda，这将带您进入 Lambda 控制台：
- en: '![](img/35b426c5-b280-4400-bfd0-3a95f8af2eb6.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/35b426c5-b280-4400-bfd0-3a95f8af2eb6.png)'
- en: AWS Compute services
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 计算服务
- en: This is what you’ll see if this is your first Lambda. Click that Create function
    button to start setting up your first function.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是您第一次使用 Lambda，您将看到这个界面。点击创建函数按钮开始设置您的第一个函数。
- en: You’ll end up on the setup page, where you configure some aspects of the function
    (name, runtime, role). You can create a Lambda from Blueprints or Serverless Application
    Repos, but in this example, we'll select Author from scratch.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您将进入设置页面，在那里您可以配置函数的一些方面（名称、运行时、角色）。您可以从蓝图或无服务器应用程序仓库创建 Lambda，但在这个例子中，我们将从零开始选择作者。
- en: Setting up the Lambda
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Lambda
- en: 'Enter the name for your function (this must be unique to your user or sub-account),
    choose your Runtime (We''ll use Node.js 8.10), and select *Create new role from
    template(s)*. Give this new role a relevant name, such as `lambdaBasic` or `NoPolicyRol`,
    and leave Policy templates blank. When we create a more complex Lambda, we''ll
    have to create a role with policies and permissions:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您函数的名称（这必须对您的用户或子账户是唯一的），选择您的运行时（我们将使用Node.js 8.10），并选择“从模板创建新角色”。给这个新角色一个相关的名称，例如`lambdaBasic`或`NoPolicyRol`，并留空策略模板。当我们创建更复杂的Lambda时，我们必须创建具有策略和权限的角色：
- en: '![](img/7357f583-b6b1-4c2c-9168-2b33b66652cd.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7357f583-b6b1-4c2c-9168-2b33b66652cd.png)'
- en: New Lambda with a new role
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 带有新角色的新Lambda
- en: Writing your Lambda function's code
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写您的Lambda函数代码
- en: Once you've created your Lambda you are sent into the function editor within
    the Lambda Management Console. There is a lot going on this page, but we're focused
    on the section titled Function code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您创建了Lambda，您将被发送到Lambda管理控制台中的函数编辑器。这个页面上有很多事情，但我们专注于标题为“函数代码”的部分。
- en: When you first create a Lambda, it is created with a very basic function already
    implemented. This is nice as it gives you a starting point to build your function
    on. As we're using Node.js 8.10 as our runtime, there will be a single parameter
    of the `event` and then we will return our answer.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次创建Lambda时，它已经包含了一个非常基本的函数。这很好，因为它为您构建函数提供了一个起点。由于我们使用Node.js 8.10作为我们的运行时，将有一个名为`event`的单个参数，然后我们将返回我们的答案。
- en: As a basic example, we'll create a Lambda that takes your name and age and tells
    you what your maximum heart rate is. This can be done more efficiently than the
    way we are going to do it, but this is done more as a way to demonstrate some
    techniques for use within Lambdas.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 作为基本示例，我们将创建一个Lambda，它接受您的姓名和年龄，并告诉您您的最大心率是多少。这可以比我们即将要做的方式更高效，但这更多的是作为一种在Lambda中演示一些技术的方法。
- en: 'To start, we will `console.log` out the event and then extract the `name`and
    `age`. I''m going to use ES6 destructuring but you can also do this using normal
    variable declaration:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用`console.log`输出事件并提取`name`和`age`。我将使用ES6解构，但您也可以使用常规变量声明来完成此操作：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that we have the `name` and `age` from the event, we can pass those into
    a function that converts them into a string:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经从事件中获得了`name`和`age`，我们可以将它们传递到一个将它们转换为字符串的函数中：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you haven't seen this sort of string before, they're called **template strings**
    and they're much neater than previous string concatenation. Backticks start and
    end the string and you can insert data using `${data}`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前没有见过这种字符串，它们被称为**模板字符串**，它们比之前的字符串连接更整洁。反引号开始和结束字符串，您可以使用`${data}`插入数据。
- en: 'Now we can change `''Hello from Lambda!''` to `createString(name, age)` and
    our function will return our new string:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将`'Hello from Lambda!'`更改为`createString(name, age)`，我们的函数将返回我们的新字符串：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Make sure to save your changes by clicking the bright orange Save button in
    the upper-right corner of your Lambda toolbar:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 确保通过点击Lambda工具栏右上角的醒目橙色“保存”按钮来保存您的更改：
- en: '![](img/d33992ac-6b2c-4ef3-b769-598772ca56bf.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d33992ac-6b2c-4ef3-b769-598772ca56bf.png)'
- en: Lambda toolbar
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda工具栏
- en: To test this out, we can click Test in the Lambda toolbar.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试这一点，我们可以在Lambda工具栏中点击“测试”。
- en: 'When we click on *Test*, a Configure test event popup opens. We can use this
    to decide what gets sent to our Lambda in the event payload. Give your test a
    name and then we can configure our data. For this Lambda it is very simple, just
    an object with keys of `"name"` and `"age"`. Here''s mine:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击“测试”时，会弹出一个“配置测试事件”窗口。我们可以使用它来决定在事件有效负载中发送什么。给您的测试起个名字，然后我们可以配置我们的数据。对于这个Lambda，这非常简单，只是一个具有“name”和“age”键的对象。这是我的：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can set your values to whatever you want and then click Save at the bottom
    of the configuration screen. Now the dropdown to the left of the Test button has
    changed to be your new test name. To run the test, simply click the Test button:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将您的值设置为任何您想要的，然后点击配置屏幕底部的“保存”。现在，测试按钮左侧的下拉菜单已更改为您的新的测试名称。要运行测试，只需点击测试按钮：
- en: '![](img/8593e166-dfc9-4963-9546-865e1b6bb62f.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8593e166-dfc9-4963-9546-865e1b6bb62f.png)'
- en: Lambda result
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda结果
- en: 'If your response is still `''Hello from Lambda!''`, then make sure you''ve
    saved your function and run the test again. As you can see, I got the response
    of "Hi Sam, you are 24 years old.", which is what we expected. As well as the
    response, we get a RequestID and Function Logs. Remember when we added that `console.log(event)`
    to our code? You can now see that the object `{ name: ''Sam'', age: ''24'' }`
    was logged out. If you want to see more of your logs or logs from previous Lambda
    calls, they''re all stored in CloudWatch. To get to CloudWatch you can either
    search for it in the services or get there by selecting Monitoring at the top
    of the Lambda Console and then clicking *View logs in CloudWatch*.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你的响应仍然是 `''Hello from Lambda!''`，那么请确保你已经保存了你的函数并再次运行测试。正如你所见，我得到了“Hi Sam,
    you are 24 years old.”的响应，这正是我们预期的。此外，我们还得到了一个RequestID和函数日志。记得我们之前在代码中添加了那个`console.log(event)`吗？你现在可以看到，对象`{
    name: ''Sam'', age: ''24'' }`已经被记录下来。如果你想查看更多的日志或之前Lambda调用的日志，它们都存储在CloudWatch中。要访问CloudWatch，你可以在服务中搜索它，或者通过在Lambda控制台顶部选择“监控”然后点击“在CloudWatch中查看日志”来访问。'
- en: 'There are also some interesting graphs inside Monitoring that can tell you
    a lot about how well your function is working:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在“监控”中也有一些有趣的图表，可以告诉你你的函数工作得有多好：
- en: '![](img/b9840468-0791-4883-a5d2-b8f2a2ad466b.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b9840468-0791-4883-a5d2-b8f2a2ad466b.png)'
- en: View logs in CloudWatch
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在CloudWatch中查看日志
- en: Lambda functions can be created in a single file like we have done, but they
    also work with multiple files. When your Lambda is doing very complex tasks, you
    can break each section out into its own file to improve organization and readability.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda函数可以像我们这样做，创建在一个文件中，但它们也可以与多个文件一起工作。当你的Lambda执行非常复杂的任务时，你可以将每个部分拆分到自己的文件中，以改善组织和可读性。
- en: 'We''re going to create a new file called `hr.js`, and inside we''re going to
    create and export another function. This function is going to calculate your maximum
    heart rate based on your age. Create the new file by right-clicking in the folder
    menu and selecting New File and call it `hr.js`. Open up that file and we''ll
    create a `calculateHR` function:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`hr.js`的新文件，并在其中创建并导出另一个函数。这个函数将根据你的年龄计算你的最大心率。通过在文件夹菜单中右键单击并选择“新建文件”来创建新文件，并将其命名为`hr.js`。打开该文件，我们将创建一个`calculateHR`函数：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, back in our `index.js` file we need to import our `hr.js` file and call
    the `calculateHR` function:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到我们的`index.js`文件，我们需要导入我们的`hr.js`文件并调用`calculateHR`函数：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When we run our last test again, we get a new response of `"Hi Sam, you are
    24 years old and have a maximum heart rate of 196."`. This could have been done
    a lot more effectively, but this was done more to show you some ways that you
    can write code in Lambda functions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次运行最后的测试时，我们得到了一个新的响应：“Hi Sam, you are 24 years old and have a maximum heart
    rate of 196.”。这本来可以做得更加有效，但这样做更多的是为了向你展示一些你可以在Lambda函数中编写代码的方式。
- en: Triggering Lambdas
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发Lambda
- en: In your first Lambda, the way that we tested it was by triggering it with a
    test. To make Lambdas useful, we need to be able to trigger it from different
    places.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的第一个Lambda中，我们测试它的方式是通过触发一个测试。为了使Lambda更有用，我们需要能够从不同的地方触发它。
- en: In the Lambda Console, near the top, there is a Designer section. This section
    allows you to change how the Lambda interacts with other services and therefore
    the user. On the left of the section is an Add triggers menu with a selection
    of options. Each of these is a system of services that you can set up to trigger
    the function. These are not all of the ways to trigger a Lambda and we'll be using
    other methods in the future.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在Lambda控制台顶部附近，有一个“设计器”部分。这个部分允许你更改Lambda与其他服务交互的方式，因此也影响用户。在部分的左侧是一个“添加触发器”菜单，其中包含一系列选项。每个选项都是一个可以设置以触发函数的系统服务。这些并不是触发Lambda的所有方式，我们将在未来使用其他方法。
- en: The most important ones for us are API Gateway and Alexa Skill Kit, but the
    other triggers can be very useful for other projects. API Gateway is the way to
    expose the Lambda to the outside world. You create an API endpoint, and anyone
    can hit that endpoint and that data will be processed by your Lambda. We'll be
    creating an API in [Chapter 7](55111d86-d89c-4d8e-9577-8625a9654f4a.xhtml), *Publishing
    Your Chatbot to Facebook, Slack, Twilio and HTTP*. The Alexa Skill Kit is a service
    for building Alexa Skills and these can trigger Lambdas too, and we'll be doing
    this in the next chapter.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说，最重要的是 API 网关和 Alexa 技能套件，但其他触发器对其他项目也非常有用。API 网关是将 Lambda 暴露给外部世界的方式。你创建一个
    API 端点，任何人都可以访问该端点，数据将由你的 Lambda 处理。我们将在第 7 章[发布您的聊天机器人到 Facebook、Slack、Twilio
    和 HTTP](55111d86-d89c-4d8e-9577-8625a9654f4a.xhtml)中创建一个 API。Alexa 技能套件是用于构建 Alexa
    技能的服务，这些技能也可以触发 Lambda，我们将在下一章中这样做。
- en: Methods for working with Lambdas
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Lambda 一起工作的方法
- en: 'One of the big advantages of Lambdas is that you can choose how you write and
    edit them. There are three main ways to do so:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 的一大优点是你可以选择如何编写和编辑它们。主要有三种方法可以实现：
- en: Lambda Console
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda 控制台
- en: Cloud9
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud9
- en: On your local machine
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的本地机器上
- en: I’m going to cover all three and discuss the advantages and disadvantages of
    each of them.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我将涵盖所有三种方法，并讨论每种方法的优缺点。
- en: Method 1 – Lambda Console
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法 1 – Lambda 控制台
- en: This is the way that we have just created our first Lambda function. In the
    Lambda Console, we have a basic editor. It’s based on the Cloud9 IDE and works
    well for simple Lambda functions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们创建的第一个 Lambda 函数的方式。在 Lambda 控制台中，我们有一个基本的编辑器。它基于 Cloud9 IDE，非常适合简单的 Lambda
    函数。
- en: '**The advantages:**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**优点：**'
- en: It’s a good editor
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个好的编辑器
- en: You can access it from any computer through your AWS Console
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过你的 AWS 控制台从任何电脑访问它
- en: '**The disadvantages:**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺点：**'
- en: It doesn’t seem to be very stable. Sometimes it doesn’t let you save so you
    have to copy all of your work to a local file, reload the page, and copy your
    work back. I hope that this gets fixed soon!
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它似乎不是很稳定。有时它不允许你保存，所以你必须将所有的工作复制到本地文件，重新加载页面，然后将工作复制回来。我希望这个问题很快就能得到解决！
- en: It doesn’t have a command-line interface. This means that you can’t install
    `npm` packages using this method alone.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有命令行界面。这意味着你不能仅使用这种方法安装 `npm` 软件包。
- en: You need internet access to work on your Lambdas.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要互联网访问才能在 Lambda 上工作。
- en: Method 2 – Cloud9 editor
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法 2 – Cloud9 编辑器
- en: Amazon recently acquired Cloud9, an online development platform. It runs a very
    basic version of Ubuntu that is integrated with the rest of the AWS platform.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊最近收购了 Cloud9，一个在线开发平台。它运行了一个与 AWS 平台集成的非常基础的 Ubuntu 版本。
- en: Search for `Cloud9` in the AWS Console, go to the page, and select Create environment.
    From here you give your environment a name and go to the next step.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中搜索 `Cloud9`，进入页面，然后选择创建环境。从这里你可以给你的环境命名，然后进入下一步。
- en: Here you get to choose what you want to run this environment on. The great thing
    is that t2.micro is free-tier-eligible, so you can use this method without getting
    charged anything if you're on the free tier. I’ve never needed anything more powerful
    than a t2.micro.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你可以选择你想在这个环境中运行什么。很棒的是，t2.micro 是免费层可用的，所以如果你在免费层，你可以使用这种方法而不必支付任何费用。我从未需要比
    t2.micro 更强大的东西。
- en: Complete the setup process and you’ll end up in your new Cloud9 environment!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 完成设置过程，你将进入你新的 Cloud9 环境！
- en: 'The cool thing about this is that you have access to all of your Lambda functions
    from inside your Cloud9 environment. Click AWS Resources and under Remote Functions,
    you''ll find all of your functions. Click on the Lambda function you want to edit
    and then hit the download icon above to import it into your environment:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这很酷，因为你可以从你的 Cloud9 环境内部访问所有的 Lambda 函数。点击 AWS 资源，在远程函数下，你会找到所有的函数。点击你想要编辑的
    Lambda 函数，然后点击上面的下载图标将其导入到你的环境中：
- en: '![](img/98dd55ee-b2c7-47d0-a9dd-de1484fd7669.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98dd55ee-b2c7-47d0-a9dd-de1484fd7669.png)'
- en: Accessing remote Lambdas
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 访问远程 Lambda
- en: Once that's done, it'll just be like you're working on it locally.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，它就会像你在本地工作一样。
- en: Once you’re finished, just select the function you’ve been working on from the
    local list and hit the upload button. Within a few seconds, it’ll be live with
    all your changes.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，只需从本地列表中选择你一直在工作的函数，然后点击上传按钮。几秒钟内，所有更改都会生效。
- en: '**The advantages**:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**优点：**'
- en: Again, this is all remote so you don’t need to worry about forgetting to commit
    your work or saving it to a memory stick if you work on multiple machines.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次强调，这一切都是远程的，所以您不需要担心忘记提交工作或保存到 U 盘，如果您在多台机器上工作。
- en: Accessing your functions and reuploading them is super easy. This is by far
    the best bit about this method.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问您的函数并重新上传它们非常简单。这是这种方法中最好的部分。
- en: You now have an integrated terminal, allowing you to install `npm` packages
    and do everything else you want to do using the terminal.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您现在拥有一个集成的终端，允许您安装 `npm` 软件包并使用终端完成所有其他您想做的事情。
- en: '**The disadvantages**:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺点**：'
- en: It still has the same stability issues that the Lambda Console editor has. I’ve
    had multiple occasions where I’ve tried to save the function but couldn’t, and
    have had to copy to local, refresh, and recopy to Cloud 9\. This becomes very
    annoying very quickly.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它仍然存在与 Lambda 控制台编辑器相同的不稳定问题。我多次尝试保存函数但未能成功，不得不复制到本地，刷新，然后重新复制到 Cloud 9。这会很快变得非常烦人。
- en: You need internet access to work on your Lambdas.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要互联网连接来处理您的 Lambda。
- en: Method 3 – Local editing
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法 3 – 本地编辑
- en: I'm going to do this one a little differently. I'll list the advantages and
    disadvantages of a basic usage and then show you how to make it much better.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我将稍微改变一下做法。我会列出基本使用的优缺点，然后向您展示如何使其变得更好。
- en: '**The advantages**:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**优点**：'
- en: Local editing is how most developers will work. We can use our favorite IDE,
    extensions, and color schemes.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地编辑是大多数开发者将采用的工作方式。我们可以使用我们喜欢的 IDE、扩展和配色方案。
- en: It’s stable (as long as your computer is).
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它很稳定（只要您的电脑是稳定的）。
- en: You can work on your Lambdas without needing an internet connection.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在没有互联网连接的情况下处理您的 Lambda。
- en: '**The disadvantages**:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺点**：'
- en: There’s no fancy button to get and upload your work to AWS
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有花哨的按钮来获取和上传您的工作到 AWS。
- en: Your work is local, so having multiple users or just working on multiple devices
    is more complex
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的工作是本地的，因此拥有多个用户或同时在多个设备上工作会更复杂。
- en: To make this method into the perfect system, we are going to make use of Amazon
    CLI and Git. It should take about 15 minutes to set up everything we need!
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这种方法成为完美的系统，我们将利用 Amazon CLI 和 Git。设置我们所需的一切大约需要 15 分钟！
- en: Creating the best local development environment
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建最佳本地开发环境
- en: As we've already seen, there are some brilliant aspects of writing Lambdas locally,
    which is why we are going to use it throughout this book. We're going to choose
    an IDE and install NodeJS and NPM before setting up a folder structure for our
    Lambdas. Finally, we'll use the AWS CLI and Git to create awesome tools to get
    rid of the normal disadvantages of working locally.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经看到的，本地编写 Lambda 有一些非常出色的方面，这就是为什么我们将在这本书中一直使用它。我们将选择一个 IDE，安装 NodeJS 和
    NPM，然后在为 Lambda 设置文件夹结构之前。最后，我们将使用 AWS CLI 和 Git 创建一些工具，以消除本地工作的正常缺点。
- en: Choosing an IDE
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择 IDE
- en: Which IDE you use is down to personal preference; there are a few great ones
    out there, including Atom, Komodo, and Brackets. If you already have a personal
    favorite then you can use that, but all of the examples will use **Visual Studio
    Code** (**VS Code**).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您使用哪个 IDE 取决于个人喜好；市面上有一些非常出色的 IDE，包括 Atom、Komodo 和 Brackets。如果您已经有了个人偏好的 IDE，那么您可以使用它，但所有示例都将使用
    **Visual Studio Code** （**VS Code**）。
- en: VS Code is an open source IDE developed by Microsoft and is made for macOS,
    Linux, and Windows. It has built-in support for JavaScript, Node, and TypeScript
    and you can install extensions from the extension library. These extensions are
    one of the biggest advantages to using VS Code as they allow you to customize
    so much about your experience. From colored indentations to linting, from better
    icons to auto-formatters. They vary from the *sort of interesting* to the *making
    your life far easier*.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 是由微软开发的开源 IDE，适用于 macOS、Linux 和 Windows。它内置了对 JavaScript、Node 和 TypeScript
    的支持，并且您可以从扩展库中安装扩展。这些扩展是使用 VS Code 的最大优势之一，因为它们允许您对您的体验进行大量自定义。从彩色缩进来代码检查，从更好的图标到自动格式化器。它们从“有点有趣”到“使您的生活变得容易得多”不等。
- en: As well as the extensions, VS Code has more great features such as an integrated
    terminal, Git integration, and a built-in debugger. If you've not tried it before,
    I would recommend trying it out for a week and seeing how it compares to your
    current IDE of choice.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 除了扩展之外，VS Code 还具有更多出色的功能，如集成终端、Git 集成和内置调试器。如果您之前没有尝试过，我建议您尝试一周，看看它与您当前选择的
    IDE 相比如何。
- en: To install VS Code, just go to [code.visualstudio.com](https://code.visualstudio.com/)
    and download the version you need for your operating system.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装VS Code，只需访问[code.visualstudio.com](https://code.visualstudio.com/)并下载适合你操作系统的版本。
- en: Installing Node and NPM
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Node和NPM
- en: Node is the runtime that allows us to run JavaScript code on a server. It has
    gained massive favor over the last few years and is powering applications in almost
    every sector of technology. It is also one of the runtimes that can be chosen
    on Lambda functions.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Node是允许我们在服务器上运行JavaScript代码的运行时。在过去的几年中，它获得了巨大的青睐，几乎在技术领域的每个行业中都在运行应用程序。它也是可以在Lambda函数中选择的一种运行时。
- en: Along with Node, we get **Node Package Manager** (`npm`), which is the largest
    ecosystem of open source libraries in the world. This is great for us and we'll
    be using some of these packages throughout this book.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Node之外，我们还获得了**Node包管理器**（`npm`），这是世界上最大的开源库生态系统。这对我们来说是个好消息，我们将在本书中用到其中的一些包。
- en: To install Node and `npm` you can download the installation packages from [nodejs.org](https://nodejs.org/)
    or through a package manager. Make sure that you install at least version 8.11.1
    because we will be using *async/await* in our work, and this requires at least
    version 8\. Once you have installed everything you can test that it's working
    by typing `node -v` ; you should get something like `v8.11.1`. You can also test
    `npm` by typing `npm -v`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Node和`npm`，你可以从[nodejs.org](https://nodejs.org/)下载安装包，或者通过包管理器进行安装。确保你安装至少版本8.11.1，因为我们将在我们的工作中使用*async/await*，这至少需要版本8。一旦安装了所有东西，你可以通过输入`node
    -v`来测试它是否正常工作；你应该得到类似`v8.11.1`的结果。你还可以通过输入`npm -v`来测试`npm`。
- en: Folder structure
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件夹结构
- en: To properly organize all of your Lambdas it is a good idea to have them all
    stored in a single folder. This will allow a single script to create and update
    all of your Lambdas. Within this main folder, having sub-folders containing groups
    of Lambdas is definitely a good idea. You can very quickly build up a large number
    of Lambdas.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确组织所有的Lambdas，将它们都存储在单个文件夹中是个好主意。这将允许一个脚本创建和更新所有的Lambdas。在这个主文件夹内，拥有包含Lambdas组的子文件夹绝对是个好主意。你可以非常快速地构建大量的Lambdas。
- en: Setting up AWS CLI
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置AWS CLI
- en: To upload our work directly to AWS, we can use the AWS CLI. This allows us to
    manage our AWS services from the command line and create scripts to automate common
    tasks. For us, the most important CLI commands are the ones that allow us to create
    and update Lambdas. With automated scripts we now have the ability to quickly
    and easily create and deploy Lambdas, fixing the first of the *local editing*
    limitations.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的工作直接上传到AWS，我们可以使用AWS CLI。这允许我们从命令行管理我们的AWS服务并创建脚本来自动化常见任务。对我们来说，最重要的CLI命令是那些允许我们创建和更新Lambdas的命令。通过自动脚本，我们现在能够快速轻松地创建和部署Lambdas，解决了*本地编辑*的第一个限制。
- en: To use the AWS CLI, we first need to set it up. You can install it by typing
    `npm install -g aws-cli` into your terminal.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用AWS CLI，我们首先需要设置它。你可以在终端中输入`npm install -g aws-cli`来安装它。
- en: 'Now we need to set up a user for our CLI to log in as. Log in to your AWS Console
    and navigate to or search for `IAM`. Click Add user so we can set up a user for
    our CLI. You''re asked to give the user a name, so choose something like `cli-user`
    so that it is easily identifiable. Select Programmatic access, which will allow
    us to act as the user remotely, and click Next: Permissions.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为我们的CLI设置一个用户。登录到你的AWS控制台并导航到或搜索`IAM`。点击添加用户，这样我们就可以为CLI设置一个用户。你需要为用户命名，所以选择像`cli-user`这样的名字，这样它就很容易被识别。选择程序访问，这将允许我们远程代表用户操作，然后点击下一步：权限。
- en: In the Permissions screen, choose to Attach existing policies directly and select
    AdministratorAccess. This will let you do whatever you want through your CLI.
    You can set stricter policies on this user if you want, or if you are giving another
    person access to your account.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在权限屏幕上，选择直接附加现有策略并选择AdministratorAccess。这将允许你通过CLI做任何你想做的事情。如果你想的话，可以为此用户设置更严格的政策，或者如果你正在将账户访问权限授予另一个人。
- en: 'There’s another screen before you end up being shown your access keys. Copy
    your access keys and open a terminal. Run the command `aws configure`, which will
    ask you for four things:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在你最终看到访问密钥之前，还有一个屏幕。复制你的访问密钥并打开一个终端。运行命令`aws configure`，它将要求你提供四件事：
- en: '[PRE6]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first two are found on the last page of the user creation. The third must
    be the region you chose earlier (`eu-west-1` or `us-east-1`), and the last one
    can be left as default.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个可以在用户创建的最后页面找到。第三个必须是之前选择的区域（`eu-west-1` 或 `us-east-1`），最后一个可以保留为默认值。
- en: Creating a Lambda using AWS CLI
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWS CLI 创建 Lambda
- en: 'Now that we’ve got the CLI set up, we can use it to make our lives much easier.
    To create a new function, you need to have a folder containing an `index.js` file
    with a basic Lambda code in. Navigate into that folder in your terminal and now
    you can run these commands:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了 CLI，我们可以使用它来使我们的生活更加轻松。要创建一个新的函数，你需要有一个包含一个 `index.js` 文件并包含基本 Lambda
    代码的文件夹。在终端中进入该文件夹，现在你可以运行这些命令：
- en: '[PRE7]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Switch out the `your-lambda-role` for the `arn` of the role that you created
    earlier. You can find this by going back to the `IAM` service in AWS and selecting
    `Roles` and clicking on your Lambda role:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `your-lambda-role` 替换为你之前创建的角色 ARN。你可以通过回到 AWS 中的 `IAM` 服务并选择 `Roles`，然后点击你的
    Lambda 角色来找到它：
- en: '![](img/8709b28d-257e-4a49-bc49-42b1e9789a1e.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8709b28d-257e-4a49-bc49-42b1e9789a1e.png)'
- en: Find your role ARN
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 查找您的角色 ARN
- en: When you run this it will return a JSON blob with some information about your
    newly created Lambda.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个脚本时，它将返回一个包含有关新创建的 Lambda 的信息的 JSON 块。
- en: 'If you edit your `index.js` code and want to update the Lambda, then there
    are three commands you need to run:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你编辑你的 `index.js` 代码并想要更新 Lambda，那么你需要运行三个命令：
- en: '[PRE8]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using these scripts, you can now write your code locally and deploy it to AWS.
    This is good but it can be improved, which is what we're going to do next.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些脚本，你现在可以在本地编写代码并将其部署到 AWS。这很好，但它可以改进，这正是我们接下来要做的。
- en: AWS CLI build script
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS CLI 构建脚本
- en: These CLI commands are good, but typing this all out every time you want to
    upload a new Lambda version becomes annoying. We’re going to use a build script
    to automate these commands and add in a few extra features.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 CLI 命令很好，但每次你想上传新的 Lambda 版本时都要全部输入一遍，这会变得很烦人。我们将使用一个构建脚本来自动化这些命令并添加一些额外功能。
- en: This script is going to be a bash script, so if you are running macOS or Linux
    then this will work natively. If you are on Windows then you'll need to install
    a bash terminal on your machine.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本将是一个 bash 脚本，所以如果你正在运行 macOS 或 Linux，那么它将原生工作。如果你在 Windows 上，那么你需要在你的机器上安装一个
    bash 终端。
- en: 'For this exact script to work, you need to have a folder structure as shown
    in the following screenshot. Each Lambda has a folder with the relevant files:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个脚本正常工作，你需要有一个如以下截图所示的文件夹结构。每个 Lambda 都有一个包含相关文件的文件夹：
- en: '![](img/1dd899f5-315e-48ba-aa00-aef0dcf573c5.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1dd899f5-315e-48ba-aa00-aef0dcf573c5.png)'
- en: Folder structure
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹结构
- en: We will create a script that not only runs the basic AWS CLI commands, but also
    does extra checks, runs `npm install`, and echos out details about the progress.
    This script will be executed by running `./build lambda-folder`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个脚本，它不仅运行基本的 AWS CLI 命令，还进行额外的检查，运行 `npm install`，并输出有关进度的详细信息。这个脚本将通过运行
    `./build lambda-folder` 来执行。
- en: Create a new file called `build.sh` in your `lambdas` folder. Alternatively,
    you can download this file from [http://bit.ly/chatbot-ch2](http://bit.ly/chatbot-ch2)
    and follow along to see how it works.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `lambdas` 文件夹中创建一个名为 `build.sh` 的新文件。或者，你可以从 [http://bit.ly/chatbot-ch2](http://bit.ly/chatbot-ch2)
    下载此文件，并按照说明查看它是如何工作的。
- en: 'To start, we will check that exactly one parameter has been passed in the command.
    `"$#"` means the number of parameters and `-ne 1` means not equal to 1:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将检查命令中是否恰好传递了一个参数。`"$#"` 表示参数的数量，`-ne 1` 表示不等于 1：
- en: '[PRE9]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we need to move into the folder for the selected Lambda and check that
    the folder exists:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要进入所选 Lambda 的文件夹并检查该文件夹是否存在：
- en: '[PRE10]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We don''t want to upload our Lambda without making sure that we''ve installed
    all of the dependencies, so we make sure to run `npm install` and check that it
    has been successful:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望在确保安装了所有依赖项之前上传 Lambda，所以我们确保运行 `npm install` 并检查它是否成功：
- en: '[PRE11]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The last of the setup steps is to check that `aws-cli` is installed:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 设置步骤的最后一步是检查 `aws-cli` 是否已安装：
- en: '[PRE12]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With everything set up, we can create our new ZIP file. Before creating the
    new `.zip` file, we''ll delete the old one. Creating a new one this time is a
    little bit more advanced than before. We exclude `.git`, `.sh`, and `.zip` files
    as well as excluding `test` folders and `node_modules/aws-sdk` from the file.
    We can exclude `aws-sdk` because it is already installed on all Lambda functions
    and we don''t want to upload Git files, bash scripts, or other `.zip` files:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 一切设置妥当后，我们可以创建新的ZIP文件。在创建新的`.zip`文件之前，我们将删除旧的文件。这次创建新文件比以前稍微复杂一些。我们排除了`.git`、`.sh`和`.zip`文件，以及排除`test`文件夹和`node_modules/aws-sdk`文件。我们可以排除`aws-sdk`，因为它已经安装在了所有Lambda函数上，而且我们不希望上传Git文件、bash脚本或其他`.zip`文件：
- en: '[PRE13]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, all there is left to do is to upload it to AWS. We want to make this as
    easy as possible so we''re going to try creating a new function. If that errors
    then we''ll try updating the function. This could be done as a *get* and then
    *create* or *update*, but a failure to *create* is actually quicker than a *get*:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们剩下的唯一任务是将其上传到AWS。我们希望尽可能简化这个过程，所以我们将尝试创建一个新的函数。如果创建过程中出现错误，我们将尝试更新该函数。这可以作为一个*get*操作然后是*create*或*update*操作，但*create*操作失败实际上比*get*操作更快：
- en: '[PRE14]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To make the script executable, we need to change the permissions on the file.
    To do this, we run `chmod +x ./build.sh`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 要使脚本可执行，我们需要更改文件的权限。为此，我们运行`chmod +x ./build.sh`。
- en: Now, all you need to do is to navigate to the main folder where the Lambdas
    function resides and run `./build.sh example-lambda`. If you have Lambdas folders
    nested in groups, then navigate into the group folders and run `../build.sh lambda-in-group`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你只需要导航到Lambda函数所在的主文件夹，并运行`./build.sh example-lambda`。如果你有嵌套在组中的Lambdas文件夹，那么进入组文件夹并运行`../build.sh
    lambda-in-group`。
- en: If you want, you can move the build script to your home directory to make execution
    `~/build.sh lambda-function`, which is only useful if you have Lambdas in separate
    folders or highly nested folders.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想，你可以将构建脚本移动到你的主目录中，使其执行命令为`~/build.sh lambda-function`，这仅在你在单独的文件夹或高度嵌套的文件夹中有Lambdas时才有用。
- en: This script could be modified and expanded to include region-specific uploading,
    batch uploading multiple Lambda functions, Git integration, and lots more.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本可以被修改和扩展，以包括特定区域的上传、批量上传多个Lambda函数、Git集成以及更多功能。
- en: Git
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git
- en: A lot of people reading this will use Git already. There’s a reason for that—it
    makes life simpler. Having a Git repository for all of your Lambda functions is
    a great way to work with teams of developers or by yourself on multiple machines.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读这篇文档的很多人可能已经使用Git了。这有原因——它使生活变得更简单。为所有Lambda函数创建一个Git仓库是与开发团队或个人在多台机器上协作的绝佳方式。
- en: Installing Git on your system varies depending on your operating system. Linux
    users can install Git through the command line, macOS users can install using
    Homebrew or via download, and Windows users have to install Git via download.
    Details on exactly how to install for your system are available on [git-scm.com](https://git-scm.com/).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的系统上安装Git的方式取决于你的操作系统。Linux用户可以通过命令行安装Git，macOS用户可以使用Homebrew或下载安装，Windows用户必须通过下载安装Git。有关如何为你的系统安装的详细信息，可在[git-scm.com](https://git-scm.com/)上找到。
- en: Once you have Git installed, navigate in the terminal to your Lambda folder.
    When inside that folder, run `git init` to create an empty repository. When you
    open your Lambda folder in VS Code, you will now have a number hovering over the
    Git symbol. This means that you have edited that number of files since your last
    Git commit.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了Git，在终端导航到你的Lambda文件夹。当你在该文件夹内时，运行`git init`以创建一个空仓库。当你用VS Code打开Lambda文件夹时，现在你会在Git符号上看到一个悬停的数字。这意味着自你上次Git提交以来，你已经编辑了这么多文件。
- en: Committing to Git is like taking a snapshot of all of the work in the folder
    and saving it. This is useful as it allows you to see how your work changes over
    time. To commit your work (take the snapshot) you have two options.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 将更改提交到Git就像是对文件夹中所有工作的快照并保存它。这很有用，因为它允许你看到你的工作是如何随时间变化的。要提交你的工作（进行快照），你有两种选择。
- en: 'You can use the Git integration with VS Code to create the commit. Click on
    the Git symbol with the number hovering over it. When you click on that, it opens
    the changes menu, showing you all of the files that you have changed since your
    last commit, or all of your files if this is your first commit. To commit the
    changed work, type a message into the message box at the top and click the tick
    above that:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用VS Code的Git集成来创建提交。点击带有数字悬停的Git符号。当你点击它时，它会打开更改菜单，显示自你上次提交以来你更改的所有文件，或者如果你这是第一次提交，显示所有文件。要提交更改的工作，请在顶部的消息框中输入一条消息，然后点击上面的勾号：
- en: '![](img/7408a1da-e61a-47c4-8823-59ba000b021a.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7408a1da-e61a-47c4-8823-59ba000b021a.png)'
- en: Git commit using VS Code integration
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 使用VS Code集成进行Git提交
- en: If you want to use the command line you need to enter `git add *` to add all
    of your changed files to the commit you're about to do. Then type `git commit
    -m "My first git commit!"`. The text between the quote marks is your commit message.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要使用命令行，你需要输入`git add *`将所有更改的文件添加到你即将进行的提交中。然后输入`git commit -m "我的第一次git提交！"`。引号之间的文本是你的提交信息。
- en: In both cases, your commit message should describe the changes that you've made
    in this commit. Your first commit will probably be `"creating my first function"`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，你的提交信息应该描述你在这次提交中做出的更改。你的第一次提交可能将是“创建我的第一个函数”。
- en: Another massive advantage to Git is that you can easily create remote Git repositories.
    These are data centers that will store your Git commits so you can access them
    from anywhere in the world. The major two are GitHub and Bitbucket but there are
    lots more. They both have free versions, but GitHub is only free for public repositories
    so anyone can see your work.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Git的另一个巨大优势是你可以轻松创建远程Git仓库。这些数据中心将存储你的Git提交，这样你就可以从世界任何地方访问它们。主要两个是GitHub和Bitbucket，但还有很多。它们都有免费版本，但GitHub只有公共仓库是免费的，所以任何人都可以看到你的工作。
- en: Once you've signed up for an account and created a repository, you'll be given
    a URL for it. In your terminal, navigate to your folder and run `git add remote
    origin <your url>`. This means that you can send work from your local machine
    to your online repository. Just type `git push origin master` to send your latest
    commits to your online repository. Getting them back is just as simple; just type
    `git pull origin master` and your local code will update to add in any changes
    made in your repository.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你注册了账户并创建了一个仓库，你将获得一个用于它的URL。在你的终端中，导航到你的文件夹并运行`git add remote origin <your
    url>`。这意味着你可以从你的本地机器发送工作到你的在线仓库。只需输入`git push origin master`将你的最新提交发送到你的在线仓库。获取它们同样简单；只需输入`git
    pull origin master`，你的本地代码将更新以添加你在仓库中做出的任何更改。
- en: This is great for teams as it allows you to all work on your own machines but
    be able to get each other's changes.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于团队来说非常棒，因为它允许你们每个人在自己的机器上工作，但又能获取到彼此的更改。
- en: Local development setup
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地开发设置
- en: 'To summarize your new local development setup, you have the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 总结你的新本地开发设置，你拥有以下内容：
- en: A powerful IDE – VS Code
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强大的IDE - VS Code
- en: Amazon CLI-powered build scripts to create and update functions
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由Amazon CLI驱动的构建脚本用于创建和更新函数
- en: Git to store your work remotely and allow easier teamwork
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Git远程存储你的工作并允许更轻松的团队合作
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned about Amazon Web Services and created an account,
    giving us access to all of these services.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了亚马逊网络服务并创建了一个账户，这使我们能够访问所有这些服务。
- en: We created our first Lambda function using the Lambda Console, and advanced
    it to use multiple functions, template strings, and requiring in code from other
    files.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Lambda控制台创建了我们的第一个Lambda函数，并将其升级为使用多个函数、模板字符串和从其他文件中引入代码。
- en: Next, we discussed the three main ways to create Lambdas, namely the Lambda
    Console, Cloud9, and using local development. We also looked at the advantages
    and disadvantages of each.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们讨论了创建Lambda的三个主要方法，即Lambda控制台、Cloud9和本地开发。我们还探讨了每种方法的优缺点。
- en: Finally, we used the AWS-CLI and Git to make our local development setup far
    more powerful. The build script that we used allows us to create and update Lambdas
    without ever having to go onto AWS.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用了AWS-CLI和Git来使我们的本地开发设置更加强大。我们使用的构建脚本允许我们创建和更新Lambda函数，而无需进入AWS。
- en: In the next chapter, we will learn to build our first Alexa Skills using the
    Alexa Skills Kit.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Alexa技能套件构建我们的第一个Alexa技能。
- en: Questions
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Name the three main ways to create and edit Lambda functions.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出创建和编辑Lambda函数的三个主要方法。
- en: What does AWS stand for?
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS代表什么？
- en: What are the two main limitations of a basic local development setup?
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基本本地开发设置的两个主要局限性是什么？
- en: What tools do we use to improve our local development setup?
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用哪些工具来改进我们的本地开发设置？
