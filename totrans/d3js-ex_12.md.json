["```js\n{ \n    \"type\": name of the type of geometry (point, line string, ...)\n    \"coordinates\": one or more tuple of latitude / longitude\n}\n```", "```js\n{\n    \"type\": \"Point\", \n    \"coordinates\": [30, 10]\n}\n```", "```js\n{ \n    \"type\": \"LineString\", \n    \"coordinates\": [\n        [30, 10], [10, 30], \n        [40, 40] ]\n}\n```", "```js\n{ \n    \"type\": \"Polygon\", \n    \"coordinates\": \n    [\n        [[30, 10], [40, 40],\n         [20, 40], [10, 20], \n         [30, 10]] \n    ]\n}\n```", "```js\n{ \n    \"type\": \"Polygon\", \n    \"coordinates\": \n        [\n          [[35, 10], [45, 45], \n           [15, 40], [10, 20], \n           [35, 10]], \n          [[20, 30], [35, 35],\n           [30, 20], [20, 30]] \n        ]\n}\n```", "```js\n{ \n    \"type\": \"MultiPoint\", \n    \"coordinates\": \n     [[10, 40], [40, 30], \n      [20, 20], [30, 10]]\n}\n```", "```js\n{ \n\"type\": MultiLineString\", \n   \"coordinates\": \n   [\n     [[10, 10], [20, 20],\n      [10, 40]], \n    [[40, 40], [30, 30], \n     [40, 20], [30, 10]] \n   ]\n}\n```", "```js\n{ \n    \"type\": \"MultiPolygon\", \n    \"coordinates\": [\n        [ [[40, 40], [20, 45], [45, 30], [40, 40]] ], \n        [ [[20, 35], [10, 30], [10, 10], [30, 5], [45, 20],\n           [20, 35]], \n          [[30, 20], [20, 15], [20, 25], [30, 20]]  ]  ]\n}\n```", "```js\n{\n  \"type\": \"Feature\",\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [46.862633, -114.011593]   \n  },\n  \"properties\": {\n    \"name\": \"Missoula\"  \n   }\n}\n```", "```js\n{ \n    \"type\": \"FeatureCollection\",\n    \"features\": [\n      { \"type\": \"Feature\",\n        \"geometry\": {\"type\": \"Point\", \n        \"coordinates\": [102.0, 0.5]},\n        \"properties\": {\"prop0\": \"value0\"} },\n      { \"type\": \"Feature\",\n        \"geometry\": {\n          \"type\": \"LineString\",\n          \"coordinates\": [\n            [102.0, 0.0], [103.0, 1.0],[104.0, 0.0], [105.0, 1.0]]\n          },\n        \"properties\": { \"prop0\": \"value0\", \"prop1\": 0.0 }\n        },\n      { \"type\": \"Feature\",\n         \"geometry\": {\n           \"type\": \"Polygon\",\n           \"coordinates\": [\n             [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n               [100.0, 1.0], [100.0, 0.0] ]  ]\n         },\n         \"properties\": {\n           \"prop0\": \"value0\", \"prop1\": {\"this\": \"that\"} }\n         }\n       ]\n     }\n```", "```js\n{\n  \"type\": \"Topology\",\n  \"objects\": {\n    \"example\": {\n      \"type\": \"GeometryCollection\",\n      \"geometries\": [\n        { \"type\": \"Point\",\n          \"properties\": {\n            \"prop0\": \"value0\" },\n          \"coordinates\": [102, 0.5]\n        },\n        { \"type\": \"LineString\",\n          \"properties\": {\n            \"prop0\": \"value0\",\n            \"prop1\": 0 },\n          \"arcs\": [0]\n        },\n        { \"type\": \"Polygon\",\n          \"properties\": {\n            \"prop0\": \"value0\",\n            \"prop1\": {\n              \"this\": \"that\"\n            }\n          },\n          \"arcs\": [[-2]]\n        }\n      ]\n    }\n  },\n  \"arcs\": [\n    [[102, 0], [103, 1], [104, 0], [105, 1]],\n    [[100, 0], [101, 0], [101, 1], [100, 1], [100, 0]]  ]\n}\n```", "```js\n{\"type\":\"FeatureCollection\",\"features\":[\n  { \"type\": \"Feature\",\n    \"id\": \"01\",\n    \"properties\": { \"name\": \"Alabama\" },\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [ [\n          [ -87.359296, 35.00118 ], [ -85.606675, 34.984749 ], \n          [ -85.431413, 34.124869 ], [ -85.184951, 32.859696 ], \n          [ -85.069935, 32.580372 ], [ -84.960397, 32.421541 ],\n          [ -85.004212, 32.322956 ], [ -84.889196, 32.262709 ], \n...\n```", "```js\nvar width = 950, height = 500;\nvar svg = d3.select('body')\n    .append('svg')\n    .attr({\n        width: width,\n        height: height\n    });\n```", "```js\nvar url = 'https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/us-states.json';\nd3.json(url, function (error, data) {\n    var path = d3.geo.path();\n    svg.selectAll('path')\n        .data(data.features)\n        .enter()\n        .append('path')\n        .attr('d', path);\n});\nd3.json(\"/data/us-states.json\", function (error, data) {\n```", "```js\nsvg.selectAll('path')\n   .data(data.features)\n   .enter()\n   .append('path')\n   .attr('d', path)\n      .style({ fill: 'none', stroke: 'black' });\n```", "```js\nvar projection = d3.geo.albersUsa()\n    .translate([width / 2, height / 2]);\n```", "```js\nvar path = d3.geo.path()\n    .projection(projection);\n```", "```js\nvar projection = d3.geo.albersUsa()\n    .translate([width / 2, height / 2])\n    .scale([width]);\n```", "```js\nvar path = d3.geo.path();\nvar countries = topojson.feature(world,\n                           world.objects.countries).features;\nsvg.selectAll('path')\n    .data(countries)\n    .enter()\n    .append('path')\n    .attr('d', path)\n    .style({\n        fill: 'black',\n        stroke: 'white'\n    });\n```", "```js\n    var projection = d3.geo.mercator()\n        .scale((width + 1) / 2 / Math.PI)\n        .translate([width / 2, height / 2]);\n    var path = d3.geo.path().projection(projection);\n```", "```js\n    var projection = d3.geo.orthographic();\n    var path = d3.geo.path().projection(projection);\n```", "```js\nvar projection = d3.geo.orthographic()\n   .clipAngle(90);\n```", "```js\nvar projection = d3.geo.orthographic()\n    .scale(300)\n    .clipAngle(90)\n    .translate([width / 2, height / 2]); \n```", "```js\nvar projection = d3.geo.orthographic()\n    .scale(300)\n    .clipAngle(90)\n    .translate([width / 2, height / 2])\n    .rotate([90, -40]);\n```", "```js\nvar color = d3.scale.category20();\nvar countries = topojson.feature(world,\n                         world.objects.countries).features;\nvar neighbors = topojson.neighbors(\n                         world.objects.countries.geometries);\n```", "```js\nvar color = d3.scale.category20();\nsvg.selectAll('.country')\n    .data(countries)\n    .enter()\n    .append('path')\n    .attr('d', path)\n    .style('fill', function (d, i) {\n        return color(d.color = d3.max(neighbors[i],\n            function (n) { \n                return countries[n].color; \n            })\n            + 1 | 0);\n    });\n```", "```js\nvar graticule = d3.geo.graticule();\nsvg.append('path')\n    .datum(graticule)\n    .attr('d', path)\n    .style({\n        fill: 'none',\n        stroke: '#777',\n        'stroke-width': '.5px',\n        'stroke-opacity': 0.5\n    });\n```", "```js\nvar zoom = d3.behavior.zoom()\n    .scaleExtent([1, 5])\n    .on('zoom', moveAndZoom);\n\nvar svg = d3.select('body')\n    .append('svg')\n    .attr({\n        width: width,\n        height: height\n     })\n    .call(zoom);\nvar mainGroup = svg.append('g');\n```", "```js\nfunction moveAndZoom() {\n    var t = d3.event.translate;\n    var s = d3.event.scale;\n\n    var x = Math.min(\n        (width / height) * (s - 1),\n        Math.max(width * (1 - s), t[0]));\n\n    var h = height / 4;\n    var y = Math.min(\n        h * (s - 1) + h * s,\n        Math.max(height * (1 - s) - h * s, t[1]));\n\n    mainGroup.attr('transform', 'translate(' + x + ',' + y +\n                                        ')scale(' + s + ')');\n}\n```", "```js\nmainGroup.style({\n    stroke: 'white',\n    'stroke-width': 2,\n    'stroke-opacity': 0.0\n});\n```", "```js\nmainGroup.selectAll('path')\n    .on('mouseover', function () {\n        d3.select(this).style('stroke-opacity', 1.0);\n    });\nmainGroup.selectAll('path')\n    .on('mouseout', function () {\n        d3.select(this).style('stroke-opacity', 0.0);\n    });\n```", "```js\ng.style(\"stroke-width\", ((1 / s) * 2) + \"px\");\n```", "```js\nvar scaleLongitude = d3.scale.linear()\n    .domain([0, width])\n    .range([-180, 180]);\n\nvar scaleLatitude = d3.scale.linear()\n    .domain([0, height])\n    .range([90, -90]);\n```", "```js\nsvg.on('mousemove', function() {\n    var p = d3.mouse(this);\n    projection.rotate([scaleLongitude(p[0]), \n                       scaleLatitude(p[1])]);\n    svg.selectAll('path').attr('d', path);\n});\n```", "```js\nsvg.selectAll('text')\n    .data(data.features)\n    .enter()\n    .append('text')\n    .text(function(d) { return d.properties.name; })\n    .attr({\n        x: function(d) { return path.centroid(d)[0]; },\n        y: function(d) { return path.centroid(d)[1]; },\n        'text-anchor': 'middle',\n        'font-size': '6pt'\n    });\n```", "```js\nname,population,latitude,longitude\nNew York,8491079,40.6643,-73.9385\nLos Angeles,3792621,34.0194,-118.4108\nChicago,2695598,41.8376,-87.6818\n```", "```js\nqueue()\n    .defer(d3.json, usDataUrl)\n    .defer(d3.csv, citiesDataUrl)\n    .await(function (error, states, cities) {\n```", "```js\nsvg.selectAll('circle')\n    .data(cities)\n    .enter()\n    .append('circle')\n    .each(function(d) {\n        var location = projection([d.longitude, d.latitude]);\n        d3.select(this).attr({\n            cx: location[0],\n            cy: location[1],\n            r: Math.sqrt(+d.population * 0.00004)\n        });\n    })\n    .style({\n        fill: 'blue',\n        opacity: 0.75\n    });\n```", "```js\nid    rate\n1001  .097\n1003  .091\n1005  .134\n1007  .121\n1009  .099\n1011  .164\n```", "```js\n{\n  \"type\": \"Polygon\",\n  \"id\": 1001,\n  \"arcs\": [ [ -8063, 8094, 8095, -8084, -7911 ] ]\n},\n```", "```js\n<style>\n    .q0-9 { fill:rgb(247,251,255); }\n    .q1-9 { fill:rgb(222,235,247); }\n    .q2-9 { fill:rgb(198,219,239); }\n    .q3-9 { fill:rgb(158,202,225); }\n    .q4-9 { fill:rgb(107,174,214); }\n    .q5-9 { fill:rgb(66,146,198); }\n    .q6-9 { fill:rgb(33,113,181); }\n    .q7-9 { fill:rgb(8,81,156); }\n    .q8-9 { fill:rgb(8,48,107); }\n</style>\n```", "```js\nqueue()\n    .defer(d3.json, usDataUrl)\n    .defer(d3.tsv, unempDataUrl, function(d) { \n                      rateById.set(d.id, +d.rate); \n     })\n    .await(function(error, us) {\n```", "```js\nvar quantize = d3.scale.quantize()\n    .domain([0, .15])\n    .range(d3.range(9).map(function(i) { \n        return 'q' + i + '-9'; \n}));\n```", "```js\nvar projection = d3.geo.albersUsa()\n    .scale(1280)\n    .translate([width / 2, height / 2]);\n\nvar path = d3.geo.path()\n    .projection(projection);\n```", "```js\nsvg.append('g')\n    .attr('class\", \"counties\")\n    .selectAll(\"path\")\n    .data(topojson.feature(us, us.objects.counties).features)\n    .enter()\n    .append(\"path\")\n    .attr(\"class\", function(d) { \n        return quantize(rateById.get(d.id)); \n     })\n    .attr(\"d\", path);\n```", "```js\nsvg.append('path')\n    .datum(topojson.mesh(us, us.objects.states)\n    .attr({\n        'class': 'states',\n        fill: 'none',\n        stroke: '#fff',\n        'stroke-linejoin': 'round',\n        'd': path\n    });\n```"]