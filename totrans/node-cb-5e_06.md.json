["```js\n$ mkdir fastify-restaurant\n$ cd fastify-restaurant\n$ npm init –yes\n$ npm pkg set type=module\n```", "```js\n    $ npm install fastify@5\n    ```", "```js\n    import { fastify } from 'fastify';\n    ```", "```js\n    const serverOptions = {\n      logger: true\n    };\n    const app = fastify(serverOptions);\n    ```", "```js\n    app.get('/', async function homeHandler () {\n      return {\n        api: 'fastify-restaurant-api',\n        version: 1\n      };\n    });\n    ```", "```js\n    const port = process.env.PORT || 3000;\n    ```", "```js\n    await app.listen({ host: '0.0.0.0', port });\n    ```", "```js\n    $ node index.js\n    {\"level\":30,\"time\":1693925618687,\"pid\":123,\"hostname\":\"MyPc\",\"msg\":\"Server listening at http://127.0.0.1:3000\"}\n    {\"level\":30,\"time\":1693925618687,\"pid\":123,\"hostname\":\"MyPc\",\"msg\":\"Server listening at http://192.168.1.174:3000\"}\n    ```", "```js\n    $ curl http://localhost:3000\n    {\"api\":\"fastify-restaurant-api\",\"version\":1}\n    ```", "```js\n    const serverOptions = {\n      logger: true\n    };\n    ```", "```js\n    async function appPlugin (app, opts) {\n      app.get('/', async function homeHandler () {\n        return {\n          api: 'fastify-restaurant-api',\n          version: 1\n        };\n      });\n    }\n    ```", "```js\n    export default appPlugin;\n    export { serverOptions as options };\n    ```", "```js\n    import { fastify } from 'fastify';\n    import appPlugin, { options } from './app.js';\n    const app = fastify(options);\n    app.register(appPlugin);\n    const port = process.env.PORT || 3000;\n    await app.listen({ host: '0.0.0.0', port });\n    ```", "```js\n$ curl http://localhost:3000/example\n{\"message\":\"Route GET:/example not found\",\"error\":\"Not Found\",\"statusCode\":404}\n```", "```js\n    function recipesPlugin (app, opts, next) {\n      app.route({\n        method: 'GET',\n        url: '/menu',\n        handler: menuHandler\n      });\n      next();\n    }\n    ```", "```js\n    async function menuHandler (request, reply) {\n      this.log.info('Logging GET /menu from this');\n      request.log.info('Logging GET /menu from request');\n      throw new Error('Not implemented');\n    }\n    export default recipesPlugin;\n    ```", "```js\n    import recipesPlugin from './routes/recipes.js';\n    async function appPlugin (app, opts) {\n      // ...\n      app.register(recipesPlugin);\n    }\n    ```", "```js\n    $ curl http://localhost:3000/menu\n    {\"statusCode\":500,\"error\":\"Internal Server Error\",\"message\":\"Not implemented\"}%\n    ```", "```js\n      app.get('/recipes', { handler: menuHandler });\n    ```", "```js\n      app.post('/recipes', async function addToMenu\n        (request, reply) {\n          throw new Error('Not implemented');\n        });\n    ```", "```js\n      app.delete('/recipes/:id', function removeFromMenu\n        (request, reply) {\n          reply.send(new Error('Not implemented'));\n        });\n    ```", "```js\n{\"level\":30,\"time\":1694013232783,\"pid\":1,\"hostname\":\"MyPC\",\"msg\":\"Logging GET /menu from this\"}\n{\"level\":30,\"time\":1694013232783,\"pid\":1,\"hostname\":\" MyPC \",\"reqId\":\"req-2\",\"msg\":\"Logging GET /menu from request\"}\n```", "```js\nasync function ordersPlugin (app, opts) {\n  async function notImplemented (request, reply) {\n    throw new Error('Not implemented');\n  }\n  app.post('/orders', { handler: notImplemented });\n  app.get('/orders', { handler: notImplemented });\n  app.patch('/orders/:orderId', { handler: notImplemented\n    });\n}\nexport default ordersPlugin;\n```", "```js\n$ curl -X POST http://localhost:3000/recipes\n$ curl -X DELETE http://localhost:3000/recipes/fake-id\n$ curl -X PATCH http://localhost:3000/orders/fake-id\n```", "```js\n    function recipesPlugin (app, opts, next) {\n      app.addHook('onRequest', async function isChef\n        (request, reply) {\n          if (request.headers['x-api-key'] !== 'fastify-\n            rocks') {\n              reply.code(401)\n              throw new Error('Invalid API key');\n          }\n        });\n      // ...\n      next();\n    }\n    ```", "```js\n    $ curl -X POST http://localhost:3000/recipes\n    {\"statusCode\":401,\"error\":\"Unauthorized\",\"message\":\"Invalid API key\"}\n    $ curl -X PATCH http://localhost:3000/orders/fake-id\n    {\"statusCode\":500,\"error\":\"Internal Server Error\",\"message\":\"Not implemented\"}\n    $ curl -X GET http://localhost:3000/recipes/fake-id\n    {\"statusCode\":401,\"error\":\"Unauthorized\",\"message\":\"Invalid API key\"}\n    ```", "```js\nasync function appPlugin (app, opts) {\n  app.decorateRequest('isChef', function isChef () {\n    return this.headers['x-api-key'] === 'fastify-rocks';\n  });\n  app.decorate('authOnlyChef', async function (request,\n    reply) {\n      if (!request.isChef()) {\n        reply.code(401);\n        throw new Error('Invalid API key');\n      }\n  });\n  // ...\n}\n```", "```js\n  app.patch('/orders/:orderId', {\n    onRequest: app.authOnlyChef,\n    handler: notImplemented\n  });\n```", "```js\nfunction recipesPlugin (app, opts, next) {\n  app.get('/menu', { handler: menuHandler });\n  app.get('/recipes', { handler: menuHandler });\n  app.register(async function protectRoutesPlugin (plugin,\n    opts) {\n      plugin.addHook('onRequest', plugin.authOnlyChef);\n      plugin.post('/recipes', async function addToMenu\n        (request, reply) {\n          throw new Error('Not implemented');\n        });\n      plugin.delete('/recipes/:id', function removeFromMenu\n        (request, reply) {\n          reply.send(new Error('Not implemented'));\n        });\n    });\n  next();\n}\n```", "```js\napp.addHook('onReady', async function hook () {\n  this.log.info(`onReady runs from file\n    ${import.meta.url}`);\n});\napp.addHook('onClose', function hook (app, done) {\n  app.log.info(`onClose runs from file\n    ${import.meta.url}`);\n  done()\n});\n```", "```js\n    async function authPlugin (app, opts) {\n      app.decorateRequest('isChef', function () {\n        return this.headers['x-api-key'] === 'fastify-\n          rocks';\n      });\n      app.decorate('authOnlyChef', async function(request,\n        reply){\n          if (!request.isChef()) {\n            reply.code(401);\n            throw new Error('Invalid API key');\n          }\n        });\n    }\n    export default authPlugin;\n    ```", "```js\n    import authPlugin from './plugins/auth.js';\n    async function appPlugin (app, opts) {\n      app.register(authPlugin);\n      app.register(recipesPlugin);\n      app.register(ordersPlugin);\n    }\n    ```", "```js\n    import fp from 'fastify-plugin';\n    async function authPlugin (app, opts) {\n      // ...\n    }\n    export default fp(authPlugin);\n    ```", "```js\n    async function authPlugin (app, opts) {\n      // ...\n      app.addHook('onRoute', function hook (routeOptions) {\n        if (routeOptions.config?.auth === true) {\n          routeOptions.onRequest =\n          [app.authOnlyChef].concat(routeOptions.onRequest\n            || []);\n        }\n      });\n    }\n    ```", "```js\n      app.patch('/orders/:orderId', {\n        config: { auth: true },\n        handler: notImplemented\n      });\n    ```", "```js\nfunction recipesPlugin (app, opts, next) {\n  // ...\n  app.post('/recipes', {\n    config: { auth: true },\n    handler: async function addToMenu (request, reply) {\n      throw new Error('Not implemented');\n    }\n  });\n  app.delete('/recipes/:id', {\n    config: { auth: true },\n    handler: function removeFromMenu (request, reply) {\n      reply.send(new Error('Not implemented'));\n    }\n  });\n  next();\n}\n```", "```js\n    $ npm i @fastify/mongodb@9\n    ```", "```js\n    import fp from 'fastify-plugin';\n    import fastifyMongo from '@fastify/mongodb';\n    async function datasourcePlugin (app, opts) {\n      app.log.info('Connecting to MongoDB')\n      app.register(fastifyMongo, {\n        url: 'mongodb://localhost:27017/restaurant'\n      });\n    }\n    export default fp(datasourcePlugin);\n    ```", "```js\n    async function datasourcePlugin (app, opts) {\n      app.register(fastifyMongo, { ... });\n      app.decorate('source', {\n        async insertRecipe (recipe) { /* todo */ },\n        async readRecipes (filters, sort) { /* todo */ },\n        async deleteRecipe (recipeId) { /* todo */ },\n        async insertOrder (order) { /* todo */ },\n        async readOrders (filters, sort) { /* todo */ },\n        async markOrderAsDone (orderId) { /* todo */ }\n      });\n    }\n    ```", "```js\n        async insertRecipe (recipe) {\n          const { db } = app.mongo;\n          const _id = new app.mongo.ObjectId();\n          recipe._id = _id;\n          recipe.id = _id.toString();\n          const collection = db.collection('menu');\n          const result = await\n            collection.insertOne(recipe);\n          return result.insertedId;\n        }\n    ```", "```js\n      app.post('/recipes', {\n        config: { auth: true },\n        handler: async function addToMenu (request, reply)\n        {\n          const { name, country, description, order, price\n            } = request.body;\n          const newPlateId = await\n            app.source.insertRecipe({\n              name,\n              country,\n              description,\n              order,\n              price,\n              createdAt: new Date()\n            });\n          reply.code(201);\n          return { id: newPlateId };\n        }\n      });\n    ```", "```js\n    $ curl -X POST http://localhost:3000/recipes -H \"Content-Type: application/json\" -H \"x-api-key: fastify-rocks\" -d '{\"name\":\"Lasagna\",\"country\":\"Italy\",\"price\":12}'\n    {\"id\":\"64f9f3eaee2d03172a8c5efe\"}\n    ```", "```js\n        async readRecipes (filters, sort = { order: 1 }) {\n          const collection =\n            app.mongo.db.collection('menu');\n          const result = await\n            collection.find(filters).sort(sort).toArray();\n          return result;\n        }\n    ```", "```js\n    async function menuHandler (request, reply) {\n      const recipes = await this.source.readRecipes();\n      return recipes;\n    }\n    ```", "```js\n    $ curl http://localhost:3000/menu\n    ```", "```js\n      const jsonSchemaBody = {\n        type: 'object',\n        required: ['name', 'country', 'order', 'price'],\n        properties: {\n          name: { type: 'string', minLength: 3, maxLength:\n            50 },\n          country: { type: 'string', enum: ['ITA', 'IND']\n            },\n          description: { type: 'string' },\n          order: { type: 'number', minimum: 0, maximum:\n            100 },\n          price: { type: 'number', minimum: 0, maximum: 50\n            }\n        }\n      };\n      app.post('/recipes', {\n        config: { auth: true },\n        schema: {\n          body: jsonSchemaBody\n        },\n        handler: async function addToMenu (request, reply)\n        {\n          // ...\n        }\n      });\n    ```", "```js\n    $ curl -X POST http://localhost:3000/recipes -H \"Content-Type: application/json\" -H \"x-api-key: fastify-rocks\" -d '{\"name\":\"Lasagna\",\"country\":\"Italy\",\"price\":12}'\n    {\"statusCode\":400,\"code\":\"FST_ERR_VALIDATION\",\"error\":\"Bad Request\",\"message\":\"body must have required property 'order'\"}%\n    ```", "```js\n    {\n      coerceTypes: 'array',\n      useDefaults: true,\n      removeAdditional: true,\n      uriResolver: require('fast-uri'),\n      addUsedSchema: false,\n      allErrors: false\n    }\n    ```", "```js\n    const options = {\n      logger: true,\n      ajv: {\n        customOptions: {\n          allErrors: true\n        }\n      }\n    };\n    ```", "```js\n    {\"statusCode\":400,\"code\":\"FST_ERR_VALIDATION\",\"error\":\"Bad Request\",\"message\":\"body must have required property 'order', body/country must be equal to one of the allowed values\"}\n    ```", "```js\n    customOptions: {\n      removeAdditional: 'all'\n    }\n    ```", "```js\n        async deleteRecipe (recipeId) {\n          const collection =\n            app.mongo.db.collection('menu');\n          const result = await collection.deleteOne({ _id:\n            new app.mongo.ObjectId(recipeId) });\n          return result.deletedCount;\n        }\n    ```", "```js\n      app.delete('/recipes/:id', {\n        config: { auth: true },\n        schema: {\n          params: {\n            type: 'object',\n            properties: {\n              id: { type: 'string', minLength: 24,\n                maxLength: 24 }\n            }\n          }\n        },\n        handler: async function removeFromMenu (request,\n          reply) {\n          const { id } = request.params;\n          const [recipe] = await app.source.readRecipes({\n            id });\n          if (!recipe) {\n            reply.code(404);\n            throw new Error('Not found');\n          }\n          await app.source.deleteRecipe(id);\n          reply.code(204);\n        }\n      });\n    ```", "```js\n    $ curl -X POST http://localhost:3000/recipes -H \"Content-Type: application/json\" -H \"x-api-key: fastify-rocks\" -d '{\"name\":\"Lasagna\",\"country\":\"ITA\",\"price\":12,\"order\":1}'\n    {\"id\":\"64fad8e761d11acc30098d0c\"}\n    $ curl -X DELETE http://localhost:3000/recipes/111111111111111111111111 -H \"x-api-key: fastify-rocks\"\n    {\"statusCode\":404,\"error\":\"Not Found\",\"message\":\"Not found\"}\n    $ curl -X DELETE http://localhost:3000/recipes/64fad8e761d11acc30098d0c -H \"x-api-key: fastify-rocks\"\n    ```", "```js\n        async insertOrder (order) {\n          const _id = new app.mongo.ObjectId();\n          order._id = _id;\n          order.id = _id.toString();\n          const collection =\n            app.mongo.db.collection('orders');\n          const result = await\n            collection.insertOne(order);\n          return result.insertedId;\n        }\n    ```", "```js\n      const orderJsonSchema = {\n        type: 'object',\n        required: ['table', 'dishes'],\n        properties: {\n          table: { type: 'number', minimum: 1 },\n          dishes: {\n            type: 'array',\n            minItems: 1,\n            items: {\n              type: 'object',\n              required: ['id', 'quantity'],\n              properties: {\n                id: { type: 'string', minLength: 24,\n                  maxLength: 24 },\n                quantity: { type: 'number', minimum: 1 }\n              }\n            }\n          }\n        }\n      };\n    ```", "```js\n      app.post('/orders', {\n        schema: {\n          body: orderJsonSchema\n        },\n        handler: async function createOrder (request,\n          reply) {\n            const order = {\n              status: 'pending',\n              createdAt: new Date(),\n              items: request.body.dishes\n            };\n          const orderId = await\n            this.source.insertOrder(order);\n          reply.code(201);\n          return { id: orderId };\n        }\n      });\n    ```", "```js\n    $ curl -X POST http://localhost:3000/orders -H \"Content-Type: application/json\" -d '{\"table\":42,\"dishes\":[{\"id\":\"64fad8e761d11acc30098d0c\",\"quantity\":2},{\"id\":\"64fad8e761d11acc30098d0z\",\"quantity\":1}]}'\n    {\"id\":\"64faeccfac24fcc42c6ffda8\"}\n    ```", "```js\n    async readOrders (filters, sort = { createdAt: -1 }) {\n          const collection =\n            app.mongo.db.collection('orders');\n          const result = await\n            collection.find(filters).sort(sort).toArray();\n          return result;\n        }\n    ```", "```js\n    app.get('/orders', {\n      handler: async function readOrders (request, reply)\n      {\n        const orders = await this.source.readOrders({\n          status: 'pending' });\n        const recipesIds = orders.flatMap(order =>\n          order.items.map(item => item.id));\n        const recipes = await this.source.readRecipes({\n          id: { $in: recipesIds } });\n        return orders.map(order => {\n          order.items = order.items\n            .map(item => {\n              const recipe = recipes.find(recipe =>\n                recipe.id === item.id)\n              return recipe ? { ...recipe, quantity:\n                item.quantity } : undefined;\n              })\n              .filter(recipe => recipe !== undefined);\n            return order;\n          });\n        }\n      });\n    ```", "```js\n    $ curl http://localhost:3000/orders\n    ```", "```js\n    [\n      {\n        \"status\": \"pending\",\n        \"createdAt\": \"2023-09-08T09:56:49.750Z\",\n        \"items\": [\n          {\n            \"name\": \"Lasagna\",\n            \"country\": \"ITA\",\n            \"description\": \"Lasagna is a traditional Italian dish made with alternating layers of pasta, cheese, and sauce.\",\n            \"order\": 1,\n            \"price\": 12,\n            \"quantity\": 1,\n            \"createdAt\": \"2023-09-08T09:54:28.904Z\",\n            \"id\": \"64faefcc9094146c83d2ffd7\"\n          }\n        ],\n        \"id\": \"64faefe19094146c83d2ffd8\"\n      }\n    ]\n    ```", "```js\n      const orderListSchema = {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            id: { type: 'string' },\n            createdAt: { type: 'string', format: 'date-\n              time' },\n            items: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  name: { type: 'string' },\n                  order: { type: 'number' },\n                  quantity: { type: 'number' }\n                }\n              }\n            }\n          }\n        }\n      };\n    ```", "```js\n      app.get('/orders', {\n        schema: {\n          response: {\n            200: orderListSchema\n          }\n        },\n        handler: async function readOrders (request,\n          reply) {}\n      };\n    ```", "```js\n    [\n      {\n        \"id\": \"64faefe19094146c83d2ffd8\",\n        \"createdAt\": \"2023-09-08T09:56:49.750Z\",\n        \"items\": [\n          {\n            \"name\": \"Lasagna\",\n            \"order\": 1,\n            \"quantity\": 1\n          }\n        ]\n      }\n    ]\n    ```", "```js\n    $ npm install @fastify/env@5\n    ```", "```js\n    import fp from 'fastify-plugin';\n    import fastifyEnv from '@fastify/env';\n    async function configPlugin (app, opts) {\n      const envSchema = {\n        type: 'object',\n        required: ['API_KEY', 'DATABASE_URL'],\n        properties: {\n          NODE_ENV: { type: 'string', default:\n            'development' },\n          PORT: { type: 'integer', default: 3000 },\n          API_KEY: { type: 'string' },\n          DATABASE_URL: { type: 'string' }\n        }\n      };\n      app.register(fastifyEnv, {\n        confKey: 'appConfig',\n        schema: envSchema,\n        data: opts.applicationEnv\n      });\n    }\n    export default fp(configPlugin);\n    ```", "```js\n    Error: env must have required property 'API_KEY', env must have required property 'DATABASE_URL'\n    ```", "```js\n    const app = fastify(options);\n    app.register(appPlugin, {\n      applicationEnv: {\n        API_KEY: 'fastify-rocks',\n        DATABASE_URL:\n    'mongodb://localhost:27017/restaurant',\n        ...process.env\n      }\n    });\n    ```", "```js\n    import configPlugin from './plugins/config.js';\n    // ...\n    async function appPlugin (app, opts) {\n      // ...\n      app.register(configPlugin, opts);\n      // ...\n    }\n    ```", "```js\n    async function appPlugin (app, opts) {\n      // ...\n      await app.register(configPlugin, opts);\n      app.register(datasourcePlugin, { databaseUrl:\n        app.appConfig.DATABASE_URL });\n      app.register(authPlugin, { tokenValue:\n        app.appConfig.API_KEY });\n      // ...\n    }\n    ```", "```js\n      app.register(fastifyMongo, {\n        url: opts.databaseUrl\n      });\n    ```", "```js\n      app.decorateRequest('isChef', function () {\n        return this.headers['x-api-key'] ===\n          opts.tokenValue;\n      });\n    ```", "```js\n    import { fastify } from 'fastify';\n    import appPlugin, { options } from '../app.js';\n    const defaultTestEnv = {\n      NODE_ENV: 'test',\n      API_KEY: 'test-suite',\n      DATABASE_URL: 'mongodb://localhost:27017/restaurant-\n        test-run'\n    };\n    async function buildApplication (env, serverOptions =\n      { logger: false }) {\n        const testServerOptions = Object.assign({},\n          options, serverOptions);\n        const testEnv = Object.assign({}, defaultTestEnv,\n          env);\n        const app = fastify(testServerOptions);\n        app.register(appPlugin, { applicationEnv: testEnv\n        });\n      return app;\n    }\n    export { buildApplication };\n    ```", "```js\n    import { test } from 'node:test';\n    import { strictEqual, deepStrictEqual, ok } from\n      'node:assert';\n    ```", "```js\n    import { buildApplication } from './helper.js';\n    ```", "```js\n    test('GET /', async function (t) {\n      const app = await buildApplication();\n      t.after(async function () {\n        await app.close();\n      });\n      const response = await app.inject({\n        method: 'GET',\n        url: '/'\n      });\n      strictEqual(response.statusCode, 200);\n      deepStrictEqual(response.json(), {\n        api: 'fastify-restaurant-api',\n        version: 1\n      });\n    });\n    ```", "```js\n    $ node --test test/app.test.js\n    ✔ GET / (56.81025ms)\n    ℹ tests 1\n    ℹ suites 0\n    ℹ pass 1\n    ℹ fail 0\n    ℹ cancelled 0\n    ℹ skipped 0\n    ℹ todo 0\n    ℹ duration_ms 341.573042\n    ```", "```js\ntest('An unknown user cannot create a recipe', async function (t) {\n  const testApiKey = 'test-suite-api-key';\n  const app = await buildApplication({\n    API_KEY: testApiKey\n  });\n  t.after(async function () {\n    await app.close();\n  });\n  const pizzaRecipe = { name: 'Pizza', country: 'ITA',\n    price: 8, order: 2 };\n  const notChefResponse = await app.inject({\n    method: 'POST',\n    url: '/recipes',\n    payload: pizzaRecipe,\n    headers: {\n      'x-api-key': 'invalid-key'\n    }\n  });\n  strictEqual(notChefResponse.statusCode, 401);\n});\n```", "```js\ntest('Only a Chef can create a recipe', async function (t) {\n  const testApiKey = 'test-suite-api-key';\n  const app = await buildApplication({\n    API_KEY: testApiKey\n  });\n  t.after(async function () {\n    await app.close();\n  });\n  const pizzaRecipe = { name: 'Pizza', country: 'ITA',\n    price: 8, order: 2 };\n  const response = await app.inject({\n    method: 'POST',\n    url: '/recipes',\n    payload: pizzaRecipe,\n    headers: {\n      'x-api-key': testApiKey\n    }\n  });\n  strictEqual(response.statusCode, 201);\n  const recipeId = response.json().id;\n  const menu = await app.inject('/menu');\n  strictEqual(menu.statusCode, 200);\n  const recipes = menu.json();\n  const expectedPizza = recipes.find(r => r.id ===\n    recipeId);\n  ok(expectedPizza, 'Pizza recipe must be found');\n});\n```"]