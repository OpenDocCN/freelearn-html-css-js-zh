["```js\n    $ node --version\n    ```", "```js\n    v0.12.0\n    ```", "```js\n    $ npm --version\n    ```", "```js\nln -s \"$(which nodejs)\" /usr/bin/node\n```", "```js\n    npm install --save ws\n    ```", "```js\n    var port = 8000;\n\n    // Server code\n    var WebSocketServer = require('ws').Server;\n    var server = new WebSocketServer({ port: port });\n\n    server.on('connection', function(socket) {\n      console.log(\"A connection established\");\n    });\n\n    console.log(\"WebSocket server is running.\");\n    console.log(\"Listening to port \" + port + \".\");\n    ```", "```js\n    node server.js\n    ```", "```js\n    $ node server.js \n    WebSocket server is running.\n    Listening to port 8000.\n    ```", "```js\nvar WebSocketServer = require('ws').Server;\nvar server = new WebSocketServer({ port: port });\n```", "```js\nserver.on('connection', function(socket) {\n  console.log(\"A connection established\");\n});\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"utf-8\">\n      <title>WebSockets demo for HTML5 Games Development: A Beginner's Guide</title>\n    </head>\n    <body>\n      <!-- game elements goes here later -->\n      <script src=\"img/jquery-2.1.3.min.js\"></script>\n      <script src=\"img/html5games.websocket.js\"></script>\n    </body>\n    </html>\n    ```", "```js\n    var websocketGame = {\n    }\n    // init script when the DOM is ready.\n    $(function(){\n      // check if existence of WebSockets in browser\n      if (window[\"WebSocket\"]) {\n\n        // create connection\n        websocketGame.socket = new WebSocket(\"ws://127.0.0.1:8000\");\n\n        // on open event\n        websocketGame.socket.onopen = function(e) {\n          console.log('WebSocket connection established.');\n        };\n\n        // on close event\n        websocketGame.socket.onclose = function(e) {\n          console.log('WebSocket connection closed.');\n        };      \n      }\n    });\n    ```", "```js\n    $ node server.js \n    WebSocket server is running.\n    Listening to port 8000.\n    A connection established.\n    A connection established.\n    ```", "```js\nvar socket = new WebSocket(url);\n```", "```js\nvar message = \"a message from server\";\nserver.sendAll(message);\n```", "```js\n    function User(socket) {\n      this.socket = socket; \n      // assign a random number to User.\n      // Long enough to make duplication chance less.\n      this.id = \"1\" + Math.floor( Math.random() * 1000000000);\n    }\n    ```", "```js\n    function Room() {\n      this.users = []; \n    }\n    ```", "```js\n    Room.prototype.addUser = function(user){\n      this.users.push(user); \n      var room = this; \n\n      // handle user closing\n      user.socket.onclose = function(){\n        console.log('A connection left.');\n        room.removeUser(user);\n      }\n    };\n    Room.prototype.removeUser = function(user) {\n      // loop to find the user\n      for (var i=this.users.length; i >= 0; i--) {\n        if (this.users[i] === user) {\n          this.users.splice(i, 1);\n        }\n      }\n    };\n    ```", "```js\n    Room.prototype.sendAll = function(message) {\n      for (var i=0, len=this.users.length; i<len; i++) {\n        this.users[i].socket.send(message);\n      }\n    };\n    ```", "```js\n    module.exports.User = User;\n    module.exports.Room = Room;\n    ```", "```js\n    var User = require('./game').User;\n    var Room = require('./game').Room;\n    var room1 = new Room();\n    server.on('connection', function(socket) {\n      var user = new User(socket);\n      room1.addUser(user);\n      console.log(\"A connection established\");\n      var message = \"Welcome \" + user.id \n         + \" joining the party. Total connection: \"\n         + room1.users.length;\n      room1.sendAll(message);\n    });\n    ```", "```js\n    // on message event\n    websocketGame.socket.onmessage = function(e) {\n      console.log(e.data);\n    };\n    ```", "```js\nvar User = require('./game').User;\nvar Room = require('./game').Room;\n```", "```js\nRoom.prototype.send = function(message) {\n  for (var i=0, len=this.users.length; i<len; i++) {\n    this.users[i].socket.send(message);\n  }\n};\n```", "```js\n// on message event\nwebsocketGame.socket.onmessage = function(e) {\n  console.log(e.data);\n};\n```", "```js\n    Room.prototype.handleOnUserMessage = function(user) {\n      var room = this;\n      user.socket.on(\"message\", function(message){\n        console.log(\"Receive message from \" + user.id + \": \" + message);\n      });\n    };\n    ```", "```js\n    this.handleOnUserMessage(user);\n    ```", "```js\n    <input type=\"text\" id=\"chat-input\" autocomplete=\"off\">\n    <input type=\"button\" value=\"Send\" id=\"send\">\n    ```", "```js\n    $(\"#send\").click(sendMessage);\n\n    $(\"#chat-input\").keypress(function(event) {\n       if (event.keyCode === 13) {  \n          sendMessage();  \n       }  \n    });\n\n    function sendMessage() {\n       var message = $(\"#chat-input\").val();\n       websocketGame.socket.send(message);\n       $(\"#chat-input\").val(\"\");\n    }\n    ```", "```js\nwebsocketGame.socket.send(message);\n```", "```js\nvar message = $(\"#chat-input\").val();\nwebsocketGame.socket.send(message);\n```", "```js\nsocket.on(\"message\", function(message){\n  console.log(\"Receive message: \" + message);\n});\n```", "```js\n    user.socket.on(\"message\", function(message){\n      console.log(\"Receive message from \" + user.id + \": \" + message); \n      // send to all users in room.\n      var msg = \"User \" + user.id + \" said: \" + message;\n      room.sendAll(msg);\n    });\n    ```", "```js\n    <ul id=\"chat-history\"></ul>\n    ```", "```js\n    socket.onmessage = function(e) {\n      $(\"#chat-history\").append(\"<li>\"+e.data+\"</li>\");\n    };\n    ```", "```js\n    <canvas id='drawing-pad' width='500' height='400'>\n    </canvas>\n    ```", "```js\n    <style>\n      canvas{position:relative;}\n    </style>\n    ```", "```js\n    var websocketGame = {\n       // indicates if it is drawing now.\n       isDrawing : false,\n\n       // the starting point of next line drawing.\n       startX : 0,\n       startY : 0,\n    }\n\n    // canvas context\n    var canvas = document.getElementById('drawing-pad');\n    var ctx = canvas.getContext('2d');\n    ```", "```js\n    // the logic of drawing in the Canvas\n    $(\"#drawing-pad\").mousedown(function(e) {\n      // get the mouse x and y relative to the canvas top-left point.\n      var mouseX = e.originalEvent.layerX || e.offsetX || 0;\n      var mouseY = e.originalEvent.layerY || e.offsetY || 0;\n\n      websocketGame.startX = mouseX;\n      websocketGame.startY = mouseY;\n\n      websocketGame.isDrawing = true;\n    });\n\n    $(\"#drawing-pad\").mousemove(function(e) {\n      // draw lines when is drawing\n      if (websocketGame.isDrawing) {\n        // get the mouse x and y \n        // relative to the canvas top-left point.\n        var mouseX = e.originalEvent.layerX || e.offsetX || 0;\n        var mouseY = e.originalEvent.layerY || e.offsetY || 0;\n\n        if (!(mouseX === websocketGame.startX && mouseY === websocketGame.startY)) {\n          drawLine(ctx, websocketGame.startX, websocketGame.startY,mouseX,mouseY,1);\n\n          websocketGame.startX = mouseX;\n          websocketGame.startY = mouseY;\n        }\n      }\n    });\n\n    $(\"#drawing-pad\").mouseup(function(e) {\n      websocketGame.isDrawing = false;\n    });\n    ```", "```js\n    function drawLine(ctx, x1, y1, x2, y2, thickness) {\n       ctx.beginPath();\n       ctx.moveTo(x1,y1);\n       ctx.lineTo(x2,y2);\n       ctx.lineWidth = thickness;\n       ctx.strokeStyle = \"#444\";\n       ctx.stroke();\n    }\n    ```", "```js\n    // Constants\n    var LINE_SEGMENT = 0;\n    var CHAT_MESSAGE = 1;\n    ```", "```js\n    this.users.push(user);\n    var room = this;\n    // tell others that someone joins the room\n    var data = {\n      dataType: CHAT_MESSAGE,\n      sender: \"Server\",\n      message: \"Welcome \" + user.id \n         + \" joining the party. Total connection: \" + this.users.length\n    };  \n    room.sendAll(JSON.stringify(data));\n    ```", "```js\n    user.socket.on(\"message\", function(message){\n      console.log(\"Receive message from \" + user.id + \": \" + message);\n\n      // construct the message\n      var data = JSON.parse(message);\n      if (data.dataType === CHAT_MESSAGE) {\n        // add the sender information into the message data object.\n        data.sender = user.id;\n      }\n\n      // send to all clients in room.\n      room.sendAll(JSON.stringify(data));\n    });\n    ```", "```js\n    room1.sendAll(message);\n    ```", "```js\n    // Contants\n    LINE_SEGMENT : 0,\n    CHAT_MESSAGE : 1,\n    ```", "```js\n    websocketGame.socket.onmessage = function(e) {\n       // check if the received data is chat or line segment\n       console.log(\"onmessage event:\",e.data);\n       var data = JSON.parse(e.data);\n       if (data.dataType === websocketGame.CHAT_MESSAGE) {\n          $(\"#chat-history\").append(\"<li>\" + data.sender\n              + \" said: \"+data.message+\"</li>\");\n       }\n       else if (data.dataType === websocketGame.LINE_SEGMENT) {\n          drawLine(ctx, data.startX, data.startY, data.endX, data.endY, 1);\n       }\n\n    };\n    ```", "```js\n    $(\"#drawing-pad\").mousemove(function(e) {\n       // draw lines when is drawing\n       if (websocketGame.isDrawing) {\n          // get the mouse x and y \n          // relative to the canvas top-left point.\n          var mouseX = e.originalEvent.layerX || e.offsetX || 0;\n          var mouseY = e.originalEvent.layerY || e.offsetX || 0;\n\n          if (!(mouseX === websocketGame.startX && mouseY === websocketGame.startY)) {\n             drawLine(ctx, websocketGame.startX, websocketGame.startY,mouseX,mouseY,1);\n\n             // send the line segment to server\n     var data = {};\n     data.dataType = websocketGame.LINE_SEGMENT;\n     data.startX = websocketGame.startX;\n     data.startY = websocketGame.startY;\n     data.endX = mouseX;\n     data.endY = mouseY;\n     websocketGame.socket.send(JSON.stringify(data));\n\n             websocketGame.startX = mouseX;\n             websocketGame.startY = mouseY;\n          }\n\n       }\n    });\n    ```", "```js\n    function sendMessage() {\n       var message = $(\"#chat-input\").val();\n\n       // pack the message into an object.\n       var data = {};\n       data.dataType = websocketGame.CHAT_MESSAGE;\n       data.message = message;\n\n       websocketGame.socket.send(JSON.stringify(data));\n       $(\"#chat-input\").val(\"\");\n    }\n    ```", "```js\n// Contants\nLINE_SEGMENT : 0,\nCHAT_MESSAGE : 1,\n```", "```js\nif (data.dataType === websocketGame.CHAT_MESSAGE) {…}\n```", "```js\n// send the line segment to server\nvar data = {};\ndata.dataType = websocketGame.LINE_SEGMENT;\ndata.startX = startX;\ndata.startY = startY;\ndata.endX = mouseX;\ndata.endY = mouseY;\nwebsocketGame.socket.send(JSON.stringify(data));\n```", "```js\nvar data = JSON.parse(e.data);\nif (data.dataType === websocketGame.CHAT_MESSAGE) {\n  $(\"#chat-history\").append(\"<li>\"+data.sender+\" said: \"+data.message+\"</li>\");\n}\nelse if (data.dataType === websocketGame.LINE_SEGMENT) {\n  drawLine(ctx, data.startX, data.startY, data.endX, data.endY, 1);\n}\n```", "```js\n    <input type=\"button\" value=\"Restart\" id=\"restart\">\n    ```", "```js\n    // Constants\n    LINE_SEGMENT : 0,\n    CHAT_MESSAGE : 1,\n    GAME_LOGIC : 2,\n\n    // Constant for game logic state\n    WAITING_TO_START : 0,\n    GAME_START : 1,\n    GAME_OVER : 2,\n    GAME_RESTART : 3,\n\n    ```", "```js\n    isTurnToDraw : false,\n    ```", "```js\n    else if (data.dataType === websocketGame.GAME_LOGIC) {\n      if (data.gameState === websocketGame.GAME_OVER) {\n        websocketGame.isTurnToDraw = false;\n        $(\"#chat-history\").append(\"<li>\" + data.winner\n           +\" wins! The answer is '\"+data.answer+\"'.</li>\");\n        $(\"#restart\").show();\n      }\n      if (data.gameState === websocketGame.GAME_START) {\n        // clear the Canvas.\n        canvas.width = canvas.width;\n\n        // hide the restart button.\n        $(\"#restart\").hide();\n\n        // clear the chat history\n        $(\"#chat-history\").html(\"\");\n\n        if (data.isPlayerTurn) {\n          websocketGame.isTurnToDraw = true;\n          $(\"#chat-history\").append(\"<li>Your turn to draw. Please draw '\" + data.answer + \"'.</li>\");\n        }\n        else {\n          $(\"#chat-history\").append(\"<li>Game Started. Get Ready. You have one minute to guess.</li>\");\n        }\n      }\n    }\n    ```", "```js\n    // restart button\n    $(\"#restart\").hide();\n    $(\"#restart\").click(function(){\n      canvas.width = canvas.width;\n      $(\"#chat-history\").html(\"\");\n      $(\"#chat-history\").append(\"<li>Restarting Game.</li>\");\n\n      // pack the restart message into an object.\n      var data = {};\n      data.dataType = websocketGame.GAME_LOGIC;\n      data.gameState = websocketGame.GAME_RESTART;\n      websocketGame.socket.send(JSON.stringify(data));\n\n      $(\"#restart\").hide();\n    });\n    ```", "```js\n    // Constants\n    var LINE_SEGMENT = 0;\n    var CHAT_MESSAGE = 1;\n    var GAME_LOGIC = 2;\n    // Constant for game logic state\n    var WAITING_TO_START = 0;\n    var GAME_START = 1;\n    var GAME_OVER = 2;\n    var GAME_RESTART = 3; \n    ```", "```js\n    function GameRoom() { \n      // the current turn of player index.\n      this.playerTurn = 0;\n\n      this.wordsList = ['apple','idea','wisdom','angry'];\n      this.currentAnswer = undefined;\n\n      this.currentGameState = WAITING_TO_START;\n\n      // send the game state to all players.\n      var gameLogicData = {\n        dataType: GAME_LOGIC,\n        gameState: WAITING_TO_START\n      };\n\n      this.sendAll(JSON.stringify(gameLogicData));\n\n    }\n    ```", "```js\n    // inherit Room\n    GameRoom.prototype = new Room();\n    ```", "```js\n    GameRoom.prototype.addUser = function(user) {\n      // a.k.a. super(user) in traditional OOP language.\n      Room.prototype.addUser.call(this, user);\n\n      // start the game if there are 2 or more connections\n      if (this.currentGameState === WAITING_TO_START && this.users.length >= 2) {\n        this.startGame();\n      }\n    };\n    ```", "```js\n    GameRoom.prototype.handleOnUserMessage = function(user) {\n      var room = this;\n      // handle on message\n      user.socket.on('message', function(message){\n        console.log(\"[GameRoom] Receive message from \" \n              + user.id + \": \" + message); \n\n        var data = JSON.parse(message);\n        if (data.dataType === CHAT_MESSAGE) {\n          // add the sender information into the message data object.\n          data.sender = user.id;\n        }\n        room.sendAll(JSON.stringify(data));\n\n        // check if the message is guessing right or wrong\n        if (data.dataType === CHAT_MESSAGE) {\n          console.log(\"Current state: \" + room.currentGameState);\n\n          if (room.currentGameState === GAME_START) {\n            console.log(\"Got message: \" + data.message \n                + \" (Answer: \" + room.currentAnswer + \")\");\n          }\n\n          if (room.currentGameState === GAME_START && data.message === room.currentAnswer) {\n            var gameLogicData = {\n              dataType: GAME_LOGIC,\n              gameState: GAME_OVER,\n              winner: user.id,\n              answer: room.currentAnswer\n            };\n\n            room.sendAll(JSON.stringify(gameLogicData));\n\n            room.currentGameState = WAITING_TO_START;\n\n            // clear the game over timeout\n            clearTimeout(room.gameOverTimeout);\n          }\n        }\n\n        if (data.dataType === GAME_LOGIC && data.gameState === GAME_RESTART) {\n          room.startGame();\n        }\n      });\n    };\n    ```", "```js\n    GameRoom.prototype.startGame = function() {\n      var room = this;\n\n      // pick a player to draw\n      this.playerTurn = (this.playerTurn+1) % this.users.length;\n\n      console.log(\"Start game with player \" + this.playerTurn \n          + \"'s turn.\");\n\n      // pick an answer\n      var answerIndex = Math.floor(Math.random() * this.wordsList.length);\n      this.currentAnswer = this.wordsList[answerIndex];\n\n      // game start for all players\n      var gameLogicDataForAllPlayers = {\n        dataType: GAME_LOGIC,\n        gameState: GAME_START,\n        isPlayerTurn: false\n      };\n\n      this.sendAll(JSON.stringify(gameLogicDataForAllPlayers));\n\n      // game start with answer to the player in turn.\n      var gameLogicDataForDrawer = {\n        dataType: GAME_LOGIC,\n        gameState: GAME_START,\n        answer: this.currentAnswer,\n        isPlayerTurn: true\n      };\n\n      // the user who draws in this turn.\n      var user = this.users[this.playerTurn];\n      user.socket.send(JSON.stringify(gameLogicDataForDrawer));\n\n      // game over the game after 1 minute.\n      gameOverTimeout = setTimeout(function(){\n        var gameLogicData = {\n          dataType: GAME_LOGIC,\n          gameState: GAME_OVER,\n          winner: \"No one\",\n          answer: room.currentAnswer\n        };\n\n        room.sendAll(JSON.stringify(gameLogicData));\n\n        room.currentGameState = WAITING_TO_START;\n      },60*1000);\n\n      room.currentGameState = GAME_START;\n    };\n    ```", "```js\n    module.exports.GameRoom = GameRoom;\n    ```", "```js\n    var GameRoom = require('./game').GameRoom;\n    var room1 = new GameRoom();\n    ```", "```js\nGameRoom.prototype = new Room();\n```", "```js\n// a.k.a. super(user) in traditional OOP language.\nRoom.prototype.addUser.call(this, user);\n```", "```js\n// Constants\nvar LINE_SEGMENT = 0;\nvar CHAT_MESSAGE = 1;\nvar GAME_LOGIC = 2;\n```", "```js\n// Constant for game logic state\nvar WAITING_TO_START = 0;\nvar GAME_START = 1;\nvar GAME_OVER = 2;\nvar GAME_RESTART = 3;\n```", "```js\nvar playerTurn = 0;\n```", "```js\nvar gameLogicDataForAllPlayers = {\n  dataType: GAME_LOGIC,\n  gameState: GAME_START,\n  isPlayerTurn: false\n};\n```", "```js\nvar gameLogicDataForDrawer = {\n  dataType: GAME_LOGIC,\n  gameState: GAME_START,\n  answer: this.currentAnswer,\n  isPlayerTurn: true\n};  \n```"]