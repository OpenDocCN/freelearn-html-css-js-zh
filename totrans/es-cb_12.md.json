["```js\n// main.js\nexport function main() {\n    const rocketSet = new Set();\n    rocketSet.add('US: Saturn V');\n    rocketSet.add('US: Saturn V');\n    rocketSet.add('US: Falcon Heavy');\n    console.log(rocketSet);\n    rocketSet.delete('US: Falcon Heavy');\n    console.log(rocketSet);\n}\n```", "```js\n// main.js \nexport function main() { \n  const rockets = [ \n    'US: Saturn V', \n    'US: Falcon Heavy', \n    'USSR: Soyuz', \n    'CN: Long March', \n    'US: Saturn V', \n    'US: Saturn V' \n  ];\n\n  const rocketSet = new Set(rockets); \n  console.log(rockets); \n}  \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n}    \n```", "```js\n// main.js \nexport function main() {\nconst saturnV = new Rocket('US: Saturn V');\nconst falconHeavy = new Rocket('US: Falcon Heavy');\nconst rocketSet = new WeakSet();\nrocketSet.add(saturnV);\nrocketSet.add(saturnV);\nrocketSet.add(falconHeavy);\nconsole.log(rocketSet);\nrocketSet.delete(falconHeavy);\nconsole.log(rocketSet);\n// throw error\nrocketSet.add('Saturn V');\n}\n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n}    \n```", "```js\n// main.js \nexport function main() { \n  const rockets = [ \n    new Rocket('US: Saturn V'), \n    new Rocket('US: Saturn V'), \n    new Rocket('US: Saturn V'), \n    new Rocket('USSR: Soyuz') , \n    new Rocket('CN: Long March') \n  ] \n\n  const rocketSet = new WeakSet(rockets); \n  console.log(rockets);\n}  \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n   }  \n```", "```js\n// main.js \nfunction union (set1, set2) {}  \n```", "```js\n// main.js \nfunction union (set1, set2) { \n  const result = new Set(); \n\n  set1.forEach((entry) => result.add(entry)); \n  set2.forEach((entry) => result.add(entry)); \n\n  return result; \n} \n```", "```js\n// main.js \nexport function main() { \n  const usRockets = [ \n    new Rocket('US: Saturn V'), \n    new Rocket('US: Falcon Heavy') \n  ]; \n  const americanSet = new Set(usRockets); \n  console.log('American Set', americanSet); \n\n  const allRockets = usRockets.concat([ \n    new Rocket('USSR: Soyuz'), \n    new Rocket('CN: Long March') \n  ]); \n\n  const fullSet = new Set(allRockets); \n  console.log('Full Set', fullSet); \n\n  console.log('Union', union(americanSet, fullSet)); \n}  \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n   }  \n```", "```js\n// main.js \nfunction intersection (set1, set2) {}  \n```", "```js\n// main.js \nfunction intersection (set1, set2) { \n  const result = new Set(); \n\n  set1.forEach((entry) => { \n    if (set2.has(entry)) { \n      result.add(entry); \n    } \n  }); \n\n  return result; \n} \n```", "```js\n// main.js \nexport function main() { \n  const usRockets = [ \n    new Rocket('US: Saturn V'), \n    new Rocket('US: Falcon Heavy') \n  ]; \n  const americanSet = new Set(usRockets); \n  console.log('American Set', americanSet); \n\n  const allRockets = usRockets.concat([ \n    new Rocket('USSR: Soyuz'), \n    new Rocket('CN: Long March') \n  ]); \n\n  const fullSet = new Set(allRockets); \n  console.log('Full Set', fullSet); \n\n  console.log('Intersetion', intersection(americanSet, fullSet)); \n  }  \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n   }  \n```", "```js\n// main.js \nfunction intersection (set1, set2) {}  \n```", "```js\n// main.js \nfunction difference(set1, set2) { \n  const result = new Set(); \n\n  set1.forEach((entry) => { \n    if (!set2.has(entry)) { \n      result.add(entry) \n    } \n  }); \n\n  return result; \n} \n```", "```js\n// main.js \nexport function main() { \n  const usRockets = [ \n    new Rocket('US: Saturn V'), \n    new Rocket('US: Falcon Heavy') \n  ]; \n  const americanSet = new Set(usRockets); \n  console.log('American Set', americanSet); \n\n  const allRockets = usRockets.concat([ \n    new Rocket('USSR: Soyuz'), \n    new Rocket('CN: Long March') \n  ]); \n\n  const fullSet = new Set(allRockets); \n  console.log('Full Set', fullSet); \n\n  console.log('Difference 1', difference(americanSet, fullSet)); \n  console.log('Difference 2', difference(fullSet, americanSet)); \n}  \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n   } \n```", "```js\n// main.js \nclass RocketSet { \n  constructor () { \n    this.set = new WeakSet(); \n     }    \n   } \n```", "```js\n// main.js \nclass RocketSet { \n  add (rocket) { \n    if (!(rocket instanceof Rocket)) { \n      throw new Error('Members of `RocketSet` must be of type \n      `Rocket`'); \n    } \n\n    this.set.add(rocket); \n      } \n   } \n```", "```js\n// main.js \nclass RocketSiteMap { \n  has (rocket) { \n    return this.set.has(rocket); \n     } \n   }\n} \n```", "```js\n// main.js \nexport function main() { \n  const rocketSet = new RocketSet(); \n  const saturnV = new Rocket('US: Saturn V');\n  const falconHeavy = new Rocket('US: Falcon Heavy');\n  const longMarch = new Rocket('Long March') ;\n  rocketSet.add(saturnV); \n  rocketSet.add(falconHeavy); \n  rocketSet.add(longMarch); \n  console.log(rocketSet) ;\n\n  console.log('Set has Saturn V ',rocketSet.has(saturnV));\n  console.log('Set has Falcon Heavy \n  ',rocketSet.has(falconHeavy));\n  console.log('Set has Long March ',rocketSet.has(longMarch));\n\n  try { \n    rocketSet.add('Buzz Lightyear'); \n  } catch (e) { \n    console.error(e); \n  } \n} \n```"]