- en: Creating Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning properties with constructor arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining methods on a class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking the instance type with instanceOf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using getters to create read-only properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using setters to encapsulate values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using static methods to work with all instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating and extending similar objects has always been possible with JavaScript's
    prototypical inheritance model. By using the `new` operator and adding prototype
    properties, we can create structures that behave like classes.
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 2015 introduced class syntax as a friendlier way to work with prototypical
    inheritance. It has been argued that this *syntactic sugar* is not worth the overhead
    of having two ways to implement OOP structures. However, I would argue that class
    provides a more concise way of expressing the same idea, and is a net benefit.
    As we'll see in this chapter and the next, the class syntax makes it easier to
    express sophisticated OOP relationships.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most fundamental task class can be used for is, of course, creating a new
    class. This recipe shows the simple syntax for defining and instantiating a new
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `07-01-create-a-new-class`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket` and a `main`
    function that creations two instances and logs them out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bc310b0e-4ae3-4e57-b9ea-ecc7f407d6cb.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `classRocket {}` syntax is the equivalent to creating a function named `Rocket`
    (notice the `constructor` value of the logged object). This means that, in JavaScript,
    instances of `Rocket` can be created with the `new` operator. This creates an
    object based on the prototype.
  prefs: []
  type: TYPE_NORMAL
- en: We'll see how to make some more interesting objects in future recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning properties with constructor arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a new class, it's time to start differentiating instances.
    In this recipe, we'll see how to assign properties when instances are created,
    via constructor arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `07-02-assigning-constructor-props`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that creates a new class named `Rocket`. Add a `constructor`
    method that takes a single argument, `name`, and assigns it to a property of the
    same name in the body of the method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates two instances and logs them out with
    their property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a4b23e7e-421c-4a1e-83db-2333fe0c711c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we saw in the previous recipe, the class syntax creates an empty `constructor`
    function if none is defined. A `constructor` is a method that is called immediately
    after a class is instantiated. Here, we create a new `Rocket` instance as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This means that the name property is actually assigned before that rocket instance
    is returned from the `new` expression and assigned to `saturnV`.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we define the `constructor`. The context of the `constructor`
    function, the value of `this`, is the instance of the new object. Therefore, when
    we assign the `name` property of `this`**,** it is set on that new instance.
  prefs: []
  type: TYPE_NORMAL
- en: Defining methods on a class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Classes that hold values are not particularly interesting. We also want them
    to be able to have some behaviors that act as interfaces to the outside world.
    In this recipe, we'll see how to add methods to a class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `07-03-defining-methods`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` with a class named `Rocket`, which assigns a `name` property
    upon construction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a method named `takeoff` that accepts an option countdown argument. The
    body of the method should log a message before and after a timeout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `main` function that creates two instances and then calls their `takeOff`
    methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/33a85f9f-798b-4a8b-8eb9-bf978e115831.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding methods to the body of a class definition is the same as attaching properties
    to the prototype of a function, with functions as their values. This means that
    those properties are added as properties to the instance of the new object. When
    these methods are called, the context (the value of `this`) is the current instance.
  prefs: []
  type: TYPE_NORMAL
- en: Checking instance type with instanceOf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many situations, such as argument validation, where we'll want to
    check the class of an object. Because JavaScript is not statically typed, we can't
    guarantee that a function receives an argument of the correct type before the
    program starts, and we need to check at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use the `instanceOf` operator to check an object's
    prototype at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `07-04-checking-with-instanceof`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` with two identical classes, `Rocket` and `InactiveRocket`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a function named `printRocketType` that uses `instanceOf` to distinguish
    between rocket classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates rockets of either class and then calls
    `printRocketType` on both of them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b6e16b1a-f376-43d2-ba6a-ee3a292ef04a.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `instanceOf` operator compares a prototype of the left-hand value with the
    right-hand value. If the two match, the expression is evaluated as true, otherwise
    it evaluates as false. Thus, we can use it in a conditional expression.
  prefs: []
  type: TYPE_NORMAL
- en: Using getters to create read-only properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We don't always want a property to be writable. In previous recipes, we saw
    how to create a read-only property on an object. In this recipe, we'll see how
    to use the `get` keyword to do this in the context of a class body.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `07-05-getters-read-only`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file with the `Rocket` class that defines a read only property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates an instance of the `Rocket` class. Read
    from the writable and read-only properties, then try to write to them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab45130e-2a43-4732-ae74-582d1e6767bb.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the `get` keyword creates a read-only property that has a function for
    a value. We return a string from that function, so that,when the property is read,
    that value is returned. However, because it is read-only, a run-time error is
    thrown when we try to write to it.
  prefs: []
  type: TYPE_NORMAL
- en: Using setters to encapsulate values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we saw how to prevent values from being written**.**
    Sometimes however, we don't want to prevent a property from being written to.
    Rather, we want to control how it is written to. In this recipe, we'll see how
    to use `set` to control the writing of a property.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `07-06-setters-encapsulate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file with a `Rocket` class that writes a ­`_secretName`
    property upon construction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a getter and setter for a `name` property and only update it if the `newValue`
    is a string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that tries to set the `name` property to different
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8d8e478c-b257-494d-aa9d-a90d328834d0.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like the `get` keyword, the `set` keyword calls a function property when a property
    is written to. Instead of setting the value directly, we are able to perform a
    type check. If the `newValue` is a string, it is written as normal. Otherwise,
    we log an error, and do not set the value of the secret property.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, `_secretName` can be written directly. This has to be solved through
    documentation. Users of a library should only be using the public interface. They
    deviate at their own risk!
  prefs: []
  type: TYPE_NORMAL
- en: Using static methods to work with all instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It can be a good idea to organize methods on a class, rather than on an instance
    of a class. One example is the **Manager** pattern. This pattern is useful when
    an object is expensive to create, or will be reused a lot.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use the `static` keyword to create a map for
    reusing instances of the `Rocket` class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `07-07-static-methods-on-all-instances`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file with an empty object `rocketMap` and a class `Rocket`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a static method named `find` that looks up rockets by string on the
    `Rocket` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a construction that assigns a name property, and assigns the instance to
    the `rocketMap`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that compares created instances of `Rocket` with results
    of the static `find` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7d33985f-1875-4932-8915-a60acc4726ff.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The static keyword means that the function will be a property of the `Rocket` class,
    rather than an instance. This is the same as setting a function property directly
    on a function, rather than on its prototype. Thus, we call the function as a property
    of the class, not an instance.
  prefs: []
  type: TYPE_NORMAL
