["```js\nimport { describe, it, expect, beforeEach } from 'vitest';\nimport {\n  createBirthday\n} from 'src/factories/birthday.js';\nimport {\n  addNew, clear, getAll, replace\n} from './birthdayRepository.js';\ndescribe('birthdayRepository', () => {\n  beforeEach(clear);\n  const storedId = () => getAll()[0].id;\n  it.todo('is initially empty');\n});\n```", "```js\ndescribe('addNew', () => {\n  it.todo('adds a new birthday into the list');\n  it.todo('saves unique ids onto each new birthday');\n  it.todo('returns the added birthday with its id');\n  describe('validation errors', () => {\n    describe.todo('when the name is not provided');\n    describe.todo(\n      'when the date of birth in the right format'\n    );\n  });\n});\n```", "```js\ndescribe('replace', () => {\n  it.todo('updates an entry that shares the same id');\n  it.todo('returns the updated birthday');\n  describe('validation errors', () => {\n    describe.todo('when the name is not provided');\n    describe.todo(\n      'when the date of birth in the right format'\n    );\n    it.todo(\n      'returns the id when an empty date of birth is\n       provided'\n    );\n  });\n});\n```", "```js\nimport { randomUUID } from 'crypto';\nconst db = new Map();\nexport const addNew = (item) => {\n  const id = randomUUID();\n  db.set(id, { ...item, id });\n};\nexport const getAll = () => Array.from(db.values());\nexport const clear = () => db.clear();\nexport const replace = (id, item) =>\n  db.set(id, { ...item, id });\nexport const has = (id) => db.has(id);\n```", "```js\n    it('is initially empty', () => {\n      expect(getAll()).toHaveLength(0);\n    });\n    ```", "```js\n    export const getAll = () =>\n      null; //Array.from(db.values());\n    ```", "```js\n    describe('addNew', () => {\n      it('adds a new birthday into the list', () => {\n        addNew(createBirthday('Zeus', '2009-02-02'));\n        expect(getAll()).toContainEqual(\n          expect.objectContaining({\n            name: 'Zeus',\n            dob: '2009-02-02'\n          })\n        );\n      });\n    });\n    ```", "```js\n    export const addNew = (item) => {\n      const id = randomUUID();\n      //db.set(id, { ...item, id });\n    };\n    ```", "```js\n    it('saves unique ids onto each new birthday', () => {\n      const birthday = createBirthday(\n        'Zeus',\n        '2009-02-02'\n      );\n      addNew(birthday);\n      addNew(birthday);\n      expect(getAll()[0].id).not.toEqual(\n        getAll()[1].id\n      );\n    });\n    ```", "```js\n    export const addNew = (item) => {\n      const id = null; //randomUUID();\n      db.set(id, { ...item, id });\n    };\n    ```", "```js\n    it('returns the added birthday with its id', () => {\n      expect(\n        addNew(createBirthday('Zeus', '2009-02-02'))\n      ).toEqual({\n        id: storedId(),\n        name: 'Zeus',\n        dob: '2009-02-02'\n      });\n    });\n    ```", "```js\n    export const addNew = (item) => {\n      ...\n      const itemWithId = { ...item, id };\n      db.set(id, itemWithId);\n      return itemWithId;\n    };\n    ```", "```js\n    describe('replace', () => {\n      beforeEach(() =>\n        addNew(createBirthday('Hercules', '1991-05-06'))\n      );\n      const storedId = () => getAll()[0].id;\n      ...\n    });\n    ```", "```js\n    it('updates an entry that shares the same id', () => {\n      replace(\n        storedId(),\n        createBirthday('Zeus Ex', '2007-02-02')\n      );\n      expect(getAll()).toHaveLength(1);\n      expect(getAll()).toContainEqual({\n        id: storedId(),\n        name: 'Zeus Ex',\n        dob: '2007-02-02'\n      });\n    });\n    ```", "```js\n    it('returns the updated birthday', () => {\n      expect(\n        replace(\n          storedId(),\n          createBirthday('Zeus Ex', '2007-02-02')\n        )\n      ).toEqual({\n        id: storedId(),\n        name: 'Zeus Ex',\n        dob: '2007-02-02'\n      });\n    });\n    ```", "```js\n    export const replace = (id, item) => {\n      ...\n      const itemWithId = { ...item, id };\n      db.set(id, itemWithId);\n      return itemWithId;\n    };\n    ```", "```js\n    describe('addNew', () => {\n      ...\n        describe('validation errors', () => {\n          describe('when the name is not provided', () => {\n            let result;\n            beforeEach(() => {\n              result = addNew(\n                createBirthday('', '1991-05-06')\n              );\n            });\n            it('does not save the birthday', () => {\n              expect(getAll()).toHaveLength(0);\n            });\n            it('returns an error', () => {\n              expect(result).toEqual({\n                error: 'Please provide a name.'\n              });\n            });\n          });\n        });\n      });\n    });\n    ```", "```js\n    const empty = (value) =>\n      value === undefined ||\n      value === null ||\n      value.trim() === '';\n    ```", "```js\n    export const addNew = (item) => {\n      if (empty(item.name)) {\n        return { error: 'Please provide a name.' };\n      }\n      ...\n    };\n    ```", "```js\n    describe('when the date of birth is in the wrong format', () => {\n      let result;\n      beforeEach(() => {\n        result = addNew(\n          createBirthday('Hercules', 'unknown')\n        );\n      });\n      it('does not save the birthday', () => {\n        expect(getAll()).toHaveLength(0);\n      });\n      it('returns an error', () => {\n        expect(result).toEqual({\n          error:\n            'Please provide a date of birth in the YYYY-\n              MM-DD format.'\n        });\n      });\n    });\n    ```", "```js\n    const invalidDob = (dob) => isNaN(Date.parse(dob));\n    ```", "```js\n    if (invalidDob(item.dob)) {\n      return {\n        error:\n          'Please provide a date of birth in the YYYY-MM-\n            DD format.'\n      };\n    }\n    ```", "```js\n    describe('replace', () => {\n      ...\n      describe('validation errors', () => {\n        describe('when the name is not provided', () => {\n          let result;\n          beforeEach(() => {\n            result = replace(\n              storedId(),\n              createBirthday('', '1991-05-06')\n            );\n          });\n          it('does not update the birthday', () => {\n            expect(getAll()[0].name).toEqual(\n              'Hercules'\n            );\n          });\n          it('returns an error', () => {\n            expect(result).toEqual({\n              error: 'Please provide a name.'\n            });\n          });\n        });\n      });\n    });\n    ```", "```js\n    export const replace = (id, item) => {\n      if (empty(item.name)) {\n        return { error: 'Please provide a name.' };\n      }\n      ...\n    };\n    ```", "```js\n    describe('when the date of birth is in the wrong format', () => {\n      let result;\n      beforeEach(() => {\n        result = replace(\n          storedId(),\n          createBirthday('Hercules', 'unknown')\n        );\n      });\n      it('does not update the birthday', () => {\n        expect(getAll()[0].dob).toEqual(\n          '1991-05-06'\n        );\n      });\n      it('returns an error', () => {\n        expect(result).toEqual({\n          error:\n            'Please provide a date of birth in the YYYY-\n              MM-DD format.'\n        });\n      });\n    });\n    ```", "```js\n    if (invalidDob(item.dob)) {\n      return {\n        error:\n          'Please provide a date of birth in the YYYY-MM-\n            DD format.'\n      };\n    }\n    ```", "```js\n    it('requires an id of a birthday that exists in the store', () => {\n      expect(\n        replace(\n          '234',\n          createBirthday('Hercules', '2009-01-02')\n        )\n      ).toEqual({\n        error: 'An unknown ID was provided.'\n      });\n    });\n    ```", "```js\n    export const replace = (id, item) => {\n      if (!has(id))\n        return { error: 'An unknown ID was provided.' };\n      ...\n    }\n    ```", "```js\n    const validate = ({ name, dob }) => {\n      if (empty(name)) {\n        return { error: 'Please provide a name.' };\n      }\n      if (invalidDob(dob)) {\n        return {\n          error:\n            'Please provide a date of birth in the YYYY-\n              MM-DD format.'\n        };\n      }\n    };\n    ```", "```js\n    export const addNew = (item) => {\n      const validationResult = validate(item);\n      if (validationResult) {\n        return validationResult;\n      }\n      const id = randomUUID();\n      const itemWithId = { ...item, id };\n      db.set(id, itemWithId);\n      return itemWithId;\n    };\n    ```", "```js\n    export const replace = (id, item) => {\n      if (!has(id))\n        return { error: 'An unknown ID was provided.' };\n      const validationResult = validate(item);\n      if (validationResult) {\n        return validationResult;\n      }\n      const itemWithId = { ...item, id };\n      db.set(id, itemWithId);\n      return itemWithId;\n    };\n    ```", "```js\n    const set = (id, item) => {\n      const itemWithId = { ...item, id };\n      db.set(id, itemWithId);\n      return itemWithId;\n    };\n    ```", "```js\n    export const addNew = (item) => {\n      const validationResult = validate(item);\n      if (validationResult) {\n        return validationResult;\n      }\n      return set(randomUUID(), item);\n    };\n    ```", "```js\n    export const replace = (id, item) => {\n      if (!has(id))\n        return { error: 'An unknown ID was provided.' };\n      const validationResult = validate(item);\n      if (validationResult) {\n        return validationResult;\n      }\n      return set(id, item);\n    };\n    ```"]