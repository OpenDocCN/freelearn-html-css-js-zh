- en: Chapter 6. Leaflet in Node.js, Python, and C#
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first five chapters, you covered the fundamentals of Leaflet.js. You
    now know how to add a wide variety of basemaps from multiple sources and in several
    different formats. You can draw simple geometries as well as display data from
    servers, GeoJSON, and ESRI file formats. Creating visualizations from your data
    was covered in [Chapter 3](ch03.html "Chapter 3. Creating Heatmaps and Choropleth
    Maps"), *Creating Heatmaps and Choropleth Maps*. You also know how to customize
    the look and feel of your markers now and how to utilize plugins in order to add
    extra functionalities to your map.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this last chapter, you will learn how to build applications utilizing Leaflet.js
    in three popular programming frameworks: Node.js, Python, and C#. In Node.js and
    Python, you will build a server to render your web page and allow for AJAX calls
    to display additional data. In the last example, using C#, you will build a desktop
    Windows application that embeds a web page into a form, connects to MongoDB, and
    retrieves data using a general search and a spatial search.'
  prefs: []
  type: TYPE_NORMAL
- en: While you are not expected to have a working knowledge of either of these three
    frameworks, Node.js is a JavaScript framework and the examples should be easy
    to follow. The Python and C# examples might be a little different from what you
    are used to; however, the main ideas should be easy to grasp and they will give
    you an idea of how you can think of using Leaflet in larger applications. Furthermore,
    starting to think about how Leaflet can interact with the server side will expand
    your ability to dream up new and exciting applications, utilizing libraries and
    resources from multiple frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: The first example will start with the most familiar framework, Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Building Leaflet applications with Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Node.js is a JavaScript-based platform that builds non-blocking applications.
    The non-blocking feature is what has made Node.js extremely popular. Think about
    how you code. You complete tasks step-by-step. You might jump around in your code,
    calling functions and responding to events, but you wait until one action is complete
    before you start the next. With Node.js, you assign callbacks and move on to the
    next task or handle the next request. Take a database search, for example. In
    the following pseudocode, you retrieve a record and do something with it in the
    traditional manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the example, you wait for the database to send back the results, and then
    you move on to displaying them. In Node.js, you would do something similar but
    assign a callback function, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will query the database and move on to the `doWhateverElseYouNeed`
    function until the query is finished, at which point it will execute the `showResult`
    callback function. This can be very confusing and make your code difficult to
    read, but it is very powerful, and on the server side, it allows for a large number
    of connections.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have an idea of what Node.js can do, you can download it at [http://nodejs.org/](http://nodejs.org/).
    Follow the instructions to install Node.js based on your operating system. Once
    it is installed, you will have a command-line interface and a Node.js window on
    Windows. Using the command line, you can launch your applications and install
    additional packages, which you will learn to do in a later example.
  prefs: []
  type: TYPE_NORMAL
- en: A basic Node.js server with Leaflet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this first example, you will create a simple Node.js server and serve `LeafletEssentials.html`.
    You can write your code in any text editor and save it as a `.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a folder to store your files and place a copy of `LeafletEssentials.html`
    in the folder. This will be the file that we are going to serve with Node.js.
    Next, you will create the server as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code uses two modules: `http` and `fs`. You import these modules
    using `require(module)`. Both of these modules are standard Node.js modules and
    do not require any additional downloads. The preceding code imports the `http`
    module and then calls the `createServer()` method. It uses an anonymous function
    that takes a request and a response—`req` and `res`, respectively. The `if` block
    tests to see whether the request to the server is equal to the root directory;
    in this example, whether the browser is pointed to `http://localhost:3000`. The
    last line of code is listening on port 3000\. If the request is to the root directory,
    then the code writes a header. It is beyond the scope of this book to cover the
    HTTP protocol and headers. However, know that when a response is sent, it is status
    200 if successful and status 404 if it is not successful, and the response has
    the content type `text/html`. Lastly, the code imports the `fs` module and uses
    `pipe()` to read in and write out the contents of `LeafletEssentials.html`. Pipe
    is the preferred method for sending files; however, you could also manually write
    the HTML as a string using `res.end(''the HTML'')`. Piping allows you to do some
    neat things, such as reading and writing out a video file so that the user can
    play it while it is still receiving data from the server. Writing out HTML as
    a string will make your code long and complicated; never mind trying to escape
    all the quotes required in most HTML. In the last example, you will learn about
    a templating library in which you can store your HTML.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the command in tool, navigate to the directory that holds your `server.js`
    code and run it by typing `node server.js`. Point your browser to `http://localhost:3000`.
    You should see your loaded map as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic Node.js server with Leaflet](img/4812OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding example simply serves a single file, and if the user points their
    browser to any other URL, such as `http://localhost:3000/about.html`, they will
    not see anything, not even an error message. The next example fixes this.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js, AJAX, and Leaflet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have a Node.js server running and serving up a Leaflet web page,
    you can use the same server to make **Asynchronous JavaScript and XML** (**AJAX**)
    calls. You are programming in JavaScript, so even though there is XML in AJAX,
    you should use JSON; it is much easier to handle than XML in JavaScript. Building
    on the first example, the following code adds another page and sends an error
    message on bad requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code makes two changes to the first example; it adds two new routes.
    The first `if` statement is the same, returning `LeafletEssentials.html`. The
    `else if` statement checks to see whether the browser is pointed at `http://localhost:3000/getpoints`.
    If it is, then the server returns a JSON string, `[{"lat":35,"long":-106}]`. Lastly,
    if the user requests a page that doesn't exist, the server will return a 404 error
    message saying that the page is not found and will return the value of the page
    they were looking for—`req.url`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding server requires a change to your `LeafletEssentials.html` file.
    You will need a subscriber for the `click` event and to make an AJAX call when
    it occurs. Before AJAX, you will need to submit a form or make a request to the
    server and then be redirected to a new page that would display the results. AJAX
    allows you to make a request to the server, have the results returned, and display
    them without reloading the entire page. In this example, you will make an AJAX
    call to the `getpoints` URL. You will receive a JSON representation of a point.
    Then, you will add a marker that will represent the returned point—all without
    refreshing the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Without getting too deeply into the details of AJAX, the preceding code creates
    an `XMLHttpRequest` instance and opens the `getpoints.html` web page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a quick lesson on `XMLHttpRequest`, check out the W3Schools website at [http://www.w3schools.com/xml/xml_http.asp](http://www.w3schools.com/xml/xml_http.asp).
  prefs: []
  type: TYPE_NORMAL
- en: It then receives the response, parses out the points separated by a comma, and
    then adds them to the map as a marker. You're only receiving a single point, so
    the `d` variable only has a single value, which is represented by `d[0]`. Objects
    in JavaScript are used by calling the object and then the value of a field, in
    this case, `d[0].lat` and `d[0].long`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your map will look exactly as it did in the first example. When you click on
    the map, you will see another point, and your map will look like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Node.js, AJAX, and Leaflet](img/4812OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This example returns the same point when the user clicks on the map. This example
    can be improved by returning a different point every time the user clicks on the
    map. To do so, simply use a random number generator to return a new latitude and
    longitude. The key here is to set the maximum and minimum values so that the point
    is close to our current location. The following code uses `Math.random()` to return
    different values. To do so, replace the `res.end(JSON.stringify([{"lat":35,"long":-106}]));`
    line in the server code with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when the user clicks on the map, the points will appear at random. After
    several clicks, your map should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Node.js, AJAX, and Leaflet](img/4812OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Node.js, Connect, and Leaflet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous example, you had to write the path for every possible URL. A
    user could type that path in your domain. You allowed two possibilities and sent
    an error for every other possibility. If you have a website with many pages, you
    would not want to type an `if` statement for every URL. Connect is a module that
    provides a middleware code for common tasks. The middleware allows you to accomplish
    these common tasks with minimal work on your part; you just need to use the `use()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn about Connect at [http://www.senchalabs.org/connect/](http://www.senchalabs.org/connect/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Connect, open the command-line tool for Node.js and enter the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'npm is a Node.js package manager. The preceding command launches the package
    manager and asks it to install Connect. The `–g` switch is to install it globally
    so that it is available everywhere on the machine. When Connect is installed,
    your command prompt will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Node.js, Connect, and Leaflet](img/4812OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make note of the version that is installed because you will need this in a later
    step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have Connect installed, you can start the example. This example will
    create a simple server that will only serve static files. Perform the following
    steps to create the server:'
  prefs: []
  type: TYPE_NORMAL
- en: Make a `project` folder and place another folder inside and name it `www`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place several HTML files in the directory, but especially `LeafletEssentials.html`
    and `getpoints.json`. You can use the sample included with the book or you can
    create your own. A minimum `getpoints.json` file would contain the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The contents of the file are a single point represented in JSON. You can add
    as many points as you like. You can even write a script to update the contents
    of the file at a set interval.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, in the main project folder, create a file with the following contents
    and name it `package.json`. Note that this example is using a version of Connect
    prior to Version 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This file is used to build the project. At the command line, navigate to your
    `project` directory and type `npm install`. The package manager will read the
    `package.json` file and create a new subfolder in your `project` folder named
    `Node_modules`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the folder and you will see another folder with all of the files for the
    Connect module. Before writing the server, you need to make a change in `LeafletEssentialsAjax.html`.
    The code for the AJAX call needs to point to the `getpoints.json` file. Now you
    are ready to write the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first thing to do is to import the Connect module with `require()` and
    assign it to a variable. Create a server by calling `connect()`. And lastly, invoke
    the middleware `static()` and ask it to take the `www` directory and serve all
    files within it. The `_dirname` variable takes the current directory and concatenates
    it with the `/www` directory, giving the path to your files as shown in the following
    code. Listen on any available port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The code is much shorter than the previous examples. There are no `if ('/' ==
    req.url)` statements. The middleware knows all the files in the directory, and
    if a URL that matches a filename is requested, it will be sent. If it does not
    exist, the middleware will send the error page. If you add a new HTML file, it
    will be served up as soon as it is placed in the folder and requested. Now, when
    you connect and get your map, you can click on it, and the contents of `getpoints.json`
    will be returned and displayed on the map.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js, Express, Jade, and Leaflet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first two examples, you had to create a static HTML file for the server
    to serve to the client. In this example, you will use a template that allows you
    to pass variables to the HTML when loaded. This will allow you to create dynamic
    data-driven websites.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, you will need to install the Jade module for Node.js. To do
    so, open the command-line tool and enter the following command. This is the same
    procedure as the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you have the Jade module installed globally. You will also need to install
    Express. Express is one of the most popular web frameworks that can be used with
    Node.js. It is similar to Connect, but in this example, it is the tool that allows
    us to use a view engine, which is Jade. Again, type the following command and
    make sure that you note the installed versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on Express and Jade, you can go to the website for Express
    at [http://expressjs.com/](http://expressjs.com/) and for Jade at [http://jade-lang.com/](http://jade-lang.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have both modules installed, create a folder for your application.
    In the folder, you will need to create the `package.json` file. In this example,
    you have two dependencies, so your file should look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the command-line tool, navigate to the application directory and use
    npm to add the dependencies using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You will now have a `Node.js_modules` folder with the `Jade` and `Express`
    subfolders. You will need a directory to hold or view the template file. This
    folder needs to be named `views` because that is where Express will look. Create
    the directory and then open a text editor to create your view. For a quick introduction
    to Jade, you can read the tutorial at [http://jade-lang.com/tutorial/](http://jade-lang.com/tutorial/).
    The important thing to note is that Jade is whitespace sensitive, and hence indentations
    must be exact. This can be extremely frustrating at first. The following template
    is the modified `LeafletEssentials.html` file that you have been using in the
    previous examples. One key difference is the fourth line: `title = title`. This
    line sets the title of the HTML document to the value of a variable, `title`,
    in the server code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Save the preceding code in a file named `LeafletEssentials.jade` within your
    view folder. Now, you are ready to write the server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jade is a popular and powerful template module; however, there are others too.
    Two others that might be easier to learn at first are HAML at [http://haml.info/](http://haml.info/)
    and EJS at [http://embeddedjs.com/](http://embeddedjs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the server is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code imports the Express module and assigns it to a variable.
    It then creates an app with Express. The view engine defaults to Jade, but if
    you want to use another, you need the third line to set the appropriate engine.
    The next lines use `app.get()` to specify the two URLs that our application will
    return. The first one will return our view and the second is for the AJAX call
    and returns a point in JSON. In the first AJAX example, you needed to specify
    `JSON.stringify()` when you returned the point. One of the reasons to use a framework
    is that it takes care of many common tasks for you. In this case, Express will
    know what it is you are returning and set the value accordingly. In this example,
    you are returning a JSON string, and Express will automatically JSONify it for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: Your map will look just like the one in the previous examples, and when the
    user clicks, a point will be added. The next examples will use Python to serve
    a Leaflet application.
  prefs: []
  type: TYPE_NORMAL
- en: Leaflet with Python and CherryPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python programming language is extremely powerful and has a large number
    of standard libraries and other third-party libraries. It is also fairly easy
    to pick up for simple tasks. There is extensive documentation, and a large number
    of books and different libraries are available on the language. You can download
    Python from the Python website at [https://www.python.org/downloads/](https://www.python.org/downloads/).
    Version 3 is the latest; however, Version 2.7 is still in use. It is probably
    best to start learning with Version 3, but if you have v2.7, it will work with
    the examples.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, you will use the CherryPy library. You can download the library
    at [http://www.cherrypy.org/](http://www.cherrypy.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more books on CherryPy and Python web development, visit [http://www.packtpub.com/CherryPy/book](http://www.packtpub.com/CherryPy/book)
    or [http://www.packtpub.com/python-3-web-development-beginners-guide/book](http://www.packtpub.com/python-3-web-development-beginners-guide/book).
  prefs: []
  type: TYPE_NORMAL
- en: 'CherryPy is a smaller web framework compared to Django or Pyramid—formerly
    Pylons. For this example, it will allow you to get up and running quickly without
    much overhead. To manually install a third-party Python library, extract it to
    a folder and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the command, you will be able to import the library in your Python
    code. For this example, you will connect to a NoSQL database: MongoDB. MongoDB
    is a document database. It stores everything as a JSON-style document, not in
    relational tables. While it''s not as spatially enabled as PostGIS, which is an
    extension to PostgreSQL, it has a few spatial features that make it an excellent
    choice for a Leaflet backend. You can download MongoDB at [http://www.mongodb.org/](http://www.mongodb.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: To use MongoDB with Python, you will also need to download and install PyMongo.
    You can download the library at [https://pypi.python.org/pypi/pymongo/](https://pypi.python.org/pypi/pymongo/).
    Once you have your environment set up, you can start your MongoDB by running the
    application mongod.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you receive an error about a missing path, you will need to add the `C:\data\db`
    directory. Just create the folders and then rerun mongod. On Linux and OS X, execute
    `mkdir -p /data/db` to add the data directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your database is empty. The `pa.py` Python file that is available on these
    books'' website will create a database and populate it with the public art data
    that was used in earlier chapters of this book. The file looks like the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code imports two modules from the PyMongo library: Connection
    and GEO2D. The first handles our connection to the DB and the second allows us
    to spatially enable it. The next line makes a connection to a database called
    `albuquerque`. Next, a spatially enabled index is created for a collection called
    `publicart` and it indexes the `loc` field. The next two lines are public art
    points that are inserted into the collection. They each contain a location, name,
    and pop-up field that contains the URL to an image of the piece.'
  prefs: []
  type: TYPE_NORMAL
- en: Execute the file by typing `python pa.py`. Your MongoDB will now have a database,
    collection, and enough data to allow you to try some samples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you ever delete, corrupt, or just want to refresh your database, you can
    run this file over again to start a fresh.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have your database running and populated and have Python installed
    with CherryPy and PyMongo, you are now ready to write your first server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to import the Python libraries as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, you create a class and a function that will represent the URL to your
    application. In this example, it will be the `index` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The function will first create an array to hold the contents of an HTML file.
    You can append the contents of `LeafletEssentials.html` up until you add the tile
    layer basemap:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the database connection and search for all documents in the collection
    named `publicart`. The `find()` function will return a large number of records.
    On each record, you will append an HTML string, creating a marker using the record.
    The location field creates the marker and the name and pop-up fields are added
    to the markers'' pop up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once all the documents are added, you can append the closing HTML tags to the
    array. Then, convert the array to a string so that you can return it when the
    user requests the index of the application as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, you need to expose the `index` function, set the address and port the
    application will use, and then start the server by calling the classname:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you have finished, run the program by opening a command line and typing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a browser and point it to `http://127.0.0.1:8000`. You should see a map
    like the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Leaflet with Python and CherryPy](img/4812OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The application returned the contents of your MongoDB and displayed them in
    a Leaflet map. Now that you know how to create a URL route in an application,
    let's expand on this example to add an AJAX call for spatial searches.
  prefs: []
  type: TYPE_NORMAL
- en: Spatial queries with Python, MongoDB, and Leaflet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MongoDB allows you to access spatial queries. You can search for results near
    a single point, near a point by setting a maximum distance, within a bounding
    rectangle, or within a circle. In this example, you will query for results near
    a point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the required libraries. In the following code, you will import two new
    module tools from the `cherrypy` library and `json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'After importing the libraries, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the class. Using tools, you will expose the function with the `@` sign.
    Connect to the database and write out the HTML code. The HTML code in this example
    is different. You will add a listener for the `click` event. The code for this
    block will make an AJAX call to the `getdata` page and pass it the `(x,y)` coordinates
    of the `click` event. The data returned will only contain three objects, so you
    can hardcode the HTML instead of running a `for` loop as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, close the HTML tags, convert them to a string, and return them when the
    `page` function is called:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you will define and expose another URL function. This one will be called
    `getdata` and it will handle the AJAX call from the users'' click. This function
    gets passed the `x` and `y` variables. These will be the coordinates of the users''
    click. The query in this example is different than the previous example. Notice
    that you use `find()` but add `$near` and pass it the coordinates of the users''
    click. The search is set to only return three results. Lastly, you pass back the
    results as JSON using `@tools.json_out()`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, set the IP address of the server and port. Then, run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now you can run the file and point your browser to `http://127.0.0.1:8000`.
    You will see a blank map. Click anywhere on the map and you will see three points
    appear. These are the closest points to where you clicked. Your map will look
    like the following screenshot after clicking once:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Spatial queries with Python, MongoDB, and Leaflet](img/4812OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using Python to connect to your MongoDB allows you to not only query the database
    to display results, but with a little more code, you can use it to save the results
    of a map. You could allow the user to click on the map where they would like to
    add a point and then use the `(x,y)` coordinates and perform an `insert()` method
    instead of a `find()` function. The preceding examples provided a very brief overview
    of how to serve up a Leaflet map with Python and handle AJAX queries. The next
    examples will move on to using C# to make desktop applications with Leaflet.
  prefs: []
  type: TYPE_NORMAL
- en: Desktop applications in C# with Leaflet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Leaflet is used in a web page; however, with C#, you can embed a web browser
    in a Windows form to create what appears to be a desktop application. The examples
    in this section will show you how to add a map to a C# application, add a point
    by calling a JavaScript function from C#, and show you how to connect to MongoDB
    in C# and display the results on the map.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a map to a C# application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To build an application in C#, you will need to install Microsoft Visual Studio
    Express. You will need at least Visual Studio C# 2010\. You can download it at
    [http://www.visualstudio.com/downloads/download-visual-studio-vs](http://www.visualstudio.com/downloads/download-visual-studio-vs).
    This program is a slimmed-down version of the commercial Visual Studio. It allows
    you to rapidly build **Windows Form Applications** and compile your code in to
    an easily redistributable Windows Executable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch the application and create a new **Windows Form Application** from the
    dialog box, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a map to a C# application](img/4812OS_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Your application will be a blank form. Select the toolbox on the upper-left
    corner of the window and drag the web browser to the form, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a map to a C# application](img/4812OS_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the web browser that you dragged to the form and modify the `URL`
    property to point to an instance of `LeafletEssentials.html` running on your web
    server. Save the application. Click on the **Debug** menu and then start debugging.
    Your application will launch and you will see your Leaflet map loaded in the Windows
    Form, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a map to a C# application](img/4812OS_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You now have a map in a C# application without any code. The next example will
    add some functionality to your application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a marker in C#
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, you will build on the previous example by adding a marker.
    The first thing you need to do is drag a button onto the bottom of the form using
    the toolbox. In the properties of the button, change the `text` property from
    `button1` to `Add Marker`. Then, double-click on the button.
  prefs: []
  type: TYPE_NORMAL
- en: 'You are now looking at the code that Visual Studio created for you when you
    created the application, and it has now added a function to handle the button
    click. It wrote the function when you clicked on the button. Before you code the
    button, you will need to add a reference to `MSHTML.dll`. This file will allow
    you to use the web and HTML objects you need to make your map work. At the top
    of your code, you will see several lines that start with `using`. This is where
    you import the required libraries into your application. The most common ones
    have already been added. At the end of the list, type the code `using MSHTML;`.
    It will be underlined and won''t be found. You now need to right-click on the
    project in the **Solution Explorer** window and select **Add Reference**. Add
    a COM reference to Microsoft HTML Object Library as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a marker in C#](img/4812OS_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that you have added the reference, the underline will disappear and you
    can start coding the `button1_Click()` function. Add the following code to the
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code grabs the `<head>` tag of the `LeafletEssentials.html` file
    that you loaded through the web browser properties. It then creates a `<script>`
    element so that you can add JavaScript to the HTML and execute it. You then create
    the script element and pass it a `text` string. The string is a JavaScript function
    for adding a point to the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'You must wrap your code in a function, because that is how C# will call and
    execute it. You then append the `<script>` tag to the `<head>` tag of the document
    and tell the web browser to invoke the `addPoints()`function. So now, when the
    user clicks on the button, the JavaScript function will be added to `LeafletEssentials.html`
    and will be executed. Save and debug the project. When the application launches,
    click on the button and your application should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a marker in C#](img/4812OS_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To allow C# applications to modify a Leaflet application, insert a JavaScript
    function to a base HTML file and then execute it using an event such as a button
    click. The next example will connect to MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Using MongoDB with C# and Leaflet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just as in the Python example, to use MongoDB in C# will require a driver.
    You can download the C# drivers at [https://github.com/mongodb/mongo-csharp-driver/releases](https://github.com/mongodb/%E2%80%A8mongo-csharp-driver/releases).
    This example uses the `.zip` file. In your project, add another reference, but
    instead of selecting COM, this time, you will browse to where you extracted the
    drivers from the `.zip` file. The folder should contain `MongoDB.Bson.dll` and
    `MongoDB.Driver.dll`. After adding the reference, you must import the required
    libraries using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'With the libraries imported, you can modify your button to connect to MongoDB
    and load the points. The following instructions will walk you through the code
    to connect to MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you will need a string to hold the JavaScript function that will add
    the points. In C#, you will use `StringBuilder()` so that you can append to the
    string. You can start by appending the function name and the first brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, you set up the connection to MongoDB. Connect to the IP and port—the
    default is localhost on port 27017\. Get the server and then the database named
    `albuquerque`. Lastly, connect to the `publicart` collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you can execute the query. The query will find all documents and return
    each one. The code appends a string, which creates a marker by concatenating the
    location, name, and pop-up information from each document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Close the string with the last brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last code block is the same as the previous example. Create the HTML elements
    and insert the string by converting `StringBuilder.toString()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save and debug the project. When the application is launched, click on the
    button, and your application should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using MongoDB with C# and Leaflet](img/4812OS_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The very last step is to select the `debug` menu and, instead of debugging,
    select `build solution`. If you browse to the `project` folder, you will have
    a directory named `bin`. Within the directory, you now have an `.exe` file.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have a MongoDB collection in a Leaflet map written in C# and compiled
    as `.exe`. For this to run on another machine, you would only need to make your
    MongoDB sit on a real IP and allow access from outside your network.
  prefs: []
  type: TYPE_NORMAL
- en: The last example will allow the user to click on the map and return the closest
    points.
  prefs: []
  type: TYPE_NORMAL
- en: Querying with C#, Leaflet, and MongoDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have learned how to pass data from C# to Leaflet by writing a JavaScript
    function, injecting it into the HTML file, and then executing it. Passing data
    from JavaScript back to C# is a little different. One way in which you can pass
    data is to have the JavaScript write the contents to `<div>`, and then C# can
    read it in. The key here is to set the `<div>` tag to be invisible. The following
    steps will walk you through the last example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, modify `LeafletEssentials.html` by adding a new `<div>`, and set the
    style so that the display is set to `none`. If you set it as `hidden`, it will
    take up space in the document and there would be a blank spot below your map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a listener for the `click` event and write a function that creates
    a marker, showing you the location of the `click` event that cleans up the text
    of the returned latitude and longitude and writes the results to `<div>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the HTML file ready, you can now modify the C#. The first step is to read
    in the points from the `<div>` tag and then parse them so that each is in its
    own variable as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the connection to MongoDB. Connect to the IP and port. Get the server
    and then the database named `albuquerque`. Lastly, connect to the `publicart`
    collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a text string of the query and initialize your `StringBuilder()` function
    to hold the JavaScript of the function and results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the query in a loop using the `near()` function. Pass the results to
    the string, building up the JavaScript function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last code block is the same as the previous two examples. Create the HTML
    elements and insert the string by converting `StringBuilder.toString()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and debug the project. When the application is launched, click on the button,
    and your application should look like the following screenshot:![Querying with
    C#, Leaflet, and MongoDB](img/4812OS_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this last chapter, you have learned how to use `Leaflet.js` in other programming
    languages and frameworks. Starting with Node.js, you learned how to use JavaScript
    on the frontend and the backend. You created a Node.js server that returned a
    Leaflet web page. You then modified the code to allow AJAX calls back to the server
    to update the map without reloading the page.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned how to create a server and allow AJAX requests using Python
    and CherryPy. The Python example introduced NoSQL databases, in particular, MongoDB.
    You learned how to write a query to return all the documents in a database collection
    as well as how to use AJAX to query only points that are near the points where
    a user has clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly—for something totally different—you learned how to embed a web browser
    into a Windows Form and run a desktop application with Leaflet. The applications
    used buttons on the form to execute JavaScript functions that were injected into
    the `LeafletEssentials.html` file. You then passed data in the other direction—from
    JavaScript back to C#—capturing mouse clicks on the map and using them to query
    MongoDB and return the results. The C# applications you built can then be compiled
    in a .exe file and distributed to anyone who can connect to your MongoDB and `LeafletEssentials.html`
    file.
  prefs: []
  type: TYPE_NORMAL
