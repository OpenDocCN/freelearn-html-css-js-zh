- en: Chapter 6. Leaflet in Node.js, Python, and C#
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。Leaflet 在 Node.js、Python 和 C# 中
- en: In the first five chapters, you covered the fundamentals of Leaflet.js. You
    now know how to add a wide variety of basemaps from multiple sources and in several
    different formats. You can draw simple geometries as well as display data from
    servers, GeoJSON, and ESRI file formats. Creating visualizations from your data
    was covered in [Chapter 3](ch03.html "Chapter 3. Creating Heatmaps and Choropleth
    Maps"), *Creating Heatmaps and Choropleth Maps*. You also know how to customize
    the look and feel of your markers now and how to utilize plugins in order to add
    extra functionalities to your map.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前五章中，你学习了 Leaflet.js 的基础知识。你现在知道如何从多个来源和多种不同格式中添加各种底图。你可以绘制简单的几何图形，以及从服务器、GeoJSON
    和 ESRI 文件格式中显示数据。在[第 3 章](ch03.html "第 3 章。创建热力图和面状图")中，*创建热力图和面状图*，介绍了如何从你的数据中创建可视化。你现在还知道如何自定义标记的外观和感觉，以及如何利用插件来为你的地图添加额外功能。
- en: 'In this last chapter, you will learn how to build applications utilizing Leaflet.js
    in three popular programming frameworks: Node.js, Python, and C#. In Node.js and
    Python, you will build a server to render your web page and allow for AJAX calls
    to display additional data. In the last example, using C#, you will build a desktop
    Windows application that embeds a web page into a form, connects to MongoDB, and
    retrieves data using a general search and a spatial search.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，你将学习如何使用三个流行的编程框架构建 Leaflet.js 应用程序：Node.js、Python 和 C#。在 Node.js 和 Python
    中，你将构建一个服务器来渲染你的网页，并允许 AJAX 调用来显示更多数据。在最后一个示例中，使用 C#，你将构建一个桌面 Windows 应用程序，该应用程序将网页嵌入到表单中，连接到
    MongoDB，并使用通用搜索和空间搜索检索数据。
- en: While you are not expected to have a working knowledge of either of these three
    frameworks, Node.js is a JavaScript framework and the examples should be easy
    to follow. The Python and C# examples might be a little different from what you
    are used to; however, the main ideas should be easy to grasp and they will give
    you an idea of how you can think of using Leaflet in larger applications. Furthermore,
    starting to think about how Leaflet can interact with the server side will expand
    your ability to dream up new and exciting applications, utilizing libraries and
    resources from multiple frameworks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你不需要掌握这三个框架中的任何一个，Node.js 是一个 JavaScript 框架，示例应该很容易理解。Python 和 C# 的示例可能与你习惯的不同；然而，主要思想应该很容易掌握，它们将给你一个如何在大规模应用程序中使用
    Leaflet 的想法。此外，开始思考 Leaflet 如何与服务器端交互，将扩展你构思新和令人兴奋应用程序的能力，利用来自多个框架的库和资源。
- en: The first example will start with the most familiar framework, Node.js.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例将从最熟悉的框架 Node.js 开始。
- en: Building Leaflet applications with Node.js
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Node.js 构建 Leaflet 应用程序
- en: 'Node.js is a JavaScript-based platform that builds non-blocking applications.
    The non-blocking feature is what has made Node.js extremely popular. Think about
    how you code. You complete tasks step-by-step. You might jump around in your code,
    calling functions and responding to events, but you wait until one action is complete
    before you start the next. With Node.js, you assign callbacks and move on to the
    next task or handle the next request. Take a database search, for example. In
    the following pseudocode, you retrieve a record and do something with it in the
    traditional manner:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 是一个基于 JavaScript 的平台，用于构建非阻塞应用程序。非阻塞特性使 Node.js 非常受欢迎。想想你是如何编码的。你按步骤完成任务。你可能会在代码中跳来跳去，调用函数并响应事件，但在开始下一个动作之前，你会等待一个动作完成。在
    Node.js 中，你分配回调并继续下一个任务或处理下一个请求。以数据库搜索为例。在下面的伪代码中，你以传统方式检索记录并对其进行处理：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the example, you wait for the database to send back the results, and then
    you move on to displaying them. In Node.js, you would do something similar but
    assign a callback function, as shown in the following example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，你等待数据库发送回结果，然后继续显示它们。在 Node.js 中，你会做类似的事情，但会分配一个回调函数，如下面的示例所示：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code will query the database and move on to the `doWhateverElseYouNeed`
    function until the query is finished, at which point it will execute the `showResult`
    callback function. This can be very confusing and make your code difficult to
    read, but it is very powerful, and on the server side, it allows for a large number
    of connections.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将查询数据库，并继续执行 `doWhateverElseYouNeed` 函数，直到查询完成，此时将执行 `showResult` 回调函数。这可能会非常令人困惑，并使你的代码难以阅读，但它非常强大，在服务器端，它允许大量连接。
- en: Now that you have an idea of what Node.js can do, you can download it at [http://nodejs.org/](http://nodejs.org/).
    Follow the instructions to install Node.js based on your operating system. Once
    it is installed, you will have a command-line interface and a Node.js window on
    Windows. Using the command line, you can launch your applications and install
    additional packages, which you will learn to do in a later example.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了Node.js能做什么，您可以在[http://nodejs.org/](http://nodejs.org/)下载它。根据您的操作系统遵循说明安装Node.js。安装完成后，您将在Windows上有一个命令行界面和一个Node.js窗口。使用命令行，您可以启动应用程序并安装额外的包，您将在后面的例子中学习如何做。
- en: A basic Node.js server with Leaflet
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于Leaflet的基本Node.js服务器
- en: In this first example, you will create a simple Node.js server and serve `LeafletEssentials.html`.
    You can write your code in any text editor and save it as a `.js` file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个例子中，您将创建一个简单的Node.js服务器并服务`LeafletEssentials.html`。您可以在任何文本编辑器中编写代码，并将其保存为`.js`文件。
- en: 'Create a folder to store your files and place a copy of `LeafletEssentials.html`
    in the folder. This will be the file that we are going to serve with Node.js.
    Next, you will create the server as shown in the following code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个文件夹来存储您的文件，并将`LeafletEssentials.html`的副本放入文件夹中。这是我们打算用Node.js服务的文件。接下来，您将创建服务器，如下面的代码所示：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code uses two modules: `http` and `fs`. You import these modules
    using `require(module)`. Both of these modules are standard Node.js modules and
    do not require any additional downloads. The preceding code imports the `http`
    module and then calls the `createServer()` method. It uses an anonymous function
    that takes a request and a response—`req` and `res`, respectively. The `if` block
    tests to see whether the request to the server is equal to the root directory;
    in this example, whether the browser is pointed to `http://localhost:3000`. The
    last line of code is listening on port 3000\. If the request is to the root directory,
    then the code writes a header. It is beyond the scope of this book to cover the
    HTTP protocol and headers. However, know that when a response is sent, it is status
    200 if successful and status 404 if it is not successful, and the response has
    the content type `text/html`. Lastly, the code imports the `fs` module and uses
    `pipe()` to read in and write out the contents of `LeafletEssentials.html`. Pipe
    is the preferred method for sending files; however, you could also manually write
    the HTML as a string using `res.end(''the HTML'')`. Piping allows you to do some
    neat things, such as reading and writing out a video file so that the user can
    play it while it is still receiving data from the server. Writing out HTML as
    a string will make your code long and complicated; never mind trying to escape
    all the quotes required in most HTML. In the last example, you will learn about
    a templating library in which you can store your HTML.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码使用了两个模块：`http`和`fs`。您可以使用`require(module)`导入这些模块。这两个模块都是Node.js的标准模块，不需要任何额外的下载。上一段代码导入了`http`模块，然后调用了`createServer()`方法。它使用了一个匿名函数，该函数接受一个请求和一个响应——分别是`req`和`res`。`if`块检查请求是否指向服务器的根目录；在这个例子中，浏览器是否指向`http://localhost:3000`。代码的最后一行是在端口3000上监听。如果请求是根目录，则代码会写入一个头部。本书的范围不包括HTTP协议和头部。然而，要知道，当发送响应时，如果成功则状态为200，如果不成功则状态为404，响应的内容类型为`text/html`。最后，代码导入了`fs`模块，并使用`pipe()`读取并写入`LeafletEssentials.html`的内容。管道是发送文件的推荐方法；然而，您也可以使用`res.end('the
    HTML')`手动将HTML作为字符串写入。管道允许您做一些很酷的事情，例如读取和写入视频文件，以便用户在从服务器接收数据的同时播放它。将HTML作为字符串写入会使您的代码变得冗长且复杂；更不用说尝试逃避大多数HTML中所需的引号了。在最后一个例子中，您将了解一个模板库，您可以在其中存储您的HTML。
- en: 'Using the command in tool, navigate to the directory that holds your `server.js`
    code and run it by typing `node server.js`. Point your browser to `http://localhost:3000`.
    You should see your loaded map as shown:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令行工具，导航到包含您的`server.js`代码的目录，通过输入`node server.js`来运行它。将浏览器指向`http://localhost:3000`。您应该看到如图所示的加载地图：
- en: '![A basic Node.js server with Leaflet](img/4812OS_06_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![基于Leaflet的基本Node.js服务器](img/4812OS_06_01.jpg)'
- en: The preceding example simply serves a single file, and if the user points their
    browser to any other URL, such as `http://localhost:3000/about.html`, they will
    not see anything, not even an error message. The next example fixes this.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段示例只是简单地服务单个文件，如果用户将浏览器指向任何其他URL，例如`http://localhost:3000/about.html`，他们将看不到任何内容，甚至没有错误消息。下一个例子将解决这个问题。
- en: Node.js, AJAX, and Leaflet
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node.js、AJAX和Leaflet
- en: 'Now that you have a Node.js server running and serving up a Leaflet web page,
    you can use the same server to make **Asynchronous JavaScript and XML** (**AJAX**)
    calls. You are programming in JavaScript, so even though there is XML in AJAX,
    you should use JSON; it is much easier to handle than XML in JavaScript. Building
    on the first example, the following code adds another page and sends an error
    message on bad requests:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有一个Node.js服务器正在运行并托管Leaflet网页，您可以使用同一个服务器来发出**异步JavaScript和XML**（**AJAX**）调用。您正在用JavaScript编程，尽管AJAX中有XML，但您应该使用JSON；它在JavaScript中处理起来比XML容易得多。在第一个示例的基础上，以下代码添加了另一个页面，并在不良请求时发送错误消息：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code makes two changes to the first example; it adds two new routes.
    The first `if` statement is the same, returning `LeafletEssentials.html`. The
    `else if` statement checks to see whether the browser is pointed at `http://localhost:3000/getpoints`.
    If it is, then the server returns a JSON string, `[{"lat":35,"long":-106}]`. Lastly,
    if the user requests a page that doesn't exist, the server will return a 404 error
    message saying that the page is not found and will return the value of the page
    they were looking for—`req.url`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码对第一个示例进行了两项更改；它添加了两个新的路由。第一个`if`语句与之前相同，返回`LeafletEssentials.html`。`else
    if`语句检查浏览器是否指向`http://localhost:3000/getpoints`。如果是，则服务器返回一个JSON字符串，`[{"lat":35,"long":-106}]`。最后，如果用户请求一个不存在的页面，服务器将返回一个404错误消息，说明页面未找到，并将返回他们所查找的页面的值——`req.url`。
- en: 'The preceding server requires a change to your `LeafletEssentials.html` file.
    You will need a subscriber for the `click` event and to make an AJAX call when
    it occurs. Before AJAX, you will need to submit a form or make a request to the
    server and then be redirected to a new page that would display the results. AJAX
    allows you to make a request to the server, have the results returned, and display
    them without reloading the entire page. In this example, you will make an AJAX
    call to the `getpoints` URL. You will receive a JSON representation of a point.
    Then, you will add a marker that will represent the returned point—all without
    refreshing the web page:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 上述服务器需要更改您的`LeafletEssentials.html`文件。您需要一个`click`事件的订阅者，并在事件发生时进行AJAX调用。在AJAX之前，您需要提交一个表单或向服务器发出请求，然后被重定向到一个新页面，该页面将显示结果。AJAX允许您向服务器发出请求，获取结果，并在不重新加载整个页面的情况下显示它们。在这个例子中，您将向`getpoints`
    URL发出AJAX调用。您将收到一个点的JSON表示。然后，您将添加一个标记来表示返回的点——所有这些都不需要刷新网页：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Without getting too deeply into the details of AJAX, the preceding code creates
    an `XMLHttpRequest` instance and opens the `getpoints.html` web page.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不深入AJAX的细节，上述代码创建了一个`XMLHttpRequest`实例并打开了`getpoints.html`网页。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a quick lesson on `XMLHttpRequest`, check out the W3Schools website at [http://www.w3schools.com/xml/xml_http.asp](http://www.w3schools.com/xml/xml_http.asp).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解关于`XMLHttpRequest`的快速课程，请访问W3Schools网站[http://www.w3schools.com/xml/xml_http.asp](http://www.w3schools.com/xml/xml_http.asp)。
- en: It then receives the response, parses out the points separated by a comma, and
    then adds them to the map as a marker. You're only receiving a single point, so
    the `d` variable only has a single value, which is represented by `d[0]`. Objects
    in JavaScript are used by calling the object and then the value of a field, in
    this case, `d[0].lat` and `d[0].long`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它接收响应，解析出由逗号分隔的点，并将它们作为标记添加到地图上。您只接收一个点，因此`d`变量只有一个值，它由`d[0]`表示。在JavaScript中，通过调用对象然后是字段的值来使用JavaScript对象，在这种情况下，`d[0].lat`和`d[0].long`。
- en: 'Your map will look exactly as it did in the first example. When you click on
    the map, you will see another point, and your map will look like the following
    screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您的地图将看起来与第一个示例完全一样。当您点击地图时，您将看到另一个点，您的地图将看起来如下截图所示：
- en: '![Node.js, AJAX, and Leaflet](img/4812OS_06_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![Node.js, AJAX, and Leaflet](img/4812OS_06_02.jpg)'
- en: 'This example returns the same point when the user clicks on the map. This example
    can be improved by returning a different point every time the user clicks on the
    map. To do so, simply use a random number generator to return a new latitude and
    longitude. The key here is to set the maximum and minimum values so that the point
    is close to our current location. The following code uses `Math.random()` to return
    different values. To do so, replace the `res.end(JSON.stringify([{"lat":35,"long":-106}]));`
    line in the server code with the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例在用户点击地图时返回相同的点。此示例可以通过每次用户点击地图时返回不同的点来改进。要做到这一点，只需使用随机数生成器来返回新的纬度和经度。关键是设置最大和最小值，以便点接近我们的当前位置。以下代码使用`Math.random()`来返回不同的值。为此，只需将服务器代码中的`res.end(JSON.stringify([{"lat":35,"long":-106}]));`行替换为以下代码：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, when the user clicks on the map, the points will appear at random. After
    several clicks, your map should look like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当用户点击地图时，点将随机出现。点击几次后，您的地图应该看起来像这样：
- en: '![Node.js, AJAX, and Leaflet](img/4812OS_06_03.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Node.js, AJAX, and Leaflet](img/4812OS_06_03.jpg)'
- en: Node.js, Connect, and Leaflet
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node.js, Connect, and Leaflet
- en: In the previous example, you had to write the path for every possible URL. A
    user could type that path in your domain. You allowed two possibilities and sent
    an error for every other possibility. If you have a website with many pages, you
    would not want to type an `if` statement for every URL. Connect is a module that
    provides a middleware code for common tasks. The middleware allows you to accomplish
    these common tasks with minimal work on your part; you just need to use the `use()`
    function.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，您必须为每个可能的URL编写路径。用户可以在您的域名中输入该路径。您允许两种可能性，并对其他所有可能性发送错误。如果您有一个包含许多页面的网站，您不希望为每个URL编写一个`if`语句。Connect是一个模块，它为常见任务提供了中间件代码。中间件允许您通过您的工作量最小化来完成这些常见任务；您只需要使用`use()`函数。
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can learn about Connect at [http://www.senchalabs.org/connect/](http://www.senchalabs.org/connect/).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://www.senchalabs.org/connect/](http://www.senchalabs.org/connect/)了解Connect。
- en: 'To install Connect, open the command-line tool for Node.js and enter the following
    command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Connect，打开Node.js的命令行工具，并输入以下命令：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'npm is a Node.js package manager. The preceding command launches the package
    manager and asks it to install Connect. The `–g` switch is to install it globally
    so that it is available everywhere on the machine. When Connect is installed,
    your command prompt will look like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: npm是Node.js的包管理器。前面的命令启动了包管理器，并要求它安装Connect。`–g`选项是为了全局安装它，以便在机器的任何地方都可以使用。当Connect安装完成后，您的命令提示符将看起来像这样：
- en: '![Node.js, Connect, and Leaflet](img/4812OS_06_04.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![Node.js, Connect, and Leaflet](img/4812OS_06_04.jpg)'
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make note of the version that is installed because you will need this in a later
    step.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意版本号，因为您将在后续步骤中需要它。
- en: 'Once you have Connect installed, you can start the example. This example will
    create a simple server that will only serve static files. Perform the following
    steps to create the server:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您安装了Connect，您就可以开始示例。此示例将创建一个简单的服务器，它将只提供静态文件。按照以下步骤创建服务器：
- en: Make a `project` folder and place another folder inside and name it `www`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`project`文件夹，并在其中放置另一个名为`www`的文件夹。
- en: 'Place several HTML files in the directory, but especially `LeafletEssentials.html`
    and `getpoints.json`. You can use the sample included with the book or you can
    create your own. A minimum `getpoints.json` file would contain the following contents:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目录中放置几个HTML文件，特别是`LeafletEssentials.html`和`getpoints.json`。您可以使用书中包含的示例，或者创建自己的示例。一个最小的`getpoints.json`文件将包含以下内容：
- en: '[PRE7]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The contents of the file are a single point represented in JSON. You can add
    as many points as you like. You can even write a script to update the contents
    of the file at a set interval.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文件的内容是一个用JSON表示的单个点。您可以添加尽可能多的点。您甚至可以编写一个脚本来在设定的时间间隔更新文件的内容。
- en: 'Next, in the main project folder, create a file with the following contents
    and name it `package.json`. Note that this example is using a version of Connect
    prior to Version 3:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在主项目文件夹中，创建一个包含以下内容的文件，并将其命名为`package.json`。请注意，此示例使用的是Connect 3.0之前的版本：
- en: '[PRE8]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This file is used to build the project. At the command line, navigate to your
    `project` directory and type `npm install`. The package manager will read the
    `package.json` file and create a new subfolder in your `project` folder named
    `Node_modules`.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此文件用于构建项目。在命令行中，导航到您的`project`目录，并输入`npm install`。包管理器将读取`package.json`文件，并在您的`project`文件夹中创建一个名为`Node_modules`的新子文件夹。
- en: Open the folder and you will see another folder with all of the files for the
    Connect module. Before writing the server, you need to make a change in `LeafletEssentialsAjax.html`.
    The code for the AJAX call needs to point to the `getpoints.json` file. Now you
    are ready to write the server.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件夹，您将看到另一个包含 Connect 模块所有文件的文件夹。在编写服务器之前，您需要在`LeafletEssentialsAjax.html`中进行更改。AJAX
    调用的代码需要指向`getpoints.json`文件。现在您已准备好编写服务器。
- en: 'The first thing to do is to import the Connect module with `require()` and
    assign it to a variable. Create a server by calling `connect()`. And lastly, invoke
    the middleware `static()` and ask it to take the `www` directory and serve all
    files within it. The `_dirname` variable takes the current directory and concatenates
    it with the `/www` directory, giving the path to your files as shown in the following
    code. Listen on any available port:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首件事是使用`require()`导入 Connect 模块并将其分配给一个变量。通过调用`connect()`创建一个服务器。最后，调用中间件`static()`并要求它处理`www`目录中的所有文件。`_dirname`变量获取当前目录并将其与`/www`目录连接，从而得到文件的路径，如下面的代码所示。监听任何可用的端口：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The code is much shorter than the previous examples. There are no `if ('/' ==
    req.url)` statements. The middleware knows all the files in the directory, and
    if a URL that matches a filename is requested, it will be sent. If it does not
    exist, the middleware will send the error page. If you add a new HTML file, it
    will be served up as soon as it is placed in the folder and requested. Now, when
    you connect and get your map, you can click on it, and the contents of `getpoints.json`
    will be returned and displayed on the map.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 代码比前面的例子要短得多。没有`if ('/' == req.url)`语句。中间件知道目录中的所有文件，如果请求的 URL 与文件名匹配，它将被发送。如果不存在，中间件将发送错误页面。如果您添加新的
    HTML 文件，它将在放入文件夹并请求后立即被提供。现在，当您连接并获取地图时，您可以点击它，`getpoints.json`的内容将被返回并在地图上显示。
- en: Node.js, Express, Jade, and Leaflet
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node.js、Express、Jade 和 Leaflet
- en: In the first two examples, you had to create a static HTML file for the server
    to serve to the client. In this example, you will use a template that allows you
    to pass variables to the HTML when loaded. This will allow you to create dynamic
    data-driven websites.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个例子中，您必须为服务器创建一个静态 HTML 文件以供客户端使用。在这个例子中，您将使用一个模板，允许您在加载 HTML 时传递变量。这将允许您创建动态的数据驱动网站。
- en: For this example, you will need to install the Jade module for Node.js. To do
    so, open the command-line tool and enter the following command. This is the same
    procedure as the previous example.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，您需要为 Node.js 安装 Jade 模块。为此，打开命令行工具并输入以下命令。这与前面的例子相同。
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, you have the Jade module installed globally. You will also need to install
    Express. Express is one of the most popular web frameworks that can be used with
    Node.js. It is similar to Connect, but in this example, it is the tool that allows
    us to use a view engine, which is Jade. Again, type the following command and
    make sure that you note the installed versions:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已全局安装了 Jade 模块。您还需要安装 Express。Express 是 Node.js 中最流行的 Web 框架之一。它与 Connect
    类似，但在这个例子中，它是允许我们使用视图引擎 Jade 的工具。再次，输入以下命令，并确保您注意已安装的版本：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on Express and Jade, you can go to the website for Express
    at [http://expressjs.com/](http://expressjs.com/) and for Jade at [http://jade-lang.com/](http://jade-lang.com/).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解更多关于 Express 和 Jade 的信息，您可以访问 Express 网站[http://expressjs.com/](http://expressjs.com/)和
    Jade 网站[http://jade-lang.com/](http://jade-lang.com/)。
- en: 'Now that you have both modules installed, create a folder for your application.
    In the folder, you will need to create the `package.json` file. In this example,
    you have two dependencies, so your file should look like the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已安装了这两个模块，为您的应用程序创建一个文件夹。在文件夹中，您需要创建`package.json`文件。在这个例子中，您有两个依赖项，所以您的文件应该看起来像以下代码：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Using the command-line tool, navigate to the application directory and use
    npm to add the dependencies using the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令行工具，导航到应用程序目录，并使用 npm 通过以下命令添加依赖项：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You will now have a `Node.js_modules` folder with the `Jade` and `Express`
    subfolders. You will need a directory to hold or view the template file. This
    folder needs to be named `views` because that is where Express will look. Create
    the directory and then open a text editor to create your view. For a quick introduction
    to Jade, you can read the tutorial at [http://jade-lang.com/tutorial/](http://jade-lang.com/tutorial/).
    The important thing to note is that Jade is whitespace sensitive, and hence indentations
    must be exact. This can be extremely frustrating at first. The following template
    is the modified `LeafletEssentials.html` file that you have been using in the
    previous examples. One key difference is the fourth line: `title = title`. This
    line sets the title of the HTML document to the value of a variable, `title`,
    in the server code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在将有一个 `Node.js_modules` 文件夹，其中包含 `Jade` 和 `Express` 子文件夹。您需要一个目录来保存或查看模板文件。这个文件夹需要命名为
    `views`，因为 Express 会在这里查找。创建该目录，然后打开文本编辑器来创建您的视图。为了快速了解 Jade，您可以阅读在 [http://jade-lang.com/tutorial/](http://jade-lang.com/tutorial/)
    的教程。需要注意的是，Jade 对空白字符敏感，因此缩进必须精确。这可能会在最初非常令人沮丧。以下模板是您在之前的示例中使用的修改后的 `LeafletEssentials.html`
    文件。一个关键的区别是第四行：`title = title`。这一行将 HTML 文档的标题设置为服务器代码中变量 `title` 的值：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Save the preceding code in a file named `LeafletEssentials.jade` within your
    view folder. Now, you are ready to write the server.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面的代码保存到您视图文件夹中名为 `LeafletEssentials.jade` 的文件中。现在，您已经准备好编写服务器了。
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Jade is a popular and powerful template module; however, there are others too.
    Two others that might be easier to learn at first are HAML at [http://haml.info/](http://haml.info/)
    and EJS at [http://embeddedjs.com/](http://embeddedjs.com/).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Jade 是一个流行且强大的模板模块；然而，还有其他的选择。最初可能更容易学习的两个是 HAML，在 [http://haml.info/](http://haml.info/)，以及
    EJS，在 [http://embeddedjs.com/](http://embeddedjs.com/)。
- en: 'The code for the server is as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器的代码如下：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding code imports the Express module and assigns it to a variable.
    It then creates an app with Express. The view engine defaults to Jade, but if
    you want to use another, you need the third line to set the appropriate engine.
    The next lines use `app.get()` to specify the two URLs that our application will
    return. The first one will return our view and the second is for the AJAX call
    and returns a point in JSON. In the first AJAX example, you needed to specify
    `JSON.stringify()` when you returned the point. One of the reasons to use a framework
    is that it takes care of many common tasks for you. In this case, Express will
    know what it is you are returning and set the value accordingly. In this example,
    you are returning a JSON string, and Express will automatically JSONify it for
    you.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码导入 Express 模块并将其分配给一个变量。然后使用 Express 创建一个应用。默认视图引擎是 Jade，但如果您想使用另一个，您需要第三行来设置适当的引擎。接下来的几行使用
    `app.get()` 来指定我们的应用程序将返回的两个 URL。第一个将返回我们的视图，第二个用于 AJAX 调用并返回一个 JSON 格的点。在第一个
    AJAX 示例中，当您返回点时需要指定 `JSON.stringify()`。使用框架的一个原因就是它为您处理了许多常见任务。在这种情况下，Express
    会知道您返回的是什么，并相应地设置值。在这个例子中，您返回一个 JSON 字符串，Express 会自动为您将其 JSON 化。
- en: Your map will look just like the one in the previous examples, and when the
    user clicks, a point will be added. The next examples will use Python to serve
    a Leaflet application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您的地图将看起来就像之前的示例中的那样，当用户点击时，会添加一个点。接下来的示例将使用 Python 来提供 Leaflet 应用程序。
- en: Leaflet with Python and CherryPy
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 和 CherryPy 创建 Leaflet
- en: The Python programming language is extremely powerful and has a large number
    of standard libraries and other third-party libraries. It is also fairly easy
    to pick up for simple tasks. There is extensive documentation, and a large number
    of books and different libraries are available on the language. You can download
    Python from the Python website at [https://www.python.org/downloads/](https://www.python.org/downloads/).
    Version 3 is the latest; however, Version 2.7 is still in use. It is probably
    best to start learning with Version 3, but if you have v2.7, it will work with
    the examples.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Python 编程语言非常强大，拥有大量的标准库和其他第三方库。它对于简单任务来说也相当容易上手。关于该语言的文档非常丰富，有大量的书籍和不同的库可供选择。您可以从
    Python 网站下载 Python，网址为 [https://www.python.org/downloads/](https://www.python.org/downloads/)。版本
    3 是最新的；然而，版本 2.7 仍在使用中。可能最好从版本 3 开始学习，但如果您有 v2.7，它将适用于这些示例。
- en: In this example, you will use the CherryPy library. You can download the library
    at [http://www.cherrypy.org/](http://www.cherrypy.org/).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你将使用 CherryPy 库。你可以在 [http://www.cherrypy.org/](http://www.cherrypy.org/)
    下载这个库。
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more books on CherryPy and Python web development, visit [http://www.packtpub.com/CherryPy/book](http://www.packtpub.com/CherryPy/book)
    or [http://www.packtpub.com/python-3-web-development-beginners-guide/book](http://www.packtpub.com/python-3-web-development-beginners-guide/book).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于 CherryPy 和 Python 网络开发的书籍，请访问 [http://www.packtpub.com/CherryPy/book](http://www.packtpub.com/CherryPy/book)
    或 [http://www.packtpub.com/python-3-web-development-beginners-guide/book](http://www.packtpub.com/python-3-web-development-beginners-guide/book)。
- en: 'CherryPy is a smaller web framework compared to Django or Pyramid—formerly
    Pylons. For this example, it will allow you to get up and running quickly without
    much overhead. To manually install a third-party Python library, extract it to
    a folder and run the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy 相比 Django 或 Pyramid（前身为 Pylons）是一个更小的网络框架。在这个例子中，它将允许你快速启动而无需太多开销。要手动安装第三方
    Python 库，将其提取到一个文件夹中，并运行以下命令：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After running the command, you will be able to import the library in your Python
    code. For this example, you will connect to a NoSQL database: MongoDB. MongoDB
    is a document database. It stores everything as a JSON-style document, not in
    relational tables. While it''s not as spatially enabled as PostGIS, which is an
    extension to PostgreSQL, it has a few spatial features that make it an excellent
    choice for a Leaflet backend. You can download MongoDB at [http://www.mongodb.org/](http://www.mongodb.org/).'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令后，你将能够在你的 Python 代码中导入这个库。在这个例子中，你将连接到一个 NoSQL 数据库：MongoDB。MongoDB 是一个文档数据库。它将所有内容存储为
    JSON 风格的文档，而不是关系型表格。虽然它的空间功能不如 PostgreSQL 的扩展 PostGIS 强大，但它有一些空间功能，使其成为 Leaflet
    后端的一个优秀选择。你可以在 [http://www.mongodb.org/](http://www.mongodb.org/) 下载 MongoDB。
- en: To use MongoDB with Python, you will also need to download and install PyMongo.
    You can download the library at [https://pypi.python.org/pypi/pymongo/](https://pypi.python.org/pypi/pymongo/).
    Once you have your environment set up, you can start your MongoDB by running the
    application mongod.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Python 与 MongoDB 一起使用，你还需要下载并安装 PyMongo。你可以在 [https://pypi.python.org/pypi/pymongo/](https://pypi.python.org/pypi/pymongo/)
    下载这个库。一旦你的环境设置完成，你可以通过运行应用程序 mongod 来启动 MongoDB。
- en: Note
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you receive an error about a missing path, you will need to add the `C:\data\db`
    directory. Just create the folders and then rerun mongod. On Linux and OS X, execute
    `mkdir -p /data/db` to add the data directory.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到一个关于缺失路径的错误，你需要添加 `C:\data\db` 目录。只需创建文件夹，然后重新运行 mongod。在 Linux 和 OS X
    上，执行 `mkdir -p /data/db` 以添加数据目录。
- en: 'Your database is empty. The `pa.py` Python file that is available on these
    books'' website will create a database and populate it with the public art data
    that was used in earlier chapters of this book. The file looks like the following
    code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你的数据库是空的。这些书籍网站上可用的 `pa.py` Python 文件将创建一个数据库，并用本书早期章节中使用的公共艺术数据填充它。文件看起来像以下代码：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding code imports two modules from the PyMongo library: Connection
    and GEO2D. The first handles our connection to the DB and the second allows us
    to spatially enable it. The next line makes a connection to a database called
    `albuquerque`. Next, a spatially enabled index is created for a collection called
    `publicart` and it indexes the `loc` field. The next two lines are public art
    points that are inserted into the collection. They each contain a location, name,
    and pop-up field that contains the URL to an image of the piece.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码从 PyMongo 库中导入了两个模块：Connection 和 GEO2D。第一个处理我们与数据库的连接，第二个允许我们启用空间功能。下一行创建了一个名为
    `albuquerque` 的数据库的连接。接下来，为名为 `publicart` 的集合创建了一个空间启用索引，并对其 `loc` 字段进行了索引。接下来的两行是插入到集合中的公共艺术点。它们各自包含一个位置、名称和一个包含该作品图片
    URL 的弹出字段。
- en: Execute the file by typing `python pa.py`. Your MongoDB will now have a database,
    collection, and enough data to allow you to try some samples.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入 `python pa.py` 来执行文件。现在你的 MongoDB 将有一个数据库、集合以及足够的数据，允许你尝试一些示例。
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you ever delete, corrupt, or just want to refresh your database, you can
    run this file over again to start a fresh.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经删除、损坏或只是想要刷新你的数据库，你可以再次运行这个文件来开始一个新的。
- en: 'Now that you have your database running and populated and have Python installed
    with CherryPy and PyMongo, you are now ready to write your first server:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经运行并填充了数据库，并且安装了 CherryPy 和 PyMongo 的 Python，你现在可以开始编写你的第一个服务器了：
- en: 'The first step is to import the Python libraries as follows:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是按照以下方式导入 Python 库：
- en: '[PRE18]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, you create a class and a function that will represent the URL to your
    application. In this example, it will be the `index` function:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你创建一个类和一个函数，该函数将代表你的应用程序的URL。在这个例子中，它将是`index`函数：
- en: '[PRE19]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The function will first create an array to hold the contents of an HTML file.
    You can append the contents of `LeafletEssentials.html` up until you add the tile
    layer basemap:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数首先会创建一个数组来存储HTML文件的内容。你可以将`LeafletEssentials.html`的内容追加到添加瓦片图层底图之前：
- en: '[PRE20]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, create the database connection and search for all documents in the collection
    named `publicart`. The `find()` function will return a large number of records.
    On each record, you will append an HTML string, creating a marker using the record.
    The location field creates the marker and the name and pop-up fields are added
    to the markers'' pop up:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建数据库连接并搜索名为`publicart`的集合中的所有文档。`find()`函数将返回大量记录。在每条记录上，你将追加一个HTML字符串，使用记录创建一个标记。位置字段创建标记，名称和弹出字段添加到标记的弹出窗口中：
- en: '[PRE21]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once all the documents are added, you can append the closing HTML tags to the
    array. Then, convert the array to a string so that you can return it when the
    user requests the index of the application as follows:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦所有文档都添加完毕，你可以将关闭HTML标签追加到数组中。然后，将数组转换为字符串，以便在用户请求应用程序的索引时返回，如下所示：
- en: '[PRE22]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Lastly, you need to expose the `index` function, set the address and port the
    application will use, and then start the server by calling the classname:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你需要公开`index`函数，设置应用程序将使用的地址和端口，然后通过调用类名来启动服务器：
- en: '[PRE23]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When you have finished, run the program by opening a command line and typing
    the following command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，通过打开命令行并输入以下命令来运行程序：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Open a browser and point it to `http://127.0.0.1:8000`. You should see a map
    like the following one:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并将它指向`http://127.0.0.1:8000`。你应该会看到一个像以下这样的地图：
- en: '![Leaflet with Python and CherryPy](img/4812OS_06_05.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![使用Python和CherryPy的Leaflet](img/4812OS_06_05.jpg)'
- en: The application returned the contents of your MongoDB and displayed them in
    a Leaflet map. Now that you know how to create a URL route in an application,
    let's expand on this example to add an AJAX call for spatial searches.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序返回了你的MongoDB内容，并在Leaflet地图中显示它们。现在你已知道如何在应用程序中创建URL路由，让我们扩展这个例子以添加一个用于空间搜索的AJAX调用。
- en: Spatial queries with Python, MongoDB, and Leaflet
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Python、MongoDB和Leaflet进行空间查询
- en: MongoDB allows you to access spatial queries. You can search for results near
    a single point, near a point by setting a maximum distance, within a bounding
    rectangle, or within a circle. In this example, you will query for results near
    a point.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB允许你访问空间查询。你可以搜索靠近单个点的结果，通过设置最大距离来搜索靠近一个点，在边界矩形内或在一个圆内。在这个例子中，你将查询靠近一个点的结果。
- en: 'Import the required libraries. In the following code, you will import two new
    module tools from the `cherrypy` library and `json`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 导入所需的库。在以下代码中，你将导入来自`cherrypy`库的`json`模块和两个新模块工具：
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'After importing the libraries, perform the following steps:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入库之后，执行以下步骤：
- en: 'Create the class. Using tools, you will expose the function with the `@` sign.
    Connect to the database and write out the HTML code. The HTML code in this example
    is different. You will add a listener for the `click` event. The code for this
    block will make an AJAX call to the `getdata` page and pass it the `(x,y)` coordinates
    of the `click` event. The data returned will only contain three objects, so you
    can hardcode the HTML instead of running a `for` loop as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建类。使用工具，你将通过`@`符号公开函数。连接到数据库并写出HTML代码。在这个例子中，HTML代码是不同的。你将添加一个监听`click`事件的监听器。这个代码块的代码将向`getdata`页面发起AJAX调用，并传递`click`事件的`(x,y)`坐标。返回的数据将只包含三个对象，因此你可以直接编写HTML而不是运行`for`循环，如下所示：
- en: '[PRE26]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, close the HTML tags, convert them to a string, and return them when the
    `page` function is called:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，关闭HTML标签，将它们转换为字符串，并在调用`page`函数时返回它们：
- en: '[PRE27]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, you will define and expose another URL function. This one will be called
    `getdata` and it will handle the AJAX call from the users'' click. This function
    gets passed the `x` and `y` variables. These will be the coordinates of the users''
    click. The query in this example is different than the previous example. Notice
    that you use `find()` but add `$near` and pass it the coordinates of the users''
    click. The search is set to only return three results. Lastly, you pass back the
    results as JSON using `@tools.json_out()`, as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将定义并公开另一个 URL 函数。这个函数将被命名为 `getdata`，它将处理用户点击的 AJAX 调用。此函数接收 `x` 和 `y` 变量。这些将是用户点击的坐标。在此示例中，查询与前面的示例不同。请注意，您使用了
    `find()`，但添加了 `$near` 并传递了用户点击的坐标。搜索设置为仅返回三个结果。最后，您使用 `@tools.json_out()` 将结果作为
    JSON 返回，如下所示：
- en: '[PRE28]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Lastly, set the IP address of the server and port. Then, run it:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，设置服务器的 IP 地址和端口号。然后运行它：
- en: '[PRE29]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now you can run the file and point your browser to `http://127.0.0.1:8000`.
    You will see a blank map. Click anywhere on the map and you will see three points
    appear. These are the closest points to where you clicked. Your map will look
    like the following screenshot after clicking once:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以运行文件，并将浏览器指向 `http://127.0.0.1:8000`。您将看到一个空白地图。点击地图上的任何位置，您将看到三个点出现。这些是您点击位置最近的点。点击一次后，您的地图将看起来如下截图所示：
- en: '![Spatial queries with Python, MongoDB, and Leaflet](img/4812OS_06_06.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Python、MongoDB 和 Leaflet 进行空间查询](img/4812OS_06_06.jpg)'
- en: Using Python to connect to your MongoDB allows you to not only query the database
    to display results, but with a little more code, you can use it to save the results
    of a map. You could allow the user to click on the map where they would like to
    add a point and then use the `(x,y)` coordinates and perform an `insert()` method
    instead of a `find()` function. The preceding examples provided a very brief overview
    of how to serve up a Leaflet map with Python and handle AJAX queries. The next
    examples will move on to using C# to make desktop applications with Leaflet.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 连接到您的 MongoDB 允许您不仅查询数据库以显示结果，而且通过编写更多代码，您还可以使用它来保存地图的结果。您可以允许用户在地图上点击他们想要添加点的地方，然后使用
    `(x,y)` 坐标并执行 `insert()` 方法而不是 `find()` 函数。前面提供的示例简要概述了如何使用 Python 提供Leaflet 地图并处理
    AJAX 查询。接下来的示例将转向使用 C# 制作带有 Leaflet 的桌面应用程序。
- en: Desktop applications in C# with Leaflet
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Leaflet 的 C# 桌面应用程序
- en: Leaflet is used in a web page; however, with C#, you can embed a web browser
    in a Windows form to create what appears to be a desktop application. The examples
    in this section will show you how to add a map to a C# application, add a point
    by calling a JavaScript function from C#, and show you how to connect to MongoDB
    in C# and display the results on the map.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Leaflet 用于网页中；然而，使用 C#，您可以在 Windows 表单中嵌入网页浏览器，创建看起来像是桌面应用程序的东西。本节中的示例将向您展示如何将地图添加到
    C# 应用程序中，如何通过从 C# 调用 JavaScript 函数来添加一个点，以及如何使用 C# 连接到 MongoDB 并在地图上显示结果。
- en: Adding a map to a C# application
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将地图添加到 C# 应用程序
- en: To build an application in C#, you will need to install Microsoft Visual Studio
    Express. You will need at least Visual Studio C# 2010\. You can download it at
    [http://www.visualstudio.com/downloads/download-visual-studio-vs](http://www.visualstudio.com/downloads/download-visual-studio-vs).
    This program is a slimmed-down version of the commercial Visual Studio. It allows
    you to rapidly build **Windows Form Applications** and compile your code in to
    an easily redistributable Windows Executable.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 C# 中构建应用程序，您需要安装 Microsoft Visual Studio Express。您至少需要 Visual Studio C# 2010。您可以在
    [http://www.visualstudio.com/downloads/download-visual-studio-vs](http://www.visualstudio.com/downloads/download-visual-studio-vs)
    下载它。此程序是商业 Visual Studio 的精简版。它允许您快速构建 **Windows 表单应用程序**并将您的代码编译成易于分发的 Windows
    可执行文件。
- en: 'Launch the application and create a new **Windows Form Application** from the
    dialog box, as shown in the following screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 启动应用程序，并从对话框中创建一个新的 **Windows 表单应用程序**，如图下所示：
- en: '![Adding a map to a C# application](img/4812OS_06_07.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![将地图添加到 C# 应用程序中](img/4812OS_06_07.jpg)'
- en: 'Your application will be a blank form. Select the toolbox on the upper-left
    corner of the window and drag the web browser to the form, as shown in the following
    screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序将是一个空白表单。选择窗口左上角的工具箱，并将网页浏览器拖到表单上，如图下所示：
- en: '![Adding a map to a C# application](img/4812OS_06_08.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![将地图添加到 C# 应用程序中](img/4812OS_06_08.jpg)'
- en: 'Click on the web browser that you dragged to the form and modify the `URL`
    property to point to an instance of `LeafletEssentials.html` running on your web
    server. Save the application. Click on the **Debug** menu and then start debugging.
    Your application will launch and you will see your Leaflet map loaded in the Windows
    Form, as shown in the following screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 点击你拖到表单中的网页浏览器，并修改`URL`属性，使其指向运行在你网络服务器上的`LeafletEssentials.html`实例。保存应用程序。点击**调试**菜单，然后开始调试。你的应用程序将启动，你将看到你的Leaflet地图在Windows表单中加载，如下面的截图所示：
- en: '![Adding a map to a C# application](img/4812OS_06_09.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![将地图添加到C#应用程序中](img/4812OS_06_09.jpg)'
- en: You now have a map in a C# application without any code. The next example will
    add some functionality to your application.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经在一个C#应用程序中拥有了一张地图，而且没有任何代码。接下来的示例将给你的应用程序添加一些功能。
- en: Adding a marker in C#
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在C#中添加标记
- en: In this example, you will build on the previous example by adding a marker.
    The first thing you need to do is drag a button onto the bottom of the form using
    the toolbox. In the properties of the button, change the `text` property from
    `button1` to `Add Marker`. Then, double-click on the button.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将通过添加一个标记来构建上一个示例。你需要做的第一件事是使用工具箱将一个按钮拖到表单的底部。在按钮的属性中，将`text`属性从`button1`更改为`Add
    Marker`。然后，双击按钮。
- en: 'You are now looking at the code that Visual Studio created for you when you
    created the application, and it has now added a function to handle the button
    click. It wrote the function when you clicked on the button. Before you code the
    button, you will need to add a reference to `MSHTML.dll`. This file will allow
    you to use the web and HTML objects you need to make your map work. At the top
    of your code, you will see several lines that start with `using`. This is where
    you import the required libraries into your application. The most common ones
    have already been added. At the end of the list, type the code `using MSHTML;`.
    It will be underlined and won''t be found. You now need to right-click on the
    project in the **Solution Explorer** window and select **Add Reference**. Add
    a COM reference to Microsoft HTML Object Library as shown in the following screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在看到的是当你创建应用程序时Visual Studio为你创建的代码，并且它已经添加了一个处理按钮点击的功能。当你点击按钮时，它会编写这个函数。在你编写按钮代码之前，你需要添加对`MSHTML.dll`的引用。这个文件将允许你使用你需要的网络和HTML对象来使你的地图工作。在你的代码顶部，你会看到一些以`using`开头的行。这就是你将所需的库导入到应用程序中的地方。最常见的已经添加了。在列表的末尾，输入代码`using
    MSHTML;`。它会被下划线标记，并且不会找到。现在你需要右键点击**解决方案资源管理器**窗口中的项目，并选择**添加引用**。添加一个COM引用到微软HTML对象库，如以下截图所示：
- en: '![Adding a marker in C#](img/4812OS_06_10.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![在C#中添加标记](img/4812OS_06_10.jpg)'
- en: 'Now that you have added the reference, the underline will disappear and you
    can start coding the `button1_Click()` function. Add the following code to the
    function:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经添加了引用，下划线将消失，你可以开始编写`button1_Click()`函数。将以下代码添加到函数中：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The preceding code grabs the `<head>` tag of the `LeafletEssentials.html` file
    that you loaded through the web browser properties. It then creates a `<script>`
    element so that you can add JavaScript to the HTML and execute it. You then create
    the script element and pass it a `text` string. The string is a JavaScript function
    for adding a point to the map.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码抓取了通过网页浏览器属性加载的`LeafletEssentials.html`文件的`<head>`标签。然后创建一个`<script>`元素，以便你可以在HTML中添加JavaScript并执行它。然后创建脚本元素，并传递一个`text`字符串。这个字符串是用于在地图上添加点的JavaScript函数。
- en: 'You must wrap your code in a function, because that is how C# will call and
    execute it. You then append the `<script>` tag to the `<head>` tag of the document
    and tell the web browser to invoke the `addPoints()`function. So now, when the
    user clicks on the button, the JavaScript function will be added to `LeafletEssentials.html`
    and will be executed. Save and debug the project. When the application launches,
    click on the button and your application should look like this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须将你的代码包裹在一个函数中，因为这是C#调用和执行它的方式。然后，将`<script>`标签追加到文档的`<head>`标签中，并告诉网页浏览器调用`addPoints()`函数。所以现在，当用户点击按钮时，JavaScript函数将被添加到`LeafletEssentials.html`中，并执行。保存并调试项目。当应用程序启动时，点击按钮，你的应用程序应该看起来像这样：
- en: '![Adding a marker in C#](img/4812OS_06_11.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![在C#中添加标记](img/4812OS_06_11.jpg)'
- en: To allow C# applications to modify a Leaflet application, insert a JavaScript
    function to a base HTML file and then execute it using an event such as a button
    click. The next example will connect to MongoDB.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要允许 C# 应用程序修改 Leaflet 应用程序，将一个 JavaScript 函数插入到基础 HTML 文件中，然后通过事件（如按钮点击）执行它。下一个示例将连接到
    MongoDB。
- en: Using MongoDB with C# and Leaflet
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 C# 和 Leaflet 的 MongoDB
- en: 'Just as in the Python example, to use MongoDB in C# will require a driver.
    You can download the C# drivers at [https://github.com/mongodb/mongo-csharp-driver/releases](https://github.com/mongodb/%E2%80%A8mongo-csharp-driver/releases).
    This example uses the `.zip` file. In your project, add another reference, but
    instead of selecting COM, this time, you will browse to where you extracted the
    drivers from the `.zip` file. The folder should contain `MongoDB.Bson.dll` and
    `MongoDB.Driver.dll`. After adding the reference, you must import the required
    libraries using the following code:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 Python 示例一样，要在 C# 中使用 MongoDB，将需要驱动程序。你可以在 [https://github.com/mongodb/mongo-csharp-driver/releases](https://github.com/mongodb/%E2%80%A8mongo-csharp-driver/releases)
    下载 C# 驱动程序。此示例使用 `.zip` 文件。在你的项目中添加另一个引用，但这次不是选择 COM，而是浏览到你从 `.zip` 文件中提取驱动程序的位置。文件夹应包含
    `MongoDB.Bson.dll` 和 `MongoDB.Driver.dll`。添加引用后，你必须使用以下代码导入所需的库：
- en: '[PRE31]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'With the libraries imported, you can modify your button to connect to MongoDB
    and load the points. The following instructions will walk you through the code
    to connect to MongoDB:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 导入库后，你可以修改你的按钮以连接到 MongoDB 并加载点。以下说明将指导你通过代码连接到 MongoDB：
- en: 'First, you will need a string to hold the JavaScript function that will add
    the points. In C#, you will use `StringBuilder()` so that you can append to the
    string. You can start by appending the function name and the first brace:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要一个字符串来保存将要添加点的 JavaScript 函数。在 C# 中，你会使用 `StringBuilder()` 来能够向字符串中追加内容。你可以从追加函数名和第一个大括号开始：
- en: '[PRE32]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, you set up the connection to MongoDB. Connect to the IP and port—the
    default is localhost on port 27017\. Get the server and then the database named
    `albuquerque`. Lastly, connect to the `publicart` collection:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你设置连接到 MongoDB。连接到 IP 和端口——默认是 localhost 的 27017 端口。获取服务器和名为 `albuquerque`
    的数据库。最后，连接到 `publicart` 集合：
- en: '[PRE33]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, you can execute the query. The query will find all documents and return
    each one. The code appends a string, which creates a marker by concatenating the
    location, name, and pop-up information from each document:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以执行查询。查询将找到所有文档并返回每一个。代码追加一个字符串，通过连接每个文档的位置、名称和弹出信息来创建标记：
- en: '[PRE34]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Close the string with the last brace:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用最后一个大括号关闭字符串：
- en: '[PRE35]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The last code block is the same as the previous example. Create the HTML elements
    and insert the string by converting `StringBuilder.toString()`:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个代码块与上一个示例相同。创建 HTML 元素，并通过将 `StringBuilder.toString()` 转换为字符串来插入字符串：
- en: '[PRE36]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Save and debug the project. When the application is launched, click on the
    button, and your application should look like the following screenshot:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并调试项目。当应用程序启动时，点击按钮，你的应用程序应该看起来像以下截图：
- en: '![Using MongoDB with C# and Leaflet](img/4812OS_06_12.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![使用 C# 和 Leaflet 的 MongoDB](img/4812OS_06_12.jpg)'
- en: The very last step is to select the `debug` menu and, instead of debugging,
    select `build solution`. If you browse to the `project` folder, you will have
    a directory named `bin`. Within the directory, you now have an `.exe` file.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是选择 `debug` 菜单，而不是调试，选择 `build solution`。如果你浏览到 `project` 文件夹，你将有一个名为 `bin`
    的目录。在该目录中，你现在有一个 `.exe` 文件。
- en: Now, you have a MongoDB collection in a Leaflet map written in C# and compiled
    as `.exe`. For this to run on another machine, you would only need to make your
    MongoDB sit on a real IP and allow access from outside your network.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你有一个用 C# 编写并编译为 `.exe` 的 MongoDB 集合 Leaflet 地图。为了让它在另一台机器上运行，你只需要让你的 MongoDB
    部署在真实的 IP 地址上，并允许从你的网络外部访问。
- en: The last example will allow the user to click on the map and return the closest
    points.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个示例将允许用户点击地图并返回最近的点。
- en: Querying with C#, Leaflet, and MongoDB
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 C#、Leaflet 和 MongoDB 进行查询
- en: 'You have learned how to pass data from C# to Leaflet by writing a JavaScript
    function, injecting it into the HTML file, and then executing it. Passing data
    from JavaScript back to C# is a little different. One way in which you can pass
    data is to have the JavaScript write the contents to `<div>`, and then C# can
    read it in. The key here is to set the `<div>` tag to be invisible. The following
    steps will walk you through the last example:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何通过编写 JavaScript 函数、将其注入到 HTML 文件中并执行它，将数据从 C# 传递到 Leaflet。从 JavaScript
    返回 C# 的方法略有不同。你可以传递数据的一种方式是让 JavaScript 将内容写入 `<div>`，然后 C# 可以读取它。关键是要将 `<div>`
    标签设置为不可见。以下步骤将指导你完成最后一个示例：
- en: 'First, modify `LeafletEssentials.html` by adding a new `<div>`, and set the
    style so that the display is set to `none`. If you set it as `hidden`, it will
    take up space in the document and there would be a blank spot below your map:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过添加一个新的 `<div>` 并设置样式，将 `LeafletEssentials.html` 修改为将显示设置为 `none`。如果你将其设置为
    `hidden`，它将在文档中占用空间，并在你的地图下方留下空白区域：
- en: '[PRE37]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Next, create a listener for the `click` event and write a function that creates
    a marker, showing you the location of the `click` event that cleans up the text
    of the returned latitude and longitude and writes the results to `<div>`:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个 `click` 事件的监听器，并编写一个函数来创建一个标记，显示 `click` 事件的地点，清理返回的纬度和经度文本，并将结果写入
    `<div>`：
- en: '[PRE38]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'With the HTML file ready, you can now modify the C#. The first step is to read
    in the points from the `<div>` tag and then parse them so that each is in its
    own variable as follows:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTML 文件准备就绪后，你现在可以修改 C#。第一步是从 `<div>` 标签中读取点，然后解析它们，以便每个点都在自己的变量中，如下所示：
- en: '[PRE39]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Set up the connection to MongoDB. Connect to the IP and port. Get the server
    and then the database named `albuquerque`. Lastly, connect to the `publicart`
    collection:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置与 MongoDB 的连接。连接到 IP 和端口。获取服务器，然后是名为 `albuquerque` 的数据库。最后，连接到 `publicart`
    集合：
- en: '[PRE40]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create a text string of the query and initialize your `StringBuilder()` function
    to hold the JavaScript of the function and results:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个查询的文本字符串，并初始化你的 `StringBuilder()` 函数以保存函数和结果：
- en: '[PRE41]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Execute the query in a loop using the `near()` function. Pass the results to
    the string, building up the JavaScript function:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `near()` 函数在循环中执行查询。将结果传递到字符串中，构建 JavaScript 函数：
- en: '[PRE42]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The last code block is the same as the previous two examples. Create the HTML
    elements and insert the string by converting `StringBuilder.toString()`:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个代码块与前面的两个示例相同。创建 HTML 元素，并通过将 `StringBuilder.toString()` 转换为字符串来插入字符串：
- en: '[PRE43]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Save and debug the project. When the application is launched, click on the button,
    and your application should look like the following screenshot:![Querying with
    C#, Leaflet, and MongoDB](img/4812OS_06_13.jpg)
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并调试项目。当应用程序启动时，点击按钮，你的应用程序应该看起来像以下截图：![使用 C#、Leaflet 和 MongoDB 查询](img/4812OS_06_13.jpg)
- en: Summary
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this last chapter, you have learned how to use `Leaflet.js` in other programming
    languages and frameworks. Starting with Node.js, you learned how to use JavaScript
    on the frontend and the backend. You created a Node.js server that returned a
    Leaflet web page. You then modified the code to allow AJAX calls back to the server
    to update the map without reloading the page.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，你学习了如何在其他编程语言和框架中使用 `Leaflet.js`。从 Node.js 开始，你学习了如何在前端和后端使用 JavaScript。你创建了一个
    Node.js 服务器，返回一个 Leaflet 网页。然后你修改了代码，允许 AJAX 调用返回到服务器以更新地图而不重新加载页面。
- en: You also learned how to create a server and allow AJAX requests using Python
    and CherryPy. The Python example introduced NoSQL databases, in particular, MongoDB.
    You learned how to write a query to return all the documents in a database collection
    as well as how to use AJAX to query only points that are near the points where
    a user has clicked.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 你还学习了如何使用 Python 和 CherryPy 创建服务器并允许 AJAX 请求。Python 示例介绍了 NoSQL 数据库，特别是 MongoDB。你学习了如何编写查询以返回数据库集合中的所有文档，以及如何使用
    AJAX 仅查询用户点击点附近的点。
- en: Lastly—for something totally different—you learned how to embed a web browser
    into a Windows Form and run a desktop application with Leaflet. The applications
    used buttons on the form to execute JavaScript functions that were injected into
    the `LeafletEssentials.html` file. You then passed data in the other direction—from
    JavaScript back to C#—capturing mouse clicks on the map and using them to query
    MongoDB and return the results. The C# applications you built can then be compiled
    in a .exe file and distributed to anyone who can connect to your MongoDB and `LeafletEssentials.html`
    file.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后——对于完全不同的事情——你学习了如何将网页浏览器嵌入到 Windows 表单中，并使用 Leaflet 运行桌面应用程序。这些应用程序在表单上使用按钮来执行注入到
    `LeafletEssentials.html` 文件中的 JavaScript 函数。然后你从 JavaScript 方向传递数据回到 C#——捕捉地图上的鼠标点击并使用它们来查询
    MongoDB 并返回结果。你构建的 C# 应用程序可以随后编译成 .exe 文件并分发给任何可以连接到你的 MongoDB 和 `LeafletEssentials.html`
    文件的人。
