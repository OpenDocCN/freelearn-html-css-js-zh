- en: '*Chapter 4*: Advanced Concepts of Vue.js'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we look at advanced uses of Vue.js. We will study the handling
    of events in components, then the assembly of the various components in order
    to form a whole Vue.js application.
  prefs: []
  type: TYPE_NORMAL
- en: Why is it important to know how to handle events in components?
  prefs: []
  type: TYPE_NORMAL
- en: A Vue.js component is often a set of HTML elements, like building blocks, such
    as buttons, lists, and input fields. It is therefore essential to know how to
    manage the interaction of these elements with the possible actions of the user,
    such as clicking on a button, entering a value in an input field, or selecting
    an element from a list.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, why is it important to know how to assemble the components?
  prefs: []
  type: TYPE_NORMAL
- en: A web application brings together many elements, which in the end, will represent
    the application as a whole. The principle of Vue.js is to break down an application
    into components, then assemble them to form the complete application. We will
    have to learn how to divide an application into components, then assemble them
    by allowing them, for example, to share data.
  prefs: []
  type: TYPE_NORMAL
- en: We end this chapter by showing how we can easily produce visual effects on your
    pages thanks to Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the main topics we explain in the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assembling components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using visual effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the code files for this chapter on GitHub at: [https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%204.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%204.zip).'
  prefs: []
  type: TYPE_NORMAL
- en: Managing events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let’s see how to handle events with Vue.js. To do this, use the `v-on` directive,
    followed by the character `:` and the name of the event to be handled. For example,
    if you want to perform a particular process when a button is clicked, we will
    use the `click` event on the button and we will write `v-on:click` to handle the
    `click` event. The value of the directive (which follows the `=` sign) corresponds
    to the JavaScript expression to be executed (either a statement or a function
    call).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js makes it easier to write `v-on:click` by writing `@click` more simply.
    This rule is valid for all events.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will implement a button that increments a reactive variable
    `count` on each click. We will also define an `incr()` method in the `methods`
    section of the component that increments the `count` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: Increment counter count (counter.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We have defined two buttons for which the value of `@click` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@click="count++"` (first button)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@click="incr()"` (second button)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We thus show the equivalence of these forms of writing.
  prefs: []
  type: TYPE_NORMAL
- en: The counter is incremented by 1 with each click of the buttons.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Button click management'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.01_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – Button click management
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to write several method calls in a row during the processing
    to be performed (separated by a comma or a semicolon). It is enough that these
    methods are defined in the `methods` section of the component.
  prefs: []
  type: TYPE_NORMAL
- en: For example, `@click="incr();incr()"` allows the `incr()` method to be executed
    twice each time the button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: We have explained here how to catch an event and handle it in a method defined
    in the `methods` section of the component. Let’s go further by using the parameters
    transmitted in the received event, for example, knowing which key on the keyboard
    was pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Using the $event parameter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vue.js provides access to the `Event` object associated with the event. This
    object can then be used to get additional information about the event. The information
    is different depending on the type of event:'
  prefs: []
  type: TYPE_NORMAL
- en: Mouse coordinates or buttons clicked on the mouse for a mouse-related event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyboard key used, or the combination of keys pressed (*Ctrl*, *Shift*, *Esc*,
    and so on) for a keyboard-related event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Event` object can be accessed from the `$event` variable. It can be passed
    as a parameter to a processing method. This parameter will then be retrieved in
    the event processing function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see two examples of how to use this parameter when entering characters
    in an edit control:'
  prefs: []
  type: TYPE_NORMAL
- en: By displaying an error message as soon as the numerical value entered equals
    or exceeds the value 100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By prohibiting the entry of characters other than numeric characters if the
    edit control can only contain numbers (this is an improvement of the previous
    example)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking that the entered value is less than 100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s use the `$event` parameter to check that the content of the `counter`
    input field is less than 100\. If so, the `count` variable is updated with the
    entered value; otherwise, an error message is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we use the `blur` event on the input field, and in the processing
    of the event, we retrieve the value of the input field. A reactive `message` variable
    is used to display an error message, if necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `blur` event is triggered when leaving the input field, for example, by
    clicking outside the input field.
  prefs: []
  type: TYPE_NORMAL
- en: Display an error message if the counter is greater than 100 (counter.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The `$event` parameter is passed to the `valid(event)` processing function.
    The `event.target` property provides direct access to the HTML element. Its `value`
    property contains the value of the field.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you type a value less than 100 (here, 45), the counter is updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Entering an authorized value'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.02_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – Entering an authorized value
  prefs: []
  type: TYPE_NORMAL
- en: If you type a value greater than 100 (for example, `150`), an error is displayed
    and the old value of the counter (`45`) is restored.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Entering a prohibited value'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.03_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – Entering a prohibited value
  prefs: []
  type: TYPE_NORMAL
- en: Then, we’ll look at another use of `$event` parameter-allowing only digits to
    be entered.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing only digits to be entered
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another use of the `$event` parameter can be to only allow numbers to be entered
    into the field. Other keyboard keys are prohibited (except the *Backspace* and
    *Delete* keys, the right and left arrow keys, and the *Tab* key).
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we use the `keydown` event, which is triggered each time a key on
    the keyboard is pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: Disallow input of non-numeric characters (counter.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: The event used to filter the keys corresponds to `keydown` and gets activated
    when pressing a key on the keyboard. We therefore indicate to process each key
    press using the `verif()` method defined in the `methods` section.
  prefs: []
  type: TYPE_NORMAL
- en: Using event.key and event.preventDefault()
  prefs: []
  type: TYPE_NORMAL
- en: The `event.key` parameter contains the code of the key pressed. The key code
    is between “0” and “9” for a numeric value. To prohibit the other keys, we use
    the `event.preventDefault()` method (defined in JavaScript), which indicates not
    to take into account the event, therefore the pressing of the prohibited key.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to create a component in [*Chapter 3*](B17416_03_ePub.xhtml#_idTextAnchor072),
    *Getting Started with Vue.js*, and how to manage events in it (at the beginning
    of this chapter). A full application is composed of several components. Let’s
    now explain how to proceed to assemble several components to form a complete application.
  prefs: []
  type: TYPE_NORMAL
- en: Assembling components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue.js divides an application into a set of components. These components are
    then assembled to form the final application.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s study an example of how to create components and then assemble the created
    components. The goal is to use three counters (associated with three input fields)
    like the one in the previous example, then display the total of these counters.
    The total updates, as numbers are typed into each of the input fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create two components for this:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<counter>` component is used to manage a counter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<counters>` component allows you to manage the three counters together
    and display the total.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `index.html` file will display the `<counters>` component in its `template`
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: index.html file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: The included `counters.js` file describes the `<counters>` component. It partly
    repeats what has been explained in the previous sections, adding new concepts
    that we’ll now describe.
  prefs: []
  type: TYPE_NORMAL
- en: These new concepts will explain how a parent component communicates with its
    child components (thanks to attributes, called `props`) and how a child component
    communicates with its parent component (thanks to events and the `$emit()` method).
  prefs: []
  type: TYPE_NORMAL
- en: These two concepts make it possible to assemble the components between them
    by allowing them to communicate between a child component and a parent component.
  prefs: []
  type: TYPE_NORMAL
- en: Using $emit() to communicate with a parent component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s first look at the `<counter>` component file, which describes a counter
    associated with an input field:'
  prefs: []
  type: TYPE_NORMAL
- en: <counter> component (counter.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'The `<counter>` component has been enriched with new methods, linked to new
    events to be taken into account during input. Also, a new reactive variable, `old_value`,
    has been created:'
  prefs: []
  type: TYPE_NORMAL
- en: The `old_value` variable contains the value that was entered in the field before
    pressing the key on the keyboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `count` variable contains the value that was entered in the field after
    pressing the key on the keyboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why make this distinction? Because to calculate the total of all the counters,
    it will be necessary, with each typed key, to remove the previous value from the
    field (before pressing the key) and add the new value (after pressing the key).
  prefs: []
  type: TYPE_NORMAL
- en: Each keypress is handled by the `input` event, which here calls the `calcul()`
    method. As the calculation associated with the total of the three counters is
    performed at the higher level (in the `<counters>` component, which is the parent
    component), you must indicate to this parent component the sum to subtract (`old_value`)
    and the sum to add (`count`). This is done by sending `"sub"` and `"add"` events,
    using the `$emit(eventName, value)` method.
  prefs: []
  type: TYPE_NORMAL
- en: About the $emit(eventName, value) Method
  prefs: []
  type: TYPE_NORMAL
- en: The `$emit(eventName, value)` method, executed from a component, sends the `eventName`
    event to the parent component, which can process it using the `@eventName` directive.
    The `value` parameter corresponds to the value to be transmitted if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we indicate in the `emits` section of the component the list of
    events that this component can emit to its parent.
  prefs: []
  type: TYPE_NORMAL
- en: This way of communicating between a child component (here, the `<counter>` component)
    and its parent (here, the `<counters>` component), using events, is the one recommended
    by Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s see the description of the `<counters>` component, which encompasses
    the three counters and the calculation of the total counters as you type in each
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: <counters> component (counters.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: The `"add"` and `"sub"` events emitted in the `<counter>` child component are
    processed in the attributes of the `<counter>` component when used. The `add(value)`
    and `sub(value)` processing methods are registered in the parent component, which
    allows the value of the total to be changed each time a numeric key is pressed
    on the keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you type in the fields, **Total** updates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Calculation of the sum of the three counters'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.04_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – Calculation of the sum of the three counters
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how to communicate from a component to its parent using events.
    Now let’s look at how to communicate in the other direction, from a component
    to its child. For this, we use attributes called props here.
  prefs: []
  type: TYPE_NORMAL
- en: Using props to communicate with children
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen that the communication of information from a child component to
    its parent is done with events. Communication in the reverse direction, from parent
    to child, is done through attributes called `props`. We have already seen the
    use of these attributes in the previous chapter, in the *Using attributes in components*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will improve the `<counters>` component so that we tell
    it the number of counters we want to display. For this, we use the `nb` attribute
    in the component. For example, we will write `<counters nb="5" />` to display
    5 counters on the page. Each counter is displayed as in the previous form, namely
    `Counter` followed by its index starting from 1 (see *Figure 4.5*).
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will modify the `index.html` file to write the `<counters>` component
    using the `nb` attribute. Let’s modify the `index.html` file previously used:'
  prefs: []
  type: TYPE_NORMAL
- en: Using <counters nb=”5” /> (index.html file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will modify the `counters.js` file to integrate the new `"nb"` props
    into the component:'
  prefs: []
  type: TYPE_NORMAL
- en: Integration of the nb props in the <counters> component (counters.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: The `"nb"` props are listed in the component’s `props` section. To display a
    list of counters, use the `v-for` directive on a `<div>` element.
  prefs: []
  type: TYPE_NORMAL
- en: How to Use the v-for Directive
  prefs: []
  type: TYPE_NORMAL
- en: For the value of the `v-for` directive, you must specify an array to browse.
    To do this, we transform the value of the `"nb"` props into an array `[1, 2, 3,
    …, nb]`. This is done using a computed property named `NB`, which returns the
    desired array.
  prefs: []
  type: TYPE_NORMAL
- en: The number of counters indicated when using the `<counters nb="5">` component
    is now displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Displaying five counters'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.05_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – Displaying five counters
  prefs: []
  type: TYPE_NORMAL
- en: We end the study of the Vue.js components here, which come together to form
    a full application.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s examine an aspect of Vue.js that helps you produce visual effects,
    allowing, for example, making HTML elements displayed on the HTML page appear
    or disappear using a visual effect.
  prefs: []
  type: TYPE_NORMAL
- en: Using visual effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual effects make it possible to make HTML pages more dynamic by bringing
    visual animations to them. For example, to delete an item in a list, you can make
    it gradually disappear using an opacity effect rather than deleting it directly
    without using a visual effect.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to use visual effects with Vue.js, in particular, to make elements
    appear or disappear from the page. Visual effects that do not make HTML elements
    appear or disappear from the page (for example, making an element move by clicking
    on it) are also possible with Vue.js. You can refer to [https://vuejs.org/guide/extras/animation.html](https://vuejs.org/guide/extras/animation.html)
    for more details on these types of animations. We do not explain these effects
    here because the available documentation is clear enough to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Going forward in this chapter, we will learn about the visual effects that are
    related to the appearance or disappearance of one or more elements on the page.
  prefs: []
  type: TYPE_NORMAL
- en: The element we want to help appear or disappear (using the visual effect) must
    be inserted in a component named `<transition>`. This component is used by Vue.js
    to produce the effect.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, Vue.js uses the definition of CSS classes in which the CSS properties
    of the effect are described. Simply define the contents of the CSS classes (described
    in the following section), and Vue.js uses them at the appropriate times to achieve
    the effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CSS classes used by Vue.js on an element depend on the state of the element:
    should it appear or disappear? Depending on its state (visible or not), the CSS
    classes differ.'
  prefs: []
  type: TYPE_NORMAL
- en: When the element appears
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the HTML element should appear, the names of the CSS classes used by Vue.js
    begin with the character string `"v-enter"`. The class name then contains the
    suffix `"-from"` or `"-to"`, which will be used to describe the CSS properties
    of the element at the start of the effect (with `"-from"`) or at the end of the
    effect (with `"-to"`).
  prefs: []
  type: TYPE_NORMAL
- en: CSS classes used by Vue.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So, we will have the following two CSS classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`v-enter-from`: This CSS class describes the CSS properties at the start of
    the element’s appear effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v-enter-to`: This CSS class describes the CSS properties at the end of the
    element’s appear effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that at the start of the appear effect, the element is not visible, but
    the CSS properties described in the `v-enter-from` class are applied to it immediately.
    If, for example, we enter the CSS `opacity` property equal to `1` in the CSS properties
    of the `v-enter-from` class, the element becomes immediately visible as soon as
    the appearance effect starts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since the `v-enter-to` class describes the CSS properties of the element at
    the end of the effect, when the effect completes, Vue.js removes that CSS class
    from the element.
  prefs: []
  type: TYPE_NORMAL
- en: We thus see that the CSS classes `v-enter-from` and `v-enter-to` are used to
    describe the CSS properties of an element during the effect but are no longer
    used afterward on the element (i.e., outside the duration of the effect).
  prefs: []
  type: TYPE_NORMAL
- en: The appearance effect progresses the CSS properties described in `v-enter-from`
    to those described in `v-enter-to`. For this, Vue.js uses the `v-enter-active`
    class, which describes how each of the CSS properties evolves.
  prefs: []
  type: TYPE_NORMAL
- en: Example content of CSS classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s look at some sample content from each of the three CSS classes mentioned
    above, `v-enter-from`, `v-enter-to`, and `v-enter-active`:'
  prefs: []
  type: TYPE_NORMAL
- en: v-enter-from class example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we indicate that the element will be invisible at the start of the effect
    (`opacity:0`) and will have a background color (`background-color:#FFCCCC`):'
  prefs: []
  type: TYPE_NORMAL
- en: v-enter-to class example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we indicate that the element will be half visible at the end of the effect
    (`opacity:0.5`) and will have a black background (`background-color:black`):'
  prefs: []
  type: TYPE_NORMAL
- en: v-enter-active class example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we indicate that the CSS `opacity` and `background-color` properties
    must evolve, each for two seconds. As all the specified CSS properties evolve
    for the same amount of time, we can simplify the code by writing it in shortened
    form. Here’s how:'
  prefs: []
  type: TYPE_NORMAL
- en: v-enter-active class example (simplified form)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: The `all` keyword overrides all specified CSS properties.
  prefs: []
  type: TYPE_NORMAL
- en: Using CSS classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let’s show how to use these CSS classes in a program using a button that
    displays a paragraph with effect. The role of the button will be to hide or display,
    alternatively, a paragraph on which the effect will occur when the paragraph appears.
  prefs: []
  type: TYPE_NORMAL
- en: 'This shows how the `v-enter-from`, `v-enter-to`, and `v-enter-active` CSS classes
    are used by Vue.js to produce an effect when an element appears on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a button to produce the appearance effect (index.html file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: We have described the contents of the `v-enter-from`, `v-enter-to`, and `v-enter-active`
    CSS classes, which will be used by Vue.js to produce the effect. Then we inserted
    the `<transition>` element, thus allowing Vue.js to know the element on which
    to apply the effect.
  prefs: []
  type: TYPE_NORMAL
- en: The paragraph is hidden at startup (because the reactive variable `show` is
    set to `false`). Clicking the `show` variable to `true`, which starts the effect.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The effect is started on the paragraph thanks to the `<transition>` component,
    which includes the paragraph to be displayed. It is thanks to this `<transition>`
    component that Vue.js knows the element on which to produce the effect.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the effect lasts two seconds as indicated in the CSS `transition`
    property, and when the effect is finished, the CSS classes are removed from the
    `<p>` element, which then becomes a normal paragraph (without background color
    and with an opacity of 1). So, you see that the paragraph has an opacity of 0.5
    at the end of the effect (the one indicated in `v-enter-to`), then suddenly changes
    to an opacity of 1 when the `v-enter-to` class is removed by Vue.js at the end
    of the effect.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is therefore preferable to indicate in the `v-enter-to` class the CSS values
    of the element when it no longer produces an effect, in order to make the effect
    more harmonious.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s run the previous program. When the program is launched, the paragraph
    is hidden:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – The paragraph is hidden when the program is launched'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.06_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – The paragraph is hidden when the program is launched
  prefs: []
  type: TYPE_NORMAL
- en: After clicking the `v-enter-from`, `v-enter-to`, and `v-enter-active` classes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – After clicking on the Produce the effect button, the paragraph
    appears progressively'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.07_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – After clicking on the Produce the effect button, the paragraph
    appears progressively
  prefs: []
  type: TYPE_NORMAL
- en: Just before the effect ends, the paragraph has the CSS properties set in the
    `v-enter-to` class, so its background color is black, but with an opacity of 0.5,
    the background color remains gray, and the paragraph text is not visible.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Paragraph just before the end of the effect'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.08_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – Paragraph just before the end of the effect
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the effect, the CSS classes are removed so that the paragraph
    appears in a normal way, in black and without a background color.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Paragraph at the end of the appear effect'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.09_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.9 – Paragraph at the end of the appear effect
  prefs: []
  type: TYPE_NORMAL
- en: Once the paragraph has appeared, clicking on the `show` being set to `false`
    when the button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen the different classes and stages when an element appears on the
    page. Now let’s see what happens when an element disappears from the page. We
    will see that there are many similarities between the appearance and disappearance
    of the element.
  prefs: []
  type: TYPE_NORMAL
- en: When the element disappears
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the element should disappear, Vue.js uses CSS classes similar to the previous
    ones, replacing the string `"enter"` with the string `"leave"`.
  prefs: []
  type: TYPE_NORMAL
- en: CSS classes used by Vue.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So, we will have the following two CSS classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`v-leave-from`: This CSS class describes the CSS properties at the start of
    the element’s disappearing effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v-leave-to`: This CSS class describes the CSS properties at the end of the
    element’s disappearing effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The disappearing effect is going to be to progress the CSS properties described
    in `v-leave-from` to those described in `v-leave-to`. After the effect is complete,
    the `v-leave-to` class is removed from the element’s CSS classes.
  prefs: []
  type: TYPE_NORMAL
- en: To progress CSS properties between the values shown in these two classes, Vue.js
    uses the `v-leave-active` CSS class, which describes the progression of CSS properties.
  prefs: []
  type: TYPE_NORMAL
- en: Example content of CSS classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s look at some example content from each of the three CSS classes mentioned
    above: `v-leave-from`, `v-leave-to`, and `v-leave-active`:'
  prefs: []
  type: TYPE_NORMAL
- en: v-leave-from class example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we indicate that the element will be fully visible at the start of the
    effect (`opacity:1`) and will have a background color (`background-color:#FFCCCC`):'
  prefs: []
  type: TYPE_NORMAL
- en: v-leave-to class example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we indicate that the element will be invisible at the end of the effect
    (`opacity:0`) and will have a black background color (`background-color:black`):'
  prefs: []
  type: TYPE_NORMAL
- en: v-leave-active class example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we indicate that the CSS `opacity` and `background-color` properties
    must evolve, each for two seconds. As all the specified CSS properties evolve
    for the same amount of time, you can simplify the code by writing it in shortened
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: v-leave-active class example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: The `all` keyword overrides all specified CSS properties.
  prefs: []
  type: TYPE_NORMAL
- en: Using CSS classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now let’s show how to use these CSS classes in a program, using a button that
    hides a paragraph with an effect. It’s almost the same program as before, but
    here we produce an effect when the paragraph disappears:'
  prefs: []
  type: TYPE_NORMAL
- en: Using a button to produce the disappearing effect (index.html file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: The `v-leave-from` class is applied at the beginning of the effect. It indicates
    that the element is visible (`opacity` at 1) and has a background color `#FFCCCC`
    (salmon).
  prefs: []
  type: TYPE_NORMAL
- en: The `v-leave-to` class indicates the values of CSS properties when the effect
    ends. The paragraph becomes invisible (`opacity` at 0) and has a black background
    color. But as the element becomes more and more invisible (`opacity` tends toward
    0), the black background color also becomes less and less visible.
  prefs: []
  type: TYPE_NORMAL
- en: If we write the `enter` and `leave` classes in the CSS part in the same program,
    with each click on the button, we obtain an effect of appearing or disappearing
    for the paragraph concerned.
  prefs: []
  type: TYPE_NORMAL
- en: The CSS classes used here have fixed names, regardless of the effect used. This
    does not allow using multiple effects, as the visual effects would all use the
    same CSS class names.
  prefs: []
  type: TYPE_NORMAL
- en: For this, Vue.js allows you to give a name to each effect, and thus be able
    to use different CSS class names.
  prefs: []
  type: TYPE_NORMAL
- en: Using a name for the effect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Classes of type `"v-enter-xxx"` or `"v-leave-xxx"` can be renamed to symbolize
    the effect with which they are associated. We just need to replace the character
    string `"v-"` with the name of the effect followed by `"-"`.
  prefs: []
  type: TYPE_NORMAL
- en: For example, `"v-enter-from"` will be replaced by `"fade-enter-from"` to give
    the name `"fade"` to the effect. We then add the `name="fade"` attribute to the
    `<transition>` component, indicating `<transition name="fade">`.
  prefs: []
  type: TYPE_NORMAL
- en: This allows us to integrate several effects into our application, by defining
    the CSS classes corresponding to each effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous program, integrating the effect named `"fade"` in the paragraph,
    is then written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Fade effect (index.html file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: The `<transition>` component can only have one element, which will be the one
    on which the effect will occur. To include multiple elements, you must use the
    `<transition-group>` component, which we explain below.
  prefs: []
  type: TYPE_NORMAL
- en: Producing an effect on several elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `<transition>` component can contain only one element. When the effect
    must be applied to several elements, it is necessary to create several `<transition>`
    components or group the elements in a `<transition-group>` component. In this
    example, let’s look at using the `<transition-group>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the <transition-group> component
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: The elements on which the effect occurs (here, the two paragraphs) are grouped
    in a `<transition-group>` element instead of the `<transition>` element that was
    used previously when there was a single paragraph on which the effect was produced.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will take a look at how to write the CSS classes associated with some
    classic effects.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of commonly used effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Below are some descriptions of effects. With a few lines of CSS code, you can
    easily produce classic effects such as the shrinking/enlargement of a paragraph
    (shrink effect), its gradual disappearance/appearance (opacity effect), and its
    vertical displacement (`ymove` effect). You are free to choose the names given
    to these effects and symbolize the effect produced.
  prefs: []
  type: TYPE_NORMAL
- en: The shrink effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use the shrink effect (here called `"shrink"`), we use the CSS `font-size`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the beginning of the effect, the paragraph is of normal size:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – The paragraph is normal size at the beginning of the disappearing
    effect'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.10_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.10 – The paragraph is normal size at the beginning of the disappearing
    effect
  prefs: []
  type: TYPE_NORMAL
- en: Once the effect has started following a click on the button, the paragraph decreases
    in size until it disappears.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.11 – The paragraph decreases in size until it disappears'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.11_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.11 – The paragraph decreases in size until it disappears
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the paragraph has disappeared, it can reappear after another click on
    the button. The paragraph size will increase until it reaches its normal size:'
  prefs: []
  type: TYPE_NORMAL
- en: CSS classes to handle shrink effect
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: The CSS class `shrink-leave-to` indicates, for the disappearance effect, to
    go to a font size of 0px, that is, a reduction to 0 of the font size for the paragraph,
    which makes the paragraph invisible.
  prefs: []
  type: TYPE_NORMAL
- en: The `shrink-enter-from` CSS class tells the effect to start with a font size
    of 0px, gradually growing to the normal paragraph size when visible.
  prefs: []
  type: TYPE_NORMAL
- en: If CSS properties are not indicated in a starting class (for example, the `shrink-leave-from`
    class does not contain the `font-size` property), this means that the current
    value of this CSS property is used in the element.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, if CSS properties are not indicated in an arrival class (for example,
    the `shrink-enter-to` class does not contain the `font-size` property), this means
    that we are progressing toward the value of this CSS property of the element when
    it will be visible at the end of the effect.
  prefs: []
  type: TYPE_NORMAL
- en: The opacity effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The effect named `"fade"` uses the CSS `opacity` property. This effect consists
    of varying the CSS `opacity` property from 0 to 1 (to gradually make an element
    appear) or from 1 to 0 (to make it disappear).
  prefs: []
  type: TYPE_NORMAL
- en: Here is, for example, the effect of disappearance. The paragraph is disappearing
    with an opacity that tends toward 0\. When the opacity is at 0, the element will
    be completely invisible on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – The paragraph has an opacity that decreases toward 0'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.12_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.12 – The paragraph has an opacity that decreases toward 0
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the paragraph is invisible, just click again on the **Produce the effect**
    button to make it reappear gradually:'
  prefs: []
  type: TYPE_NORMAL
- en: CSS classes to manage opacity
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: The `fade-leave-to` CSS class indicates to go to an opacity of 0\. The current
    opacity (of value 1) is the starting one. Since the initial value of the opacity
    is not defined in `fade-leave-from`, it will use the value defined by the CSS
    of the element (i.e., 1).
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, the `fade-enter-from` class indicates the current opacity at the
    start of the element’s appearance effect. The destination value of the opacity
    does not need to be specified as it will use the default value from the element
    CSS, that is, 1.
  prefs: []
  type: TYPE_NORMAL
- en: The move-down effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To manage this effect (here, called `"ymove"`), we use the CSS properties `transform`
    (set to `translateY(100px)`) and `opacity` (set to 0). This gradually moves the
    element 100px horizontally downward, gradually decreasing its opacity to 0\. The
    element disappears as it moves down the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, here is what is displayed when the element has started to slide
    down by decreasing its opacity, which makes it less visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.13 – The paragraph moves down the page by decreasing its opacity'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.13_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.13 – The paragraph moves down the page by decreasing its opacity
  prefs: []
  type: TYPE_NORMAL
- en: As the effect continues, the paragraph moves down the page, until it reaches
    the distance of 100 pixels specified in the effect. The closer you get to this
    distance, the more the paragraph decreases in opacity, until it becomes invisible
    (opacity of 0).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.14 – The paragraph becomes almost invisible toward the end of the
    effect'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.14_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.14 – The paragraph becomes almost invisible toward the end of the effect
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the paragraph has disappeared, clicking on the **Produce the effect**
    button makes it reappear gradually from the bottom of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: CSS classes to handle moving down
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: The `ymove-leave-to` CSS class indicates the values of the CSS properties toward
    which we want to vary the indicated CSS properties. The `transform` property can
    contain the `translateY(100px)` value, indicating to perform a vertical translation
    (`Y`) of 100 pixels. Adding an opacity of 0 makes the element disappear by moving
    it vertically.
  prefs: []
  type: TYPE_NORMAL
- en: The `ymove-enter-from` CSS class allows you to indicate the values of CSS properties
    at the beginning of the appearance effect. The element is located at 100 pixels
    vertical distance, with an opacity of 0\. The CSS properties will evolve to those
    specified in the `ymove-enter-to` class, and if nothing is specified in this class,
    the CSS properties usually used for an element (opacity of 1 and vertical distance
    of 0, i.e., the normal location) are those toward which we will evolve during
    the appearance effect.
  prefs: []
  type: TYPE_NORMAL
- en: The CSS `transform` property is very useful for producing visual effects, for
    example, rotation, enlargement, and displacement.
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After learning how to handle events and act when an external event (e.g., a
    click) occurs, we saw in this chapter how components created with Vue.js can be
    assembled to form complete applications. We learned the following:'
  prefs: []
  type: TYPE_NORMAL
- en: To communicate from a component to its parent, we use events.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To communicate from a component to its child, we use the attributes in the component’s
    `props` section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, to produce visual effects, all you have to do is write the CSS classes
    managed by Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see an example of an application that allows us
    to put into practice the elements studied in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
