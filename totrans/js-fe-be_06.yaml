- en: '*Chapter 4*: Advanced Concepts of Vue.js'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 4 章*：Vue.js 的高级概念'
- en: In this chapter, we look at advanced uses of Vue.js. We will study the handling
    of events in components, then the assembly of the various components in order
    to form a whole Vue.js application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 Vue.js 的高级用法。我们将研究组件中的事件处理，然后组装各种组件以形成一个完整的 Vue.js 应用程序。
- en: Why is it important to know how to handle events in components?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么了解如何在组件中处理事件很重要？
- en: A Vue.js component is often a set of HTML elements, like building blocks, such
    as buttons, lists, and input fields. It is therefore essential to know how to
    manage the interaction of these elements with the possible actions of the user,
    such as clicking on a button, entering a value in an input field, or selecting
    an element from a list.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 组件通常是一组 HTML 元素，如构建块，例如按钮、列表和输入字段。因此，了解如何管理这些元素与用户可能采取的行动（如点击按钮、在输入字段中输入值或从列表中选择元素）之间的交互是至关重要的。
- en: Similarly, why is it important to know how to assemble the components?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，为什么了解如何组装组件很重要？
- en: A web application brings together many elements, which in the end, will represent
    the application as a whole. The principle of Vue.js is to break down an application
    into components, then assemble them to form the complete application. We will
    have to learn how to divide an application into components, then assemble them
    by allowing them, for example, to share data.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Web 应用程序汇集了许多元素，最终将代表整个应用程序。Vue.js 的原则是将应用程序分解成组件，然后组装它们以形成一个完整的应用程序。我们将学习如何将应用程序分解成组件，然后通过允许它们，例如，共享数据来组装它们。
- en: We end this chapter by showing how we can easily produce visual effects on your
    pages thanks to Vue.js.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过展示如何利用 Vue.js 在页面上轻松产生视觉效果来结束本章。
- en: 'Here are the main topics we explain in the following pages:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下页面中，我们将解释以下主要主题：
- en: Managing events
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件管理
- en: Assembling components
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组装组件
- en: Using visual effects
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用视觉效果
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the code files for this chapter on GitHub at: [https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%204.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%204.zip).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 上找到本章的代码文件：[https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%204.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%204.zip)。
- en: Managing events
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件管理
- en: Now let’s see how to handle events with Vue.js. To do this, use the `v-on` directive,
    followed by the character `:` and the name of the event to be handled. For example,
    if you want to perform a particular process when a button is clicked, we will
    use the `click` event on the button and we will write `v-on:click` to handle the
    `click` event. The value of the directive (which follows the `=` sign) corresponds
    to the JavaScript expression to be executed (either a statement or a function
    call).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看如何使用 Vue.js 处理事件。为此，使用 `v-on` 指令，后跟冒号 `:` 和要处理的事件名称。例如，如果你想在一个按钮被点击时执行特定过程，我们将使用按钮上的
    `click` 事件，并编写 `v-on:click` 来处理 `click` 事件。指令的值（跟随等号 `=` 的部分）对应于要执行的 JavaScript
    表达式（可以是语句或函数调用）。
- en: Tip
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Vue.js makes it easier to write `v-on:click` by writing `@click` more simply.
    This rule is valid for all events.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 通过更简单地编写 `@click` 来简化编写 `v-on:click`。此规则适用于所有事件。
- en: 'In this example, we will implement a button that increments a reactive variable
    `count` on each click. We will also define an `incr()` method in the `methods`
    section of the component that increments the `count` variable:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将实现一个按钮，每次点击都会增加一个响应式变量 `count`。我们还将定义一个在组件的 `methods` 部分中的 `incr()`
    方法，用于增加 `count` 变量：
- en: Increment counter count (counter.js file)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 增加计数器 `count`（`counter.js` 文件）
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We have defined two buttons for which the value of `@click` is as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了两个按钮，其 `@click` 的值如下：
- en: '`@click="count++"` (first button)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@click="count++"` (第一个按钮)'
- en: '`@click="incr()"` (second button)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@click="incr()"` (第二个按钮)'
- en: We thus show the equivalence of these forms of writing.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们展示了这些书写形式的等价性。
- en: The counter is incremented by 1 with each click of the buttons.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 每次点击按钮，计数器都会增加 1。
- en: '![Figure 4.1 – Button click management'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.1 – 按钮点击管理'
- en: '](img/Figure_4.01_B17416.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.01_B17416.jpg)'
- en: Figure 4.1 – Button click management
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 按钮点击管理
- en: It is possible to write several method calls in a row during the processing
    to be performed (separated by a comma or a semicolon). It is enough that these
    methods are defined in the `methods` section of the component.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行处理过程中，可以连续编写多个方法调用（由逗号或分号分隔）。只要这些方法在组件的`methods`部分中定义，就足够了。
- en: For example, `@click="incr();incr()"` allows the `incr()` method to be executed
    twice each time the button is clicked.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`@click="incr();incr()"`允许在每次点击按钮时执行`incr()`方法两次。
- en: We have explained here how to catch an event and handle it in a method defined
    in the `methods` section of the component. Let’s go further by using the parameters
    transmitted in the received event, for example, knowing which key on the keyboard
    was pressed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经解释了如何在组件的`methods`部分定义的方法中捕获事件并处理它。让我们进一步使用接收事件中传递的参数，例如，知道哪个键盘键被按下。
- en: Using the $event parameter
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`$event`参数
- en: 'Vue.js provides access to the `Event` object associated with the event. This
    object can then be used to get additional information about the event. The information
    is different depending on the type of event:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js提供了对与事件关联的`Event`对象的访问。然后可以使用该对象获取有关事件的附加信息。信息根据事件类型的不同而不同：
- en: Mouse coordinates or buttons clicked on the mouse for a mouse-related event
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标坐标或鼠标上点击的按钮，对于鼠标相关的事件
- en: Keyboard key used, or the combination of keys pressed (*Ctrl*, *Shift*, *Esc*,
    and so on) for a keyboard-related event
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于键盘相关事件的键盘键，或按下的键的组合（*Ctrl*，*Shift*，*Esc*等）
- en: The `Event` object can be accessed from the `$event` variable. It can be passed
    as a parameter to a processing method. This parameter will then be retrieved in
    the event processing function.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从`$event`变量访问`Event`对象。它可以作为参数传递给处理方法。然后，在事件处理函数中检索此参数。
- en: 'Let’s see two examples of how to use this parameter when entering characters
    in an edit control:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看两个示例，说明如何在输入编辑控件中输入字符时使用此参数：
- en: By displaying an error message as soon as the numerical value entered equals
    or exceeds the value 100
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在输入的数值等于或超过100时立即显示错误消息
- en: By prohibiting the entry of characters other than numeric characters if the
    edit control can only contain numbers (this is an improvement of the previous
    example)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果编辑控件只能包含数字（这是前一个示例的改进）
- en: Checking that the entered value is less than 100
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查输入的值是否小于100
- en: Let’s use the `$event` parameter to check that the content of the `counter`
    input field is less than 100\. If so, the `count` variable is updated with the
    entered value; otherwise, an error message is displayed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`$event`参数来检查`counter`输入字段的内容是否小于100。如果是这样，则使用输入的值更新`count`变量；否则，显示错误消息。
- en: 'To achieve this, we use the `blur` event on the input field, and in the processing
    of the event, we retrieve the value of the input field. A reactive `message` variable
    is used to display an error message, if necessary:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们使用输入字段的`blur`事件，并在事件处理过程中检索输入字段的值。使用响应式的`message`变量来显示错误消息（如果需要）：
- en: Note
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `blur` event is triggered when leaving the input field, for example, by
    clicking outside the input field.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当离开输入字段时，例如通过点击输入字段外部，会触发`blur`事件。
- en: Display an error message if the counter is greater than 100 (counter.js file)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果计数器大于100（`counter.js`文件），则显示错误消息
- en: '[PRE21]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `$event` parameter is passed to the `valid(event)` processing function.
    The `event.target` property provides direct access to the HTML element. Its `value`
    property contains the value of the field.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`$event`参数传递给`valid(event)`处理函数。`event.target`属性提供对HTML元素的直接访问。它的`value`属性包含字段的值。'
- en: 'If you type a value less than 100 (here, 45), the counter is updated:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入的值小于100（这里为45），则更新计数器：
- en: '![Figure 4.2 – Entering an authorized value'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.2 – 输入授权的值'
- en: '](img/Figure_4.02_B17416.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.02_B17416.jpg)'
- en: Figure 4.2 – Entering an authorized value
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 输入授权的值
- en: If you type a value greater than 100 (for example, `150`), an error is displayed
    and the old value of the counter (`45`) is restored.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入的值大于100（例如，`150`），则显示错误，并恢复计数器的旧值（`45`）。
- en: '![Figure 4.3 – Entering a prohibited value'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.3 – 输入禁止的值'
- en: '](img/Figure_4.03_B17416.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.03_B17416.jpg)'
- en: Figure 4.3 – Entering a prohibited value
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – 输入禁止的值
- en: Then, we’ll look at another use of `$event` parameter-allowing only digits to
    be entered.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将查看`$event`参数的另一种用途——只允许输入数字。
- en: Allowing only digits to be entered
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 允许只输入数字
- en: Another use of the `$event` parameter can be to only allow numbers to be entered
    into the field. Other keyboard keys are prohibited (except the *Backspace* and
    *Delete* keys, the right and left arrow keys, and the *Tab* key).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`$event` 参数的另一个用途是只允许在字段中输入数字。其他键盘键被禁止（除了 *退格* 和 *删除* 键，左右箭头键，以及 *Tab* 键）。'
- en: 'For this, we use the `keydown` event, which is triggered each time a key on
    the keyboard is pressed:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们使用 `keydown` 事件，该事件在每次按下键盘上的键时触发：
- en: Disallow input of non-numeric characters (counter.js file)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 禁止输入非数字字符（counter.js 文件）
- en: '[PRE46]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: The event used to filter the keys corresponds to `keydown` and gets activated
    when pressing a key on the keyboard. We therefore indicate to process each key
    press using the `verif()` method defined in the `methods` section.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 用于过滤键的事件对应于 `keydown`，在按下键盘上的键时被激活。因此，我们指示使用在 `methods` 部分定义的 `verif()` 方法处理每个按键。
- en: Using event.key and event.preventDefault()
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 event.key 和 event.preventDefault()
- en: The `event.key` parameter contains the code of the key pressed. The key code
    is between “0” and “9” for a numeric value. To prohibit the other keys, we use
    the `event.preventDefault()` method (defined in JavaScript), which indicates not
    to take into account the event, therefore the pressing of the prohibited key.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`event.key` 参数包含按下的键的代码。对于数值，键码在“0”和“9”之间。为了禁止其他键，我们使用 `event.preventDefault()`
    方法（在 JavaScript 中定义），这表示不考虑该事件，因此禁止按键的按下。'
- en: We learned how to create a component in [*Chapter 3*](B17416_03_ePub.xhtml#_idTextAnchor072),
    *Getting Started with Vue.js*, and how to manage events in it (at the beginning
    of this chapter). A full application is composed of several components. Let’s
    now explain how to proceed to assemble several components to form a complete application.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [*第3章*](B17416_03_ePub.xhtml#_idTextAnchor072) 中学习了如何创建组件，以及如何在其中管理事件（本章开头）。一个完整的应用程序由多个组件组成。现在让我们解释如何组装多个组件以形成一个完整的应用程序。
- en: Assembling components
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组装组件
- en: Vue.js divides an application into a set of components. These components are
    then assembled to form the final application.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 将应用程序划分为一组组件。然后，这些组件被组装成最终的应用程序。
- en: Let’s study an example of how to create components and then assemble the created
    components. The goal is to use three counters (associated with three input fields)
    like the one in the previous example, then display the total of these counters.
    The total updates, as numbers are typed into each of the input fields.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们研究一个如何创建组件然后组装创建的组件的例子。目标是使用三个计数器（与三个输入字段相关联），就像上一个例子中的那样，然后显示这些计数器的总和。当在输入字段中输入数字时，总和会更新。
- en: 'We will create two components for this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为此创建两个组件：
- en: The `<counter>` component is used to manage a counter.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<counter>` 组件用于管理一个计数器。'
- en: The `<counters>` component allows you to manage the three counters together
    and display the total.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<counters>` 组件允许你一起管理三个计数器并显示总和。'
- en: 'The `index.html` file will display the `<counters>` component in its `template`
    section:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html` 文件将在其 `template` 部分显示 `<counters>` 组件：'
- en: index.html file
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: index.html 文件
- en: '[PRE86]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: The included `counters.js` file describes the `<counters>` component. It partly
    repeats what has been explained in the previous sections, adding new concepts
    that we’ll now describe.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的 `counters.js` 文件描述了 `<counters>` 组件。它部分重复了之前章节中解释的内容，并添加了我们现在将描述的新概念。
- en: These new concepts will explain how a parent component communicates with its
    child components (thanks to attributes, called `props`) and how a child component
    communicates with its parent component (thanks to events and the `$emit()` method).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新概念将解释父组件如何通过属性（称为 `props`）与子组件通信，以及子组件如何通过事件和 `$emit()` 方法与父组件通信。
- en: These two concepts make it possible to assemble the components between them
    by allowing them to communicate between a child component and a parent component.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个概念使得通过允许它们在子组件和父组件之间进行通信，可以在它们之间组装组件成为可能。
- en: Using $emit() to communicate with a parent component
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 $emit() 与父组件通信
- en: 'Let’s first look at the `<counter>` component file, which describes a counter
    associated with an input field:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看 `<counter>` 组件文件，它描述了一个与输入字段关联的计数器：
- en: <counter> component (counter.js file)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`<counter>` 组件（counter.js 文件）'
- en: '[PRE107]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'The `<counter>` component has been enriched with new methods, linked to new
    events to be taken into account during input. Also, a new reactive variable, `old_value`,
    has been created:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`<counter>`组件已经增加了新的方法，这些方法与新的输入事件相关联。同时，还创建了一个新的响应式变量`old_value`：'
- en: The `old_value` variable contains the value that was entered in the field before
    pressing the key on the keyboard.
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`old_value`变量包含在按下键盘上的键之前输入字段中的值。'
- en: The `count` variable contains the value that was entered in the field after
    pressing the key on the keyboard.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count`变量包含在按下键盘上的键之后输入字段中的值。'
- en: Why make this distinction? Because to calculate the total of all the counters,
    it will be necessary, with each typed key, to remove the previous value from the
    field (before pressing the key) and add the new value (after pressing the key).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要有这种区分？因为要计算所有计数器的总和，每次输入按键时，都需要从字段中移除前一个值（在按键之前）并添加新值（在按键之后）。
- en: Each keypress is handled by the `input` event, which here calls the `calcul()`
    method. As the calculation associated with the total of the three counters is
    performed at the higher level (in the `<counters>` component, which is the parent
    component), you must indicate to this parent component the sum to subtract (`old_value`)
    and the sum to add (`count`). This is done by sending `"sub"` and `"add"` events,
    using the `$emit(eventName, value)` method.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 每个按键都由`input`事件处理，这里调用`calcul()`方法。由于与三个计数器的总和相关的计算是在较高级别（在父组件`<counters>`中）执行的，你必须向这个父组件指示要减去的总和（`old_value`）和要添加的总数（`count`）。这是通过发送`"sub"`和`"add"`事件，使用`$emit(eventName,
    value)`方法来完成的。
- en: About the $emit(eventName, value) Method
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 关于$emit(eventName, value)方法
- en: The `$emit(eventName, value)` method, executed from a component, sends the `eventName`
    event to the parent component, which can process it using the `@eventName` directive.
    The `value` parameter corresponds to the value to be transmitted if necessary.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 从组件执行`$emit(eventName, value)`方法会将`eventName`事件发送到父组件，父组件可以使用`@eventName`指令来处理它。如果需要，`value`参数对应于要传输的值。
- en: In addition, we indicate in the `emits` section of the component the list of
    events that this component can emit to its parent.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们在组件的`emits`部分中指出了该组件可以向其父组件发出的事件列表。
- en: This way of communicating between a child component (here, the `<counter>` component)
    and its parent (here, the `<counters>` component), using events, is the one recommended
    by Vue.js.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这种在子组件（这里，`<counter>`组件）和其父组件（这里，`<counters>`组件）之间使用事件进行通信的方式是Vue.js推荐的方式。
- en: 'Now let’s see the description of the `<counters>` component, which encompasses
    the three counters and the calculation of the total counters as you type in each
    one:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看`<counters>`组件的描述，它包括三个计数器和你在每个字段中输入时的总计计算：
- en: <counters> component (counters.js file)
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`<counters>`组件（counters.js文件）'
- en: '[PRE152]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: The `"add"` and `"sub"` events emitted in the `<counter>` child component are
    processed in the attributes of the `<counter>` component when used. The `add(value)`
    and `sub(value)` processing methods are registered in the parent component, which
    allows the value of the total to be changed each time a numeric key is pressed
    on the keyboard.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`<counter>`子组件时，`"add"`和`"sub"`事件会在`<counter>`组件的属性中处理。`add(value)`和`sub(value)`处理方法在父组件中注册，这使得每次在键盘上按下数字键时，总数值都可以改变。
- en: 'As you type in the fields, **Total** updates:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在字段中输入时，**总计**会更新：
- en: '![Figure 4.4 – Calculation of the sum of the three counters'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.4 – Calculation of the sum of the three counters'
- en: '](img/Figure_4.04_B17416.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.04 – Calculation of the sum of the three counters](img/Figure_4.04_B17416.jpg)'
- en: Figure 4.4 – Calculation of the sum of the three counters
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.4 – Calculation of the sum of the three counters
- en: We have seen how to communicate from a component to its parent using events.
    Now let’s look at how to communicate in the other direction, from a component
    to its child. For this, we use attributes called props here.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用事件从一个组件向其父组件通信。现在让我们看看如何从组件向其子组件通信。为此，我们使用这里称为props的属性。
- en: Using props to communicate with children
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用props与子组件通信
- en: We have seen that the communication of information from a child component to
    its parent is done with events. Communication in the reverse direction, from parent
    to child, is done through attributes called `props`. We have already seen the
    use of these attributes in the previous chapter, in the *Using attributes in components*
    section.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，从子组件向其父组件传递信息是通过事件完成的。反向通信，即从父组件到子组件，是通过称为 `props` 的属性完成的。我们已经在上一章的 *在组件中使用属性*
    部分中看到了这些属性的使用。
- en: In this example, we will improve the `<counters>` component so that we tell
    it the number of counters we want to display. For this, we use the `nb` attribute
    in the component. For example, we will write `<counters nb="5" />` to display
    5 counters on the page. Each counter is displayed as in the previous form, namely
    `Counter` followed by its index starting from 1 (see *Figure 4.5*).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将改进 `<counters>` 组件，以便我们告诉它我们想要显示的计数器数量。为此，我们在组件中使用 `nb` 属性。例如，我们将编写
    `<counters nb="5" />` 来在页面上显示 5 个计数器。每个计数器都按照之前的形式显示，即 `Counter` 后跟从 1 开始的索引（见
    *图 4.5*）。
- en: 'First, we will modify the `index.html` file to write the `<counters>` component
    using the `nb` attribute. Let’s modify the `index.html` file previously used:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将修改 `index.html` 文件，使用 `nb` 属性来编写 `<counters>` 组件。让我们修改之前使用的 `index.html`
    文件：
- en: Using <counters nb=”5” /> (index.html file)
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `<counters nb="5" />`（index.html 文件）
- en: '[PRE181]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: 'Now, we will modify the `counters.js` file to integrate the new `"nb"` props
    into the component:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将修改 `counters.js` 文件，将新的 `"nb"` props 集成到组件中：
- en: Integration of the nb props in the <counters> component (counters.js file)
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<counters>` 组件中集成 nb props（counters.js 文件）
- en: '[PRE202]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: The `"nb"` props are listed in the component’s `props` section. To display a
    list of counters, use the `v-for` directive on a `<div>` element.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`"nb"` props 列在组件的 `props` 部分。要显示计数器列表，请在 `<div>` 元素上使用 `v-for` 指令。'
- en: How to Use the v-for Directive
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用 v-for 指令
- en: For the value of the `v-for` directive, you must specify an array to browse.
    To do this, we transform the value of the `"nb"` props into an array `[1, 2, 3,
    …, nb]`. This is done using a computed property named `NB`, which returns the
    desired array.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `v-for` 指令的值，你必须指定一个数组来遍历。为此，我们将 `"nb"` props 的值转换为一个数组 `[1, 2, 3, …, nb]`。这是通过一个名为
    `NB` 的计算属性完成的，它返回所需的数组。
- en: The number of counters indicated when using the `<counters nb="5">` component
    is now displayed.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `<counters nb="5">` 组件指示的计数器数量现在已显示。
- en: '![Figure 4.5 – Displaying five counters'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.5 – 显示五个计数器'
- en: '](img/Figure_4.05_B17416.jpg)'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.5 – 显示五个计数器](img/Figure_4.05_B17416.jpg)'
- en: Figure 4.5 – Displaying five counters
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 显示五个计数器
- en: We end the study of the Vue.js components here, which come together to form
    a full application.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里结束对 Vue.js 组件的研究，这些组件组合在一起形成一个完整的应用程序。
- en: Now, let’s examine an aspect of Vue.js that helps you produce visual effects,
    allowing, for example, making HTML elements displayed on the HTML page appear
    or disappear using a visual effect.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们考察 Vue.js 的一个方面，它可以帮助你产生视觉效果，例如，允许使用视觉效果使 HTML 页面上的 HTML 元素出现或消失。
- en: Using visual effects
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用视觉效果
- en: Visual effects make it possible to make HTML pages more dynamic by bringing
    visual animations to them. For example, to delete an item in a list, you can make
    it gradually disappear using an opacity effect rather than deleting it directly
    without using a visual effect.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 视觉效果使得通过将视觉动画引入 HTML 页面，使 HTML 页面更加动态。例如，要删除列表中的一个项目，你可以使用透明度效果使其逐渐消失，而不是直接删除而不使用视觉效果。
- en: It is possible to use visual effects with Vue.js, in particular, to make elements
    appear or disappear from the page. Visual effects that do not make HTML elements
    appear or disappear from the page (for example, making an element move by clicking
    on it) are also possible with Vue.js. You can refer to [https://vuejs.org/guide/extras/animation.html](https://vuejs.org/guide/extras/animation.html)
    for more details on these types of animations. We do not explain these effects
    here because the available documentation is clear enough to use them.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Vue.js 可以使用视觉效果，特别是使元素从页面中消失或出现。Vue.js 也可以实现不使 HTML 元素从页面中消失或出现的视觉效果（例如，通过点击使元素移动）。有关这些类型动画的更多详细信息，请参阅
    [https://vuejs.org/guide/extras/animation.html](https://vuejs.org/guide/extras/animation.html)。我们在这里不解释这些效果，因为可用的文档已经足够清晰，可以用来使用它们。
- en: Going forward in this chapter, we will learn about the visual effects that are
    related to the appearance or disappearance of one or more elements on the page.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章接下来的内容中，我们将学习与页面上一或多个元素的出现或消失相关的视觉效果。
- en: The element we want to help appear or disappear (using the visual effect) must
    be inserted in a component named `<transition>`. This component is used by Vue.js
    to produce the effect.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要帮助出现或消失（使用视觉效果）的元素必须插入到名为 `<transition>` 的组件中。Vue.js 使用此组件来产生效果。
- en: Moreover, Vue.js uses the definition of CSS classes in which the CSS properties
    of the effect are described. Simply define the contents of the CSS classes (described
    in the following section), and Vue.js uses them at the appropriate times to achieve
    the effect.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Vue.js 使用了 CSS 类的定义，其中描述了效果的 CSS 属性。只需简单地定义 CSS 类的内容（在下一节中描述），Vue.js 就会在适当的时候使用它们来实现效果。
- en: 'The CSS classes used by Vue.js on an element depend on the state of the element:
    should it appear or disappear? Depending on its state (visible or not), the CSS
    classes differ.'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 在元素上使用的 CSS 类取决于元素的状态：它应该出现还是消失？根据其状态（可见或不可见），CSS 类会有所不同。
- en: When the element appears
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当元素出现时
- en: When the HTML element should appear, the names of the CSS classes used by Vue.js
    begin with the character string `"v-enter"`. The class name then contains the
    suffix `"-from"` or `"-to"`, which will be used to describe the CSS properties
    of the element at the start of the effect (with `"-from"`) or at the end of the
    effect (with `"-to"`).
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 当 HTML 元素应该出现时，Vue.js 使用的 CSS 类的名称以字符串 `"v-enter"` 开头。类名随后包含后缀 `"-from"` 或 `"-to"`，这将用于描述效果开始时（使用
    `"-from"`）或效果结束时（使用 `"-to"`）的元素 CSS 属性。
- en: CSS classes used by Vue.js
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Vue.js 使用的 CSS 类
- en: 'So, we will have the following two CSS classes:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将有两个 CSS 类：
- en: '`v-enter-from`: This CSS class describes the CSS properties at the start of
    the element’s appear effect.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-enter-from`: 这个 CSS 类描述了元素出现效果的开始时的 CSS 属性。'
- en: '`v-enter-to`: This CSS class describes the CSS properties at the end of the
    element’s appear effect.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-enter-to`: 这个 CSS 类描述了元素出现效果的结束时的 CSS 属性。'
- en: Note
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Note that at the start of the appear effect, the element is not visible, but
    the CSS properties described in the `v-enter-from` class are applied to it immediately.
    If, for example, we enter the CSS `opacity` property equal to `1` in the CSS properties
    of the `v-enter-from` class, the element becomes immediately visible as soon as
    the appearance effect starts.
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，在出现效果的开始时，元素是不可见的，但 `v-enter-from` 类中描述的 CSS 属性会立即应用于它。例如，如果我们将 CSS `opacity`
    属性设置为 `1` 应用到 `v-enter-from` 类的 CSS 属性中，元素就会在出现效果开始时立即变得可见。
- en: Since the `v-enter-to` class describes the CSS properties of the element at
    the end of the effect, when the effect completes, Vue.js removes that CSS class
    from the element.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `v-enter-to` 类描述了效果结束时元素的 CSS 属性，因此当效果完成时，Vue.js 会从元素中移除该 CSS 类。
- en: We thus see that the CSS classes `v-enter-from` and `v-enter-to` are used to
    describe the CSS properties of an element during the effect but are no longer
    used afterward on the element (i.e., outside the duration of the effect).
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到 CSS 类 `v-enter-from` 和 `v-enter-to` 用于描述元素在效果期间的 CSS 属性，但在效果之后不再在元素上使用（即在效果持续期间之外）。
- en: The appearance effect progresses the CSS properties described in `v-enter-from`
    to those described in `v-enter-to`. For this, Vue.js uses the `v-enter-active`
    class, which describes how each of the CSS properties evolves.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 出现效果将 `v-enter-from` 中描述的 CSS 属性推进到 `v-enter-to` 中描述的属性。为此，Vue.js 使用 `v-enter-active`
    类，该类描述了每个 CSS 属性如何演变。
- en: Example content of CSS classes
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSS 类示例内容
- en: 'Let’s look at some sample content from each of the three CSS classes mentioned
    above, `v-enter-from`, `v-enter-to`, and `v-enter-active`:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看上述三个 CSS 类（`v-enter-from`、`v-enter-to` 和 `v-enter-active`）的一些示例内容：
- en: v-enter-from class example
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-enter-from` 类示例'
- en: '[PRE238]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: 'Here, we indicate that the element will be invisible at the start of the effect
    (`opacity:0`) and will have a background color (`background-color:#FFCCCC`):'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指示元素将在效果的开始时不可见（`opacity:0`）并且具有背景颜色（`background-color:#FFCCCC`）：
- en: v-enter-to class example
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-enter-to` 类示例'
- en: '[PRE242]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: 'Here, we indicate that the element will be half visible at the end of the effect
    (`opacity:0.5`) and will have a black background (`background-color:black`):'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指示元素将在效果的结束时半透明（`opacity:0.5`）并且具有黑色背景（`background-color:black`）：
- en: v-enter-active class example
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-enter-active` 类示例'
- en: '[PRE246]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: 'Here, we indicate that the CSS `opacity` and `background-color` properties
    must evolve, each for two seconds. As all the specified CSS properties evolve
    for the same amount of time, we can simplify the code by writing it in shortened
    form. Here’s how:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指出 CSS 的 `opacity` 和 `background-color` 属性必须各自演变两秒钟。由于所有指定的 CSS 属性以相同的时间演变，我们可以通过简写形式简化代码。以下是这样做的方法：
- en: v-enter-active class example (simplified form)
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-enter-active` 类示例（简写形式）'
- en: '[PRE249]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: The `all` keyword overrides all specified CSS properties.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`all` 关键字覆盖了所有指定的 CSS 属性。'
- en: Using CSS classes
  id: totrans-389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 CSS 类
- en: Now let’s show how to use these CSS classes in a program using a button that
    displays a paragraph with effect. The role of the button will be to hide or display,
    alternatively, a paragraph on which the effect will occur when the paragraph appears.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们展示如何使用这些 CSS 类在程序中使用一个按钮来显示具有效果的段落。按钮的作用将是隐藏或显示段落，当段落出现时，效果将在该段落上发生。
- en: 'This shows how the `v-enter-from`, `v-enter-to`, and `v-enter-active` CSS classes
    are used by Vue.js to produce an effect when an element appears on the page:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了 Vue.js 如何使用 `v-enter-from`、`v-enter-to` 和 `v-enter-active` CSS 类在元素出现在页面上时产生效果：
- en: Use a button to produce the appearance effect (index.html file)
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 使用按钮产生出现效果（index.html 文件）
- en: '[PRE252]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: We have described the contents of the `v-enter-from`, `v-enter-to`, and `v-enter-active`
    CSS classes, which will be used by Vue.js to produce the effect. Then we inserted
    the `<transition>` element, thus allowing Vue.js to know the element on which
    to apply the effect.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经描述了 `v-enter-from`、`v-enter-to` 和 `v-enter-active` CSS 类的内容，Vue.js 将使用这些类来产生效果。然后我们插入了
    `<transition>` 元素，从而允许 Vue.js 知道要在哪个元素上应用效果。
- en: The paragraph is hidden at startup (because the reactive variable `show` is
    set to `false`). Clicking the `show` variable to `true`, which starts the effect.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 段落在启动时被隐藏（因为响应式变量 `show` 被设置为 `false`）。点击 `show` 变量将其设置为 `true`，这会启动效果。
- en: Note
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The effect is started on the paragraph thanks to the `<transition>` component,
    which includes the paragraph to be displayed. It is thanks to this `<transition>`
    component that Vue.js knows the element on which to produce the effect.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 效果是在段落上启动的，归功于 `<transition>` 组件，它包括要显示的段落。正是这个 `<transition>` 组件让 Vue.js 知道要在哪个元素上产生效果。
- en: Notice that the effect lasts two seconds as indicated in the CSS `transition`
    property, and when the effect is finished, the CSS classes are removed from the
    `<p>` element, which then becomes a normal paragraph (without background color
    and with an opacity of 1). So, you see that the paragraph has an opacity of 0.5
    at the end of the effect (the one indicated in `v-enter-to`), then suddenly changes
    to an opacity of 1 when the `v-enter-to` class is removed by Vue.js at the end
    of the effect.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到效果持续了两个秒，正如 CSS `transition` 属性所指示的，当效果结束时，CSS 类从 `<p>` 元素中移除，此时它变成了一个正常的段落（没有背景颜色，透明度为
    1）。所以，你看到段落在效果结束时（在 `v-enter-to` 中指示的）具有 0.5 的透明度，然后在 `v-enter-to` 类被 Vue.js 在效果结束时移除后，突然变为透明度为
    1。
- en: Note
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is therefore preferable to indicate in the `v-enter-to` class the CSS values
    of the element when it no longer produces an effect, in order to make the effect
    more harmonious.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最好在 `v-enter-to` 类中指定元素不再产生效果时的 CSS 值，以使效果更加和谐。
- en: 'Let’s run the previous program. When the program is launched, the paragraph
    is hidden:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行前面的程序。当程序启动时，段落被隐藏：
- en: '![Figure 4.6 – The paragraph is hidden when the program is launched'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.6 – 程序启动时段落被隐藏'
- en: '](img/Figure_4.06_B17416.jpg)'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.06_B17416.jpg)'
- en: Figure 4.6 – The paragraph is hidden when the program is launched
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 程序启动时段落被隐藏
- en: After clicking the `v-enter-from`, `v-enter-to`, and `v-enter-active` classes.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 `v-enter-from`、`v-enter-to` 和 `v-enter-active` 类后。
- en: '![Figure 4.7 – After clicking on the Produce the effect button, the paragraph
    appears progressively'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.7 – 点击“产生效果”按钮后，段落逐渐出现'
- en: '](img/Figure_4.07_B17416.jpg)'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.07_B17416.jpg)'
- en: Figure 4.7 – After clicking on the Produce the effect button, the paragraph
    appears progressively
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 点击“产生效果”按钮后，段落逐渐出现
- en: Just before the effect ends, the paragraph has the CSS properties set in the
    `v-enter-to` class, so its background color is black, but with an opacity of 0.5,
    the background color remains gray, and the paragraph text is not visible.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 在效果结束前，段落具有 `v-enter-to` 类中设置的 CSS 属性，因此其背景颜色为黑色，但透明度为 0.5，背景颜色仍然是灰色，段落文本不可见。
- en: '![Figure 4.8 – Paragraph just before the end of the effect'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.8 – 效果结束前的段落'
- en: '](img/Figure_4.08_B17416.jpg)'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.08_B17416.jpg)'
- en: Figure 4.8 – Paragraph just before the end of the effect
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 效果结束前的段落
- en: At the end of the effect, the CSS classes are removed so that the paragraph
    appears in a normal way, in black and without a background color.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 在效果结束时，CSS 类被移除，使得段落以正常的方式出现，黑色且没有背景颜色。
- en: '![Figure 4.9 – Paragraph at the end of the appear effect'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.9 – 出现效果结束时的段落'
- en: '](img/Figure_4.09_B17416.jpg)'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.09_B17416.jpg)'
- en: Figure 4.9 – Paragraph at the end of the appear effect
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 出现效果结束时的段落
- en: Once the paragraph has appeared, clicking on the `show` being set to `false`
    when the button is clicked.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 当段落出现后，点击按钮将 `show` 设置为 `false`。
- en: We have seen the different classes and stages when an element appears on the
    page. Now let’s see what happens when an element disappears from the page. We
    will see that there are many similarities between the appearance and disappearance
    of the element.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了元素在页面上出现时的不同类和阶段。现在让我们看看当元素从页面上消失时会发生什么。我们会看到元素的出现和消失有很多相似之处。
- en: When the element disappears
  id: totrans-459
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当元素消失时
- en: When the element should disappear, Vue.js uses CSS classes similar to the previous
    ones, replacing the string `"enter"` with the string `"leave"`.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 当元素应该消失时，Vue.js 使用与之前类似的 CSS 类，将字符串 `"enter"` 替换为字符串 `"leave"`。
- en: CSS classes used by Vue.js
  id: totrans-461
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Vue.js 使用的 CSS 类
- en: 'So, we will have the following two CSS classes:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将有以下两个 CSS 类：
- en: '`v-leave-from`: This CSS class describes the CSS properties at the start of
    the element’s disappearing effect.'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-leave-from`：这个 CSS 类描述了元素消失效果的开始时的 CSS 属性。'
- en: '`v-leave-to`: This CSS class describes the CSS properties at the end of the
    element’s disappearing effect.'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-leave-to`：这个 CSS 类描述了元素消失效果结束时的 CSS 属性。'
- en: The disappearing effect is going to be to progress the CSS properties described
    in `v-leave-from` to those described in `v-leave-to`. After the effect is complete,
    the `v-leave-to` class is removed from the element’s CSS classes.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 消失效果是将 `v-leave-from` 中描述的 CSS 属性过渡到 `v-leave-to` 中描述的属性。效果完成后，`v-leave-to`
    类将从元素的 CSS 类中移除。
- en: To progress CSS properties between the values shown in these two classes, Vue.js
    uses the `v-leave-active` CSS class, which describes the progression of CSS properties.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在这两个类中显示的值之间过渡 CSS 属性，Vue.js 使用 `v-leave-active` CSS 类，它描述了 CSS 属性的过渡。
- en: Example content of CSS classes
  id: totrans-467
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSS 类的示例内容
- en: 'Let’s look at some example content from each of the three CSS classes mentioned
    above: `v-leave-from`, `v-leave-to`, and `v-leave-active`:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看上面提到的三个 CSS 类（`v-leave-from`、`v-leave-to` 和 `v-leave-active`）的一些示例内容：
- en: v-leave-from class example
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: v-leave-from 类示例
- en: '[PRE293]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: 'Here, we indicate that the element will be fully visible at the start of the
    effect (`opacity:1`) and will have a background color (`background-color:#FFCCCC`):'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指示元素在效果开始时将完全可见（`opacity:1`）并且将具有背景颜色（`background-color:#FFCCCC`）：
- en: v-leave-to class example
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: v-leave-to 类示例
- en: '[PRE297]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: 'Here, we indicate that the element will be invisible at the end of the effect
    (`opacity:0`) and will have a black background color (`background-color:black`):'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指示元素在效果结束时将不可见（`opacity:0`）并且将具有黑色背景颜色（`background-color:black`）：
- en: v-leave-active class example
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: v-leave-active 类示例
- en: '[PRE301]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: 'Here, we indicate that the CSS `opacity` and `background-color` properties
    must evolve, each for two seconds. As all the specified CSS properties evolve
    for the same amount of time, you can simplify the code by writing it in shortened
    form:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指示 CSS 的 `opacity` 和 `background-color` 属性必须各自演变，每个属性持续两秒钟。由于所有指定的 CSS
    属性以相同的时间演变，你可以通过简写形式来简化代码：
- en: v-leave-active class example
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: v-leave-active 类示例
- en: '[PRE304]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: The `all` keyword overrides all specified CSS properties.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '`all` 关键字覆盖了所有指定的 CSS 属性。'
- en: Using CSS classes
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 CSS 类
- en: 'Now let’s show how to use these CSS classes in a program, using a button that
    hides a paragraph with an effect. It’s almost the same program as before, but
    here we produce an effect when the paragraph disappears:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来展示如何在程序中使用这些 CSS 类，使用一个按钮来隐藏带有效果的段落。这个程序几乎和之前一样，但在这里，当段落消失时，我们产生一个效果：
- en: Using a button to produce the disappearing effect (index.html file)
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 使用按钮产生消失效果（index.html 文件）
- en: '[PRE307]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: The `v-leave-from` class is applied at the beginning of the effect. It indicates
    that the element is visible (`opacity` at 1) and has a background color `#FFCCCC`
    (salmon).
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-leave-from` 类在效果开始时应用。它表示元素是可见的（`opacity` 为 1）并且具有背景颜色 `#FFCCCC`（鲑鱼色）。'
- en: The `v-leave-to` class indicates the values of CSS properties when the effect
    ends. The paragraph becomes invisible (`opacity` at 0) and has a black background
    color. But as the element becomes more and more invisible (`opacity` tends toward
    0), the black background color also becomes less and less visible.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-leave-to` 类表示当效果结束时 CSS 属性的值。段落变为不可见（`opacity` 为 0）并且具有黑色背景颜色。但随着元素变得越来越不可见（`opacity`
    趋向于 0），黑色背景颜色也越来越不明显。'
- en: If we write the `enter` and `leave` classes in the CSS part in the same program,
    with each click on the button, we obtain an effect of appearing or disappearing
    for the paragraph concerned.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 CSS 部分中编写 `enter` 和 `leave` 类，并且每次点击按钮，我们就会得到段落相关的出现或消失的效果。
- en: The CSS classes used here have fixed names, regardless of the effect used. This
    does not allow using multiple effects, as the visual effects would all use the
    same CSS class names.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的 CSS 类具有固定的名称，无论使用哪种效果。这不允许使用多个效果，因为所有的视觉效果都会使用相同的 CSS 类名称。
- en: For this, Vue.js allows you to give a name to each effect, and thus be able
    to use different CSS class names.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个，Vue.js 允许你给每个效果命名，从而能够使用不同的 CSS 类名称。
- en: Using a name for the effect
  id: totrans-539
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为效果使用名称
- en: Classes of type `"v-enter-xxx"` or `"v-leave-xxx"` can be renamed to symbolize
    the effect with which they are associated. We just need to replace the character
    string `"v-"` with the name of the effect followed by `"-"`.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 类型为 `"v-enter-xxx"` 或 `"v-leave-xxx"` 的类可以被重命名，以表示它们关联的效果。我们只需将字符串 `"v-"` 替换为效果的名称，然后跟一个
    `"-"`。
- en: For example, `"v-enter-from"` will be replaced by `"fade-enter-from"` to give
    the name `"fade"` to the effect. We then add the `name="fade"` attribute to the
    `<transition>` component, indicating `<transition name="fade">`.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`"v-enter-from"` 将被替换为 `"fade-enter-from"`，以给效果命名为 `"fade"`。然后我们添加 `name="fade"`
    属性到 `<transition>` 组件中，表示 `<transition name="fade">`。
- en: This allows us to integrate several effects into our application, by defining
    the CSS classes corresponding to each effect.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我们将多个效果集成到我们的应用程序中，通过定义对应每个效果的 CSS 类。
- en: 'The previous program, integrating the effect named `"fade"` in the paragraph,
    is then written as follows:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的程序，将名为 `"fade"` 的效果集成到段落中，写法如下：
- en: Fade effect (index.html file)
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 淡入淡出效果（index.html 文件）
- en: '[PRE347]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: The `<transition>` component can only have one element, which will be the one
    on which the effect will occur. To include multiple elements, you must use the
    `<transition-group>` component, which we explain below.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '`<transition>` 组件只能有一个元素，这个元素将是效果将要发生作用的元素。要包含多个元素，必须使用 `<transition-group>`
    组件，我们将在下面进行解释。'
- en: Producing an effect on several elements
  id: totrans-598
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在多个元素上产生效果
- en: 'The `<transition>` component can contain only one element. When the effect
    must be applied to several elements, it is necessary to create several `<transition>`
    components or group the elements in a `<transition-group>` component. In this
    example, let’s look at using the `<transition-group>` component:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '`<transition>` 组件只能包含一个元素。当必须将效果应用于多个元素时，必须创建多个 `<transition>` 组件或将元素分组在 `<transition-group>`
    组件中。在这个例子中，让我们看看如何使用 `<transition-group>` 组件：'
- en: Using the <transition-group> component
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `<transition-group>` 组件
- en: '[PRE399]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: The elements on which the effect occurs (here, the two paragraphs) are grouped
    in a `<transition-group>` element instead of the `<transition>` element that was
    used previously when there was a single paragraph on which the effect was produced.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 发生效果的元素（这里，两个段落）被分组在一个 `<transition-group>` 元素中，而不是之前在只有一个段落发生效果时使用的 `<transition>`
    元素。
- en: Now, we will take a look at how to write the CSS classes associated with some
    classic effects.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看看如何编写与一些经典效果相关的 CSS 类。
- en: Examples of commonly used effects
  id: totrans-611
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常用效果的示例
- en: Below are some descriptions of effects. With a few lines of CSS code, you can
    easily produce classic effects such as the shrinking/enlargement of a paragraph
    (shrink effect), its gradual disappearance/appearance (opacity effect), and its
    vertical displacement (`ymove` effect). You are free to choose the names given
    to these effects and symbolize the effect produced.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些效果的描述。通过几行 CSS 代码，你可以轻松地产生经典的段落缩放（缩放效果）、逐渐消失/出现（透明度效果）以及垂直位移（`ymove` 效果）。你可以自由选择这些效果的名称，并象征性地表示产生的效果。
- en: The shrink effect
  id: totrans-613
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缩放效果
- en: To use the shrink effect (here called `"shrink"`), we use the CSS `font-size`
    property.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用缩放效果（这里称为 `"shrink"`），我们使用 CSS `font-size` 属性。
- en: 'At the beginning of the effect, the paragraph is of normal size:'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 在效果开始时，段落是正常大小的：
- en: '![Figure 4.10 – The paragraph is normal size at the beginning of the disappearing
    effect'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.10 – 消失效果开始时段落是正常大小'
- en: '](img/Figure_4.10_B17416.jpg)'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.10_B17416.jpg)'
- en: Figure 4.10 – The paragraph is normal size at the beginning of the disappearing
    effect
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 消失效果开始时段落是正常大小
- en: Once the effect has started following a click on the button, the paragraph decreases
    in size until it disappears.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击按钮开始效果，段落会减小到消失。
- en: '![Figure 4.11 – The paragraph decreases in size until it disappears'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.11 – 段落减小到消失'
- en: '](img/Figure_4.11_B17416.jpg)'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.11_B17416.jpg)'
- en: Figure 4.11 – The paragraph decreases in size until it disappears
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 段落减小到消失
- en: 'Once the paragraph has disappeared, it can reappear after another click on
    the button. The paragraph size will increase until it reaches its normal size:'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦段落消失，再次点击按钮后可以重新出现。段落大小会增加，直到达到其正常大小：
- en: CSS classes to handle shrink effect
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 处理缩放效果的 CSS 类
- en: '[PRE407]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: The CSS class `shrink-leave-to` indicates, for the disappearance effect, to
    go to a font size of 0px, that is, a reduction to 0 of the font size for the paragraph,
    which makes the paragraph invisible.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 类 `shrink-leave-to` 指示，对于消失效果，字体大小将变为 0px，即段落的字体大小减少到 0，使段落变得不可见。
- en: The `shrink-enter-from` CSS class tells the effect to start with a font size
    of 0px, gradually growing to the normal paragraph size when visible.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '`shrink-enter-from` CSS 类指示效果从 0px 的字体大小开始，逐渐增长到可见时的正常段落大小。'
- en: If CSS properties are not indicated in a starting class (for example, the `shrink-leave-from`
    class does not contain the `font-size` property), this means that the current
    value of this CSS property is used in the element.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 如果起始类中没有指定 CSS 属性（例如，`shrink-leave-from` 类不包含 `font-size` 属性），这意味着将使用该 CSS 属性的当前值在元素中。
- en: Similarly, if CSS properties are not indicated in an arrival class (for example,
    the `shrink-enter-to` class does not contain the `font-size` property), this means
    that we are progressing toward the value of this CSS property of the element when
    it will be visible at the end of the effect.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果到达类中没有指定 CSS 属性（例如，`shrink-enter-to` 类不包含 `font-size` 属性），这意味着我们正在向效果结束时元素将可见的该
    CSS 属性的值前进。
- en: The opacity effect
  id: totrans-645
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 透明度效果
- en: The effect named `"fade"` uses the CSS `opacity` property. This effect consists
    of varying the CSS `opacity` property from 0 to 1 (to gradually make an element
    appear) or from 1 to 0 (to make it disappear).
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 命名为 `"fade"` 的效果使用 CSS `opacity` 属性。此效果包括将 CSS `opacity` 属性从 0 变化到 1（逐渐使元素出现）或从
    1 变化到 0（使其消失）。
- en: Here is, for example, the effect of disappearance. The paragraph is disappearing
    with an opacity that tends toward 0\. When the opacity is at 0, the element will
    be completely invisible on the screen.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是消失效果。段落正在以透明度逐渐减小到 0 的方式消失。当透明度为 0 时，元素将在屏幕上完全不可见。
- en: '![Figure 4.12 – The paragraph has an opacity that decreases toward 0'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.12 – 段落的透明度逐渐减小到 0'
- en: '](img/Figure_4.12_B17416.jpg)'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.12_B17416.jpg)'
- en: Figure 4.12 – The paragraph has an opacity that decreases toward 0
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 段落的透明度逐渐减小到 0
- en: 'Once the paragraph is invisible, just click again on the **Produce the effect**
    button to make it reappear gradually:'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦段落变得不可见，只需再次点击 **产生效果** 按钮，就可以让它逐渐重新出现：
- en: CSS classes to manage opacity
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 管理透明度的 CSS 类
- en: '[PRE423]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: '[PRE427]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '[PRE429]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '[PRE434]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: The `fade-leave-to` CSS class indicates to go to an opacity of 0\. The current
    opacity (of value 1) is the starting one. Since the initial value of the opacity
    is not defined in `fade-leave-from`, it will use the value defined by the CSS
    of the element (i.e., 1).
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '`fade-leave-to` CSS 类表示将不透明度变为 0。当前的不透明度（值为 1）是起始值。由于不透明度的初始值在 `fade-leave-from`
    中未定义，它将使用元素 CSS 中定义的值（即 1）。'
- en: Similarly, the `fade-enter-from` class indicates the current opacity at the
    start of the element’s appearance effect. The destination value of the opacity
    does not need to be specified as it will use the default value from the element
    CSS, that is, 1.
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`fade-enter-from` 类表示元素出现效果开始时的当前不透明度。不透明度的目标值不需要指定，因为它将使用元素的默认 CSS 值，即
    1。
- en: The move-down effect
  id: totrans-671
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向下移动效果
- en: To manage this effect (here, called `"ymove"`), we use the CSS properties `transform`
    (set to `translateY(100px)`) and `opacity` (set to 0). This gradually moves the
    element 100px horizontally downward, gradually decreasing its opacity to 0\. The
    element disappears as it moves down the page.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 要管理此效果（在此处称为 `"ymove"`），我们使用 CSS 属性 `transform`（设置为 `translateY(100px)`）和 `opacity`（设置为
    0）。这逐渐将元素向下移动 100 像素，逐渐减少其不透明度至 0。元素在向下移动页面的过程中消失。
- en: 'For example, here is what is displayed when the element has started to slide
    down by decreasing its opacity, which makes it less visible:'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当元素开始通过减少其不透明度向下滑动时，显示的内容如下：
- en: '![Figure 4.13 – The paragraph moves down the page by decreasing its opacity'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.13 – 段落通过减少其不透明度向下移动页面'
- en: '](img/Figure_4.13_B17416.jpg)'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.13_B17416.jpg](img/Figure_4.13_B17416.jpg)'
- en: Figure 4.13 – The paragraph moves down the page by decreasing its opacity
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – 段落通过减少其不透明度向下移动页面
- en: As the effect continues, the paragraph moves down the page, until it reaches
    the distance of 100 pixels specified in the effect. The closer you get to this
    distance, the more the paragraph decreases in opacity, until it becomes invisible
    (opacity of 0).
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 随着效果的继续，段落向下移动页面，直到达到效果中指定的 100 像素距离。你越接近这个距离，段落的不透明度就降低得越多，直到变得看不见（不透明度为 0）。
- en: '![Figure 4.14 – The paragraph becomes almost invisible toward the end of the
    effect'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.14 – 在效果结束时，段落几乎看不见'
- en: '](img/Figure_4.14_B17416.jpg)'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 4.14_B17416.jpg](img/Figure_4.14_B17416.jpg)'
- en: Figure 4.14 – The paragraph becomes almost invisible toward the end of the effect
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – 在效果结束时，段落几乎看不见
- en: 'Once the paragraph has disappeared, clicking on the **Produce the effect**
    button makes it reappear gradually from the bottom of the screen:'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦段落消失，点击 **产生效果** 按钮会使它从屏幕底部逐渐重新出现：
- en: CSS classes to handle moving down
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 处理向下移动的 CSS 类
- en: '[PRE439]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '[PRE451]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: '[PRE452]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: '[PRE454]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: The `ymove-leave-to` CSS class indicates the values of the CSS properties toward
    which we want to vary the indicated CSS properties. The `transform` property can
    contain the `translateY(100px)` value, indicating to perform a vertical translation
    (`Y`) of 100 pixels. Adding an opacity of 0 makes the element disappear by moving
    it vertically.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: '`ymove-leave-to` CSS 类表示我们想要变化的指示 CSS 属性的值。`transform` 属性可以包含 `translateY(100px)`
    值，表示执行 100 像素的垂直平移（`Y`）。添加不透明度为 0 使元素通过垂直移动消失。'
- en: The `ymove-enter-from` CSS class allows you to indicate the values of CSS properties
    at the beginning of the appearance effect. The element is located at 100 pixels
    vertical distance, with an opacity of 0\. The CSS properties will evolve to those
    specified in the `ymove-enter-to` class, and if nothing is specified in this class,
    the CSS properties usually used for an element (opacity of 1 and vertical distance
    of 0, i.e., the normal location) are those toward which we will evolve during
    the appearance effect.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '`ymove-enter-from` CSS 类允许你在出现效果的开始处指定 CSS 属性的值。元素位于垂直距离 100 像素处，不透明度为 0。CSS
    属性将演变到 `ymove-enter-to` 类中指定的属性，如果没有在此类中指定任何内容，则通常用于元素的 CSS 属性（不透明度为 1 和垂直距离为
    0，即正常位置）是我们将在出现效果期间演变到的属性。'
- en: The CSS `transform` property is very useful for producing visual effects, for
    example, rotation, enlargement, and displacement.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 的 `transform` 属性在产生视觉效果方面非常有用，例如旋转、放大和位移。
- en: This brings us to the end of the chapter.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 这就带我们结束了本章的内容。
- en: Summary
  id: totrans-705
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'After learning how to handle events and act when an external event (e.g., a
    click) occurs, we saw in this chapter how components created with Vue.js can be
    assembled to form complete applications. We learned the following:'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习了如何处理事件并在外部事件（例如，点击）发生时采取行动之后，在本章中我们看到了如何使用Vue.js创建的组件可以组合成完整的应用程序。我们学到了以下内容：
- en: To communicate from a component to its parent, we use events.
  id: totrans-707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要从组件与其父组件之间进行通信，我们使用事件。
- en: To communicate from a component to its child, we use the attributes in the component’s
    `props` section.
  id: totrans-708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要从组件与其子组件之间进行通信，我们使用组件的`props`部分中的属性。
- en: Finally, to produce visual effects, all you have to do is write the CSS classes
    managed by Vue.js.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了产生视觉效果，你只需要编写由Vue.js管理的CSS类。
- en: In the next chapter, we will see an example of an application that allows us
    to put into practice the elements studied in the previous chapters.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到一个应用程序的例子，它允许我们将前几章中学习到的元素付诸实践。
