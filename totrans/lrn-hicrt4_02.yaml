- en: Chapter 2. Highcharts Configurations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 高级图表配置
- en: 'All Highcharts graphs share the same configuration structure and it is crucial
    for us to become familiar with the core components. However, it is not possible
    to go through all the configurations within the book. In this chapter, we will
    explore the functional properties that are most used and demonstrate them with
    examples. We will learn how Highcharts manages layout, and then explore how to
    configure axes, specify single series and multiple series data, followed by looking
    at formatting and styling tool tips in both JavaScript and HTML. After that, we
    will get to know how to polish our charts with various types of animations and
    apply color gradients. Finally, we will explore the `drilldown` interactive feature.
    In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Highcharts图表共享相同的配置结构，对我们来说熟悉核心组件至关重要。然而，在本书中不可能涵盖所有配置。在本章中，我们将探索最常用的功能属性，并通过示例进行演示。我们将学习Highcharts如何管理布局，然后探讨如何配置坐标轴、指定单系列和多系列数据，接着查看JavaScript和HTML中格式化和样式化工具提示。之后，我们将了解如何使用各种类型的动画来润色我们的图表，并应用颜色渐变。最后，我们将探索`drilldown`交互功能。在本章中，我们将涵盖以下主题：
- en: Understanding Highcharts layout
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Highcharts布局
- en: Framing the chart with axes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用坐标轴框定图表
- en: Revisiting the series config
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新审视系列配置
- en: Styling the tool tips
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置工具提示样式
- en: Animating charts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画图表
- en: Expanding colors with gradients
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用渐变扩展颜色
- en: Constructing a chart with a `drilldown` series
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`drilldown`系列构建图表
- en: Configuration structure
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置结构
- en: 'In the Highcharts configuration object, the components at the top level represent
    the skeleton structure of a chart. The following is a list of the major components
    that are covered in this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在Highcharts配置对象中，顶层组件代表图表的骨架结构。以下是在本章中涵盖的主要组件列表：
- en: '`chart`: This has configurations for the top-level chart properties such as
    layouts, dimensions, events, animations, and user interactions'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chart`：这包含顶级图表属性（如布局、尺寸、事件、动画和用户交互）的配置'
- en: '`series`: This is an array of series objects (consisting of data and specific
    options) for single and multiple series, where the series data can be specified
    in a number of ways'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`series`：这是一个系列对象的数组（包含数据和特定选项），用于单系列和多系列，其中系列数据可以以多种方式指定'
- en: '`xAxis`/`yAxis/zAxis`: This has configurations for all the axis properties
    such as labels, styles, range, intervals, plotlines, plot bands, and backgrounds'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xAxis`/`yAxis/zAxis`：这包含所有轴属性（如标签、样式、范围、间隔、绘图线、绘图带和背景）的配置'
- en: '`tooltip`: This has the layout and format style configurations for the series
    data tool tips'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tooltip`：这包含系列数据工具提示的布局和格式样式配置'
- en: '`drilldown`: This has configurations for drilldown series and the ID field
    associated with the main series'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drilldown`：这包含用于钻取系列及其与主系列关联的ID字段的配置'
- en: '`title`/`subtitle`: This has the layout and style configurations for the chart
    title and subtitle'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`/`subtitle`：这包含图表标题和副标题的布局和样式配置'
- en: '`legend`: This has the layout and format style configurations for the chart
    legend'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`legend`：这包含图表图例的布局和格式样式配置'
- en: '`plotOptions`: This contains all the plotting options, such as display, animation,
    and user interactions, for common series and specific series types'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plotOptions`：这包含所有绘图选项，例如显示、动画和用户交互，适用于常见系列和特定系列类型'
- en: '`exporting`: This has configurations that control the layout and the function
    of print and export features'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exporting`：这包含控制打印和导出功能的布局和功能的配置'
- en: For reference information concerning all configurations, go to [http://api.highcharts.com](http://api.highcharts.com).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有关所有配置的参考信息，请访问[http://api.highcharts.com](http://api.highcharts.com)。
- en: Understanding Highcharts' layout
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Highcharts的布局
- en: 'Before we start to learn how Highcharts layout works, it is imperative that
    we understand some basic concepts first. To do that, let''s first recall the chart
    example used in [Chapter 1](ch01.html "Chapter 1. Web Charts"), *Web Charts*,
    and set a couple of borders to be visible. First, set a border around the plot
    area. To do that we can set the options of `plotBorderWidth` and `plotBorderColor`
    in the `chart` section, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始学习Highcharts布局如何工作之前，首先理解一些基本概念是至关重要的。为了做到这一点，让我们首先回顾[第一章](ch01.html "第一章.
    网络图表")中使用的图表示例 *Web Charts*，并设置一些可见的边框。首先，设置绘图区域的边框。为此，我们可以在`chart`部分设置`plotBorderWidth`和`plotBorderColor`的选项，如下所示：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The second border is set around the Highcharts container. Next, we extend the
    preceding `chart` section with additional settings:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个边框被设置在 Highcharts 容器周围。接下来，我们通过添加额外的设置扩展前面的 `chart` 部分：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This sets the container border color with a width of `2` pixels and corner radius
    of `3` pixels.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将容器边框颜色设置为 `2` 像素的宽度，并具有 `3` 像素的圆角。
- en: 'As we can see, there is a border around the container and this is the boundary
    that the Highcharts display cannot exceed:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，容器周围有一个边框，这是 Highcharts 显示不能超过的边界：
- en: '![Understanding Highcharts'' layout](img/7451OS_02_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![理解 Highcharts 的布局](img/7451OS_02_01.jpg)'
- en: 'By default, Highcharts displays have three different areas: spacing, labeling,
    and plot area. The plot area is the area inside the inner rectangle that contains
    all the plot graphics. The labeling area is the area where labels such as title,
    subtitle, axis title, legend, and credits go, around the plot area, so that it
    is between the edge of the plot area and the inner edge of the spacing area. The
    spacing area is the area between the container border and the outer edge of the
    labeling area.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Highcharts 显示有三个不同的区域：空间、标签和绘图区域。绘图区域是包含所有绘图图形的内矩形区域。标签区域是标题、副标题、坐标轴标题、图例和版权信息等标签所在区域，位于绘图区域周围，因此它位于绘图区域边缘和空间区域内边缘之间。空间区域是容器边框和标签区域外边缘之间的区域。
- en: The following screenshot shows three different kinds of areas. A gray dotted
    line is inserted to illustrate the boundary between the spacing and labeling areas.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了三种不同类型的区域。插入了一条灰色虚线来表示空间和标签区域之间的边界。
- en: '![Understanding Highcharts'' layout](img/7451OS_02_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![理解 Highcharts 的布局](img/7451OS_02_02.jpg)'
- en: 'Each chart label position can be operated in one of the following two layouts:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 每个图表标签位置可以在以下两种布局之一中进行操作：
- en: '**Automatic layout**: Highcharts automatically adjusts the plot area size based
    on the labels'' positions in the labeling area, so the plot area does not overlap
    with the label element at all. Automatic layout is the simplest way to configure,
    but has less control. This is the default way of positioning the chart elements.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动布局**：Highcharts 会根据标签区域中标签的位置自动调整绘图区域的大小，因此绘图区域根本不会与标签元素重叠。自动布局是配置的最简单方式，但控制较少。这是定位图表元素的默认方式。'
- en: '**Fixed layout**: There is no concept of labeling area. The chart label is
    specified in a fixed location so that it has a floating effect on the plot area.
    In other words, the plot area side does not automatically adjust itself to the
    adjacent label position. This gives the user full control of exactly how to display
    the chart.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固定布局**：没有标签区域的概念。图表标签在固定位置指定，因此它在绘图区域上具有浮动效果。换句话说，绘图区域边不会自动调整以适应相邻的标签位置。这使用户能够完全控制图表的显示方式。'
- en: The spacing area controls the offset of the Highcharts display on each side.
    As long as the chart margins are not defined, increasing or decreasing the spacing
    area has a global effect on the plot area measurements in both automatic and fixed
    layouts.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 空间区域控制了 Highcharts 在每一边的显示偏移。只要图表边距没有定义，增加或减少空间区域会对自动和固定布局中的绘图区域测量产生全局影响。
- en: Chart margins and spacing settings
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表边距和间距设置
- en: In this section, we will see how chart margins and spacing settings have an
    effect on the overall layout. Chart margins can be configured with the properties
    `margin`, `marginTop`, `marginLeft`, `marginRight`, and `marginBottom`, and they
    are not enabled by default. Setting chart margins has a global effect on the plot
    area, so that none of the label positions or chart spacing configurations can
    affect the plot area size. Hence, all the chart elements are in a fixed layout
    mode with respect to the plot area. The `margin` option is an array of four margin
    values covered for each direction, the same as in CSS, starting from north and
    going clockwise. Also, the `margin` option has a lower precedence than any of
    the directional `margin` options, regardless of their order in the `chart` section.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解图表边距和间距设置如何影响整体布局。图表边距可以通过 `margin`、`marginTop`、`marginLeft`、`marginRight`
    和 `marginBottom` 属性进行配置，并且默认情况下它们是禁用的。设置图表边距会对绘图区域产生全局影响，因此没有任何标签位置或图表间距配置可以影响绘图区域的大小。因此，所有图表元素相对于绘图区域都处于固定布局模式。`margin`
    选项是一个包含四个边距值的数组，每个方向都覆盖了一个值，与 CSS 中的相同，从北开始，按顺时针方向进行。此外，`margin` 选项的优先级低于任何方向性的
    `margin` 选项，无论它们在 `chart` 部分中的顺序如何。
- en: Spacing configurations are enabled by default with a fixed value on each side.
    These can be configured in the `chart` section with the property names `spacing`,
    `spacingTop`, `spacingLeft`, `spacingBottom`, and `spacingRight`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 间距配置默认启用，每侧有一个固定值。这些可以在 `chart` 部分通过属性名称 `spacing`、`spacingTop`、`spacingLeft`、`spacingBottom`
    和 `spacingRight` 进行配置。
- en: 'In this example, we are going to increase or decrease the `margin` or `spacing`
    property on each side of the chart and observe the effect. The following are the
    chart settings:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将增加或减少图表每侧的 `margin` 或 `spacing` 属性，并观察其效果。以下是一些图表设置：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows what the chart looks like:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了图表的外观：
- en: '![Chart margins and spacing settings](img/7451OS_02_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图表边距和间距设置](img/7451OS_02_03.jpg)'
- en: The `marginTop` property fixes the plot area's top border `10` pixels away from
    the container border. It also changes the top border into fixed layout for any
    label elements, so the chart title and subtitle float on top of the plot area.
    The `spacingLeft` property increases the spacing area on the left-hand side, so
    it pushes the *y* axis title further in. As it is in automatic layout (without
    declaring `marginLeft`), it also pushes the plot area's west border in. Setting
    `marginRight` to `0` will override all the default spacing on the chart's right-hand
    side and change it to fixed layout mode. Finally, setting `spacingBottom` to `0`
    makes the legend touch the lower bar of the container, so it also stretches the
    plot area downwards. This is because the bottom edge is still in automatic layout
    even though `spacingBottom` is set to `0`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`marginTop` 属性将图表区域的顶部边界固定在容器边界的 `10` 像素处。它还将任何标签元素的顶部边界更改为固定布局，因此图表标题和副标题浮在图表区域上方。`spacingLeft`
    属性增加左侧的间距区域，因此将 *y* 轴标题推得更远。由于它是自动布局（未声明 `marginLeft`），它还将图表区域的西边界推入。将 `marginRight`
    设置为 `0` 将覆盖图表右侧的所有默认间距并将其更改为固定布局模式。最后，将 `spacingBottom` 设置为 `0` 使图例接触容器的底部条，因此它也将图表区域向下拉伸。这是因为即使
    `spacingBottom` 设置为 `0`，底部边缘仍然是自动布局。'
- en: Chart label properties
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表标签属性
- en: 'Chart labels such as `xAxis.title`, `yAxis.title`, `legend`, `title`, `subtitle`,
    and `credits` share common property names, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图表标签如 `xAxis.title`、`yAxis.title`、`legend`、`title`、`subtitle` 和 `credits` 具有共同的属性名称，如下所示：
- en: '`align`: This is for the horizontal alignment of the label. Possible keywords
    are `''left''`, `''center''`, and `''right''`. As for the axis title, it is `''low''`,
    `''middle''`, and `''high''`.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`align`: 这用于标签的水平对齐。可能的关键字是 `''left''`, `''center''`, 和 `''right''`。至于坐标轴标题，它是
    `''low''`, `''middle''`, 和 `''high''`。'
- en: '`floating`: This is to give the label position a floating effect on the plot
    area. Setting this to `true` will cause the label position to have no effect on
    the adjacent plot area''s boundary.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`floating`: 这是为了在图表区域给标签位置一个浮动效果。将此设置为 `true` 将导致标签位置对相邻图表区域的边界没有影响。'
- en: '`margin`: This is the margin setting between the label and the side of the
    plot area adjacent to it. Only certain label types have this setting.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`margin`: 这是标签与相邻图表区域边界的边距设置。只有某些标签类型有此设置。'
- en: '`verticalAlign`: This is for the vertical alignment of the label. The keywords
    are `''top''`, `''middle''`, and `''bottom''`.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verticalAlign`: 这用于标签的垂直对齐。关键字有 `''top''`, `''middle''`, 和 `''bottom''`。'
- en: '`x`: This is for horizontal positioning in relation to alignment.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`: 这用于相对于对齐的横向定位。'
- en: '`y`: This is for vertical positioning in relation to alignment.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y`: 这用于相对于对齐的纵向定位。'
- en: 'As for the labels'' `x` and `y` positioning, they are not used for absolute
    positioning within the chart. They are designed for fine adjustment with the label
    alignment. The following diagram shows the coordinate directions, where the center
    represents the label location:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 至于标签的 `x` 和 `y` 定位，它们不用于图表内的绝对定位。它们是为标签对齐进行精细调整而设计的。以下图表显示了坐标方向，其中中心代表标签位置：
- en: '![Chart label properties](img/7451OS_02_04.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图表标签属性](img/7451OS_02_04.jpg)'
- en: 'We can experiment with these properties with a simple example of the `align`
    and `y` position settings, by placing both title and subtitle next to each other.
    The title is shifted to the left with `align` set to `''left''`, whereas the subtitle
    alignment is set to `''right''`. In order to make both titles appear on the same
    line, we change the subtitle''s `y` position to `15`, which is the same as the
    title''s default `y` value:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一个简单的`align`和`y`位置设置的示例来实验这些属性，通过将标题和副标题并排放置。标题通过将`align`设置为`'left'`向左移动，而副标题的对齐设置为`'right'`。为了使两个标题出现在同一行，我们将副标题的`y`位置更改为`15`，这与标题的默认`y`值相同：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following is a screenshot showing both titles aligned on the same line:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个截图，显示了两个标题在同一行对齐：
- en: '![Chart label properties](img/7451OS_02_05.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图表标签属性](img/7451OS_02_05.jpg)'
- en: In the following subsections, we will experiment with how changes in alignment
    for each label element affect the layout behavior of the plot area.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下子节中，我们将实验每个标签元素的对齐变化如何影响绘图区域的布局行为。
- en: Title and subtitle alignments
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标题和副标题对齐
- en: 'Title and subtitle have the same layout properties, and the only differences
    are that the default values and title have the `margin` setting. Specifying `verticalAlign`
    for any value changes from the default automatic layout to fixed layout (it internally
    switches `floating` to `true`). However, manually setting the subtitle''s `floating`
    property to `false` does not switch back to automatic layout. The following is
    an example of `title` in automatic layout and `subtitle` in fixed layout:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 标题和副标题具有相同的布局属性，唯一的区别是默认值和标题有`margin`设置。指定任何值的`verticalAlign`都会从默认的自动布局更改为固定布局（它内部将`floating`切换为`true`）。然而，手动将副标题的`floating`属性设置为`false`并不会切换回自动布局。以下是一个自动布局中的`title`和固定布局中的`subtitle`的示例：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `verticalAlign` property for the subtitle is set to `''top''`, which switches
    the layout into fixed layout, and the `y` offset is increased to `60`. The `y`
    offset pushes the subtitle''s position further down. Due to the fact that the
    plot area is not in an automatic layout relationship to the subtitle anymore,
    the top border of the plot area goes above the subtitle. However, the plot area
    is still in automatic layout towards the title, so the title is still above the
    plot area:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 副标题的`verticalAlign`属性设置为`'top'`，这会将布局切换到固定布局，并将`y`偏移增加到`60`。`y`偏移将副标题的位置进一步向下推。由于绘图区域不再与副标题处于自动布局关系，绘图区域的上边框会高于副标题。然而，绘图区域仍然与标题处于自动布局关系，因此标题仍然位于绘图区域上方：
- en: '![Title and subtitle alignments](img/7451OS_02_06.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![标题和副标题对齐](img/7451OS_02_06.jpg)'
- en: Legend alignment
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图例对齐
- en: 'Legends show different behavior for the `verticalAlign` and `align` properties.
    Apart from setting the alignment to `''center''`, all other settings in `verticalAlign`
    and `align` remain in automatic positioning. The following is an example of a
    legend located on the right-hand side of the chart. The `verticalAlign` property
    is switched to the middle of the chart, where the horizontal `align` is set to
    `''right''`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图例对于`verticalAlign`和`align`属性有不同的行为。除了将对齐设置为`'center'`外，`verticalAlign`和`align`中的所有其他设置都保持自动定位。以下是一个图例位于图表右侧的示例。`verticalAlign`属性被切换到图表的中间，其中水平`align`被设置为`'right'`：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `layout` property is assigned to `''vertical''` so that it causes the items
    inside the legend box to be displayed in a vertical manner. As we can see, the
    plot area is automatically resized for the legend box:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将`layout`属性设置为`'vertical'`，这样会导致图例框内的项目以垂直方式显示。正如我们所见，绘图区域会自动调整大小以适应图例框：
- en: '![Legend alignment](img/7451OS_02_07.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图例对齐](img/7451OS_02_07.jpg)'
- en: 'Note that the border decoration around the legend box is disabled in the newer
    version. To display a round border around the legend box, we can add the `borderWidth`
    and `borderRadius` options using the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在新版本中，图例框周围的边框装饰已被禁用。要显示图例框周围的圆角边框，我们可以使用以下方式添加`borderWidth`和`borderRadius`选项：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is the legend box with a round corner border:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是具有圆角边框的图例框：
- en: '![Legend alignment](img/7451OS_02_56.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图例对齐](img/7451OS_02_56.jpg)'
- en: Axis title alignment
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 轴标题对齐
- en: 'Axis titles do not use `verticalAlign`. Instead, they use the `align` setting,
    which is either `''low''`, `''middle''`, or `''high''`. The title''s `margin`
    value is the distance between the axis title and the axis line. The following
    is an example of showing the y-axis title rotated horizontally instead of vertically
    (which it is by default) and displayed on the top of the axis line instead of
    next to it. We also use the `y` property to fine-tune the title location:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 轴标题不使用 `verticalAlign`。相反，它们使用 `align` 设置，可以是 `'low'`、`'middle'` 或 `'high'`。标题的
    `margin` 值是轴标题与轴线之间的距离。以下是一个示例，展示了 y 轴标题水平旋转（而不是默认的垂直旋转）并显示在轴线上方而不是旁边的情况。我们还使用
    `y` 属性来微调标题位置：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The following is a screenshot of the upper-left corner of the chart showing
    that the title is aligned horizontally at the top of the *y* axis. Alternatively,
    we can use the `offset` option instead of `margin` to achieve the same result.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个图表右上角的截图，显示标题在 *y* 轴顶部水平对齐。或者，我们可以使用 `offset` 选项代替 `margin` 来达到相同的效果。
- en: '![Axis title alignment](img/7451OS_02_08.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![轴标题对齐](img/7451OS_02_08.jpg)'
- en: Credits alignment
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 信用对齐
- en: 'Credits is a bit different from other label elements. It only supports the
    `align`, `verticalAlign`, `x`, and `y` properties in the `credits.position` property
    (shorthand for `credits: { position: … }`), and is also not affected by any spacing
    setting. Suppose we have a graph without a legend and we have to move the credits
    to the lower-left area of the chart, the following code snippet shows how to do
    it:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '信用与其他标签元素略有不同。它只支持 `align`、`verticalAlign`、`x` 和 `y` 属性在 `credits.position`
    属性中（`credits: { position: … }` 的缩写），并且也不受任何间距设置的影响。假设我们有一个没有图例的图表，并且我们必须将信用移动到图表的左下角区域，以下代码片段显示了如何操作：'
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'However, the credits text is off the edge of the chart, as shown in the following
    screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，信用文本超出了图表的边缘，如下面的截图所示：
- en: '![Credits alignment](img/7451OS_02_09.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![信用对齐](img/7451OS_02_09.jpg)'
- en: 'Even if we move the `credits` label to the right with `x` positioning, the
    label is still a bit too close to the *x* axis interval label. We can introduce
    extra `spacingBottom` to put a gap between both labels, as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们将 `credits` 标签通过 `x` 定位移动到右侧，标签仍然与 *x* 轴间隔标签有点太近。我们可以引入额外的 `spacingBottom`
    在两个标签之间留出间隙，如下所示：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following is a screenshot of the credits with the final adjustments:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个截图，显示了经过最终调整的信用：
- en: '![Credits alignment](img/7451OS_02_10.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![信用对齐](img/7451OS_02_10.jpg)'
- en: Experimenting with an automatic layout
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试自动布局
- en: 'In this section, we will examine the automatic layout feature in more detail.
    For the sake of simplifying the example, we will start with only the chart title
    and without any chart spacing settings:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更详细地检查自动布局功能。为了简化示例，我们将从只有图表标题且没有任何图表间距设置开始：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'From the preceding example, the chart title should appear as expected between
    the container and the plot area''s borders:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的示例中，图表标题应出现在容器和绘图区域边框之间，如预期所示：
- en: '![Experimenting with an automatic layout](img/7451OS_02_11.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![尝试自动布局](img/7451OS_02_11.jpg)'
- en: The space between the title and the top border of the container has the default
    setting `spacingTop` for the spacing area (a default value of 10-pixels high).
    The gap between the title and the top border of the plot area is the default setting
    for `title.margin`, which is 15-pixels high.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 标题与容器顶部边框之间的空间具有间距区域（默认高度为 10 像素）的默认设置 `spacingTop`。标题与绘图区域顶部边框之间的间隙是 `title.margin`
    的默认设置，高度为 15 像素。
- en: 'By setting `spacingTop` in the `chart` section to `0`, the chart title moves
    up next to the container top border. Hence the size of the plot area is automatically
    expanded upwards, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 `chart` 部分设置 `spacingTop` 为 `0`，图表标题向上移动到容器顶部边框旁边。因此，绘图区域的大小自动向上扩展，如下所示：
- en: '![Experimenting with an automatic layout](img/7451OS_02_12.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![尝试自动布局](img/7451OS_02_12.jpg)'
- en: 'Then, we set `title.margin` to `0`; the plot area border moves further up,
    hence the height of the plot area increases further, as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将 `title.margin` 设置为 `0`；绘图区域边框向上移动，因此绘图区域的高度进一步增加，如下所示：
- en: '![Experimenting with an automatic layout](img/7451OS_02_13.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![尝试自动布局](img/7451OS_02_13.jpg)'
- en: As you may notice, there is still a gap of a few pixels between the top border
    and the chart title. This is actually due to the default value of the title's
    `y` position setting, which is 15 pixels, large enough for the default title font
    size.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能注意到的，顶部边框和图表标题之间仍然有少量像素的间隙。这实际上是由于标题的 `y` 位置设置的默认值，为 15 像素，足够大，可以容纳默认标题字体大小。
- en: 'The following is the chart configuration for setting all the spaces between
    the container and the plot area to `0`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将容器和绘图区域之间的所有空间设置为 `0` 的图表配置：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we set `title.y` to `0`, all the gap between the top edge of the plot area
    and the top container edge closes up. The following is the final screenshot of
    the upper-left corner of the chart, to show the effect. The chart title is not
    visible anymore as it has been shifted above the container:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将 `title.y` 设置为 `0`，绘图区域顶部边缘和顶部容器边缘之间的所有间隙都会关闭。以下是在图表左上角的最终截图，以显示效果。图表标题不再可见，因为它已经被移到了容器上方：
- en: '![Experimenting with an automatic layout](img/7451OS_02_14.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![尝试自动布局](img/7451OS_02_14.jpg)'
- en: 'Interestingly, if we work backwards to the first example, the default distance
    between the top of the plot area and the top of the container is calculated as:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，如果我们反向工作到第一个示例，绘图区域顶部和容器顶部之间的默认距离计算如下：
- en: '*spacingTop + title.margin + title.y = 10 + 15 + 15 = 40*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*spacingTop + title.margin + title.y = 10 + 15 + 15 = 40*'
- en: Therefore, changing any of these three variables will automatically adjust the
    plot area from the top container bar. Each of these offset variables actually
    has its own purpose in the automatic layout. Spacing is for the gap between the
    container and the chart content; thus, if we want to display a chart nicely spaced
    with other elements on a web page, spacing elements should be used. Equally, if
    we want to use a specific font size for the label elements, we should consider
    adjusting the `y` offset. Hence, the labels are still maintained at a distance
    and do not interfere with other components in the chart.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，更改这三个变量中的任何一个都会自动调整从顶部容器栏开始的绘图区域。这些偏移变量在自动布局中实际上都有其自己的目的。间距是容器和图表内容之间的间隙；因此，如果我们想在网页上与其他元素间隔显示图表，应使用间距元素。同样，如果我们想为标签元素使用特定的字体大小，我们应该考虑调整
    `y` 偏移。因此，标签仍然保持一定的距离，不会干扰图表中的其他组件。
- en: Experimenting with a fixed layout
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试固定布局
- en: 'In the preceding section, we have learned how the plot area dynamically adjusted
    itself. In this section, we will see how we can manually position the chart labels.
    First, we will start with the example code from the beginning of the *Experimenting
    with automatic layout* section and set the chart title''s `verticalAlign` to `''bottom''`,
    as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了绘图区域如何动态调整自身。在本节中，我们将看到如何手动定位图表标签。首先，我们将从 *尝试自动布局* 部分的开头示例代码开始，将图表标题的
    `verticalAlign` 设置为 `'bottom'`，如下所示：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The chart title is moved to the bottom of the chart, next to the lower border
    of the container. Notice that this setting has changed the title into floating
    mode; more importantly, the legend still remains in the default automatic layout
    of the plot area:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图表标题被移动到图表的底部，紧邻容器的下边框。请注意，此设置已将标题更改为浮动模式；更重要的是，图例仍然保持在绘图区域的默认自动布局中：
- en: '![Experimenting with a fixed layout](img/7451OS_02_15.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![尝试固定布局](img/7451OS_02_15.jpg)'
- en: Be aware that we haven't specified `spacingBottom`, which has a default value
    of 15 pixels in height when applied to the chart. This means that there should
    be a gap between the title and the container bottom border, but none is shown.
    This is because the `title.y` position has a default value of 15 pixels in relation
    to spacing. According to the diagram in the *Chart label properties* section,
    this positive `y` value pushes the title towards the bottom border; this compensates
    for the space created by `spacingBottom`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们尚未指定 `spacingBottom`，当应用于图表时，它的高度默认值为 15 像素。这意味着标题和容器底部边框之间应该有一个间隙，但并未显示。这是因为
    `title.y` 位置相对于间距的默认值为 15 像素。根据 *图表标签属性* 部分的图示，这个正 `y` 值将标题推向底部边框；这补偿了由 `spacingBottom`
    创建的空间。
- en: 'Let''s make a bigger change to the `y` offset position this time to show that
    `verticalAlign` is floating on top of the plot area:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们这次对 `y` 偏移位置进行更大的更改，以显示 `verticalAlign` 是浮在绘图区域之上的：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The negative `y` value moves the title up, as shown here:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 负 `y` 值将标题向上移动，如下所示：
- en: '![Experimenting with a fixed layout](img/7451OS_02_16.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![尝试固定布局](img/7451OS_02_16.jpg)'
- en: 'Now the title is overlapping the plot area. To demonstrate that the legend
    is still in automatic layout with regard to the plot area, here we change the
    legend''s `y` position and the `margin` settings, which is the distance from the
    axis label:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在标题与绘图区域重叠。为了证明图例在绘图区域方面仍然是自动布局，这里我们更改了图例的 `y` 位置和 `margin` 设置，即轴标签的距离：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This has pushed up the bottom side of the plot area. However, the chart title
    still remains in fixed layout and its position within the chart hasn''t been changed
    at all after applying the new legend setting, as shown in the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经推高了绘图区域的底部。然而，图表标题仍然保持固定布局，并且在应用新的图例设置后，其位置在图表内没有任何改变，如下面的截图所示：
- en: '![Experimenting with a fixed layout](img/7451OS_02_17.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![尝试固定布局](img/7451OS_02_17.jpg)'
- en: By now, we should have a better understanding of how to position label elements,
    and their layout policy relating to the plot area.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们应该对如何定位标签元素及其与绘图区域相关的布局策略有了更好的理解。
- en: Framing the chart with axes
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用轴来框定图表
- en: In this section, we are going to look into the configuration of axes in Highcharts
    in terms of their functional area. We will start off with a plain line graph and
    gradually apply more options to the chart to demonstrate the effects.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从功能区域的角度探讨Highcharts中轴的配置。我们将从一个简单的折线图开始，逐渐向图表应用更多选项以展示其效果。
- en: Accessing the axis data type
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问轴数据类型
- en: 'There are two ways to specify data for a chart: categories and series data.
    For displaying intervals with specific names, we should use the `categories` field
    that expects an array of strings. Each entry in the categories array is then associated
    with the series data array. Alternatively, the axis interval values are embedded
    inside the series data array. Then, Highcharts extracts the series data for both
    axes, interprets the data type, and formats and labels the values appropriately.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 指定图表数据的方式有两种：分类和系列数据。为了显示具有特定名称的区间，我们应该使用 `categories` 字段，它期望一个字符串数组。分类数组中的每个条目都与系列数据数组相关联。或者，轴区间值嵌入在系列数据数组内部。然后，Highcharts提取两个轴的系列数据，解释数据类型，并适当地格式化和标记值。
- en: 'The following is a straightforward example showing the use of categories:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的示例，展示了分类的使用：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding code snippet produces a graph that looks like the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段生成的图表如下截图所示：
- en: '![Accessing the axis data type](img/7451OS_02_18.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![访问轴数据类型](img/7451OS_02_18.jpg)'
- en: The first name in the categories field corresponds to the first value, **9:30
    am**, 2606.01, in the series data array, and so on.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 分类字段中的第一个名称对应于数据数组中的第一个值，**9:30 am**，2606.01，等等。
- en: 'Alternatively, we can specify the time values inside the series data and use
    the `type` property of the *x* axis to format the time. The `type` property supports
    `''linear''` (default), `''logarithmic''`, or `''datetime''`. The `''datetime''`
    setting automatically interprets the time in the series data into human-readable
    form. Moreover, we can use the `dateTimeLabelFormats` property to predefine the
    custom format for the time unit. The option can also accept multiple time unit
    formats. This is for when we don''t know in advance how long the time span is
    in the series data, so each unit in the resulting graph can be per hour, per day,
    and so on. The following example shows how the graph is specified with predefined
    hourly and minute formats. The syntax of the format string is based on the PHP
    `strftime` function:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以在系列数据内部指定时间值，并使用 *x* 轴的 `type` 属性来格式化时间。`type` 属性支持 `'linear'`（默认值）、`'logarithmic'`
    或 `'datetime'`。`'datetime'` 设置会自动将系列数据中的时间解释为可读形式。此外，我们可以使用 `dateTimeLabelFormats`
    属性来预定义时间单位的自定义格式。该选项还可以接受多个时间单位格式。这是当我们事先不知道系列数据中的时间跨度有多长时的情况，因此结果图中的每个单位可以是每小时、每天等等。以下示例展示了如何使用预定义的小时和分钟格式指定图表。格式字符串的语法基于PHP的
    `strftime` 函数：
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note that the *x* axis is in the 12-hour time format, as shown in the following
    screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，*x* 轴使用的是12小时制时间格式，如下面的截图所示：
- en: '![Accessing the axis data type](img/7451OS_02_19.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![访问轴数据类型](img/7451OS_02_19.jpg)'
- en: 'Instead, we can define the format handler for the `xAxis.labels.formatter`
    property to achieve a similar effect. Highcharts provides a utility routine, `Highcharts.dateFormat`,
    that converts the timestamp in milliseconds to a readable format. In the following
    code snippet, we define the `formatter` function using `dateFormat` and `this.value`.
    The keyword `this` is the axis''s interval object, whereas `this.value` is the
    UTC time value for the instance of the interval:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以定义 `xAxis.labels.formatter` 属性的格式处理程序以实现类似的效果。Highcharts 提供了一个实用程序，`Highcharts.dateFormat`，它将毫秒时间戳转换为可读格式。在以下代码片段中，我们使用
    `dateFormat` 和 `this.value` 定义了 `formatter` 函数。关键字 `this` 是轴的间隔对象，而 `this.value`
    是间隔实例的 UTC 时间值：
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Since the time values of our data points are in fixed intervals, they can also
    be arranged in a cut-down version. All we need is to define the starting point
    of time, `pointStart`, and the regular interval between them, `pointInterval`,
    in milliseconds:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的数据点的时值是固定间隔的，它们也可以以缩略版的形式排列。我们只需要定义时间点的起始点 `pointStart` 和它们之间的常规间隔 `pointInterval`（以毫秒为单位）：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Adjusting intervals and background
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整间隔和背景
- en: We have learned how to use axis categories and series data arrays in the last
    section. In this section, we will see how to format interval lines and the background
    style to produce a graph with more clarity.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何使用轴类别和系列数据数组。在本节中，我们将看到如何格式化间隔线和背景样式，以产生更清晰的图表。
- en: We will continue from the previous example. First, let's create some interval
    lines along the *y* axis. In the chart, the interval is automatically set to 20\.
    However, it would be clearer to double the number of interval lines. To do that,
    simply assign the `tickInterval` value to `10`. Then, we use `minorTickInterval`
    to put another line in between the intervals to indicate a semi-interval. In order
    to distinguish between interval and semi-interval lines, we set the semi-interval
    lines, `minorGridLineDashStyle`, to a dashed and dotted style.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续之前的示例。首先，让我们在 *y* 轴上创建一些间隔线。在图表中，间隔自动设置为 20。然而，将间隔线的数量加倍会更清晰。为此，只需将 `tickInterval`
    值分配为 `10`。然后，我们使用 `minorTickInterval` 在间隔之间放置另一条线以指示半间隔。为了区分间隔线和半间隔线，我们将半间隔线 `minorGridLineDashStyle`
    设置为虚线和点划线样式。
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are nearly a dozen line style settings available in Highcharts, from `'Solid'`
    to `'LongDashDotDot'`. Readers can refer to the online manual for possible values.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts 中有近十种线型设置可用，从 `'Solid'` 到 `'LongDashDotDot'`。读者可以参考在线手册以获取可能的值。
- en: 'The following is the first step to create the new settings:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为创建新设置的第一步：
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The interval lines should look like the following screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 间隔线应该看起来像下面的截图：
- en: '![Adjusting intervals and background](img/7451OS_02_20.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![调整间隔和背景](img/7451OS_02_20.jpg)'
- en: 'To make the graph even more presentable, we add a striping effect with shading
    using `alternateGridColor`. Then, we change the interval line color, `gridLineColor`,
    to a similar range with the stripes. The following code snippet is added into
    the `yAxis` configuration:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使图表看起来更加美观，我们使用 `alternateGridColor` 添加了带有阴影的条纹效果。然后，我们将间隔线颜色 `gridLineColor`
    改变为与条纹相似的范围。以下代码片段被添加到 `yAxis` 配置中：
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We will discuss the color gradient later in this chapter. The following is
    the graph with the new shading background:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面讨论颜色渐变。以下是有新阴影背景的图表：
- en: '![Adjusting intervals and background](img/7451OS_02_21.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![调整间隔和背景](img/7451OS_02_21.jpg)'
- en: 'The next step is to apply a more professional look to the *y* axis line. We
    are going to draw a line on the *y* axis with the `lineWidth` property, and add
    some measurement marks along the interval lines with the following code snippet:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是给 *y* 轴线应用更专业的样式。我们将使用 `lineWidth` 属性在 *y* 轴上画线，并使用以下代码片段在间隔线上添加一些测量标记：
- en: '[PRE21]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `tickWidth` and `tickLength` properties add the effect of little marks
    at the start of each interval line. We apply the same color on both the interval
    mark and the axis line. Then we add the ticks `minorTickLength` and `minorTickWidth`
    into the semi-interval lines in a smaller size. This gives a nice measurement
    mark effect along the axis, as shown in the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`tickWidth` 和 `tickLength` 属性在每条间隔线的起始处添加了小标记的效果。我们在间隔标记和坐标线上都应用了相同的颜色。然后，我们将
    `minorTickLength` 和 `minorTickWidth` 添加到半间隔线中，尺寸更小。这样就在坐标线上产生了一个很好的测量标记效果，如下面的截图所示：'
- en: '![Adjusting intervals and background](img/7451OS_02_22.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![调整间隔和背景](img/7451OS_02_22.jpg)'
- en: 'Now, we apply a similar polish to the `xAxis` configuration, as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们对`xAxis`配置应用类似的润色，如下：
- en: '[PRE22]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We set the *x* axis interval lines to the hourly format and switch the line
    style to a dotted line. Then, we apply the same color, thickness, and interval
    ticks as on the *y* axis. The following is the resulting screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将*x*轴的间隔线设置为小时格式，并将线型切换为虚线。然后，我们应用与*y*轴相同的颜色、粗细和间隔刻度。以下是为截图：
- en: '![Adjusting intervals and background](img/7451OS_02_23.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![调整间隔和背景](img/7451OS_02_23.jpg)'
- en: 'However, there are some defects along the *x* axis line. To begin with, the
    meeting point between the *x* axis and *y* axis lines does not align properly.
    Secondly, the interval labels at the *x* axis are touching the interval ticks.
    Finally, part of the first data point is covered by the y-axis line. The following
    is an enlarged screenshot showing the issues:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在*x*轴线上存在一些缺陷。首先，*x*轴线和*y*轴线的交汇点没有正确对齐。其次，*x*轴上的间隔标签与间隔刻度相接触。最后，第一个数据点的一部分被y轴线覆盖。以下是一个放大后的截图，显示了这些问题：
- en: '![Adjusting intervals and background](img/7451OS_02_24.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![调整间隔和背景](img/7451OS_02_24.jpg)'
- en: 'There are two ways to resolve the axis line alignment problem, as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 解决坐标轴线对齐问题的有两种方法，如下：
- en: Shift the plot area 1 pixel away from the x axis. This can be achieved by setting
    the `offset` property of `xAxis` to `1`.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将绘图区域向x轴方向移动1像素。这可以通过将`xAxis`的`offset`属性设置为`1`来实现。
- en: Increase the x-axis line width to 3 pixels, which is the same width as the y-axis
    tick interval.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将*x*轴线的宽度增加到3像素，与*y*轴的刻度间隔宽度相同。
- en: As for the x-axis label, we can simply solve the problem by introducing the
    `y` offset value into the `labels` setting.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 至于*x*轴标签，我们可以通过将`y`偏移值引入`labels`设置来简单地解决这个问题。
- en: 'Finally, to avoid the first data point touching the y-axis line, we can impose
    `minPadding` on the *x* axis. What this does is to add padding space at the minimum
    value of the axis, the first point. The `minPadding` value is based on the ratio
    of the graph width. In this case, setting the property to `0.02` is equivalent
    to shifting along the *x* axis 5 pixels to the right (250 px * 0.02). The following
    are the additional settings to improve the chart:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了避免第一个数据点接触y轴线，我们可以在*x*轴上施加`minPadding`。这样做是在轴的最小值处添加填充空间，即第一个点。`minPadding`值基于图表宽度的比例。在这种情况下，将属性设置为`0.02`相当于将*x*轴向右移动5像素（250
    px * 0.02）。以下是为改善图表的附加设置：
- en: '[PRE23]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following screenshot shows that the issues have been addressed:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示问题已得到解决：
- en: '![Adjusting intervals and background](img/7451OS_02_25.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![调整间隔和背景](img/7451OS_02_25.jpg)'
- en: As we can see, Highcharts has a comprehensive set of configurable variables
    with great flexibility.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，Highcharts提供了一套全面的、具有高度灵活性的可配置变量。
- en: Using plot lines and plot bands
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用折线和折带
- en: 'In this section, we are going to see how we can use Highcharts to place lines
    or bands along the axis. We will continue with the example from the previous section.
    Let''s draw a couple of lines to indicate the day''s highest and lowest index
    points on the y axis. The `plotLines` field accepts an array of object configurations
    for each plot line. There are no width and color default values for `plotLines`,
    so we need to specify them explicitly in order to see the line. The following
    is the code snippet for the plot lines:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用Highcharts在轴上放置线条或带状区域。我们将继续使用上一节中的示例。让我们画几条线来指示y轴上一天的最高和最低指数点。`plotLines`字段接受一个对象配置数组，用于每个折线。`plotLines`没有宽度和颜色默认值，因此我们需要明确指定它们才能看到线条。以下是为折线提供的代码片段：
- en: '[PRE24]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following screenshot shows what it should look like:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了它应该看起来像什么：
- en: '![Using plot lines and plot bands](img/7451OS_02_26.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![使用折线和折带](img/7451OS_02_26.jpg)'
- en: 'We can improve the look of the chart slightly. First, the text label for the
    top plot line should not be next to the highest point. Second, the label for the
    bottom line should be remotely covered by the series and interval lines, as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以稍微改善图表的外观。首先，顶部折线的文本标签不应紧挨着最高点。其次，底部线的标签应被系列线和间隔线远程覆盖，如下：
- en: '![Using plot lines and plot bands](img/7451OS_02_27.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![使用折线和折带](img/7451OS_02_27.jpg)'
- en: 'To resolve these issues, we can assign the plot line''s `zIndex` to `1`, which
    brings the text label above the interval lines. We also set the `x` position of
    the label to shift the text next to the point. The following are the new changes:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些问题，我们可以将绘图线的 `zIndex` 赋值为 `1`，这将文本标签置于区间线之上。我们还设置了标签的 `x` 位置以将文本移至点旁边。以下是新更改：
- en: '[PRE25]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following graph shows the label has been moved away from the plot line
    and over the interval line:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示标签已被从绘图线移开，并移至区间线上：
- en: '![Using plot lines and plot bands](img/7451OS_02_28.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![使用绘图线和绘图带](img/7451OS_02_28.jpg)'
- en: 'Now, we are going to change the preceding example with a plot band area that
    shows the index change between the market''s opening and closing values. The plot
    band configuration is very similar to plot lines, except that it uses the `to`
    and `from` properties, and the `color` property accepts gradient settings or color
    code. We create a plot band with a triangle text symbol and values to signify
    a positive close. Instead of using the `x` and `y` properties to fine-tune label
    position, we use the `align` option to adjust the text to the center of the plot
    area (replace the plotLines setting from the above example):'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将更改前面的示例，使用绘图带区域显示市场开盘价和收盘价之间的指数变化。绘图带配置与绘图线非常相似，除了它使用 `to` 和 `from` 属性，并且
    `color` 属性接受渐变设置或颜色代码。我们创建了一个带有三角形文本符号和值的绘图带，以表示正收盘价。我们不是使用 `x` 和 `y` 属性来微调标签位置，而是使用
    `align` 选项将文本调整到绘图区域的中心（替换上述示例中的 `plotLines` 设置）：
- en: '[PRE26]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The triangle is an alt-code character; hold down the left *Alt* key and enter
    `30` in the number keypad. See [http://www.alt-codes.net](http://www.alt-codes.net)
    for more details.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 三角形是一个 alt-code 字符；按住左 *Alt* 键，在数字键盘上输入 `30`。有关更多详细信息，请参阅 [http://www.alt-codes.net](http://www.alt-codes.net)。
- en: 'This produces a chart with a green plot band highlighting a positive close
    in the market, as shown in the following screenshot:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了一个图表，其中绿色绘图带突出显示了市场中的正收盘价，如下面的截图所示：
- en: '![Using plot lines and plot bands](img/7451OS_02_29.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![使用绘图线和绘图带](img/7451OS_02_29.jpg)'
- en: Extending to multiple axes
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展到多个轴
- en: Previously, we ran through most of the axis configurations. Here, we explore
    how we can use multiple axes, which are just an array of objects containing axis
    configurations.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们跑过了大多数的轴配置。在这里，我们探讨如何使用多个轴，这些轴只是一个包含轴配置的对象数组。
- en: 'Continuing from the previous stock market example, suppose we now want to include
    another market index, Dow Jones, along with Nasdaq. However, both indices are
    different in nature, so their value ranges are vastly different. First, let''s
    examine the outcome by displaying both indices with the common *y* axis. We change
    the title, remove the fixed interval setting on the y axis, and include data for
    another series:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 继续上一个股票市场示例，假设我们现在想包括另一个市场指数，道琼斯，以及纳斯达克。然而，这两个指数在性质上不同，所以它们的值范围差异很大。首先，让我们通过显示具有共同
    *y* 轴的两个指数来检查结果。我们更改标题，移除 y 轴上的固定间隔设置，并包含另一个系列的数据：
- en: '[PRE27]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following is the chart showing both market indices:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了两个市场指数：
- en: '![Extending to multiple axes](img/7451OS_02_30.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![扩展到多个轴](img/7451OS_02_30.jpg)'
- en: As expected, the index changes that occur during the day have been normalized
    by the vast differences in value. Both lines look roughly straight, which falsely
    implies that the indices have hardly changed.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，指数在一天中发生的变化已经通过价值的大幅差异进行了标准化。两条线看起来大致是直的，这错误地暗示指数几乎没有变化。
- en: Let us now explore putting both indices onto separate *y* axes. We should remove
    any background decoration on the *y* axis, because we now have a different range
    of data shared on the same background.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来探讨将两个指数分别放在单独的 *y* 轴上。我们应该移除 *y* 轴上的任何背景装饰，因为我们现在在同一背景上共享不同的数据范围。
- en: 'The following is the new setup for `yAxis`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对 `yAxis` 的新设置：
- en: '[PRE28]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now `yAxis` is an array of axis configurations. The first entry in the array
    is for Nasdaq and the second is for Dow Jones. This time, we display the axis
    title to distinguish between them. The `opposite` property is to put the Dow Jones
    y axis onto the other side of the graph for clarity. Otherwise, both *y* axes
    appear on the left-hand side.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `yAxis` 是一个轴配置数组。数组中的第一个条目是纳斯达克，第二个是道琼斯。这次，我们显示轴标题以区分它们。`opposite` 属性是将道琼斯
    *y* 轴放置在图表的另一侧以提高清晰度。否则，两个 *y* 轴都出现在左侧。
- en: 'The next step is to align indices from the y-axis array to the series data
    array, as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将y轴数组中的索引与系列数据数组对齐，如下所示：
- en: '[PRE29]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We can clearly see the movement of the indices in the new graph, as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以清楚地看到新图表中指数的移动，如下所示：
- en: '![Extending to multiple axes](img/7451OS_02_31.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![扩展到多个轴](img/7451OS_02_31.jpg)'
- en: 'Moreover, we can improve the final view by color-matching the series to the
    axis lines. The `Highcharts.getOptions().colors` property contains a list of default
    colors for the series, so we use the first two entries for our indices. Another
    improvement is to set `maxPadding` for the *x* axis, because the new y-axis line
    covers parts of the data points at the high end of the *x* axis:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以通过将系列与坐标轴线条进行颜色匹配来改进最终视图。`Highcharts.getOptions().colors`属性包含系列默认颜色列表，因此我们使用前两个条目作为我们的索引。另一个改进是设置*x*轴的`maxPadding`，因为新的y轴线条覆盖了*x*轴高端部分的数据点：
- en: '[PRE30]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following screenshot shows the improved look of the chart:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了图表改进后的外观：
- en: '![Extending to multiple axes](img/7451OS_02_32.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![扩展到多个轴](img/7451OS_02_32.jpg)'
- en: 'We can extend the preceding example and have more than a couple of axes, simply
    by adding entries into the `yAxis` and `series` arrays, and mapping both together.
    The following screenshot shows a 4-axis line graph:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向`yAxis`和`series`数组中添加条目来扩展前面的示例，并拥有超过两个轴，同时将两者映射在一起。下面的截图显示了一个4轴折线图：
- en: '![Extending to multiple axes](img/7451OS_02_49.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![扩展到多个轴](img/7451OS_02_49.jpg)'
- en: Revisiting the series config
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新审视系列配置
- en: By now, we should have an idea of what the `series` property does. In this section,
    we are going to examine it in more detail.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们应该已经了解了`series`属性的作用。在本节中，我们将更详细地探讨它。
- en: The `series` property is an array of series configuration objects that contain
    data- and series-specific options. It allows us to specify single-series data
    and multiple-series data. The purpose of series objects is to inform Highcharts
    of the format of the data and how the data is presented in the chart.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`series`属性是包含数据-系列特定选项的系列配置对象数组。它允许我们指定单系列数据和多系列数据。系列对象的目的就是通知Highcharts数据的格式以及数据在图表中的呈现方式。'
- en: 'All data values in the chart are specified through the `data` field. The `data`
    field is highly flexible and can take an array in a number of forms, as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图表中的所有数据值都是通过`data`字段指定的。`data`字段非常灵活，可以采用多种形式的数组，如下所示：
- en: Numerical values
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值
- en: An array with *x* and *y* values
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含*x*和*y*值的数组
- en: A point object with properties describing the data point
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个具有描述数据点属性的点对象
- en: 'The first two options have already been examined in the *Accessing the axis
    data type* section. In this section, we will explore the third option. Let''s
    use the single-series Nasdaq example and we will specify the series data through
    a mixture of numerical values and objects:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个选项已在*访问轴数据类型*部分中进行了探讨。在本节中，我们将探讨第三个选项。让我们使用单系列纳斯达克示例，并通过数值和对象的混合来指定系列数据：
- en: '[PRE31]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The first and last data points are objects that have *y* axis values and image
    files to indicate the opening and closing of the market. The highest data point
    is configured with a different color and data label. The size of the data point
    is also set slightly larger than the default. The rest of the data arrays are
    just numerical values, as shown in the following screenshot:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个和最后一个数据点是具有*y*轴值和图像文件的对象，用于表示市场的开盘和收盘。最高数据点配置了不同的颜色和数据标签。数据点的大小也设置为略大于默认值。其余的数据数组只是数值，如下面的截图所示：
- en: '![Revisiting the series config](img/7451OS_02_33.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![重新审视系列配置](img/7451OS_02_33.jpg)'
- en: Exploring PlotOptions
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索PlotOptions
- en: The `plotOptions` object is a wrapper object for config objects for each series
    type supported in Highcharts. These configurations have properties such as `plotOptions.line.lineWidth`,
    common to other series types, as well as other configurations such as `plotOptions.pie.center`
    that is only specific to the pie series type. Among the specific series, there
    is `plotOptions.series`, which is used for common plotting options shared by the
    whole series.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotOptions`对象是Highcharts中支持的所有系列类型配置对象的包装对象。这些配置具有如`plotOptions.line.lineWidth`这样的属性，这些属性与其他系列类型通用，以及如`plotOptions.pie.center`这样的配置，它仅针对饼图系列类型。在具体的系列中，有`plotOptions.series`，它用于整个系列共享的通用绘图选项。'
- en: The preceding `plotOptions` object can form a chain of precedence between `plotOptions.series`,
    `plotOptions.{series-type}`, and the series configuration. For example, `series[x].shadow`
    (where `series[x].type` is `'pie'`) has a higher precedence than `plotOptions.pie.shadow`,
    which in turn has a higher precedence than `plotOptions.series.shadow`.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的 `plotOptions` 对象可以在 `plotOptions.series`、`plotOptions.{series-type}` 和系列配置之间形成一个优先级链。例如，`series[x].shadow`（其中
    `series[x].type` 是 `'pie'`）的优先级高于 `plotOptions.pie.shadow`，而 `plotOptions.pie.shadow`
    的优先级又高于 `plotOptions.series.shadow`。
- en: The purpose of this is that the chart is composed of multiple different series
    types. For example, in a chart with multiple series of columns and a single line
    series, the common properties between column and line can be defined in `plotOptions.series.*`,
    whereas `plotOptions.column` and `plotOptions.line` hold their own specific property
    values. Moreover, properties in `plotOptions.{series-type}.*` can be further overridden
    by the same series type specified in the series array.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的目的是图表由多个不同的系列类型组成。例如，在一个包含多个柱状系列和单个线条系列的图表中，柱状图和线条的共同属性可以在 `plotOptions.series.*`
    中定义，而 `plotOptions.column` 和 `plotOptions.line` 则持有它们自己的特定属性值。此外，`plotOptions.{series-type}.*`
    中的属性可以被系列数组中指定的相同系列类型进一步覆盖。
- en: 'The following is a reference for the configurations in precedence. The higher-level
    ones have lower precedence, which means that configurations defined in the lower
    level of the chain can override properties defined in the higher level of the
    chain. For the series array, the preference is valid if `series[x].type` or the
    default series type value is the same as the series type in `plotOptions`:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的表格是配置优先级的参考。高级别的配置优先级较低，这意味着链中较低级别的配置可以覆盖链中较高级别的配置。对于系列数组，如果 `series[x].type`
    或默认系列类型值与 `plotOptions` 中的系列类型相同，则优先级有效：
- en: '[PRE32]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `plotOptions` object contains properties controlling how a series type
    is presented in the chart—for example inverted charts, series colors, stacked
    column charts, user interactions with the series, and so on. All these options
    will be covered in detail when we study each type of chart. Meanwhile, we will
    explore the concept of `plotOptions` with a monthly Nasdaq graph. The graph has
    five different series data types: open, close, high, low, and volume. Normally,
    this data is used for plotting daily stock charts (OHLCV). We compact them into
    a single chart for the purpose of demonstrating `plotOptions`.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotOptions` 对象包含控制图表中系列类型呈现方式的属性——例如倒置图表、系列颜色、堆叠柱状图、用户与系列的交互等。当我们研究每种图表类型时，所有这些选项都将被详细说明。同时，我们将通过一个月度纳斯达克图来探索
    `plotOptions` 的概念。该图有五种不同的系列数据类型：开盘价、收盘价、最高价、最低价和成交量。通常，这些数据用于绘制每日股票图表（OHLCV）。我们将它们压缩到单个图表中，目的是为了演示
    `plotOptions`。'
- en: '![Exploring PlotOptions](img/7451OS_02_34.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![探索 PlotOptions](img/7451OS_02_34.jpg)'
- en: 'The following is the chart configuration code for generating the preceding
    graph:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码是生成前面图表的图表配置：
- en: '[PRE33]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Although the graph looks slightly complicated, we will go through the code
    step-by-step. First, there are two entries in the `yAxis` array: the first is
    for the Nasdaq index; the second y axis, displayed on the right-hand side (`opposite:
    true`), is for the volume trade. In the series array, the first and second series
    are specified as column series types (`type: ''column''`), which override the
    default series type `''line''`. Then the `stacking` option is defined as `''normal''`
    in `plotOptions.column`, which stacks the monthly high on top of the monthly low
    column (deep blue and black columns). Strictly speaking, the stacked column chart
    is used for displaying the ratio of data belonging to the same category. For the
    sake of demonstrating `plotOptions`, we used the stacked column chart to show
    the upper and lower ends of monthly trade. To do that, we take the difference
    between monthly high and monthly low and substitute the differences back into
    the monthly high series. So in the code, we can see that the data values in the
    monthly high series are much smaller than the monthly low.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '虽然图表看起来稍微复杂一些，但我们将逐步分析代码。首先，在`yAxis`数组中有两个条目：第一个是为纳斯达克指数；第二个y轴，显示在右侧（`opposite:
    true`），是用于成交量。在系列数组中，第一个和第二个系列被指定为柱状图系列类型（`type: ''column''`），这覆盖了默认的系列类型`''line''`。然后，在`plotOptions.column`中定义了`stacking`选项为`''normal''`，这将在月度最高价上堆叠月度最低价柱（深蓝色和黑色柱）。严格来说，堆叠柱状图用于显示属于同一类别的数据比率。为了演示`plotOptions`，我们使用了堆叠柱状图来显示月度交易的上下限。为此，我们取月度最高价和最低价的差值，并将这些差值替换回月度最高价系列。因此，在代码中，我们可以看到月度最高价系列中的数据值要小得多。'
- en: The third and fourth series are the market open and market close index. Both
    take the default line series type and inherit options defined from `plotOptions.line`.
    The `zIndex` option is assigned to `2` to overlay both line series on top of the
    fifth volume series; otherwise, both lines are covered by the volume columns.
    The `marker` object configurations are to reduce the default data point size,
    as the whole graph is already compacted with columns and lines.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个和第四个系列是市场开盘和收盘指数。两者都采用默认的线系列类型，并继承自`plotOptions.line`中定义的选项。`zIndex`选项被分配为`2`，以将两个线系列叠加在第五个成交量系列之上；否则，两条线都将被成交量柱覆盖。`marker`对象配置是为了减少默认的数据点大小，因为整个图表已经通过柱状图和线条压缩。
- en: 'The last column series is the volume trade, and the `stacking` option in the
    series is manually set to `null`, which overrides the inherited option from `plotOptions.column`.
    This resets the series back to the non-stacking option, displaying as a separate
    column. Finally, the `yAxis` index option is set to align with the y axis of the
    volume series (`yAxis: 1`).'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '最后一个柱状图系列是成交量，系列中的`stacking`选项被手动设置为`null`，这覆盖了从`plotOptions.column`继承的选项。这将系列重置为非堆叠选项，显示为单独的柱状图。最后，将`yAxis`索引选项设置为与成交量系列的y轴对齐（`yAxis:
    1`）。'
- en: Styling tooltips
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示框样式
- en: 'Tool tips in Highcharts are enabled by the `tooltip.enabled` Boolean option,
    which is `true` by default. In Highcharts 4, the default shape of the tooltip
    box has been changed to callout. The following shows the new style of tooltip:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts中的提示框是通过`tooltip.enabled`布尔选项启用的，默认值为`true`。在Highcharts 4中，提示框框的默认形状已更改为callout。以下展示了新的提示框样式：
- en: '![Styling tooltips](img/7451OS_02_57.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![提示框样式](img/7451OS_02_57.jpg)'
- en: For the older style of tooltip shape, we can set the `tooltip.shape` option
    to `square`, which we will use in the following exercises.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 对于旧式的提示框形状，我们可以将`tooltip.shape`选项设置为`square`，我们将在下面的练习中使用它。
- en: 'Tooltip''s content formats are flexible, which can be defined via a callback
    handler or in the HTML style. We will continue from the example in the previous
    section. As the chart is packed with multiple lines and columns, we can first
    enable the crosshair tool tip to help us align the data points onto the axes.
    The `crosshairs` configuration can take either a Boolean value to activate the
    feature or an object style for the crosshair line style. The following is the
    code snippet to set up crosshairs with an array of x- and y-axis configurations
    for the gray color and dash line styles:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 提示框的内容格式是灵活的，可以通过回调处理程序或HTML样式来定义。我们将从上一节中的示例继续。由于图表中包含多行和多列，我们可以首先启用十字准线提示框来帮助我们将数据点对齐到轴上。`crosshairs`配置可以接受一个布尔值来激活该功能，或者是一个对象样式来定义十字准线线的样式。以下是一个代码片段，用于设置带有灰色彩色和虚线样式的x轴和y轴配置数组的十字准线：
- en: '[PRE34]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Again, the `dashStyle` option uses the same common line style values in Highcharts.
    See the crosshairs reference manual for all the possible values.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，`dashStyle` 选项使用与 Highcharts 中相同的常用线型值。请参阅十字线参考手册以获取所有可能的值。
- en: 'The following screenshot shows the view when hovering over a data point in
    the market close series. We see a tool tip box appear next to the pointer and
    gray crosshairs for both axes:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在市场收盘系列中悬停数据点时的视图。我们看到指针旁边出现了一个工具提示框，以及两个轴的灰色十字线：
- en: '![Styling tooltips](img/7451OS_02_35.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![工具提示样式](img/7451OS_02_35.jpg)'
- en: Formatting tooltips in HTML
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 HTML 中格式化工具提示
- en: 'Highcharts provides template options such as `headerFormat`, `pointFormat`,
    and `footerFormat` to construct the tool tip by specific template variables (or
    macros). These specific variables are series and point, and we can use their properties
    such as `point.x`, `point.y`, `series.name`, and `series.color` within the template.
    For instance, the default tool tip setting uses `pointFormat`, which has the default
    value of the following code snippet:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts 提供了如 `headerFormat`、`pointFormat` 和 `footerFormat` 等模板选项，通过特定的模板变量（或宏）来构建工具提示。这些特定的变量是系列和点，我们可以在模板中使用它们的属性，例如
    `point.x`、`point.y`、`series.name` 和 `series.color`。例如，默认的工具提示设置使用 `pointFormat`，其默认值为以下代码片段：
- en: '[PRE35]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Highcharts internally translates the preceding expression into SVG text markups,
    so only a subset of HTML syntax can be supported, which is `<b>`, `<br>`, `<strong>`,
    `<em>`, `<i>`, `<span>`, `<href>`, and font style attributes in CSS. However,
    if we want to have more flexibility in polishing the content, and the ability
    to include image files, we need to use the `useHTML` option for full HTML tool
    tips. This option allows us to do the following:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts 会将前面的表达式内部转换为 SVG 文本标记，因此只能支持 HTML 语法的一个子集，即 `<b>`、`<br>`、`<strong>`、`<em>`、`<i>`、`<span>`、`<href>`
    以及 CSS 中的字体样式属性。然而，如果我们想要在润色内容方面有更大的灵活性，并且能够包含图像文件，我们需要使用 `useHTML` 选项来实现完整的 HTML
    工具提示。此选项允许我们执行以下操作：
- en: Use other HTML tags such as `<img>` inside the tool tip
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在工具提示中使用其他 HTML 标签，如 `<img>`
- en: Create a tool tip in real HTML content, so that it is outside the SVG markups
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实际的 HTML 内容中创建工具提示，使其位于 SVG 标记之外
- en: 'Here, we can format an HTML table inside a tool tip. We will use `headerFormat`
    to create a header column for the category and a bottom border to separate the
    header from the data. Then, we will use `pointFormat` to set up an icon image
    along with the series name and data. The image file is based on the `series.index`
    macro, so different series have different image icons. We use the `series.color`
    macro to highlight the series name with the same color in the chart and apply
    the `series.data` macro for the series value:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以在工具提示内格式化一个 HTML 表格。我们将使用 `headerFormat` 创建一个用于类别的表头列，并使用底部边框将表头与数据分开。然后，我们将使用
    `pointFormat` 设置一个图标图像以及系列名称和数据。图像文件基于 `series.index` 宏，因此不同的系列有不同的图像图标。我们使用 `series.color`
    宏以与图表中相同的颜色突出显示系列名称，并使用 `series.data` 宏来应用系列值：
- en: '[PRE36]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: When we hover over a data point, the template variable `point` is substituted
    internally for the hovered point object, and the series is replaced by the `series`
    object containing the data point.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们悬停在数据点上时，模板变量 `point` 会内部替换为悬停的点对象，系列则替换为包含数据点的 `series` 对象。
- en: 'The following is the screenshot of the new tool tip. The icon next to the series
    name indicates market close:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是新工具提示的截图。系列名称旁边的图标表示市场收盘：
- en: '![Formatting tooltips in HTML](img/7451OS_02_36.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![在 HTML 中格式化工具提示](img/7451OS_02_36.jpg)'
- en: Using the callback handler
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用回调处理程序
- en: Alternatively, we can implement the tool tip through the callback handler in
    JavaScript. The tool tip handler is declared through the `formatter` option. The
    major difference between template options and the handler is that we can disable
    the tool tip display for certain points by setting conditions and returning the
    Boolean to `false`, whereas for template options we cannot. In the callback example,
    we use the `this.series` and `this.point` variables for the series name and values
    for the data point that is hovered over.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以通过 JavaScript 中的回调处理程序来实现工具提示。工具提示处理程序通过 `formatter` 选项声明。模板选项和处理程序之间的主要区别在于，我们可以通过设置条件和返回布尔值
    `false` 来禁用某些点的工具提示显示，而对于模板选项，我们则不能这样做。在回调示例中，我们使用 `this.series` 和 `this.point`
    变量来获取系列名称和悬停数据点的值。
- en: 'The following is an example of the handler:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个处理程序的示例：
- en: '[PRE37]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The preceding handler code returns an SVG text tool tip with the series name,
    category, and value, as shown in the following screenshot:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的手动代码返回一个包含系列名称、类别和值的 SVG 文本提示框，如下截图所示：
- en: '![Using the callback handler](img/7451OS_02_37.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![使用回调处理程序](img/7451OS_02_37.jpg)'
- en: Applying a multiple-series tooltip
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用多系列提示框
- en: Another flexible tooltip feature is to allow all the series data to be displayed
    inside the same tooltip. This simplifies user interaction by looking up multiple
    series data in one action. To enable this feature, we need to set the `shared`
    option to `true`.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个灵活的提示框功能是允许所有系列数据在同一提示框内显示。这通过在一次操作中查找多个系列数据来简化用户交互。要启用此功能，我们需要将 `shared`
    选项设置为 `true`。
- en: 'We will continue with the previous example for a multiple series tooltip. The
    following is the new tooltip code:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用之前的示例来展示多系列提示框。以下是新提示框代码：
- en: '[PRE38]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The preceding code snippet will produce the following screenshot:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码片段将生成以下截图：
- en: '![Applying a multiple-series tooltip](img/7451OS_02_38.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![应用多系列提示框](img/7451OS_02_38.jpg)'
- en: 'As previously discussed, we will use the monthly high and monthly low series
    to plot stacked columns that are actually used for plotting data within the same
    category. Therefore, the tooltip for the monthly high series is showing the subtracted
    values that we previously put in. To correct this within the tooltip, we can use
    the handler to apply different properties for the monthly high series, as follows:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将使用月最高值和月最低值系列来绘制堆叠柱状图，这些柱状图实际上是用于在同一类别内绘制数据的。因此，月最高值系列的提示框显示了之前放入的减去值。为了在提示框中纠正这一点，我们可以使用处理程序为月最高值系列应用不同的属性，如下所示：
- en: '[PRE39]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`point.total` is the total of the difference and the monthly low series value.
    The following screenshot shows the new corrected monthly high value:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`point.total` 是差异总和与月最低值系列值的总和。以下截图显示了新的更正后的月最高值：'
- en: '![Applying a multiple-series tooltip](img/7451OS_02_39.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![应用多系列提示框](img/7451OS_02_39.jpg)'
- en: Animating charts
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画图表
- en: 'There are two types of animations in Highcharts: initial and update animations.
    An initial animation is the animation that happens when the series data is ready
    and the chart is displayed. An update animation occurs after the initial animation,
    when the series data or any parts of the chart anatomy have been changed.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts 中有两种类型的动画：初始动画和更新动画。初始动画是在系列数据准备就绪且图表显示时发生的动画。更新动画发生在初始动画之后，当系列数据或图表结构的任何部分发生变化时。
- en: The initial animation configurations can be specified through `plotOptions.series.animation`
    or `plotOptions.{series-type}.animation`, whereas the update animation is configured
    via the `chart.animation` property.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 初始动画配置可以通过 `plotOptions.series.animation` 或 `plotOptions.{series-type}.animation`
    来指定，而更新动画则是通过 `chart.animation` 属性来配置。
- en: 'All Highcharts animations use jQuery implementation. The `animation` property
    can be a Boolean value or a set of options. For Boolean values, it is `true`.
    Highcharts can use jQuery for swing animation. These are the options:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Highcharts 动画都使用 jQuery 实现。`animation` 属性可以是布尔值或一组选项。对于布尔值，它是 `true`。Highcharts
    可以使用 jQuery 进行摆动动画。这些是选项：
- en: '`duration`: This is the time, in milliseconds, to complete the animation.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`duration`：这是完成动画所需的时间，以毫秒为单位。'
- en: '`easing`: This is the type of animation jQuery provides. The variety of animations
    can be extended by importing the jQuery UI plugin. A good reference can be found
    at [http://plugindetector.com/demo/easing-jquery-ui/](http://plugindetector.com/demo/easing-jquery-ui/).'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`easing`：这是 jQuery 提供的动画类型。通过导入 jQuery UI 插件可以扩展动画的多样性。一个良好的参考可以在 [http://plugindetector.com/demo/easing-jquery-ui/](http://plugindetector.com/demo/easing-jquery-ui/)
    找到。'
- en: 'Here, we continue the example from the previous section. We will apply the
    animation settings to `plotOptions.column` and `plotOptions.line`, as follows:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们继续上一节中的示例。我们将应用动画设置到 `plotOptions.column` 和 `plotOptions.line`，如下所示：
- en: '[PRE40]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The animations are tuned into at a much slower pace, so we can see the difference
    between linear and swing animations. The line series appears at a linear speed
    along the x axis, whereas the column series expands upwards at a linear speed
    and then decelerates sharply when approaching the end of the display. The following
    is a screenshot showing an ongoing linear animation:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 动画速度被调整得慢得多，因此我们可以看到线性动画和摆动动画之间的区别。线系列沿着 x 轴以线性速度出现，而柱状系列以线性速度向上扩展，然后在接近显示末尾时急剧减速。以下是一个显示正在进行线性动画的截图：
- en: '![Animating charts](img/7451OS_02_40.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![动画图表](img/7451OS_02_40.jpg)'
- en: Expanding colors with gradients
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用渐变扩展颜色
- en: 'Highcharts not only supports single color values, but also allows complex color
    gradient definitions. In Highcharts, the color gradient is based on the SVG linear
    color gradient standard, which is composed of two sets of information as follows:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts 不仅支持单色值，还允许复杂的颜色渐变定义。在 Highcharts 中，颜色渐变基于 SVG 线性颜色渐变标准，由以下两组信息组成：
- en: '`linearGradient`: This gives a gradient direction for a color spectrum made
    up of two sets of x and y coordinates; ratio values are between 0 and 1, or in
    percentages'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linearGradient`：这为由两组 x 和 y 坐标组成的颜色光谱提供了渐变方向；比例值介于 0 和 1 之间，或者以百分比表示'
- en: '`stops`: This gives a sequence of colors to be filled in the spectrum, and
    their ratio positions within the gradient direction'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stops`：这给出了一组要填充到光谱中的颜色，以及它们在渐变方向中的比例位置'
- en: 'We can use the previous stock market example with only the volume series, and
    redefine `yAxis alternateGridColor` as follows:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用之前的股市示例，只使用成交量序列，并将 `yAxis alternateGridColor` 重新定义为以下内容：
- en: '[PRE41]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '`linearGradient` is an array of coordinate values that are arranged in the
    x1, y1, x2, y2 order. The values can be absolute coordinates, percentage strings,
    or ratio values between 0 and 1\. The difference is that colors defined in coordinate
    values can be affected by the chart size, whereas percentage and ratio values
    avoid that.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`linearGradient` 是一个按 x1, y1, x2, y2 顺序排列的坐标值数组。这些值可以是绝对坐标、百分比字符串或介于 0 和 1
    之间的比例值。区别在于，在坐标值中定义的颜色可能会受到图表大小的影响，而百分比和比例值则避免了这一点。'
- en: Note
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The array syntax for absolute position gradients is deprecated because it doesn't
    work in the same way in both SVG and VML, it also doesn't scale well with varying
    chart sizes.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对位置渐变的数组语法已被弃用，因为它在 SVG 和 VML 中工作方式不同，它也无法很好地适应不同大小的图表。
- en: 'The `stops` property has an array of tuples: the first value is the offset
    ranging from 0 to 1 and the second value is the color definition. The offset and
    color values define where the color is positioned within the spectrum. For example,
    `[0, ''red'' ]` and `[0.2, ''orange'' ]` mean starting with red at the beginning
    and gradually changing the color to orange in a horizontal direction towards the
    position at *x = 80 (0.2 * 400)*, before changing from orange at *x = 80* to yellow
    at *x = 200*, and so on. The following is a screenshot of the multicolor gradient:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`stops` 属性有一个元组数组：第一个值是介于 0 到 1 之间的偏移量，第二个值是颜色定义。偏移量和颜色值定义了颜色在光谱中的位置。例如，`[0,
    ''red'' ]` 和 `[0.2, ''orange'' ]` 表示从红色开始，逐渐在水平方向上改变颜色到橙色，位置在 *x = 80 (0.2 * 400)*，然后在
    *x = 80* 处从橙色变为黄色，以此类推。以下是多色渐变的截图：'
- en: '![Expanding colors with gradients](img/7451OS_02_45.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![使用渐变扩展颜色](img/7451OS_02_45.jpg)'
- en: 'As we can see, the red and orange colors do not appear on the chart because
    the gradient is based on coordinates. Hence, depending on the size of the chart,
    the position of the y axis exceeds the red and orange coordinates in this example.
    Alternatively, we can specify `linearGradient` in terms of percentage, as follows:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，红色和橙色没有出现在图表上，因为渐变是基于坐标的。因此，根据图表的大小，y 轴的位置超过了此示例中的红色和橙色坐标。或者，我们可以按以下方式指定
    `linearGradient` 的百分比：
- en: '[PRE42]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This means `linearGradient` stretches from `20%` of the width of the chart
    to `90%`, so that the color bands are not limited to the size of the chart. The
    following screenshot shows the effect of the new `linearGradient` setting:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 `linearGradient` 从图表宽度的 `20%` 开始延伸到 `90%`，这样颜色带就不会局限于图表的大小。以下截图显示了新的 `linearGradient`
    设置的效果：
- en: '![Expanding colors with gradients](img/7451OS_02_46.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![使用渐变扩展颜色](img/7451OS_02_46.jpg)'
- en: The chart background now has the complete color spectrum. As for specifying
    ratio values between 0 and 1, `linearGradient` must be defined in an object style,
    otherwise the values will be treated as coordinates. Note that the ratio values
    are referred to as the fraction over the plot area only, and not the whole chart.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图表背景现在具有完整的颜色光谱。至于指定 0 到 1 之间的比例值，`linearGradient` 必须以对象样式定义，否则值将被视为坐标。请注意，比例值仅指代绘图区域的比例，而不是整个图表。
- en: '[PRE43]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The preceding line of code is an alternative way to set the horizontal gradient.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行代码是设置水平渐变的另一种方法。
- en: '![Expanding colors with gradients](img/7451OS_02_47.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![使用渐变扩展颜色](img/7451OS_02_47.jpg)'
- en: 'The following line of code adjusts the vertical gradient:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行调整了垂直渐变：
- en: '[PRE44]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'It produces a gradient background in a vertical direction. We also set the
    `''Jan''` and `''Jul''` data points individually as point objects with linear
    shading in a vertical direction:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 它在垂直方向上产生渐变背景。我们还分别设置了`'Jan'`和`'Jul'`数据点作为具有垂直方向线性阴影的点对象：
- en: '![Expanding colors with gradients](img/7451OS_02_50.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![使用渐变扩展颜色](img/7451OS_02_50.jpg)'
- en: 'Moreover, we can manipulate Highcharts standard colors to trigger a color gradient
    in the series plot. This approach is taken from a post in a Highcharts forum experimenting
    with the look of 3D charts. Before plotting a chart, we need to overwrite the
    default series color with a gradient color. The following code snippet replaces
    the first series color with horizontal blue gradient shading. Note that the ratio
    gradient values in this example are referring to the width of the series column:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以操作Highcharts标准颜色，在系列图中触发颜色渐变。这种方法来自一个在Highcharts论坛上实验3D图表外观的帖子。在绘制图表之前，我们需要用渐变色覆盖默认系列颜色。以下代码片段将第一个系列颜色替换为水平蓝色渐变阴影。请注意，此示例中的渐变比例值是指系列柱子的宽度：
- en: '[PRE45]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The following is a screenshot of a column chart with color shading:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图是一个带有颜色阴影的柱状图：
- en: '![Expanding colors with gradients](img/7451OS_02_48.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![使用渐变扩展颜色](img/7451OS_02_48.jpg)'
- en: Zooming data with the drilldown feature
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用钻取功能缩放数据
- en: 'Highcharts provides an easy way to zoom data interactively between two series
    of data. This feature is implemented as a separate module. To use the feature,
    users need to include the following JavaScript:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts提供了一个简单的方法，在两个数据系列之间进行交互式缩放数据。这个功能作为一个独立的模块实现。要使用这个功能，用户需要包含以下JavaScript：
- en: '[PRE46]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'There are two ways to build an interactive drilldown chart: synchronous and
    asynchronous. The former method requires users to supply both top and detail levels
    of data in advance, and arrange both levels of data inside the configuration.
    Both levels of data are specified as standard Highcharts `series` configs, except
    that the zoom-in series is located inside the `drilldown` property. To join both
    levels, the top-level series must provide the option `series.data[x].drilldown`,
    with a matching name to the option `drilldown.series.[y].id` in the detail level.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 建立交互式钻取图有两种方式：同步和异步。前一种方法要求用户提前提供顶层和详细级别的数据，并在配置中安排这两级数据。这两级数据都指定为标准的Highcharts
    `series`配置，除了放大系列位于`drilldown`属性内。为了连接这两级，顶层系列必须提供`series.data[x].drilldown`选项，与详细级别的`drilldown.series.[y].id`选项匹配。
- en: 'Let''s revisit the web browser statistic example and plot the data in a column
    chart. We will go through column series in more detail later in the book. The
    following is the `series` config for the top-level data:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下网络浏览器统计示例，并将数据绘制在柱状图中。我们将在本书的后面部分更详细地介绍柱状系列。以下是最顶层数据的`series`配置：
- en: '[PRE47]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Each column is defined with a `drilldown` option and assigned a specific name.
    Note that it is not mandatory to make all the data points zoomable. The preceding
    example demonstrates the `Safari` column without the `drilldown` property.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 每个柱子都使用`drilldown`选项定义并分配一个特定的名称。请注意，并非所有数据点都必须可缩放。前面的例子演示了没有`drilldown`属性的`Safari`列。
- en: 'To correspond to each of the `drilldown` assignments, an array of series data
    (detail level) is configured to match against the values. The following shows
    the setup of the drilldown data:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对应每个`drilldown`分配，配置了一个系列数据数组（详细级别）以匹配值。以下显示了钻取数据的设置：
- en: '[PRE48]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This produces the following screenshot:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下截图：
- en: '![Zooming data with the drilldown feature](img/7451OS_02_51.jpg)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![使用钻取功能缩放数据](img/7451OS_02_51.jpg)'
- en: 'As we can see, the category labels along the x-axis are decorated in a dark
    color and underlined (the default style). They are clickable, and appear different
    when compared to the non-drilldown column, Safari. When we click on the Firefox
    column, or the label, the column animates and zooms into multiple columns along
    with a back button at the top right corner, as shown in the following screenshot:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，x轴上的类别标签以深色并带有下划线（默认样式）装饰。它们是可点击的，与非钻取列（Safari）相比看起来不同。当我们点击Firefox列或标签时，列会动画放大并缩入多个列，同时在右上角有一个返回按钮，如下面的截图所示：
- en: '![Zooming data with the drilldown feature](img/7451OS_02_52.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![使用钻取功能缩放数据](img/7451OS_02_52.jpg)'
- en: 'Let''s modify the chart with more styles. There are properties within the `drilldown`
    option for smartening the data labels such as `activeAxisLabelStyle` and `activeDataLabelStyle`
    that take a configuration object of CSS styles. In the following code, we polish
    the category labels with features such as hyperlinks, blue color, and underlines.
    Additionally, we change the cursor style into the browser-specific zoom-in icon:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用更多样式修改图表。`drilldown` 选项中包含一些智能化的数据标签属性，如 `activeAxisLabelStyle` 和 `activeDataLabelStyle`，它们接受
    CSS 样式的配置对象。在以下代码中，我们使用超链接、蓝色和下划线等功能来润色类别标签。此外，我们将光标样式更改为浏览器特定的放大图标：
- en: Tip
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: webkit-zoom-in is the browser-specific cursor name for Chrome and Safari; moz-zoom-in/out
    is for Firefox.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`webkit-zoom-in` 是 Chrome 和 Safari 浏览器特定的光标名称；`moz-zoom-in/out` 是 Firefox 的。'
- en: '[PRE49]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The following screenshot shows the new text label style as well as the new
    cursor icon over the category label:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了新的文本标签样式以及新的类别标签上的新光标图标：
- en: '![Zooming data with the drilldown feature](img/7451OS_02_53.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![使用钻取功能缩放数据](img/7451OS_02_53.jpg)'
- en: 'Another great flexibility in Highcharts is that the top and detail level charts
    are not limited to the same type of series. The drilldown series can be any series
    best suited for presenting the detail data. This can be accomplished by assigning
    a different series `type` in the detail level. The following is the further code
    update for the example, in which the Internet Explorer column is zoomed in and
    presented in a donut (or ring) chart. We also set the data labels for the pie
    chart to show both the version name and percentage value:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts 的另一个巨大灵活性在于，顶层和详细级别的图表并不限于同一类型的系列。钻取系列可以是任何最适合展示详细数据的系列。这可以通过在详细级别分配不同的系列
    `type` 来实现。以下是对示例的进一步代码更新，其中将 Internet Explorer 列放大并展示为饼图（或环形图）。我们还为饼图设置了数据标签，以显示版本名称和百分比值：
- en: '[PRE50]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The following is the screenshot of the donut chart:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对环形图的截图：
- en: '![Zooming data with the drilldown feature](img/7451OS_02_54.jpg)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![使用钻取功能缩放数据](img/7451OS_02_54.jpg)'
- en: The preceding donut chart is slightly misleading because the total value of
    all the data labels is 9 percent, but the presentation of the donut chart gives
    the impression of 100 percent in total. In order to clarify that 9 percent is
    the total value, we can take advantage of the Highcharts Renderer engine (we will
    explore this further in [Chapter 5](ch05.html "Chapter 5. Pie Charts"), *Pie Charts*)
    to display an SVG text box in the middle of the ring. However, the `drilldown`
    option only allows us to declare series-specific options. Moreover, we would like
    the 9 percent text box to appear only when clicking on the 'Internet Explorer'
    column.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的环形图略有误导性，因为所有数据标签的总值为 9%，但环形图的展示给人一种总值为 100% 的印象。为了澄清 9% 是总值，我们可以利用 Highcharts
    渲染器引擎（我们将在第 5 章[饼图](ch05.html "第 5 章。饼图")中进一步探讨）在环的中间显示一个 SVG 文本框。然而，`drilldown`
    选项仅允许我们声明系列特定的选项。此外，我们希望当点击 'Internet Explorer' 列时，9% 的文本框才出现。
- en: 'One trick to achieve that is to use Highcharts events, which will be examined
    further in [Chapter 11](ch11.html "Chapter 11. Highcharts Events"), *Highcharts
    Events*. Here, we use the events specific to the `drilldown` action. The basic
    idea is that, when the `drilldown` event is triggered, we check the data point
    being clicked is **Internet Explorer**. If so, then we create a textbox using
    the chart''s renderer engine. In the `drillup` event (triggered when the **Back
    to …** button is clicked), we remove the text box if it exists:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一点的技巧是使用 Highcharts 事件，这将在第 11 章[Highcharts 事件](ch11.html "第 11 章。Highcharts
    事件")中进一步探讨。在这里，我们使用特定于 `drilldown` 操作的事件。基本思路是，当 `drilldown` 事件被触发时，我们检查被点击的数据点是否为
    **Internet Explorer**。如果是，那么我们使用图表的渲染器引擎创建一个文本框。在 `drillup` 事件（当点击 **Back to …**
    按钮时触发）中，如果存在文本框，则将其移除：
- en: '[PRE51]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Here is the refined chart with the textbox centered in the chart:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 这是带有文本框居中的精炼图表：
- en: '![Zooming data with the drilldown feature](img/7451OS_02_55.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![使用钻取功能缩放数据](img/7451OS_02_55.jpg)'
- en: Summary
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, major configuration components were discussed and experimented
    with, and examples shown. By now, we should be comfortable with what we have covered
    already and ready to plot some of the basic graphs with more elaborate styles.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论并实验了主要的配置组件，并展示了示例。到目前为止，我们应该对我们已经覆盖的内容感到舒适，并准备好以更详细的方式绘制一些基本图表。
- en: In the next chapter, we will explore the line, area, and scatter graphs supported
    by Highcharts. We will apply configurations that we have learned in this chapter
    and explore the series-specific style options to plot charts in an artistic style.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Highcharts支持的折线图、面积图和散点图。我们将应用本章学到的配置，并探索特定系列的风格选项，以艺术风格绘制图表。
