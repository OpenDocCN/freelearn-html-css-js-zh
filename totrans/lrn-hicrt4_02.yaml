- en: Chapter 2. Highcharts Configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All Highcharts graphs share the same configuration structure and it is crucial
    for us to become familiar with the core components. However, it is not possible
    to go through all the configurations within the book. In this chapter, we will
    explore the functional properties that are most used and demonstrate them with
    examples. We will learn how Highcharts manages layout, and then explore how to
    configure axes, specify single series and multiple series data, followed by looking
    at formatting and styling tool tips in both JavaScript and HTML. After that, we
    will get to know how to polish our charts with various types of animations and
    apply color gradients. Finally, we will explore the `drilldown` interactive feature.
    In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Highcharts layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Framing the chart with axes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revisiting the series config
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling the tool tips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expanding colors with gradients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing a chart with a `drilldown` series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Highcharts configuration object, the components at the top level represent
    the skeleton structure of a chart. The following is a list of the major components
    that are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`chart`: This has configurations for the top-level chart properties such as
    layouts, dimensions, events, animations, and user interactions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`series`: This is an array of series objects (consisting of data and specific
    options) for single and multiple series, where the series data can be specified
    in a number of ways'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xAxis`/`yAxis/zAxis`: This has configurations for all the axis properties
    such as labels, styles, range, intervals, plotlines, plot bands, and backgrounds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tooltip`: This has the layout and format style configurations for the series
    data tool tips'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drilldown`: This has configurations for drilldown series and the ID field
    associated with the main series'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`/`subtitle`: This has the layout and style configurations for the chart
    title and subtitle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`legend`: This has the layout and format style configurations for the chart
    legend'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plotOptions`: This contains all the plotting options, such as display, animation,
    and user interactions, for common series and specific series types'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exporting`: This has configurations that control the layout and the function
    of print and export features'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For reference information concerning all configurations, go to [http://api.highcharts.com](http://api.highcharts.com).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Highcharts' layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start to learn how Highcharts layout works, it is imperative that
    we understand some basic concepts first. To do that, let''s first recall the chart
    example used in [Chapter 1](ch01.html "Chapter 1. Web Charts"), *Web Charts*,
    and set a couple of borders to be visible. First, set a border around the plot
    area. To do that we can set the options of `plotBorderWidth` and `plotBorderColor`
    in the `chart` section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The second border is set around the Highcharts container. Next, we extend the
    preceding `chart` section with additional settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This sets the container border color with a width of `2` pixels and corner radius
    of `3` pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, there is a border around the container and this is the boundary
    that the Highcharts display cannot exceed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding Highcharts'' layout](img/7451OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, Highcharts displays have three different areas: spacing, labeling,
    and plot area. The plot area is the area inside the inner rectangle that contains
    all the plot graphics. The labeling area is the area where labels such as title,
    subtitle, axis title, legend, and credits go, around the plot area, so that it
    is between the edge of the plot area and the inner edge of the spacing area. The
    spacing area is the area between the container border and the outer edge of the
    labeling area.'
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows three different kinds of areas. A gray dotted
    line is inserted to illustrate the boundary between the spacing and labeling areas.
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding Highcharts'' layout](img/7451OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Each chart label position can be operated in one of the following two layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Automatic layout**: Highcharts automatically adjusts the plot area size based
    on the labels'' positions in the labeling area, so the plot area does not overlap
    with the label element at all. Automatic layout is the simplest way to configure,
    but has less control. This is the default way of positioning the chart elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed layout**: There is no concept of labeling area. The chart label is
    specified in a fixed location so that it has a floating effect on the plot area.
    In other words, the plot area side does not automatically adjust itself to the
    adjacent label position. This gives the user full control of exactly how to display
    the chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The spacing area controls the offset of the Highcharts display on each side.
    As long as the chart margins are not defined, increasing or decreasing the spacing
    area has a global effect on the plot area measurements in both automatic and fixed
    layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Chart margins and spacing settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will see how chart margins and spacing settings have an
    effect on the overall layout. Chart margins can be configured with the properties
    `margin`, `marginTop`, `marginLeft`, `marginRight`, and `marginBottom`, and they
    are not enabled by default. Setting chart margins has a global effect on the plot
    area, so that none of the label positions or chart spacing configurations can
    affect the plot area size. Hence, all the chart elements are in a fixed layout
    mode with respect to the plot area. The `margin` option is an array of four margin
    values covered for each direction, the same as in CSS, starting from north and
    going clockwise. Also, the `margin` option has a lower precedence than any of
    the directional `margin` options, regardless of their order in the `chart` section.
  prefs: []
  type: TYPE_NORMAL
- en: Spacing configurations are enabled by default with a fixed value on each side.
    These can be configured in the `chart` section with the property names `spacing`,
    `spacingTop`, `spacingLeft`, `spacingBottom`, and `spacingRight`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we are going to increase or decrease the `margin` or `spacing`
    property on each side of the chart and observe the effect. The following are the
    chart settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows what the chart looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chart margins and spacing settings](img/7451OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `marginTop` property fixes the plot area's top border `10` pixels away from
    the container border. It also changes the top border into fixed layout for any
    label elements, so the chart title and subtitle float on top of the plot area.
    The `spacingLeft` property increases the spacing area on the left-hand side, so
    it pushes the *y* axis title further in. As it is in automatic layout (without
    declaring `marginLeft`), it also pushes the plot area's west border in. Setting
    `marginRight` to `0` will override all the default spacing on the chart's right-hand
    side and change it to fixed layout mode. Finally, setting `spacingBottom` to `0`
    makes the legend touch the lower bar of the container, so it also stretches the
    plot area downwards. This is because the bottom edge is still in automatic layout
    even though `spacingBottom` is set to `0`.
  prefs: []
  type: TYPE_NORMAL
- en: Chart label properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Chart labels such as `xAxis.title`, `yAxis.title`, `legend`, `title`, `subtitle`,
    and `credits` share common property names, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`align`: This is for the horizontal alignment of the label. Possible keywords
    are `''left''`, `''center''`, and `''right''`. As for the axis title, it is `''low''`,
    `''middle''`, and `''high''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`floating`: This is to give the label position a floating effect on the plot
    area. Setting this to `true` will cause the label position to have no effect on
    the adjacent plot area''s boundary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`margin`: This is the margin setting between the label and the side of the
    plot area adjacent to it. Only certain label types have this setting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`verticalAlign`: This is for the vertical alignment of the label. The keywords
    are `''top''`, `''middle''`, and `''bottom''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x`: This is for horizontal positioning in relation to alignment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y`: This is for vertical positioning in relation to alignment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As for the labels'' `x` and `y` positioning, they are not used for absolute
    positioning within the chart. They are designed for fine adjustment with the label
    alignment. The following diagram shows the coordinate directions, where the center
    represents the label location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chart label properties](img/7451OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can experiment with these properties with a simple example of the `align`
    and `y` position settings, by placing both title and subtitle next to each other.
    The title is shifted to the left with `align` set to `''left''`, whereas the subtitle
    alignment is set to `''right''`. In order to make both titles appear on the same
    line, we change the subtitle''s `y` position to `15`, which is the same as the
    title''s default `y` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot showing both titles aligned on the same line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chart label properties](img/7451OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the following subsections, we will experiment with how changes in alignment
    for each label element affect the layout behavior of the plot area.
  prefs: []
  type: TYPE_NORMAL
- en: Title and subtitle alignments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Title and subtitle have the same layout properties, and the only differences
    are that the default values and title have the `margin` setting. Specifying `verticalAlign`
    for any value changes from the default automatic layout to fixed layout (it internally
    switches `floating` to `true`). However, manually setting the subtitle''s `floating`
    property to `false` does not switch back to automatic layout. The following is
    an example of `title` in automatic layout and `subtitle` in fixed layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `verticalAlign` property for the subtitle is set to `''top''`, which switches
    the layout into fixed layout, and the `y` offset is increased to `60`. The `y`
    offset pushes the subtitle''s position further down. Due to the fact that the
    plot area is not in an automatic layout relationship to the subtitle anymore,
    the top border of the plot area goes above the subtitle. However, the plot area
    is still in automatic layout towards the title, so the title is still above the
    plot area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Title and subtitle alignments](img/7451OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Legend alignment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Legends show different behavior for the `verticalAlign` and `align` properties.
    Apart from setting the alignment to `''center''`, all other settings in `verticalAlign`
    and `align` remain in automatic positioning. The following is an example of a
    legend located on the right-hand side of the chart. The `verticalAlign` property
    is switched to the middle of the chart, where the horizontal `align` is set to
    `''right''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `layout` property is assigned to `''vertical''` so that it causes the items
    inside the legend box to be displayed in a vertical manner. As we can see, the
    plot area is automatically resized for the legend box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Legend alignment](img/7451OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the border decoration around the legend box is disabled in the newer
    version. To display a round border around the legend box, we can add the `borderWidth`
    and `borderRadius` options using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the legend box with a round corner border:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Legend alignment](img/7451OS_02_56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Axis title alignment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Axis titles do not use `verticalAlign`. Instead, they use the `align` setting,
    which is either `''low''`, `''middle''`, or `''high''`. The title''s `margin`
    value is the distance between the axis title and the axis line. The following
    is an example of showing the y-axis title rotated horizontally instead of vertically
    (which it is by default) and displayed on the top of the axis line instead of
    next to it. We also use the `y` property to fine-tune the title location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The following is a screenshot of the upper-left corner of the chart showing
    that the title is aligned horizontally at the top of the *y* axis. Alternatively,
    we can use the `offset` option instead of `margin` to achieve the same result.
  prefs: []
  type: TYPE_NORMAL
- en: '![Axis title alignment](img/7451OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Credits alignment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Credits is a bit different from other label elements. It only supports the
    `align`, `verticalAlign`, `x`, and `y` properties in the `credits.position` property
    (shorthand for `credits: { position: … }`), and is also not affected by any spacing
    setting. Suppose we have a graph without a legend and we have to move the credits
    to the lower-left area of the chart, the following code snippet shows how to do
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'However, the credits text is off the edge of the chart, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Credits alignment](img/7451OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Even if we move the `credits` label to the right with `x` positioning, the
    label is still a bit too close to the *x* axis interval label. We can introduce
    extra `spacingBottom` to put a gap between both labels, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot of the credits with the final adjustments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Credits alignment](img/7451OS_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Experimenting with an automatic layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will examine the automatic layout feature in more detail.
    For the sake of simplifying the example, we will start with only the chart title
    and without any chart spacing settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding example, the chart title should appear as expected between
    the container and the plot area''s borders:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Experimenting with an automatic layout](img/7451OS_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The space between the title and the top border of the container has the default
    setting `spacingTop` for the spacing area (a default value of 10-pixels high).
    The gap between the title and the top border of the plot area is the default setting
    for `title.margin`, which is 15-pixels high.
  prefs: []
  type: TYPE_NORMAL
- en: 'By setting `spacingTop` in the `chart` section to `0`, the chart title moves
    up next to the container top border. Hence the size of the plot area is automatically
    expanded upwards, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Experimenting with an automatic layout](img/7451OS_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we set `title.margin` to `0`; the plot area border moves further up,
    hence the height of the plot area increases further, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Experimenting with an automatic layout](img/7451OS_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you may notice, there is still a gap of a few pixels between the top border
    and the chart title. This is actually due to the default value of the title's
    `y` position setting, which is 15 pixels, large enough for the default title font
    size.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the chart configuration for setting all the spaces between
    the container and the plot area to `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If we set `title.y` to `0`, all the gap between the top edge of the plot area
    and the top container edge closes up. The following is the final screenshot of
    the upper-left corner of the chart, to show the effect. The chart title is not
    visible anymore as it has been shifted above the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Experimenting with an automatic layout](img/7451OS_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Interestingly, if we work backwards to the first example, the default distance
    between the top of the plot area and the top of the container is calculated as:'
  prefs: []
  type: TYPE_NORMAL
- en: '*spacingTop + title.margin + title.y = 10 + 15 + 15 = 40*'
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, changing any of these three variables will automatically adjust the
    plot area from the top container bar. Each of these offset variables actually
    has its own purpose in the automatic layout. Spacing is for the gap between the
    container and the chart content; thus, if we want to display a chart nicely spaced
    with other elements on a web page, spacing elements should be used. Equally, if
    we want to use a specific font size for the label elements, we should consider
    adjusting the `y` offset. Hence, the labels are still maintained at a distance
    and do not interfere with other components in the chart.
  prefs: []
  type: TYPE_NORMAL
- en: Experimenting with a fixed layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the preceding section, we have learned how the plot area dynamically adjusted
    itself. In this section, we will see how we can manually position the chart labels.
    First, we will start with the example code from the beginning of the *Experimenting
    with automatic layout* section and set the chart title''s `verticalAlign` to `''bottom''`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The chart title is moved to the bottom of the chart, next to the lower border
    of the container. Notice that this setting has changed the title into floating
    mode; more importantly, the legend still remains in the default automatic layout
    of the plot area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Experimenting with a fixed layout](img/7451OS_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Be aware that we haven't specified `spacingBottom`, which has a default value
    of 15 pixels in height when applied to the chart. This means that there should
    be a gap between the title and the container bottom border, but none is shown.
    This is because the `title.y` position has a default value of 15 pixels in relation
    to spacing. According to the diagram in the *Chart label properties* section,
    this positive `y` value pushes the title towards the bottom border; this compensates
    for the space created by `spacingBottom`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a bigger change to the `y` offset position this time to show that
    `verticalAlign` is floating on top of the plot area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The negative `y` value moves the title up, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Experimenting with a fixed layout](img/7451OS_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now the title is overlapping the plot area. To demonstrate that the legend
    is still in automatic layout with regard to the plot area, here we change the
    legend''s `y` position and the `margin` settings, which is the distance from the
    axis label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This has pushed up the bottom side of the plot area. However, the chart title
    still remains in fixed layout and its position within the chart hasn''t been changed
    at all after applying the new legend setting, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Experimenting with a fixed layout](img/7451OS_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By now, we should have a better understanding of how to position label elements,
    and their layout policy relating to the plot area.
  prefs: []
  type: TYPE_NORMAL
- en: Framing the chart with axes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to look into the configuration of axes in Highcharts
    in terms of their functional area. We will start off with a plain line graph and
    gradually apply more options to the chart to demonstrate the effects.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the axis data type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two ways to specify data for a chart: categories and series data.
    For displaying intervals with specific names, we should use the `categories` field
    that expects an array of strings. Each entry in the categories array is then associated
    with the series data array. Alternatively, the axis interval values are embedded
    inside the series data array. Then, Highcharts extracts the series data for both
    axes, interprets the data type, and formats and labels the values appropriately.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a straightforward example showing the use of categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code snippet produces a graph that looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing the axis data type](img/7451OS_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first name in the categories field corresponds to the first value, **9:30
    am**, 2606.01, in the series data array, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, we can specify the time values inside the series data and use
    the `type` property of the *x* axis to format the time. The `type` property supports
    `''linear''` (default), `''logarithmic''`, or `''datetime''`. The `''datetime''`
    setting automatically interprets the time in the series data into human-readable
    form. Moreover, we can use the `dateTimeLabelFormats` property to predefine the
    custom format for the time unit. The option can also accept multiple time unit
    formats. This is for when we don''t know in advance how long the time span is
    in the series data, so each unit in the resulting graph can be per hour, per day,
    and so on. The following example shows how the graph is specified with predefined
    hourly and minute formats. The syntax of the format string is based on the PHP
    `strftime` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the *x* axis is in the 12-hour time format, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing the axis data type](img/7451OS_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Instead, we can define the format handler for the `xAxis.labels.formatter`
    property to achieve a similar effect. Highcharts provides a utility routine, `Highcharts.dateFormat`,
    that converts the timestamp in milliseconds to a readable format. In the following
    code snippet, we define the `formatter` function using `dateFormat` and `this.value`.
    The keyword `this` is the axis''s interval object, whereas `this.value` is the
    UTC time value for the instance of the interval:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the time values of our data points are in fixed intervals, they can also
    be arranged in a cut-down version. All we need is to define the starting point
    of time, `pointStart`, and the regular interval between them, `pointInterval`,
    in milliseconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Adjusting intervals and background
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have learned how to use axis categories and series data arrays in the last
    section. In this section, we will see how to format interval lines and the background
    style to produce a graph with more clarity.
  prefs: []
  type: TYPE_NORMAL
- en: We will continue from the previous example. First, let's create some interval
    lines along the *y* axis. In the chart, the interval is automatically set to 20\.
    However, it would be clearer to double the number of interval lines. To do that,
    simply assign the `tickInterval` value to `10`. Then, we use `minorTickInterval`
    to put another line in between the intervals to indicate a semi-interval. In order
    to distinguish between interval and semi-interval lines, we set the semi-interval
    lines, `minorGridLineDashStyle`, to a dashed and dotted style.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are nearly a dozen line style settings available in Highcharts, from `'Solid'`
    to `'LongDashDotDot'`. Readers can refer to the online manual for possible values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the first step to create the new settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The interval lines should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting intervals and background](img/7451OS_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To make the graph even more presentable, we add a striping effect with shading
    using `alternateGridColor`. Then, we change the interval line color, `gridLineColor`,
    to a similar range with the stripes. The following code snippet is added into
    the `yAxis` configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We will discuss the color gradient later in this chapter. The following is
    the graph with the new shading background:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting intervals and background](img/7451OS_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to apply a more professional look to the *y* axis line. We
    are going to draw a line on the *y* axis with the `lineWidth` property, and add
    some measurement marks along the interval lines with the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `tickWidth` and `tickLength` properties add the effect of little marks
    at the start of each interval line. We apply the same color on both the interval
    mark and the axis line. Then we add the ticks `minorTickLength` and `minorTickWidth`
    into the semi-interval lines in a smaller size. This gives a nice measurement
    mark effect along the axis, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting intervals and background](img/7451OS_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we apply a similar polish to the `xAxis` configuration, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We set the *x* axis interval lines to the hourly format and switch the line
    style to a dotted line. Then, we apply the same color, thickness, and interval
    ticks as on the *y* axis. The following is the resulting screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting intervals and background](img/7451OS_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, there are some defects along the *x* axis line. To begin with, the
    meeting point between the *x* axis and *y* axis lines does not align properly.
    Secondly, the interval labels at the *x* axis are touching the interval ticks.
    Finally, part of the first data point is covered by the y-axis line. The following
    is an enlarged screenshot showing the issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting intervals and background](img/7451OS_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two ways to resolve the axis line alignment problem, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Shift the plot area 1 pixel away from the x axis. This can be achieved by setting
    the `offset` property of `xAxis` to `1`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase the x-axis line width to 3 pixels, which is the same width as the y-axis
    tick interval.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As for the x-axis label, we can simply solve the problem by introducing the
    `y` offset value into the `labels` setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to avoid the first data point touching the y-axis line, we can impose
    `minPadding` on the *x* axis. What this does is to add padding space at the minimum
    value of the axis, the first point. The `minPadding` value is based on the ratio
    of the graph width. In this case, setting the property to `0.02` is equivalent
    to shifting along the *x* axis 5 pixels to the right (250 px * 0.02). The following
    are the additional settings to improve the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows that the issues have been addressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting intervals and background](img/7451OS_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, Highcharts has a comprehensive set of configurable variables
    with great flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: Using plot lines and plot bands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to see how we can use Highcharts to place lines
    or bands along the axis. We will continue with the example from the previous section.
    Let''s draw a couple of lines to indicate the day''s highest and lowest index
    points on the y axis. The `plotLines` field accepts an array of object configurations
    for each plot line. There are no width and color default values for `plotLines`,
    so we need to specify them explicitly in order to see the line. The following
    is the code snippet for the plot lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows what it should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using plot lines and plot bands](img/7451OS_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can improve the look of the chart slightly. First, the text label for the
    top plot line should not be next to the highest point. Second, the label for the
    bottom line should be remotely covered by the series and interval lines, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using plot lines and plot bands](img/7451OS_02_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To resolve these issues, we can assign the plot line''s `zIndex` to `1`, which
    brings the text label above the interval lines. We also set the `x` position of
    the label to shift the text next to the point. The following are the new changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The following graph shows the label has been moved away from the plot line
    and over the interval line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using plot lines and plot bands](img/7451OS_02_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we are going to change the preceding example with a plot band area that
    shows the index change between the market''s opening and closing values. The plot
    band configuration is very similar to plot lines, except that it uses the `to`
    and `from` properties, and the `color` property accepts gradient settings or color
    code. We create a plot band with a triangle text symbol and values to signify
    a positive close. Instead of using the `x` and `y` properties to fine-tune label
    position, we use the `align` option to adjust the text to the center of the plot
    area (replace the plotLines setting from the above example):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The triangle is an alt-code character; hold down the left *Alt* key and enter
    `30` in the number keypad. See [http://www.alt-codes.net](http://www.alt-codes.net)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'This produces a chart with a green plot band highlighting a positive close
    in the market, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using plot lines and plot bands](img/7451OS_02_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Extending to multiple axes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Previously, we ran through most of the axis configurations. Here, we explore
    how we can use multiple axes, which are just an array of objects containing axis
    configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing from the previous stock market example, suppose we now want to include
    another market index, Dow Jones, along with Nasdaq. However, both indices are
    different in nature, so their value ranges are vastly different. First, let''s
    examine the outcome by displaying both indices with the common *y* axis. We change
    the title, remove the fixed interval setting on the y axis, and include data for
    another series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the chart showing both market indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extending to multiple axes](img/7451OS_02_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As expected, the index changes that occur during the day have been normalized
    by the vast differences in value. Both lines look roughly straight, which falsely
    implies that the indices have hardly changed.
  prefs: []
  type: TYPE_NORMAL
- en: Let us now explore putting both indices onto separate *y* axes. We should remove
    any background decoration on the *y* axis, because we now have a different range
    of data shared on the same background.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the new setup for `yAxis`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Now `yAxis` is an array of axis configurations. The first entry in the array
    is for Nasdaq and the second is for Dow Jones. This time, we display the axis
    title to distinguish between them. The `opposite` property is to put the Dow Jones
    y axis onto the other side of the graph for clarity. Otherwise, both *y* axes
    appear on the left-hand side.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to align indices from the y-axis array to the series data
    array, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We can clearly see the movement of the indices in the new graph, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extending to multiple axes](img/7451OS_02_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Moreover, we can improve the final view by color-matching the series to the
    axis lines. The `Highcharts.getOptions().colors` property contains a list of default
    colors for the series, so we use the first two entries for our indices. Another
    improvement is to set `maxPadding` for the *x* axis, because the new y-axis line
    covers parts of the data points at the high end of the *x* axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the improved look of the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extending to multiple axes](img/7451OS_02_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can extend the preceding example and have more than a couple of axes, simply
    by adding entries into the `yAxis` and `series` arrays, and mapping both together.
    The following screenshot shows a 4-axis line graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extending to multiple axes](img/7451OS_02_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Revisiting the series config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, we should have an idea of what the `series` property does. In this section,
    we are going to examine it in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: The `series` property is an array of series configuration objects that contain
    data- and series-specific options. It allows us to specify single-series data
    and multiple-series data. The purpose of series objects is to inform Highcharts
    of the format of the data and how the data is presented in the chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'All data values in the chart are specified through the `data` field. The `data`
    field is highly flexible and can take an array in a number of forms, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Numerical values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An array with *x* and *y* values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A point object with properties describing the data point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first two options have already been examined in the *Accessing the axis
    data type* section. In this section, we will explore the third option. Let''s
    use the single-series Nasdaq example and we will specify the series data through
    a mixture of numerical values and objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The first and last data points are objects that have *y* axis values and image
    files to indicate the opening and closing of the market. The highest data point
    is configured with a different color and data label. The size of the data point
    is also set slightly larger than the default. The rest of the data arrays are
    just numerical values, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Revisiting the series config](img/7451OS_02_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exploring PlotOptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `plotOptions` object is a wrapper object for config objects for each series
    type supported in Highcharts. These configurations have properties such as `plotOptions.line.lineWidth`,
    common to other series types, as well as other configurations such as `plotOptions.pie.center`
    that is only specific to the pie series type. Among the specific series, there
    is `plotOptions.series`, which is used for common plotting options shared by the
    whole series.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding `plotOptions` object can form a chain of precedence between `plotOptions.series`,
    `plotOptions.{series-type}`, and the series configuration. For example, `series[x].shadow`
    (where `series[x].type` is `'pie'`) has a higher precedence than `plotOptions.pie.shadow`,
    which in turn has a higher precedence than `plotOptions.series.shadow`.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this is that the chart is composed of multiple different series
    types. For example, in a chart with multiple series of columns and a single line
    series, the common properties between column and line can be defined in `plotOptions.series.*`,
    whereas `plotOptions.column` and `plotOptions.line` hold their own specific property
    values. Moreover, properties in `plotOptions.{series-type}.*` can be further overridden
    by the same series type specified in the series array.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a reference for the configurations in precedence. The higher-level
    ones have lower precedence, which means that configurations defined in the lower
    level of the chain can override properties defined in the higher level of the
    chain. For the series array, the preference is valid if `series[x].type` or the
    default series type value is the same as the series type in `plotOptions`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The `plotOptions` object contains properties controlling how a series type
    is presented in the chart—for example inverted charts, series colors, stacked
    column charts, user interactions with the series, and so on. All these options
    will be covered in detail when we study each type of chart. Meanwhile, we will
    explore the concept of `plotOptions` with a monthly Nasdaq graph. The graph has
    five different series data types: open, close, high, low, and volume. Normally,
    this data is used for plotting daily stock charts (OHLCV). We compact them into
    a single chart for the purpose of demonstrating `plotOptions`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring PlotOptions](img/7451OS_02_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the chart configuration code for generating the preceding
    graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Although the graph looks slightly complicated, we will go through the code
    step-by-step. First, there are two entries in the `yAxis` array: the first is
    for the Nasdaq index; the second y axis, displayed on the right-hand side (`opposite:
    true`), is for the volume trade. In the series array, the first and second series
    are specified as column series types (`type: ''column''`), which override the
    default series type `''line''`. Then the `stacking` option is defined as `''normal''`
    in `plotOptions.column`, which stacks the monthly high on top of the monthly low
    column (deep blue and black columns). Strictly speaking, the stacked column chart
    is used for displaying the ratio of data belonging to the same category. For the
    sake of demonstrating `plotOptions`, we used the stacked column chart to show
    the upper and lower ends of monthly trade. To do that, we take the difference
    between monthly high and monthly low and substitute the differences back into
    the monthly high series. So in the code, we can see that the data values in the
    monthly high series are much smaller than the monthly low.'
  prefs: []
  type: TYPE_NORMAL
- en: The third and fourth series are the market open and market close index. Both
    take the default line series type and inherit options defined from `plotOptions.line`.
    The `zIndex` option is assigned to `2` to overlay both line series on top of the
    fifth volume series; otherwise, both lines are covered by the volume columns.
    The `marker` object configurations are to reduce the default data point size,
    as the whole graph is already compacted with columns and lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last column series is the volume trade, and the `stacking` option in the
    series is manually set to `null`, which overrides the inherited option from `plotOptions.column`.
    This resets the series back to the non-stacking option, displaying as a separate
    column. Finally, the `yAxis` index option is set to align with the y axis of the
    volume series (`yAxis: 1`).'
  prefs: []
  type: TYPE_NORMAL
- en: Styling tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tool tips in Highcharts are enabled by the `tooltip.enabled` Boolean option,
    which is `true` by default. In Highcharts 4, the default shape of the tooltip
    box has been changed to callout. The following shows the new style of tooltip:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling tooltips](img/7451OS_02_57.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For the older style of tooltip shape, we can set the `tooltip.shape` option
    to `square`, which we will use in the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tooltip''s content formats are flexible, which can be defined via a callback
    handler or in the HTML style. We will continue from the example in the previous
    section. As the chart is packed with multiple lines and columns, we can first
    enable the crosshair tool tip to help us align the data points onto the axes.
    The `crosshairs` configuration can take either a Boolean value to activate the
    feature or an object style for the crosshair line style. The following is the
    code snippet to set up crosshairs with an array of x- and y-axis configurations
    for the gray color and dash line styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Again, the `dashStyle` option uses the same common line style values in Highcharts.
    See the crosshairs reference manual for all the possible values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the view when hovering over a data point in
    the market close series. We see a tool tip box appear next to the pointer and
    gray crosshairs for both axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling tooltips](img/7451OS_02_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Formatting tooltips in HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Highcharts provides template options such as `headerFormat`, `pointFormat`,
    and `footerFormat` to construct the tool tip by specific template variables (or
    macros). These specific variables are series and point, and we can use their properties
    such as `point.x`, `point.y`, `series.name`, and `series.color` within the template.
    For instance, the default tool tip setting uses `pointFormat`, which has the default
    value of the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Highcharts internally translates the preceding expression into SVG text markups,
    so only a subset of HTML syntax can be supported, which is `<b>`, `<br>`, `<strong>`,
    `<em>`, `<i>`, `<span>`, `<href>`, and font style attributes in CSS. However,
    if we want to have more flexibility in polishing the content, and the ability
    to include image files, we need to use the `useHTML` option for full HTML tool
    tips. This option allows us to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Use other HTML tags such as `<img>` inside the tool tip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a tool tip in real HTML content, so that it is outside the SVG markups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, we can format an HTML table inside a tool tip. We will use `headerFormat`
    to create a header column for the category and a bottom border to separate the
    header from the data. Then, we will use `pointFormat` to set up an icon image
    along with the series name and data. The image file is based on the `series.index`
    macro, so different series have different image icons. We use the `series.color`
    macro to highlight the series name with the same color in the chart and apply
    the `series.data` macro for the series value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: When we hover over a data point, the template variable `point` is substituted
    internally for the hovered point object, and the series is replaced by the `series`
    object containing the data point.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the screenshot of the new tool tip. The icon next to the series
    name indicates market close:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Formatting tooltips in HTML](img/7451OS_02_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the callback handler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Alternatively, we can implement the tool tip through the callback handler in
    JavaScript. The tool tip handler is declared through the `formatter` option. The
    major difference between template options and the handler is that we can disable
    the tool tip display for certain points by setting conditions and returning the
    Boolean to `false`, whereas for template options we cannot. In the callback example,
    we use the `this.series` and `this.point` variables for the series name and values
    for the data point that is hovered over.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding handler code returns an SVG text tool tip with the series name,
    category, and value, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the callback handler](img/7451OS_02_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Applying a multiple-series tooltip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another flexible tooltip feature is to allow all the series data to be displayed
    inside the same tooltip. This simplifies user interaction by looking up multiple
    series data in one action. To enable this feature, we need to set the `shared`
    option to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will continue with the previous example for a multiple series tooltip. The
    following is the new tooltip code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code snippet will produce the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying a multiple-series tooltip](img/7451OS_02_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As previously discussed, we will use the monthly high and monthly low series
    to plot stacked columns that are actually used for plotting data within the same
    category. Therefore, the tooltip for the monthly high series is showing the subtracted
    values that we previously put in. To correct this within the tooltip, we can use
    the handler to apply different properties for the monthly high series, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '`point.total` is the total of the difference and the monthly low series value.
    The following screenshot shows the new corrected monthly high value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying a multiple-series tooltip](img/7451OS_02_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Animating charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two types of animations in Highcharts: initial and update animations.
    An initial animation is the animation that happens when the series data is ready
    and the chart is displayed. An update animation occurs after the initial animation,
    when the series data or any parts of the chart anatomy have been changed.'
  prefs: []
  type: TYPE_NORMAL
- en: The initial animation configurations can be specified through `plotOptions.series.animation`
    or `plotOptions.{series-type}.animation`, whereas the update animation is configured
    via the `chart.animation` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'All Highcharts animations use jQuery implementation. The `animation` property
    can be a Boolean value or a set of options. For Boolean values, it is `true`.
    Highcharts can use jQuery for swing animation. These are the options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`duration`: This is the time, in milliseconds, to complete the animation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`easing`: This is the type of animation jQuery provides. The variety of animations
    can be extended by importing the jQuery UI plugin. A good reference can be found
    at [http://plugindetector.com/demo/easing-jquery-ui/](http://plugindetector.com/demo/easing-jquery-ui/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, we continue the example from the previous section. We will apply the
    animation settings to `plotOptions.column` and `plotOptions.line`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The animations are tuned into at a much slower pace, so we can see the difference
    between linear and swing animations. The line series appears at a linear speed
    along the x axis, whereas the column series expands upwards at a linear speed
    and then decelerates sharply when approaching the end of the display. The following
    is a screenshot showing an ongoing linear animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating charts](img/7451OS_02_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Expanding colors with gradients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Highcharts not only supports single color values, but also allows complex color
    gradient definitions. In Highcharts, the color gradient is based on the SVG linear
    color gradient standard, which is composed of two sets of information as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`linearGradient`: This gives a gradient direction for a color spectrum made
    up of two sets of x and y coordinates; ratio values are between 0 and 1, or in
    percentages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stops`: This gives a sequence of colors to be filled in the spectrum, and
    their ratio positions within the gradient direction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can use the previous stock market example with only the volume series, and
    redefine `yAxis alternateGridColor` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '`linearGradient` is an array of coordinate values that are arranged in the
    x1, y1, x2, y2 order. The values can be absolute coordinates, percentage strings,
    or ratio values between 0 and 1\. The difference is that colors defined in coordinate
    values can be affected by the chart size, whereas percentage and ratio values
    avoid that.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The array syntax for absolute position gradients is deprecated because it doesn't
    work in the same way in both SVG and VML, it also doesn't scale well with varying
    chart sizes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `stops` property has an array of tuples: the first value is the offset
    ranging from 0 to 1 and the second value is the color definition. The offset and
    color values define where the color is positioned within the spectrum. For example,
    `[0, ''red'' ]` and `[0.2, ''orange'' ]` mean starting with red at the beginning
    and gradually changing the color to orange in a horizontal direction towards the
    position at *x = 80 (0.2 * 400)*, before changing from orange at *x = 80* to yellow
    at *x = 200*, and so on. The following is a screenshot of the multicolor gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Expanding colors with gradients](img/7451OS_02_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, the red and orange colors do not appear on the chart because
    the gradient is based on coordinates. Hence, depending on the size of the chart,
    the position of the y axis exceeds the red and orange coordinates in this example.
    Alternatively, we can specify `linearGradient` in terms of percentage, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'This means `linearGradient` stretches from `20%` of the width of the chart
    to `90%`, so that the color bands are not limited to the size of the chart. The
    following screenshot shows the effect of the new `linearGradient` setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Expanding colors with gradients](img/7451OS_02_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The chart background now has the complete color spectrum. As for specifying
    ratio values between 0 and 1, `linearGradient` must be defined in an object style,
    otherwise the values will be treated as coordinates. Note that the ratio values
    are referred to as the fraction over the plot area only, and not the whole chart.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The preceding line of code is an alternative way to set the horizontal gradient.
  prefs: []
  type: TYPE_NORMAL
- en: '![Expanding colors with gradients](img/7451OS_02_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following line of code adjusts the vertical gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'It produces a gradient background in a vertical direction. We also set the
    `''Jan''` and `''Jul''` data points individually as point objects with linear
    shading in a vertical direction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Expanding colors with gradients](img/7451OS_02_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Moreover, we can manipulate Highcharts standard colors to trigger a color gradient
    in the series plot. This approach is taken from a post in a Highcharts forum experimenting
    with the look of 3D charts. Before plotting a chart, we need to overwrite the
    default series color with a gradient color. The following code snippet replaces
    the first series color with horizontal blue gradient shading. Note that the ratio
    gradient values in this example are referring to the width of the series column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot of a column chart with color shading:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Expanding colors with gradients](img/7451OS_02_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Zooming data with the drilldown feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Highcharts provides an easy way to zoom data interactively between two series
    of data. This feature is implemented as a separate module. To use the feature,
    users need to include the following JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two ways to build an interactive drilldown chart: synchronous and
    asynchronous. The former method requires users to supply both top and detail levels
    of data in advance, and arrange both levels of data inside the configuration.
    Both levels of data are specified as standard Highcharts `series` configs, except
    that the zoom-in series is located inside the `drilldown` property. To join both
    levels, the top-level series must provide the option `series.data[x].drilldown`,
    with a matching name to the option `drilldown.series.[y].id` in the detail level.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s revisit the web browser statistic example and plot the data in a column
    chart. We will go through column series in more detail later in the book. The
    following is the `series` config for the top-level data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Each column is defined with a `drilldown` option and assigned a specific name.
    Note that it is not mandatory to make all the data points zoomable. The preceding
    example demonstrates the `Safari` column without the `drilldown` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'To correspond to each of the `drilldown` assignments, an array of series data
    (detail level) is configured to match against the values. The following shows
    the setup of the drilldown data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zooming data with the drilldown feature](img/7451OS_02_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, the category labels along the x-axis are decorated in a dark
    color and underlined (the default style). They are clickable, and appear different
    when compared to the non-drilldown column, Safari. When we click on the Firefox
    column, or the label, the column animates and zooms into multiple columns along
    with a back button at the top right corner, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zooming data with the drilldown feature](img/7451OS_02_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s modify the chart with more styles. There are properties within the `drilldown`
    option for smartening the data labels such as `activeAxisLabelStyle` and `activeDataLabelStyle`
    that take a configuration object of CSS styles. In the following code, we polish
    the category labels with features such as hyperlinks, blue color, and underlines.
    Additionally, we change the cursor style into the browser-specific zoom-in icon:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: webkit-zoom-in is the browser-specific cursor name for Chrome and Safari; moz-zoom-in/out
    is for Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the new text label style as well as the new
    cursor icon over the category label:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zooming data with the drilldown feature](img/7451OS_02_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another great flexibility in Highcharts is that the top and detail level charts
    are not limited to the same type of series. The drilldown series can be any series
    best suited for presenting the detail data. This can be accomplished by assigning
    a different series `type` in the detail level. The following is the further code
    update for the example, in which the Internet Explorer column is zoomed in and
    presented in a donut (or ring) chart. We also set the data labels for the pie
    chart to show both the version name and percentage value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the screenshot of the donut chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zooming data with the drilldown feature](img/7451OS_02_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding donut chart is slightly misleading because the total value of
    all the data labels is 9 percent, but the presentation of the donut chart gives
    the impression of 100 percent in total. In order to clarify that 9 percent is
    the total value, we can take advantage of the Highcharts Renderer engine (we will
    explore this further in [Chapter 5](ch05.html "Chapter 5. Pie Charts"), *Pie Charts*)
    to display an SVG text box in the middle of the ring. However, the `drilldown`
    option only allows us to declare series-specific options. Moreover, we would like
    the 9 percent text box to appear only when clicking on the 'Internet Explorer'
    column.
  prefs: []
  type: TYPE_NORMAL
- en: 'One trick to achieve that is to use Highcharts events, which will be examined
    further in [Chapter 11](ch11.html "Chapter 11. Highcharts Events"), *Highcharts
    Events*. Here, we use the events specific to the `drilldown` action. The basic
    idea is that, when the `drilldown` event is triggered, we check the data point
    being clicked is **Internet Explorer**. If so, then we create a textbox using
    the chart''s renderer engine. In the `drillup` event (triggered when the **Back
    to …** button is clicked), we remove the text box if it exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the refined chart with the textbox centered in the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zooming data with the drilldown feature](img/7451OS_02_55.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, major configuration components were discussed and experimented
    with, and examples shown. By now, we should be comfortable with what we have covered
    already and ready to plot some of the basic graphs with more elaborate styles.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the line, area, and scatter graphs supported
    by Highcharts. We will apply configurations that we have learned in this chapter
    and explore the series-specific style options to plot charts in an artistic style.
  prefs: []
  type: TYPE_NORMAL
