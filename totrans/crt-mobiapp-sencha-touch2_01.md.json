["```js\nfilterFn: function(item) {\n\n}\n```", "```js\nreturn !item.data.isComplete;\n```", "```js\nreturn item.data.isComplete;\n```", "```js\n<!DOCTYPE html>\n\n<!-- Auto Generated with Sencha Architect -->\n<!-- Modifications to this file will be overwritten. -->\n<html>\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <title>Chapter1</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://extjs.cachefly.net/touch/sencha-touch-2.1.0/resources/css/sencha-touch.css\"/>\n    <script type=\"text/javascript\" src=\"img/sencha-touch-all-debug.js\"></script>\n    <script type=\"text/javascript\" src=\"img/app.js\"></script>\n    <script type=\"text/javascript\">\n        if (!Ext.browser.is.WebKit) {\n            alert(\"The current browser is unsupported.\\n\\nSupported browsers:\\n\" +\n                \"Google Chrome\\n\" +\n                \"Apple Safari\\n\" +\n                \"Mobile Safari (iOS)\\n\" +\n                \"Android Browser\\n\" +\n                \"BlackBerry Browser\"\n            );\n        }\n    </script>\n</head>\n<body></body>\n</html>\n```", "```js\n/*\n * File: app.js\n *\n * This file was generated by Sencha Architect version 2.0.0.\n * http://www.sencha.com/products/designer/\n *\n * This file requires use of the Sencha Touch 2.0.x library, under independent license.\n * License of Sencha Architect does not include license for Sencha Touch 2.1.x. For more\n * details see http://www.sencha.com/license or contact license@sencha.com.\n *\n * This file will be auto-generated each and every time you save your project.\n *\n * Do NOT hand edit this file.\n */\n\nExt.Loader.setConfig({\n    enabled: true\n});\n\nExt.application({\n    models: [\n        'Task'\n    ],\n    stores: [\n        'TaskStore', 'CompletedStore'\n    ],\n    name: 'MyApp'\n});\n```", "```js\nExt.define('MyApp.store.TaskStore', {\n    extend: 'Ext.data.Store',\n    requires: [\n        'MyApp.model.Task'\n    ],\n\n    config: {\n        autoLoad: true,\n        model: 'MyApp.model.Task',\n        storeId: 'TaskStore',\n        proxy: {\n            type: 'localstorage',\n            id: 'Tasks'\n        }\n    },\n        filters: {\n            filterFn: function(item) {\n                return !item.data.isComplete;\n            }\n        }\n});\n```", "```js\nExt.define('MyApp.model.Task', {\n    extend: 'Ext.data.Model',\n    config: {\n        fields: [\n            {\n                name: 'id',\n                type: 'int'\n            },\n            {\n                name: 'name',\n                type: 'string'\n            },\n            {\n                name: 'description',\n                type: 'string'\n            },\n            {\n                name: 'created',\n                type: 'date'\n            },\n            {\n                name: 'completed',\n                type: 'date'\n            },\n            {\n                name: 'isCompleted',\n                type: 'boolean'\n            }\n\n        ]\n    }\n});\n```", "```js\nExt.Loader.setConfig({\n    enabled: true\n});\n\nExt.application({\n    models: [\n        'Task'\n    ],\n    stores: [\n        'TaskStore'\n    ],\n    views: [\n        'MainView'\n    ],\n    name: 'MyApp',\n    launch: function() {\n        Ext.create('MyApp.view.MainView', {fullscreen: true});\n    }\n});\n```", "```js\nExt.define('MyApp.view.MainView', {\n    extend: 'Ext.tab.Panel',\n\n   config: {\n        items: [\n            {\n                xtype: 'container',\n                title: 'Tab 1'\n            },\n            {\n                xtype: 'container',\n                title: 'Tab 2'\n            }\n        ]\n    }\n});\n```", "```js\nExt.define('MyApp.view.MainView', {\n  extend: 'Ext.tab.Panel',\n  config: {\n  items: [\n    {\n        xtype: 'container',\n        title: 'Current',\n        iconCls: 'organize'\n    },\n    {\n        xtype: 'container',\n        title: 'Completed',\n        iconCls: 'delete'\n    }\n  ],\n  tabBar: {\n    docked: 'bottom'\n  }\n  }\n}); \n```", "```js\n<div>{name}</div>\n```", "```js\n<div>List Item {string}</div>\n```", "```js\n<div class=\"priority_{priority}\">{name}</div> \n```", "```js\n<div class=\"taskName\">{name}</div> \n<div class=\"taskDescription\">{description}</div> \n<div class=\"taskCreated\">Created: {created}</div>\n```", "```js\n<div class=\"taskName\">{name}</div> \n<div class=\"taskDescription\">{description}</div> \n<div class=\"taskCreated\">Created: {created}</div>\n<div class=\"taskCompleted\">Completed: {completed}</div>\n```", "```js\nlaunch: function() {\n\n}\n```", "```js\nvar TaskStore = Ext.data.StoreManager.lookup('TaskStore');\nvar CompletedStore = Ext.data.StoreManager.lookup('CompletedStore');\nif(CompletedStore.getCount()+TaskStore.getCount() === 0) {\n    console.log('we have no records');\n    TaskStore.add({name: 'Here Is A Task', description: 'You can mark the task complete by clicking the Completed button below.', priority: 1, created: Date.now(), completed: '', isComplete: false});\n    TaskStore.add({name: 'How To Edit A Task', description: 'You can edit the task by clicking the Edit button below.', priority: 2, created: Date.now(), completed: '', isCompleted: false});\n    TaskStore.add({name: 'How To Add A Task', description: 'Add a task by clicking the Add button in the upper right corner.', priority: 3, created: Date.now(), completed: '', isComplete: false});\n    TaskStore.sync();\n} else {\n    console.log('we have records');\n}\n```", "```js\nonCurrentListSelect: function(dataview, record, options) {\n\n}\n```", "```js\n  var currentTab = this.getActiveItem();\n\n  var currentDetails = currentTab.down('panel');\n\n  currentDetails.setRecord(record);\n  currentTab.setActiveItem(currentDetails);\n```", "```js\nvar completedTab = this.getActiveItem();\n\nvar completedDetails = completedTab.down('panel');\n\ncompletedDetails.setRecord(record);\ncompletedTab.setActiveItem(completedDetails);\n```", "```js\nonBackButtonTap: function(button, e, options) {\n  var currentTab = this.getActiveItem();\n  currentTab.setActiveItem(0);\n  button.hide();\n}\n```", "```js\nvar backButton = Ext.getCmp('backButton');\nbackButton.show();\n```", "```js\n[{text: 'High',  value: 1},\n{text: 'Medium', value: 2},\n{text: 'Low',  value: 3}]\n```", "```js\nvar currentTab = this.getActiveItem(); \ncurrentTab.setActiveItem(0);\n```", "```js\nvar currentTab = this.getActiveItem();\nvar formPanel = currentTab.getActiveItem();\n\nvar values = formPanel.getValues();\n\nvar store = Ext.data.StoreManager.lookup('TaskStore');\n\nif(values.id === null) {\n    var record = Ext.ModelMgr.create(values, 'MyApp.model.Task');\n    record.set('created', new Date());\n    store.add(record);\n} else {\n    var record = store.getById(values.id);\n    record.set('name', values.name);\n    record.set('description', values.description);\n    record.set('priority', values.priority);\n}\n\nstore.sync();\nformPanel.reset();\ncurrentTab.setActiveItem(0);\n```", "```js\nvar currentTab = this.getActiveItem();\nvar DetailsPanel = currentTab.getActiveItem();\n\ncurrentTab.setActiveItem(2);\nvar formPanel = currentTab.getActiveItem();\nformPanel.setRecord(DetailsPanel.getRecord());\n\nthis.setActiveItem(currentTab);\n\nvar backButton = Ext.getCmp('backButton');\nbackButton.hide();\n```", "```js\nvar currentTab = this.getActiveItem();\nvar detailsPanel = currentTab.getActiveItem();\n\nvar record = detailsPanel.getRecord();\n\nrecord.set('completed', new Date());\nrecord.set('isComplete', true);\n\nvar store = Ext.data.StoreManager.lookup('TaskStore');\nstore.sync();\n\nthis.setActiveItem(1);\nvar completedList = this.getActiveItem();\nvar completedStore = completedList.getActiveItem().getStore();\ncompletedStore.add(record);\ncompletedList.getActiveItem().refresh();\n\ncurrentTab.setActiveItem(0);\n\nvar backButton = Ext.getCmp('backButton');\nbackButton.hide();\n```"]