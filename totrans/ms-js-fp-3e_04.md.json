["```js\nconst x = 1 + 2 * 3;\n```", "```js\nconst x = 1 + 6;\n```", "```js\nconst x = 7;\n```", "```js\n// isOldEnough.ts\nconst limitYear = 2004; // only good for 2022!\nconst isOldEnough = (birthYear: number) =>\n  birthYear <= limitYear;\nconsole.log(isOldEnough(1960)); // true\nconsole.log(isOldEnough(2010)); // false\n```", "```js\n// area.ts\nconst PI = 3.14159265358979;\nconst circleArea = (r: number) => PI * r ** 2;\n```", "```js\n// roundFix.ts\nconst roundFix = (function () {\n  let accum = 0;\n  return (n: number): number => {\n    // reals get rounded up or down\n    // depending on the sign of accum\n    const nRounded =\n      accum > 0 ? Math.ceil(n) : Math.floor(n);\n    console.log(\n      \"accum\",\n      accum.toFixed(5),\n      \" result\",\n      nRounded\n    );\n    accum += n - nRounded;\n    return nRounded;\n  };\n})();\n```", "```js\nroundFix(3.14159); // accum  0.00000  result 3\nroundFix(2.71828); // accum  0.14159  result 3\nroundFix(2.71828); // accum -0.14013  result 2\nroundFix(3.14159); // accum  0.57815  result 4\nroundFix(2.71828); // accum -0.28026  result 2\nroundFix(2.71828); // accum  0.43802  result 3\nroundFix(2.71828); // accum  0.15630  result 3\n```", "```js\n// maxStrings.ts\nconst maxStrings = (a: string[]) => a.sort().pop();\nconst countries = [\n  \"Argentina\",\n  \"Uruguay\",\n  \"Brasil\",\n  \"Paraguay\",\n];\nconsole.log(maxStrings(countries)); // \"Uruguay\"\n```", "```js\nconsole.log(countries);\n// [\"Argentina\", \"Brasil\", \"Paraguay\"]\n```", "```js\n// continued...\nconst maxStrings2 = (a: string[]) => [...a].sort().pop();\nlet countries = [\n  \"Argentina\",\n  \"Uruguay\",\n  \"Brasil\",\n  \"Paraguay\",\n];\nconsole.log(maxStrings2(countries));\n// \"Uruguay\"\nconsole.log(countries);\n// [\"Argentina\", \"Uruguay\", \"Brasil\", \"Paraguay\"]\n```", "```js\n// random.ts\nconst getRandomLetter = (): string => {\n  const min = \"A\".charCodeAt(0);\n  const max = \"Z\".charCodeAt(0);\n  return String.fromCharCode(\n    Math.floor(Math.random() * (1 + max - min)) + min\n  );\n};\n```", "```js\n// continued...\nconst getRandomFileName = (fileExtension = \"\"): string => {\n  const NAME_LENGTH = 12;\n  const namePart = new Array(NAME_LENGTH);\n  for (let i = 0; i < NAME_LENGTH; i++) {\n    namePart[i] = getRandomLetter();\n  }\n  return namePart.join(\"\") + fileExtension;\n};\n```", "```js\ngetRandomFileName(\".pdf\"); // \"SVHSSKHXPQKG.pdf\"\ngetRandomFileName(\".pdf\"); // \"DCHKTMNWFHYZ.pdf\"\ngetRandomFileName(\".pdf\"); // \"GBTEFTVVHADO.pdf\"\ngetRandomFileName(\".pdf\"); // \"ATCBVUOSXLXW.pdf\"\ngetRandomFileName(\".pdf\"); // \"OIFADZKKNVAH.pdf\"\n```", "```js\n// isOldEnough.js\nconst isOldEnough2 = (birthYear: number): boolean =>\n  birthYear <= new Date().getFullYear() - 18;\nconsole.log(isOldEnough2(1960)); // true\nconsole.log(isOldEnough2(2010)); // false\n```", "```js\n// tricky.ts\nlet mult = 1;\nconst f = (x: number): number => {\n  mult = -mult;\n  return x * mult;\n};\nconsole.log(f(2) + f(5)); //  3\nconsole.log(f(5) + f(2)); // -3\n```", "```js\n// fibonacci.ts\nconst fib = (n: number): number => {\n  if (n == 0) {\n    return 0;\n  } else if (n == 1) {\n    return 1;\n  } else {\n    return fib(n - 2) + fib(n - 1);\n  }\n};\nconsole.log(fib(10)); // 55, a bit slowly\n```", "```js\n// continued...\nconst cache: number[] = [];\nconst fib2 = (n: number): number => {\n  if (cache[n] === undefined) {\n    if (n === 0) {\n      cache[0] = 0;\n    } else if (n === 1) {\n      cache[1] = 1;\n    } else {\n      cache[n] = fib2(n - 2) + fib2(n - 1);\n    }\n  }\n  return cache[n];\n};\nconsole.log(fib2(10)); // 55, as before, but more quickly!\n```", "```js\n// isOldEnough.ts\nconst isOldEnough3 = (\n  birthYear: number,\n  currentYear: number\n): boolean => birthYear <= currentYear - 18;\n```", "```js\nconsole.log(isOldEnough3(1960, 2022)); // true\nconsole.log(isOldEnough3(2010, 2022)); // false\n```", "```js\n// roundFix.ts\nconst roundFix1 = (() => {\n  let accum = 0;\n  return (n: number): number => {\n    const nRounded =\n      accum > 0 ? Math.ceil(n) : Math.floor(n);\n    accum += n - nRounded;\n    return nRounded;\n  };\n})();\n```", "```js\n// continued...\nconst roundFix2 = (accum: number, n: number) => {\n  const nRounded = accum > 0 ? Math.ceil(n) : Math.floor(n);\n  accum += n - nRounded;\n  return { accum, nRounded };\n};\n```", "```js\nlet accum = 0;\n// ...some other code...\nlet { a, r } = roundFix2(accum, 3.1415);\naccum = a;\nconsole.log(accum, r); // 0.1415 3\n```", "```js\n// random.ts\nconst getRandomFileNae = (fileExtension = \"\"): string => {\n  … \n    namePart[i] = getRandomLetter();\n  …\n\n};\n```", "```js\n// continued...\nconst getRandomFileName2 = (\n  fileExtension = \"\",\n  randomLetterFunc: () => string\n): string => {\n  const NAME_LENGTH = 12;\n  const namePart = new Array(NAME_LENGTH);\n  for (let i = 0; i < NAME_LENGTH; i++) {\n    namePart[i] = randomLetterFunc();\n  }\n  return namePart.join(\"\") + fileExtension;\n};\n```", "```js\nlet fn = getRandomFileName2(\".pdf\", getRandomLetter);\n```", "```js\n// continued...\nconst getRandomFileName3 = (\n  fileExtension = \"\",\n  randomLetterFunc: () => string = getRandomLetter\n): string => {\n  const NAME_LENGTH = 12;\n  const namePart = new Array(NAME_LENGTH);\n  for (let i = 0; i < NAME_LENGTH; i++) {\n    namePart[i] = randomLetterFunc();\n  }\n  return namePart.join(\"\") + fileExtension;\n};\n```", "```js\n// random.ts\nconst getRandomLetter2 = (\n  getRandomNum: () => number = Math.random.bind(Math)\n): string => {\n  const min = \"A\".charCodeAt(0);\n  const max = \"Z\".charCodeAt(0);\n  return String.fromCharCode(\n    Math.floor(getRandomNum() * (1 + max - min)) + min\n  );\n};\n```", "```js\n// calculateDebt.js\nconst calculateDebt = async (id) => {\n  // access a database to get a list of invoices\n  const listOfInvoices =\n    await mySqlConn.query(/* SQL query to get invoices */);\n  // call a remote service to learn what's owed for each\n  const owedAmounts =\n    await axios.get(/* API call to get owed amounts */);\n  const calculatedDebt = owedAmounts.reduce(\n    (x, y) => x + y,\n    0\n  );\n  return calculatedDebt;\n};\n```", "```js\n// continued...\nconst calculateDebt2 = async (\n  id,\n  { getInvoices, getOwedAmounts } =\n    { getInvoicesFromDb, getOwedAmountFromAPI }\n) => {\n  const listOfInvoices = await getInvoices(id);\n  const owedAmounts = await getOwedAmounts(listOfInvoices);\n  const calculatedDebt = owedAmounts.reduce(\n    (x, y) => x + y,\n    0\n  );\n  return calculatedDebt;\n};\n```", "```js\n// sum3.ts (in chapter 3)\nconst sum3 = (x: number, y: number, z: number): number =>\n  x + y + z;\n```", "```js\n// sum3.trick.ts\nconst x = {} as number;\nx.valueOf = () => Math.random();\nconst y = 1;\nconst z = 2;\nconsole.log(sum3(x, y, z)); // 3.2034400919849431\nconsole.log(sum3(x, y, z)); // 3.8537045249277906\nconsole.log(sum3(x, y, z)); // 3.0833258308458734\n```", "```js\n// isOldEnough.test.ts\ndescribe(\"isOldEnough\", function () {\n  it(\"is false for people younger than 18\", () => {\n    expect(isOldEnough3(2010, 2022)).toBe(false);\n  });\n  it(\"is true for people older than 18\", () => {\n    expect(isOldEnough3(1960, 2022)).toBe(true);\n  });\n  it(\"is true for people exactly 18\", () => {\n    expect(isOldEnough3(2004, 2022)).toBe(true);\n  });\n});\n```", "```js\n// area.test.ts\ndescribe(\"circle area\", function () {\n  it(\"is zero for radius 0\", () => {\n    const area = circleArea(0);\n    expect(area).toBe(0);\n  });\n  it(\"is PI for radius 1\", () => {\n    expect(circleArea(1)).toBeCloseTo(Math.PI);\n  });\n  it(\"is approximately 12.5664 for radius 2\", () =>\n    expect(circleArea(2)).toBeCloseTo(12.5664));\n});\n```", "```js\n// roundFix.ts\nconst roundFix2 = (accum: number, n: number) => {\n  const nRounded = accum > 0 ? Math.ceil(n) :\n    Math.floor(n);\n  accum += n - nRounded;\n  return { accum, nRounded };\n};\n```", "```js\n// roundFix.test.ts\ndescribe(\"roundFix2\", function () {\n  it(\"rounds 3.14159->3 if differences are 0\", () => {\n    const { accum, nRounded } = roundFix2(0.0, 3.14159);\n    expect(accum).toBeCloseTo(0.14159);\n    expect(nRounded).toBe(3);\n  });\n  it(\"rounds 2.71828->3 if differences are 0.14159\", () => {\n    const { accum, nRounded } = roundFix2(0.14159,\n      2.71828);\n    expect(accum).toBeCloseTo(-0.14013);\n    expect(nRounded).toBe(3);\n  });\n  it(\"rounds 2.71828->2 if differences are -0.14013\", () => {\n    const { accum, nRounded } = roundFix2(\n      -0.14013,\n      2.71828\n    );\n    expect(accum).toBeCloseTo(0.57815);\n    expect(nRounded).toBe(2);\n  });\n  it(\"rounds 3.14159->4 if differences are 0.57815\", () => {\n    const { accum, nRounded } = roundFix2(0.57815,\n      3.14159);\n    expect(accum).toBeCloseTo(-0.28026);\n    expect(nRounded).toBe(4);\n  });\n});\n```", "```js\n// random.test.ts\ndescribe(\"getRandomLetter2\", function () {\n  it(\"returns A for values close to 0\", () => {\n    const letterSmall = getRandomLetter2(() => 0.0001);\n    expect(letterSmall).toBe(\"A\");\n  });\n  it(\"returns Z for values close to 1\", () => {\n    const letterBig = getRandomLetter2(() => 0.99999);\n    expect(letterBig).toBe(\"Z\");\n  });\n  it(\"returns middle letter for values around 0.5\", () => {\n    const letterMiddle = getRandomLetter2(() =>\n      0.49384712);\n    expect(letterMiddle > \"G\").toBeTruthy();\n    expect(letterMiddle < \"S\").toBeTruthy();\n  });\n  it(\"returns ascending letters for ascending #s\", () => {\n    const letter1 = getRandomLetter2(() => 0.09);\n    const letter2 = getRandomLetter2(() => 0.22);\n    const letter3 = getRandomLetter2(() => 0.60);\n    expect(letter1 < letter2).toBeTruthy();\n    expect(letter2 < letter3).toBeTruthy();\n  });\n});\n```", "```js\n// continued...\ndescribe(\"getRandomFileName3\", function () {\n  let a: string[] = [];\n  const f = () => a.shift() as string;\n  beforeEach(() => {\n    a = \"SORTOFRANDOM\".split(\"\");\n  });\n  it(\"uses the given letters for the file name\", () => {\n    const fileName = getRandomFileName3(\"\", f);\n    expect(fileName.startsWith(\"SORTOFRANDOM\")).toBe(true);\n  });\n  it(\"includes right extension, has right length\", () => {\n    const fileName = getRandomFileName3(\".pdf\", f);\n    expect(fileName.endsWith(\".pdf\")).toBe(true);\n    expect(fileName.length).toBe(16);\n  });\n});\n```", "```js\n// continued...\ndescribe(\"getRandomLetter\", function () {\n  afterEach(() => {\n    // so count of calls to Math.random will be OK\n    jest.restoreAllMocks();\n  });\n  it(\"returns A for values ~ 0\", () => {\n    jest.spyOn(Math, \"random\").mockReturnValue(0.00001);\n    const letterSmall = getRandomLetter();\n    expect(Math.random).toHaveBeenCalled();\n    expect(letterSmall).toBe(\"A\");\n  });\n  it(\"returns Z for values ~ 1\", () => {\n    jest\n      .spyOn(Math, \"random\")\n      .mockReturnValueOnce(0.988)\n      .mockReturnValueOnce(0.999);\n    const letterBig1 = getRandomLetter();\n    const letterBig2 = getRandomLetter();\n    expect(Math.random).toHaveBeenCalledTimes(2);\n    expect(letterBig1).toBe(\"Z\");\n    expect(letterBig2).toBe(\"Z\");\n  });\n  it(\"returns middle letter for values ~ 0.5\", () => {\n    jest.spyOn(Math, \"random\").mockReturnValue(0.49384712);\n    const letterMiddle = getRandomLetter();\n    expect(Math.random).toHaveBeenCalledTimes(1);\n    expect(letterMiddle > \"G\").toBeTruthy();\n    expect(letterMiddle < \"S\").toBeTruthy();\n  });\n});\n```", "```js\n// continued...\ndescribe(\"getRandomFileName+impure getRandomLetter\", () => {\n  it(\"generates 12 letter long names\", () => {\n    for (let i = 0; i < 100; i++) {\n      expect(getRandomFileName().length).toBe(12);\n    }\n  });\n  it(\"generates names with letters A to Z, only\", () => {\n    for (let i = 0; i < 100; i++) {\n      const name = getRandomFileName();\n      for (let j = 0; j < name.length; j++) {\n        expect(name[j] >= \"A\" && name[j] <=\n          \"Z\").toBe(true);\n      }\n    }\n  });\n  it(\"includes right extension if provided\", () => {\n    const fileName1 = getRandomFileName(\".pdf\");\n    expect(fileName1.length).toBe(16);\n    expect(fileName1.endsWith(\".pdf\")).toBe(true);\n  });\n  it(\"doesn't include extension if not provided\", () => {\n    const fileName2 = getRandomFileName();\n    expect(fileName2.length).toBe(12);\n    expect(fileName2.includes(\".\")).toBe(false);\n  });\n});\n```", "```js\n// shuffle.test.ts\nconst shuffle = <T>(arr: T[]): T[] => {\n  const len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    let r = Math.floor(Math.random() * (len - i));\n    [arr[i], arr[i + r]] = [arr[i + r], arr[i]];\n  }\n  return arr;\n};\nconst xxx = [11, 22, 33, 44, 55, 66, 77, 88];\nconsole.log(shuffle(xxx));\n// [55, 77, 88, 44, 33, 11, 66, 22]\n```", "```js\n// continued...\ndescribe(\"shuffleTest\", function () {\n  it(\"shouldn't change the array length\", () => {\n    const a = [22, 9, 60, 12, 4, 56];\n    shuffle(a);\n    expect(a.length).toBe(6);\n  });\n  it(\"shouldn't change the values\", () => {\n    const a = [22, 9, 60, 12, 4, 56];\n    shuffle(a);\n    expect(a.includes(22)).toBe(true);\n    expect(a.includes(9)).toBe(true);\n    expect(a.includes(60)).toBe(true);\n    expect(a.includes(12)).toBe(true);\n    expect(a.includes(4)).toBe(true);\n    expect(a.includes(56)).toBe(true);\n  });\n});\n```", "```js\nconst maxStrings = (a: string[]): string => a.sort().pop();\n```", "```js\n// fibonacci.ts\nconst fib3 = (n: number): number =>\n  n < 2 ? n : fib2(n - 2) + fib2(n - 1);\n```", "```js\n// fibonacci.ts\nconst fib4 = (n: number, a = 0, b = 1): number =>\n  n === 0 ? a : fib4(n - 1, b, a + b);\n```", "```js\nconst calculateDebt2 = async (\n  id,\n  getInvoices = getInvoicesFromDb,\n  getOwedAmounts = getOwedAmountFromAPI\n) => … ;\n```", "```js\nconst a = 0.1;\nconst b = 0.2;\nconst c = 0.3;\nif (a + b === c) {\n  console.log(\"Math works!\");\n} else {\n  console.log(\"Math failure?\");\n}\n```", "```js\nconst poorShuffle = (arr) =>\n  arr.sort(() => Math.random() - 0.5);\n```"]