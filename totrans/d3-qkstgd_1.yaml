- en: Getting Started with D3.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The era of big data is upon us! Advances in hardware have made it possible for
    computers to store, analyze, and transmit massive amounts of information in a
    way that was previously impossible. Data science has become one of the most in-demand
    fields in the United States, and companies are constantly coming up with new techniques
    to analyze customer information; it seems as if every day there are new ways to
    visualize all this data. **D3** has become the most popular library used to create
    dynamic, interactive, data-driven visualizations on the web. Unlike many technologies
    previously used in data vizualization
  prefs: []
  type: TYPE_NORMAL
- en: ', D3 leverages the power of combining SVG images with web browsers and JavaScript.
    In this chapter, we''ll discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is SVG?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What makes D3 so special?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This book's approach to learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is SVG?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the best ways to present your data is via an interactive graphic on the
    web. The advantage of this approach is that its interactivity allows creators
    to pack more information into a single visualization, while the ubiquity of the
    web allows anyone to instantly access it. Gone are the days of PowerPoint presentations,
    or, worse still, printing static images on to paper as handouts. There are many
    ways to create a web-based interactive data visualization, but none of them is
    more popular than the JavaScript library called **D3.js**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand why `D3.js` works so well, it''s important to understand what
    SVG is and how it relates to D3\. **SVG** stands for **Scalable Vector Graphics**,
    and it''s a way to display shapes using mathematical directions/commands. Traditionally,
    the information for an image is stored in a grid, also called a raster. Each square
    (called a pixel) of the image has a specific color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73e7bfff-3121-406b-bb50-c2febad99b1e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'But with SVG, a set of succinct drawing directions is stored. For example,
    the drawing command for a circle is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This code produces a much smaller file size, and because it''s a set of drawing
    directions, the image can be enlarged without any pixelation. A raster image becomes
    blurry and pixelated as it''s enlarged. The advantage of raster graphics over
    vector graphics is that they''re great for storing complex images such as photographs.
    With a photograph, where each pixel probably has a different color, it''s better
    to use a raster image. Imagine writing SVG drawing commands for a photograph:
    you would end up creating a new element for each pixel, and the file size would
    be too large.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once an SVG drawing command is written, a program needs to interpret the command
    and display the image. Up until recently, only designated drawing applications
    such as Adobe Illustrator could view and manipulate these images. But by 2011
    all major modern browsers supported SVG tags, allowing for developers to embed
    SVG directly on a web page. Since the SVG image was directly embedded in the code
    of a web page, JavaScript, which normally is used for manipulating HTML, could
    be used to manipulate the shape, size, and colors of the image in response to
    user events. To make the circle in the SVG example you have just seen grow to
    twice its original size, all that JavaScript had to do was change the rattribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This was the massive breakthrough that allowed complex interactive data visualizations
    to be hosted on the web.
  prefs: []
  type: TYPE_NORMAL
- en: What makes D3 so special?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'D3.js came in at this point because writing the code to make complex data-driven
    documents (how D3 got its name) that linked SVG images with the big data that
    had become available on the internet was a difficult task. It rose to prominence
    during the Obama/Romney presidential debates as the New York times published a
    series of amazing visualizations. Check out some examples here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://archive.nytimes.com/www.nytimes.com/interactive/2012/11/07/us/politics/obamas-diverse-base-of-support.html](https://archive.nytimes.com/www.nytimes.com/interactive/2012/11/07/us/politics/obamas-diverse-base-of-support.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://archive.nytimes.com/www.nytimes.com/interactive/2012/11/02/us/politics/paths-to-the-white-house.html](http://archive.nytimes.com/www.nytimes.com/interactive/2012/11/02/us/politics/paths-to-the-white-house.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://archive.nytimes.com/www.nytimes.com/interactive/2012/10/15/us/politics/swing-history.html](https://archive.nytimes.com/www.nytimes.com/interactive/2012/10/15/us/politics/swing-history.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.nytimes.com/elections/2012/electoral-map.html](https://www.nytimes.com/elections/2012/electoral-map.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://archive.nytimes.com/www.nytimes.com/interactive/2012/09/06/us/politics/convention-word-counts.html](https://archive.nytimes.com/www.nytimes.com/interactive/2012/09/06/us/politics/convention-word-counts.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://archive.nytimes.com/www.nytimes.com/interactive/2012/03/07/us/politics/how-candidates-fared-with-different-demographic-groups.html](https://archive.nytimes.com/www.nytimes.com/interactive/2012/03/07/us/politics/how-candidates-fared-with-different-demographic-groups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: D3 simplifies some of the most common, as well as some of the most, complex
    tasks that a developer can run into when creating browser-based visualizations.
    At its core, D3 easily maps SVG image properties to data values. As the data values
    change, due to user interactions, so do the images.
  prefs: []
  type: TYPE_NORMAL
- en: This book's approach to learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'D3 is a massive library, full of millions of options, but its core concepts
    are easy to learn. You do not need to know every detail of the library to become
    a functional D3 developer. Instead, this book attempts to teach the most fundamental
    aspects of D3 so that the reader can get job-ready quickly. It does so by stepping
    the user through a series of the most common graphs that a developer will be asked
    to make: a scatter plot, a bar graph, a pie chart, a force-directed graph, and
    a map. The goal is not only to teach the basics but also to give the reader a
    final set of builds that are fun to work, toward as well as useful to draw from
    as their career continues.'
  prefs: []
  type: TYPE_NORMAL
- en: Please note, the code demonstrated here was created to be easy to understand
    from an educational standpoint. It is not meant to be code that is ready for production.
    Nor does it employ ES6 or ES7 syntax. Often, demonstrating a concept in code that
    is production-ready or written in ES6/ES7 can hinder the educational experience.
    It is assumed that the reader is comfortable enough with the core concepts of
    programming that they can refine the code on their own, once they are comfortable
    with the fundamentals of D3.
  prefs: []
  type: TYPE_NORMAL
- en: A preview of each build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each chapter focuses on a specific build. The completed build code for each
    chapter can be found at: [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide).'
  prefs: []
  type: TYPE_NORMAL
- en: Using SVG to create images using code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learn how to render shapes in the browser, using SVG. We''ll
    cover shapes such as these:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Circles:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/fd321b2d-73d4-49cf-b794-8c65632f9c24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lines:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/61f46fe4-8c14-47ae-8cbb-9995516cd859.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Rectangles:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3288d14c-ed88-4b87-be57-e0dcd767c576.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Ellipses:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/23d8dcc2-f9c9-46aa-87af-b69ccfa86465.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Polygons:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/4fe0ad7d-7ce5-4f01-b321-617083bf33f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Polylines:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c8871cbf-e772-4812-9767-5f3dc4ff8f5c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Cubic Bezier Curves:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e179b016-31db-47ef-a11b-2a50ba2e1fac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The completed code for this section can be found here: [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter02](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter02).'
  prefs: []
  type: TYPE_NORMAL
- en: Building an interactive scatter plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn how to plot points on a graph to create a scatter
    plot. It will look a bit like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2412f34d-a409-4751-9ee2-445f7afd7950.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The completed code for this section can be found here: [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter03](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter03).'
  prefs: []
  type: TYPE_NORMAL
- en: Making a basic scatter plot interactive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter builds on the previous one, adding interactive functionality that
    allows you to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create new points:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e67afc37-ade4-453e-a868-9b631a25f5d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Remove points:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7ac886ce-1922-4b1f-ac9d-d77147900813.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Update points:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/df7293e4-bfa7-4638-b1d9-83b51f308215.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Zoom and pan:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/9a62b225-fc86-4e0c-8d1e-28d2f7e16c14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The completed code for this section can be found here: [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter04](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter04).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bar graph using a data file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll learn how to use AJAX to make an asynchronous call,
    after the page has loaded, to retrieve some JSON data and render it as a bar graph.
    It should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52674d4f-b163-49f0-aa28-f989471cb60d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The completed code for this section can be found here: [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter05](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter05).'
  prefs: []
  type: TYPE_NORMAL
- en: Animating SVG elements to create an interactive pie chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll learn how to make a pie chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ab4973e-14a9-492c-b640-8daaa2735e08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then we''ll turn it into a donut chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99cd058b-13f8-4d4a-a8d4-ac663ab273bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And then we''ll create functionality so that the user can remove a section
    of the chart and it will close the gap with a smooth transition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/261e8997-e5b0-48fe-a148-d10f10f08a97.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The completed code for this section can be found here: [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter06](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter06).'
  prefs: []
  type: TYPE_NORMAL
- en: Using physics to create a force-directed graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll graph relationships between people with a force-directed
    graph. It will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a26bb7d1-b7c5-43b6-9ec9-dca853539db8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The completed code for this section can be found here: [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter07](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter07).'
  prefs: []
  type: TYPE_NORMAL
- en: Mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 8](9e68fb4c-044a-40ec-ba46-3181bc2b7b5f.xhtml), *Mapping*, we''ll
    learn how to use GeoJSON data to create a map of the world. It will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f9fd30c-8ba4-4316-a726-91cfa42bd461.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The completed code for this section can be found here: [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter08](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter08).'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this book, you really only need to download and install the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chrome: [https://www.google.com/chrome/](https://www.google.com/chrome/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A web browser so that we can view our visualizations.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Node: [https://nodejs.org/en/](https://nodejs.org/en/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This allows us to run javascript from the terminal. In [Chapter 4](e503bfe5-4b90-47eb-bae0-d588a9b545d5.xhtml),
    *Making a Basic Scatter Plot Interactive*,we will use it so that we can make AJAX
    calls.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A code editor. I''d suggest Atom if you''re new to coding: [https://atom.io/](https://atom.io/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you've received a high-level overview of what makes D3 so interesting.
    We examined what an SVG element is and set up our machine so that it is ready
    to create D3 code. We also took a look at this book's approach to learning and
    how it applies to the applications that we'll build. In [Chapter 2](f40fadd5-f40b-43dc-a82d-206aac322123.xhtml),
    *Using SVG to Create Images Using Code*, we'll dive into creating SVG elements.
  prefs: []
  type: TYPE_NORMAL
