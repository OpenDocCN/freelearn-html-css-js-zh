- en: Chapter 8. Media Queries with Less
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。使用Less的媒体查询
- en: Now that we've seen how to use Less to manage the appearance of our content,
    what about making sure it fits on the page? Ah yes—isn't this where media queries
    come in to play…?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到如何使用Less来管理我们内容的显示，那么确保它适合页面呢？啊，是的——这不是媒体查询发挥作用的地方吗……？
- en: Before the advent of smartphones, most websites would be built at a fixed width—small
    enough to fit on laptops or PCs so that most end users would have a consistent
    experience.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在智能手机出现之前，大多数网站都会以固定宽度构建——足够小，可以适应笔记本电脑或PC，这样大多数最终用户都会有一个一致的经验。
- en: However, now that more and more people are using mobile devices, the need to
    design content that can be seamlessly viewed on each device has increased. Gone
    are the days where you had to have the skills of a surgeon to view content, and
    work a mobile device—people are increasingly more comfortable viewing content
    on mobile devices.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现在越来越多的人使用移动设备，设计可以在每个设备上无缝查看的内容的需求增加了。那些需要具备外科医生技能才能查看内容、操作移动设备的时代已经过去了——人们越来越习惯于在移动设备上查看内容。
- en: How do we get around this? Easy—welcome to the world of media queries! An essential
    component of responsive web design, we can use media queries to build a site that
    can be seamlessly viewed over multiple platforms.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何解决这个问题？简单——欢迎来到媒体查询的世界！响应式网页设计的一个基本组成部分，我们可以使用媒体查询来构建一个可以在多个平台上无缝查看的网站。
- en: 'I guess you''re thinking—how can Less help here? No problem. In this chapter,
    we''ll see how Less can make creating media queries a cinch; we will cover the
    following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我想你可能在想——Less如何在这里帮助？没问题。在本章中，我们将看到Less如何使创建媒体查询变得轻而易举；我们将涵盖以下主题：
- en: How media queries work
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 媒体查询的工作原理
- en: What's wrong with CSS?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS有什么问题？
- en: Setting client criteria
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置客户端标准
- en: Building media queries using Less
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Less构建媒体查询
- en: Ready to have some fun creating media queries? Let's get started!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好享受创建媒体查询的乐趣了吗？让我们开始吧！
- en: Introducing media queries
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍媒体查询
- en: If you've ever spent time creating content for sites, particularly for display
    on a mobile platform, then you might have come across media queries.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经花时间为网站创建内容，尤其是为移动平台显示的内容，那么你可能已经遇到过媒体查询。
- en: For those of you who are new to the concept, media queries are a means of tailoring
    the content that is displayed on screen when the viewport is resized to a smaller
    size. Historically, websites were always built at a static size—with more and
    more people viewing content on smartphones and tablets, this means viewing them
    became harder, as scrolling around a page can be a tiresome process!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些刚开始接触这个概念的人来说，媒体查询是一种在视口调整到更小尺寸时定制屏幕上显示内容的方法。从历史上看，网站总是以静态尺寸构建——随着越来越多的人使用智能手机和平板电脑查看内容，这意味着查看它们变得更加困难，因为滚动页面可能是一个令人疲惫的过程！
- en: Thankfully, this became less of an issue with the advent of media queries—they
    help us with what should or should not be displayed when viewing content on a
    particular device. Throughout this chapter, we'll take a brief look at what they
    are, how they work, and focus more on how you can use Less to create them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，随着媒体查询的出现，这个问题变得不那么严重了——它们帮助我们确定在特定设备上查看内容时应该显示或不应显示的内容。在本章中，我们将简要地看看它们是什么，它们是如何工作的，并更多地关注如何使用Less来创建它们。
- en: 'Almost all modern browsers offer native support for media queries—the only
    exception being IE Version 8 or below, where it is not supported natively:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有现代浏览器都提供对媒体查询的原生支持——唯一的例外是IE版本8或以下，其中它不支持原生：
- en: '![Introducing media queries](img/00073.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![介绍媒体查询](img/00073.jpeg)'
- en: 'Media queries always begin with `@media` and consist of two parts:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询始终以`@media`开头，并包含两部分：
- en: '![Introducing media queries](img/00074.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![介绍媒体查询](img/00074.jpeg)'
- en: The first part, `only screen`, determines the media type where a rule should
    apply—in this case, it will only show the rule if we're viewing content on screen;
    content viewed when printed can easily be different.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分，`only screen`，确定规则应该应用的媒体类型——在这种情况下，只有在我们查看屏幕上的内容时才会显示该规则；打印时查看的内容可以很容易地不同。
- en: 'The second part, or media feature, `(min-width: 530px) and (max-width: 949px)`,
    means the rule will only apply between a screen size set at a minimum of `530px`
    and a maximum of `949px`. This will rule out any smartphones and will apply to
    larger tablets, laptops, or PCs.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '第二部分，或媒体特性，`(min-width: 530px) and (max-width: 949px)`，意味着规则将只应用于最小为`530px`和最大为`949px`的屏幕尺寸。这将排除任何智能手机，并将适用于更大的平板电脑、笔记本电脑或PC。'
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are literally dozens of combinations of media queries to suit a variety
    of needs—for some good examples, visit [http://cssmediaqueries.com/overview.html](http://cssmediaqueries.com/overview.html),
    where you can see an extensive list, along with an indication of whether it is
    supported in the browser you normally use.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，有数十种媒体查询的组合来满足各种需求——为了找到一些好的例子，请访问[http://cssmediaqueries.com/overview.html](http://cssmediaqueries.com/overview.html)，在那里你可以看到一个详尽的列表，以及是否在你通常使用的浏览器中受支持。
- en: Media queries are perfect to dynamically adjust your site to work in multiple
    browsers—indeed, they are an essential part of a responsive web design. While
    browsers support media queries, there are some limitations we need to consider;
    let's take a look at these now.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询非常适合动态调整你的网站以在多个浏览器中工作——实际上，它们是响应式网页设计的一个基本组成部分。虽然浏览器支持媒体查询，但有一些限制我们需要考虑；让我们现在看看这些限制。
- en: The limitations of CSS
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS 的限制
- en: 'If we spend any time working with media queries, there are some limitations
    we need to consider; these apply equally if we were writing using Less or plain
    CSS:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们花时间与媒体查询一起工作，有一些限制我们需要考虑；这些限制同样适用于我们使用 Less 或纯 CSS 编写时：
- en: Not every browser supports media features uniformly; to see the differences,
    visit [http://cssmediaqueries.com/overview.html](http://cssmediaqueries.com/overview.html)
    using different browsers.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并非每个浏览器都均匀支持媒体特性；为了看到差异，请使用不同的浏览器访问[http://cssmediaqueries.com/overview.html](http://cssmediaqueries.com/overview.html)。
- en: Current thinking is that a range of breakpoints has to be provided; this can
    result in a lot of duplication and a constant battle to keep up with numerous
    different screen sizes!
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前的观点是必须提供一系列断点；这可能导致大量重复，并且需要不断与众多不同的屏幕尺寸保持同步！
- en: The `@media` keyword is not supported in IE8 or below; you will need to use
    JavaScript or jQuery to achieve the same result, or a library such as **Modernizr**
    to provide a graceful fallback option.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@media` 关键字在 IE8 或更低版本中不受支持；你需要使用 JavaScript 或 jQuery 来实现相同的结果，或者使用像 **Modernizr**
    这样的库来提供一个优雅的回退选项。'
- en: Writing media queries will tie your design to a specific display size; this
    increases the risk of duplication as you might want the same element to appear
    in multiple **breakpoints**, but have to write individual rules to cover each
    breakpoint.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写媒体查询将使你的设计绑定到特定的显示尺寸；这增加了重复的风险，因为你可能希望相同的元素在多个 **断点** 中出现，但必须编写单独的规则来覆盖每个断点。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Breakpoints are points where your design will break if it is resized larger
    or smaller than a particular set of given dimensions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 断点是设计在调整大小超过特定尺寸时将断裂的点。
- en: The traditional thinking is that we have to provide different style rules for
    different breakpoints within our style sheets. While this is valid, ironically
    it is something we should not follow! The reason for this is the potential proliferation
    of breakpoint rules that you might need to add, just to manage a site.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的思维是，我们必须在样式表中为不同的断点提供不同的样式规则。虽然这是有效的，但讽刺的是，这正是我们不应该遵循的！原因在于，你可能需要添加大量的断点规则，只是为了管理一个网站。
- en: With care and planning and a design-based breakpoints mindset, we can often
    get away with a fewer number of rules. As you will see in the example towards
    the end of the chapter, there is only one breakpoint given, but it works in a
    range of sizes without the need for more breakpoints. The key to the process is
    to start small, then increase the size of your display. As soon as it breaks your
    design (this is where your first breakpoint is) add a query to fix it, and then,
    keep doing it until you get to your maximum size.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过谨慎的计划和基于设计的断点思维，我们通常可以减少规则的数量。正如你将在本章末尾的示例中看到的那样，只有一个断点被给出，但它可以在一系列尺寸中工作，而无需更多的断点。这个过程的关键是从小开始，然后增加显示的大小。一旦它破坏了你的设计（这就是你的第一个断点），就添加一个查询来修复它，然后，继续这样做，直到你达到最大尺寸。
- en: Okay, so we've seen what media queries are; let's change tack and look at what
    you need to consider when working with clients, before getting down to writing
    the queries in code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经看到了媒体查询是什么；让我们改变方向，看看在与客户合作时需要考虑什么，然后再着手编写代码中的查询。
- en: Setting client criteria
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置客户标准
- en: The hardest part of working with media queries isn't in the design of the code,
    but in agreeing with clients as to what devices should be supported!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与媒体查询一起工作的最难的部分不在于代码的设计，而在于与客户就应支持哪些设备达成一致！
- en: Some clients might want to have the same experience throughout their site, irrespective
    of the device or platform being used to view the content. This might have worked
    when the Internet was still being viewed on normal-sized screens. This is no longer
    the case; more and more people are viewing content on mobile or other such devices.
    The use of mobile devices is such that numbers are increasing rapidly, to the
    extent that they will soon overtake those who still use a desktop PC to view content.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一些客户可能希望在他们的网站上获得一致的经验，无论使用什么设备或平台来查看内容。当互联网仍然在正常尺寸的屏幕上查看时，这可能有效。现在情况已经不再是这样了；越来越多的人正在移动或其他类似设备上查看内容。移动设备的使用如此之多，以至于其数量正在迅速增加，很快就会超过仍然使用台式电脑查看内容的人。
- en: The phrase, "Expectation is the root of all heartache" (from an anonymous source,
    but often misquoted as being Shakespeare), is particularly apt—it is key in deciding
    what should and should not be included in each breakpoint; if not, you are more
    likely to land yourself in trouble with your client!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: “期望是所有心痛的根源”（出自匿名来源，但常被误引为莎士比亚所说），这句话特别恰当——它在决定每个断点应该包含什么内容以及不应该包含什么内容时是关键；如果不这样做，你更有可能在与客户的交流中遇到麻烦！
- en: 'When creating media queries as part of constructing a client''s site, there
    are some key points to keep in mind, which will form the basis for conversations
    with your client:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建客户网站的过程中创建媒体查询时，有一些关键点需要记住，这些将成为与客户交谈的基础：
- en: At the start, make it clear to your client what responsive design is all about—making
    content fit a particular screen size. Impress on them that it is perfectly acceptable
    practice for the site not to show all of the content on mobile devices.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开始时，向客户清楚地解释响应式设计的概念——使内容适应特定的屏幕尺寸。让他们明白，网站在移动设备上不显示所有内容是完全可接受的实践。
- en: If the desire is to have the same experience on all devices, then this will
    naturally add a significant amount of code and require extra resources—is it absolutely
    necessary? It is far better to work with the client to create content that will
    work on multiple devices from the same site, but not every element will be displayed
    on each device.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果希望在所有设备上都有相同的体验，那么这自然会增加大量的代码并需要额外的资源——这是绝对必要的吗？与客户合作创建可以在同一网站上工作但不是每个设备都会显示的内容，这要好得多。
- en: Be clear with the customer what should and should not be included at each breakpoint—they
    might want content such as terms and conditions to be displayed, but this might
    put mobile users off from viewing the site, if they are long.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向客户明确说明在每个断点应该包含什么内容以及不应该包含什么内容——他们可能希望显示诸如条款和条件等内容，但如果内容过长，可能会让移动用户对查看网站感到厌烦。
- en: If clients have difficulty in grasping the whole concept of responsive design,
    then get them to look at their site in a mobile device—they should see that it
    looks poor. Mobile devices work better with content and less so with interaction
    or searching—media queries can hide these elements on screen.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果客户难以理解响应式设计的整体概念，那么让他们在移动设备上查看他们的网站——他们应该看到它看起来很糟糕。移动设备更适合内容而不是交互或搜索——媒体查询可以在屏幕上隐藏这些元素。
- en: A more radical approach will be to limit what can be done on a mobile device—this
    works perfectly for airline sites, where they might only want customers to book
    tickets or check their reservations. This requires more work upfront to hide more
    elements by default, but is worth the effort required to produce a site that is
    clean, fast, and works well on mobile devices.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种更激进的方案是限制在移动设备上可以执行的操作——这对于航空公司网站来说效果完美，因为它们可能只想让客户预订机票或检查他们的预订。这需要前期做更多工作来默认隐藏更多元素，但为了制作一个干净、快速且在移动设备上运行良好的网站，这些努力是值得的。
- en: From a technical perspective, it is critical to determine which elements can
    be scaled, moved, omitted, or even collapsed on screen, at a particular breakpoint.
    Consideration should also be given to other elements when used in a mobile environment,
    such as the forms of interaction used, resizing of fonts, and cropping of images.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从技术角度来看，确定在特定断点上哪些元素可以缩放、移动、省略或甚至折叠在屏幕上至关重要。还应考虑在移动环境中使用时其他元素，例如使用的交互形式、字体大小调整和图像裁剪。
- en: There is one critical question that needs to be agreed with the client—should
    the site work for a number of devices, or should it just work when the screen
    is resized and elements break at certain points? There is an emerging thought
    that says we can't hope to support every device and that we should just try resizing
    a screen and then fix any element that breaks at a certain point during the resizing
    process. We can, of course, use the emulation features available within Chrome
    or Opera—even after doing this, we still cannot hope to cater for every device!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 需要与客户达成一致的一个关键问题是——网站应该适用于多种设备，还是仅在屏幕大小调整且元素在特定点断裂时才工作？有一种新兴的观点认为，我们无法支持所有设备，我们只需尝试调整屏幕大小，然后在调整过程中修复在特定点断裂的任何元素。当然，我们可以使用Chrome或Opera中可用的仿真功能——即使这样做，我们仍然无法为所有设备提供支持！
- en: Okay, let's move on and turn our attention to creating media queries; before
    we write the code, we will have a quick recap on the options available when creating
    the queries.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们继续，并将注意力转向创建媒体查询；在我们编写代码之前，我们将快速回顾一下创建查询时可用选项。
- en: Exploring media queries
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索媒体查询
- en: When creating media queries, we've seen how they split into two parts—the first
    part consists of a media type, which defines the environment where the media query
    should apply (that is, on screen or in print). It should be noted that none of
    these are specific to Less—they are all valid CSS media types that we can use
    when creating our media queries using Less.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建媒体查询时，我们已经看到了它们分为两部分——第一部分由一个媒体类型组成，它定义了媒体查询应该应用的环境（即屏幕或打印）。需要注意的是，这些都不是Less特有的——它们都是我们可以使用Less创建媒体查询的有效CSS媒体类型。
- en: Defining media types
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义媒体类型
- en: 'Although it is likely that we might only need to use print or screen when creating
    our Less code, there are other options available; here''s a full list of elements
    that might or might not be supported by all browsers:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可能只需要在创建Less代码时使用打印或屏幕，但还有其他选项可用；以下是一个完整的元素列表，这些元素可能或可能不被所有浏览器支持：
- en: '| Feature | Intended for |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 适用于 |'
- en: '| --- | --- |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `all` | Most devices; this is default, unless otherwise specified |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `all` | 大多数设备；这是默认值，除非有其他指定 |'
- en: '| `braille` | Use in braille tactile devices |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `braille` | 在盲文触觉设备中使用 |'
- en: '| `embossed` | Paged braille printers |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `embossed` | 分页式盲文打印机 |'
- en: '| `handheld` | Handheld devices, where screen size is small and bandwidth is
    limited |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `handheld` | 手持设备，屏幕尺寸小且带宽有限 |'
- en: '| `print` | Producing content that is viewed on screen in the print preview
    mode |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `print` | 在打印预览模式下查看的内容 |'
- en: '| `projection` | Projected presentations when using devices such as projectors
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `projection` | 使用投影仪等设备时的投影演示 |'
- en: '| `screen` | Color computer screens |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `screen` | 彩色计算机屏幕 |'
- en: '| `speech` | Use with speech synthesizers |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `speech` | 与语音合成器一起使用 |'
- en: '| `tty` | Media using a fixed-pitch character grid, such as terminals or teletypes
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `tty` | 使用固定间距字符网格的媒体，例如终端或电传打字机 |'
- en: '| `tv` | Use with television devices, with low resolution, color, limited scrolling,
    and sound |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `tv` | 与电视设备一起使用，具有低分辨率、彩色、有限的滚动和声音 |'
- en: Exploring media features
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索媒体特性
- en: Once the media type has been set, we also need to set the media feature that
    should be tested; the media query will return true if it can match both the type
    of device the media is being displayed on and the feature being tested.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了媒体类型，我们还需要设置应该测试的媒体特性；如果媒体查询可以匹配媒体显示的设备类型和正在测试的特性，它将返回true。
- en: 'Media features are split into three categories—visual and tactile media, bitmap
    media, and TV. Let''s take a look at the full list of options available for visual
    and tactile media:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体特性分为三个类别——视觉和触觉媒体、位图媒体和电视。让我们看看视觉和触觉媒体可用的完整选项列表：
- en: '| Feature | Value | Min/max prefixes | Description |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 值 | Min/max前缀 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `width` | `Length` | Yes | This gives the width of the display area |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `width` | `Length` | Yes | 这给出了显示区域的宽度 |'
- en: '| `height` | `Length` | Yes | This gives the height of the display area |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `height` | `Length` | Yes | 这给出了显示区域的高度 |'
- en: '| `device-width` | `Length` | Yes | This gives the width of the device area
    |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `device-width` | `Length` | Yes | 这给出了设备区域的宽度 |'
- en: '| `device-height` | `Length` | Yes | This gives the height of the device area
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `device-height` | `Length` | Yes | 这给出了设备区域的高度 |'
- en: '| `color` | `Integer` | Yes | This is the number of bits per color component
    (if not color, the value is `0`) |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `color` | `整数` | 是 | 这是每个颜色组件的位数（如果不是彩色，则值为 `0`） |'
- en: '| `color-index` | `Integer` | Yes | This is the number of entries in the output
    device''s color lookup table |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `color-index` | `整数` | 是 | 这是输出设备颜色查找表中的条目数 |'
- en: '| `monochrome` | `Integer` | Yes | This is the number of bits per pixel in
    the monochrome frame buffer (if not monochrome, the value is `0`) |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `monochrome` | `整数` | 是 | 这是单色帧缓冲区每像素的位数（如果不是单色，则值为 `0`） |'
- en: '| `grid` | `0 or 1` | No | If this is set to `1`, the device is grid based,
    such as a teletype terminal or phone display with only one fixed font (all other
    devices are `0`) |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `grid` | `0 或 1` | 否 | 如果设置为 `1`，则设备基于网格，例如电传终端或只有一种固定字体的电话显示屏（所有其他设备为 `0`）
    |'
- en: 'The second category is bitmap media types; here''s the full list:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个类别是位图媒体类型；以下是完整的列表：
- en: '| Feature | Value | Min/max prefixes | Description |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 值 | 最小/最大前缀 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `orientation` | `portrait` or `landscape` | No | This gives the orientation
    of a device |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `orientation` | `纵向` 或 `横向` | 否 | 这给出了设备的方向 |'
- en: '| `aspect-ratio` | `Ratio (w/h)` | Yes | This gives the ratio of width to height,
    expressed as two integers and separated by a slash (for example, `16/` `9`) |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `aspect-ratio` | `比例 (w/h)` | 是 | 这给出了宽度和高度的比例，以两个整数表示，并用斜杠分隔（例如，`16/` `9`）
    |'
- en: '| `device-aspect-ratio` | `Ratio (w/h)` | Yes | This is the ratio of device-width
    to device-height |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `device-aspect-ratio` | `比例 (w/h)` | 是 | 这是设备宽度与设备高度的比例 |'
- en: '| `resolution` | `Resolution` | Yes | This gives the density of pixels of the
    output device, expressed as an integer followed by `dpi` (dots per inch) or `dpc`
    `m` (dots per centimeter) |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `resolution` | `分辨率` | 是 | 这给出了输出设备的像素密度，以整数后跟 `dpi`（每英寸点数）或 `dpc m`（每厘米点数）表示
    |'
- en: 'The third and final category only has one media type—this is `scan`, which
    is used for TV devices:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 第三和最后一个类别只有一个媒体类型——这是 `scan`，用于电视设备：
- en: '| Feature | Value | Min/max prefixes | Description |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 值 | 最小/最大前缀 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `scan` | `Progressive` or `interlace` | No | Scanning process used by TV
    devices |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `scan` | `渐进式` 或 `交错式` | 否 | 电视设备使用的扫描过程 |'
- en: In most cases, it will be sufficient to specify a single media type and feature
    when creating media queries—there will be instances where we might need to check
    against multiple features or types in a single query.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，在创建媒体查询时指定单个媒体类型和特性就足够了——会有一些情况我们需要在一个查询中检查多个特性或类型。
- en: Thankfully, Less can easily handle this by using logical operators—let's take
    a moment to recap the options available when creating media queries.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Less 可以通过使用逻辑运算符轻松处理这个问题——让我们花一点时间回顾一下创建媒体查询时可用选项：
- en: Using logical operators
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用逻辑运算符
- en: 'As we begin to build more complex queries, there will be instances where we
    need to perform a check against multiple criteria within a media query. Less can
    handle this with ease. Before we take a look at putting into practice what we''ve
    learned, let''s just take a moment to review the operators available:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始构建更复杂的查询时，会有一些情况需要在一个媒体查询中对多个标准进行检查。Less 可以轻松处理这个问题。在我们查看如何将所学知识付诸实践之前，让我们花一点时间回顾一下可用的运算符：
- en: '| Operator | Is used to |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 用于 |'
- en: '| --- | --- |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `and` | Combine multiple media features together, or media features with
    other media types. For example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '| `and` | 将多个媒体特性组合在一起，或将媒体特性与其他媒体类型组合。例如：'
- en: '[PRE0]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `comma` | Apply a set of styles if any of a comma-delimited list of queries
    returns true:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '| `comma` | 如果逗号分隔的查询列表中的任何一个返回 `true`，则应用一组样式：'
- en: '[PRE1]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `not` | Return `true` if the media query would otherwise return `false`,
    for example, `@media not all and (monochrome) { ... }` would return `@media not
    (all and (monochrome)) { ... }` |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `not` | 如果媒体查询原本会返回 `false`，则返回 `true`，例如，`@media not all and (monochrome)
    { ... }` 会返回 `@media not (all and (monochrome)) { ... }` |'
- en: '| `only` | Prevent application of styles by browsers that do not support media
    queries (assuming that fallback support has not been implemented) |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `only` | 阻止不支持媒体查询的浏览器应用样式（假设尚未实现回退支持） |'
- en: Okay, we've covered the theory around media queries; let's turn our attention
    to building some queries!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经涵盖了媒体查询的理论；让我们把注意力转向构建一些查询！
- en: Designing media queries
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计媒体查询
- en: So far, we've seen what media queries are, the options available, and our clients
    who have helped us to determine what devices we need to support. It's at this
    stage in the process that we need to determine how we're going to translate these
    requirements into real code.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了媒体查询是什么，可用的选项，以及帮助我们确定需要支持哪些设备的客户。在这个过程中，我们需要确定如何将这些需求转化为实际的代码。
- en: To help with this, let's work through a simple example. In this instance, we
    need to create a simple block of text, with a list of editors shown to the left
    of the text. Granted, it is somewhat contrived, but it does show perfectly how
    we can vary the content when displayed on different devices.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助做到这一点，让我们通过一个简单的示例来操作。在这个例子中，我们需要创建一个简单的文本块，将编辑器列表显示在文本的左侧。当然，这有点牵强，但它完美地展示了我们如何在不同的设备上变化内容。
- en: Creating a simple example
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个简单示例
- en: 'The best way to see how media queries work is in the form of a simple demo.
    In this instance, we have a simple set of requirements, in terms of what should
    be displayed at each size:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解媒体查询是如何工作的，最好的方式是通过一个简单的演示。在这个例子中，我们有一组简单的需求，关于在每个尺寸下应该显示什么：
- en: We need to cater for four different sizes of content
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要为四种不同大小的内容提供支持
- en: The small version must be shown to the authors as plain text e-mail links, with
    no decoration
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小版本必须以纯文本电子邮件链接的形式显示给作者，没有任何装饰
- en: For medium-sized screens, we will add an icon before the link
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于中等尺寸的屏幕，我们将在链接前添加一个图标
- en: On large screens, we will add an e-mail address after the e-mail links
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在大屏幕上，我们将在电子邮件链接后添加电子邮件地址
- en: On extra-large screens, we will combine the medium and large breakpoints together,
    so both icons and e-mail addresses are displayed
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在超大屏幕上，我们将结合中等和大型断点，因此将显示图标和电子邮件地址
- en: In all instances, we will have a simple container in which there will be some
    dummy text and a list of editors. The media queries we create will control the
    appearance of the editor list, depending on the window size of the browser being
    used to display the content.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，我们都会有一个简单的容器，其中将包含一些占位文本和编辑器列表。我们创建的媒体查询将控制编辑器列表的显示外观，这取决于用于显示内容的浏览器窗口大小。
- en: Let's begin by downloading and extracting a copy of `simple.html` from the code
    download that accompanies the book. This contains the markup that we will use
    to create our page.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从下载并解压书籍附带的代码下载中的`simple.html`副本开始。这包含我们将用于创建页面的标记。
- en: 'Next, add the following code to a new document. We''ll go through it section
    by section, starting with the variables created for our media queries:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将以下代码添加到一个新文档中。我们将逐节进行讲解，从为媒体查询创建的变量开始：
- en: '[PRE2]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next comes some basic styles to define margins, font sizes, and styles:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一些基本的样式，用于定义边距、字体大小和样式：
- en: '[PRE3]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We need to set sizes for each area within our demo, so go ahead and add the
    following styles:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为演示中的每个区域设置大小，所以请添加以下样式：
- en: '[PRE4]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now that the basic styles are set, we can add our media queries—beginning with
    the query catering for small screens, where we simply display an e-mail logo:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在基本样式已经设置好了，我们可以添加我们的媒体查询——从为小屏幕服务的查询开始，我们只需显示一个电子邮件标志：
- en: '[PRE5]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The medium query comes next; here, we add the word `Email` before the e-mail
    address instead:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 中等查询接下来；在这里，我们在电子邮件地址前添加单词`Email`：
- en: '[PRE6]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the large media query, we switch to showing the name first, followed by
    the e-mail (the latter extracted from the `data-email` attribute):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在大媒体查询中，我们改为首先显示名称，然后是电子邮件（后者从`data-email`属性中提取）：
- en: '[PRE7]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We finish with the extra-large query, where we use the e-mail address format
    shown in the large media query, but add an e-mail logo to it:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以超大查询结束，在这里我们使用大媒体查询中显示的电子邮件地址格式，但向其中添加一个电子邮件标志：
- en: '[PRE8]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Save the file as `simple.less`. Now that our files are prepared, let''s preview
    the results in a browser. For this, I recommend that you use **Responsive Design
    View** within Firefox (activated by pressing *Ctrl* + *Shift* + *M*). Once activated,
    resize the view to 416 x 735; here we can see that only the name is displayed
    as an e-mail link:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为`simple.less`。现在我们的文件已经准备好了，让我们在浏览器中预览结果。为此，我建议您在Firefox中使用**响应式设计视图**（通过按*Ctrl*
    + *Shift* + *M*激活）。一旦激活，调整视图大小为416 x 735；在这里我们可以看到只有名称被显示为电子邮件链接：
- en: '![Creating a simple example](img/00075.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个简单示例](img/00075.jpeg)'
- en: 'Increasing the size to 544 x 735 adds an e-mail logo, while still keeping the
    same name/e-mail format as before:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 将大小增加到544 x 735会添加一个电子邮件标志，同时仍然保持之前相同的名称/电子邮件格式：
- en: '![Creating a simple example](img/00076.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个简单示例](img/00076.jpeg)'
- en: 'If we increase it further to 716 x 735, the e-mail logo changes to the word
    **Email**, as seen in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进一步增加到716 x 735，电子邮件标志将变为单词**Email**，如下面的截图所示：
- en: '![Creating a simple example](img/00077.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个简单示例](img/00077.jpeg)'
- en: 'Let''s increase the size even further to 735 x 1029; the format changes again,
    to a name/e-mail link, followed by an e-mail address in parentheses:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步将大小增加到735 x 1029；格式再次改变，变为名称/电子邮件链接，后面跟着括号中的电子邮件地址：
- en: '![Creating a simple example](img/00078.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个简单示例](img/00078.jpeg)'
- en: 'In our final change, increase the size to 735 x 1182\. Here, we can see the
    previous style being used, but with the addition of an e-mail logo:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的最终更改中，将大小增加到735 x 1182。在这里，我们可以看到之前使用的样式，但增加了电子邮件标志：
- en: '![Creating a simple example](img/00079.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个简单示例](img/00079.jpeg)'
- en: These screenshots illustrate perfectly how you can resize your screen and still
    maintain a suitable layout for each device you decide to support; let's take a
    moment to consider how the code works.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这些截图完美地说明了您如何调整屏幕大小，同时仍然为每个您决定支持的设备保持合适的布局；让我们花点时间考虑代码是如何工作的。
- en: The normal accepted practice for developers is to work on the basis of "mobile
    first", or create the smallest view so it is perfect, then increase the size of
    the screen and adjust the content until the maximum size is reached. This works
    perfectly well for new sites, but the principle might have to be reversed if a
    mobile view is being retrofitted to an existing site.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发者来说，通常接受的实践是“从移动开始”，或者创建最小的视图使其完美，然后增加屏幕大小并调整内容，直到达到最大尺寸。这对于新网站来说效果很好，但如果要将移动视图添加到现有网站，则可能需要反转这个原则。
- en: In our instance, we've produced the content for a full-size screen first. From
    a Less perspective, there is nothing here that isn't new—we've used nesting for
    the `#sidebar` div, but otherwise the rest of this part of the code is standard
    CSS.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们首先为全尺寸屏幕生成了内容。从Less的角度来看，这里没有什么新东西——我们使用了`#sidebar`div的嵌套，但除此之外，这部分代码的其余部分都是标准的CSS。
- en: The magic happens in two parts—immediately at the top of the file, we've set
    a number of Less variables, which encapsulate the media definition strings we
    use in the queries. Here, we've created four definitions, ranging from `@small`
    (for devices between `520px` to `699px`), right through to `@xlarge` for widths
    of `1151px` or more.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 奇迹发生在两个部分——立即在文件顶部，我们设置了一系列Less变量，这些变量封装了我们查询中使用的媒体定义字符串。在这里，我们创建了四个定义，从`@small`（适用于`520px`到`699px`之间的设备），一直到`@xlarge`（宽度为`1151px`或更多）。
- en: 'We then take each of the variables and use them within each query as appropriate,
    for example, the `@small` query is set as shown in the following code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将每个变量用于每个查询中适当的位置，例如，`@small`查询设置如下所示：
- en: '[PRE9]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, we have standard CSS style rules to display an e-mail
    logo before the name/e-mail link. Each of the other queries follows exactly the
    same principle; they will each compile as valid CSS rules when running through
    Less.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们有标准的CSS样式规则来在名称/电子邮件链接之前显示电子邮件标志。其他每个查询都遵循完全相同的原则；它们在通过Less运行时将编译为有效的CSS规则。
- en: Now that we've seen how to construct media queries using Less, it's worth taking
    a moment to explore how best to view our demos. While it can be argued that simply
    resizing the browser window might suffice, we can go further and take advantage
    of a number of tools to help with the process.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何使用Less构建媒体查询，值得花点时间来探索如何最好地查看我们的演示。虽然可以争辩说简单地调整浏览器窗口大小可能就足够了，但我们还可以更进一步，利用一系列工具来帮助这个过程。
- en: Using tools to resize the screen
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用工具调整屏幕大小
- en: In the previous section, we took a look at a simple example of creating media
    queries to show or hide elements when a list of editors is resized. We used Firefox's
    **Responsive Design View** option to resize the screen for us; this is one option
    we can use to cleanly resize a screen for mobile viewing; it's a critical tool
    to work with media queries.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们查看了一个创建媒体查询的简单示例，用于在调整编辑器列表大小时显示或隐藏元素。我们使用了Firefox的**响应式设计视图**选项来调整屏幕大小；这是我们用来干净地调整屏幕以供移动查看的一个选项；它是处理媒体查询的一个关键工具。
- en: You can use special tools for this purpose, but most modern browsers already
    have a perfectly adequate tool built in for this purpose. Let's take a look at
    a few in turn.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用特殊工具来完成此目的，但大多数现代浏览器已经内置了用于此目的的完全足够的工具。让我们依次看看几个。
- en: 'For Firefox users, press *Ctrl* + *Shift* + *M* to activate **Responsive Design
    View**, as shown in the following screenshot:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Firefox用户，按下 *Ctrl* + *Shift* + *M* 来激活**响应式设计视图**，如下面的截图所示：
- en: '![Using tools to resize the screen](img/00080.jpeg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![使用工具调整屏幕大小](img/00080.jpeg)'
- en: 'However, if your preference is Google Chrome, then the same functionality is
    available—it is part of the developer tools set, which can be activated by pressing
    *Ctrl* + *Shift* + *I*:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你的首选是谷歌Chrome，那么同样的功能也是可用的——它是开发者工具集的一部分，可以通过按下 *Ctrl* + *Shift* + *I*
    来激活：
- en: '![Using tools to resize the screen](img/00081.jpeg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![使用工具调整屏幕大小](img/00081.jpeg)'
- en: 'If you are an Opera user, then there is the dedicated Opera Mobile Emulator,
    which is available at [http://www.opera.com/developer/mobile-emulator](http://www.opera.com/developer/mobile-emulator),
    with versions available for the Windows, Mac, and Linux platforms:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一名Opera用户，那么有一个专门的Opera移动模拟器，可在[http://www.opera.com/developer/mobile-emulator](http://www.opera.com/developer/mobile-emulator)找到，支持Windows、Mac和Linux平台：
- en: '![Using tools to resize the screen](img/00082.jpeg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![使用工具调整屏幕大小](img/00082.jpeg)'
- en: 'If you need to use IE to display your site in a responsive format, then unfortunately
    your options are somewhat limited—at least to IE10\. IE has a **Resize** option
    (as shown in the following screenshot), but it resizes the whole window, rather
    than show a view within a normal-sized window:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要使用IE以响应式格式显示你的网站，那么很遗憾，你的选择相当有限——至少是IE10。IE有一个**调整大小**选项（如下面的截图所示），但它调整的是整个窗口，而不是在正常大小的窗口内显示视图：
- en: '![Using tools to resize the screen](img/00083.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![使用工具调整屏幕大小](img/00083.jpeg)'
- en: It's not the perfect option, but then the best practice is to develop in browsers
    that are more standards-compliant (such as Google Chrome or Firefox). We can then
    effect any tweaks for IE later.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是完美的选择，但最佳实践是在更符合标准的浏览器（如谷歌Chrome或Firefox）中进行开发。然后我们可以对IE进行任何调整，以便稍后进行。
- en: Tip
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is worth noting that if IE11 is used, then it can be set to work in a similar
    way to Google Chrome. We can set the emulation mode to display a small window,
    within a large/full-size browser window.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，如果使用IE11，则可以设置为以类似于谷歌Chrome的方式工作。我们可以设置模拟模式以在大型/完整大小的浏览器窗口中显示一个小窗口。
- en: If you prefer not to use built-in browser tools, then there are other tools
    available that can be used instead. Two tools that are of particular note are
    ish from Brad Frost, available at [http://bradfrostweb.com/demo/ish/](http://bradfrostweb.com/demo/ish/),
    and ViewPort Resizer by Malte Wassermann, available at [http://lab.maltewassermann.com/viewport-resizer/](http://lab.maltewassermann.com/viewport-resizer/).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想使用内置的浏览器工具，那么还有其他工具可供选择。两个值得注意的工具是Brad Frost的ish，可在[http://bradfrostweb.com/demo/ish/](http://bradfrostweb.com/demo/ish/)找到，以及Malte
    Wassermann的Viewport Resizer，可在[http://lab.maltewassermann.com/viewport-resizer/](http://lab.maltewassermann.com/viewport-resizer/)找到。
- en: Let's now change focus and turn our attention to building something more in-depth,
    where we can use Less in a more real-world example.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在改变焦点，将注意力转向构建更深入的东西，我们可以使用Less在更真实的例子中。
- en: Building responsive pages
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建响应式页面
- en: Adding media queries to any site is possible; the key to it is deciding what
    breakpoints you want to support and the elements that should be displayed at each
    breakpoint. This can be as little as just the one breakpoint, or many. It all
    depends on what happens to the elements when they are resized and whether you
    need to alter the code to improve their appearance at a particular breakpoint.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 向任何网站添加媒体查询都是可能的；关键是决定你想要支持哪些断点以及在每个断点应该显示哪些元素。这可以少到只有一个断点，也可以很多。这完全取决于元素在调整大小时会发生什么，以及你是否需要修改代码以在特定断点改善它们的显示效果。
- en: 'Now that we''ve seen basic media queries in action, we''re going to create
    something more complex, in the form of a basic welcome page that would not be
    out of place on a portfolio site. We''ll start with the basic full-size page,
    which will look something like this screenshot:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了基本媒体查询的实际应用，我们将创建一个更复杂的东西，形式为一个基本的欢迎页面，这样的页面在作品集中也不会显得突兀。我们将从基本的完整页面开始，其外观可能类似于以下截图：
- en: '![Building responsive pages](img/00084.jpeg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![构建响应式页面](img/00084.jpeg)'
- en: This is a very simple page, created as if it were part of a portfolio site.
    It's a perfect opportunity to explore how we can use some simple media queries
    to resize the page for a mobile platform.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的页面，仿佛它是作品集网站的一部分。这是一个完美的机会来探索我们如何使用一些简单的媒体查询来调整页面以适应移动平台。
- en: Building the basic page
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建基本页面
- en: Let's start by extracting a copy of the `responsive.html` file that is in the
    code download that accompanies this book. This contains a simple demo page, set
    to appear as if it could form the front page of a portfolio site. Save this file
    into your project folder.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从提取本书附带的代码下载中的 `responsive.html` 文件副本开始。这个文件包含一个简单的演示页面，设置为看起来可以成为个人作品集网站的前页。将此文件保存到你的项目文件夹中。
- en: We also need a copy of the `reset.less` file that is in the same code download;
    go ahead and extract this to the project folder as well. This provides some basic
    style resets to mimic what might happen when creating pages for display on your
    site.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要 `reset.less` 文件的副本，它也在相同的代码下载中；请将其提取到项目文件夹中。这提供了一些基本的样式重置，以模拟在创建用于在网站上显示的页面时可能发生的情况。
- en: Note
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the purposes of this demo, I will assume that you are using Sublime Text,
    which is preconfigured to compile Less files into valid CSS when saving content.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本演示的目的，我将假设你正在使用 Sublime Text，它预先配置为在保存内容时将 Less 文件编译成有效的 CSS。
- en: 'Next, open your text editor of choice and add the following code; we''ll go
    through it in detail, section by section. We start with setting some basic styles,
    to define each area within the page:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开你选择的文本编辑器并添加以下代码；我们将逐节详细讲解。我们首先设置一些基本样式，以定义页面内的每个区域：
- en: '[PRE10]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we need to define some styles for our header. This is one of the elements
    that will be replaced when we resize the page to a smaller screen:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为我们的页眉定义一些样式。这是我们将在调整页面到较小屏幕时被替换的元素之一：
- en: '[PRE11]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The remaining two basic styles cover the **Skip to Main Content** link that
    appears when the screen is resized, and the main image on screen respectively:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的两个基本样式涵盖了屏幕调整大小时出现的**跳转到主要内容**链接以及屏幕上的主图像：
- en: '[PRE12]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Save the file as `responsive.less`. If we preview the results in a browser,
    we will see something akin to the screenshot shown at the beginning of this example.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为 `responsive.less`。如果我们浏览器的结果，我们将看到类似于本例开头所示截图的内容。
- en: 'However, if we resize the browser window using a tool such as Responsive Design
    View in Firefox, it will begin to break the design—the toolbar loses tabs, the
    header has a large gap, and the right side of the image has been chopped off,
    as shown in the following screenshot:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们使用像 Firefox 中的响应式设计视图这样的工具调整浏览器窗口大小，它将开始破坏设计——工具栏丢失标签，页眉有一个很大的间隙，图像的右侧已经被裁剪，如下面的截图所示：
- en: '![Building the basic page](img/00085.jpeg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![构建基本页面](img/00085.jpeg)'
- en: We can fix this by adding in a media query to manage what happens when the screen
    is resized. Let's take a look at how this works in action.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过添加一个媒体查询来解决这个问题，以管理屏幕调整大小时发生的情况。让我们看看这个在实际操作中是如何工作的。
- en: Adding responsive queries
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加响应式查询
- en: We've set the basic styles for our portfolio page and can clearly see that elements
    are beginning to break when the page is resized. Let's fix this by adding in the
    media query that redefines what happens when the screen is resized.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为我们的作品集页面设置了基本样式，并且可以清楚地看到，当页面调整大小时，元素开始断裂。让我们通过添加媒体查询来修复这个问题，重新定义屏幕调整大小时发生的情况。
- en: 'Start by adding the following at the head of the `responsive.less` file:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 `responsive.less` 文件的头部添加以下内容：
- en: '[PRE13]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we need to add the replacement styles that will kick in when using a
    mobile platform. Immediately below the Less styles in `responsive.less`, go ahead
    and add the following code, beginning with the styles that control the display
    of a **Skip to Main Content** button that appears at the top of the page when
    it has been resized:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加在移动平台上使用时将激活的替换样式。在 `responsive.less` 中的 Less 样式下方，请添加以下代码，从控制页面顶部出现**跳转到主要内容**按钮的样式开始：
- en: '[PRE14]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next comes the styles required to resize the main content area, side bar, and
    header:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是调整主内容区域、侧边栏和页眉所需的样式：
- en: '[PRE15]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we need to alter the styles used to redefine the navigation options
    that now appear as a stacked list of buttons, when the page is resized:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要修改用于重新定义导航选项的样式，当页面调整大小时，这些选项现在会显示为按钮堆叠列表：
- en: '[PRE16]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Resave the file as `responsive.less`. If you''ve used Sublime Text as your
    editor, it will convert it to a compiled CSS file. Let''s now preview the results
    in a browser:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件重新保存为 `responsive.less`。如果你使用 Sublime Text 作为编辑器，它将将其转换为编译后的 CSS 文件。现在让我们在浏览器中预览结果：
- en: '![Adding responsive queries](img/00086.jpeg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![添加响应式查询](img/00086.jpeg)'
- en: At full size, there will be no change (which is anticipated), but when the page
    is resized, we can already see an improvement on the page. The title has been
    repositioned so there is less of a gap below it, the toolbar has been reset to
    display as buttons, the image has been resized to better fit on the page, and
    the content has been repositioned into a vertical format. We can also see the
    addition of a button to allow us to jump down to the main content on the page.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在全尺寸时，不会有任何变化（这是预期的），但当页面大小调整时，我们已经在页面上看到了改进。标题已经被重新定位，以减少其下方的间隙，工具栏已经被重置以显示为按钮，图片已经被调整大小以更好地适应页面，内容已经被重新定位为垂直格式。我们还可以看到添加了一个按钮，允许我们跳转到页面上的主要内容。
- en: Excellent, our page now looks and works as we expect in a mobile capacity! If
    we increase or decrease the size of the browser window, we can see the content
    reflowing to fit the available space, based on the media query we created in `responsive.less`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 极好，我们的页面现在在移动设备上的外观和功能正如我们所期望的那样！如果我们增加或减小浏览器窗口的大小，我们可以看到内容根据我们在`responsive.less`中创建的媒体查询重新流动以适应可用空间。
- en: So, what's the magic that's making this work? From the code we've worked with,
    you might be forgiven if you thought it was all of the code in this section. It's
    a perfectly valid statement. After all, all of the styles are needed to ensure
    content is correctly placed when used in a mobile environment.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，是什么魔法让这一切都工作得如此顺利？从我们使用的代码来看，如果你认为这部分的全部代码都是关键，你可能会被原谅。这是一个完全有效的陈述。毕竟，所有这些样式都是必需的，以确保在移动环境中使用时内容被正确放置。
- en: 'In reality though, there are only two statements that we''ve used that are
    key to the whole process: `@mobile: ~"screen and (max-width: 30rem)"`; and `@media
    @mobile {…}`.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，实际上我们只使用了两个关键语句：`@mobile: ~"screen and (max-width: 30rem)"`；和`@media @mobile
    {…}`。'
- en: (Okay, I cheated slightly, but only by one character!)
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: （好吧，我稍微作弊了一下，但只多了一个字符！）
- en: The first statement is a Less variable that we've set as our media type and
    the feature we will be testing. The second one calls in that variable as the test.
    Everything in between is standard CSS styling and is being used to rework the
    layout of the page when used to display content on a mobile device.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个语句是一个Less变量，我们将其设置为我们的媒体类型和我们将要测试的功能。第二个语句调用该变量作为测试。介于两者之间的所有内容都是标准的CSS样式，并且在使用于在移动设备上显示内容时被用来重新设计页面布局。
- en: 'In this example, we''ve used a large image, which has been set with `width:
    100%`. While it will resize perfectly when the page size is reduced or increased,
    it still means that we''re potentially loading a large image on a small device—not
    a good idea! We can improve on this by asking the browser to load different versions
    of the image, depending on which media query is being applied. Let''s take a look
    and see how Less can help remove some of the burden in managing this process.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个例子中，我们使用了一张大图片，其宽度被设置为`width: 100%`。虽然当页面大小减小或增加时，它将完美地调整大小，但这仍然意味着我们可能在小型设备上加载了一个大图片——这不是一个好主意！我们可以通过要求浏览器根据应用的媒体查询加载不同版本的图片来改进这一点。让我们看看Less如何帮助减轻管理此过程的一些负担。'
- en: Adding responsive images
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加响应式图片
- en: Hands up if you own a mobile device, such as a tablet or smartphone? If you
    do, then you will likely have seen how long pages take to load, when they haven't
    been sized for mobile use.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你拥有一台移动设备，比如平板电脑或智能手机，请举手？如果你有，那么你可能会看到当页面没有针对移动使用进行缩放时，页面加载需要多长时间。
- en: In the example we've just worked on, we set a 100 percent value for the width
    of `#banner img`—in most cases this will work perfectly fine; it does mean that
    we are loading a large photo, which is not ideal on a mobile device! Instead,
    we can make a simple change to our media rules to load a smaller image when the
    screen is reduced in size.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们刚刚工作的例子中，我们将`#banner img`的宽度设置为100%；在大多数情况下，这将完美地工作；这也意味着我们正在加载一张大照片，这在移动设备上并不理想！相反，我们可以简单修改我们的媒体规则，在屏幕尺寸减小时加载一个较小的图片。
- en: Note
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For this demo, I've resized a copy of the abstract image to a smaller 461px
    x 346px version and saved it as `abstract_small.jpg`. This size is small enough
    to see the change take effect when the screen is suitably resized to smaller dimensions.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个演示，我将摘要图片的一个副本调整到较小的461px x 346px版本，并保存为`abstract_small.jpg`。这个尺寸足够小，当屏幕适当地调整到更小的尺寸时，我们可以看到变化的效果。
- en: Let's start by downloading and extracting copies of `responsive.html` and `responsive.less`
    from the code download for this book, then saving them as `responsive_img.html`
    and `responsive_img.less`, respectively.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从下载并提取本书代码下载中的`responsive.html`和`responsive.less`的副本开始，然后分别保存为`responsive_img.html`和`responsive_img.less`。
- en: 'Open up `responsive_img.html`, then alter the line as shown:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`responsive_img.html`，然后修改如所示行：
- en: '[PRE17]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, add the highlighted line to the media query, as indicated:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按照指示将高亮行添加到媒体查询中：
- en: '[PRE18]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Save both files. If we then preview the results in a browser, you should not
    see any visible change (which we would expect). However, we will see a change
    in the URL for the image if we open up the developer tools within the browser
    and reduce the size of the screen:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 保存两个文件。如果我们然后在浏览器中预览结果，您应该看不到任何可见的变化（这是我们预期的）。然而，如果我们打开浏览器中的开发者工具并缩小屏幕尺寸，我们会看到图像的URL有所变化：
- en: '![Adding responsive images](img/00087.jpeg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![添加响应式图像](img/00087.jpeg)'
- en: The beauty of this is that we can save a few kilobytes, which makes it quicker
    to view the site on mobile devices, as there is less to download into the browser.
    We can, however, go to the complete extreme by replacing images with high definition
    resolution versions, but only if the device supports it! Intrigued? Let's take
    a look at how this works, using the `retina.js` Less mixin, available at [http://imulus.github.io/retinajs/](http://imulus.github.io/retinajs/).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优点是我们可以节省几KB，这使得在移动设备上查看网站更快，因为浏览器需要下载的内容更少。然而，我们可以通过用高分辨率版本替换图像来走完全极端，但前提是设备支持它！感兴趣吗？让我们看看这是如何工作的，使用可从[http://imulus.github.io/retinajs/](http://imulus.github.io/retinajs/)获取的`retina.js`
    Less混合器。
- en: Incorporating retina support for images
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成图像视网膜支持
- en: In the previous example, we saw how easy it is to adjust our Less code so that
    a smaller image can be loaded when screen estate has been resized to mimic a mobile
    device.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们看到了如何轻松调整我们的Less代码，以便在屏幕尺寸调整以模拟移动设备时加载较小的图像。
- en: However, many of you will own devices (such as iPads or iPhones) that have retina
    support, or which can support the display of high-resolution images that otherwise
    would not display very well on regular PCs. We can take advantage of this when
    working with Less. In fact, a Less mixin has already been created, which we can
    get from [https://raw.githubusercontent.com/imulus/retinajs/master/src/retina.less](https://raw.githubusercontent.com/imulus/retinajs/master/src/retina.less).
    Save this as `retina.less` within our project folder.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你们中的许多人将拥有具有视网膜支持或能够显示高分辨率图像的设备（如iPad或iPhone），这些图像在其他情况下在普通PC上显示效果不佳。我们可以利用Less来利用这一点。实际上，已经创建了一个Less混合器，我们可以从[https://raw.githubusercontent.com/imulus/retinajs/master/src/retina.less](https://raw.githubusercontent.com/imulus/retinajs/master/src/retina.less)获取它。将此保存为项目文件夹中的`retina.less`。
- en: Next, we need to save a copy of the `abstract.jpg` file that we've been using,
    as `abstract@2x.jpg`—this will become our hi-res version. Take a copy of the original
    `abstract.jpg` file and compress it using a JPG compressor such as the online
    service from [http://www.jpeg-optimizer.com](http://www.jpeg-optimizer.com). Save
    the compressed version as `abstract.jpg`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要保存我们一直在使用的`abstract.jpg`文件的副本，作为`abstract@2x.jpg`——这将成为我们的高分辨率版本。将原始的`abstract.jpg`文件复制一份，并使用JPG压缩器（如来自[http://www.jpeg-optimizer.com](http://www.jpeg-optimizer.com)的在线服务）进行压缩。将压缩版本保存为`abstract.jpg`。
- en: 'Now that our images are prepared, open up `responsive.html` and modify the
    lines as shown:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了图像，打开`responsive.html`并修改如所示行：
- en: '[PRE19]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Save this as `responsive_hd.html`. Next, open `responsive.less` and add this
    line at the head of the file:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`responsive_hd.html`。接下来，打开`responsive.less`并在文件开头添加此行：
- en: '[PRE20]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, add the following line at the end of the file:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在文件末尾添加以下行：
- en: '[PRE21]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In a production environment, it is more likely that this would be within a media
    query—adding it at the end is sufficient to illustrate how it works, for the purposes
    of this demo.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，这更有可能是在媒体查询中——为了演示目的，将其添加到末尾就足够了。
- en: 'Save this as `responsive_hd.less`. We can then preview the results in a browser.
    For best results, I recommend the following:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`responsive_hd.less`。然后我们可以在浏览器中预览结果。为了获得最佳效果，我建议以下操作：
- en: Preview the results using a local web server or online webspace—a good local
    web server to try is WAMP ([http://www.wampserver.de](http://www.wampserver.de)
    for Windows) or MAMP ([http://www.mamp.info](http://www.mamp.info) for MAC).
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用本地Web服务器或在线Web空间预览结果——一个值得尝试的本地Web服务器是WAMP ([http://www.wampserver.de](http://www.wampserver.de)
    for Windows) 或 MAMP ([http://www.mamp.info](http://www.mamp.info) for MAC)。
- en: If possible, try to view the results within Google Chrome if you can't view
    them online via a retina-enabled device. Google Chrome has the ability to emulate
    different devices; if we enable this feature and set it to show as an iPhone 5,
    for example:![Incorporating retina support for images](img/00088.jpeg)
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可能，如果你无法通过视网膜屏设备在线查看结果，尝试在Google Chrome中查看结果。Google Chrome具有模拟不同设备的能力；如果我们启用此功能并将其设置为显示iPhone
    5，例如：![为图像添加视网膜支持](img/00088.jpeg)
- en: 'We can clearly see that the change has been made:'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以清楚地看到已经进行了更改：
- en: '![Incorporating retina support for images](img/00089.jpeg)'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![为图像添加视网膜支持](img/00089.jpeg)'
- en: While there should be no material change to the layout of the web page, using
    this trick means that a higher resolution image can be used when a device supports
    it, or be replaced with a standard resolution image if the device does not have
    retina support.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然网页布局不应该有实质性的变化，但使用这个技巧意味着当设备支持时可以使用更高分辨率的图像，或者在不支持视网膜屏的设备上替换为标准分辨率图像。
- en: 'To test whether a device supports the **device-pixel-ratio** test we used here,
    browse to [http://www.quirksmode.org/css/mediaqueries/devicepixelratio.html](http://www.quirksmode.org/css/mediaqueries/devicepixelratio.html).
    For example, we can confirm that `webkit-device-pixel-ratio` is supported, when
    testing with an iPad:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试设备是否支持这里使用的**device-pixel-ratio**测试，请浏览到[http://www.quirksmode.org/css/mediaqueries/devicepixelratio.html](http://www.quirksmode.org/css/mediaqueries/devicepixelratio.html)。例如，当使用iPad进行测试时，我们可以确认`webkit-device-pixel-ratio`是支持的：
- en: '![Incorporating retina support for images](img/00090.jpeg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![为图像添加视网膜支持](img/00090.jpeg)'
- en: Let's move on and continue with this theme of using external libraries by taking
    a look at what external libraries are available for use with Less, when working
    with media queries.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续这个主题，通过查看使用Less处理媒体查询时可用哪些外部库来继续使用外部库。
- en: Using prebuilt libraries
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用预构建的库
- en: So far we've covered the basics of creating media queries using Less—it's at
    this point that you're probably thinking, "Surely there's a prebuilt library we
    could use to help us here, right…?"
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了使用Less创建媒体查询的基础——这时你可能正在想，“当然，我们可以使用预构建的库来帮助我们，对吧……？”
- en: Well, in this instance, unfortunately there isn't a prebuilt library we can
    use; it's down to us to build each query manually! This is no bad thing, as media
    queries can be seen as something of a workaround, which can lead to bloated code
    if we're not careful. It will be difficult, if not near impossible, to cater for
    all breakpoints. Each project will require support for a specific set of break
    points, which will not necessarily be the same for every site.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，在这种情况下，很遗憾我们没有可用的预构建库；我们必须手动构建每个查询！这并不是坏事，因为如果不小心，媒体查询可能会被视为一种折衷方案，这可能导致代码膨胀。要为所有断点提供支持将非常困难，甚至几乎是不可能的。每个项目都需要支持特定的断点集，而这些断点对于每个网站来说可能并不相同。
- en: 'In addition, media queries are natively supported in all modern browsers; the
    only exception is IE, where Version 8 or below is not supported. To get around
    this, there are three options:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，媒体查询在所有现代浏览器中都是原生支持的；唯一的例外是IE，其中版本8或以下不支持。为了解决这个问题，有三个选项：
- en: We can use the fallback library media-query-to-type created by Mike Morici,
    and which we can download from [https://github.com/himedlooff/media-query-to-type](https://github.com/himedlooff/media-query-to-type).
    This converts media queries into media types, which are supported as far back
    as IE6.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用Mike Morici创建的回退库media-query-to-type，我们可以从[https://github.com/himedlooff/media-query-to-type](https://github.com/himedlooff/media-query-to-type)下载它。这个库将媒体查询转换为媒体类型，这些类型支持回退到IE6。
- en: Alternatively, we can use Modernizr (from [http://www.modernizr.com](http://www.modernizr.com))
    to detect when media queries are used.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，我们可以使用Modernizr（来自[http://www.modernizr.com](http://www.modernizr.com)）来检测媒体查询的使用情况。
- en: Another library that can be used is Respond.js, created by Scott Jehl and available
    from [https://github.com/scottjehl/Respond](https://github.com/scottjehl/Respond).
    This is effectively a drop-in library that can convert most media queries into
    formats that IE8 or below can understand.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个可以使用的库是Respond.js，由Scott Jehl创建，可在[https://github.com/scottjehl/Respond](https://github.com/scottjehl/Respond)获取。这是一个有效的即插即用库，可以将大多数媒体查询转换为IE8或以下版本可以理解的格式。
- en: Although this chapter is about using Less to create media queries, it is nevertheless
    important to consider which browsers should be supported and how far you will
    be willing to go to get media queries to work in older browsers such as IE6 to
    8.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本章是关于使用Less创建媒体查询的，但考虑应该支持哪些浏览器以及你愿意走多远以使媒体查询在旧浏览器（如IE6到8）中工作仍然很重要。
- en: Note
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To help maintain clarity, we can use conditional hacks to only load the media-query-to-type
    or Respond.js libraries when we detect that IE9 or below has been used:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持清晰，我们可以使用条件技巧，仅在检测到IE9或以下版本已被使用时才加载media-query-to-type或Respond.js库：
- en: '[PRE22]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: While in some respects we might feel obligated to provide the same environment
    in all cases (including for old IE), this is not necessarily a worthwhile exercise;
    supporting a smaller number well is better than average support for a lot of browsers!
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在某些方面我们可能觉得有义务在所有情况下（包括旧IE）提供相同的环境，但这并不一定是一项值得做的练习；对少量浏览器提供良好的支持比大量浏览器的平均支持要好！
- en: Summary
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Media queries have rapidly become a de facto part of responsive web design.
    Throughout this chapter, we saw how to use Less to make the process easier to
    manage within your code.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询迅速成为响应式网页设计的既定事实。在本章中，我们看到了如何使用Less使代码中的管理过程更加容易。
- en: We started our journey through media queries with a brief introduction, followed
    by a review of some of the limitations that we must work around and considerations
    that need to be considered when working with clients.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过一个简要介绍开始了对媒体查询的旅程，随后回顾了一些我们必须解决的限制以及在与客户合作时需要考虑的注意事项。
- en: Next came a brief exploration of the media types and features that we can use
    when working with Less; we took a look at the logical operators we can also use
    to create queries that test for multiple types or features. We then covered how
    to create a simple media query, with a quick look at how best to show responsive
    views in browsers, before continuing with a more practical example of a single
    page from a demo portfolio site. We saw how first we can create our basic page,
    before adding the requisite code to turn it into a responsive one.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们对在Less中使用时可以使用的媒体类型和功能进行了简要探索；我们查看了一些逻辑运算符，这些运算符也可以用来创建测试多个类型或功能的查询。然后，我们介绍了如何创建一个简单的媒体查询，快速浏览了如何在浏览器中最佳地显示响应式视图，在继续讨论一个演示作品集中单页的更实际示例之前。我们看到了如何首先创建我们的基本页面，然后添加必要的代码将其转换为响应式页面。
- en: We then moved on to take a brief look at how to improve the image on the page,
    by first making it more responsive, then switching to displaying high-resolution
    images when retina support is available and enabled. We then closed out the chapter
    with a look at what prebuilt libraries are available that can help when working
    with Less.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们简要地探讨了如何通过首先使其更具响应性，然后在支持并启用视网膜的情况下切换到显示高分辨率图像来改进页面上的图像。然后，我们通过查看在处理Less时可以使用的预构建库来结束本章。
- en: In the next chapter, we're going to move onto some more practical uses of Less,
    with a look at using Less within a CMS, such as WordPress.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将转向一些Less的更实际用途，探讨在CMS（如WordPress）中使用Less。
