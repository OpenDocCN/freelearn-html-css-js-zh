- en: Chapter 8. Media Queries with Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've seen how to use Less to manage the appearance of our content,
    what about making sure it fits on the page? Ah yes—isn't this where media queries
    come in to play…?
  prefs: []
  type: TYPE_NORMAL
- en: Before the advent of smartphones, most websites would be built at a fixed width—small
    enough to fit on laptops or PCs so that most end users would have a consistent
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: However, now that more and more people are using mobile devices, the need to
    design content that can be seamlessly viewed on each device has increased. Gone
    are the days where you had to have the skills of a surgeon to view content, and
    work a mobile device—people are increasingly more comfortable viewing content
    on mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: How do we get around this? Easy—welcome to the world of media queries! An essential
    component of responsive web design, we can use media queries to build a site that
    can be seamlessly viewed over multiple platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'I guess you''re thinking—how can Less help here? No problem. In this chapter,
    we''ll see how Less can make creating media queries a cinch; we will cover the
    following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How media queries work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's wrong with CSS?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting client criteria
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building media queries using Less
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ready to have some fun creating media queries? Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing media queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've ever spent time creating content for sites, particularly for display
    on a mobile platform, then you might have come across media queries.
  prefs: []
  type: TYPE_NORMAL
- en: For those of you who are new to the concept, media queries are a means of tailoring
    the content that is displayed on screen when the viewport is resized to a smaller
    size. Historically, websites were always built at a static size—with more and
    more people viewing content on smartphones and tablets, this means viewing them
    became harder, as scrolling around a page can be a tiresome process!
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, this became less of an issue with the advent of media queries—they
    help us with what should or should not be displayed when viewing content on a
    particular device. Throughout this chapter, we'll take a brief look at what they
    are, how they work, and focus more on how you can use Less to create them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Almost all modern browsers offer native support for media queries—the only
    exception being IE Version 8 or below, where it is not supported natively:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing media queries](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Media queries always begin with `@media` and consist of two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing media queries](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The first part, `only screen`, determines the media type where a rule should
    apply—in this case, it will only show the rule if we're viewing content on screen;
    content viewed when printed can easily be different.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second part, or media feature, `(min-width: 530px) and (max-width: 949px)`,
    means the rule will only apply between a screen size set at a minimum of `530px`
    and a maximum of `949px`. This will rule out any smartphones and will apply to
    larger tablets, laptops, or PCs.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are literally dozens of combinations of media queries to suit a variety
    of needs—for some good examples, visit [http://cssmediaqueries.com/overview.html](http://cssmediaqueries.com/overview.html),
    where you can see an extensive list, along with an indication of whether it is
    supported in the browser you normally use.
  prefs: []
  type: TYPE_NORMAL
- en: Media queries are perfect to dynamically adjust your site to work in multiple
    browsers—indeed, they are an essential part of a responsive web design. While
    browsers support media queries, there are some limitations we need to consider;
    let's take a look at these now.
  prefs: []
  type: TYPE_NORMAL
- en: The limitations of CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we spend any time working with media queries, there are some limitations
    we need to consider; these apply equally if we were writing using Less or plain
    CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: Not every browser supports media features uniformly; to see the differences,
    visit [http://cssmediaqueries.com/overview.html](http://cssmediaqueries.com/overview.html)
    using different browsers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current thinking is that a range of breakpoints has to be provided; this can
    result in a lot of duplication and a constant battle to keep up with numerous
    different screen sizes!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `@media` keyword is not supported in IE8 or below; you will need to use
    JavaScript or jQuery to achieve the same result, or a library such as **Modernizr**
    to provide a graceful fallback option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing media queries will tie your design to a specific display size; this
    increases the risk of duplication as you might want the same element to appear
    in multiple **breakpoints**, but have to write individual rules to cover each
    breakpoint.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Breakpoints are points where your design will break if it is resized larger
    or smaller than a particular set of given dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: The traditional thinking is that we have to provide different style rules for
    different breakpoints within our style sheets. While this is valid, ironically
    it is something we should not follow! The reason for this is the potential proliferation
    of breakpoint rules that you might need to add, just to manage a site.
  prefs: []
  type: TYPE_NORMAL
- en: With care and planning and a design-based breakpoints mindset, we can often
    get away with a fewer number of rules. As you will see in the example towards
    the end of the chapter, there is only one breakpoint given, but it works in a
    range of sizes without the need for more breakpoints. The key to the process is
    to start small, then increase the size of your display. As soon as it breaks your
    design (this is where your first breakpoint is) add a query to fix it, and then,
    keep doing it until you get to your maximum size.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, so we've seen what media queries are; let's change tack and look at what
    you need to consider when working with clients, before getting down to writing
    the queries in code.
  prefs: []
  type: TYPE_NORMAL
- en: Setting client criteria
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The hardest part of working with media queries isn't in the design of the code,
    but in agreeing with clients as to what devices should be supported!
  prefs: []
  type: TYPE_NORMAL
- en: Some clients might want to have the same experience throughout their site, irrespective
    of the device or platform being used to view the content. This might have worked
    when the Internet was still being viewed on normal-sized screens. This is no longer
    the case; more and more people are viewing content on mobile or other such devices.
    The use of mobile devices is such that numbers are increasing rapidly, to the
    extent that they will soon overtake those who still use a desktop PC to view content.
  prefs: []
  type: TYPE_NORMAL
- en: The phrase, "Expectation is the root of all heartache" (from an anonymous source,
    but often misquoted as being Shakespeare), is particularly apt—it is key in deciding
    what should and should not be included in each breakpoint; if not, you are more
    likely to land yourself in trouble with your client!
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating media queries as part of constructing a client''s site, there
    are some key points to keep in mind, which will form the basis for conversations
    with your client:'
  prefs: []
  type: TYPE_NORMAL
- en: At the start, make it clear to your client what responsive design is all about—making
    content fit a particular screen size. Impress on them that it is perfectly acceptable
    practice for the site not to show all of the content on mobile devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the desire is to have the same experience on all devices, then this will
    naturally add a significant amount of code and require extra resources—is it absolutely
    necessary? It is far better to work with the client to create content that will
    work on multiple devices from the same site, but not every element will be displayed
    on each device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be clear with the customer what should and should not be included at each breakpoint—they
    might want content such as terms and conditions to be displayed, but this might
    put mobile users off from viewing the site, if they are long.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If clients have difficulty in grasping the whole concept of responsive design,
    then get them to look at their site in a mobile device—they should see that it
    looks poor. Mobile devices work better with content and less so with interaction
    or searching—media queries can hide these elements on screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A more radical approach will be to limit what can be done on a mobile device—this
    works perfectly for airline sites, where they might only want customers to book
    tickets or check their reservations. This requires more work upfront to hide more
    elements by default, but is worth the effort required to produce a site that is
    clean, fast, and works well on mobile devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From a technical perspective, it is critical to determine which elements can
    be scaled, moved, omitted, or even collapsed on screen, at a particular breakpoint.
    Consideration should also be given to other elements when used in a mobile environment,
    such as the forms of interaction used, resizing of fonts, and cropping of images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is one critical question that needs to be agreed with the client—should
    the site work for a number of devices, or should it just work when the screen
    is resized and elements break at certain points? There is an emerging thought
    that says we can't hope to support every device and that we should just try resizing
    a screen and then fix any element that breaks at a certain point during the resizing
    process. We can, of course, use the emulation features available within Chrome
    or Opera—even after doing this, we still cannot hope to cater for every device!
  prefs: []
  type: TYPE_NORMAL
- en: Okay, let's move on and turn our attention to creating media queries; before
    we write the code, we will have a quick recap on the options available when creating
    the queries.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring media queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating media queries, we've seen how they split into two parts—the first
    part consists of a media type, which defines the environment where the media query
    should apply (that is, on screen or in print). It should be noted that none of
    these are specific to Less—they are all valid CSS media types that we can use
    when creating our media queries using Less.
  prefs: []
  type: TYPE_NORMAL
- en: Defining media types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although it is likely that we might only need to use print or screen when creating
    our Less code, there are other options available; here''s a full list of elements
    that might or might not be supported by all browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Feature | Intended for |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `all` | Most devices; this is default, unless otherwise specified |'
  prefs: []
  type: TYPE_TB
- en: '| `braille` | Use in braille tactile devices |'
  prefs: []
  type: TYPE_TB
- en: '| `embossed` | Paged braille printers |'
  prefs: []
  type: TYPE_TB
- en: '| `handheld` | Handheld devices, where screen size is small and bandwidth is
    limited |'
  prefs: []
  type: TYPE_TB
- en: '| `print` | Producing content that is viewed on screen in the print preview
    mode |'
  prefs: []
  type: TYPE_TB
- en: '| `projection` | Projected presentations when using devices such as projectors
    |'
  prefs: []
  type: TYPE_TB
- en: '| `screen` | Color computer screens |'
  prefs: []
  type: TYPE_TB
- en: '| `speech` | Use with speech synthesizers |'
  prefs: []
  type: TYPE_TB
- en: '| `tty` | Media using a fixed-pitch character grid, such as terminals or teletypes
    |'
  prefs: []
  type: TYPE_TB
- en: '| `tv` | Use with television devices, with low resolution, color, limited scrolling,
    and sound |'
  prefs: []
  type: TYPE_TB
- en: Exploring media features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the media type has been set, we also need to set the media feature that
    should be tested; the media query will return true if it can match both the type
    of device the media is being displayed on and the feature being tested.
  prefs: []
  type: TYPE_NORMAL
- en: 'Media features are split into three categories—visual and tactile media, bitmap
    media, and TV. Let''s take a look at the full list of options available for visual
    and tactile media:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Feature | Value | Min/max prefixes | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `width` | `Length` | Yes | This gives the width of the display area |'
  prefs: []
  type: TYPE_TB
- en: '| `height` | `Length` | Yes | This gives the height of the display area |'
  prefs: []
  type: TYPE_TB
- en: '| `device-width` | `Length` | Yes | This gives the width of the device area
    |'
  prefs: []
  type: TYPE_TB
- en: '| `device-height` | `Length` | Yes | This gives the height of the device area
    |'
  prefs: []
  type: TYPE_TB
- en: '| `color` | `Integer` | Yes | This is the number of bits per color component
    (if not color, the value is `0`) |'
  prefs: []
  type: TYPE_TB
- en: '| `color-index` | `Integer` | Yes | This is the number of entries in the output
    device''s color lookup table |'
  prefs: []
  type: TYPE_TB
- en: '| `monochrome` | `Integer` | Yes | This is the number of bits per pixel in
    the monochrome frame buffer (if not monochrome, the value is `0`) |'
  prefs: []
  type: TYPE_TB
- en: '| `grid` | `0 or 1` | No | If this is set to `1`, the device is grid based,
    such as a teletype terminal or phone display with only one fixed font (all other
    devices are `0`) |'
  prefs: []
  type: TYPE_TB
- en: 'The second category is bitmap media types; here''s the full list:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Feature | Value | Min/max prefixes | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `orientation` | `portrait` or `landscape` | No | This gives the orientation
    of a device |'
  prefs: []
  type: TYPE_TB
- en: '| `aspect-ratio` | `Ratio (w/h)` | Yes | This gives the ratio of width to height,
    expressed as two integers and separated by a slash (for example, `16/` `9`) |'
  prefs: []
  type: TYPE_TB
- en: '| `device-aspect-ratio` | `Ratio (w/h)` | Yes | This is the ratio of device-width
    to device-height |'
  prefs: []
  type: TYPE_TB
- en: '| `resolution` | `Resolution` | Yes | This gives the density of pixels of the
    output device, expressed as an integer followed by `dpi` (dots per inch) or `dpc`
    `m` (dots per centimeter) |'
  prefs: []
  type: TYPE_TB
- en: 'The third and final category only has one media type—this is `scan`, which
    is used for TV devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Feature | Value | Min/max prefixes | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `scan` | `Progressive` or `interlace` | No | Scanning process used by TV
    devices |'
  prefs: []
  type: TYPE_TB
- en: In most cases, it will be sufficient to specify a single media type and feature
    when creating media queries—there will be instances where we might need to check
    against multiple features or types in a single query.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, Less can easily handle this by using logical operators—let's take
    a moment to recap the options available when creating media queries.
  prefs: []
  type: TYPE_NORMAL
- en: Using logical operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we begin to build more complex queries, there will be instances where we
    need to perform a check against multiple criteria within a media query. Less can
    handle this with ease. Before we take a look at putting into practice what we''ve
    learned, let''s just take a moment to review the operators available:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Is used to |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `and` | Combine multiple media features together, or media features with
    other media types. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `comma` | Apply a set of styles if any of a comma-delimited list of queries
    returns true:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `not` | Return `true` if the media query would otherwise return `false`,
    for example, `@media not all and (monochrome) { ... }` would return `@media not
    (all and (monochrome)) { ... }` |'
  prefs: []
  type: TYPE_TB
- en: '| `only` | Prevent application of styles by browsers that do not support media
    queries (assuming that fallback support has not been implemented) |'
  prefs: []
  type: TYPE_TB
- en: Okay, we've covered the theory around media queries; let's turn our attention
    to building some queries!
  prefs: []
  type: TYPE_NORMAL
- en: Designing media queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've seen what media queries are, the options available, and our clients
    who have helped us to determine what devices we need to support. It's at this
    stage in the process that we need to determine how we're going to translate these
    requirements into real code.
  prefs: []
  type: TYPE_NORMAL
- en: To help with this, let's work through a simple example. In this instance, we
    need to create a simple block of text, with a list of editors shown to the left
    of the text. Granted, it is somewhat contrived, but it does show perfectly how
    we can vary the content when displayed on different devices.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The best way to see how media queries work is in the form of a simple demo.
    In this instance, we have a simple set of requirements, in terms of what should
    be displayed at each size:'
  prefs: []
  type: TYPE_NORMAL
- en: We need to cater for four different sizes of content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The small version must be shown to the authors as plain text e-mail links, with
    no decoration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For medium-sized screens, we will add an icon before the link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On large screens, we will add an e-mail address after the e-mail links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On extra-large screens, we will combine the medium and large breakpoints together,
    so both icons and e-mail addresses are displayed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In all instances, we will have a simple container in which there will be some
    dummy text and a list of editors. The media queries we create will control the
    appearance of the editor list, depending on the window size of the browser being
    used to display the content.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin by downloading and extracting a copy of `simple.html` from the code
    download that accompanies the book. This contains the markup that we will use
    to create our page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the following code to a new document. We''ll go through it section
    by section, starting with the variables created for our media queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next comes some basic styles to define margins, font sizes, and styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to set sizes for each area within our demo, so go ahead and add the
    following styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the basic styles are set, we can add our media queries—beginning with
    the query catering for small screens, where we simply display an e-mail logo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The medium query comes next; here, we add the word `Email` before the e-mail
    address instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the large media query, we switch to showing the name first, followed by
    the e-mail (the latter extracted from the `data-email` attribute):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We finish with the extra-large query, where we use the e-mail address format
    shown in the large media query, but add an e-mail logo to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file as `simple.less`. Now that our files are prepared, let''s preview
    the results in a browser. For this, I recommend that you use **Responsive Design
    View** within Firefox (activated by pressing *Ctrl* + *Shift* + *M*). Once activated,
    resize the view to 416 x 735; here we can see that only the name is displayed
    as an e-mail link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple example](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Increasing the size to 544 x 735 adds an e-mail logo, while still keeping the
    same name/e-mail format as before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple example](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we increase it further to 716 x 735, the e-mail logo changes to the word
    **Email**, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple example](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s increase the size even further to 735 x 1029; the format changes again,
    to a name/e-mail link, followed by an e-mail address in parentheses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple example](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In our final change, increase the size to 735 x 1182\. Here, we can see the
    previous style being used, but with the addition of an e-mail logo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple example](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: These screenshots illustrate perfectly how you can resize your screen and still
    maintain a suitable layout for each device you decide to support; let's take a
    moment to consider how the code works.
  prefs: []
  type: TYPE_NORMAL
- en: The normal accepted practice for developers is to work on the basis of "mobile
    first", or create the smallest view so it is perfect, then increase the size of
    the screen and adjust the content until the maximum size is reached. This works
    perfectly well for new sites, but the principle might have to be reversed if a
    mobile view is being retrofitted to an existing site.
  prefs: []
  type: TYPE_NORMAL
- en: In our instance, we've produced the content for a full-size screen first. From
    a Less perspective, there is nothing here that isn't new—we've used nesting for
    the `#sidebar` div, but otherwise the rest of this part of the code is standard
    CSS.
  prefs: []
  type: TYPE_NORMAL
- en: The magic happens in two parts—immediately at the top of the file, we've set
    a number of Less variables, which encapsulate the media definition strings we
    use in the queries. Here, we've created four definitions, ranging from `@small`
    (for devices between `520px` to `699px`), right through to `@xlarge` for widths
    of `1151px` or more.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then take each of the variables and use them within each query as appropriate,
    for example, the `@small` query is set as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have standard CSS style rules to display an e-mail
    logo before the name/e-mail link. Each of the other queries follows exactly the
    same principle; they will each compile as valid CSS rules when running through
    Less.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've seen how to construct media queries using Less, it's worth taking
    a moment to explore how best to view our demos. While it can be argued that simply
    resizing the browser window might suffice, we can go further and take advantage
    of a number of tools to help with the process.
  prefs: []
  type: TYPE_NORMAL
- en: Using tools to resize the screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we took a look at a simple example of creating media
    queries to show or hide elements when a list of editors is resized. We used Firefox's
    **Responsive Design View** option to resize the screen for us; this is one option
    we can use to cleanly resize a screen for mobile viewing; it's a critical tool
    to work with media queries.
  prefs: []
  type: TYPE_NORMAL
- en: You can use special tools for this purpose, but most modern browsers already
    have a perfectly adequate tool built in for this purpose. Let's take a look at
    a few in turn.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Firefox users, press *Ctrl* + *Shift* + *M* to activate **Responsive Design
    View**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using tools to resize the screen](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, if your preference is Google Chrome, then the same functionality is
    available—it is part of the developer tools set, which can be activated by pressing
    *Ctrl* + *Shift* + *I*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using tools to resize the screen](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you are an Opera user, then there is the dedicated Opera Mobile Emulator,
    which is available at [http://www.opera.com/developer/mobile-emulator](http://www.opera.com/developer/mobile-emulator),
    with versions available for the Windows, Mac, and Linux platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using tools to resize the screen](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you need to use IE to display your site in a responsive format, then unfortunately
    your options are somewhat limited—at least to IE10\. IE has a **Resize** option
    (as shown in the following screenshot), but it resizes the whole window, rather
    than show a view within a normal-sized window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using tools to resize the screen](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It's not the perfect option, but then the best practice is to develop in browsers
    that are more standards-compliant (such as Google Chrome or Firefox). We can then
    effect any tweaks for IE later.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is worth noting that if IE11 is used, then it can be set to work in a similar
    way to Google Chrome. We can set the emulation mode to display a small window,
    within a large/full-size browser window.
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer not to use built-in browser tools, then there are other tools
    available that can be used instead. Two tools that are of particular note are
    ish from Brad Frost, available at [http://bradfrostweb.com/demo/ish/](http://bradfrostweb.com/demo/ish/),
    and ViewPort Resizer by Malte Wassermann, available at [http://lab.maltewassermann.com/viewport-resizer/](http://lab.maltewassermann.com/viewport-resizer/).
  prefs: []
  type: TYPE_NORMAL
- en: Let's now change focus and turn our attention to building something more in-depth,
    where we can use Less in a more real-world example.
  prefs: []
  type: TYPE_NORMAL
- en: Building responsive pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding media queries to any site is possible; the key to it is deciding what
    breakpoints you want to support and the elements that should be displayed at each
    breakpoint. This can be as little as just the one breakpoint, or many. It all
    depends on what happens to the elements when they are resized and whether you
    need to alter the code to improve their appearance at a particular breakpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we''ve seen basic media queries in action, we''re going to create
    something more complex, in the form of a basic welcome page that would not be
    out of place on a portfolio site. We''ll start with the basic full-size page,
    which will look something like this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building responsive pages](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is a very simple page, created as if it were part of a portfolio site.
    It's a perfect opportunity to explore how we can use some simple media queries
    to resize the page for a mobile platform.
  prefs: []
  type: TYPE_NORMAL
- en: Building the basic page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start by extracting a copy of the `responsive.html` file that is in the
    code download that accompanies this book. This contains a simple demo page, set
    to appear as if it could form the front page of a portfolio site. Save this file
    into your project folder.
  prefs: []
  type: TYPE_NORMAL
- en: We also need a copy of the `reset.less` file that is in the same code download;
    go ahead and extract this to the project folder as well. This provides some basic
    style resets to mimic what might happen when creating pages for display on your
    site.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the purposes of this demo, I will assume that you are using Sublime Text,
    which is preconfigured to compile Less files into valid CSS when saving content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open your text editor of choice and add the following code; we''ll go
    through it in detail, section by section. We start with setting some basic styles,
    to define each area within the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to define some styles for our header. This is one of the elements
    that will be replaced when we resize the page to a smaller screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The remaining two basic styles cover the **Skip to Main Content** link that
    appears when the screen is resized, and the main image on screen respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `responsive.less`. If we preview the results in a browser,
    we will see something akin to the screenshot shown at the beginning of this example.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if we resize the browser window using a tool such as Responsive Design
    View in Firefox, it will begin to break the design—the toolbar loses tabs, the
    header has a large gap, and the right side of the image has been chopped off,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the basic page](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can fix this by adding in a media query to manage what happens when the screen
    is resized. Let's take a look at how this works in action.
  prefs: []
  type: TYPE_NORMAL
- en: Adding responsive queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've set the basic styles for our portfolio page and can clearly see that elements
    are beginning to break when the page is resized. Let's fix this by adding in the
    media query that redefines what happens when the screen is resized.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by adding the following at the head of the `responsive.less` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to add the replacement styles that will kick in when using a
    mobile platform. Immediately below the Less styles in `responsive.less`, go ahead
    and add the following code, beginning with the styles that control the display
    of a **Skip to Main Content** button that appears at the top of the page when
    it has been resized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next comes the styles required to resize the main content area, side bar, and
    header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to alter the styles used to redefine the navigation options
    that now appear as a stacked list of buttons, when the page is resized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Resave the file as `responsive.less`. If you''ve used Sublime Text as your
    editor, it will convert it to a compiled CSS file. Let''s now preview the results
    in a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding responsive queries](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At full size, there will be no change (which is anticipated), but when the page
    is resized, we can already see an improvement on the page. The title has been
    repositioned so there is less of a gap below it, the toolbar has been reset to
    display as buttons, the image has been resized to better fit on the page, and
    the content has been repositioned into a vertical format. We can also see the
    addition of a button to allow us to jump down to the main content on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Excellent, our page now looks and works as we expect in a mobile capacity! If
    we increase or decrease the size of the browser window, we can see the content
    reflowing to fit the available space, based on the media query we created in `responsive.less`.
  prefs: []
  type: TYPE_NORMAL
- en: So, what's the magic that's making this work? From the code we've worked with,
    you might be forgiven if you thought it was all of the code in this section. It's
    a perfectly valid statement. After all, all of the styles are needed to ensure
    content is correctly placed when used in a mobile environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In reality though, there are only two statements that we''ve used that are
    key to the whole process: `@mobile: ~"screen and (max-width: 30rem)"`; and `@media
    @mobile {…}`.'
  prefs: []
  type: TYPE_NORMAL
- en: (Okay, I cheated slightly, but only by one character!)
  prefs: []
  type: TYPE_NORMAL
- en: The first statement is a Less variable that we've set as our media type and
    the feature we will be testing. The second one calls in that variable as the test.
    Everything in between is standard CSS styling and is being used to rework the
    layout of the page when used to display content on a mobile device.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we''ve used a large image, which has been set with `width:
    100%`. While it will resize perfectly when the page size is reduced or increased,
    it still means that we''re potentially loading a large image on a small device—not
    a good idea! We can improve on this by asking the browser to load different versions
    of the image, depending on which media query is being applied. Let''s take a look
    and see how Less can help remove some of the burden in managing this process.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding responsive images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hands up if you own a mobile device, such as a tablet or smartphone? If you
    do, then you will likely have seen how long pages take to load, when they haven't
    been sized for mobile use.
  prefs: []
  type: TYPE_NORMAL
- en: In the example we've just worked on, we set a 100 percent value for the width
    of `#banner img`—in most cases this will work perfectly fine; it does mean that
    we are loading a large photo, which is not ideal on a mobile device! Instead,
    we can make a simple change to our media rules to load a smaller image when the
    screen is reduced in size.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this demo, I've resized a copy of the abstract image to a smaller 461px
    x 346px version and saved it as `abstract_small.jpg`. This size is small enough
    to see the change take effect when the screen is suitably resized to smaller dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by downloading and extracting copies of `responsive.html` and `responsive.less`
    from the code download for this book, then saving them as `responsive_img.html`
    and `responsive_img.less`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up `responsive_img.html`, then alter the line as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the highlighted line to the media query, as indicated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Save both files. If we then preview the results in a browser, you should not
    see any visible change (which we would expect). However, we will see a change
    in the URL for the image if we open up the developer tools within the browser
    and reduce the size of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding responsive images](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The beauty of this is that we can save a few kilobytes, which makes it quicker
    to view the site on mobile devices, as there is less to download into the browser.
    We can, however, go to the complete extreme by replacing images with high definition
    resolution versions, but only if the device supports it! Intrigued? Let's take
    a look at how this works, using the `retina.js` Less mixin, available at [http://imulus.github.io/retinajs/](http://imulus.github.io/retinajs/).
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating retina support for images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous example, we saw how easy it is to adjust our Less code so that
    a smaller image can be loaded when screen estate has been resized to mimic a mobile
    device.
  prefs: []
  type: TYPE_NORMAL
- en: However, many of you will own devices (such as iPads or iPhones) that have retina
    support, or which can support the display of high-resolution images that otherwise
    would not display very well on regular PCs. We can take advantage of this when
    working with Less. In fact, a Less mixin has already been created, which we can
    get from [https://raw.githubusercontent.com/imulus/retinajs/master/src/retina.less](https://raw.githubusercontent.com/imulus/retinajs/master/src/retina.less).
    Save this as `retina.less` within our project folder.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to save a copy of the `abstract.jpg` file that we've been using,
    as `abstract@2x.jpg`—this will become our hi-res version. Take a copy of the original
    `abstract.jpg` file and compress it using a JPG compressor such as the online
    service from [http://www.jpeg-optimizer.com](http://www.jpeg-optimizer.com). Save
    the compressed version as `abstract.jpg`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that our images are prepared, open up `responsive.html` and modify the
    lines as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `responsive_hd.html`. Next, open `responsive.less` and add this
    line at the head of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following line at the end of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a production environment, it is more likely that this would be within a media
    query—adding it at the end is sufficient to illustrate how it works, for the purposes
    of this demo.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save this as `responsive_hd.less`. We can then preview the results in a browser.
    For best results, I recommend the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Preview the results using a local web server or online webspace—a good local
    web server to try is WAMP ([http://www.wampserver.de](http://www.wampserver.de)
    for Windows) or MAMP ([http://www.mamp.info](http://www.mamp.info) for MAC).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If possible, try to view the results within Google Chrome if you can't view
    them online via a retina-enabled device. Google Chrome has the ability to emulate
    different devices; if we enable this feature and set it to show as an iPhone 5,
    for example:![Incorporating retina support for images](img/00088.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can clearly see that the change has been made:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Incorporating retina support for images](img/00089.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: While there should be no material change to the layout of the web page, using
    this trick means that a higher resolution image can be used when a device supports
    it, or be replaced with a standard resolution image if the device does not have
    retina support.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test whether a device supports the **device-pixel-ratio** test we used here,
    browse to [http://www.quirksmode.org/css/mediaqueries/devicepixelratio.html](http://www.quirksmode.org/css/mediaqueries/devicepixelratio.html).
    For example, we can confirm that `webkit-device-pixel-ratio` is supported, when
    testing with an iPad:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Incorporating retina support for images](img/00090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's move on and continue with this theme of using external libraries by taking
    a look at what external libraries are available for use with Less, when working
    with media queries.
  prefs: []
  type: TYPE_NORMAL
- en: Using prebuilt libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we've covered the basics of creating media queries using Less—it's at
    this point that you're probably thinking, "Surely there's a prebuilt library we
    could use to help us here, right…?"
  prefs: []
  type: TYPE_NORMAL
- en: Well, in this instance, unfortunately there isn't a prebuilt library we can
    use; it's down to us to build each query manually! This is no bad thing, as media
    queries can be seen as something of a workaround, which can lead to bloated code
    if we're not careful. It will be difficult, if not near impossible, to cater for
    all breakpoints. Each project will require support for a specific set of break
    points, which will not necessarily be the same for every site.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, media queries are natively supported in all modern browsers; the
    only exception is IE, where Version 8 or below is not supported. To get around
    this, there are three options:'
  prefs: []
  type: TYPE_NORMAL
- en: We can use the fallback library media-query-to-type created by Mike Morici,
    and which we can download from [https://github.com/himedlooff/media-query-to-type](https://github.com/himedlooff/media-query-to-type).
    This converts media queries into media types, which are supported as far back
    as IE6.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternatively, we can use Modernizr (from [http://www.modernizr.com](http://www.modernizr.com))
    to detect when media queries are used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another library that can be used is Respond.js, created by Scott Jehl and available
    from [https://github.com/scottjehl/Respond](https://github.com/scottjehl/Respond).
    This is effectively a drop-in library that can convert most media queries into
    formats that IE8 or below can understand.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although this chapter is about using Less to create media queries, it is nevertheless
    important to consider which browsers should be supported and how far you will
    be willing to go to get media queries to work in older browsers such as IE6 to
    8.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To help maintain clarity, we can use conditional hacks to only load the media-query-to-type
    or Respond.js libraries when we detect that IE9 or below has been used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: While in some respects we might feel obligated to provide the same environment
    in all cases (including for old IE), this is not necessarily a worthwhile exercise;
    supporting a smaller number well is better than average support for a lot of browsers!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Media queries have rapidly become a de facto part of responsive web design.
    Throughout this chapter, we saw how to use Less to make the process easier to
    manage within your code.
  prefs: []
  type: TYPE_NORMAL
- en: We started our journey through media queries with a brief introduction, followed
    by a review of some of the limitations that we must work around and considerations
    that need to be considered when working with clients.
  prefs: []
  type: TYPE_NORMAL
- en: Next came a brief exploration of the media types and features that we can use
    when working with Less; we took a look at the logical operators we can also use
    to create queries that test for multiple types or features. We then covered how
    to create a simple media query, with a quick look at how best to show responsive
    views in browsers, before continuing with a more practical example of a single
    page from a demo portfolio site. We saw how first we can create our basic page,
    before adding the requisite code to turn it into a responsive one.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved on to take a brief look at how to improve the image on the page,
    by first making it more responsive, then switching to displaying high-resolution
    images when retina support is available and enabled. We then closed out the chapter
    with a look at what prebuilt libraries are available that can help when working
    with Less.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to move onto some more practical uses of Less,
    with a look at using Less within a CMS, such as WordPress.
  prefs: []
  type: TYPE_NORMAL
