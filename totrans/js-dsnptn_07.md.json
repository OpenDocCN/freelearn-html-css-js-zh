["```js\n    export function App({ type = '' }) {\n      return (\n        <div>\n          <p>Hello from the {type + ' '}app</p>\n        </div>\n      );\n    }\n    ```", "```js\n    import React from 'react';\n    import ReactDOM from 'react-dom/client';\n    import { App } from './src/app';\n    ReactDOM.createRoot(document.querySelector\n      ('#app')).render(\n      <App type={`\"client render\"`} />\n    );\n    ```", "```js\n    <div id=\"app\"></div>\n    <script src=\"img/client.js\"></script>\n    ```", "```js\n    npx esbuild client.jsx --bundle --outdir=dist\n    ```", "```js\nimport express from 'express';\nconst app = express();\napp.get('/', (_req, res) => {\n  res.send('Server-rendered hello');\n});\nconst { PORT = 3000 } = process.env;\napp.listen(PORT, () => {\n  console.log(`Server started on\n    http://localhost:${PORT}`);\n});\n```", "```js\nnpx esbuild server.js --bundle --platform=node --outdir=dist\n```", "```js\nnode dist/server.js\n```", "```js\n    import React from 'react';\n    import ReactDOMServer from 'react-dom/server';\n    import { App } from './app';\n    import { Nav } from './nav';\n    export function renderNav() {\n      return ReactDOMServer.renderToStaticMarkup(<Nav />);\n    }\n    export function serverRenderApp() {\n      return ReactDOMServer.renderToString(<App\n        type={`\"server render\"`} />);\n    }\n    ```", "```js\n    import React from 'react';\n    export function Nav() {\n      return (\n        <ul>\n          <li>\n            <a href=\"/\">Server-render only</a>\n          </li>\n        </ul>\n      );\n    }\n    ```", "```js\n    // no other changes\n    app.get('/', (_req, res) => {\n      res.send(`\n        <!DOCTYPE html>\n        ${renderNav()}\n        <h1>Server-render only</h1>\n        <div id=\"app\">${serverRenderApp()}</div>\n      `);\n    });\n    ```", "```js\nimport React from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nexport default function Index() {\n  return (\n    <>\n      <Head>\n        <title>Next Static Rendering - Automatic Static\n          Generation</title>\n        <meta name=\"viewport\" content=\"width=device-width,\n          initial-scale=1\" />\n      </Head>\n      <main>\n        <ul>\n          <li>\n            <Link href=\"/products\">Products Page (SSG)\n            </Link>\n          </li>\n          <li>\n            <Link href=\"/cart\">Cart Page (SSR)</Link>\n          </li>\n        </ul>\n      </main>\n    </>\n  );\n}\n```", "```js\nnpx next build\ninfo  - Linting and checking validity of types\ninfo  - Creating an optimized production build\ninfo  - Compiled successfully\ninfo  - Collecting page data\ninfo  - Generating static pages (3/3)\ninfo  - Finalizing page optimization\nRoute (pages)                              Size     First Load JS\n┌ ○ /                                      2.73 kB        75.8 kB\n└ ○ /404                                   182 B          73.2 kB\n+ First Load JS shared by all              73.1 kB\n  ├ chunks/framework-fcfa81c6fe8caa42.js   45.2 kB\n  ├ chunks/main-7039e34bfb6f1a68.js        26.9 kB\n  ├ chunks/pages/_app-c7a111f3ee9d686c.js  195 B\n  └ chunks/webpack-8fa1640cc84ba8fe.js     750 B\n○  (Static)  automatically rendered as static HTML (uses no initial props)\n```", "```js\nexport async function getStaticProps() {\n  const products = await fetch\n    ('https://fakestoreapi.com/products').then(\n    (res) => res.json()\n  );\n  return {\n    props: {\n      products,\n    },\n  };\n}\n```", "```js\n{\n  id: 1,\n  title: 'Fjallraven - Foldsack No. 1 Backpack, Fits 15\n    Laptops',\n  price: 109.95,\n  description: 'Your perfect pack for everyday use and\n  walks in the forest. Stash your laptop (up to 15 inches)\n  in the padded sleeve, your everyday',\n  category: \"men's clothing\",\n  image: 'https://fakestoreapi.com/img/\n    81fPKd-2AYL._AC_SL1500_.jpg',\n  rating: { rate: 3.9, count: 120 }\n}\n```", "```js\nimport React from 'react';\nimport Link from 'next/link';\nimport Head from 'next/head';\nexport default function ProductIndexPage({ products }) {\n  return (\n    <>\n      <Head>\n        <title>Products</title>\n      </Head>\n      <div>\n        <h2>Products</h2>\n        <ul>\n          {products.map((product) => {\n            return (\n              <li key={product.id}>\n                <Link\n                  href={{\n                    pathname: '/products/[id]',\n                    query: { id: product.id },\n                  }}\n                >\n                  {product.title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </>\n  );\n}\n// no change to getStaticProps\n```", "```js\ninfo  - Linting and checking validity of types...\ninfo  - Creating an optimized production build...\ninfo  - Compiled successfully\ninfo  - Collecting page data\ninfo  - Generating static pages (4/4)\ninfo  - Finalizing page optimization\nRoute (pages)                              Size     First Load JS\n┌ ○ /                                      464 B          75.9 kB\n├ ○ /404                                   182 B          73.2 kB\n└ ● /products                              426 B          75.9 kB\n+ First Load JS shared by all              73.1 kB\n  ├ chunks/framework-fcfa81c6fe8caa42.js   45.2 kB\n  ├ chunks/main-7039e34bfb6f1a68.js        26.9 kB\n  ├ chunks/pages/_app-c7a111f3ee9d686c.js  195 B\n  └ chunks/webpack-8fa1640cc84ba8fe.js     750 B\n○  (Static)  automatically rendered as static HTML (uses no initial props)\n●  (SSG)     automatically generated as static HTML + JSON (uses getStaticProps)\n```", "```js\nexport async function getServerSideProps({ query }) {\n  const { cartId = 1 } = query;\n  const cart = await fetch(`https://fakestoreapi.com/carts/${cartId}`).then(\n    (res) => res.json()\n  );\n  const productsById = (\n    await Promise.all(\n      cart.products.map(async (product) => {\n        return await fetch(\n          `https://fakestoreapi.com/products/\n            ${product.productId}`\n        ).then((res) => res.json());\n      })\n    )\n  ).reduce((acc, curr) => {\n    acc[curr.id] = curr;\n    return acc;\n  }, {});\n  return {\n    props: {\n      cart,\n      productsById,\n    },\n  };\n}\n```", "```js\nimport Head from 'next/head';\nimport React from 'react';\nexport default function CartPage({ cart, productsById }) {\n  return (\n    <>\n      <Head>\n        <title>Cart Page</title>\n      </Head>\n      <div>\n        <ul>\n          {cart.products.map((product) => {\n            return (\n              <li key={product.productId}>\n                {product.quantity} x {productsById\n                  [product.productId]?.title}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </>\n  );\n}\n```", "```js\nnpx next build\ninfo  - Linting and checking validity of types\ninfo  - Creating an optimized production build\ninfo  - Compiled successfully\ninfo  - Collecting page data\ninfo  - Generating static pages (4/4)\ninfo  - Finalizing page optimization\nRoute (pages)                              Size     First Load JS\n┌ ○ /                                      464 B          75.9 kB\n├ ○ /404                                   182 B          73.2 kB\n├ λ /cart                                  445 B          73.5 kB\n└ ● /products                              426 B          75.9 kB\n+ First Load JS shared by all              73.1 kB\n  ├ chunks/framework-fcfa81c6fe8caa42.js   45.2 kB\n  ├ chunks/main-7039e34bfb6f1a68.js        26.9 kB\n  ├ chunks/pages/_app-c7a111f3ee9d686c.js  195 B\n  └ chunks/webpack-8fa1640cc84ba8fe.js     750 B\nλ  (Server)  server-side renders at runtime (uses\n  getInitialProps or getServerSideProps)\n○  (Static)  automatically rendered as static HTML (uses no\n  initial props)\n●  (SSG)     automatically generated as static HTML + JSON\n   (uses getStaticProps)\n```", "```js\nexport async function getStaticPaths() {\n  const products = await fetch('https://fakestoreapi.com/\n    products')\n    .then((res) => res.json())\n    .then((json) => json);\n  const paths = products.map((product) => ({\n    params: { id: String(product.id) },\n  }));\n  return { paths, fallback: false };\n}\n```", "```js\nexport async function getStaticProps({ params }) {\n  const product = await fetch(\n    `https://fakestoreapi.com/products/${params.id}`\n  ).then((res) => res.json());\n  return {\n    props: {\n      product,\n    },\n  };\n}\n```", "```js\nimport React from 'react';\nimport Link from 'next/link';\nimport Head from 'next/head';\nexport default function ProductPage({ product }) {\n  return (\n    <>\n      <Head>\n        <title>{product.title}</title>\n      </Head>\n      <div>\n        <Link href={'/products'}>Back</Link>\n        <h2>{product.title}</h2>\n      </div>\n    </>\n  );\n}\n```", "```js\nnpx next build\ninfo  - Linting and checking validity of types\ninfo  - Creating an optimized production build\ninfo  - Compiled successfully\ninfo  - Collecting page data\ninfo  - Generating static pages (24/24)\ninfo  - Finalizing page optimization\nRoute (pages)                              Size     First Load JS\n┌ ○ /                                      464 B          75.9 kB\n├ ○ /404                                   182 B          73.2 kB\n├ λ /cart                                  445 B          73.5 kB\n├ ● /products                              426 B          75.9 kB\n└ ● /products/[id]                         383 B          75.9 kB\n    ├ /products/1\n    ├ /products/2\n    ├ /products/3\n    └ [+17 more paths]\n+ First Load JS shared by all              73.1 kB\n  ├ chunks/framework-fcfa81c6fe8caa42.js   45.2 kB\n  ├ chunks/main-7039e34bfb6f1a68.js        26.9 kB\n  ├ chunks/pages/_app-c7a111f3ee9d686c.js  195 B\n  └ chunks/webpack-8fa1640cc84ba8fe.js     750 B\nλ  (Server)  server-side renders at runtime (uses getInitialProps or getServerSideProps)\n○  (Static)  automatically rendered as static HTML (uses no initial props)\n●  (SSG)     automatically generated as static HTML + JSON (uses getStaticProps)\n```", "```js\nimport React, { useState } from 'react';\nexport function ClientCounter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      Dynamic Counter, count: {count}\n      <br />\n      <button onClick={() => setCount(count + 1)}>\n        Add</button>\n    </div>\n  );\n}\n```", "```js\nimport React from 'react';\nimport { ClientCounter } from './client-counter';\nexport function App({ type = '' }) {\n  return (\n    <>\n      <div>\n        <p>Hello from the {type + ' '}app</p>\n        <ClientCounter />\n      </div>\n    </>\n  );\n}\n```", "```js\nnpx esbuild client.jsx --bundle --outdir=dist\n```", "```js\nnpx esbuild server.js --bundle --platform=node --outdir=dist\n```", "```js\nnode dist/server.js\n```", "```js\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { App } from './src/app';\nReactDOM.hydrateRoot(\n  document.querySelector('#app'),\n  <App type={`\"server render\"`} />\n);\n```", "```js\nnpx esbuild rehydrate.jsx --bundle --outdir=dist\n```", "```js\n// no changes to other routes\napp.use(express.static('./dist'));\napp.get('/rehydrate', (_req, res) => {\n  res.send(`\n    <!DOCTYPE html>\n    ${renderNav()}\n    <h1>Server-render with client-side rehydration</h1>\n    <div id=\"app\">${serverRenderApp()}</div>\n    <script src=\"img/rehydrate.js\"></script>\n  `);\n});\n// no changes to server startup\n```", "```js\nimport React from 'react';\nexport function Nav() {\n  return (\n    <ul>\n      <li>\n        <a href=\"/\">Server-render only</a>\n      </li>\n      <li>\n        <a href=\"/rehydrate\">Server-render with client-side\n          rehydration</a>\n      </li>\n    </ul>\n  );\n}\n```", "```js\nexport const isServer = () => typeof window ===\n  'undefined';\n```", "```js\nimport React from 'react';\nimport { ClientCounter } from './client-counter';\nimport { isServer } from './rendering-utils';\nexport function App({ type = '' }) {\n  return (\n    <>\n      <div>\n        <p>Hello from the {type + ' '}app</p>\n        <p>Rendering: {isServer() ? 'not from client' :\n           'from client'}</p>\n        {!isServer() && <ClientCounter />}\n      </div>\n    </>\n  );\n}\n```", "```js\nexport function useClientRenderingOnly() {\n  const [hasMounted, setHasMounted] = useState(false);\n  useEffect(() => {\n    setHasMounted(true);\n  });\n  return hasMounted;\n}\n```", "```js\nimport React, { useState } from 'react';\nimport { useClientRenderingOnly } from './rendering-utils';\nexport function ClientCounter() {\n  const isClientRendering = useClientRenderingOnly();\n  const [count, setCount] = useState(0);\n  if (!isClientRendering) return null;\n  // no change to JSX return\n}\n```", "```js\nimport React from 'react';\nimport { ClientCounter } from './client-counter';\nimport { isClientRendering } from './rendering-utils';\nexport function App({ type = '' }) {\n  return (\n    <>\n      <div>\n        <p>Hello from the {type + ' '}app</p>\n        <p>\n          Rendering: {isClientRendering ? 'from client' :\n            'not from client'}\n        </p>\n        <ClientCounter />\n      </div>\n    </>\n  );\n}\n```", "```js\nimport React from 'react';\nimport { App } from './app';\nimport { Nav } from './nav';\nexport default function Page() {\n  return (\n    <html>\n      <head>\n        <title>Streaming</title>\n      </head>\n      <body>\n        <Nav />\n        <h1>Server-render with streaming</h1>\n        <div id=\"app\">\n          <App type={`\"streaming server render\"`} />\n        </div>\n      </body>\n    </html>\n  );\n}\n```", "```js\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport Page from './src/page';\nReactDOM.hydrateRoot(document, <Page />);;\n```", "```js\nnpx esbuild streaming-rehydrate.jsx.jsx --bundle --outdir=dist\n```", "```js\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\n// no changes to other imports\nimport Page from './page';\nexport function serverRenderAppStream(res) {\n  const { pipe } = ReactDOMServer.renderToPipeableStream\n    (<Page />, {\n    bootstrapScripts: ['./streaming-rehydrate.js'],\n  });\n  pipe(res);\n}\n```", "```js\n// no change to other imports\nimport {\n  // no change to other imports\n  serverRenderAppStream,\n} from './src/server-render';\n// no change to other routes\napp.get('/streaming', (_req, res) => {\n  serverRenderAppStream(res);\n});\n// no change to startup logic\n```", "```js\nimport React from 'react';\nexport function Nav() {\n  return (\n    <ul>\n      {/* no change to the other li elements */}\n      <li>\n        <a href=\"/streaming\">Server-render with streaming\n          </a>\n      </li>\n    </ul>\n  );\n}\n```"]