- en: 'Chapter 7. The Decider: External APIs'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the key aspects of mobile technology is the ability to tie different
    systems together into a meaningful application. More and more companies are allowing
    access to their programs and data through an **Application Programming Interface**
    or **API**. These APIs include things such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Maps via Google, Yahoo, and other providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Music applications such as Rdio and Spotify
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Location aware data providers such as Foursquare
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social networks such as Facebook and Google Plus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Photo services such as Flickr and Picassa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can get a rough idea of what is available, at [http://www.programmableweb.com/apis](http://www.programmableweb.com/apis).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This is just a small sampling of the data available to make your application
    more useful. The trick is how to get the data and how to use it. In this chapter
    we will be using the Foursquare API to explore the use of these types of APIs
    and how to get started. We will talk about:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of external APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with the Foursquare API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the basic application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a data store with information from Foursquare
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the data to the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start with a general look at how external APIs generally work and what
    you need to get started with one.
  prefs: []
  type: TYPE_NORMAL
- en: Using an external API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: APIs are provided as a service from many different companies. This is not an
    entirely altruistic move on the part of the company. The expectation is that by
    providing the information and access to the company's data, the company gets more
    usage for their service and more customers.
  prefs: []
  type: TYPE_NORMAL
- en: With this in mind, most (if not all) companies will require you to have an account
    on their system in order to access their API. This allows you to access their
    systems and information from within your application, but more importantly from
    the company's perspective, it allows them to maintain control over how their data
    can be used. If you violate the company's usage policies, they can shut off your
    application's access to the data, so play nice.
  prefs: []
  type: TYPE_NORMAL
- en: The API key
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most APIs require a key in order to use them. An API key is a long string of
    text that gets sent as an extra parameter on any request you send to the API.
    The key is often composed of two separate pieces and it uniquely identifies your
    application to the system much like a username and a password would for a regular
    user account. As such it's also a good idea to keep this key hidden in your application
    so that your users can't easily get it.
  prefs: []
  type: TYPE_NORMAL
- en: While each company is different, an API key is typically a matter of filling
    out a web form and getting the key. Most companies do not charge for this service.
    However, some do limit the usage available to outside applications, so it's a
    good idea to look at any restrictions the company sets on their service.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have an API key you should take a look at the available functions for
    the API.
  prefs: []
  type: TYPE_NORMAL
- en: API functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'API functions typically come in two types – public and protected:'
  prefs: []
  type: TYPE_NORMAL
- en: The public functions can simply be requested with the API key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The protected functions will also require that a user be logged into the system
    in order to make the request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the API function is protected, your application will also need to know how
    to log in correctly with the remote system. The login functions will usually be
    a part of the API or a web standard such as Facebook and Google's OAuth.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It should be noted that while OAuth is a standard, its implementation will vary
    depending on the service. You will need to consult the documentation for the service
    you are using to make sure that the features and functions you need are supported.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to read through the service's API documentation to understand which
    functions you will need and if they require a login.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing to understand about APIs is that they don't always do exactly
    what you need them to do. You may find that you need to do a little more work
    than you expect to get the data you need. In this case, it's always good to do
    a little bit of testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many APIs offer a console interface where you can type commands directly into
    the system and examine the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![API functions](img/8901OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This can be really helpful for digging into the data, but consoles are not always
    available for every API service. Another option is to send the commands in your
    application (along with your API credentials) and examine the data returned in
    the Safari console.
  prefs: []
  type: TYPE_NORMAL
- en: 'The drawback of this method is that the data is often returned as a single-line
    string that is very difficult to read as shown in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![API functions](img/8901OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is where a tool like JSONLint comes in handy. You can copy and paste the
    single-line string from your Safari console into the page at [http://jsonlint.com](http://jsonlint.com)
    and have the string formatted so that it is much easier to read and validate the
    string as JSON at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![API functions](img/8901OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you get a hold of what data is being sent and received, you will need to
    set it all up in Sencha Touch.
  prefs: []
  type: TYPE_NORMAL
- en: External APIs and Sencha Touch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have talked about earlier in the book, you cannot use a standard AJAX
    request to get data from another domain. You will need to use a JSONP proxy and
    store to request data from an external API.
  prefs: []
  type: TYPE_NORMAL
- en: Using the API or the Safari console, you can get a good idea of the data that
    is coming back to you and use it to set up your model. For this example, let's
    use a simple model called `Category`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then set up a store to load data from the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will set up a store with our `Category` model and call the `url` property
    for our external API. Remember that we have to send our credentials along with
    the request so we set these as `extraParams` on the `proxy` section.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `apiKey` and `appSecret` properties shown here are examples. You will need
    your own API key information to use an API.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to set a property called `rootProperty` in the `reader` section.
    Most API's send back a ton of detailed information along with the request and
    the store needs some idea of where to start loading in the category records.
  prefs: []
  type: TYPE_NORMAL
- en: We can also add additional parameters later by calling the `setExtraParam()`
    function on our store proxy. This will let us add additional parameters to be
    sent to our external API URL.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that `setExtraParam()` will add an additional parameter but `setExtraParams()`
    will replace all of our `extraParams` with the new values.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at our application for this chapter to see how this all fits
    together.
  prefs: []
  type: TYPE_NORMAL
- en: The basic application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Decider application is designed to use a combination of local storage, Google's
    Map API, and the Foursquare API. The application will take a list of people and
    their food preferences, and then use Foursquare and Google Maps to find nearby
    places to eat that will match everyone's food preferences.
  prefs: []
  type: TYPE_NORMAL
- en: 'This screenshot provides a pictorial representation of the preceding explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The basic application](img/8901OS_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our contacts and categories will be stored using local storage. External APIs
    from Google and Foursquare will generate our maps and restaurant listings respectively.
    We will start with a quick overview of the basic application structure and forms,
    before diving into the store setup and API integration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our main container is a simple card layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this viewport we will add two cards: a navigation view and a form panel.
    Our `navigationvew` will serve as our main window for display. We will add additional
    containers to it via our controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This `mainView` contains our `navigationBar` and our `homeScreen` container
    with the big `Get Started` button. This button will add new containers to the
    navigation view (we will look at this later in the controller).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that Sencha Touch automatically creates a back button for each container
    that is added to the navigation view. This means that we don't have to write an
    extra code for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second item that is added to our viewport is our form panel. This will
    contain text fields for first and last name, as well as a selectable list for
    our different food categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We close out the form with a `segmentedbutton` property, which has options for
    `Save` and `Cancel`. We will add the handler functions for these buttons later
    on in our controller.
  prefs: []
  type: TYPE_NORMAL
- en: We also include a title bar at the top of the form to give the user some idea
    of what they are doing.
  prefs: []
  type: TYPE_NORMAL
- en: One of the key pieces of this form is the categories list, so let's take a closer
    look at how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the categories list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we will be getting our list of potential restaurants from the Foursquare
    API, we need to use their categories as well so that we can match things up with
    some degree of accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Foursquare API can be found at [https://developer.foursquare.com/](https://developer.foursquare.com/).
    As mentioned before, you will need a Foursquare account to access the API. You
    will also need an API key in order to integrate Foursquare with your application.
  prefs: []
  type: TYPE_NORMAL
- en: We can use the Foursquare's API to get a list of categories, however the API
    returns a list of a few hundred categories including Airports, Trains, Taxis,
    Museums, and Restaurants. Additionally, each of these has its own subcategories.
    All we really want is the subcategories for Restaurants.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make things more complicated, Foursquare''s API also returns the data like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This means we can only get at a specific category by its order in the array
    of categories. For example, if Restaurants is the twenty-third category in the
    array, we can get to it as: `categories[23]`, but we cannot get to it by calling
    `categories[''Restaurants'']`. Unfortunately, if we use `categories[23]` and Foursquare
    adds a new category or changes the order, our application will break.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a situation where it pays to be adaptable. Foursquare''s API includes
    a console where we can try out our API requests. We can use this console to request
    the data for all of our categories and then pull the data we need into a flat
    file for our application. Check this URL to see the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.foursquare.com/docs/explore#req=venues/categories](https://developer.foursquare.com/docs/explore#req=venues/categories)'
  prefs: []
  type: TYPE_NORMAL
- en: We can copy just the Restaurant information that we need from categories and
    save this as a file called `categories.json` and call it from our store.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A better solution to this conundrum would be to write some server code that
    would request the full category list from Foursquare and then pull out just the
    information we are interested in. But for the sake of brevity, we will just use
    a flat `json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each of our categories are laid out like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The main pieces we care about are the `id`, `name`, `shortname` and `icon`
    values. This gives us a data model that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that we also add a function to create an image URL for the icons we
    need. We do this with the `convert` configuration, which lets us assemble the
    data for image URL based on the other data in the record:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `convert` function is automatically passed both the data value (`v`), which
    we ignore in this case, and the record (`rec`), which lets us create a valid Foursquare
    URL by combining the `icon.prefix` value, a number, and the `icon.suffix` value
    in our record. If you take a look at our previous category data example, this
    would yield a URL of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://foursquare.com/img/categories_v2/food/argentinian_32.png](https://foursquare.com/img/categories_v2/food/argentinian_32.png)'
  prefs: []
  type: TYPE_NORMAL
- en: By changing the number we can control the size of the icon (this is part of
    the Foursquare API as well).
  prefs: []
  type: TYPE_NORMAL
- en: 'We combine this with our XTemplate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us a very attractive list for choosing our categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the categories list](img/8901OS_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next we need to take a look at the controller for the contact form.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the contact controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The contact controller handles saving the contact and canceling the action.
    We start out the controller by declaring our references and controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Remember that our `refs` (references) provide a handy shortcut we can use anywhere
    in the controller to get to the pieces we need. Our `control` section attaches
    `tap` listeners to our cancel and save buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we need to add our two functions after the controls section. The `doCancel`
    function is really simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We just use our references to clear the contact editor, deselect all the items
    in our category list, and switch back to our main view.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `save` function is a little more complex, but similar to the functions
    we have covered elsewhere in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As with our previous save functions, we create a new `MyApp.model.Contact` and
    add the values from our form. However, since our list isn't really a standard
    form component we need to grab its selections separately and add them to the contact
    data as a comma-separated list.
  prefs: []
  type: TYPE_NORMAL
- en: We do this by creating an empty array and using `Ext.each()` to loop through
    and run a function on all our categories. We then use `join` to implode the array
    into a comma-separated list.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we save the contact and run our `doCancel` function to clean up and
    return to our main view.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we can add contacts we need to create a controller to handle our requests
    to the Foursquare and Google APIs, and get the data back to our users.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with Google Maps and Foursquare
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our application still has a couple of tasks to accomplish. It needs to:'
  prefs: []
  type: TYPE_NORMAL
- en: Handle the click of the **Get Started** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add our maps panel and offer to adjust the current location via Google Maps
    API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display a list of friends to include in our search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display the search results in a list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display the details for a selected result
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start out with the basic skeleton of the controller, create the views
    and stores, and then finish up the controller to complete the application.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the mainView.js controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start the `mainView.js` controller file with some placeholders for the
    stores. We will add views later on and some references for those components.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind that when working with placeholders in this fashion the application
    will not be testable until all the files are actually in place.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create the `mainView.js` file in our `controllers` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: At the top of this configuration we require `Ext.DateExtras`. This file provides
    us with formatting options for date objects. If this file is not included, only
    the `now()` method for date objects will be available in your application.
  prefs: []
  type: TYPE_NORMAL
- en: In our `views` section we have added placeholders for `confirmLocation`, `restaurantList`,
    `friendChooser`,and `restaurantDetails`. We will add these files later on, along
    with the `RestaurantStore` file listed in our `stores` section.
  prefs: []
  type: TYPE_NORMAL
- en: We also have a number of references for these views, stores, and some of their
    sub-components. We will need to create these views before getting to the rest
    of our controller. We will take these views in the order the user will see them,
    starting with the `confirmLocation` view.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the confirmLocation view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `confirmLocation` view first appears when the user clicks on the **Get Started**
    button. This view will present the user with a map showing their current location
    and offer an option to switch to a different location if the user desires.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot gives a pictorial representation of the preceding
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the confirmLocation view](img/8901OS_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to give ourselves a bit more flexibility, we will be using the Google
    Maps Tracker plugin as part of this view. You can find this plugin in your Sencha
    Touch 2 folder in `examples/map/lib/plugin/google/Tracker.js`. Copy the file into
    a `lib/google` folder in your main application folder and be sure to add it into
    the `requires` section of your `app.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You should also set the path that corresponds to the `Ext.plugin` namespace,
    just above where you enable `Ext.Loader` in `app.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This plugin will let us easily drop markers on the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the Google Tracker plugin file is included in the application, we can
    set up our `confirmLocation.js` view like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The view itself is a simple container with some HTML at the top asking the user
    to confirm their location. Next we have a map container that uses our Google Tracker
    plugin to configure the map and animate the location marker to drop from the top
    of the screen to the current location of the user. The `position` configuration
    is a default location, which is used when the user denies the application access
    to their current location. This one is set to the Sencha Headquarters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we need a few options for the user to choose from: **Cancel**, **New Location**,
    and **Next**. We will add these as a segmented button under our map container.
    We add the code to the end of our `items` container (after the `map` container):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Each of our buttons has an associated action. This allows us to assign functions
    to each button within the `mainView.js` controller. By creating buttons in this
    fashion, we maintain separation between the display of the application and the
    functionality of the application. This is really helpful when you want to re-use
    a view component.
  prefs: []
  type: TYPE_NORMAL
- en: The next view the user encounters is the Friends Chooser.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Friends Chooser view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `friendsChooser.js` file uses a similar list to our previous category chooser.
    This lets our users select multiple people to include in the restaurant search:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Friends Chooser view](img/8901OS_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our `friendChooser` extends the `Ext.Container` component and allows the user
    to select from a list of friends:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'As with our previous panel, we have a container with HTML at the top to provide
    some instructions to the user. Below that is our `list` container, which, like
    our category list, allows for selection of multiple items via the `mode: ''MULTI''`
    configuration. We also set `grouped` to `true`. This allows our store to group
    the contacts together by last name.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you take a look at the `ContactStore.js` file, you can see where we do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This configuration returns the first letter of the last name for grouping.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last thing we need to do with our `friendChooser.js` file is add the buttons
    at the bottom to **Cancel** or **Finish** the search. The buttons go out in the
    `items` section, just below the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As in our previous view, we use a `segmentedbutton` property with actions assigned
    to each of our individual buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Once the user clicks on **Finish**, we will need to return a list of restaurants
    they can select from.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the restaurant list, store, and details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our restaurant list will use a store and the Foursquare API to return a list
    of restaurants based on the shared preferences of everyone the user selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot exemplifies the preceding explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the restaurant list, store, and details](img/8901OS_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This component is pretty basic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This component uses a simple list with a configuration option for `onItemDisclosure:
    true`. This places an arrow next to the restaurant name in the list. The user
    will be able to click on the arrow and see the details for that restaurant (which
    we will create after the store).'
  prefs: []
  type: TYPE_NORMAL
- en: We also set `grouped` to `true`, only this time our store will use a function
    to calculate and sort by distance.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the restaurant store and model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The restaurant store is where we set up our request to the Foursquare API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `RestaurantStore.js` file sets a `model` and `storeId` field for our store
    and then defines our proxy. The `proxy` section is where we set up our request
    to Foursquare.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned at the start of the chapter, this needs to be a `jsonp` request
    since it is going to another domain. We make our request to [https://api.foursquare.com/v2/venues/search](https://api.foursquare.com/v2/venues/search)
    and we are looking for the `responses.venues` section of the `JSON` array that
    gets returned.
  prefs: []
  type: TYPE_NORMAL
- en: You will note that this store currently has no other parameters to send to Foursquare.
    We will add these later on in the controller before we load the store.
  prefs: []
  type: TYPE_NORMAL
- en: For the model, we can consult the Foursquare API documentation to see the information
    that is returned for a restaurant (called a venue in Foursquare terms) at [https://developer.foursquare.com/docs/responses/venue](https://developer.foursquare.com/docs/responses/venue)
  prefs: []
  type: TYPE_NORMAL
- en: 'You can include any of the fields listed on the page. For this app, we have
    chosen to include the following code in our model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You can add more fields if you want to display more information in the details
    view.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the details view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The details view is a simple panel and XTemplate combination. Using our controller,
    the panel will receive the data record when a user clicks on a restaurant in the
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Since the `tpl` tag is basically HTML, you can use any CSS styling you like
    here. Keep in mind that certain fields such as `contact`, `location`, and `categories`
    can have more than one entry. You will need to use `<tpl for="fieldname">` to
    loop through these values.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the views are complete, we need to head back to our controller and
    add the functions to put everything together.
  prefs: []
  type: TYPE_NORMAL
- en: Finishing the main view controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we started out with our main controller, we added all of our views, stores,
    and references. Now it''s time to add the functionality for the application. We
    start by adding a `control` section to the end of our `config`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The controls are based on the references in the controller and they add functions
    to specific listeners on the component. These are each in the format of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Once these controls are in place, we can add our functions after the `config`
    section of our controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our first function is `doStart`. This function loads our `Contacts` store and
    checks to see if we have any existing contacts. If not, we alert the user and
    offer to let them add some. If they have contacts we create a new instance of
    our `confirmLocation` container and `push` it onto the main navigation view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Remember that since the `mainView` is a navigation view, a **Back** button will
    automatically be created in the top toolbar. This function will show the user
    our initial map panel with the users current location.
  prefs: []
  type: TYPE_NORMAL
- en: 'This panel needs four functions: one to cancel the request, one to pop up a
    new location window, one to set the new location, and one to move on to the next
    step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We actually want to be able to use the `doCancel` function from anywhere in
    the process. As we add new panels to our `mainView` navigation, these panels simply
    pile up in a stack. This means we need to get the number of panels currently on
    the `mainView` stack. We use `length-1` to always leave the initial panel (the
    one with our big **Get Started** button) on the stack. We use `pop` to remove
    all but the first panel from the stack. This way the **Cancel** button will take
    us all the way back to the beginning of our stack, while the **Back** button will
    take us back just to the previous step.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next function is `doNewLocation()`, which uses `Ext.Msg.prompt` to ask
    the user to enter a new location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If the user enters a new location, we call `setNewLocation` to process the
    text the user entered in the prompt textbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This code gets our map and encodes the text the user passed us as a geocode
    location. If Google returns a valid address, we center the map on the location
    and drop a marker to show the exact location. We also set the latitude and longitude
    so that we can reference them later.
  prefs: []
  type: TYPE_NORMAL
- en: If we fail to get a valid address, we alert the user so they can fix it and
    try again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the user is happy with the location they can click on the **Next** button,
    which fires our `doChooseFriends` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This function pushes our `friendchooser` view onto the stack for display. The
    `friendchooser` view allows the user to select multiple friends and click on **Cancel**
    or **Finish**.
  prefs: []
  type: TYPE_NORMAL
- en: Since we have already taken care of our **Cancel** button with our `doCancel`
    function, we just need to write the `doShowRestaurants` function.
  prefs: []
  type: TYPE_NORMAL
- en: This function starts by looping through the selected friends. For the first
    one in the list, we grab the restaurant categories we have stored for the friend
    and convert it from a comma-separated list (which is how we stored it) into an
    array.
  prefs: []
  type: TYPE_NORMAL
- en: 'This lets us grab every subsequent selection and run `Ext.Array.intersect()`
    to find the common categories between all of the selected friends:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Next, we load the store based on the common categories by `categoryID`, the
    location data we have stored in our map, `client_id`, and `client_secret` that
    comprise our API key for Foursquare and a `radius` value (in meters).
  prefs: []
  type: TYPE_NORMAL
- en: We also send a required field called `v` that is set to the current date.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we push our restaurant list component onto the stack of containers.
    This will display our list of results and allow the user to click on for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'This brings us to our `doShowRestaurantDetails` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: When the user taps one of the disclosure icons in our list of restaurants, we
    push a `restaurantdetails` view onto the stack of containers and set its data
    to the record that was tapped. This displays the details for the restaurant in
    our details XTemplate.
  prefs: []
  type: TYPE_NORMAL
- en: Homework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a number of additional features that can be added to this type of
    application, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Editing for contacts (or automatically pulling friends from Facebook)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a live feed for the categories menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding additional venues other than restaurants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining the application with additional APIs such as Yelp for reviews
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Just remember the key requirements of using additional APIs: the API key(s),
    studying the API documentation, and using the JSONP store for grabbing the data.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we talked about using external APIs to enhance your Sencha
    Touch applications. This included:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of API basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting together the basic application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interaction with Google Maps and Foursquare
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the views, models, and stores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the application controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter we will talk about the use of progressive enhancement to
    target sites to a specific device or screen size.
  prefs: []
  type: TYPE_NORMAL
