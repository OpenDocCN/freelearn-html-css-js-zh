- en: '*Chapter 5:* Improving the Tests'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main learning goal of this chapter is to get familiar with how to improve
    a set of end-to-end tests. This will be achieved with the help of test setup and
    teardown. Also, we will take a look at different command-line settings to run
    tests. The testing techniques that we will cover in this chapter are universal
    and can be reused to write automated tests for any web project. By the end of
    the chapter, we will have an improved test suite and will learn how to run it
    with command-line options.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Executing selected tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring test setup and teardown.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding setup and teardown to the test project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tests with command-line settings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch5](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch5).
  prefs: []
  type: TYPE_NORMAL
- en: Executing selected tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Quite often, when writing or extending a set of tests, we need to concentrate
    on one specific test while omitting all others. Tests are usually organized into
    sets (groups of tests are also known as fixtures). Luckily, TestCafe provides
    the `fixture.only` and `test.only` methods to specify that only a selected test
    or fixture should be executed and all others should be skipped. Let''s review
    it using our set of tests in a simplified form, with all the test actions commented
    out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the example, `test.only` is used in the `Create a new user`
    test, and `fixture.only` is used in the `Redmine entities deletion tests` fixture,
    so only the `Create a new user`, `Delete the issue`, and `Delete the file` tests
    will be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If several tests (or fixtures) are marked with `test.only` (or `fixture.only`),
    all the marked tests and fixtures will be executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to that, TestCafe allows you to use the `test.skip` and `fixture.skip`
    methods to specify a test or a fixture to skip when tests run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As demonstrated in the preceding example, only the `Create a new user` and `Edit
    the issue` tests will be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned how to execute a particular test or fixture, skipping
    all the others, let's see how test setup and teardown can be done.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring test setup and teardown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As tests can be quite long and contain a lot of repetitive actions, TestCafe
    has a way to optimize this with test setup and teardown.
  prefs: []
  type: TYPE_NORMAL
- en: Setup is usually done by executing a number of specific functions (also known
    as hooks) *before* a fixture or test starts (including `fixture.before`, `fixture.beforeEach`,
    and `test.before`).
  prefs: []
  type: TYPE_NORMAL
- en: Teardown is usually done by executing a number of specific functions *after*
    a fixture or test is completed (including `fixture.after`, `fixture.afterEach`,
    and `test.after`).
  prefs: []
  type: TYPE_NORMAL
- en: There are six methods for using hooks in TestCafe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first two (`fixture.before` and `fixture.after`) do not have access to
    the tested page and thus should be used to perform server-side operations, such
    as preparing the tested application''s server or pre-creating some test data in
    the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fixture.before` can be used to specify actions that should be executed before
    the first test in a fixture starts ([https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/before.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/before.html)).
    In the following example, the `createTestData` function will be called before
    the first test of the `My first set of tests` fixture:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`fixture.after` can be used to specify actions that should be executed after
    the last test in a fixture is finished ([https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/after.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/after.html)).
    In the following example, the `deleteTestData` function will be called after the
    last test of the `My first set of tests` fixture:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next four methods (`fixture.beforeEach`, `fixture.afterEach`, `test.before`,
    and `test.after`) are launched when the tested web page is already loaded, so
    you can execute test actions and other test API methods inside these test hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fixture.beforeEach` can be used to specify actions that should be executed
    before each test in a fixture ([https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/beforeeach.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/beforeeach.html)).
    In the following example, the `click` action will be performed before each test
    of the `My first set of tests` fixture:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`fixture.afterEach` can be used to specify actions that should be executed
    after each test in a fixture ([https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/aftereach.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/fixture/aftereach.html)).
    In the following example, the `click` action will be performed after each test
    of the `My first set of tests` fixture:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`test.before` can be used to specify actions that should be executed before
    a particular test ([https://devexpress.github.io/testcafe/documentation/reference/test-api/test/before.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/test/before.html)).
    In the following example, the `click` action will be performed before the `My
    first Test` test:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`test.after` can be used to specify actions that should be executed after a
    particular test ([https://devexpress.github.io/testcafe/documentation/reference/test-api/test/after.html](https://devexpress.github.io/testcafe/documentation/reference/test-api/test/after.html)).
    In the following example, the `click` action will be performed after the `My first
    Test` test:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If a test runs in several browsers, test hooks are executed in each browser.
    If both the `fixture.beforeEach` and `test.before` (or `fixture.afterEach` and
    `test.after`) hooks are used together, the most specific hook will overrule. So,
    `test.before` (or `test.after`) will be executed and `fixture.beforeEach` (or
    `fixture.afterEach`) will be omitted and will not run for this test.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can read more about the hooks at [https://devexpress.github.io/testcafe/documentation/guides/basic-guides/organize-tests.html#initialization-and-clean-up](https://devexpress.github.io/testcafe/documentation/guides/basic-guides/organize-tests.html#initialization-and-clean-up).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we went through the types of hooks that are available in TestCafe.
    Now, let's put this knowledge into practice by applying it to our set of tests.
  prefs: []
  type: TYPE_NORMAL
- en: Adding setup and teardown to the test project
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will see how to optimize our test project code with setup
    and teardown blocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we saw in the *Exploring test setup and teardown* section, `fixture.beforeEach`
    can specifically be useful when each of the tests needs a user to be logged in
    before the test. That''s exactly our case, so let''s add the `beforeEach` block
    to the `Redmine entities creation tests` fixture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also remove the login actions from all the tests of the `Redmine entities
    creation tests` fixture, as these actions will be executed in the `beforeEach`
    block. So, the `Create a new project` test will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After all login actions were moved to the `beforeEach` block, the `Create`
    `a new` `issue` test will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And the `Verify that the issue is displayed on a project page` test, without
    login actions, will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, the `Upload a file` test without login actions will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the `beforeEach` block to the `Redmine entities editing tests`
    fixture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also remove the login actions from all the tests of the `Redmine entities
    editing tests` fixture, as this action will now be executed in the `beforeEach`
    block. So, the `Edit the issue` test will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'All login actions were moved to the `beforeEach` block, so the `Verify that
    the updated issue is displayed on a project page` test will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Search for the issue` test without all login actions will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the `beforeEach` block to the `Redmine entities deletion tests`
    fixture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also remove the login actions from all the tests of the `Redmine entities
    deletion tests` fixture, as these actions will now be executed in the `beforeEach`
    block. So, the `Delete the issue` test will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'And the `Delete the file` test, after all login actions were moved to the `beforeEach`
    block, will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can also review and download this file on GitHub at [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch5/test-project/tests/basic-tests17.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch5/test-project/tests/basic-tests17.js).
  prefs: []
  type: TYPE_NORMAL
- en: As we have integrated setup and teardown blocks, let's see how to run tests
    with command-line settings.
  prefs: []
  type: TYPE_NORMAL
- en: Running tests with command-line settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we already learned in [*Chapter 3*](B16280_03_Final_JM_ePub.xhtml#_idTextAnchor043),
    *Setting Up the Environment*, when you trigger tests by executing the `testcafe`
    command, TestCafe reads settings from the `.testcaferc.json` configuration file,
    if this file exists, and then applies the settings from the command line on top
    of it. Command-line settings overrule values from the configuration file if they
    differ. TestCafe outputs information about each overridden property to the console.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If the `browsers` and `src` properties are provided in the configuration file,
    you can omit them in the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review some of the main command-line settings that can be used with
    the `testcafe` command while launching the tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--help`, or `-h`, outputs a list of all the available command-line options
    ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-h---help](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-h---help)).
    Open any shell and run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--quarantine-mode`, or `-q`, enables quarantine mode for tests that fail ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-q---quarantine-mode](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-q---quarantine-mode)).
    Open any shell and run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--debug-mode`, or `-d`, executes test steps one by one, pausing the test after
    each step for debugging ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-d---debug-mode](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-d---debug-mode)).
    Open any shell and run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--debug-on-fail`: If a test fails, automatically pause it and enter debug
    mode ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--debug-on-fail](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--debug-on-fail)).
    Open any shell and run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--disable-page-caching` disables browser page caching during test execution
    ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--disable-page-caching](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--disable-page-caching)).
    Open any shell and run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--skip-js-errors`, or `-e`, makes sure tests don''t fail when a JavaScript
    error occurs on a tested page ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-e---skip-js-errors](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-e---skip-js-errors)).
    Open any shell and run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--skip-uncaught-errors`, or `-u`, ignores uncaught errors and unhandled promise
    rejections that occur during test execution ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-u---skip-uncaught-errors](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-u---skip-uncaught-errors)).
    Open any shell and run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--test <name>`, or `-t <name>`, only runs tests with the specified name ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-t-name---test-name](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-t-name---test-name)).
    Open any shell and run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--test-grep <pattern>`, or `-T <pattern>`, only runs tests matching the specified
    pattern ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-t-pattern---test-grep-pattern](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-t-pattern---test-grep-pattern)).
    For example, to run tests whose names are `Click a link`, `Click a dropdown`,
    and so on, open any shell and run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--fixture <name>`, or `-f <name>`, only runs tests from the fixtures with
    the specified name ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-f-name---fixture-name](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-f-name---fixture-name)).
    Open any shell and run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--fixture-grep <pattern>`, or `-F <pattern>`, only runs tests from the fixtures
    matching the specified pattern ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-f-pattern---fixture-grep-pattern](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-f-pattern---fixture-grep-pattern)).
    For example, to run tests from the fixtures whose names are `Suite1`, `Suite2`,
    and so on, open any shell and run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--test-meta <key=value[,key2=value2,...]>` runs tests whose metadata matches
    the specified key-value pair ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--test-meta-keyvaluekey2value2](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--test-meta-keyvaluekey2value2)).
    For example, to run tests whose metadata''s `suite` property is set to `fast`
    and `env` property is set to `staging`, open any shell and run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--fixture-meta <key=value[,key2=value2,...]>` runs tests from fixtures whose
    metadata matches the specified key-value pair ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--fixture-meta-keyvaluekey2value2](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--fixture-meta-keyvaluekey2value2)).
    For example, to run tests from fixtures whose metadata''s `suite` property is
    set to `long` and `env` property is set to `production`, open any shell and run
    the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--app <command>`, or `-a <command>`, executes the specified shell command
    before tests are started, and is often used to launch the tested app using the
    specified command before running tests ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-a-command---app-command](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-a-command---app-command)).
    Open any shell and run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--concurrency <number>`, or `-c <number>`, runs tests in parallel (concurrently)
    by spawning the provided number of browser instances ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-c-n---concurrency-n](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-c-n---concurrency-n)).
    Open any shell and run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`--speed <factor>` sets the speed of test execution from the slowest, `0.01`,
    to the fastest, `1` ([https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--speed-factor](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--speed-factor)).
    Open any shell and run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can read more about all the command-line options at [https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html](https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html).
  prefs: []
  type: TYPE_NORMAL
- en: It is good practice to keep all the major settings in the `.testcaferc.json`
    configuration file, overriding them with command-line settings when needed – for
    example, a combination of `--debug-on-fail --speed 0.8` will be quite convenient
    for debugging.
  prefs: []
  type: TYPE_NORMAL
- en: To sum up, in this section we learned about some of the main command-line settings
    and how they can be used when launching tests.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored how to execute tests selectively, as well as how
    to generalize some test actions with the help of test setup and teardown. Also,
    we reviewed some command-line settings to run tests. Now we have an improved test
    suite and know how to run it with command-line options.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue to refine our test suite by moving some
    test logic to separate functions and refactoring tests with `PageObjects`.
  prefs: []
  type: TYPE_NORMAL
