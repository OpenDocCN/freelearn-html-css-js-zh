- en: Chapter 2. Our First Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned what Marionette is, where to find the source
    code and documentation, and other useful resources that will help us to learn
    more about Marionette. But we believe the best way to learn something is by putting
    it into practice. So in this book, we will build an application with moderate
    complexity, that is, it is complex enough to break the Hello World! barrier, allowing
    us to discover the benefits that Marionette has to offer, but simple enough to
    complete it with in this book. We will show some standalone code snippets to introduce
    you to each new concept; however most of the time we will stick to the application
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will review how to set up your development environment
    in order to build our first application. We will also learn three important parts
    of `Marionette.js`: the marionette router, marionette controller, and marionette
    application.'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to what we are building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The application that we will be building in this book is a website for a book
    store. We should be able to perform the following actions on the website:'
  prefs: []
  type: TYPE_NORMAL
- en: Display a list of book categories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select a category and display the related books
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Present a description, price, and other important details of the book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add books to the shopping cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display the shopping cart items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The website that we are going to build is just an example application. It's
    mandatory to follow the structure proposed in this book, as every application
    has different needs. Nevertheless, it's a good starting point and our idea is
    to show how each component of Marionette solves a problem and how to make its
    components work together.
  prefs: []
  type: TYPE_NORMAL
- en: Also, keep in mind that we will give attention to the Marionette components
    of the code, explaining in detail their benefits, and to adding them to the application.
    However, we will not dive deep into Backbone details such as `Backbone.Model`
    and `Backbone.Collection`, which are the core components of Backbone, as knowledge
    of this is already assumed.
  prefs: []
  type: TYPE_NORMAL
- en: One of the concepts that Marionette adds to Backbone is that of an application
    object—`Backbone.Marionette.Application`. We will start this book with this topic
    because the object will be the container of all of your Backbone views and models.
    One of its responsibilities is, before the user starts interacting with the website,
    it must initialize some of the components, such as the `Backbone.Router` component,
    that will be listening to the route (URL) changes of our application. This object
    provides some handy methods to perform this initialization. But, before we dig
    deeper into details, let's first take a look at what we are building.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot helps us to illustrate the structure of the book store
    application that we are going to build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to what we are building](img/4252OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have a navigation section that provides the categories of the books. Then
    in the middle, we have two sections. The one on top is the list of books by name,
    author, and price. This section also allows users to order books.
  prefs: []
  type: TYPE_NORMAL
- en: The second section, in the center of the screen, will show a description of
    each book as the user selects from the list on top. Finally, to the right of the
    screen, we have the Order section that will contain the details about our order.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the book, the application should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to what we are building](img/4252OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The goal of this chapter is to build the foundation of the book store website
    and a part of that foundation is to have the `Backbone.Marionette.Application`
    object working with enough functionality so that we can call it an application.
    Our philosophy is to take small steps at a time and then check where we stand.
    So let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we will be building an application together, we need to set up our development
    environment. The following are the steps to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder and name it `Bookstore`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside this folder, create two new folders—one named `Source Code` and the other
    `Libraries`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Libraries` folder, place the following four libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Underscore.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jQuery.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Backbone.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Backbone.Marionette.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For styling purposes, we will use Twitter bootstrap v2\. Download the default
    package, unzip it, and place the entire unzipped bootstrap folder beside the `.js`
    files inside the `Libraries` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `Source Code` folder, create a new folder with the name `js` as it will
    be the location where we will save all our JavaScript files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the `Source Code` folder, create an HTML file and name it `Index.html`.
    It should be placed at the same level as the `js` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that your folder structure looks like the following screenshot and
    that you have the right library files inside the `Libraries` folder.![Setting
    up our development environment](img/4252OS_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your `Source Code` folder should look like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Setting up our development environment](img/4252OS_02_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We are building a single-page application and in this section, we are about
    to build the initial HTML page structure for our application. It is the HTML file
    that will be rendered by the server the first time a user types the URL of the
    site.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `Index.html` file in your preferred code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To avoid the tedious task of writing the HTML file manually for this chapter,
    we have made it available for you at [http://jsfiddle.net/](http://jsfiddle.net/).
    The code is available at [http://jsfiddle.net/rayweb_on/hsrv7/11/](http://jsfiddle.net/rayweb_on/hsrv7/11/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '[jsfiddle.net](http://jsfiddle.net)—if you don''t know it already, this is
    an excellent tool to test the small parts of your JavaScript code and share your
    snippets with ease.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: I'm sure that if you are reading a Marionette book, it is because you have enough
    experience to put the CSS and JS tags in the right place. So feel free to skip
    the following steps.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Copy the **CSS** section and paste it into the `<head>` section of the HTML
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the **HTML** section and paste it into the `<body>` section of the HTML
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At [http://jsfiddle.net/](http://jsfiddle.net/), the scripts are already included
    for you. But in our local environment, we have to add them. We will do it just
    at the bottom of the `<html>` tag, but still inside the `<body>` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are done with copying the initial structure, your HTML file should
    look like the following screenshot (the style script and the template script are
    collapsed in the screenshot). In this chapter, we will be using the console of
    your browser and we won't be interacting with the HTML file for now, but it's
    important that your `Index.html` file follows the structure shown in the following
    screenshot:![Setting up our development environment](img/4252OS_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Bootstrap and styling your page is outside the scope of this book. But it's
    a pretty convenient library that allows us to set up a decent looking HTML file
    for this demo application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: But wait a minute…what does the last script `js/BookStore.js` refer to? Well,
    that's the JavaScript code that we will be creating in the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Backbone.Marionette.Application object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new file inside the `js` folder and name it `BookStore.js`. To create
    a new application, we just need to type the following line in `Bookstore.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will name the application `BookStoreApp` and will start attaching our Backbone
    pieces to this application. But, we already mentioned that Marionette brings the
    concept of an application object and, from the documentation, we also know that
    it is an object that will help us to coordinate the pieces of our application.
    You may ask, what pieces; for example, a `Marionette.Router` object and a `Marionette.Controller`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Backbone already has a router!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yes, Backbone already has a router object. Then what does the `Marionette.Router`
    object do differently? Well, the new router adds the ability of reducing your
    router to just a small file that will contain only the routes of your application
    and not the methods that will respond and take action once a route is matched.
    These methods belong to a controller—another new concept that Marionette adds
    to Backbone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s build a `Marionette.Router` object and a `Marionette.Controller` object
    to get a better understanding of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we created the `BookStoreController` object,
    which is just a JavaScript object containing the functions that will match the
    name of the methods defined in the router. In this case, the empty router will
    call the `displayBooks` method or the controller. This separation of concerns
    will allow us to have a cleaner code base as the router will only know about the
    routes. We declare which controller will handle the routes by setting the controller
    property of the router to `BookStoreController`. The rest of the code snippet
    is just the declaration of the routes.
  prefs: []
  type: TYPE_NORMAL
- en: It is not mandatory to have a router in order to use a controller. The Marionette
    controllers can be instantiated without the need of a router. You may not handle
    the interaction of your site by changes in the URL but by events. In this case,
    the controller still adds value as it can be the container of your views.
  prefs: []
  type: TYPE_NORMAL
- en: It's recommended to have small routers and controllers divided as per the purpose
    of your application instead of a giant single-router file that will contain all
    the routes and the functions.
  prefs: []
  type: TYPE_NORMAL
- en: While these two pieces are part of the application's foundation, we still need
    to make them work within it. But, we also need to do a little more in order to
    achieve a functional application. Let's take small steps for this. Let's first
    check out whether we can see a message log in the console of our browser.
  prefs: []
  type: TYPE_NORMAL
- en: To do that, we need to put all the code together and add the missing pieces
    in order to make it work.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have only defined the application, controller, and router. But where
    should we instantiate them? The `Backbone.Marionette.Application` object offers
    the possibility to add initializer methods that will run when we start our application.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, you read correctly! You can add as many methods as you need in case you
    want to keep the logic of this initializers separated.
  prefs: []
  type: TYPE_NORMAL
- en: Inside this initializer method, we will instantiate the router and the controller,
    and just for fun, add another log message to see the order of execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Another useful function of the applications is the events that fire the `initialize:before`,
    `initialize:after`, and `start` functions. The names of these functions are quite
    descriptive. As the name suggests, the `initialize:before` function will be executed
    before the initializers, the `initialize:after` function will be executed after
    the initializers, and the `start` function is responsible for starting the application
    and thereafter starting the initializers.
  prefs: []
  type: TYPE_NORMAL
- en: In our application, we will use `initialize:after`. This function will be helpful
    for us, as the last thing we want to do once we instantiate the router is start
    `Backbone.history`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step to complete the infrastructure or foundation of our application
    is call the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s put all the code snippets together as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can go ahead and open the `Index.html` file in your browser and see
    the results on the console.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the application, controller, and router functionality,
    and how to get them working together to get a simple application skeleton which
    will be the base for our book store application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will familiarize ourselves with the different views
    that Marionette adds to the Backbone development.
  prefs: []
  type: TYPE_NORMAL
