- en: Chapter 4. Creating Models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a simple collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Session object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sorting with MongoDB queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering with MongoDB queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating upsert MongoDB queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a partial collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Meteor data model is designed to be very easy to develop. Gone are the days
    of worrying about lengthy SQL statements, database drivers, and rigidly structured
    database tables. In its place is a straightforward, JSON-based document model
    that lets you focus on the functionality of your application. This chapter contains
    the most common recipes to interact with MongoDB and the reactive model context
    inside Meteor.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a simple collection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Collections are the medium of communication between the client and the server,
    with changes being pushed down to the client and requests being pushed up to the
    server. This recipe will show you how and where to declare a collection for use
    on both the client and the server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, you will need Meteor installed and have a project created. To create
    a standard project file structure, please see the *Setting up your project file
    structure* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Optimizing
    Your Workflow"), *Optimizing Your Workflow*.
  prefs: []
  type: TYPE_NORMAL
- en: For this particular exercise, you will also need to have the `autopublish` and
    `insecure` packages installed (which are installed by default). If you need to
    add them, please see the *Adding Meteor packages* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To implement a simple collection, proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file in your `both` folder, called `simple.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `simple.js` file in an editor, and declare a MongoDB comments collection
    by entering the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open the `main.js` file in your client''s `scripts` folder `([project
    root]/client/scripts/main.js`), add an action to the `click button` event handler,
    which will insert a record into the `Comments` collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add a comments helper as well. Locate the `Template.hello.helpers`
    method and add the following helper to the beginning:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save these changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your `main.html` page (`[project root]/client/main.html`), add a `{{ #each..}}`
    template fragment to the `hello` template as specified in the following example,
    and save your changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open a terminal window, navigate to the `[root]` folder of your project,
    and start up Meteor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In a web browser, navigate to `http://localhost:3000/` and click on the button
    on the screen several times. The result should add comments with each click, similar
    to this:![How to do it...](img/image00360.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The declaration in `simple.js` is read by both the client and the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This instantiates the model and manifests as a collection called `Comments`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The changes to `main.js` consist of an extra action in the `click` event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This adds a comment object to the `Comments` collection on the client, which
    is quickly propagated to a minimongo on the client and then to MongoDB on the
    server. The UI is updated instantly because of the second change in `main.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `comments` helper is a **reactive** **computation**, which means that it
    reruns itself every time there is a change in one of the **reactive** **contexts**
    (observed properties) it contains. In this example, `Comments.find()` is a reactive
    context, and therefore, whenever there is a change in the `Comments` collection,
    this `comments` helper will rerun.
  prefs: []
  type: TYPE_NORMAL
- en: Provided that the MongoDB collection (server side) ratifies the change, the
    UI will stay updated. If there was a conflict or some problem with the transaction,
    the server will send a corrective message, and Minimongo will be updated with
    the correct state. But, in this case, since we have no conflicts or latency, the
    change stuck, and comments are added after each click.
  prefs: []
  type: TYPE_NORMAL
- en: 'This template is reactive, which means when a change is found in the `Comments`
    collection, this function will be updated, and Blaze will re-render the `{{#each…}}`
    template block added to `main.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating dynamic lists* and *Using reactivity with HTML attributes* recipes
    in [Chapter 3](part0036.xhtml#aid-12AK81 "Chapter 3. Building Great User Interfaces"),
    *Building Great User Interfaces*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Session object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Session** **object** is a global client-side object, and as such, is part
    of the client model. Though it's not part of any collection, the Session object
    can be used in a reactive context, which means you can use it to make reactive
    methods rerun whenever it is changed. This recipe will show you how to use the
    Session object to update the elements on your page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to have Meteor installed and a project created. To create a standard
    project file structure, please see the *Setting up your project file structure*
    recipe in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Optimizing Your Workflow"),
    *Optimizing Your Workflow*. A quick default project will work just as well for
    this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the Session object, proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `main.js` file in your client''s `scripts` folder `([project root]/client/scripts/main.js`)
    and add a `greeting` helper to the beginning of `Template.hello.helpers`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `main.html` and add the greeting to your `hello` template, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If Meteor is not already running, initiate it by navigating to your project
    root folder in a terminal window and run the `meteor` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, open a browser, navigate to `http://localhost:3000/`, and open your web
    console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the web console, enter and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The greeting on your screen should have changed from **Welcome to Chapter 4**
    to **I just changed the Session Object**, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00361.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding a call to `Session.get` inside the `greeting` template helper tells Meteor
    to look for a value placed in the greeting key of the `Session.keys` collection.
    As the collections are reactive contexts in Meteor, changes made in the `Session`
    collection (even when executed through the web console) are instantly reflected
    in the UI.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Session` object is literally a *Session* object. It lasts only until the
    next manual page refresh. If you want something more permanent, you will need
    to use offline storage or a MongoDB collection. Make sure to include this fact
    in your design/development plans.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As of `0.9.1`, Meteor also provides single reactive variables. They can be used
    in place of the `Session` object, have a cleaner syntax, can be any type of object,
    and support checking for changes before a reactive invalidation is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use reactive variables, add the `reactive-var` package to your Meteor project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then declare and use a variable instead of the `Sessio` `n` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This variable (declared properly) can be manipulated in the same way as the
    Session object, with cleaner syntax. The following command entered in the web
    debug console will change the display accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will result in something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/image00362.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using reactivity with HTML attributes* recipe in [Chapter 3](part0036.xhtml#aid-12AK81
    "Chapter 3. Building Great User Interfaces"), *Building Great User Interfaces*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating and consuming a reactive* value and *Updating Blaze template without
    Mongo* recipes in [Chapter 6](part0058.xhtml#aid-1NA0K1 "Chapter 6. Mastering
    Reactivity"), *Mastering Reactivity*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sorting with MongoDB queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many times when you will need to sort a collection. Most recent comments,
    alphabetized lists, and bank transactions by amount are all good examples. This
    recipe will show you how to sort MongoDB collections, using the options in your
    `find()` request.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the *Implementing a simple collection* recipe found in this
    chapter as a baseline. please follow that recipe in preparation for this activity.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform sorting with MongoDB queries, proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `main.html` file (located at `[project root]/client/main.html`), make
    the following modification to the `{{#each…}}` template fragment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `Comments.insert` action inside the `click` event handler,
    found in `[project root]/client/script/main.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, inside `main.js`, modify the `find()` arguments to specify a `sort`
    comments by its `number` in descending order (`-1`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all the changes and run Meteor if necessary. Navigate to `http://localhost:3000/`,
    click on the button on the screen several times, and watch as the comments are
    sorted by a comment number:![How to do it…](img/image00363.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The crux of this recipe is found in the `find()` method arguments. We modified
    how the number was being stored by adding a random number so that if we do nothing
    else, the comments will appear out of order. But by adding `{sort:{number:-1}}`
    to the `comments` helper, we are giving results to Blaze that are sorted in descending
    order by the randomly generated `number` property. To sort in ascending order,
    use `1` as your parameter. To sort in descending order, use `-1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the changes are to support the sorting change. First, `main.js`
    was modified so that the `number` property could be assigned at random and added
    to the comment object when it is inserted into the `Comments` collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The last change is made to `main.html` to display the new `number` property
    in the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can perform complex sorts using multiple properties if the need arises.
    To do so, simply add the additional property key to the `sort` option, with either
    an ascending (`1`) or descending(`-1`) value, similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Inserting templates with Spacebars* recipe in [Chapter 3](part0036.xhtml#aid-12AK81
    "Chapter 3. Building Great User Interfaces"), *Building Great User Interfaces*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering with MongoDB queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether you're performing searches, organizing records, or narrowing down results,
    sooner or later, you'll want to filter the results of your collections. This recipe
    shows you how to limit the number of records in a collection, using MongoDB's
    `find` method options.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the project created in the *Sorting with MongoDB queries* recipe,
    found in this chapter. Please complete that recipe, and use the files as a baseline
    for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To filter MongoDB queries, proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make the following change to the `comments` helper function in `[project root]/client/scripts/main.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save `main.js` and start Meteor if necessary. Navigate to `http://localhost:3000/`;
    click the button on the screen several times and watch as only the comments that
    contain an even number are displayed. Your results after multiple clicks should
    look similar to the following screenshot:![How to do it…](img/image00364.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the regular expression in `main.js` to only show comments that contain
    an odd number by making the following change to the query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and observe the change to your UI, which should look similar
    to the following screenshot:![How to do it…](img/image00365.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By adding a selector to the `find()` statement in the query, the collection
    is paired down to match whatever is specified in the selector. In this case, the
    selector was a regular expression, which returned results only if the `number`
    property contained at least one even number, and subsequently, if the `number`
    property contained at least one odd number.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that this didn't change the `{sort:{number:-1}}` predicate in any way
    and that it works exactly the same, regardless of how we changed the query.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a healthy range of selectors that you can use to limit/filter your
    collection. For a complete list, check out the MongoDB query operators list found
    at [http://docs.mongodb.org/manual/reference/operator/query/](http://docs.mongodb.org/manual/reference/operator/query/).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Moving the filter to the server side provides security and performance advantages
    as the non-matching results are never sent down the wire to the client in the
    first place. In fact, `find()` is most commonly found on the server, using the
    Meteor publish and subscribe functionality. For an example of `find()` being used
    on the server, please see the *Implementing a partial collection* recipe found
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Implementing a partial collection* and *Sorting with MongoDB queries* recipes
    in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating upsert MongoDB queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you are developing applications, on occasion, you will run into a situation
    where you need to either update an existing record, or insert a record if it doesn't
    exist already. This is done traditionally using conditional operators such as
    `if`.
  prefs: []
  type: TYPE_NORMAL
- en: Through MongoDB, Meteor removes the burden of checking by allowing you to upsert
    (update + insert) records using a simple syntax. This recipe will show you how.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will again use the project created in the *Sorting with MongoDB queries*
    recipe, found in this chapter. Please create a fresh copy of this recipe, and
    use the files as a baseline for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also be using the official `momentjs` package. To add the `momentjs`
    package, navigate to your project''s root folder in a terminal window. Once there,
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This will add the `momentjs` package, and you're now ready to complete this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We first need to increase the likelihood of duplicate records and identify
    the time at which each comment was inserted or updated. Proceed with the following
    steps to create upsert MongoDB queries:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `[project root]/client/scripts/main.js` file and modify `Template.hello.events`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now create a server method for the `upsert` function. By default, Meteor
    only allows modifications on the client by `_id`, and since an `_id` value may
    not exist, we need to create a server method for our `upsert` function. Open `[project
    root]/server/server.js` and add the following method to the bottom of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we will modify `[project root]/client/main.html` to display the timestamp
    on each comment in the `comments` collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes, start the Meteor if it is not already running, and navigate
    to `http://localhost:3000/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuously, click on the button on the screen, and observe how, instead of
    new records being added on each and every click, if a record already exists, the
    record's timestamp is updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In `server.js`, we created a method by declaring the `commentUpsert` method
    inside `Meteor.methods`.
  prefs: []
  type: TYPE_NORMAL
- en: This method receives a new comment object (`newC`) as an argument and calls
    `upsert` on the `Comments` collection. The first argument (the selector) tells
    MongoDB to look for any entries that match the `number` property found in the
    `newC` object. The second argument (the modifier) tells MongoDB which fields to
    insert/update on the `upsert` object.
  prefs: []
  type: TYPE_NORMAL
- en: If a match is found, the fields are updated. If no match is found, a new record
    is inserted, with the `newC` object providing the values.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `main.html`, we simply added the new `time` property to the display:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: In `main.js`, we first remove the `Comments.insert()` statement. We then create
    the `newC` object, populating it with a random number, some text, and a timestamp
    using `moment().format()` to convert the timestamp into a readable format. Finally,
    we make a call to the `commentUpsert` server-side method, with a `Meteor.call`
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: The result confirms that our `upsert` function is working properly, as each
    new comment (with a new `number` property) is added to our list, and each existing
    comment (with an already existing `number` property) has its timestamp updated.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Meteor simplifies things a bit by adding the actual `upsert` function, rather
    than setting `{upsert:true}` inside a traditional MongoDB `update` query. Both
    `update` or `upsert` can be used in Meteor, and it's really up to you to choose.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Extensive documentation exists on updating and upserting records in a MongoDB
    collection. You can find more details at [http://docs.mongodb.org/manual/reference/method/db.collection.update/](http://docs.mongodb.org/manual/reference/method/db.collection.update/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building custom server methods* recipe in [Chapter 11](part0083.xhtml#aid-2F4UM1
    "Chapter 11. Leveraging Advanced Features"), *Leveraging Advanced Features*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a partial collection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Partial collections are collections sent down the wire from the server that
    contain only part of the information available on each record. This is useful
    for hiding properties or fields, and also for paring down the size of records
    containing a lot of information. In other words, partial collections can help
    with security and performance. This recipe will show you how to implement a partial
    collection on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's use the *Creating upsert MongoDB queries* recipe found in this chapter
    as a baseline for this recipe. Create a fresh copy of this recipe and then proceed
    to the other preparations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s spruce things up just a bit as well while we''re at it. In a terminal
    window, navigate to the root project folder and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This will add the `bootstrap` CSS framework. We now want to take advantage
    of `bootstrap`, so open up your `main.html` file (found in `[project root]/client/`)
    and make the following changes to the `hello` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'These changes will use some of the default `bootstrap` component styles to
    make our display look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00366.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We now need to remove the `autopublish` default Meteor package. In the terminal
    window, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This will temporarily *break* your application; in that no records from the
    `Comments` collection are being sent down the wire to the client, so no records
    will be displayed in the UI. Don't worry, we'll fix this!
  prefs: []
  type: TYPE_NORMAL
- en: You are now ready to move on to the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, since we removed `autopublish`, we need to prepare the client to subscribe
    to the `comments` data stream. To implement a partial collection, proceed with
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `[project root]/client/scripts/main.js` and add the following code to
    the very top of the document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While we have `main.js` open, let''s also change what we sort, by making the
    following change to the `comments` helper function and save your changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to have the server publish the `Comments` data collection. We''ll
    simultaneously remove the text field from the response stream, implementing a
    **partial collection**. Open `[project root]/server/server.js`, add the following
    code, and save your changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now immediately see that the text field is no longer being displayed
    in the UI, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00367.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Let''s clean up our UI a little bit now and make it obvious that the records
    are being reordered. Open `main.html` again, make the following changes, and save
    the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, when you click on the button to update the `time` property, the timestamp
    will be updated, and the ordering of the records will change with each click (click
    several times to really see the effect in action):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00368.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The crux of this recipe is found inside `server.js` where we added the `fields`
    field specifier to the MongoDB query (in the `Meteor.publish(…)` statement):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This field specifier tells the MongoDB query to exclude the text field/property
    from the results. Once this change has been made, `main.html` still tries to call
    `{{text}}` in the template, but since it's null, it doesn't appear. We then removed
    the call to display `{{text}}` altogether, because it wasn't needed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `fields` field specifier can be made **exclusive**, as we have seen in
    the preceding section, by only listing the fields we don''t want to see. To do
    this, simply use the `:false` (or `:0`) parameter for each field you don''t want
    to see, and the rest of the fields will be included by default. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The field specifier can also be made **inclusive**, which means that only the
    fields specified will be included by using the `:true` (or `:1`) parameter. This
    would look similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To read more about the `fields` field specifier, check out the official Meteor
    documentation at [http://docs.meteor.com/#/full/fieldspecifiers](http://docs.meteor.com/#/full/fieldspecifiers).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Basic safety – turning off autopublish* recipe in [Chapter 9](part0073.xhtml#aid-25JP21
    "Chapter 9. Securing Your Application"), *Securing Your Application*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
