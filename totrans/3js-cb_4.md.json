["```js\n    var cubeGeometry = new THREE.BoxGeometry(15, 15, 15);\n    ```", "```js\n    var cubeBumpMaterial = new THREE.MeshPhongMaterial();\n\n    cubeBumpMaterial.map = THREE.ImageUtils.loadTexture(\n                        \"../assets/textures/Brick-2399.jpg\");\n    cubeBumpMaterial.bumpMap = THREE.ImageUtils.loadTexture(\n                \"../assets/textures/Brick-2399-bump-map.jpg\");\n    ```", "```js\n    var bumpCube = new THREE.Mesh(cubeGeometry,\n                                  cubeBumpMaterial);\n    scene.add(bumpCube);\n    ```", "```js\n    var cubeGeometry = new THREE.BoxGeometry(15, 15, 15);\n    ```", "```js\n    var cubeNormalMaterial = new THREE.MeshPhongMaterial();\n    cubeNormalMaterial.map = THREE.ImageUtils.loadTexture(\n                      \"../assets/textures/chesterfield.png\");\n    cubeNormalMaterial.normalMap = THREE.ImageUtils.loadTexture(\n               \"../assets/textures/chesterfield-normal.png\");\n    ```", "```js\n    var normalCube = new THREE.Mesh(\n                         cubeGeometry, cubeNormalMaterial);\n    scene.add(normalCube);\n    ```", "```js\nnormalCube.material.normalScale.x = 1;\nnormalCube.material.normalScale.y = 1;\n```", "```js\n<script src=\"img/clock.js\"></script>\n```", "```js\n    var canvas = document.createElement('canvas');\n    canvas.width=512;\n    canvas.height=512;\n    ```", "```js\n    clock(canvas);\n    ```", "```js\n    var cubeGeometry = new THREE.BoxGeometry(10, 10, 10);\n    var cubeMaterial = new THREE.MeshLambertMaterial();\n    cubeMaterial.map = new THREE.Texture(canvas);\n    var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n    ```", "```js\n    cubeMaterial.map.needsUpdate = true;\n    ```", "```js\n    <video id=\"video\" autoplay loop style=\"display:none\">\n        <source src=\"img/sintel_trailer-480p.mp4\" type='video/mp4'>\n        <source src=\"img/sintel_trailer-480p.webm\" type='video/webm'>\n        <source src=\"img/sintel_trailer-480p.ogv\" type='video/ogg'>\n    </video>\n    ```", "```js\n    var video = document.getElementById( 'video' );\n\n    videoTexture = new THREE.Texture( video );\n    videoTexture.minFilter = THREE.LinearFilter;\n    videoTexture.magFilter = THREE.LinearFilter;\n    videoTexture.format = THREE.RGBFormat;\n    videoTexture.generateMipmaps = false;\n    ```", "```js\n    var cubeGeometry = new THREE.BoxGeometry(1,9,20);\n    var cubeMaterial = new THREE.MeshBasicMaterial({map:videoTexture});\n    ```", "```js\n    var cube = new THREE.Mesh(cubeGeometry, \n                              cubeMaterial);\n    scene.add(cube);\n    ```", "```js\n    function render() {\n       ...\n       videoTexture.needsUpdate = true;\n       ...\n    }\n    ```", "```js\n    var cylinderGeometry = new THREE.CylinderGeometry(\n                               3, 5, 10,20);\n    ```", "```js\n    var material1 = new THREE.MeshLambertMaterial(\n         {color:0xff0000, \n          transparent: true, \n          opacity: 0.7});\n\n    var material2 = new THREE.MeshBasicMaterial(\n                               {wireframe:true});\n    ```", "```js\n    var cylinder = THREE.SceneUtils.createMultiMaterialObject(\n                               cylinderGeometry,\n                               [material1, material2]);\n    ```", "```js\n    scene.add(cylinder);\n    ```", "```js\nfunction createMultiMaterialObject( geometry, materials ) {\nvar group = new THREE.Object3D();\nfor ( var i = 0, l = materials.length; i < l; i ++ ) {\ngroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\n}\nreturn group;\n}\n```", "```js\n    var sphereGeometry = new THREE.SphereGeometry(3, 10, 10);\n    ```", "```js\n    var materials = [];\n    var count = 0;\n    sphereGeometry.faces.forEach(function(face) {\n        face.materialIndex = count++;\n        var material = new THREE.MeshBasicMaterial(\n            {color:Math.abs(Math.sin(count/70))*0xff0000});\n        material.side = THREE.DoubleSide;\n        if (count % 2 == 0) {\n            material.transparent = true;\n            material.opacity = 0.4;\n        }\n        materials.push(material);\n    });\n    ```", "```js\n      var sphere = new THREE.Mesh(\n        sphereGeometry, new THREE.MeshFaceMaterial(materials));\n      scene.add(sphere);\n    ```", "```js\nvar plane = new THREE.PlaneGeometry(10, 10, 9, 9);\n\nvar materials = [];\nvar material_1 = new THREE.MeshBasicMaterial(\n     {color:Math.random()*0xff0000, side: THREE.DoubleSide});\nvar material_2 = new THREE.MeshBasicMaterial(\n      {color:Math.random()*0xff0000, side: THREE.DoubleSide});\n\nmaterials.push(material_1);\nmaterials.push(material_2);\n\nvar index = 0;\nfor (var i = 0 ; i < plane.faces.length-1 ; i+=2) {\n    var face = plane.faces[i];\n    var nextFace = plane.faces[i+1];\n    face.materialIndex = index;\n    nextFace.materialIndex = index;\n\n    if (index === 0) {\n        index = 1;\n    } else {\n        index = 0;\n    }\n}\n```", "```js\n    var cubeGeometry = new THREE.BoxGeometry(10, 10, 10);\n    var cubeMaterial = new THREE.MeshPhongMaterial();\n    ```", "```js\n    cubeMaterial.map = THREE.ImageUtils.loadTexture\n           (\"../assets/textures/webtreats_metal_6-512px.jpg\");\n    ```", "```js\n    cubeMaterial.map.wrapS = cubeMaterial.map.wrapT \n                           = THREE.RepeatWrapping; \n    ```", "```js\n    cubeMaterial.map.repeat.set( 2, 2 );\n    ```", "```js\n    var sphereGeometry = new THREE.SphereGeometry(6, 20, 20);\n    ```", "```js\n    var mat = new THREE.MeshPhongMaterial();\n    mat.map = new THREE.ImageUtils.loadTexture(\n             \"../assets/textures/partial-transparency.png\");\n    mat.transparent = true;\n    mat.side = THREE.DoubleSide;\n    mat.depthWrite = false;\n    mat.color = new THREE.Color(0xff0000);\n    ```", "```js\n    var sphere = new THREE.Mesh(sphereGeometry, mat);\n    scene.add(sphere);\n    ```", "```js\nvar mat = new THREE.MeshPhongMaterial();\nmat.map = new THREE.ImageUtils.loadTexture(\n               \"../assets/textures/partial-transparency.png\");\nmat.transparent = true;\nmat.map.wrapS = mat.map.wrapT = THREE.RepeatWrapping;\nmat.map.repeat.set( 4, 4 );\nmat.depthWrite = false;\nmat.color = new THREE.Color(0x00ff00);\n```", "```js\n    var urls = [\n        '../assets/cubemap/flowers/right.png',\n        '../assets/cubemap/flowers/left.png',\n        '../assets/cubemap/flowers/top.png',\n        '../assets/cubemap/flowers/bottom.png',\n        '../assets/cubemap/flowers/front.png',\n        '../assets/cubemap/flowers/back.png'\n    ];\n    ```", "```js\n    var cubemap = THREE.ImageUtils.loadTextureCube(urls);\n    cubemap.format = THREE.RGBFormat;\n    ```", "```js\n    var shader = THREE.ShaderLib[ \"cube\" ];\n    shader.uniforms[ \"tCube\" ].value = cubemap;\n\n    var material = new THREE.ShaderMaterial( {\n\n        fragmentShader: shader.fragmentShader,\n        vertexShader: shader.vertexShader,\n        uniforms: shader.uniforms,\n        depthWrite: false,\n        side: THREE.DoubleSide\n\n    });\n\n    // create the skybox\n    var skybox = new THREE.Mesh( new THREE.BoxGeometry( 10000, 10000, 10000 ), material );\n    scene.add(skybox);\n    ```", "```js\n    var sphereGeometry = new THREE.SphereGeometry(4,15,15);\n    var envMaterial = new THREE.MeshBasicMaterial(\n                                     {envMap:cubemap});\n    var sphere = new THREE.Mesh(sphereGeometry, envMaterial);\n    ```", "```js\n    scene.add(sphere);\n    ```", "```js\nvec4 cubeColor = textureCube( tCube, \n                 vec3( -vReflect.x, vReflect.yz ) );\n```", "```js\nvar texture = THREE.ImageUtils.loadTexture( 360-degrees.png',\n              new THREE.UVMapping());\n```", "```js\nvar mesh = new THREE.Mesh( \n          new THREE.SphereGeometry( 500, 60, 40 ), \n          new THREE.MeshBasicMaterial( { map: texture }));\nmesh.scale.x = -1;\n```", "```js\nvar cubemap = THREE.ImageUtils.loadTextureCube(urls, new THREE.CubeRefractionMapping());\n```", "```js\nvar envMaterial = new THREE.MeshBasicMaterial({envMap:cubemap});\nenvMaterial.refractionRatio = 0.95;\n```", "```js\n    cubeCamera = new THREE.CubeCamera( 0.1, 20000, 256 );\n    cubeCamera.renderTarget.minFilter = THREE.LinearMipMapLinearFilter;\n    scene.add( cubeCamera );\n    ```", "```js\n    var sphereGeometry = new THREE.SphereGeometry(4,15,15);\n    var cubeGeometry = new THREE.BoxGeometry(5,5,5);\n    var cylinderGeometry = new THREE.CylinderGeometry(2,4,10,20, false);\n    ```", "```js\n    var dynamicEnvMaterial = new THREE.MeshBasicMaterial({envMap: cubeCamera.renderTarget });\n    var envMaterial = new THREE.MeshBasicMaterial({envMap: cubemap });\n    ```", "```js\n    var sphere = new THREE.Mesh(sphereGeometry, dynamicEnvMaterial);\n    sphere.name='sphere';\n    scene.add(sphere);\n\n    var cylinder = new THREE.Mesh(cylinderGeometry, envMaterial);\n    cylinder.name='cylinder';\n    scene.add(cylinder);\n    cylinder.position.set(10,0,0);\n\n    var cube = new THREE.Mesh(cubeGeometry, envMaterial);\n    cube.name='cube';\n    scene.add(cube);\n    cube.position.set(-10,0,0);\n    ```", "```js\n    function render() {\n        sphere.visible = false;\n        cubeCamera.updateCubeMap( renderer, scene );\n        sphere.visible = true;\n        renderer.render(scene, camera);\n        ...\n        requestAnimationFrame(render);\n    }\n    ```", "```js\n    <script src=\"img/OBJLoader.js\"></script>\n    ```", "```js\n    var loader = new THREE.OBJLoader();\n    loader.load(\"../assets/models/blender/uvmap.obj\", function(model) {\n        model.children[0].material.map = THREE.ImageUtils\n             .loadTexture(\"../assets/textures/debug.png\");\n        scene.add(model);\n    });\n    ```", "```js\n    var cubeGeometry = new THREE.BoxGeometry(10, 4, 10);\n    var cubeMaterial = new THREE.MeshPhongMaterial({map: THREE.ImageUtils.loadTexture(\"../assets/textures/debug.png\")});\n    ```", "```js\n    cubeMaterial.blending = THREE.SubtractiveBlending;\n    ```", "```js\n    cubeMaterial.transparent = true;\n    ```", "```js\n    THREE.NoBlending = 0;\n    THREE.NormalBlending = 1;\n    THREE.AdditiveBlending = 2;\n    THREE.SubtractiveBlending = 3;\n    THREE.MultiplyBlending = 4;\n    ```", "```js\nTHREE.DstColorFactor = 208;\nTHREE.OneMinusDstColorFactor = 209;\nTHREE.SrcAlphaSaturateFactor = 210;\n```", "```js\nTHREE.ZeroFactor = 200;\nTHREE.OneFactor = 201;\nTHREE.SrcColorFactor = 202;\nTHREE.OneMinusSrcColorFactor = 203;\nTHREE.SrcAlphaFactor = 204;\nTHREE.OneMinusSrcAlphaFactor = 205;\nTHREE.DstAlphaFactor = 206;\nTHREE.OneMinusDstAlphaFactor = 207;\n```", "```js\nTHREE.AddEquation = 100;\nTHREE.SubtractEquation = 101;\nTHREE.ReverseSubtractEquation = 102;\n```", "```js\n    floor.geometry.faceVertexUvs[1] = floor.geometry.faceVertexUvs[0];\n    ```", "```js\n    floor.material.lightMap = THREE.ImageUtils.loadTexture(\"../assets/textures/shadow-map-soft.png\");\n    ```", "```js\n    floor.material.map = THREE.ImageUtils.loadTexture (\"../assets/textures/tiles.jpg\");\n    ```"]