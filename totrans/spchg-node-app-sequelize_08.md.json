["```js\nfunction customLog(msg) {\n    // insert into db/logger app here\n    // ...\n    // and output to stdout\n    console.log(msg);\n}\nconst sequelize = new Sequelize('sqlite::memory:', {\n    logging: customLog\n});\n```", "```js\nsequelize.log('this will send our message to customLog as \nwell');\n```", "```js\nExecuted (default): SELECT * FROM ...; Elapsed time: 136ms\n```", "```js\nfunction multiLog(...msgs) {\n    msgs.forEach(function(msg) {\n        console.log(msg);\n    });\n}\nconst sequelize = new Sequelize('sqlite::memory:', {\n    logging: multiLog\n});\n```", "```js\nsequelize.log('error', 'custom error message', Date.now(), { id: 100 });\n```", "```js\nconst sequelize = new Sequelize('sqlite::memory:', {\n    logging: false\n});\n```", "```js\nsequelize.findAll({\n  where: {\n    id: 1\n  }\n}, {\n  logging: false\n});\n```", "```js\nconst logger = require('pino')();\nconst sequelize = new Sequelize('sqlite::memory:', {\n    logging: (msg) => logger.debug(msg)\n});\n```", "```js\n{\"level\":30,\"time\":1650118644700,\"pid\":5363,\"hostname\":\"MacBook-Pro-4.local\",\"msg\":\"Executing (default): SHOW INDEX FROM `Airplanes` FROM `airline`\"}\n```", "```js\nconst bunyan = require('bunyan');\nconst logger = bunyan.createLogger({name: 'app'});\nconst sequelize = new Sequelize('sqlite::memory:', {\n    logging: (msg) => logger.info(msg)\n});\n```", "```js\n{\"name\":\"app\",\"hostname\":\"MacBook-Pro-4.local\",\"pid\":6014,\"level\":30,\"msg\":\"Executing (default): SHOW INDEX FROM `Airplanes` FROM `airline`\",\"time\":\"2022-04-16T14:33:13.083Z\",\"v\":0}\n```", "```js\nnpm i pino\n```", "```js\nconst Sequelize = require('sequelize/core');\n```", "```js\nconst logger = require('pino')();\n```", "```js\nconst db = {};\n```", "```js\nconfig.logging = (msg) => logger.info(msg);\n```", "```js\nnpm i @opentelemetry/api @opentelemetry/sdk-trace-node @opentelemetry/instrumentation @opentelemetry/sdk-node @opentelemetry/auto-instrumentations-node opentelemetry-instrumentation-sequelize\n```", "```js\nconst { NodeTracerProvider } = \n    require(‹@opentelemetry/sdk-trace-node');\nconst { registerInstrumentations } = \n    require('@opentelemetry/instrumentation');\nconst { SequelizeInstrumentation } = \n    require(‹opentelemetry-instrumentation-sequelize');\n```", "```js\nconst tracerProvider = new NodeTracerProvider({\n  plugins: {\n    sequelize: {\n      // disabling the default/old plugin is required\n      enabled: false,\n      path: ‹opentelemetry-plugin-sequelize'\n    }\n  }\n});\n```", "```js\nregisterInstrumentations({\n  tracerProvider,\n  instrumentations: [\n    new SequelizeInstrumentation({\n      // any custom instrument options here\n    })\n  ]\n});\n```", "```js\nconst opentelemetry = require(\"@opentelemetry/sdk-node\");\nconst { getNodeAutoInstrumentations } = \n    require(«@opentelemetry/auto-instrumentations-node\");\nconst sdk = new opentelemetry.NodeSDK({\n  traceExporter: new opentelemetry.tracing.\n      ConsoleSpanExporter(),\n      instrumentations: [getNodeAutoInstrumentations()]\n});\nsdk.start();\n```", "```js\nnode -r \"./tracing.js\" index.js\n```", "```js\n{\n  traceId: '7c25880d655f67e5d8e15b83129dc95e',\n  parentId: '934dc0ed012f6e37',\n  name: ‹SELECT›,\n  id: ‹af16347a3fbbf923›,\n  kind: 2,\n  timestamp: 1650124004289597,\n  duration: 1616,\n  attributes: {\n    ‹db.system': 'mysql',\n    ‹net.peer.name›: ‹127.0.0.1›,\n    ‹net.peer.port': 3306,\n    ‹db.connection_string':'jdbc:mysql://127.0.0.1:3306/\n         airline›,\n    ‹db.name›: ‹airline›,\n    ‹db.user': 'root',\n    ‹db.statement': 'SELECT `id`, `planeModel`, \n        `totalSeats`, `createdAt`, `updatedAt` FROM \n        `Airplanes` AS `Airplane`;›\n  },\n  status: { code: 0 },\n  events: []\n}\n```", "```js\nprovider.addSpanProcessor(new BatchSpanProcessor(new \n    ZipkinExporter()))\n```", "```js\ntracerProvider.addSpanProcessor(new BatchSpanProcessor(new \n    ZipkinExporter()));\n```"]