- en: 'Chapter 4. The App: Getting Movies Via Geolocation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 introduced a built-in ability to determine where the user is. The geolocation
    API defines a specification for using JavaScript to access location-based data
    for use in your enterprise application. Understanding where the user is can be
    useful for displaying news and services relevant to the user's locale.
  prefs: []
  type: TYPE_NORMAL
- en: The first major feature of our MovieNow application is the ability to find a
    list of movies nearest to the user based on geolocation data. We will cover how
    the geolocation API works as well as walk through the implementation of this feature.
    Since this is our first feature, we will also walk through making requests using
    **Asynchronous JavaScript and XML** (**AJAX**).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Movies near you
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The W3C Geolocation API specification merely defines an interface by which we
    can obtain data. Where and how geolocation data arrives is rather an implementation
    detail. On most mobile devices, GPS is usually built in and is gathered through
    a combination of satellite data, WiFi, and GSM/CDMA cell tower location. On desktop
    devices, Wi-Fi and geolocation based on IP address can be used. Lastly, Google
    offers a geolocation service fueled by its StreetView data. Needless to say, what
    goes on under the hood need not worry us, but it is good to understand how the
    magic really happens
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the supported browser:'
  prefs: []
  type: TYPE_NORMAL
- en: Firefox 3.5+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chrome 5.0+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safari 5.0+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opera 10.60+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet Explorer 9.0+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Support is rendered on the following mobile devices:'
  prefs: []
  type: TYPE_NORMAL
- en: Android 2.0+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPhone 3.0+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opera Mobile 10.1+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blackberry OS 6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The geolocation API is fairly simple providing only two methods: `getCurrentPosition()`
    and `watchPosition()`. Available under the `navigator.geolocation` namespace,
    these methods are very similar but provide data about the device''s location in
    distinct ways. While `getCurrentPosition` is a one-time call to get geolocation
    data, `watchPosition` returns geolocation data and continues to re-invoke its
    callback when the device''s position changes until the `clearWatch` method is
    invoked.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Both methods take the same three arguments: a `successCallback` function, an
    `errorCallback` function, and a `PositionOptions` function consisting of the following
    attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`boolean enableHighAccuracy`: This indicates that the most accurate data should
    be retrieved, which may result in slower response times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`long timeout`: This indicates the maximum number of milliseconds before the
    request should time out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`long maximumAge`: This indicates that cached content that does not exceed
    the specified age in milliseconds should be returned. If set to `0`, the new position
    data will always be returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Both methods also return a `Position` object to the `successCallback` function,
    which consists of the following poperties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`coords.latitude`: This holds the latitude in decimal degrees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coords.longitude`: This holds the longitude in decimal degrees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coords.altitude`: This holds the height in meters relative to the reference
    ellipsoid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coords.accuracy`: This holds the accuracy of the latitude and longitude in
    meters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coords.altitudeAccuracy`: This holds the accuracy of the altitude in meters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coords.heading`: This holds the travel direction of the device in degrees
    clockwise relative to true north'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coords.speed`: This holds the current ground speed in meters per second'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestamp`: This holds the date and time of when the position was acquired'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, the `errorCallback` argument receives a `PositionError` object when
    invoked, which includes the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`code`: This indicates the error type. This can be any of the following values:
    `PERMISSION_DENIED` (`1`), `POSITION_UNAVAILABLE` (`2`), and `TIMEOUT` (`3`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`message`: This shows the details of the error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we understand the mechanics of the geolocation API, let us go over
    dissent an actual request. Take a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is the most basic call we can make. First of all, since geolocation is
    not supported on all devices, we must take care to avoid unexpected errors by
    checking whether it is supported, which is where the `if` statement comes in.
    Secondly, we invoke the `getCurrentPosition` method passing in a `successCallback`
    function. `successCallback` can be any function we want to invoke when the position
    is returned. Notice the missing `errorCallback` function and options arguments.
    These are strictly optional although it is good practice to implement them to
    account for unexpected error conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Movies near you
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin adding geolocation to our MovieNow enterprise application, we will
    first make some adjustments to our page, which we set up in [Chapter 3](ch03.html
    "Chapter 3. The App: Structure and Semantics"), *The App: Structure and Semantics*.
    In the `article` tag, we will add a `button` tag and a `div` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `button` tag will be used to invoke the action to get movie data while
    the `div` tag is where the data will land. If all goes well, your screen should
    display a button labeled **Find Movies**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Movies near you](img/5689_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you may recall some JavaScript references that were included at the bottom
    of `index.html`. Let us add three more JavaScript references. See the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You may have noticed the inclusion of `jquery.xdomainajax.js`. This is an extension
    to the jQuery library that allows for cross-domain AJAX GET requests. Going back
    to Netscape Navigator 2.0, browsers have implemented the same origin policy, which
    is a security precaution that restricts pages on one site from being able to access
    properties and methods of pages on another site. This made sense at the time,
    but now with an increasingly fluid World Wide Web, where content from many sites
    can be "mashed up" into a unified experience, the borders have by necessity been
    circumvented. There are many workarounds including **JavaScript Object Notation
    with Padding** (**JSONP** ), that allows cross-domain AJAX requests passing a
    callback parameter, so the service called can wrap the resulting JSON object in
    the function passed as a callback.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cross-domain-ajax library can be found at [https://github.com/padolsey/jQuery-Plugins/tree/master/cross-domain-ajax/](https://github.com/padolsey/jQuery-Plugins/tree/master/cross-domain-ajax/).
    All credit goes to James Padolsey for this library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add the cross-domain-ajax library to the `js` folder, and then
    create two new files in the `js` folder: `movienow.js` and `movienow.geolocation.js`.
    In `movienow.js`, we will establish our root namespace `movienow`. This will be
    in the `global` or `window` scope meaning that it can be accessed anywhere. This
    is where we can add core functionality to our enterprise application as we see
    fit. For starters, the only line we need here is the following, which sets the
    root namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In `movienow.geolocation.js`, we will add our geolocation-specific functionality.
    The reason we do this is to make sure we are following a modular approach in our
    enterprise application development. Modularity forces us to break up functionality
    into discrete, highly cohesive, loosely coupled pieces. Modularity allows us to
    vary parts of our enterprise application without affecting the whole. It is akin
    to the difference between a mobile phone with a removable battery and one where
    the battery is welded in. If the battery goes bad, modularity means the difference
    between replacing a broken part to replacing an entire device.
  prefs: []
  type: TYPE_NORMAL
- en: Self-invoking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will begin by getting a reference to our established namespace. This is good
    defensive practice in case anything happens to your core namespace JavaScript
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that having this declaration is not necessary to include the `movienow.js`
    file with the initial definition of our namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will establish our geolocation namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Notice the second set of parentheses. This construct is known as an **immediately
    invoked function expression** (**IIFE**). This is a nifty shorthand for registering
    and immediately invoking JavaScript code in a modular way. All the properties
    and methods for geolocation will be wrapped in the `movienow.geolocation` namespace,
    which makes for a smaller footprint in the global namespace and cleaner,more modular
    code.
  prefs: []
  type: TYPE_NORMAL
- en: That becomes this
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Within our newly established namespace declaration, we will do a couple of
    things. First, we need to capture a reference to the object itself. We will do
    this by adding the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This may seem like an amusing line, but its importance will become clear. The
    `this` keyword in JavaScript is a handy function for referring to the owner of
    the executing function or to the object of which the function is a method. Without
    it, we would be required to prefix all of our properties and methods within our
    namespace with the namespace itself, which gets thorny when you want to change
    your namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following illustrates the value of the `this` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the use of `myNamespace` to refer to other methods within the object.
    We can replace it with `this` in order to have a more agnostic way of referring
    to other members within the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, when the context changes, so does `this`. When we add a function
    inside another function, the context will be that of the outer function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we have added `innerFunction` that invokes `secondFunction` (notice the
    immediately invoked function expression). However, `secondFunction` is never invoked.
    This is because the context for `this` has changed to that of `firstFunction`.
    To maintain our reference to the `myNamespace` context, we simply declare a variable
    and hold onto it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: And this is where `that` becomes `this`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting location
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Until now the **Find Movies** button we placed on the page was non-functional.
    Click on it and nothing happens. We will add an event handler for that button
    so that something does happen when you click on it. Add the following inside the
    `movienow.geolocation` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `movienow.geolocation.js` file should now look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now click on **Find Movie**. You should get the following alert box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting location](img/5689_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'That may be all well and good, but our goals are much loftier. We want to get
    some location data. We do this by adding a couple of methods: `getLocation` and
    `locationCallback`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The first function is of course where we invoke the `getCurrentPosition` method
    already discussed. The second function is `successCallback`. We can now remove
    the alert in the event handler for the **Find Movies** button and replace it with
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `movienow.geolocation.js` file should now look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now when you click on the **Find Movies** button, a request is made through
    the geolocation API for location data.
  prefs: []
  type: TYPE_NORMAL
- en: The web browser will typically prompt you for permission to track your physical
    location. The following screenshot shows examples for Safari, Chrome, ad Firefox
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting location](img/5689_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This will happen only once. When you click on **Allow**, the browser will save
    this setting for the specified domain.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting location](img/5689_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should now see latitude and longitude displayed on the page. Congratulations!
    Your enterprise application is now aware of where you are.
  prefs: []
  type: TYPE_NORMAL
- en: Getting postal codes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have geographic coordinates, the next step is to map them to postal
    codes. Once we have postal codes, we can get movie listings. In order to get postal
    codes, we will need to make an AJAX request to a web service, sending the latitude
    and longitude and in turn receiving postal codes. There are a number of web services
    that provide this data. For our MovieNow enterprise application, we will employ
    a service from [geonames.org](http://geonames.org).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The GeoNames geographical database covers all countries and contains over eight
    million placenames that are available for download free of charge. It is licensed
    under Creative Commons Attribution 3.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[Geonames.org](http://Geonames.org) provides a convenient web service called
    `findNearbyPostalCodesJSON` for obtaining postal code data. This service takes
    the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`lat`: This specifies the latitude in decimal degrees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lng`: This specifies the longitude in decimal degrees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`radius`: This specifies the radius in kilometers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`maxRows`: This specifies the maximum number of rows to return'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style`: This specifies the verbosity of the response (`SHORT`, `MEDIUM`, `LONG`,
    `FULL`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`country`: This specifies the country to look in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`localCountry`: This parameter, when set to `true`, returns only codes within
    the country'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`username`: The account for which you are accessing the data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is an example service call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://api.geonames.org/findNearbyPostalCodesJSON?lat=45&lng=-66.7&username=demo](http://api.geonames.org/findNearbyPostalCodesJSON?lat=45&lng=-66.7&username=demo)'
  prefs: []
  type: TYPE_NORMAL
- en: 'It returns the following JSON output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You can copy/paste this URL into a web browser and see for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The web services are throttled meaning that only a certain number of requests
    per day are serviced for a given username. That is why you should register your
    own account with [geonames.org](http://geonames.org) before proceeding. Once you
    do so, swap in `demo` with your username.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the ability to map coordinates to postal codes, we will need
    to make an AJAX request to make the call and retrieve the data. We will be using
    jQuery to assist us in making the request.
  prefs: []
  type: TYPE_NORMAL
- en: AJAX ain't just a cleaning product
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Standing for Asynchronous JavaScript and XML, AJAX is a technique whereby the
    `XMLHttpRequest` object is used to make a call to the server for additional content,
    save state, poll for resources, and so on. It is a useful way of extending your
    page with additional functionality without a page refresh.
  prefs: []
  type: TYPE_NORMAL
- en: 'The jQuery library ([http://jquery.com](http://jquery.com)) makes it fairly
    easy and straightforward to make AJAX requests in a cross-browser compatible way.
    Take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You simply need to set the URL and arguments. You can define a success event
    handler and an error event handler. The success handler will be invoked when the
    AJAX request successfully completes passing the payload as an argument. The error
    handler will be invoked when the AJAX request returns anything other than a 200
    status code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code snippet to your `movienow.geolocation` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are showing our errors using an `alert` popup, but for a final application
    we should define a CSS styled DOM to show notifications and errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the contents of `locationCallback` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Upon invocation of the `successCallback` function, we are going to take the
    `Positon` object and pass it along to our `reverseGeocode` method, which makes
    an AJAX request to the `geonames.org` web service to retrieve the postal codes
    for the location of the device. In the success handler for the AJAX request, we
    extract the postal codes from the JSON object and put them into an array. We then
    display the array on the page. Note the `objectifyJSON` method. We do this because
    some browsers will automatically marshal the payload data into an object while
    others treat it as a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `movienow.geolocation.js` file should now look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'When you click on **Find Movies**, you should see the following as shown in
    the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![AJAX ain''t just a cleaning product](img/5689_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From postal codes to showtimes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have postal codes, we can map those to movie showtimes. Unfortunately,
    there is no free web service from which we can get this kind of data. All is not
    lost however. [Moviefone.com](http://Moviefone.com) does offer feeds based on
    postal codes. One wrinkle however is that we cannot easily get feed data via JavaScript
    because of cross-domain limitations. The cross-domain Ajax library only works
    for services that return JSON. To work around this, we can create a proxy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `movielistings.php`. Add the following to your newly created
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple PHP file that makes requests to Moviefone.com's closest theaters
    feed based on a string of postal codes passed in the query string, and converts
    the output into JSON. To run this, you will need to make sure you have PHP installed
    on your machine. Otherwise, we could easily write something similar using JSP,
    ASP.NET, or Node.js for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have our movie listings proxy service, we can add the following to
    `movienow.geolocation`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Once done, replace the line in the `reverseGeocode` method where we are populating
    `#movies-near-me` with the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We have thus added three more methods: `getShowtimes`, `constructMoviesArray`,
    and `displayShowtimes`. The `getShowtimes` method makes an AJAX request to the
    movie listings proxy, grabs the JSON data returned and calls `constructMoviesArray`
    to extract the relevant data and remove duplicates, and then calls `displayShowtimes`
    to display the data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The final `movienow.geolocation.js` file should now look like the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'When you click on the **Find Movies** button, you should see the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![From postal codes to showtimes](img/5689_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Of course, we have much more data to show, but we will get to that in later
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we walked through how the geolocation API works and how to
    use it. We added a button to our enterprise application and wired it to make a
    request to the geolocation API. We used the coordinates from the `Position` object
    returned to make an AJAX request to a web service to get postal codes for those
    coordinates. Using the postal codes, we made a request to a feed to get movie
    showtimes data and we displayed that data on the page.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go over displaying the wealth of data we made available
    to ourselves in this chapter. We will cover CSS in more depth and talk about what's
    new in CSS3\. We will even build some nifty CSS3 effects to make our enterprise
    application look interesting and inviting.
  prefs: []
  type: TYPE_NORMAL
