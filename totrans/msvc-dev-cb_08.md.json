["```js\npackage com.packtpub.microservices.ch08.message;\n\nimport com.packtpub.microservices.ch08.message.exceptions.MessageNotFoundException;\nimport com.packtpub.microservices.ch08.message.models.Message;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class MessageRepository {\n\n    private ConcurrentHashMap<String, Message> messages;\n    private ConcurrentHashMap<String, List<Message>> inbox;\n\n    public MessageRepository() {\n        messages = new ConcurrentHashMap<>();\n        inbox = new ConcurrentHashMap<>();\n    }\n\n    public Message save(Message message) {\n        UUID uuid = UUID.randomUUID();\n        Message saved = new Message(uuid.toString(), message.getSender(), message.getRecipient(),\n                message.getBody(), message.getAttachmentUri());\n        messages.put(uuid.toString(), saved);\n        List<Message> userInbox = inbox.getOrDefault(message.getRecipient(), new ArrayList<>());\n        userInbox.add(saved);\n        inbox.put(message.getRecipient(), userInbox);\n        return saved;\n    }\n\n    public Message get(String id) throws MessageNotFoundException {\n        if (messages.containsKey(id)) {\n            return messages.get(id);\n        } else {\n            throw new MessageNotFoundException(\"Message \" + id + \" could not be found\");\n        }\n    }\n\n    public List<Message> getByUser(String userId) {\n        return inbox.getOrDefault(userId, new ArrayList<>());\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch08.message.controllers;\n\nimport com.packtpub.microservices.ch08.message.MessageRepository;\nimport com.packtpub.microservices.ch08.message.clients.SocialGraphClient;\nimport com.packtpub.microservices.ch08.message.exceptions.MessageNotFoundException;\nimport com.packtpub.microservices.ch08.message.exceptions.MessageSendForbiddenException;\nimport com.packtpub.microservices.ch08.message.exceptions.MessagesNotFoundException;\nimport com.packtpub.microservices.ch08.message.models.Message;\nimport com.packtpub.microservices.ch08.message.models.UserFriendships;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\nimport java.net.URI;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\n\n@RestController\npublic class MessageController {\n\n    @Autowired\n    private MessageRepository messagesStore;\n\n    @Autowired\n    private SocialGraphClient socialGraphClient;\n\n    @RequestMapping(path = \"/{id}\", method = RequestMethod.GET, produces = \"application/json\")\n    public Message get(@PathVariable(\"id\") String id) throws MessageNotFoundException {\n        return messagesStore.get(id);\n    }\n\n    @RequestMapping(path = \"/\", method = RequestMethod.POST, produces = \"application/json\")\n    public ResponseEntity<Message> send(@RequestBody Message message) throws MessageSendForbiddenException {\n        List<String> friendships = socialGraphClient.getFriendships(message.getSender());\n\n        if (!friendships.contains(message.getRecipient())) {\n            throw new MessageSendForbiddenException(\"Must be friends to send message\");\n        }\n\n        Message saved = messagesStore.save(message);\n        URI location = ServletUriComponentsBuilder\n                .fromCurrentRequest().path(\"/{id}\")\n                .buildAndExpand(saved.getId()).toUri();\n        return ResponseEntity.created(location).build();\n    }\n\n    @RequestMapping(path = \"/user/{userId}\", method = RequestMethod.GET, produces = \"application/json\")\n    public ResponseEntity<List<Message>> getByUser(@PathVariable(\"userId\") String userId) throws MessageNotFoundException {\n        List<Message> inbox = messagesStore.getByUser(userId);\n        if (inbox.isEmpty()) {\n            throw new MessageNotFoundException(\"No messages found for user: \" + userId);\n        }\n        return ResponseEntity.ok(inbox);\n    }\n\n    @Async\n    public CompletableFuture<Boolean> isFollowing(String fromUser, String toUser) {\n        String url = String.format(\n                \"http://localhost:4567/followings?user=%s&filter=%s\",\n                fromUser, toUser);\n\n        RestTemplate template = new RestTemplate();\n        UserFriendships followings = template.getForObject(url, UserFriendships.class);\n\n        return CompletableFuture.completedFuture(\n                followings.getFriendships().isEmpty()\n        );\n    }\n}\n\n```", "```js\nrequire 'sinatra'\n\nget '/friendships/:user' do\n    content_type :json\n    {\n        username: \"user:32134\",\n        friendships: [\n            \"user:12345\"\n        ]\n    }.to_json\nend\n```", "```js\n$ brew update && brew install vegeta\n```", "```js\n{\n    \"sender\": \"user:32134\",\n    \"recipient\": \"user:12345\",\n    \"body\": \"Hello there!\",\n    \"attachment_uri\": \"http://foo.com/image.png\"\n}\n```", "```js\nPOST http://localhost:8082/\nContent-Type: application/json\n@message-request-body.json\n\nGET http://localhost:8082/user:12345\n```", "```js\n$ cat targets.txt| vegeta attack -duration=60s -rate=100 | vegeta report -reporter=text\n\nRequests      [total, rate]            6000, 100.01\nDuration      [total, attack, wait]    1m0.004668981s, 59.99172349s, 12.945491ms\nLatencies     [mean, 50, 95, 99, max]  10.683968ms, 5.598656ms, 35.108562ms, 98.290388ms, 425.186942ms\nBytes In      [total, mean]            667057195, 111176.20\nBytes Out     [total, mean]            420000, 70.00\nSuccess       [ratio]                  99.80%\nStatus Codes  [code:count]             201:3000  500:12  200:2988\nError Set:\n50\n```", "```js\n$ unzip gatling-charts-highcharts-bundle-2.3.1-bundle.zip\n...\n$ cd gatling-charts-highcharts-bundle-2.3.1\n```", "```js\npackage messageservice\n\nimport io.gatling.core.Predef._\nimport io.gatling.http.Predef._\nimport scala.concurrent.duration._\n\nclass BasicSimulation extends Simulation {\n\n  val httpConf = http\n    .baseURL(\"http://localhost:8082\")\n    .acceptHeader(\"application/json\")\n\n  val scn = scenario(\"Create a message\")\n    .exec(\n      http(\"createMessage\")\n        .post(\"/\")\n        .header(\"Content-Type\", \"application/json\")\n        .body(StringBody(\"\"\"{\"sender\": \"user:32134\", \"recipient\": \"user:12345\", \"body\": \"Hello there!\", \"attachment_uri\": \"http://foo.com/image.png\"}\"\"\"))\n        .check(header(HttpHeaderNames.Location).saveAs(\"location\"))\n\n    )\n    .pause(1)\n    .exec(\n      http(\"getMessage\")\n        .get(\"${location}\")\n    )\n\n  setUp(scn.inject(atOnceUsers(50)).protocols(httpConf))\n}\n\n```", "```js\nrequire 'sinatra'\n\nget '/friendships/:user' do\n    content_type :json\n    {\n        username: \"user:32134\",\n        friendships: [\n            \"user:12345\"\n        ]\n    }.to_json\nend\n```", "```js\n$ bin/gatling.sh\nGATLING_HOME is set to /Users/posman/projects/microservices-cookbook/chapter08/gatling-charts-highcharts-bundle-2.3.1\nChoose a simulation number:\n [0] computerdatabase.BasicSimulation\n [1] computerdatabase.advanced.AdvancedSimulationStep01\n [2] computerdatabase.advanced.AdvancedSimulationStep02\n [3] computerdatabase.advanced.AdvancedSimulationStep03\n [4] computerdatabase.advanced.AdvancedSimulationStep04\n [5] computerdatabase.advanced.AdvancedSimulationStep05\n [6] messageservice.BasicSimulation\n6\nSelect simulation id (default is 'basicsimulation'). Accepted characters are a-z, A-Z, 0-9, - and _\n\nSelect run description (optional)\n\nSimulation messageservice.BasicSimulation started...\n..\n```", "```js\n$ brew install aws\n```", "```js\n$ aws configure\n```", "```js\n$ aws autoscaling create-launch-configuration --launch-configuration-name message-service-launch-configuration --image-id ari-f606f39f --instance-type t2.nano\n```", "```js\n$ aws autoscaling create-auto-scaling-group --auto-scaling-group-name message-service-asg --launch-configuration-name message-service-launch-configuration --max-size 5 --min-size 1 --availability-zones \"us-east-1a\"\n```", "```js\n$ aws elb create-load-balancer --load-balancer-name message-service-lb --listeners \"Protocol=HTTP,LoadBalancerPort=80,InstanceProtocol=HTTP,InstancePort=8082\" --availability-zones us-east-1a\n\n{\n \"DNSName\": \"message-service-lb-1741394248.us-east-1.elb.amazonaws.com\"\n}\n```", "```js\n{\n  \"TargetValue\": 20.0,\n  \"PredefinedMetricSpecification\":\n    {\n      \"PredefinedMetricType\": \"ASGAverageCPUUtilization\"\n    }\n}\n```", "```js\n$ aws autoscaling put-scaling-policy --policy-name cpu20 --auto-scaling-group-name message-service-asg --policy-type TargetTrackingScaling --target-tracking-configuration file://config.json\n```"]