["```js\ndescribe(\"Investment\", function() {\n\n});\n```", "```js\ndescribe(\"Investment\", function() {\n  it(\"should be of a stock\", function() {\n\n  });\n});\n```", "```js\n<!-- include spec files here... -->\n<script type=\"text/javascript\" src=\"img/InvestmentSpec.js\"></script>\n\n```", "```js\ndescribe(\"Investment\", function() {\n  it(\"should be of a stock\", function() {\n    expect(investment.stock).toBe(stock);\n  });\n});\n```", "```js\ndescribe(\"Investment\", function() {\n  it(\"should be of a stock\", function() {\n    var investment = new Investment();\n    expect(investment.stock).toBe(stock);\n  });\n});\n```", "```js\n<!-- include source files here... -->\n<script type=\"text/javascript\" src=\"img/Investment.js\"></script>\n```", "```js\nfunction Investment () {};\n```", "```js\ndescribe(\"Investment\", function() {\n  it(\"should be of a stock\", function() {\n    var stock = new Stock();\n    var investment = new Investment();\n    expect(investment.stock).toBe(stock);\n  });\n});\n```", "```js\n<!-- include source files here... -->\n<script type=\"text/javascript\" src=\"img/Stock.js\"></script>\n<script type=\"text/javascript\" src=\"img/Investment.js\"></script>\n```", "```js\nfunction Stock () {};\n```", "```js\nfunction Investment (stock) {\n  this.stock = stock;\n};\n```", "```js\ndescribe(\"Investment\", function() {\n  it(\"should be of a stock\", function() {\n    var stock = new Stock();\n    var investment = new Investment(stock);\n    expect(investment.stock).toBe(stock);\n  });\n});\n```", "```js\ndescribe(\"Investment\", function() {\n  it(\"should be of a stock\", function() {\n    var stock = new Stock();\n    var investment = new Investment({\n      stock: stock,\n      shares: 100\n    });\n    expect(investment.stock).toBe(stock);\n  });\n\n  it(\"should have the invested shares' quantity\", function() {\n var stock = new Stock();\n var investment = new Investment({\n stock: stock,\n shares: 100\n });\n expect(investment.shares).toEqual(100);\n });\n});\n```", "```js\nfunction Investment (params) {\n  this.stock = params.stock;\n};\n```", "```js\nfunction Investment (params) {\n  this.stock = params.stock;\n  this.shares = params.shares;\n};\n```", "```js\nvar stock = new Stock();\nvar investment = new Investment({\n  stock: stock,\n  shares: 100\n});\n```", "```js\ndescribe(\"Investment\", function() {\n  var stock, investment;\n\n  beforeEach(function() {\n    stock = new Stock();\n    investment = new Investment({\n      stock: stock,\n      shares: 100\n    });\n  });\n\n  it(\"should be of a stock\", function() {\n    expect(investment.stock).toBe(stock);\n  });\n\n  it(\"should have the invested shares quantity\", function() {\n    expect(investment.shares).toEqual(100);\n  });\n});\n```", "```js\ndescribe(\"Investment\", function() {\n  var stock;\n  var investment;\n\n  beforeEach(function() {\n    stock = new Stock();\n    investment = new Investment({\n      stock: stock,\n      shares: 100,\n      sharePrice: 20\n    });\n  });\n\n  //... other specs\n\n  it(\"should have the share paid price\", function() {\n    expect(investment.sharePrice).toEqual(20);\n  });\n\n  it(\"should have a cost\", function() {\n    expect(investment.cost).toEqual(2000);\n  });\n});\n```", "```js\nfunction Investment (params) {\n  this.stock = params.stock;\n  this.shares = params.shares;\n  this.sharePrice = params.sharePrice;\n  this.cost = this.shares * this.sharePrice;\n};\n```", "```js\ndescribe(\"Investment\", function()\n  describe(\"when its stock share price valorizes\", function() {\n\n  });\n});\n```", "```js\ndescribe(\"Investment\", function() {\n  var stock;\n  var investment;\n\n  beforeEach(function() {\n    stock = new Stock();\n    investment = new Investment({\n      stock: stock,\n      shares: 100,\n      sharePrice: 20\n    });\n  });\n\n  describe(\"when its stock share price valorizes\", function() {\n    beforeEach(function() {\n      stock.sharePrice = 40;\n    });\n  });\n});\n```", "```js\ndescribe(\"Investment\", function() {\n  describe(\"when its stock share price valorizes\", function() {\n    beforeEach(function() {\n      stock.sharePrice = 40;\n    });\n\n    it(\"should have a positive return of investment\", function() {\n      expect(investment.roi()).toEqual(1);\n    });\n\n    it(\"should be a good investment\", function() {\n      expect(investment.isGood()).toEqual(true);\n    });\n  });\n});\n```", "```js\nInvestment.prototype.roi = function() {\n  return (this.stock.sharePrice - this.sharePrice) / this.sharePrice;\n};\n\nInvestment.prototype.isGood = function() {\n  return this.roi() > 0;\n};\n```", "```js\nexpect(investment.isGood()).toEqual(true);\n```", "```js\nexpect(investment).toBeAGoodInvestment();\n```", "```js\nbeforeEach(function() {\n  jasmine.addMatchers({\n    toBeAGoodInvestment: function() {}\n  });\n});\n```", "```js\njasmine.addMatchers({\n  toBeAGoodInvestment: function () {\n    return {\n compare: function (actual, expected) {\n // matcher definition\n }\n    };\n  }\n});\n```", "```js\ntoBeAGoodInvestment: function () {\n  return {\n    compare: function (actual, expected) {\n      var result = {};\n result.pass = actual.isGood();\n return result;\n    }\n  };\n}\n```", "```js\nit(\"should be a good investment\", function() {\n  expect(investment).toBeAGoodInvestment();\n});\n```", "```js\nInvestment.prototype.isGood = function() {\n  return false;\n};\n```", "```js\ntoBeAGoodInvestment: function () {\n  return {\n    compare: function (actual, expected) {\n      var result = {};\n      result.pass = actual.isGood();\n      result.message = 'Expected investment to be a good investment';\n      return result;\n    }\n  };\n}\n```", "```js\nexpect(investment).not.toBeAGoodInvestment();\n```", "```js\ndescribe(\"when its stock share price devalorizes\", function() {\n  beforeEach(function() {\n    stock.sharePrice = 0;\n  });\n\n  it(\"should have a negative return of investment\", function() {\n    expect(investment.roi()).toEqual(-1);\n  });\n\n  it(\"should be a bad investment\", function() {\n    expect(investment).not.toBeAGoodInvestment();\n  });\n});\n```", "```js\nInvestment.prototype.isGood = function() {\n  return true;\n};\n```", "```js\ncompare: function (actual, expected) {\n  var result = {};\n  result.pass = actual.isGood();\n\n if (actual.isGood()) {\n result.message = 'Expected investment to be a bad investment';\n } else {\n result.message = 'Expected investment to be a good investment';\n }\n\n  return result;\n}\n```", "```js\nInvestment.prototype.isGood = function() {\n  return this.roi() > 0;\n};\n```", "```js\nexpect(investment.cost).toBe(2000)\n```", "```js\nbeforeEach(function() {\n  jasmine.addMatchers({\n    toBe: function () {\n      return {\n        compare: function (actual, expected) {\n          return actual === expected;\n        }\n      };\n    }\n  });\n});\n```", "```js\ndescribe(\"toEqual\", function() {\n  it(\"should pass equal numbers\", function() {\n    expect(1).toEqual(1);\n  });\n\n  it(\"should pass equal strings\", function() {\n    expect(\"testing\").toEqual(\"testing\");\n  });\n\n  it(\"should pass equal booleans\", function() {\n    expect(true).toEqual(true);\n  });\n\n  it(\"should pass equal objects\", function() {\n    expect({a: \"testing\"}).toEqual({a: \"testing\"});\n  });\n\n  it(\"should pass equal arrays\", function() {\n    expect([1, 2, 3]).toEqual([1, 2, 3]);\n  });\n});\n```", "```js\ndescribe(\"toBe\", function() {\n  it(\"should pass equal numbers\", function() {\n    expect(1).toBe(1);\n  });\n\n  it(\"should pass equal strings\", function() {\n    expect(\"testing\").toBe(\"testing\");\n  });\n\n  it(\"should pass equal booleans\", function() {\n    expect(true).toBe(true);\n  });\n\n  it(\"should pass same objects\", function() {\n    var object = {a: \"testing\"};\n    expect(object).toBe(object);\n  });\n\n  it(\"should pass same arrays\", function() {\n    var array = [1, 2, 3];\n    expect(array).toBe(array);\n  });\n\n  it(\"should not pass equal objects\", function() {\n    expect({a: \"testing\"}).not.toBe({a: \"testing\"});\n  });\n\n  it(\"should not pass equal arrays\", function() {\n    expect([1, 2, 3]).not.toBe([1, 2, 3]);\n  });\n});\n```", "```js\ndescribe(\"toBeFalsy\", function () {\n  it(\"should pass undefined\", function() {\n    expect(undefined).toBeFalsy();\n  });\n\n  it(\"should pass null\", function() {\n    expect(null).toBeFalsy();\n  });\n\n  it(\"should pass NaN\", function() {\n    expect(NaN).toBeFalsy();\n  });\n\n  it(\"should pass the false boolean value\", function() {\n    expect(false).toBeFalsy();\n  });\n\n  it(\"should pass the number 0\", function() {\n    expect(0).toBeFalsy();\n  });\n\n  it(\"should pass an empty string\", function() {\n    expect(\"\").toBeFalsy();\n  });\n});\n```", "```js\ndescribe(\"toBeTruthy\", function() {\n  it(\"should pass the true boolean value\", function() {\n    expect(true).toBeTruthy();\n  });\n\n  it(\"should pass any number different than 0\", function() {\n    expect(1).toBeTruthy();\n  });\n  it(\"should pass any non empty string\", function() {\n    expect(\"a\").toBeTruthy();\n  });\n\n  it(\"should pass any object (including an array)\", function() {\n    expect([]).toBeTruthy();\n    expect({}).toBeTruthy();\n  });\n});\n```", "```js\ndescribe(\"toBeNull\", function() {\n  it(\"should pass null\", function() {\n    expect(null).toBeNull();\n  });\n});\n\ndescribe(\"toBeUndefined\", function() {\n  it(\"should pass undefined\", function() {\n    expect(undefined).toBeUndefined();\n  });\n});\n\ndescribe(\"toBeNaN\", function() {\n  it(\"should pass NaN\", function() {\n    expect(NaN).toBeNaN();\n  });\n});\n```", "```js\nNaN === NaN // false\n```", "```js\ndescribe(\"toBeDefined\", function() {\n  it(\"should pass any value other than undefined\", function() {\n    expect(null).toBeDefined();\n  });\n});\n```", "```js\ndescribe(\"toContain\", function() {\n  it(\"should pass if a string contains another string\", function()  {\n    expect(\"My big string\").toContain(\"big\");\n  });\n\n  it(\"should pass if an array contains an element\", function() {\n    expect([1, 2, 3]).toContain(2);\n  });\n});\n```", "```js\ndescribe(\"toMatch\", function() {\n  it(\"should pass a matching string\", function() {\n    expect(\"My big matched string\").toMatch(/My(.+)string/);\n  });\n});\n```", "```js\n  describe(\"toBeLessThan\", function() {\n    it(\"should pass when the actual is less than expected\", function() {\n      expect(1).toBeLessThan(2);\n    });\n  });\n\n  describe(\"toBeGreaterThan\", function() {\n    it(\"should pass when the actual is greater than expected\", function() {\n      expect(2).toBeGreaterThan(1);\n    });\n  });\n```", "```js\ndescribe(\"toBeCloseTo\", function() {\n    it(\"should pass when the actual is closer with a given precision\", function() {\n      expect(3.1415).toBeCloseTo(2.8, 0);\n      expect(3.1415).not.toBeCloseTo(2.8, 1);\n    });\n  });\n```", "```js\ndescribe(\"toThrow\", function() {\n  it(\"should pass when the exception is thrown\", function() {\n    expect(function () {\n      throw \"Some exception\";\n    }).toThrow(\"Some exception\");\n  });\n});\n```"]