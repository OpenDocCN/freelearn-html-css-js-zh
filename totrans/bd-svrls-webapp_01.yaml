- en: Understanding the Serverless Model
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解无服务器模型
- en: 'Serverless is a model where the developer doesn''t need to worry about servers:
    configuring, maintaining, or updating is none of their business. Although it is
    not an entirely new concept, the services that are offered nowadays are much more
    powerful and enable a wider range of applications. If you want to build cost-effective
    and scalable solutions, you should dive deeper into this subject and understand
    how it works.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器是一种模型，其中开发者不需要担心服务器：配置、维护或更新都不是他们的职责。尽管这不是一个全新的概念，但如今提供的服务要强大得多，能够支持更广泛的应用。如果你想构建成本效益高且可扩展的解决方案，你应该深入了解这个主题，并理解它是如何工作的。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is serverless?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是无服务器？
- en: The main goals of serverless
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器的主要目标
- en: Pros and cons
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优缺点
- en: Use cases
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用例
- en: After this chapter, you will be ready to start our hands-on approach, building
    an online store demo application, one piece per chapter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章之后，你将准备好开始我们的动手实践，构建一个在线商店演示应用程序，每章一个部分。
- en: Introducing serverless
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍无服务器
- en: Serverless can be a model, a type of architecture, a pattern, or anything else
    you prefer to call it. For me, serverless is an adjective, a word that qualifies
    a *way of thinking*. It's a way to abstract how the code that you write will be
    executed. *Thinking* serverless is to not think in servers. You code, you test,
    you deploy, and that's (almost) enough.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器可以是一个模型、一种架构类型、一种模式，或者你喜欢的任何其他称呼。对我来说，无服务器是一个形容词，一个修饰**思维方式**的词。它是一种抽象你编写的代码将如何执行的方式。**无服务器思维**就是不在服务器上思考。你编写代码，进行测试，部署，这就（几乎）足够了。
- en: Serverless is a buzzword. You still need servers to run your applications, but
    you should not worry about them *that much*. Maintaining a server is none of your
    business. The focus is on development and writing code, and not in the operation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器是一个热门词汇。你仍然需要服务器来运行你的应用程序，但你不必过于担心它们。维护服务器不是你的职责。重点是开发和编写代码，而不是运营。
- en: DevOps is still necessary, although with a smaller role. You need to automate
    the deployment and have at least a minimal monitoring of how your application
    is operating and how much it costs, but you don't need to start or stop machines
    to match the usage and neither do you need to replace failed instances or apply
    security patches to the operating system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps仍然有必要，尽管作用较小。你需要自动化部署，并至少对应用程序的运行情况和成本进行最小限度的监控，但你不需要启动或停止机器以匹配使用量，也不需要替换失败的实例或为操作系统应用安全补丁。
- en: Thinking serverless
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器思维
- en: A serverless solution is entirely *event-driven*. Every time that a user requests
    some information, a trigger will notify your cloud vendor to pick your code and
    execute it to retrieve the answer. In contrast, a traditional solution also works
    to answer requests, but the code is always up and running, consuming machine resources
    that were reserved specifically for you, even when no one is using your system.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器解决方案完全是**事件驱动的**。每次用户请求一些信息时，一个触发器会通知你的云服务提供商选择你的代码并执行它以检索答案。相比之下，传统的解决方案也用于响应请求，但代码始终处于运行状态，消耗着专门为你预留的机器资源，即使没有人使用你的系统。
- en: In a serverless architecture, it's not necessary to load the entire codebase
    into a running machine to process a single request. For a faster loading step,
    only the code that is necessary to answer the request is selected to run. This
    small piece of the solution is referenced as a **function**. So we only run functions
    on demand.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在无服务器架构中，没有必要将整个代码库加载到运行机器中以处理单个请求。为了加快加载步骤，只选择必要的代码来运行。这个解决方案的小部分被引用为**函数**。因此，我们只在需要时运行函数。
- en: Although we call it simply as a function, it's usually a zipped package that
    contains a piece of code that runs as an entry point along with its dependencies.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们简单地称之为函数，但它通常是一个包含运行入口点及其依赖项的代码片段的压缩包。
- en: 'In the following diagram, the serverless model is illustrated in a sequence
    of steps. It''s an example of how a cloud provider could implement the concept,
    though it doesn''t have to implement it in this way:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中，无服务器模型通过一系列步骤进行说明。这是一个云服务提供商如何实现该概念的示例，尽管它不必以这种方式实现：
- en: '![](img/858af931-ceef-463d-9d78-73427b0e530a.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/858af931-ceef-463d-9d78-73427b0e530a.png)'
- en: 'Let''s understand the following steps shown in the preceding diagram:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解前面图中显示的以下步骤：
- en: The user sends a request to an address handled by the cloud provider.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户向由云服务提供商处理的地址发送请求。
- en: Based on the message, the cloud service tries to locate which package must be
    used to answer the request.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据消息，云服务试图定位必须使用哪个包来回答请求。
- en: The package (or function) is selected and loaded into a Docker container.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包（或函数）被选中并加载到Docker容器中。
- en: The container is executed and outputs an answer.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器被执行并输出答案。
- en: The answer is sent to the original user.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 答案将发送给原始用户。
- en: What makes the serverless model so interesting is that you are only billed for
    the time that was needed to execute your function, usually measured in fractions
    of seconds, not hours of use. If no one is using your service, you pay nothing.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器模型之所以有趣，在于你只需为执行函数所需的时间付费，通常以秒的分数来衡量，而不是按小时使用。如果没有人使用你的服务，你将不支付任何费用。
- en: Also, if you have a sudden peak of users accessing your application, the cloud
    service will load different instances to handle all simultaneous requests. If
    one of those cloud machines fails, another one will be made available automatically,
    without needing to configure anything.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你应用程序的用户访问量突然激增，云服务将加载不同的实例来处理所有并发请求。如果其中一台云机器出现故障，另一台将自动提供，无需进行任何配置。
- en: Serverless and PaaS
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器和PaaS
- en: Serverless is often confused with **Platform as a Service** (**PaaS**). PaaS
    is a kind of cloud computing model that allows developers to launch applications
    without worrying about the infrastructure. According to this definition, they
    have the same objective! And they do. Serverless is like a rebranding of PaaS,
    or you can call it the next generation of PaaS.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器架构经常被与**平台即服务**（**PaaS**）混淆。PaaS是一种云计算模型，允许开发者无需担心基础设施即可部署应用程序。根据这个定义，它们有相同的宗旨！确实如此。无服务器架构就像是PaaS的重新命名，或者你也可以称之为PaaS的下一代。
- en: The main difference between PaaS and serverless is that in PaaS you don't manage
    machines, but you are billed by provisioning them, even if there is no user actively
    browsing your website. In PaaS, your code is always running and waiting for new
    requests. In serverless, there is a service that is listening for requests and
    will trigger your code to run only when necessary. This is reflected in your bill.
    You will pay only for the fractions of seconds that your code was executed and
    the number of requests that were made to this listener. Also, serverless has an
    immutable state between invocations, so it's always a fresh environment for every
    invocation. Even if the container is reused in a subsequent call, the filesystem
    is renewed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: PaaS和无服务器之间的主要区别在于，在PaaS中，你不需要管理机器，但你将根据配置机器来收费，即使没有用户正在浏览你的网站。在PaaS中，你的代码始终在运行并等待新的请求。在无服务器中，有一个服务正在监听请求，并且只有在必要时才会触发你的代码运行。这一点在账单中得到了体现。你只需为代码执行的时间和向该监听器发出的请求数量付费。此外，无服务器在调用之间具有不可变的状态，因此对于每一次调用都是一个全新的环境。即使容器在后续调用中被重复使用，文件系统也会被更新。
- en: IaaS and On-Premises
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IaaS和本地部署
- en: Besides PaaS, serverless is frequently compared with **Infrastructure as a Service**
    (**IaaS**) and On-Premises solutions to expose its differences. IaaS is another
    strategy to deploy cloud solutions where you hire virtual machines and is allowed
    to connect to them to configure everything that you need in the guest operating
    system. It gives you greater flexibility, but it comes with more responsibilities.
    You need to apply security patches, handle occasional failures, and set up new
    servers to handle usage peaks. Also, you pay the same per hour whether you are
    using 5% or 100% of the machine s CPU.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了PaaS之外，无服务器架构经常与**基础设施即服务**（**IaaS**）和本地部署解决方案进行比较，以展示其差异。IaaS是另一种部署云解决方案的策略，你租用虚拟机并允许连接到它们以在虚拟操作系统中配置所需的一切。它为你提供了更大的灵活性，但同时也带来了更多的责任。你需要应用安全补丁、处理偶尔的故障，并设置新的服务器以处理使用高峰。此外，无论你使用机器CPU的5%还是100%，你都将按小时付费。
- en: On-Premises is the traditional kind of solution where you buy the physical computers
    and run them inside your company. You get total flexibility and control with this
    approach. Hosting your own solution can be cheaper, but it happens only when your
    traffic usage is extremely stable. Over or under provisioning computers is so
    frequent that it's hard to have real gains using this approach, even more when
    you add the risks and costs to hire a team to manage those machines. Cloud providers
    may look expensive, but several detailed use cases prove that the **return of
    investment** (**ROI**) is larger running on the cloud than On-Premises. When using
    the cloud, you benefit from the economy of scale of many gigantic data centers.
    Running on your own exposes your business to a wide range of risks and costs that
    you'll never be able to anticipate.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化是传统的解决方案类型，其中你购买物理计算机并在公司内部运行它们。这种方法提供了完全的灵活性和控制。托管自己的解决方案可能更便宜，但这仅在你的流量使用极其稳定的情况下才会发生。过度或不足配置计算机的情况很常见，以至于使用这种方法很难真正获得收益，尤其是在你需要雇佣一个团队来管理这些机器时。云服务提供商可能看起来很昂贵，但几个详细的使用案例证明，在云上运行的投资回报率（ROI）比本地化更高。使用云时，你可以从许多巨型数据中心的经济规模中受益。自行运行会暴露你的业务于一系列你永远无法预料的广泛风险和成本。
- en: The main goals of serverless
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器的主要目标
- en: 'To define a service as serverless, it must have at least the following features:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要将一项服务定义为无服务器，它必须至少具备以下特性：
- en: '**Scale as you need**: There is no under or over-provisioning'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按需扩展**：没有过度或不足配置'
- en: '**Highly available**: It is fault tolerant and always online'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用性**：它具有容错性并且始终在线'
- en: '**Cost-efficient**: You will never pay for idle servers'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本效益**：你永远不会为闲置的服务器付费'
- en: Scalability
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展性
- en: With IaaS, you can achieve infinite scalability with any cloud service. You
    just need to hire new machines as your usage grows. You can also automate the
    process of starting and stopping servers as your demand changes. But this is not
    a fast way to scale. When you start a new machine, you usually need to wait for
    around 5 minutes before it can be usable to process new requests. Also, as starting
    and stopping machines is costly, you only do this after you are certain that you
    need. So, your automated process will wait some minutes to confirm that your demand
    has changed before taking any action.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IaaS，你可以通过任何云服务实现无限的扩展性。随着你的使用增长，你只需要雇佣新的机器。你也可以根据需求的变化自动启动和停止服务器。但这并不是快速扩展的方法。当你启动一台新机器时，通常需要等待大约5分钟，它才能被用于处理新的请求。此外，由于启动和停止机器的成本较高，你只有在确定需要时才会这样做。因此，你的自动化流程会在采取任何行动之前等待几分钟，以确认你的需求是否发生了变化。
- en: '**Infinite scalability** is used as a way to highlight that you can usually
    grow without worrying if the cloud provider has enough capacity to offer. That''s
    not always true. Each cloud provider has limitations that you must consider if
    you are thinking in large applications. For example, AWS limits the number of
    running virtual machines (IaaS) of a specific type to 20 and the number of concurrent
    Lambda functions (serverless) to 1,000.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**无限扩展性**被用作一种方式来强调你通常可以增长，而不用担心云服务提供商是否有足够的容量提供。但这并不总是正确的。每个云服务提供商都有其限制，如果你在考虑大型应用程序，你必须考虑这些限制。例如，AWS将特定类型的运行虚拟机（IaaS）的数量限制为20台，并将并发Lambda函数（无服务器）的数量限制为1,000。'
- en: IaaS is able to handle well-behaved usage changes, but it can't handle unexpected
    high peaks that happen after announcements or marketing campaigns. With serverless,
    your scalability is measured in milliseconds and not minutes. Besides being scalable,
    it's very fast to scale. Also, it scales per invocation without needing to provision
    capacity.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: IaaS能够很好地处理良好的使用变化，但它无法处理在公告或营销活动之后发生的意外高峰。使用无服务器，你的扩展性是以毫秒计，而不是以分钟计。除了可扩展性外，它扩展得非常快。此外，它按调用进行扩展，无需配置容量。
- en: When you consider a high usage frequency in a scale of minutes, IaaS suffers
    to satisfy the needed capacity while serverless meets even higher usages in less
    time.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当你考虑以分钟为单位的频繁高使用率时，IaaS在满足所需容量方面会感到困难，而无服务器可以在更短的时间内满足更高的使用率。
- en: 'In the following graph, the left-hand side graph shows how scalability occurs
    with IaaS. The right-hand side graph shows how well the demand can be satisfied
    using a serverless solution:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图表中，左侧图表显示了IaaS如何实现扩展性。右侧图表显示了使用无服务器解决方案满足需求的效果：
- en: '![](img/81d51cb0-211f-4ffe-8e32-977b8a63f3c1.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81d51cb0-211f-4ffe-8e32-977b8a63f3c1.png)'
- en: With an On-Premises approach, this is a bigger problem. As the usage grows,
    new machines must be bought and prepared, but increasing the infrastructure requires
    purchase orders to be created and approved, you need to wait the new servers to
    arrive and you need to give time to your team to configure and test them. It can
    take weeks to grow, or even months if the company is very big and requests many
    steps and procedures to be filled in.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本地化方法，这是一个更大的问题。随着使用量的增长，必须购买和准备新的机器，但增加基础设施需要创建和批准采购订单，你需要等待新服务器到达，并且你需要给你的团队时间来配置和测试它们。这可能需要几周的时间来增长，如果公司非常大并且需要填写许多步骤和程序，甚至可能需要几个月。
- en: Availability
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用性
- en: A highly available solution is the one that is fault tolerant to hardware failures.
    If one machine goes out, you must keep running the application with a satisfactory
    performance. If you lose an entire data center due to a power outage, you must
    have machines in another data center to keep the service online. Having high availability
    generally means to duplicate your entire infrastructure, placing each half in
    a different data center.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 高可用性解决方案是指对硬件故障具有容错能力的解决方案。如果一台机器出现故障，你必须保持应用程序以令人满意的表现继续运行。如果你因为停电而丢失整个数据中心，你必须有另一个数据中心的机器来保持服务在线。高可用性通常意味着复制你的整个基础设施，将每一半放置在不同的数据中心。
- en: Highly available solutions are usually very expensive in IaaS and On-Premises.
    If you have multiple machines to handle your workload, placing them in different
    physical places and running a load balancing service can be enough. If one data
    center goes out, you keep the traffic in the remaining machines and scale to compensate.
    However, there are cases where you will pay extra without using those machines.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 高可用性解决方案在IaaS和本地化环境中通常非常昂贵。如果你有多台机器来处理你的工作负载，将它们放置在不同的物理位置并运行负载均衡服务可能就足够了。如果一个数据中心出现故障，你将保持剩余机器的流量并扩展以补偿。然而，有些情况下，即使没有使用那些机器，你也需要额外付费。
- en: For example, if you have a huge relational database that is scaled vertically,
    you will end up paying for another expensive machine as a slave just to keep the
    availability. Even for NoSQL databases, if you set a MongoDB replica set in a
    consistent model, you will pay for instances that will act only as secondaries,
    without serving to alleviate read requests.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你有一个巨大的垂直扩展的关系型数据库，你最终可能需要支付另一台昂贵的机器作为从机，仅为了保持可用性。即使是NoSQL数据库，如果你在一个一致的模式下设置MongoDB副本集，你也将为仅作为从机而不用于减轻读请求的实例付费。
- en: Instead of running idle machines, you can set them in a cold start state, meaning
    that the machine is prepared, but is off to reduce costs. However, if you run
    a website that sells products or services, you can lose customers even in small
    downtimes. A cold start for web servers can take a few minutes to recover, but
    needs several more minutes for databases.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是运行闲置的机器，你可以将它们设置为冷启动状态，这意味着机器已经准备好了，但关闭以降低成本。然而，如果你运行一个销售产品或服务的网站，即使在短暂的停机时间内，你也可能失去客户。Web服务器的冷启动可能需要几分钟来恢复，但数据库可能需要更多的时间。
- en: Considering these scenarios, in serverless, you get high availability for *free*.
    The cost is already considered in what you pay to use.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这些场景，在无服务器中，你可以免费获得高可用性。成本已经包含在你支付的使用费用中。
- en: Another aspect of availability is how to handle **Distributed Denial of Service**
    (**DDoS**) attacks. When you receive a huge load of requests in a very short time,
    how do you handle it? There are some tools and techniques that help mitigate the
    problem, for example, blacklisting IPs that go over a specific request rate, but
    before those tools start to work, you need to scale the solution, and it needs
    to scale really fast to prevent the availability from being compromised. In this,
    again, serverless has the best scaling speed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可用性的另一个方面是如何处理**分布式拒绝服务**（**DDoS**）攻击。当你在一个非常短的时间内接收到大量的请求时，你该如何处理？有一些工具和技术可以帮助减轻这个问题，例如，将超过特定请求速率的IP地址列入黑名单，但在这些工具开始工作之前，你需要扩展解决方案，并且它需要非常快速地扩展以防止可用性受损。在这方面，无服务器具有最佳的扩展速度。
- en: Cost efficiency
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成本效益
- en: It's impossible to match the traffic usage with what you have provisioned. With
    IaaS or On-Premises, as a rule of thumb, CPU and RAM usage must always be lower
    than 90% for the machine to be considered healthy, and ideally CPU should be using
    less than 20% of the capacity with normal traffic. In this case, you are paying
    for 80% of waste when the capacity is in an idle state. Paying for computer resources
    that you don't use is not efficient.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 无法匹配流量使用与配置的量。在IaaS或本地部署的情况下，一般来说，CPU和RAM的使用率必须始终低于90%，机器才能被认为是健康的，理想情况下，CPU的使用率应该低于20%的正常流量。在这种情况下，当容量处于空闲状态时，你正在为80%的浪费付费。为不使用的计算机资源付费是不高效的。
- en: Many cloud vendors advertise that you just pay for what you use, but they usually
    offer significant discounts when you provision for 24 hours of uptime in a long
    term (one year or more). It means that you pay for machines that you will keep
    running even in very low traffic hours. Also, even if you want to shut down machines
    to reduce costs, you need to keep at least a minimum infrastructure 24/7 to keep
    your web server and databases always online. Regarding high availability, you
    need extra machines to add redundancy. Again, it's a waste of resources.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 许多云服务提供商宣传你只需为使用的部分付费，但通常在长期（一年或更长时间）为24小时正常运行时间提供显著折扣。这意味着即使是在非常低流量的时段，你也需要为持续运行的机器付费。此外，即使你想关闭机器以降低成本，你也必须至少保持最小基础设施的24/7在线状态，以保持你的Web服务器和数据库始终在线。至于高可用性，你需要额外的机器来增加冗余。再次强调，这是资源的浪费。
- en: Another efficiency problem is related with the databases, especially relational
    ones. Scaling vertically is a very troublesome task, so relational databases are
    always provisioned considering max peaks. It means that you pay for an expensive
    machine when most of the time you don't need one.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个效率问题与数据库有关，尤其是关系型数据库。垂直扩展是一个非常麻烦的任务，因此关系型数据库总是根据最大峰值来配置。这意味着当大多数时间你不需要一台昂贵的机器时，你仍然需要为它付费。
- en: In serverless, you shouldn't worry about provisioning or idle times. You should
    pay exactly the CPU and RAM time that is used, measured in fractions of seconds
    and not hours. If it's a serverless database, you need to store data permanently,
    so this represents a cost even if no one is using your system. However, storage
    is very cheap compared to CPU time. The higher cost, which is the CPU needed to
    run the database engine that runs queries, will be billed only by the amount of
    time used without considering idle times.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在无服务器中，你不需要担心配置或空闲时间。你应该支付实际使用的CPU和RAM时间，以秒的分数计算，而不是按小时计算。如果是一个无服务器数据库，你需要永久存储数据，所以即使没有人使用你的系统，这也代表了一种成本。然而，与CPU时间相比，存储非常便宜。更高的成本是运行查询的数据库引擎所需的CPU，它将根据使用时间收费，不考虑空闲时间。
- en: Running a serverless system continuously for one hour has a much higher cost
    than one hour in a traditional infra. However, the difference is that serverless
    is designed for applications with variable usage, where you will never keep one
    machine at 100% for one hour straight. The cost efficiency of serverless is not
    perceived in websites with flat traffic.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器系统连续运行一小时的成本比传统基础设施高得多。然而，区别在于无服务器是为具有可变使用量的应用程序设计的，你永远不会让一台机器连续一小时保持100%的负载。无服务器的成本效率在流量平稳的网站上并不明显。
- en: The pros and cons of serverless
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器架构的优缺点
- en: In this section, we will go through the various pros and cons associated with
    serverless computing.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨与无服务器计算相关的各种优缺点。
- en: Pros
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优点
- en: 'We can list the following strengths:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以列出以下优势：
- en: Fast scalability
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速可扩展性
- en: High availability
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高可用性
- en: Efficient usage of resources
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源的高效使用
- en: Reduced operational costs
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降低运营成本
- en: Focus on business, not on infrastructure
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专注于业务，而非基础设施
- en: System security is outsourced
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统安全外包
- en: Continuous delivery
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续交付
- en: Microservices friendly
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务友好
- en: Cost model is startup friendly
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本模型适合初创企业
- en: Let's skip the first three benefits, since they were already covered in the
    previous pages, and let's take a look at the others.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们跳过前三个优点，因为它们已经在之前的页面中讨论过了，让我们看看其他的。
- en: Reduced operational costs
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 降低运营成本
- en: As the infrastructure is fully managed by the cloud vendor, it reduces the operational
    costs since you don't need to worry about hardware failures, applying security
    patches to the operating system, or fixing network issues. It effectively means
    that you need to spend less sysadmin hours to keep your application running.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于基础设施完全由云服务提供商管理，因此它降低了运营成本，因为你不必担心硬件故障、为操作系统应用安全补丁或修复网络问题。这意味着你需要花费更少的系统管理员时间来保持应用程序运行。
- en: Also, it helps to reduce risks. If you make an investment to deploy a new service
    and that ends up as a failure, you don't need to worry about selling machines
    or disposing the data center that you have built.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它还有助于降低风险。如果你投资部署一项新服务，结果却失败了，你不必担心销售机器或处理你已建立的数据中心。
- en: Focus on business
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 专注于业务
- en: Lean software development states that you must spend time in what aggregates
    value to the final product. In a serverless project, the focus is on business.
    Infrastructure is a second-class citizen.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 精益软件开发指出，你必须花时间在最终产品中增加价值的地方。在无服务器项目中，重点是业务。基础设施是第二位的。
- en: Configuring a large infrastructure is a costly and time-consuming task. If you
    want to validate an idea through a **Minimum Viable Product** (**MVP**) without
    losing time to market, consider using serverless to save time. There are tools
    that automate the deployment, which we will use throughout this book and see how
    they help the developer to launch a prototype with minimum effort. If the idea
    fails, infrastructure costs are minimized since there are no payments made in
    advance.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 配置大型基础设施是一项既昂贵又耗时的任务。如果您想通过**最小可行产品**（**MVP**）来验证一个想法，而又不想浪费市场时间，考虑使用无服务器架构来节省时间。有一些工具可以自动化部署，我们将在整本书中使用这些工具，并看看它们如何帮助开发者以最小的努力推出原型。如果这个想法失败了，由于没有预先支付费用，基础设施成本也会最小化。
- en: System security
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统安全
- en: The cloud vendor is responsible for managing the security of the operating system,
    runtime, physical access, networking, and all related technologies that enable
    the platform to operate. The developer still needs to handle authentication, authorization,
    and code vulnerabilities, but the rest is outsourced to the cloud provider. It's
    a positive feature if you consider that a large team of specialists are focused
    on implementing the best security practices, and patching new bug fixes as soon
    as possible to serve their hundreds of customers. That's the definition of economy
    of scale.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务提供商负责管理操作系统的安全、运行时、物理访问、网络以及所有使平台运行的相关技术。开发者仍然需要处理身份验证、授权和代码漏洞，但其余的都外包给了云提供商。如果你考虑到一个由大量专家组成的大型团队专注于实施最佳安全实践，并尽快修补新漏洞以服务他们的数百名客户，这是一个积极的特性。这就是规模经济的定义。
- en: Continuous delivery
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付
- en: Serverless is based on breaking a big project into dozens of packages, each
    one represented by a top-level function that handles requests. Deploying a new
    version of a function means uploading a ZIP file to replace the previous one and
    updating the event configuration that specifies how this function can be triggered.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器架构基于将一个大项目拆分成数十个包，每个包由一个顶级函数表示，该函数处理请求。部署函数的新版本意味着上传一个ZIP文件来替换之前的版本，并更新事件配置，该配置指定了如何触发此函数。
- en: Executing this task manually, for dozens of functions, is an exhausting task.
    Automation is a must-have feature when working in a serverless project. In this
    book, we'll use the Serverless Framework that helps developers manage and organize
    solutions, making a deployment task as simple as executing a one-line command.
    With automation, continuous delivery is a feature that brings many benefits, such
    as the ability to deploy at any time, short development cycles, and easier rollbacks.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 手动执行这个任务，对于数十个函数来说是一项令人筋疲力的工作。在无服务器项目中工作，自动化是一个必不可少的特性。在这本书中，我们将使用Serverless
    Framework，它帮助开发者管理和组织解决方案，使得部署任务变得像执行一条命令一样简单。有了自动化，持续交付是一个带来许多好处的功能，例如可以随时部署、缩短开发周期以及更容易回滚。
- en: Another related benefit when the deployment is automated is the creation of
    different environments. You can create a new test environment, which is an exact
    duplicate of the development environment, using simple commands. The ability to
    replicate the environment is very important for building acceptance tests and
    to progress from deployment to production.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当部署自动化时，另一个相关的益处是创建不同的环境。你可以使用简单的命令创建一个新的测试环境，它是开发环境的精确副本。能够复制环境对于构建验收测试和从部署到生产的进展非常重要。
- en: Microservices friendly
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务友好
- en: Microservices is a topic that will be better discussed later in this book. In
    short, a Microservices architecture is encouraged in a serverless project. As
    your functions are single units of deployment, you can have different teams working
    concurrently on different use cases. You can also use different programming languages
    in the same project and take advantage of emerging technologies or team skills.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是一个将在本书稍后更好地讨论的主题。简而言之，在无服务器项目中鼓励使用微服务架构。由于你的函数是单个部署单元，你可以让不同的团队在不同的用例上同时工作。你还可以在同一个项目中使用不同的编程语言，并利用新兴技术或团队技能。
- en: Cost model
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成本模型
- en: Suppose that you have built an online store with serverless. The average user
    will make some requests to see a few products and a few more requests to decide
    whether they will buy something or not. In serverless, a single unit of code has
    a predictable time to execute for a given input. After collecting some data, you
    can predict how much a single user costs on average, and this unit cost will remain
    almost constant as your application grows in usage.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经使用无服务器构建了一个在线商店。平均用户会发出一些请求来查看一些产品，以及更多的请求来决定他们是否会购买。在无服务器中，单个代码单元对于给定的输入有一个可预测的执行时间。收集一些数据后，你可以预测单个用户平均的成本，并且随着你的应用程序使用量的增长，这个单位成本几乎保持不变。
- en: Knowing how much a single user costs and keeping this number fixed is very important
    for a startup. It helps to decide how much you need to charge for a service or
    earn through ads or sales to have a profit.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 知道单个用户成本是多少，并保持这个数字固定对于初创公司非常重要。这有助于决定你需要为服务收费多少，或者通过广告或销售赚取多少利润以获得利润。
- en: In a traditional infrastructure, you need to make payments in advance, and scaling
    your application means increasing your capacity in steps. So, calculating the
    unit cost of a user is a more difficult task and it's a variable number.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统基础设施中，你需要预先支付费用，并且扩展你的应用程序意味着以步骤增加你的容量。因此，计算用户的单位成本是一个更困难的任务，并且是一个变量数字。
- en: 'In the following diagram, the left-hand side shows traditional infrastructures
    with stepped costs and the right-hand side depicts serverless infrastructures
    with linear costs:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图中，左侧显示了具有阶梯式成本的传统基础设施，右侧描绘了具有线性成本的无服务器基础设施：
- en: '![](img/9880b471-304d-4b4e-a9e2-18699c325b2f.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9880b471-304d-4b4e-a9e2-18699c325b2f.png)'
- en: Cons
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缺点
- en: 'Serverless is great, but no technology is a silver bullet. You should be aware
    of the following issues:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器很棒，但没有技术是一劳永逸的。你应该意识到以下问题：
- en: Higher latency
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更高的延迟
- en: Constraints
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 约束
- en: Hidden inefficiencies
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏的低效率
- en: Vendor dependency
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 供应商依赖
- en: Debugging difficulties
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试困难
- en: Atomic deploys
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原子部署
- en: Uncertainties
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不确定性
- en: We will address these drawbacks in detail now.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将详细讨论这些缺点。
- en: Higher latency
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更高的延迟
- en: 'Serverless is event-driven and so your code is not running all the time. When
    a request is made, it triggers a service that finds your function, unzips the
    package, loads it into a container, and makes it available to be executed. The
    problem is that those steps take time: up to a few hundreds of milliseconds. This
    issue is called a cold start delay and is a trade-off that exists between the
    serverless cost-effective model and the lower latency of traditional hosting.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器是事件驱动的，因此你的代码并不是一直在运行。当一个请求被发起时，它会触发一个服务来找到你的函数，解压包，将其加载到容器中，并使其可执行。问题是这些步骤需要时间：多达几百毫秒。这个问题被称为冷启动延迟，是服务器无服务器成本效益模型和传统托管较低延迟之间的权衡。
- en: There are some solutions available to minimize this performance problem. For
    example, you can configure your function to reserve more RAM memory. It gives
    a faster start and overall performance. The programming language is also important.
    Java has a higher cold start time than JavaScript (Node.js).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些解决方案可以最小化这种性能问题。例如，你可以配置你的函数以预留更多的RAM内存。这会提供更快的启动和整体性能。编程语言也很重要。Java的冷启动时间比JavaScript（Node.js）长。
- en: Another solution is to benefit from the fact that the cloud provider may cache
    the loaded code, which means that the first execution will have a delay but further
    requests will benefit from a smaller latency. You can optimize a serverless function
    by aggregating a large number of functionalities into a single function. The benefit
    is that this package will be executed with a higher frequency and will frequently
    skip the cold start issue. The problem is that a big package will take more time
    to load and provoke a higher first start time.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种解决方案是利用云服务提供商可能缓存已加载代码的事实，这意味着第一次执行会有延迟，但后续请求将受益于更小的延迟。你可以通过将大量功能聚合到一个函数中来优化无服务器函数。好处是，这个包将以更高的频率执行，并且经常跳过冷启动问题。问题是，大包加载需要更多时间，并且会导致更高的首次启动时间。
- en: As a last resort, you could schedule another service to ping your functions
    periodically, such as once every 5 minutes, to prevent putting them to sleep.
    It will add costs, but it removes the cold start problem.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的手段，你可以安排另一个服务定期ping你的函数，例如每5分钟一次，以防止它们进入休眠状态。这将增加成本，但可以消除冷启动问题。
- en: There is also a concept of serverless databases that references services where
    the database is fully managed by the vendor, and it costs only the storage and
    the time to execute the database engine. Those solutions are wonderful, but they
    add a second layer of delay for your requests.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个无服务器数据库的概念，它指的是数据库完全由供应商管理的服务，并且仅按存储和执行数据库引擎的时间收费。这些解决方案很棒，但它们为你的请求增加了第二层延迟。
- en: Constraints
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约束条件
- en: If you go serverless, you need to know what the vendor constraints are. For
    example, on AWS, you can't run a Lambda function for more than 5 minutes. It makes
    sense because if you spend long time running code, you are using it the wrong
    way. Serverless was designed to be cost efficient in short bursts. For constant
    and predictable processing, it will be expensive.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你转向无服务器架构，你需要了解供应商的约束条件。例如，在AWS上，你不能运行超过5分钟的Lambda函数。这是有道理的，因为如果你长时间运行代码，你就是在错误地使用它。无服务器架构旨在在短时间内以成本效益的方式运行。对于持续和可预测的处理，它将非常昂贵。
- en: Another constraint on AWS Lambda is the number of concurrent executions across
    all functions within a given region. Amazon limits this to 1,000\. Suppose that
    your functions need 100 milliseconds on average to execute. In this scenario,
    you can handle up to 10,000 users per second. The reasoning behind this restriction
    is to avoid excessive costs due to programming errors that may create potential
    runways or recursive iterations.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda的另一个约束是给定区域内所有函数的并发执行数量。亚马逊将其限制为1,000。假设你的函数平均需要100毫秒来执行。在这种情况下，你可以处理每秒多达10,000个用户。这个限制背后的原因是避免由于编程错误可能造成的潜在跑道或递归迭代导致的过度成本。
- en: AWS Lambda has a default limit of 1,000 concurrent executions. However, you
    can file a case into AWS Support Center to raise this limit. If you say that your
    application is ready for production and that you understand the risks, they will
    probably increase this value.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda有一个默认的1,000个并发执行的限制。然而，你可以向AWS支持中心提交案例来提高这个限制。如果你表示你的应用程序已经准备好投入生产，并且你理解其中的风险，他们可能会提高这个值。
- en: When monitoring your Lambda functions using Amazon CloudWatch (more in [Chapter
    10](3c6f35a1-ca69-49db-ba87-f9b37af86ced.xhtml), *Testing, Deploying, and Monitoring*),
    there is an option called *throttles*. Each invocation that exceeds the safety
    limit of concurrent calls is counted as one throttle. You can configure a CloudWatch
    alert to receive an e-mail if this scenario occurs.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Amazon CloudWatch（更多内容请参阅第10章[3c6f35a1-ca69-49db-ba87-f9b37af86ced.xhtml]，*测试、部署和监控*）监控Lambda函数时，有一个名为*节流*的选项。每个超过并发调用安全限制的调用都被计为一个节流。你可以配置CloudWatch警报，以便在发生这种情况时接收电子邮件。
- en: Hidden inefficiencies
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐藏的低效率
- en: Some people see serverless as a NoOps solution. That's not true. DevOps is still
    necessary. You don't need to worry much about servers because they are second-class
    citizens and the focus is on your business. However, adding metrics and monitoring
    your applications will always be a good practice. It's so easy to scale that a
    specific function may be deployed with a poor performance that takes much more
    time than necessary and remains unnoticed forever because no one is monitoring
    the operation.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人将无服务器视为一种NoOps解决方案。这并不正确。DevOps仍然是必要的。你不必过于担心服务器，因为它们是二等公民，重点在于你的业务。然而，添加指标和监控你的应用程序始终是一种良好的实践。扩展如此容易，以至于一个特定的功能可能会以较差的性能部署，所需时间比必要的多得多，并且永远不被注意，因为没有人在监控操作。
- en: Also, over or under provisioning is also possible (in a smaller sense) since
    you need to configure your function, setting the amount of RAM memory that it
    will reserve and the threshold to timeout the execution. It's a very different
    scale of provisioning, but you need to keep it in mind to avoid mistakes.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，过配或欠配也是可能的（在较小程度上），因为你需要配置你的函数，设置它将保留的RAM内存量以及超时执行的阈值。这是一个非常不同的配置规模，但你需要记住这一点以避免错误。
- en: Vendor dependency
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 供应商依赖
- en: When you build a serverless solution, you trust your business to a third-party
    vendor. You should be aware that companies fail and you can suffer downtimes,
    security breaches, and performance issues. Also, the vendor may change the billing
    model, increase costs, introduce bugs into their services, have poor documentation,
    modify an API forcing you to upgrade, and terminate services. A whole bunch of
    bad things may happen.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当你构建无服务器解决方案时，你将你的业务托付给第三方供应商。你应该意识到公司会失败，你可能会遭受停机时间、安全漏洞和性能问题。此外，供应商可能会改变计费模式，增加成本，在他们的服务中引入错误，提供糟糕的文档，修改API迫使你升级，甚至终止服务。可能会发生许多不好的事情。
- en: What you need to weigh is whether it's worth trusting in another company or
    making a big investment to build everything by yourself. You can mitigate these
    problems by doing a market search before selecting a vendor. However, you still
    need to count on luck. For example, Parse was a vendor that offered managed services
    with really nice features. It was bought by Facebook in 2013, which gave more
    reliability due to the fact that it was backed by a big company. Unfortunately,
    Facebook decided to shut down all servers in 2016, giving one year of notice for
    customers to migrate to other vendors.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要权衡的是，是值得信任另一家公司，还是进行大量投资自己构建一切。在选择供应商之前进行市场搜索可以减轻这些问题。然而，你仍然需要依赖运气。例如，Parse是一家提供具有真正优秀功能的托管服务的供应商。它在2013年被Facebook收购，由于背后有大型公司的支持，因此提供了更多的可靠性。不幸的是，Facebook在2016年决定关闭所有服务器，给客户一年时间迁移到其他供应商。
- en: Vendor lock-in is another big issue. When you use cloud services, it's very
    likely that one specific service has a completely different implementation than
    another vendor, making those two different APIs. You need to rewrite code in case
    you decide to migrate. It's already a common problem. If you use a managed service
    to send e-mails, you need to rewrite part of your code before migrating to another
    vendor. What raises a red flag here is that a serverless solution is entirely
    based in one vendor, and migrating the entire codebase can be much more troublesome.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商锁定是另一个大问题。当你使用云服务时，很可能一个特定的服务与另一个供应商的实现完全不同，从而产生两个不同的API。如果你决定迁移，你需要重写代码。这已经是一个常见问题。如果你使用托管服务发送电子邮件，在迁移到另一个供应商之前，你需要重写部分代码。这里引起红旗的是，无服务器解决方案完全基于一个供应商，迁移整个代码库可能会更加麻烦。
- en: To mitigate this problem, some tools such as the Serverless Framework support
    multiple vendors, making it easier to switch between them. Multivendor support
    represents safety for your business and gives power to competitiveness.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减轻这个问题，一些工具，如Serverless Framework，支持多个供应商，这使得在它们之间切换变得更容易。多供应商支持代表你的业务安全，并赋予竞争力。
- en: Debugging difficulties
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试困难
- en: Unit testing a serverless solution is fairly simple because any code that your
    functions rely on can be separated into modules and unit tested. Integration tests
    are a little bit more complicated because you need to be online to test using
    external services.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试无服务器解决方案相当简单，因为你的函数所依赖的任何代码都可以分离成模块并单独进行单元测试。集成测试稍微复杂一些，因为你需要在线测试使用外部服务。
- en: When it comes to debugging to test a feature or fix an error, it's a whole different
    problem. You can't hook into an external service to see how your code behaves
    step-by-step. Also, those Serverless APIs are not open sourced, so you can't run
    them in-house for testing. All you have is the ability to log steps, which is
    a slow debugging approach, or extract the code and adapt it to host into your
    own servers and make local calls.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到调试以测试一个功能或修复一个错误时，这是一个完全不同的问题。你不能连接到外部服务来查看你的代码如何逐步执行。此外，那些无服务器API没有开源，所以你不能在内部运行它们进行测试。你所能做的就是记录步骤，这是一个缓慢的调试方法，或者提取代码并将其适应到自己的服务器上，进行本地调用。
- en: Atomic deploys
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原子部署
- en: Deploying a new version of a serverless function is easy. You update the code
    and the next time that a trigger requests this function, your newly deployed code
    will be selected to run. This means that, for a brief moment, two instances of
    the same function can be executed concurrently with different implementations.
    Usually, that's not a problem, but when you deal with persistent storage and databases,
    you should be aware that a new piece of code can insert data into a format that
    an old version can't understand.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 部署一个无服务器函数的新版本很容易。你更新代码，下次触发器请求此函数时，你新部署的代码将被选中运行。这意味着，在很短的时间内，同一函数的两个实例可以同时执行，但实现不同。通常，这不会成为问题，但当你处理持久存储和数据库时，你应该意识到新代码可能会以旧版本无法理解的方式插入数据。
- en: Also, if you want to deploy a function that relies on a new implementation of
    another function, you need to be careful in the order that you deploy those functions.
    Ordering is often not secured by the tools that automate the deployment process.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你要部署一个依赖于另一个函数新实现的函数，你需要小心部署这些函数的顺序。通常，自动化部署过程的工具并不能保证顺序的安全性。
- en: The problem here is that current serverless implementations consider that deployment
    is an atomic process for each function. You can't batch deploy a group of functions
    atomically. You can mitigate this issue by disabling the event source while you
    deploy a specific group, but that means introducing downtime into the deployment
    process. Another option would be to use a Monolith approach instead of a Microservices
    architecture for serverless applications.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是，当前的无服务器实现认为部署是每个函数的原子过程。你不能原子性地批量部署一组函数。你可以通过在部署特定组时禁用事件源来减轻这个问题，但这意味着在部署过程中引入了停机时间。另一个选择是，对于无服务器应用程序，使用单体方法而不是微服务架构。
- en: Uncertainties
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不确定性
- en: Serverless is still a pretty new concept. Early adopters are braving this field,
    testing what works, and which kind of patterns and technologies can be used. Emerging
    tools are defining the development process. Vendors are releasing and improving
    new services. There are high expectations for the future, but the future isn't
    here yet. Some uncertainties still worry developers when it comes to building
    large applications. Being a pioneer can be rewarding, but risky.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器仍然是一个相对较新的概念。早期采用者正在勇敢地进入这个领域，测试哪些可行，以及哪些模式和可以使用的技术。新兴的工具正在定义开发过程。供应商正在发布和改进新的服务。人们对未来抱有很高的期望，但未来尚未到来。当涉及到构建大型应用程序时，一些不确定性仍然让开发者感到担忧。成为先驱可能会带来回报，但也存在风险。
- en: 'Technical debt is a concept that compares software development with finances.
    The easiest solution in the short run is not always the best overall solution.
    When you take a bad decision in the beginning, you pay later with extra hours
    to fix it. Software is not perfect. Every single architecture has pros and cons
    that append technical debt in the long run. The question is: how much technical
    debt does serverless aggregate to the software development process? Is it more,
    less, or equivalent to the kind of architecture that you are using today?'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 技术债务是一个将软件开发与金融比较的概念。短期内最容易的解决方案并不总是最好的整体解决方案。当你最初做出错误的决定时，你会在以后用额外的时间来修复它。软件并不完美。每个架构都有其优点和缺点，长期来看都会产生技术债务。问题是：无服务器将多少技术债务聚集到软件开发过程中？是更多、更少，还是与你今天使用的架构相当？
- en: Use cases
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例
- en: In this section, we'll cover which use cases fit better for the serverless context
    and which you should avoid. As the concept is still evolving, there are still
    unmapped applications, and you should not be restricted. So feel free to exercise
    your creativity to think and try new ones.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论哪些用例更适合无服务器环境，哪些你应该避免。由于这个概念仍在发展，仍然有一些未映射的应用程序，你不应该受到限制。所以请自由发挥你的创造力，思考和尝试新的用例。
- en: Static websites
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态网站
- en: 'Let''s see the following few examples of static websites:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下几个静态网站的例子：
- en: Company website
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司网站
- en: Portfolio
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站点展示
- en: Blog
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 博客
- en: Online documentation
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在线文档
- en: Static hosting is the simplest and oldest kind of serverless hosting. A static
    website, by definition, doesn't require server-side logic. You just need to map
    your site URLs to HTML files. In this book, we are going to use Amazon S3 to distribute
    HTML, CSS, JavaScript, and image files. Using Amazon Route 53, you give AWS the
    rights to route all domain requests to an S3 bucket that acts like a simple and
    cheap filesystem.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 静态托管是最简单也是最古老的免服务器托管方式。根据定义，静态网站不需要服务器端逻辑。你只需要将你的网站URL映射到HTML文件上。在这本书中，我们将使用Amazon
    S3来分发HTML、CSS、JavaScript和图片文件。通过使用Amazon Route 53，你赋予AWS将所有域名请求路由到一个充当简单且低成本文件系统的S3桶的权利。
- en: Hosting static files on a storage system is by far the best solution. It's cheap,
    fast, scalable, and highly available. There is no drawback. There is no function
    with cold start, no debugging, no uncertainties, and changing vendors is an easy
    task.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在存储系统上托管静态文件是目前最好的解决方案。它便宜、快速、可扩展、高度可用。没有任何缺点。没有冷启动功能，没有调试，没有不确定性，更换供应商也是一个简单的任务。
- en: If you are thinking of using WordPress to build a static site, please reconsider.
    You would need to spin up a server to launch a web server and a database that
    stores data. You start paying a few dollars per month to host a basic site and
    that cost greatly increases with your audience. For availability, you would add
    another machine and a load balance, and the billing would cost at least dozens
    of dollars per month. Also, as WordPress is so largely used, it's a big target
    for hackers and you will end up worrying about periodic security patches for WordPress
    and its plugins.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在考虑使用WordPress来构建静态网站，请重新考虑。你需要启动一个服务器来运行一个网络服务器和一个存储数据的数据库。你开始每月支付几美元来托管一个基本网站，而随着受众的增加，成本会大幅增加。为了可用性，你会添加另一台机器和一个负载均衡器，账单至少每月几十美元。此外，由于WordPress被广泛使用，它成为黑客攻击的大目标，你将不得不担心WordPress及其插件的定期安全补丁。
- en: So, how should you build a static site with a serverless approach? Nowadays,
    there are dozens of tools. I personally recommend **Jekyll**. You can host on
    GitHub pages for free, use **Disqus** to handle blog comments, and easily find
    many other plugins and templates. For my personal blog, I prefer to use Amazon
    because of its reliability and I pay just a few cents per month. If you want,
    you can also add CloudFront, which is a **Content Delivery Network** (**CDN**),
    to reduce latency by approximating users to your site files.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你应该如何使用免服务器的方式来构建一个静态网站呢？如今，有数十种工具。我个人推荐**Jekyll**。你可以免费托管在GitHub pages上，使用**Disqus**来处理博客评论，并且可以轻松找到许多其他插件和模板。对于我的个人博客，我更喜欢使用Amazon，因为它可靠性高，我每月只需支付几美分。如果你愿意，你还可以添加CloudFront，这是一个**内容分发网络**（**CDN**），通过将用户近似到你的网站文件来减少延迟。
- en: Lean websites
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精简网站
- en: Once you learn how to build a serverless website, it's extremely fast to transform
    an idea into a running service, removing the burden of preparing an infrastructure.
    Following the lean philosophy, your prototype reaches the market to validate a
    concept with minimum waste and maximum speed.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你学会了如何构建免服务器网站，将一个想法转化为运行中的服务会非常快，从而消除了准备基础设施的负担。遵循精益哲学，你的原型以最小的浪费和最大的速度进入市场，以验证一个概念。
- en: Small e-commerce websites
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小型电子商务网站
- en: In this section, I've used the qualifier *small*. This is because there are
    many studies that correlate the time to load a page with the probability for the
    customer to buy something. A few tens of milliseconds later may result in loss
    of sales. As already discussed, serverless brings reduced costs, but the cold
    start delay may increase the time to render a page. User-facing applications must
    consider whether this additional delay is worth it.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我使用了限定词**小**。这是因为有许多研究将页面加载时间与客户购买的可能性相关联。几十分之一秒的延迟可能会导致销售额的损失。如前所述，免服务器托管可以降低成本，但冷启动延迟可能会增加页面渲染的时间。面向用户的应用程序必须考虑这种额外的延迟是否值得。
- en: If the e-commerce sells to a small niche of customers in a single country, it's
    very likely that the traffic is concentrated during the day and reduces to almost
    nothing at late night. This use case is a perfect fit for serverless. Infrequent
    access is where most of the savings happens.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果电子商务只针对一个国家的特定小众客户群销售，那么流量很可能在白天集中，而在深夜几乎为零。这种用例非常适合免服务器托管。不频繁的访问是节省成本的主要部分。
- en: A real story to back this use case was described on Reddit. Betabrand, a retail
    clothing company, made a partnership with Valve to sell some products to promote
    one game. Valve created a blog post to advertise the deal and after a few minutes,
    the website broke because it couldn't handle the instant peak of a massive number
    of users. Valve pulled out the post and Betabrand had the mission to improve their
    infrastructure in one weekend.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一个真实的故事描述了Reddit上的这个用例。零售服装公司Betabrand与Valve合作，销售一些产品以推广一款游戏。Valve创建了一篇博客文章来宣传这笔交易，但几分钟后，网站因为无法处理大量用户的即时峰值而崩溃。Valve撤回了文章，Betabrand的任务是在一个周末内改善他们的基础设施。
- en: 'Betabrand solved the problem building a small website using serverless. Valve
    advertised them again and they were able to handle 500,000 users in 24 hours,
    with peaks of 5,000 concurrent users. The post starts saying that it had an initial
    cost of only US$ 0.07, but it was corrected in comments to US$ 4.00 for backend
    and US$ 80.00 to transfer large (non-optimized) images, which is still an impressive
    low cost for such a high traffic (source: [https://www.reddit.com/r/webdev/3oiilb](https://www.reddit.com/r/webdev/3oiilb)).'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Betabrand通过构建一个使用无服务器的小型网站解决了这个问题。Valve再次宣传他们，他们能够在24小时内处理50万用户，峰值达到5000个并发用户。文章一开始说初始成本仅为0.07美元，但评论中更正为后端成本4.00美元，以及传输大（非优化）图片的成本80.00美元，这对于如此高流量的情况来说仍然是一个令人印象深刻的低成本（来源：[https://www.reddit.com/r/webdev/3oiilb](https://www.reddit.com/r/webdev/3oiilb))）。
- en: Temporary websites
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 临时网站
- en: Consider, in this section, websites that are built just for short events, like
    conferences, that receive a big number of visitors. They need to promote the event,
    display the schedule and maybe collect e-mails, comments, photos, and other kinds
    of data. Serverless helps handling the scale and provides a fast development.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，考虑仅用于短期活动（如会议）的网站，这些网站会接待大量访客。他们需要推广活动，显示日程，也许收集电子邮件、评论、照片和其他类型的数据。无服务器有助于处理规模并提供快速开发。
- en: Another related use case is for ticketing websites. Suppose that a huge, popular
    concert will start selling tickets at midnight. You can expect a massive number
    of fans trying to buy tickets at the same time.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个相关的用例是票务网站。假设一场大型、受欢迎的音乐会将在午夜开始售票。你可以预期大量粉丝将同时尝试购买门票。
- en: Triggered processing
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发处理
- en: A common example is a mobile application that sends an image to a RESTful service.
    This image is stored and it triggers a function that will process it to optimize
    and reduce its size, creating different versions for desktop, tablet, and phones.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的例子是，一个移动应用程序将图片发送到RESTful服务。这张图片被存储，并触发一个函数来处理它，以优化并减小其大小，为桌面、平板电脑和手机创建不同的版本。
- en: Chatbots
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聊天机器人
- en: Most chatbots are very simple and designed for specific use cases. We don't
    build chatbots to pass the Turing test. We don't want them to be so complex and
    clever as to deceive a human that it's another human talking. What we want is
    to provide a new user interface to make it easier to interact with a system under
    certain conditions.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数聊天机器人非常简单，专为特定用例设计。我们不是构建聊天机器人来通过图灵测试。我们不希望它们变得如此复杂和聪明，以至于欺骗人类认为它是另一个人在说话。我们想要的只是提供一个新的用户界面，以便在特定条件下更容易与系统交互。
- en: Instead of ordering a pizza through an application using menus and options,
    you can type a message like "I want a small pepperoni pizza" and be quickly done
    with your order. If the user types "Will it rain today?", it is perfectly fine
    for the pizza chatbox to answer "I couldn't understand. Which kind of pizza do
    you want for today? We have X, Y, and Z." Those broad questions are reserved for
    multipurpose AI bots such as Siri, Cortana, or Alexa.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用菜单和选项的应用程序订购披萨，也可以输入一条消息，比如“我想点一份小辣味披萨”，然后快速完成你的订单。如果用户输入“今天会下雨吗？”，披萨聊天机器人回答“我理解不了。你今天想吃什么披萨？我们有X、Y和Z。”这些广泛的问题留给了多用途AI机器人，如Siri、Cortana或Alexa。
- en: Considering this restricted scenario, a serverless backend can be pretty useful.
    In fact, there is a growing number of demos and real-world applications that are
    using serverless to build chatbots.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这种受限的场景，无服务器后端可能非常有用。实际上，越来越多的演示和实际应用正在使用无服务器来构建聊天机器人。
- en: IoT backends
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网后端
- en: '**Internet of Things** (**IoT**) is a trending topic and many cloud services
    are providing tools to easily connect a huge number of devices. Those devices
    usually need to communicate through a set of simple messages, and they require
    a backend to process them. Thinking of this use case, Amazon offers AWS IoT as
    a serverless service to handle the broadcast of messages and AWS Lambda for serverless
    processing. Configuring and managing those services is so easy that they are becoming
    a common choice for IoT systems.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**物联网（IoT**）是一个热门话题，许多云服务提供商都提供工具，可以轻松连接大量设备。这些设备通常需要通过一系列简单消息进行通信，并需要一个后端来处理它们。考虑到这种用例，亚马逊提供了AWS
    IoT作为无服务器服务来处理消息的广播，以及AWS Lambda进行无服务器处理。配置和管理这些服务非常简单，因此它们正在成为物联网系统的常见选择。'
- en: Scheduled events
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计划事件
- en: You can set up your code to be executed on a regular, scheduled basis. Instead
    of running a dedicated machine to execute a code, one per hour, which creates
    some database reads or small file processing, you can use serverless and save
    costs.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以设置代码以定期、计划的方式执行。你不需要运行一台专门的机器来每小时执行一次代码，这可能会产生一些数据库读取或小文件处理，你可以使用无服务器并节省成本。
- en: Actually, that's a great way to introduce new features using serverless into
    a running solution since scheduled events are usually composed of simple tasks
    in separated modules.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这是一个将无服务器功能引入现有解决方案的绝佳方法，因为计划中的事件通常由分离模块中的简单任务组成。
- en: Big Data
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大数据
- en: There is a growing number of applications that are substituting traditional
    big data tools such as Hadoop and Spark for serverless counterparts. Instead of
    managing clusters of machines, you can create a big data pipeline, converting
    your input to data streams and loading chunks of data into concurrent serverless
    functions.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 越来越多的应用程序正在用无服务器工具替代传统的Hadoop和Spark等大数据工具。你不再需要管理机器集群，而是可以创建一个大数据管道，将输入转换为数据流，并将数据块加载到并发无服务器函数中。
- en: The benefit of this approach is the reduced management and ease of use. However,
    as you have a constant processing of data, you can expect higher costs. Also,
    on AWS, a Lambda function can't run for more than 5 minutes, and this limit may
    force changes to reduce chunks of data to smaller sizes before processing.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优点是管理成本降低且易于使用。然而，由于你有一个持续的数据处理过程，你可以预期更高的成本。此外，在AWS上，Lambda函数的运行时间不能超过5分钟，这个限制可能迫使你在处理之前将数据块的大小减小。
- en: What you should avoid
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你应该避免的内容
- en: 'Avoid applications that have the following features:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 避免具有以下特征的应用程序：
- en: CPU-intensive with long running tasks
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要大量CPU且运行时间长的任务
- en: Constant and with predictable traffic
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续且具有可预测的流量
- en: Real-time processing
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时处理
- en: Multiplayer-intensive games
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要多人参与的游戏
- en: Regarding multiplayer games, you can build a serverless backend that handles
    the communication between players with very low latency through serverless notifications.
    It enables turn-based and card games, but may not fit so well for first person
    shooters, for example, which require constant and frequent server-side processing.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 关于多人游戏，你可以构建一个无服务器后端，通过无服务器通知以极低的延迟处理玩家之间的通信。它支持回合制和卡牌游戏，但可能不适合需要持续和频繁服务器端处理的第一人称射击游戏等。
- en: Summary
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the serverless model and how it is different
    from other traditional approaches. You already know what the main benefits are
    and the advantages that it may offer for your next application. Also, you are
    aware that no technology is a silver bullet. You know what kind of problems you
    may have with serverless and how to mitigate some of them.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了无服务器模型以及它与其他传统方法的区别。你已经知道主要的好处以及它可能为你的下一个应用程序提供的优势。你也意识到没有技术是万能的。你知道你可能会遇到哪些与无服务器相关的问题以及如何减轻其中的一些问题。
- en: Now that you've understood the serverless model, we are ready to dive into the
    tools and services that you can use to build a serverless application. In the
    next chapter, you will learn which services AWS offers that can be considered
    as serverless, followed by a brief explanation on how they work and a set of code
    examples.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了无服务器模型，我们准备深入了解你可以用来构建无服务器应用程序的工具和服务。在下一章中，你将学习AWS提供的哪些服务可以被视为无服务器，随后将简要解释它们的工作原理以及一系列代码示例。
