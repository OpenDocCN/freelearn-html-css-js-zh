- en: Working with Arrays
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与数组一起工作
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Using Array#find and Array#filter to find values in an array
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Array#find 和 Array#filter 在数组中查找值
- en: Using Array#slice to get a subset of an array
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Array#slice 获取数组的子集
- en: Using Array#every and Array#some to test array values
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Array#every 和 Array#some 测试数组值
- en: Using Array.map to produce values
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Array.map 生成值
- en: Using Array.reduce to transform data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Array.reduce 转换数据
- en: Extracting array members with destructuring
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用解构提取数组成员
- en: Getting the head and tail of array using the rest operator
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 rest 运算符获取数组的头和尾
- en: Combining arrays with the spread operator
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用扩展运算符合并数组
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Arrays are a fundamental data structure in almost every language, and JavaScript
    is no exception. Common tasks for these collections include, among others, searching,
    dividing, and combining them. Until recently, this meant writing a lot of loops,
    or including large libraries that implemented these loops. ES6, however, includes
    additions to the Array API that make these tasks much easier.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数组几乎是每种语言的基本数据结构，JavaScript 也不例外。这些集合的常见任务包括搜索、分割和合并等。直到最近，这意味着要编写很多循环，或者包括实现这些循环的大型库。然而，ES6
    包括对 Array API 的扩展，这使得这些任务变得更加容易。
- en: Using Array#find and Array#filter to find values in an array
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Array#find 和 Array#filter 在数组中查找值
- en: When searching for items in an array, sometimes we  search for a single item,
    other times we  search for multiple items that mean some criteria. The Array#find
    and Array#filter functions are intended to simplify this.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组中搜索项目时，有时我们搜索单个项目，有时我们搜索符合某些标准的多项项目。Array#find 和 Array#filter 函数旨在简化这一点。
- en: In this recipe, we'll take a look at how to use these two functions to locate
    elements within an array.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探讨如何使用这两个函数在数组中定位元素。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您已经有一个允许您在浏览器中创建和运行 ES 模块的 workspace。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序，并导航到您的 workspace。
- en: Create a new folder named `10-01-using-find-and-filter`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `10-01-using-find-and-filter` 的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html`，它从 `main.js` 加载并运行一个 `main` 函数。
- en: 'Create a `main.js` file that defines a new abstract `class` named `Rocket`.
    Assign a `name` instance property upon construction:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.js` 的文件，定义一个新的抽象 `class`，命名为 `Rocket`。在构造时分配一个 `name` 实例属性：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a `main` function that constructs several `Rocket` instances:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数，构建几个 `Rocket` 实例：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Use the `find` method to locate the first American `Rocket`:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `find` 方法定位第一个美国 `Rocket`：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use the `filter` method to find all `American Rockets` instances:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `filter` 方法查找所有 `American Rockets` 实例：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Python 网络服务器，并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You will see output displayed as follows:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出显示：
- en: '![](img/17abeeb0-bced-4970-a5ed-718c9ef31604.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/17abeeb0-bced-4970-a5ed-718c9ef31604.png)'
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Both the `find` and `filter` methods take a function that has a single parameter
    (an item from the array) and returns a Boolean value. If the function returns
    `true`, then the current item is a match. If it returns false, then it is not.
    The `find` method terminates after the first match and returns that value. The
    `filter` method creates a new array from all matches from the current array.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`find` 和 `filter` 方法都接受一个具有单个参数（数组中的项）的函数，并返回一个布尔值。如果函数返回 `true`，则当前项是匹配项。如果返回
    `false`，则不是。`find` 方法在找到第一个匹配项后终止并返回该值。`filter` 方法从当前数组创建一个包含所有匹配项的新数组。'
- en: In the above recipe, we see that the `find` method returns the first `Rocket`
    identified as American, while the `filter` method returns all of the `rockets`
    that are identified as American.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述食谱中，我们看到 `find` 方法返回第一个被识别为美国的 `Rocket`，而 `filter` 方法返回所有被识别为美国的 `rockets`。
- en: Using Array#slice to get a subset of the array
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Array#slice 获取数组的子集
- en: Sometimes, we want a subset of an array based on the array indices rather than
    on the contents of the array at those indices. In this recipe, we'll take a look
    at how to use slice to get a subset of an array.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们希望根据数组索引而不是数组索引处的数组内容来获取数组的子集。在本菜谱中，我们将探讨如何使用 slice 获取数组的子集。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱假设您已经有一个工作空间，允许您在浏览器中创建和运行 ES 模块。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序，并导航到您的开发空间。
- en: Create a new folder named `10-02-using-slice-to-get-subset`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `10-02-using-slice-to-get-subset` 的新文件夹。
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，定义一个名为 `Rocket` 的新 `class`，它接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a `main` function that creates several `Rocket` instances and places
    them into an array:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数，创建几个 `Rocket` 实例并将它们放入数组中：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Divide the `Rockets`array into three subsets based on the country:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据国家将 `Rockets` 数组划分为三个子集：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Python 网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`。'
- en: 'You should see the following output:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![](img/c9afc441-6cb9-46eb-ae84-483c07014fcd.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c9afc441-6cb9-46eb-ae84-483c07014fcd.png)'
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The **slice** method takes two parameters, a start index and an end index. The
    end index is noninclusive. This means that the new set will include the elements
    between the start and end index, including the element at the start index, but
    not the element at the end index.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**slice** 方法接受两个参数，一个起始索引和一个结束索引。结束索引是非包含的。这意味着新集合将包括从起始索引到结束索引之间的元素，包括起始索引处的元素，但不包括结束索引处的元素。'
- en: This might seem a bit confusing, but think of it this way. Consider that the
    start index is 2 and the end index is 3\. The difference between those two numbers
    is 1, and there is a single element in the resulting subset. For indices 0 and
    2, the difference is 2 and there will be two elements in the resulting subset.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能有点令人困惑，但可以这样考虑。假设起始索引是 2，结束索引是 3。这两个数字之间的差是 1，结果子集中只有一个元素。对于索引 0 和 2，差是 2，结果子集中将有两个元素。
- en: Using Array#every and Array#some to test array values
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Array#every 和 Array#some 测试数组值
- en: Sometimes, we need to know information about the array as a whole rather than
    individual elements, such as "Are there any elements that meet some criterion?"
    or "Do all the elements meet some criterion?".
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要了解整个数组的信息，而不仅仅是单个元素的信息，例如“是否有任何元素满足某些标准？”或“所有元素是否满足某些标准？”。
- en: In this recipe, we'll take a look at how to use the `some` and `every` methods
    to test an array.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将探讨如何使用 `some` 和 `every` 方法来测试数组。
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱假设您已经有一个工作空间，允许您在浏览器中创建和运行 ES 模块。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序，并导航到您的开发空间。
- en: Create a new folder named `10-03-using-every-and-some-to-test-values`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `10-03-using-every-and-some-to-test-values` 的新文件夹。
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，定义一个名为 `Rocket` 的新 `class`，它接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a `main` function that creates several `Rocket` instances and places
    them into an array:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数，创建几个 `Rocket` 实例并将它们放入数组中：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Use the `every` method to determine whether all of the members are instances
    of the `Rocket` class:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `every` 方法来确定所有成员是否是 `Rocket` 类的实例：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Use the `every` method to determine whether all of the members are `American
    Rockets`:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `every` 方法来确定所有成员是否是 `American Rockets`：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Use the `some` method to determine whether any of the members are `American
    Rockets`:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `some` 方法来确定是否有任何成员是 `American Rockets`：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Python 网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`。'
- en: 'You should see the following output:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![](img/0117dc49-72ac-43f6-8a31-82a104ca568f.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0117dc49-72ac-43f6-8a31-82a104ca568f.png)'
- en: How it works...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `every` and `some` methods work similarly to the `filter` and `find` methods.
    They take a function, which receives an array element as a parameter, and return
    a Boolean. The truth value of this Boolean is used by the  `every` and `some` methods
    to reduce to a single value. The `some` method returns true as soon as any of
    the callbacks return `true`. The `every` method visits all the elements and only
    returns `true` if allof the callbacks return `true`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`every` 和 `some` 方法与 `filter` 和 `find` 方法类似。它们接受一个函数，该函数接收一个数组元素作为参数并返回一个布尔值。这个布尔值的真值被
    `every` 和 `some` 方法用来减少到一个单一值。`some` 方法在任何一个回调返回 `true` 时立即返回 `true`。`every` 方法遍历所有元素，只有当所有回调都返回
    `true` 时才返回 `true`。'
- en: Using Array.map to produce values
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Array.map 生成值
- en: Other array operations are intended to produce new values. This can be a property
    from array elements or any other value calculated for each. The `map` method visits
    each element and collects the values into a new array.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 其他数组操作旨在生成新值。这可以是数组元素的属性或为每个元素计算的其他任何值。`map` 方法遍历每个元素并将值收集到一个新数组中。
- en: In this recipe, we'll take a look at how to use `map` to create an array of
    new values.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探讨如何使用 `map` 创建一个包含新值的新数组。
- en: Getting ready
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您已经有一个允许您在浏览器中创建和运行 ES 模块的开发空间。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序，并导航到您的开发空间。
- en: Create a new folder named `10-04-map-to-produce-values`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `10-04-map-to-produce-values` 的新文件夹。
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.js` 的文件，定义一个名为 `Rocket` 的新 `class`，它接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a `main` function that creates several `Rocket` instances and places
    them into an array:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数，创建几个 `Rocket` 实例并将它们放入一个数组中：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Use the `map` method, and return a string representation of each element''s
    nationality:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `map` 方法，并返回每个元素的国籍的字符串表示：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Python 网络服务器，并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![](img/9d8a3404-0d06-44a4-b223-d099b109a076.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9d8a3404-0d06-44a4-b223-d099b109a076.png)'
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The map works similarly to several of the other methods we've seen so far. It
    takes a function that receives an array element as a parameter and returns some
    value. Those values are collected into a new array, and that new array is returned
    by the map method.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Map 方法与我们所看到的几个其他方法类似。它接受一个函数，该函数接收一个数组元素作为参数并返回某个值。这些值被收集到一个新数组中，该新数组由 map
    方法返回。
- en: Using Array.reduce to transform data
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Array.reduce 转换数据
- en: The `map` method is great for creating data that maps directly to elements from
    an existing array. However, sometimes, the desired result takes on a different
    shape. To do this, we can use the `reduce` method to accumulate values into a
    new form.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`map` 方法非常适合创建直接映射到现有数组元素的数组。然而，有时所需的结果具有不同的形状。为此，我们可以使用 `reduce` 方法将值累积到新的形式中。'
- en: In this recipe, we'll take a look at how to use the `reduce` method to transform
    data.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探讨如何使用 `reduce` 方法来转换数据。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您已经有一个允许您在浏览器中创建和运行 ES 模块的开发空间。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序，并导航到您的开发空间。
- en: Create a new folder named `10-05-reduce-to-transform-data`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `10-05-reduce-to-transform-data` 的新文件夹。
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.js` 的文件，定义一个名为 `Rocket` 的新 `class`，它接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a `main`function with an array of nationality strings:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含国籍字符串数组的 `main` 函数：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Use the `reduce`method to count the different nationalities:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `reduce` 方法来统计不同的国籍：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器，并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![](img/3d7bb201-eae3-45d0-b8f2-ebe1cfb759e0.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d7bb201-eae3-45d0-b8f2-ebe1cfb759e0.png)'
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Like other methods we've seen previously, the `reduce` method visits each element
    in an array. However, it takes a different set of parameters. The first parameter
    is a function that receives two arguments, an accumulator and the current element.
    The result of this function is the new accumulated value.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前看到的其他方法一样，`reduce`方法遍历数组中的每个元素。然而，它接受一组不同的参数。第一个参数是一个接收两个参数的函数，一个累加器和当前元素。这个函数的结果是新的累加值。
- en: The second argument is the initial value of the accumulator.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数是累加器的初始值。
- en: In the recipe, the accumulator is initialized as an empty object. The function
    then uses the current array value as a key and increments a counter for that key.
    In this way, we count the number of times each key appears.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，累加器被初始化为一个空对象。然后函数使用当前数组值作为键，并增加该键的计数器。这样，我们统计每个键出现的次数。
- en: We can see that, unlike with `map`, the resulting data shape is different from
    the initial array.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，与`map`不同，结果数据形状与初始数组不同。
- en: Extracting array members with destructuring
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用解构提取数组成员
- en: Indexing arrays directly is relatively simple. The syntax is familiar to all
    but the most novice developers. However, what is also familiar is *off by one
    error*. This means that an array or a collection has been indexed incorrectly
    by a single position. In some cases, this will cause a fault that is immediately
    recognizable. Other times, it will cause more subtle errors.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 直接索引数组相对简单。语法对所有但最新手开发者来说都很熟悉。然而，同样熟悉的是*索引错误*。这意味着数组或集合被错误地索引了一个位置。在某些情况下，这会导致立即可识别的错误。其他时候，它会导致更微妙错误。
- en: In this recipe, we'll take a look at how to extract members of an array with
    destructuring syntax.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨如何使用解构语法提取数组的成员。
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱假设你已经有一个工作区，允许你在浏览器中创建和运行ES模块。如果你没有，请参考前两章。
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，并导航到你的工作区。
- en: Create a new folder named `10-06-extract-array-members-with-destructuring`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`10-06-extract-array-members-with-destructuring`的新文件夹。
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.js`文件，定义一个名为`Rocket`的新`class`，它接受一个构造函数参数`name`并将其分配给实例属性：
- en: '[PRE18]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a `main` function with an array of rockets:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含火箭数组的`main`函数：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Use the destructuring syntax to assign each member to a local variable:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用解构语法将每个成员分配给局部变量：
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的Python网络服务器，并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![](img/70f2e69a-d2d3-4b7c-9aea-e8b7d49850dd.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70f2e69a-d2d3-4b7c-9aea-e8b7d49850dd.png)'
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The above recipe shows how to use destructuring syntax to create individual
    variables for elements in an array. The destructuring syntax mirrors the indices
    of the corresponding array. So, variable names will be associated with the element
    at the corresponding position in the array. The name at the zero^(th) position
    will be assigned a value at the beginning of the array. The name at position 1
    will be assigned the value at the next, and so on.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 上述菜谱展示了如何使用解构语法为数组中的元素创建单个变量。解构语法反映了相应数组的索引。因此，变量名将与数组中相应位置的元素关联。零^(th)位置的名称将在数组的开始处分配一个值。位置1的名称将分配下一个值，依此类推。
- en: So we can see above that we name each of the elements in the `rockets` array.
    The value of each of the extracted elements is a match for the corresponding rocket.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到上面我们为`rockets`数组中的每个元素命名。提取的每个元素的值与相应的火箭相匹配。
- en: Getting the head and tail of array using the rest operator
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用剩余操作符获取数组的头和尾
- en: Using destructuring to pick out elements is convenient, but we don't always
    want to pull out every element. A commonly useful pattern is to get the zeroth
    element of an array assigned to one variable, and the rest of the elements in
    another. This is commonly called the head and tail of an array.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用解构来挑选元素很方便，但我们并不总是想要取出每个元素。一个常用的模式是将数组的零元素分配给一个变量，其余的元素分配给另一个变量。这通常被称为数组的头和尾。
- en: In this recipe, we'll take a look at how to use the rest operator to get the
    head and tail of an array.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将看看如何使用剩余操作符来获取数组的头和尾。
- en: Getting ready
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱假设你已经有一个允许你在浏览器中创建和运行 ES 模块的工作区。如果没有，请参考前两章。
- en: How to do it...
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，并导航到你的工作区。
- en: Create a new folder named `10-07-get-head-and-tail-from-array`.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `10-07-get-head-and-tail-from-array` 的新文件夹。
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，定义一个名为 `Rocket` 的新 `class`，它接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE21]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a `main` function with an array of rockets:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含火箭数组的 `main` 函数：
- en: '[PRE22]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Use the destructuring syntax and the rest operator to get the head and the
    tail of the array:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用解构语法和剩余操作符来获取数组的头和尾：
- en: '[PRE23]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的 Python 网络服务器，并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![](img/5611bcdc-c31b-4edf-965c-345950b936b2.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5611bcdc-c31b-4edf-965c-345950b936b2.png)'
- en: How it works...
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first element `saturnV` works in the same manner as the preceding recipe.
    The rest operator indicates that the remaining elements should be assigned to
    the `otherRockets` variable. Since it isn't necessarily a single element, this
    will be an array.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个元素 `saturnV` 的工作方式与前面的食谱相同。剩余操作符表示剩余的元素应该分配给 `otherRockets` 变量。由于它不一定是单个元素，这将是一个数组。
- en: It should be noted that the rest operator must be the last member of the destructuring
    syntax. If it is followed by a comma, you will receive a parse error.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，剩余操作符必须是解构语法的最后一个成员。如果它后面跟着一个逗号，你将收到一个解析错误。
- en: Combining arrays with the spread operator
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用展开操作符合并数组
- en: We have seen how to use some new syntax to extract elements from an array. Not
    to be left out, there are also some new facilities for combining arrays. Helpfully,
    as we'll see, the use of the spread operator mirrors that of the rest operator.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用一些新的语法来从数组中提取元素。同样，也有一些新的工具用于合并数组。如我们所见，展开操作符的使用与剩余操作符类似。
- en: In this recipe, we'll take a look at how to use the spread operator to combine
    arrays.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将看看如何使用展开操作符来合并数组。
- en: Getting ready
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱假设你已经有一个允许你在浏览器中创建和运行 ES 模块的工作区。如果没有，请参考前两章。
- en: How to do it...
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open your command-line application, and navigate to your workspace.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，并导航到你的工作区。
- en: Create a new folder named `10-08-combine-arrays-using-spread`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `10-08-combine-arrays-using-spread` 的新文件夹。
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，定义一个名为 `Rocket` 的新 `class`，它接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE24]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a `main` function with multiple array rockets, divided by nationality,
    and a standalone `Rocket` variable:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数，包含多个按国籍划分的火箭数组，以及一个独立的 `Rocket` 变量：
- en: '[PRE25]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Use the structuring syntax and the spread operator to combine the rockets into
    a single array:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用解构语法和展开操作符将火箭合并成一个单独的数组：
- en: '[PRE26]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的 Python 网络服务器，并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![](img/edfb2026-61a4-4c72-be9d-f8160ea7acfa.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/edfb2026-61a4-4c72-be9d-f8160ea7acfa.png)'
- en: How it works...
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The way I think about the rest operator is to think of it *spreading* members
    of the collection out into the current collection. In the preceding recipe, this
    means that the members of `usRockets` and `chineseRockets` are spread out into
    the new array, `rockets`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为剩余操作符的方式是将其集合的成员 *展开* 到当前集合中。在先前的菜谱中，这意味着 `usRockets` 和 `chineseRockets`
    的成员被展开到新数组 `rockets` 中。
- en: This spreading means that they can be referenced in the same syntactic level
    as the standalone `sovietRocket` when creating the new array. This combining of
    elements into a new structure is sometimes referred to as *structuring*, mirroring
    the *destructuring* terminology.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这种扩展意味着它们可以在创建新数组时与独立的 `sovietRocket` 在相同的语法级别上进行引用。这种将元素组合成新结构的过程有时被称为 *结构化*，与
    *解构化* 术语相对应。
