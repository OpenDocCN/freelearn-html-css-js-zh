- en: Working with Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Array#find and Array#filter to find values in an array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Array#slice to get a subset of an array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Array#every and Array#some to test array values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Array.map to produce values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Array.reduce to transform data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting array members with destructuring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the head and tail of array using the rest operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining arrays with the spread operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Arrays are a fundamental data structure in almost every language, and JavaScript
    is no exception. Common tasks for these collections include, among others, searching,
    dividing, and combining them. Until recently, this meant writing a lot of loops,
    or including large libraries that implemented these loops. ES6, however, includes
    additions to the Array API that make these tasks much easier.
  prefs: []
  type: TYPE_NORMAL
- en: Using Array#find and Array#filter to find values in an array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When searching for items in an array, sometimes we  search for a single item,
    other times we  search for multiple items that mean some criteria. The Array#find
    and Array#filter functions are intended to simplify this.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to use these two functions to locate
    elements within an array.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `10-01-using-find-and-filter`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new abstract `class` named `Rocket`.
    Assign a `name` instance property upon construction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that constructs several `Rocket` instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `find` method to locate the first American `Rocket`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `filter` method to find all `American Rockets` instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see output displayed as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/17abeeb0-bced-4970-a5ed-718c9ef31604.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Both the `find` and `filter` methods take a function that has a single parameter
    (an item from the array) and returns a Boolean value. If the function returns
    `true`, then the current item is a match. If it returns false, then it is not.
    The `find` method terminates after the first match and returns that value. The
    `filter` method creates a new array from all matches from the current array.
  prefs: []
  type: TYPE_NORMAL
- en: In the above recipe, we see that the `find` method returns the first `Rocket`
    identified as American, while the `filter` method returns all of the `rockets`
    that are identified as American.
  prefs: []
  type: TYPE_NORMAL
- en: Using Array#slice to get a subset of the array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, we want a subset of an array based on the array indices rather than
    on the contents of the array at those indices. In this recipe, we'll take a look
    at how to use slice to get a subset of an array.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `10-02-using-slice-to-get-subset`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates several `Rocket` instances and places
    them into an array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Divide the `Rockets`array into three subsets based on the country:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c9afc441-6cb9-46eb-ae84-483c07014fcd.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **slice** method takes two parameters, a start index and an end index. The
    end index is noninclusive. This means that the new set will include the elements
    between the start and end index, including the element at the start index, but
    not the element at the end index.
  prefs: []
  type: TYPE_NORMAL
- en: This might seem a bit confusing, but think of it this way. Consider that the
    start index is 2 and the end index is 3\. The difference between those two numbers
    is 1, and there is a single element in the resulting subset. For indices 0 and
    2, the difference is 2 and there will be two elements in the resulting subset.
  prefs: []
  type: TYPE_NORMAL
- en: Using Array#every and Array#some to test array values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, we need to know information about the array as a whole rather than
    individual elements, such as "Are there any elements that meet some criterion?"
    or "Do all the elements meet some criterion?".
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to use the `some` and `every` methods
    to test an array.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `10-03-using-every-and-some-to-test-values`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates several `Rocket` instances and places
    them into an array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `every` method to determine whether all of the members are instances
    of the `Rocket` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `every` method to determine whether all of the members are `American
    Rockets`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `some` method to determine whether any of the members are `American
    Rockets`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0117dc49-72ac-43f6-8a31-82a104ca568f.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `every` and `some` methods work similarly to the `filter` and `find` methods.
    They take a function, which receives an array element as a parameter, and return
    a Boolean. The truth value of this Boolean is used by the  `every` and `some` methods
    to reduce to a single value. The `some` method returns true as soon as any of
    the callbacks return `true`. The `every` method visits all the elements and only
    returns `true` if allof the callbacks return `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Using Array.map to produce values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Other array operations are intended to produce new values. This can be a property
    from array elements or any other value calculated for each. The `map` method visits
    each element and collects the values into a new array.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to use `map` to create an array of
    new values.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `10-04-map-to-produce-values`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates several `Rocket` instances and places
    them into an array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `map` method, and return a string representation of each element''s
    nationality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9d8a3404-0d06-44a4-b223-d099b109a076.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The map works similarly to several of the other methods we've seen so far. It
    takes a function that receives an array element as a parameter and returns some
    value. Those values are collected into a new array, and that new array is returned
    by the map method.
  prefs: []
  type: TYPE_NORMAL
- en: Using Array.reduce to transform data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `map` method is great for creating data that maps directly to elements from
    an existing array. However, sometimes, the desired result takes on a different
    shape. To do this, we can use the `reduce` method to accumulate values into a
    new form.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to use the `reduce` method to transform
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `10-05-reduce-to-transform-data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main`function with an array of nationality strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `reduce`method to count the different nationalities:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3d7bb201-eae3-45d0-b8f2-ebe1cfb759e0.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like other methods we've seen previously, the `reduce` method visits each element
    in an array. However, it takes a different set of parameters. The first parameter
    is a function that receives two arguments, an accumulator and the current element.
    The result of this function is the new accumulated value.
  prefs: []
  type: TYPE_NORMAL
- en: The second argument is the initial value of the accumulator.
  prefs: []
  type: TYPE_NORMAL
- en: In the recipe, the accumulator is initialized as an empty object. The function
    then uses the current array value as a key and increments a counter for that key.
    In this way, we count the number of times each key appears.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that, unlike with `map`, the resulting data shape is different from
    the initial array.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting array members with destructuring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Indexing arrays directly is relatively simple. The syntax is familiar to all
    but the most novice developers. However, what is also familiar is *off by one
    error*. This means that an array or a collection has been indexed incorrectly
    by a single position. In some cases, this will cause a fault that is immediately
    recognizable. Other times, it will cause more subtle errors.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to extract members of an array with
    destructuring syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `10-06-extract-array-members-with-destructuring`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function with an array of rockets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the destructuring syntax to assign each member to a local variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/70f2e69a-d2d3-4b7c-9aea-e8b7d49850dd.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The above recipe shows how to use destructuring syntax to create individual
    variables for elements in an array. The destructuring syntax mirrors the indices
    of the corresponding array. So, variable names will be associated with the element
    at the corresponding position in the array. The name at the zero^(th) position
    will be assigned a value at the beginning of the array. The name at position 1
    will be assigned the value at the next, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: So we can see above that we name each of the elements in the `rockets` array.
    The value of each of the extracted elements is a match for the corresponding rocket.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the head and tail of array using the rest operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using destructuring to pick out elements is convenient, but we don't always
    want to pull out every element. A commonly useful pattern is to get the zeroth
    element of an array assigned to one variable, and the rest of the elements in
    another. This is commonly called the head and tail of an array.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to use the rest operator to get the
    head and tail of an array.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `10-07-get-head-and-tail-from-array`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function with an array of rockets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the destructuring syntax and the rest operator to get the head and the
    tail of the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5611bcdc-c31b-4edf-965c-345950b936b2.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first element `saturnV` works in the same manner as the preceding recipe.
    The rest operator indicates that the remaining elements should be assigned to
    the `otherRockets` variable. Since it isn't necessarily a single element, this
    will be an array.
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that the rest operator must be the last member of the destructuring
    syntax. If it is followed by a comma, you will receive a parse error.
  prefs: []
  type: TYPE_NORMAL
- en: Combining arrays with the spread operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how to use some new syntax to extract elements from an array. Not
    to be left out, there are also some new facilities for combining arrays. Helpfully,
    as we'll see, the use of the spread operator mirrors that of the rest operator.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to use the spread operator to combine
    arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `10-08-combine-arrays-using-spread`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function with multiple array rockets, divided by nationality,
    and a standalone `Rocket` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the structuring syntax and the spread operator to combine the rockets into
    a single array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/edfb2026-61a4-4c72-be9d-f8160ea7acfa.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The way I think about the rest operator is to think of it *spreading* members
    of the collection out into the current collection. In the preceding recipe, this
    means that the members of `usRockets` and `chineseRockets` are spread out into
    the new array, `rockets`.
  prefs: []
  type: TYPE_NORMAL
- en: This spreading means that they can be referenced in the same syntactic level
    as the standalone `sovietRocket` when creating the new array. This combining of
    elements into a new structure is sometimes referred to as *structuring*, mirroring
    the *destructuring* terminology.
  prefs: []
  type: TYPE_NORMAL
