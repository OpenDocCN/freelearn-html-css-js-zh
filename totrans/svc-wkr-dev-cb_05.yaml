- en: Chapter 5. Reaching Beyond the Offline Cache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting network responses offline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caching content from ZIP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the best content provider (load balancer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirecting a request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting request headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a service worker act like a remote server (virtual server)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a service worker act as a dependency injector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forcing immediate control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing fallback responses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deferring offline requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will reach beyond the offline cache and look into advance
    techniques such as offline network responses; advanced request handling including
    redirecting, setting request headers, deferring offline requests, and implementing
    fallback requests; and using a service worker as a load balancer or dependency
    injector, forcing immediate control, and also caching content from ZIP files.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start off this chapter by looking at how to get network responses offline.
  prefs: []
  type: TYPE_NORMAL
- en: Getting network responses offline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read-through caching is an assertive approach of all-out caching for the type
    of static content that you visit regularly. This is not very suitable for dynamic
    content such as news and sports. A selective caching approach would be better
    suited for such instances. Read-through caching saves us bandwidth for the server
    as well as requests over the network. The way read-through caching works is that
    after the service worker takes control of your page when the first `fetch()` request
    is called, the response will be cached and subsequent requests to the same URL
    will be served from the cache.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, and `style.css` files
    from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/01/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/01/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up a browser and go to `index.html`.![How to do it...](img/B05381_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up the Developer Toolbar (*Cmd* + *Alt* + *I* or *F12*). Now refresh the
    page and look at the message in the console. You will see the `style.css` file
    is served from the network, but the `index.js` file is served from the cache.![How
    to do it...](img/B05381_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the service worker file is installing the service worker, it saves the
    `index.html` file and the `index.js` file in the cache. We are intentionally skipping
    the `style.css` file here, so when you refresh the page, the service worker first
    looks at the cached files, finds `index.html` and `index.js` files there, and
    serves them from the cache. The `style.css` file is not in the cache, however,
    so the service worker fetches it from the network.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Caching content from ZIP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are concerned about the speed of loading your application over the Internet,
    one of the areas you might look into is reducing the number of requests made by
    your app to download resources. One way of reducing HTTP requests is sending your
    resource files, such as, images as a ZIP package to the client.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will look at how we can cache resources from a ZIP file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must create an `index.html` file and copy the code from the following
    location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/index.html](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/index.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a JavaScript file called `service-worker.js` in the same folder as the
    `index.html` and copy the code from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/index.html](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/index.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Copy the third-party code from the following location into a new folder called
    `vendor`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/vendor](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/vendor)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add `archive.zip`, `cacheProvider.js`, `helper.js`, `index.js`, the `images`
    folder, and `style.css` into the same directory as the `index.html` file from
    the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/02/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up a browser and go to the `index.html` file.![How to do it...](img/B05381_05_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a brand from the drop-down menu and click **Load**.![How to do it...](img/B05381_05_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **Uninstall** button.![How to do it...](img/B05381_05_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our `index.html` file, we check whether the service worker is controlling
    the page. If so, we display the images.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When the service worker is active at the time of installation, we show the
    drop-down list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Uninstalling the package does not remove the resources from the cache because
    the offline cache will not be erased by uninstalling the service worker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s move on to the `service-worker.js` file. There we import some third-party
    scripts from the vendor folder, and also some of our own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: At the time of the installation, we are getting the content from the ZIP file,
    `responses-offline`, and storing it in the cache.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Gain control of the clients at the point of activation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Query the cache and, if the request doesn''t match, send the request to the
    network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now let's look at the `cacheProvider.js` file for the functions handling the
    cache.
  prefs: []
  type: TYPE_NORMAL
- en: 'We don''t cache the folders, only the files inside them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The blob writer is a supported format for the response object''s constructor.
    The data will be read the way the writer wants it to be read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We identify the type of the file by looking at its extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We have to clone the `response` object because once it is being used, you cannot
    use it again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the `helper.js` file as well. The `getZipFileReader(data)` function
    wraps the `zip.js` API in a promise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `getContentType(filename)` method returns the content type of a file by
    the extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Selecting the best content provider (load balancer)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to look at how we can use the service worker as
    a load balancer so we can decide which content provider is the best suited for
    us to get content from, depending on the load of the content provider.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*. You also need to make sure Node.js is available to you. You can read how
    to install Node.js at [https://nodejs.org/en/](https://nodejs.org/en/).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download all the files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/03/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/03/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the following command in the command line (make sure you have Node.js installed
    or read how to do so on [https://nodejs.org/en/](https://nodejs.org/en/)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open up a browser and go to `index.html`.![How to do it...](img/B05381_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can select the logo from the drop-down list and it will load the image from
    the best content provider, with less load. You can also manually set the server
    loads and click **Reset**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `service-worker.js` file, we are forcing the service worker to gain
    control of the clients straight away:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We use a regex pattern to check whether the request contains images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The method for the best server returns the server with the lowest load and
    then returns the image from that server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The Express server will be queried to find the server loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `index.js` file, we are setting the handlers for image selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, when the user clicks on the **Reset** button, the manual load values
    will be sent to the Express server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'When changing the image selection, in order to prevent caching, we add a cache
    bust parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We are setting the session values with a random string and store them in `localStorage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The `server.js` file is an Express server running on a specified port. The
    service worker requires the server to run over a SSL connection. To achieve this,
    we are using HTTP node module and we are setting the location of the key/value
    pairs we created in the following recipes of [Chapter 1](ch01.html "Chapter 1. Learning
    Service Worker Basics"), *Learning Service Worker Basics*: *Setting up GitHub
    pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We are also allowing cross-origin resource sharing for our web page to access
    this server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Redirecting a request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Relative URLs, such as `test/`, should redirect to `index.html` if there is
    one in the `test/` directory. Let's test this scenario with the service worker.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must create an `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a CSS file called `style.css`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `index.js`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a JavaScript file called `service-worker.js` in the same folder as the
    `index.html` file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ':'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open up a browser and go to `index.html`.![How to do it...](img/B05381_05_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open up the DevTools (*Cmd* + *Alt* + *I* or *F12*) and make sure the **Preserve
    log** checkbox is clicked. Now click on the **Click** link. The page will be redirected
    to the `index.html` file of the `test/` directory.![How to do it...](img/B05381_05_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `service-worker.js` file, we let all the fetch requests through to the
    network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This way, the relative URL will redirect to the HTTP version of `test/`, if
    the `test/index.html` file exists.
  prefs: []
  type: TYPE_NORMAL
- en: Setting request headers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we wanted to find out the request header details sent to the network, we
    can log the request header details to the console. In this recipe, we are going
    to find out how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must create an `index.html` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `service-worker.js`, in the same folder as
    the `index.html` file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a CSS file called `style.css`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open up a browser and go to the `index.html` file. You will see one pre-fetched
    bookmark.![How to do it...](img/B05381_05_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open up the DevTools (*Cmd* + *Alt* + *I* or *F12*), and refresh the page.
    Check out the log details on the console.![How to do it...](img/B05381_05_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our `service-worker.js` file, the fetch event handler logs the request details,
    as well as the header details of any request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In the `index.html` file, we are loading an image which will be intercepted
    by the controlling service worker's fetch event.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Making a service worker act like a remote server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Service workers not only act like load balancers, as we discussed in the *Selecting
    the best content provider (load balancer)* recipe of this chapter; they can also
    act like virtual servers. This allows us to decouple the UI from the typical server-side
    business logic.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn how we can move the business logic portion
    to a service worker responding to traditional RESTful fetch requests. To demonstrate
    this feature, we are going to implement a to-do app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download all the files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/06/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/06/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up a browser and go to the `index.html` file. You will see the to-do app
    with pre-fetched to-dos.![How to do it...](img/B05381_05_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open up DevTools (*Cmd* + *Alt* + *I* or *F12*) and refresh the page. Check
    out the log details on the console. You will see the endpoint has been accessed.![How
    to do it...](img/B05381_05_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can add to-do items and their priorities, and you can also remove them by
    clicking on the remove icon.![How to do it...](img/B05381_05_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to implement the endpoints to start with. In the `worker.js` file, we
    are creating an instance of the `ServiceWorkerWare` module. We then declare the
    routes for our to-do items.
  prefs: []
  type: TYPE_NORMAL
- en: 'We determine the root using `self.location`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieve all to-do items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieve the 0-based position (`id`) for deleting a specific to-do item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To add a new to-do item to the collection, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `index.html` file, we are loading an image that will be intercepted
    by the controlling service worker''s fetch event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `service-worker.js` file, we are importing a third-party script called
    `ServiceWorkerWare.js` and our custom script, `worker.js`, and declaring a to-do
    list with pre-filled to-do items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `index.js` file is where most of our work is taking place. When the service
    worker gets hold of the control of the page, it shows the list of to-do items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Clicking the **+** button will retrieve the to-do item and post it to the backend:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Any to-do item with no priority provided will be left blank:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, send the to-do item to the backend via a post request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Making a service worker act as a dependency injector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dependency injection is a great pattern for avoiding hardcoded dependencies
    for components. In this recipe, we are going to examine how we can use a service
    worker to development and production environments by passing in two injectors
    to our components without hardcoding the dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download all the files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/07/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/07/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_05_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Production** link. You will see a hash added in front of the
    URL, `#production`.![How to do it...](img/B05381_05_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the buttons. You will get the JavaScript alert messages as a result.![How
    to do it...](img/B05381_05_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up DevTools (*Cmd* + *Alt* + *I* or *F12*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **Development** button and then click on the buttons. Check
    out the log details on the console. You will get the console messages as a result.![How
    to do it...](img/B05381_05_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are adding a section to the `index.html` file with two links and three buttons;
    the links are for production and development, and the buttons are for prompts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `index.js` file, the service worker registration handler is given the
    `development-sw.js` file that we are going to implement soon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: We create a bootstrap file for identifying location URL hash changes and performing
    a dependency injection when we click on development or production links.
  prefs: []
  type: TYPE_NORMAL
- en: 'This way, by checking the hash of the URL, we can switch between development
    and production environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we force an initial check:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Depending on the type of environment, register a service worker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'If there are any registered service workers, get the current inspecting injector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the `injector.js` file now. Let''s make the service worker take
    control of the client straight away:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The rest of the code is responsible for retrieving actual and abstract resources,
    and responding to the request accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The `fake-dialogs.js` file is a mock implementation that console logs the prompts;
    that is, it doesn''t show the alert message, but instead logs to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The `real-dialogs.js` file instead generates an alert message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The `production-sw.js` file imports the default mapping, as well as the injector.
    We also wire the event listeners for the events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The `development-sw.js` file imports the default mapping and the injector as
    well. But the difference is it overrides `utils/dialogs` to serve the mockup instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Forcing immediate control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually, a service worker will take control of a page when a navigation event
    is fired. In this recipe, we are looking at how we can take control of a page
    without waiting for any kind of navigation event.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download all the files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/08/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/08/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up a browser and go to the `index.html` file.![How to do it...](img/B05381_05_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now refresh the page. You will see that there is no registration and no controller
    change event fired.![How to do it...](img/B05381_05_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up the DevTools (*Cmd* + *Alt* + *I* or *F12*) and refresh the page. Check
    out the log details on the console. You will see the image has been served from
    the cache.![How to do it...](img/B05381_05_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `index.js` file, the `fetchServiceWorkerUpdate` method updates an image
    and the current version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The service worker will take control of the site on loading and handles offline
    fallbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The `skipWaiting()` method will force the waiting service worker to become
    active by triggering the `onactivate` event. Along with `Clients.claim()`, this
    will allow the service worker to take effect immediately in the clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Usually, the `onactivate` method is called once a worker has been installed
    and the page is refreshed. However, because of the fact that we call `skipWaiting()`
    at the point of `oninstall`, the `onactivate` method is called immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Implementing fallback responses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generally, you can trust the API endpoints your application is connecting to,
    but there is always a chance that those services could go down. It is good to
    have a plan B for situations such as this. In this recipe, we are going to use
    the service worker to provide us with a fallback response in such a situation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download all the files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/09/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/09/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up a browser and go to the `index.html` file.![How to do it...](img/B05381_05_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Valid Request** button. You will see a list of three brands.![How
    to do it...](img/B05381_05_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **Invalid Request** button. You will see a list of three brands.![How
    to do it...](img/B05381_05_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up the DevTools (*Cmd* + *Alt* + *I* or *F12*) and refresh the page. Check
    out the log details on the console. You will see the fallback response in action.![How
    to do it...](img/B05381_05_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are adding a section to the `index.html` file with two buttons, one for
    valid requests and the other for invalid requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `index.js` file, the `enableRequestLinks` method wires up the event
    handlers for the buttons. Both handlers will fire a `fetchApiRequest` method with
    a link as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a mock API response prepared for this recipe at the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/09/brands.json](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/09/brands.json)'
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s a simple JSON object with few brand names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The `fetchApiRequest` method calls fetch to get a promise that will return
    the result in turn. We will use the response to build the list we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The service worker is where we implement the fallback response if the API is
    not available. But first, we need tell the service worker to take control of the
    page immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'In the fetch handler, we are checking for the response to see whether it is
    successful by checking `res.ok`. Otherwise, we will construct a response on the
    fly as the fallback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Deferring offline requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications such as Gmail can enqueue requests in a buffer while the network
    is not available. When the connection is restored, it will perform the requests
    in order to complete the operation.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are building an app, which can defer to-do items while offline.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download all the files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/10](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/05/10)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up a browser and go to the `index.html` file.![How to do it...](img/B05381_05_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add and delete to-do items, then go offline as instructed. Once you reconnect,
    the to-do items will automatically synchronize.![How to do it...](img/B05381_05_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are adding a section to the `index.html` file with inputs and a button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `service-worker.js` file, we bring in two third-party libraries, `ServiceWorkerWare.js`
    and `localforage.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Determine the root for the routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'We are using Mozilla''s `ServiceWorkerWare` library to build quick routes for
    the virtual server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to mock responses, we enqueue the original request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Logging API analytics* recipe of [Chapter 6](ch06.html "Chapter 6. Working
    with Advanced Libraries"), *Working with Advanced Libraries*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
