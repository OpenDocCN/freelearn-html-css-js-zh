- en: Chapter 6. Google Maps JavaScript Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Drawing shapes on the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating the length/area of polylines and polygons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encoding coordinates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for and showing nearby places
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding places with the autocomplete option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding drag zoom to the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom popups / infoboxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter delves into the additional JavaScript libraries that are part of
    the Google Maps JavaScript API. These libraries are not added to your application
    by default when you reference the Google Maps API; however, these can be added
    manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'These libraries are classified into the following six categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '`drawing`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`geometry`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`places`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`panoramio`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`visualization`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`weather`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last three libraries in the preceding list—`panoramio`, `visualization`,
    and `weather`—have been discussed thoroughly in [Chapter 2](ch02.html "Chapter 2. Adding
    Raster Layers"), *Adding Raster Layers*, with respect to their related topics
    and usages. In this chapter, we will learn in detail about `Drawing` and `Geometry`
    libraries. We will also use two external libraries.
  prefs: []
  type: TYPE_NORMAL
- en: The intention of these libraries, as extensions to the core API, is to ensure
    that the Google Maps JavaScript API is self-sufficient in order to provide all
    of the tasks that it offers to accomplish. That means, without these extra libraries,
    you can develop using the API without any problem.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, these libraries are somehow autonomous. They have very well-defined
    and designed objectives and boundaries, so adding them will provide additional
    functionality, but removing them will not take away any functionality from the
    core API.
  prefs: []
  type: TYPE_NORMAL
- en: This optionality of the extra libraries definitely accounts for faster loads
    of the API. Unless you request these libraries explicitly, they are not loaded.
    This componential structure lets you have the option of including the cost of
    loading these libraries or not.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will first deal with the `drawing` library, which will enable you
    to draw vector overlays on top of your base maps. Then, it will deal with the
    `geometry` library and get the properties of the vector overlays, such as the
    length and areas. Finally, the `places` library will explain in detail how to
    search for places and show the details of these places in the Google Maps JavaScript
    API.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing shapes on the map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have probably explored vector overlays in *Chapter 3, Adding Vector Layers*.
    Without getting into details, you can add markers, lines, and polygons programmatically
    using the Google Maps JavaScript API. But if you wanted to draw these vector overlays—not
    programmatically, but with mouse clicks or touch gestures, like in AutoCAD or
    ArcGIS for Desktop—what would you do?
  prefs: []
  type: TYPE_NORMAL
- en: The `drawing` library handles this job, enables you to draw vector shapes as
    per your preference, and shows them on top of your base maps.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will go over the details of how to draw shapes, deal with
    their extensive set of options, and how to handle their specific events.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first recipe of [Chapter 1](ch01.html "Chapter 1. Google Maps JavaScript
    API Basics"), *Google Maps JavaScript API Basics*, will do our work. We will alter
    the Google Maps API bootstrap URL to have this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps show how you can have the drawing control and draw some
    shapes using that control:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alter the Google Maps API bootstrap URL adding the `libraries` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `drawingManager` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the drawing functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/8825OT_06_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In the previous screenshot, you can see the varieties of shapes you can draw
    by clicking on the buttons in the top-left corner.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding the drawing functionality to your application using the Google Maps
    JavaScript API is easy. First, you have to include the `libraries` parameter to
    your Google Maps JavaScript API URL with the `drawing` value inside to include
    the `drawing` library into your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, you can use the `drawing` library's supported functions and objects in
    addition to the standard Google Maps JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: 'To draw your vector shapes, it is necessary to have a `DrawingManager` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Having a `DrawingManager` object, you have all your drawing functionalities,
    but you have to attach it to the current map instance in order to make use of
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: After this, you will see a drawing control containing the marker, polyline,
    rectangle, circle, and polygon drawing buttons. By using these buttons, you can
    draw any vector overlay you want. In the toolset, you can also see a pan tool
    to go out of the drawing mode to use the pan and zoom controls. If you want to
    draw a vector shape again, press the related button (marker, polyline, and so
    on) and draw on the map.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until this point, having the drawing functionality is so simple that you can
    implement it by adding two lines of code. However, there is an extensive set of
    options you can make use of, which are related to the `DrawingManager` object
    and vector shapes you draw. It's worth going over them, because they enrich your
    drawing experience in your application.
  prefs: []
  type: TYPE_NORMAL
- en: The settings of `DrawingManager` can be modified either in its initialization
    or through its `setOptions` method. All the settings that pertain to the `DrawingManager`
    class are properties of the `DrawingManagerOptions` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s alter our recipe to include the `DrawingManager` options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `drawingControl` property enables or disables the drawing control seen
    in the map UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/8825OT_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting the `drawingControl` property to `false` will hide the drawing control.
    Its default is `true`; therefore, although it is not included in our original
    recipe code, it is shown in the map.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that the drawing functionality comes with attaching
    the `DrawingManager` class to the map.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Therefore, hiding the drawing control is not related to the drawing functionality.
    In fact, you can create your own user controls to use `DrawingManager` instead
    of the standard drawing controls.
  prefs: []
  type: TYPE_NORMAL
- en: The drawing control has its own options embedded in the `drawingControlOptions`
    property. Remember from [Chapter 4](ch04.html "Chapter 4. Working with Controls"),
    *Working with Controls*, that you can position your controls at the predefined
    places in the Google Maps UI whether they be the default controls or the controls
    you actually develop.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `drawingControl` property is no exception. You can position `drawingControl`
    by using the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is reflected in the map UI in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/8825OT_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the `drawingControl` property is placed at the bottom center, as
    we have mentioned in the `position` property of the `drawingControlOptions` property.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Complete listing for google.maps.ControlPosition**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete listing for control positions can be found in the Google Maps
    JavaScript API reference documentation at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/maps/documentation/javascript/reference](https://developers.google.com/maps/documentation/javascript/reference)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the `position` property, you can also select which type of shape
    you would like to draw, in other words, which buttons you would like to include
    in `drawingControl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We have apparently selected three drawing shape types listed in an array in
    the `drawingModes` property:'
  prefs: []
  type: TYPE_NORMAL
- en: Marker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polygon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polyline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are reflected in the `drawingControl` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/8825OT_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, all vector shape buttons are available in `drawingControl`. This
    means that, in addition to the three types listed in our example, the following
    shapes are also available:'
  prefs: []
  type: TYPE_NORMAL
- en: Rectangle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have followed the recipe up to this point, you may have realized that
    at the start of your application you can zoom and pan your map as usual. Then,
    you have to click a vector overlay button in the `drawingControl` property to
    start drawing your shape.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, you can change this programmatically through a setting. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `drawingMode` property takes the vector shape type `google.maps.drawing.OverlayType`,
    as the API implies, as its data type and sets that vector shape type so that it
    can be drawn. In our example, when the user clicks on the map, they immediately
    start drawing the `POLYGON` vector overlays.
  prefs: []
  type: TYPE_NORMAL
- en: 'But what happens if it becomes necessary to change the `drawingMode` programmatically
    in the program flow? Luckily, there is a solution to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Setting the property to `null` makes the `drawingMode` property turn to its
    default value, allowing the end user to use the Google Maps JavaScript UI as usual.
    This means that clicking on the map does not draw any vector shape overlay.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the `setOptions` method of `drawingManager` for the same purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Until now, we have dealt with the `drawingManager` and `drawingControl` property
    options. But what about the shapes and their styles that we will draw? As you
    may have expected, you can set the properties of the vector shapes you draw in
    `google.maps.drawing.DrawingManagerOptions`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now draw our shapes as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/8825OT_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You may have observed that the styles of the polyline and polygon shapes have
    changed completely. The polylines have become red in color, because their `strokeColor`
    property is set as `red`, whereas the `strokeColor` property for polygons is set
    as `blue`, their `fillColor` as `yellow`, and their `opacity` being near transparent—`0.2`—so
    that you can see the base map through them.
  prefs: []
  type: TYPE_NORMAL
- en: 'For each vector overlay type, there is an `options` property for `drawingManager`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`markerOptions`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polylineOptions`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polygonOptions`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`circleOptions`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rectangleOptions`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a bunch of interesting properties for vector overlays, most of them
    being common for all overlay types. We have already touched on the stroke and
    fill properties for customizing the styles according to your taste.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, you can try the `editable` and `draggable` properties, which
    are worth commenting on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code snippet makes the polygons drawn on Google Maps UI editable,
    as shown in the following screenshot (you have to go out of polyline drawing mode
    by clicking the pan button in the drawing control):'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/8825OT_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Observe the white dots that represent the nodes (`LatLng` objects) comprising
    the entire polygon. You can change the location of these dots by clicking and
    dragging the dots; this will allow you to change the shape of the polygon, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/8825OT_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You may have spotted that the white dot located in the middle of the south edge
    has been dragged downwards, and thus, the shape of the polygon has changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to changing the original shape, you can also drag the shape, as
    shown in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/8825OT_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the shape has moved to the east in the second screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/8825OT_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the `draggable` property is set to `true` and your mouse is on the shape,
    you can drag your shape wherever you want on the map.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Complete listing for google.maps.drawing.DrawingManager properties**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete listing for the `DrawingManager` properties and related options
    can be found in the Google Maps JavaScript API reference documentation at the
    following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/maps/documentation/javascript/reference#DrawingManager](https://developers.google.com/maps/documentation/javascript/reference#DrawingManager)'
  prefs: []
  type: TYPE_NORMAL
- en: '`DrawingManager` is not limited to its properties and options; it also has
    some events associated with it. These events are fired when you finish drawing
    a shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You may notice that the type of the event is `polygoncomplete`, and there is
    a callback function taking the polygon, which has been completed, as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is an event for every type of shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '`markercomplete`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`linestringcomplete`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polygoncomplete`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rectanglecomplete`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`circlecomplete`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is one additional event type that covers all of these shape types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The preceding event behaves in the same way as the previous example. Instead
    of the `shapecomplete` pattern there is an `overlaycomplete` argument for the
    event. This event is particularly useful for all the shape events, regardless
    of their type. However, being a generic event for all shapes, you can also get
    the shape type from `event.type`, and you can get the reference for the shape
    drawn from `event.overlay`. Utilizing these, you can have conditional statements
    for different shape types in one event handler.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the length/area of polylines and polygons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As described in the first recipe of this chapter—*Drawing shapes on the map*—you
    can draw your shapes as per your taste. But how about getting some information
    about these shapes, for instance, information about their length and area?
  prefs: []
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API places the opportunity to gather this information
    in the `geometry` library. From this library, you can access the static utility
    functions that give information on the length/area calculations and so on.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show us how to get the length and area information of the arbitrary
    shapes drawn.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having a sneak preview at the *Drawing shapes on the map* recipe will ease your
    work, as much detail on drawing shapes and their background is needed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can view the area and length information of your shapes by carrying out
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `drawing` and `geometry` libraries to the bootstrap URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `drawingManager` object with the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the drawing functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an event listener for the completion of your polygons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an event listener for the completion of your polylines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/8825OT_06_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: As shown in the preceding screenshot, you can view the area and length information
    in the console window.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the `drawing` and `geometry` utilities in the Google Maps JavaScript
    API, we have added two libraries—`drawing` and `geometry`—to the Google Maps JavaScript
    API bootstrap URL at the top of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: It is important to note that you can add multiple libraries with a comma separating
    each list, as in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have added the `drawingManager` object, after the usual mapping details,
    in the `initMap()` function itself. In this `drawingManager` object, we set the
    properties so that we can only draw polylines and polygons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We do not need any marker drawing as there will be no length and area information
    related to markers.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the start of the application, we implied that the users can use standard
    mapping controls (zoom, pan, and so on) instead of drawing shapes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This control on the user input is particularly useful in professional applications,
    because even if the application is the sole drawing application, users may need
    to specify their drawing areas by using the pan and zoom controls first hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have placed the `drawingControl` object at the bottom center of the map
    UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: It is up to you where to place `drawingControl`; we just selected `BOTTOM_CENTER`
    as an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have finally attached the `drawingManager` object to the map instance to
    enable the functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: After all this setting up, users can open their application and draw polylines
    and polygons as per their wish. But, how do we get the length and area info of
    their shapes?
  prefs: []
  type: TYPE_NORMAL
- en: 'We have to add event handlers to be aware that they have finished drawing shapes.
    The calculation of the length and area must be performed for every polygon and
    polyline. Therefore, we have used the `polygoncomplete` and `polylinecomplete`
    events. First, let''s perform the calculations for the polygons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `polygoncomplete` event handler that gets fired when the users finish
    drawing each of their polygons, we first get the path of the polygon they draw:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `getPath()` method returns an `MVCArray` of the object of type `LatLng`
    being latitude and longitude pairs comprising the polygon itself. For instance,
    for an imaginary polygon that we have drawn, calling `polygon.getPath().getArray().toString();`
    gives the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: It is now clear that the imaginary polygon that is drawn comprises four latitude
    and longitude pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Why did we need the path of the polygons? We needed it because the `computeArea()`
    function that we use does not take the polygon, but its path as an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: What does this `spherical` namespace stand for?
  prefs: []
  type: TYPE_NORMAL
- en: As you have observed, maps are 2D surfaces. However, the Earth's surface is
    not. To reflect the Earth's surface on a 2D canvas, projections are used. However,
    this reflection is not as smooth as it first seems. It comes with a cost; distortion
    of the Earth's shapes and properties occurs. To handle these side effects, spherical
    geometry calculations are needed, and `google.maps.geometry.spherical` exists
    exactly for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: When you call the `computeArea()` or `computeLength()` method, the area calculations
    are performed as if the shapes are warped to the Earth's surface, taking the earth
    curvature into account.
  prefs: []
  type: TYPE_NORMAL
- en: 'The unit of the return values of the two methods is meters. We have converted
    them to square kilometers and kilometers respectively in order to have more meaningful
    values while printing them in the console window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The event handlers for the `polygoncomplete` and `polylinecomplete` events are
    identical, except in `polylinecomplete`, where there is no area calculation.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There''s a strong possibility that having the length and area information attached
    to the shapes would be nice. You can extend the `Polygon` and `Polyline` JavaScript
    classes to have them. But bear in mind that extending JavaScript objects may lead
    to unexpected errors; you may clobber a different library''s object extension.
    Therefore, think twice before extending the JavaScript classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Having extended the `Polygon` and `Polyline` classes, you can call the `getArea()`
    and `getLength()` methods directly from their objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Drawing shapes on the map* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encoding coordinates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The polylines and polygons that you draw using the Google Maps JavaScript API
    consist of arrays of `LatLng` objects in latitude and longitude pairs.
  prefs: []
  type: TYPE_NORMAL
- en: The length of these arrays increases substantially, especially when you have
    shapes with too many nodes, in the case of long polylines or polygons that have
    too much detail.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with these arrays (that can be retrieved by the `getPath()` methods
    of polylines and polygons) is a major problem, especially when you have to save
    the shape to a DB. Serializing and deserializing lengthy arrays is frequently
    hulky.
  prefs: []
  type: TYPE_NORMAL
- en: However, you can compress the paths of the shapes with Google's **polyline encoding
    algorithm**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Detailed information on Google''s polyline encoding algorithm**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find detailed information about the polyline encoding algorithm at
    the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/maps/documentation/utilities/polylinealgorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)'
  prefs: []
  type: TYPE_NORMAL
- en: By using the `geometry` library, you can encode and decode the paths of polylines
    and polygons.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to encode and decode the paths of the polylines
    and polygons.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It would be handy to have a quick glance at the first recipe—*Drawing shapes
    on the map*—of this chapter, as it covers every detail on how to draw a shape
    using the Google Maps JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps you can use to view the encoded and decoded versions of
    your paths:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `geometry` and `drawing` libraries to the bootstrap URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Organize your HTML so that you can view the original, encoded, and decoded
    coordinates of your shapes in a `div` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Keep a reference to the `loggingDiv div` element in your `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `polylinecomplete` event handler in your `initMap()` function after
    creating `drawingManager` and attaching it to the map instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/8825OT_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can view the original, encoded, and decoded versions of your paths as shown
    in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `polylinecomplete` event is fired when you finish drawing your polyline.
    You can get the `MVCArray` of the object of type `LatLng` that comprises your
    polyline in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Having the path object at hand, you can encode it easily by using the `encodePath()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The `encodePath()` method takes either the `MVCArray` of the object of type
    `LatLng` objects or an array of `LatLng` objects. So, here in our recipe, this
    will also be possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `encodePath()` method returns a string that is perfectly fit for saving
    to a DB and potentially saves a considerable amount of time that would be spent
    serializing and deserializing operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Without encoding, the `coords` array would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Encoding polylines and polygons is not a one-way operation. You can decode
    the encoded coordinate pairs as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The `decodePath()` method takes encoded coordinates in the form of a string
    and returns an array of `LatLng` objects.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for and showing nearby places
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Maps is not only about beautiful base maps with an immense cartographic
    quality or regularly updated satellite images. In your daily life, not as a programmer
    but as an ordinary user of Google Maps, you will have no doubt used Google Maps
    to search for places; be it The Metropolitan Museum of Arts in New York, or a
    commonplace *farmacia* in Rome.
  prefs: []
  type: TYPE_NORMAL
- en: This information is in Google Maps, but how can you reach and serve this information
    through the Google Maps JavaScript API?
  prefs: []
  type: TYPE_NORMAL
- en: The `places` library is there exactly for this purpose, and it enables you to
    look for places by using certain search parameters.
  prefs: []
  type: TYPE_NORMAL
- en: You can perform nearby searches where place results would be near the location
    that you have provided, most commonly, the user's location. You can search within
    a radius, or you can just specify a search string. You can even request for additional
    details, such as related photos, review ratings, phone numbers, and opening hours
    for particular places.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will focus on nearby searches by using the `places` library of the
    Google Maps JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will make use of the `drawing` library, therefore, it is advised
    to go over the first recipe—*Drawing shapes on the map*—of this chapter and refresh
    your understanding on the subject matter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can draw a circle, search for places within this circle with a keyword,
    and get detailed information on each of the places by following the ensuing steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `drawing` and `places` libraries to the bootstrap URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `circles` and `markers` global variables to push and pop the respective
    overlays outside the `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `popup` global variable to hold the value of the `infoWindow` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the `circles` and `markers` arrays and the `infoWindow` object in
    the `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `circlecomplete` event handler in your `initMap()` function after
    creating the `drawingManager` object and attaching it to the map instance (items
    from number 6 to number 12 will be in this event handler):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `circlecomplete` event handler, set `drawingMode` to `null`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the latest drawn circle to the `circles` array and then reverse the order
    inside the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pop the previous circle and set its map handle to null so that only the last
    drawn circle is shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clear all previously drawn markers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create nearby search settings, setting the location as the circle center and
    the radius as the circle radius. Also, add a `keyword` property to return the
    places containing that keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the handle for the `PlacesService` service object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send the request with a callback function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Outside the `initMap()` function, create a callback function for the `nearbySearch`
    request, using the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function to create a marker per the places result (the steps from
    number 15 to number 17 will be in this function):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the marker inside the `pinpointResult()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a click event handler to the marker so that when it is clicked, the `infoWindow`
    object pops up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Push the marker to the `markers` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/8825OT_06_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: As shown in the preceding screenshot, you can draw a circle, search for places
    within this circle with a keyword, and get detailed information on each of the
    places found.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for this recipe require you to work a bit longer; however, the essence
    is simple. For a moment, forget about the details on the `circles` and `markers`
    arrays and the related logic; just concentrate on the nearby search:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: In the `circlecomplete` event handler (this is fired after we finish drawing
    our circle), we place a `nearbyPlacesRequest` object. This object should be of
    the type `google.maps.places.PlaceSearchRequest`.
  prefs: []
  type: TYPE_NORMAL
- en: The `location` property sets the `LatLng` object that should be the center of
    the search for the places. Usually, in nearby searches, this property is set as
    per the user's location. But for this recipe, we have tied it to the drawn circles'
    centers, as you can draw and search multiple times as per your needs.
  prefs: []
  type: TYPE_NORMAL
- en: The distance from `location` is set by the `radius` property so that the places
    are returned within this distance from the center of the circle. In our recipe,
    we have set the radius of the circle drawn.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, the `keyword` property filters the places so that the ones containing
    the keyword will be returned. Note that all the information not only includes
    the name or type of the place, but also the address and reviews, which will be
    matched against the keyword. So, be prepared for a place that is a cafeteria whose
    reviews include the keyword "pizza" in return of this request.
  prefs: []
  type: TYPE_NORMAL
- en: 'After preparing the request parameters, the next step is to send the request.
    First, we create a `PlacesService` object, taking our current map instance as
    a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'By using the `placesService` object, we can send our request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The `nearbySearch` method takes two parameters, the first parameter being our
    old request parameters embedded in the `nearbyPlacesRequest` object and the second
    parameter being the callback function that returns the results. In our recipe,
    the second parameter is the `resultsCallback` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'This callback function takes two arguments here (in fact, it has a third parameter,
    which is related to search pagination): the array of the places found in the search
    and the service status. In the callback function, we first check if the service
    status is OK or not. Then we iterate through `results`, which is an array of the
    `PlaceResult` class type, to create the markers and fill in the `infoWindow` objects
    for each returned place.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create an associated marker for each place, as seen in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: The `geometry` property of the `result` object embeds a `location` property,
    which is of the `LatLng` class type. This is perfectly fit for the `position`
    property of the `Marker` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can reach the details of the places in our `popup` object attached in the
    `click` event handler for the marker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: You may have observed that we are using the `name`, `vicinity`, and `rating`
    properties of the place as the content for the popup. `name` represents the name
    of the place, `vicinity` returns a portion of the address information, and the
    `rating` value is the review rating of the place, 0.0 being the lowest and 5.0
    being the highest.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The details and options for searching nearby places is not limited to the options
    presented in this recipe. We will just dig a little more here. First comes the
    `nearbyPlacesRequest` object. The properties presented inside this object are:
    `location`, `radius`, and `keyword`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the `PlaceSearchRequest` class, of which our object is a type, has
    much more than what we saw in this recipe. For instance, you can supply a `LatLngBounds`
    object instead of the location and radius:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Please bear in mind that one option is to use `bounds`, and another option is
    to use the `location` and `radius` couple. Using one of them is compulsory for
    the `PlaceSearchRequest` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'To filter the place results, using `keyword` is not the only solution. You
    can try the `name` property to directly match against the names of the places.
    For instance, the following code gives the places that have `Buckingham` in their
    name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: If your drawn circle is in London, it will possibly bring up Buckingham Palace
    as well as a bunch of hotels nearby.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can select the type of place to be returned by using the `types` property.
    This property takes an array of types such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: There is really an immense range of types that Google Maps has been covering.
    You can just insert which place type you want, from car rentals to universities,
    just as we have done.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Complete list of place types**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the complete list of place types at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/places/documentation/supported_types](https://developers.google.com/places/documentation/supported_types)'
  prefs: []
  type: TYPE_NORMAL
- en: Other than `types`, `name`, and `bounds`, there are many more properties in
    the `PlaceSearchRequest` class such as `openNow`, which is a very handy property
    to show only the places that are open at the time of the search.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Complete list of properties for the PlaceSearchRequest class**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the complete list of properties for the `PlaceSearchRequest` class
    at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/maps/documentation/javascript/reference#PlaceSearchRequest](https://developers.google.com/maps/documentation/javascript/reference#PlaceSearchRequest)'
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the pool of options that appear while giving the request for a nearby
    search, there is also another bunch of properties in returning the results; in
    other words, the places represented by the `PlaceResult` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, an `icon` property of the `PlaceResult` class that we can use
    in the following code block inside our `pinpointResult()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'This code block will return the places together with their respective icons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/8825OT_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice the painter's palette icon in the preceding screenshot, incorporated
    with the returned place, which is The Metropolitan Museum of Art in New York.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also access the types to which the place belongs. The `types` property
    of the `PlaceResult` class returns the types in a string array. Therefore, the
    `Result.types` property returns the following parameters for The Metropolitan
    Museum of Art in New York:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also get information on whether a place is open or closed at the time
    of search if you change the click handler of the marker, as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the preceding code, you would have come up with information such as the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/8825OT_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Complete list of properties for the PlaceResult class**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the complete list of properties of the `PlaceResult` class at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/maps/documentation/javascript/reference#PlaceResult](https://developers.google.com/maps/documentation/javascript/reference#PlaceResult)'
  prefs: []
  type: TYPE_NORMAL
- en: Finding places with the autocomplete option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API offers a variety of ways to search for places
    and additional information. You can apply nearby searches and have detailed information
    about places together with their geometry, as you have observed in the recipe
    named *Searching and showing nearby places* in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How about having a text field control with an autocomplete feature for searching
    places? You can hardcode it, but there is no need to do so, as Google already
    has a feature exactly for this.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will go over the autocomplete feature of the `places` library
    for the Google Maps JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will make use of the concepts related to the `places` library introduced
    in the *Searching and showing nearby places* recipe of this chapter. It is advised
    to go over this recipe to have a general understanding of places and their properties.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can add the text field and search for places with the autocomplete feature
    by carrying out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert an input HTML element that will be used as the autocomplete field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the markers and pop-up variables as global outside the `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the global variables in `initMap()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the `div` tag with its ID as `searchDiv` and push it as a custom control
    after creating the map with its `initMap()` options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the handle for the input element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Supply the properties for the autocomplete search request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the `autocomplete` object by supplying the input HTML element to be used,
    namely `searchField`, and the `searchOptions`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `place_changed` event handler for the `autocomplete` object (steps
    9 to 11 will be in this event handler):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the event handler, clear the previous markers first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the `PlaceResult` object in response to the autocompleted search:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the place has a geometry, call a function to create the associated marker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for creating a marker and adding a click event handler for
    the marker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/8825OT_06_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You can make use of the autocomplete search features as shown in the preceding
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we first created an input element with some placeholder text
    (beware that this is not supported in older browsers) that will serve as our text
    field for searching places:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we added the `div` container tag as a custom control for the Google Maps
    JavaScript API to have the text field inside the Google Maps UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'We set the properties for the autocomplete search in an `AutocompleteOptions`
    object named `searchOptions`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, `bounds` serves to define the boundaries for
    the places to be found. Here, we are setting it to a large predefined boundary;
    you can set it to another `LatLngBounds` object of your taste.
  prefs: []
  type: TYPE_NORMAL
- en: The `types` array is empty for this recipe; actually this array is for restricting
    the types of places to be found, whether it be a business, city, or region. In
    our example, it is empty, so our searches will return every type of `PlaceResult`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'We created our autocomplete object with two ingredients: `searchField` being
    the input element and `searchOptions` having the `bounds` and `types` properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create our `place_changed` event handler for our `Autocomplete` object,
    which gets fired when the user selects the `PlaceResult` provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'In the event handler, we detach the marker previously mapped on the map; then,
    we call the `getPlace()` method to get the `Place` object of type `PlaceResult`
    in this context. If the place exists and if it has geometry (meaning that, a proper
    `PlaceResult` instance is found), we call the `pinpoint()` function to create
    a marker from `PlaceResult` and attach a click event handler for the marker to
    popup the associated `InfoWindow` object:'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our recipe, we set the `bounds` property in the `searchOptions` object to
    a predefined boundary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: This line sets the autocomplete operation to find the searched places primarily
    within, but not limited to, the specific `LatLngBounds` object. Therefore, do
    not get surprised if you happen to give a small boundary and find results outside
    the boundary.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re setting the boundary to a `LatLngBounds` object, such as boundary of
    the map, and you can change it afterwards:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'But what happens if you need to set the bounds to the current viewport, which
    gets updated as you pan and zoom in/out the map? There is a way, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: By using this `bindTo()` function, the `bounds` property is bound to the current
    viewport boundary and gets updated when it changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the `bounds` property, there is a `types` property that we have
    set as an empty array, but it does not need to be empty to filter out the predictions
    done by our `autocompleteSearch` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'This renders the `autocompleteSearch` object, searching only for administrative
    regions instead of all places. So when you type `colos`, the Colosseum in Rome
    does not come up, as only administrative regions are permitted to be displayed
    in the `autocompleteSearch` object; you can observe this in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/8825OT_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Complete list of entries for the types property in the google.maps.places.AutocompleteOptions
    class**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the complete list of entries for the `types` property in the `AutocompleteOptions`
    class at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/maps/documentation/javascript/reference#AutocompleteOptions](https://developers.google.com/maps/documentation/javascript/reference#AutocompleteOptions)'
  prefs: []
  type: TYPE_NORMAL
- en: Adding drag zoom to the map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Maps has a zoom control and the JavaScript API makes use of this control
    to offer a variety of options for programmers. It is a very useful and easy-to-use
    control. But there are other ways for zooming; for instance, by drawing an area
    of interest by dragging a box, so that the map zooms to that area.
  prefs: []
  type: TYPE_NORMAL
- en: 'This functionality does not exist in the standard Google Maps JavaScript API
    and any of its libraries; you have to code it. Or, you can make use of the utility
    libraries, developed by the good guys, at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://code.google.com/p/google-maps-utility-library-v3/wiki/Libraries](https://code.google.com/p/google-maps-utility-library-v3/wiki/Libraries)'
  prefs: []
  type: TYPE_NORMAL
- en: One of their libraries, `KeyDragZoom`, is exactly for this zoom functionality,
    and we will use this library in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have to download the `keydragzoom.js` JavaScript source file from the following
    link (the latest release is 2.0.9 as of the time of writing this book) and place
    it in the same directory as our recipe source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://google-maps-utility-library-v3.googlecode.com/svn/tags/keydragzoom/](http://google-maps-utility-library-v3.googlecode.com/svn/tags/keydragzoom/)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to perform zoom by dragging a box and zooming into the area
    inside the box:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use a reference for the `keydragzoom`.`js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the functionality after setting all the map-related options in the `initMap()`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/8825OT_06_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You can make use of zooming by dragging a box as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can perform drag zooms either by pressing the control button and drawing
    a box, or simpler than that, holding the *Shift* key and drawing the box to zoom
    into the area inside the box.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we first added the JavaScript source file of the drag zoom library
    in our recipe. After setting the map options and using the map instance we can
    enable the drag zoom functionality by using the `enableKeyDragZoom()` method of
    the map instance.
  prefs: []
  type: TYPE_NORMAL
- en: This extension method is not a part of the Google Maps JavaScript API and comes
    with the `keydragzoom` library. There are a few associated options that are embedded
    under the `KeyDragZoomOptions` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind that, in its simplest form, you can use the key drag zoom functionality
    by enabling it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: The only difference would be that you would have to use the *Shift* key as your
    only way because there would be no drag zoom control button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The properties embedded in the `KeyDragZoomOptions` class are all about the
    control button that is placed below the standard zoom control:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/8825OT_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `visualEnabled` property sets the control to be seen or not, so if this
    property is `false`, there is no need for other properties as well. The `visualPosition`
    property sets the control position; we have placed it to the left. A detailed
    description on control positions can be found in the *Changing the position of
    controls* recipe of [Chapter 4](ch04.html "Chapter 4. Working with Controls"),
    *Working with Controls*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Complete list of properties in the KeyDragZoomOptions class**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the complete list of properties in the `KeyDragZoomOptions` class
    at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://google-maps-utility-library-v3.googlecode.com/svn/tags/keydragzoom/2.0.9/docs/reference.html](http://google-maps-utility-library-v3.googlecode.com/svn/tags/keydragzoom/2.0.9/docs/reference.html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can review the Google Maps JavaScript API controls and their use in [Chapter
    4](ch04.html "Chapter 4. Working with Controls"), *Working with Controls*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom popups/infoboxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already created popups or infoboxes in [Chapter 3](ch03.html "Chapter 3. Adding
    Vector Layers"), *Adding Vector Layers*. As it is stated there, almost every mapping
    application has the ability to display information that is related to the features
    shown on it. This information can be related to a marker or a map. Instead of
    showing all the information on the map, popups or info boxes are used only when
    needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Google Maps JavaScript API has a `google.maps.InfoWindow` class to create
    a default infobox for developers. In some cases, you need custom infoboxes to
    show information. There are two ways to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: The first way is to create a custom class that inherits from the `google.maps.OverlayView`
    class and fill the methods to show/hide infoboxes with custom CSS styles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The other, easier way is to use a library created for you. There is a project
    on Google Code named `google-maps-utility-library-v3` that holds the number of
    libraries extending the Google Maps JavaScript API. Here''s the link:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://code.google.com/p/google-maps-utility-library-v3/wiki/Libraries](https://code.google.com/p/google-maps-utility-library-v3/wiki/Libraries)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This project has a library named `InfoBox` that makes it possible to create
    custom infoboxes or map labels.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this recipe, we will use the previously mentioned library to create custom
    infoboxes that can be bound to a marker and a map. The same infobox shows different
    information according to its binding. We will also add a simple map label at a
    fixed place, if extra information needs to be added to the map.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first recipe of [Chapter 1](ch01.html "Chapter 1. Google Maps JavaScript
    API Basics"), *Google Maps JavaScript API Basics*, will do our work. We will add
    to it in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can get custom infoboxes by completing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, go to the following address to get the latest `InfoBox` source code
    and save it into a file named `infobox.js` under the `lib` directory. We used
    the `/1.1.9/src/infobox_packed.js` file under the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://google-maps-utility-library-v3.googlecode.com/svn/tags/infobox/](http://google-maps-utility-library-v3.googlecode.com/svn/tags/infobox/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, we get the codes by creating a simple map recipe, and add the following
    code to add our library to the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is to create the contents of the infobox with the help of a `div`
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we create an object that defines the options of the infobox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can initialize our custom infobox in the following manner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, we create a JSON object that defines the options of a map label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we initialize the map label and add it to the map in the following manner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a simple marker that will be bound to the infobox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the map is ready, we will open the infobox attached to the marker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We should create event listeners for the marker and map for their click events
    to show the infobox. An infobox will appear at the bottom of the marker when the
    marker is clicked or when the map is clicked on at some point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also listen to events of infoboxes. We will add a listener to the click
    event of the close button of the infobox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your HTML file is stored in your favorite browser;
    you will see a popup with an infobox below. If you click on the map, you will
    see the coordinates of the mouse click inside the infobox, or if you click on
    the marker, you will see the infobox with the contents related to the marker.
    There is also a fixed map label at the top right of the map with some content;
    it says **Custom Map Label**.![How to do it...](img/8825OT_06_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can get your custom infobox as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using libraries in your web applications is common. The use of libraries saves
    development and debugging time for developers. Compared to your limited cases,
    libraries are tested in different environments for different cases.
  prefs: []
  type: TYPE_NORMAL
- en: As stated earlier, you can also write your own custom class to show custom infoboxes
    or map labels, but this is not a suggested way to discover America from the beginning.
    We used the library named `InfoBox`, which is written for this purpose. The documentation
    of this library is similar to the Google Maps JavaScript API documentation (found
    at [http://google-maps-utility-library-v3.googlecode.com/svn/tags/infobox/1.1.9/docs/reference.html](http://google-maps-utility-library-v3.googlecode.com/svn/tags/infobox/1.1.9/docs/reference.html)).
    The latest version of the library is 1.1.9 at the time this book was being written.
    Please update the library if there is a new version when you are using it.
  prefs: []
  type: TYPE_NORMAL
- en: The `InfoBox` library is built on the Google Maps JavaScript API base class
    named `google.maps.OverlayView`, which is used for adding extra layers or views
    to the map.
  prefs: []
  type: TYPE_NORMAL
- en: As expected, there is a need for content, which is defined in the `div` elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'The `InfoBox` library can be initialized to show an infobox with its constructor,
    with a parameter created from the `InfoBoxOptions` class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'The `InfoBox` library can be initialized to create a map label with its constructor
    with a parameter created from the `InfoBoxOptions` class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'The parameters for the `InfoBoxOption` class are explained in the following
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**content**: This can be a string or an HTML element. In our example, we used
    HTML `div` elements to create a beautiful decorated infobox. You can use the `CSS`
    style elements to create your custom infobox.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pixelOffset**: This is the offset in pixels from the top-left corner of the
    infobox. In this recipe, we want to center the infobox, so we used half the width
    of the infobox.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**boxStyle**: This defines the CSS styles used for the infobox. The `background`
    style property used in this recipe shows the upper-headed arrow image. This image
    is a customized image to be placed in the middle of the infobox. The names of
    the `width` and `opacity` style properties suggest how they are used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**closeBoxMargin**: This is used to define where the close box will be placed
    in the CSS margin style value. In this recipe, we used the upper-headed arrow
    at the top of the infobox, so we must move the close box below the arrow image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**closeBoxURL**: This is the image URL of the close box. Google''s standard
    close box image is used here. If you do not want to add a close box, set this
    property to empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pane**: This is the pane where the infobox will appear. If you are using
    it as an infobox, then use `floatPane`. If you are using it as a map label, use
    `mapPane`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**position**: This is the geographic location of the infobox or map label defined
    in the objects created from `google.maps.LatLng class`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**enableEventPropagation**: This is used to propagate the events. If you are
    using the `InfoBox` class for map labels, you don''t need to get the events of
    the label. The map''s events are more important in this case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It doesn''t matter whether it is an infobox or map label, you can show `InfoBox`
    objects with the `open()` method. If there isn''t an anchor point, such as a marker,
    it only gets one parameter as a map; otherwise you should add the second parameter
    as an anchor object. Two usage examples are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: If you need to change the position of the infobox like in the event handlers,
    you should use the `setPosition()` method of the class. This method gets objects
    created from the `google.maps.LatLng` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'The events used in this recipe were the topic of [Chapter 5](ch05.html "Chapter 5. Understanding
    Google Maps JavaScript API Events"), *Understanding Google Maps JavaScript API
    Events*. We did not go into detail, but for some purposes, there are also events
    of the `InfoBox` class to handle. The following code block will listen to the
    clicking of the close button that will result in the closing of the infobox. The
    event handler of the listener will log only a message to the console for demonstration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, in the preceding code, the Google Maps JavaScript API has a
    lot of potential that can be extracted with the help of extra libraries. The Google
    Maps JavaScript API gives you the base, and you can build whatever you want on
    it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe in [Chapter 1,](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics") *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting the coordinates of a mouse click* recipe in [Chapter 5,](ch05.html
    "Chapter 5. Understanding Google Maps JavaScript API Events") *Understanding Google
    Maps JavaScript API Events*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
