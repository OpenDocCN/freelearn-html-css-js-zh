["```js\nimport Element from \"./element.js\";\n```", "```js\nconst GlobalApp = {\n```", "```js\n  data() {\n```", "```js\n    return {\n```", "```js\n      elements : []\n```", "```js\n    }\n```", "```js\n  },\n```", "```js\n  components : {\n```", "```js\n    Element:Element\n```", "```js\n  },\n```", "```js\n  template : `\n```", "```js\n    <button @click=\"add()\">Add Element</button>\n```", "```js\n    <ul>\n```", "```js\n      <Element v-for=\"(element, index) in elements\" \n```", "```js\n       :key=\"index\" \n```", "```js\n        :text=\"element\" :index=\"index\"\n```", "```js\n        @remove=\"remove($event)\" @modify=\"modify($event)\"\n```", "```js\n      />\n```", "```js\n    </ul>\n```", "```js\n  `,\n```", "```js\n  methods : {\n```", "```js\n    add() {\n```", "```js\n      var element = \"Element \" + (this.elements.length + 1);\n```", "```js\n      this.elements.push(element);\n```", "```js\n    },\n```", "```js\n    remove(params) {\n```", "```js\n      var index = params.index;\n```", "```js\n      this.elements.splice(index, 1);\n```", "```js\n    },\n```", "```js\n    modify(params) {\n```", "```js\n      var index = params.index;\n```", "```js\n      var value = params.value;\n```", "```js\n      this.elements[index] = value;\n```", "```js\n    }\n```", "```js\n  }\n```", "```js\n}\n```", "```js\nexport default GlobalApp;\n```", "```js\nconst Element = {\n```", "```js\n  data() {\n```", "```js\n    return {\n```", "```js\n      input : false\n```", "```js\n    }\n```", "```js\n  },\n```", "```js\n  template : `\n```", "```js\n    <li> \n```", "```js\n      <span v-if=\"!input\"> {{text}} </span>\n```", "```js\n      <input v-else type=\"text\" :value=\"text\" \n```", "```js\n       @blur=\"modify($event)\" ref=\"refInput\" />\n```", "```js\n      <button @click=\"remove()\"> Remove </button> \n```", "```js\n      <button @click=\"input=true\"> Modify </button>\n```", "```js\n    </li>\n```", "```js\n  `,\n```", "```js\n  props : [\"text\", \"index\"],\n```", "```js\n  methods : {\n```", "```js\n    remove() {\n```", "```js\n      // process the click on the Remove button\n```", "```js\n      this.$emit(\"remove\", { index : this.index });\n```", "```js\n    },\n```", "```js\n    modify(event) {\n```", "```js\n      var value = event.target.value;\n```", "```js\n      this.input = false;\n```", "```js\n      this.$emit(\"modify\", { index : this.index, value : \n```", "```js\n      value });\n```", "```js\n    }\n```", "```js\n  },\n```", "```js\n  emits : [\"remove\", \"modify\"],\n```", "```js\n  updated() {\n```", "```js\n    // check that refInput exists, and if so, give focus to \n```", "```js\n    // the input field\n```", "```js\n    if (this.$refs.refInput) this.$refs.refInput.focus();  \n```", "```js\n  }\n```", "```js\n}\n```", "```js\nexport default Element;\n```", "```js\n<html>\n```", "```js\n  <head>\n```", "```js\n    <meta charset=\"utf-8\" />\n```", "```js\n    <script src=\"img/vue@next\"></script>\n```", "```js\n    <style type=\"text/css\">\n```", "```js\n      li {\n```", "```js\n        margin-top:10px;\n```", "```js\n      }\n```", "```js\n      ul button {\n```", "```js\n        margin-left:10px;\n```", "```js\n      }\n```", "```js\n    </style>\n```", "```js\n  </head>\n```", "```js\n  <body>\n```", "```js\n    <div id=\"app\"></div>\n```", "```js\n  </body>\n```", "```js\n  <script type=\"module\">\n```", "```js\n    import GlobalApp from \"./global-app.js\";\n```", "```js\n    var app = Vue.createApp({\n```", "```js\n      components : {\n```", "```js\n        GlobalApp:GlobalApp\n```", "```js\n      },\n```", "```js\n      template : \"<GlobalApp />\"\n```", "```js\n    });\n```", "```js\n    var vm = app.mount(\"div#app\");\n```", "```js\n  </script>\n```", "```js\n</html>\n```", "```js\nvar createError = require('http-errors');\n```", "```js\nvar express = require('express');\n```", "```js\nvar path = require('path');\n```", "```js\nvar cookieParser = require('cookie-parser');\n```", "```js\nvar logger = require('morgan');\n```", "```js\nvar indexRouter = require('./routes/index');\n```", "```js\nvar usersRouter = require('./routes/users');\n```", "```js\nvar mongoose = require(\"mongoose\");\n```", "```js\nmongoose.connect(\"mongodb://localhost/mydb_test\"); // we \n```", "```js\n// connect \n```", "```js\n// to \n```", "```js\n                                                   // mydb_test\n```", "```js\nvar listSchema = mongoose.Schema({\n```", "```js\n text : String     // text associated with the list item\n```", "```js\n});\n```", "```js\n// association of the List model with the elements collection\n```", "```js\nvar List = mongoose.model(\"elements\", listSchema);\n```", "```js\nvar app = express();\n```", "```js\n// view engine setup\n```", "```js\napp.set('views', path.join(__dirname, 'views'));\n```", "```js\napp.set('view engine', 'jade');\n```", "```js\napp.use(logger('dev'));\n```", "```js\napp.use(express.json());\n```", "```js\napp.use(express.urlencoded({ extended: false }));\n```", "```js\napp.use(cookieParser());\n```", "```js\napp.use(express.static(path.join(__dirname, 'public')));\n```", "```js\napp.use('/', indexRouter);\n```", "```js\napp.use('/users', usersRouter);\n```", "```js\n// catch 404 and forward to error handler\n```", "```js\napp.use(function(req, res, next) {\n```", "```js\n  next(createError(404));\n```", "```js\n});\n```", "```js\n// error handler\n```", "```js\napp.use(function(err, req, res, next) {\n```", "```js\n  // set locals, only providing error in development\n```", "```js\n  res.locals.message = err.message;\n```", "```js\n  res.locals.error = req.app.get('env') === 'development' ? \n```", "```js\n  err : {};\n```", "```js\n  // render the error page\n```", "```js\n  res.status(err.status || 500);\n```", "```js\n  res.render('error');\n```", "```js\n});\n```", "```js\nmodule.exports = app;\n```", "```js\n<html>\n```", "```js\n  <head>\n```", "```js\n    <meta charset=\"utf-8\" />\n```", "```js\n    <script src=\"img/vue@next\"></script>\n```", "```js\n    <script src=\"https://unpkg.com/axios/dist/\n```", "```js\n    axios.min.js\"></script>\n```", "```js\n    <style type=\"text/css\">\n```", "```js\n      li {\n```", "```js\n        margin-top:10px;\n```", "```js\n      }\n```", "```js\n      ul button {\n```", "```js\n        margin-left:10px;\n```", "```js\n      }\n```", "```js\n    </style>\n```", "```js\n  </head>\n```", "```js\n  <body>\n```", "```js\n    <div id=\"app\"></div>\n```", "```js\n  </body>\n```", "```js\n  <script type=\"module\">\n```", "```js\n   console.log(\"axios.VERSION = \" + axios.VERSION); \n```", "```js\n    // display Axios version number\n```", "```js\n    import GlobalApp from \"./global-app.js\";\n```", "```js\n    var app = Vue.createApp({\n```", "```js\n      components : {\n```", "```js\n        GlobalApp:GlobalApp\n```", "```js\n      },\n```", "```js\n      template : \"<GlobalApp />\"\n```", "```js\n    });\n```", "```js\n    var vm = app.mount(\"div#app\");\n```", "```js\n  </script>\n```", "```js\n</html>\n```", "```js\nimport Element from \"./element.js\";\n```", "```js\nconst GlobalApp = {\n```", "```js\n  data() {\n```", "```js\n    return {\n```", "```js\n      elements : []  // array of object { text, _id }\n```", "```js\n                     // (_id = document id in MongoDB)\n```", "```js\n    }\n```", "```js\n  },\n```", "```js\n  components : {\n```", "```js\n    Element:Element\n```", "```js\n  },\n```", "```js\n  template : `\n```", "```js\n    <button @click=\"add()\">Add Element</button>\n```", "```js\n    <ul>\n```", "```js\n     <Element v-for=\"(element, index) in elements\" \n```", "```js\n       :key=\"index\" :element=\"element\"\n```", "```js\n        @remove=\"remove($event)\" @modify=\"modify($event)\"\n```", "```js\n      />\n```", "```js\n    </ul>\n```", "```js\n  `,\n```", "```js\n  methods : {\n```", "```js\n    add() {\n```", "```js\n      var text = \"Element \" + (this.elements.length + 1);\n```", "```js\nthis.elements.push({text:text, \n```", "```js\n      _id:this.elements.length});  \n```", "```js\n// to modify to retrieve the real \n```", "```js\n                         // _id provided by MongoDB\n```", "```js\n    },\n```", "```js\n    remove(params) {\n```", "```js\n      var id = params.id;\n```", "```js\n    // remove the element with this id from the elements \n```", "```js\n      // array\n```", "```js\n      this.elements = this.elements.filter(\n```", "```js\n      function(element) {\n```", "```js\n        if (element._id == id) return false;\n```", "```js\n        else return true;\n```", "```js\n      });\n```", "```js\n    },\n```", "```js\n    modify(params) {\n```", "```js\n      var id = params.id;\n```", "```js\n      var value = params.value;\n```", "```js\n    // modify the text of the element with this id in the \n```", "```js\n      // elements array\n```", "```js\n      this.elements = this.elements.map(function(element) {\n```", "```js\n        if (element._id == id) {\n```", "```js\n          element.text = value;\n```", "```js\n          return element;\n```", "```js\n        }\n```", "```js\n        else return element;\n```", "```js\n      });\n```", "```js\n    }\n```", "```js\n  }\n```", "```js\n}\n```", "```js\nexport default GlobalApp;\n```", "```js\nconst Element = {\n```", "```js\n  data() {\n```", "```js\n    return {\n```", "```js\n      input : false\n```", "```js\n    }\n```", "```js\n  },\n```", "```js\n  template : `\n```", "```js\n    <li> \n```", "```js\n      <span v-if=\"!input\"> {{element.text}} </span>\n```", "```js\n<input v-else type=\"text\" :value=\"element.text\" \n```", "```js\n@blur=\"modify($event)\" \n```", "```js\n                    ref=\"refInput\" />\n```", "```js\n      <button @click=\"remove()\"> Remove </button> \n```", "```js\n      <button @click=\"input=true\"> Modify </button>\n```", "```js\n    </li>\n```", "```js\n  `,\n```", "```js\n  props : [\"element\"],\n```", "```js\n  methods : {\n```", "```js\n    remove() {\n```", "```js\n      // process the click on the Remove button\n```", "```js\n      this.$emit(\"remove\", { id : this.element._id });\n```", "```js\n    },\n```", "```js\n    modify(event) {\n```", "```js\n      var value = event.target.value;\n```", "```js\n      this.input = false;\n```", "```js\n      this.$emit(\"modify\", { id : this.element._id, value : \n```", "```js\n      value });\n```", "```js\n    }\n```", "```js\n  },\n```", "```js\n  emits : [\"remove\", \"modify\"],\n```", "```js\n  updated() {\n```", "```js\n    // check that refInput exists, and if so, give focus to \n```", "```js\n    // the input field\n```", "```js\n    if (this.$refs.refInput) this.$refs.refInput.focus();  \n```", "```js\n  }\n```", "```js\n}\n```", "```js\nexport default Element;\n```", "```js\nimport Element from \"./element.js\";\n```", "```js\nconst GlobalApp = {\n```", "```js\n  data() {\n```", "```js\n    return {\n```", "```js\n      elements : []  // array of object { text, _id }\n```", "```js\n                     // (_id = document id in MongoDB)\n```", "```js\n    }\n```", "```js\n  },\n```", "```js\n  components : {\n```", "```js\n    Element:Element\n```", "```js\n  },\n```", "```js\n  template : `\n```", "```js\n    <button @click=\"add()\">Add Element</button>\n```", "```js\n    <ul>\n```", "```js\n      <Element v-for=\"(element, index) in elements\" \n```", "```js\n       :key=\"index\" :element=\"element\"\n```", "```js\n        @remove=\"remove($event)\" @modify=\"modify($event)\"\n```", "```js\n      />\n```", "```js\n    </ul>\n```", "```js\n  `,\n```", "```js\n  methods : {\n```", "```js\n    add() {\n```", "```js\n      var text = \"Element \" + (this.elements.length + 1);\n```", "```js\n      axios.post(\"/list\", {text:text})     // pass object \n```", "```js\n// {text:text} to \n```", "```js\n                                           // server\n```", "```js\n      .then((response) => {\n```", "```js\nthis.elements.push({text:text, \n```", "```js\n        _id:response.data.id});\n```", "```js\n      });\n```", "```js\n    },\n```", "```js\n    remove(params) {\n```", "```js\n      var id = params.id;\n```", "```js\n      // remove the element with this id from the elements \n```", "```js\n      // array\n```", "```js\n      this.elements = this.elements.filter(\n```", "```js\n      function(element) {\n```", "```js\n        if (element._id == id) return false;\n```", "```js\n        else return true;\n```", "```js\n      });\n```", "```js\n    },\n```", "```js\n    modify(params) {\n```", "```js\n      var id = params.id;\n```", "```js\n      var value = params.value;\n```", "```js\n      // modify the text of the element with this id in the \n```", "```js\n      // elements array\n```", "```js\n      this.elements = this.elements.map(function(element) {\n```", "```js\n        if (element._id == id) {\n```", "```js\n          element.text = value;\n```", "```js\n          return element;\n```", "```js\n        }\n```", "```js\n        else return element;\n```", "```js\n      });\n```", "```js\n    }\n```", "```js\n  }\n```", "```js\n}\n```", "```js\nexport default GlobalApp;\n```", "```js\nvar createError = require('http-errors');\n```", "```js\nvar express = require('express');\n```", "```js\nvar path = require('path');\n```", "```js\nvar cookieParser = require('cookie-parser');\n```", "```js\nvar logger = require('morgan');\n```", "```js\nvar indexRouter = require('./routes/index');\n```", "```js\nvar usersRouter = require('./routes/users');\n```", "```js\nvar mongoose = require(\"mongoose\");\n```", "```js\nmongoose.connect(\"mongodb://localhost/mydb_test\");\n```", "```js\nvar listSchema = mongoose.Schema({\n```", "```js\n text : String\n```", "```js\n});\n```", "```js\nvar List = mongoose.model(\"elements\", listSchema);\n```", "```js\nvar app = express();\n```", "```js\n// view engine setup\n```", "```js\napp.set('views', path.join(__dirname, 'views'));\n```", "```js\napp.set('view engine', 'jade');\n```", "```js\napp.use(logger('dev'));\n```", "```js\napp.use(express.json());\n```", "```js\napp.use(express.urlencoded({ extended: false }));\n```", "```js\napp.use(cookieParser());\n```", "```js\napp.use(express.static(path.join(__dirname, 'public')));\n```", "```js\napp.use('/', indexRouter);\n```", "```js\napp.use('/users', usersRouter);\n```", "```js\n// creating a new element in the list\n```", "```js\napp.post(\"/list\", function(req, res) {\n```", "```js\n  var text = req.body.text;\n```", "```js\n  List.create({text:text}, function(err, doc) {\n```", "```js\nres.json({id:doc._id});  // send the MongoDB identifier \n```", "```js\n                             // in the response\n```", "```js\n  });\n```", "```js\n});\n```", "```js\n// catch 404 and forward to error handler\n```", "```js\napp.use(function(req, res, next) {\n```", "```js\n  next(createError(404));\n```", "```js\n});\n```", "```js\n// error handler\n```", "```js\napp.use(function(err, req, res, next) {\n```", "```js\n  // set locals, only providing error in development\n```", "```js\n  res.locals.message = err.message;\n```", "```js\n  res.locals.error = req.app.get('env') === 'development' ? \n```", "```js\n  err : {};\n```", "```js\n  // render the error page\n```", "```js\n  res.status(err.status || 500);\n```", "```js\n  res.render('error');\n```", "```js\n});\n```", "```js\nmodule.exports = app;\n```", "```js\nimport Element from \"./element.js\";\n```", "```js\nconst GlobalApp = {\n```", "```js\n  data() {\n```", "```js\n    return {\n```", "```js\n      elements : []  // array of object { text, _id }\n```", "```js\n                     // (_id = document id in MongoDB)\n```", "```js\n    }\n```", "```js\n  },\n```", "```js\n  components : {\n```", "```js\n    Element:Element\n```", "```js\n  },\n```", "```js\n  template : `\n```", "```js\n    <button @click=\"add()\">Add Element</button>\n```", "```js\n    <ul>\n```", "```js\n      <Element v-for=\"(element, index) in elements\" \n```", "```js\n       :key=\"index\" :element=\"element\"\n```", "```js\n        @remove=\"remove($event)\" @modify=\"modify($event)\"\n```", "```js\n      />\n```", "```js\n    </ul>\n```", "```js\n  `,\n```", "```js\n  methods : {\n```", "```js\n    add() {\n```", "```js\n      var text = \"Element \" + (this.elements.length + 1);\n```", "```js\n      axios.post(\"/list\", {text:text})\n```", "```js\n      .then((response) => {\n```", "```js\n        console.log(this.elements);\n```", "```js\n        this.elements.push({text:text, \n```", "```js\n        _id:response.data.id});\n```", "```js\n      });\n```", "```js\n    },\n```", "```js\n    remove(params) {\n```", "```js\n      var id = params.id;\n```", "```js\n      // remove the element with this id from the elements \n```", "```js\n      // array\n```", "```js\n      this.elements = this.elements.filter(\n```", "```js\n      function(element) {\n```", "```js\n        if (element._id == id) return false;\n```", "```js\n        else return true;\n```", "```js\n      });\n```", "```js\n    },\n```", "```js\n    modify(params) {\n```", "```js\n      var id = params.id;\n```", "```js\n      var value = params.value;\n```", "```js\n      // modify the text of the element with this id in the \n```", "```js\n      // elements array\n```", "```js\n      this.elements = this.elements.map(function(element) {\n```", "```js\n        if (element._id == id) {\n```", "```js\n          element.text = value;\n```", "```js\n          return element;\n```", "```js\n        }\n```", "```js\n        else return element;\n```", "```js\n      });\n```", "```js\n    }\n```", "```js\n  },\n```", "```js\n  created() {\n```", "```js\n    axios.get(\"/list\")\n```", "```js\n    .then((response) => {\n```", "```js\n      this.elements = response.data.elements.map(\n```", "```js\n       function(element) {\n```", "```js\n         return {_id : element._id, text : element.text }\n```", "```js\n      });\n```", "```js\n    });\n```", "```js\n  }\n```", "```js\n}\n```", "```js\nexport default GlobalApp;\n```", "```js\nvar createError = require('http-errors');\n```", "```js\nvar express = require('express');\n```", "```js\nvar path = require('path');\n```", "```js\nvar cookieParser = require('cookie-parser');\n```", "```js\nvar logger = require('morgan');\n```", "```js\nvar indexRouter = require('./routes/index');\n```", "```js\nvar usersRouter = require('./routes/users');\n```", "```js\nvar mongoose = require(\"mongoose\");\n```", "```js\nmongoose.connect(\"mongodb://localhost/mydb_test\");\n```", "```js\nvar listSchema = mongoose.Schema({\n```", "```js\n text : String\n```", "```js\n});\n```", "```js\nvar List = mongoose.model(\"elements\", listSchema);\n```", "```js\nvar app = express();\n```", "```js\n// view engine setup\n```", "```js\napp.set('views', path.join(__dirname, 'views'));\n```", "```js\napp.set('view engine', 'jade');\n```", "```js\napp.use(logger('dev'));\n```", "```js\napp.use(express.json());\n```", "```js\napp.use(express.urlencoded({ extended: false }));\n```", "```js\napp.use(cookieParser());\n```", "```js\napp.use(express.static(path.join(__dirname, 'public')));\n```", "```js\napp.use('/', indexRouter);\n```", "```js\napp.use('/users', usersRouter);\n```", "```js\n// creating a new element in the list\n```", "```js\napp.post(\"/list\", function(req, res) {\n```", "```js\n  var text = req.body.text;\n```", "```js\n  console.log(text);\n```", "```js\n  List.create({text:text}, function(err, doc) {\n```", "```js\n    res.json({id:doc._id});\n```", "```js\n  });\n```", "```js\n});\n```", "```js\n// retrieving list of elements\n```", "```js\napp.get(\"/list\", function(req, res) {\n```", "```js\n  List.find(function(err, elements) {\n```", "```js\n    res.json({elements:elements});\n```", "```js\n  });\n```", "```js\n});\n```", "```js\n// catch 404 and forward to error handler\n```", "```js\napp.use(function(req, res, next) {\n```", "```js\n  next(createError(404));\n```", "```js\n});\n```", "```js\n// error handler\n```", "```js\napp.use(function(err, req, res, next) {\n```", "```js\n  // set locals, only providing error in development\n```", "```js\n  res.locals.message = err.message;\n```", "```js\n  res.locals.error = req.app.get('env') === 'development' ? \n```", "```js\n  err : {};\n```", "```js\n  // render the error page\n```", "```js\n  res.status(err.status || 500);\n```", "```js\n  res.render('error');\n```", "```js\n});\n```", "```js\nmodule.exports = app;\n```", "```js\nimport Element from \"./element.js\";\n```", "```js\nconst GlobalApp = {\n```", "```js\n  data() {\n```", "```js\n    return {\n```", "```js\n      elements : []  // array of object { text, _id } \n```", "```js\n                     // (_id = document id in MongoDB) \n```", "```js\n    }\n```", "```js\n  },\n```", "```js\n  components : {\n```", "```js\n    Element:Element\n```", "```js\n  },\n```", "```js\n  template : `\n```", "```js\n    <button @click=\"add()\">Add Element</button>\n```", "```js\n    <ul>\n```", "```js\n      <Element v-for=\"(element, index) in elements\" \n```", "```js\n      :key=\"index\" :element=\"element\"\n```", "```js\n        @remove=\"remove($event)\" @modify=\"modify($event)\"\n```", "```js\n      />\n```", "```js\n    </ul>\n```", "```js\n  `,\n```", "```js\n  methods : {\n```", "```js\n    add() {\n```", "```js\n      var text = \"Element \" + (this.elements.length + 1);\n```", "```js\n      axios.post(\"/list\", {text:text})\n```", "```js\n      .then((response) => {\n```", "```js\n        console.log(this.elements);\n```", "```js\n        this.elements.push({text:text, \n```", "```js\n        _id:response.data.id});\n```", "```js\n      });\n```", "```js\n    },\n```", "```js\n    remove(params) {\n```", "```js\n      var id = params.id;\n```", "```js\n      // remove the element with this id from the elements \n```", "```js\n      // array\n```", "```js\n      this.elements = this.elements.filter(\n```", "```js\n      function(element) {\n```", "```js\n        if (element._id == id) return false;\n```", "```js\n        else return true;\n```", "```js\n      });\n```", "```js\n    },\n```", "```js\n    modify(params) {\n```", "```js\n      var id = params.id;\n```", "```js\n      var value = params.value;\n```", "```js\n      // modify the text of the element with this id in the \n```", "```js\n      // elements array\n```", "```js\n      this.elements = this.elements.map(function(element) {\n```", "```js\n        if (element._id == id) {\n```", "```js\n          element.text = value;\n```", "```js\n          return element;\n```", "```js\n        }\n```", "```js\n        else return element;\n```", "```js\n      });\n```", "```js\n// modify the text of the element having this \n```", "```js\n      // identifier\n```", "```js\n      axios.put(\"/list\", {text:value, id:id});       \n```", "```js\n    }\n```", "```js\n  },\n```", "```js\n  created() {\n```", "```js\n    axios.get(\"/list\")\n```", "```js\n    .then((response) => {\n```", "```js\n      this.elements = response.data.elements.map(\n```", "```js\n      function(element) {\n```", "```js\n        return {_id : element._id, text : element.text }\n```", "```js\n      });\n```", "```js\n    });\n```", "```js\n  }\n```", "```js\n}\n```", "```js\nexport default GlobalApp;\n```", "```js\nvar createError = require('http-errors');\n```", "```js\nvar express = require('express');\n```", "```js\nvar path = require('path');\n```", "```js\nvar cookieParser = require('cookie-parser');\n```", "```js\nvar logger = require('morgan');\n```", "```js\nvar indexRouter = require('./routes/index');\n```", "```js\nvar usersRouter = require('./routes/users');\n```", "```js\nvar mongoose = require(\"mongoose\");\n```", "```js\nmongoose.connect(\"mongodb://localhost/mydb_test\");\n```", "```js\nvar listSchema = mongoose.Schema({\n```", "```js\n text : String\n```", "```js\n});\n```", "```js\nvar List = mongoose.model(\"elements\", listSchema);\n```", "```js\nvar app = express();\n```", "```js\n// view engine setup\n```", "```js\napp.set('views', path.join(__dirname, 'views'));\n```", "```js\napp.set('view engine', 'jade');\n```", "```js\napp.use(logger('dev'));\n```", "```js\napp.use(express.json());\n```", "```js\napp.use(express.urlencoded({ extended: false }));\n```", "```js\napp.use(cookieParser());\n```", "```js\napp.use(express.static(path.join(__dirname, 'public')));\n```", "```js\napp.use('/', indexRouter);\n```", "```js\napp.use('/users', usersRouter);\n```", "```js\n// creating a new element in the list\n```", "```js\napp.post(\"/list\", function(req, res) {\n```", "```js\n  var text = req.body.text;\n```", "```js\n  console.log(text);\n```", "```js\n  List.create({text:text}, function(err, doc) {\n```", "```js\n    res.json({id:doc._id});\n```", "```js\n  });\n```", "```js\n});\n```", "```js\n// retrieving list of elements\n```", "```js\napp.get(\"/list\", function(req, res) {\n```", "```js\n  List.find(function(err, elements) {\n```", "```js\n    res.json({elements:elements});\n```", "```js\n  });\n```", "```js\n});\n```", "```js\n// modifying an element in the list\n```", "```js\napp.put(\"/list\", function(req, res) {\n```", "```js\n  var id = req.body.id;\n```", "```js\n  var text = req.body.text;\n```", "```js\n  List.updateOne({_id:id}, {text:text}).exec();\n```", "```js\n  // don't forget exec()!\n```", "```js\n  res.send();  // close the connection to the browser\n```", "```js\n});\n```", "```js\n// catch 404 and forward to error handler\n```", "```js\napp.use(function(req, res, next) {\n```", "```js\n  next(createError(404));\n```", "```js\n});\n```", "```js\n// error handler\n```", "```js\napp.use(function(err, req, res, next) {\n```", "```js\n  // set locals, only providing error in development\n```", "```js\n  res.locals.message = err.message;\n```", "```js\n  res.locals.error = req.app.get('env') === 'development' ? \n```", "```js\n  err : {};\n```", "```js\n  // render the error page\n```", "```js\n  res.status(err.status || 500);\n```", "```js\n  res.render('error');\n```", "```js\n});\n```", "```js\nmodule.exports = app;\n```", "```js\nimport Element from \"./element.js\";\n```", "```js\nconst GlobalApp = {\n```", "```js\n  data() {\n```", "```js\n    return {\n```", "```js\n      elements : []  // array of object { text, _id } \n```", "```js\n                     // (_id = document id in MongoDB)\n```", "```js\n    }\n```", "```js\n  },\n```", "```js\n  components : {\n```", "```js\n    Element:Element\n```", "```js\n  },\n```", "```js\n  template : `\n```", "```js\n    <button @click=\"add()\">Add Element</button>\n```", "```js\n    <ul>\n```", "```js\n      <Element v-for=\"(element, index) in elements\" \n```", "```js\n      :key=\"index\" :element=\"element\"\n```", "```js\n        @remove=\"remove($event)\" @modify=\"modify($event)\"\n```", "```js\n      />\n```", "```js\n    </ul>\n```", "```js\n  `,\n```", "```js\n  methods : {\n```", "```js\n    add() {\n```", "```js\n      var text = \"Element \" + (this.elements.length + 1);\n```", "```js\n      axios.post(\"/list\", {text:text})\n```", "```js\n      .then((response) => {\n```", "```js\n        console.log(this.elements);\n```", "```js\n        this.elements.push({text:text, \n```", "```js\n        _id:response.data.id});\n```", "```js\n      });\n```", "```js\n    },\n```", "```js\n    remove(params) {\n```", "```js\n      var id = params.id;\n```", "```js\n      // remove the element with this id from the elements \n```", "```js\n      // array\n```", "```js\n      this.elements = this.elements.filter(\n```", "```js\n      function(element) {\n```", "```js\n        if (element._id == id) return false;\n```", "```js\n        else return true;\n```", "```js\n      });\n```", "```js\n      axios.delete(\"/list\", { data : {id:id} });    \n```", "```js\n// the options must be written in the data \n```", "```js\n            // property\n```", "```js\n    },\n```", "```js\n    modify(params) {\n```", "```js\n      var id = params.id;\n```", "```js\n      var value = params.value;\n```", "```js\n      // modify the text of the element with this id in the \n```", "```js\n      // elements array\n```", "```js\n      this.elements = this.elements.map(function(element) {\n```", "```js\n        if (element._id == id) {\n```", "```js\n          element.text = value;\n```", "```js\n          return element;\n```", "```js\n        }\n```", "```js\n        else return element;\n```", "```js\n      });\n```", "```js\n      axios.put(\"/list\", {text:value, id:id});   \n```", "```js\n            // modify the text of the element having this \n```", "```js\n            // identifier\n```", "```js\n    }\n```", "```js\n  },\n```", "```js\n  created() {\n```", "```js\n    axios.get(\"/list\")\n```", "```js\n    .then((response) => {\n```", "```js\n      this.elements = response.data.elements.map(\n```", "```js\n      function(element) {\n```", "```js\n        return {_id : element._id, text : element.text }\n```", "```js\n      });\n```", "```js\n    });\n```", "```js\n  }\n```", "```js\n}\n```", "```js\nexport default GlobalApp;\n```", "```js\nvar createError = require('http-errors');\n```", "```js\nvar express = require('express');\n```", "```js\nvar path = require('path');\n```", "```js\nvar cookieParser = require('cookie-parser');\n```", "```js\nvar logger = require('morgan');\n```", "```js\nvar indexRouter = require('./routes/index');\n```", "```js\nvar usersRouter = require('./routes/users');\n```", "```js\nvar mongoose = require(\"mongoose\");\n```", "```js\nmongoose.connect(\"mongodb://localhost/mydb_test\");\n```", "```js\nvar listSchema = mongoose.Schema({\n```", "```js\n text : String\n```", "```js\n});\n```", "```js\nvar List = mongoose.model(\"elements\", listSchema);\n```", "```js\nvar app = express();\n```", "```js\n// view engine setup\n```", "```js\napp.set('views', path.join(__dirname, 'views'));\n```", "```js\napp.set('view engine', 'jade');\n```", "```js\napp.use(logger('dev'));\n```", "```js\napp.use(express.json());\n```", "```js\napp.use(express.urlencoded({ extended: false }));\n```", "```js\napp.use(cookieParser());\n```", "```js\napp.use(express.static(path.join(__dirname, 'public')));\n```", "```js\napp.use('/', indexRouter);\n```", "```js\napp.use('/users', usersRouter);\n```", "```js\n// creating a new element in the list\n```", "```js\napp.post(\"/list\", function(req, res) {\n```", "```js\n  var text = req.body.text;\n```", "```js\n  console.log(text);\n```", "```js\n  List.create({text:text}, function(err, doc) {\n```", "```js\n    res.json({id:doc._id});\n```", "```js\n  });\n```", "```js\n});\n```", "```js\n// retrieving list of elements\n```", "```js\napp.get(\"/list\", function(req, res) {\n```", "```js\n  List.find(function(err, elements) {\n```", "```js\n    res.json({elements:elements});\n```", "```js\n  });\n```", "```js\n});\n```", "```js\n// modifying an element in the list\n```", "```js\napp.put(\"/list\", function(req, res) {\n```", "```js\n  var id = req.body.id;\n```", "```js\n  var text = req.body.text;\n```", "```js\n  List.updateOne({_id:id}, {text:text}).exec();\n```", "```js\nres.send();  // close the connection to the browser\n```", "```js\n});\n```", "```js\n// remove an element from the list\n```", "```js\napp.delete(\"/list\", function(req, res) {\n```", "```js\n  var id = req.body.id;\n```", "```js\n  console.log(req.body.id);\n```", "```js\n  List.deleteOne({_id:id}).exec();   // don't forget exec()!\n```", "```js\n  res.send();  // close the connection to the browser\n```", "```js\n});\n```", "```js\n// catch 404 and forward to error handler\n```", "```js\napp.use(function(req, res, next) {\n```", "```js\n  next(createError(404));\n```", "```js\n});\n```", "```js\n// error handler\n```", "```js\napp.use(function(err, req, res, next) {\n```", "```js\n  // set locals, only providing error in development\n```", "```js\n  res.locals.message = err.message;\n```", "```js\n  res.locals.error = req.app.get('env') === 'development' ? \n```", "```js\n  err : {};\n```", "```js\n  // render the error page\n```", "```js\n  res.status(err.status || 500);\n```", "```js\n  res.render('error');\n```", "```js\n});\n```", "```js\nmodule.exports = app;\n```"]