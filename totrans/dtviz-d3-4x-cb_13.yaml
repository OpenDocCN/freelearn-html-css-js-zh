- en: Chapter 13. Test Drive Your Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting Jasmine and setting up the test environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test driving your visualization - chart creation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test driving your visualization - SVG rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test driving your visualization - pixel-perfect bar rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever we program as a professional programmer it is always important to test
    the program we write in order to make sure it functions as designed and produces
    the expected outcome. D3 data visualization mainly consists of JavaScript programs
    hence just like any other program we write, data visualization needs to be tested
    to make sure it represents the underlying data accurately. Obviously, we can perform
    our validation through visual examination and manual testing, which is always
    a critical part of the process of building data visualization since visual observation
    gives us a chance to verify not only the correctness, but also the aesthetics,
    usability, and many other useful aspects. However, manual visual inspection can
    be quite subjective, therefore, in this chapter we will focus our effort on automated
    unit testing. Visualization well covered by unit tests can free the creator from
    the manual labor of verifying correctness by hand, additionally allowing the creator
    to focus more on the aesthetics, usability, and other important aspects where
    it is hard to automate with machine.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to unit testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unit testing is a method in which a smallest unit of the program is tested and
    verified by another program called the test case. The logic behind unit testing
    is that at unit level the program is typically simpler and more testable. If we
    can verify that every unit in the program is correct then putting these correct
    units together will give us a higher confidence in which the integrated program
    is also correct. Furthermore, since unit tests are typically cheap and fast to
    execute, a group of unit test cases can be quickly and frequently executed to
    provide feedback whether our program is performing correctly or not.
  prefs: []
  type: TYPE_NORMAL
- en: Software testing is a complex topic and so far we have only scratched the surface;
    however, due to limited scope in this chapter, we will have to stop our introduction
    now and dive into developing unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on some of the important concepts in software testing
    please check out the following links: Unit test: [https://en.wikipedia.org/wiki/Unit_testing](https://en.wikipedia.org/wiki/Unit_testing)
    Test driven development: [https://en.wikipedia.org/wiki/Test-driven_development](https://en.wikipedia.org/wiki/Test-driven_development)
    Code coverage: [https://en.wikipedia.org/wiki/Code_coverage](https://en.wikipedia.org/wiki/Code_coverage)'
  prefs: []
  type: TYPE_NORMAL
- en: Getting Jasmine and setting up the test environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start writing our unit test cases we need to set up an environment
    where our test cases can be executed to verify our implementation. In this recipe,
    we will show how this environment and necessary libraries can be set up for a
    visualization project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jasmine ([https://jasmine.github.io/](https://jasmine.github.io/) ) is a **Behavior-Driven
    Development** (**BDD**) framework for testing JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: BDD is a software development technique that combines **Test Driven Development**
    (**TDD**) with domain driven design.
  prefs: []
  type: TYPE_NORMAL
- en: We chose Jasmine as our testing framework because of its popularity in JavaScript
    community as well as its nice BDD syntax. You can download the Jasmine library
    from, [https://github.com/jasmine/jasmine/releases](https://github.com/jasmine/jasmine/releases).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once downloaded you need to unzip it into the `lib` folder. Besides the `lib`
    folder we also need to create the `src` and `spec` folders for storing source
    files as well as test cases (in BDD terminology, test cases are called specification).
    See the following screenshot for the folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image_13_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Testing directory structure
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we have Jasmine in our environment, next thing to do is to set up an HTML
    page that will include Jasmine library as well as our source code plus test cases
    so they can be executed to verify our program. This file is called `SpecRunner.html`
    in our setup which includes the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This code follows standard Jasmine spec runner structure and generates execution
    report directly into our HTML page. Now, you have a fully functional test environment
    set up for your visualization development. If you open the `SpecRunner.html` file
    with your browser you will see a blank page at this point; however, if you check
    out our code sample you will see the following report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_13_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Jasmine report
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Jasmine**:[https://jasmine.github.io/](https://jasmine.github.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jasmine 2.5 Reference Document**: [https://jasmine.github.io/2.5/introduction](https://jasmine.github.io/2.5/introduction)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Behavior Driven ****Development**:[https://en.wikipedia.org/wiki/Behavior-driven_development](https://en.wikipedia.org/wiki/Behavior-driven_development)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test driving your visualization - chart creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With test environment ready, we can move on and develop a simple bar chart
    very similar to what we have done in the *Creating a bar chart* recipe in [Chapter
    8](ch08.html "Chapter 8. Chart Them Up"), *Chart Them Up*, though this time in
    a test-driven fashion. You can see how the bar chart looks if you open the `tdd-bar-chart.html`
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Test driving your visualization - chart creation](img/image_13_003_new.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Test driven bar chart
  prefs: []
  type: TYPE_NORMAL
- en: By now we all know very well how to implement a bar chart using D3; however,
    building a bar chart is not the focus of this recipe. Instead, we want to show
    how we can build test cases every step of the way and verify automatically that
    our bar chart implementation is doing what it is supposed to do. The source code
    of this recipe was built using test driven development method; however, we will
    not show you every step in the TDD process due to limited scope in this book.
    Instead, we have grouped multiple steps into three larger sections with different
    focuses in this chapter and this recipe is the first step we take.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter13/src/bar_chart.js](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter13/src/bar_chart.js)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter13/spec/bar_chart_spec.js](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter13/spec/bar_chart_spec.js)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First step we need to take is to make sure our bar chart implementation exists
    and can receive the data. The starting point of our development could be arbitrary
    and we decide to drive from this simplest function to set up the skeleton for
    our object. Here is what the test case looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this first test case we used a few Jasmine constructs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`describe`: This function defines a suite of test cases; within `describe`
    a sub-suite can be nested and test cases can be defined'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`it`: This function defines a test case'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beforeEach`: This function defines a pre-execution hook which will execute
    the given function before the execution of each test case'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`afterEach`: This function defines a post-execution hook which will execute
    the given function after the execution of each test case'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expect`: This function defines an expectation in your test case which can
    then be chained with matchers (for example, `toBe` and `toBeEmpty`) to perform
    assertion in your test case'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our example we use the `beforeEach` hook to set up a `div` container for
    each test case and then remove `div` after execution in `afterEach` hook to improve
    the isolation between different test cases. The test case itself is almost trivial;
    it checks if the bar chart can take data and also return data attribute correctly.
    At this point if we run our `SpecRunner`, it will display a red message complaining
    there is no `BarChart` object, so let''s create our object and function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you run `SpecRunner.html` again it will give you a happy green message
    showing our only test case is passing.
  prefs: []
  type: TYPE_NORMAL
- en: Test driving your visualization - SVG rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have the basic skeleton of our bar chart object created, and we feel
    that we are
  prefs: []
  type: TYPE_NORMAL
- en: ready to try to render something, so in this second iteration we will try to
    generate the `svg:svg` element.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter13/src/bar_chart.js](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter13/src/bar_chart.js)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter13/spec/bar_chart_spec.js](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter13/spec/bar_chart_spec.js)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Rendering the `svg:svg` element should not only simply add the `svg:svg` element
    to the HTML body, but also translate the width and height setting on our chart
    object to proper SVG attributes. Here is how we express our expectation in our
    test cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, all of these tests will fail since we don''t even have the render
    function; however, it clearly articulates that we expect the render function to
    generate the `svg:svg` element and setting the `width` and `height` attributes
    correctly. The second test case also makes sure that if the user does not provide
    the `height` and `width` attributes we will supply a set of default values. Here
    is how we will implement the render method to satisfy these expectations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: At this point our `SpecRunner.html` is once again all green and happy. However,
    it's still not doing much since all it does is generate an empty `svg:` `svg`
    element on the page and not even use the data at all.
  prefs: []
  type: TYPE_NORMAL
- en: Test driving your visualization - pixel-perfect bar rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this iteration we will finally generate the bars using the data we have.
    Through our test cases we will make sure all bars are not only rendered but rendered
    with pixel-perfect precision.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter13/src/bar_chart.js](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter13/src/bar_chart.js)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter13/spec/bar_chart_spec.js](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter13/spec/bar_chart_spec.js)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see how we test it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the preceding test suite we describe our expectations of having the chart
    body `svg:g` element correctly transform and correct number of bars with appropriate
    attributes (`width`, `x`, `y`, `height`) set. The implementation is actually going
    to be shorter than our test case which is quite common in well tested implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: I think you are getting the picture and now you can repeat this cycle over and
    over to drive your implementation. D3 visualization is built on HTML with SVG
    and both are simple mark-up languages that can be verified easily. Well thought-out
    test suite can make sure your visualization is pixel-perfect even sub-pixel perfect.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Test driven development**:[https://en.wikipedia.org/wiki/Test-driven_development](https://en.wikipedia.org/wiki/Test-driven_development)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
