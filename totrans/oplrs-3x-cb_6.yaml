- en: Chapter 6. Theming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。主题化
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Understanding how themes work using the `img` folder
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `img` 文件夹理解主题的工作原理
- en: Understanding how themes work using the `theme` folder
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `theme` 文件夹理解主题的工作原理
- en: Delimiting tiles in a raster layer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在栅格层中定义瓦片
- en: Creating a new OpenLayers theme
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的 OpenLayers 主题
- en: Starting actions outside the controls
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控件外启动操作
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'It is worth mentioning that in software applications, the first impressions
    are the most important things, and they are given by two factors: the look and
    feel.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在软件应用程序中，第一印象是最重要的，它们由两个因素决定：外观和感觉。
- en: This chapter is all oriented to show how we can improve the look and feel of
    our web mapping application by theming OpenLayers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在展示我们如何通过主题化 OpenLayers 来改善我们的网络制图应用程序的外观和感觉。
- en: As many other web applications, the look and feel of the OpenLayers library
    is controlled using images and CSS classes, which define the position, dimensions,
    and visual aspects of any OpenLayers component.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多其他网络应用程序一样，OpenLayers 库的外观和感觉是通过图像和 CSS 类控制的，这些类定义了任何 OpenLayers 组件的位置、尺寸和视觉方面。
- en: At this moment, with the Version 2.11, we can find the `img` and `theme` folders
    within the bundle distribution, and both are used to control the look of the OpenLayers
    applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在此刻，随着 2.11 版本的推出，我们可以在捆绑发行版中找到 `img` 和 `theme` 文件夹，并且两者都用于控制 OpenLayers 应用程序的外观。
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember to place these folders in your project when using OpenLayers as mentioned
    in the *Different ways to include OpenLayers* recipe in [Chapter 1](ch01.html
    "Chapter 1. Web Mapping Basics"), *Web Mapping Basics.*
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在按照[第 1 章](ch01.html "第 1 章。网络制图基础")中“包含 OpenLayers 的不同方法”配方所述使用 OpenLayers
    时，将这些文件夹放置到您的项目中。
- en: '![Introduction](img/7843_06_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![简介](img/7843_06_01.jpg)'
- en: The `theme` folder contains CSS files, as well as some images used within the
    CSS, while the `img` folder contains only images, used by some controls in a more
    hardcoded (and not recommended) way.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`theme` 文件夹包含 CSS 文件，以及一些在 CSS 中使用的图像，而 `img` 文件夹只包含图像，以更硬编码（且不推荐）的方式由一些控件使用。'
- en: We can say, the use of the `theme` folder with CSS styles is the preferred way
    to implement controls, while the use of the `img` folder remains for those controls
    that are not updated to work with CSS styles.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说，使用 `theme` 文件夹和 CSS 样式是实现控件的首选方式，而使用 `img` 文件夹则保留给那些尚未更新以使用 CSS 样式的控件。
- en: Becoming a *great* web designer is out of the scope of this book, but it is
    true that if we want to tune up the OpenLayers appearance a bit, we need to have
    some knowledge of HTML and how CSS works.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 成为一位*杰出*的网页设计师超出了本书的范围，但确实，如果我们想稍微调整一下 OpenLayers 的外观，我们需要了解一些 HTML 和 CSS 的工作原理。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can find a description of the CSS standard at [http://en.wikipedia.org/wiki/Cascading_Style_Sheets](http://en.wikipedia.org/wiki/Cascading_Style_Sheets)
    but we can find tons of great tutorials looking on the Net, such as [http://www.csstutorial.net](http://www.csstutorial.net).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 [http://en.wikipedia.org/wiki/Cascading_Style_Sheets](http://en.wikipedia.org/wiki/Cascading_Style_Sheets)
    找到 CSS 标准的描述，但我们在网上可以找到大量的优秀教程，例如 [http://www.csstutorial.net](http://www.csstutorial.net)。
- en: 'The browsers work with three main technologies: HTML, CSS, and JavaScript.
    Summarized in really short sentences, we can say:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器使用三种主要技术：HTML、CSS 和 JavaScript。用非常简短的句子总结，我们可以这样说：
- en: HTML defines the content of a web page using paragraphs, titles, sections, and
    so on.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML 使用段落、标题、部分等定义网页的内容。
- en: CSS defines the visual aspects of the HTML elements, that is, which text color
    a paragraph must use, the text size of a title, and so on.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS 定义了 HTML 元素的视觉方面，即段落必须使用的文本颜色、标题的文本大小等。
- en: Finally, JavaScript is a programming language processed by the browser that
    can be used to manipulate dynamically any aspect of the page. For example, we
    can add new HTML elements, change CSS, and check if the fields in a form are valid
    before sending it to the server.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，JavaScript 是一种由浏览器处理的编程语言，可以用来动态地操作页面的任何方面。例如，我们可以添加新的 HTML 元素，更改 CSS，并在将表单发送到服务器之前检查表单字段是否有效。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The **Document Object Model (DOM)** is a standard for accessing and manipulating
    HTML documents. We can think it decomposes an HTML document like a tree of elements
    and attributes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**文档对象模型 (DOM)** 是一个用于访问和操作 HTML 文档的标准。我们可以将其视为将 HTML 文档分解为一个元素和属性的树。'
- en: 'See: [http://www.w3schools.com/htmldom/default.asp](http://www.w3schools.com/htmldom/default.asp)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 查看：[http://www.w3schools.com/htmldom/default.asp](http://www.w3schools.com/htmldom/default.asp)
- en: OpenLayers belongs to the third category. It is a JavaScript library that allows
    us to create web mapping applications using concepts such as maps, layers, or
    features, but abstracting us from the HTML DOM elements and the CSS aspects required
    to render them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: OpenLayers 属于第三类。它是一个 JavaScript 库，允许我们使用地图、图层或特征等概念来创建网络地图应用程序，同时抽象出渲染它们所需的
    HTML DOM 元素和 CSS 方面。
- en: When we create an OpenLayers component, such as a map, a layer, or a control
    instance, it also creates the required HTML elements to render them and puts them
    at the right place of the DOM structure of our HTML page.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个 OpenLayers 组件，例如地图、图层或控制实例时，它也会创建所需的 HTML 元素来渲染它们，并将它们放置在 HTML 页面的 DOM
    结构的正确位置。
- en: The goal of this chapter is to show how to theme the most important OpenLayers
    components. So, using many of the next recipes, we will be able to create a fresh
    web-mapping application with a customized look.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是展示如何为主题化最重要的 OpenLayers 组件。因此，使用许多后续的菜谱，我们将能够创建一个具有定制外观的新网络地图应用程序。
- en: Understanding how themes work using the img folder
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 img 文件夹理解主题的工作方式
- en: '![Understanding how themes work using the img folder](img/7843_06_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![使用 img 文件夹理解主题的工作方式](img/7843_06_02.jpg)'
- en: As explained in the *Introduction* section of this chapter, there are controls
    that are themed simply using the images stored in the `img` folder.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章 *简介* 部分所述，有一些控制可以通过存储在 `img` 文件夹中的图片简单地主题化。
- en: This way is the oldest way to theme a control, and for newer implementations,
    the preferred way of theming is using CSS, that is, using the `theme` folder.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方式是为主题化控制的最古老方式，对于新的实现，首选的主题化方式是使用 CSS，即使用 `theme` 文件夹。
- en: Until its update, we could make use of controls that work with any of the two
    forms of theming, so it is important to know how to theme both.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在其更新之前，我们可以使用任何两种主题化形式的控制，因此了解如何主题化两者是很重要的。
- en: In this recipe, we are going to describe how to theme the `PanZoomBar` control
    that uses the old way based on the images in the `img` folder.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将描述如何使用 `img` 文件夹中的图片基于旧方式为主题化的 `PanZoomBar` 控制器。
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Create an HTML file with OpenLayers dependencies and start adding in the body
    element of the document, the `div` element to hold the map:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含 OpenLayers 依赖项的 HTML 文件，并在文档的 body 元素中开始添加 `div` 元素以包含地图：
- en: '[PRE0]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, add the following JavaScript code to initialize the map and add a base
    layer:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加以下 JavaScript 代码以初始化地图并添加一个基本图层：
- en: '[PRE1]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, simply create an `OpenLayers.Control.PanZoomBar` control instance
    and add to the map:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，只需创建一个 `OpenLayers.Control.PanZoomBar` 控制实例并将其添加到地图中：
- en: '[PRE2]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we create the control, what really happens is OpenLayers automatically
    creates a set of HTML elements and places them in the page's DOM structure.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建控制时，实际上发生的是 OpenLayers 自动创建一组 HTML 元素并将它们放置在页面的 DOM 结构中。
- en: 'From the OpenLayers'' JavaScript API perspective, it is simply adding a control
    component to the map but from the HTML code point of view, it means that a complex
    set of elements is created on the page to represent all the buttons and images
    required to look like a nice pan and zoom control:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从 OpenLayers 的 JavaScript API 视角来看，这仅仅是向地图添加一个控制组件，但从 HTML 代码的角度来看，这意味着在页面上创建了一组复杂的元素来表示所有按钮和图片，以形成一个漂亮的平移和缩放控制：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Looking at the generated code we can say that:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看生成的代码，我们可以说：
- en: The main control element uses a CSS class named `olControlPanZoomBar`
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要控制元素使用一个名为 `olControlPanZoomBar` 的 CSS 类
- en: All the images used are loaded from the OpenLayers `img` folder, such as `img/north-mini.png,
    img/east-mini.png` and `img/zoom-minus-mini.png`
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所使用的所有图片都是从 OpenLayers 的 `img` 文件夹中加载的，例如 `img/north-mini.png`、`img/east-mini.png`
    和 `img/zoom-minus-mini.png`
- en: The position of the control, and its buttons, are set in the `style` attribute
    instead of using a CSS class
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制的位置及其按钮的设置是在 `style` 属性中进行的，而不是使用 CSS 类
- en: 'The conclusion is trivial: a change in the look of this control can only be
    done by changing the images in the `img` folder.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 结论很简单：要改变这个控制的外观，只能通过更改 `img` 文件夹中的图片来实现。
- en: 'In addition, if we want to place the control at a different position, we need
    to play with the `OpenLayers.Control.PanZoom.X` and `OpenLayers.Control.PanZoom.Y`
    properties, which are used to set the value of the `top` and `left` properties
    in the `style` attribute of the main control HTML element. For example, setting:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们想将控件放置在不同的位置，我们需要调整`OpenLayers.Control.PanZoom.X`和`OpenLayers.Control.PanZoom.Y`属性，这些属性用于设置主控件HTML元素`style`属性中`top`和`left`属性的值。例如，设置：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Produces an HTML code as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 生成以下HTML代码：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This means, although you redefine the properties `top` and `left` in the `olControlPanZoomBar`
    class, they will not take effect because the properties specified in the `style`
    attribute take precedence:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，尽管你在`olControlPanZoomBar`类中重新定义了`top`和`left`属性，但它们不会生效，因为`style`属性中指定的属性具有优先级：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There's more...
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are a couple of important things to note.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有几点重要的事情需要注意。
- en: First, every OpenLayers instance has an ID property. We can set it manually
    when creating the instance or leave OpenLayers to compute one for us, but take
    into account that the ID must be unique.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，每个OpenLayers实例都有一个ID属性。我们可以在创建实例时手动设置它，或者让OpenLayers为我们计算一个，但请注意，ID必须是唯一的。
- en: In this case, the ID for the `PanZoomBar` control is the string `OpenLayers.Control.PanZoomBar_71`
    and it is also used to identify the HTML elements.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`PanZoomBar`控件的ID是字符串`OpenLayers.Control.PanZoomBar_71`，它也用于识别HTML元素。
- en: 'Second, if a control makes use of a CSS class, by convention, the name of the
    class will be `olControl` followed by the name of the control, such as: `olControlPanZoomBar`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，如果一个控件使用了CSS类，按照惯例，类的名称将是`olControl`后跟控件的名称，例如：`olControlPanZoomBar`。
- en: See also
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参见
- en: The *Understanding how themes work using the theme folder* recipe
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用主题文件夹理解主题如何工作*配方'
- en: The *Adding and removing controls* recipe in [Chapter 5](ch05.html "Chapter 5. Adding
    Controls"), *Adding Controls*
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第5章](ch05.html "第5章。添加控件")中的*添加和移除控件*配方，*添加控件*'
- en: Understanding how themes work using the theme folder
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用主题文件夹理解主题如何工作
- en: As we have explained in the chapter's introduction, there are some OpenLayers
    controls strongly based on CSS classes to be the theme.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在本章引言中解释的，有一些OpenLayers控件强烈依赖于CSS类来作为主题。
- en: 'In this group, we can find the `PanPanel` control, a small control formed by
    a set of four buttons that allows the user to pan the map in four directions:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个组中，我们可以找到`PanPanel`控件，它是由一组四个按钮组成的小控件，允许用户在四个方向上平移地图：
- en: '![Understanding how themes work using the theme folder](img/7843_06_03.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![使用主题文件夹理解主题如何工作](img/7843_06_03.jpg)'
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Create an HTML page and add the OpenLayers library dependencies:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个HTML页面并添加OpenLayers库依赖项：
- en: '[PRE7]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After this, we need to include the CSS file with the theme to be used. Here
    we are using the default theme:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要包含要使用的主题的CSS文件。这里我们使用默认主题：
- en: '[PRE8]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Within the `body` element of the document, add the `div` element to hold the
    map:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文档的`body`元素中，添加`div`元素以容纳地图：
- en: '[PRE9]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Within a `script` element, add the code to create the map with a base layer:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`script`元素中，添加创建带有基本层的地图的代码：
- en: '[PRE10]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, create an `OpenLayers.Control.PanPanel` instance and add it to the
    map:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个`OpenLayers.Control.PanPanel`实例并将其添加到地图中：
- en: '[PRE11]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When the `OpenLayers.Control.PanPanel` instance is added to the map, what really
    happens is a set of new HTML elements are added to the DOM page structure:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当`OpenLayers.Control.PanPanel`实例添加到地图中时，实际上是在DOM页面结构中添加了一组新的HTML元素：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There is one main element for the control that contains other elements representing
    the four buttons.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于控件，有一个主要元素包含其他表示四个按钮的元素。
- en: 'The main HTML element has an attached CSS class with the name `olControlPanPanel`.
    This class name is automatically created by OpenLayers and follows this convention:
    `olControl` plus the control name.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 主要HTML元素附加了一个名为`olControlPanPanel`的CSS类。这个类名是由OpenLayers自动创建的，并遵循以下约定：`olControl`加上控件名称。
- en: All the CSS classes used in the previous HTML code can be found in the source
    code in the `theme/default/style.css` theme file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的HTML代码中使用的所有CSS类都可以在`theme/default/style.css`主题文件中的源代码中找到。
- en: There's more...
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Looking at the CSS classes used by the control, we can understand a bit better
    how it works.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看控件使用的CSS类，我们可以更好地理解其工作原理。
- en: 'First, we change the position of the control by modifying the properties of
    the CSS class:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过修改CSS类的属性来更改控件的位置：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, CSS code sets the image to be used and the size of the buttons:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We can see how the image sprite is taken from the file `theme/default/img/pan-panel.png:`
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/7843_06_04.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An **image sprite** is a collection of images put into the same file. Later,
    using the CSS properties we can get once piece of this image sprite to be used
    on an element.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Image sprites reduce the number of requests to the server when a page loads.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, each button defines the required properties to extract the piece of image
    to be used as the button:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We can see how with little CSS knowledge we can modify almost any desired thing
    of the control.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Understanding how themes work using the img folder* recipe
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding and removing controls* recipe in [Chapter 5](ch05.html "Chapter 5. Adding
    Controls"), *Adding Controls*
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a simple full screen map* recipe in [Chapter 1](ch01.html "Chapter 1. Web
    Mapping Basics"), *Web Mapping Basics*
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Different ways for including OpenLayers* recipe in [Chapter 1](ch01.html
    "Chapter 1. Web Mapping Basics"), *Web Mapping Basics*
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delimiting tiles in a raster layer
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To show how easy it is to change the appearance of an element using CSS, in
    this recipe we are going to add a border to all the tiles from any raster layer
    to show where the limits of each tile are:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![Delimiting tiles in a raster layer](img/7843_06_05.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create an HTML file with OpenLayers dependencies and add within the `head`
    section a `style` element with the following CSS code:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, in the `body` element of the document, add the `div` element to hold
    the map:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, add the following JavaScript code to initialize the map and add a base
    layer:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code to create the map instance and layer is pretty simple, we have simply
    created an instance of both and added the layer to the map. Finally, we have centered
    the map's viewport.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though it seems incredible, all the magic of this recipe is in the CSS
    code at the top:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Every raster layer class uses images to render the tiles of data. To do so,
    the layer creates some HTML elements and adds them to the DOM structure as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Every OpenLayers component is transformed in one or more HTML elements that
    use the CSS classes to define the way they are visualized.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, a `div` element is created for the whole layer identified by
    `OpenLayers.Layer.OSM_315`, which has the class parameter set to `olLayerDiv`
    CSS. Within it we can find `img` elements that point to the tiles to be rendered.
    These elements have applied the `olTileImage` class.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to the CSS classes in this recipe, we have set a border on each tile
    by simply specifying the appropriate property.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Understanding how themes work using the theme folder* recipe
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new OpenLayers theme
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There can be situations where we desire a completely different look for the
    OpenLayers theme.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'As we mentioned in the chapter''s introduction and other recipes (Understanding
    *how themes work using the img folder* and *Understanding how themes work using
    the theme folder)*, OpenLayers theming is based on images and CSS files:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章引言和其他菜谱（理解*使用img文件夹中的主题工作方式*和*理解使用主题文件夹中的主题工作方式*）中提到的，OpenLayers主题是基于图像和CSS文件：
- en: '![Creating a new OpenLayers theme](img/7843_06_06.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![创建新的OpenLayers主题](img/7843_06_06.jpg)'
- en: In this recipe we are going to see how we can create a new OpenLayers theme
    based on the default theme we can find in the `theme/default` folder. We are going
    to change some aspects of the most common controls, such as scale or scale line,
    overview map, or layer switcher.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何基于`theme/default`文件夹中可以找到的默认主题创建一个新的OpenLayers主题。我们将更改一些最常用控件的某些方面，例如比例或比例线、概览图或图层切换器。
- en: Getting ready
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To create a new theme, we need to create a replica for the content of the `img`
    and `theme` folders of the OpenLayers distribution. Both folders contain images
    to be used in controls, so it is easy to see why a good graphic design is important
    to create a good theme.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的主题，我们需要为OpenLayers发行版的`img`和`theme`文件夹的内容创建副本。这两个文件夹都包含用于控件的图像，因此很容易看出良好的图形设计对于创建良好的主题是多么重要。
- en: The theme called **green theme**, used in this chapter, is divided into folders
    `recipes/data/green_img` and `recipes/data/green_theme`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用的名为**绿色主题**的主题分为`recipes/data/green_img`和`recipes/data/green_theme`文件夹。
- en: How to do it...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Create an HTML file. In the `head` section we need to attach, in addition to
    the dependencies to the OpenLayers library, the CSS stylesheets for our custom
    theme:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个HTML文件。在`head`部分，我们需要附加OpenLayers库的依赖项以及我们自定义主题的CSS样式表：
- en: '[PRE21]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Before continuing to see the code at the `head` section, let''s write the following
    code within the `body` section that will hold the map instance and the navigation
    history tool:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续查看`head`部分的代码之前，让我们在将包含地图实例和导航历史工具的`body`部分中编写以下代码：
- en: '[PRE22]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Again, within the head section, add the following piece of styling code necessary
    for the previous `div` element used to hold the navigation history tool:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，在`head`部分中，添加以下必要的样式代码，用于之前用于包含导航历史工具的`div`元素：
- en: '[PRE23]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Within the `script` section, add the following JavaScript code that specifies
    where OpenLayers can find the folder `img:`
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`script`部分中，添加以下JavaScript代码，指定OpenLayers可以找到的文件夹`img:`的位置：
- en: '[PRE24]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Implement the `init` function, which is executed when the `body` is loaded.
    It creates the map instance, and adds a base layer and a set of most common controls:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`init`函数，该函数在`body`加载时执行。它创建地图实例，并添加一个基本图层和一组最常用的控件：
- en: '[PRE25]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's start briefly by describing the JavaScript code. We have created a map,
    added a base layer, and finally added a set of controls.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要地描述一下JavaScript代码。我们创建了一个地图，添加了一个基本图层，并最终添加了一组控件。
- en: 'Specially take a look at how we have added the NavigationHistory control, because
    this is the first themed point of the application:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 特别注意我们是如何添加导航历史控件的，因为这是应用程序的第一个主题点：
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We have instantiated the control and placed its buttons on a `Panel` control.
    In addition to rendering the `Panel` control in a specific `div` element of the
    web page, we have set its `div` property pointing to the desired element.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经实例化了控件，并将其按钮放置在`Panel`控件上。除了在网页的特定`div`元素中渲染`Panel`控件外，我们还设置了其`div`属性指向所需元素。
- en: 'The CSS `historyClass` is a class that allows us to place the control that
    is floating on the right-hand side (close to the editing toolbar control):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: CSS的`historyClass`是一个类，允许我们将浮动在右侧（靠近编辑工具栏控件）的控件放置：
- en: '[PRE27]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如以下截图所示：
- en: '![How it works...](img/7843_06_12.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/7843_06_12.jpg)'
- en: The rest of the theme is based on two important folders.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 主题的其余部分基于两个重要的文件夹。
- en: 'Because some controls are based on the images contained in the `img` folder,
    we have set the path to this folder at the beginning of the JavaScript code. Controls
    such as `PanZoomBar` or the `LayerSwitcher` require the following folder to get
    their icons:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一些控件基于`img`文件夹中的图像，我们在JavaScript代码的开头设置了该文件夹的路径。例如`PanZoomBar`或`LayerSwitcher`控件需要以下文件夹来获取它们的图标：
- en: '[PRE28]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following screenshot shows the `PanZoomBar` control''s icon:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`PanZoomBar`控件的图标：
- en: '![How it works...](img/7843_06_11.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/7843_06_11.jpg)'
- en: 'On the other hand, controls such as the `Scale` or `ScaleLine`, the `MousePosition`,
    or also many aspects of the `LayerSwitcher` control are defined via CSS through
    the `theme` folder, by its `style.css` file and their images. This is included
    with a `link` tag in the document''s header:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `green_theme/style.css` file does not contain a complete redefinition of
    the classes we found in the default theme of OpenLayers. We have simply redefined
    some classes that affect the color or position of some controls. For this, first
    we have included the `default/style.css` file and later our custom `green_theme/style.css`
    file, which only redefines some classes by adding or changing the styles.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: There is no magic recipe on how to theme CSS-based controls. We need to check
    the generated HTML code for the controls and see which CSS classes they use and
    which other we can apply. Let's see some themed controls.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `LayerSwitcher` control, we have changed the font size, the background
    and border color, added a border radius (only valid for CSS3 compatible browsers),
    and changed the title for the base and overlay sections to use italics:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following screenshot shows the `LayerSwitcher` control with the changes
    done using the previous code:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7843_06_07.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
- en: 'For the `OverviewMap` control, we have added a background and border color,
    a border radius, and moved it a bit to the top to leave space for the following
    controls:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following screenshot shows the `OverviewMap` control with the changes done
    using the previous code:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7843_06_08.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
- en: 'The `Scale` and `ScaleLine` controls have been moved to the left-hand side
    and the color has been changed to follow the green theme:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following screenshot shows the `Scale` and `ScaleLine` controls with the
    changes done using the previous code:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7843_06_10.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: 'For the `MousePosition` and `Permalink` controls, we have slightly moved them
    and changed the text color:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The following screenshot shows the `MousePosition` and `Permalink` controls
    with the changes done using the previous code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7843_06_09.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: 'Finally, for the `NavigationHistory` control, we need to redefine a CSS class
    so the buttons are ordered horizontally, instead of vertically, which is the default
    mode:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![How it works...](img/7843_06_12.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
- en: There's more...
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we mentioned, there is no easy way to theme a component. We need to take
    into account the HTML code that will render the component, the images it uses,
    and the possible CSS styles applied.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: The simplest solution to change the look of your mapping applications is to
    play with the icons and CSS as we did here. More drastic improvements include
    creating your own controls or placing the controls on external buttons, offered
    by an external framework such as Dojo ([http://dojotoolkit.org](http://dojotoolkit.org)),
    jQueryUI ([http://jqueryui.com](http://jqueryui.com)), or ExtJS ([http://www.sencha.com/products/extjs](http://www.sencha.com/products/extjs)),
    and writing the required code to activate or deactivate the controls. A good sample
    of this is the GeoExt project ([http://geoext.org](http://geoext.org)) that offers
    rich components based on the previous ExtJS project.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 改变你的地图应用程序外观的最简单方法是像我们在这里做的那样玩弄图标和CSS。更彻底的改进包括创建自己的控件或将控件放置在外部框架提供的按钮上，例如Dojo
    ([http://dojotoolkit.org](http://dojotoolkit.org))，jQueryUI ([http://jqueryui.com](http://jqueryui.com))，或ExtJS
    ([http://www.sencha.com/products/extjs](http://www.sencha.com/products/extjs))，并编写必要的代码来激活或禁用控件。GeoExt项目
    ([http://geoext.org](http://geoext.org)) 是一个很好的例子，该项目基于之前的ExtJS项目提供了丰富的组件。
- en: See also
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参见
- en: The *Understanding how themes work using the img folder* recipe
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`img`文件夹理解主题如何工作的配方
- en: The *Understanding how themes work using the theme folder* recipe
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`theme`文件夹理解主题如何工作的配方
- en: The *Adding a navigation history control* recipe in [Chapter 5](ch05.html "Chapter 5. Adding
    Controls"), *Adding Controls*
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第5章“添加控件”中的[添加导航历史控件](ch05.html "第5章。添加控件")配方
- en: The *Place controls outside the map* recipe in [Chapter 5](ch05.html "Chapter 5. Adding
    Controls"), *Adding Controls*
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第5章“添加控件”中的[将控件放置在地图外](ch05.html "第5章。添加控件")配方
- en: Starting actions outside the controls
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控件外开始操作
- en: Another different and drastic way to change the look of our applications is
    to place the controls outside the map and attach them to our own components.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种不同且彻底改变我们应用程序外观的方法是将控件放置在地图外，并将它们附加到我们自己的组件上。
- en: 'Most of the OpenLayers controls have two features:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数OpenLayers控件都有两个特性：
- en: They realize some action (edit features, create a line, and so on)
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们执行一些操作（编辑要素、创建线条等）
- en: They know how to render themselves on top of the map
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们知道如何将自己在地图上显示出来
- en: 'To achieve the goal of this recipe, the idea is to separate the visualization
    from the action that the control does. This way, we can create some buttons and
    activate or deactivate a control depending on the button that is pressed:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现本配方的目标，想法是将可视化与控件执行的操作分离。这样，我们可以创建一些按钮，并根据按下的按钮激活或禁用控件：
- en: '![Starting actions outside the controls](img/7843_06_13.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![控件外开始操作](img/7843_06_13.jpg)'
- en: 'As we can see in the screenshot, we are going to create a toolbar and place:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在截图中所见，我们将创建一个工具栏并放置：
- en: The same set of controls we can find in `OpenLayers.Control.EditingToolbar`,
    which will allow us to draw points, lines, and polygons
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在`OpenLayers.Control.EditingToolbar`中找到的相同控件集，这将允许我们绘制点、线和多边形
- en: A dropdown button that will allow us to start the `OpenLayers.Control.Measure`
    action
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个下拉按钮，允许我们启动`OpenLayers.Control.Measure`操作
- en: Getting ready
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are going to use the Dojo Toolkit framework ([http://dojotoolkit.org/](http://dojotoolkit.org/))
    which we have used along with the source code of this book, but you can make do
    with plain HTML buttons or `div` elements if preferred.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Dojo Toolkit框架 ([http://dojotoolkit.org/](http://dojotoolkit.org/))，这是我们与本书源代码一起使用的，但如果您更喜欢，可以使用纯HTML按钮或`div`元素。
- en: How to do it...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create an HTML file and add the OpenLayers dependencies, both JavaScript and
    CSS. Add the following CSS classes within the `style` element that will be used
    to style our custom buttons:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个HTML文件并添加OpenLayers依赖项，包括JavaScript和CSS。在将用于样式化我们自定义按钮的`style`元素中添加以下CSS类：
- en: '[PRE35]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, let''s go to create the toolbar. It will consist of four toggle buttons
    to select the editing action:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建工具栏。它将包含四个切换按钮来选择编辑操作：
- en: '[PRE36]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'And one drop-down button to choose the kind of measure to do:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以及一个下拉按钮来选择要进行的测量类型：
- en: '[PRE37]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following screenshot shows the drop-down button created:'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了创建的下拉按钮：
- en: '![How to do it...](img/7843_06_14.jpg)'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/7843_06_14.jpg)'
- en: 'In addition, the toolbar will hold a span element to show the measured values:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，工具栏将包含一个`span`元素来显示测量值：
- en: '[PRE38]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, we can place the `div` element that will hold the map:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以放置将包含地图的`div`元素：
- en: '[PRE39]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, add the required JavaScript code to initialize the map, and add a base
    layer and a vector layer to add features to the map:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加初始化地图所需的 JavaScript 代码，并添加一个基础图层和一个矢量图层以向地图添加功能：
- en: '[PRE40]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next, add the controls to the map. First, add the controls related to the `DrawFeature`
    control:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将控件添加到地图中。首先，添加与 `DrawFeature` 控件相关的控件：
- en: '[PRE41]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Then add the `Measure` control, that allows us to measure distances and areas:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后添加 `Measure` 控件，允许我们测量距离和面积：
- en: '[PRE42]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Implement the functions to handle the buttons that represent the actions of
    the `EditingToolbar` (hand, draw point, draw path, and draw polygon):'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现处理表示 `EditingToolbar`（手、绘制点、绘制路径和绘制多边形）动作的函数：
- en: '[PRE43]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'And finally, add the code for the two helper functions:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加两个辅助函数的代码：
- en: '[PRE44]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How it works...
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Every control must be attached to the map, but like in this recipe, it is not
    necessary for the control to have a visible representation.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 每个控件都必须附加到地图上，但像在这个食谱中一样，控件不需要有可见的表示。
- en: In the same way, we can invoke methods on the `OpenLayers.Map` instance to zoom
    in or zoom out. We can programmatically activate or deactivate a control without
    the need for a panel or an icon to interact with it.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，我们可以对 `OpenLayers.Map` 实例调用方法以进行放大或缩小。我们可以无需面板或图标即可编程激活或停用控件。
- en: For the three buttons that allow us to create new features (points, lines, and
    polygons), we have created three controls based on the `OpenLayers.Control.DrawFeature`
    control.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 对于允许我们创建新功能（点、线和多边形）的三个按钮，我们基于 `OpenLayers.Control.DrawFeature` 控件创建了三个控件。
- en: 'This control requires two arguments: the vector layer (to add the new feature
    to) and a handler (used to interact with the map while we are creating the feature):'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 此控件需要两个参数：矢量层（用于添加新功能）和处理程序（在创建功能时用于与地图交互）：
- en: '[PRE45]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Note
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Before these three controls (represented as buttons) in the toolbar, there is
    a pointer button that allows us to deactivate the current control and pan the
    map. It does not require any control associated with it. When the button is clicked,
    we simply deactivate the current control allowing the map to be panned again.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在工具栏中这三个控件（以按钮形式表示）之前，有一个指针按钮，允许我们停用当前控件并平移地图。它不需要与任何控件相关联。当按钮被点击时，我们只需停用当前控件，允许地图再次平移。
- en: 'Although visually there are two options in the drop-down button, internally,
    both correspond to the same control, the `OpenLayers.Control.Measure` control.
    When one of the measure options is clicked, we set the handler to be used by the
    control:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在下拉按钮中从视觉上看有两个选项，但内部上，两者都对应于同一个控件，即 `OpenLayers.Control.Measure` 控件。当点击测量选项之一时，我们设置控件使用的处理程序：
- en: '[PRE46]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We have specified the control property `persist` of `Measure` to `true`. This
    makes the line or polygon that is rendered, to show the measure and stay visible
    on the map when the measure ends.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将 `Measure` 控件的 `persist` 属性指定为 `true`。这使得绘制的线或多边形在测量结束时仍然显示并保持在地图上可见。
- en: The `immediate` property allows the measure process to trigger an event every
    time the mouse moves.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`immediate` 属性允许测量过程在鼠标每次移动时触发一个事件。'
- en: Finally, we have specified to the event listeners, the `measure` event that
    is triggered when the measure finishes, and the `measurepartial` event that is
    triggered on every mouse movement.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们指定了事件监听器，即当测量完成时触发的 `measure` 事件和每次鼠标移动时触发的 `measurepartial` 事件。
- en: 'Both events execute the `updateMeasure` function, which is responsible to update
    the measure value shown in the toolbar:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 两个事件都会执行 `updateMeasure` 函数，该函数负责更新工具栏中显示的测量值：
- en: '[PRE47]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The code responsible for handling the logic to hold only one button or a control
    active at a time is implemented in the `pointAction` function and makes use of
    the `currentControl` variable.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 负责处理逻辑以同时保持一个按钮或控件激活的代码实现于 `pointAction` 函数中，并使用了 `currentControl` 变量。
- en: The goal is simple, each time a button is pressed, the current selected button
    is toggled and the related control is deactivated before activating the new selected
    control.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 目标很简单，每次按下按钮时，当前选定的按钮会被切换，相关的控件在激活新选定的控件之前会被停用。
- en: There's more...
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The **GeoExt** project ([http://geoext.org](http://geoext.org)), is a toolkit
    based on ExtJS ([http://www.sencha.com/products/extjs/](http://www.sencha.com/products/extjs/))
    with a rich set of user interface components to simplify the creation of rich
    web applications.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '**GeoExt**项目([http://geoext.org](http://geoext.org))，是一个基于ExtJS([http://www.sencha.com/products/extjs/](http://www.sencha.com/products/extjs/))的工具包，它提供了一套丰富的用户界面组件，以简化丰富网络应用的开发。'
- en: Creating a layer tree or a grid to edit a feature's attributes is pretty simple
    with GeoExt.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GeoExt创建一个图层树或网格来编辑特征属性相当简单。
- en: Note
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The ESRI's JavaScript API used to build web applications is based on the Dojo
    Toolkit framework.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 用于构建网络应用的 ESRI JavaScript API 基于dojo Toolkit 框架。
- en: Anyway, both are great frameworks.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 不管怎样，这两个都是优秀的框架。
- en: See also
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参见
- en: The *Placing controls outside the map* recipe in [Chapter 5](ch05.html "Chapter 5. Adding
    Controls"), *Adding Controls*
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html "第5章。添加控件")的*将控件放置在地图外部*配方中，*添加控件*
- en: The *Adding and removing controls* recipe in [Chapter 5](ch05.html "Chapter 5. Adding
    Controls"), *Adding Controls*
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html "第5章。添加控件")的*添加和删除控件*配方中，*添加控件*
