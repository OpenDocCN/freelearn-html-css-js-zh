- en: Chapter 6. Theming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how themes work using the `img` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding how themes work using the `theme` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delimiting tiles in a raster layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new OpenLayers theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting actions outside the controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is worth mentioning that in software applications, the first impressions
    are the most important things, and they are given by two factors: the look and
    feel.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is all oriented to show how we can improve the look and feel of
    our web mapping application by theming OpenLayers.
  prefs: []
  type: TYPE_NORMAL
- en: As many other web applications, the look and feel of the OpenLayers library
    is controlled using images and CSS classes, which define the position, dimensions,
    and visual aspects of any OpenLayers component.
  prefs: []
  type: TYPE_NORMAL
- en: At this moment, with the Version 2.11, we can find the `img` and `theme` folders
    within the bundle distribution, and both are used to control the look of the OpenLayers
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to place these folders in your project when using OpenLayers as mentioned
    in the *Different ways to include OpenLayers* recipe in [Chapter 1](ch01.html
    "Chapter 1. Web Mapping Basics"), *Web Mapping Basics.*
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/7843_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `theme` folder contains CSS files, as well as some images used within the
    CSS, while the `img` folder contains only images, used by some controls in a more
    hardcoded (and not recommended) way.
  prefs: []
  type: TYPE_NORMAL
- en: We can say, the use of the `theme` folder with CSS styles is the preferred way
    to implement controls, while the use of the `img` folder remains for those controls
    that are not updated to work with CSS styles.
  prefs: []
  type: TYPE_NORMAL
- en: Becoming a *great* web designer is out of the scope of this book, but it is
    true that if we want to tune up the OpenLayers appearance a bit, we need to have
    some knowledge of HTML and how CSS works.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can find a description of the CSS standard at [http://en.wikipedia.org/wiki/Cascading_Style_Sheets](http://en.wikipedia.org/wiki/Cascading_Style_Sheets)
    but we can find tons of great tutorials looking on the Net, such as [http://www.csstutorial.net](http://www.csstutorial.net).
  prefs: []
  type: TYPE_NORMAL
- en: 'The browsers work with three main technologies: HTML, CSS, and JavaScript.
    Summarized in really short sentences, we can say:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML defines the content of a web page using paragraphs, titles, sections, and
    so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS defines the visual aspects of the HTML elements, that is, which text color
    a paragraph must use, the text size of a title, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, JavaScript is a programming language processed by the browser that
    can be used to manipulate dynamically any aspect of the page. For example, we
    can add new HTML elements, change CSS, and check if the fields in a form are valid
    before sending it to the server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Document Object Model (DOM)** is a standard for accessing and manipulating
    HTML documents. We can think it decomposes an HTML document like a tree of elements
    and attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'See: [http://www.w3schools.com/htmldom/default.asp](http://www.w3schools.com/htmldom/default.asp)'
  prefs: []
  type: TYPE_NORMAL
- en: OpenLayers belongs to the third category. It is a JavaScript library that allows
    us to create web mapping applications using concepts such as maps, layers, or
    features, but abstracting us from the HTML DOM elements and the CSS aspects required
    to render them.
  prefs: []
  type: TYPE_NORMAL
- en: When we create an OpenLayers component, such as a map, a layer, or a control
    instance, it also creates the required HTML elements to render them and puts them
    at the right place of the DOM structure of our HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this chapter is to show how to theme the most important OpenLayers
    components. So, using many of the next recipes, we will be able to create a fresh
    web-mapping application with a customized look.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how themes work using the img folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Understanding how themes work using the img folder](img/7843_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As explained in the *Introduction* section of this chapter, there are controls
    that are themed simply using the images stored in the `img` folder.
  prefs: []
  type: TYPE_NORMAL
- en: This way is the oldest way to theme a control, and for newer implementations,
    the preferred way of theming is using CSS, that is, using the `theme` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Until its update, we could make use of controls that work with any of the two
    forms of theming, so it is important to know how to theme both.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to describe how to theme the `PanZoomBar` control
    that uses the old way based on the images in the `img` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create an HTML file with OpenLayers dependencies and start adding in the body
    element of the document, the `div` element to hold the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the following JavaScript code to initialize the map and add a base
    layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, simply create an `OpenLayers.Control.PanZoomBar` control instance
    and add to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we create the control, what really happens is OpenLayers automatically
    creates a set of HTML elements and places them in the page's DOM structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the OpenLayers'' JavaScript API perspective, it is simply adding a control
    component to the map but from the HTML code point of view, it means that a complex
    set of elements is created on the page to represent all the buttons and images
    required to look like a nice pan and zoom control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking at the generated code we can say that:'
  prefs: []
  type: TYPE_NORMAL
- en: The main control element uses a CSS class named `olControlPanZoomBar`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the images used are loaded from the OpenLayers `img` folder, such as `img/north-mini.png,
    img/east-mini.png` and `img/zoom-minus-mini.png`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The position of the control, and its buttons, are set in the `style` attribute
    instead of using a CSS class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The conclusion is trivial: a change in the look of this control can only be
    done by changing the images in the `img` folder.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, if we want to place the control at a different position, we need
    to play with the `OpenLayers.Control.PanZoom.X` and `OpenLayers.Control.PanZoom.Y`
    properties, which are used to set the value of the `top` and `left` properties
    in the `style` attribute of the main control HTML element. For example, setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Produces an HTML code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This means, although you redefine the properties `top` and `left` in the `olControlPanZoomBar`
    class, they will not take effect because the properties specified in the `style`
    attribute take precedence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a couple of important things to note.
  prefs: []
  type: TYPE_NORMAL
- en: First, every OpenLayers instance has an ID property. We can set it manually
    when creating the instance or leave OpenLayers to compute one for us, but take
    into account that the ID must be unique.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the ID for the `PanZoomBar` control is the string `OpenLayers.Control.PanZoomBar_71`
    and it is also used to identify the HTML elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, if a control makes use of a CSS class, by convention, the name of the
    class will be `olControl` followed by the name of the control, such as: `olControlPanZoomBar`.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Understanding how themes work using the theme folder* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding and removing controls* recipe in [Chapter 5](ch05.html "Chapter 5. Adding
    Controls"), *Adding Controls*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding how themes work using the theme folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have explained in the chapter's introduction, there are some OpenLayers
    controls strongly based on CSS classes to be the theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this group, we can find the `PanPanel` control, a small control formed by
    a set of four buttons that allows the user to pan the map in four directions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding how themes work using the theme folder](img/7843_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create an HTML page and add the OpenLayers library dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After this, we need to include the CSS file with the theme to be used. Here
    we are using the default theme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the `body` element of the document, add the `div` element to hold the
    map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within a `script` element, add the code to create the map with a base layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, create an `OpenLayers.Control.PanPanel` instance and add it to the
    map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the `OpenLayers.Control.PanPanel` instance is added to the map, what really
    happens is a set of new HTML elements are added to the DOM page structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: There is one main element for the control that contains other elements representing
    the four buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main HTML element has an attached CSS class with the name `olControlPanPanel`.
    This class name is automatically created by OpenLayers and follows this convention:
    `olControl` plus the control name.'
  prefs: []
  type: TYPE_NORMAL
- en: All the CSS classes used in the previous HTML code can be found in the source
    code in the `theme/default/style.css` theme file.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Looking at the CSS classes used by the control, we can understand a bit better
    how it works.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we change the position of the control by modifying the properties of
    the CSS class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, CSS code sets the image to be used and the size of the buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We can see how the image sprite is taken from the file `theme/default/img/pan-panel.png:`
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/7843_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An **image sprite** is a collection of images put into the same file. Later,
    using the CSS properties we can get once piece of this image sprite to be used
    on an element.
  prefs: []
  type: TYPE_NORMAL
- en: Image sprites reduce the number of requests to the server when a page loads.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, each button defines the required properties to extract the piece of image
    to be used as the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We can see how with little CSS knowledge we can modify almost any desired thing
    of the control.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Understanding how themes work using the img folder* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding and removing controls* recipe in [Chapter 5](ch05.html "Chapter 5. Adding
    Controls"), *Adding Controls*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a simple full screen map* recipe in [Chapter 1](ch01.html "Chapter 1. Web
    Mapping Basics"), *Web Mapping Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Different ways for including OpenLayers* recipe in [Chapter 1](ch01.html
    "Chapter 1. Web Mapping Basics"), *Web Mapping Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delimiting tiles in a raster layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To show how easy it is to change the appearance of an element using CSS, in
    this recipe we are going to add a border to all the tiles from any raster layer
    to show where the limits of each tile are:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Delimiting tiles in a raster layer](img/7843_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create an HTML file with OpenLayers dependencies and add within the `head`
    section a `style` element with the following CSS code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, in the `body` element of the document, add the `div` element to hold
    the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the following JavaScript code to initialize the map and add a base
    layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code to create the map instance and layer is pretty simple, we have simply
    created an instance of both and added the layer to the map. Finally, we have centered
    the map's viewport.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though it seems incredible, all the magic of this recipe is in the CSS
    code at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Every raster layer class uses images to render the tiles of data. To do so,
    the layer creates some HTML elements and adds them to the DOM structure as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Every OpenLayers component is transformed in one or more HTML elements that
    use the CSS classes to define the way they are visualized.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, a `div` element is created for the whole layer identified by
    `OpenLayers.Layer.OSM_315`, which has the class parameter set to `olLayerDiv`
    CSS. Within it we can find `img` elements that point to the tiles to be rendered.
    These elements have applied the `olTileImage` class.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to the CSS classes in this recipe, we have set a border on each tile
    by simply specifying the appropriate property.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Understanding how themes work using the theme folder* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new OpenLayers theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There can be situations where we desire a completely different look for the
    OpenLayers theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we mentioned in the chapter''s introduction and other recipes (Understanding
    *how themes work using the img folder* and *Understanding how themes work using
    the theme folder)*, OpenLayers theming is based on images and CSS files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new OpenLayers theme](img/7843_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe we are going to see how we can create a new OpenLayers theme
    based on the default theme we can find in the `theme/default` folder. We are going
    to change some aspects of the most common controls, such as scale or scale line,
    overview map, or layer switcher.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a new theme, we need to create a replica for the content of the `img`
    and `theme` folders of the OpenLayers distribution. Both folders contain images
    to be used in controls, so it is easy to see why a good graphic design is important
    to create a good theme.
  prefs: []
  type: TYPE_NORMAL
- en: The theme called **green theme**, used in this chapter, is divided into folders
    `recipes/data/green_img` and `recipes/data/green_theme`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create an HTML file. In the `head` section we need to attach, in addition to
    the dependencies to the OpenLayers library, the CSS stylesheets for our custom
    theme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before continuing to see the code at the `head` section, let''s write the following
    code within the `body` section that will hold the map instance and the navigation
    history tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Again, within the head section, add the following piece of styling code necessary
    for the previous `div` element used to hold the navigation history tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Within the `script` section, add the following JavaScript code that specifies
    where OpenLayers can find the folder `img:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `init` function, which is executed when the `body` is loaded.
    It creates the map instance, and adds a base layer and a set of most common controls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's start briefly by describing the JavaScript code. We have created a map,
    added a base layer, and finally added a set of controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specially take a look at how we have added the NavigationHistory control, because
    this is the first themed point of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: We have instantiated the control and placed its buttons on a `Panel` control.
    In addition to rendering the `Panel` control in a specific `div` element of the
    web page, we have set its `div` property pointing to the desired element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CSS `historyClass` is a class that allows us to place the control that
    is floating on the right-hand side (close to the editing toolbar control):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7843_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The rest of the theme is based on two important folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because some controls are based on the images contained in the `img` folder,
    we have set the path to this folder at the beginning of the JavaScript code. Controls
    such as `PanZoomBar` or the `LayerSwitcher` require the following folder to get
    their icons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the `PanZoomBar` control''s icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7843_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the other hand, controls such as the `Scale` or `ScaleLine`, the `MousePosition`,
    or also many aspects of the `LayerSwitcher` control are defined via CSS through
    the `theme` folder, by its `style.css` file and their images. This is included
    with a `link` tag in the document''s header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `green_theme/style.css` file does not contain a complete redefinition of
    the classes we found in the default theme of OpenLayers. We have simply redefined
    some classes that affect the color or position of some controls. For this, first
    we have included the `default/style.css` file and later our custom `green_theme/style.css`
    file, which only redefines some classes by adding or changing the styles.
  prefs: []
  type: TYPE_NORMAL
- en: There is no magic recipe on how to theme CSS-based controls. We need to check
    the generated HTML code for the controls and see which CSS classes they use and
    which other we can apply. Let's see some themed controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `LayerSwitcher` control, we have changed the font size, the background
    and border color, added a border radius (only valid for CSS3 compatible browsers),
    and changed the title for the base and overlay sections to use italics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the `LayerSwitcher` control with the changes
    done using the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7843_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the `OverviewMap` control, we have added a background and border color,
    a border radius, and moved it a bit to the top to leave space for the following
    controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the `OverviewMap` control with the changes done
    using the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7843_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `Scale` and `ScaleLine` controls have been moved to the left-hand side
    and the color has been changed to follow the green theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the `Scale` and `ScaleLine` controls with the
    changes done using the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7843_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the `MousePosition` and `Permalink` controls, we have slightly moved them
    and changed the text color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the `MousePosition` and `Permalink` controls
    with the changes done using the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7843_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, for the `NavigationHistory` control, we need to redefine a CSS class
    so the buttons are ordered horizontally, instead of vertically, which is the default
    mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/7843_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we mentioned, there is no easy way to theme a component. We need to take
    into account the HTML code that will render the component, the images it uses,
    and the possible CSS styles applied.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest solution to change the look of your mapping applications is to
    play with the icons and CSS as we did here. More drastic improvements include
    creating your own controls or placing the controls on external buttons, offered
    by an external framework such as Dojo ([http://dojotoolkit.org](http://dojotoolkit.org)),
    jQueryUI ([http://jqueryui.com](http://jqueryui.com)), or ExtJS ([http://www.sencha.com/products/extjs](http://www.sencha.com/products/extjs)),
    and writing the required code to activate or deactivate the controls. A good sample
    of this is the GeoExt project ([http://geoext.org](http://geoext.org)) that offers
    rich components based on the previous ExtJS project.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Understanding how themes work using the img folder* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Understanding how themes work using the theme folder* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding a navigation history control* recipe in [Chapter 5](ch05.html "Chapter 5. Adding
    Controls"), *Adding Controls*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Place controls outside the map* recipe in [Chapter 5](ch05.html "Chapter 5. Adding
    Controls"), *Adding Controls*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting actions outside the controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another different and drastic way to change the look of our applications is
    to place the controls outside the map and attach them to our own components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the OpenLayers controls have two features:'
  prefs: []
  type: TYPE_NORMAL
- en: They realize some action (edit features, create a line, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They know how to render themselves on top of the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To achieve the goal of this recipe, the idea is to separate the visualization
    from the action that the control does. This way, we can create some buttons and
    activate or deactivate a control depending on the button that is pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting actions outside the controls](img/7843_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the screenshot, we are going to create a toolbar and place:'
  prefs: []
  type: TYPE_NORMAL
- en: The same set of controls we can find in `OpenLayers.Control.EditingToolbar`,
    which will allow us to draw points, lines, and polygons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A dropdown button that will allow us to start the `OpenLayers.Control.Measure`
    action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to use the Dojo Toolkit framework ([http://dojotoolkit.org/](http://dojotoolkit.org/))
    which we have used along with the source code of this book, but you can make do
    with plain HTML buttons or `div` elements if preferred.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create an HTML file and add the OpenLayers dependencies, both JavaScript and
    CSS. Add the following CSS classes within the `style` element that will be used
    to style our custom buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s go to create the toolbar. It will consist of four toggle buttons
    to select the editing action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And one drop-down button to choose the kind of measure to do:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the drop-down button created:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/7843_06_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'In addition, the toolbar will hold a span element to show the measured values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can place the `div` element that will hold the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the required JavaScript code to initialize the map, and add a base
    layer and a vector layer to add features to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the controls to the map. First, add the controls related to the `DrawFeature`
    control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then add the `Measure` control, that allows us to measure distances and areas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the functions to handle the buttons that represent the actions of
    the `EditingToolbar` (hand, draw point, draw path, and draw polygon):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And finally, add the code for the two helper functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every control must be attached to the map, but like in this recipe, it is not
    necessary for the control to have a visible representation.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way, we can invoke methods on the `OpenLayers.Map` instance to zoom
    in or zoom out. We can programmatically activate or deactivate a control without
    the need for a panel or an icon to interact with it.
  prefs: []
  type: TYPE_NORMAL
- en: For the three buttons that allow us to create new features (points, lines, and
    polygons), we have created three controls based on the `OpenLayers.Control.DrawFeature`
    control.
  prefs: []
  type: TYPE_NORMAL
- en: 'This control requires two arguments: the vector layer (to add the new feature
    to) and a handler (used to interact with the map while we are creating the feature):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before these three controls (represented as buttons) in the toolbar, there is
    a pointer button that allows us to deactivate the current control and pan the
    map. It does not require any control associated with it. When the button is clicked,
    we simply deactivate the current control allowing the map to be panned again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although visually there are two options in the drop-down button, internally,
    both correspond to the same control, the `OpenLayers.Control.Measure` control.
    When one of the measure options is clicked, we set the handler to be used by the
    control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: We have specified the control property `persist` of `Measure` to `true`. This
    makes the line or polygon that is rendered, to show the measure and stay visible
    on the map when the measure ends.
  prefs: []
  type: TYPE_NORMAL
- en: The `immediate` property allows the measure process to trigger an event every
    time the mouse moves.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have specified to the event listeners, the `measure` event that
    is triggered when the measure finishes, and the `measurepartial` event that is
    triggered on every mouse movement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both events execute the `updateMeasure` function, which is responsible to update
    the measure value shown in the toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The code responsible for handling the logic to hold only one button or a control
    active at a time is implemented in the `pointAction` function and makes use of
    the `currentControl` variable.
  prefs: []
  type: TYPE_NORMAL
- en: The goal is simple, each time a button is pressed, the current selected button
    is toggled and the related control is deactivated before activating the new selected
    control.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **GeoExt** project ([http://geoext.org](http://geoext.org)), is a toolkit
    based on ExtJS ([http://www.sencha.com/products/extjs/](http://www.sencha.com/products/extjs/))
    with a rich set of user interface components to simplify the creation of rich
    web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a layer tree or a grid to edit a feature's attributes is pretty simple
    with GeoExt.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ESRI's JavaScript API used to build web applications is based on the Dojo
    Toolkit framework.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, both are great frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Placing controls outside the map* recipe in [Chapter 5](ch05.html "Chapter 5. Adding
    Controls"), *Adding Controls*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding and removing controls* recipe in [Chapter 5](ch05.html "Chapter 5. Adding
    Controls"), *Adding Controls*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
