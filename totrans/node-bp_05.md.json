["```js\nvar ListView = Backbone.View.extend({\n  render: function() {\n    // ...\n  }\n});\nvar list = new ListView();\n```", "```js\nvar object = {};\n_.extend(object, Backbone.Events);\nobject.on(\"event\", function(msg) {\n  console.log(msg);\n});\nobject.trigger(\"event\", \"an event\");\n```", "```js\nvar User = Backbone.Model.extend({\n  defaults: {\n    name: '',\n    password: '',\n    isAdmin: false\n  }\n});\nvar user = new User({\n  name: 'John',\n  password: '1234'\n});\nconsole.log(user.get('name'));\n```", "```js\nvar User = Backbone.Model.extend({\n  defaults: {\n    name: '',\n    password: '',\n    isAdmin: false\n  }\n});\nvar Accounts = Backbone.Collection.extend({\n  model: User\n});\nvar accounts = new Accounts();\naccounts.add({name: 'John'});\naccounts.add({name: 'Steve'});\naccounts.add({name: 'David'});\naccounts.forEach(function(model) {\n  console.log(model.get('name'));\n});\n```", "```js\nvar LabelView = Backbone.View.extend({\n  tagName: 'span'\n});\nvar label = new LabelView();\nconsole.log(label.el);\n```", "```js\nvar Workspace = Backbone.Router.extend({\n  routes: {\n    \"help\":                 \"help\",\n    \"search/:query\":        \"search\",\n    \"search/:query/p:page\": \"search\"\n  },\n  help: function() {\n    // ...\n  },\n  search: function(query, page) {\n    // ...\n  }\n});\n```", "```js\nvar http = require('http'),\n  fs = require('fs'),\n  files = {},\n  debug = true,\n  port = 3000;\nvar respond = function(file, res) {\n  var contentType;\n  switch(file.ext) {\n    case \"css\": contentType = \"text/css\"; break;\n    case \"html\": contentType = \"text/html\"; break;\n    case \"js\": contentType = \"application/javascript\"; break;\n    case \"ico\": contentType = \"image/ico\"; break;\n    default: contentType = \"text/plain\";\n  }\n  res.writeHead(200, {'Content-Type': contentType});\n  res.end(file.content);\n}\nvar serveAssets = function(req, res) {\n  var file = req.url === '/' ? 'html/page.html' : req.url;\n  if(!files[file] || debug) {\n    try {\n      files[file] = {\n        content: fs.readFileSync(__dirname + \"/\" + file),\n        ext: file.split(\".\").pop().toLowerCase()\n      }\n    } catch(err) {\n      res.writeHead(404, {'Content-Type': 'plain/text'});\n      res.end('Missing resource: ' + file);\n      return;\n    }\n  }\n  respond(files[file], res);\n}\nvar app = http.createServer(function (req, res) {\n  serveAssets(req, res);\n}).listen(port, '127.0.0.1');\nconsole.log(\"Listening on 127.0.0.1:\" + port);\n```", "```js\n{\n  content: '...',\n  ext: '...'\n}\n```", "```js\nvar todos = [],\n  ids = 0;\n```", "```js\n{\n  id: <number>,\n  text: <string>,\n  done: <true | false>\n}\n```", "```js\nvar addToDo = function(data) {\n  data.id = ++ids;\n  todos.push(data);\n  return data;\n}\n```", "```js\nvar deleteToDo = function(id) {\n  var arr = [];\n  for(var i=0; i<todos.length; i++) {\n    if(todos[i].id !== parseInt(id)) {\n      arr.push(todos[i]);\n    }\n  }\n  todos = arr;\n  return id;\n}\nvar editToDo = function(id, data) {\n  for(var i=0; i<todos.length; i++) {\n    if(todos[i].id === parseInt(id)) {\n      todos[i].text = data.text;\n      todos[i].done = data.done;\n      return todos[i];\n    }\n  }\n}\n```", "```js\nvar respondJSON = function(json, res) {\n  res.writeHead(200, {'Content-Type': 'application/json'});\n  res.end(JSON.stringify(json));\n}\n```", "```js\nvar app = http.createServer(function (req, res) {\n  if(req.url.indexOf('/api') === 0) {\n    serveToDos(req, res);\n  } else {\n    serveAssets(req, res);\n  }\n}).listen(port, '127.0.0.1');\n```", "```js\nvar serveToDos = function(req, res) {\n  if(req.url.indexOf('/api/all') === 0) {\n    respondJSON(todos, res);\n  } else if(req.url.indexOf('/api/todo') === 0) {\n    if(req.method == 'POST') {\n      processPOSTRequest(req, function(data) {\n        respondJSON(addToDo(data), res);\n      });\n    } else if(req.method == 'DELETE') {\n      deleteToDo(req.url.split(\"/\").pop());\n      respondJSON(todos, res);\n    } else if(req.method == 'PUT') {\n      processPOSTRequest(req, function(data) {\n        respondJSON(editToDo(req.url.split(\"/\").pop(), data), res);\n      });\n    }\n  } else {\n    respondJSON({error: 'Missing method'}, res);\n  }\n}\n```", "```js\nvar processPOSTRequest = function(req, callback) {\n  var body = '';\n  req.on('data', function (data) {\n    body += data;\n  });\n  req.on('end', function () {\n    callback(JSON.parse(body));\n  });\n}\n```", "```js\naddToDo({text: \"Learn JavaScript\", done: false});\naddToDo({text: \"Learn Node.js\", done: false});\naddToDo({text: \"Learn BackboneJS\", done: false});\n```", "```js\n<!doctype html>\n<html>\n  <head>\n     <link rel=\"stylesheet\" type=\"text/css\" href=\"css/styles.css\">\n  </head>\n  <body>\n\n    <div id=\"menu\">           \n      <a href=\"#new\">Add new ToDo</a>\n      <a href=\"#\">Show all ToDos</a>\n    </div>\n    <div id=\"content\"></div>\n\n    <script src=\"img/jquery-1.10.2.min.js\"></script>\n    <script src=\"img/underscore-min.js\"></script>\n    <script src=\"img/backbone.js\"></script>\n    <script src=\"img/app.js\"></script>\n    <script src=\"img/ToDo.js\"></script>\n    <script src=\"img/ToDos.js\"></script>\n    <script src=\"img/list.js\"></script>\n    <script src=\"img/add.js\"></script>\n    <script src=\"img/edit.js\"></script>\n    <script>\n      window.onload = app.init;\n    </script>\n    </body>\n</html>\n```", "```js\nvar app = (function() {\n  var init = function() { }\n  return {\n    models: {},\n    collections: {},\n    views: {},\n    init: init\n  }\n})();\n```", "```js\nvar content;\nvar init = function() {\n  content = $(\"#content\");\n}\n```", "```js\napp.models.ToDo = Backbone.Model.extend({\n  defaults: {\n    text: '',\n    done: false\n  },\n  url: function() {\n      return '/api/todo/' + this.get(\"id\");\n  }\n});\n```", "```js\napp.collections.ToDos = Backbone.Collection.extend({\n  model: app.models.ToDo,\n  url: '/api/all'\n});\n```", "```js\nvar content,\n   todos;\nvar init = function() {\n    content = $(\"#content\");\n    todos = new app.collections.ToDos();\n    todos.fetch({ success: function() {\n\n  }});\n}\n```", "```js\nevents: {\n  'click #delete': 'deleteToDo',\n  'click #edit': 'editToDo',\n  'click #change-status': 'changeStatus'\n}\n```", "```js\n<script type=\"text/template\" id=\"tpl-list-item\">\n  <li data-index=\"<%= index %>\" class=\"<%= done %>\">\n    <span><%= index+1 %>. <%= text %></span>\n    <a href=\"#edit/<%= index %>\" id=\"edit\">edit</a>\n    <a href=\"javascript:void(0);\" id=\"change-status\"><%= statusLabel %></a>\n     <a href=\"javascript:void(0);\" id=\"delete\">delete</a>\n  </li>\n</script>\n```", "```js\napp.views.list = Backbone.View.extend({\n  events: {\n    'click #delete': 'deleteToDo',\n    'click #change-status': 'changeStatus'\n  },\n  getIndex: function(e) {\n    return parseInt(e.target.parentNode.getAttribute(\"data-index\"));\n  },\n  deleteToDo: function(e) {\n    this.model.at(this.getIndex(e)).destroy();\n    this.render();\n  },\n  changeStatus: function(e) {\n    var self = this;\n    var model = this.model.at(this.getIndex(e));\n    model.save({ done: !model.get(\"done\") }, {\n      wait: true,\n      success: function() {\n        self.render()\n      }\n    });\n  },\n  render: function() {\n    var html = '<ul class=\"list\">', \n    self = this;\n    this.model.each(function(todo, index) {\n    var template = _.template($(\"#tpl-list-item\").html());\n    html += template({ \n      text: todo.get(\"text\"),\n        index: index,\n        done: todo.get(\"done\") ? \"done\" : \"not-done\",\n        statusLabel: todo.get(\"done\") ? \"mark as not done\" : \"mark as done\"\n      });\n    });\n    html += '</ul>';\n    this.$el.html(html);\n    this.delegateEvents();\n    return this;\n  }\n});\n```", "```js\nvar content,\n  todos;\nvar showList = function() {\n  content.empty().append(list.render().$el);\n}\nvar init = function() {\n  content = $(\"#content\");\n  todos = new app.collections.ToDos();\n  list = new app.views.list({model: todos});\n  todos.fetch({ success: function() {\n    showList();\n  }});\n}\n```", "```js\nvar app = (function() {\n  var todos, content, list, add, edit, router;\n  var showList = function() {\n    content.empty().append(list.render().$el);\n  }\n  var showNewToDoForm = function() {\n    content.empty().append(add.$el);\n    add.delegateEvents();\n  }\n  var showEditToDoForm = function(data) {\n    content.empty().append(edit.render(data).$el);\n  }\n  var home = function() {\n    router.navigate(\"\", {trigger: true});\n  }\n  var RouterClass = Backbone.Router.extend({\n    routes: {\n      \"new\": \"newToDo\",\n      \"edit/:index\": \"editToDo\",\n      \"\": \"list\"\n    },\n    list: showList,\n    newToDo: showNewToDoForm,\n    editToDo: function(index) {\n      showEditToDoForm({ index: index });\n    }\n  });\n  var init = function() {\n    todos = new app.collections.ToDos();\n    list = new app.views.list({model: todos});\n    edit = (new app.views.edit({model: todos}));\n    add = (new app.views.add({model: todos})).render();\n    content = $(\"#content\");\n    todos.fetch({ success: function() {\n      router = new RouterClass();\n      Backbone.history.start();\n    }});\n    add.on(\"saved\", home);\n    edit.on(\"edited\", home);\n  }\n  return {\n    models: {},\n    collections: {},\n    views: {},\n    init: init\n  }\n})();\n```", "```js\napp.views.add = Backbone.View.extend({\n  events: {\n    \"click button\": \"save\"\n  },\n  save: function() {\n    var textarea = this.$el.find(\"textarea\");\n    var value = textarea.val();\n    if(value != \"\") {\n      var self = this;\n      this.model.create({ text: value }, { \n        wait: true,\n        success: function() {\n          textarea.val(\"\");\n          self.trigger(\"saved\");\n        }\n      });\n    } else {\n      alert(\"Please, type something.\");\n    }\n  },\n  render: function() {\n    var template = _.template($(\"#tpl-todo\").html());\n    this.$el.html(template());\n    this.delegateEvents();\n     return this;\n  }\n});\n```", "```js\n<script type=\"text/template\" id=\"tpl-todo\">\n  <div class=\"form\">\n    <textarea></textarea>\n     <button>save</button>\n  </div>\n</script>\n```", "```js\napp.views.edit = Backbone.View.extend({\n  events: {\n    'click button': 'save'\n  },\n  save: function() {\n    var textarea = this.$el.find('textarea');\n    var value = textarea.val();\n    if(value != '') {\n      var self = this;\n      this.selectedModel.save({text: value}, {\n      wait: true,\n      success: function() {\n        self.trigger('edited');\n      }\n    });\n    } else {\n      alert('Please, type something.');\n    }\n  },\n  render: function(data) {\n    this.selectedModel = this.model.at(data.index);\n    var template = _.template($('#tpl-todo').html());\n    this.$el.html(template());\n    this.$el.find('textarea').val(this.selectedModel.get('text'));\n    this.delegateEvents();\n    return this;\n  }\n});\n```"]