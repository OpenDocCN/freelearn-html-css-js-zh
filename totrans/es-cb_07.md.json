["```js\n// main.js \nclass Rocket {} \n\nexport function main() { \n  const saturnV = new Rocket(); \n  const falconHeavy = new Rocket(); \n  console.log(saturnV); \n  console.log(falconHeavy); \n}  \n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n} \n```", "```js\n// main.js \nexport function main() { \n  const saturnV = new Rocket('Saturn V'); \n  const falconHeavy = new Rocket('Falcon Heavy'); \n  console.log(saturnV.name, saturnV); \n  console.log(falconHeavy.name, falconHeavy); \n} \n```", "```js\nconst saturnV = new Rocket('Saturn V');\n```", "```js\n// main.js \nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n} \n```", "```js\n// main.js \nclass Rocket { \n  // ... \n  takeOff(countdown = 1000) { \n    console.log(this.name + ' starting countdown.'); \n    setTimeout(() => { \n      console.log(`Blastoff! ${this.name} has taken off`); \n    }, countdown); \n  } \n} \n```", "```js\n// main.js \nexport function main() { \n  const saturnV = new Rocket('Saturn V'); \n  const falconHeavy = new Rocket('Falcon Heavy'); \n  saturnV.takeOff(500); \n  falconHeavy.takeOff(); \n}  \n```", "```js\n// main.js class Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n} \n\nclass InactiveRocket { \n  constructor(name) { \n    this.name = name; \n  } \n}  \n```", "```js\n// main.js class Rocket { \nfunction printRocketType(rocket) { \n  if (rocket instanceof InactiveRocket) { \n    console.log(rocket.name + ' is an inactive rocket'); \n  } else { \n    console.log(rocket.name + ' is active'); \n  } \n} \n```", "```js\n// main.js \nexport function main() { \n  const saturnV = new InactiveRocket('Saturn V'); \n  const falconHeavy = new Rocket('Falcon Heavy'); \n\n  [saturnV, falconHeavy].forEach(printRocketType); \n} \n```", "```js\nclass Rocket { \n  constructor(name) { \n    this.name = name; \n  } \n\n  get readOnlyValue() { \n    return 'Cant' touch this.'; \n  } \n} \n```", "```js\nexport function main() { \n  const saturnV = new Rocket('Saturn V'); \n\n  console.log(saturnV.name); \n  saturnV.name = 'Saturn Five'; \n  console.log(saturnV.name); \n\n  console.log(saturnV.readOnlyValue); \n  // throws error \n  saturnV.readOnlyValue = 'somethingElse'; \n} \n```", "```js\nclass Rocket { \n  constructor(name) { \n    this._secretName = name; \n  }  \n} \n```", "```js\nclass Rocket { \n  // ... \n get name() { return this._secretName;\n } set name(newValue) { if (typeof newValue === 'string') { this._secretName = newValue; } else { console.error('Invalid name: ' + newValue) } }\n```", "```js\nexport function main() { \n  const saturnV = new Rocket('Saturn V'); \n  console.log(saturnV.name) \n\n  saturnV.name = 'Saturn Five'; \n  console.log(saturnV.name) \n\n  saturnV.name = 5; \n  console.log(saturnV.name) \n} \n```", "```js\n//main.js\nlet rocketMap = {};  \n\nclass Rocket {} \n```", "```js\nclass Rocket { \n  // ... \n static find (name) { return rocketMap[name]; } \n} \n```", "```js\nclass Rocket { \n  // ... \n constructor(name) { this.name = name; rocketMap[name] = this; } \n} \n```", "```js\n//main.js\nexport function main() { \n  const saturnV = new Rocket('Saturn V'); \n  const falconHeavy = new Rocket('Falcon Heavy'); \n\n  console.log('Is Saturn V?', saturnV === Rocket.find('Saturn \n  V')); \n  console.log('Is Falcon Heavy?', falconHeavy === \n  Rocket.find('Saturn V')); \n  console.log('Is Same Rocket?', Rocket.find('Saturn V') === \n  Rocket.find('Saturn V')); \n} \n```"]