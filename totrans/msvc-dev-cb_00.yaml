- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why microservices?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Microservices has become an increasingly popular subject over the last few
    years. As with any new architectural concept, there is plenty of room for misunderstanding.
    Even the term microservices is confusing. Newcomers are often unsure about the
    appropriate size of a microservice (hint: it''s not actually about the size of
    the code base) and can get stuck on how to get started with this architectural
    style.'
  prefs: []
  type: TYPE_NORMAL
- en: Service-oriented architectures are nothing new. Web services were being promoted
    by various companies in the 1990s as a solution to large, inflexible code bases.
    The promise was that web services would provide reusable capabilities that could
    be easily consumed by your code bases. Technologies such as SOAP and WSDL started
    gaining adoption, but never seemed to deliver on the ease of use promise. Meanwhile,
    open source languages such as PHP, Ruby, and Python with frameworks such as Symfony,
    Rails, and Django made developing monolithic web-centric code bases easier.
  prefs: []
  type: TYPE_NORMAL
- en: Fast forward a couple of decades and we started seeing a renewed interest in
    services. So, what's changed? For one, with the advent of rich web and mobile
    applications, every system is now a distributed system. Thanks to the advent of
    cloud computing, compute and storage resources are cheaper than they've ever been.
    Containers are changing the way we think about deploying and operating our services.
    Many consumer services are outgrowing their monolithic code bases, and teams are
    finding them hard to scale. Microservices can help with many of these challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Microservice prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microservices aren't a panacea. While they have many benefits (which we'll discuss
    later), they also introduce some specific challenges. Before deciding to make
    the move to microservices, it's important to have certain infrastructure and tooling
    in place. Martin Fowler has written about Microservices Prerequisites ([https://martinfowler.com/bliki/MicroservicePrerequisites.html](https://martinfowler.com/bliki/MicroservicePrerequisites.html)),
    as has Phil Calcado ([http://philcalcado.com/2017/06/11/calcados_microservices_prerequisites.html](http://philcalcado.com/2017/06/11/calcados_microservices_prerequisites.html)).
    I won't repeat what others have written; instead, I will just say that it pays
    to have a certain amount of automation and monitoring in place before you start
    developing microservices. Your teams should be comfortable sharing on-call duties
    and you should have a system for managing alerts and escalations, such as PagerDuty
    ([http://pagerduty.com/](http://pagerduty.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: Microservices benefits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The various benefits of microservices are as discussed in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a monolithic code base, scaling is an all-or-nothing approach. Microservices
    make it easier to scale separate parts of your application based on their own
    needs. For example, you might have a particular part of your application that
    is in the critical path of every user request (that is, authentication/authorization
    services), whereas other parts are only used by a subset of your users (that is,
    search or messaging). Different traffic patterns will translate to different scaling
    needs and different techniques that should be used to scale a service. A service
    that requires a read for every request from a user should use a data store that
    makes reads cheap. Services that do not need to provide strongly consistent results
    can take advantage of extensive caching.
  prefs: []
  type: TYPE_NORMAL
- en: Team organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When teams of engineers are working on separate code bases with separate deployments,
    they are able to make a lot of decisions independently, without the need to coordinate
    with other teams in the organization. This means that engineers are free to commit
    code, design their own code review processes, and deploy to production without
    always needing to coordinate. In a monolith, it's not uncommon for engineers to
    have to get their changes into a queue that is then deployed at a set time with
    changes from other teams. If something goes wrong (poison deploys are one of the
    most common causes of outages), then the whole change set gets rolled back, delaying
    work by multiple teams. Microservices help you avoid this by allowing teams to
    move with more autonomy.
  prefs: []
  type: TYPE_NORMAL
- en: Reliability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a monolith fails, it tends to fail completely. A database is unavailable,
    and then the application tries to use stale connections in a connection pool,
    eventually the threads or processes serving requests lock up, and users are left
    with a white screen of death or a inoperable mobile application. Microservices
    allow you to decide on a case-by-case basis how a failure in a particular part
    of your application should be treated. If your service cannot reach a database,
    perhaps it's better to return a stale cache, or an empty response. If your service
    has to throw up its hands and start returning HTTP 503 responses, upstream services
    can respond by applying back pressure, allowing the service to catch up. Microservices
    give you much more freedom to isolate failures in your system, resulting in a
    happier experience for your users.
  prefs: []
  type: TYPE_NORMAL
- en: This book will serve as a handy reference for many of the subjects that will
    come up as you develop microservices. We'll start with recipes that will help
    you make the transition from a monolith to a suite of microservices. Subsequent
    chapters will address specific areas or challenges that come up when choosing
    how best to architect and manage your microservices. Recipes that cover code will
    include working, simple, tested examples that you can use in your own applications.
    My hope is that this book will help you think about, plan, and execute the development
    of microservice-based applications. Enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a developer who would like to build effective and scalable microservices,
    then this book is for you. Basic knowledge of the microservices architecture is
    assumed.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](d5b36f18-79eb-4c0a-bbde-3e94733ef97c.xhtml), *Breaking the Monolith*,
    shows how to make the transition from monolith to microservices, with the recipes
    focused on architectural design. You''ll learn how to manage some of the initial
    challenges when you begin to develop features using this new architectural style.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ab796ed6-2bb5-4fc1-b6db-6283ab5c54b4.xhtml), *Edge Services*, teaches
    you how to use open source software to expose your services to the public internet,
    control routing, extend your service''s functionality, and handle a number of
    common challenges when deploying and scaling microservices.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](f17e8591-c928-44a7-b4b3-fb1f0bf9fcfe.xhtml), *Inter-Service Communication*,
    discusses recipes that will enable you to confidently handle the various kinds
    of interactions we''re bound to require in a microservice architecture.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](21f75d15-5ff8-42f7-b96c-281dcfa2e008.xhtml), *Client Patterns*,
    discusses techniques for modeling dependent service calls and aggregating responses
    from various services to create client-specific APIs. We''ll also discuss managing
    different microservices environments and making RPC consistent with JSON and HTTP,
    as well as the gRPC and Thrift binary protocols.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](b569ef24-285f-40bf-97b0-0ac9c1a79494.xhtml), *Reliability Patterns*,
    discusses a number of useful reliability patterns that can be used when designing
    and building microservices to prepare for and reduce the impact of system failures,
    both expected and unexpected.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](5c67f295-78fb-4ae9-a596-39f384f6e9f2.xhtml), *Security*, includes
    recipes that will help you learn a number of good practices to consider when building,
    deploying, and operating microservices.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](fc3632cc-83c0-44ff-b11d-87f556f7b46b.xhtml), *Monitoring and Observability*,
    introduces several tenants of monitoring and observability. We''ll demonstrate
    how to modify our services to emit structured logs. We''ll also take a look at
    metrics, using a number of different systems for collecting, aggregating, and
    visualizing metrics.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](1bd9cb03-f167-4c1c-9351-cf55eccd97cc.xhtml), *Scaling*, discusses
    load testing using different tools. We will also set up auto-scaling groups in
    AWS, making them scalable on demand. This will be followed by strategies for capacity
    planning.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](f38de7a8-a845-4594-9d66-8402e9f0c14b.xhtml), *Deploying Microservices*,
    discusses containers, orchestration, and scheduling, and various methods for safely
    shipping changes to users. The recipes in this chapter should serve as a good
    starting point, especially if you''re accustomed to deploying monoliths on virtual
    machines or bare metal servers.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This books assumes basic knowledge of microservices architectures. Other instructions
    are mentioned in the respective recipes as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packtpub.com](http://www.packtpub.com/support).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Microservices-Development-Cookbook](https://github.com/PacktPublishing/Microservices-Development-Cookbook).
    We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "Open the newly created service object in the `app/services/attachments_service.rb`
    file and move the responsibility for uploading the file to the `AttachmentsService#upload`
    method."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Installing and managing a Kubernetes cluster is beyond the scope
    of this book. Luckily, a project called **Minikube** allows you to easily run
    a single-node Kubernetes cluster on your development machine."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Sections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find several headings that appear frequently (*Getting
    ready*, *How to do it...*).
  prefs: []
  type: TYPE_NORMAL
- en: 'To give clear instructions on how to complete a recipe, use these sections
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section tells you what to expect in the recipe and describes how to set
    up any software or any preliminary settings required for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section contains the steps required to follow the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: Email `feedback@packtpub.com` and mention the book title
    in the subject of your message. If you have questions about any aspect of this
    book, please email us at `questions@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packtpub.com` with a
    link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packtpub.com](https://www.packtpub.com/).
  prefs: []
  type: TYPE_NORMAL
