["```js\nnpm install mysql --save\n```", "```js\n{\n    \"db\": \"mysql://root:test@localhost/imagini\"\n}\n```", "```js\nconst settings = require(\"./settings\");\nconst mysql    = require(\"mysql\");\nconst db       = mysql.createConnection(settings.db);\n```", "```js\ndb.connect((err) => {\n    if (err) throw err;\n\n    console.log(\"db: ready\");\n\n    // ...\n    // the rest of our service code\n    // ...\n\n    app.listen(3000, () => {\n        console.log(\"app: ready\");\n    });\n});\n```", "```js\nError: ER_ACCESS_DENIED_ERROR: Access denied for user 'root'@'localhost' (using password: YES)\n```", "```js\ndb.query(\n    `CREATE TABLE IF NOT EXISTS images\n    (\n        id INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,\n        date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        date_used TIMESTAMP NULL DEFAULT NULL,\n        name VARCHAR(300) NOT NULL,\n        size INT(11) UNSIGNED NOT NULL,\n        data LONGBLOB NOT NULL,\n\n        PRIMARY KEY (id),\n        UNIQUE KEY name (name)\n    )\n    ENGINE=InnoDB DEFAULT CHARSET=utf8`\n);\n```", "```js\napp.param(\"image\", (req, res, next, image) => {\n    if (!image.match(/\\.(png|jpg)$/i)) {\n        return res.status(403).end();\n    }\n\n    db.query(\"SELECT * FROM images WHERE name = ?\", [ image ], (err, \n    images) => {\n        if (err || !images.length) {\n            return res.status(404).end();\n        }\n\n        req.image = images[0];\n\n        return next();\n    });\n});\n```", "```js\napp.post(\"/uploads/:name\", bodyparser.raw({\n    limit : \"10mb\",\n    type : \"image/*\"\n}), (req, res) => {\n    db.query(\"INSERT INTO images SET ?\", {\n        name : req.params.name,\n        size : req.body.length,\n        data : req.body,\n    }, (err) => {\n        if (err) {\n            return res.send({ status : \"error\", code: err.code });\n        }\n\n        res.send({ status : \"ok\", size: req.body.length });\n    });\n});\n```", "```js\napp.head(\"/uploads/:image\", (req, res) => {\n    return res.status(200).end();\n});\n```", "```js\napp.get(\"/uploads/:image\", (req, res) => {\n    let image     = sharp(req.image.data);\n    let width     = +req.query.width;\n    let height    = +req.query.height;\n    let blur      = +req.query.blur;\n    let sharpen   = +req.query.sharpen;\n    let greyscale = [ \"y\", \"yes\", \"true\", \"1\", \n    \"on\"].includes(req.query.greyscale);\n    let flip      = [ \"y\", \"yes\", \"true\", \"1\", \n    \"on\"].includes(req.query.flip);\n    let flop      = [ \"y\", \"yes\", \"true\", \"1\", \n    \"on\"].includes(req.query.flop);\n\n    if (width > 0 && height > 0) {\n        image.ignoreAspectRatio();\n    }\n\n    if (width > 0 || height > 0) {\n        image.resize(width || null, height || null);\n    }\n\n    if (flip)        image.flip();\n    if (flop)        image.flop();\n    if (blur > 0)    image.blur(blur);\n    if (sharpen > 0) image.sharpen(sharpen);\n    if (greyscale)   image.greyscale();\n\n    db.query(\"UPDATE images \" +\n             \"SET date_used = UTC_TIMESTAMP \" +\n             \"WHERE id = ?\", [ req.image.id ]);\n\n    res.setHeader(\"Content-Type\", \"image/\" + path.extname(req.image.name).substr(1));\n\n    image.pipe(res);\n});\n```", "```js\napp.delete(\"/uploads/:image\", (req, res) => {\n    db.query(\"DELETE FROM images WHERE id = ?\", [ req.image.id ], (err) \n    => {\n        return res.status(err ? 500 : 200).end();\n    });\n});\n```", "```js\napp.get(\"/stats\", (req, res) => {\n    db.query(\"SELECT COUNT(*) total\" +\n             \", SUM(size) size \" +\n             \", MAX(date_created) last_created \" +\n             \"FROM images\",\n    (err, rows) => {\n        if (err) {\n            return res.status(500).end();\n        }\n\n        rows[0].uptime = process.uptime();\n\n        return res.send(rows[0]);\n    });\n});\n```", "```js\nsetInterval(() => {\n    db.query(\"DELETE FROM images \" +\n             \"WHERE (date_created < UTC_TIMETSTAMP - INTERVAL 1 WEEK \n             AND date_used IS NULL) \" +\n             \" OR (date_used < UTC_TIMETSTAMP - INTERVAL 1 MONTH)\");\n}, 3600 * 1000);\n```", "```js\nnpm install -g nyc\n```", "```js\nnyc npm test\n```", "```js\nnyc report --reporter=html\n```", "```js\nconst chai = require(\"chai\");\nconst http = require(\"chai-http\");\nconst tools = require(\"../tools\");\n\nchai.use(http);\n\ndescribe(\"The image parameter\", () => {\n    beforeEach((done) => {\n        chai\n        .request(tools.service)\n        .delete(\"/uploads/test_image_parameter.png\")\n        .end(() => {\n            return done();\n        });\n    });\n\n    it(\"should reply 403 for non image extension\", (done) => {\n        chai\n        .request(tools.service)\n        .get(\"/uploads/test_image_parameter.txt\")\n        .end((err, res) => {\n            chai.expect(res).to.have.status(403);\n\n            return done();\n        });\n    });\n\n    it(\"should reply 404 for non image existence\", (done) => {\n        chai\n        .request(tools.service)\n        .get(\"/uploads/test_image_parameter.png\")\n        .end((err, res) => {\n            chai.expect(res).to.have.status(404);\n\n            return done();\n        });\n    });\n});\n```", "```js\nif (!image.match(/\\.(png|jpg)$/i)) {\n```", "```js\nif (err || !images.length) {\n```", "```js\nrethinkdb\n```", "```js\nnpm uninstall mysql --save\nnpm install rethinkdb -â€“save\n```", "```js\n{\n    \"db\": {\n        \"host\" : \"localhost\",\n        \"db\" : \"imagini\"\n    }\n}\n```", "```js\nconst rethinkdb = require(\"rethinkdb\");\n```", "```js\nrethinkdb.connect(settings.db, (err, db) => {\n    if (err) throw err;\n\n    console.log(\"db: ready\");\n\n    // ...\n    // the rest of our service code\n    // ...\n\n    app.listen(3000, () => {\n        console.log(\"app: ready\");\n    });\n});\n```", "```js\nrethinkdb.tableCreate(\"images\").run(db);\n```", "```js\nrethinkdb.tableList().run(db, (err, tables) => {\n    if (err) throw err;\n\n    if (!tables.includes(\"images\")) {\n        rethinkdb.tableCreate(\"images\").run(db);\n    }\n});\n```", "```js\napp.post(\"/uploads/:name\", bodyparser.raw({\n    limit : \"10mb\",\n    type : \"image/*\"\n}), (req, res) => {\n    rethinkdb.table(\"images\").insert({\n        name : req.params.name,\n        size : req.body.length,\n        data : req.body,\n    }).run(db, (err) => {\n        if (err) {\n            return res.send({ status : \"error\", code: err.code });\n        }\n\n        res.send({ status : \"ok\", size: req.body.length });\n    });\n});\n```", "```js\napp.param(\"image\", (req, res, next, image) => {\n    if (!image.match(/\\.(png|jpg)$/i)) {\n        return res.status(403).end();\n    }\n\n    rethinkdb.table(\"images\").filter({\n        name : image\n    }).limit(1).run(db, (err, images) => {\n        if (err) return res.status(404).end();\n\n        images.toArray((err, images) => {\n            if (err) return res.status(500).end();\n            if (!images.length) return res.status(404).end();\n\n            req.image = images[0];\n\n            return next();\n        });\n    });\n});\n```", "```js\napp.get(\"/uploads/:image\", (req, res) => {\n    let image     = sharp(req.image.data);\n    let width     = +req.query.width;\n    let height    = +req.query.height;\n    let blur      = +req.query.blur;\n    let sharpen   = +req.query.sharpen;\n    let greyscale = [ \"y\", \"yes\", \"true\", \"1\", \n    \"on\"].includes(req.query.greyscale);\n    let flip      = [ \"y\", \"yes\", \"true\", \"1\", \n    \"on\"].includes(req.query.flip);\n    let flop      = [ \"y\", \"yes\", \"true\", \"1\", \n    \"on\"].includes(req.query.flop);\n\n    if (width > 0 && height > 0) {\n        image.ignoreAspectRatio();\n    }\n\n    if (width > 0 || height > 0) {\n        image.resize(width || null, height || null);\n    }\n\n    if (flip)        image.flip();\n    if (flop)        image.flop();\n    if (blur > 0)    image.blur(blur);\n    if (sharpen > 0) image.sharpen(sharpen);\n    if (greyscale)   image.greyscale();\n\n    rethinkdb.table(\"images\").get(req.image.id).update({ date_used : \n    Date.now() }).run(db);\n\n    res.setHeader(\"Content-Type\", \"image/\" + \n    path.extname(req.image.name).substr(1));\n\n    image.pipe(res);\n});\n```", "```js\napp.delete(\"/uploads/:image\", (req, res) => {\n    rethinkdb.table(\"images\").get(req.image.id).delete().run(db, (err) \n    => {\n        return res.status(err ? 500 : 200).end();\n    });\n});\n```", "```js\napp.get(\"/stats\", (req, res) => {\n    let uptime = process.uptime();\n\n    rethinkdb.table(\"images\").count().run(db, (err, total) => {\n        if (err) return res.status(500).end();\n\n        rethinkdb.table(\"images\").sum(\"size\").run(db, (err, size) => {\n            if (err) return res.status(500).end();\n\n            rethinkdb.table(\"images\").max(\"date_created\").run(db, (err, \n            last_created) => {\n                if (err) return res.status(500).end();\n\n                last_created = (last_created ? new \n                Date(last_created.date_created) : null);\n\n                return res.send({ total, size, last_created, uptime });\n            });\n        });\n    });\n});\n```", "```js\nsetInterval(() => {\n    let expiration = Date.now() - (30 * 86400 * 1000);\n\n    rethinkdb.table(\"images\").filter((image) => {\n        return image(\"date_used\").lt(expiration);\n    }).delete().run(db);\n}, 3600 * 1000);\n```", "```js\nnpm uninstall rethinkdb --save\nnpm install redis --save\n```", "```js\nconst redis = require(\"redis\");\nconst db    = redis.createClient(); \n```", "```js\ndb.on(\"connect\", () => {\n    console.log(\"db: ready\");\n\n    // ...\n    // the rest of our service code\n    // ...\n\n    app.listen(3000, () => {\n        console.log(\"app: ready\");\n    });\n});\n```", "```js\napp.post(\"/uploads/:name\", bodyparser.raw({\n    limit : \"10mb\",\n    type : \"image/*\"\n}), (req, res) => {\n    db.hmset(req.params.name, {\n        size : req.body.length,\n        data : req.body.toString(\"base64\"),\n    }, (err) => {\n        if (err) {\n            return res.send({ status : \"error\", code: err.code });\n        }\n\n        res.send({ status : \"ok\", size: req.body.length });\n    });\n});\n```", "```js\napp.param(\"image\", (req, res, next, name) => {\n    if (!name.match(/\\.(png|jpg)$/i)) {\n        return res.status(403).end();\n    }\n\n    db.hgetall(name, (err, image) => {\n        if (err || !image) return res.status(404).end();\n\n        req.image      = image;\n        req.image.name = name;\n\n        return next();\n    });\n});\n```", "```js\napp.get(\"/uploads/:image\", (req, res) => {\n    let image     = sharp(Buffer.from(req.image.data, \"base64\"));\n    let width     = +req.query.width;\n    let height    = +req.query.height;\n    let blur      = +req.query.blur;\n    let sharpen   = +req.query.sharpen;\n    let greyscale = [ \"y\", \"yes\", \"true\", \"1\", \"on\"].includes(req.query.greyscale);\n    let flip      = [ \"y\", \"yes\", \"true\", \"1\", \"on\"].includes(req.query.flip);\n    let flop      = [ \"y\", \"yes\", \"true\", \"1\", \"on\"].includes(req.query.flop);\n\n    if (width > 0 && height > 0) {\n        image.ignoreAspectRatio();\n    }\n\n    if (width > 0 || height > 0) {\n        image.resize(width || null, height || null);\n    }\n\n    if (flip)        image.flip();\n    if (flop)        image.flop();\n    if (blur > 0)    image.blur(blur);\n    if (sharpen > 0) image.sharpen(sharpen);\n    if (greyscale)   image.greyscale();\n\n    db.hset(req.image.name, \"date_used\", Date.now());\n\n    res.setHeader(\"Content-Type\", \"image/\" + path.extname(req.image.name).substr(1));\n\n    image.pipe(res);\n});\n```", "```js\napp.delete(\"/uploads/:image\", (req, res) => {\n    db.del(req.image.name, (err) => {\n        return res.status(err ? 500 : 200).end();\n    });\n});\n```"]