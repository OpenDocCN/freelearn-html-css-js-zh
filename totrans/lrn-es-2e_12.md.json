["```js\nconst sab = new SharedArrayBuffer(1024);\nworker.postMessage(sab); // DO NOT TRANSFER: worker.postMessage(sab, [sab]);\n```", "```js\n// Main thread\n\nconst sharedMem = new SharedArrayBuffer(4);\n\nfunction countSingleThread(limit) {\n    const arr = new Uint32Array(sharedMem);\n    for(let i=0; i<limit; i++) {\n        arr[0] = arr[0] + 1;\n    }\n}\n\nconst now = performance.now();\ncountSingleThread(1000000000);\nconsole.log(`Time Taken: ${performance.now() - now}`);\n```", "```js\n// Main thread\n\nconst sharedMem = new SharedArrayBuffer(4);\nconst workers = [new Worker('worker.js'), new Worker('worker.js')];\nlet oneWorkerDone = false;\nconst now = performance.now();\n\nfor(let i=0;i<2;i++) {\n  workers[i].postMessage({message: 'sab', memory: sharedMem});\n\n  workers[i].addEventListener('message', data => {\n      if(!oneWorkerDone) {\n        oneWorkerDone = true;\n      } else {\n        console.log(\"Both workers done. The memory is: \", new\n        Uint32Array(sharedMem))\n        console.log(`Time taken: ${performance.now()-now}`)\n      }\n  });\n\n  workers[i].postMessage({cmd: 'start', iterations: 500000000});\n}\n```", "```js\n// worker.js\nlet sharedMem;\n\naddEventListener('message', ({data}) => {\n  //console.log(data);\n    if(data.message == 'sab') {\n        sharedMem = data.memory;\n        console.log('Memory ready');\n    }\n    if(data.cmd == 'start') {\n      console.log('Iterations ready');\n        startCounting(data.iterations);\n    }\n});\n\nfunction startCounting(limit) {\n    const arr = new Uint32Array(sharedMem);\n    for(let i=0;i<limit;i++) {\n        arr[0] += 1;\n    }\n    postMessage('done')\n}\n```", "```js\nconst sab = new SharedArrayBuffer(1);\nconst arr = new Uint8Array(sab);\narr[0] = 5;\n\nconsole.log(Atomics.load(arr, 0));\n```", "```js\n5\n```", "```js\nconst sab = new SharedArrayBuffer(1);\nconst arr = new Uint8Array(sab);\narr[0] = 5;\n\nconsole.log(Atomics.add(arr, 0, 10));\nconsole.log(Atomics.load(arr, 0));\n```", "```js\n5\n15\n```", "```js\nconst sab = new SharedArrayBuffer(1);\nconst arr = new Uint8Array(sab);\narr[0] = 5;\n\nconsole.log(Atomics.sub(arr, 0, 2));\nconsole.log(Atomics.load(arr, 0));\n```", "```js\n5\n3\n```", "```js\nconst sab = new SharedArrayBuffer(1);\nconst arr = new Uint8Array(sab);\narr[0] = 5; // 5 is 0101 in binary.\n\nAtomics.and(arr, 0, 12); // 12 is 1100 in binary\nconsole.log(Atomics.load(arr, 0));\n```", "```js\n4\n```", "```js\nconst sab = new SharedArrayBuffer(1);\nconst arr = new Uint8Array(sab);\narr[0] = 5; // 5 is 0101 in binary.\n\nAtomics.or(arr, 0, 12); // 12 is 1100 in binary\nconsole.log(Atomics.load(arr, 0));\n```", "```js\n13\n```", "```js\nconst sab = new SharedArrayBuffer(1);\nconst arr = new Uint8Array(sab);\narr[0] = 5; // 5 is 0101 in binary.\n\nAtomics.xor(arr, 0, 12); // 10 is 1100 in binary\nconsole.log(Atomics.load(arr, 0));\n```", "```js\n9\n```", "```js\n// worker.js\nlet sharedMem;\n\naddEventListener('message', ({data}) => {\n  //console.log(data);\n    if(data.message == 'sab') {\n        sharedMem = data.memory;\n        console.log('Memory ready');\n    }\n    if(data.cmd == 'start') {\n      console.log('Iterations ready');\n        startCounting(data.iterations);\n    }\n});\n\nfunction startCounting(limit) {\n    const arr = new Uint32Array(sharedMem);\n    for(let i=0;i<limit;i++) {\n        Atomics.add(arr, 0, 1);\n    }\n    postMessage('done')\n}\n```", "```js\n// worker.js\nlet sharedMem;\n\naddEventListener('message', ({data}) => {\n  //console.log(data);\n    if(data.message == 'sab') {\n        sharedMem = data.memory;\n        console.log('Memory ready');\n    }\n    if(data.cmd == 'start') {\n      console.log('Iterations ready');\n        startCounting(data.iterations);\n    }\n});\n\nfunction startCounting(limit) {\n    const arr = new Uint32Array(sharedMem);\n    let count = 0;\n    for(let i=0;i<limit;i++) {\n        count += 1;\n    }\n    Atomics.add(arr, 0, count);\n    postMessage('done')\n}\n```", "```js\n// Main Script\n\nconst sharedMem = new SharedArrayBuffer(4);\nconst workers = [new Worker('worker.js'), new Worker('worker.js'), new Worker('worker.js'), new Worker('worker.js')];\nlet workersDone = 0;\n\nconst now = performance.now();\n\nfor(let i=0;i<2;i++) {\n  workers[i].postMessage({message: 'sab', memory: sharedMem});\n\n  workers[i].addEventListener('message', data => {\n      if(++workersDone == 4) { // don't worry. this is thread-safe ;)\n        console.log(\"All workers done. The memory is: \", new Uint32Array(sharedMem))\n        console.log(`Time taken: ${performance.now()-now}`)\n      }\n  });\n\n  workers[i].postMessage({cmd: 'start', iterations: 1000000000/workers.length});\n}\n```"]