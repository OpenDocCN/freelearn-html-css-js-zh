["```js\n/ (home)\n/podcasts/\n/podcast/{slug}\n/episode/{slug}\n/search?q={term}\n/later/\n```", "```js\nvar logo = document.querySelector('.podcast-logo');\n\nfetch(\"…/600x600bb.jpg\").then(function(response) {\n  return response.blob();\n}).then(function(logoBlob) {\n  var objectURL = URL.createObjectURL(logoBlob);\n  logo.src = objectURL;\n});\n```", "```js\nvar xhr = new XMLHttpRequest();\n\nxhr.open(\"GET\", \"…/600x600bb.jpg\", true);  \nxhr.overrideMimeType('text/plain; charset=x-user-defined');\nxhr.send(null);\n\nxhr.onreadystatechange = function() {\n    if (xhr.readyState == 4){\n      if ((xhr.status == 200) || (xhr.status == 0)){\n            var logo = document.querySelector('.podcast-logo');\n            logo.src = \"data:image/gif;base64,\" + \n            encode64(xhr.responseText);\n      }else{\n            alert(\"Something misconfiguration : \" +\n            \"\\nError Code : \" + xhr.status +\n            \"\\nError Message : \" + xhr.responseText);\n      }\n    }\n};\n```", "```js\nvar logoHeaders = new Headers();\nlogoHeaders.append('Content-Type', 'image/jpeg');\n\nvar logoInit = { method: 'GET',\n                  headers: logoHeaders,\n                  mode: 'cors',\n                  cache: 'default'\n         };\n\nvar logoRequest = new Request(\"…/600x600bb.jpg\", logoInit);\n\nfetch(logoRequest).then(function(response) {\n  return response.blob();\n}).then(function(logoBlob) {\n  logo.src = URL.createObjectURL(logoBlob);\n});\n```", "```js\n[\n      podcasts: [\n            {…}\n],\n      episodes: [\n            {…}\n]\n}\n```", "```js\nvar searchResults = document.querySelector('.search-results');\n\nfetch(\"api/search?term={term}\").then(function(response) {\n  return response.json();\n}).then(function(results) {\n  renderResults(results);\n});\n```", "```js\n    function renderResults(results) {\n\n        var template = document.getElementById(\"search-results-\n        template\"),\n            searchResults = document.querySelector('.search-results');\n\n```", "```js\n            searchResults.innerHTML =             \n            Mustache.render(template.innerHTML, results);\n\n    }\n```", "```js\nself.addEventListener('fetch', function(event) {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) =>{\n        // Cache hit - return response\n        if (response) {\n          return response;\n        }\n        return fetch(event.request);\n      }\n    )\n  );\n});\n```", "```js\n        var scripts = [\"js/libs/jquery.small.js\",\n            \"js/libs/index.js\",\n            \"js/libs/collapse.js\",\n            \"js/libs/util.js\",\n            \"js/app/app.js\"\n        ];\n\n    if (typeof fetch === \"undefined\" || fetch.toString().indexOf(\"[native code]\") === -1) {\n        scripts.unshift(\"js/polyfill/fetch.js\");\n    }\n\n    if (typeof Promise === \"undefined\" || Promise.toString().indexOf(\"[native code]\") === -1) {\n        scripts.unshift(\"js/polyfill/es6-promise.min.js\");\n    }\n```", "```js\nself.addEventListener('install', (event) => {\n      //install event handler\n});\n\nself.addEventListener('activate', (event) => {\n      //activate event handler\n});\n\nself.addEventListener('fetch', (event) => {\n      //fetch event handler\n});\n```", "```js\nnavigator.serviceWorker.register('/sw.js').then(function (registration) {   \n    if (\"PushManager\" in window) {\n      //push is supported\n    }\n});\n```", "```js\nregistration.pushManager.getSubscription()\n.then(function (subscription) {\n            if(subscription === null){\n                  subscribeUser(registration);\n            }\n      });\n```", "```js\nfunction subscribeUser(registration) {\n    const applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey);\n    registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: applicationServerKey\n        })\n        .then(function (subscription) {\n            updateSubscriptionOnServer(subscription);\n            console.log('User is subscribed.');\n        })\n        .catch(function (err) {\n      console.log('Failed to subscribe the user: ', err);\n        });\n}\n```", "```js\n{\n   \"endpoint\": \"https://fcm.googleapis.com/fcm/send/cRWeyfFxsE0:APA91bE8jAnZtPTHSG5pV9hNWtTdS_ZFZT7FTDEpDEYwf8f_FvwuiLc6YDtxNigxKzyHhj9yzbhlJ4zm3M3wt0w1JPYQ41yhF38yeXKhYVp_TFauMr_RnINOKiobCTCYIgj_X0PWlGQF\",\n   \"expirationTime\": null,\n   \"keys\": {\n     \"p256dh\": \"BO0FEUNPej_U984Q-dVAvtv1lyIdSvOn01AVl5ALu8F-GPA7lTtZ8QfyiQ7Z12BFjPQLvpvypMrL4I6QqHy2wNg=\",\n     \"auth\": \"lDiFiN9EFPcXm7LVzOYUlg==\"\n   }\n }\n```", "```js\n{\n      \"title\": \"CodeWinds - Leading edge web developer news and training | javascript / React.js / Node.js / HTML5 / web development - Jeff Barczewski\",\n      “description”: “episode description here”,\n\"image\": \"http://codewinds.com/assets/codewinds/codewinds-podcast-1400.png\"\n}\n```", "```js\n    try {\n        var episode = JSON.parse(event.data.text());\n\n        const title = episode.title;\n        const options = {\n            body: episode.description,\n            icon: 'img/pwa-podstr-logo-70x70.png',\n            badge: 'img/pwa-podstr-logo-70x70.png',\n            image: episode.image,\n            vibrate: [200, 100, 200, 100, 200, 100, 200],\n            actions: [{\n                action: \"listen\",\n                title: \"Listen Now\",\n                icon: 'img/listen-now.png'\n            },\n            {\n                action: \"later\",\n                title: \"Listen Later\",\n                icon: 'img/listen-later.png'\n            }]\n        };\n\n        event.waitUntil(self.registration.showNotification(title, \n        options));\n\n    }\n    catch (e) {\n        console.log('invalid json');\n\n        event.waitUntil(self.registration.showNotification(\"spartan \n        obstacles\", {\n            body: 'Generic Notification Handler',\n            icon: 'img/pwa-podstr-logo-70x70.png',\n            badge: 'img/pwa-podstr-logo-70x70.png',\n            vibrate: [200, 100, 200, 100, 200, 100, 200]\n        }));\n    }\n```", "```js\nself.addEventListener('notificationclick', function (event) {\n    if(event.action === \"listen\"){\n        listenToEpisode(event.notification);\n    }else if(event.action === \"later\"){\n        saveEpisodeForLater(event.notification);\n    }\n    event.notification.close();\n});\n```", "```js\nfunction unsubscribeUser(registration) {\n    return registration.pushManager.getSubscription()\n        .then(function (subscription) {\n            if (subscription) {\n                return subscription.unsubscribe()\n                      .then(function(success){\n                        console.log(“user is unsubscribed ”, success);\n                      });\n            }\n        })\n        .catch(function (error) {\n            console.log('Error unsubscribing', error);\n        });\n}\n```", "```js\n    self.addEventListener('pushsubscriptionchange', e => { \n          e.waitUntil(registration.pushManager.subscribe(e.oldSubscription.options) \n        .then(subscription => { \n          // TODO: Send new subscription to application server \n        })); \n    });\n```", "```js\nif (\"sync\" in reg) {\n      reg.sync.register('get-episode');\n}\n```", "```js\nself.addEventListener('sync', function (event) {\n    if (event.tag == 'get-episode') {\n        event.waitUntil(getEpisode());\n    }\n});\n```"]