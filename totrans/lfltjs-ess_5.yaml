- en: Chapter 5. ESRI in Leaflet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you start making more maps and looking for geospatial data to work with,
    you will almost certainly run into the file type shapefile (`.shp`). **Economic
    and Social Research Institute** (**ESRI**) is the creator of the most widely used
    GIS system, ArcGIS, and the shapefile is one of their data formats.
  prefs: []
  type: TYPE_NORMAL
- en: You may see another format called geodatabase with a `.gdb` extension. Even
    if you never run into a shapefile or geodatabase, you will eventually run into
    a REST service that is an endpoint to an ArcServer installation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ArcServer is an ESRI product for distributing GIS services and web mapping applications.
    It is separate from ArcGIS, which refers to the desktop application to create
    maps and geographic data.
  prefs: []
  type: TYPE_NORMAL
- en: The more data formats you know how to consume in your Leaflet maps, the less
    time you will need to spend converting data to suit your needs. In this chapter,
    you will learn how to consume ESRI formats and services in Leaflet.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: ESRI basemaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with shapefiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a dynamic map layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heatmaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geocoding and reverse geocoding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESRI basemaps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ESRI provides eight different basemaps that you can use in your Leaflet map.
    The eight layers are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Streets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Topographic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: National Geographic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oceans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gray
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dark gray
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imagery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shaded relief
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to the eight basemaps, there are six basemap label layers, `OceansLabels`,
    `GrayLabels`, `DarkGrayLabels`, `ImageryLabels`, `ImageryTransportation`, and
    `ShadedReliefLabels`, to compliment the basemaps. If that is not enough, there
    is also a retina version of each basemap.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use an ESRI basemap, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add a reference to the ESRI-leaflet file. It is in beta, but that doesn''t
    mean that it is not fully functional:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: On its GitHub repository, ESRI states that the library is on track to be moved
    from beta to production in 2014\. You can find more information and download the
    additional files at [https://github.com/Esri/esri-leaflet/](https://github.com/Esri/esri-leaflet/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create an ESRI basemap layer, passing one of the eight options. In this
    example, use `Gray`. Always remember to add it to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You now have a map with an ESRI basemap layer. The preceding code is the minimal
    code required to add a basemap. The ESRI basemap layer inherits from the Leaflet
    `L.TileLayer` class, and therefore, allows you to use all of the options, methods,
    and events available to any other Leaflet `L.TileLayer` class. One option that
    is extremely useful when building mobile maps is the `detectRetina` option. To
    use this option, just pass it after the basemap name as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Many examples that you find in the documentation will create the layers without
    assigning them to a variable, as shown in the following code from the ESRI website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When you do this, you have no way of calling methods or events on the layer
    unless you chain them. In the preceding example, you assigned the basemap to the
    variable `gray`, so you have access to all of the methods and events as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code modifies the opacity of the basemap layer and also subscribes
    to the `load` event. When the layer loads, it executes the `alertme()` function
    and pops up an alert stating that it is complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last thing you may need to do with your ESRI basemap layer is to add the
    corresponding label layer. To do so, just add another basemap layer, passing the
    label layer as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you will have a map that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ESRI basemaps](img/4812OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using shapefiles in Leaflet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A shapefile is the most common geographic file type that you will most likely
    encounter. A shapefile is not a single file, but rather several files used to
    create geographic features on a map. When you download a shapefile, you will have
    `.shp`, `.shx`, and `.dbf` at a minimum. These files are the shapefiles that contain
    the geometry, the index, and a database of attributes. Your shapefile will most
    likely include a projection file (`.prj`) that will tell that application the
    projection of the data so the coordinates make sense to the application. In the
    examples, you will also have a `.shp.xml` file that contains metadata and two
    spatial index files, `.sbn` and `.sbx`.
  prefs: []
  type: TYPE_NORMAL
- en: To find shapefiles, you can usually search for open data and a city name. In
    this example, we will be using a shapefile from ABQ Data, the City of Albuquerque
    data portal. You can find more data on this at [http://www.cabq.gov/abq-data](http://www.cabq.gov/abq-data).
    When you download a shapefile, it will most likely be in the ZIP format because
    it will contain multiple files.
  prefs: []
  type: TYPE_NORMAL
- en: 'To open a shapefile in Leaflet using the `leaflet-shpfile` plugin, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add references to two JavaScript files. The first, `leaflet-shpfile`,
    is the plugin, and the second depends on the shapefile parser, `shp.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a new shapefile layer and add it to the map. Pass the layer path
    to the zipped shapefile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your map should display the shapefile as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using shapefiles in Leaflet](img/4812OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Performing the preceding steps will add the shapefile to the map. You will
    not be able to see any individual feature properties. When you create a shapefile
    layer, you specify the data, followed by specifying the options. The options are
    passed to the `L.geoJson` class. To add a pop up or to style the features, you
    use the same process that you learned in [Chapter 2](ch02.html "Chapter 2. Mapping
    GeoJSON Data"), *Mapping GeoJSON Data*. The following code shows you how to add
    a pop up to your shapefile layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, you pass `council.zip` to the shapefile, and for options,
    you use the `onEachFeature` option, which takes a function. In this case, you
    use an anonymous function and bind the pop up to the layer. In the text of the
    pop up, you concatenate your HTML with the name of the property you want to display
    using the format `feature.properties.NAME-OF-PROPERTY`. To find the names of the
    properties in a shapefile, you can open `.dbf` and look at the column headers.
    However, this can be cumbersome, and you may want to add all of the shapefiles
    in a directory without knowing its contents. If you do not know the names of the
    properties for a given shapefile, the following example shows you how to get them
    and then display them with their value in a pop up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you first create an array to hold all of the lines in
    your pop up, one for each key/value pair. Next, you run a `for` loop that iterates
    through the object, grabbing each key and concatenating the key name with the
    value and a line break. You push each line into the array and then join all of
    the elements into a single string. When you use the `.join()` method, it will
    separate each element of the array in the new string with a comma.
  prefs: []
  type: TYPE_NORMAL
- en: You can pass empty quotes to remove the comma. Lastly, you bind the pop up with
    the string as the content and then add the shapefile to the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'You now have a map that looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using shapefiles in Leaflet](img/4812OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The shapefile also takes a style option. You can pass any of the path class
    options, such as the color, opacity, or stroke, to change the appearance of the
    layer. The following code creates a red polygon with a black outline and sets
    it slightly transparent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Consuming ESRI services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the first example of this chapter, you learned how to use the `esri-leaflet`
    plugin for basemaps. You then learned how to use a plugin to work with the most
    common ESRI file format: the shapefile. While you will most certainly run into
    a shapefile, you will increasingly find yourself running into ESRI services that
    provide endpoints that you can connect to and consume geographic services from.
    With the `esri-leaflet` plugin, you can connect to these services, and besides
    basemaps, display five other layer types:'
  prefs: []
  type: TYPE_NORMAL
- en: The tiled map layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dynamic map layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The feature layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The clustered feature layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The heatmap feature layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you know how to add one of these layers, you can add any of the others
    because the process is almost identical. The only differences are the available
    options and methods, which are well documented in the API at [http://esri.github.io/esri-leaflet/api-reference/](http://esri.github.io/esri-leaflet/api-reference/).
    Later in this chapter, we will learn how to create a heatmap feature layer, but
    for now, let's see how to add a dynamic map layer.
  prefs: []
  type: TYPE_NORMAL
- en: On the City of Albuquerque data page at [http://www.cabq.gov/abq-data](http://www.cabq.gov/abq-data),
    select the public art dataset. You will be presented with the contents of the
    directory. You can read the `MetaData.pdf` file to learn about the data source,
    download a Google Earth `.KMZ` file, download or link to a JSON file, or consume
    a `PublicArtREST` service.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The JSON file available from the City of Albuquerque data page is ESRI JSON.
    It is not GeoJSON, and thus, it will not be compatible without some conversion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the link for PublicArtREST and you will be presented with the details
    of this service. Scrolling to the bottom of the page will tell you the available
    fields. This will be very useful when designing the pop ups. Now that you know
    where to find the service, follow these steps to add it to your map:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add a reference to the ESRI-leaflet file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a dynamic map layer by copying the link to the REST service—all dynamic
    map layers will end in `/mapserver`. We removed `/0` from the URL, which means
    that we are now loading the entire map file. In the following code, set the opacity
    option to `0.75` and add the layer to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, bind a pop up using a function that will return the content. In the
    following code, use the format `feature.features[0].properties.NAME-OF-PROPERTY`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your map will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Consuming ESRI services](img/4812OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Heatmaps with ESRI in Leaflet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 3](ch03.html "Chapter 3. Creating Heatmaps and Choropleth Maps"),
    *Creating Heatmaps and Choropleth Maps*, you learned about several plugins that
    you can use to create heatmaps. The `esri-leaflet` plugin also has a heatmap layer
    that will allow you to pass an ESRI service as the data. To create a heatmap using
    the `esri-leaflet` plugin, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add a reference to the ESRI-leaflet file, and since the heatmap layer
    is not included in the core build of the `esri-leaflet` plugin, you will need
    to reference an additional ESRI file, `esri-leaflet-heatmap-feature-layer.js`.
    The ESRI heatmap layer requires `leaflet-heat.js`, so you need to add a reference
    to that as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create your map and basemap as you normally would and then add the heatmap
    layer. The heatmap layer requires a link to a feature layer service and acquires
    all of the options available in `leaflet-heat.js`. Add the layer to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To see a list of the available services from ESRI, browse to [http://services.arcgis.com/rOo16HdIMeOBI4Mb/ArcGIS/rest/services/](http://services.arcgis.com/rOo16HdIMeOBI4Mb/ArcGIS/rest/services/).
    The location of ArcServer services defaults to `http://Server Name/ ArcGIS/rest/services`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your map will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Heatmaps with ESRI in Leaflet](img/4812OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Geocoding addresses in Leaflet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Geocoding is the process by which you can enter an address and be taken to a
    point on the map. Geocoding functionality is not part of the Esri-leaflet core
    but is a separate plugin. You can find more information on the esri-leaflet-geocoder
    GitHub page at [https://github.com/Esri/esri-leaflet-geocoder](https://github.com/Esri/esri-leaflet-geocoder).
  prefs: []
  type: TYPE_NORMAL
- en: Geocoding – from an address to a point
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The geocoding plugin places a search box below the zoom control. As you type
    an address, the search autocompletes and presents the possible options. You can
    either type the whole address or select from the list when the one you want is
    available. Clicking on an option or pressing enter will put a marker on the map
    at the location and zoom into it. To create a map with geocoding functionality,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference the CSS and JS files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a layer where the result will be placed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Subscribe to the results event and add the marker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your map will now have a small magnifying glass under the zoom control, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Geocoding – from an address to a point](img/4812OS_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the magnifying glass, it will expand into a textbox. As you
    type, the textbox will autocomplete and guess the location that you are typing.
    Once you see the address you want, select it from the list. Your map should look
    like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Geocoding – from an address to a point](img/4812OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have clicked on your selection, the map will automatically place a
    marker at the location and zoom into it. You will now have a map that looks like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Geocoding – from an address to a point](img/4812OS_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For the next example, you will use a URL to map an address.
  prefs: []
  type: TYPE_NORMAL
- en: Geocoding from URL parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the last example, a user is able to load the map and enter an address to
    find it. In this example, you will allow the user to enter the address in the
    URL and be presented with a map that has zoomed into a marker at the location.
    To create the map, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add a reference to the `esri-leaflet-geocoder.js` file. You do not need
    the CSS file, as you did in the previous example, because you are not adding the
    search box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, you need to get the parameter from the URL. In this example, `a` is chosen
    as the variable that will contain the address. To get the URL parameters, use
    `location.search`. This grabs everything after the question mark. You only want
    the address, so split it on the equals sign and then grab the second element of
    the returned array, `y[1]`. This will return `%20` wherever there is a space in
    the URL, so use `decodeURIComponent(y[1])` to remove them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the geocoding service, passing the address, parameters, and a callback
    function. The function will create a marker from the first result and then set
    the view zoomed in on the marker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the page and add `?a=400 roma ave ne,albuquerque,nm,usa` after the `URLgeocode.html`
    file. Your map will load and look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Geocoding from URL parameters](img/4812OS_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Reverse geocoding – using points to find addresses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Reverse geocoding does the exact opposite of geocoding. It takes a point on
    a map and finds its address. In this example, you will allow the user to click
    on the map and add a marker that has the address as a pop up. To create the map,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add a reference to the Esri-leaflet and `esri-leaflet-geocoder.js` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new geocoding service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Subscribe to the `click` event and add a function that calls `reverse()`, passing
    longitude and latitude options, and a callback function. The callback function
    will create a marker, add it to the map, and then bind a pop up. The address is
    stored in the result object as `result.address`. This code will add a point every
    time you click on the map. To only have one point displayed, add `map.removeLayer(r)`
    before creating the marker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you are finished, your map will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reverse geocoding – using points to find addresses](img/4812OS_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Query by attribute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When consuming a service, you usually load the entire layer. Sometimes, you
    may only want a subset of the layer data. Using a query will allow you to load
    only that subset that you are interested in. In this example, you will query a
    graffiti layer for open and closed cases. To create the map, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference the Esri-leaflet file as you have seen in the previous examples.
    You do not need any additional files. Style the <`div`> query using CSS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the selection element and add `Open` and `Closed` as options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a feature layer that connects to the graffiti service. Use the `pointToLayer`
    option to create a marker for each feature and add them to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `popupTemplate` variable. You can find the parameters in the layer
    by browsing to the link in the feature layer. Bind the pop up by creating a function
    that returns the template. The template allows you to pass the fields contained
    in the ESRI layer to the template. The field name goes in curly braces. Then,
    you can use the template as your string in `bindPopup()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an event for when the selection element changes. Pass the value of the
    current selection to the method `setWhere()`. This method refreshes the feature
    layer based on the `where` query. In this example, `where` is the value of the
    `status` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you are finished, you can select **Closed**, and the map will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Query by attribute](img/4812OS_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Query by proximity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous example, you queried a feature layer based on an attribute.
    You can also query your feature layer based on its proximity to a point. In this
    example, you will query the layer based on the location of a mouse click. The
    following instructions will walk you through creating a proximity query:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference the Esri-leaflet file as you have in previous examples. Add the feature
    layer to the map. You will pass the `pointToLayer` option, returning `circleMarker`
    for each feature. You need to create the circle marker so that you can change
    the color of the marker in a later step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a pop-up template using the feature properties. Bind the pop up to the
    feature as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a query. If you browse to the service—place the URL of the query in
    your browser—and scroll to the bottom of the page, you will see on the last line
    that this service supports querying. Pass the query to the layer you want to query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an event for a mouse click and subscribe using the `runQuery()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function, `runQuery()`, to be executed when the user clicks on the
    map. This function will do three things: it will execute a query using the `nearby()`
    method, passing the latitude and longitude of the mouse click and a distance of
    804 meters (half mile); it will set the style of all of the circle markers to
    blue; and it will take the results of the query and pass the ID of every marker
    that is returned to a `style` function, turning them green. We used the circle
    marker in the second step so that we could change the color to highlight the query
    results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you click on the map, it should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Query by proximity](img/4812OS_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The green markers are all within half a mile of the user's click.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned how to use the most common file format for geographical
    data: the shapefile. You also learned how to use the `esri-leaflet` plugin to
    connect to ESRI services and add basemaps as well as five other ESRI layer types.
    You already learned about heatmaps previously, but in this chapter, you also learned
    how to consume ESRI services and add them as a heatmap. You learned how to geocode
    an address to a map and also how to reverse geocode a point to a street address.
    Lastly, you learned how to query an ESRI service first by attribute and then by
    location.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will combine everything you have learned to create
    an application using Leaflet with other programming languages.
  prefs: []
  type: TYPE_NORMAL
