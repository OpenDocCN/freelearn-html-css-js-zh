- en: Chapter 5. ESRI in Leaflet
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. Leaflet中的ESRI
- en: As you start making more maps and looking for geospatial data to work with,
    you will almost certainly run into the file type shapefile (`.shp`). **Economic
    and Social Research Institute** (**ESRI**) is the creator of the most widely used
    GIS system, ArcGIS, and the shapefile is one of their data formats.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始制作更多地图并寻找用于工作的地理空间数据时，你几乎肯定会遇到文件类型shapefile（`.shp`）。**经济和社会研究机构**（**ESRI**）是广泛使用的GIS系统ArcGIS的创建者，shapefile是它们的数据格式之一。
- en: You may see another format called geodatabase with a `.gdb` extension. Even
    if you never run into a shapefile or geodatabase, you will eventually run into
    a REST service that is an endpoint to an ArcServer installation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会看到另一种格式，称为地理数据库，具有`.gdb`扩展名。即使你从未遇到过shapefile或地理数据库，你最终也会遇到一个REST服务，它是ArcServer安装的端点。
- en: Note
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: ArcServer is an ESRI product for distributing GIS services and web mapping applications.
    It is separate from ArcGIS, which refers to the desktop application to create
    maps and geographic data.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ArcServer是ESRI的一个产品，用于分发GIS服务和网络地图应用程序。它与ArcGIS分开，ArcGIS是指用于创建地图和地理数据的桌面应用程序。
- en: The more data formats you know how to consume in your Leaflet maps, the less
    time you will need to spend converting data to suit your needs. In this chapter,
    you will learn how to consume ESRI formats and services in Leaflet.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道如何在Leaflet地图中消费更多数据格式，你将需要花费的时间来转换数据以适应你的需求就越少。在本章中，你将学习如何在Leaflet中消费ESRI格式和服务。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: ESRI basemaps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ESRI底图
- en: Working with shapefiles
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与shapefile一起工作
- en: Displaying a dynamic map layer
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示动态地图图层
- en: Heatmaps
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热图
- en: Geocoding and reverse geocoding
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理编码和反向地理编码
- en: Query layers
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询图层
- en: ESRI basemaps
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ESRI底图
- en: 'ESRI provides eight different basemaps that you can use in your Leaflet map.
    The eight layers are the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ESRI提供了八种不同的底图，你可以在Leaflet地图中使用。这八个图层如下：
- en: Streets
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 街道
- en: Topographic
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地形
- en: National Geographic
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国家地理
- en: Oceans
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 海洋
- en: Gray
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灰色
- en: Dark gray
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深灰色
- en: Imagery
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 影像
- en: Shaded relief
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 投影
- en: In addition to the eight basemaps, there are six basemap label layers, `OceansLabels`,
    `GrayLabels`, `DarkGrayLabels`, `ImageryLabels`, `ImageryTransportation`, and
    `ShadedReliefLabels`, to compliment the basemaps. If that is not enough, there
    is also a retina version of each basemap.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了八个底图之外，还有六个底图标签图层，`OceansLabels`、`GrayLabels`、`DarkGrayLabels`、`ImageryLabels`、`ImageryTransportation`和`ShadedReliefLabels`，以补充底图。如果还不够，还有每个底图的视网膜版本。
- en: 'To use an ESRI basemap, follow these steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用ESRI底图，请按照以下步骤操作：
- en: 'First, add a reference to the ESRI-leaflet file. It is in beta, but that doesn''t
    mean that it is not fully functional:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，添加对ESRI-leaflet文件的引用。它处于测试版，但这并不意味着它不完全功能：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: On its GitHub repository, ESRI states that the library is on track to be moved
    from beta to production in 2014\. You can find more information and download the
    additional files at [https://github.com/Esri/esri-leaflet/](https://github.com/Esri/esri-leaflet/).
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在其GitHub仓库中，ESRI表示该库预计将在2014年从测试版移至生产版。您可以在[https://github.com/Esri/esri-leaflet/](https://github.com/Esri/esri-leaflet/)找到更多信息并下载附加文件。
- en: 'Next, create an ESRI basemap layer, passing one of the eight options. In this
    example, use `Gray`. Always remember to add it to the map:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个ESRI底图图层，传递八个选项之一。在这个例子中，使用`Gray`。始终记得将其添加到地图中：
- en: '[PRE1]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You now have a map with an ESRI basemap layer. The preceding code is the minimal
    code required to add a basemap. The ESRI basemap layer inherits from the Leaflet
    `L.TileLayer` class, and therefore, allows you to use all of the options, methods,
    and events available to any other Leaflet `L.TileLayer` class. One option that
    is extremely useful when building mobile maps is the `detectRetina` option. To
    use this option, just pass it after the basemap name as shown in the following
    code:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你有一个带有ESRI底图图层的地图。前面的代码是添加底图所需的最小代码。ESRI底图图层继承自Leaflet的`L.TileLayer`类，因此，你可以使用任何其他Leaflet
    `L.TileLayer`类中可用的所有选项、方法和事件。在构建移动地图时，一个非常有用的选项是`detectRetina`选项。要使用此选项，只需将其传递给底图名称之后，如以下代码所示：
- en: '[PRE2]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Many examples that you find in the documentation will create the layers without
    assigning them to a variable, as shown in the following code from the ESRI website:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你在文档中找到的许多示例将创建图层，而不将它们分配给变量，如以下来自ESRI网站的代码所示：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When you do this, you have no way of calling methods or events on the layer
    unless you chain them. In the preceding example, you assigned the basemap to the
    variable `gray`, so you have access to all of the methods and events as shown
    in the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当你这样做时，除非你将它们链接起来，否则你无法在图层上调用方法或事件。在上面的例子中，你将底图分配给了变量`gray`，因此你可以访问所有的方法和事件，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding code modifies the opacity of the basemap layer and also subscribes
    to the `load` event. When the layer loads, it executes the `alertme()` function
    and pops up an alert stating that it is complete.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码修改了底图层的透明度，并订阅了`load`事件。当图层加载时，它执行`alertme()`函数并弹出一个提示，表明操作已完成。
- en: 'The last thing you may need to do with your ESRI basemap layer is to add the
    corresponding label layer. To do so, just add another basemap layer, passing the
    label layer as shown in the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要做的最后一件事是在你的ESRI底图层上添加相应的标签层。为此，只需添加另一个底图层，并将标签层按以下代码所示传递：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, you will have a map that looks like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将拥有一个看起来像这样的地图：
- en: '![ESRI basemaps](img/4812OS_05_01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![ESRI底图](img/4812OS_05_01.jpg)'
- en: Using shapefiles in Leaflet
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用shapefiles在Leaflet中
- en: A shapefile is the most common geographic file type that you will most likely
    encounter. A shapefile is not a single file, but rather several files used to
    create geographic features on a map. When you download a shapefile, you will have
    `.shp`, `.shx`, and `.dbf` at a minimum. These files are the shapefiles that contain
    the geometry, the index, and a database of attributes. Your shapefile will most
    likely include a projection file (`.prj`) that will tell that application the
    projection of the data so the coordinates make sense to the application. In the
    examples, you will also have a `.shp.xml` file that contains metadata and two
    spatial index files, `.sbn` and `.sbx`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Shapefile是你最有可能遇到的常见地理文件类型。Shapefile不是一个单独的文件，而是用于在地图上创建地理要素的几个文件。当你下载shapefile时，你至少会有`.shp`、`.shx`和`.dbf`文件。这些文件是包含几何形状、索引和属性数据库的shapefile。你的shapefile很可能还包括一个投影文件（`.prj`），它将告诉应用程序数据的投影，以便坐标对应用程序有意义。在示例中，你还将有一个`.shp.xml`文件，它包含元数据和两个空间索引文件，`.sbn`和`.sbx`。
- en: To find shapefiles, you can usually search for open data and a city name. In
    this example, we will be using a shapefile from ABQ Data, the City of Albuquerque
    data portal. You can find more data on this at [http://www.cabq.gov/abq-data](http://www.cabq.gov/abq-data).
    When you download a shapefile, it will most likely be in the ZIP format because
    it will contain multiple files.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找shapefiles，通常可以搜索开放数据和城市名称。在这个例子中，我们将使用来自ABQ Data，阿尔伯克基市数据门户的shapefile。你可以在[http://www.cabq.gov/abq-data](http://www.cabq.gov/abq-data)找到更多数据。当你下载shapefile时，它很可能是ZIP格式，因为它将包含多个文件。
- en: 'To open a shapefile in Leaflet using the `leaflet-shpfile` plugin, follow these
    steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Leaflet中使用`leaflet-shpfile`插件打开shapefile，请按照以下步骤操作：
- en: 'First, add references to two JavaScript files. The first, `leaflet-shpfile`,
    is the plugin, and the second depends on the shapefile parser, `shp.js`:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，添加对两个JavaScript文件的引用。第一个是`leaflet-shpfile`插件，第二个依赖于shapefile解析器，`shp.js`：
- en: '[PRE6]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, create a new shapefile layer and add it to the map. Pass the layer path
    to the zipped shapefile:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个新的shapefile层并将其添加到地图中。将层路径传递给压缩的shapefile：
- en: '[PRE7]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Your map should display the shapefile as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你的地图应该显示如下截图所示的shapefile：
- en: '![Using shapefiles in Leaflet](img/4812OS_05_02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![在Leaflet中使用shapefiles](img/4812OS_05_02.jpg)'
- en: 'Performing the preceding steps will add the shapefile to the map. You will
    not be able to see any individual feature properties. When you create a shapefile
    layer, you specify the data, followed by specifying the options. The options are
    passed to the `L.geoJson` class. To add a pop up or to style the features, you
    use the same process that you learned in [Chapter 2](ch02.html "Chapter 2. Mapping
    GeoJSON Data"), *Mapping GeoJSON Data*. The following code shows you how to add
    a pop up to your shapefile layer:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述步骤将shapefile添加到地图上。你将无法看到任何单个要素属性。当你创建shapefile层时，你指定数据，然后指定选项。选项传递给`L.geoJson`类。要添加弹出窗口或样式化要素，你使用与你在[第2章](ch02.html
    "第2章。映射GeoJSON数据")“映射GeoJSON数据”中学到的相同过程。以下代码显示了如何向你的shapefile层添加弹出窗口：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the preceding code, you pass `council.zip` to the shapefile, and for options,
    you use the `onEachFeature` option, which takes a function. In this case, you
    use an anonymous function and bind the pop up to the layer. In the text of the
    pop up, you concatenate your HTML with the name of the property you want to display
    using the format `feature.properties.NAME-OF-PROPERTY`. To find the names of the
    properties in a shapefile, you can open `.dbf` and look at the column headers.
    However, this can be cumbersome, and you may want to add all of the shapefiles
    in a directory without knowing its contents. If you do not know the names of the
    properties for a given shapefile, the following example shows you how to get them
    and then display them with their value in a pop up:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，你将`council.zip`传递给形状文件，并使用`onEachFeature`选项作为选项，它接受一个函数。在这种情况下，你使用匿名函数并将弹出窗口绑定到层。在弹出窗口的文本中，你将你的HTML与你想显示的属性的名称连接起来，使用格式`feature.properties.属性名称`。要找到形状文件中属性的名称，你可以打开`.dbf`并查看列标题。然而，这可能很麻烦，你可能想在不了解其内容的情况下添加目录中的所有形状文件。如果你不知道给定形状文件的属性名称，以下示例显示了如何获取它们，然后以它们的值在弹出窗口中显示它们：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, you first create an array to hold all of the lines in
    your pop up, one for each key/value pair. Next, you run a `for` loop that iterates
    through the object, grabbing each key and concatenating the key name with the
    value and a line break. You push each line into the array and then join all of
    the elements into a single string. When you use the `.join()` method, it will
    separate each element of the array in the new string with a comma.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，你首先创建一个数组来存储你的弹出窗口中的所有行，每对键/值一个。然后你运行一个`for`循环，遍历对象，获取每个键并将键名与值和换行符连接起来。你将每一行推入数组，然后将所有元素连接成一个单独的字符串。当你使用`.join()`方法时，它将在新字符串中用逗号分隔数组的每个元素。
- en: You can pass empty quotes to remove the comma. Lastly, you bind the pop up with
    the string as the content and then add the shapefile to the map.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以传递空引号来删除逗号。最后，你将弹出窗口与字符串内容绑定，然后将形状文件添加到地图中。
- en: 'You now have a map that looks like the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在有一个看起来像以下屏幕截图的地图：
- en: '![Using shapefiles in Leaflet](img/4812OS_05_03.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![在Leaflet中使用形状文件](img/4812OS_05_03.jpg)'
- en: 'The shapefile also takes a style option. You can pass any of the path class
    options, such as the color, opacity, or stroke, to change the appearance of the
    layer. The following code creates a red polygon with a black outline and sets
    it slightly transparent:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 形状文件也接受样式选项。你可以传递任何路径类选项，例如颜色、不透明度或描边，以更改层的外观。以下代码创建了一个红色多边形，带有黑色轮廓，并设置它略微透明：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Consuming ESRI services
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消费ESRI服务
- en: 'In the first example of this chapter, you learned how to use the `esri-leaflet`
    plugin for basemaps. You then learned how to use a plugin to work with the most
    common ESRI file format: the shapefile. While you will most certainly run into
    a shapefile, you will increasingly find yourself running into ESRI services that
    provide endpoints that you can connect to and consume geographic services from.
    With the `esri-leaflet` plugin, you can connect to these services, and besides
    basemaps, display five other layer types:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一个例子中，你学习了如何使用`esri-leaflet`插件进行底图。然后你学习了如何使用插件处理最常见的ESRI文件格式：形状文件。虽然你肯定会遇到形状文件，但你将越来越多地发现自己遇到提供端点以连接并消费地理服务的ESRI服务。使用`esri-leaflet`插件，你可以连接到这些服务，除了底图之外，还可以显示五种其他图层类型：
- en: The tiled map layer
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瓦片地图层
- en: The dynamic map layer
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态地图层
- en: The feature layer
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能层
- en: The clustered feature layer
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚类功能层
- en: The heatmap feature layer
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热力图功能层
- en: Once you know how to add one of these layers, you can add any of the others
    because the process is almost identical. The only differences are the available
    options and methods, which are well documented in the API at [http://esri.github.io/esri-leaflet/api-reference/](http://esri.github.io/esri-leaflet/api-reference/).
    Later in this chapter, we will learn how to create a heatmap feature layer, but
    for now, let's see how to add a dynamic map layer.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你知道如何添加这些图层之一，你就可以添加任何其他的，因为过程几乎相同。唯一的不同是可用的选项和方法，这些在API的[http://esri.github.io/esri-leaflet/api-reference/](http://esri.github.io/esri-leaflet/api-reference/)中有很好的文档。在本章的后面，我们将学习如何创建热量功能层，但现在让我们看看如何添加动态地图层。
- en: On the City of Albuquerque data page at [http://www.cabq.gov/abq-data](http://www.cabq.gov/abq-data),
    select the public art dataset. You will be presented with the contents of the
    directory. You can read the `MetaData.pdf` file to learn about the data source,
    download a Google Earth `.KMZ` file, download or link to a JSON file, or consume
    a `PublicArtREST` service.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在阿尔伯克基市数据页面 [http://www.cabq.gov/abq-data](http://www.cabq.gov/abq-data) 上，选择公共艺术数据集。你将看到目录的内容。你可以阅读
    `MetaData.pdf` 文件来了解数据源，下载一个 Google Earth `.KMZ` 文件，下载或链接到一个 JSON 文件，或者消费一个 `PublicArtREST`
    服务。
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The JSON file available from the City of Albuquerque data page is ESRI JSON.
    It is not GeoJSON, and thus, it will not be compatible without some conversion.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 来自阿尔伯克基市数据页面的 JSON 文件是 ESRI JSON。它不是 GeoJSON，因此，没有一些转换将不会兼容。
- en: 'Click on the link for PublicArtREST and you will be presented with the details
    of this service. Scrolling to the bottom of the page will tell you the available
    fields. This will be very useful when designing the pop ups. Now that you know
    where to find the service, follow these steps to add it to your map:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 PublicArtREST 链接，你将看到该服务的详细信息。滚动到页面底部将告诉你可用的字段。在设计弹出窗口时这将非常有用。现在你知道了如何找到该服务，请按照以下步骤将其添加到你的地图中：
- en: 'First, add a reference to the ESRI-leaflet file:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，添加对 ESRI-leaflet 文件的引用：
- en: '[PRE11]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a dynamic map layer by copying the link to the REST service—all dynamic
    map layers will end in `/mapserver`. We removed `/0` from the URL, which means
    that we are now loading the entire map file. In the following code, set the opacity
    option to `0.75` and add the layer to the map:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过复制 REST 服务的链接来创建一个动态地图图层。所有动态地图图层都以 `/mapserver` 结尾。我们已从 URL 中移除了 `/0`，这意味着我们现在正在加载整个地图文件。在以下代码中，将不透明度选项设置为
    `0.75` 并将图层添加到地图中：
- en: '[PRE12]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Lastly, bind a pop up using a function that will return the content. In the
    following code, use the format `feature.features[0].properties.NAME-OF-PROPERTY`:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用一个将返回内容的函数绑定弹出窗口。在以下代码中，使用格式 `feature.features[0].properties.NAME-OF-PROPERTY`：
- en: '[PRE13]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Your map will now look like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你的地图现在将看起来像这样：
- en: '![Consuming ESRI services](img/4812OS_05_04.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![消费 ESRI 服务](img/4812OS_05_04.jpg)'
- en: Heatmaps with ESRI in Leaflet
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Leaflet 中使用 ESRI 的热力图
- en: 'In [Chapter 3](ch03.html "Chapter 3. Creating Heatmaps and Choropleth Maps"),
    *Creating Heatmaps and Choropleth Maps*, you learned about several plugins that
    you can use to create heatmaps. The `esri-leaflet` plugin also has a heatmap layer
    that will allow you to pass an ESRI service as the data. To create a heatmap using
    the `esri-leaflet` plugin, follow these steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章。创建热力图和面状图") *创建热力图和面状图* 中，你学习了几个可以用来创建热力图的插件。`esri-leaflet`
    插件也包含一个热力图层，允许你传递一个 ESRI 服务作为数据。要使用 `esri-leaflet` 插件创建热力图，请按照以下步骤操作：
- en: 'First, add a reference to the ESRI-leaflet file, and since the heatmap layer
    is not included in the core build of the `esri-leaflet` plugin, you will need
    to reference an additional ESRI file, `esri-leaflet-heatmap-feature-layer.js`.
    The ESRI heatmap layer requires `leaflet-heat.js`, so you need to add a reference
    to that as well:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，添加对 ESRI-leaflet 文件的引用，并且由于热力图层不包括在 `esri-leaflet` 插件的核心构建中，你将需要引用一个额外的 ESRI
    文件，`esri-leaflet-heatmap-feature-layer.js`。ESRI 热力图层需要 `leaflet-heat.js`，因此你还需要添加对该文件的引用：
- en: '[PRE14]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create your map and basemap as you normally would and then add the heatmap
    layer. The heatmap layer requires a link to a feature layer service and acquires
    all of the options available in `leaflet-heat.js`. Add the layer to the map:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照常规创建你的地图和底图，然后添加热力图层。热力图层需要一个链接到要素图层服务的链接，并获取 `leaflet-heat.js` 中所有可用的选项。将图层添加到地图中：
- en: '[PRE15]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To see a list of the available services from ESRI, browse to [http://services.arcgis.com/rOo16HdIMeOBI4Mb/ArcGIS/rest/services/](http://services.arcgis.com/rOo16HdIMeOBI4Mb/ArcGIS/rest/services/).
    The location of ArcServer services defaults to `http://Server Name/ ArcGIS/rest/services`.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要查看 ESRI 提供的服务列表，请浏览到 [http://services.arcgis.com/rOo16HdIMeOBI4Mb/ArcGIS/rest/services/](http://services.arcgis.com/rOo16HdIMeOBI4Mb/ArcGIS/rest/services/)。ArcServer
    服务的位置默认为 `http://Server Name/ ArcGIS/rest/services`。
- en: 'Your map will look like the following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你的地图将看起来如下截图所示：
- en: '![Heatmaps with ESRI in Leaflet](img/4812OS_05_05.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![在 Leaflet 中使用 ESRI 的热力图](img/4812OS_05_05.jpg)'
- en: Geocoding addresses in Leaflet
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Leaflet 中进行地址地理编码
- en: Geocoding is the process by which you can enter an address and be taken to a
    point on the map. Geocoding functionality is not part of the Esri-leaflet core
    but is a separate plugin. You can find more information on the esri-leaflet-geocoder
    GitHub page at [https://github.com/Esri/esri-leaflet-geocoder](https://github.com/Esri/esri-leaflet-geocoder).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 地理编码是将地址输入并带到地图上某个点的过程。地理编码功能不是Esri-leaflet核心的一部分，而是一个独立的插件。您可以在esri-leaflet-geocoder
    GitHub页面上找到更多信息：[https://github.com/Esri/esri-leaflet-geocoder](https://github.com/Esri/esri-leaflet-geocoder)。
- en: Geocoding – from an address to a point
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地理编码 – 从地址到点
- en: 'The geocoding plugin places a search box below the zoom control. As you type
    an address, the search autocompletes and presents the possible options. You can
    either type the whole address or select from the list when the one you want is
    available. Clicking on an option or pressing enter will put a marker on the map
    at the location and zoom into it. To create a map with geocoding functionality,
    follow these steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 地理编码插件在缩放控制下方放置一个搜索框。随着您输入地址，搜索将自动完成并显示可能的选项。您可以直接输入整个地址，或者当您想要的地址可用时从列表中选择。点击选项或按回车键将在地图上该位置放置一个标记并放大。要创建具有地理编码功能的地图，请按照以下步骤操作：
- en: 'Reference the CSS and JS files:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引用CSS和JS文件：
- en: '[PRE16]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create the control:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建控件：
- en: '[PRE17]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a layer where the result will be placed:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个放置结果的图层：
- en: '[PRE18]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Subscribe to the results event and add the marker:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订阅结果事件并添加标记：
- en: '[PRE19]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Your map will now have a small magnifying glass under the zoom control, as
    shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您的地图现在在缩放控制下将有一个小放大镜，如下面的截图所示：
- en: '![Geocoding – from an address to a point](img/4812OS_05_06.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![地理编码 – 从地址到点](img/4812OS_05_06.jpg)'
- en: 'When you click on the magnifying glass, it will expand into a textbox. As you
    type, the textbox will autocomplete and guess the location that you are typing.
    Once you see the address you want, select it from the list. Your map should look
    like the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击放大镜时，它将展开成一个文本框。随着您输入，文本框将自动完成并猜测您正在输入的位置。一旦您看到想要的地址，从列表中选择它。您的地图应该看起来像下面的截图：
- en: '![Geocoding – from an address to a point](img/4812OS_05_07.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![地理编码 – 从地址到点](img/4812OS_05_07.jpg)'
- en: 'Once you have clicked on your selection, the map will automatically place a
    marker at the location and zoom into it. You will now have a map that looks like
    the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击了选择，地图将自动在位置放置一个标记并放大。现在您将有一个看起来像下面的地图：
- en: '![Geocoding – from an address to a point](img/4812OS_05_08.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![地理编码 – 从地址到点](img/4812OS_05_08.jpg)'
- en: For the next example, you will use a URL to map an address.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，您将使用URL来映射地址。
- en: Geocoding from URL parameters
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从URL参数进行地理编码
- en: 'In the last example, a user is able to load the map and enter an address to
    find it. In this example, you will allow the user to enter the address in the
    URL and be presented with a map that has zoomed into a marker at the location.
    To create the map, follow these steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个例子中，用户能够加载地图并输入地址以找到它。在这个例子中，您将允许用户在URL中输入地址，并显示一个放大到标记位置的地图。要创建地图，请按照以下步骤操作：
- en: 'First, add a reference to the `esri-leaflet-geocoder.js` file. You do not need
    the CSS file, as you did in the previous example, because you are not adding the
    search box:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，添加对`esri-leaflet-geocoder.js`文件的引用。由于您没有添加搜索框，因此不需要CSS文件，如前一个示例中所示：
- en: '[PRE20]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, you need to get the parameter from the URL. In this example, `a` is chosen
    as the variable that will contain the address. To get the URL parameters, use
    `location.search`. This grabs everything after the question mark. You only want
    the address, so split it on the equals sign and then grab the second element of
    the returned array, `y[1]`. This will return `%20` wherever there is a space in
    the URL, so use `decodeURIComponent(y[1])` to remove them:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要从URL中获取参数。在这个例子中，`a`被选为包含地址的变量。要获取URL参数，请使用`location.search`。这将获取问号之后的所有内容。您只需要地址，因此按等号分割，然后获取返回数组的第二个元素，`y[1]`。这将返回URL中每个空格处的`%20`，因此使用`decodeURIComponent(y[1])`来移除它们：
- en: '[PRE21]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create the geocoding service, passing the address, parameters, and a callback
    function. The function will create a marker from the first result and then set
    the view zoomed in on the marker:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建地理编码服务，传递地址、参数和回调函数。该函数将从第一个结果创建一个标记，然后设置视图以放大标记：
- en: '[PRE22]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Load the page and add `?a=400 roma ave ne,albuquerque,nm,usa` after the `URLgeocode.html`
    file. Your map will load and look like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在`URLgeocode.html`文件后添加`?a=400 roma ave ne,albuquerque,nm,usa`。您的地图将加载并看起来像这样：
- en: '![Geocoding from URL parameters](img/4812OS_05_09.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![从URL参数进行地理编码](img/4812OS_05_09.jpg)'
- en: Reverse geocoding – using points to find addresses
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反向地理编码 – 使用点查找地址
- en: 'Reverse geocoding does the exact opposite of geocoding. It takes a point on
    a map and finds its address. In this example, you will allow the user to click
    on the map and add a marker that has the address as a pop up. To create the map,
    follow these steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 反向地理编码与地理编码正好相反。它从一个地图上的点找到其地址。在这个例子中，您将允许用户点击地图并添加一个带有地址作为弹出窗口的标记。要创建地图，请按照以下步骤操作：
- en: 'First, add a reference to the Esri-leaflet and `esri-leaflet-geocoder.js` files:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，添加对Esri-leaflet和`esri-leaflet-geocoder.js`文件的引用：
- en: '[PRE23]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a new geocoding service:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的地理编码服务：
- en: '[PRE24]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Subscribe to the `click` event and add a function that calls `reverse()`, passing
    longitude and latitude options, and a callback function. The callback function
    will create a marker, add it to the map, and then bind a pop up. The address is
    stored in the result object as `result.address`. This code will add a point every
    time you click on the map. To only have one point displayed, add `map.removeLayer(r)`
    before creating the marker:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订阅`click`事件并添加一个函数，该函数调用`reverse()`，传递经纬度选项和一个回调函数。回调函数将创建一个标记，将其添加到地图中，并绑定一个弹出窗口。地址存储在结果对象中作为`result.address`。此代码将在您每次点击地图时添加一个点。要只显示一个点，在创建标记之前添加`map.removeLayer(r)`：
- en: '[PRE25]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When you are finished, your map will look like this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成时，您的地图将看起来像这样：
- en: '![Reverse geocoding – using points to find addresses](img/4812OS_05_10.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![反向地理编码 – 使用点查找地址](img/4812OS_05_10.jpg)'
- en: Query by attribute
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据属性查询
- en: 'When consuming a service, you usually load the entire layer. Sometimes, you
    may only want a subset of the layer data. Using a query will allow you to load
    only that subset that you are interested in. In this example, you will query a
    graffiti layer for open and closed cases. To create the map, follow these steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用服务时，通常加载整个层。有时，您可能只想加载层数据的一个子集。使用查询将允许您只加载您感兴趣的子集。在这个例子中，您将查询涂鸦层以获取开放和关闭的案件。要创建地图，请按照以下步骤操作：
- en: 'Reference the Esri-leaflet file as you have seen in the previous examples.
    You do not need any additional files. Style the <`div`> query using CSS:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考您在先前的例子中看到的Esri-leaflet文件。您不需要任何额外的文件。使用CSS样式化`<div>`查询：
- en: '[PRE26]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create the selection element and add `Open` and `Closed` as options:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建选择元素并添加`Open`和`Closed`作为选项：
- en: '[PRE27]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add a feature layer that connects to the graffiti service. Use the `pointToLayer`
    option to create a marker for each feature and add them to the map:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个连接到涂鸦服务的特征层。使用`pointToLayer`选项为每个特征创建一个标记并将它们添加到地图中：
- en: '[PRE28]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a `popupTemplate` variable. You can find the parameters in the layer
    by browsing to the link in the feature layer. Bind the pop up by creating a function
    that returns the template. The template allows you to pass the fields contained
    in the ESRI layer to the template. The field name goes in curly braces. Then,
    you can use the template as your string in `bindPopup()`:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`popupTemplate`变量。您可以通过浏览特征层的链接来找到参数。通过创建一个返回模板的函数来绑定弹出窗口。该模板允许您将包含在ESRI层中的字段传递到模板中。字段名称放在大括号中。然后，您可以使用模板作为`bindPopup()`中的字符串：
- en: '[PRE29]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create an event for when the selection element changes. Pass the value of the
    current selection to the method `setWhere()`. This method refreshes the feature
    layer based on the `where` query. In this example, `where` is the value of the
    `status` property:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个当选择元素改变时的事件。将当前选择的值传递给`setWhere()`方法。此方法根据`where`查询刷新特征层。在这个例子中，`where`是`status`属性的值：
- en: '[PRE30]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'When you are finished, you can select **Closed**, and the map will look like
    this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成时，您可以选择**Closed**，地图将看起来像这样：
- en: '![Query by attribute](img/4812OS_05_11.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![根据属性查询](img/4812OS_05_11.jpg)'
- en: Query by proximity
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据邻近度查询
- en: 'In the previous example, you queried a feature layer based on an attribute.
    You can also query your feature layer based on its proximity to a point. In this
    example, you will query the layer based on the location of a mouse click. The
    following instructions will walk you through creating a proximity query:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，您根据属性查询了特征层。您也可以根据其与点的邻近度查询特征层。在这个例子中，您将根据鼠标点击的位置查询层。以下说明将指导您创建邻近度查询：
- en: 'Reference the Esri-leaflet file as you have in previous examples. Add the feature
    layer to the map. You will pass the `pointToLayer` option, returning `circleMarker`
    for each feature. You need to create the circle marker so that you can change
    the color of the marker in a later step:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考之前示例中的方式引用 Esri-leaflet 文件。将要素层添加到地图中。你需要传递 `pointToLayer` 选项，为每个要素返回 `circleMarker`。你需要创建圆点标记，以便在后续步骤中更改标记的颜色：
- en: '[PRE31]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a pop-up template using the feature properties. Bind the pop up to the
    feature as follows:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用要素属性创建一个弹出模板。将弹出窗口绑定到要素，如下所示：
- en: '[PRE32]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a query. If you browse to the service—place the URL of the query in
    your browser—and scroll to the bottom of the page, you will see on the last line
    that this service supports querying. Pass the query to the layer you want to query:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个查询。如果你浏览到该服务——在你的浏览器中放置查询的 URL 并滚动到页面底部，你将在最后一行看到这个服务支持查询。将查询传递到你想要查询的层：
- en: '[PRE33]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create an event for a mouse click and subscribe using the `runQuery()` function:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个鼠标点击事件，并使用 `runQuery()` 函数进行订阅：
- en: '[PRE34]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a function, `runQuery()`, to be executed when the user clicks on the
    map. This function will do three things: it will execute a query using the `nearby()`
    method, passing the latitude and longitude of the mouse click and a distance of
    804 meters (half mile); it will set the style of all of the circle markers to
    blue; and it will take the results of the query and pass the ID of every marker
    that is returned to a `style` function, turning them green. We used the circle
    marker in the second step so that we could change the color to highlight the query
    results:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数 `runQuery()`，当用户点击地图时执行。这个函数将执行三个操作：使用 `nearby()` 方法执行查询，传递鼠标点击的经纬度和
    804 米（半英里）的距离；将所有圆点标记的样式设置为蓝色；并将查询结果传递给一个 `style` 函数，将它们变为绿色。我们在第二步使用了圆点标记，以便我们可以更改颜色以突出显示查询结果：
- en: '[PRE35]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'When you click on the map, it should look like this:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击地图时，它应该看起来像这样：
- en: '![Query by proximity](img/4812OS_05_12.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![基于邻近度查询](img/4812OS_05_12.jpg)'
- en: The green markers are all within half a mile of the user's click.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 绿色标记都在用户点击位置半英里范围内。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you learned how to use the most common file format for geographical
    data: the shapefile. You also learned how to use the `esri-leaflet` plugin to
    connect to ESRI services and add basemaps as well as five other ESRI layer types.
    You already learned about heatmaps previously, but in this chapter, you also learned
    how to consume ESRI services and add them as a heatmap. You learned how to geocode
    an address to a map and also how to reverse geocode a point to a street address.
    Lastly, you learned how to query an ESRI service first by attribute and then by
    location.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用地理数据的最常见文件格式：shapefile。你还学习了如何使用 `esri-leaflet` 插件连接到 ESRI 服务，并添加底图以及五种其他
    ESRI 层类型。你之前已经学习了热力图，但在这章中，你还学习了如何消费 ESRI 服务并将它们作为热力图添加。你学习了如何将地址地理编码到地图上，以及如何将点反向地理编码到街道地址。最后，你学习了如何首先通过属性然后通过位置查询
    ESRI 服务。
- en: In the next chapter, you will combine everything you have learned to create
    an application using Leaflet with other programming languages.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将结合所学的一切，使用 Leaflet 和其他编程语言创建一个应用程序。
