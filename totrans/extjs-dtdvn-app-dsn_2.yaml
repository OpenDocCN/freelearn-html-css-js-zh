- en: Chapter 2. Planning Application Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will set up the development environment of the project while
    introducing Sencha Cmd.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Design a simple application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimize Ajax requests to use Ext Direct and `Ext.util.History` to control the
    screen with URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Sencha Cmd and a local development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By setting up the local development environment with Sencha Cmd, when finally
    deploying the application, Sencha Cmd will only pick up the components being used.
    This will therefore optimize the final application.
  prefs: []
  type: TYPE_NORMAL
- en: With Sencha Cmd, you can run a native package for Sencha Touch, including scaffolding
    and building themes. Let's begin generating your project using Sencha Cmd.
  prefs: []
  type: TYPE_NORMAL
- en: Install the latest JAVA Runtime Environment that is available on [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
    or JRE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Compass available at [http://compass-style.org/](http://compass-style.org/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Sencha Cmd available at [http://www.sencha.com/products/sencha-cmd/download](http://www.sencha.com/products/sencha-cmd/download).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Ext JS SDK available at [http://www.sencha.com/products/extjs/download/](http://www.sencha.com/products/extjs/download/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract Ext JS SDK and locate it in a local directory of your choice. For example,
    you can create a top-level directory called `ext`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A directory structure will be created as shown in the following screenshot.
    This time, we will use Ext JS 4.2.2 GPL.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Sencha Cmd and a local development environment](img/5446OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The example is in Mac OS X. After installation, Sencha Cmd is located in the
    following path, `~/bin/Sencha/Cmd/4.0.0.203/`.
  prefs: []
  type: TYPE_NORMAL
- en: For Windows, Sencha Cmd is located at the following path, `C:/Users/(your username)/bin`.
  prefs: []
  type: TYPE_NORMAL
- en: If the path is set correctly, you should be able to execute the following command
    under Sencha and the following list of options, categories, and commands should
    appear on your screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: By using a combination of the following definitions within Sencha Cmd, we can
    use Sencha Cmd.
  prefs: []
  type: TYPE_NORMAL
- en: For example, to create a project, using the options and categories we can enter,
    `sencha -sdk [/sdk/path] generate app App [/project/path]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build a project, we can use categories and commands to enter: `sencha app
    build`.'
  prefs: []
  type: TYPE_NORMAL
- en: Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some options you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`* --debug, -d -` : This sets the log level to higher verbosity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`* --plain, -p -` : This enables plain logging output (no highlighting)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`* --quiet, -q -` : This sets the log level to warnings and errors only'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`* --sdk-path, -s -` : This sets the path to the target framework'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some categories you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*app -` : Using this, we can performs various application build processes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*compile -` : This allows us to compile sources to produce concatenated output
    and metadata'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*fs -` : This is a set of useful utility actions to work with files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*generate -` : This generates models, controllers, and so on, or an entire
    application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*manifest -` : This extracts class metadata'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*package -` : This packages a Sencha Touch application for native app stores'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*theme -` : This builds a set of theme images from a given html page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some commands you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`* ant -` : This invokes Ant with helpful properties back to Sencha Command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`* build -` : This builds a project from a JSB3 file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`* config -` : This loads a config file or sets a configuration property'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`* help -` : This displays help for commands'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`* js -` : This executes arbitrary JavaScript file(s)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`* which -` : This displays the path to the current version of Sencha Cmd'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a project with Sencha Cmd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin with, let''s generate a project using Sencha Cmd. At first, move the
    current directory into the project directory and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following log should present itself. It''s very long, so this is an abridged
    version, that is, the start and the end of the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, a directory is generated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a project with Sencha Cmd](img/5446OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's look at it with a browser; it should be displayed as follows. By all means
    display it via a web server.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a project with Sencha Cmd](img/5446OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By executing the command, Sencha Cmd creates a temporary view and controller
    to get the whole project up and running quickly. We can make changes or additions
    to this to suit our own applications.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a component test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The temporary application was generated in Sencha Cmd. However, you should not
    customize this immediately. Before you do, let's make a **component test** (**CT**)
    to facilitate development. Generally speaking, it tests the source code and the
    relationships between the components. The CT shows the source code being tested
    in the viewport and in separate test views, without moving the whole source code.
    By using a CT, a team of developers can smoothly build an application at the same
    time and detect problems early in the development process.
  prefs: []
  type: TYPE_NORMAL
- en: Check how it's working
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, you can check how the automatically generated application works and
    look at the details of `index.html` (source file: `01_check_how_its_working/index.html`).'
  prefs: []
  type: TYPE_NORMAL
- en: The only CSS file that can be read is `ext/packages/ext-theme-neptune/build/resources/ext-theme-neptune-all-debug.css`.
    As for the JS file, the following three are read.
  prefs: []
  type: TYPE_NORMAL
- en: '`ext/ext-dev.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootstrap.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/app.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To run `app.js`, you need `ext-dev.js` and `bootstrap.js`. These are necessary
    for your application, and other Ext JS files are read dynamically in the Ext Loader.
    As shown in the following screenshot, many files are read dynamically in the **Network**
    tab under developer tools in the Google Chrome browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Check how it''s working](img/5446OS_02_041.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This time we will use the Ext JS Neptune theme to build the application.
  prefs: []
  type: TYPE_NORMAL
- en: When you make a new application, the default theme `ext-theme-classic` is used.
    Let's change that to `ext-theme-neptune`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The target file to modify is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.sencha/app/sencha.cfg – L32`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the previous line to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When you proceed to the next section after making this change, the theme should
    be changed. The theme will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Check how it''s working](img/5446OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Making production build
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you use Ext Loader, it takes a lot of time before a screen is displayed.
    It becomes slower as the scale of the application grows and the number of files
    increases. This might be too slow for the product.
  prefs: []
  type: TYPE_NORMAL
- en: 'But have no fear, you already have the solution at hand—build with Sencha Cmd.
    First, move the current project into the project directory and execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following directory is made when you execute the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making production build](img/5446OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `app.js` file generated here is a minified JavaScript file that combines
    the code that you write with the Ext JS SDK. Enabling `app.js` is effective because
    the code has already been read and the Ext Loader does not need to read the code
    again, improving speed. This `app.js` file is generated in a compressed state
    that removes unnecessary new lines.
  prefs: []
  type: TYPE_NORMAL
- en: The `./build/production/MyApp/` directory was generated and stored. Let's check
    the generated production application with a browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to debug, it''s a very bad idea to compress `app.js`. Instead,
    you should execute the following command for testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `testing` directory is then made in the same directory as `production` as
    shown in the following screenshot. The `app.js` file made under this directory
    is not compressed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Making production build](img/5446OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: CT in individual views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you conduct a CT in the normal way, you will have to test all the components
    at the same time. However, if we split the CT into individual views, we can test
    each component individually in its own HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we create a directory called `ct` and write HTML for the components
    lists. It is simply the `index.html` code in the source file: `03_ct_in_individual_views/ct/index.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you will make a header component. First let''s create its appearance.
    You can make a `ct` directory for the `header` components as in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CT in individual views](img/5446OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create `view.html` and `view.js` in the `header` file. The code is given as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: View component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s make the header component `MyApp.view.Header`. You should make the `Header.js`
    under the `app/view` directory and create the `Header` component (source file:
    `04_view_component/app/view/Header.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When you create the `MyApp.toolbar.Toolbar` class, the panel component in `MyApp`
    will work. Therefore, make a panel directory under the `app` directory (source
    file: `04_view_component/app/toolbar/Toolbar.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When you display it with a browser, the following screenshot will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![View component](img/5446OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, even if you click on the buttons, nothing will happen because
    you still need to implement the event handler; but don't worry, we'll get to that.
  prefs: []
  type: TYPE_NORMAL
- en: Adding controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The appearance has been made. So now, let''s add a controller. To do this,
    make `Abstract.js` under the `app/controller` directory, followed by the `MyApp.controller.Abstract`
    class (source file: `05_adding_controller/app/controller/Abstract.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding controllers is very simple, it merely extends to `Ext.app.Controller`.
    This class will implement all the common features for the controllers, which we
    will create from now on. So, let''s make a controller for the header. Make `Header.js`
    in the same directory and define it as `MyApp.controller.Header`. In the following
    code, from the `MyApp.controller.Abstract` class, which we made some time ago,
    the `init` method is implemented (source file: `05_adding_controller/app/controller/Header.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The following are the component queries from the previous code. These acquire
    buttons located in header. With this, you have now finished making the controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'A file should be created as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding controllers](img/5446OS_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s make the CT operate the controller that you made successfully. In the
    directory, where you created `view.html` and `view.js`, you should now create
    `app.html` and `app.js`. The `app.html` CT is mostly the same as for `view.html`.
    You can see the source code here: `06_app_test/ct/header/app.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For `app.js`, please see the following code (source file: `06_app_test/ct/header/app.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You should add a link for `app.html` to `index.html` in the `ct` directory.
    In `app.js`, call `Ext.application` and start the application only for headers.
    Because the `autoCreateViewport` default value is set to `true`, you should set
    it to `false`. This is because `Viewport` is unnecessary for this test.
  prefs: []
  type: TYPE_NORMAL
- en: Second, set header to read `MyApp.controller.Header` in controllers. You should
    set the function to launch to create a view. The `Ext.util.Observable.capture`
    call captures the event that is fired in an object set in the first argument.
  prefs: []
  type: TYPE_NORMAL
- en: We can confirm visually that an event reacts when you click on the buttons.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding controllers](img/5446OS_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We just made a view without a controller. The reason is if we create a relationship
    between the controller and the view at this stage, it would make it very difficult
    to test the view.
  prefs: []
  type: TYPE_NORMAL
- en: We made `app.html` that includes the controller logic. We need the `app.html`
    to be able to test the view and the controller at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, to avoid incorrect code referring to a direct object, divide each
    component and each screen that you can put together in the CT and develop it in
    the viewport later.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's learn to create a component and a CT in sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Creating views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to create the appearance of the application. You already made the header.
    Let's put the navigation menu for the application on the left of the screen. Locate
    the header you made previously on the top of the screen. Name the screen that
    is in the center region but to the right. Put the screen in this center region.
  prefs: []
  type: TYPE_NORMAL
- en: 'The screen is divided into four sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MyAccount
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quotation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bill
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Connect these four and make a rough view structure as shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating views](img/5446OS_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's make the navigation section. This component extends a tree panel. By using
    a tree panel, the procedure to display the menu options can be handled by the
    server, rather than inputting menu options manually. The process of dividing the
    menu options into groups can be made simpler.
  prefs: []
  type: TYPE_NORMAL
- en: 'A tree store is necessary for a tree panel. So let''s make it now (source file:
    `07_creating_views/app/store/Navigation.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that a store has been made, you can define the tree panel (source file:
    `07_creating_views/app/view/Navigation.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create a CT to check what we made. The code for `07_creating_views/ct/navigation/view.html`
    is very similar to the previous `view.html` code, so please refer to the source
    file if you want to see this. The following code is for `view.js` (source file:
    `07_creating_views/ct/navigation/view.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We previously created a store because it is necessary to display the navigation
    view. The **Navigation** view is displayed like in the following screenshot when
    we see it in a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigation](img/5446OS_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's make the remaining components in the same way as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Dashboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We want to make a panel for dashboards (we will make many similar panels from
    now on). Therefore, the application will be made in the `MyApp.panel.Screen` abstract
    class. The `MyApp.panel.Screen` abstract class is the fundamental mold for the
    whole application (source file: `07_creating_views/app/panel/Screen.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We were able to create the abstract class. Now, let''s create a dashboard class
    that inherits from this abstract class (source file: `07_creating_views/app/view/DashBoard.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now, prepare the CT to check the appearance. Both `07_creating_views/ct/dashboard/view.html`
    and `07_creating_views/ct/dashboard/view.js` are similar to `ct/header`, so please
    refer to the source files for the code.
  prefs: []
  type: TYPE_NORMAL
- en: MyAccount
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s make the user''s personal account page. Let''s call this "MyAccount"
    and create it in the same way as we created the dashboard. Apart from the alias
    property and the title property, it''s exactly the same as the dashboard. For
    the code, please see the source file: `07_creating_views/app/view/MyAcco` `unt.js`.'
  prefs: []
  type: TYPE_NORMAL
- en: Quotation and bill
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Continue to make the quotation and bill in the same way. Again, besides the
    alias property and the title property, it''s the same as the dashboard. Please
    see the source files for the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`07_creating_views/app/view/Quotation.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`07_creating_views/app/view/``Bill.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewport
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's compose the component that we made so far in the viewport. Revise the
    file, which was already generated automatically by Sencha Cmd. Although we can
    make a CT by all means, with the viewport, the CT is unnecessary. HTML in itself
    is the same as the CT index.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, it is necessary to revise `app/Application.js` to use the navigation
    store (source file: `08_create_viewport/app/Application.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: For the `xtype` classes that are set in the viewport, it is necessary for the
    reading of the source code to have been completed in advance. So we have added
    the class names to the `application.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: To reflect the CSS of the newly added component, we'll build the application
    once with Sencha Cmd. This will make sure that the CSS of any new components are
    included in `sencha app build`.
  prefs: []
  type: TYPE_NORMAL
- en: With this, the component style that is being allotted to the `bootstrap.css`
    will be renewed. It is displayed as shown in the following screenshot when we
    access `index.html`, which is under a document route. The files that we made are
    read dynamically in the Ext Loader.
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewport](img/5446OS_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now the views are complete!
  prefs: []
  type: TYPE_NORMAL
- en: Creating controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will create controllers for our data.
  prefs: []
  type: TYPE_NORMAL
- en: Main
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Usually, each view component has a corresponding controller class with the same
    prefix.
  prefs: []
  type: TYPE_NORMAL
- en: But the first controller we have to deal with is the controller called Main.
    This controller has already been produced automatically in Sencha Cmd. If we need
    more processing or logic for the whole application, we should implement this class.
    Usually, the `view` class and controller class names match, but this is a special
    case where they do not because Sencha Cmd generates the Main class. So, it is
    best to leave it as is and not change the name.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `app/controller/Main.js` code, please see the source file: `09_create_controller\app\controller`.'
  prefs: []
  type: TYPE_NORMAL
- en: Although we've talked a lot about Main, we are not going to use it for the time
    being.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s add `hrefTarget` to the data in the navigation store (source file:
    `09_create_controller/app/store/Navigation.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, make a navigation controller and describe the `itemclick` event handler
    and catch an event when a menu is chosen (source file: `09_create_controller/app/controller/Navigation.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Add this to `app/Application.js` so that it is used when we display it in the
    viewport.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore, remember that the CT prepares to operate from the controller on
    its own. The following code will execute the CT for navigation (source code: `09_create_controller/ct/navigation/app.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: When we perform this, a message is displayed by the console when we select any
    option from the menu.
  prefs: []
  type: TYPE_NORMAL
- en: Dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s continue now and create the controller for dashboard. We do not describe
    any special process here, it is just preparation. Just implement the following
    code (source file: `09_create_controller/app/controller/DashBoard.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: MyAccount
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MyAccount is the same as dashboard, just replace `Dashboard` with `MyAccount`.
    For the code, please see the source file: `09_create_controller/app/controller/M`
    `yAccount.js`.'
  prefs: []
  type: TYPE_NORMAL
- en: Quotation and bill
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s the same for the quotation and bill. No special processing, just preparation,
    whichare also the same as the dashboard. For the code, please see the source file
    at the following locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`09_create_controller/app/controller/Quotation.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`09_create_controller/app/cont``roller/Bill.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At this point, you have made many files. As we created them, they filled the
    directory as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Quotation and bill](img/5446OS_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using Ext.util.History for directly accessing a screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Ext.util.History` manages the history. When a page changes, the application
    catches this change and then the `Ext.util.History` fires an event. Using this
    feature, we can control actions in our application.. For example, by using `Ext.util.History`,
    every time the application is accessed the dashboard URL is displayed.'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, when the user inputs an incorrect hash in the URL, the application
    will have trouble finding the page. However, with `Ext.util.History`, it goes
    to screens specified by the developer. For example, when we implement `Ext.util.History`,
    the user can access the quotation page directly without abnormal screen behavior.
    With `Ext.util.History`, it also allows us to attach the URL to an e-mail to access
    documents directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, you need to make the `MyApp.util.History` class. You might think
    it is an abstract class when you set eyes on it, actually, it is different. `MyApp.util.History`
    is a class used to incorporate URL control in our application using `Ext.util.History`.
    Be careful to not make a mistake here or `MyApp.util.History` will not work. The
    `Ext.util.History` class is a singleton class and `MyApp.util.History` will make
    a singleton class too. First, let''s make the `MyApp.util.History` class. It is
    very simple (source file: `10_util_history/app/util/History.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement the methods by implementing the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`init`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initNavigate`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`navigate`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parseToken`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cleanUrl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`back`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`location`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Please implement them as a method of the `MyApp.util.History` class (source
    file: `10_util_history/app/util/History.js`). The code for the implementation
    of this list is too long to include in this text, so please refer to the source
    file for the code.'
  prefs: []
  type: TYPE_NORMAL
- en: When we use `MyApp.util.History`, we have to call the `init` method. I will
    describe the usage of the `init` method later. We do not need too much explanation
    about these methods, as this will take too long. The important thing to know is
    that these methods are important for browser navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Adding logic to the controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add `MyApp.util.History` and a constructor to `MyApp.controller.Abstract` (source
    file: `11_adding_controller/app/controller/Abstract.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Set an anonymity function called `MyApp.util.History.init`, which we made previously,
    and initialize it to launch. Specify the screen to use with the sequence in an
    argument (source file: `11_adding_controller/app/Application.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Afterwards, add the `screenName` property to each class (source file: `11_adding_controller/app/controller/DashBoard.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way as with the dashboard, we''ll add a `screenName` property to
    MyAccount, Quotation, and Bill. Check the source file for the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`11_adding_controller/app/controller/MyAccount.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`11_adding_controller/app/controller/Quotation.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`11_adding_controller/app/controller/Bill.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fix the navigation controller. We should change the locale by removing the
    console and changing the call to the location method in `MyApp.util.History` (source
    file: `11_adding_controller/app/controller/Navigation.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, if we make a distinction between each view, it becomes easier to acquire
    that view. So let''s add `itemId` to each view. First, let''s add it to the dashboard
    (source file: `11_adding_controller/app/view/DashBoard.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, let''s add the `itemId` in the same way for MyAccount, Quotation, and
    Bill. Check the following source files for the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`11_adding_controller/app/view/MyAccount.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`11_adding_controller/app/view/Quotation.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`11_adding_controller/app/view/Bill.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So to confirm, we should see the URL with the added hash when we click on the
    navigation menu after we have set it up with `init`.
  prefs: []
  type: TYPE_NORMAL
- en: '`#!/dashboard`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#!/quotation`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#!/bill`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#!/myaccount`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Ext Direct
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the last in the long list of preparations. Most Sencha Ext JS applications
    communicate with a server and acquire data and transmit a message. In that case,
    it is very simple and easy to communicate with the `Ext.Ajax` class.
  prefs: []
  type: TYPE_NORMAL
- en: However, let's use Ext Direct this time. Ext Direct performs by wrapping Ajax
    communications, polling, and performing a **Remote Procedure Call** (**RPC**).
  prefs: []
  type: TYPE_NORMAL
- en: RPC is the main feature of Ext Direct. However, I will not discuss it in detail
    here because of lack of space. If you wish to know the specifics, please visit
    the Sencha homepage at [http://www.sencha.com/products/extjs/extdirect](http://www.sencha.com/products/extjs/extdirect).
  prefs: []
  type: TYPE_NORMAL
- en: Ext Direct simplifies the communication with the server. As a result, JavaScript
    code decreases. Also, in addition to the reading and burden on browsers being
    reduced, communication is optimized automatically by a combined request function.
  prefs: []
  type: TYPE_NORMAL
- en: When we simultaneously perform Ajax communication with an initial value via
    Ext Direct in an interval of 10 milliseconds, we can combine the requests to the
    router into one communication. But for us, it is the same as us communicating
    each request separately.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is still not common knowledge among a lot of developers, especially those
    who do not know about the benefits of Ext Direct. It is a shame because this is
    such a convenient feature to have in your application.
  prefs: []
  type: TYPE_NORMAL
- en: It does take a lot of preparation in the beginning. However, the development
    of future Sencha Ext JS will become simpler if we learn it here and keep it prepared
    and available, like a template.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Ext Direct router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First we need to make the router and implement it in PHP from here. In fact,
    the router is implemented in a sample. We only locate it and use it for it to
    start. To begin, copy the PHP from the sample page. You can find the sample page
    in your Ext SDK path followed by `/examples/direct/`. In other words. it's `(Ext
    SDK path)/examples/direct/`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Ext Direct router](img/5446OS_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create a folder called `php` in the document route and copy the four files shown
    in the previous screenshot. After we have copied the files, it is acceptable to
    delete them from this path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `config.php` and define the method as the class shown on the server side.
    There are so many interfaces in the original, but this time, we will use only
    one. So let''s delete the others to keep things manageable (source file: `12_setup_ext_direct/php/config.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Creating the Ext Direct module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the same way as we did previously, we''ll only use the `doEcho` method in
    the `TestAction` class. So, let''s delete the other methods to keep everything
    manageable (source file: `12_setup_ext_direct/php/classes/TestAction.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Applying Ext Direct to the client application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, set the client application to immediately call `TestAction.doEcho` from
    the client side by adding the following source code in `index.html` (source file:
    `12_setup_ext_direct/index.html`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, call `addProvider` and set it to use a member shown in the server side
    in `Application.js` (source file: `12_setup_ext_direct/app/Application.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Testing Ext Direct
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we can test it. When a logout button is clicked, call `doEcho` and confirm
    whether it works normally. Then, add the processing to the header controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the performance with a browser. When we click on the logout button, the
    character string `message` already in the code will be sent to the server side.
    We can then check to see if `message` comes back to the client side. If it comes
    back successfully, everything is good! For reference, please check the source
    file: `12_setup_ext_direct/app/controller/Header.js`.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Good work! We are now ready to develop the application. It was very long, but
    remember, it only takes a long time to complete the initial preparations.
  prefs: []
  type: TYPE_NORMAL
- en: From now on, you can use what you did here in the future. If you go over what
    we have just done and understand it for yourself, you can use this as a template
    for future projects and it will make the preparation stage go a lot faster and
    smoother.
  prefs: []
  type: TYPE_NORMAL
- en: When you're ready, continue to the next chapter in which we'll begin to input
    data into our database.
  prefs: []
  type: TYPE_NORMAL
