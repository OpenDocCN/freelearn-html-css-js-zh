- en: Chapter 2. Planning Application Design
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. 应用程序设计规划
- en: In this chapter, we will set up the development environment of the project while
    introducing Sencha Cmd.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍Sencha Cmd的同时设置项目的开发环境。
- en: 'In this chapter, you will learn to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何：
- en: Design a simple application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计一个简单的应用程序
- en: Optimize Ajax requests to use Ext Direct and `Ext.util.History` to control the
    screen with URL
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化Ajax请求以使用Ext Direct和`Ext.util.History`通过URL控制屏幕
- en: Setting up Sencha Cmd and a local development environment
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Sencha Cmd和本地开发环境
- en: By setting up the local development environment with Sencha Cmd, when finally
    deploying the application, Sencha Cmd will only pick up the components being used.
    This will therefore optimize the final application.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Sencha Cmd设置本地开发环境，最终部署应用程序时，Sencha Cmd将仅选择使用的组件。因此，这将优化最终应用程序。
- en: With Sencha Cmd, you can run a native package for Sencha Touch, including scaffolding
    and building themes. Let's begin generating your project using Sencha Cmd.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Sencha Cmd，你可以运行Sencha Touch的原生包，包括脚手架和构建主题。让我们开始使用Sencha Cmd生成你的项目。
- en: Install the latest JAVA Runtime Environment that is available on [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
    or JRE.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装可在[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)或JRE上找到的最新JAVA运行环境。
- en: Install Compass available at [http://compass-style.org/](http://compass-style.org/).
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[http://compass-style.org/](http://compass-style.org/)安装Compass。
- en: Install Sencha Cmd available at [http://www.sencha.com/products/sencha-cmd/download](http://www.sencha.com/products/sencha-cmd/download).
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装可在[http://www.sencha.com/products/sencha-cmd/download](http://www.sencha.com/products/sencha-cmd/download)找到的Sencha
    Cmd。
- en: Download Ext JS SDK available at [http://www.sencha.com/products/extjs/download/](http://www.sencha.com/products/extjs/download/).
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载可在[http://www.sencha.com/products/extjs/download/](http://www.sencha.com/products/extjs/download/)找到的Ext
    JS SDK。
- en: Extract Ext JS SDK and locate it in a local directory of your choice. For example,
    you can create a top-level directory called `ext`.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取Ext JS SDK并将其定位在你选择的本地目录中。例如，你可以创建一个名为`ext`的顶级目录。
- en: A directory structure will be created as shown in the following screenshot.
    This time, we will use Ext JS 4.2.2 GPL.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建如以下截图所示的目录结构。这次，我们将使用Ext JS 4.2.2 GPL。
- en: '![Setting up Sencha Cmd and a local development environment](img/5446OS_02_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![设置Sencha Cmd和本地开发环境](img/5446OS_02_01.jpg)'
- en: The example is in Mac OS X. After installation, Sencha Cmd is located in the
    following path, `~/bin/Sencha/Cmd/4.0.0.203/`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 示例在Mac OS X上。安装后，Sencha Cmd位于以下路径，`~/bin/Sencha/Cmd/4.0.0.203/`。
- en: For Windows, Sencha Cmd is located at the following path, `C:/Users/(your username)/bin`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，Sencha Cmd位于以下路径，`C:/Users/(你的用户名)/bin`。
- en: If the path is set correctly, you should be able to execute the following command
    under Sencha and the following list of options, categories, and commands should
    appear on your screen.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果路径设置正确，你应该能够在Sencha下执行以下命令，并且以下列表中的选项、类别和命令应该出现在你的屏幕上。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By using a combination of the following definitions within Sencha Cmd, we can
    use Sencha Cmd.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在Sencha Cmd中使用以下定义的组合，我们可以使用Sencha Cmd。
- en: For example, to create a project, using the options and categories we can enter,
    `sencha -sdk [/sdk/path] generate app App [/project/path]`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要创建一个项目，使用我们提供的选项和类别，我们可以输入，`sencha -sdk [/sdk/path] generate app App [/project/path]`。
- en: 'To build a project, we can use categories and commands to enter: `sencha app
    build`.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个项目，我们可以使用类别和命令进入：`sencha app build`。
- en: Options
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项
- en: 'Here are some options you can use:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些你可以使用的选项：
- en: '`* --debug, -d -` : This sets the log level to higher verbosity'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`* --debug, -d -` : 这将设置日志级别为更高的详细程度'
- en: '`* --plain, -p -` : This enables plain logging output (no highlighting)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`* --plain, -p -` : 这将启用纯日志输出（无高亮）'
- en: '`* --quiet, -q -` : This sets the log level to warnings and errors only'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`* --quiet, -q -` : 这将设置日志级别为仅警告和错误'
- en: '`* --sdk-path, -s -` : This sets the path to the target framework'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`* --sdk-path, -s -` : 这将设置目标框架的路径'
- en: Categories
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类别
- en: 'Here are some categories you can use:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些你可以使用的类别：
- en: '`*app -` : Using this, we can performs various application build processes'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*app -` : 使用这个，我们可以执行各种应用程序构建过程'
- en: '`*compile -` : This allows us to compile sources to produce concatenated output
    and metadata'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*compile -` : 这允许我们将源代码编译成连接输出和元数据'
- en: '`*fs -` : This is a set of useful utility actions to work with files'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*fs -` : 这是一组用于处理文件的实用操作'
- en: '`*generate -` : This generates models, controllers, and so on, or an entire
    application'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*generate -` : 这将生成模型、控制器等，或者整个应用程序'
- en: '`*manifest -` : This extracts class metadata'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*manifest -` : 这将提取类元数据'
- en: '`*package -` : This packages a Sencha Touch application for native app stores'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*package -` : 这将为 Sencha Touch 应用程序打包，以便在原生应用商店中发布'
- en: '`*theme -` : This builds a set of theme images from a given html page'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*theme -` : 这将从给定的 HTML 页面生成一组主题图像'
- en: Commands
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令
- en: 'Here are some commands you can use:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些你可以使用的命令：
- en: '`* ant -` : This invokes Ant with helpful properties back to Sencha Command'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`* ant -` : 这将调用 Ant 并将一些有用的属性传回 Sencha Command'
- en: '`* build -` : This builds a project from a JSB3 file.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`* build -` : 这将从 JSB3 文件构建一个项目。'
- en: '`* config -` : This loads a config file or sets a configuration property'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`* config -` : 这将加载一个配置文件或设置一个配置属性'
- en: '`* help -` : This displays help for commands'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`* help -` : 这将显示命令的帮助信息'
- en: '`* js -` : This executes arbitrary JavaScript file(s)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`* js -` : 这将执行任意 JavaScript 文件（s）'
- en: '`* which -` : This displays the path to the current version of Sencha Cmd'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`* which -` : 这将显示当前 Sencha Cmd 版本的路径'
- en: Creating a project with Sencha Cmd
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Sencha Cmd 创建项目
- en: 'To begin with, let''s generate a project using Sencha Cmd. At first, move the
    current directory into the project directory and execute the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用 Sencha Cmd 生成一个项目。首先，将当前目录移动到项目目录中，并执行以下命令：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following log should present itself. It''s very long, so this is an abridged
    version, that is, the start and the end of the log:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 应该出现以下日志。它非常长，所以这是一个简化的版本，即日志的开始和结束部分：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, a directory is generated as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将生成以下目录：
- en: '![Creating a project with Sencha Cmd](img/5446OS_02_02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Sencha Cmd 创建项目](img/5446OS_02_02.jpg)'
- en: Let's look at it with a browser; it should be displayed as follows. By all means
    display it via a web server.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用浏览器查看它；它应该如下所示。无论如何，通过 Web 服务器显示它。
- en: '![Creating a project with Sencha Cmd](img/5446OS_02_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Sencha Cmd 创建项目](img/5446OS_02_03.jpg)'
- en: By executing the command, Sencha Cmd creates a temporary view and controller
    to get the whole project up and running quickly. We can make changes or additions
    to this to suit our own applications.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行命令，Sencha Cmd 创建一个临时的视图和控制台，以便快速启动整个项目。我们可以根据我们自己的应用程序对其进行更改或添加。
- en: Creating a component test
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建组件测试
- en: The temporary application was generated in Sencha Cmd. However, you should not
    customize this immediately. Before you do, let's make a **component test** (**CT**)
    to facilitate development. Generally speaking, it tests the source code and the
    relationships between the components. The CT shows the source code being tested
    in the viewport and in separate test views, without moving the whole source code.
    By using a CT, a team of developers can smoothly build an application at the same
    time and detect problems early in the development process.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Cmd 生成了一个临时应用程序。然而，你不应该立即对其进行自定义。在你这样做之前，让我们做一个**组件测试**（**CT**），以方便开发。一般来说，它测试源代码和组件之间的关系。CT
    在视口中以及单独的测试视图中显示正在测试的源代码，而不移动整个源代码。通过使用 CT，开发团队可以同时平滑地构建应用程序，并在开发过程中早期发现问题。
- en: Check how it's working
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看其工作情况
- en: 'First, you can check how the automatically generated application works and
    look at the details of `index.html` (source file: `01_check_how_its_working/index.html`).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可以检查自动生成的应用程序的工作情况，并查看 `index.html` 的详细信息（源文件：`01_check_how_its_working/index.html`）。
- en: The only CSS file that can be read is `ext/packages/ext-theme-neptune/build/resources/ext-theme-neptune-all-debug.css`.
    As for the JS file, the following three are read.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一可以读取的 CSS 文件是 `ext/packages/ext-theme-neptune/build/resources/ext-theme-neptune-all-debug.css`。至于
    JS 文件，以下三个被读取。
- en: '`ext/ext-dev.js`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ext/ext-dev.js`'
- en: '`bootstrap.js`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bootstrap.js`'
- en: '`app/app.js`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/app.js`'
- en: 'To run `app.js`, you need `ext-dev.js` and `bootstrap.js`. These are necessary
    for your application, and other Ext JS files are read dynamically in the Ext Loader.
    As shown in the following screenshot, many files are read dynamically in the **Network**
    tab under developer tools in the Google Chrome browser:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行 `app.js`，你需要 `ext-dev.js` 和 `bootstrap.js`。这些对于你的应用程序是必要的，并且其他 Ext JS 文件在
    Ext Loader 中动态读取。如下面的截图所示，在 Google Chrome 浏览器开发工具的“网络”标签下，许多文件都是动态读取的：
- en: '![Check how it''s working](img/5446OS_02_041.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![查看其工作情况](img/5446OS_02_041.jpg)'
- en: This time we will use the Ext JS Neptune theme to build the application.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们将使用 Ext JS Neptune 主题来构建应用程序。
- en: When you make a new application, the default theme `ext-theme-classic` is used.
    Let's change that to `ext-theme-neptune`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个新的应用程序时，默认主题是 `ext-theme-classic`。让我们将其更改为 `ext-theme-neptune`。
- en: 'The target file to modify is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改的目标文件如下：
- en: '`.sencha/app/sencha.cfg – L32`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`.sencha/app/sencha.cfg – L32`'
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Change the previous line to the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 将上一行更改为以下内容：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When you proceed to the next section after making this change, the theme should
    be changed. The theme will look like the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行此更改后继续到下一节，主题应更改为以下截图所示：
- en: '![Check how it''s working](img/5446OS_02_05.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![检查其工作情况](img/5446OS_02_05.jpg)'
- en: Making production build
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作生产构建
- en: When you use Ext Loader, it takes a lot of time before a screen is displayed.
    It becomes slower as the scale of the application grows and the number of files
    increases. This might be too slow for the product.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用Ext Loader时，在屏幕显示之前需要花费很多时间。随着应用程序规模的增长和文件数量的增加，它将变得更慢。这可能对于产品来说太慢了。
- en: 'But have no fear, you already have the solution at hand—build with Sencha Cmd.
    First, move the current project into the project directory and execute the following
    command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 但不必担心，你手头已经有了解决方案——使用Sencha Cmd构建。首先，将当前项目移动到项目目录，并执行以下命令：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following directory is made when you execute the command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令时将创建以下目录：
- en: '![Making production build](img/5446OS_02_06.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![制作生产构建](img/5446OS_02_06.jpg)'
- en: The `app.js` file generated here is a minified JavaScript file that combines
    the code that you write with the Ext JS SDK. Enabling `app.js` is effective because
    the code has already been read and the Ext Loader does not need to read the code
    again, improving speed. This `app.js` file is generated in a compressed state
    that removes unnecessary new lines.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里生成的 `app.js` 文件是一个压缩的JavaScript文件，它将你编写的代码与Ext JS SDK的代码合并。启用 `app.js` 是有效的，因为代码已经被读取，Ext
    Loader 不需要再次读取代码，从而提高速度。此 `app.js` 文件是在压缩状态下生成的，去除了不必要的空行。
- en: The `./build/production/MyApp/` directory was generated and stored. Let's check
    the generated production application with a browser.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`./build/production/MyApp/` 目录已生成并存储。让我们用浏览器检查生成的生产应用程序。'
- en: 'If you want to debug, it''s a very bad idea to compress `app.js`. Instead,
    you should execute the following command for testing:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要调试，压缩 `app.js` 是一个非常糟糕的主意。相反，你应该执行以下命令进行测试：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `testing` directory is then made in the same directory as `production` as
    shown in the following screenshot. The `app.js` file made under this directory
    is not compressed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`testing` 目录随后在 `production` 目录中创建，如下截图所示。此目录下创建的 `app.js` 文件未压缩。'
- en: '![Making production build](img/5446OS_02_07.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![制作生产构建](img/5446OS_02_07.jpg)'
- en: CT in individual views
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单个视图中的CT
- en: If you conduct a CT in the normal way, you will have to test all the components
    at the same time. However, if we split the CT into individual views, we can test
    each component individually in its own HTML.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你按常规方式执行CT，你必须同时测试所有组件。然而，如果我们将CT拆分为单个视图，我们可以在各自的HTML中单独测试每个组件。
- en: 'First, we create a directory called `ct` and write HTML for the components
    lists. It is simply the `index.html` code in the source file: `03_ct_in_individual_views/ct/index.html`.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个名为 `ct` 的目录，并编写组件列表的HTML。这仅仅是源文件中的 `index.html` 代码：`03_ct_in_individual_views/ct/index.html`。
- en: 'Here, you will make a header component. First let''s create its appearance.
    You can make a `ct` directory for the `header` components as in the following
    screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你将创建一个标题组件。首先让我们创建其外观。你可以为 `header` 组件创建一个 `ct` 目录，如下截图所示：
- en: '![CT in individual views](img/5446OS_02_08.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![单个视图中的CT](img/5446OS_02_08.jpg)'
- en: 'Create `view.html` and `view.js` in the `header` file. The code is given as
    follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `header` 文件中创建 `view.html` 和 `view.js`。代码如下：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: View component
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图组件
- en: 'Let''s make the header component `MyApp.view.Header`. You should make the `Header.js`
    under the `app/view` directory and create the `Header` component (source file:
    `04_view_component/app/view/Header.js`).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建 `MyApp.view.Header` 的标题组件。你应该在 `app/view` 目录下创建 `Header.js` 并创建 `Header`
    组件（源文件：`04_view_component/app/view/Header.js`）。
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When you create the `MyApp.toolbar.Toolbar` class, the panel component in `MyApp`
    will work. Therefore, make a panel directory under the `app` directory (source
    file: `04_view_component/app/toolbar/Toolbar.js`).'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建 `MyApp.toolbar.Toolbar` 类时，`MyApp` 中的面板组件将工作。因此，在 `app` 目录下（源文件：`04_view_component/app/toolbar/Toolbar.js`）创建一个面板目录。
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When you display it with a browser, the following screenshot will appear:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当你用浏览器显示它时，将出现以下截图：
- en: '![View component](img/5446OS_02_09.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![视图组件](img/5446OS_02_09.jpg)'
- en: At this point, even if you click on the buttons, nothing will happen because
    you still need to implement the event handler; but don't worry, we'll get to that.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，即使你点击按钮，也不会发生任何事情，因为你仍然需要实现事件处理器；但别担心，我们很快就会做到这一点。
- en: Adding controllers
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加控制器
- en: 'The appearance has been made. So now, let''s add a controller. To do this,
    make `Abstract.js` under the `app/controller` directory, followed by the `MyApp.controller.Abstract`
    class (source file: `05_adding_controller/app/controller/Abstract.js`).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 外观已经制作好了。所以现在，让我们添加一个控制器。为此，在`app/controller`目录下创建`Abstract.js`，然后创建`MyApp.controller.Abstract`类（源文件：`05_adding_controller/app/controller/Abstract.js`）。
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Adding controllers is very simple, it merely extends to `Ext.app.Controller`.
    This class will implement all the common features for the controllers, which we
    will create from now on. So, let''s make a controller for the header. Make `Header.js`
    in the same directory and define it as `MyApp.controller.Header`. In the following
    code, from the `MyApp.controller.Abstract` class, which we made some time ago,
    the `init` method is implemented (source file: `05_adding_controller/app/controller/Header.js`).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 添加控制器非常简单，它只是扩展到`Ext.app.Controller`。这个类将实现所有控制器将创建的常见功能。所以，让我们为标题创建一个控制器。在同一个目录下创建`Header.js`，并定义为`MyApp.controller.Header`。在以下代码中，从我们之前创建的`MyApp.controller.Abstract`类中实现了`init`方法（源文件：`05_adding_controller/app/controller/Header.js`）。
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The following are the component queries from the previous code. These acquire
    buttons located in header. With this, you have now finished making the controller.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从上一段代码中获取的组件查询。这些查询获取位于标题中的按钮。有了这个，你现在已经完成了控制器的创建。
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'A file should be created as shown in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 应该创建一个如下所示的文件：
- en: '![Adding controllers](img/5446OS_02_10.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![添加控制器](img/5446OS_02_10.jpg)'
- en: 'Let''s make the CT operate the controller that you made successfully. In the
    directory, where you created `view.html` and `view.js`, you should now create
    `app.html` and `app.js`. The `app.html` CT is mostly the same as for `view.html`.
    You can see the source code here: `06_app_test/ct/header/app.html`.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们操作你成功创建的控制器。在目录中，你创建了`view.html`和`view.js`的地方，你现在应该创建`app.html`和`app.js`。`app.html`的CT大部分与`view.html`相同。你可以在这里看到源代码：`06_app_test/ct/header/app.html`。
- en: 'For `app.js`, please see the following code (source file: `06_app_test/ct/header/app.js`).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`app.js`，请参阅以下代码（源文件：`06_app_test/ct/header/app.js`）。
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You should add a link for `app.html` to `index.html` in the `ct` directory.
    In `app.js`, call `Ext.application` and start the application only for headers.
    Because the `autoCreateViewport` default value is set to `true`, you should set
    it to `false`. This is because `Viewport` is unnecessary for this test.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在`ct`目录中为`app.html`添加一个链接到`index.html`。在`app.js`中调用`Ext.application`并仅启动标题应用程序。因为`autoCreateViewport`的默认值设置为`true`，你应该将其设置为`false`。这是因为`Viewport`对于这个测试是不必要的。
- en: Second, set header to read `MyApp.controller.Header` in controllers. You should
    set the function to launch to create a view. The `Ext.util.Observable.capture`
    call captures the event that is fired in an object set in the first argument.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，将控制器中的标题设置为读取`MyApp.controller.Header`。你应该设置函数以创建视图。`Ext.util.Observable.capture`调用捕获了在第一个参数中设置的对象中触发的事件。
- en: We can confirm visually that an event reacts when you click on the buttons.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过视觉确认，当点击按钮时，事件会做出反应。
- en: '![Adding controllers](img/5446OS_02_11.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![添加控制器](img/5446OS_02_11.jpg)'
- en: We just made a view without a controller. The reason is if we create a relationship
    between the controller and the view at this stage, it would make it very difficult
    to test the view.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是创建了一个没有控制器的视图。原因是如果我们在这个阶段在控制器和视图之间建立关系，这将使测试视图变得非常困难。
- en: We made `app.html` that includes the controller logic. We need the `app.html`
    to be able to test the view and the controller at the same time.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了包含控制器逻辑的`app.html`。我们需要`app.html`以便能够同时测试视图和控制器。
- en: In addition, to avoid incorrect code referring to a direct object, divide each
    component and each screen that you can put together in the CT and develop it in
    the viewport later.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了避免不正确的代码直接引用对象，将每个可以在CT中组合并稍后在视图中开发的组件和屏幕分开。
- en: Now, let's learn to create a component and a CT in sequence.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习按顺序创建组件和CT。
- en: Creating views
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建视图
- en: We need to create the appearance of the application. You already made the header.
    Let's put the navigation menu for the application on the left of the screen. Locate
    the header you made previously on the top of the screen. Name the screen that
    is in the center region but to the right. Put the screen in this center region.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建应用程序的外观。您已经创建了头部。让我们将应用程序的导航菜单放在屏幕的左侧。定位您之前创建的头部在屏幕顶部。将中间区域但位于右侧的屏幕命名为屏幕。将屏幕放在这个中间区域。
- en: 'The screen is divided into four sections:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕分为四个部分：
- en: Dashboard
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仪表板
- en: MyAccount
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MyAccount
- en: Quotation
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Quotation
- en: Bill
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bill
- en: 'Connect these four and make a rough view structure as shown in the following
    diagram:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 将这四个部分连接起来，形成一个如以下图表所示的粗略视图结构：
- en: '![Creating views](img/5446OS_02_12.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![创建视图](img/5446OS_02_12.jpg)'
- en: Navigation
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航
- en: Let's make the navigation section. This component extends a tree panel. By using
    a tree panel, the procedure to display the menu options can be handled by the
    server, rather than inputting menu options manually. The process of dividing the
    menu options into groups can be made simpler.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建导航部分。该组件扩展了树面板。通过使用树面板，可以由服务器处理显示菜单选项的流程，而不是手动输入菜单选项。将菜单选项分组的过程可以简化。
- en: 'A tree store is necessary for a tree panel. So let''s make it now (source file:
    `07_creating_views/app/store/Navigation.js`).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 树面板需要一个树存储。所以现在让我们创建它（源文件：`07_creating_views/app/store/Navigation.js`）。
- en: '[PRE14]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now that a store has been made, you can define the tree panel (source file:
    `07_creating_views/app/view/Navigation.js`).'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经创建了一个存储，您可以定义树面板（源文件：`07_creating_views/app/view/Navigation.js`）。
- en: '[PRE15]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, let''s create a CT to check what we made. The code for `07_creating_views/ct/navigation/view.html`
    is very similar to the previous `view.html` code, so please refer to the source
    file if you want to see this. The following code is for `view.js` (source file:
    `07_creating_views/ct/navigation/view.js`):'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个CT来检查我们创建的内容。`07_creating_views/ct/navigation/view.html` 的代码与之前的 `view.html`
    代码非常相似，所以如果您想查看此代码，请参阅源文件。以下代码是 `view.js`（源文件：`07_creating_views/ct/navigation/view.js`）。
- en: '[PRE16]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We previously created a store because it is necessary to display the navigation
    view. The **Navigation** view is displayed like in the following screenshot when
    we see it in a browser:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前创建了一个存储，因为它是显示导航视图所必需的。当我们在浏览器中查看时，**Navigation** 视图显示如下截图所示：
- en: '![Navigation](img/5446OS_02_13.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![导航](img/5446OS_02_13.jpg)'
- en: Let's make the remaining components in the same way as follows.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以同样的方式创建剩余的组件。
- en: Dashboard
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仪表板
- en: 'We want to make a panel for dashboards (we will make many similar panels from
    now on). Therefore, the application will be made in the `MyApp.panel.Screen` abstract
    class. The `MyApp.panel.Screen` abstract class is the fundamental mold for the
    whole application (source file: `07_creating_views/app/panel/Screen.js`).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要创建一个仪表板的面板（从现在起我们将创建许多类似的面板）。因此，应用程序将在 `MyApp.panel.Screen` 抽象类中创建。`MyApp.panel.Screen`
    抽象类是整个应用程序的基本模具（源文件：`07_creating_views/app/panel/Screen.js`）。
- en: '[PRE17]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We were able to create the abstract class. Now, let''s create a dashboard class
    that inherits from this abstract class (source file: `07_creating_views/app/view/DashBoard.js`).'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够创建抽象类。现在，让我们创建一个继承自该抽象类的仪表板类（源文件：`07_creating_views/app/view/DashBoard.js`）。
- en: '[PRE18]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, prepare the CT to check the appearance. Both `07_creating_views/ct/dashboard/view.html`
    and `07_creating_views/ct/dashboard/view.js` are similar to `ct/header`, so please
    refer to the source files for the code.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，准备CT来检查外观。`07_creating_views/ct/dashboard/view.html` 和 `07_creating_views/ct/dashboard/view.js`
    都与 `ct/header` 类似，所以请参考源文件中的代码。
- en: MyAccount
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MyAccount
- en: 'Let''s make the user''s personal account page. Let''s call this "MyAccount"
    and create it in the same way as we created the dashboard. Apart from the alias
    property and the title property, it''s exactly the same as the dashboard. For
    the code, please see the source file: `07_creating_views/app/view/MyAcco` `unt.js`.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建用户的个人账户页面。让我们称它为“MyAccount”，并以我们创建仪表板相同的方式创建它。除了别名属性和标题属性外，它与仪表板完全相同。有关代码，请参阅源文件：`07_creating_views/app/view/MyAccount.js`。
- en: Quotation and bill
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 报价和账单
- en: 'Continue to make the quotation and bill in the same way. Again, besides the
    alias property and the title property, it''s the same as the dashboard. Please
    see the source files for the code:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 继续以同样的方式创建报价和账单。同样，除了别名属性和标题属性外，它与仪表板相同。请参阅源文件中的代码：
- en: '`07_creating_views/app/view/Quotation.js`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`07_creating_views/app/view/Quotation.js`'
- en: '`07_creating_views/app/view/``Bill.js`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`07_creating_views/app/view/Bill.js`'
- en: Viewport
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视口
- en: Let's compose the component that we made so far in the viewport. Revise the
    file, which was already generated automatically by Sencha Cmd. Although we can
    make a CT by all means, with the viewport, the CT is unnecessary. HTML in itself
    is the same as the CT index.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在视口中组合我们迄今为止制作的组件。修改由Sencha Cmd自动生成的文件。尽管我们可以通过所有方式创建CT，但有了视口，CT就不再必要了。HTML本身与CT索引相同。
- en: 'First, it is necessary to revise `app/Application.js` to use the navigation
    store (source file: `08_create_viewport/app/Application.js`).'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，必须修改`app/Application.js`以使用导航存储（源文件：`08_create_viewport/app/Application.js`）。
- en: '[PRE19]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: For the `xtype` classes that are set in the viewport, it is necessary for the
    reading of the source code to have been completed in advance. So we have added
    the class names to the `application.js` file.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在视口中设置的`xtype`类，在读取源代码之前必须完成读取。因此，我们将类名添加到`application.js`文件中。
- en: To reflect the CSS of the newly added component, we'll build the application
    once with Sencha Cmd. This will make sure that the CSS of any new components are
    included in `sencha app build`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为了反映新添加组件的CSS，我们将使用Sencha Cmd构建应用程序一次。这将确保任何新组件的CSS都包含在`sencha app build`中。
- en: With this, the component style that is being allotted to the `bootstrap.css`
    will be renewed. It is displayed as shown in the following screenshot when we
    access `index.html`, which is under a document route. The files that we made are
    read dynamically in the Ext Loader.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，分配给`bootstrap.css`的组件样式将被更新。当我们访问位于文档路由下的`index.html`时，它将显示如下截图。我们制作的文件由Ext
    Loader动态读取。
- en: '![Viewport](img/5446OS_02_14.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![视口](img/5446OS_02_14.jpg)'
- en: Now the views are complete!
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在视图已经完成！
- en: Creating controllers
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器
- en: Now, we will create controllers for our data.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为我们的数据创建控制器。
- en: Main
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Main
- en: Usually, each view component has a corresponding controller class with the same
    prefix.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，每个视图组件都有一个具有相同前缀的对应控制器类。
- en: But the first controller we have to deal with is the controller called Main.
    This controller has already been produced automatically in Sencha Cmd. If we need
    more processing or logic for the whole application, we should implement this class.
    Usually, the `view` class and controller class names match, but this is a special
    case where they do not because Sencha Cmd generates the Main class. So, it is
    best to leave it as is and not change the name.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们首先必须处理的控制器是名为Main的控制器。这个控制器已经被Sencha Cmd自动生成。如果我们需要为整个应用程序添加更多处理或逻辑，我们应该实现这个类。通常，`view`类和控制器类名称匹配，但这是一个特殊情况，它们不匹配，因为Sencha
    Cmd生成了Main类。所以，最好是让它保持原样，不要更改名称。
- en: 'For the `app/controller/Main.js` code, please see the source file: `09_create_controller\app\controller`.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`app/controller/Main.js`代码，请参阅源文件：`09_create_controller\app\controller`。
- en: Although we've talked a lot about Main, we are not going to use it for the time
    being.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们谈了很多关于Main的内容，但我们目前不会使用它。
- en: Navigation
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航
- en: 'Now, let''s add `hrefTarget` to the data in the navigation store (source file:
    `09_create_controller/app/store/Navigation.js`).'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将`hrefTarget`添加到导航存储中的数据（源文件：`09_create_controller/app/store/Navigation.js`）。
- en: '[PRE20]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, make a navigation controller and describe the `itemclick` event handler
    and catch an event when a menu is chosen (source file: `09_create_controller/app/controller/Navigation.js`).'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个导航控制器并描述`itemclick`事件处理程序，当选择菜单时捕获事件（源文件：`09_create_controller/app/controller/Navigation.js`）。
- en: '[PRE21]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Add this to `app/Application.js` so that it is used when we display it in the
    viewport.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 将此添加到`app/Application.js`中，以便在视口中显示时使用。
- en: '[PRE22]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Furthermore, remember that the CT prepares to operate from the controller on
    its own. The following code will execute the CT for navigation (source code: `09_create_controller/ct/navigation/app.js`).'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，记住CT会从控制器自行准备操作。以下代码将执行CT进行导航（源代码：`09_create_controller/ct/navigation/app.js`）。
- en: '[PRE23]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When we perform this, a message is displayed by the console when we select any
    option from the menu.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行此操作时，当我们从菜单中选择任何选项时，控制台会显示一条消息。
- en: Dashboard
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仪表板
- en: 'Let''s continue now and create the controller for dashboard. We do not describe
    any special process here, it is just preparation. Just implement the following
    code (source file: `09_create_controller/app/controller/DashBoard.js`):'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续并创建仪表板的控制器。这里我们不描述任何特殊过程，这只是准备。只需实现以下代码（源文件：`09_create_controller/app/controller/DashBoard.js`）：
- en: '[PRE24]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: MyAccount
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MyAccount
- en: 'MyAccount is the same as dashboard, just replace `Dashboard` with `MyAccount`.
    For the code, please see the source file: `09_create_controller/app/controller/M`
    `yAccount.js`.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: MyAccount 与仪表板相同，只需将 `Dashboard` 替换为 `MyAccount`。对于代码，请参阅源文件：`09_create_controller/app/controller/M`
    `yAccount.js`。
- en: Quotation and bill
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 报价和账单
- en: 'It''s the same for the quotation and bill. No special processing, just preparation,
    whichare also the same as the dashboard. For the code, please see the source file
    at the following locations:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 对于报价和账单也是如此。没有特殊处理，只是准备，这和仪表板也相同。对于代码，请参阅以下位置的源文件：
- en: '`09_create_controller/app/controller/Quotation.js`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`09_create_controller/app/controller/Quotation.js`'
- en: '`09_create_controller/app/cont``roller/Bill.js`'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`09_create_controller/app/controller/Bill.js`'
- en: 'At this point, you have made many files. As we created them, they filled the
    directory as shown in the following screenshot:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经创建了多个文件。随着它们的创建，它们按照以下截图所示填充了目录：
- en: '![Quotation and bill](img/5446OS_02_15.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![报价和账单](img/5446OS_02_15.jpg)'
- en: Using Ext.util.History for directly accessing a screen
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ext.util.History 直接访问屏幕
- en: '`Ext.util.History` manages the history. When a page changes, the application
    catches this change and then the `Ext.util.History` fires an event. Using this
    feature, we can control actions in our application.. For example, by using `Ext.util.History`,
    every time the application is accessed the dashboard URL is displayed.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ext.util.History` 管理历史记录。当页面发生变化时，应用程序会捕捉到这个变化，然后 `Ext.util.History` 触发一个事件。使用这个特性，我们可以控制应用程序中的操作。例如，通过使用
    `Ext.util.History`，每次访问应用程序时都会显示仪表板 URL。'
- en: Sometimes, when the user inputs an incorrect hash in the URL, the application
    will have trouble finding the page. However, with `Ext.util.History`, it goes
    to screens specified by the developer. For example, when we implement `Ext.util.History`,
    the user can access the quotation page directly without abnormal screen behavior.
    With `Ext.util.History`, it also allows us to attach the URL to an e-mail to access
    documents directly.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当用户在 URL 中输入错误的哈希值时，应用程序将难以找到页面。然而，使用 `Ext.util.History`，它会跳转到开发者指定的屏幕。例如，当我们实现
    `Ext.util.History` 时，用户可以直接访问报价页面，而不会出现异常屏幕行为。使用 `Ext.util.History` 还允许我们将 URL
    附带到电子邮件中，以便直接访问文档。
- en: 'To begin with, you need to make the `MyApp.util.History` class. You might think
    it is an abstract class when you set eyes on it, actually, it is different. `MyApp.util.History`
    is a class used to incorporate URL control in our application using `Ext.util.History`.
    Be careful to not make a mistake here or `MyApp.util.History` will not work. The
    `Ext.util.History` class is a singleton class and `MyApp.util.History` will make
    a singleton class too. First, let''s make the `MyApp.util.History` class. It is
    very simple (source file: `10_util_history/app/util/History.js`).'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要创建 `MyApp.util.History` 类。当您看到它时，您可能会认为它是一个抽象类，实际上并非如此。`MyApp.util.History`
    是一个用于在我们的应用程序中使用 `Ext.util.History` 集成 URL 控制的类。在这里要小心不要出错，否则 `MyApp.util.History`
    将无法工作。`Ext.util.History` 类是一个单例类，`MyApp.util.History` 也会创建一个单例类。首先，让我们创建 `MyApp.util.History`
    类。它非常简单（源文件：`10_util_history/app/util/History.js`）。
- en: '[PRE25]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Tip
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户下载您购买的所有 Packt
    书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册，以便将文件直接通过电子邮件发送给您。
- en: 'Let''s implement the methods by implementing the following list:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下列表实现方法：
- en: '`init`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init`'
- en: '`initNavigate`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initNavigate`'
- en: '`navigate`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`navigate`'
- en: '`parseToken`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parseToken`'
- en: '`push`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`push`'
- en: '`cleanUrl`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cleanUrl`'
- en: '`back`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`back`'
- en: '`location`'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`location`'
- en: 'Please implement them as a method of the `MyApp.util.History` class (source
    file: `10_util_history/app/util/History.js`). The code for the implementation
    of this list is too long to include in this text, so please refer to the source
    file for the code.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 请将它们实现为 `MyApp.util.History` 类的方法（源文件：`10_util_history/app/util/History.js`）。由于实现此列表的代码太长，无法包含在此文本中，因此请参阅源文件以获取代码。
- en: When we use `MyApp.util.History`, we have to call the `init` method. I will
    describe the usage of the `init` method later. We do not need too much explanation
    about these methods, as this will take too long. The important thing to know is
    that these methods are important for browser navigation.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`MyApp.util.History`时，我们必须调用`init`方法。我将在稍后描述`init`方法的用法。我们不需要对这些方法进行太多解释，因为这会花费太多时间。重要的是要知道，这些方法对于浏览器导航非常重要。
- en: Adding logic to the controller
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在控制器中添加逻辑
- en: 'Add `MyApp.util.History` and a constructor to `MyApp.controller.Abstract` (source
    file: `11_adding_controller/app/controller/Abstract.js`).'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`MyApp.util.History`和构造函数到`MyApp.controller.Abstract`（源文件：`11_adding_controller/app/controller/Abstract.js`）。
- en: '[PRE26]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Set an anonymity function called `MyApp.util.History.init`, which we made previously,
    and initialize it to launch. Specify the screen to use with the sequence in an
    argument (source file: `11_adding_controller/app/Application.js`).'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个名为`MyApp.util.History.init`的匿名函数，这是我们之前制作的，并初始化它以启动。在参数中指定要使用的屏幕序列。指定源文件（`11_adding_controller/app/Application.js`）。
- en: '[PRE27]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Afterwards, add the `screenName` property to each class (source file: `11_adding_controller/app/controller/DashBoard.js`).'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，将`screenName`属性添加到每个类中（源文件：`11_adding_controller/app/controller/DashBoard.js`）。
- en: '[PRE28]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the same way as with the dashboard, we''ll add a `screenName` property to
    MyAccount, Quotation, and Bill. Check the source file for the code:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 与仪表板相同，我们将为MyAccount、报价和账单添加一个`screenName`属性。请检查源文件以获取代码：
- en: '`11_adding_controller/app/controller/MyAccount.js`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`11_adding_controller/app/controller/MyAccount.js`'
- en: '`11_adding_controller/app/controller/Quotation.js`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`11_adding_controller/app/controller/Quotation.js`'
- en: '`11_adding_controller/app/controller/Bill.js`'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`11_adding_controller/app/controller/Bill.js`'
- en: 'Fix the navigation controller. We should change the locale by removing the
    console and changing the call to the location method in `MyApp.util.History` (source
    file: `11_adding_controller/app/controller/Navigation.js`).'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 修复导航控制器。我们应该通过删除控制台并更改`MyApp.util.History`中的调用位置来更改区域设置（源文件：`11_adding_controller/app/controller/Navigation.js`）。
- en: '[PRE29]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, if we make a distinction between each view, it becomes easier to acquire
    that view. So let''s add `itemId` to each view. First, let''s add it to the dashboard
    (source file: `11_adding_controller/app/view/DashBoard.js`).'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们对每个视图进行区分，那么获取该视图会变得更容易。所以让我们为每个视图添加`itemId`。首先，让我们添加到仪表板（源文件：`11_adding_controller/app/view/DashBoard.js`）。
- en: '[PRE30]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Again, let''s add the `itemId` in the same way for MyAccount, Quotation, and
    Bill. Check the following source files for the code:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，让我们以相同的方式为MyAccount、报价和账单添加`itemId`。请检查以下源文件以获取代码：
- en: '`11_adding_controller/app/view/MyAccount.js`'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`11_adding_controller/app/view/MyAccount.js`'
- en: '`11_adding_controller/app/view/Quotation.js`'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`11_adding_controller/app/view/Quotation.js`'
- en: '`11_adding_controller/app/view/Bill.js`'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`11_adding_controller/app/view/Bill.js`'
- en: So to confirm, we should see the URL with the added hash when we click on the
    navigation menu after we have set it up with `init`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了确认，我们在使用`init`设置后点击导航菜单时应该看到带有附加hash的URL。
- en: '`#!/dashboard`'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#!/dashboard`'
- en: '`#!/quotation`'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#!/quotation`'
- en: '`#!/bill`'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#!/bill`'
- en: '`#!/myaccount`'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#!/myaccount`'
- en: Setting up Ext Direct
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Ext Direct
- en: This is the last in the long list of preparations. Most Sencha Ext JS applications
    communicate with a server and acquire data and transmit a message. In that case,
    it is very simple and easy to communicate with the `Ext.Ajax` class.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这是漫长准备列表中的最后一项。大多数Sencha Ext JS应用程序都与服务器通信，获取数据和发送消息。在这种情况下，使用`Ext.Ajax`类进行通信非常简单和容易。
- en: However, let's use Ext Direct this time. Ext Direct performs by wrapping Ajax
    communications, polling, and performing a **Remote Procedure Call** (**RPC**).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这次让我们使用Ext Direct。Ext Direct通过包装Ajax通信、轮询和执行**远程过程调用**（RPC）来执行。
- en: RPC is the main feature of Ext Direct. However, I will not discuss it in detail
    here because of lack of space. If you wish to know the specifics, please visit
    the Sencha homepage at [http://www.sencha.com/products/extjs/extdirect](http://www.sencha.com/products/extjs/extdirect).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: RPC是Ext Direct的主要功能。然而，由于空间有限，我这里不会详细讨论它。如果您想了解具体细节，请访问Sencha主页[http://www.sencha.com/products/extjs/extdirect](http://www.sencha.com/products/extjs/extdirect)。
- en: Ext Direct simplifies the communication with the server. As a result, JavaScript
    code decreases. Also, in addition to the reading and burden on browsers being
    reduced, communication is optimized automatically by a combined request function.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: Ext Direct简化了与服务器的通信。因此，JavaScript代码减少了。此外，除了减少浏览器读取和负担外，通信通过组合请求函数自动优化。
- en: When we simultaneously perform Ajax communication with an initial value via
    Ext Direct in an interval of 10 milliseconds, we can combine the requests to the
    router into one communication. But for us, it is the same as us communicating
    each request separately.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过 Ext Direct 在 10 毫秒的间隔内同时执行 Ajax 通信并传递初始值时，我们可以将发送给路由器的请求合并为一次通信。但对我们来说，这和单独发送每个请求是一样的。
- en: Tip
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: This is still not common knowledge among a lot of developers, especially those
    who do not know about the benefits of Ext Direct. It is a shame because this is
    such a convenient feature to have in your application.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多开发者来说，这仍然不是常识，尤其是那些不了解 Ext Direct 优点的人。这真是个遗憾，因为这是你应用中一个非常方便的功能。
- en: It does take a lot of preparation in the beginning. However, the development
    of future Sencha Ext JS will become simpler if we learn it here and keep it prepared
    and available, like a template.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然一开始需要做很多准备工作，但如果在这里学习并保持准备就绪，未来的 Sencha Ext JS 开发将会变得简单，就像一个模板一样。
- en: Creating the Ext Direct router
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Ext Direct 路由器
- en: First we need to make the router and implement it in PHP from here. In fact,
    the router is implemented in a sample. We only locate it and use it for it to
    start. To begin, copy the PHP from the sample page. You can find the sample page
    in your Ext SDK path followed by `/examples/direct/`. In other words. it's `(Ext
    SDK path)/examples/direct/`.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建路由器并在 PHP 中实现它。实际上，路由器是在一个示例中实现的。我们只需要定位它并使用它来启动。首先，从示例页面复制 PHP 代码。你可以在
    Ext SDK 路径中找到示例页面，路径为 `/examples/direct/`。换句话说，就是 `(Ext SDK path)/examples/direct/`。
- en: '![Creating the Ext Direct router](img/5446OS_02_16.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Ext Direct 路由器](img/5446OS_02_16.jpg)'
- en: Create a folder called `php` in the document route and copy the four files shown
    in the previous screenshot. After we have copied the files, it is acceptable to
    delete them from this path.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在文档路由中创建一个名为 `php` 的文件夹，并复制之前截图显示的四个文件。在我们复制完文件后，从这个路径删除它们是可以接受的。
- en: 'Edit `config.php` and define the method as the class shown on the server side.
    There are so many interfaces in the original, but this time, we will use only
    one. So let''s delete the others to keep things manageable (source file: `12_setup_ext_direct/php/config.php`).'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `config.php` 并将方法定义为服务器端显示的类。原始版本中有许多接口，但这次我们只使用一个。所以让我们删除其他的，以保持事情的可管理性（源文件：`12_setup_ext_direct/php/config.php`）。
- en: '[PRE31]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Creating the Ext Direct module
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Ext Direct 模块
- en: 'In the same way as we did previously, we''ll only use the `doEcho` method in
    the `TestAction` class. So, let''s delete the other methods to keep everything
    manageable (source file: `12_setup_ext_direct/php/classes/TestAction.php`).'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 和之前一样，我们将在 `TestAction` 类中只使用 `doEcho` 方法。所以，让我们删除其他方法以保持一切的可管理性（源文件：`12_setup_ext_direct/php/classes/TestAction.php`）。
- en: '[PRE32]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Applying Ext Direct to the client application
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Ext Direct 应用到客户端应用程序
- en: 'Now, set the client application to immediately call `TestAction.doEcho` from
    the client side by adding the following source code in `index.html` (source file:
    `12_setup_ext_direct/index.html`).'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过在 `index.html`（源文件：`12_setup_ext_direct/index.html`）中添加以下源代码，将客户端应用程序设置为立即从客户端调用
    `TestAction.doEcho`。
- en: '[PRE33]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, call `addProvider` and set it to use a member shown in the server side
    in `Application.js` (source file: `12_setup_ext_direct/app/Application.js`).'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，调用 `addProvider` 并将其设置为在 `Application.js`（源文件：`12_setup_ext_direct/app/Application.js`）服务器端显示的成员。
- en: '[PRE34]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Testing Ext Direct
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 Ext Direct
- en: Now we can test it. When a logout button is clicked, call `doEcho` and confirm
    whether it works normally. Then, add the processing to the header controller.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以测试它了。当点击注销按钮时，调用 `doEcho` 并确认它是否正常工作。然后，将处理添加到头部控制器中。
- en: 'Check the performance with a browser. When we click on the logout button, the
    character string `message` already in the code will be sent to the server side.
    We can then check to see if `message` comes back to the client side. If it comes
    back successfully, everything is good! For reference, please check the source
    file: `12_setup_ext_direct/app/controller/Header.js`.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器检查性能。当我们点击注销按钮时，代码中已经存在的字符串 `message` 将被发送到服务器端。然后我们可以检查 `message` 是否成功返回客户端。如果成功返回，那么一切正常！请参考源文件：`12_setup_ext_direct/app/controller/Header.js`。
- en: Summary
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Good work! We are now ready to develop the application. It was very long, but
    remember, it only takes a long time to complete the initial preparations.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我们现在可以开发应用程序了。虽然过程很漫长，但请记住，它只是完成初始准备所需的时间。
- en: From now on, you can use what you did here in the future. If you go over what
    we have just done and understand it for yourself, you can use this as a template
    for future projects and it will make the preparation stage go a lot faster and
    smoother.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，你可以将在这里所做的一切应用到未来。如果你回顾我们刚刚所做的一切并自己理解它，你可以将此作为未来项目的模板，这将使准备阶段变得更加快速和顺畅。
- en: When you're ready, continue to the next chapter in which we'll begin to input
    data into our database.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备好了，继续到下一章，我们将开始将数据输入到我们的数据库中。
