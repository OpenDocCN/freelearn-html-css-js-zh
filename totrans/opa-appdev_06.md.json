["```js\n/**\n* A test function of Opa binding\n* @register {string -> void}\n*/\nfunction test(str){\n         alert(str);\n}\n```", "```js\nfunction page(){\n    <input type=\"button\" value=\"click\" onclick={function(_){\n         %%test.test%%(\"Hello Opa!\")\n    }}/>\n}\nServer.start(Server.http,{title:\"Opa Packt\", ~page})\n```", "```js\nopa test.js 601.opa  --\n\n```", "```js\n/** \n* @register {string -> void} test2\n*/\nfunction test(str){ \n         alert(str);\n}\n```", "```js\n/** 602.opa */\ntype Student = {string name, bool sex, int age} //Type we defined\nStudent      stu = {name:\"Li\", sex: {true}, age: 28}\nlist(string) lst = [\"I \",\"Like \",\"Opa \",\"!\"];   //Opa's types\nllarray(int) arr = @llarray(1,2,3,4);           //Extern types\nfunction page(){\n    <input type=\"button\" value=\"func1()\" onclick={function(_){\n         %%test2.func1%%(stu)\n    }}/>\n    <input type=\"button\" value=\"func2()\" onclick={function(_){\n         %%test2.func2%%(lst)\n    }}/>\n    <input type=\"button\" value=\"func3()\" onclick={function(_){\n         %%test2.func3%%(arr)\n    }}/>\n}\nServer.start(Server.http, {title:\"Opa Packt\", ~page});\n```", "```js\n/** test2.js */\n/** @opaType list('a) */\n/** @opaType Student */\n/** @externType llarray('a) */\n/** @register {opa[Student] -> void} */\nfunction func1(stu){ \n    console.log(\"func1: \"+ stu.name +\" , \"+stu.sex+\", \"+stu.age);\n}\n/** @register {opa[list(string)] -> void} */\nfunction func2(lst){\n    //use list2js to convert Opa list to js list.\n    var lst2 = list2js(lst); \n    for(var i=0; i<lst2.length; i++) \n        console.log(\"func2: \" + lst2[i]);\n}\n/** @register {llarray(int) -> void} */\nfunction func3(arr){\n    for(var i=0; i<arr.length; i++) \n        console.log(\"func3: \" + arr[i]);\n}\n```", "```js\n/** test.nodejs */\nvar crypto = require('crypto');\n/**\n * Calculates the MD5 hash value of a string.\n * @register {string -> string}\n */\nvar calcMD5 = function(str){\n    return crypto.createHash('md5').update(str).digest('hex');\n}\n```", "```js\n/** 603.opa */\nmd5 = %%test.calcMD5%%(\"Hello Opa!\");\nprintln(\"MD5 value: {md5}\");\n```", "```js\nopa test.nodejs 603.opa --\n```", "```js\n##register function_name: function_type\n##args(argment_list)\n{\n    //function body\n}\n```", "```js\n##opa-type Student\n##opa-type list('a)\n##extern-type llarray('a)\n##register func1: opa[Student] -> void\n##args(stu)\n{ \n  console.log(\"func1: \"+ stu.name +\" , \"+stu.sex+\", \"+stu.age);\n}\n\n##register func2: opa[list(string)] -> void\n##args(lst)\n{ \n    var lst2 = list2js(lst); \n    for(var i=0; i<lst2.length; i++) \n          console.log(\"func2: \" + lst2[i]);\n}\n\n##register func3: llarray(int) -> void\n##args(arr)\n{ \n  for(var i=0; i<arr.length; i++) \n        console.log(\"func3: \" + arr[i]);\n}\n```", "```js\nopa test2.js 601.opa --js-bypass-syntax classic\n\n```"]