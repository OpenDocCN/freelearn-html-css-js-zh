- en: Chapter 3. Basic Building Blocks for Creating Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。创建框架的基本构建块
- en: 'In the previous chapter, we have seen which QTP features are required to create
    scripts. To design a framework and its components we need to design reusable code
    blocks, apart from QTP features. The key features of code blocks are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了创建脚本所需的QTP特性。为了设计框架及其组件，我们需要设计可重用的代码块，除了QTP特性之外。代码块的关键特性如下：
- en: '**Manual checkpoint**: This is a reusable function that checks whether the
    property is matching as expected at runtime'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动检查点**：这是一个可重用的函数，它在运行时检查属性是否如预期匹配'
- en: '**Manual synchronization**: This is a reusable function that waits up to a
    specified time for the property to change'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动同步**：这是一个可重用的函数，它等待直到指定的属性改变'
- en: '**Descriptive programming**: This provides the object identification property
    in test scripts to create the object description or creates the description itself'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述性编程**：这为测试脚本提供了对象标识属性以创建对象描述或创建描述本身'
- en: '**Regular expression**: This is a text string for matching a pattern and allows
    us to define objects that follow the pattern'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正则表达式**：这是一个用于匹配模式的文本字符串，并允许我们定义遵循该模式的对象'
- en: '**Error handling with Err object and Exit statements**: Also known as exception
    handling, it guides us on how to come out of exceptional events and gracefully
    exit these conditions'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用Err对象和Exit语句进行错误处理**：也称为异常处理，它指导我们如何从异常事件中退出并优雅地退出这些条件'
- en: '**Functions, subroutines, and procedures**: Functions and subprocedures allow
    us to make scripts modular and reusable'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数、子程序和过程**：函数和子程序使我们能够使脚本模块化和可重用'
- en: VBScript – key features for creating code blocks
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VBScript – 创建代码块的关键特性
- en: 'VBScript is an easy-to-learn yet powerful scripting language. It is used to
    develop scripts to perform both simple and complex object-based tasks, even without
    previous programming experience. While working in the **Expert** view, use the
    following general VBScript syntax rules and guidelines:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: VBScript是一种易于学习且功能强大的脚本语言。它用于开发脚本以执行简单和复杂的基于对象的任务，即使没有之前的编程经验。在**专家**视图中工作，请使用以下一般的VBScript语法规则和指南：
- en: '**Case sensitivity**: VBScript does not differentiate between uppercased and
    lowercased words. It is not case sensitive by default, for example, in constant,
    variable, object, and method names. The following two statements are identical:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大小写敏感度**：VBScript不会区分大写和小写的单词。默认情况下，它不区分大小写，例如，在常量、变量、对象和方法名称中。以下两个语句是相同的：'
- en: '[PRE0]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Text strings**: We can define a string by adding double quotes before and
    after the text string. In the following example, the string value is assigned
    using double quotes:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本字符串**：我们可以通过在文本字符串前后添加双引号来定义一个字符串。在以下示例中，使用双引号分配了字符串值：'
- en: '[PRE1]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Date strings**: We can define the date by adding hash marks before and after
    the date value; for example:'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**日期字符串**：我们可以在日期值前后添加井号来定义日期；例如：'
- en: '[PRE2]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Variables**: Variables are used to store strings, integers, dates, arrays,
    and objects. We can specify variables to refer to test objects or store simple
    values with or without using `Dim`. If used, the `Option Explicit` statement must
    appear in a script before any other statements. When the Option Explicit statement
    is declared, it forces us to explicitly declare variables using the `Dim`, `Private`,
    `Public`, or `ReDim` statements; otherwise, an error occurs.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量**：变量用于存储字符串、整数、日期、数组和对象。我们可以指定变量来引用测试对象或使用或不使用`Dim`存储简单值。如果使用，则必须在脚本中的任何其他语句之前出现`Option
    Explicit`语句。当声明`Option Explicit`语句时，它强制我们使用`Dim`、`Private`、`Public`或`ReDim`语句显式声明变量；否则，将发生错误。'
- en: 'To specify a variable to refer to an object, use the `Set` statement with the
    following syntax:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要指定一个变量来引用对象，请使用以下语法的`Set`语句：
- en: '[PRE3]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Don''t use the `Set` statement to specify a variable that contains a simple
    value (such as a string or number). The example that follows shows us how to define
    a variable for a simple value:'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要使用`Set`语句来指定一个包含简单值（如字符串或数字）的变量。下面的例子展示了如何为简单值定义一个变量：
- en: '[PRE4]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Or it can also be defined as:'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者也可以定义为：
- en: '[PRE5]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Comments**: Type `rem` or use an apostrophe (`''`) to add comments.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注释**：输入`rem`或使用撇号（`''`）来添加注释。'
- en: '**Spaces**: Spaces are ignored by VBScript; they just enhance the clarity and
    readability of the code.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空格**：VBScript会忽略空格；它们只是增强了代码的清晰度和可读性。'
- en: '**Parentheses**: If the called function returns a value, use parentheses around
    the arguments.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**括号**：如果被调用的函数返回值，则在参数周围使用括号。'
- en: 'The following example requires parentheses around the method arguments since
    it returns a value:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下示例需要将方法参数放在括号内，因为它返回值：
- en: '[PRE6]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following example requires parentheses around method arguments, since **Call**
    is being used:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下示例需要将方法参数放在括号内，因为使用了**Call**。
- en: '[PRE7]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following example requires parentheses around the method arguments since
    they return the value of the checkpoint:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下示例需要将方法参数放在括号内，因为它们返回检查点的值：
- en: '[PRE8]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following example does not require parentheses around the `Click` method
    arguments since they don''t return any values:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下示例不需要将`Click`方法参数放在括号内，因为它们不返回任何值：
- en: '[PRE9]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: VBScript procedures
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VBScript过程
- en: 'In VBScript, there are two types of procedures:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在VBScript中，有两种类型的子过程：
- en: Subprocedures
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子过程
- en: Function procedures
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数过程
- en: Subprocedures
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子过程
- en: 'A subprocedure starts with the `Sub` statement and ends with the `End Sub`
    statement. `Sub` accepts arguments and does not return a value. An example is
    shown in the following code snippet:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 子过程以`Sub`语句开始，以`End Sub`语句结束。`Sub`接受参数但不返回值。以下是一个代码片段的示例：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Function procedures
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数过程
- en: 'A function procedure starts with the `Function` statement and ends with the
    `End Function` statement. It can return a value; the return value is always a
    variant. To return the value, assign it to the function name. An example of the
    function procedure is shown as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 函数过程以`Function`语句开始，以`End Function`语句结束。它可以返回一个值；返回值始终是变体类型。要返回值，将其分配给函数名。以下是一个函数过程的示例：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Checkpoints
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查点
- en: A checkpoint checks the specific values or characteristics of a page, object,
    or text string and enables the test object to identify whether the AUT is functioning
    correctly. A checkpoint compares the expected value (captured at the time of recording
    or creating the checkpoint) with the actual value (captured at runtime).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 检查点检查页面、对象或文本字符串的特定值或特征，并使测试对象能够识别AUT是否正常工作。检查点将预期值（在录制或创建检查点时捕获）与实际值（在运行时捕获）进行比较。
- en: 'The following script creates the order using the Flight application; after
    selecting the `FlyFrom insert` checkpoint, we need to verify whether the **FLIGHT**
    button''s **enabled** property is set to **True**:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本使用Flight应用程序创建订单；在选择`FlyFrom insert`检查点后，我们需要验证**FLIGHT**按钮的**enabled**属性是否设置为**True**：
- en: '![Checkpoints](img/1027EN_03_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![检查点](img/1027EN_03_01.jpg)'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Output value
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出值
- en: An **output value** is a value that is retrieved during the test execution from
    DataTable or saved in a variable or parameter. When the output value is executed,
    the `Output` method places the object's property value into the prespecified column
    (which is defined when the test was created) and is retrieved through the DataTable.
    Later, this value is used to verify the expected and actual value; thus, we can
    use the output value as a checkpoint.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出值**是在测试执行期间从DataTable检索或保存到变量或参数中的值。当输出值执行时，`Output`方法将对象的属性值放入预先指定的列（在创建测试时定义）中，并通过DataTable检索。稍后，此值用于验证预期值和实际值；因此，我们可以使用输出值作为检查点。'
- en: 'The following code snippet creates a checkpoint using the output values:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段使用输出值创建检查点：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We can create a manual checkpoint using the `CheckProperty` method as well.
    `CheckProperty` allows us to use various options, and we can check the not equal
    condition as well.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`CheckProperty`方法创建一个手动检查点。`CheckProperty`允许我们使用各种选项，并且我们还可以检查不等条件。
- en: 'How to check an equal condition using `CheckProperty`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用`CheckProperty`检查相等条件：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Checkpoints allow the following options to ascertain various unequal options:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 检查点允许以下选项以确定不同的不等选项：
- en: '`micGreaterThan`: This option verifies whether the value of the property is
    greater than the expected value.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`micGreaterThan`：此选项验证属性的值是否大于预期值。'
- en: '`micLessThan`: This option verifies whether the value of the property is less
    than the expected value.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`micLessThan`：此选项验证属性的值是否小于预期值。'
- en: '`micGreaterThanOrEqual`: This option verifies whether the value of the property
    is greater than or equal to the expected value.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`micGreaterThanOrEqual`：此选项验证属性的值是否大于或等于预期值。'
- en: '`micLessThanOrEqual`: This option verifies whether the value of the property
    is less than or equal to the expected value.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`micLessThanOrEqual`：此选项验证属性的值是否小于或等于预期值。'
- en: '`micNotEqual`: This option verifies whether the value of the property is not
    equal to the expected value.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`micNotEqual`：此选项验证属性的值是否不等于预期值。'
- en: 'The following example demonstrates how to use the not equal option:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下示例演示了如何使用不等选项：
- en: '[PRE15]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`micRegExpMatch`: The `CheckProperty` also allows us to use regular expressions.
    The `micRegExpMatch` option verifies if the property value matches with the regular
    expression, as shown in the following example, and how to use the regular expression
    with `CheckProperty`:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`micRegExpMatch`：`CheckProperty`还允许我们使用正则表达式。`micRegExpMatch`选项验证属性值是否与正则表达式匹配，如下例所示，以及如何使用正则表达式与`CheckProperty`一起使用：'
- en: '[PRE16]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`GetROProperty` returns the current value of the specified identification property
    from the runtime object in the AUT. We can use the `GetROProperty` to create the
    checkpoint. Using this checkpoint, we will get the runtime property, and we can
    compare it with the expected value as shown in the following example:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`GetROProperty`从自动化测试对象（AUT）的运行时对象中返回指定标识属性的当前值。我们可以使用`GetROProperty`来创建检查点。使用此检查点，我们将获取运行时属性，并且我们可以将其与预期值进行比较，如下例所示：'
- en: '[PRE17]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When we design the framework and its components, we need to create manual checkpoints
    for reusability; a good practice is to create them as reusable functions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们设计框架及其组件时，我们需要创建手动检查点以实现可重用性；一个良好的做法是将它们创建为可重用函数。
- en: Synchronization
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步
- en: QTP and AUT join or handshake at a certain point to match up their speeds for
    the event to occur in order to accomplish a certain sequence of action.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: QTP和AUT在某个点上连接或握手以匹配它们的速度，以便事件发生并完成一系列动作。
- en: Speed mismatch, delays, the wait for property to change, change of object, and
    occurrence of an event causes mismatch in the speed of execution of scripts, and
    AUT causes synchronization issues, for example, script has to wait until the page
    is loaded. The default object synchronization is 20 seconds but we can change
    it by navigating to **File** | **Test Settings** | **Run** | **Object synchronization
    timeout**.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 速度不匹配、延迟、等待属性变化、对象变化和事件发生会导致脚本执行速度不匹配，从而导致自动化测试对象（AUT）出现同步问题，例如，脚本必须等待页面加载完成。默认对象同步时间为20秒，但我们可以通过导航到**文件**
    | **测试设置** | **运行** | **对象同步超时**来更改它。
- en: 'Change the **Object synchronization timeout** from **20** seconds to **2**
    seconds as shown in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 将**对象同步超时**从**20**秒更改为**2**秒，如图所示：
- en: '![Synchronization](img/1027EN_03_02.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![同步](img/1027EN_03_02.jpg)'
- en: 'Now that we have changed the **Object synchronization timeout** value, we will
    run the following script:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经更改了**对象同步超时**值，我们将运行以下脚本：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To achieve synchronization, we introduce some wait scripts that wait for the
    specified time. Refer to the following code snippet:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现同步，我们引入了一些等待脚本，它们等待指定的时间。请参考以下代码片段：
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `wait` statement tells QTP to wait for a predefined amount of time, for
    example, 10 seconds. Here, the following situations can arise:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`wait`语句告诉QTP等待预定义的时间量，例如，10秒。在这里，以下情况可能发生：'
- en: The AUT is ready to perform the next step, but the script is still waiting till
    the specified time
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动测试对象（AUT）已准备好执行下一步，但脚本仍在等待指定的时间
- en: The wait time is over and the AUT is still not ready for the next step to be
    executed
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待时间已过，但自动化测试对象（AUT）仍然没有准备好执行下一步
- en: In both of these conditions, static wait is not a good option. Waiting for an
    appropriate amount of time based on some property or event that has to be completed
    is called dynamic synchronization.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，静态等待都不是一个好的选择。根据某些必须完成的属性或事件等待适当的时间称为动态同步。
- en: Dynamic synchronization
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态同步
- en: 'Dynamic synchronization allows waiting till the object property is changed
    or till time out, as shown in the following example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 动态同步允许等待对象属性变化或直到超时，如下例所示：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `WaitProperty` can be inserted using Insert synchronization point or we
    can manually add the `WaitProperty` method by typing it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用“插入同步点”或手动通过输入来添加`WaitProperty`方法。
- en: 'Apart from using `WaitProperty`, we can also create synchronization points
    using the following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用`WaitProperty`之外，我们还可以使用以下代码创建同步点：
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Descriptive programming
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述性编程
- en: QTP identifies an object by its properties that are stored in the OR. When the
    object description is created in the test script, the approach is called descriptive
    programming. In this method of script creation, objects are not stored in the
    OR.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: QTP通过存储在OR中的对象属性来识别对象。当在测试脚本中创建对象描述时，这种方法被称为描述性编程。在这种脚本创建方法中，对象不会被存储在OR中。
- en: 'Descriptive programming can be achieved in two ways:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 描述性编程可以通过两种方式实现：
- en: '**Static programming**: The object''s description is directly provided into
    the script'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态编程**：对象的描述直接提供到脚本中'
- en: '**Dynamic programming**: The object''s description is created using QTP''s
    description object'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态编程**：使用QTP的描述对象创建对象的描述'
- en: Static programming
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态编程
- en: 'Examples of static descriptive programming are shown as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 静态描述性编程的例子如下所示：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Dynamic programming
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态编程
- en: QTP allows the use of the `Description` object and its `Create` method to create
    the object description and pass it as an argument to create the scripts.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: QTP允许使用`Description`对象及其`Create`方法来创建对象描述，并将其作为参数传递以创建脚本。
- en: 'The following is an example of the same:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个相同的例子：
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The test objects that have the same identification properties are called **duplicate
    objects** . Ordinal identifiers allow us to identify duplicate objects using the
    `index` and `location` properties. `index` represents the order of the objects
    from left to right and top to bottom. `location` represents the objects from top-left
    to bottom and top-right to bottom.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 具有相同识别属性的测试对象被称为**重复对象**。序号标识符允许我们使用`index`和`location`属性来识别重复对象。`index`表示从左到右和从上到下的对象顺序。`location`表示从左上角到底部和从右上角到底部的对象。
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The outcome after we run the script is as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本后的结果如下：
- en: '![Dynamic programming](img/1027EN_03_03.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![动态编程](img/1027EN_03_03.jpg)'
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The outcome after we run the script is as follows
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本后的结果如下
- en: '![Dynamic programming](img/1027EN_03_04.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![动态编程](img/1027EN_03_04.jpg)'
- en: Descriptive programming allows us to deal with dynamic objects; this is a situation
    where the test object does not exist till runtime, so we cannot store the dynamic
    objects in the OR. For example, a textbox is generated based on the user ID in
    the web page at runtime and the name of the object follows the convention edit_xxx,
    that is, edit_123455\.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 描述性编程使我们能够处理动态对象；这是一个测试对象在运行时才存在的情况，因此我们无法在OR中存储动态对象。例如，一个文本框是根据网页中的用户ID在运行时生成的，对象的名称遵循约定edit_xxx，即edit_123455\。
- en: 'The code is provided on the preceding page; now we will write the code to set
    the value as shown in the following code snippet:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 代码在上一页提供；现在我们将编写代码来设置如下代码片段所示的价值：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'One use of descriptive programming is that it allows us to find the object(s)
    at runtime and performs the following operations on it/them:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 描述性编程的一个用途是它允许我们在运行时找到对象（s）并对其执行以下操作：
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Regular expressions
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则表达式
- en: A regular expression (abbreviated regex or regexp) is a sequence of text characters,
    some of which are understood to be meta characters with symbolic meaning and some
    of which have their literal meaning, that together automatically identify a given
    pattern.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式（缩写为regex或regexp）是一系列文本字符，其中一些被认为是具有符号意义的元字符，而另一些则具有其字面意义，它们一起自动识别给定的模式。
- en: A regular expression is very useful when the objects are dynamic in nature and
    we cannot store each and every object which follows a pattern in the OR. In the
    Flight Reservation application, we can open any existing order by the order number
    and send the fax. When the **Fax** window is opened, the title of the window contains
    the order number; this will cause an issue when we want to open the fax window
    with a different order number as the window is no longer the same. In this condition,
    we can use regular expression. Refer to the following screenshot; the identification
    property of the object is **Fax Order No. 11**. Here we convert the **text** property
    into a regular expression to identify the property as a pattern and not a fixed
    value.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当对象本质上是动态的，我们无法在OR中存储每个遵循模式的对象时，正则表达式非常有用。在航班预订应用程序中，我们可以通过订单号打开任何现有订单并发送传真。当**传真**窗口打开时，窗口的标题包含订单号；当我们想要以不同的订单号打开传真窗口时，这将会引起问题，因为窗口不再是相同的。在这种情况下，我们可以使用正则表达式。参考以下截图；对象的识别属性是**传真订单号11**。在这里，我们将**文本**属性转换为正则表达式，以将属性识别为模式而不是固定值。
- en: The regular expression shown in the following screenshot matches a pattern where
    the number of digits may vary from **1** to **3**. This means that it is used
    to verify the **Fax** window title from 0 to 999.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图中的正则表达式匹配一个数字可能从**1**到**3**变化的模式。这意味着它用于验证从0到999的**传真**窗口标题。
- en: '![Regular expressions](img/1027EN_03_05.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![正则表达式](img/1027EN_03_05.jpg)'
- en: Regular expressions in descriptive programming
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 描述性编程中的正则表达式
- en: 'In the earlier screenshot, we have seen that once we change the **text** property
    to the regular expression, QTP is able to identify objects with order numbers
    from 0 to 999\. We can use the regular expression in object description as shown
    in the following code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的屏幕截图中，我们看到了一旦我们将**文本**属性更改为正则表达式，QTP就能够识别从0到999的顺序号的对象。我们可以在对象描述中使用正则表达式，如下面的代码所示：
- en: '[PRE28]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Regular expressions in checkpoints
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查点中的正则表达式
- en: 'A checkpoint allows us to use the regular expression for matching the pattern.
    To use the regular expression in a checkpoint, do the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 检查点允许我们使用正则表达式进行模式匹配。要在检查点中使用正则表达式，请执行以下操作：
- en: Click on **Parameter Options** in the **Text Checkpoint Properties** window.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**文本检查点属性**窗口中点击**参数选项**。
- en: Click on ![Regular expressions in checkpoints](img/1027EN_03_icon.jpg).
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击![检查点中的正则表达式](img/1027EN_03_icon.jpg)。
- en: Check the **Regular expression** option in **Parameter Options**.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**参数选项**中检查**正则表达式**选项。
- en: Click on **OK** and change the parameter to regular expressions (in **DataTable**)
    as shown in the following screenshot.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**并将参数更改为正则表达式（在**数据表**中）如图所示。
- en: '![Regular expressions in checkpoints](img/1027EN_03_06.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![检查点中的正则表达式](img/1027EN_03_06.jpg)'
- en: Regular expressions in CheckProperty
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CheckProperty中的正则表达式
- en: '`CheckProperty` allows us to compare the values using regular expressions and
    `micRegExpMatch` as shown in the following code snippet:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`CheckProperty`允许我们使用正则表达式和`micRegExpMatch`比较值，如下面的代码片段所示：'
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Error handling
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理
- en: 'Exception handling is the way to deal with abnormal or exceptional events that
    interrupt the normal flow of test execution. For example, when a floating point
    number is divided by zero (0), it stops execution and an error message is displayed
    as shown in the following piece of code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 异常处理是处理中断测试执行正常流程的异常或异常事件的方法。例如，当浮点数除以零（0）时，它将停止执行并显示错误消息，如下面的代码片段所示：
- en: '[PRE30]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `Err` object in VBScript holds the details of the runtime errors, allowing
    continued execution despite a runtime error.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: VBScript中的`Err`对象包含运行时错误的详细信息，即使在运行时出现错误，也能继续执行。
- en: 'If the `On Error Resume Next` statement is absent in the script, any runtime
    error will stop execution and display the error message as shown:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果脚本中缺少`On Error Resume Next`语句，任何运行时错误都会停止执行并显示错误消息，如下所示：
- en: '[PRE31]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Using the `On Error Resume Next` statement allows us to continue with the exception,
    but it is necessary to deal with the error using the `Err` object and come out
    clean from the erroneous condition.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`On Error Resume Next`语句允许我们继续处理异常，但有必要使用`Err`对象处理错误，并从错误条件中干净地退出。
- en: 'The properties of the `Err` object are as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`Err`对象的属性如下：'
- en: '`Description` property'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`描述`属性'
- en: '`HelpContext` property'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`帮助上下文`属性'
- en: '`HelpFile` property'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`帮助文件`属性'
- en: '`Number` property'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`数字`属性'
- en: '`Source` property'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`源`属性'
- en: 'The methods of the `Err` object are as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`Err`对象的方法如下：'
- en: '`Clear` method'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`清除`方法'
- en: '`Raise` method'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`抛出`方法'
- en: '[PRE32]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Use `On Error GoTo 0` to disable error handling if `On Error Resume Next` has
    been used.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用了`On Error Resume Next`，请使用`On Error GoTo 0`来禁用错误处理。
- en: 'Examples are shown in the following code snippet of how to use the `Err` object
    for error handling:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了如何使用`Err`对象进行错误处理的示例：
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `Exit` statements in QTP are very important; they allow us to gracefully
    exit from loops, actions, iterations, components, and tests.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: QTP中的`Exit`语句非常重要；它们允许我们优雅地退出循环、操作、迭代、组件和测试。
- en: 'The different types of `Exit` statements are shown as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示了不同类型的`Exit`语句：
- en: '`Exit Do`: This statement allows us to exit a `Do` loop statement.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`退出循环`：此语句允许我们从`Do`循环语句中退出。'
- en: '`Exit For`: This statement allows us to exit a `For` loop.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`退出循环`：此语句允许我们从`For`循环中退出。'
- en: '`Exit Function`: This statement allows us to exit the `Function` procedure
    in which it is called.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`退出函数`：此语句允许我们从被调用的`函数`过程中退出。'
- en: '`Exit Property`: This statement allows us to exit the `Property` procedure.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`退出属性`：此语句允许我们从`属性`过程中退出。'
- en: '`Exit Sub`: This allows statement us to exit the `Sub` procedure in which it
    is called.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exit Sub`: 这条语句允许我们从被调用的 `Sub` 过程中退出。'
- en: '`ExitAction`: This statement allows us to exit from the current iteration of
    an action.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExitAction`: 这条语句允许我们从当前动作的迭代中退出。'
- en: '`ExitTest`: This statement allows us to exit the entire QTP or **Quality Centre**
    (**QC**) business process test, regardless of the runtime iteration settings.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExitTest`: 这条语句允许我们退出整个 QTP 或 **质量中心**（**QC**）业务流程测试，无论运行迭代设置如何。'
- en: '`ExitTestIteration`: This statement allows us to exit the test iteration or
    QC''s business process test and moves on to the next iteration. If there is no
    next iteration, it stops execution.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExitTestIteration`: 这条语句允许我们退出测试迭代或 QC 的业务流程测试，并继续到下一个迭代。如果没有下一个迭代，它将停止执行。'
- en: The return value of `ExitActionIteration` is displayed in the **Run Result**
    window.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExitActionIteration` 的返回值在 **运行结果** 窗口中显示。'
- en: '`ExitComponent`: This statement allows us to exit the current component run.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExitComponent`: 这条语句允许我们退出当前组件的运行。'
- en: In **Business Process Testing** (**BPT**), each component (scripted or business)
    is the same as a QTP Test with a single action. A business process runs each component
    one by one. QC loads the component in QTP and starts the run. Once the run is
    complete, the next component in the test is loaded, and all the results are collated
    into a single test result summary.
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 **业务流程测试**（**BPT**）中，每个组件（脚本或业务）与 QTP 测试的单个动作相同。业务流程逐个运行每个组件。QC 将组件加载到 QTP
    并开始运行。一旦运行完成，测试中的下一个组件将被加载，所有结果都将汇总成一个单独的测试结果摘要。
- en: '`ExitComponentIteration`: This statement allows us to exit the current component
    iteration.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExitComponentIteration`: 这条语句允许我们退出当前组件迭代。'
- en: 'The following example demonstrates the use of the `Exit` statement(s) if the
    checkpoint fails:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了当检查点失败时使用 `Exit` 语句的情况：
- en: '[PRE34]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Recovery scenarios – an overview
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恢复场景 - 概述
- en: Any unexpected event or erroneous condition that crashes the AUT during execution
    needs to be recovered. To handle these situations, QTP allows us to define the
    recovery scenarios and associates them with the test. Recovery scenarios activate
    specific recovery operations when trigger events occur.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行过程中，任何意外事件或错误条件导致自动测试工具（AUT）崩溃，都需要进行恢复。为了处理这些情况，QTP 允许我们定义恢复场景，并将它们与测试关联起来。当触发事件发生时，恢复场景会激活特定的恢复操作。
- en: The recovery scenario manager allows us to define the recovery scenario, that
    includes an unexpected event and the operations to recover during a run session.
    For example, an unexpected pop-up message appears and the recovery scenario is
    recovered from it by clicking on the **OK** button in the pop up.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复场景管理器允许我们定义恢复场景，包括意外事件和运行会话期间要恢复的操作。例如，出现意外的弹出消息，通过在弹出窗口中点击 **确定** 按钮来恢复恢复场景。
- en: 'A recovery scenario has the following elements:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复场景具有以下元素：
- en: '**Trigger event**: Any event that abruptly interferes with the normal flow
    of the test runs, for example, a dialog pops up during test execution.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触发事件**：任何突然干扰测试运行正常流程的事件，例如，测试执行期间弹出对话框。'
- en: '**Recovery operations**: The recovery option allows QTP to continue running
    the test or its components after the trigger event hampers test execution. For
    example, closing the pop-up window or a call to restart the window.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恢复操作**：恢复选项允许 QTP 在触发事件阻碍测试执行后继续运行测试或其组件。例如，关闭弹出窗口或调用重启窗口。'
- en: '**Post**-**recovery option**: QTP provide options after the recovery operations
    have been executed, for example, calling a custom function, executing the same
    step, or executing the next step in the test or component.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恢复后**-**选项**：在执行恢复操作之后，QTP 提供了一些选项，例如调用自定义函数、执行相同的步骤或执行测试或组件中的下一个步骤。'
- en: After recovery scenarios are created, we can associate them with selected components/tests.
    So, QTP will perform the appropriate scenarios during the run sessions if a trigger
    event occurs.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建恢复场景后，我们可以将它们与选定的组件/测试关联起来。因此，如果在运行会话中发生触发事件，QTP 将执行适当的场景。
- en: Summary
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we have gone through various concepts and code blocks. The key
    is to understand that apart from the QTP features, we need other components that
    support the entire design and architecture of the framework. One of the key aspects
    for creating code blocks is to enhance the reusability and create an impact on
    every feature of designing the framework. The next chapter will talk about designing
    and implementing the test automation framework.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了各种概念和代码块。关键是要理解，除了QTP功能之外，我们还需要其他支持整个框架设计和架构的组件。创建代码块的一个关键方面是提高其可重用性，并对框架设计的每个功能产生影响。下一章将讨论设计和实现测试自动化框架。
