- en: Chapter 6. Using Node.js as a Command-line Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we learned how to use Node.js with client-side frameworks,
    such as AngularJS and Backbone.js. Each time, we ran the backend from the command
    line. Node.js is suitable not only for web applications, but also for developing
    command-line tools. The access to the filesystem, the various built-in modules,
    and the great community makes Node.js an attractive environment for such kind
    of programs.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will detail the process of developing a command-line tool
    to upload pictures on **Flickr**. By the end of this chapter, we will have created
    a program that finds images in a particular directory and uploads them on Internet
    portals.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the required modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use several modules to make our life easier, which are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fs`: This gives us access to the filesystem, and is a built-in feature of
    the Node.js module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`optimist`: This is a module that parses the parameters passed to our Node.js
    script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`readline`: This allows the reading of a stream (such as `process.stdin`) on
    a line-by-line basis. We will use it for getting input from the user while our
    application is still running. The module is added in Node.js by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`glob`: This module reads a directory and returns all the existing files that
    match a predefined specific pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`open`: At some point, we will need to open a page in the user''s default browser.
    Node.js runs on different operating systems that have different commands to open
    the default browser. This module helps us by providing one API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flapi`: This is the Flickr API wrapper used to communicate with Flickr''s
    services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Based on the preceding list, we can write and use the following `package`.`json`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The entry point of our script is the `index.js` file. Thus, we set it as a value
    of the `main` property. There is another feature which we haven't used so far—the
    `bin` property. This is the key/pair mapping of the binary script names and the
    Node.js script paths. In other words, when our module is published in the Node.js
    package manager's register and later installed, our console will automatically
    have the `flickruploader` command available. During the installation, the `npm`
    command checks whether we have passed something to the `bin` property. If yes,
    then it creates our script's `symlink`. It is also important that we add the `#!/usr/bin/env`
    node at the top of our `index.js` file. This is how the system will know that
    the script should be processed with Node.js. At the end, if we type the command
    and press *Enter*, our script will be run.
  prefs: []
  type: TYPE_NORMAL
- en: Planning the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can split the command-line tool into two parts: the first one reads a directory
    and returns all the files in it and the second one sends the images to Flickr.
    It''s a good idea to form these two functionalities in different modules. The
    following diagram shows how our project will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Planning the application](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `images` directory will be used as a test folder, that is, our script will
    do its job in that directory. Of course, we can have another one if we want. The
    two modules mentioned previously are saved in the `lib` directory. So, we should
    first get the files (`Files.js`) and then upload them (`Flickr.js`) to the portal.
    The two operations are asynchronous, so both the modules should accept **callbacks**.
    The following is the content of the `index.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `Files` module will look into the specified folder and scan it for subfolders
    and images. All the files that are pictures are returned as a parameter of the
    passed callback. These pictures are sent to the `Flickr` module. Along with the
    files, we will also pass few settings needed to access Flickr's services. Eventually,
    once everything goes well, we will call `process.exit(1)` to terminate the program
    and return the user to the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining images from a folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Files.js` file starts with the definition of the required modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Immediately after, we need to define two variables. The `currentDirectory` variable
    stores the path to the current working directory and `rl` is an instance of the
    `readline` module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `createInterface` function accepts an object. The two required fields are
    `input` and `output`. The `input` field will point to the incoming readable stream
    and `output` to the writable stream. In our case, the user will type data directly
    into the terminal/console, so we will pass `process.stdin`.
  prefs: []
  type: TYPE_NORMAL
- en: At the beginning of the chapter, we mentioned the `optimist` module. We will
    use it to get the parameter from the command line. In our case, this will be the
    directory used to parse. It's always good to provide an alternative way to apply
    settings, that is, in addition to asking the user, accept a command-line argument.
    Every Node.js script has a global object, `process`, which has the `argv` property.
    This property is an array of arguments passed from the terminal. The `optimist`
    module simplifies the parsing and provides an effective API to access these arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the following code immediately after the definition of the `rl`
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The callback of the question method returns the text typed by the user. All
    we have to do is pass it to the `readDirectory` function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, we should check whether the path is valid. For this, we will use
    the `fs.existsSync` method. If the directory exists, we get the files that match
    the following pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This means parse the directory and all its subdirectories and search for the
    files ending with `jpg`, `jpeg`, `gif`, or `png`. The `glob` module helps a lot
    in such cases.
  prefs: []
  type: TYPE_NORMAL
- en: Before sending the files back to `index.js`, we display them and ask the user
    for a confirmation. This is again done with the `readline` module included at
    the beginning. It is important to use `rl.close()`. This method relinquishes the
    control over the input and output streams.
  prefs: []
  type: TYPE_NORMAL
- en: Authorizing the Flickr protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the `flapi` module to communicate with Flickr. It provides access
    to the API methods. Most large-scale companies implement some level of authorization.
    In other words, we can''t just make a request and upload/retrieve data. We need
    to sign in our requests with access tokens or provide credentials during the process.
    Flickr uses **OAuth** (1.0 specification), a type of standard for such operations.
    OAuth is an open standard for authorization and defines a method for clients to
    access server resources. Let''s check the following diagram and see how Flickr''s
    OAuth mechanism works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authorizing the Flickr protocol](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Almost the entire process is wrapped in the `flapi` module. What we should remember
    here is that we need a **Key** and **Secret** to retrieve an access token. The
    same token will be used later when uploading the images.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining your application's Key and Secret
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create our own application's *Key* and *Secret*, we must have a valid Flickr
    account first. Next, log in and navigate to [http://www.flickr.com/services/apps/create/apply/](http://www.flickr.com/services/apps/create/apply/).
    On this page, click on **APPLY FOR A NON-COMMERCIAL KEY**, which is the blue button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Obtaining your application''s Key and Secret](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We are building a non-commercial application; however, if you plan to use the
    key for commercial purposes, go with the second option on the right. After that,
    you will see a form with few fields. Fill them and click on the **SUBMIT** button,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Obtaining your application''s Key and Secret](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next screen, which will be shown, contains our **Key** and **Secret**.
    It should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Obtaining your application''s Key and Secret](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Writing into the Flickr.js module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we get the **Key** and **Secret** values, we can continue and start writing
    our `lib/Flickr.js` module. Here is the initial code of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The required dependencies are at the beginning of the previous code. We mentioned
    the `open` module; here, `http` is used to run a Node.js HTTP server and `url`
    is used to parse parameters from an incoming request. The module exports a function
    that accepts three arguments. The first one contains the Flickr''s API settings
    such as **Key** and **Secret**. The second argument is an array of the files that
    need to be uploaded. At the end, we accept a `callback` function, which will be
    called once the uploading is complete. We save everything in a few global variables
    and call `createFlapiClient`, which will initialize the `flapi` object. Before
    we see what exactly happens in `createFlapiClient`, let''s edit `index.js` and
    pass the needed options, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We left `flickrOptions` empty, but now is the time to fill it. Set **Key** as
    the value of `oauth_consumer_key` and **Secret** as the value of `oauth_consumer_secret`.
    The tokens `oauth_token` and `oauth_token_secret` are commented by default, but
    once we perform the initial authorizing, we will set their values. At the end,
    there is also a permissions property, which should be set to `write` because we
    will upload the photos.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the right options are configured in `Flickr.js`, we can create our `flapi`
    client and start querying Flickr''s servers, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We pass the settings, currently `oauth_consumer_key`, `oauth_consumer_secret`,
    and `perms`. Note that `oauth_token` is `undefined` and we need to authorize our
    application. This happens in the browser. The mechanism defined by Flickr requires
    the opening of a specific URL and the passing of a callback address, where the
    user will be redirected to after being granted the permissions. We are developing
    a command-line tool, so we can't really provide that address because our script
    is in the terminal. Therefore, we run our own HTTP server, which will accept requests
    from Flickr. Of course, this server will be available only on our machine and
    during the script execution. But that should be enough because we need it only
    during the first time. If everything goes well, we will get the `oauth_token`
    and `oauth_token_secret` values, as shown in the following code. We will set them
    in `flickrOptions` and the HTTP server will not be run next time. When the server
    is started, we open a new page in the user's default browser, passing the correct
    URL returned by `flapiClient.getUserAuthURL`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code underlying `runServer` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The server listens on port 3000, and it has only one handler. The request we
    are waiting for contains the *GET* parameter `oauth_verifier`. We will get access
    to it by using the `url` module and its `parse` method. It's also important that
    we send `true` as the second parameter so that Node.js parses the query string
    of the request. By passing `oauth_verifier` to `flapi`, the client's `getUserAccessToken`
    method, we will get the needed token and secret. There is an `uploadPhotos` function
    called at the end, but we will leave its body empty for now. This will be filled
    in the next section of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Running our application tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s run our tool. Type `node ./index.js` into your terminal and you
    will see what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running our application tool](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our test directory is `images`, so we type this string and click on *Enter*.
    The code in `Files.js` will scan the directory for images and will ask us for
    a confirmation, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running our application tool](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Type **y** and press *Enter*. A message will be displayed that the server is
    running and a new page will open in our default browser. It will ask us to grant
    the application permission to perform several actions, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running our application tool](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the blue button with text **OK, I''LL AUTHORIZE IT**. There are two
    things happening at the moment. The browser sends a request with the `oauth_verifier`
    parameter to our Node.js server. We use the value, pass it to the `getUserAccessToken`
    method, and fetch the needed `oauth_token` and `oauth_token_secret` values. At
    the same time, the browser gets a response, and we see something similar to the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running our application tool](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We will get the information from the second and third lines and put it in the
    `flickrOptions` object, which is initialized in the `index.js` file. By doing
    this, we will avoid the steps performed with the Node.js server next time. The
    script will be able to upload the photos directly without asking for the token
    and secret.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading the images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last function that we will write is the `uploadPhotos` method for the `Flickr.js`
    module. It will use the global `filesToOpen` array and upload the files one by
    one. Since the operation is asynchronous, we will continuously execute the function
    till the array is empty. We can see the code for this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `done` callback returns the application flow to `index.js`, where the script
    is terminated. The result of the entire process will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Uploading the images](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use Node.js as a command-line tool. We successfully
    got arguments from the terminal, searched directories for image files, and uploaded
    them to Flickr. Most of the raw operations such as access to the filesystem or
    the Flickr OAuth implementation were delegated to different modules, which we
    added as dependencies to the project. More and more instruments are emerging everyday
    which transform Node.js into an attractive environment to develop not only web-based
    applications, but also command-line scripts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to use Node.js and Ember.js together.
    We will get a Twitter social feed and display it on the browser.
  prefs: []
  type: TYPE_NORMAL
