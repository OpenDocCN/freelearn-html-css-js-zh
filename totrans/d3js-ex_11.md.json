["```js\n{\n  \"nodes\": [\n    { \"name\": \"Mike\" },\n    { \"name\": \"Marcia\" },\n    { \"name\": \"Chrissy\" },\n    { \"name\": \"Selena\" },\n    { \"name\": \"William\" },\n    { \"name\": \"Mikael\" },\n    { \"name\": \"Bleu\" },\n    { \"name\": \"Tagg\" },\n    { \"name\": \"Bob\" },\n    { \"name\": \"Mona\" }\n  ],\n  \"edges\": [\n    { \"source\": 0, \"target\":  1 },\n    { \"source\": 0, \"target\":  4 },\n    { \"source\": 0, \"target\":  5 },\n    { \"source\": 0, \"target\":  6 },\n    { \"source\": 0, \"target\":  7 },\n    { \"source\": 1, \"target\":  2 },\n    { \"source\": 1, \"target\":  3 },\n    { \"source\": 1, \"target\":  5 },\n    { \"source\": 1, \"target\":  8 },\n    { \"source\": 1, \"target\":  9 },\n  ]\n}\n```", "```js\nvar url = 'https://gist.githubusercontent.com/d3byex/5a8267f90a0d215fcb3e/raw/ba3b2e3065ca8eafb375f01155dc99c569fae66b/uni_network.json';\nd3.json(url, function(error, data) {\n    var width = 960, height = 500;\n    var svg = d3.select('body').append('svg')\n        .attr({\n            width: width,\n            height: height\n        });\n```", "```js\nvar force = d3.layout.force()\n    .nodes(data.nodes)\n    .links(data.edges)\n    .size([width, height])\n    .start();\n```", "```js\nvar edges = svg.selectAll('line')\n    .data(data.edges)\n    .enter()\n    .append('line')\n    .style('stroke', '#ccc')\n    .style('stroke-width', 1);\n\nvar colors = d3.scale.category20();\nvar nodes = svg\n    .selectAll('circle')\n    .data(data.nodes)\n    .enter()\n    .append('circle')\n    .attr('r', 10)\n    .attr('fill', function(d, i) {\n        return colors(i);\n    })\n    .call(force.drag);\n```", "```js\nforce.on('tick', function() {\n    edges.attr({\n        x1: function(d) { return d.source.x; },\n        y1: function(d) { return d.source.y; },\n        x2: function(d) { return d.target.x; },\n        y2: function(d) { return d.target.y; }\n    });\n\n    nodes.attr('cx', function(d) { return d.x; })\n         .attr('cy', function(d) { return d.y; });\n});\n```", "```js\nvar force = d3.layout.force()\n    .nodes(data.nodes)\n    .links(data.edges)\n    .size([width, height])\n    .linkDistance(200)\n    .start();\n```", "```js\nvar force = d3.layout.force()\n    .nodes(data.nodes)\n    .links(data.edges)\n    .size([width, height])\n    .linkDistance(1)\n    .charge(-5000)\n    .start();\n```", "```js\nvar nodes = svg.selectAll('g')\n    .data(data.nodes)\n    .enter()\n    .append('g')\n    .call(force.drag);\n\nvar colors = d3.scale.category20();\nnodes.append('circle')\n    .attr('r', 10)\n    .attr('fill', function (d, i) {\n        return colors(i);\n    })\n    .call(force.drag);\n\nnodes.append('text')\n    .attr({\n            dx: 12,\n            dy: '.35em',\n            'pointer-events': 'none'\n        })\n.style('font', '10px sans-serif')\n.text(function (d) { return d.name });\n```", "```js\nforce.on('tick', function () {\n    edges.each(function (d) {\n        d3.select(this).attr({\n            x1: d.source.x,\n            y1: d.source.y,\n            x2: d.target.x,\n            y2: d.target.y\n        });\n    });\n\n    nodes.attr('transform', function (d) { \n    return 'translate(' + d.x + ',' + d.y + ')'; \n    });\n});\n```", "```js\nnodes.append('circle')\n    .attr('r', 10)\n    .attr({\n        r: 10,\n        fill: function(d, i) {\n            return colors(i);\n        },\n        stroke: 'black',\n        'stroke-width': 0\n    })\n    .call(force.drag()\n        .on(\"dragstart\", function(d) {\n            d.fixed = true;\n            d3.select(this).attr('stroke-width', 3);\n        }))\n    .on('dblclick', function(d) {\n        d.fixed = false;\n        d3.select(this).attr('stroke-width', 0);\n    });\n```", "```js\n\"edges\": [\n  { \"source\": 0, \"target\":  1, \"type\": \"spouse\" },\n  { \"source\": 1, \"target\":  0, \"type\": \"spouse\" },\n  { \"source\": 0, \"target\":  4, \"type\": \"coworker\"},\n  { \"source\": 4, \"target\":  0, \"type\": \"coworker\"},\n  { \"source\": 0, \"target\":  5, \"type\": \"father\" },\n  { \"source\": 5, \"target\":  0, \"type\": \"son\" },\n  { \"source\": 0, \"target\":  6, \"type\": \"master\" },\n  { \"source\": 6, \"target\":  0, \"type\": \"pet\" },\n  { \"source\": 0, \"target\":  7, \"type\": \"master\" },\n  { \"source\": 1, \"target\":  2, \"type\": \"spouse\" },\n  { \"source\": 1, \"target\":  3, \"type\": \"friend\" },\n  { \"source\": 1, \"target\":  5, \"type\": \"mother\" },\n  { \"source\": 1, \"target\":  8, \"type\": \"pet\" },\n  { \"source\": 8, \"target\":  1, \"type\": \"master\" },\n  { \"source\": 1, \"target\":  9, \"type\": \"pet\" },\n  { \"source\": 5, \"target\": 10, \"type\": \"pet\" }\n]\n```", "```js\n.link {\n    fill: none;\n    stroke: #666;\n    stroke-width: 1.5px;\n}\n\n.link.spouse {\n    stroke: green;\n}\n\n.link.son {\n    stroke: blue;\n}\n\n.link.father {\n    stroke: blue;\n    stroke-dasharray: 0, 2, 1;\n}\n\n.link.friend {\n    stroke: teal;\n}\n\n.link.pet {\n    stroke: purple;\n}\n\n.link.master {\n    stroke: purple;\n    stroke-dasharray: 0, 2, 1;\n}\n\n.link.ruler {\n    stroke: red;\n    stroke-dasharray: 0, 2, 1;\n}\n\n.link.coworker {\n    stroke: green;\n    stroke-dasharray: 0, 2, 1;\n}\n```", "```js\nvar linkTypes = d3.set(data.edges.map(function (d) {\n    return d.type;\n})).values();\n```", "```js\nsvg.append(\"defs\")\n    .selectAll(\"marker\")\n    .data(linkTypes)\n    .enter()\n    .append(\"marker\")\n    .attr({\n        id: function (d) { return d; },\n        viewBox: \"0 -5 10 10\",\n        refX: 15,\n        refY: -1.5,\n        markerWidth: 6,\n        markerHeight: 6,\n        orient: \"auto\"\n    })\n    .append(\"path\")\n    .attr(\"d\", \"M0,-5L10,0L0,5\"); \n```", "```js\nvar edges = svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(force.links())\n    .enter()\n    .append(\"path\")\n    .attr(\"class\", function (d) {\n        return \"link \" + d.type;\n    })\n    .attr(\"marker-end\", function(d) {\n         return \"url(#\" + d.type + \")\";\n    }); \n```", "```js\nforce.on(\"tick\", function () {\n    edges.attr(\"d\", function (d) {\n        var dx = d.target.x - d.source.x,\n            dy = d.target.y - d.source.y,\n            dr = Math.sqrt(dx * dx + dy * dy);\n        return \"M\" + d.source.x + \",\" + d.source.y + \"A\" +\n                dr + \",\" + dr + \" 0 0,1 \" +\n                d.target.x + \",\" + d.target.y;\n    });\n    nodes.attr(\"transform\", function (d) {\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n    });\n}); \n```"]