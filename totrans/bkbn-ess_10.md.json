["```js\n<html>\n<head>\n<!-- External Library Files -->\n<script src=\"img/underscore.js\"></script>\n<script src=\"img/jQuery.js\"></script>\n<script src=\"img/Backbone.js\"></script>\n\n<!-- Application-Specific Files -->\n<script src=\"img/SomeModel.js\"></script>\n<script src=\"img/SomeView.js\"></script>\n<script src=\"img/SomeOtherNonBackboneCode.js\"></script>\n\n<!-- Test Library Files -->\n<script src=\"img/mocha.js\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/mocha.css\"></link>\n<script src=\"img/expect.js\"></script>\n</head>\n<body>\n<div id=\"mocha\"></div>\n<!-- Test Code -->\n<script>\nmocha.setup('bdd'); // start Mocha in BDD mode\n// *INSERT TESTS HERE*\nmocha.run();\n</script>\n</body>\n</html>\n```", "```js\nsuite('Model', function() {\n    var testModel;\n    setUp(function() {\n        testModel = new Backbone.Model();\n    });\n    suite('set', function() {\n        test('set adds a value to the model\\'s attributes', function() {\n            testModel.set('a', 1);\n            assert(testModel.attributes.a === 1);\n        });\n    });\n});\n```", "```js\ndescribe('Model', function() {\n    var testModel;\n    beforeEach(function() {\n        testModel = new Backbone.Model();\n    });\n    describe('#set', function() {\n        it('sets a value that \"get\" can retrieve', function() {\n            testModel.set('a', 1);\n            expect(testModel.get('a')).to.be(1);\n        });\n    });\n});\n```", "```js\nexpect(1).to.be(1); // asserts that 1 === 1\nexpect(1).not.to.be(2); // asserts that 1 !== 2\nexpect(1).to.eql(\"1\") // asserts that 1 == \"1\"\nexpect(1).to.be.ok(); // asserts that 1 is \"truthy\" (evaluates true when used as a boolean)\nexpect(1).to.be.a('number'); // asserts typeof 1 === 'number'\n```", "```js\n// *INSERT TESTS HERE*\n```", "```js\nfoo: function() {\n    this.bar += 1;\n    this.baz();\n}\n```", "```js\nfetchThenDoFoo: function() {\n    this.fetch().done(this.foo);\n}\n```", "```js\ndescribe('foo', function() {\n    var bazStub,\n        example;\n    beforeEach(function() {\n        example = new ExampleModel();\n        // Replace the real \"baz\" with a fake one that does nothing\n        bazStub = sinon.stub(example, 'baz');\n    });\n    it('calls baz', function() {\n        example.foo();\n        expect(bazStub.calledOnce).to.be(true); // did foo call baz?\n    });\n    afterEach(function() {\n        // Restore the original baz (in case another test uses it)\n        baz.restore();\n    });\n});\n```", "```js\ndescribe('fetchThenDoFoo', function() {\n\n    var fetchStub,\n        fooStub,\n        example;\n    beforeEach(function() {\n        example = new ExampleModel();\n        // Replace the real \"fetch\" with a fake one that returns an\n        // already-resolved $.Deferred\n        var deferred = new $.Deferred().resolve();\n        fetchStub = sinon.stub(example, 'fetch').returns(deferred);\n        // Since we only want to test whether or not foo was called,\n        // we can also use stub for it\n        fooStub = sinon.stub(example, 'foo');\n    });\n    it('calls foo after fetch completes', function() {\n        example.fetchThenDoFoo();\n        expect(fooStub.calledOnce).to.be(true);\n    });\n    afterEach(function() {\n        // Restore the original versions of our stub functions\n        fetchStub.restore();\n        fooStub.restore();\n    });\n});\n```", "```js\nmodule.exports = {\n    'Demo test Google' : function (client) {\n        client\n          .url('http://www.google.com')\n          .waitForElementVisible('body', 1000)\n          .assert.title('Google')\n          .assert.visible('input[type=text]')\n          .setValue('input[type=text]', 'rembrandt van rijn')\n          .waitForElementVisible('button[name=btnG]', 1000)\n          .click('button[name=btnG]')\n          .pause(1000)\n          .assert.containsText('ol#rso li:first-child',\n            'Rembrandt - Wikipedia')\n          .end();\n  }\n};\n```"]