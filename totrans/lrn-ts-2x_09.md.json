["```js\nimport chalk from \"chalk\"; \nimport { Calculator } from \"./calculator\"; \n\nconst calculator = new Calculator(); \n\nconst addResult = calculator.calculate(\"add\", 2, 3); \nconsole.log(chalk.green(`2 + 3 = ${addResult}`)); \n\nconst powResult = calculator.calculate(\"pow\", 2, 3); \nconsole.log(chalk.green(`2 + 3 = ${powResult}`)); \n```", "```js\nimport { add } from \"./operations/add\"; \nimport { pow } from \"./operations/pow\"; \n\ninterface Operation { \n    name: string; \n    operation(a: number, b: number): number; \n} \n\nexport class Calculator { \n    private readonly _operations: Operation[]; \n    public constructor() { \n        this._operations = [ \n            { name: \"add\", operation: add }, \n            { name: \"pow\", operation: pow } \n        ]; \n    } \n    public calculate(operation: string, a: number, b: number) { \n        const opt = this._operations.filter((o) => o.name === operation)[0]; \n        if (opt === undefined) { \n            throw new Error(`The operation ${operation} is not available!`); \n        } else { \n            return opt.operation(a, b); \n        } \n    } \n} \n```", "```js\nimport { isNumber } from \"./validation\"; \n\nexport function add(a: number, b: number) { \n    isNumber(a); \n    isNumber(b); \n    return a + b; \n} \n```", "```js\nimport { isNumber } from \"./validation\"; \n\nexport function pow(base: number, exponent: number) { \n    isNumber(base); \n    isNumber(exponent); \n    let result = base; \n    for (let i = 1; i < exponent; i++) { \n        result = result * base; \n    } \n    return result; \n} \n```", "```js\nexport function isNumber(a: number) { \n    if (typeof a !== \"number\") { \n        throw new Error(`${a} must be a number!`); \n    } \n} \n```", "```js\ngit clone https://github.com/user-name/repository-name.git \n```", "```js\n    Cloning into 'repository-name'...\n    remote: Counting objects: 3, done.\n    remote: Compressing objects: 100% (3/3), done.\n    remote: Total 3 (delta 2), reused 0 (delta 0), pack-reused 0\n    Unpacking objects: 100% (3/3), done.\n    Checking connectivity... done.\n```", "```js\n    cd repository-name\n    git status\n    On branch master\n    Your branch is up-to-date with 'origin/master'.\n    nothing to commit, working directory clean\n\n```", "```js\n    On branch master\n    Your branch is up-to-date with 'origin/master'.\n\n    Untracked files:\n      (use \"git add <file>...\" to include in what will be committed)\n\n      gulpfile.js\n\n    nothing added to commit but untracked files present (use \"git add\" to \n track)\n\n```", "```js\n    git add gulpfile.js\n    git status\n    On branch master\n    Your branch is up-to-date with 'origin/master'.\n\n    Changes to be committed:\n      (use \"git reset HEAD <file>...\" to unstage)\n\n      new file:   gulpfile.js\n```", "```js\n    git commit -m \"added the new gulpfile.js\"\n```", "```js\n    [master 2a62321] added the new file gulpfile.js\n     1 file changed, 1 insertions(+)\n     create mode 100644 gulpfile.js\n```", "```js\n    git push  \n```", "```js\n    npm install typescript -g\n```", "```js\n    tsc -v  \n```", "```js\n    tsc --target es6  \n```", "```js\n    tsc --init  \n```", "```js\n    tsc -p tsconfig.json  \n```", "```js\nimport { expect } from \"chai\"; \nimport { pow } from \"../src/operations/pow\"; \n\ndescribe(\"Operation: pow\", () => { \n\n    it (\"Should be able to calculate operation\", () => { \n        const result = pow(2, 3); \n        expect(result).to.eql(8); \n    }); \n\n    it (\"Should throw if an invalid argument is provided\", () => { \n        const a: any = \"2\"; \n        const b: any = 3; \n        const throws = () => pow(a, b); \n        expect(throws).to.throw(); \n    }); \n\n}); \n```", "```js\n    nyc -x **/*.js --clean --all --require ts-node/register --extension .ts -- mocha --timeout 5000 **/*.test.ts\n\n```", "```js\n\"scripts\": { \n  \"nyc\": \"nyc -x **/*.js --clean --all --require ts-node/register --extension .ts -- mocha --timeout 5000 **/*.test.ts\" \n} \n```", "```js\n    npm run nyc  \n```", "```js\n    npm install -g tslint  \n```", "```js\n{ \n    \"extends\": \"tslint:all\", \n    \"rules\": { \n      \"array-type\": [true, \"array\"], \n      \"ban-types\": false, \n      \"comment-format\": false, \n      \"completed-docs\": false, \n      \"cyclomatic-complexity\": false, \n      \"interface-name\": false, \n      \"linebreak-style\": false, \n      \"max-classes-per-file\": false, \n      \"max-file-line-count\": false, \n      \"max-line-length\": [true, 140], \n      \"member-ordering\": false, \n      \"newline-before-return\": false, \n      \"no-any\": false, \n      \"no-empty-interface\": false, \n      \"no-floating-promises\": false, \n      \"no-import-side-effect\": false, \n      \"no-inferred-empty-object-type\": false, \n      \"no-magic-numbers\": false, \n      \"no-namespace\": false, \n      \"no-null-keyword\": false, \n      \"no-parameter-properties\": false, \n      \"no-submodule-imports\": false, \n      \"no-unbound-method\": false, \n      \"no-unnecessary-class\": false, \n      \"no-unnecessary-qualifier\": false, \n      \"no-unsafe-any\": false, \n      \"no-reference\": false, \n      \"no-void-expression\": false, \n      \"only-arrow-functions\": false, \n      \"prefer-function-over-method\": false, \n      \"prefer-template\": false, \n      \"promise-function-async\": false, \n      \"space-before-function-paren\": false, \n      \"strict-boolean-expressions\": false, \n      \"strict-type-predicates\": false, \n      \"switch-default\": false, \n      \"trailing-comma\": false, \n      \"typedef\": false, \n      \"variable-name\": false \n    } \n } \n```", "```js\n    tslint --project tsconfig.json -c tslint.json ./**/*.ts  \n```", "```js\n\"scripts\": { \n  \"lint\": \"tslint --project tsconfig.json -c tslint.json ./**/*.ts\" \n} \n```", "```js\n    npm run lint  \n```", "```js\n\"scripts\": { \n    \"test\": \"echo \"Error: no test specified\" && exit 1\" \n  }, \n```", "```js\n{ \n  \"name\": \"repository-name\", \n  \"version\": \"1.0.0\", \n  \"description\": \"example\", \n  \"main\": \"index.html\", \n  \"scripts\": { \n    \"start\": \"node ./src/index.js\", \n    \"test\": \"gulp test\", \n    \"lint\": \"tslint -c tslint.json ./**/*.ts\" \n  }, \n  \"repository\": { \n    \"type\": \"git\", \n    \"url\": \"https://github.com/username/repository-name.git\" \n  }, \n\n```", "```js\n    npm test\n    npm start\n```", "```js\n    npm run lint\n```", "```js\n    npm install gulp -g\n```", "```js\nlet gulp = require(\"gulp\"); \n\ngulp.task(\"hello\", function() { \n    console.log(\"Hello Gulp!\"); \n}); \n```", "```js\n    gulp hello  \n```", "```js\nUsing gulpfile \nStarting 'hello'... \nHello Gulp! \nFinished 'hello' after 255 Î¼s \n```", "```js\n    npm install tslint gulp-tslint -g\n```", "```js\nlet tslint = require(\"tslint\"); \nlet gulpTslint = require(\"gulp-tslint\"); \n\ngulp.task(\"lint\", function() { \n\n    let program = tslint.Linter.createProgram(\"./tsconfig.json\"); \n\n    return gulp.src([ \n        \"src/**/**.ts\", \n        \"test/**/**.test.ts\" \n    ]) \n    .pipe(gulpTslint({ \n        formatter: \"stylish\", \n        program \n    })) \n    .pipe(gulpTslint.report()); \n});\n```", "```js\ngulp.task(\"default\", [\"hello\", \"lint\"]); \n```", "```js\ngulp.task(\"sync\", function (cb) { \n    // We used setTimeout here to illustrate an async operation \n    setTimeout(function () { \n        console.log(\"Hello Gulp!\"); \n        cb(); // note the cb usage here \n    }, 1000); \n}); \n```", "```js\ngulp.task(\"sync\", function () { \n    return new Promise((resolve) => { \n        setTimeout(function () { \n            console.log(\"Hello Gulp!\"); \n            resolve(); \n        }, 1000); \n    }); \n}); \n```", "```js\ngulp.task(\"sync\", function () { \n    return gulp.src([ \n        \"src/**/**.ts\" \n    ]) \n    .pipe(somePlugin({})) \n    .pipe(somePlugin ()); \n}); \n```", "```js\ngulp.task(\"async\", [\"sync1\", \"sync2\"], function () {   \n    // This task will not start until \n    // the sync tasks are completed! \n    console.log(\"Done!\"); \n}); \n```", "```js\nlet runSequence = require('run-sequence'); \n\ngulp.task('default', function(cb) { \n  runSequence( \n    'lint',                      // lint \n    ['tsc', 'tsc-tests'],        // compile \n    ['bundle-js','bundle-test'], // optimize \n    'karma'                      // test \n    'browser-sync',              // serve \n    cb                           // callback \n  ); \n}); \n```", "```js\n    npm install webpack --save-dev  \n```", "```js\n    npm install awesome-typescript-loader css-loader extract-text-webpack-plugin node-sass resolve-url-loader sass-loader style-loader --save-dev\n\n```", "```js\nconst { CheckerPlugin, TsConfigPathsPlugin } = require(\"awesome-typescript-loader\"); \nconst webpack = require(\"webpack\"); \nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\"); \n```", "```js\nconst corePlugins = [ \n    new CheckerPlugin(), \n    new webpack.DefinePlugin({ \n        \"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV || \"development\") \n    }), \n    new ExtractTextPlugin({ \n        filename: \"[name]main.css\", \n        allChunks: true \n    }) \n]; \n\nconst devPlugins = []; \n\nconst prodPlugins = [ \n    new webpack.optimize.UglifyJsPlugin({ \n        output: { comments: false } \n    }) \n]; \n\nconst isProduction = process.env.NODE_ENV === \"production\"; \nconst plugins = isProduction ? corePlugins.concat(prodPlugins) : corePlugins.concat(devPlugins); \n\n```", "```js\nmodule.exports = { \n    entry: { \n        \"calculator_app/\": \"./src/main_browser.ts\" \n    }, \n    devServer: { \n        inline: true \n    }, \n    output: { \n        filename: \"[name]bundle.js\", \n        path: __dirname + \"/public\", \n        publicPath: \"/public\" \n    }, \n    devtool: isProduction ? \"source-map\" : \"eval-source-map\", \n    resolve: { \n        extensions: [\".webpack.js\", \".ts\", \".tsx\", \".js\"], \n        plugins: [ \n            new TsConfigPathsPlugin({ \n                configFileName: \"tsconfig.json\" \n            }) \n        ] \n    }, \n    module: { \n        rules: [ \n            { \n                enforce: \"pre\", \n                test: /.js$/, \n                loader: \"source-map-loader\", \n                exclude: [/node_modules/, /experimental/] \n            }, \n            { \n                test: /.(ts|tsx)$/, \n                loader: \"awesome-typescript-loader\", \n                exclude: [/node_modules/, /experimental/] \n            }, \n            { \n                test: /.scss$/, \n                use: ExtractTextPlugin.extract({ \n                    fallback: \"style-loader\", \n                    use: [\"css-loader\", \"resolve-url-loader\", \"sass-loader\"] \n                }) \n            } \n        ] \n    }, \n    plugins: plugins \n}; \n```", "```js\nwebpack \n```", "```js\n<!doctype html> \n<html lang=\"en\"> \n  <head> \n    <meta charset=\"utf-8\"> \n    <link rel=\"stylesheet\" href=\"./public/calculator_app/main.css\"> \n    <title>Calculator</title> \n  </head> \n  <body> \n    <div id=\"main\"><!-- Content created by JavaScript --></div> \n    <script src=\"img/bundle.js\"></script> \n  </body> \n</html>\n```", "```js\n    npm install -g webpack-dev-server  \n```", "```js\n    webpack-dev-server  \n```", "```js\n{ \n    \"version\": \"0.2.0\", \n    \"configurations\": [ \n        { \n            \"type\": \"node\", \n            \"request\": \"launch\", \n            \"name\": \"Debug Mocha Tests\", \n            \"program\": \"${workspaceFolder}/node_modules/mocha/bin/_mocha\", \n            \"args\": [ \n                \"--require\", \n                \"ts-node/register\", \n                \"-u\", \n                \"tdd\", \n                \"--timeout\", \n                \"999999\", \n                \"--colors\", \n                \"${workspaceFolder}/test/**/*.test.ts\" \n            ], \n            \"internalConsoleOptions\": \"openOnSessionStart\", \n            \"sourceMaps\": true \n        } \n    ] \n} \n```", "```js\n    ts-node ./src/main_server.ts  \n```", "```js\n\"scripts\": { \n  \"ts-node\": \"ts-node ./src/main_server.ts\" \n} \n```", "```js\n    npm run ts-node  \n```", "```js\n    language: node_js\n    node_js:\n      - stable\n\n```"]