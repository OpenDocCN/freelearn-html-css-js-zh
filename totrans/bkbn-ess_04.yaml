- en: Chapter 4. Organizing Models with Collections
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：使用 Collections 组织 Models
- en: 'In this chapter, we''ll learn how to do the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: Create new `Collection` subclasses
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的 `Collection` 子类
- en: Add and remove Models from a Collection
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 Collection 中添加和移除 Models
- en: Trigger other code in response to changes in the Collection
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Collection 的变化时触发其他代码
- en: Store and retrieve `Collections` of `Models` to and from a remote server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `Collections` 的 `Models` 存储和检索到远程服务器
- en: Sand index the Models of a Collection
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 Collection 中的 Models 进行沙箱索引
- en: Take advantage of the the convenience methods borrowed from Underscore
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用从 Underscore 借来的便利方法
- en: Working with Collections
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Collections 一起工作
- en: 'In Backbone, Models may form the core of all data interaction, but you''ll
    soon find that you need to work with multiple Models to do any real work, which
    is where the `Collections` class comes in. Just as a Model wraps an object and
    provides additional functionality, `Collections` wraps an array and offers several
    advantages over using the array directly:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Backbone 中，Models 可能是所有数据交互的核心，但很快你就会发现你需要与多个 Models 一起工作才能完成任何实际的工作，这就是 `Collections`
    类发挥作用的地方。就像 Model 包装一个对象并提供额外的功能一样，`Collections` 包装一个数组，并且在使用数组时提供了几个优势：
- en: '`Collections` uses Backbone''s class system, making it easy to define methods,
    create subclasses, and so on'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collections` 使用 Backbone 的类系统，这使得定义方法、创建子类等变得容易'
- en: '`Collections` allows other code to listen for and respond when `Models` are
    added or removed from that `Collection` or when Models in a `Collection` are modified'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collections` 允许其他代码在 `Models` 被添加或从该 `Collection` 中移除，或者当 `Collection` 中的
    `Models` 被修改时进行监听和响应'
- en: '`Collections` simplifies and encapsulates the logic for communicating with
    the server'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collections` 简化和封装了与服务器通信的逻辑'
- en: 'We can create a new `Collection` subclass, as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个新的 `Collection` 子类，如下所示：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once we''ve created a subclass, we can instantiate new instances of it using
    JavaScript''s `new` keyword, just as we did to create new `Model` instances. Like
    Models, Collections have two optional arguments. The first argument is an initial
    array of `Models` or `Model` attributes, and the second argument is the Collection''s
    options. If you pass in an array of `Model` attributes, Backbone will convert
    them into Models for you, as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了一个子类，我们可以使用 JavaScript 的 `new` 关键字实例化它的新实例，就像我们创建新的 `Model` 实例一样。与 Models
    类似，Collections 有两个可选参数。第一个参数是一个初始的 `Models` 或 `Model` 属性数组，第二个参数是 Collection 的选项。如果你传递一个
    `Model` 属性数组，Backbone 会为你将它们转换为 Models，如下所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once a `Collection` subclass has been created, it stores its Model in a hidden
    property called `models`. Similar to attributes, models should not be used directly,
    and you should instead rely on the methods of `Collection` to work with its Models.
    Backbone also provides a `length` property on each `Collection`, which is always
    set to the number of Models in the `Collection` subclass:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了一个 `Collection` 子类，它将它的 Model 存储在一个名为 `models` 的隐藏属性中。与属性类似，模型不应该直接使用，而应该依赖
    `Collection` 的方法来与其 Models 一起工作。Backbone 还为每个 `Collection` 提供了一个 `length` 属性，该属性始终设置为
    `Collection` 子类中 Models 的数量：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Collections and Models
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Collections 和 Models
- en: 'Every `Collection` class has a `model` property, which defaults to `Backbone.Model`.
    You can set this property by providing it as an option when you use `extend` to
    create your `Collection` subclass:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `Collection` 类都有一个 `model` 属性，默认为 `Backbone.Model`。您可以通过在创建 `Collection`
    子类时将其作为选项提供来设置此属性：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, this `model` property doesn''t actually limit the type of Model a
    `Collection` can hold, and in fact, any `Collection` can hold any type of `Model`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个 `model` 属性实际上并不限制 `Collection` 可以持有的 Model 类型，实际上，任何 `Collection` 都可以持有任何类型的
    `Model`：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is because the `model` property of a `Collection` is only used when new
    Models are created through the `Collection`. One way in which this can happen
    is when the `Collection` is initialized with an array of attributes, as shown
    in the following example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 `Collection` 的 `model` 属性仅在通过 `Collection` 创建新的 Models 时使用。这种情况可能发生的一种方式是，当
    `Collection` 使用一个属性数组初始化时，如下面的示例所示：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Another way in which a Collection''s `model` property can be used is via the
    Collection''s `create` method. Calling `create` on a `Collection` and passing
    it an `attributes` object is essentially the same as calling new `Collection.model(attributes)`,
    except that after the provided attributes are converted into a `Model`, Backbone
    will add this `Model` to the `Collection` and then save it:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种使用 `Collection` 的 `model` 属性的方法是通过 `Collection` 的 `create` 方法。在 `Collection`
    上调用 `create` 并传递一个 `attributes` 对象，本质上等同于调用 `new Collection.model(attributes)`，只不过在提供的属性被转换为
    `Model` 之后，Backbone 会将这个 `Model` 添加到 `Collection` 中并保存它：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adding to and resetting Collections
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加和重置集合
- en: 'In addition to passing in `Models` or `attributes` when we first create a `Collection`,
    we can also add individual `Models` or `attributes`, or arrays of `Models` or
    `attributes`, to a `Collection` via the `add` method:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在我们首次创建 `Collection` 时传入 `Models` 或 `attributes`，我们还可以通过 `add` 方法将单个 `Models`
    或 `attributes`，或 `Models` 或 `attributes` 的数组添加到 `Collection` 中：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Similar to `create`, the `add` method will use the Collection''s `model` property
    to create the resulting `Models`. If instead you want to replace all the existing
    `Models` in a `Collection` rather than add more, you can use the `reset` method,
    as shown here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `create` 类似，`add` 方法也会使用 `Collection` 的 `model` 属性来创建结果 `Models`。如果您想替换 `Collection`
    中现有的所有 `Models` 而不是添加更多，可以使用 `reset` 方法，如下所示：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Indexing
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引
- en: 'In order to get or remove specific `Models` from a `Collection`, Backbone needs
    to know how to index these `Models`. Backbone does this in two ways:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从 `Collection` 中获取或删除特定的 `Models`，Backbone 需要知道如何索引这些 `Models`。Backbone 以两种方式完成此操作：
- en: Using the Model's `id` property, if any (which, as we discussed in the previous
    chapter, can either be set directly or indirectly by setting the Model's `idAttribute`
    property)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模型的 `id` 属性（如果有的话）（正如我们在上一章中讨论的，可以直接或通过设置模型的 `idAttribute` 属性间接设置）
- en: Using the Model's `cid` property (which all Models have)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模型的 `cid` 属性（所有模型都有）
- en: 'When you add a `Model` or `attributes` to a `Collection`, Backbone uses both
    of the preceding forms of identification to register the `Model` in the Collection''s
    `_byId` property. `_byId` is yet another one of Backbone''s hidden properties,
    but it''s a `private` property as well (because its name is prefixed by `_`).
    This means that, even more so than with other hidden properties, you should avoid
    using `_byId` directly and instead use it indirectly through methods such as `get`.
    The `get` method returns the `Model` with the provided ID (if any) by using `_byId`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将 `Model` 或 `attributes` 添加到 `Collection` 中时，Backbone 使用前面提到的两种识别形式在 `Collection`
    的 `_byId` 属性中注册 `Model`。`_byId` 是 Backbone 的另一个隐藏属性，但也是一个 `private` 属性（因为其名称以
    `_` 为前缀）。这意味着，与其他隐藏属性相比，您应该避免直接使用 `_byId`，而应通过 `get` 等方法间接使用它。`get` 方法通过 `_byId`
    返回具有提供 ID 的 `Model`（如果有的话）：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `_byId` property can also be used indirectly in another `Collection` method,
    which is `remove`. As its name implies, `remove` takes out the `Model` with the
    provided ID from the `Collection`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`_byId` 属性还可以在另一个 `Collection` 方法中间接使用，该方法为 `remove`。正如其名称所暗示的，`remove` 会从
    `Collection` 中移除具有提供 ID 的 `Model`：'
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can also `get` and `remove` Models from a `Collection` using a set of methods
    you''re already familiar with, because they also exist (and work the same way)
    on arrays in JavaScript. These are the methods that you can use:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用您已经熟悉的集合方法 `get` 和 `remove` 从 `Collection` 中获取和删除 `Models`，因为它们也存在于 JavaScript
    的数组中（并且以相同的方式工作）。以下是您可以使用的方法：
- en: '`push`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`push`'
- en: '`pop`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pop`'
- en: '`unshift`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unshift`'
- en: '`shift`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shift`'
- en: '`slice`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slice`'
- en: 'Finally, if you want to retrieve a `Model` from a `Collection` using its index,
    instead of its `id`, you can use `at`, a Collection''s final Model accessing method.
    The `at` method takes a zero-based index and returns the `Model` at that index,
    if any:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您想使用索引而不是 `id` 来从 `Collection` 中检索 `Model`，可以使用 `at`，这是 `Collection` 的最后一个模型访问方法。`at`
    方法接受一个零基索引并返回该索引处的 `Model`（如果有的话）：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Sorting
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序
- en: 'Backbone can automatically sort all `Models` added to a `Collection` if you
    tell it to by specifying a comparator. As with a model, a Collection''s comparator
    can be provided as an option when the `Collection` class is created:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您通过指定比较器来告诉 Backbone，它将自动对所有添加到 `Collection` 中的 `Models` 进行排序。与模型一样，当创建 `Collection`
    类时，可以将其比较器作为选项提供：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: While the provided comparator controls how the Collection sorts its models internally,
    you can also sort a Collection using alternate comparators by using one of Underscore's
    sorting methods, which we'll detail at the end of the chapter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然提供的比较器控制着集合如何内部排序其模型，但你也可以使用Underscore的排序方法之一来对集合进行排序，我们将在本章末尾详细说明。
- en: 'The comparator itself can come in three forms. The first and simplest form
    is the name of an attribute of the Models in the Collection. If this form is used,
    Backbone will sort the collection based on the values of the specified attribute:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 比较器本身可以采用三种形式。第一种也是最简单的一种形式是集合中模型的属性名称。如果使用这种形式，Backbone将根据指定属性的值对集合进行排序：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The second form of comparator is a function that takes a single argument. If
    this form is used, Backbone will pass any Models it is trying to sort to this
    function one at a time and then use whatever value is returned to sort the Model.
    For instance, if you want to sort your Models alphabetically, except if that `Model`
    is `Heathcliff`, you can use a comparator of this form:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 比较器的第二种形式是一个接受单个参数的函数。如果使用这种形式，Backbone将逐个将任何要排序的模型传递给该函数，然后使用返回的任何值来排序模型。例如，如果你想按字母顺序对模型进行排序，除非该`Model`是`Heathcliff`，你可以使用这种形式的比较器：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The final form of `comparator` is a function that takes two `Model` arguments
    and returns a number, indicating whether the first argument should come before
    (`-1`) or after (`1`) the second. If there is no preference as to which Model
    should come first, the function will return `0`. We can implement our same first
    `Heathcliff` comparator using this style:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`comparator`的最终形式是一个接受两个`Model`参数并返回一个数字的函数，表示第一个参数应该在第二个参数之前（`-1`）还是之后（`1`）。如果没有对哪个模型应该排在第一的偏好，函数将返回`0`。我们可以使用这种风格实现相同的第一个`Heathcliff`比较器：'
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Events
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'Just as with Models, Collections have `on` and `off` methods, which can be
    used to trigger logic when certain events occur in their Collection. The following
    table shows the events that can occur:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 就像模型一样，集合也有`on`和`off`方法，可以在集合中发生某些事件时触发逻辑。下表显示了可能发生的事件：
- en: '| Event name | Trigger |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 事件名称 | 触发 |'
- en: '| --- | --- |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `add` | When a Model or Models is/are added to the Collection |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `add` | 当模型或模型被添加到集合中时 |'
- en: '| `remove` | When a Model or Models is/are removed from the Collection |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `remove` | 当模型或模型被从集合中移除时 |'
- en: '| `reset` | When the Collection is reset |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `reset` | 当集合被重置时 |'
- en: '| `sort` | Whenever the Collection is sorted (typically after an add/remove)
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `sort` | 当集合被排序时（通常在添加/移除之后） |'
- en: '| `sync` | When an AJAX method of the Collection has completed |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `sync` | 当集合的AJAX方法完成时 |'
- en: '| `error` | When an AJAX method of the Collection returns an error |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `error` | 当集合的AJAX方法返回错误时 |'
- en: '| `invalid` | When validation triggered by a Model''s `save`/`isValid` call
    fails |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `invalid` | 当由模型的`save`/`isValid`调用触发的验证失败时 |'
- en: 'Collections, such as Models, also have a special `all` event, which can be
    used to listen for any event occurring on the Collection. In addition, the `on`
    method of a Collection can also be used to listen for any Model events triggered
    by the Models in the Collection, as shown here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 集合，如模型一样，也有一个特殊的`all`事件，可以用来监听集合上发生的任何事件。此外，集合的`on`方法也可以用来监听由集合中的模型触发的任何模型事件，如下所示：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Server-side actions
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端操作
- en: 'Just as with Models, Collections have a `fetch` method that retrieves data
    from the server and a `save` method to send data to the server. One minor difference,
    however, is that by default, a Collection''s `fetch` will merge any new data from
    the server with any data it already has. If you prefer to replace your local data
    with server data entirely, you can pass a `{reset: true}` option when you fetch.
    Collections also have the `url`, `parse`, and `toJSON` methods that control how
    `fetch`/`save` work.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '就像模型一样，集合有一个`fetch`方法，用于从服务器检索数据，以及一个`save`方法用于将数据发送到服务器。然而，有一个小差异，即默认情况下，集合的`fetch`将合并来自服务器的新数据与它已经拥有的任何数据。如果你希望完全用服务器数据替换本地数据，可以在获取数据时传递一个`{reset:
    true}`选项。集合还有`url`、`parse`和`toJSON`方法，这些方法控制着`fetch`/`save`的工作方式。'
- en: 'All these methods work in the same way as they do on Models. However, Collections
    do not have `urlRoot`; while the Models inside a Collection may have IDs, the
    Collections themselves don''t, so Collections don''t need to generate their URLs
    using a `.urlRoot`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些方法的工作方式与在模型上一样。然而，集合没有 `urlRoot`；虽然集合内部的模型可能有 ID，但集合本身没有，因此集合不需要使用 `.urlRoot`
    生成它们的 URL：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Underscore methods
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下划线方法
- en: '`Collections`, such as `Models`, have a number of methods inherited from Underscore,
    but Collections actually have a lot more methods than Models...28 methods to be
    exact. We can''t possibly cover all these methods in detail here, so I''ll just
    provide a quick summary of what each method does and then explore a few of the
    more important ones in depth.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`Collections`，就像 `Models` 一样，从 Underscore 继承了一些方法，但集合实际上比模型有更多方法...确切地说有 28
    个方法。我们不可能在这里详细说明所有这些方法，所以我将简要概述每个方法的作用，然后深入探讨一些更重要的一些方法。'
- en: Note that just as with the Underscore methods on Model, some of these methods
    operate on the attributes of the `Models` inside the `Collection` rather than
    on the `Collection` or `Models` themselves. At the same time, however, all the
    methods that return multiple results return plain old JavaScript arrays, not new
    Collections. This is done for performance reasons and shouldn't be an issue because
    if you need those results as a Collection, you can simply create a new one and
    pass in the results array.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，就像在模型上的下划线方法一样，其中一些方法是在 `Collection` 内部的 `Models` 的属性上操作，而不是在 `Collection`
    或 `Models` 本身上操作。然而，同时，所有返回多个结果的方法都返回普通的 JavaScript 数组，而不是新的集合。这样做是为了性能原因，并且不应该成为问题，因为如果您需要将这些结果作为集合，您可以简单地创建一个新的集合并将结果数组传递进去。
- en: '| Name | What it does |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 它的作用 |'
- en: '| --- | --- |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `each` | This iterates over every Model in the Collection |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `each` | 这遍历集合中的每个模型 |'
- en: '| `map` | This returns an array of values by transforming every Model in the
    Collection |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `map` | 这通过转换集合中的每个模型返回一个值数组 |'
- en: '| `reduce` | This returns a single value generated from all the Models in a
    Collection |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `reduce` | 这返回由集合中的所有模型生成的一个单一值 |'
- en: '| `reduceRight` | The same as `reduc` `e`, except that it iterates backwards
    |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `reduceRight` | 与 `reduce` 相同，但它按反向迭代 |'
- en: '| `find` | This returns the first Model that matches a testing function |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `find` | 这返回第一个与测试函数匹配的模型 |'
- en: '| `filter` | This returns all the Models that match a testing function |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `filter` | 这返回所有与测试函数匹配的模型 |'
- en: '| `reject` | This returns all the Models that don''t match a testing function
    |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `reject` | 这返回所有不匹配测试函数的模型 |'
- en: '| `every` | This returns `true` if every Model in the Collection matches a
    test function |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `every` | 如果集合中的每个模型都匹配测试函数，则返回 `true` |'
- en: '| `some` | This returns `true` if some (any) Model in the Collection matches
    a test function |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `some` | 如果集合中的某些（任何）模型与测试函数匹配，则返回 `true` |'
- en: '| `contains` | This returns `true` if the Collection includes the provided
    Model |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `contains` | 如果集合包含提供的模型，则返回 `true` |'
- en: '| `invoke` | This calls a specified function on every Model in the Collection
    and returns the result |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `invoke` | 这将在集合中的每个模型上调用指定的函数，并返回结果 |'
- en: '| `max` | This applies a conversion function to every Model in the Collection
    and returns the maximum value returned |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `max` | 这会将转换函数应用于集合中的每个模型，并返回返回的最大值 |'
- en: '| `min` | This applies a conversion function to every Model in the Collection
    and returns the minimum value returned |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `min` | 这会将转换函数应用于集合中的每个模型，并返回返回的最小值 |'
- en: '| `sortBy` | This returns the Collection''s Models sorted based on an indicated
    attribute |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `sortBy` | 这根据指示的属性返回排序后的集合模型 |'
- en: '| `groupBy` | This returns the Collection''s Models grouped by an indicated
    attribute |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `groupBy` | 这根据指示的属性返回集合模型的分组 |'
- en: '| `shuffle` | This returns one or more randomly chosen Models from the Collection
    |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `shuffle` | 这返回从集合中随机选择的一个或多个模型 |'
- en: '| `toArray` | This returns an array of the Collection''s Models |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `toArray` | 这返回集合模型的数组 |'
- en: '| `size` | This returns a count of Models in the Collection, such as `Collection.length`
    |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `size` | 这返回集合中模型的计数，例如 `Collection.length` |'
- en: '| `first` | This returns the first (or first N) Model(s) in the Collection
    |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `first` | 这返回集合中的第一个（或前 N 个）模型 |'
- en: '| `initial` | This returns all but the last Model in the Collection |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `initial` | 这返回集合中的所有模型，除了最后一个 |'
- en: '| `rest` | This returns all the Models in the Collection after the first N
    |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `rest` | 这返回集合中第一个 N 个模型之后的所有模型 |'
- en: '| `last` | This returns the last (or last N) Model(s) in the Collection |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `last` | 返回 `Collection` 中最后一个（或最后 N 个）`Model` |'
- en: '| `without` | This returns all the Models in the Collection except the provided
    ones |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `without` | 返回 `Collection` 中除了提供的 `Model` 之外的所有 `Model` |'
- en: '| `indexOf` | This returns the index of the first provided Model in the Collection
    |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `indexOf` | 返回 `Collection` 中第一个提供的 `Model` 的索引 |'
- en: '| `lastIndexOf` | This returns the index of the last provided Model in the
    Collection |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `lastIndexOf` | 返回 `Collection` 中最后一个提供的 `Model` 的索引 |'
- en: '| `isEmpty` | This returns `true` if the Collection contains no Models |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `isEmpty` | 如果 `Collection` 不包含任何 `Model`，则返回 `true` |'
- en: '| `chain` | This returns a version of Collection that can have multiple `Underscore`
    methods called on it successively (chained); call the `value` method at the end
    of the chain to get the result of the calls |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `chain` | 返回一个可以连续调用多个 `Underscore` 方法的 `Collection` 版本（链式调用）；在链的末尾调用 `value`
    方法以获取调用结果 |'
- en: '| `pluck` | This returns the provided attribute from each Model in the Collection
    |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `pluck` | 返回 `Collection` 中每个 `Model` 的提供的属性 |'
- en: '| `where` | This returns all the Models in the Collection that match the provided
    attribute template |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `where` | 返回 `Collection` 中所有与提供的属性模板匹配的 `Model` |'
- en: '| `findWhere` | This returns the first Model found in the Collection that matches
    the provided attribute template |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `findWhere` | 返回 `Collection` 中第一个与提供的属性模板匹配的 `Model` |'
- en: Previously mentioned methods
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 之前提到的 `methods`
- en: 'Several methods in the preceding list should already be familiar, as we have
    already explained the `each`, `map`, `invoke`, `pluck`, and `reduce` methods in
    [Chapter 2](part0021.xhtml#aid-K0RQ1 "Chapter 2. Object-Oriented JavaScript with
    Backbone Classes"), *Object-Oriented JavaScript with Backbone Classes*. All these
    methods work the same if you call their Underscore version and then pass `Collection.models`
    to them, as shown here:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的列表中的一些方法你应该已经很熟悉了，因为我们已经在 [第二章](part0021.xhtml#aid-K0RQ1 "第二章。使用 Backbone
    类的面向对象 JavaScript") *使用 Backbone 类的面向对象 JavaScript* 中解释了 `each`、`map`、`invoke`、`pluck`
    和 `reduce` 方法。如果你调用它们的 `Underscore` 版本，并将 `Collection.models` 传递给它们，这些方法将按相同的方式工作，如下所示：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Testing methods
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试方法
- en: 'Several of the remaining methods focus on testing the Collection to see whether
    it passes a certain type of test. The `contains` and `isEmpty` methods allow you
    to check whether the `Collection` contains a specified `Model` or `Models` or
    whether it contains any models at all, respectively:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的一些方法主要关注测试 `Collection` 是否通过某种类型的测试。`contains` 和 `isEmpty` 方法允许你检查 `Collection`
    是否包含指定的 `Model` 或 `Models`，或者是否包含任何模型：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'For more advanced testing, you can use the `every` and `some` methods, which
    allow you to specify your own test logic. For instance, if you want to know whether
    any of the books in a Collection have more than a hundred pages, you can use the
    `some` method, as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更高级的测试，你可以使用 `every` 和 `some` 方法，这些方法允许你指定自己的测试逻辑。例如，如果你想知道 `Collection` 中的任何书籍是否超过了一百页，你可以使用
    `some` 方法，如下所示：
- en: '[PRE20]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Extraction methods
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取方法
- en: 'Another way in which several of the `Underscore` methods can be used is by
    extracting a specific `Model` or `Models` from a `Collection`. The simplest way
    to do this is with the `where` and `findWhere` methods, which return all the (or
    in the case of `findWhere`, the first) Models that match a provided attributes
    object. For example, if you want to extract all the books in a Collection, which
    have exactly one hundred pages, you can use the `where` method, as shown here:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种使用 `Underscore` 方法的方式是从 `Collection` 中提取特定的 `Model` 或 `Models`。最简单的方法是使用
    `where` 和 `findWhere` 方法，它们返回所有（或 `findWhere` 的情况下，第一个）与提供的属性对象匹配的 `Model`。例如，如果你想从
    `Collection` 中提取所有恰好有一百页的书籍，你可以使用 `where` 方法，如下所示：
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'What if we need a more complicated selection? For instance, what if instead
    of extracting all the books with exactly a hundred pages, we wanted to extract
    any book with a hundred or more pages? For this sort of extraction, we can use
    the more powerful `filter` method, or its inverse, the `reject` method, instead:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要更复杂的筛选怎么办？例如，如果我们不想提取恰好有一百页的所有书籍，而是想提取任何有一百页或更多页的书籍，我们应该怎么办？对于这种提取，我们可以使用更强大的
    `filter` 方法，或者它的逆方法 `reject` 方法，如下所示：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Ordering methods
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序方法
- en: 'Finally, we have `toArray`, `sortBy`, and `groupBy`, all of which allow you
    to get an array of all the `Models` stored in a `Collection`. However, while `toArray`
    simply returns all the Models in the Collection, `sortBy` returns Models sorted
    by a provided criteria, and `groupBy` returns Models grouped into a further level
    of arrays. For example, if you want to get all the books in a Collection sorted
    alphabetically, you can use `sortBy`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有 `toArray`、`sortBy` 和 `groupBy`，所有这些都可以让您获取存储在 `Collection` 中的所有 `Models`
    的数组。然而，虽然 `toArray` 只简单地返回集合中的所有模型，`sortBy` 则根据提供的标准返回排序后的模型，而 `groupBy` 则将模型分组到更高级别的数组中。例如，如果您想获取一个按字母顺序排序的集合中的所有书籍，可以使用
    `sortBy`：
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If, instead, you want to organize them into groups based on the first letter
    of their title, you can use `groupBy`, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想根据标题的首字母将它们组织成组，可以使用 `groupBy`，如下所示：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored Backbone's `Collection` class. You learned how
    to add and remove Models and `Model` attributes, how to use the `on` and `off`
    methods to listen for events, how to control the sorting and indexing of Collections,
    and how to use `fetch` and `save` to exchange data with a remote server. We also
    examined the many `Underscore` methods of a Collection and how they can be used
    to realize the full power of a Collection.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Backbone 的 `Collection` 类。您学习了如何添加和删除模型和 `Model` 属性，如何使用 `on` 和 `off`
    方法来监听事件，如何控制集合的排序和索引，以及如何使用 `fetch` 和 `save` 与远程服务器交换数据。我们还考察了集合的许多 `Underscore`
    方法以及它们如何被用来实现集合的全部功能。
- en: In the next chapter, we'll take a look at Backbone's `View` class. Views allow
    you to render an HTML page, or a subset of one, using the data from the Models
    and Collections that we've already covered.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 Backbone 的 `View` 类。视图允许您使用我们已介绍过的模型和集合的数据来渲染一个 HTML 页面，或者其子集。
