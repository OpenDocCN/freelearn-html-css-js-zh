- en: Chapter 4. Organizing Models with Collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll learn how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create new `Collection` subclasses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add and remove Models from a Collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trigger other code in response to changes in the Collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store and retrieve `Collections` of `Models` to and from a remote server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sand index the Models of a Collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take advantage of the the convenience methods borrowed from Underscore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Backbone, Models may form the core of all data interaction, but you''ll
    soon find that you need to work with multiple Models to do any real work, which
    is where the `Collections` class comes in. Just as a Model wraps an object and
    provides additional functionality, `Collections` wraps an array and offers several
    advantages over using the array directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Collections` uses Backbone''s class system, making it easy to define methods,
    create subclasses, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Collections` allows other code to listen for and respond when `Models` are
    added or removed from that `Collection` or when Models in a `Collection` are modified'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Collections` simplifies and encapsulates the logic for communicating with
    the server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can create a new `Collection` subclass, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we''ve created a subclass, we can instantiate new instances of it using
    JavaScript''s `new` keyword, just as we did to create new `Model` instances. Like
    Models, Collections have two optional arguments. The first argument is an initial
    array of `Models` or `Model` attributes, and the second argument is the Collection''s
    options. If you pass in an array of `Model` attributes, Backbone will convert
    them into Models for you, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once a `Collection` subclass has been created, it stores its Model in a hidden
    property called `models`. Similar to attributes, models should not be used directly,
    and you should instead rely on the methods of `Collection` to work with its Models.
    Backbone also provides a `length` property on each `Collection`, which is always
    set to the number of Models in the `Collection` subclass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Collections and Models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every `Collection` class has a `model` property, which defaults to `Backbone.Model`.
    You can set this property by providing it as an option when you use `extend` to
    create your `Collection` subclass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this `model` property doesn''t actually limit the type of Model a
    `Collection` can hold, and in fact, any `Collection` can hold any type of `Model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is because the `model` property of a `Collection` is only used when new
    Models are created through the `Collection`. One way in which this can happen
    is when the `Collection` is initialized with an array of attributes, as shown
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way in which a Collection''s `model` property can be used is via the
    Collection''s `create` method. Calling `create` on a `Collection` and passing
    it an `attributes` object is essentially the same as calling new `Collection.model(attributes)`,
    except that after the provided attributes are converted into a `Model`, Backbone
    will add this `Model` to the `Collection` and then save it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Adding to and resetting Collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to passing in `Models` or `attributes` when we first create a `Collection`,
    we can also add individual `Models` or `attributes`, or arrays of `Models` or
    `attributes`, to a `Collection` via the `add` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to `create`, the `add` method will use the Collection''s `model` property
    to create the resulting `Models`. If instead you want to replace all the existing
    `Models` in a `Collection` rather than add more, you can use the `reset` method,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Indexing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to get or remove specific `Models` from a `Collection`, Backbone needs
    to know how to index these `Models`. Backbone does this in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Model's `id` property, if any (which, as we discussed in the previous
    chapter, can either be set directly or indirectly by setting the Model's `idAttribute`
    property)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Model's `cid` property (which all Models have)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you add a `Model` or `attributes` to a `Collection`, Backbone uses both
    of the preceding forms of identification to register the `Model` in the Collection''s
    `_byId` property. `_byId` is yet another one of Backbone''s hidden properties,
    but it''s a `private` property as well (because its name is prefixed by `_`).
    This means that, even more so than with other hidden properties, you should avoid
    using `_byId` directly and instead use it indirectly through methods such as `get`.
    The `get` method returns the `Model` with the provided ID (if any) by using `_byId`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `_byId` property can also be used indirectly in another `Collection` method,
    which is `remove`. As its name implies, `remove` takes out the `Model` with the
    provided ID from the `Collection`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also `get` and `remove` Models from a `Collection` using a set of methods
    you''re already familiar with, because they also exist (and work the same way)
    on arrays in JavaScript. These are the methods that you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`push`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pop`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unshift`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shift`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slice`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, if you want to retrieve a `Model` from a `Collection` using its index,
    instead of its `id`, you can use `at`, a Collection''s final Model accessing method.
    The `at` method takes a zero-based index and returns the `Model` at that index,
    if any:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Sorting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Backbone can automatically sort all `Models` added to a `Collection` if you
    tell it to by specifying a comparator. As with a model, a Collection''s comparator
    can be provided as an option when the `Collection` class is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: While the provided comparator controls how the Collection sorts its models internally,
    you can also sort a Collection using alternate comparators by using one of Underscore's
    sorting methods, which we'll detail at the end of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The comparator itself can come in three forms. The first and simplest form
    is the name of an attribute of the Models in the Collection. If this form is used,
    Backbone will sort the collection based on the values of the specified attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The second form of comparator is a function that takes a single argument. If
    this form is used, Backbone will pass any Models it is trying to sort to this
    function one at a time and then use whatever value is returned to sort the Model.
    For instance, if you want to sort your Models alphabetically, except if that `Model`
    is `Heathcliff`, you can use a comparator of this form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The final form of `comparator` is a function that takes two `Model` arguments
    and returns a number, indicating whether the first argument should come before
    (`-1`) or after (`1`) the second. If there is no preference as to which Model
    should come first, the function will return `0`. We can implement our same first
    `Heathcliff` comparator using this style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just as with Models, Collections have `on` and `off` methods, which can be
    used to trigger logic when certain events occur in their Collection. The following
    table shows the events that can occur:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Event name | Trigger |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `add` | When a Model or Models is/are added to the Collection |'
  prefs: []
  type: TYPE_TB
- en: '| `remove` | When a Model or Models is/are removed from the Collection |'
  prefs: []
  type: TYPE_TB
- en: '| `reset` | When the Collection is reset |'
  prefs: []
  type: TYPE_TB
- en: '| `sort` | Whenever the Collection is sorted (typically after an add/remove)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `sync` | When an AJAX method of the Collection has completed |'
  prefs: []
  type: TYPE_TB
- en: '| `error` | When an AJAX method of the Collection returns an error |'
  prefs: []
  type: TYPE_TB
- en: '| `invalid` | When validation triggered by a Model''s `save`/`isValid` call
    fails |'
  prefs: []
  type: TYPE_TB
- en: 'Collections, such as Models, also have a special `all` event, which can be
    used to listen for any event occurring on the Collection. In addition, the `on`
    method of a Collection can also be used to listen for any Model events triggered
    by the Models in the Collection, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Server-side actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just as with Models, Collections have a `fetch` method that retrieves data
    from the server and a `save` method to send data to the server. One minor difference,
    however, is that by default, a Collection''s `fetch` will merge any new data from
    the server with any data it already has. If you prefer to replace your local data
    with server data entirely, you can pass a `{reset: true}` option when you fetch.
    Collections also have the `url`, `parse`, and `toJSON` methods that control how
    `fetch`/`save` work.'
  prefs: []
  type: TYPE_NORMAL
- en: 'All these methods work in the same way as they do on Models. However, Collections
    do not have `urlRoot`; while the Models inside a Collection may have IDs, the
    Collections themselves don''t, so Collections don''t need to generate their URLs
    using a `.urlRoot`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Underscore methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Collections`, such as `Models`, have a number of methods inherited from Underscore,
    but Collections actually have a lot more methods than Models...28 methods to be
    exact. We can''t possibly cover all these methods in detail here, so I''ll just
    provide a quick summary of what each method does and then explore a few of the
    more important ones in depth.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that just as with the Underscore methods on Model, some of these methods
    operate on the attributes of the `Models` inside the `Collection` rather than
    on the `Collection` or `Models` themselves. At the same time, however, all the
    methods that return multiple results return plain old JavaScript arrays, not new
    Collections. This is done for performance reasons and shouldn't be an issue because
    if you need those results as a Collection, you can simply create a new one and
    pass in the results array.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | What it does |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `each` | This iterates over every Model in the Collection |'
  prefs: []
  type: TYPE_TB
- en: '| `map` | This returns an array of values by transforming every Model in the
    Collection |'
  prefs: []
  type: TYPE_TB
- en: '| `reduce` | This returns a single value generated from all the Models in a
    Collection |'
  prefs: []
  type: TYPE_TB
- en: '| `reduceRight` | The same as `reduc` `e`, except that it iterates backwards
    |'
  prefs: []
  type: TYPE_TB
- en: '| `find` | This returns the first Model that matches a testing function |'
  prefs: []
  type: TYPE_TB
- en: '| `filter` | This returns all the Models that match a testing function |'
  prefs: []
  type: TYPE_TB
- en: '| `reject` | This returns all the Models that don''t match a testing function
    |'
  prefs: []
  type: TYPE_TB
- en: '| `every` | This returns `true` if every Model in the Collection matches a
    test function |'
  prefs: []
  type: TYPE_TB
- en: '| `some` | This returns `true` if some (any) Model in the Collection matches
    a test function |'
  prefs: []
  type: TYPE_TB
- en: '| `contains` | This returns `true` if the Collection includes the provided
    Model |'
  prefs: []
  type: TYPE_TB
- en: '| `invoke` | This calls a specified function on every Model in the Collection
    and returns the result |'
  prefs: []
  type: TYPE_TB
- en: '| `max` | This applies a conversion function to every Model in the Collection
    and returns the maximum value returned |'
  prefs: []
  type: TYPE_TB
- en: '| `min` | This applies a conversion function to every Model in the Collection
    and returns the minimum value returned |'
  prefs: []
  type: TYPE_TB
- en: '| `sortBy` | This returns the Collection''s Models sorted based on an indicated
    attribute |'
  prefs: []
  type: TYPE_TB
- en: '| `groupBy` | This returns the Collection''s Models grouped by an indicated
    attribute |'
  prefs: []
  type: TYPE_TB
- en: '| `shuffle` | This returns one or more randomly chosen Models from the Collection
    |'
  prefs: []
  type: TYPE_TB
- en: '| `toArray` | This returns an array of the Collection''s Models |'
  prefs: []
  type: TYPE_TB
- en: '| `size` | This returns a count of Models in the Collection, such as `Collection.length`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `first` | This returns the first (or first N) Model(s) in the Collection
    |'
  prefs: []
  type: TYPE_TB
- en: '| `initial` | This returns all but the last Model in the Collection |'
  prefs: []
  type: TYPE_TB
- en: '| `rest` | This returns all the Models in the Collection after the first N
    |'
  prefs: []
  type: TYPE_TB
- en: '| `last` | This returns the last (or last N) Model(s) in the Collection |'
  prefs: []
  type: TYPE_TB
- en: '| `without` | This returns all the Models in the Collection except the provided
    ones |'
  prefs: []
  type: TYPE_TB
- en: '| `indexOf` | This returns the index of the first provided Model in the Collection
    |'
  prefs: []
  type: TYPE_TB
- en: '| `lastIndexOf` | This returns the index of the last provided Model in the
    Collection |'
  prefs: []
  type: TYPE_TB
- en: '| `isEmpty` | This returns `true` if the Collection contains no Models |'
  prefs: []
  type: TYPE_TB
- en: '| `chain` | This returns a version of Collection that can have multiple `Underscore`
    methods called on it successively (chained); call the `value` method at the end
    of the chain to get the result of the calls |'
  prefs: []
  type: TYPE_TB
- en: '| `pluck` | This returns the provided attribute from each Model in the Collection
    |'
  prefs: []
  type: TYPE_TB
- en: '| `where` | This returns all the Models in the Collection that match the provided
    attribute template |'
  prefs: []
  type: TYPE_TB
- en: '| `findWhere` | This returns the first Model found in the Collection that matches
    the provided attribute template |'
  prefs: []
  type: TYPE_TB
- en: Previously mentioned methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Several methods in the preceding list should already be familiar, as we have
    already explained the `each`, `map`, `invoke`, `pluck`, and `reduce` methods in
    [Chapter 2](part0021.xhtml#aid-K0RQ1 "Chapter 2. Object-Oriented JavaScript with
    Backbone Classes"), *Object-Oriented JavaScript with Backbone Classes*. All these
    methods work the same if you call their Underscore version and then pass `Collection.models`
    to them, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Testing methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Several of the remaining methods focus on testing the Collection to see whether
    it passes a certain type of test. The `contains` and `isEmpty` methods allow you
    to check whether the `Collection` contains a specified `Model` or `Models` or
    whether it contains any models at all, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'For more advanced testing, you can use the `every` and `some` methods, which
    allow you to specify your own test logic. For instance, if you want to know whether
    any of the books in a Collection have more than a hundred pages, you can use the
    `some` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Extraction methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another way in which several of the `Underscore` methods can be used is by
    extracting a specific `Model` or `Models` from a `Collection`. The simplest way
    to do this is with the `where` and `findWhere` methods, which return all the (or
    in the case of `findWhere`, the first) Models that match a provided attributes
    object. For example, if you want to extract all the books in a Collection, which
    have exactly one hundred pages, you can use the `where` method, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'What if we need a more complicated selection? For instance, what if instead
    of extracting all the books with exactly a hundred pages, we wanted to extract
    any book with a hundred or more pages? For this sort of extraction, we can use
    the more powerful `filter` method, or its inverse, the `reject` method, instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Ordering methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, we have `toArray`, `sortBy`, and `groupBy`, all of which allow you
    to get an array of all the `Models` stored in a `Collection`. However, while `toArray`
    simply returns all the Models in the Collection, `sortBy` returns Models sorted
    by a provided criteria, and `groupBy` returns Models grouped into a further level
    of arrays. For example, if you want to get all the books in a Collection sorted
    alphabetically, you can use `sortBy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If, instead, you want to organize them into groups based on the first letter
    of their title, you can use `groupBy`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored Backbone's `Collection` class. You learned how
    to add and remove Models and `Model` attributes, how to use the `on` and `off`
    methods to listen for events, how to control the sorting and indexing of Collections,
    and how to use `fetch` and `save` to exchange data with a remote server. We also
    examined the many `Underscore` methods of a Collection and how they can be used
    to realize the full power of a Collection.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll take a look at Backbone's `View` class. Views allow
    you to render an HTML page, or a subset of one, using the data from the Models
    and Collections that we've already covered.
  prefs: []
  type: TYPE_NORMAL
