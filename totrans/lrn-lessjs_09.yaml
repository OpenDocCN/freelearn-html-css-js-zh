- en: Chapter 9. Working with Less in a CMS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working in a CMS…Ah, choices, choices…!
  prefs: []
  type: TYPE_NORMAL
- en: 'Question: what do the following have in common—Facebook, Beyoncé, Sony, Dallas
    Mavericks NBA basketball team, and Time?'
  prefs: []
  type: TYPE_NORMAL
- en: Worked it out? Well, it's the subject of our next chapter in our journey of
    learning Less. They all have blogs or sites created using WordPress! Created back
    in 2003, WordPress has become one of the world's most well-known content management
    system platforms, used in dozens of scenarios, from simple blogs to full-blown
    e-commerce systems.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the next few pages, we're going to learn how to incorporate our favorite
    CSS preprocessor into WordPress and some of the tricks we can use to help simplify
    the creation of style sheets. The best bit—most are tricks we've already covered
    throughout the book so far; we're just going to adapt where we use them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the WP theme structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporating Less into pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some examples of converting code to use Less
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prebuilt themes for WP, using Less
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugins available to use Less with WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Grunt to help Less development in WP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Curious? Let's get started...!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter will assume a certain level of familiarity with the WordPress theme
    design; if you're new to WordPress, you might like to peruse one of the several
    books by Packt Publishing on WordPress theme design.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the WP theme structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've spent any time working with CMS systems, then you will likely have
    come across the concept of using themes to customize your site and add or remove
    features as you see fit.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress is no different; it uses a system of themes to customize its appearance;
    throughout this chapter, we're going to follow this principle and see how we can
    use Less to help simplify the process. Before we start writing code, it's worth
    taking a moment to examine the anatomy of a WordPress theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to download the WordPress source files, which are available
    at [http://wordpress.org/latest.zip](http://wordpress.org/latest.zip); at the
    time of writing this, the latest version is 3.9.1\. When we open the WordPress
    archive, navigate to **wp-content** | **themes** | **twentyfourteen**. We''ll
    see something akin to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing the WP theme structure](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: All of these files are required to operate the Twenty Fourteen theme that comes
    with this version of WordPress; we will be using this theme as a basis for our
    exercises throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We are most interested in the `style.css` file—this is the main style sheet
    for any theme. This file contains the theme information that is displayed within
    the theme selection area of WordPress, where we can see details such as the name
    of the theme, author, support URL, and so on. We will also make use of the `functions.php`
    file to add support for Less, but this will be a one-off process that happens
    before we really get to work on customizing our theme.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing our environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've downloaded WordPress, we need to ensure we have a working environment
    available in order to work with Less.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each person''s environment might differ, but to get the most benefit out of
    the exercises that follow, you will need to ensure that you at least have the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working copy of WordPress that can be customized—ideally, this will be locally
    hosted using a web server such as WAMP (for Windows, available at [http://www.wampserver.com](http://www.wampserver.com)),
    or MAMP (for Mac, available at [http://www.mamp.info](http://www.mamp.info)).
    Alternatively, you might have some online webspace available for use—this will
    work as well, although you might find the automation exercises at the end of this
    chapter hard to do.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the purposes of the book, I will assume WampServer is installed; change
    accordingly, if your server is different.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A copy of Node.js installed along with Grunt; we covered how to install both
    earlier in [Chapter 2](part0025_split_000.html#page "Chapter 2. Building a Less
    Development Toolkit"), *Building a Less Development Toolkit*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A text editor of your choice—there are hundreds available; my personal preference
    is Sublime Text 2, which I will assume you have installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you do not have WordPress already installed, then you can find full instructions
    at [http://codex.wordpress.org/Installing_WordPress](http://codex.wordpress.org/Installing_WordPress)
    on how to install it.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, assuming we have the requisite pieces of software installed, let's move
    on and take a look at preparing our theme for working with Less.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic child theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hold on, preparing our theme?
  prefs: []
  type: TYPE_NORMAL
- en: Yes, you read correctly—preparing our theme. While WordPress does come with
    three themes available for use out of the box, it is not good practice to modify
    the source files directly.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the source files means that your theme will break if an update is
    released for it (and yes, WordPress does release updates to its themes). We can
    get around this by creating a child theme, which sits in the same theme folder,
    but is set to inherit the base files of its parent theme.
  prefs: []
  type: TYPE_NORMAL
- en: What this means is that we can retain the original system files for the parent
    theme, but use new styles created in the child theme to override existing styles.
    We will make good use of this principle later in this chapter, when we start to
    write new Less code.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, let''s quickly run through creating our new child theme:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **wp-content** | **themes**; here, you will see a folder called
    `twentyfourteen`:![Creating a basic child theme](img/00092.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a copy of this folder, but rename it `twentyfourteen-child`. It is good
    practice to append `child` at the end of such a theme, to identify it in the theme
    folder list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the `twentyfourteen-child` folder, crack open a copy of `style.css`,
    then remove everything below the closing `*/`, and replace as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's all we need to do. If we browse to the **Central Administration** area
    of our WordPress installation, we will see the child theme present in the **Appearance**
    | **Themes** area. All that remains to do is to activate it in the usual manner.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that going forward, it is assumed all changes will be made in the child
    theme, unless directed otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Adding support for Less in WordPress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With WordPress installed and working, it's time to turn our attention to adding
    support for Less.
  prefs: []
  type: TYPE_NORMAL
- en: 'In older versions of WordPress, it was customary to add this directly to the
    `header.php` file. While it worked fine, it meant we couldn''t maintain a clear
    separation between HTML content and presentational markup. Thankfully, in more
    recent versions, the WordPress team moved to adding the style sheet by using a
    function stored in the `functions.php` file. Let''s take a look at how to achieve
    this now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a text editor of your choice, then browse to the `twentyfourteen` theme
    folder, and look for `functions.php`. Add the following code at the bottom of
    the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the changes. If we refresh the screen and then preview the results in a
    browser, we won't see any visual changes. However, if we preview the compiled
    source code in a DOM Inspector such as Firebug, we can clearly see the addition
    of Less:![Adding support for Less in WordPress](img/00093.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we have a version of WordPress working perfectly well with Less
    support—we can go ahead and create a Less file, called `style.less`, and drop
    this in as a replacement for `style.css`, right…?
  prefs: []
  type: TYPE_NORMAL
- en: Showing Less style sheets to specific users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Not so fast. We told WordPress how to call in Less, but not how to retrieve
    the right set of Less styles yet! To do this, we need to add another function
    into the `functions.php` file; this one will not only incorporate a replacement
    Less-based style sheet, but also show it only to the administrator and display
    a compiled version for normal use. Bear with me on this; all will become clear
    shortly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a copy of the `functions.php` file that we worked on in the previous exercise.
    This time, add the following at the bottom of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save a copy of the file, then refresh the browser window that currently displays
    WordPress. If we open up our DOM Inspector as we did before, we can now see the
    replacement style sheet in use:![Showing Less style sheets to specific users](img/00094.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we log out of WordPress and log in as another user, the compiled CSS version
    of the style sheet will be displayed instead.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Less support using a plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding in code manually works perfectly well, but after a while it gets tedious.
    Surely we can make things easier using a plugin, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Absolutely, we can add support for Less using a plugin; there are several ways
    to achieve this, but my favorite has to be the plugin created by Justin Kopepasah
    and available for download from WordPress Plugin Directory at [https://wordpress.org/plugins/less-theme-support/](https://wordpress.org/plugins/less-theme-support/).
    Let''s take a peek at how to use it; it''s really easy to install:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by navigating to [https://wordpress.org/plugins/less-theme-support/](https://wordpress.org/plugins/less-theme-support/)
    and then clicking on **Download Version 1.0.2**. When prompted to do so, save
    it into the `plugins` folder within our installation of WordPress.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to the **Plugins** area in WordPress' admin, then click on **Upload**
    and select **less-theme-support.1.0.2.zip**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Install Now**, then when prompted, click on **Activate Plugin**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, the plugin is now active and we need to tell our WordPress theme
    how to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: If you have not already done so from a previous exercise, rename the `style.css`
    file at the root of our theme to `style.less`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fire up your favorite text editor and open a copy of the `functions.php` file
    that is located at the root of our `theme` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look for the `twentyfourteen_setup()`function (on or around line 58) and add
    the following at the end of the function, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file. If we revert to our WordPress site and refresh the screen, we
    should see no visual change. The real change will show if we look at the code
    within DOM Inspector:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Less support using a plugin](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It is worth noting that Less Theme Support comes with a number of configuration
    options, which we can use to change how it works. This is perfect if we''re switching
    from using it in a development site, to a production one. The values that can
    be set are Boolean and the default is false:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Enable`: This enables Less and enqueues `less.min.js` on the frontend'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Develop`: This enables a development environment for Less and enqueues `less-develop.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Watch`: This enables the watch mode for Less and enqueues `less-watch.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Minify`: This enables usage of a minified style sheet (`style.min.css`) on
    the frontend for all other visitors (best generated using `lessc -x style.less
    > style.min.css`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If used with care, they can be very flexible; for instance, you might want
    to configure your theme to use Less dynamically when working in development, but
    not in production:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If we switch to production use, then we are likely to use the `minify` option
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As we've seen, it's an easy plugin to configure. If you're working with Less
    on a number of sites, it's often better to use a plugin to install Less so that
    we don't have to delve into source files and edit them. The key part of this exercise
    is the use of the `add_theme_support` keyword for WordPress, which allows a theme
    or plugin to register support for a certain feature within our theme.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are interested in learning more about `add_theme_support`, it is worth
    browsing the WordPress Codex page at [http://codex.wordpress.org/Function_Reference/add_theme_support](http://codex.wordpress.org/Function_Reference/add_theme_support).
  prefs: []
  type: TYPE_NORMAL
- en: This allows us to tell the theme to use Less. We can always do this manually
    (as we have seen), but it is preferable where possible to use plugins, unless
    circumstances dictate an alternative method is needed.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Less themes in WordPress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have support for Less in place, let's move on and take a look at
    the options available to use Less styles in our themes, either within our own
    creations, or as part of prebuilt themes available for sale or download via the
    Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Converting themes to use Less
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now have the basis for a Less style sheet, to which we can start to add our
    converted styles. Hold on, I hear you ask, "If we're converting a theme such as
    `TwentyFourteen`, where on earth do we start?"
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s a very good question. Within excess of 4200 lines in the current style
    sheet for this theme, it''s easy to feel bewildered! However, all will begin to
    come clear if we follow two simple principles:'
  prefs: []
  type: TYPE_NORMAL
- en: Less allows us to break down our style sheet into multiple files, which are
    compiled into one by Less. Make use of this; it will be a big help, as smaller
    files make for easier conversion!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't try to convert all of it in one go; do it bit by bit. Less is a superset
    of CSS, which means that it is effectively all CSS; Less will happily compile
    unchanged CSS styles, even in a `.less` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With these principles in mind, let''s make a start on converting our theme:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by opening a copy of the `style.css` file from the `TwentyFourteen` parent
    theme and look for section 4, which starts on or around line 831 to 926.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy this section to the `style.less` file in our child theme; paste it in
    below this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll start by converting the normal green color for the search box to use
    a variable, then use it to work out the light green color used when hovering over
    it. Add the following immediately below the `@import` statement in `style.less`,
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next change we''ll make will be to the `.site-title` style. We''ll convert
    it to Less'' nesting format, so remove these two styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the previous two styles with the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also have an opportunity to incorporate a mixin. This time, it will be in
    the form of a replacement for the `box-sizing` style used in the `.search-box-wrapper`
    class. Look for this class in the `style.less` file and modify as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In a separate file, add the following code and save it as `mixins.less` in
    the `less` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to import this into our Less file, so go ahead and add the following
    line, as indicated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The final step is to rename the `style.css` file in our child theme to `style.less`;
    although this is not yet fully converted, Less will still compile this as valid
    CSS.![Converting themes to use Less](img/00096.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, we can now save our work, then refresh the browser window, which
    displays our WordPress site. If all is well, you will not see any visual difference.
    The only difference you will see is when looking at the compiled code through
    a DOM Inspector, such as Firebug:'
  prefs: []
  type: TYPE_NORMAL
- en: The keen-eyed among you might have spotted something—why are we duplicating
    code, I hear you ask? There's a good reason for duplicating the code, at least
    temporarily—while this is something we wouldn't normally want do to do, the irony
    here is that we can use the unintended duplication to good effect, to help confirm
    if our new styles are correct.
  prefs: []
  type: TYPE_NORMAL
- en: 'We took a copy of `section 4` from the original parent theme''s CSS file and
    copied it into our child theme. By default, styles in a child theme are appended
    to the parent''s style sheet. In this instance, our theme has appended the duplicated
    style, as we would expect. Here comes the rub: we need to then rework the duplicated
    style to its Less equivalent (as was done here). We can then check against the
    original theme, indicated by the `style.css` at line 917, to see if our Less version
    is correct.'
  prefs: []
  type: TYPE_NORMAL
- en: If it is correct, we can then either remove it from the original theme, or we
    can remove the `@import` statement; this breaks the dependency on the parent theme
    and turns the child theme into a theme in its own right.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've covered the basics of converting a theme, let's take a moment
    to consider some useful tips that will help us with creating your own theme.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our own theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we've spent time converting existing CSS styles in our WordPress theme
    to use Less. While this works well, it will take time to complete, as WordPress
    core themes, such as `TwentyTwelve` or `TwentyFourteen`, run into several thousand
    lines!
  prefs: []
  type: TYPE_NORMAL
- en: A more sensible route is to create your own theme. Rather than writing one from
    scratch, it is preferable to create it as a child theme, so it overrides existing
    styles within the parent theme.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although, we've used an example here, the principles detailed can be used in
    any instance where you need to create a new theme.
  prefs: []
  type: TYPE_NORMAL
- en: '"Why use a child theme", I hear you ask? There are several good reasons to
    do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Any changes you make to a parent theme will likely break if the WordPress team
    issues an update.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It saves you having to redefine a whole bunch of styles; you can concentrate
    instead on making the critical changes. When ready, you can incorporate the parent
    theme's styles into your own and convert your child theme into one that can be
    used in its own right.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s now take a look at creating a theme using Less. To get the full benefit
    from this exercise, we''ll need to ensure that a few things are in place:'
  prefs: []
  type: TYPE_NORMAL
- en: Your WordPress installation has a copy of `TwentyTwelve` installed and activated.
    `TwentyTwelve` has a simpler CSS style sheet than the current `TwentyFourteen`
    incarnation; it will make the process easier to grasp and hopefully encourage
    you to move onto working with the newer theme!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A copy of the `TwentyTwelve` theme has been saved and reconfigured as a child
    theme; if you're unsure on how, then refer to the *Creating a basic child theme*
    section of this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A copy of Crunch! has been installed and configured for use on your system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A copy of Firefox is installed. This theme was developed using Firefox to keep
    things simple for the purposes of this exercise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ll begin with creating the basic style sheet that is key to the whole compilation
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by renaming the existing `style.css` file within your child theme folder.
    We'll replace it with a compiled version at the end of the exercise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the accompanying download, extract and save a copy of the **less** folder
    within the `learningless` folder, to the root of your child theme folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your text editor and then add the following to it, saving it as `style.less`
    in the root of your child theme folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we need to compile `style.less` in order to produce our WordPress style
    sheet. For now, we'll use Crunch! to compile the file, so go ahead and open `style.less`
    within your installation of Crunch!.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Crunch File**, then when prompted, enter `style.css` as the filename
    to save the compiled results. It will look similar to the following screenshot:![Creating
    our own theme](img/00097.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the compiled `style.css` file into the root of your child theme folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fire up your copy of Firefox and browse to your WordPress installation. If all
    is well, you should see something akin to this screenshot:![Creating our own theme](img/00098.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Okay, it won't win any style awards! Nevertheless, it helps to illustrate some
    key points; let's take a breather and look at these in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are completed version of the `style.less` and `style.css` files within
    the `learningless` folder; navigate to the less folder, then rename `style-finished.css`
    to style and copy to the root of your child folder. If you are struggling with
    the less code, then `style-finished.less` contains a completed copy of the code
    for this theme.
  prefs: []
  type: TYPE_NORMAL
- en: The crux of this whole process is the `style.less` file. Notice how we created
    a number of `@import` statements within? This is an essential part of developing
    themes for WordPress when working with Less; Less allows us to split what could
    be a lengthy style sheet into smaller, more manageable files.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you''re probably asking, "How do I know how many files to split
    my code into?" It''s a good question and the short answer is: there is no single
    right answer! Let me explain.'
  prefs: []
  type: TYPE_NORMAL
- en: It all depends on how large your style sheet is. A good pointer is to consider
    what elements you have within your style sheet and group them accordingly. You
    can then use one or more Less file; Less will happily compile them into one single
    style sheet at the end. In our example, we have a number of suitable groups such
    as posts, sidebar, navigation and the like; we've set our main style sheet to
    import a single Less file for each of these groups.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout all of the Less files, we've made full use of Less' nesting capability;
    this is one key skill to master when working with WordPress themes built using
    Less. Nesting is very much your friend when developing WordPress themes; we can
    group together all of the relevant styles, which makes it easier to read and manage.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on; anyone notice the presence of two key files, namely `mixins.less`
    and `variables.less`? These are perfect examples of Less files to be created as
    part of developing themes for WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can store all of our variables within one file and reference them as required.
    A perfect example is to first create variables for each of our colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then reference the colors within secondary variables. If there''s any
    need to change, then this is the only file that needs to be updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If we open a copy of `posts.less`, we can see the variables in use as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the same way, we can store all of our mixins in one file, namely `mixins.less`;
    should any of these change, there is only one file that needs updating, not many!
  prefs: []
  type: TYPE_NORMAL
- en: Taking construction further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this stage, you're probably thinking, "Great, I've got a theme I can use…"
    Right? Well, yes, and not quite. (Bet you weren't expecting that…)
  prefs: []
  type: TYPE_NORMAL
- en: Hands up, if you read through each Less file from our new theme? Good. Now,
    hands up if you really read through the files carefully…ah! not so many of you…
  prefs: []
  type: TYPE_NORMAL
- en: 'This was done with good reason—the code works perfectly well; as a start point,
    it will serve the purpose. However, there are some instances where it can be improved;
    after all, it was never intended to be a Picasso! I thought I should leave you
    with this little challenge: can you find where it can be improved? *One clue…there
    are not enough variables, me thinks…up for the challenge?*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, here''s a more involved challenge: remember how I said we''ll use Crunch!
    to compile our code? Well, we can do better than this. We''ve used Grunt elsewhere
    in this book, so here''s another use: we can use it to automate our compilation.'
  prefs: []
  type: TYPE_NORMAL
- en: The key to this is compiling only the `style.less` file. While you can try compiling
    the others, they will no doubt throw errors, as most will not see the variables'
    file that is a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: The next part is to configure `gruntfile.js`, which will tell Grunt to only
    compile this file. We can then run Grunt watch in the background to allow it to
    compile automatically. We will cover this whole process in more detail, later
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you get stuck, have a look on Google, as there are several examples available;
    [http://jonathanmh.com/make-grunt-watch-for-lesscss-changes/](http://jonathanmh.com/make-grunt-watch-for-lesscss-changes/)
    contains a useful example by one is the useful blog post by Jonathan Hethey. It
    contains a number of additional steps, but should be enough to give you an idea
    of how to use Grunt and watch when compiling Less theme files.
  prefs: []
  type: TYPE_NORMAL
- en: Enough of developing; it's time to change tack and have a breather. Let's delve
    into using prebuilt Less themes with WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: Using a prebuilt Less theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''re not quite up to building a theme from scratch, then you can always
    use a prebuilt one. There are dozens available online, either for free or at a
    low cost. It''s worth having a look on Google for some examples and then trying
    them out and deciding whether they match your requirements. Here are some examples
    to get you started:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Less**: This is a minimalistic theme from Jared Erickson, available at [http://jarederickson.com/less-a-free-super-minimal-wordpress-theme/](http://jarederickson.com/less-a-free-super-minimal-wordpress-theme/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Starter**: This theme by Roots contains support for Less and is available
    at http://roots.io/starter-theme/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Whiteboard**: This is a theme that uses Less 4 Framework, which can be downloaded
    from [http://whiteboardframework.com/whiteboard-documentation/](http://whiteboardframework.com/whiteboard-documentation/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spare**: This is a paid-for theme, available from Theme Forest, at [http://themeforest.net/item/spare-ultimate-multipurpose-less-theme/7520253](http://themeforest.net/item/spare-ultimate-multipurpose-less-theme/7520253)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are lots of themes available for use and it is worth spending some time
    on Google to see what is available and trying them out. Hopefully, you will find
    something that comes close to, or matches your requirements. With luck, you might
    be able to tweak it a little with skills you've hopefully picked up from reading
    this book!
  prefs: []
  type: TYPE_NORMAL
- en: Automating WordPress development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you spend any time developing themes, you will no doubt know that it is a
    manual process, which takes time. Themes often require careful tweaking and retesting;
    it can get particularly tedious when recompiling Less files!
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, there are a number of solutions available to relieve some of the
    tedium experienced when developing WordPress themes; the most popular option is
    to use a package we first met back in [Chapter 2](part0025_split_000.html#page
    "Chapter 2. Building a Less Development Toolkit"), *Building a Less Development
    Toolkit*. It's time to revisit using Grunt!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the more experienced, it is worth looking online for `lessphp`, which is
    a port of Less to PHP. There is code available that allows direct compilation
    within WordPress, in much the same way as we will cover in this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Using Grunt in WordPress development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember back in [Chapter 2](part0025_split_000.html#page "Chapter 2. Building
    a Less Development Toolkit"), *Building a Less Development Toolkit*, when we met
    Grunt for the first time?
  prefs: []
  type: TYPE_NORMAL
- en: Well, we're going to meet it again, as it is a perfect tool to help with compiling
    Less files as part of WordPress development. It makes perfect sense to use it
    here, as we are compiling style sheets after all! Let's take a look at how we
    can set up Grunt for use with compiling WordPress style sheets automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the purposes of this exercise, I will assume you are using Grunt as installed
    in the *Watching for changes to Less files* section of [Chapter 2](part0025_split_000.html#page
    "Chapter 2. Building a Less Development Toolkit"), *Building a Less Development
    Toolkit*. If you've not yet installed it, now's a good time to revert to that
    chapter and do it.
  prefs: []
  type: TYPE_NORMAL
- en: We'll work with the standard `TwentyFourteen` theme that comes with WordPress
    3.8.x and upwards; the process will work perfectly well with other themes too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening your favorite text editor, then add the following, and save
    it as `package.json` within the root folder of the `TwentyFourteen` theme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to create a Grunt watch file, which will perform a number of
    actions, when Grunt''s watch facility determines a change has been made. Add the
    following skeleton to a new file, saving it as `gruntfile.js`, within the root
    of your theme folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The basic Grunt file contains references to the Node plugins we''re going to
    use—we now need to add the configuration options for each plugin. Let''s begin
    by adding them for `grunt-contrib-concat` to concatenate any JavaScript files
    into one, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next comes the options for `UglifyJS`. Go ahead and add the following code
    immediately below the concat block from the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our next plugin we need to add in is the one of most interest—Less. Add this
    code immediately below the closing `}` of the previous section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Last, but by no means least, is `watch`. This part watches out for any changes
    to the code and invokes the relevant command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file, and then in a command prompt, change to the location of your
    theme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now need to configure Grunt. Although we already have the basic application
    installed from [Chapter 2](part0025_split_000.html#page "Chapter 2. Building a
    Less Development Toolkit"), *Building a Less Development Toolkit*, we still need
    to tell it what to do when changes to Less files are made. In the command prompt,
    run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last step is to activate the `watch` facility. Once Grunt has completed
    its changes from the previous step, go ahead and run this command at the prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember the child theme we created earlier in this chapter? Go back to your
    child theme folder, then open up `style.less`, and make a single change to a character
    within the style sheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your work as you normally do. If all is well, Grunt watch will have picked
    up on the change and recompiled the style sheet file:![Using Grunt in WordPress
    development](img/00099.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can confirm this by checking back in our `theme` folder, where the `style.less`
    and `style.css` files have the same date and time stamps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Grunt in WordPress development](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Phew! That was a fair bit of code; let's take a moment to recap what we've achieved
    in this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: If you've spent any time using Grunt as a task manager, then using the `package.json`
    and `gruntfile` files will be familiar to you; if not, where have you been? Grunt
    is fast becoming a de facto standard for automating thankless tasks such as compiling
    Less files; it is well worth getting to know Grunt!
  prefs: []
  type: TYPE_NORMAL
- en: In our exercise, we've configured Grunt to use a number of Node packages such
    as Less, watch, UglifyJS, and concat. In a nutshell, the Grunt and JSON package
    files tell Grunt how to compress and concatenate JavaScript or Less files (as
    set in the configuration); watch is set to run the tasks as soon as any changes
    are made to our source files.
  prefs: []
  type: TYPE_NORMAL
- en: Provided Grunt watch has kicked in and correctly recompiled our file, we're
    then free to continue making more changes. We can either use the Less file to
    dynamically compile our style sheet, as we saw earlier in the *Adding support
    for Less in WordPress* section, or we can simply use the compiled file as a normal
    style sheet in our theme.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a completed version of the `gruntfile.js` file on GitHub, at [https://gist.github.com/alibby251/579e3c0308e3cd732b39](https://gist.github.com/alibby251/579e3c0308e3cd732b39).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Phew! We've covered a lot in this chapter! Let's take a moment to consider what
    we learned.
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off our foray into using Less with WordPress with a quick recap of
    the structure of each WordPress theme, where we examined the basic files you will
    see within the TwentyFourteen core theme and covered the basics of what you need
    for each exercise in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We then started our development work with a look at creating a child theme and
    the reasons for doing so; we then learned how to add Less support to your function
    file within the theme.
  prefs: []
  type: TYPE_NORMAL
- en: We took a quick sidestep to see how we can tailor the import for specific users;
    this will be useful if you are developing as an admin locally, while leaving others
    to use the compiled CSS style sheet file.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved on and took a look at how to import Less using a plugin. We saw
    how in most cases, this would be preferred, but that in a plugin-heavy site, it
    might be wiser to simply import it using the `functions.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: We followed this with a detailed look at some tips on converting existing style
    sheets to use their Less equivalents. We covered the need to keep the process
    iterative due to the sheer size of some style sheets. We then took a brief look
    at creating your own theme using Less; we saw how you can use any prebuilt theme
    within Less if you are not feeling quite ready for developing your own!
  prefs: []
  type: TYPE_NORMAL
- en: We then finally rounded off our journey through Less and WordPress by taking
    a detailed look at how to automate the whole compilation process using Node.js
    and Grunt. While this initially might seem daunting, it will reward your efforts
    in spades with the time it saves in compiling Less files!
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s at this point we say goodbye to using WordPress. In our next chapter,
    we''ll introduce another well-known product that uses Less: Twitter Bootstrap.
    Now who hasn''t heard of Twitter, I wonder?'
  prefs: []
  type: TYPE_NORMAL
