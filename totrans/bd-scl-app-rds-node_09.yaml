- en: '[CHAPTER 10](toc.xhtml#c10)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第10章](toc.xhtml#c10)'
- en: '[Building and Deploying Application](toc.xhtml#c10)'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[构建和部署应用程序](toc.xhtml#c10)'
- en: '[Introduction](toc.xhtml#s244a)'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[简介](toc.xhtml#s244a)'
- en: After completing the development phase, it becomes essential to enable global
    access to the application. The final and crucial step for any application is to
    build and deploy it to a centralized location, ensuring widespread availability
    and usability to the end users. When deploying a Node.js application, there are
    various servers and platforms available to host and run your application. The
    choice depends on factors such as scalability, ease of use, performance, and specific
    requirements of the project.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成开发阶段后，使应用程序能够实现全局访问变得至关重要。任何应用程序的最终和关键步骤是将它构建并部署到一个集中位置，确保最终用户能够广泛地获得和使用。当部署Node.js应用程序时，有各种服务器和平台可供托管和运行您的应用程序。选择取决于因素，如可扩展性、易用性、性能和项目的特定要求。
- en: In this chapter, we will delve into building and securely deploying the application,
    employing the most widely used deployment processes in demand.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨构建和安全的部署应用程序，采用最广泛使用的部署流程。
- en: '[Structure](toc.xhtml#s245a)'
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[结构](toc.xhtml#s245a)'
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Code Obfuscation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码混淆
- en: Building the Application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建应用程序
- en: Deploying the Application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署应用程序
- en: '[Code Obfuscation](toc.xhtml#s246a)'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[代码混淆](toc.xhtml#s246a)'
- en: Code obfuscation is a technique used to transform source code into a form that
    is more difficult to understand or reverse engineer, while maintaining its original
    functionality. The purpose of code obfuscation is not to enhance the security
    of the code significantly but rather make it more challenging for someone to comprehend
    or decompile the code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 代码混淆是一种将源代码转换为更难以理解或逆向工程的形式的技术，同时保持其原始功能。代码混淆的目的不是显著提高代码的安全性，而是使代码更难以理解或反编译。
- en: '[Common Techniques](toc.xhtml#s247a)'
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[常见技术](toc.xhtml#s247a)'
- en: 'There are some common techniques used in code obfuscation as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 代码混淆中常用的一些技术如下：
- en: '**Renaming Variables and Functions:**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重命名变量和函数：**'
- en: Obfuscators change the names of variables, functions, and classes to meaningless
    or random strings, making it harder to understand the purpose of each element.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 混淆器将变量、函数和类的名称更改为无意义或随机的字符串，使得理解每个元素的目的变得更加困难。
- en: '**Control Flow Obfuscation:**'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制流混淆：**'
- en: This involves restructuring the control flow of the program, such as using `**goto**`
    statements or introducing redundant code, to make it less predictable and harder
    to follow.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这涉及到重构程序的流程控制，例如使用`**goto**`语句或引入冗余代码，使其更不可预测且难以跟踪。
- en: '**String Encryption:**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符串加密：**'
- en: Literal strings in the code are encrypted or encoded, and then decrypted or
    decoded at runtime. This makes it more challenging for someone to understand the
    string values by simply inspecting the code.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代码中的文本字符串被加密或编码，然后在运行时解密或解码。这使得仅通过检查代码来理解字符串值变得更加困难。
- en: '**Code Splitting:**'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码拆分：**'
- en: Breaking down functions into smaller pieces or splitting them across multiple
    files, making it harder to comprehend the entire flow of the program.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将函数分解成更小的部分或将它们拆分到多个文件中，使得理解整个程序的流程变得更加困难。
- en: '**Dummy Code Insertion:**'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟代码插入：**'
- en: Introducing irrelevant or redundant code snippets that do not affect the program’s
    functionality but add complexity for a human reader trying to understand the code.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入无关或冗余的代码片段，这些代码片段不影响程序的功能，但会增加试图理解代码的人类读者的复杂性。
- en: '**Constant Value Obfuscation:**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常量值混淆：**'
- en: Changing the representation of numerical constants or using mathematical operations
    to obscure their actual values.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过改变数值常量的表示或使用数学运算来掩盖其真实值。
- en: '**Anti-Debugging Techniques:**'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反调试技术：**'
- en: Embedding code that detects debugging attempts and alters the behavior of the
    program, making it more difficult for reverse engineers to analyze the code in
    a debugger.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 嵌入检测调试尝试的代码并改变程序行为的代码，使得逆向工程师在调试器中分析代码变得更加困难。
- en: '**Code Compression:**'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码压缩：**'
- en: Reducing the overall size of the code by compressing it, making it harder to
    read and analyze.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过压缩代码来减少整体大小，使其更难以阅读和分析。
- en: Let us delve into the practical aspects of code obfuscation and explore its
    details hands-on.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解代码混淆的实际方面，并亲手探索其细节。
- en: Obfuscating an entire TypeScript project involves applying code obfuscation
    to all TypeScript files, including their dependencies. The process can be a bit
    involved and requires careful consideration of the build process, dependencies,
    and potential impact on the project.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对整个TypeScript项目进行混淆涉及将代码混淆应用于所有TypeScript文件，包括它们的依赖项。这个过程可能有些复杂，需要仔细考虑构建过程、依赖项以及可能对项目产生的影响。
- en: There are many ways in which a code can be obfuscated. The most popular tools
    among all are `**javascript-obfuscator**`, `**UglifyJs**`, `**webpack**`, and
    others. We will be using `**javascript-obfuscator**` to obfuscate the code.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可以通过多种方式进行混淆。所有工具中最受欢迎的是 `**javascript-obfuscator**`、`**UglifyJs**`、`**webpack**`
    以及其他工具。我们将使用 `**javascript-obfuscator**` 来混淆代码。
- en: '[Installing Required Dependencies](toc.xhtml#s248a)'
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[安装所需依赖](toc.xhtml#s248a)'
- en: 'Install the JavaScript obfuscation library, `**javascript-obfuscator**`, to
    integrate it into the project. Open the terminal from root directory of project
    and paste following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 安装JavaScript混淆库 `**javascript-obfuscator**` 以将其集成到项目中。从项目的根目录打开终端并粘贴以下命令：
- en: '`$ npm install  javascript-obfuscator  --save-dev`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ npm install  javascript-obfuscator  --save-dev`'
- en: '[Creating an Obfuscation Script](toc.xhtml#s249a)'
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[创建混淆脚本](toc.xhtml#s249a)'
- en: Create a tool directory in the root folder and add script `**obfuscate.js**`
    file with following code that will obfuscate each generated JavaScript file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在根目录下创建一个工具目录，并添加名为 `**obfuscate.js**` 的脚本文件，其中包含以下代码，该代码将混淆每个生成的JavaScript文件。
- en: '`// obfuscate.js`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`// obfuscate.js`'
- en: '`/* eslint-disable no-undef */`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`/* eslint-disable no-undef */`'
- en: '`/* eslint-disable @typescript-eslint/no-var-requires */`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`/* eslint-disable @typescript-eslint/no-var-requires */`'
- en: '`const JavaScriptObfuscator = require(''javascript-obfuscator'');`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`const JavaScriptObfuscator = require(''javascript-obfuscator'');`'
- en: '`const fs = require(''fs'');`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`const fs = require(''fs'');`'
- en: '`const path = require(''path'');`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`const path = require(''path'');`'
- en: '`const jsonObfuscatorModule = require(''json-obfuscator'');`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`const jsonObfuscatorModule = require(''json-obfuscator'');`'
- en: '`const **sourceDirectory** = ''dist/src''; // Update with your actual output
    directory`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`const **sourceDirectory** = ''dist/src''; // 使用您的实际输出目录更新`'
- en: '`const **obfuscatedDirectory** = ''build''; // Output directory for obfuscated
    code`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`const **obfuscatedDirectory** = ''build''; // 混淆代码的输出目录`'
- en: '`const obfuscateFile = (filePath) => {`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`const obfuscateFile = (filePath) => {`'
- en: '`const code = fs.readFileSync(filePath, ''utf8'');`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`const code = fs.readFileSync(filePath, ''utf8'');`'
- en: '`const obfuscatedCode = JavaScriptObfuscator.obfuscate(code, {`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`const obfuscatedCode = JavaScriptObfuscator.obfuscate(code, {`'
- en: '`compact: true,`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`compact: true,`'
- en: '`controlFlowFlattening: true`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`controlFlowFlattening: true`'
- en: '`// … other obfuscation options`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`// …其他混淆选项`'
- en: '`});`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`const obfuscatedFilePath = path.join(obfuscatedDirectory, path.relative(sourceDirectory,
    filePath));`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`const obfuscatedFilePath = path.join(obfuscatedDirectory, path.relative(sourceDirectory,
    filePath));`'
- en: '`fs.mkdirSync(path.dirname(obfuscatedFilePath), { recursive: true });`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`fs.mkdirSync(path.dirname(obfuscatedFilePath), { recursive: true });`'
- en: '`fs.writeFileSync(obfuscatedFilePath, obfuscatedCode.getObfuscatedCode(), ''utf8'');`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`fs.writeFileSync(obfuscatedFilePath, obfuscatedCode.getObfuscatedCode(), ''utf8'');`'
- en: '`};`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`};`'
- en: '`const processDirectory = (directoryPath) => {`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`const processDirectory = (directoryPath) => {`'
- en: '`const files = fs.readdirSync(directoryPath);`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`const files = fs.readdirSync(directoryPath);`'
- en: '`files.forEach((file) => {`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`files.forEach((file) => {`'
- en: '`const filePath = path.join(directoryPath, file);`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`const filePath = path.join(directoryPath, file);`'
- en: '`if (fs.statSync(filePath).isDirectory()) {`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`if (fs.statSync(filePath).isDirectory()) {`'
- en: '`processDirectory(filePath);`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`processDirectory(filePath);`'
- en: '`} else if (path.extname(filePath) === ''.js'') {`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`} else if (path.extname(filePath) === ''.js'') {`'
- en: '`obfuscateFile(filePath);`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`obfuscateFile(filePath);`'
- en: '`}`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`});`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`};`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`};`'
- en: '`processDirectory(sourceDirectory);`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`processDirectory(sourceDirectory);`'
- en: Here,
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Here,
- en: '`**sourceDirectory**` specifies the directory containing the original JavaScript
    files. You should update this with the actual output directory of JavaScript files
    compiled from Typescript files.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**sourceDirectory**` 指定包含原始JavaScript文件的目录。您应该使用从TypeScript文件编译生成的JavaScript文件的实际输出目录来更新它。'
- en: '`**obfuscatedDirectory**` specifies the directory where obfuscated files will
    be saved.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**obfuscatedDirectory**` 指定混淆文件将被保存的目录。'
- en: '`**obfuscateFile(filePath)**` reads the content of a JavaScript file, obfuscates
    it using `**javascript-obfuscator**`, and writes the obfuscated content to the
    specified location.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**obfuscateFile(filePath)**` 读取JavaScript文件的内容，使用 `**javascript-obfuscator**`
    进行混淆，并将混淆后的内容写入指定位置。'
- en: '`**processDirectory(directoryPath)**` recursively processes files in a directory,
    invoking obfuscateFile for each JavaScript file found.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**processDirectory(directoryPath)**` 递归处理目录中的文件，对每个找到的JavaScript文件调用 `obfuscateFile`。'
- en: So when this script will run, a new build directory will be created that contains
    JavaScript obfuscated code.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当此脚本运行时，将创建一个新的构建目录，其中包含混淆后的 JavaScript 代码。
- en: This provides a summary of the obfuscation process, which will be applied in
    the subsequent build and execution of the code.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了混淆过程的摘要，该过程将在后续的代码构建和执行中应用。
- en: '[Downside of Code Obfuscation](toc.xhtml#s250a)'
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[代码混淆的缺点](toc.xhtml#s250a)'
- en: Code obfuscation makes the source code harder to read and understand. However,
    there are some downsides of it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 代码混淆使得源代码更难阅读和理解。然而，它也有一些缺点。
- en: Obfuscation can add extra layers of complexity to the code which can impact
    the performance at run time. Since the code is obfuscated, it is harder to read
    and while debugging it becomes challenging to trace the problem source. This adds
    extra time for debugging and troubleshooting.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 代码混淆可以为代码添加额外的复杂层，这可能会影响运行时的性能。由于代码被混淆，它更难阅读，并且在调试时追踪问题源变得具有挑战性。这增加了调试和故障排除的时间。
- en: For future versions of the source code, obfuscation is done again every time
    new code is released. Obfuscation process adds additional characters and structures
    to the code which leads to larger file sizes.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于源代码的未来版本，每次发布新代码时都会再次进行混淆。混淆过程向代码中添加额外的字符和结构，导致文件大小增加。
- en: One last point to discuss here is security. Obfuscation may give a false sense
    of code security. It is true that the code afterwards is harder to read but it
    can be reverse-engineered. Obfuscation does not fix any security vulnerabilities
    in the code and if someone reverse-engineers the obfuscated code, the vulnerabilities
    can be exploited.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要讨论的一点是安全性。混淆可能会给人一种代码安全的错觉。确实，之后的代码更难阅读，但它可以被逆向工程。混淆并不能修复代码中的任何安全漏洞，如果有人逆向工程了混淆后的代码，这些漏洞可能会被利用。
- en: While skilled hackers may reverse-engineer the code, obfuscation acts as a deterrent
    to casual or less-skilled hackers. Even for skilled hackers it requires additional
    efforts to reverse-engineer.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然熟练的黑客可能会逆向工程代码，但混淆对普通或不太熟练的黑客起到了威慑作用。即使是熟练的黑客，逆向工程也需要额外的努力。
- en: '[Building the Application](toc.xhtml#s251a)'
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[构建应用程序](toc.xhtml#s251a)'
- en: Building an application refers to the process of transforming the source code
    of an application into a format or structure that can be executed or run by a
    computer. The build process involves compilation and transpilation. TypeScript
    compilation is the process of translating TypeScript source code into JavaScript
    code making it compatible with various JavaScript runtime environments.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 构建应用程序是指将应用程序的源代码转换成计算机可以执行或运行的格式或结构的过程。构建过程包括编译和转译。TypeScript 编译是将 TypeScript
    源代码转换为 JavaScript 代码的过程，使其与各种 JavaScript 运行时环境兼容。
- en: 'Open the terminal from the root directory and execute the following command
    that compiles the code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从根目录打开终端并执行以下命令以编译代码：
- en: '`$ tsc`'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ tsc`'
- en: This command compiles all TypeScript files in the application based on the configuration
    provided in `**tsconfig.json**`. It includes compiler options with ``**rootDir**``
    set to ``**src**`` that specifying the root directory of input files and ``**outDir**``
    set to ``**dist**`` that specifying the output directory for compiled files. After
    successful compilation, TypeScript generates equivalent JavaScript files in the
    specified output directory `**dist**`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令根据 `**tsconfig.json**` 中提供的配置编译应用程序中的所有 TypeScript 文件。它包括具有 `**rootDir**`
    设置为 `**src**` 的编译器选项，指定输入文件的根目录，以及 `**outDir**` 设置为 `**dist**`，指定编译文件的输出目录。编译成功后，TypeScript
    将在指定的输出目录 `**dist**` 中生成等效的 JavaScript 文件。
- en: Now we update `**package.json**` as follows, add scripts for `**build**`, `**start**`
    and `**test**` so it will be easy to run with npm.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们更新 `**package.json**`，如下所示，为 `**build**`、`**start**` 和 `**test**` 添加脚本，以便使用
    npm 运行它们。
- en: '`"scripts": {`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`"scripts": {`'
- en: '`"test": "mocha --require ts-node/register ''src/**/*.spec.ts''",`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`"test": "mocha --require ts-node/register ''src/**/*.spec.ts''",`'
- en: '`"start": "node dist/src/main.js",`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`"start": "node dist/src/main.js",`'
- en: '`"build": "tsc"`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`"build": "tsc"`'
- en: '`}`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: After defined scripts in `**package.json**` execute it with npm run in the terminal.
    For example, `**npm run build**`, `**npm run start**` or `**npm run test**`. Here,
    we run application with `**js**` after compilation but while developing we can
    use `**tsc –-watch**`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `**package.json**` 中定义脚本后，在终端中使用 npm run 执行它。例如，`**npm run build**`，`**npm
    run start**` 或 `**npm run test**`。在这里，我们在编译后使用 `**js**` 运行应用程序，但在开发时可以使用 `**tsc
    –-watch**`。
- en: In the advanced phase of application building, we will develop a script that
    generates a compressed binary file for the application. This file will encapsulate
    the JavaScript source code with obfuscation and handle the installation of necessary
    Node packages.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序构建的高级阶段，我们将开发一个脚本来生成应用程序的压缩二进制文件。此文件将封装JavaScript源代码并进行必要的Node包安装。
- en: Create `**mkpackage.sh**` file with following code in root directory of application.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序的根目录中创建包含以下代码的 ``**mkpackage.sh**`` 文件。
- en: '`npm install`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install`'
- en: '`./node_modules/.bin/tsc`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`./node_modules/.bin/tsc`'
- en: '`rm -rf binaries/*`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`rm -rf binaries/*`'
- en: '`mkdir -p build`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`mkdir -p build`'
- en: '`mkdir -p binaries`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`mkdir -p binaries`'
- en: '`rm -rf build/*`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`rm -rf build/*`'
- en: '`node tools/obfuscate.js`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`node tools/obfuscate.js`'
- en: '`cd build`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`cd build`'
- en: '`echo  "Getting git version info.."`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo  "Getting git version info.."`'
- en: '`export VER=1.0`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`export VER=1.0`'
- en: '`echo exports.version=\"1.0\" > ver`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo exports.version=\"1.0\" > ver`'
- en: '`echo exports.version_long=\"$VER\" >> ver`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo exports.version_long=\"$VER\" >> ver`'
- en: '`echo "Copying things.."`'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo "Copying things.."`'
- en: '`cp ../package.json .`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`cp ../package.json .`'
- en: '`echo  "Doing compression .. "`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo  "Doing compression .. "`'
- en: '`tar czf pms_be_$VER.tgz *.js  package.json components routes tests utils`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`tar czf pms_be_$VER.tgz *.js  package.json components routes tests utils`'
- en: '`mv pms_be_$VER.tgz ../binaries/.`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`mv pms_be_$VER.tgz ../binaries/.`'
- en: '`cd ..`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`cd ..`'
- en: '`echo "Created file pms_be_$VER.tgz"`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo "Created file pms_be_$VER.tgz"`'
- en: 'This script has a set of commands for building and packaging a Node.js application.
    Let us break down each part:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本包含一组用于构建和打包Node.js应用程序的命令。让我们逐一分析每个部分：
- en: '**``**`npm install`:**``**'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**`npm install`:**``**'
- en: Install the Node.js dependencies specified in the ``**package.json**`` file.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装 ``**package.json**`` 文件中指定的 Node.js 依赖。
- en: '**``**`./node_modules/.bin/tsc`:**``**'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**`./node_modules/.bin/tsc`:**``**'
- en: Invokes the TypeScript compiler (``**tsc**``) located in the ``**node_modules**``
    directory to transpile TypeScript code into JavaScript. The ``**./node_modules/.bin/**``
    prefix is used to run the locally installed TypeScript compiler.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用位于 ``**node_modules**`` 目录中的TypeScript编译器（``**tsc**``），将TypeScript代码转换为JavaScript。使用
    ``**./node_modules/.bin/**`` 前缀来运行本地安装的TypeScript编译器。
- en: '**``**`rm -rf binaries/*`:**``**'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**`rm -rf binaries/*`:**``**'
- en: Removes all files and subdirectories from the ``**binaries**`` directory.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 ``**binaries**`` 目录中删除所有文件和子目录。
- en: '**``**`mkdir -p build` and `mkdir -p binaries`:**``**'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**`mkdir -p build` and `mkdir -p binaries`:**``**'
- en: Creates the ``**build**`` and ``**binaries**`` directories if they do not exist.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果不存在，则创建 ``**build**`` 和 ``**binaries**`` 目录。
- en: '**``**`rm -rf build/*`:**``**'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**`rm -rf build/*`:**``**'
- en: Clears all files and subdirectories from the ``**build**`` directory.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 清除 ``**build**`` 目录中的所有文件和子目录。
- en: '**``**`node tools/obfuscate.js`:**``**'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**`node tools/obfuscate.js`:**``**'
- en: Executes a Node.js script located at ``**tools/obfuscate.js**``. This script
    likely performs obfuscation of JavaScript code. The details of this script are
    not provided, but it seems to be a custom script for obfuscating the application’s
    JavaScript source code.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行位于 ``**tools/obfuscate.js**`` 的Node.js脚本。此脚本可能执行JavaScript代码的混淆。脚本的具体细节未提供，但似乎是一个用于混淆应用程序JavaScript源代码的自定义脚本。
- en: '**``**`cd build`:**``**'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**`cd build`:**``**'
- en: Changes the current working directory to the ``**build**`` directory.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将当前工作目录更改为 ``**build**`` 目录。
- en: '**``**`echo "Getting git version info.."`:**``**'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**`echo "Getting git version info.."`:**``**'
- en: Outputs a message indicating that the script is retrieving Git version information.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出一条消息，表明脚本正在检索Git版本信息。
- en: '**``**`export VER=1.0`:**``**'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**`export VER=1.0`:**``**'
- en: Sets an environment variable named ``**VER**`` to the value ``**1.0**``.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置一个名为 ``**VER**`` 的环境变量，其值为 ``**1.0**``。
- en: '**``**`echo exports.version=\"1.0\" > ver` and `echo exports.version_long=\"$VER\"
    >> ver`:**``**'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**`echo exports.version=\"1.0\" > ver` and `echo exports.version_long=\"$VER\"
    >> ver`:**``**'
- en: Creates a file named ``**ver**`` with version information. It exports the application
    version as well as a long version string.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个名为 ``**ver**`` 的文件，其中包含版本信息。它导出应用程序版本以及一个长版本字符串。
- en: '**``**`echo "Copying things.."`:**``**'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**`echo "Copying things.."`:**``**'
- en: Outputs a message indicating that files are being copied.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出一条消息，表明正在复制文件。
- en: '**``**`cp ../package.json .`:**``**'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**`cp ../package.json .`:**``**'
- en: Copies the ``**package.json**`` file from the parent directory (``**..**``)
    to the current (``**build**``) directory.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从父目录（``**..**``）将 ``**package.json**`` 文件复制到当前（``**build**``）目录。
- en: '**``**`echo "Doing compression .. "`:**``**'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**`echo "Doing compression .. "`:**``**'
- en: Outputs a message indicating that compression is in progress.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出一条消息，表明正在压缩。
- en: '**``**tar czf pms_be_$VER.tgz *.js package.json components routes tests utils**``:**'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**tar czf pms_be_$VER.tgz *.js package.json components routes tests utils**``:**'
- en: Creates a compressed tarball (``**pms_be_$VER.tgz**``) containing specific files
    and directories (JavaScript files, ``**package.json**``, ``**components**``, ``**routes**``,
    ``**tests**``, ``**utils**``).
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个包含特定文件和目录（JavaScript 文件、`**package.json**`、`**components**`、`**routes**`、`**tests**`、`**utils**`）的压缩
    tarball (```**pms_be_$VER.tgz**``)。
- en: '**``**mv pms_be_$VER.tgz ../binaries/.**``:**'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**mv pms_be_$VER.tgz ../binaries/.**``**:**'
- en: Moves the created tarball to the ``**binaries**`` directory.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将创建的 tarball 移动到 `**binaries**` 目录。
- en: '**``**cd ..**``:**'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**cd ..**``**:**'
- en: Changes the working directory back to the parent directory.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将工作目录返回到父目录。
- en: '**``**echo "Created file pms_be_$VER.tgz"**``:**'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**``**echo "Created file pms_be_$VER.tgz"**``**:**'
- en: Outputs a message indicating the successful creation of the tarball.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出一条消息，指示已成功创建 tarball。
- en: This script seems to automate various tasks involved in building and packaging
    a Node.js application. It handles dependency installation, TypeScript compilation,
    obfuscation, versioning, and compression into a tarball for distribution. The
    resulting tarball is stored in the ``**binaries**`` directory with a name reflecting
    the application version.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本似乎自动化了构建和打包 Node.js 应用程序所涉及的各种任务。它处理依赖项安装、TypeScript 编译、混淆、版本控制和压缩成 tarball
    以进行分发。生成的 tarball 存储在 `**binaries**` 目录中，名称反映了应用程序版本。
- en: This binary file will be deployed on the server further.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此二进制文件将在服务器上进一步部署。
- en: '[Deploying the Application](toc.xhtml#s252a)'
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[部署应用程序](toc.xhtml#s252a)'
- en: There are different types of servers used to deploy applications and here we
    will use the most recommended way to deploy node application on AWS instance.
    Deploying a Node.js application on Amazon Web Services (AWS) offers several advantages,
    making it a popular choice for many developers and businesses. AWS has a rich
    ecosystem of services that complement Node.js application development.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 部署应用程序使用不同类型的服务器，这里我们将使用最推荐的在 AWS 实例上部署 Node.js 应用程序的方式。在亚马逊网络服务 (AWS) 上部署 Node.js
    应用程序提供了几个优势，使其成为许多开发人员和企业的首选。AWS 拥有丰富的服务生态系统，这些服务补充了 Node.js 应用程序开发。
- en: '[AWS Server Setup](toc.xhtml#s253a)'
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[AWS 服务器设置](toc.xhtml#s253a)'
- en: Creating an Amazon EC2 instance for hosting a Node.js application involves several
    steps. Following is a step-by-step guide on how to create an EC2 instance and
    deploy a Node.js application on it.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个亚马逊 EC2 实例以托管 Node.js 应用程序涉及几个步骤。以下是如何创建 EC2 实例并在其上部署 Node.js 应用程序的逐步指南。
- en: '[Signing in to the AWS Management Console](toc.xhtml#s254a)'
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[登录 AWS 管理控制台](toc.xhtml#s254a)'
- en: Amazon provides a free tier account for one year so anyone can create that account
    and use different services which are free. If anyone has that account, you can
    directly login, or else create an account and Sign in with your AWS account credentials.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊提供一年的免费层账户，因此任何人都可以创建该账户并使用不同的免费服务。如果您已有该账户，可以直接登录，否则创建账户并使用您的 AWS 账户凭证登录。
- en: Once you sign in, choose a region that is geographically closer to your users
    to reduce latency and improve the responsiveness of your application.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦登录，请选择一个地理位置上更靠近您的用户的服务区域，以减少延迟并提高您应用程序的响应速度。
- en: '![](img/10.1.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10.1.jpg)'
- en: '**Figure 10.1:** Choose Region in AWS'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 10.1:** 在 AWS 中选择区域'
- en: Here, we are choosing the Asia Pacific (Mumbai) Region.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们选择亚洲太平洋（孟买）地区。
- en: '[Navigating to EC2](toc.xhtml#s255a)'
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[导航到 EC2](toc.xhtml#s255a)'
- en: In the AWS Management Console, navigate to the `**"Services"**` dropdown. Under
    the `**"Compute"**` section, select `**"EC2**`.`**"**`
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 管理控制台中，导航到 `**"服务"**` 下拉菜单。在 `**"计算"**` 部分，选择 `**"EC2"**`.`**"**`
- en: '![](img/10.2.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10.2.jpg)'
- en: '**Figure 10.2:** Select EC2 Instance'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 10.2:** 选择 EC2 实例'
- en: '[Choosing an Amazon Machine Image (AMI)](toc.xhtml#s256a)'
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[选择亚马逊机器镜像 (AMI)](toc.xhtml#s256a)'
- en: Select an Amazon Machine Image (AMI) based on your requirements. For a basic
    Node.js application, you can choose an Amazon Linux AMI. Select the desired instance
    type based on your application’s resource needs. The default option is often suitable
    for small applications.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的需求选择一个亚马逊机器镜像 (AMI)。对于基本的 Node.js 应用程序，您可以选择亚马逊 Linux AMI。根据您的应用程序资源需求选择所需的实例类型。默认选项通常适用于小型应用程序。
- en: When you select an AMI, consider the following requirements you might have for
    the instances that you want to launch.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当您选择 AMI 时，请考虑您可能对要启动的实例有以下要求。
- en: 'For a small Node.js application, you typically do not need a high-powered or
    expensive EC2 instance. You can choose a cost-effective instance type that meets
    the requirements of your application. Here are a few EC2 instance types that are
    suitable for small Node.js applications:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个小型 Node.js 应用程序，通常不需要高性能或昂贵的 EC2 实例。您可以选择一种经济实惠的实例类型，以满足您应用程序的需求。以下是一些适合小型
    Node.js 应用程序的 EC2 实例类型：
- en: '**Memory Requirements:** Choose an instance type that provides enough memory
    for your Node.js application. The t3.micro and t2.micro instances, for example,
    come with 1 GB of memory.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存要求：** 选择一个为您的 Node.js 应用程序提供足够内存的实例类型。例如，t3.micro 和 t2.micro 实例都配备了 1 GB
    的内存。'
- en: '**CPU Requirements:** For small applications, a burstable performance instance
    like `**t3.micro**` may be sufficient. If you have specific CPU requirements,
    consider other instance types.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU 要求：** 对于小型应用程序，像 `**t3.micro**` 这样的可扩展性能实例可能就足够了。如果您有特定的 CPU 要求，请考虑其他实例类型。'
- en: '**Storage:** Determine the storage capacity needed for your application. The
    instance types mentioned above come with Elastic Block Store (EBS) storage, and
    you can adjust the size based on your requirements.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储：** 确定您应用程序所需的存储容量。上述实例类型都配备了弹性块存储 (EBS) 存储，您可以根据需求调整大小。'
- en: '**Network Performance:** For small applications, the default network performance
    of these instances should be sufficient. If you expect high network traffic, you
    might need to consider higher-performance instances.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络性能：** 对于小型应用程序，这些实例的默认网络性能应该足够。如果您预计会有高网络流量，您可能需要考虑更高性能的实例。'
- en: 'For example:'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '`**t3.micro**`**:** This is a low-cost, general-purpose burstable instance
    type. It is suitable for applications with variable workloads that do not require
    sustained high CPU performance.'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**t3.micro**`**：** 这是一个低成本、通用型可扩展实例类型。它适用于工作负载波动且不需要持续高 CPU 性能的应用程序。'
- en: '`**t2.micro**`**:** Similar to the `**t3.micro**`, the `**t2.micro**` is a
    low-cost, burstable instance type. It is a previous generation instance, but it
    can still be suitable for small applications with light workloads.'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**t2.micro**`**：** 与 `**t3.micro**` 类似，`**t2.micro**` 也是一个低成本、可扩展的实例类型。这是一个旧一代实例，但它仍然适用于具有轻量级工作负载的小型应用程序。'
- en: '![](img/10.3.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10.3.jpg)'
- en: '**Figure 10.3:** Select AMI'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 10.3：** 选择 AMI'
- en: Keep in mind that AWS offers a Free Tier, allowing you to use a limited amount
    of resources, including `**t2.micro**` instances, at no cost for the first 12
    months, so here we are choosing `**t2.micro**`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，AWS 提供了免费层，允许您在前 12 个月内免费使用一定数量的资源，包括 `**t2.micro**` 实例，因此我们选择 `**t2.micro**`。
- en: '[Key Pair Generation](toc.xhtml#s257a)'
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[密钥对生成](toc.xhtml#s257a)'
- en: You can use a key pair to securely connect to your instance. Ensure that you
    have access to the selected key pair before you launch the instance. A key pair
    is a set of security credentials that consists of a private key and a public key.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用密钥对安全地连接到您的实例。在启动实例之前，请确保您有权访问所选密钥对。密钥对是一组安全凭证，包括私钥和公钥。
- en: Key pairs are used for secure access to your Amazon EC2 instances. When you
    launch an EC2 instance, you specify a key pair, and the public key is placed on
    the instance while the private key is kept secure. Click `**"Create Key Pair**`,`**"**`
    give it a name, and download the private key (.`**pem**`) file.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥对用于安全访问您的 Amazon EC2 实例。当您启动 EC2 实例时，您指定一个密钥对，公钥放置在实例上，而私钥保持安全。点击 `**"创建密钥对**`，`**"**`
    给它一个名称，并下载私钥（. `**pem**`）文件。
- en: Once you download a `**.pem**` file, give permission to that file from the terminal.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完一个 `**.pem**` 文件后，请在终端中为该文件设置权限。
- en: '`$ sudo chmod 400 PMS_KEY.pem`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ sudo chmod 400 PMS_KEY.pem`'
- en: Using a key pair (.pem) file is crucial for secure access to your EC2 instances.
    Ensure that you follow best practices for key management and security. If you
    lose your private key, you might lose access to the instances associated with
    that key pair. Always store your private key securely and avoid sharing it with
    unauthorized users.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用密钥对 (.pem) 文件对于安全访问您的 EC2 实例至关重要。确保您遵循最佳实践进行密钥管理和安全。如果您丢失了私钥，您可能会失去与该密钥对关联的实例的访问权限。始终安全地存储您的私钥，并避免将其与未经授权的用户共享。
- en: '![](img/10.4.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10.4.jpg)'
- en: '**Figure 10.4:** Key Pair Generate'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 10.4：** 密钥对生成'
- en: '[Network Settings](toc.xhtml#s258a)'
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[网络设置](toc.xhtml#s258a)'
- en: Configure security groups to control inbound and outbound traffic to your instance.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 配置安全组以控制对您的实例的入站和出站流量。
- en: Configuring rules allows SSH access for administration and HTTP/HTTPS access
    for your web application. Always follow security best practices and restrict access
    to only the necessary ports and IP ranges as follows.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 配置规则允许SSH访问进行管理，并允许您的Web应用程序的HTTP/HTTPS访问。始终遵循安全最佳实践，并仅限制对必要的端口和IP范围的访问，如下所示。
- en: '![](img/10.5.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10.5.jpg)'
- en: '**Figure 10.5:** Network Settings'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**图10.5：** 网络设置'
- en: '[Configuring Storage](toc.xhtml#s259a)'
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[配置存储](toc.xhtml#s259a)'
- en: In the `**"Add Storage"**` step, you can configure the storage settings.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `**"添加存储"**` 步骤中，您可以配置存储设置。
- en: '**Root Volume**: This is the root volume where the operating system is installed.
    You can specify the size (in GiB) and choose the storage type (for example, General
    Purpose SSD, Provisioned IOPS SSD, Magnetic).'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**根卷**：这是操作系统安装的根卷。您可以指定大小（以GiB为单位）并选择存储类型（例如，通用型SSD，预配置IOPS SSD，磁盘）。'
- en: '**Add New Volume**: You can add additional volumes if needed. Click `**"Next"**`
    when done.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**添加新卷**：如果需要，您可以添加额外的卷。完成后点击 `**"下一步"**`。'
- en: '![](img/10.6.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10.6.jpg)'
- en: '**Figure 10.6:** Configure Storage'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**图10.6：** 配置存储'
- en: Here, we are selecting 8GB storage for Node.js applications, so no additional
    volume.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们选择了8GB的存储空间用于Node.js应用程序，因此不需要额外的卷。
- en: '[Launching an Instance](toc.xhtml#s260a)'
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[启动实例](toc.xhtml#s260a)'
- en: Configure instance details such as the number of instances, network settings,
    and storage. The default settings are typically sufficient for a basic Node.js
    application.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 配置实例详情，如实例数量、网络设置和存储。默认设置通常足以满足基本Node.js应用程序的需求。
- en: Configure storage settings based on your application’s data requirements. The
    default settings are usually suitable for simple applications. Review your configuration
    settings to ensure they are correct. Click the `**"Launch"**` button.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的应用程序数据需求配置存储设置。默认设置通常适用于简单应用程序。检查您的配置设置以确保它们正确。点击 `**"启动"**` 按钮。
- en: '![](img/10.7.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10.7.jpg)'
- en: '**Figure 10.7:** EC2 Launch Instance'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**图10.7：** EC2启动实例'
- en: On successfully launching an instance you can view a list of instances with
    state Running.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功启动实例后，您可以查看状态为运行的状态列表。
- en: '![](img/10.8.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10.8.jpg)'
- en: '**Figure 10.8:** Running Instance'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**图10.8：** 运行中的实例'
- en: Clicking the Instance Id reveals all details such as public and private IP address,
    hostname, platform details. You can also edit the instance, if needed.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 点击实例ID将显示所有详细信息，如公共和私有IP地址、主机名、平台详情。如果需要，您还可以编辑实例。
- en: '![](img/10.9.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10.9.jpg)'
- en: '**Figure 10.9:** Instance Details'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**图10.9：** 实例详情'
- en: Now, it is time to connect that server either from `**aws**` directly or from
    `**ssh**` as described previously. Click the connect button to initiate the connection.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候连接那个服务器了，无论是直接从 `**aws**` 还是像之前描述的那样通过 `**ssh**`。点击连接按钮以启动连接。
- en: '[Connecting the Server](toc.xhtml#s261a)'
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[连接服务器](toc.xhtml#s261a)'
- en: 'We have already saved the .pem file to connect to the server through ssh. Open
    the terminal in the directory where the .pem file is located and enter the following
    command:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将.pem文件保存下来，以便通过ssh连接到服务器。打开.pem文件所在的目录中的终端，并输入以下命令：
- en: '`$ sudo ssh -i YourKeyName.pem ec2-user@YourPublicIPAddress`'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ sudo ssh -i YourKeyName.pem ec2-user@YourPublicIPAddress`'
- en: Replace `**YourKeyName.pem**` with the path to your private key file and `**YourPublicIPAddress**`
    with the public IP address of your EC2 instance.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `**YourKeyName.pem**` 替换为您的私钥文件路径，并将 `**YourPublicIPAddress**` 替换为您的EC2实例的公共IP地址。
- en: For example, `$ sudo ssh -i PMS_KEY.pem ubuntu@65.0.76.190`
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`$ sudo ssh -i PMS_KEY.pem ubuntu@65.0.76.190`
- en: On successfully connecting with the server, you find the following output on
    terminal.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 成功连接到服务器后，你将在终端看到以下输出。
- en: '![](img/10.10.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10.10.jpg)'
- en: '**Figure 10.10:** Connected Server On Terminal'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**图10.10：** 终端上的已连接服务器'
- en: '[Deploying Code on Server](toc.xhtml#s262a)'
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[在服务器上部署代码](toc.xhtml#s262a)'
- en: Upon establishing a successful connection to the server, proceed to install
    essential packages like Node.js and PostgreSQL. Adjust the `**server_config.js**`
    file to reflect the appropriate configurations for port, database, and email settings.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功连接到服务器后，继续安装必要的包，如Node.js和PostgreSQL。调整 `**server_config.js**` 文件以反映端口、数据库和电子邮件设置的适当配置。
- en: Since we are using Linux (Ubuntu) here, the steps to install Node.js can be
    recalled from *[Chapter 1, Introduction to Node.js](c01.xhtml)*. For PostgreSQL,
    the official website - [https://www.postgresql.org/](https://www.postgresql.org/)
    can be followed for installation as also mentioned in *[Chapter 4, Planning the
    App](c04.xhtml)*.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这里使用Linux (Ubuntu)，安装Node.js的步骤可以从*[第1章，Node.js简介](c01.xhtml)*中回忆。对于PostgreSQL，可以按照*[第4章，应用规划](c04.xhtml)*中提到的，遵循官方网站[https://www.postgresql.org/](https://www.postgresql.org/)进行安装。
- en: Additionally, ensure that the specified port, for instance, `**8080**`, is open
    in the AWS security group by configuring the inbound rules to accommodate the
    requirements of our Node.js application.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请确保指定的端口，例如`**8080**`，在AWS安全组中已开放，通过配置入站规则以满足我们Node.js应用程序的需求。
- en: '`**pm2**` is a process manager for Node.js applications that allows you to
    manage and deploy Node.js applications in a production environment. It provides
    various features, such as process monitoring, automatic restarts, and clustering,
    to ensure the reliability and performance of your applications.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`**pm2**`是Node.js应用程序的过程管理器，允许您在生产环境中管理和部署Node.js应用程序。它提供了各种功能，如进程监控、自动重启和集群，以确保您应用程序的可靠性和性能。'
- en: Install `**pm2**` on the EC2 instance and run the following command in the terminal.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在EC2实例上安装`**pm2**`并在终端运行以下命令。
- en: '`$npm install -g pm2`'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`$npm install -g pm2`'
- en: Let us create a `**deploy.sh**` script with the following code in the root directory
    of the project. This script facilitates the transfer of binary code from our local
    server to the pre-built remote server and executes specific commands to launch
    the application on the server.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在项目的根目录中创建一个`**deploy.sh**`脚本，其中包含以下代码。此脚本便于将本地服务器上的二进制代码传输到预构建的远程服务器，并执行特定命令以在服务器上启动应用程序。
- en: '`#!/bin/bash`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`#!/bin/bash`'
- en: '`# Define SSH key and other deployment details`'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 定义SSH密钥和其他部署细节`'
- en: '`SSH_KEY="../PMS_KEY.pem"`'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`SSH_KEY="../PMS_KEY.pem"`'
- en: '`USER="ubuntu"`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`USER="ubuntu"`'
- en: '`HOST="43.205.144.240"`'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`HOST="43.205.144.240"`'
- en: '`PROJECT_DIR="/home/ubuntu/PMS"`'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`PROJECT_DIR="/home/ubuntu/PMS"`'
- en: '`HOME_DIR="/home/ubuntu"`'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`HOME_DIR="/home/ubuntu"`'
- en: '`CONFIG_FILE="server_config.json"`'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`CONFIG_FILE="server_config.json"`'
- en: '`process_pms_server(){`'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`process_pms_server(){`'
- en: '`echo "----"`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo "----"`'
- en: '`rm binaries/*`'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`rm binaries/*`'
- en: '`sh mkpackage.sh`'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`sh mkpackage.sh`'
- en: '`echo ""`'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo ""`'
- en: '`echo "File created - "`'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo "文件已创建 - "`'
- en: '`echo "binaries/"`'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo "binaries/"`'
- en: '`search_dir=binaries`'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`search_dir=binaries`'
- en: '`for entry in "$search_dir"/*.tar.gz`'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`for entry in "$search_dir"/*.tar.gz`'
- en: '`do`'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`do`'
- en: '`echo "- \t$entry"`'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo "- \t$entry"`'
- en: '`done`'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`done`'
- en: '`echo ""`'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo ""`'
- en: '`echo "==> Removing SensorApp Backend Server . <=="`'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo "==> 正在移除SensorApp后端服务器 ... <=="`'
- en: '`echo "====================================="`'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo "====================================="`'
- en: '`ssh -i "$SSH_KEY" $USER@$HOST "rm $HOME_DIR/pms_be*.tgz ; mkdir -p PMS; chmod
    +w $PROJECT_DIR;"`'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`ssh -i "$SSH_KEY" $USER@$HOST "rm $HOME_DIR/pms_be*.tgz ; mkdir -p PMS; chmod
    +w $PROJECT_DIR;"`'
- en: '`echo "==> Transferring SensorApp Backend Server . <=="`'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo "==> 正在传输SensorApp后端服务器 ... <=="`'
- en: '`echo "========================================="`'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo "========================================="`'
- en: '`scp -i "$SSH_KEY" binaries/pms_be*.tgz $USER@$HOST:$HOME_DIR/. || exit 1`'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`scp -i "$SSH_KEY" binaries/pms_be*.tgz $USER@$HOST:$HOME_DIR/. || exit 1`'
- en: '`scp -i "$SSH_KEY" server_config.json $USER@$HOST:$HOME_DIR || exit 1`'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`scp -i "$SSH_KEY" server_config.json $USER@$HOST:$HOME_DIR || exit 1`'
- en: '[PRE0]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
