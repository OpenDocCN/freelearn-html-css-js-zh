- en: '[CHAPTER 10](toc.xhtml#c10)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Building and Deploying Application](toc.xhtml#c10)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Introduction](toc.xhtml#s244a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After completing the development phase, it becomes essential to enable global
    access to the application. The final and crucial step for any application is to
    build and deploy it to a centralized location, ensuring widespread availability
    and usability to the end users. When deploying a Node.js application, there are
    various servers and platforms available to host and run your application. The
    choice depends on factors such as scalability, ease of use, performance, and specific
    requirements of the project.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will delve into building and securely deploying the application,
    employing the most widely used deployment processes in demand.
  prefs: []
  type: TYPE_NORMAL
- en: '[Structure](toc.xhtml#s245a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Code Obfuscation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the Application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the Application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Code Obfuscation](toc.xhtml#s246a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code obfuscation is a technique used to transform source code into a form that
    is more difficult to understand or reverse engineer, while maintaining its original
    functionality. The purpose of code obfuscation is not to enhance the security
    of the code significantly but rather make it more challenging for someone to comprehend
    or decompile the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[Common Techniques](toc.xhtml#s247a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are some common techniques used in code obfuscation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Renaming Variables and Functions:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obfuscators change the names of variables, functions, and classes to meaningless
    or random strings, making it harder to understand the purpose of each element.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Control Flow Obfuscation:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This involves restructuring the control flow of the program, such as using `**goto**`
    statements or introducing redundant code, to make it less predictable and harder
    to follow.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**String Encryption:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Literal strings in the code are encrypted or encoded, and then decrypted or
    decoded at runtime. This makes it more challenging for someone to understand the
    string values by simply inspecting the code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Code Splitting:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking down functions into smaller pieces or splitting them across multiple
    files, making it harder to comprehend the entire flow of the program.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Dummy Code Insertion:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing irrelevant or redundant code snippets that do not affect the program’s
    functionality but add complexity for a human reader trying to understand the code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Constant Value Obfuscation:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the representation of numerical constants or using mathematical operations
    to obscure their actual values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Anti-Debugging Techniques:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding code that detects debugging attempts and alters the behavior of the
    program, making it more difficult for reverse engineers to analyze the code in
    a debugger.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Code Compression:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducing the overall size of the code by compressing it, making it harder to
    read and analyze.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let us delve into the practical aspects of code obfuscation and explore its
    details hands-on.
  prefs: []
  type: TYPE_NORMAL
- en: Obfuscating an entire TypeScript project involves applying code obfuscation
    to all TypeScript files, including their dependencies. The process can be a bit
    involved and requires careful consideration of the build process, dependencies,
    and potential impact on the project.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways in which a code can be obfuscated. The most popular tools
    among all are `**javascript-obfuscator**`, `**UglifyJs**`, `**webpack**`, and
    others. We will be using `**javascript-obfuscator**` to obfuscate the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[Installing Required Dependencies](toc.xhtml#s248a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the JavaScript obfuscation library, `**javascript-obfuscator**`, to
    integrate it into the project. Open the terminal from root directory of project
    and paste following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ npm install  javascript-obfuscator  --save-dev`'
  prefs: []
  type: TYPE_NORMAL
- en: '[Creating an Obfuscation Script](toc.xhtml#s249a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a tool directory in the root folder and add script `**obfuscate.js**`
    file with following code that will obfuscate each generated JavaScript file.
  prefs: []
  type: TYPE_NORMAL
- en: '`// obfuscate.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`/* eslint-disable no-undef */`'
  prefs: []
  type: TYPE_NORMAL
- en: '`/* eslint-disable @typescript-eslint/no-var-requires */`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const JavaScriptObfuscator = require(''javascript-obfuscator'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const fs = require(''fs'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const path = require(''path'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const jsonObfuscatorModule = require(''json-obfuscator'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const **sourceDirectory** = ''dist/src''; // Update with your actual output
    directory`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const **obfuscatedDirectory** = ''build''; // Output directory for obfuscated
    code`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const obfuscateFile = (filePath) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const code = fs.readFileSync(filePath, ''utf8'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const obfuscatedCode = JavaScriptObfuscator.obfuscate(code, {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`compact: true,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`controlFlowFlattening: true`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// … other obfuscation options`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const obfuscatedFilePath = path.join(obfuscatedDirectory, path.relative(sourceDirectory,
    filePath));`'
  prefs: []
  type: TYPE_NORMAL
- en: '`fs.mkdirSync(path.dirname(obfuscatedFilePath), { recursive: true });`'
  prefs: []
  type: TYPE_NORMAL
- en: '`fs.writeFileSync(obfuscatedFilePath, obfuscatedCode.getObfuscatedCode(), ''utf8'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`};`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const processDirectory = (directoryPath) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const files = fs.readdirSync(directoryPath);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`files.forEach((file) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const filePath = path.join(directoryPath, file);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`if (fs.statSync(filePath).isDirectory()) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`processDirectory(filePath);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`} else if (path.extname(filePath) === ''.js'') {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`obfuscateFile(filePath);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`};`'
  prefs: []
  type: TYPE_NORMAL
- en: '`processDirectory(sourceDirectory);`'
  prefs: []
  type: TYPE_NORMAL
- en: Here,
  prefs: []
  type: TYPE_NORMAL
- en: '`**sourceDirectory**` specifies the directory containing the original JavaScript
    files. You should update this with the actual output directory of JavaScript files
    compiled from Typescript files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**obfuscatedDirectory**` specifies the directory where obfuscated files will
    be saved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**obfuscateFile(filePath)**` reads the content of a JavaScript file, obfuscates
    it using `**javascript-obfuscator**`, and writes the obfuscated content to the
    specified location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**processDirectory(directoryPath)**` recursively processes files in a directory,
    invoking obfuscateFile for each JavaScript file found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So when this script will run, a new build directory will be created that contains
    JavaScript obfuscated code.
  prefs: []
  type: TYPE_NORMAL
- en: This provides a summary of the obfuscation process, which will be applied in
    the subsequent build and execution of the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[Downside of Code Obfuscation](toc.xhtml#s250a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code obfuscation makes the source code harder to read and understand. However,
    there are some downsides of it.
  prefs: []
  type: TYPE_NORMAL
- en: Obfuscation can add extra layers of complexity to the code which can impact
    the performance at run time. Since the code is obfuscated, it is harder to read
    and while debugging it becomes challenging to trace the problem source. This adds
    extra time for debugging and troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: For future versions of the source code, obfuscation is done again every time
    new code is released. Obfuscation process adds additional characters and structures
    to the code which leads to larger file sizes.
  prefs: []
  type: TYPE_NORMAL
- en: One last point to discuss here is security. Obfuscation may give a false sense
    of code security. It is true that the code afterwards is harder to read but it
    can be reverse-engineered. Obfuscation does not fix any security vulnerabilities
    in the code and if someone reverse-engineers the obfuscated code, the vulnerabilities
    can be exploited.
  prefs: []
  type: TYPE_NORMAL
- en: While skilled hackers may reverse-engineer the code, obfuscation acts as a deterrent
    to casual or less-skilled hackers. Even for skilled hackers it requires additional
    efforts to reverse-engineer.
  prefs: []
  type: TYPE_NORMAL
- en: '[Building the Application](toc.xhtml#s251a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building an application refers to the process of transforming the source code
    of an application into a format or structure that can be executed or run by a
    computer. The build process involves compilation and transpilation. TypeScript
    compilation is the process of translating TypeScript source code into JavaScript
    code making it compatible with various JavaScript runtime environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal from the root directory and execute the following command
    that compiles the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ tsc`'
  prefs: []
  type: TYPE_NORMAL
- en: This command compiles all TypeScript files in the application based on the configuration
    provided in `**tsconfig.json**`. It includes compiler options with ``**rootDir**``
    set to ``**src**`` that specifying the root directory of input files and ``**outDir**``
    set to ``**dist**`` that specifying the output directory for compiled files. After
    successful compilation, TypeScript generates equivalent JavaScript files in the
    specified output directory `**dist**`.
  prefs: []
  type: TYPE_NORMAL
- en: Now we update `**package.json**` as follows, add scripts for `**build**`, `**start**`
    and `**test**` so it will be easy to run with npm.
  prefs: []
  type: TYPE_NORMAL
- en: '`"scripts": {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`"test": "mocha --require ts-node/register ''src/**/*.spec.ts''",`'
  prefs: []
  type: TYPE_NORMAL
- en: '`"start": "node dist/src/main.js",`'
  prefs: []
  type: TYPE_NORMAL
- en: '`"build": "tsc"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: After defined scripts in `**package.json**` execute it with npm run in the terminal.
    For example, `**npm run build**`, `**npm run start**` or `**npm run test**`. Here,
    we run application with `**js**` after compilation but while developing we can
    use `**tsc –-watch**`.
  prefs: []
  type: TYPE_NORMAL
- en: In the advanced phase of application building, we will develop a script that
    generates a compressed binary file for the application. This file will encapsulate
    the JavaScript source code with obfuscation and handle the installation of necessary
    Node packages.
  prefs: []
  type: TYPE_NORMAL
- en: Create `**mkpackage.sh**` file with following code in root directory of application.
  prefs: []
  type: TYPE_NORMAL
- en: '`npm install`'
  prefs: []
  type: TYPE_NORMAL
- en: '`./node_modules/.bin/tsc`'
  prefs: []
  type: TYPE_NORMAL
- en: '`rm -rf binaries/*`'
  prefs: []
  type: TYPE_NORMAL
- en: '`mkdir -p build`'
  prefs: []
  type: TYPE_NORMAL
- en: '`mkdir -p binaries`'
  prefs: []
  type: TYPE_NORMAL
- en: '`rm -rf build/*`'
  prefs: []
  type: TYPE_NORMAL
- en: '`node tools/obfuscate.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`cd build`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo  "Getting git version info.."`'
  prefs: []
  type: TYPE_NORMAL
- en: '`export VER=1.0`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo exports.version=\"1.0\" > ver`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo exports.version_long=\"$VER\" >> ver`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo "Copying things.."`'
  prefs: []
  type: TYPE_NORMAL
- en: '`cp ../package.json .`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo  "Doing compression .. "`'
  prefs: []
  type: TYPE_NORMAL
- en: '`tar czf pms_be_$VER.tgz *.js  package.json components routes tests utils`'
  prefs: []
  type: TYPE_NORMAL
- en: '`mv pms_be_$VER.tgz ../binaries/.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`cd ..`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo "Created file pms_be_$VER.tgz"`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This script has a set of commands for building and packaging a Node.js application.
    Let us break down each part:'
  prefs: []
  type: TYPE_NORMAL
- en: '**``**`npm install`:**``**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the Node.js dependencies specified in the ``**package.json**`` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**`./node_modules/.bin/tsc`:**``**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invokes the TypeScript compiler (``**tsc**``) located in the ``**node_modules**``
    directory to transpile TypeScript code into JavaScript. The ``**./node_modules/.bin/**``
    prefix is used to run the locally installed TypeScript compiler.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**`rm -rf binaries/*`:**``**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes all files and subdirectories from the ``**binaries**`` directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**`mkdir -p build` and `mkdir -p binaries`:**``**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates the ``**build**`` and ``**binaries**`` directories if they do not exist.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**`rm -rf build/*`:**``**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clears all files and subdirectories from the ``**build**`` directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**`node tools/obfuscate.js`:**``**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executes a Node.js script located at ``**tools/obfuscate.js**``. This script
    likely performs obfuscation of JavaScript code. The details of this script are
    not provided, but it seems to be a custom script for obfuscating the application’s
    JavaScript source code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**`cd build`:**``**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes the current working directory to the ``**build**`` directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**`echo "Getting git version info.."`:**``**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outputs a message indicating that the script is retrieving Git version information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**`export VER=1.0`:**``**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets an environment variable named ``**VER**`` to the value ``**1.0**``.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**`echo exports.version=\"1.0\" > ver` and `echo exports.version_long=\"$VER\"
    >> ver`:**``**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates a file named ``**ver**`` with version information. It exports the application
    version as well as a long version string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**`echo "Copying things.."`:**``**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outputs a message indicating that files are being copied.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**`cp ../package.json .`:**``**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copies the ``**package.json**`` file from the parent directory (``**..**``)
    to the current (``**build**``) directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**`echo "Doing compression .. "`:**``**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outputs a message indicating that compression is in progress.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**tar czf pms_be_$VER.tgz *.js package.json components routes tests utils**``:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates a compressed tarball (``**pms_be_$VER.tgz**``) containing specific files
    and directories (JavaScript files, ``**package.json**``, ``**components**``, ``**routes**``,
    ``**tests**``, ``**utils**``).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**mv pms_be_$VER.tgz ../binaries/.**``:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moves the created tarball to the ``**binaries**`` directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**cd ..**``:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes the working directory back to the parent directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**``**echo "Created file pms_be_$VER.tgz"**``:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outputs a message indicating the successful creation of the tarball.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This script seems to automate various tasks involved in building and packaging
    a Node.js application. It handles dependency installation, TypeScript compilation,
    obfuscation, versioning, and compression into a tarball for distribution. The
    resulting tarball is stored in the ``**binaries**`` directory with a name reflecting
    the application version.
  prefs: []
  type: TYPE_NORMAL
- en: This binary file will be deployed on the server further.
  prefs: []
  type: TYPE_NORMAL
- en: '[Deploying the Application](toc.xhtml#s252a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different types of servers used to deploy applications and here we
    will use the most recommended way to deploy node application on AWS instance.
    Deploying a Node.js application on Amazon Web Services (AWS) offers several advantages,
    making it a popular choice for many developers and businesses. AWS has a rich
    ecosystem of services that complement Node.js application development.
  prefs: []
  type: TYPE_NORMAL
- en: '[AWS Server Setup](toc.xhtml#s253a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating an Amazon EC2 instance for hosting a Node.js application involves several
    steps. Following is a step-by-step guide on how to create an EC2 instance and
    deploy a Node.js application on it.
  prefs: []
  type: TYPE_NORMAL
- en: '[Signing in to the AWS Management Console](toc.xhtml#s254a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon provides a free tier account for one year so anyone can create that account
    and use different services which are free. If anyone has that account, you can
    directly login, or else create an account and Sign in with your AWS account credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Once you sign in, choose a region that is geographically closer to your users
    to reduce latency and improve the responsiveness of your application.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 10.1:** Choose Region in AWS'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are choosing the Asia Pacific (Mumbai) Region.
  prefs: []
  type: TYPE_NORMAL
- en: '[Navigating to EC2](toc.xhtml#s255a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the AWS Management Console, navigate to the `**"Services"**` dropdown. Under
    the `**"Compute"**` section, select `**"EC2**`.`**"**`
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 10.2:** Select EC2 Instance'
  prefs: []
  type: TYPE_NORMAL
- en: '[Choosing an Amazon Machine Image (AMI)](toc.xhtml#s256a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Select an Amazon Machine Image (AMI) based on your requirements. For a basic
    Node.js application, you can choose an Amazon Linux AMI. Select the desired instance
    type based on your application’s resource needs. The default option is often suitable
    for small applications.
  prefs: []
  type: TYPE_NORMAL
- en: When you select an AMI, consider the following requirements you might have for
    the instances that you want to launch.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a small Node.js application, you typically do not need a high-powered or
    expensive EC2 instance. You can choose a cost-effective instance type that meets
    the requirements of your application. Here are a few EC2 instance types that are
    suitable for small Node.js applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Memory Requirements:** Choose an instance type that provides enough memory
    for your Node.js application. The t3.micro and t2.micro instances, for example,
    come with 1 GB of memory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CPU Requirements:** For small applications, a burstable performance instance
    like `**t3.micro**` may be sufficient. If you have specific CPU requirements,
    consider other instance types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage:** Determine the storage capacity needed for your application. The
    instance types mentioned above come with Elastic Block Store (EBS) storage, and
    you can adjust the size based on your requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network Performance:** For small applications, the default network performance
    of these instances should be sufficient. If you expect high network traffic, you
    might need to consider higher-performance instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**t3.micro**`**:** This is a low-cost, general-purpose burstable instance
    type. It is suitable for applications with variable workloads that do not require
    sustained high CPU performance.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**t2.micro**`**:** Similar to the `**t3.micro**`, the `**t2.micro**` is a
    low-cost, burstable instance type. It is a previous generation instance, but it
    can still be suitable for small applications with light workloads.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/10.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 10.3:** Select AMI'
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that AWS offers a Free Tier, allowing you to use a limited amount
    of resources, including `**t2.micro**` instances, at no cost for the first 12
    months, so here we are choosing `**t2.micro**`.
  prefs: []
  type: TYPE_NORMAL
- en: '[Key Pair Generation](toc.xhtml#s257a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use a key pair to securely connect to your instance. Ensure that you
    have access to the selected key pair before you launch the instance. A key pair
    is a set of security credentials that consists of a private key and a public key.
  prefs: []
  type: TYPE_NORMAL
- en: Key pairs are used for secure access to your Amazon EC2 instances. When you
    launch an EC2 instance, you specify a key pair, and the public key is placed on
    the instance while the private key is kept secure. Click `**"Create Key Pair**`,`**"**`
    give it a name, and download the private key (.`**pem**`) file.
  prefs: []
  type: TYPE_NORMAL
- en: Once you download a `**.pem**` file, give permission to that file from the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '`$ sudo chmod 400 PMS_KEY.pem`'
  prefs: []
  type: TYPE_NORMAL
- en: Using a key pair (.pem) file is crucial for secure access to your EC2 instances.
    Ensure that you follow best practices for key management and security. If you
    lose your private key, you might lose access to the instances associated with
    that key pair. Always store your private key securely and avoid sharing it with
    unauthorized users.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 10.4:** Key Pair Generate'
  prefs: []
  type: TYPE_NORMAL
- en: '[Network Settings](toc.xhtml#s258a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configure security groups to control inbound and outbound traffic to your instance.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring rules allows SSH access for administration and HTTP/HTTPS access
    for your web application. Always follow security best practices and restrict access
    to only the necessary ports and IP ranges as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 10.5:** Network Settings'
  prefs: []
  type: TYPE_NORMAL
- en: '[Configuring Storage](toc.xhtml#s259a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `**"Add Storage"**` step, you can configure the storage settings.
  prefs: []
  type: TYPE_NORMAL
- en: '**Root Volume**: This is the root volume where the operating system is installed.
    You can specify the size (in GiB) and choose the storage type (for example, General
    Purpose SSD, Provisioned IOPS SSD, Magnetic).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add New Volume**: You can add additional volumes if needed. Click `**"Next"**`
    when done.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 10.6:** Configure Storage'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are selecting 8GB storage for Node.js applications, so no additional
    volume.
  prefs: []
  type: TYPE_NORMAL
- en: '[Launching an Instance](toc.xhtml#s260a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configure instance details such as the number of instances, network settings,
    and storage. The default settings are typically sufficient for a basic Node.js
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Configure storage settings based on your application’s data requirements. The
    default settings are usually suitable for simple applications. Review your configuration
    settings to ensure they are correct. Click the `**"Launch"**` button.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 10.7:** EC2 Launch Instance'
  prefs: []
  type: TYPE_NORMAL
- en: On successfully launching an instance you can view a list of instances with
    state Running.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 10.8:** Running Instance'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the Instance Id reveals all details such as public and private IP address,
    hostname, platform details. You can also edit the instance, if needed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 10.9:** Instance Details'
  prefs: []
  type: TYPE_NORMAL
- en: Now, it is time to connect that server either from `**aws**` directly or from
    `**ssh**` as described previously. Click the connect button to initiate the connection.
  prefs: []
  type: TYPE_NORMAL
- en: '[Connecting the Server](toc.xhtml#s261a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already saved the .pem file to connect to the server through ssh. Open
    the terminal in the directory where the .pem file is located and enter the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ sudo ssh -i YourKeyName.pem ec2-user@YourPublicIPAddress`'
  prefs: []
  type: TYPE_NORMAL
- en: Replace `**YourKeyName.pem**` with the path to your private key file and `**YourPublicIPAddress**`
    with the public IP address of your EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: For example, `$ sudo ssh -i PMS_KEY.pem ubuntu@65.0.76.190`
  prefs: []
  type: TYPE_NORMAL
- en: On successfully connecting with the server, you find the following output on
    terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 10.10:** Connected Server On Terminal'
  prefs: []
  type: TYPE_NORMAL
- en: '[Deploying Code on Server](toc.xhtml#s262a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Upon establishing a successful connection to the server, proceed to install
    essential packages like Node.js and PostgreSQL. Adjust the `**server_config.js**`
    file to reflect the appropriate configurations for port, database, and email settings.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are using Linux (Ubuntu) here, the steps to install Node.js can be
    recalled from *[Chapter 1, Introduction to Node.js](c01.xhtml)*. For PostgreSQL,
    the official website - [https://www.postgresql.org/](https://www.postgresql.org/)
    can be followed for installation as also mentioned in *[Chapter 4, Planning the
    App](c04.xhtml)*.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, ensure that the specified port, for instance, `**8080**`, is open
    in the AWS security group by configuring the inbound rules to accommodate the
    requirements of our Node.js application.
  prefs: []
  type: TYPE_NORMAL
- en: '`**pm2**` is a process manager for Node.js applications that allows you to
    manage and deploy Node.js applications in a production environment. It provides
    various features, such as process monitoring, automatic restarts, and clustering,
    to ensure the reliability and performance of your applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Install `**pm2**` on the EC2 instance and run the following command in the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '`$npm install -g pm2`'
  prefs: []
  type: TYPE_NORMAL
- en: Let us create a `**deploy.sh**` script with the following code in the root directory
    of the project. This script facilitates the transfer of binary code from our local
    server to the pre-built remote server and executes specific commands to launch
    the application on the server.
  prefs: []
  type: TYPE_NORMAL
- en: '`#!/bin/bash`'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Define SSH key and other deployment details`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SSH_KEY="../PMS_KEY.pem"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`USER="ubuntu"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HOST="43.205.144.240"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`PROJECT_DIR="/home/ubuntu/PMS"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HOME_DIR="/home/ubuntu"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CONFIG_FILE="server_config.json"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`process_pms_server(){`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo "----"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`rm binaries/*`'
  prefs: []
  type: TYPE_NORMAL
- en: '`sh mkpackage.sh`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo ""`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo "File created - "`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo "binaries/"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`search_dir=binaries`'
  prefs: []
  type: TYPE_NORMAL
- en: '`for entry in "$search_dir"/*.tar.gz`'
  prefs: []
  type: TYPE_NORMAL
- en: '`do`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo "- \t$entry"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`done`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo ""`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo "==> Removing SensorApp Backend Server . <=="`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo "====================================="`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ssh -i "$SSH_KEY" $USER@$HOST "rm $HOME_DIR/pms_be*.tgz ; mkdir -p PMS; chmod
    +w $PROJECT_DIR;"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo "==> Transferring SensorApp Backend Server . <=="`'
  prefs: []
  type: TYPE_NORMAL
- en: '`echo "========================================="`'
  prefs: []
  type: TYPE_NORMAL
- en: '`scp -i "$SSH_KEY" binaries/pms_be*.tgz $USER@$HOST:$HOME_DIR/. || exit 1`'
  prefs: []
  type: TYPE_NORMAL
- en: '`scp -i "$SSH_KEY" server_config.json $USER@$HOST:$HOME_DIR || exit 1`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
