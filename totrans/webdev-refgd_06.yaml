- en: Chapter 6. CSS Properties – Part 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we're done with Part 2 of the CSS properties, let's end strongly with
    Part 3.
  prefs: []
  type: TYPE_NORMAL
- en: Let's do this.
  prefs: []
  type: TYPE_NORMAL
- en: Page box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The page box is a square/rectangular area built out of two parts: the *page
    area* and the *margin area*.'
  prefs: []
  type: TYPE_NORMAL
- en: The page area is where the content sits and all elements are laid out. The margin
    area sits around the page area and is transparent. If we add a background color
    to the page area, it will cover the page area and the margin area.
  prefs: []
  type: TYPE_NORMAL
- en: The size of the page box cannot be modified. But if we plan to modify some of
    the page box properties, we need to include them in an `@page` rule.
  prefs: []
  type: TYPE_NORMAL
- en: Let's check it out.
  prefs: []
  type: TYPE_NORMAL
- en: bleed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `bleed` CSS property is also called the *CSS at-rule descriptor*. It defines
    how much a page should "*overflow*" or bleed outside the page box. This property
    only works if marks have been enabled using the `marks` property, which we'll
    see next.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `bleed` property only supports a length value: `px`, `em`, `in`, `mm`,
    `cm`, `vw`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: marks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `marks` CSS property, also called a *CSS at-rule descriptor*, defines the
    types of mark that should be rendered and printed outside the page box.
  prefs: []
  type: TYPE_NORMAL
- en: Since the marks are printed outside the page box, the pages need to be a bit
    larger in order to have the space to print the marks.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `marks` property supports three keyword values: `crop`, `cross`, and `none`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`crop`: Crop marks define where the page should be cut'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross`: Cross marks are used to align the pages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`none`: Marks will not be displayed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: List
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS lists are one of the most versatile elements of web design. Aside from being
    used for making, well, lists, they are also used for navigation, layouts, slideshows,
    carousels, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see some of their properties.
  prefs: []
  type: TYPE_NORMAL
- en: list-style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `list-style` CSS property is shorthand for the `list-style-type`, `list-style-image`,
    and `list-style-position` properties. These properties are actually the values
    that the `list-style` CSS property supports. We'll see all these properties next.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `list-style` property supports one, two, or three values, in any order.
    If a value isn't declared, it will use its default value.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: list-style-type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `list-style-type` CSS property defines the type of graphic or marker (also
    called **bullet**) the list will use. The color of the marker is determined by
    the color of the text of the element it's applied to.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `list-style-type` property supports many values, but we''ll list 15 of
    the most commonly used ones: `armenian`, `circle`, `decimal`, `decimal-leading-zero`,
    `disc`, `georgian`, `lower-alpha`, `lower-greek`, `lower-latin`, `lower-roman`,
    `none`, `square`, `upper-alpha`, `upper-latin`, and `upper-roman`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a screenshot with all values except the `none` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Description](img/B03289_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: list-style-position
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `list-style-position` CSS property defines the location of the marker.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `list-style-position` property supports two keyword values: `inside` and
    `outside`.'
  prefs: []
  type: TYPE_NORMAL
- en: inside
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the `inside` value is applied, the marker will appear inside the text.
    If there's a line that wraps, the marker will be flushed to the left and not "*sticking
    out*" like in traditional lists.
  prefs: []
  type: TYPE_NORMAL
- en: outside
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The default value is `outside`. When this value is applied (or not, since it's
    the default), the marker will appear outside the text. If there's a line that
    wraps, the marker will be outside the text block. It will "*stick out*" just like
    in traditional lists.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: list-style-image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `list-style-image` CSS property allows us to replace the default markers
    with a custom image.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `list-style-image` property supports one keyword value and one function:
    `none` and `url()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`none`: No image is used to replace the marker'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url()`: It''s used to define the path to the image that will replace the marker'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a demo in CodePen with all HTML lists: [http://tiny.cc/html-lists](http://tiny.cc/html-lists)'
  prefs: []
  type: TYPE_NORMAL
- en: Counter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditional lists via the `<ul>`, `<ol>`, `<dl>` tags aren't too versatile when
    it comes to styling the markers. Sometimes, we have to rely on extra markup to
    accomplish some minimal custom styling.
  prefs: []
  type: TYPE_NORMAL
- en: CSS counters, on the other hand, take styling lists (or any element for that
    matter) to a whole new level of customization and styling.
  prefs: []
  type: TYPE_NORMAL
- en: Granted, CSS counters rely not only on the properties we're going to see next,
    but also on the `content` property and the `:before` pseudo-element.
  prefs: []
  type: TYPE_NORMAL
- en: Let's check out the properties that make CSS counters so great.
  prefs: []
  type: TYPE_NORMAL
- en: counter-reset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `counter-reset` CSS property resets the counter by giving it a name, and
    it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `counter-reset` property serves two purposes: resets the counter and defines
    a name for the counter. The name is later used by the `counter-increment` and
    `counter()`/`counters()` functions that we''ll see later.'
  prefs: []
  type: TYPE_NORMAL
- en: I have to admit that the term "`counter-reset`" isn't as intuitive as it should
    be if it's used to set a name for the counter. Something like "`counter-name`"
    would be more suitable if you ask me.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property supports two values: a *name* and a *number*.'
  prefs: []
  type: TYPE_NORMAL
- en: We can reference multiple counter resets in the same declaration.
  prefs: []
  type: TYPE_NORMAL
- en: name
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We need to give the reset counter a name. This value is required. It can be
    any name but it needs to adhere to the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: It can start with a letter, an underscore "`_`", or a hyphen "`-`"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can start with a hyphen "`-`" character but cannot have two consecutive hyphens
    at the beginning of the name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name cannot be just a hyphen"`-`"; at least one more character is required,
    but it can't be a number since it would be interpreted as "`minus 1`" (`-1`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It cannot start with a number or a special character like `#`, `$`, `!`, and
    so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: number
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It's the number that the counter is reset to. The default value is `0` (zero)
    if no value is declared.
  prefs: []
  type: TYPE_NORMAL
- en: This value is optional unless we want to start the list from a number different
    than `1`. Pay close attention to this value, because the first number in the list
    is not the number declared in this value.
  prefs: []
  type: TYPE_NORMAL
- en: If we set the value to `1`, the list starts at `2`. If we leave the value empty,
    it defaults to `0` (zero) and the list starts at `1`. Negative values are valid.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: counter-increment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `counter-increment` CSS property increments the value of one or more counters,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property is used with the `counter-reset` CSS property. This is because
    the name specified in the `counter-reset` property is used in the `counter-increment`
    CSS property.
  prefs: []
  type: TYPE_NORMAL
- en: As a refresher, remember that the counter name will also be used by the `counter()`/`counters()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can declare multiple counter increments in the same declaration. Multiple
    counters are separated by a space. This property supports two values: A *name*
    and a *number*.'
  prefs: []
  type: TYPE_NORMAL
- en: name
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It can be any name but it needs to adhere to the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: It can start with a letter, an underscore "`_`", or a hyphen "`-`"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can start with a hyphen "`-`" character but not have two consecutive hyphens
    at the beginning of the name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name cannot be just the hyphen"`-`"; at least one more character is required,
    but it can't be a number since it would be interpreted as "`minus 1`" (`-1`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It cannot start with a number or a special character like `#`, `$`, `!`, and
    so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: number
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the number that the counter is reset to. The default value is `0` (zero)
    if no value is declared. This value is optional unless we want to start the list
    from a number different than `1`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the `number` value defines the amount of increments each counter will have.
    For example, if we declare `2`, then the counter will be `2`, `4`, `6`, and so
    on. If we declare `3`, then the counter will be `3`, `6`, `9`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: If we do not declare a value, the default increment will be by `1`, as in `1`,
    `2`, `3`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are valid. If we declare `-2`, then the counter will be `-2`,
    `-4`, `-6`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a demo in CodePen: [http://tiny.cc/css-counters](http://tiny.cc/css-counters)'
  prefs: []
  type: TYPE_NORMAL
- en: Drop shadows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three ways to create the effect of depth: using lights, shadows,
    or both.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how we create box shadows for our containers.
  prefs: []
  type: TYPE_NORMAL
- en: box-shadow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `box-shadow` CSS property creates one or several shadows on an element,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `box-shadow` property supports three, four, five, or six values in the
    same declaration: four *length* values, one *color* value, and the *keyword* `inset`.'
  prefs: []
  type: TYPE_NORMAL
- en: Length values
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We use one of the following units when we use the length values: `px`, `em`,
    `in`, `mm`, `cm`, `vw`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The four length values are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The first value is for the horizontal offset of the shadow. Negative values
    are valid. This value is required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second value is for the vertical offset of the shadow. Negative values are
    valid. This value is required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third value is for the blur radius of the shadow. The larger the value,
    the more spread the shadow becomes, but also more translucent. Negative values
    are not valid. This value is required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fourth value is for the size of the shadow (or "spread radius"). Negative
    values are valid. This value is optional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is the fifth value in the list. It supports all color modes: `HEX`, `RGB`,
    `RGBa`, `HSL`, `HSLs`, and *color name*.'
  prefs: []
  type: TYPE_NORMAL
- en: This value is optional. If no color is specified, it's up to the browser to
    decide which color to use. Some browsers may not even display a shadow at all
    without a color value.
  prefs: []
  type: TYPE_NORMAL
- en: The *color* value can go either at the beginning or at the end of the declaration
    but never between the length values; otherwise, the `box-shadow` property won't
    work.
  prefs: []
  type: TYPE_NORMAL
- en: inset
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The sixth value in the list is `inset`. It creates the shadow inside the container,
    like a background. However, if there is actually a background color or image,
    the `inset` shadow will sit on top of it but under the content without affecting
    the layout of the child elements of the container.
  prefs: []
  type: TYPE_NORMAL
- en: This value is optional. If this value is not declared, the shadow defaults to
    displaying the shadow outside the element.
  prefs: []
  type: TYPE_NORMAL
- en: This value can go either at the beginning or at the end of the declaration but
    never between the length values; otherwise, the `box-shadow` property won't work.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Display and visibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Display properties are some of the most widely used CSS features in web design
    and development.
  prefs: []
  type: TYPE_NORMAL
- en: Let's check them out.
  prefs: []
  type: TYPE_NORMAL
- en: all
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `all` CSS property resets an element''s properties to its default values,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The only properties that are not reset are the `direction` and `unicode-bidi`
    properties, which control text direction. This is important because text direction
    is required to understand the content. If these properties were reset by the `all`
    property, then text would run the opposite way it's supposed to, disrupting the
    message completely.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property supports three keyword values: `initial`, `inherit`, and `unset`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`initial`: This changes all the properties of the element or the element''s
    parent to their initial values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inherit`: This changes all the properties of the element or the element''s
    parent to their parent values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unset`: This changes all the properties of the element or the element''s parent
    to their parent values if those properties are inheritable, otherwise it will
    change them to their initial value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: clear
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `clear` CSS property specifies which side of an element, or both, should
    not *float*, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the `clear` property is used, it clears the specific box in question, not
    its child elements. If we wanted to clear its child elements, we'd have to declare
    the `clear` property on them.
  prefs: []
  type: TYPE_NORMAL
- en: When dealing with float-based grids, this property is crucial to the layout.
    That is because floated elements are taken out of the document flow. Thus, their
    parent container will not take them into account and its height isn't determined
    by those floated elements anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, adding a clearing declaration (with the `display` and `content` properties)
    to the parent''s `:after` pseudo element "*tells*" the parent element to consider
    the floated elements and thus the parent container''s height is now determined
    by the tallest floating child element. Let''s take a look at the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Description](img/B03289_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is a demo in CodePen: [http://tiny.cc/clearing-floats](http://tiny.cc/clearing-floats)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `clear` CSS property supports four values: `left`, `right`, `both`, and
    `none`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`left`: It means that floated elements to the left are not allowed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`right`: It means that floated elements to the right are not allowed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`both`: It means that floated elements, both left and right, are not allowed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`none`: This is the default value. No clearing is performed and floating elements
    to both sides are allowed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: display
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `display` CSS property defines how an element (box) should be or should
    not be displayed on a page. It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property accepts about 25 keyword values; some of them are very obscure
    and rarely used. Let''s focus on the 15 most relevant ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '`block`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flex`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grid`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inline`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inline-block`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inline-flex`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`none`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table-cell`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table-column`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table-column-group`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table-footer-group`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table-header-group`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table-row`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table-row-group`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`block`: Makes an element be displayed as a block-level element, like a `<div>`
    tag or an `<h1>` element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flex`: Makes an element be displayed as a block-level element and lays out
    its content based on the `Flexbox` model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grid`: Makes an element be displayed as a block-level element and lays out
    its content based on the `Grid` model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inline`: Makes an element be displayed as an inline-level element, like a
    link `<a>` element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inline-block`: Makes an element be displayed as an `inline-block` element,
    like a list `<li>` element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inline-flex`: Makes an element be displayed as an inline element and lays
    out its content based on the `Flexbox` model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`none`: Hides the element from rendering in the browser. The element still
    exists in the markup though. When this value is applied to an element, the browser
    does not render the element and all its children.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table-related values
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the following list, all the `table-related` values are mapped to an HTML
    element. So when any of those values are applied to an element, they make that
    element behave as a `table-related` element. Let''s take a look at the attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: table = `<table>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: table-cell = `<td>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: table-column = `<col>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: table-column-group = `<colgroup>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: table-footer-group = `<tfoot>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: table-header-group = `<thead>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: table-row = `<tr>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: table-row-group = `<tbody>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Visit MDN for a list of all the display values: [http://tiny.cc/mdn-display](http://tiny.cc/mdn-display)'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: opacity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `opacity` CSS property defines the transparency (opacity) of an element,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the `opacity` property is applied to an element, the element itself and
    its children are affected.
  prefs: []
  type: TYPE_NORMAL
- en: This property supports a *numeric* value ranging from 0.0 (zero) to 1.0, which
    is the default value. A value of 0 is completely transparent, as in 0 percent
    opaque, and 1 is 100 percent opaque, no transparency whatsoever. Decimal numbers
    are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: This property behaves the same as the alpha channel value used in the RGBa and
    HSLa color modes.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: filter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `filter` CSS property allows us to apply visual effects to an `img` element
    or to the `background` or `border` properties, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A few examples of CSS filters are blur, turning a color image into grayscale
    or sepia, or changing its opacity.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This `filter` property is not the same as Microsoft's proprietary `filter` property
    that only IE supports. Unlike Microsoft's proprietary filters, which are not part
    of a standard, this CSS `filter` property is part of a work in progress of the
    W3C.
  prefs: []
  type: TYPE_NORMAL
- en: This property supports 11 values. These values are called CSS functions. Multiple
    functions can be declared in the same selector, separated by a space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`blur()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`brightness()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contrast()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drop-shadow()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grayscale()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hue-rotate()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`invert()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opacity()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`saturate()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sepia()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: blur()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This gives a **smudge** effect. Values are declared as *length* values (`px`,
    `em`, `in`, `mm`, `cm`, `vw` and so on). The higher the value, the more intense
    the blur effect is (and vice versa).
  prefs: []
  type: TYPE_NORMAL
- en: Percentage and negative values are not allowed, but decimal values are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: brightness()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This modifies the illumination of an image. Values are declared as either a
    *percentage* or a *number* without a unit, for example, 10% and 0.5%.
  prefs: []
  type: TYPE_NORMAL
- en: A value of 100% leaves the element unchanged, and a value of 0% makes the element
    completely black. Values over 100% are allowed and create a more intense effect.
    There is no limit to the value.
  prefs: []
  type: TYPE_NORMAL
- en: Then, a value of 1 leaves the element unchanged; a value of 0 makes the element
    completely black. Values over 1 are allowed and create a more intense effect.
    There is no limit to the value. Negative values are not valid.
  prefs: []
  type: TYPE_NORMAL
- en: contrast()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This modifies the contrast of an element. Values are declared as either a *percentage*
    or a *number* without a unit, for example, 10% and 0.5%.
  prefs: []
  type: TYPE_NORMAL
- en: A value of 100% leaves the element unchanged, and a value of 0% makes the element
    completely black. Values over 100% are allowed and create a more intense effect.
    There is no limit to the value.
  prefs: []
  type: TYPE_NORMAL
- en: Then, a value of 1 leaves the element unchanged; a value of 0 makes the element
    completely black. Values over 1 are allowed and create a more intense effect.
    There is no limit to the value. Negative values are not valid, and decimal values
    are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: drop-shadow()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This adds a shadow under the element.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function works almost exactly the same way as the `box-shadow` property
    with two differences: the `drop-shadow()` function doesn''t support the `spread-radius`
    attribute or the `inset` values.'
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the `box-shadow` property for a detailed description of all
    the values.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, some browsers actually provide hardware acceleration when using
    this function, which eventually improves performance. You know how it goes, anything
    we can do to improve performance is always a+1.
  prefs: []
  type: TYPE_NORMAL
- en: grayscale()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This converts an element to grayscale. Values are declared as either a *percentage*
    or a *number* without a unit, for example, 10% and 0.5%.
  prefs: []
  type: TYPE_NORMAL
- en: A value of 0% leaves the element unchanged; a value of 100% makes the element
    grayscale. Values over 100% are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: A value of 0 leaves the element unchanged, and a value of 1 makes the element
    grayscale. Values over 1 are not allowed. Negative values are not valid, and decimal
    values are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: hue-rotate()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This applies a hue rotation to the element. It accepts an *angle* value.
  prefs: []
  type: TYPE_NORMAL
- en: The angle value defines the degrees around the color wheel the element sample
    will be modified to. There isn't a maximum value, however, if the value is larger
    than `360deg`, the rotation will just go around. For example, if we declare `380deg`,
    that would the same as `20deg`.
  prefs: []
  type: TYPE_NORMAL
- en: invert()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `invert()` function inverts the color of the element. If used in an image,
    it makes the image look like a film negative.
  prefs: []
  type: TYPE_NORMAL
- en: A value of 100% completely inverts the element's color; a value of 0% leaves
    the element unchanged. Values over 100% are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: A value of 1 completely inverts the element's color, and a value of 0 leaves
    the element unchanged. Values over 1 are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are not valid, and decimal values are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: opacity()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It defines the transparency (opacity) of an element. When this function is applied
    to an element, the element itself and its children are affected.
  prefs: []
  type: TYPE_NORMAL
- en: This function supports a numeric value ranging from 0 (zero) to 1, which is
    the default value. A value of 0 is completely transparent, as in 0% opaque, and
    1 is 100% opaque, no transparency whatsoever.
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are not valid, and decimal values are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: saturate()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It affects the saturation levels of an element. Values are declared as either
    a *percentage* or a *number* without a unit, for example, 10% and 0.5%.
  prefs: []
  type: TYPE_NORMAL
- en: The default saturation value of an element is 100%, or 1 if using a unitless
    number.
  prefs: []
  type: TYPE_NORMAL
- en: A value of 0% completely desaturates the element (it removes all color leaving
    the element in grayscale); a value of 100% leaves the element unchanged. Values
    over 100% are allowed, creating a more intense effect.
  prefs: []
  type: TYPE_NORMAL
- en: A value of 0 completely desaturates the element (it removes all color leaving
    the element in grayscale), and a value of 1 leaves the element unchanged. Values
    over 1 are allowed, creating a more intense effect.
  prefs: []
  type: TYPE_NORMAL
- en: sepia()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This converts an element to sepia—think of a grayscale image but in shades of
    brown.
  prefs: []
  type: TYPE_NORMAL
- en: A value of 100% completely turns the element to sepia; a value of 0% leaves
    the element unchanged. Values over 100% are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: A value of 1 completely turns the element to sepia; a value of 0 leaves the
    element unchanged. Values over 1 are not allowed. Negative values are not valid.
  prefs: []
  type: TYPE_NORMAL
- en: url()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It takes the location of an XML file with an SVG filter to be applied to the
    element. The URL may include an anchor to a specific filter element in the SVG.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: overflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `overflow` CSS property defines how a block level element should handle
    content that "*bleeds*" (overflows) outside its boundaries, and it looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A peculiarity of the `overflow` property is that it is used to clear floats
    and make the parent container expand vertically to wrap the floating elements.
    This is accomplished by using any of the following values except `visible`.
  prefs: []
  type: TYPE_NORMAL
- en: However, a word of caution. When using the prior technique since it can have
    unforeseen effects. For example, if a child element has a `box-shadow`, the shadow
    could be clipped/hidden.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for content to overflow, the parent container needs to have a fixed
    height or the content needs to have a `white-space: nowrap;` declaration applied
    to it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This property supports four keyword values: `auto`, `hidden`, `scroll`, and
    `visible`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`auto`: This creates horizontal and vertical scrollbars only if necessary.
    In other words, if the content overflows the container in any direction, the browser
    will create scrollbars in one or both axes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hidden`: This will clip/hide the content that''s outside of the element. No
    scrollbars are generated. This value is very popular when clearing floats. Again,
    be careful when using this value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scroll`: This creates horizontal and vertical scrollbars even if the content
    isn''t overflowing the container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`visible`: This is the default value. No content is clipped/hidden and no scrollbars
    are generated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: overflow-x
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `overflow-x` CSS property behaves the same as the `overflow` property,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The difference is that the `overflow-x` property handles the overflow on the
    *X* axis (horizontally). Please refer to the description of `overflow`, since
    the values are the same.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: overflow-y
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `overflow-y` CSS property behaves like the `overflow` property, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The difference is that the `overflow-y` property handles the overflow on the
    *Y* axis (vertically). Please refer to the prior description of `overflow`, since
    the values are the same.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: visibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `visibility` CSS property defines whether an element is visible or not,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `visibility` property is similar to `display: none;` in terms of hiding
    an element; the difference is that when hiding an element with the `visibility`
    property, the space the element occupies still affects the layout. It''s just
    "*invisible*". With `display: none;`, it''s like the element doesn''t even exist.'
  prefs: []
  type: TYPE_NORMAL
- en: The `visibility` CSS property is not inheritable; in other words, we can still
    make the child elements visible even if their parent container is not. It can
    also be used to hide rows and columns in tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property supports three different keyword values: `collapse`, `hidden`,
    and `visible`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`collapse`: This is used only on table elements to remove rows or columns.
    However, the collapsed/hidden elements still affect the layout since they are
    still taking up their space. If this value is used in other elements than a table
    elements, they will be treated as if the value `hidden` is being used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hidden`: This is used to visually hide an element. However, any hidden elements
    still affect the layout because they are still taking up their space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`visible`: This is the default value. It makes an element visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: z-index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `z-index` CSS property defines the stacking order of elements. Think of
    it in this way: elements sometimes overlap, like a stack of poker cards on a table.
    The card sitting at the top of the stack has the highest `z-index`, the card sitting
    at the bottom has the lowest `z-index`.'
  prefs: []
  type: TYPE_NORMAL
- en: For this property to work, the element has to have a position `property` declared
    with any value different from `static`.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `z-index` property accepts two values: a *number* and a *keyword* value.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Number value**: This is also called an "**integer**". It''s just a number
    without a unit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**auto**: This is the default value. The stacking order of elements is the
    same as their parent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Masking and clipping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These two features allow us to hide parts of an element in order to show a
    background image or color, or to give an element a special shape. Both terms can
    be a bit confusing, so let''s see a brief description of each:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Clipping** is done with vectors or paths since this CSS feature was taken
    from the SVG specification. It creates a solid edge between the element and its
    background.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Masking**, on the other hand, uses images/bitmaps. With images, we can have
    "*feathered*" or blurred edges, whereas with clipping we have straight edges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's check these properties out.
  prefs: []
  type: TYPE_NORMAL
- en: mask
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mask` CSS property is the shorthand for the `mask-clip`, `mask-composite`,
    `mask-image`, `mask-mode`, `mask-origin`, `mask-position`, `mask-repeat`, and
    `mask-size` properties. We''ll see each of these in more detail later. The `mask`
    property looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A group of all the prior properties is called a "*mask layer*".
  prefs: []
  type: TYPE_NORMAL
- en: It's recommended to use the shorthand syntax over individual specific properties,
    since the shorthand resets undeclared properties to their initial values. This
    is helpful because it makes it easier to override values later in the cascade,
    thus avoiding specificity issues and potential use of the `!important` directive.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, `mask-clip` and `mask-origin` use a `geometry` value. If we declare
    only one value, then both properties will use that value. With two values, `mask-clip`
    will use the first one and `mask-origin` will use the second one.
  prefs: []
  type: TYPE_NORMAL
- en: As I mentioned before, CSS masks use images, which means that we can reference
    a bitmap/raster file with a transparency or a background gradient with the `linear-gradient()`
    CSS function. We can even create a mask by referencing several images in the same
    declaration.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of mask: *alpha* masks and *luminance* masks. We''ll see
    what each of these types of mask are later.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: mask-clip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mask-clip` CSS property determines the area of the element that will be
    affected by the mask, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property is similar to the `background-clip` CSS property. Refer to [Chapter
    4](ch04.html "Chapter 4. CSS Properties – Part 1"), *CSS Properties – Part 1*,
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple comma-separated keyword values can be present in the same declaration.
    Each value represents its corresponding image in the comma-separated values of
    the `mask-image` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'It supports four keyword values: `border-box`, `content-box`, `padding-box`,
    and `no-clip`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`border-box`: This is the default value. If the element has any borders, they
    are seen through the mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content-box`: Only the parts of the element that are inside its *content*
    area are visible through the mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding-box`: If the element has any padding, it will be seen through the
    mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no-clip`: The content is not *clipped*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: mask-composite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mask-composite` CSS property defines how multiple masks with different
    shapes are combined or *composited* to form a single mask, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `mask-composite` property works when `mask-image` is used and at least two
    mask images are declared. Multiple comma-separated keyword values can be present
    in the same declaration. Each value represents its corresponding image in the
    comma-separates values of the `mask-image` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `mask-composite` CSS property supports four keyword values: `add`, `subtract`,
    `exclude`, and `intersect`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, picture part of triangle over part of a circle, where the triangle
    is on top and the circle below; the different types of *composite* make different
    shapes of masks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Description](img/B03289_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`intersect`: The shape of the mask is where the triangle and the circle overlap,
    or *intersect*. The rest of the shape is discarded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exclude`: The part where the triangle and the circle intersect is discarded,
    and the rest of the elements is what makes the mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subtract`: Since the triangle is on top, it will *trim* or *crop* the circle,
    thus leaving a **Pac-Man** shape mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add`: The triangle is fused to the circle creating a single shape that will
    be used as the mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: mask-image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mask-image` CSS property defines the image or images to be used as mask
    layers on any given element, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `mask-image` property may also refer to `<mask>` elements in an SVG file.
    Multiple values are comma-separated. The images can be bitmap files, SVGs, and
    even CSS gradients that are images as well.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: mask-mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mask-mode` CSS property defines whether the mask layer is an `alpha` mask
    or a `luminance` mask. These terms are the actual keyword values, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Multiple comma-separated keyword values can be present in the same declaration.
    Each value represents its corresponding image in the comma-separates values of
    the `mask-image` property.
  prefs: []
  type: TYPE_NORMAL
- en: Alpha masks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Alpha masks use the *alpha channel* of the image. Whatever is transparent will
    be covered; whatever is opaque will show. Of course, a semi-transparent area on
    the image is partially covered.
  prefs: []
  type: TYPE_NORMAL
- en: Luminance masks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Luminance masks uses the *luminance values* of the image. Whatever is *white*
    on the image being used as mask will show. Whatever is black is hidden. Gray areas
    partially cover the image.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: mask-origin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mask-origin` CSS property defines the location or position of the mask
    layer in relation to the element''s box starting at the top left corner, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `mask-origin` property works in a similar way to the `background-origin`
    property. Refer to [Chapter 4](ch04.html "Chapter 4. CSS Properties – Part 1"),
    *CSS Properties – Part 1*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Now, this property can be used in both HTML and SVG elements. However, there
    are some keyword values that apply to one that won't work on the other.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple comma-separated keyword values can be present in the same declaration.
    Each value represents its corresponding image in the comma-separates values of
    the `mask-image` property.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML keyword values are `border-box`, `padding-box`, `margin-box`, and `content-box`.
  prefs: []
  type: TYPE_NORMAL
- en: The SVG keyword values are `view-box`, `fill-box`, and `stroke-box`.
  prefs: []
  type: TYPE_NORMAL
- en: '`border-box`: The origin starts at the top left corner of the border box. It
    will include the border and any padding (if any is declared) when applying the
    mask, but it will not go beyond that border.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding-box`: The origin starts at the top-left corner of the padding box.
    It will include the padding when applying the mask, but it will not include any
    borders if any are declared.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`margin-box`: The origin starts at the top-left corner of the margin box. It
    will include the margin, the border, and the padding when applying the mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content-box`: The origin starts at the top-left corner of the content box.
    It will include only the *content* area. No margins, padding, or borders are taken
    into consideration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view-box`: It uses the closest SVG viewport as a reference box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fill-box`: The position of the mask is relative to the *object bounding box*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stroke-box`: The position of the mask is relative to the *stroke bounding
    box*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: mask-position
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mask-position` CSS property defines the starting position of the mask,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property works similar to the `background-position` property. Refer to
    [Chapter 4](ch04.html "Chapter 4. CSS Properties – Part 1"), *CSS Properties –
    Part 1*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple comma-separated keyword values can be present in the same declaration.
    Each value represents its corresponding image in the comma-separates values of
    the `mask-image` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `mask-position` CSS property supports several types of values: four *keyword*
    values, `top`, `right`, `bottom`, and `left`; a *length* value, `px`, `em`, `in`,
    `mm`, `cm`, `vw`, and so on; and a *percentage* value such as 50%, 85%, and so
    on.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: mask-repeat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mask-repeat` CSS property defines whether a mask layer is repeated or
    not, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property works in a similar way to the `background-repeat` property. Refer
    to [Chapter 4](ch04.html "Chapter 4. CSS Properties – Part 1"), *CSS Properties
    – Part 1*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple comma-separated keyword values can be present in the same declaration.
    Each value represents its corresponding image in the comma-separates values of
    the `mask-image` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'It supports six keyword values: `repeat`, `no-repeat`, `repeat-x`, `repeat-y`,
    `space`, and `round`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`repeat`: The mask will be repeated on both the *X* and *Y* axes. This is the
    default value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no-repeat`: The mask is not repeated on any axis. The mask image is displayed
    only once.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repeat-x`: The mask is repeated on the *X* axis (horizontally).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repeat-y`: The mask is repeated on the *Y* axis (vertically).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`space`: The mask is repeated as many times as possible without being clipped
    or cut in both the *X* and *Y* axes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`round`: Similar to the space value, the difference is that the mask images
    are rescaled in order to fit the specified direction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: mask-size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mask-size` CSS property defines the dimensions or size of a mask image,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `mask-size` property works similar to the `background-size` property. Refer
    to [Chapter 4](ch04.html "Chapter 4. CSS Properties – Part 1"), *CSS Properties
    – Part 1*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple comma-separated keyword values can be present in the same declaration.
    Each value represents its corresponding image in the comma-separates values of
    the `mask-image` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `mask-position` CSS property supports several types of value: a *length*
    value, a *percentage* value, and three *keyword* values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Length value`: This is when we use one of the following units: `px`, `em`,
    `in`, `mm`, `cm`, `vw`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Percentage value`: This is when we use percentages such as 50%, 85%, and so
    on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contain`: This scales the image mask without distorting its aspect ratio to
    fit the maximum width or height of the element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cover`: This scales the image mask and distorts it if necessary in order to
    fit the maximum width or height of the element. If the image mask is larger on
    its width or height, it will get clipped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto`: This scales the image mask to the actual size of the image''s intrinsic
    proportions without distorting it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: mask-type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `mask-type` CSS property is specifically for SVG files. It specifies if
    an SVG `<mask>` element is an *alpha* or a *luminance* mask.
  prefs: []
  type: TYPE_NORMAL
- en: For the definitions of *alpha* and *luminance* masks, refer to the `mask-mode`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: mask-border
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mask-border` CSS property is the shorthand for the `mask-border-source`,
    `mask-border-mode`, `mask-border-slice`, `mask-border-width`, `mask-border-outset`,
    and `mask-border-repeat` properties. It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the shorthand is recommended because any values that are not declared
    are set to their initial values, thus making it easier to override down the road,
    minimizing the use of the `!important` directive.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: mask-border-source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `mask-border-source` CSS property defines an image that is to be used in
    the `border-image` declaration.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: mask-border-mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `mask-border-mode` CSS property defines whether the image used for the mask
    is an *alpha* mask or a *luminance* mask.
  prefs: []
  type: TYPE_NORMAL
- en: For the definitions of *alpha* and *luminance* masks, refer to the `mask-mode`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: mask-border-slice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mask-border-slice` CSS property is used to **slice** the image into nine
    parts, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Think of this example: take a square image and trace two vertical lines and
    then two horizontal lines. We end up with nine parts, like **Tic-Tac-Toe**, on
    top of the image.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This property supports one, two, three, or four keyword offset values: `top`,
    `right`, `bottom`, `left`, and `fill`. These values, except `fill`, can be declared
    using either a *number* value without a unit or a *percentage* value using 50%,
    85%, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: If one value is declared, all four sides take that value. If two values are
    declared, the first value is for the top and bottom sides, and the second value
    for the left and right sides. If three values are declared, then the first value
    is for the top side, the second value is for the left and right sides, and the
    third for the bottom side. If four values are declared, they correspond to top,
    right, bottom, and left sides.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When declaring a unitless value with a bitmap image mask, the value is interpreted
    as if it were pixels.
  prefs: []
  type: TYPE_NORMAL
- en: fill
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: By default, the center of the image mask is discarded and treated as empty.
    If this value is present, the center will be taken into account and will become
    part of the mask.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: mask-border-width
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mask-border-width` CSS property scales the mask image slices created by
    the `mask-border-slices` property, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This `mask-border-width` property supports one, two, three, or four keyword
    offset values: `top`, `right`, `bottom`, `left`, and `auto`. These values, except
    `auto`, can be declared using either a *number* value without a unit, or a *percentage*
    value such as 50%, 85%, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: If one value is declared, all four sides take that value. If two values are
    declared, the first value is for the top and bottom sides, and the second value
    for the left and right sides. If three values are declared, then the first value
    is for the top side, the second value is for the left and right sides, and the
    third for the bottom side. If four values are declared, they correspond to top,
    right, bottom and left sides.
  prefs: []
  type: TYPE_NORMAL
- en: auto
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It makes the mask border use the intrinsic width or height of the image slice.
    The browser is the one that decides if it needs to use this intrinsic width or
    height or not.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: mask-border-outset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mask-border-outset` CSS property defines the amount the border mask image
    area extends beyond its border box, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property supports one, two, three, or four keyword outset values: `top`,
    `right`, `bottom`, and `left`. These values can be declared using either a *number*
    value without a unit, or a *length* value using `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on. The *number* value without a unit is a multiplier of the `border-width`
    property of the element.'
  prefs: []
  type: TYPE_NORMAL
- en: If one value is declared, all four sides take that value. If two values are
    declared, the first value is for the top and bottom sides, and the second value
    for the left and right sides. If three values are declared, then the first value
    is for the top side, the second value is for the left and right sides, and the
    third for the bottom side. If four values are declared, they correspond to the
    top, right, bottom and left sides.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: mask-border-repeat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `mask-border-repeat` CSS property defines how the image mask for all four
    sides and the center are scaled and tiled (repeated) around the element, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `mask-border-repeat` property supports one or two keyword values. The values
    are: `repeat`, `round`, `stretch` and `space`.'
  prefs: []
  type: TYPE_NORMAL
- en: repeat
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The mask border image is tiled (repeated). Under certain circumstances, the
    image mask can be clipped on the edges showing only part of it.
  prefs: []
  type: TYPE_NORMAL
- en: round
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This works in a similar way to `repeat`; the difference is that the image mask
    is scaled to fit exactly in the allotted distance without clipping the image mask.
  prefs: []
  type: TYPE_NORMAL
- en: stretch
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value. The image mask is stretched to completely fill the
    area.
  prefs: []
  type: TYPE_NORMAL
- en: space
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Similar to `repeat`, but the difference is that if the area isn't filled with
    complete image masks, it will distribute the space around the tiles.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: clip-path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `clip-path` CSS property is used to partially or fully hide parts of an
    element and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can say that `clip-path` is a form of *masking*. The difference is that clipping
    uses a vector graphic to do the clipping, rather than a bitmap/raster image.
  prefs: []
  type: TYPE_NORMAL
- en: This vector graphic can be a *basic shape* or an *SVG path*.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: The `clip` CSS property is now deprecated due to poor features and limitations
    with SVGs. The current and widely supported `clip-path` property is part of the
    SVG specification, and it''s been adopted by the CSS masking module.'
  prefs: []
  type: TYPE_NORMAL
- en: The `clip-path` CSS property combined with the `shape-outside` property can
    create amazing layouts. With this combination, we can make a paragraph "*curve*"
    around a clipped element whose basic shape is also a curve or circle.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property supports four values: three *functions*: `url()`, a *shape*,
    a *geometry box*, and one *keyword* value `none`.'
  prefs: []
  type: TYPE_NORMAL
- en: url()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This CSS function points to an SVG `clipPath` element that will be used as the
    clipping path.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: circle()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This CSS function declares a circle as a clipping path. This function accepts
    two arguments: a *shape radius* and a *position*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shape radius**: It defines the radius of the circle. It supports a *length*,
    a *percentage*, and two *keyword* values. Negative values are not allowed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The two keyword values are: `closest-side` or `farthest-side`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`closest-side`: This is the default value. If this value is not declared, the
    browser will take the length from the center of the circle to its closest side,
    and create a circle based on that distance. With this, the circle never bleeds
    or overflows the content, it''s always complete.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`farthest-side`: This value will create a circle by taking the length from
    the center to the farthest side. This means that if the element has a side that
    is longer than the other, the circle will bleed or overflow on the opposite sides.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Position**: It defines the location of the circle. The position value is
    preceded by the `at` word. If this value is not declared, the circle will be positioned
    at the center of the element. The values for this argument are the same as those
    of the `background-position` property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: ellipse()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This CSS function declares an ellipse as a clipping path. It takes the same
    arguments as the `circle()` function; the only difference is that it accepts two
    radii values, `rx` and `ry`, for the shape radius instead of one. `rx` represents
    the *X* axis and `ry` the *Y* axis.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: inset()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This CSS function defines a rectangle shape inside the element. It can take
    one, two, three, or four offset values. The syntax is the same as the syntax of
    the `margin` property.
  prefs: []
  type: TYPE_NORMAL
- en: It supports a *length* and a *percentage* value.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the `inset()` function also supports a `border-radius` value,
    which is optional. This value must be preceded by the term `round` before any
    *length* or *percentages* are declared.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: polygon()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This CSS function is used to declare more various types of shapes, usually irregular
    ones that are different from a square, a circle or an ellipse.
  prefs: []
  type: TYPE_NORMAL
- en: '*Coordinate pairs* are used to declare the points of the polygon; each pair
    specifies the position of a point. The first argument represents the X-position
    and the second argument, the Y-position coordinates. The first and last coordinate
    points are closed automatically by the browser. The coordinate values are comma-separated
    and support a *length* or a *percentage* value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, creating polygons by hand is not only a major undertaking but it could
    be very time consuming. The best solution is to use a tool for the creation process:'
  prefs: []
  type: TYPE_NORMAL
- en: Bennet Feely's *Clippy* ([http://bennettfeely.com/clippy/](http://bennettfeely.com/clippy/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Clip Path* *Generator* ([http://cssplant.com/clip-path-generator](http://cssplant.com/clip-path-generator))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: none
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no clipping path that gets created.
  prefs: []
  type: TYPE_NORMAL
- en: Image rendering and orientation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Making sure images display correctly is not only a designer's responsibility,
    we as web designers and developers also have a say in how images behave and display
    under particular circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how to change the orientation and rendering quality of images with
    CSS.
  prefs: []
  type: TYPE_NORMAL
- en: image-orientation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `image-orientation` CSS property defines the rotation that we can apply
    to an image, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many images contain information about the settings used to take a picture, such
    as ISO speed, aperture, shutter speed, camera model, white balance, date and time,
    and so on. This information is called **EXIF Data**, and CSS uses this data for
    image orientation purposes. It also supports one or two values in a single declaration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `image-orientation` property supports two keyword values and an *angle*
    value: `from-image`, `flip`, and an *angle* value.'
  prefs: []
  type: TYPE_NORMAL
- en: '`from-image`: The image is rotated using the EXIF Data contained in the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flip`: The image is flipped horizontally; it''s reflected. This value should
    go after the *angle* value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Angle value`: This defines the rotation applied to the image. It uses a number
    followed by the `deg` unit. This value should go before the `flip` keyword value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: image-rendering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `image-rendering` CSS property defines what type of algorithm the browser
    should use to render scaled images, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `image-rendering` CSS property works for either downscaled or upscaled
    images. This property supports three keyword values: `auto`, `crisp-edges`, and
    `pixelated`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`auto`: This is the default value. When an image is either scaled up or down,
    this property *smooths* or blurs the image in order to preserve the best appearance
    possible. However, sometimes this may produce undesired results, depending on
    the type of image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crisp-edges`: This property does not apply any smoothing or blurring to the
    image. It preservers its contrast, edges, and color. This property was exclusively
    created for pixel art.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixelated`: This property only works on images that have been scaled up via
    the **nearest** **neighbor** algorithm, which makes the image look like it was
    made with large pixels. This is useful when scaling up *checkered* patterns like
    a chessboard, a checkerboard, or QR codes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: User interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following properties are directly tied to UX Design but on the frontend.
    Addressing the following properties from the beginning of any build can go a long
    way.
  prefs: []
  type: TYPE_NORMAL
- en: Let's check them out.
  prefs: []
  type: TYPE_NORMAL
- en: cursor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `cursor` CSS property defines the style of the pointer, and it looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `cursor` property is meant to work only in the hover state; this property
    is not meant to replace the styling of the pointer in its *normal* state.
  prefs: []
  type: TYPE_NORMAL
- en: All operating system have many types of cursors for all types of behaviors,
    so whenever we need a certain action a cursor for it may already exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use custom cursors. Keep in mind the following notes:'
  prefs: []
  type: TYPE_NORMAL
- en: It's recommended that the image of the cursor is 32 x 32 pixels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's required to declare a built-in cursor to act as a fallback in case the
    custom image(s) doesn't load.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Legacy versions of IE require an absolute path to the image of the custom cursor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use `.cur` or `.png` files for custom cursors. However, legacy IEs only
    support the `.cur` extension.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `cursor` CSS property can accept one or multiple values in the same declaration.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property supports the following values: a `URL`, `X` and `Y` coordinates,
    and 32 keyword values.'
  prefs: []
  type: TYPE_NORMAL
- en: A URL (or URI)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The URL is used for custom cursors. It's the path to the image. Several URLs
    can be defined in the same declaration. Thus, several custom cursors can be used.
    If declaring more than one URL, the values are comma-separated.
  prefs: []
  type: TYPE_NORMAL
- en: It's mandatory that after the declaration of the URL, a native non-URL value
    should be declared. This is so if everything else fails, the user can still use
    the pointer. This value is optional.
  prefs: []
  type: TYPE_NORMAL
- en: X and Y coordinates
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `X` and `Y` coordinates are used to align the custom cursor with the right
    hotspot. These coordinates are just two numbers without a unit and separated only
    by a space.
  prefs: []
  type: TYPE_NORMAL
- en: Negative numbers are not allowed and the values range from `0` to `32`.
  prefs: []
  type: TYPE_NORMAL
- en: 32 keyword values
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The keyword values use the operating system or browser native cursors. There's
    practically a cursor for any pointer action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a list of the 32 keyword values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`alias`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`all-scroll`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cell`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`col-resize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context-menu`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`copy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crosshair`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`e-resize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ew-resize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`help`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`move`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n-resize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ne-resize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nesw-resize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no-drop`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`none`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`not-allowed`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ns-resize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nw-resize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nwse-resize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pointer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`progress`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`row-resize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s-resize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`se-resize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sw-resize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vertical-text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`w-resize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wait`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the most commonly used values are `default`, `move`, `pointer`, and
    `text`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`default`: This sets the default pointer. This is the arrow pointer we all
    know.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`move`: This sets the *move* pointer. It looks like a large plus sign with
    arrows on all four ends.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pointer`: This sets the pointer to the "hand" icon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text`: This sets the *text* pointer. It usually looks like a serif capital
    "`I`" but taller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See all cursors in action here: [http://tiny.cc/cursor](http://tiny.cc/cursor)'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: pointer-events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `pointer-events` CSS property controls when an element in the document
    can become a target of mouse/touch events, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One particularity of `pointer-events` is as shown in the following example:
    say we have two containers where they considerably overlap. If we apply `pointer-events:
    none;` to the element on top, the clicking/tapping goes through that element and
    targets the content in the bottom one. Basically, we can select the content on
    the bottom element even if we''re clicking/tapping on the element on top.'
  prefs: []
  type: TYPE_NORMAL
- en: This property supports ten keyword values. However, only two are related to
    HTML; all the rest are part of the SVG specification, which is out of the scope
    of this guide.
  prefs: []
  type: TYPE_NORMAL
- en: Those HTML-related values are `none` and `auto`.
  prefs: []
  type: TYPE_NORMAL
- en: none
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: No mouse/touch events will act on the element. However, if the element has descendants
    with `pointer-events` set to a different value, those descendent elements will
    trigger mouse events.
  prefs: []
  type: TYPE_NORMAL
- en: auto
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value. This acts as if no `pointer-events` were declared.
  prefs: []
  type: TYPE_NORMAL
- en: 'More info on MDN can be found here: [http://tiny.cc/mdn-pointer-events](http://tiny.cc/mdn-pointer-events)'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: outline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `outline` CSS property creates a border around an element to provide a visual
    cue that it's active or has gained focus.
  prefs: []
  type: TYPE_NORMAL
- en: This property is the shorthand for the `outline-color`, `outline-width` `and
    outline-style` properties. For convenience, it's recommended to always use this
    shorthand rather than separate properties when declaring `outline`.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between `outline` and `border` is that `outline` doesn't take
    up space; it's created on top of the content, so the layout is never affected
    by it.
  prefs: []
  type: TYPE_NORMAL
- en: However, declaring the `outline` values is exactly the same as declaring the
    `border` values.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `outline` CSS property supports three values represented in longhand properties:
    the *color*, the *width*, and the *style*. All three values are required and can
    appear in any order in the declaration.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color`: This is mapped to the `outline-color` property. It''s the color of
    the outline. It supports all color modes: `HEX`, `RGB`, `RGBa`, `HSL`, `HSLs`,
    and color name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width`: This is mapped to the `outline-width` property. It''s the thickness
    of the outline. It supports any length value, such as `px`, `em`, `in`, `mm`,
    `cm`, `vw`, and so on. Percentage values are not valid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style`: This is mapped to the `outline-style` property. It''s the type of
    line to be used. It takes the same values as border: `dashed`, `dotted`, `double`,
    `groove`, `hidden`, `inset`, `none`, `outset`, `ridge`, and `solid`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 3-Dimensional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The power of CSS is mind-boggling; not only can we do amazing animations just
    with CSS, but CSS can also handle three-dimensional designs.
  prefs: []
  type: TYPE_NORMAL
- en: Let's check out the properties that allows us to do so.
  prefs: []
  type: TYPE_NORMAL
- en: perspective
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `perspective` CSS property defines the distance between the screen and
    the user in the *Z* axis, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind that the `perspective` property is applied to the parent element
    in order to enable a 3D canvas or space in which its child elements will move.
  prefs: []
  type: TYPE_NORMAL
- en: This property accepts a keyword value, `normal`, and a *length* value.
  prefs: []
  type: TYPE_NORMAL
- en: normal
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: No perspective is defined on the parent element.
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: The lower the value, the closer the elements will move in the *Z* axis. Thus,
    the perspective is more pronounced. With higher values, the perspective effect
    is less intense.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: perspective-origin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `perspective-origin` CSS property defines the origin of the *X* and *Y*
    axis of an element in a 3D space, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is what is known as the **vanishing point** used by the `perspective`
    property. The `perspective-origin` property supports a combination of three types
    of value: a *length* value, a *percentage* value, and five keyword values in both
    *X* and *Y* axes.'
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages like 50%, 85%, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Keyword values
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The five keyword values are `top`, `right`, `bottom`, `left`, and `center`.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding to the prior CSS from the `perspective` example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: backface-visibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `backface-visibility` CSS property defines whether the rear face of an
    element that''s facing the viewer is visible or not, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `backface-visibility` property supports two self-explanatory keyword values:
    `visible` and `hidden`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: And this is it for the CSS Properties chapters, quite a ride eh?
  prefs: []
  type: TYPE_NORMAL
- en: In this final chapter we learned how to work with the Page Box's properties
    like bleed and marks for printing. We also learned that HTML lists are used for
    many other things like menus, navigation, slideshow, and so on, amongst other
    things like CSS counters and how to create custom styles for list marks.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the effect of depth with drop shadows is quite easy with the `box-shadow`
    property. Just don't overdo it. Then we learned about display and visibility,
    one of the most important features of CSS. In this section we learned how to clear
    floating elements as well in addition to applying filters to images and elements
    alike.
  prefs: []
  type: TYPE_NORMAL
- en: Masking and clipping elements isn't so difficult after all, we can use either
    bitmaps or vectors depending on our specific circumstances. This led us to understand
    better how to work with images and their orientation.
  prefs: []
  type: TYPE_NORMAL
- en: Then we talked about some User Interface features like creating custom cursors
    or adapting the default cursor to change depending on its context.
  prefs: []
  type: TYPE_NORMAL
- en: And finally we learned about the 3D properties like `perspective` and `backface-visiblity`
    that allow us to do pretty cool things with CSS only.
  prefs: []
  type: TYPE_NORMAL
- en: The following chapter about CSS functions is going to take what we've seen so
    far to a new level of possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Let's fly.
  prefs: []
  type: TYPE_NORMAL
