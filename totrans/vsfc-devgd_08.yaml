- en: Chapter 8. Best Practices for Visualforce Developments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visualforce pages are the replacement for Salesforce standard pages. When we
    use Visualforce pages, the delay experiences and unexpected behaviors must not
    be there. Therefore, we have to follow the best practices to improve the user
    experience and coding standards during the Visualforce developments, in order
    to improve the user experience. There are some situations and components where
    we can apply some best practices. This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing component IDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page block components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controllers and controller extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving Visualforce's performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering PDFs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using component facets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's build Visualforce pages with super performance…
  prefs: []
  type: TYPE_NORMAL
- en: Accessing component IDs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we refer Visualforce components in JavaScript, the ID attribute plays
    a major role. Every Visualforce component has an ID attribute. The ID attribute
    must be specified to a particular component in order to refer to it in JavaScript
    and it is used to bind the two components together. When the page is rendered,
    this ID attribute is a part of DOM ID of the particular component. The ID attribute
    must be unique as well. The following best practices are applied for accessing
    component IDs:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `$Component` global variable to simplify access. For an example, when
    we have an input field with `id="inputOne"` within a page block with `id="blockOne"`,
    we can access the input field with the `$Component.blockOne.inputOne` expression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No need to specify an ID for a component you want to access if it is an ancestor
    or sibling to the `$Component` variable in the Visualforce component's hierarchy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page block components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `<apex:pageBlockSectionItem>` component can have only two child components.
    With the customer requirements and the developing requirements, there can be more
    than two child elements inside `<apex:pageBlockSectionItem>`. Using `<apex:outputPanel>`
    we can add more than two elements in `<apex:pageBlockSectionItem>` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Controllers and controller extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we are developing controllers and controller extensions that are associated
    to Visualforce pages, we need to adhere to the following best practices:'
  prefs: []
  type: TYPE_NORMAL
- en: By using the `with sharing` keyword, we can enforce the sharing rules in controllers.
    Then the code will execute in the user mode instead of the system mode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We must not depend on the setter method to be executed before the constructor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We must not depend on the execution order or side effects while creating custom
    methods in a custom controller or a controller extension.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not use DML operations inside a loop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While performing record filtering, add filters in the following order:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In SOQL
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In Apex
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In Visualforce
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If possible, calculations must be performed in SOQL instead of Apex.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving Visualforce's performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The performance of a Visualforce page is a key factor to consider in development
    because performance is a reason that effects the end user''s satisfaction of the
    application. The following are the best practices to improve Visualforce''s performance:'
  prefs: []
  type: TYPE_NORMAL
- en: Use only one `<apex:form>` tag per Visualforce page because each `<apex:form>`
    tag adds a view state to the page. A Visualforce page has a limit for view state
    size that is 135 KB. We can decrease the loading time of a Visualforce page by
    reducing the view state size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to use the transient keyword in custom controller as much as possible. The
    state is not maintained for transient instance variables. If a particular instance
    is used only in the page request, then it must not be a part of view state. It
    will help to reduce the view state size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using an SOQL query to refer data of a particular object, use only the
    relevant data in the SOQL query.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When designing the Visualforce page, do not overload the page with excessive
    functionality and more data. Overloaded pages will increase the view state, page
    size, heap size, and risk hitting the governor limits for the view state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To decrease the loading time of a Visualforce page:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not use SOQL queries in getter methods
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Frequently-used or global data must be cached
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce the number of records displayed in the page by using the built-in pagination
    of `standardSetControllers` or limiting the data in SOQL queries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We can increase the time interval for calling the Apex controller by using the
    `<apex:actionPoller>` component to reduce the delays in multiple concurrent requests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the SOQL `OFFSET` to implement the pagination of a specific subset of results
    within SOQL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we have large quantities of read-only data in an organization, then we must
    use a custom object or custom setting to store that data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `<apex:repeat>` to iterate over large collections.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not hardcode pick list values in the Visualforce page, and use the controller
    to add them to a `selectOption` list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the lazy loading approach to reduce or delay the loading of data according
    to the essentiality. In lazy loading, the essential features will be loaded first
    and others will be delayed until the user''s action. To lazy load, we can:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `rerender` attribute to perform a partial page load
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use JavaScript remoting to call actions in the controller
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When using CSS in Visualforce pages, we have to be careful. The performance
    of Visualforce is directly affected by the optimization of the Visualforce. Here
    are some tips to increase the performance of CSS:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use separate CSS files and refer to them in the Visualforce page (instead of
    writing the CSS code in the page itself). This will reduce the file size.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a single CSS file instead of using multiple CSS files. This will reduce
    the number of HTTP requests.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to CSS files via static resources because it has a in-built caching mechanism.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When creating pages that have totally customized CSS (not using Salesforce CSS),
    do not forget to set the attribute of `showHeaders` and `standardStylesheets`
    of the `<apex:page>` tag to `false`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When using JavaScript in Visualforce pages, we have to optimize them to increase
    the performance of Visualforce. Here are some tips to increase the performance
    of JavaScript:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use separate JavaScript files and refer to them in the Visualforce page (instead
    of writing JavaScript in the page itself). This will reduce the size of individual
    pages taking advantage of browser caching.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a single JavaScript file instead of using multiple JavaScript files. This
    will reduce the number of HTTP requests and remove duplicate functions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use customized versions of JavaScript libraries which include only the required
    functions. This will reduce the file size.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If possible, use the `<script>` tag to include JavaScript in the Visualforce
    page and place it right before the `</apex:page>` closing tag. This will avoid
    loading of JavaScript before any other content in the Visualforce page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Eliminate unwanted comments and whitespaces to reduce the file size and for
    faster downloads.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `escapeSingleQuotes` method to avoid SOQL and SOSL injection attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Images frequently play a major role in a Visualforce page. Therefore we have
    to optimize the usage of images in Visualforce pages using the following tips:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the CSS sprites instead of individual images. Using sprites, we can combine
    images (similar sized) into a single file. This will reduce the number of images
    used in the page and reduce the number of HTTP requests.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If possible, try to reduce the use of images and motivate the use of CSS.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use static resources to refer to images in a Visualforce page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: View state cannot be viewed with tools such as Firebug because the view state
    data is encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: Static resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Static resources have an in-built caching feature and use the content distribution
    network built into Salesforce. The following are the advantages of using static
    resources to refer to CSS files, images, and JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use a static resource to display the content of another static resource with
    the action attribute of the `<apex:page>` tag. By doing this we can redirect from
    a Visualforce page to a static resource. Suppose we have a PDF as a static resource
    (named as `helpPdf`) and we use that static resource in the action attribute of
    the `<apex:page>` tag as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `URLFOR` function plays a major role here. The redirection will not work
    properly without the `URLFOR` function. This is not limited to PDF; we can use
    any static resource to redirect.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rendering PDFs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we use components in a Visualforce page and the page is rendered as a PDF,
    these components do not always work. We must not use components that depend on
    JavaScript actions and Salesforce standard stylesheets.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following components are safe to use in PDF rendering:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:composition>` (as long as the page contains PDF-safe components)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:facet>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:dataList>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:define>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:include>` (as long as the page contains PDF-safe components)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:insert>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:image>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:repeat>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:outputLabel>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:outputLink>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:outputPanel>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:outputText>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:page>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:panelGrid>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:panelGroup>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:param>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:stylesheet>` (as long as the URL isn''t directly referencing Salesforce
    stylesheets)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:variable>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following components can be used with caution in rendering PDF (others
    are not safe to be used in PDF rendering):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:attribute>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:column>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:component>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:componentBody>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:dataTable>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using component facets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `<apex:facet>` component is used to specify content in an area of a Visualforce
    page and it provides information about the data in the parent component. For example,
    we can use a facet component in the header or footer of a `<apex:dataTable>`.
    We can override the default facet of a Visualforce component by using the `<apex:facet>`
    component. The advantages and disadvantages of the facet component are as follows
    with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<apex:facet>` component cannot be used directly in Apex; it must be a child
    component of another Visualforce component. We can use that in a dynamic component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facets only allow a single child within the start and close tags.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is an example of the `<apex:facet>` component that is used with
    the `<apex:dataTable>` component:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can use the facet component with `<apex:actionSatus>`. It is used to extend
    the displaying status indicator. This is explained in the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was dedicated for explaining the best practices of Visualforce
    developments. In this chapter we became familiar with the best practices to follow
    in order to avoid unexpected behaviors, reduce the delay experience for accessing
    component IDs, page block components, controllers and controller extensions, improving
    Visualforce performance, static resources, rendering PDFs, and using component
    facets. We have seen the way to improve user experience and coding standards.
  prefs: []
  type: TYPE_NORMAL
