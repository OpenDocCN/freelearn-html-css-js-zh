- en: Chapter 11. Highcharts Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we learned about the Highcharts API. In this chapter,
    we will go through Highcharts events handling. We will start the chapter by introducing
    the set of events supported by Highcharts. Then, we will build two web applications
    to cover most of the events; each one explores a different set of events. Although
    the applications are far from perfect and there is plenty of room for improvement,
    the sole purpose is to demonstrate how Highcharts events work. In this chapter,
    we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Launching an Ajax query with a chart `load` event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activating the user interface with a chart `redraw` event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting and unselecting a data point with the point `select` and `unselect`
    events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zooming the selected area with the chart selection event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hovering over a data point with the point `mouseover` and `mouseout` events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the chart `click` event to create plot lines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching a dialog with the series `click` event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching a pie chart with the series `checkboxClick` event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing the pie chart with the point `click`, `update`, and `remove` events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Highcharts events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By now, we have gone through most of the Highcharts configurations, but there
    is one area not yet covered: event handling. Highcharts offers a set of event
    options in several areas such as chart events, series events, and axis base events;
    they are triggered by API calls and user interactions with the chart.'
  prefs: []
  type: TYPE_NORMAL
- en: Highcharts events can be specified through object configuration while creating
    a chart or through APIs that accept object configurations, such as `Chart.addSeries`,
    `Axis.addPlotLine`, and `Axis.addPlotBand`.
  prefs: []
  type: TYPE_NORMAL
- en: An event object is passed by an event handler that contains mouse information
    and specific action data related to the event action. For example, `event.xAxis[0]`
    and `event.yAxis[0]` are stored in the event parameter for the `chart.events.click`
    handler. Inside each event function, the `'this'` keyword can be used and refers
    to a Highcharts component where the event function is based. For example, the
    `'this'` keyword in `chart.events.click` refers to the `chart` object, and the
    `'this'` keyword in `plotOptions.series.events.click` refers to the `series` object
    being clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of Highcharts events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`chart.events`: `addSeries`, `click`, `load`, `redraw`, `selection`, `drilldown`,
    and `drillup`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plotOptions.<series-type>.events`: `click`, `checkboxClick`, `hide`, `mouseover`,
    `mouseout`, `show`, `afterAnimate`, and `legendItemClick`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Alternatively, we can specify event options specifically to a series in the
    series array, such as: `series[ { events: click: function { ... }, .... } ]`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`plotOptions.<series-type>.point.events`: `click`, `mouseover`, `mouseout`,
    `remove`, `select`, `unselect`, `update`, and `legendItemClick`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can define point events for a specific series, as follows: `series[ { point
    : { events: { click: function() { ... } }, ... } ]`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As for defining events for a particular data point in a series, we can specify
    them as follows: `series[ { data: [ { events: { click: function() { ... } } ],
    ... } ]`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`x/yAxis.events`: `setExtremes`, and `afterSetExtremes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x/yAxis.plotBands[x].events` and `x/yAxis.plotLines[x].events`: `click`, `mouseover`,
    `mousemove`, and `mouseout`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Highcharts online documentation provides a comprehensive reference and plenty
    of mini examples; you are strongly advised to refer to that. There is not much
    point in repeating the same exercise. Instead, we will build two slightly sizable
    examples to utilize most of the Highcharts events and demonstrate how these events
    can work together in an application. Since the complete example code is too long
    to list in this chapter, only the relevant parts are edited and shown.
  prefs: []
  type: TYPE_NORMAL
- en: The full demo and source code can be found at [http://www.joekuan.org/Learning_Highcharts/Chapter_11/chart1.html](http://www.joekuan.org/Learning_Highcharts/Chapter_11/chart1.html).
  prefs: []
  type: TYPE_NORMAL
- en: Portfolio history example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This application extends the historical stock chart in the previous chapter
    with an additional investment portfolio feature. The frontend is implemented with
    jQuery and jQuery UI, and the following events are covered in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`chart.events`: `click`, `load`, `redraw`, and `selection`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plotOptions.series.points.events`: `mouseover`, `mouseout`, `select`, and
    `unselect`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xAxis/yAxis.plotLines.events`: `mouseover` and `click`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the startup screen of the demo, with the components labeled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Portfolio history example](img/7451OS_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The application contains a pair of time series charts. The bottom chart is the
    top-level graph that shows the entire historic price movement and points to when
    company shares are bought and sold. The top chart is the detail chart that zooms
    in to the finer details when a selected area is made in the bottom graph.
  prefs: []
  type: TYPE_NORMAL
- en: As soon as the web application is loaded in a browser, both charts are created.
    The top-level chart is configured with a load event that automatically requests
    a stock historic price and portfolio history from the web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a graph after the top-level chart is auto-loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Portfolio history example](img/7451OS_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are circular and triangular data points on top of the top-level chart.
    These denote the trade history. The **B** symbol indicates when the shares have
    been bought, whereas **S** signifies when they are sold. The information below
    the top-level chart is the portfolio detail for the stock as of the current date.
  prefs: []
  type: TYPE_NORMAL
- en: If we click on one of these trade history points, the portfolio detail section
    is updated to reflect the investment history as of the selected date. Moreover,
    when we select an area, it zooms in and displays the stock price movement in the
    detail chart. There are other features involved in event handling and we will
    discuss them in later sections.
  prefs: []
  type: TYPE_NORMAL
- en: The top-level chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the configuration code for the top-level chart (the bottom
    chart shows the entire historic price movement) and we store the `chart` object
    in the `myApp` namespace, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There is a lot going on in this configuration. The chart is defined with most
    of the features disabled, such as legend, title, tooltip, and *y*-axis label.
    More importantly, the chart is configured with a `zoomType` option, which enables
    the chart to be zoomable along the *x*-axis direction; hence, we can use the `select`
    event. The series array is composed of multiple series that also contain event
    configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Constructing the series configuration for a top-level chart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the series array, multiple series are defined with close and open price,
    bought and sold trade dates, and a hidden series for tracking mouse movement in
    the detail chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first series is the historic stock price series and is configured without
    data point markers. The second series is hidden and acts as a placeholder for
    historic open price data in the detail chart. The third (bought) and fourth (sold)
    series are the scatter series revealing the dates when shares have been traded.
    Both series are set with the `allowPointSelect` option, so that we can define
    the `select` and `unselect` events in the `point.events` option. The final series
    is also a scatter series to reflect the mouse movement in the detail chart using
    the `mouseover` and `mouseout` events; we will see how all these are implemented
    later on.
  prefs: []
  type: TYPE_NORMAL
- en: Launching an Ajax query with the chart load event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As mentioned earlier, once the top-level chart is created and loaded on to
    the browser, it is ready to fetch the data from the server. The following is the
    chart''s `load` event handler definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We first retrieve the value from the **My Portfolio** selection box and disable
    the selection box during the query time. Then, we call a predefined function,
    `loadPortfolio`. The method performs several tasks, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Launching an Ajax call, `$.getJSON`, to load the past stock price and portfolio
    data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Setting up a handler for the returned Ajax result that further executes the
    following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hiding the chart loading mask.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Unpacking the returned data and populating series data with it using the `Series.setData`
    method.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Updating the data in the **Portfolio Detail** section to show how much the investment
    is worth as of the current date.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Activating the user interface with the chart redraw event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once the top-level chart is populated with data, we can then enable the **My
    Portfolio** selection box on the page. To do that, we can rely on the `redraw`
    event, which is triggered by the `Series.setData` call in sub-step 2 inside step
    2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Selecting and unselecting a data point with the point select and unselect events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The bought and sold series share the same events handling; the only differences
    between them are the color and the point marker shape. The idea is that, when
    the user clicks on a data point in these series, the **Portfolio Detail** section
    is updated to show the investment detail for the stock as of the trade date. The
    following screenshot shows the effect after the first bought trade point is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting and unselecting a data point with the point select and unselect
    events](img/7451OS_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to keep the data point selected, we will use the `allowPointSelect`
    option, which allows us to define the `select` and `unselect` events. The following
    is the events configuration for the bought and sold series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Basically, the `select` event handler calls a predefined function, `updatePortfolio`,
    that updates the **Portfolio Detail** section based on the selected data point
    time: `this.x`. The `''this''` keyword in the handler refers to the selected point
    object, where `x` is the time value.'
  prefs: []
  type: TYPE_NORMAL
- en: Unselecting the data point will call the `unselect` event handler. The preceding
    implementation means that, if the unselected data point (`this.x`) is the same
    as the previously selected point, then it indicates that the user has unselected
    the same point, so we want to show the portfolio detail as of the current date.
    Otherwise it will do nothing because it means the user has selected another trade
    data point; thus, another `select` event call is made with a different date.
  prefs: []
  type: TYPE_NORMAL
- en: Zooming the selected area with the chart selection event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `selection` event forms the bridge between the top-level chart and the
    detail chart. When we select an area in the top-level chart, the selected area
    is highlighted and the data is zoomed in the detail chart. This action triggers
    the `selection` event and the following is the cut-down code of the event handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There are several steps taken in the handler code. First, we extract the selected
    range values from the handler parameters—`evt.xAxis[0].min` and `evt.xAxis[0].max`.
    The next step is to make the selected area stay highlighted in the top-level chart.
    To do that, we create a plot band using `this.xAxis[0].addPlotBand` over the same
    area to simulate the selection.
  prefs: []
  type: TYPE_NORMAL
- en: The `'this'` keyword refers to the top-level chart object. The next task is
    to give a fixed `id`, so that we can remove the old selection and highlight a
    new selection. Additionally, the plot band should have the same color as the selection
    being dragged on the chart. All we need to do is to assign the plot band color
    to be the same as the default value of the `chart.selectionMarkerFill` option.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we copy the data within the selected range into an array and pass
    it to the detail chart using `Series.setData`. Since we called the `setData` method
    a couple of times, it is worth setting the `redraw` option to `false` to save
    resources and then calling the `redraw` method.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the most important step is to return `false` at the end of the function.
    Returning the `false` Boolean value tells Highcharts not to take the default action
    after the selection has been made. Otherwise the whole top-level chart is redrawn
    and stretched (alternatively, we can call `event.preventDefault()`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot zooms and displays the detail in another chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zooming the selected area with the chart selection event](img/7451OS_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The detail chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The detail chart is simply a line chart showing the selected region from the
    top-level chart. The chart is configured with a tool tip fixed in the upper-left
    corner and a number of events that we will discuss later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot showing a data point being hovered over and the
    tool tip shown in the upper-left corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The detail chart](img/7451OS_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Constructing the series configuration for the detail chart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two series configured in the detail chart. The main focus is the
    first series, which is the stock closed price. The series is defined without data
    point markers and has `''crosshair''` as the `cursor` option, as we can see in
    the preceding screenshot. In addition, the `mouseout` and `mouseover` events are
    defined for the data points that create a marker to the tracker series in the
    top-level chart. We will go through these events in the next section. The series
    array is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Hovering over a data point with the mouseover and mouseout point events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When we move the mouse pointer along the series in the detail chart, the movement
    is also reflected in the top-level chart within the selected area. The following
    screenshot shows the tracker point (the inverted triangle) displayed in the top-level
    chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hovering over a data point with the mouseover and mouseout point events](img/7451OS_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The inverted triangle indicates where we are browsing in the top-level chart.
    To do that, we will set up the `mouseOut` and `mouseOver` point event options
    in the detail chart series, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Inside the `mouseOver` handler, the `'this'` keyword refers to the hovered data
    point object and the `x` and `y` properties refer to the time and price values.
    Since both the top-level and detail charts share the same data type along both
    x and y axes, we can simply add a data point into the tracker series in the top-level
    chart. As for the `mouseOut` event, we reset the series by emptying the data array.
  prefs: []
  type: TYPE_NORMAL
- en: Applying the chart click event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we will apply the chart click event to create a *stop order*
    for investment portfolios. **Stop order** is an investment term for selling or
    buying a stock when it reaches the price threshold within a specified date/time
    range in the future. It is generally used to limit a loss or protect a profit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that there is an empty space at the right-hand side of the top-level
    chart. In fact, this is deliberately created for the next 30-day range from the
    current date. Let''s highlight that area, so that the future date appears in the
    detail chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying the chart click event](img/7451OS_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, the line series in the detail chart stops as soon as it hits
    the current date. If we click on the zone for future dates in the detail chart,
    a **Create Stop Order** dialog box appears. The x, y position of the click on
    the chart is then converted into date and price, which then populates the values
    into the dialog box. The following is the screenshot of the dialog box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying the chart click event](img/7451OS_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The expiry date and price fields can be further adjusted if necessary. Once
    the **Save Order** button is clicked, a stop order is created and a pair of x
    and y plot lines are generated to mark the chart. The following is a screenshot
    showing two stop orders on the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying the chart click event](img/7451OS_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see how all these actions can be derived from the code. First, the jQuery
    UI dialog is created based on an HTML form declared on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `click` event handler for the detail chart is then defined, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The first guard condition is to see whether the detail chart contains any future
    dates. If a future date exists, then it extracts the x and y values from the `click`
    event and assigns them into the form input fields. After that, it calls the jQuery
    UI dialog method to lay out the HTML form in a dialog box and displays it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows how we define the jQuery UI dialog box and
    its action buttons. The code is edited for readability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The dialog box setup code is slightly more complicated. In the **Save Order**
    button''s handler, it performs several tasks, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It extracts the input values from the dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It checks whether the dialog box is opened with a specific stop order `id`.
    If not, then it assigns a new stop order `id` and stores the values with `id`
    into `$.myApp.stopOrders`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It removes any existing plot lines that match with `id`, in case we modify an
    existing stop order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It sets up the `click` and `mouseover` events handling for both x- and y-axis
    plot lines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It creates x and y plot lines in the detail chart with the events definitions
    constructed in step 4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One scenario with stop orders is that users may want to change or delete a stop
    order before the condition is fulfilled. Therefore, in step 4 the purpose of the
    `click` event on plot lines is to bring up a modify dialog box. Additionally,
    we want to change the mouse cursor to a pointer when hovering over the plot lines
    to show that it is clickable.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the mouse cursor over plot lines with the mouseover event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To change the mouse cursor over the plot lines, we define the `mouseover` event
    handler, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `''this''` keyword contains an axis object that the hovered plot line belongs
    to. Since there can be multiple plot lines in each axis, we need to loop through
    the array of plot lines and plot bands that can be found in the `plotLinesAndBands`
    property inside the axis object. Once we have found the target plot line by matching
    `id`, we will dig into the internal element and set the cursor style to `''pointer''`.
    The following screenshot shows a mouse cursor hovered over the plot line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the mouse cursor over plot lines with the mouseover event](img/7451OS_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up a plot line action with the click event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `click` event for plot lines launches the **Modify Stop Order** dialog
    box for a stop order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `click` event handler simply retrieves the stop order settings and puts
    the values inside the **Modify Stop Order** dialog box. Before launching the dialog
    box, add a **Remove Order** button into the dialog box that the button handler
    calls `removePlotLine`, with the plot line `id`. The following is a screenshot
    of the **Create Stop Order** dialog box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a plot line action with the click event](img/7451OS_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Stock growth chart example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our next example (for the online demo, see [http://joekuan.org/Learning_Highcharts/Chapter_11/chart2.html](http://joekuan.org/Learning_Highcharts/Chapter_11/chart2.html))
    is to demonstrate the following events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`chart.events`: `addSeries`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plotOptions.series.events`: `click`, `checkboxClick`, and `legendItemClick`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plotOptions.series.point.events`: `update` and `remove`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suppose that we want to draft a long-term investment portfolio based on past
    stock growth performance as a reference. The demo contains a chart started with
    two series, Portfolio and Average growth, and a form to input stock symbols. Basically,
    we enter a stock symbol in this demo, and then a line series of stock growth is
    inserted into the chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we can plot multiple stock yield trends and tweak their proportion in our
    portfolio to observe how the **Average** and **Portfolio** lines perform. The
    following screenshot shows the initial screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stock growth chart example](img/7451OS_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Plotting averaging series from displayed stock series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s query for two stocks and click on the **Average** legend to enable the
    series:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plotting averaging series from displayed stock series](img/7451OS_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As expected, the **Average** line is plotted between the two stock lines. Assuming
    that future growth is similar to the past, this **Average** line projects future
    growth if we invest in both stocks equally for our portfolio. Let''s add another
    stock symbol onto the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plotting averaging series from displayed stock series](img/7451OS_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The new growth line generates a higher yield so that the **Average** line automatically
    re-adjusts itself and shifts to become the second line from the top. Let''s see
    how it is implemented. The following is the chart configuration code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The chart contains three series: Portfolio, Average, and a pie chart series
    to edit the portfolio distribution.'
  prefs: []
  type: TYPE_NORMAL
- en: When we hit the **Add** button with a stock symbol, the `showLoading` method
    is called to put a loading mask in front of the chart, and then an Ajax connection
    is established with the server to query the stock yield data. We implement the
    Ajax handler by calling the `addSeries` function to insert a new series into the
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the `addSeries` event is triggered, it means that the data has been returned
    and is ready to plot. In this case, we can disable the chart loading mask, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the implementation of the **Add** button action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We build a series configuration object from the Ajax returned data. Within this
    new series configuration, we set the `showCheckbox` option to `true` for a checkbox
    next to the legend item. A couple of events are also added into the configuration,
    `click` and `checkboxClick`, and are discussed later.
  prefs: []
  type: TYPE_NORMAL
- en: After the `addSeries` method call, we then call a predefined routine, `updateAvg`,
    that only recomputes and redraws the **Average** line if it is on display.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recalling from the preceding Average series events definition, we use the `legendItemClick`
    event to capture when the Average series is clicked in the legend box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code means that, if the Average series is not currently in a visible
    state, then the series will be visible after this handler returns. Hence, it calculates
    the average values and shows the series.
  prefs: []
  type: TYPE_NORMAL
- en: Launching a dialog with the series click event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of enabling or disabling a stock yield line by clicking on the legend
    item, we may want to completely remove the series line. In this scenario, we use
    the `click` event to do that, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The click action launches a confirmation dialog box for removing the series
    from the chart. We store the clicked series (the `''this''` keyword) information
    inside the dialog box. The **Remove** button''s button handler uses that data
    to remove the series and recalculate the average series if it is shown. The following
    is the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching a dialog with the series click event](img/7451OS_11_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Launching a pie chart with the series checkboxClick event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inside the legend box, each checkbox is used to include the stock in the portfolio.
    As soon as the checkbox is checked, a pie chart appears in the upper-left corner
    showing the distribution of the stock within the portfolio. Each slice in the
    pie chart shares the same color with the corresponding stock line. The following
    screenshot shows three growth lines and a portfolio pie chart equally distributed
    for each stock:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching a pie chart with the series checkboxClick event](img/7451OS_11_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since the growth line series is configured with the `showCheckbox` option,
    we can define the `checkboxClick` event to launch a pie chart when the checkbox
    is checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `updatePie` function is called in several places in this demo, for example,
    to remove a series, when the legend checkbox is checked, and so on. The following
    is the shortened version of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code snippet basically loops through the stock series array and
    checks whether it is selected. If so, then it includes stock in the pie series
    in an equally distributed manner. Then the pie chart is displayed if there are
    one or more entries.
  prefs: []
  type: TYPE_NORMAL
- en: Editing the pie chart's slice with the data point's click, update, and remove
    events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is unlikely that an investment portfolio will have an equal distribution
    of all stocks. Therefore, we can enhance the example by modifying portions within
    the pie chart. When a slice of the pie chart is clicked, a dialog box pops up.
    This allows us to adjust or remove the portion within the portfolio. The following
    screenshot shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing the pie chart''s slice with the data point''s click, update, and
    remove events](img/7451OS_11_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Update** button in the **Update Portfolio** dialog box updates the pie
    chart slice with the `Point.update` method, whereas the **Remove** button calls
    the `Point.remove` method. Both calls trigger the `update` and `remove` events
    respectively. Here, we define the data point''s `click`, `update`, and `remove`
    events inside the pie chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `click` event function stores the clicked slice (the point object) inside
    the Modify dialog box and launches it. Inside the dialog box, the **Update** and
    **Remove** buttons'' button handlers then extract these stored point object, call
    the pie chart, and use the objects'' update or remove method to reflect the change
    in the displayed pie chart. This subsequently triggers point `update` or `remove`
    event handlers and calls the predefined function, `updatePortfolio`, that recalculates
    the Portfolio series, with the new distribution among the included stocks. So
    let''s update the distribution for the best past performance stock to an 80 percent
    ratio and the other two stocks to 10 percent each. The Portfolio series automatically
    readjusts itself from the `update` event, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing the pie chart''s slice with the data point''s click, update, and
    remove events](img/7451OS_11_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, the Portfolio series (the second line from the top) has been
    weighted towards the higher growth trend rather than being in the middle of all
    the stocks, like the Average series.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we covered the last part of Highcharts configuration: events
    handling. We built two share portfolio applications using jQuery and jQuery UI
    to demonstrate most of the Highcharts events.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will bring Highcharts to mobile devices with jQuery
    Mobile.
  prefs: []
  type: TYPE_NORMAL
