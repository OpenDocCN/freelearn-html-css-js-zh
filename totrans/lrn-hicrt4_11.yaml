- en: Chapter 11. Highcharts Events
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。Highcharts 事件
- en: 'In the previous chapter, we learned about the Highcharts API. In this chapter,
    we will go through Highcharts events handling. We will start the chapter by introducing
    the set of events supported by Highcharts. Then, we will build two web applications
    to cover most of the events; each one explores a different set of events. Although
    the applications are far from perfect and there is plenty of room for improvement,
    the sole purpose is to demonstrate how Highcharts events work. In this chapter,
    we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了 Highcharts API。在本章中，我们将学习 Highcharts 事件处理。我们将从介绍 Highcharts 支持的事件集开始本章。然后，我们将构建两个网络应用程序来涵盖大多数事件；每个应用程序探索不同的事件集。尽管这些应用程序远非完美，并且有大量的改进空间，但唯一目的是演示
    Highcharts 事件的工作原理。在本章中，我们将涵盖以下主题：
- en: Launching an Ajax query with a chart `load` event
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图表 `load` 事件启动 Ajax 查询
- en: Activating the user interface with a chart `redraw` event
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图表 `redraw` 事件激活用户界面
- en: Selecting and unselecting a data point with the point `select` and `unselect`
    events
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用点 `select` 和 `unselect` 事件选择和取消选择数据点
- en: Zooming the selected area with the chart selection event
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图表选择事件缩放所选区域
- en: Hovering over a data point with the point `mouseover` and `mouseout` events
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用点 `mouseover` 和 `mouseout` 事件悬停在数据点上
- en: Using the chart `click` event to create plot lines
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图表 `click` 事件创建绘图线
- en: Launching a dialog with the series `click` event
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用系列 `click` 事件启动对话框
- en: Launching a pie chart with the series `checkboxClick` event
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用系列 `checkboxClick` 事件启动饼图
- en: Editing the pie chart with the point `click`, `update`, and `remove` events
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `click`、`update` 和 `remove` 事件编辑饼图
- en: Introducing Highcharts events
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Highcharts 事件
- en: 'By now, we have gone through most of the Highcharts configurations, but there
    is one area not yet covered: event handling. Highcharts offers a set of event
    options in several areas such as chart events, series events, and axis base events;
    they are triggered by API calls and user interactions with the chart.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了大部分 Highcharts 的配置，但还有一个领域尚未涉及：事件处理。Highcharts 在多个区域提供了一套事件选项，例如图表事件、系列事件和轴基本事件；它们通过
    API 调用和用户与图表的交互触发。
- en: Highcharts events can be specified through object configuration while creating
    a chart or through APIs that accept object configurations, such as `Chart.addSeries`,
    `Axis.addPlotLine`, and `Axis.addPlotBand`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts 事件可以通过创建图表时通过对象配置指定，也可以通过接受对象配置的 API 指定，例如 `Chart.addSeries`、`Axis.addPlotLine`
    和 `Axis.addPlotBand`。
- en: An event object is passed by an event handler that contains mouse information
    and specific action data related to the event action. For example, `event.xAxis[0]`
    and `event.yAxis[0]` are stored in the event parameter for the `chart.events.click`
    handler. Inside each event function, the `'this'` keyword can be used and refers
    to a Highcharts component where the event function is based. For example, the
    `'this'` keyword in `chart.events.click` refers to the `chart` object, and the
    `'this'` keyword in `plotOptions.series.events.click` refers to the `series` object
    being clicked.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序通过事件对象传递，该对象包含鼠标信息和与事件操作相关的特定动作数据。例如，`event.xAxis[0]` 和 `event.yAxis[0]`
    存储在 `chart.events.click` 处理程序的参数中。在事件函数内部，可以使用 `'this'` 关键字，它指向基于事件函数的 Highcharts
    组件。例如，`chart.events.click` 中的 `'this'` 关键字指向 `chart` 对象，而 `plotOptions.series.events.click`
    中的 `'this'` 关键字指向被点击的 `series` 对象。
- en: 'The following is a list of Highcharts events:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 Highcharts 事件的列表：
- en: '`chart.events`: `addSeries`, `click`, `load`, `redraw`, `selection`, `drilldown`,
    and `drillup`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chart.events`: `addSeries`、`click`、`load`、`redraw`、`selection`、`drilldown`
    和 `drillup`'
- en: '`plotOptions.<series-type>.events`: `click`, `checkboxClick`, `hide`, `mouseover`,
    `mouseout`, `show`, `afterAnimate`, and `legendItemClick`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plotOptions.<series-type>.events`: `click`、`checkboxClick`、`hide`、`mouseover`、`mouseout`、`show`、`afterAnimate`
    和 `legendItemClick`'
- en: Note
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Alternatively, we can specify event options specifically to a series in the
    series array, such as: `series[ { events: click: function { ... }, .... } ]`.'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '或者，我们可以在系列数组中为特定系列指定事件选项，例如：`series[ { events: click: function { ... }, ...
    } ]`。'
- en: '`plotOptions.<series-type>.point.events`: `click`, `mouseover`, `mouseout`,
    `remove`, `select`, `unselect`, `update`, and `legendItemClick`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plotOptions.<series-type>.point.events`: `click`、`mouseover`、`mouseout`、`remove`、`select`、`unselect`、`update`
    和 `legendItemClick`'
- en: Note
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'We can define point events for a specific series, as follows: `series[ { point
    : { events: { click: function() { ... } }, ... } ]`.'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '我们可以为特定系列定义点事件，如下所示：`series[ { point : { events: { click: function() { ...
    } }, ... } } ]`。'
- en: 'As for defining events for a particular data point in a series, we can specify
    them as follows: `series[ { data: [ { events: { click: function() { ... } } ],
    ... } ]`.'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '对于在系列中的特定数据点定义事件，我们可以如下指定：`series[ { data: [ { events: { click: function()
    { ... } } ], ... } ]`。'
- en: '`x/yAxis.events`: `setExtremes`, and `afterSetExtremes`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x/yAxis.events`：`setExtremes` 和 `afterSetExtremes`'
- en: '`x/yAxis.plotBands[x].events` and `x/yAxis.plotLines[x].events`: `click`, `mouseover`,
    `mousemove`, and `mouseout`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x/yAxis.plotBands[x].events` 和 `x/yAxis.plotLines[x].events`：`click`、`mouseover`、`mousemove`
    和 `mouseout`'
- en: The Highcharts online documentation provides a comprehensive reference and plenty
    of mini examples; you are strongly advised to refer to that. There is not much
    point in repeating the same exercise. Instead, we will build two slightly sizable
    examples to utilize most of the Highcharts events and demonstrate how these events
    can work together in an application. Since the complete example code is too long
    to list in this chapter, only the relevant parts are edited and shown.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts 在线文档提供了全面的参考和大量的迷你示例；强烈建议您查阅。重复相同的练习没有太大意义。相反，我们将构建两个稍微大一点的示例，以利用大多数
    Highcharts 事件，并展示这些事件如何在应用程序中协同工作。由于完整的示例代码太长，无法在本章中列出，因此只编辑并展示了相关部分。
- en: The full demo and source code can be found at [http://www.joekuan.org/Learning_Highcharts/Chapter_11/chart1.html](http://www.joekuan.org/Learning_Highcharts/Chapter_11/chart1.html).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示和源代码可以在[http://www.joekuan.org/Learning_Highcharts/Chapter_11/chart1.html](http://www.joekuan.org/Learning_Highcharts/Chapter_11/chart1.html)找到。
- en: Portfolio history example
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 投资组合历史示例
- en: 'This application extends the historical stock chart in the previous chapter
    with an additional investment portfolio feature. The frontend is implemented with
    jQuery and jQuery UI, and the following events are covered in this example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序扩展了上一章中的历史股票图表，并添加了额外的投资组合功能。前端使用 jQuery 和 jQuery UI 实现，以下事件在本示例中得到了覆盖：
- en: '`chart.events`: `click`, `load`, `redraw`, and `selection`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chart.events`：`click`、`load`、`redraw` 和 `selection`'
- en: '`plotOptions.series.points.events`: `mouseover`, `mouseout`, `select`, and
    `unselect`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plotOptions.series.points.events`：`mouseover`、`mouseout`、`select` 和 `unselect`'
- en: '`xAxis/yAxis.plotLines.events`: `mouseover` and `click`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xAxis/yAxis.plotLines.events`：`mouseover` 和 `click`'
- en: 'The following is the startup screen of the demo, with the components labeled:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为演示的启动屏幕，其中组件已标注：
- en: '![Portfolio history example](img/7451OS_11_01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![投资组合历史示例](img/7451OS_11_01.jpg)'
- en: The application contains a pair of time series charts. The bottom chart is the
    top-level graph that shows the entire historic price movement and points to when
    company shares are bought and sold. The top chart is the detail chart that zooms
    in to the finer details when a selected area is made in the bottom graph.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序包含一对时间序列图表。底部图表是显示整个历史价格走势并指向公司股票购买和卖出时间的顶级图表。顶部图表是详细图表，当在底部图表中创建选区时，它会放大以显示更详细的细节。
- en: As soon as the web application is loaded in a browser, both charts are created.
    The top-level chart is configured with a load event that automatically requests
    a stock historic price and portfolio history from the web server.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在浏览器中加载了网络应用程序，就会创建两个图表。顶级图表配置了一个加载事件，该事件会自动从网络服务器请求股票历史价格和投资组合历史。
- en: 'The following screenshot shows a graph after the top-level chart is auto-loaded:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了自动加载顶级图表后的图形：
- en: '![Portfolio history example](img/7451OS_11_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![投资组合历史示例](img/7451OS_11_02.jpg)'
- en: There are circular and triangular data points on top of the top-level chart.
    These denote the trade history. The **B** symbol indicates when the shares have
    been bought, whereas **S** signifies when they are sold. The information below
    the top-level chart is the portfolio detail for the stock as of the current date.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶级图表上方有圆形和三角形的数据点。这些表示交易历史。**B**符号表示股票被购买时，而**S**符号表示股票被卖出时。顶级图表下方的信息是截至当前日期的股票投资组合详情。
- en: If we click on one of these trade history points, the portfolio detail section
    is updated to reflect the investment history as of the selected date. Moreover,
    when we select an area, it zooms in and displays the stock price movement in the
    detail chart. There are other features involved in event handling and we will
    discuss them in later sections.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击这些交易历史点之一，投资组合详情部分将更新以反映所选日期的投资历史。此外，当我们选择一个区域时，它会在详细图表中放大并显示股价走势。事件处理中涉及其他功能，我们将在后面的章节中讨论它们。
- en: The top-level chart
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 顶级图表
- en: 'The following is the configuration code for the top-level chart (the bottom
    chart shows the entire historic price movement) and we store the `chart` object
    in the `myApp` namespace, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为顶级图表（底部图表显示整个历史价格走势）的配置代码，我们将`chart`对象存储在`myApp`命名空间中，如下所示：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There is a lot going on in this configuration. The chart is defined with most
    of the features disabled, such as legend, title, tooltip, and *y*-axis label.
    More importantly, the chart is configured with a `zoomType` option, which enables
    the chart to be zoomable along the *x*-axis direction; hence, we can use the `select`
    event. The series array is composed of multiple series that also contain event
    configurations.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配置中有很多事情在进行。图表定义时大部分功能都被禁用，例如图例、标题、工具提示和*y*轴标签。更重要的是，图表配置了`zoomType`选项，这使得图表可以沿*x*轴方向缩放；因此，我们可以使用`select`事件。系列数组由多个系列组成，这些系列也包含事件配置。
- en: Constructing the series configuration for a top-level chart
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建顶级图表的系列配置
- en: 'In the series array, multiple series are defined with close and open price,
    bought and sold trade dates, and a hidden series for tracking mouse movement in
    the detail chart:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在系列数组中，定义了多个系列，包括开盘价和收盘价、买入和卖出交易日期，以及一个用于跟踪详细图表中鼠标移动的隐藏系列：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first series is the historic stock price series and is configured without
    data point markers. The second series is hidden and acts as a placeholder for
    historic open price data in the detail chart. The third (bought) and fourth (sold)
    series are the scatter series revealing the dates when shares have been traded.
    Both series are set with the `allowPointSelect` option, so that we can define
    the `select` and `unselect` events in the `point.events` option. The final series
    is also a scatter series to reflect the mouse movement in the detail chart using
    the `mouseover` and `mouseout` events; we will see how all these are implemented
    later on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第一系列是历史股价系列，配置时没有数据点标记。第二系列是隐藏的，并在详细图表中作为历史开盘价数据的占位符。第三（买入）和第四（卖出）系列是散点系列，揭示了股票交易的具体日期。这两个系列都设置了`allowPointSelect`选项，因此我们可以在`point.events`选项中定义`select`和`unselect`事件。最后一个系列也是一个散点系列，使用`mouseover`和`mouseout`事件来反映详细图表中的鼠标移动；我们将在稍后看到这些是如何实现的。
- en: Launching an Ajax query with the chart load event
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用图表加载事件启动Ajax查询
- en: 'As mentioned earlier, once the top-level chart is created and loaded on to
    the browser, it is ready to fetch the data from the server. The following is the
    chart''s `load` event handler definition:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，一旦顶级图表创建并加载到浏览器中，它就可以从服务器获取数据。以下是为该图表的`load`事件处理器定义：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We first retrieve the value from the **My Portfolio** selection box and disable
    the selection box during the query time. Then, we call a predefined function,
    `loadPortfolio`. The method performs several tasks, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从**我的投资组合**选择框中检索值，并在查询期间禁用选择框。然后，我们调用一个预定义的函数`loadPortfolio`。该方法执行多个任务，如下所示：
- en: Launching an Ajax call, `$.getJSON`, to load the past stock price and portfolio
    data.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Ajax调用`$.getJSON`来加载过去的股价和投资组合数据。
- en: 'Setting up a handler for the returned Ajax result that further executes the
    following steps:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置处理返回的Ajax结果的处理器，以进一步执行以下步骤：
- en: Hiding the chart loading mask.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 隐藏图表加载遮罩。
- en: Unpacking the returned data and populating series data with it using the `Series.setData`
    method.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解包返回的数据，并使用`Series.setData`方法将其填充到系列数据中。
- en: Updating the data in the **Portfolio Detail** section to show how much the investment
    is worth as of the current date.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新**投资组合详情**部分的数据，以显示截至当前日期的投资价值。
- en: Activating the user interface with the chart redraw event
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用图表重绘事件激活用户界面
- en: 'Once the top-level chart is populated with data, we can then enable the **My
    Portfolio** selection box on the page. To do that, we can rely on the `redraw`
    event, which is triggered by the `Series.setData` call in sub-step 2 inside step
    2:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦顶级图表填充了数据，我们就可以在页面上启用**我的投资组合**选择框。为此，我们可以依赖于`redraw`事件，该事件由步骤2中的子步骤2中的`Series.setData`调用触发：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Selecting and unselecting a data point with the point select and unselect events
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用点选择和取消选择事件选择和取消选择数据点
- en: 'The bought and sold series share the same events handling; the only differences
    between them are the color and the point marker shape. The idea is that, when
    the user clicks on a data point in these series, the **Portfolio Detail** section
    is updated to show the investment detail for the stock as of the trade date. The
    following screenshot shows the effect after the first bought trade point is selected:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 购买和销售系列具有相同的事件处理；它们之间的唯一区别是颜色和点标记形状。想法是，当用户点击这些系列中的数据点时，**投资详情**部分会更新以显示交易日期的股票投资详情。以下截图显示了选择第一次购买交易点后的效果：
- en: '![Selecting and unselecting a data point with the point select and unselect
    events](img/7451OS_11_03.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![使用点选择和取消选择事件选择和取消选择数据点](img/7451OS_11_03.jpg)'
- en: 'In order to keep the data point selected, we will use the `allowPointSelect`
    option, which allows us to define the `select` and `unselect` events. The following
    is the events configuration for the bought and sold series:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持数据点被选中，我们将使用 `allowPointSelect` 选项，它允许我们定义 `select` 和 `unselect` 事件。以下是购买和销售系列的事件配置：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Basically, the `select` event handler calls a predefined function, `updatePortfolio`,
    that updates the **Portfolio Detail** section based on the selected data point
    time: `this.x`. The `''this''` keyword in the handler refers to the selected point
    object, where `x` is the time value.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，`select` 事件处理器调用一个预定义的函数，`updatePortfolio`，根据所选数据点的时间：`this.x` 更新 **投资详情**
    部分。处理器中的 `'this'` 关键字指的是所选点对象，其中 `x` 是时间值。
- en: Unselecting the data point will call the `unselect` event handler. The preceding
    implementation means that, if the unselected data point (`this.x`) is the same
    as the previously selected point, then it indicates that the user has unselected
    the same point, so we want to show the portfolio detail as of the current date.
    Otherwise it will do nothing because it means the user has selected another trade
    data point; thus, another `select` event call is made with a different date.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 取消选择数据点将调用 `unselect` 事件处理器。前面的实现意味着，如果未选择的数据点 (`this.x`) 与之前选择的数据点相同，那么这表明用户取消选择了相同的数据点，因此我们希望显示当前日期的投资详情。否则，它将不执行任何操作，因为这表示用户已选择另一个交易数据点；因此，将使用不同日期调用另一个
    `select` 事件。
- en: Zooming the selected area with the chart selection event
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用图表选择事件放大所选区域
- en: 'The `selection` event forms the bridge between the top-level chart and the
    detail chart. When we select an area in the top-level chart, the selected area
    is highlighted and the data is zoomed in the detail chart. This action triggers
    the `selection` event and the following is the cut-down code of the event handler:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`selection` 事件在顶层图表和详细图表之间形成桥梁。当我们选择顶层图表中的区域时，所选区域会被突出显示，详细图表中的数据会被放大。这个动作会触发
    `selection` 事件，以下是对事件处理器的简化代码：'
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are several steps taken in the handler code. First, we extract the selected
    range values from the handler parameters—`evt.xAxis[0].min` and `evt.xAxis[0].max`.
    The next step is to make the selected area stay highlighted in the top-level chart.
    To do that, we create a plot band using `this.xAxis[0].addPlotBand` over the same
    area to simulate the selection.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器代码中包含几个步骤。首先，我们从处理器参数中提取所选范围值——`evt.xAxis[0].min` 和 `evt.xAxis[0].max`。下一步是使所选区域在顶层图表中保持突出显示。为此，我们使用
    `this.xAxis[0].addPlotBand` 在相同区域创建一个绘图带以模拟选择。
- en: The `'this'` keyword refers to the top-level chart object. The next task is
    to give a fixed `id`, so that we can remove the old selection and highlight a
    new selection. Additionally, the plot band should have the same color as the selection
    being dragged on the chart. All we need to do is to assign the plot band color
    to be the same as the default value of the `chart.selectionMarkerFill` option.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`''this''` 关键字指的是顶层图表对象。接下来的任务是赋予一个固定的 `id`，以便我们可以移除旧的选择并突出显示新的选择。此外，绘图带应该与图表上被拖动的选择具有相同的颜色。我们所需做的只是将绘图带颜色赋值为
    `chart.selectionMarkerFill` 选项的默认值。'
- en: After that, we copy the data within the selected range into an array and pass
    it to the detail chart using `Series.setData`. Since we called the `setData` method
    a couple of times, it is worth setting the `redraw` option to `false` to save
    resources and then calling the `redraw` method.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将所选范围内的数据复制到一个数组中，并使用 `Series.setData` 将其传递给详细图表。由于我们多次调用了 `setData` 方法，因此将
    `redraw` 选项设置为 `false` 以节省资源，然后调用 `redraw` 方法。
- en: Finally, the most important step is to return `false` at the end of the function.
    Returning the `false` Boolean value tells Highcharts not to take the default action
    after the selection has been made. Otherwise the whole top-level chart is redrawn
    and stretched (alternatively, we can call `event.preventDefault()`).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，最重要的步骤是在函数末尾返回`false`。返回`false`布尔值告诉Highcharts在做出选择后不要采取默认操作。否则，整个顶级图表将被重新绘制并拉伸（或者，我们也可以调用`event.preventDefault()`）。
- en: 'The following screenshot zooms and displays the detail in another chart:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图放大并显示另一个图表的详细信息：
- en: '![Zooming the selected area with the chart selection event](img/7451OS_11_04.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![使用图表选择事件放大所选区域](img/7451OS_11_04.jpg)'
- en: The detail chart
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 详细图表
- en: 'The detail chart is simply a line chart showing the selected region from the
    top-level chart. The chart is configured with a tool tip fixed in the upper-left
    corner and a number of events that we will discuss later:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 详细图表只是一个折线图，显示了从顶级图表中选择的区域。图表配置了一个固定在上左角的工具提示和我们将要讨论的一些事件：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following is a screenshot showing a data point being hovered over and the
    tool tip shown in the upper-left corner:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个截图，显示了悬停的数据点以及显示在上左角的工具提示：
- en: '![The detail chart](img/7451OS_11_05.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![详细图表](img/7451OS_11_05.jpg)'
- en: Constructing the series configuration for the detail chart
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建详细图表的系列配置
- en: 'There are two series configured in the detail chart. The main focus is the
    first series, which is the stock closed price. The series is defined without data
    point markers and has `''crosshair''` as the `cursor` option, as we can see in
    the preceding screenshot. In addition, the `mouseout` and `mouseover` events are
    defined for the data points that create a marker to the tracker series in the
    top-level chart. We will go through these events in the next section. The series
    array is defined as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 详细图表中配置了两个系列。主要关注的是第一个系列，即股票收盘价。该系列没有数据点标记，并将`'crosshair'`作为`cursor`选项，正如我们在前面的截图中所见。此外，为创建顶级图表中追踪系列标记的数据点定义了`mouseout`和`mouseover`事件。我们将在下一节中讨论这些事件。系列数组定义如下：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Hovering over a data point with the mouseover and mouseout point events
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用鼠标悬停和鼠标移出事件悬停在数据点上
- en: 'When we move the mouse pointer along the series in the detail chart, the movement
    is also reflected in the top-level chart within the selected area. The following
    screenshot shows the tracker point (the inverted triangle) displayed in the top-level
    chart:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在详细图表的系列上移动鼠标指针时，该移动也会在所选区域内的顶级图表中反映出来。以下截图显示了在顶级图表中显示的追踪点（倒三角形）：
- en: '![Hovering over a data point with the mouseover and mouseout point events](img/7451OS_11_06.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![使用鼠标悬停和鼠标移出事件悬停在数据点上](img/7451OS_11_06.jpg)'
- en: 'The inverted triangle indicates where we are browsing in the top-level chart.
    To do that, we will set up the `mouseOut` and `mouseOver` point event options
    in the detail chart series, as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 倒三角形表示我们在顶级图表中浏览的位置。为此，我们将在详细图表系列中设置`mouseOut`和`mouseOver`点事件选项，如下所示：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Inside the `mouseOver` handler, the `'this'` keyword refers to the hovered data
    point object and the `x` and `y` properties refer to the time and price values.
    Since both the top-level and detail charts share the same data type along both
    x and y axes, we can simply add a data point into the tracker series in the top-level
    chart. As for the `mouseOut` event, we reset the series by emptying the data array.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mouseOver`处理程序内部，`'this'`关键字指向悬停的数据点对象，而`x`和`y`属性指向时间和价格值。由于顶级图表和详细图表在x和y轴上共享相同的数据类型，我们只需简单地将一个数据点添加到顶级图表的追踪系列中。至于`mouseOut`事件，我们通过清空数据数组来重置系列。
- en: Applying the chart click event
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用图表点击事件
- en: In this section, we will apply the chart click event to create a *stop order*
    for investment portfolios. **Stop order** is an investment term for selling or
    buying a stock when it reaches the price threshold within a specified date/time
    range in the future. It is generally used to limit a loss or protect a profit.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将应用图表点击事件来为投资组合创建一个*止损订单*。**止损订单**是一个投资术语，指的是在未来指定日期/时间范围内，当股票达到价格阈值时卖出或买入股票。它通常用于限制损失或保护利润。
- en: 'Notice that there is an empty space at the right-hand side of the top-level
    chart. In fact, this is deliberately created for the next 30-day range from the
    current date. Let''s highlight that area, so that the future date appears in the
    detail chart:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，顶层图表的右侧有一个空白区域。实际上，这是故意创建的，用于从当前日期开始的下一个30天范围。让我们突出显示该区域，以便未来日期出现在详细图表中：
- en: '![Applying the chart click event](img/7451OS_11_07.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![应用图表点击事件](img/7451OS_11_07.jpg)'
- en: 'As we can see, the line series in the detail chart stops as soon as it hits
    the current date. If we click on the zone for future dates in the detail chart,
    a **Create Stop Order** dialog box appears. The x, y position of the click on
    the chart is then converted into date and price, which then populates the values
    into the dialog box. The following is the screenshot of the dialog box:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，详细图表中的线条系列在触及当前日期时立即停止。如果我们点击详细图表中未来日期的区域，将出现一个**创建停止订单**对话框。然后，图表上点击的x，y位置被转换为日期和价格，这些值随后被填充到对话框中。以下是对话框的截图：
- en: '![Applying the chart click event](img/7451OS_11_08.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![应用图表点击事件](img/7451OS_11_08.jpg)'
- en: 'The expiry date and price fields can be further adjusted if necessary. Once
    the **Save Order** button is clicked, a stop order is created and a pair of x
    and y plot lines are generated to mark the chart. The following is a screenshot
    showing two stop orders on the chart:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，可以进一步调整到期日期和价格字段。一旦点击**保存订单**按钮，就会创建一个停止订单，并生成一对x和y绘图线来标记图表。以下是在图表上显示两个停止订单的截图：
- en: '![Applying the chart click event](img/7451OS_11_09.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![应用图表点击事件](img/7451OS_11_09.jpg)'
- en: 'Let''s see how all these actions can be derived from the code. First, the jQuery
    UI dialog is created based on an HTML form declared on the page:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看所有这些操作如何从代码中推导出来。首先，基于页面上声明的HTML表单创建jQuery UI对话框：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `click` event handler for the detail chart is then defined, as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后定义详细图表的`click`事件处理程序，如下所示：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The first guard condition is to see whether the detail chart contains any future
    dates. If a future date exists, then it extracts the x and y values from the `click`
    event and assigns them into the form input fields. After that, it calls the jQuery
    UI dialog method to lay out the HTML form in a dialog box and displays it.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个保护条件是查看详细图表中是否包含任何未来日期。如果存在未来日期，那么它将从`click`事件中提取x和y值，并将它们分配到表单输入字段中。之后，它调用jQuery
    UI对话框方法，在对话框中布局HTML表单，并显示它。
- en: 'The following code snippet shows how we define the jQuery UI dialog box and
    its action buttons. The code is edited for readability:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了如何定义jQuery UI对话框及其操作按钮。代码已编辑以提高可读性：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The dialog box setup code is slightly more complicated. In the **Save Order**
    button''s handler, it performs several tasks, as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框设置代码稍微复杂一些。在**保存订单**按钮的处理程序中，它执行以下几个任务：
- en: It extracts the input values from the dialog box.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它从对话框中提取输入值。
- en: It checks whether the dialog box is opened with a specific stop order `id`.
    If not, then it assigns a new stop order `id` and stores the values with `id`
    into `$.myApp.stopOrders`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它检查对话框是否以特定的停止订单`id`打开。如果没有，则分配一个新的停止订单`id`，并将带有`id`的值存储到`$.myApp.stopOrders`中。
- en: It removes any existing plot lines that match with `id`, in case we modify an
    existing stop order.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们修改现有的停止订单，它会删除任何与`id`匹配的现有绘图线。
- en: It sets up the `click` and `mouseover` events handling for both x- and y-axis
    plot lines.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它为x轴和y轴的绘图线设置`click`和`mouseover`事件处理程序。
- en: It creates x and y plot lines in the detail chart with the events definitions
    constructed in step 4.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它在详细图表中使用在第4步中构建的事件定义创建x和y绘图线。
- en: One scenario with stop orders is that users may want to change or delete a stop
    order before the condition is fulfilled. Therefore, in step 4 the purpose of the
    `click` event on plot lines is to bring up a modify dialog box. Additionally,
    we want to change the mouse cursor to a pointer when hovering over the plot lines
    to show that it is clickable.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含停止订单的场景是，用户可能在条件满足之前想要更改或删除一个停止订单。因此，在第4步中，绘图线上的`click`事件的目的就是弹出修改对话框。此外，我们希望在鼠标悬停在绘图线上时将鼠标光标更改为指针，以显示它是可点击的。
- en: Changing the mouse cursor over plot lines with the mouseover event
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用鼠标悬停事件更改绘图线上的鼠标光标
- en: 'To change the mouse cursor over the plot lines, we define the `mouseover` event
    handler, as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改绘图线上的鼠标光标，我们定义了如下`mouseover`事件处理程序：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `''this''` keyword contains an axis object that the hovered plot line belongs
    to. Since there can be multiple plot lines in each axis, we need to loop through
    the array of plot lines and plot bands that can be found in the `plotLinesAndBands`
    property inside the axis object. Once we have found the target plot line by matching
    `id`, we will dig into the internal element and set the cursor style to `''pointer''`.
    The following screenshot shows a mouse cursor hovered over the plot line:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`this`关键字包含一个轴对象，悬停的绘图线属于该轴。由于每个轴可以有多个绘图线，我们需要遍历轴对象中`plotLinesAndBands`属性内的绘图线和绘图带数组。一旦通过匹配`id`找到目标绘图线，我们将深入内部元素并设置光标样式为`''pointer''`。以下截图显示了鼠标光标悬停在绘图线上：'
- en: '![Changing the mouse cursor over plot lines with the mouseover event](img/7451OS_11_10.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![使用鼠标悬停事件更改绘图线上的鼠标光标](img/7451OS_11_10.jpg)'
- en: Setting up a plot line action with the click event
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用点击事件设置绘图线动作
- en: 'The `click` event for plot lines launches the **Modify Stop Order** dialog
    box for a stop order:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图线的`click`事件启动**修改停止订单**对话框以进行停止订单：
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `click` event handler simply retrieves the stop order settings and puts
    the values inside the **Modify Stop Order** dialog box. Before launching the dialog
    box, add a **Remove Order** button into the dialog box that the button handler
    calls `removePlotLine`, with the plot line `id`. The following is a screenshot
    of the **Create Stop Order** dialog box:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`click`事件处理程序简单地检索停止订单设置，并将值放入**修改停止订单**对话框中。在启动对话框之前，将一个**移除订单**按钮添加到对话框中，按钮处理程序调用`removePlotLine`，并带有绘图线`id`。以下是对**创建停止订单**对话框的截图：'
- en: '![Setting up a plot line action with the click event](img/7451OS_11_11.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![使用点击事件设置绘图线动作](img/7451OS_11_11.jpg)'
- en: Stock growth chart example
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 股票增长图表示例
- en: 'Our next example (for the online demo, see [http://joekuan.org/Learning_Highcharts/Chapter_11/chart2.html](http://joekuan.org/Learning_Highcharts/Chapter_11/chart2.html))
    is to demonstrate the following events:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的示例（对于在线演示，请参阅[http://joekuan.org/Learning_Highcharts/Chapter_11/chart2.html](http://joekuan.org/Learning_Highcharts/Chapter_11/chart2.html)）是为了演示以下事件：
- en: '`chart.events`: `addSeries`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chart.events`: `addSeries`'
- en: '`plotOptions.series.events`: `click`, `checkboxClick`, and `legendItemClick`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plotOptions.series.events`: `click`, `checkboxClick`, 和 `legendItemClick`'
- en: '`plotOptions.series.point.events`: `update` and `remove`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plotOptions.series.point.events`: `update` 和 `remove`'
- en: Suppose that we want to draft a long-term investment portfolio based on past
    stock growth performance as a reference. The demo contains a chart started with
    two series, Portfolio and Average growth, and a form to input stock symbols. Basically,
    we enter a stock symbol in this demo, and then a line series of stock growth is
    inserted into the chart.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要根据过去的股票增长表现来制定一个长期投资组合。演示中包含了一个从两个系列开始的图表，即“投资组合”和“平均增长”，以及一个输入股票代码的表单。基本上，在这个演示中，我们输入一个股票代码，然后一个股票增长线系列就被插入到图表中。
- en: 'So we can plot multiple stock yield trends and tweak their proportion in our
    portfolio to observe how the **Average** and **Portfolio** lines perform. The
    following screenshot shows the initial screen:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以绘制多个股票收益趋势，并调整它们在投资组合中的比例，以观察**平均**线和**投资组合**线的表现。以下截图显示了初始屏幕：
- en: '![Stock growth chart example](img/7451OS_11_12.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![股票增长图表示例](img/7451OS_11_12.jpg)'
- en: Plotting averaging series from displayed stock series
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从显示的股票系列中绘制平均系列
- en: 'Let''s query for two stocks and click on the **Average** legend to enable the
    series:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查询两只股票，并点击**平均**图例以启用系列：
- en: '![Plotting averaging series from displayed stock series](img/7451OS_11_13.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![从显示的股票系列中绘制平均系列](img/7451OS_11_13.jpg)'
- en: 'As expected, the **Average** line is plotted between the two stock lines. Assuming
    that future growth is similar to the past, this **Average** line projects future
    growth if we invest in both stocks equally for our portfolio. Let''s add another
    stock symbol onto the chart:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，**平均**线绘制在两条股票线之间。假设未来的增长与过去相似，如果我们对投资组合中的两只股票进行等额投资，**平均**线将预测未来的增长。让我们在图表上添加另一个股票代码：
- en: '![Plotting averaging series from displayed stock series](img/7451OS_11_14.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![从显示的股票系列中绘制平均系列](img/7451OS_11_14.jpg)'
- en: 'The new growth line generates a higher yield so that the **Average** line automatically
    re-adjusts itself and shifts to become the second line from the top. Let''s see
    how it is implemented. The following is the chart configuration code:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 新的增长线产生更高的收益，因此**平均**线自动调整并移动到顶部第二行。让我们看看它是如何实现的。以下是对应的图表配置代码：
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The chart contains three series: Portfolio, Average, and a pie chart series
    to edit the portfolio distribution.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图表包含三个系列：投资组合、平均和用于编辑投资组合分布的饼图系列。
- en: When we hit the **Add** button with a stock symbol, the `showLoading` method
    is called to put a loading mask in front of the chart, and then an Ajax connection
    is established with the server to query the stock yield data. We implement the
    Ajax handler by calling the `addSeries` function to insert a new series into the
    chart.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击带有股票代码的**添加**按钮时，调用`showLoading`方法在图表前放置一个加载遮罩，然后与服务器建立Ajax连接以查询股票收益数据。我们通过调用`addSeries`函数将新系列插入图表来实现Ajax处理程序。
- en: 'Once the `addSeries` event is triggered, it means that the data has been returned
    and is ready to plot. In this case, we can disable the chart loading mask, as
    follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦触发`addSeries`事件，这意味着数据已经返回并准备好绘图。在这种情况下，我们可以禁用图表加载遮罩，如下所示：
- en: '[PRE15]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following is the implementation of the **Add** button action:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实现**添加**按钮动作的代码：
- en: '[PRE16]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We build a series configuration object from the Ajax returned data. Within this
    new series configuration, we set the `showCheckbox` option to `true` for a checkbox
    next to the legend item. A couple of events are also added into the configuration,
    `click` and `checkboxClick`, and are discussed later.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从Ajax返回的数据中构建一个系列配置对象。在这个新的系列配置中，我们将图例项旁边的复选框的`showCheckbox`选项设置为`true`。配置中还添加了几个事件，`click`和`checkboxClick`，稍后讨论。
- en: After the `addSeries` method call, we then call a predefined routine, `updateAvg`,
    that only recomputes and redraws the **Average** line if it is on display.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`addSeries`方法之后，我们接着调用一个预定义的例程`updateAvg`，它只重新计算并重新绘制显示的**平均**线。
- en: 'Recalling from the preceding Average series events definition, we use the `legendItemClick`
    event to capture when the Average series is clicked in the legend box:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的平均系列事件定义中回忆，我们使用`legendItemClick`事件来捕捉在图例框中点击平均系列的情况：
- en: '[PRE17]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding code means that, if the Average series is not currently in a visible
    state, then the series will be visible after this handler returns. Hence, it calculates
    the average values and shows the series.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码意味着，如果平均系列当前不在可见状态，那么在处理程序返回后，系列将变为可见。因此，它计算平均值并显示系列。
- en: Launching a dialog with the series click event
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用系列点击事件启动对话框
- en: 'Instead of enabling or disabling a stock yield line by clicking on the legend
    item, we may want to completely remove the series line. In this scenario, we use
    the `click` event to do that, as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是通过点击图例项来启用或禁用股票收益线，而是可能想要完全移除系列线。在这种情况下，我们使用`click`事件来完成，如下所示：
- en: '[PRE18]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The click action launches a confirmation dialog box for removing the series
    from the chart. We store the clicked series (the `''this''` keyword) information
    inside the dialog box. The **Remove** button''s button handler uses that data
    to remove the series and recalculate the average series if it is shown. The following
    is the screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 点击动作启动一个确认对话框，用于从图表中移除系列。我们在对话框中存储被点击的系列（`'this'`关键字）信息。**移除**按钮的处理程序使用这些数据来移除系列，并在显示的情况下重新计算平均系列。以下截图显示了这一过程：
- en: '![Launching a dialog with the series click event](img/7451OS_11_15.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![使用系列点击事件启动对话框](img/7451OS_11_15.jpg)'
- en: Launching a pie chart with the series checkboxClick event
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用系列复选框点击事件启动饼图
- en: 'Inside the legend box, each checkbox is used to include the stock in the portfolio.
    As soon as the checkbox is checked, a pie chart appears in the upper-left corner
    showing the distribution of the stock within the portfolio. Each slice in the
    pie chart shares the same color with the corresponding stock line. The following
    screenshot shows three growth lines and a portfolio pie chart equally distributed
    for each stock:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在图例框内，每个复选框用于将股票包含在投资组合中。一旦复选框被勾选，一个饼图就会出现在左上角，显示股票在投资组合中的分布。饼图中的每一块与相应的股票线共享相同的颜色。以下截图显示了三个增长线和为每个股票均匀分布的投资组合饼图：
- en: '![Launching a pie chart with the series checkboxClick event](img/7451OS_11_16.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![使用系列复选框点击事件启动饼图](img/7451OS_11_16.jpg)'
- en: 'Since the growth line series is configured with the `showCheckbox` option,
    we can define the `checkboxClick` event to launch a pie chart when the checkbox
    is checked:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 由于增长线系列配置了`showCheckbox`选项，我们可以定义`checkboxClick`事件，当复选框被勾选时启动饼图：
- en: '[PRE19]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `updatePie` function is called in several places in this demo, for example,
    to remove a series, when the legend checkbox is checked, and so on. The following
    is the shortened version of the code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在此演示中，`updatePie` 函数在多个地方被调用，例如，在删除系列、图例复选框被选中时等。以下是代码的简短版本：
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding code snippet basically loops through the stock series array and
    checks whether it is selected. If so, then it includes stock in the pie series
    in an equally distributed manner. Then the pie chart is displayed if there are
    one or more entries.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段基本上遍历股票系列数组，并检查它是否被选中。如果是，则以均匀分布的方式将股票包含在饼图系列中。然后，如果有一个或多个条目，将显示饼图。
- en: Editing the pie chart's slice with the data point's click, update, and remove
    events
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数据点的点击、更新和删除事件编辑饼图的切片
- en: 'It is unlikely that an investment portfolio will have an equal distribution
    of all stocks. Therefore, we can enhance the example by modifying portions within
    the pie chart. When a slice of the pie chart is clicked, a dialog box pops up.
    This allows us to adjust or remove the portion within the portfolio. The following
    screenshot shows this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 投资组合中所有股票的分布可能不会均匀。因此，我们可以通过修改饼图内部的部分来增强示例。当点击饼图的某个切片时，会弹出一个对话框。这允许我们调整或删除投资组合内的部分。以下截图显示了这一点：
- en: '![Editing the pie chart''s slice with the data point''s click, update, and
    remove events](img/7451OS_11_17.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![使用数据点的点击、更新和删除事件编辑饼图的切片](img/7451OS_11_17.jpg)'
- en: 'The **Update** button in the **Update Portfolio** dialog box updates the pie
    chart slice with the `Point.update` method, whereas the **Remove** button calls
    the `Point.remove` method. Both calls trigger the `update` and `remove` events
    respectively. Here, we define the data point''s `click`, `update`, and `remove`
    events inside the pie chart:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新**对话框中的**更新投资组合**按钮使用 `Point.update` 方法更新饼图切片，而**删除**按钮调用 `Point.remove`
    方法。这两个调用分别触发 `update` 和 `remove` 事件。在这里，我们在饼图中定义了数据点的 `click`、`update` 和 `remove`
    事件：'
- en: '[PRE21]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `click` event function stores the clicked slice (the point object) inside
    the Modify dialog box and launches it. Inside the dialog box, the **Update** and
    **Remove** buttons'' button handlers then extract these stored point object, call
    the pie chart, and use the objects'' update or remove method to reflect the change
    in the displayed pie chart. This subsequently triggers point `update` or `remove`
    event handlers and calls the predefined function, `updatePortfolio`, that recalculates
    the Portfolio series, with the new distribution among the included stocks. So
    let''s update the distribution for the best past performance stock to an 80 percent
    ratio and the other two stocks to 10 percent each. The Portfolio series automatically
    readjusts itself from the `update` event, as shown in the following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`click` 事件函数将点击的切片（点对象）存储在修改对话框中并启动它。在对话框内部，**更新**和**删除**按钮的按钮处理程序随后提取这些存储的点对象，调用饼图，并使用对象的更新或删除方法来反映显示的饼图中的更改。这随后触发点
    `update` 或 `remove` 事件处理程序并调用预定义的函数 `updatePortfolio`，该函数重新计算包含股票的新分布。因此，让我们将过去最佳表现股票的分布更新为
    80% 的比例，其他两种股票各 10%。投资组合系列会自动从 `update` 事件中调整自身，如下面的截图所示：'
- en: '![Editing the pie chart''s slice with the data point''s click, update, and
    remove events](img/7451OS_11_18.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![使用数据点的点击、更新和删除事件编辑饼图的切片](img/7451OS_11_18.jpg)'
- en: As we can see, the Portfolio series (the second line from the top) has been
    weighted towards the higher growth trend rather than being in the middle of all
    the stocks, like the Average series.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，投资组合系列（从顶部数第二行）已经偏向于更高的增长趋势，而不是像平均系列那样处于所有股票的中间。
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we covered the last part of Highcharts configuration: events
    handling. We built two share portfolio applications using jQuery and jQuery UI
    to demonstrate most of the Highcharts events.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 Highcharts 配置的最后一部分：事件处理。我们使用 jQuery 和 jQuery UI 构建了两个股票组合应用程序，以演示大多数
    Highcharts 事件。
- en: In the next chapter, we will bring Highcharts to mobile devices with jQuery
    Mobile.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用 jQuery Mobile 将 Highcharts 带到移动设备上。
