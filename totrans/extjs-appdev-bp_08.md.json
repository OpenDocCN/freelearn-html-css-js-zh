["```js\ns.questions().each(function(q) {\n   var input = stepForm.add({ \n          xtype: 'textfield', modelValidation: true,\n          viewModel: {\n                data: { question: q },\n                formulas: {\n                      isValid: {\n                            bind: {\n                                   bindTo: '{question}',\n                                   deep: true\n                            },\n                            get: function() {\n                                  return this.get('step').isValid();\n                            }\n                      }\n                }\n          },\n          bind: '{question.answer}',\n          fieldLabel: q.get('text')\n   });\n});\n```", "```js\nformulas: {\n   isValid: {\n          bind: {\n                bindTo: '{question}',\n                deep: true\n          },\n          get: function() {\n                return this.get('step').isValid();\n          }\n   }\n}\n```", "```js\nisValid: function() {\n   var valid = true;\n   this.questions().each(function(q) {\n          if(q.isValid() === false) {\n                valid = false;\n          }\n   });\n   this.set('valid', valid);\n   return valid;\n}\n```", "```js\nExt.form.field.Text.prototype.publishValue = function () {\n    var me = this;\n\n    // Don't check for errors when publishing the field value\n    //if (me.rendered && !me.getErrors().length) {\n    if (me.rendered) {\n        me.publishState('value', me.getValue());\n    }\n}\n```", "```js\nsencha generate workspace ./questionnaire-space\ncd questionnaire-space\nsencha generate package wizard\nsencha -sdk ~/Downloads/ext-5.0.1 generate app Questions ./questions\n\n```", "```js\ncd questions-space/questions\nsencha app watch\n\n```", "```js\n// was \"requires\": []\"requires\": [\"wizard\"]\n```", "```js\n// packages/wizard/src/model/Questionnaire.js\nExt.define('Wizard.model.Questionnaire', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name: 'title' },\n        { name: 'introduction' },\n        { name: 'conclusion' }\n    ],\n    proxy: {\n        type: 'rest',\n        url: 'http://localhost:3000/questionnaire'\n    },\n\n    toJSON: function() {\n        return this.getData(true);\n    }\n});\n```", "```js\n// packages/wizard/src/model/Step.js\nExt.define('Wizard.model.Step', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name: 'title' },\n        { name: 'introduction' },\n        {\n             name: 'questionnaireId',\n             reference: {\n                type: 'Wizard.model.Questionnaire',\n                inverse: 'steps'\n             }\n         }\n    ],\n\n    isValid: function() {\n        var valid = true;\n\n        this.questions().each(function(q) {\n            if(q.isValid() === false) {\n                valid = false;\n            }\n        });\n\n        this.set('valid', valid);\n\n        return valid;\n    }\n});\n```", "```js\n// packages/wizard/src/model/Question.js\nExt.define('Wizard.model.Question', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name: 'name' },\n        { name: 'required', type: 'boolean' },\n        { name: 'questionText' },\n        { name: 'type' },\n        { name: 'answer' },\n        {\n             name: 'stepId',\n             reference: {\n                type: 'Wizard.model.Step',\n                inverse: 'questions'\n             }\n         }\n    ],\n\n    validators: { answer: 'presence' },\n\n    getValidation: function() {\n        if(this.get('required')) {\n            return this.callParent();\n        } else {\n            return new Ext.data.Validation();\n        }\n    }\n});\n```", "```js\n{\n    \"id\": 1,\n    \"title\": \"Quiz Questions!\"\n    \"introduction\": \"Welcome!\",\n    \"conclusion\": \"Thanks!\",\n    \"steps\": [\n        {\n            \"id\": 1,\n            \"title\": \"Round 1\"\n            \"introduction\": \"Welcome to Round One!\",\n            \"questionnaireId\": 1,\n            \"questions\": [{\n                \"id\": 1,\n                \"questionText\": \"Turku is the third largest city by population of which European country?\",\n                \"required\": true,\n                \"stepId\": 1,\n                \"type\": \"textfield\"\n            }],\n        }\n    ]\n}\n```", "```js\nQuestionnaire.load(1, {\n    success: function(q) {\n        console.log(q.steps().first().get('title'));\n    }\n});\n```", "```js\n// packages/wizard/src/view/Wizard.js\nExt.define('Wizard.view.wizard.Wizard', {\n    extend: 'Ext.Panel',\n    xtype: 'wizard',\n    requires: [\n        'Wizard.model.Questionnaire',\n        'Wizard.model.Step',\n        'Wizard.model.Question'\n    ],\n    ui: 'wizard',\n    bodyCls: 'wizard-body',\n\n    viewModel: 'wizard',\n    controller: 'wizard',\n\n    layout: 'card',\n\n    config: {\n        questionnaire: null\n    },\n    bind: {\n        questionnaire: '{questionnaire}',\n        activeItem: '{currentPosition}',\n        title: '{questionnaire.title}'\n    },\n\n    applyQuestionnaire: function(questionnaire) {\n        if(!questionnaire) {\n            return;\n        }\n\n        var intro = questionnaire.get('introduction'),\n            conclusion = questionnaire.get('conclusion');\n\n        this.add({ html: intro });\n\n        questionnaire.steps().each(this.addStepPane, this);\n\n        this.add({ html: conclusion });\n\n        return questionnaire;\n    },\n\n    setActiveItem: function() {   \n        if(this.items.length > 0) {\n            this.callParent(arguments);\n        }\n    },\n\n    addStepPane: function(step, i) {\n        this.add({\n            xtype: 'wizard-step',\n            viewModel: {\n                data: { step: step }\n            },\n            bind: { step: '{step}' }\n        });\n    },\n\n    load: function(id) {\n        this.getViewModel().setLinks({\n            questionnaire: {\n                type: 'Wizard.model.Questionnaire',\n                id: 1\n            }\n        });\n    },\n\n    dockedItems: [\n        { xtype: 'wizard-navigation', dock: 'bottom' },\n        {\n            xtype: 'wizard-progress', dock: 'bottom',\n            bind: '{questionnaire.steps}'\n        }\n    ]\n});\n```", "```js\n// packages/wizard/src/view/Navigation.js\nExt.define('Wizard.view.wizard.Navigation', {\n    extend: 'Ext.Toolbar',\n    xtype: 'wizard-navigation',\n    items: [\n        {\n            text: 'Restart', itemId: 'restart',\n            bind: { disabled: '{isIntroduction}' }\n        },\n        {\n            text: 'Previous', itemId: 'prev',\n            bind: { disabled: '{isIntroduction}' }\n        },\n        '->',\n        { \n            text: 'Next', itemId: 'next',\n            bind: { disabled: '{!isNextEnabled}' }\n        },\n        {\n            text: 'Finish', itemId: 'finish',\n            bind: { disabled: '{isNotLastStep}' }\n        }\n    ]\n});\n```", "```js\n// packages/wizard/src/view/Progress.js\nExt.define('Wizard.view.wizard.Progress', {\n    extend: 'Ext.Container',\n    xtype: 'wizard-progress',\n\n    config: {\n        steps: null\n    },\n    defaultBindProperty: 'steps',\n    defaultType: 'button',\n    baseCls: 'wizard-progress',\n    layout: {\n        type: 'hbox',\n        pack: 'center'\n    },\n\n    applySteps: function(steps) {\n\n        var lineHtml = '<div class=\"wizard-progress-bar\"></div>',\n            stepArr = steps.getData().items,\n            items = this.buildProgressIcons(stepArr),\n            container;\n\n        this.removeAll();\n\n        items.unshift({ text: 'Start', stepIndex: 0 });\n        items.push({ \n            text: 'End', bind: {\n                disabled: '{isNotLastStep}'\n            }\n        });\n\n        container = this.add({\n            xtype: 'container', cls: 'wizard-progress-inner',\n            defaultType: 'button', items: items\n        });\n\n        container.getEl().insertHtml('afterBegin',  lineHtml);\n\n        return steps;\n    },\n\n    buildProgressIcons: function(steps) {\n        return Ext.Array.map(steps, function(step, i){\n            return {\n                text: i + 1, stepIndex: i + 1,\n                bind: { disabled: '{!isEnabled}' },\n                viewModel: {\n                    formulas: {\n                        isEnabled: function(get) {\n                            return get('currentPosition') > i;\n                        }\n                    }\n                }\n            };\n        });\n    }\n});\n```", "```js\n// packages/wizard/src/view/Step.js\nExt.define('Wizard.view.wizard.Step', {\n    extend: 'Ext.form.Panel',\n    xtype: 'wizard-step',\n    cls: 'wizard-step',\n\n    defaults: {\n        labelSeparator: '', labelAlign: 'top',\n        labelWidth: 250, msgTarget: 'side',\n        width: '100%'\n    },\n\n    config: {\n        step: null\n    },\n\n    modelValidation: true,\n\n    applyStep: function(step) {\n\n        this.add({\n            xtype: 'container',\n            cls: 'wizard-step-introduction',\n            html: step.get('introduction')\n        });\n\n        step.questions().each(function(question) {\n            this.add({\n                xtype: question.get('type'),\n                fieldLabel: question.get('questionText'),\n                required: question.get('required'),\n                bind: '{question.answer}',\n                viewModel: 'progress-step'\n            }).getViewModel().set('question', question);\n        }, this);\n\n        step.isValid();\n    }\n});\n```", "```js\n// packages/wizard/src/view/ProgressStepModel.js\nExt.define('Wizard.view.wizard.ProgressStepModel', {\n    extend: 'Ext.app.ViewModel',\n    alias: 'viewmodel.progress-step',\n\n    data: {\n        question: null\n    },\n\n    formulas: {\n        isValid: {\n            bind: {\n                bindTo: '{question}',\n                deep: true\n            },\n            get: function() {\n                return this.get('step').isValid();\n            }\n        }\n    }\n});\n```", "```js\n// packages/wizard/src/view/WizardController.js\nExt.define('Wizard.view.wizard.WizardController', {\n    extend: 'Ext.app.ViewController',\n    alias: 'controller.wizard',\n    listen: {\n        component: {\n            '#next': { click: 'onNextClick' },\n            '#prev': { click: 'onPrevClick' },\n            '#restart': { click: 'onRestartClick' },\n            '#finish': { click: 'onFinishClick' },\n            'wizard-progress button': { click: 'onStepClick' }\n        }\n    },\n\n    onNextClick: function() {\n        var current = this.getViewModel().get('currentPosition');\n        this.getViewModel().set('currentPosition', current + 1);\n    },\n\n    onPrevClick: function() {\n        var current = this.getViewModel().get('currentPosition');\n        this.getViewModel().set('currentPosition', current - 1);\n    },\n\n    onRestartClick: function() {\n        this.getViewModel().set('currentPosition', 0);\n    },\n\n    onFinishClick: function() {\n        var q = this.getViewModel().get('questionnaire');\n        this.fireEvent('wizardcomplete', q);\n    },\n\n    onStepClick: function(btn) {\n        this.getViewModel().set('currentPosition', btn.stepIndex);\n    }\n}); \n```", "```js\n// packages/wizard/src/view/WizardModel.js\nExt.define('Wizard.view.wizard.WizardModel', {\n    extend: 'Ext.app.ViewModel',\n    alias: 'viewmodel.wizard',\n\n    data: {\n        currentPosition: 0\n    },\n\n    formulas: {\n        currentStep: function(get) {   \n            var pos = get('currentPosition') – 1;\n            return get('questionnaire').steps().getAt(pos);\n        },\n\n        stepCount: function(get) {\n            return get('questionnaire').steps().count();\n        },\n\n        isIntroduction: function(get) {\n            return get('currentPosition') === 0;\n        },\n\n        isNotLastStep: function(get) {\n            return get('currentPosition') < get('stepCount') + 1;\n        },\n\n        isNextEnabled: function(get) {\n            // when current step is valid\n            var stiv = get('currentStep') ? get('currentStep.valid') : true;\n\n            // when not last step\n            var last = get('isNotLastStep');\n\n            return stiv && last;\n        }\n    }\n});\n```", "```js\nload: function(id) {\n    this.getViewModel().setLinks({\n        questionnaire: {\n            type: 'Wizard.model.Questionnaire',\n            id: id\n        }\n    });\n}\n```", "```js\nExt.define('Questions.view.main.MainController', {\n    extend: 'Ext.app.ViewController',\n    requires: [\n        'Wizard.view.wizard.Wizard'\n    ],\n\n    alias: 'controller.main',\n\n    listen: {\n        controller: {\n            'wizard': {\n                'wizardcomplete': function(q) {\n                    console.log(q);\n                }\n            }\n        }\n    },\n\n    onClickButton: function () {\n        this.wizard = Ext.create('Ext.Window', {\n            header: false, modal: true, layout: 'fit',\n            autoShow: true, resizable: false,\n            width: 800, height: 600, \n            items: [{ xtype: 'wizard' }],\n        });\n\n        this.wizard.down('wizard').load(1);\n    }\n});\n```", "```js\n// packages/wizard/sass/src/Wizard/view/wizard/Progress.scss\n@mixin wizard-progress-ui(\n    $ui: null,\n    $ui-border-color: #2163A3,\n    $ui-background-color: #ffffff,\n    $ui-button-border-width: 4px,\n    $ui-button-border-radius: 20px\n) {\n    .wizard-progress-#{$ui} {\n        padding: 10px 0;\n\n        .#{$prefix}btn:last-child {\n            margin-left: 20px;\n            margin-right: 0px;\n        }\n\n        .#{$prefix}btn {\n            margin: 0 10px;\n        }\n\n        .#{$prefix}btn:first-child {\n            margin-right: 20px;\n            margin-left: 0px;\n        }\n\n        @include extjs-button-small-ui(\n            $ui: 'default',\n            $border-radius: $ui-button-border-radius,\n            $border-width: $ui-button-border-width,\n            $background-color: $ui-background-color,\n            $background-color-disabled: mix($ui-border-color, $ui-background-color, 50%),\n            $border-color: $ui-border-color,\n            $color: black,\n            $color-disabled: shade($ui-border-color, 50%),\n            $opacity-disabled: 0.9999,\n            $inner-opacity-disabled: 0.9999\n        );\n\n        .wizard-progress-bar {\n            width: 100%;\n            background: $ui-border-color;\n            height: $ui-button-border-width * 1.5;\n            position: absolute;\n            top: 50%;\n            margin-top: -(($ui-button-border-width * 1.5) / 2);\n        }\n    }\n}\n\n@include wizard-progress-ui(\n    $ui: 'default'\n);\n```", "```js\n@include wizard-progress-ui(\n    $ui: 'default',\n    $ui-border-color: #ff69b4,\n    $ui-background-color: #ffffff,\n    $ui-button-border-width: 1px,\n    $ui-button-border-radius: 4px\n);\n```"]