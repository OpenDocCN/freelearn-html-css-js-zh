["```js\nvar devicePixelRatio = window.devicePixelRatio || 1\nvar canvas = d3.select(‘body').append(‘canvas')\n    .attr(‘width', width * devicePixelRatio)\n    .attr(‘height', height * devicePixelRatio)\n    .style(‘width', width + ‘px')\n    .style(‘height', height + ‘px');\nvar context = canvas.getContext(‘2d');\ncontext.scale(devicePixelRatio, devicePixelRatio);\n```", "```js\n<div id=\"canvas-map\"></div>\n<div id=\"controls\">\n    <div class=\"flight-select\" id=\"button-header\">Pick number of flights:</div>\n    <button class=\"flight-select\" data-flights=\"100\">100</button>\n    <button class=\"flight-select\" data-flights=\"1000\">1,000</button>\n    <button class=\"flight-select\" data-flights=\"5000\">5,000</button>\n    <button class=\"flight-select\" data-flights=\"10000\">10,000</button>\n    <button class=\"flight-select\" data-flights=\"15000\">15,000</button>\n    <button class=\"flight-select\" data-flights=\"20000\">20,000</button>\n    <button class=\"flight-select\" data-flights=\"25000\">25,000</button>\n    <button class=\"flight-select\" data-flights=\"30000\">30,000</button>\n</div>\n```", "```js\nvar width = 1000,\n    height = 600,\n    countries,\n    airportMap,\n    requestID;\n```", "```js\nvar canvasWorld = d3.select('#canvas-map').append('canvas')\n  .attr('id', 'canvas-world')\n  .attr('width', width)\n  .attr('height', height);\n\nvar contextWorld = canvasWorld.node().getContext('2d');\n\nvar canvasPlane = d3.select('#canvas-map').append('canvas')\n  .attr('id', 'canvas-plane')\n  .attr('width', width)\n  .attr('height', height);\n\nvar contextPlane = canvasPlane.node().getContext('2d');\n```", "```js\n#canvas-world, #canvas-plane {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n```", "```js\nvar projection = d3.geoRobinson()\n    .scale(180)\n    .translate([width / 2, height / 2]);\n\n```", "```js\nvar pathSVG = d3.geoPath()\n    .projection(projection);\n\nvar pathCanvas = d3.geoPath()\n    .projection(projection)\n    .pointRadius(1)\n    .context(contextWorld);\n```", "```js\nd3.json('data/countries.topo.json', function(error, world) {\n  if (error) throw error;\n  d3.select('div#controls').style('top', height + 'px');\n  countries = topojson.feature(world, world.objects.countries); // GeoJSON;\n  drawMap(countries);\n```", "```js\nfunction drawMap(world) {\n  countries.features.forEach(function(el, i) {\n\n    contextWorld.beginPath();\n    pathCanvas(el);\n    contextWorld.fillStyle = '#ccc';\n    contextWorld.fill();\n\n    contextWorld.beginPath();\n    pathCanvas(el);\n    contextWorld.strokeStyle = '#fff';\n    contextWorld.lineWidth = 1;\n    contextWorld.stroke();\n\n  });\n}\n```", "```js\nd3.selectAll('button.flight-select').on('mousedown', handleFlights);\n```", "```js\nfunction handleFlights() {\n  d3.selectAll('button').style('background-color', '#f7f7f7');\n  d3.select(this).style('background-color', '#ddd');\n\n  if (requestID) cancelAnimationFrame(requestID);\n    var flights = this.dataset.flights;\n\n    d3.queue()\n      .defer(d3.csv, 'data/routes_' + flights + '.csv')\n      .defer(d3.csv, 'data/airports_' + flights + '.csv')\n      .await(ready);\n  }\n```", "```js\nfunction ready(error, routes, airports) {\n  if (error) throw error;\n\n  // 1) Draw the background scene\n  // 2) Calculate plane positions\n  // 3) Animate and render the planes\n}\n```", "```js\nvar airportLocation = [];\nairports.forEach(function(el) {\n  var obj = {};\n  obj.type = 'Feature';\n  obj.id = el.iata;\n  obj.geometry = {\n    type: 'Point',\n    coordinates: [+el.long, +el.lat]\n  };\n  obj.properties = {};\n  airportLocation.push(obj);\n});\nairportMap = d3.map(airportLocation, function(d) { return d.id; });\n```", "```js\ncontextWorld.clearRect(0, 0, width, height);\ndrawMap(countries);\ndrawAirports(airportLocation);\n```", "```js\nfunction drawAirports(airports) {\n  airports.forEach(function(el,i) {\n\n    contextWorld.beginPath();\n    pathCanvas(el);\n    contextWorld.fillStyle = '#fff';\n    contextWorld.fill();\n\n  });\n}\n```", "```js\nvar routeFromTo = [];\n  routes.forEach(function(el) {\n    var arr = [el.source_airport, el.destination_airport];\n    routeFromTo.push(arr);\n  });\n```", "```js\nrouteFromTo.forEach(function(el, i) {\n  var plane = planes.getPlane(el);\n  plane.route = planes.getPath(el);\n  plane.wayPoints = planes.getWayPoints(plane);\n  planes.items.push(plane);\n});\n```", "```js\nvar planes = {\n  items: [],\n  getPlane: function(planeRoute) { },\n  getPath: function(planeRoute) { },\n  getWayPoints: function(plane) { }\n}\n```", "```js\ngetPlane: function(planeRoute) {\n\n  var origin = planeRoute[0], destination = planeRoute[1];\n\n  var obj = {};\n\n  obj.od = [origin, destination];\n\n  obj.startX = projection(airportMap.get(origin).geometry.coordinates)[0];\n  obj.startY = projection(airportMap.get(origin).geometry.coordinates)[1];\n\n  obj.x = projection(airportMap.get(origin).geometry.coordinates)[0];\n  obj.y = projection(airportMap.get(origin).geometry.coordinates)[1];\n\n  obj.route = null;\n  obj.wayPoints = [];\n  obj.currentIndex = 0;\n\n  return obj;\n\n}\n```", "```js\ngetPath: function(planeRoute) {\n  var origin = planeRoute[0], destination = planeRoute[1];\n  var pathElement = document.createElementNS(d3.namespaces.svg,\n  'path');\n\n  var route = d3.select(pathElement)\n    .datum({\n      type: 'LineString',\n      coordinates: [\n         airportMap.get(origin).geometry.coordinates,\n         airportMap.get(destination).geometry.coordinates\n       ]\n    })\n    .attr('d', pathSVG);\n\n    return route.node();\n}\n```", "```js\ngetWayPoints: function(plane) {\n  var arr = [];\n  var points = Math.floor(plane.route.getTotalLength() * 2.5);\n\n  d3.range(points).forEach(function(el, i) {\n    var DOMPoints = plane.route.getPointAtLength(i/2.5);\n    arr.push({ x: DOMPoints.x, y: DOMPoints.y });\n  });\n\n  return arr;\n}\n```", "```js\nfunction animate() {\n  planes.clearPlanes(contextPlane);\n  planes.items.forEach(function(el) {\n    planes.updatePlane(el);\n    planes.drawPlane(contextPlane, el.x, el.y);\n  });\n  requestID = requestAnimationFrame(animate);\n}\n\nrequestAnimationFrame(animate);\n```", "```js\nupdatePlane: function(plane) {\n  plane.currentIndex++;\n  if (plane.currentIndex >= plane.wayPoints.length) {\n    plane.currentIndex = 0;\n    plane.x = plane.startX;\n    plane.y = plane.startY;\n  } else {\n    plane.x = plane.wayPoints[plane.currentIndex].x;\n    plane.y = plane.wayPoints[plane.currentIndex].y;\n  }\n}\n```", "```js\ndrawPlane: function(ctx, x, y) {\n  ctx.beginPath();\n  ctx.fillStyle = 'tomato';\n  ctx.arc(x, y, 1, 0, 2*Math.PI);\n  ctx.fill();\n}\n```", "```js\nfunction createPlaneImage() {\n  var planeImg = document.createElement('canvas');\n  planeImg.width = planeImg.height = 2;\n  var contextPlaneImg = planeImg.getContext('2d');\n  contextPlaneImg.beginPath();\n  contextPlaneImg.fillStyle = 'tomato';\n  contextPlaneImg.arc(planeImg.width/2, planeImg.height/2, 1, 0,\n  2*Math.PI);\n  contextPlaneImg.fill();\n  return planeImg;\n}\n```", "```js\nvar planes = {\n  items: [],\n  icon: createPlaneImage(),\n  getPlane: function(planeRoute) {\n  // ...\n```", "```js\ndrawPlaneImage: function(ctx, x, y) {\n  ctx.drawImage(this.icon, x, y);   \n}\n```", "```js\nfunction animate() {\n  planes.clearPlanes(contextPlane);\n  planes.items.forEach(function(el) {\n    planes.updatePlane(el);\n    planes.drawPlaneImage(contextPlane, el.x, el.y);\n  });\n\n  requestID = requestAnimationFrame(animate);\n}\n```"]