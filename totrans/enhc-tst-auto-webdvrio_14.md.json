["```js\n/**\n * Gets last segment of current URL after splitting by \"/\".\n * @returns {Promise<string>} The last URL segment.\n */\nexport async function getPageName(): Promise<string> {\n  const currentURL = await browser.getUrl();\n  const urlSegments = currentURL.split('/');\n  return urlSegments[urlSegments.length - 1];\n}\n```", "```js\nimport Page from './page.tjs';\nimport * as helpers from \"../../helpers/helpers.tjs\";\n/**\n * sub page with selectors for a specific page\n */\nclass HalloweenPartyPage extends Page {\n    /**\n     * define selectors using getter methods\n     */\n    public get hostParty () {\n        return $(`//a[contains(normalize-space(),'ost')]`);\n    }\n    public get attendParty () {\n        return $(`//a[contains(normalize-space(),'ttend')]`);\n    }\n```", "```js\npublic async build () {\n   // Is this the page to process?\n   if (await ASB.get(\"page\") !== \"attend-a-party\") {\n      return false // Not the right page\n   }\n   if (ASB.get(\"hostorattend\") === `attend`){\n     return await helpers.clickAdv(\n         await this.attendParty);\n   }\n   return helpers.clickAdv(await this.hostParty);\n}\nexport default new HalloweenPartyPage();\n```", "```jsloginPage.open(``)```", "```js\ndescribe(\"Ch14: State-drive Automation - Host a Party (Default in Ghostville)\",  () => {\n  it(\"should loop around until the final page is found\", async () => {\n    await LoginPage.open(``);\n    await stateDrivenUtils.partyPath(\"Host\");\n  });\n});\ndescribe(\"Ch14: State-drive Automation - Host a Party (Default in Ghostville)\",  () => {\n  it(\"should loop around until the final page is found\", async () => {\n    await LoginPage.open(``);\n   await stateDrivenUtils.partyPath(\"Host\");\n  });\n});\n```", "```jsLoginPage.open(``)```", "```js\nbeforeEach(async () => {\n  await LoginPage.open(``);\n});\ndescribe(\"Ch14: State-drive Automation - Host a Party (Default in Ghostville)\",  () => {\n  it(\"should loop around until the final page is found\", async () => {\n    await stateDrivenUtils.partyPath(\"Host\");\n  });\n});\ndescribe(\"Ch14: State-drive Automation - Host a Party (Default in Ghostville)\",  () => {\n  it(\"should loop around until the final page is found\", async () => {\n    await stateDrivenUtils.partyPath(\"Host\");\n  });\n});\n```", "```js\n}\n  \"journeyData\": {\n    \"_hostOrAttend_comment\": \"'host' (default Happy Path), 'attend' or 'scared' \",\n    \"hostOrAttend: \"host\",\n    \"_location_comment\": \"'zombieton' (default Happy Path) or 'ghostville' \",\n    \"location\": \"zombieton\",\n  }\n}\n```", "```js\n  public parseTestData(testData: string = '') {\n    if (process.env.JOURNEY !== undefined) {\n      testData = process.env.JOURNEY;\n    }\n```", "```js\n  if (testData != \"\") {\n      testData = \" \" + testData.toLowerCase(); // Add space to make sure we match whole words and convert to lowercase once\n// Overriding default values\n      if (testData.includes(\" host\")) {\n        ASB.set(\"hostOrAttend\", \"host\");\n      }\n      if (testData.includes(\" attend\")) {\n        ASB.set(\"hostOrAttend\", \"attend\");\n      }\n      if (testData.includes(\" zombie\")) {\n        ASB.set(\"location\", \"zombieton\");\n      }\n      if (testData.includes(\" ghost\")) {\n        ASB.set(\"location\", \"ghostville\");\n      }\n      if (testData.includes(\" scared\")) {\n        ASB.set(\"location\", \"scared\");\n      }\n```", "```js\n    parseToASB(\"path/to/userdata.json\")\n```", "```js\n    parseToASB(testData)\n```", "```js\nexport function parseToASB(testData: string) {\n  const regex = /(\\w+)=(\"([^\"]*)\"|\\b\\w+\\b)/g;\n  let match;\n  while ((match = regex.exec(testData)) !== null) {\n    let key = match[1];\n    let value = match[2];\n    // Remove quotes if present\n    if (value.startsWith('\"') && value.endsWith('\"')) {\n      value = value.slice(1, -1);\n    }\n    let keyLower = key.toLowerCase();\n    let oldValue = ASB.get(keyLower);\n    // Always save value as a string\n    ASB.set(keyLower, value);\n    if (oldValue !== undefined) {\n      console.log(`ASB(«${keyLower}\") updated from \"${oldValue}\" to \"${ASB.get(keyLower)}\"`);\n    } else {\n      console.log(`ASB(«${keyLower}\") set to \"${ASB.get(keyLower)}\"`);\n    }\n  }\n}\nimport fs from 'fs';\nimport xml2js from 'xml2js';\nexport async function parseXMLFileToASB(filePath: string) {\n  const data = fs.readFileSync(filePath);\n  const result = await xml2js.parseStringPromise(data);\n  for (let key in result) {\n    let newValue = result[key];\n    let oldValue = ASB.get(key.toLowerCase());\n    // Always save value as a string\n    ASB.set(key.toLowerCase(), newValue);\n    if (oldValue !== newValue) {\n      console.log(`ASB(«${key.toLowerCase()}\") updated from \"${oldValue}\" to \"${newValue}\"`);\n    }\n  }\n}\n```", "```js\nimport { ASB } from \"../../helpers/globalObjects\";\nimport candymapperPage from \"../pageObjects/candymapper.page\";\nimport halloweenAttendPartyPage from \"../pageObjects/halloweenAttendParty.page\";\nimport halloweenPartyPage from \"../pageObjects/halloweenParty.page\";\nimport halloweenPartyLocationPage from \"../pageObjects/halloweenPartyLocation.page\";\nimport halloweenPartyThemePage from \"../pageObjects/halloweenPartyTheme.page\";\nimport halloweenPartyTimerPage from \"../pageObjects/halloweenPartyTimer.page\";\nimport * as helpers from \"../../helpers/helpers\";\nimport AllureReporter from \"@wdio/allure-reporter\";\nimport Page from \"../pageObjects/page\";\nclass StateDrivenUtils extends Page {\n```", "```js\nexport async function partyPath (testData) {\n    let complete: Boolean = false;\n    let lastPage: string = \"\"\n    let retry = 2\n   this.parseTestData(testData);  // Parse the known milestone verbs                                   // to the switchboard\n    helpers.parseToASB(testData);   // Parse the key=value data to set                                     // the switchboard\n```", "```js\n    while (complete === false) { // Loop until final page\n      //Get Page Name\n        let pageName = await browser.getUrl();\n        pageName = extractPathFromUrl(pageName)\n        ASB.set(\"page\", pageName);\n```", "```js\n   // Pass through every known page\nknownPage =\n        await halloweenLocationPage.build() ||\n        await halloweenAttendPartyPage.build() ||\n   await halloweenHostPartyPage.build() ||\n   await halloweenPartyPage.build() ||\n// Add new pages along the journey here.\n```", "```js\n// Exit Point #1: Success reached the timer page\n   if (await halloweenPartyTimerPage.build()) {\n      knownPage = true; // Skip Exit point 2\n      console.log(\"Success: Reached the timer page\")\n      complete = true; // Exit the loop\n break;\n   } // End of all paths except unknown page\n```", "```js\n// Exit Point #2: Unknown page encountered\n   if (knownPage === false) {\n     //None of the build methods returned true\n     AllureReporter.addAttachment(`Unknown Page detected: ${pageName}`, \"\", \"text/plain\");\n    console.log(`Unknown Page detected: ${pageName} - Exiting Journey`);\n    expect(pageName).toBe(\"a known page\");\n    break;\n}\n```", "```js\n// Exit Point #3: Page did not change\nif (lastPage === pageName) {\n  retry--; // Give two additional attempts\n  if (retry === 0) {\n    console.log(`Page did not change: ${lastPage} - Exiting Journey`);\n    expect(\"Page did not move on from\").toBe(lastPage);\n  } else {\n     // Page moved on, reset retry for next page\n     retry = 2;\n  }\n}\n```", "```js\n// Exit Point #4: We were scared and went back - Halloween Party Home page reached - only works in dev, prod has an intentional Error 404 issue.\nif (ASB.get(\"page\") === \"halloween-party\") {\n   console.log(\"Halloween Party Home page reached\")\n   complete = true;\n}\n```", "```js\n      lastPage = ASB.get(\"page\"); // Save the last page name\n    }\n```", "```js\nimport { clipboard } from 'electron';\nconst operatingSystem = process.platform;\nlet selectAllKeys: string[];\nlet copyKeys: string[];\nif (operatingSystem === 'darwin') {\n  selectAllKeys = ['Command', 'a'];\n  copyKeys = ['Command', 'c'];\n} else {\n  selectAllKeys = ['Control', 'a'];\n  copyKeys = ['Control', 'c'];\n}\nawait browser.keys(selectAllKeys);\nawait browser.keys(copyKeys);\nconst allText = clipboard.readText();\n```", "```js\nSet JOURNEY=\"\"; yarn ch15\n```", "```js\nSet JOURNEY=\"attend scared\"; yarn ch15\n```", "```js\nSet JOURNEY=\"Host ZOMBIE\"; yarn ch15\n```", "```js\nlet journey: string = \" \" + (process.env.JOURNEY || \"Host\").toLowerCase();\nif (journey===\" \")) {\n    journey = \" host\"; //Default Happy Path\n}\n```", "```js\nSet JOURNEY=\"Attend Ghost\"; yarn ch15\nif (journey.includes(\" host\").toLowerCase()) {\n// Host path being taken in error.\n}\n```", "```js\nif (journey.includes(\" attend\").toLowerCase()) {\n// Attend a party path, case insensitively\nHelpers.click(attend)\n} else {\n    // The JOURNEY variable contains \"host\" Happy Path\nHelpers.click(host)\n}\n```", "```js\nSet JOURNEY=\"host <today+7>\"; yarn ch15\nconst match = journey.match(/(<.+>)/);\nconst dateToken = match ? match[0] : \"\";\nHelpers.setValueIfExists(dateField, dateToken);\n```", "```js\nSet JOURNEY=\"military references api\"; yarn job-app-engine\nif (journey.toLowerCase().includes(\" api)) {\n// API path\n} else {\n// GUI path\n}\n```"]