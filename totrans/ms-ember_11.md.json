["```js\nnode --version\nv0.10.29\n\nnpm --version\n1.4.14\n\n```", "```js\nnpm install\nnode server.js\n\n```", "```js\nvar app = require('express.io')();\napp.http().io();\napp.listen(3000);\n```", "```js\n<script src=\"img/socket.io.js\"></script>\n<script src=\"img/moment.js\"></script>\n<script src=\"img/jquery-1.10.2.js\"></script>\n<script src=\"img/handlebars-1.1.2.js\"></script>\n<script src=\"img/ember-1.2.0.js\"></script>\n<script src=\"img/app.js\"></script>\n```", "```js\nApp = Ember.Application.create({\n  rootElement: '#wrap'\n});\nApp.io = io.connect();\n```", "```js\n{{view App.MessageField\n  required=\"required\"\n  placeholder=\"message\"\n  action=\"chat\"\n  id=\"message-input\"\n  value=controller.message}}\n\nApp.MessageField = Em.TextField.extend({\n  insertNewline: function(){\n    this.triggerAction();\n  }\n});\n```", "```js\nvar message = self.get('message');\nif (message) message = message.trim();\nif (!message || message === '') return;\n```", "```js\nvar match = message.match(/\\/join (\\w+)/);\nif (match){\n  if (nick){\n    self.send('tip', 'Already connected!');\n  } else {\n    self.send('join', match[1], view);\n  }\n}\n```", "```js\n$('.tooltip') \n  .text(msg)\n  .show()\n  .click(function(){\n    $(this).fadeOut();\n  });\n```", "```js\nApp.io.on('join', function(data){\n  self.get('nicks').pushObject(data.nick);\n});\n```", "```js\nApp.io.on('quit', function(data){\n  self.get('nicks').removeObject(data.nick);\n});\n```", "```js\nApp.io.on('chat', function(data) {\n  self.get('messages').pushObject(App.Message.create(data));\n});\n```", "```js\nApp.io.emit('ready', { nick: nick }, function(data) {\n});\n```", "```js\n// server.js\napp.io.route('ready', function(req) {\n});\n```", "```js\nvar success = nicks.indexOf(req.data.nick) === -1;\n```", "```js\nreq.io.respond({\n  success: success\n});\n```", "```js\nif (data.success){\n} else {\n  self.send('tip', 'Nick is taken');\n}\n```", "```js\nreq.session.nick = req.data.nick;\n```", "```js\nvar message = {\n  isjoin: true,\n  nick: req.data.nick,\n  message: req.data.nick+' joined',\n  date: (new Date).toISOString()\n};\nmessages.push(message);\n```", "```js\nreq.io.broadcast('join', req.data);\nreq.io.broadcast('chat', message);\n```", "```js\n<ul class=\"nicks\">\n  {{#each nicks}}\n  <li> {{this}}</li>\n  {{/each}}\n</ul>\n```", "```js\nreq.io.respond({\n  success: success,\n  nicks: nicks,\n  messages: messages.slice(0, -1)â€©});\n```", "```js\nself.set('message', '');\nself.set('connected', true);\nself.set('nick', nick);\nself.get('nicks').pushObjects(data.nicks);\nself.get('messages').pushObjects(data.messages.map(function(data){\n  var message = App.Message.create(data);\n  if (message.get('nick') === nick) message.set('isme', true);\n  return message;\n}));\n```", "```js\n  messagesLengthDidChange: function(){\n    Em.run.debounce(this, 'send', 'scrollToBottom', 200);\n  }.observes('messages.length'),\n```", "```js\n$('html, body')\n  .animate({ scrollTop: $(document).height() }, 'slow');\n```", "```js\n<div id=\"content\" {{bind-attr class=\"connected:show\"}}></div>\n```", "```js\n#title,\n#content{\n  opacity: 0.1;\n}\n\n#title.show,\n#content.show{\n  opacity: 1;\n}\n```", "```js\nif (!nick) return self.send('tip', '/join <nick>');\n\nvar msg = App.Message.create({\n  isme: true,\n  message: message,\n  nick: nick\n});\nself.get('messages').pushObject(msg);\nApp.io.emit('chat', msg.toJSON());\nself.set('message', '');\n```", "```js\napp.io.route('chat', function(req) {\n  messages.push(req.data);\n  req.io.broadcast('chat', req.data);\n});\nIn the client app, conveniently use a table, for convenience, to list the messages:\n{{#each messages}}\n<tr {{bind-attr class=\"isnotice:notice isjoin:join isquit:quit isme:me\"}}>\n  <td {{bind-attr class=\":nick\"}}>\n    <span>{{#if isme}}me{{else}}{{nick}}{{/if}}</span>\n  </td>\n  <td class=\"message\">\n    <span>{{message}}</span>\n  </td>\n  <td class=\"date\" data-timestamp=\"{{timestamp}}\">\n    <span>{{message-date date=date}}</span>\n  </td>\n</tr>\n{{/each}}\n```", "```js\n<script type=\"text/x-handlebars\" id=\"components/message-date\">\n  {{formatedDate}}\n</script>\n\nApp.MessageDateComponent = Ember.Component.extend({\n\n  tagName: 'span',\n\n  didInsertElement: function(){\n\n    var self = this;\n\n    var id = setInterval(fn, 15000);\n    this.set('intervalId', id);\n    fn();\n    function fn(){\n      self.set(\n'formatedDate', moment((new Date(self.get('date')))).fromNow()\n     );\n    }\n\n  },\n\n  willDestroyElement: function(){\n    clearInterval(this.get('intervalId'));\n  }\n\n});\n```", "```js\napp.io.route('disconnect', function(req) {\n\n  var nick = req.session.nick;\n  if (!nick) return;\n\n  var message = {\n    isquit: true,\n    nick: nick,\n    message: nick+' quit',\n    date: (new Date).toISOString()\n  };\n  messages.push(message);\n\n  var index = nicks.indexOf(nick);\n  if (index > -1) {\n    nicks.splice(index, 1);\n  }\n\n  req.io.broadcast('chat', message);\n  req.io.broadcast('quit', {\n    nick: nick\n  });\n\n});\n```"]