- en: Building a NodeBots Swarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our NodeBots can now sense and display information about the world around them,
    and gather information from the internet for display. Now, it's time to look at
    NodeBots talking to each other. We will also use this chapter to talk about where
    to go from here—JavaScript is available on so many different boards and devices,
    and in so many new and exciting ways!
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Project – connecting multiple NodeBots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expanding your NodeBots knowledge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuing on your NodeBots adventure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you can optionally use a second Raspberry Pi with Wireless
    internet access. You can also just use the one you have and we'll pretend it is
    two different Pis. You'll also need your TSL2591 Light Sensor, your Pi Cobbler,
    and a few breadboard wires.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter is available at [https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter11](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter11).
  prefs: []
  type: TYPE_NORMAL
- en: Project – connecting multiple NodeBots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we'll use an `npm` module that allows us to set up a Raspberry
    Pi broker on a Pi—if you have one Pi, we'll have it talk to itself as if it's
    two separate devices, and if you have a second Pi, we'll have them talk to each
    other.
  prefs: []
  type: TYPE_NORMAL
- en: Optional – setting up a second Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are only using your original Pi, skip this section.
  prefs: []
  type: TYPE_NORMAL
- en: Use the instructions in [Chapter 1](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml), *Setting
    Up Your Development Environment*, to set up your second Pi. You do not need a
    cobbler or any other accessories for this project; if you use a second Pi, you
    just need a good power source and a microSD card set up as stated in [Chapter
    1](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml), *Setting Up Your Development Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using two Pis, the Pi without the cobbler is the broker Pi, and your
    original Pi with the cobbler is the client Pi.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using two Pis, you will want to set the hostname of the broker Pi
    so that they don''t collide. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then select Network Options, followed by Hostname with the arrow keys. Set the
    hostname to something you'll remember (I used `nodebotanist-pi-broker.local`).
    Then, save and exit `raspi-config` and reboot the Pi.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you want to start a session on the broker Pi, you''ll now use your custom
    hostname; for example, if I want to SSH into my broker Pi, I run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Setting up your project files and folders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''ll want to create two separate project folders for this project: `client`
    and `broker.` Create these folders and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `client` folder, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `broker` folder, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Then, in both folders, create an `index.js` and a `.env` file.
  prefs: []
  type: TYPE_NORMAL
- en: If you're using one Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Move both the `client` and `broker` folders to the Pi, navigate to the `client`
    folder in your Pi SSH session, and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, navigate to the `broker` folder and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, reboot the Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you're using two Pis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Move the `client` folder to your original Pi, SSH into your original Pi, navigate
    to the `client` folder, and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, move the `broker` folder to the second Pi you set up, SSH into it, navigate
    to the `broker` folder, and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, reboot the broker Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our project dependencies in place and installed, it's time
    to wire up this project up.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a light sensor to the Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are using one Pi, wire the light sensor to it. If you are using two
    Pis, wire the light sensor to the client Pi. The following diagram should match
    either your sole Pi or your client Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2e6ceaa-ae97-4a5c-b1e6-20616c88965b.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we can set up the MQTT broker on the Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an MQTT broker on the Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using two Pis, carry out this entire section on the broker Pi. If
    you are using one Pi, do all of this on your one Pi.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to use the Mosca library to set up an MQTT broker on our Pi. The
    `mosca npm` library makes it really easy to set up and start an MQTT broker. All
    we need is a running mongoDB instance (which we took care of in the last step,
    *Setting up light sensor*).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `broker` folder (either on your original or broker Pi), in the `index.js`
    file, we''re going to set up `mosca`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We now have our MQTT broker ready to go! Time to program our client.
  prefs: []
  type: TYPE_NORMAL
- en: Programming the MQTT client – have the Pi Report Home
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In your `client` folder (and your client Pi if you''re using two Pis), open
    up the `index.js` file and write a script to gather light sensor data every time
    it changes with a threshold of `10` (to prevent too many MQTT messages):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, before the `board.on(''ready'')` handler, construct your MQTT client
    connection, and add an `mqttClient.on()` handler that subscribes to the `light`
    topic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Then, inside the `board.on('ready')` handler, we'll add the code that publishes
    light data to our MQTT broker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've coded our client, we need to set environment variables and get
    it running.
  prefs: []
  type: TYPE_NORMAL
- en: If you're using one Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `client` folder, create a `.env` file, and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Make sure to move the `client` and `broker` folders to your Pi one last time.
  prefs: []
  type: TYPE_NORMAL
- en: If you're using two Pis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the client Pi, in the `client` folder, create a `.env` file with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Replace `[broker Pi hostname]` with the hostname you created back in the *Setting
    up a Second Raspberry Pi* section.
  prefs: []
  type: TYPE_NORMAL
- en: Move the `client` folder to the client Pi one last time.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to get the code running!
  prefs: []
  type: TYPE_NORMAL
- en: Running our MQTT project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The instructions are slightly different for the one Pi and two Pi setups, but
    the end result should look the same.
  prefs: []
  type: TYPE_NORMAL
- en: If you're using one Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SSH into your Pi, navigate to the `client` folder, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This will cause our client to run in the background and re-start if necessary,
    so we can see the `console.log()` output from our broker. It will also ensure
    that our script is running as root, so that the Johnny-Five code will work properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, navigate to the `broker` folder, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You should start to see broker messages moving on the console as you change
    the light on the sensor; this is the MQTT client we set up in our `client` folder
    communicating with the MQTT broker on a different port.
  prefs: []
  type: TYPE_NORMAL
- en: If you're using two Pis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SSH into your client Pi, navigate to the `client` folder, and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This will cause our client to run in the background and re-start if necessary,
    so we can see the `console.log()` output from our broker. It also ensures that
    our script is run as root, so that the Johnny-Five code will work properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, SSH into your broker Pi, navigate to the `broker` folder, and run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You should start to see broker messages moving through on the console as you
    change the light on the sensor; this is the two Pis speaking to each other using
    MQTT! Your client Pi is publishing messages to the broker, which `console.log()`
    them, but you could also connect with other clients that use this data!
  prefs: []
  type: TYPE_NORMAL
- en: You've now built the beginning of your first NodeBots swarm! Now it's time to
    take a peek at the wide world of NodeBots that falls outside the scope of this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Expanding your NodeBots knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The NodeBots universe is huge and expanding everyday! In fact, we've only really
    started exploring the world of Johnny-Five.
  prefs: []
  type: TYPE_NORMAL
- en: Using Johnny-Five on other boards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Raspberry Pi we used in this book is just one of over 40 boards supported
    by Johnny-Five. Just a peek at the platform support page of the Johnny-Five website
    makes this clear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd677979-9ef0-4cf5-9bd2-871f53e97a2e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The best news is that *the code you''ve written in this book can be transferred
    to most of the boards pictured here.* There are only two steps to porting your
    code: changing the pin numbers and making sure the board you are switching to
    offers the functionality you need.'
  prefs: []
  type: TYPE_NORMAL
- en: Figuring out pin numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Changing pin numbers means you need to know what pins on your new board complete
    which tasks. For instance, if you were moving your I2C LCD from the Pi to the
    Arduino Uno, you'd need to know where the SDA and SCL pins are located on the
    Uno.
  prefs: []
  type: TYPE_NORMAL
- en: 'The best way to get this information is to search the internet for [board name]
    pinout, and searching for an image such as the following for the Uno:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17e4fc81-e082-474f-9d77-1ccdcaf7d730.png)'
  prefs: []
  type: TYPE_IMG
- en: A pinout of the ARDUINO Board and ATMega328PU ([https://commons.wikimedia.org/wiki/File:Pinout_of_ARDUINO_Board_and_ATMega328PU.svg](https://commons.wikimedia.org/wiki/File:Pinout_of_ARDUINO_Board_and_ATMega328PU.svg)) by pighixxx is
    licensed under *Creative Commons Attribution-Share Alike 4.0 International* ([https://en.wikipedia.org/wiki/Creative_Commons](https://en.wikipedia.org/wiki/Creative_Commons)).
  prefs: []
  type: TYPE_NORMAL
- en: Then, you can match the pins up from there.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the platform support page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some boards support protocols and peripherals that others do not: the Arduino
    Uno has analog-in pins while the Pi does not, but the Pi has USB support while
    the Uno does not. Luckily, the Johnny-Five documentation, under *Platform Support*,
    tells you what is and isn''t supported. The Uno is shown here as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/497e0a67-33a8-4139-a598-868a89747299.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you've got a glimpse at where you can continue your adventure within
    Johnny-Five, let's take a look at the even larger NodeBots world outside.
  prefs: []
  type: TYPE_NORMAL
- en: Other node robotics platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's a wide world of NodeBots out there, and this list is by no means exhaustive.
    But let's take our first step into that wider world.
  prefs: []
  type: TYPE_NORMAL
- en: The Tessel 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Tessel project sought to create a Node.js native robotics project at a
    relatively low cost but with a great user experience, and they really have done
    a great job (disclaimer: I''m on the Tessel project team as a contributing member).
    In hardware terms, it''s much like a Raspberry Pi—it runs Node.js on top of Linux;
    but not only is it a different form of Linux, the `tessel-cli` abstracts away
    much of the `ssh-ing` and Linux commands that we had to do for the Pi. The Tessel
    2 is the current model, and it supports Johnny-Five right out of the box. To learn
    more, visit the Tessel project website at [https://tessel.io/](https://tessel.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d22d755-cab7-4c7b-89ed-940692674220.png)'
  prefs: []
  type: TYPE_IMG
- en: Image used with open-source license from https://github.com/tessel/project
  prefs: []
  type: TYPE_NORMAL
- en: The Espruino ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are also bots outside the Johnny-Five ecosystem that run versions of JavaScript
    instead of full Node.js. One very popular set is the Espruino project boards.
    There's the Espruino main board, Espruino Wi-Fi, the Espruino Pico, Puck.js, Pixl.js,
    and an MDBT42Q breakout available at the time of writing. The Espruino project
    is headed up by Gordon Williams, you can find the boards at [https://www.adafruit.com/?q=Espruino](https://www.adafruit.com/?q=Espruino),
    while further information is available at [http://www.espruino.com/](http://www.espruino.com/).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1caeb49-3347-4215-976c-ac324e10b46b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Espruino family holds a dear place in my heart, as it powered one of my
    first ever NodeBots, a light-up dress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3af641d-7bf6-453b-baed-bc4c3af25819.png)'
  prefs: []
  type: TYPE_IMG
- en: The author giving a panel talk at NodeConf US 2014 in her light-up dress shown
    in the above image
  prefs: []
  type: TYPE_NORMAL
- en: Programming graphically with Node-RED
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Node-RED is a project that allows you to graphically program using blocks and
    write blocks using Node.js. Its graphical interface makes many tasks easier to
    grasp for younger soon-to-be programmers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f0c4b56-c4d9-4a88-bf81-c2d16719dee7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image used with an open-source license from https://github.com/node-red/node-red
  prefs: []
  type: TYPE_NORMAL
- en: Again, this list just scratches the surface of the ever-burgeoning NodeBots
    world, and I encourage you to explore and find what works for you!
  prefs: []
  type: TYPE_NORMAL
- en: Continuing on your NodeBots adventure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are a few pieces of advice I've curated over the years to help you continue
    on your NodeBots journey; I hope they help you and I can't wait to see what you
    build!
  prefs: []
  type: TYPE_NORMAL
- en: Figuring out what to build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I tend to keep a note file open on my phone of cool things I''d like to have.
    Then, I go through that list and think: *can I build this?* I make sure not to
    consider whether I can buy it straight-up right away—sometimes it''s more fun
    to build the thing you want instead of just buying it, and about 90% of the time,
    you end up being able to build a project that suits you instead of making do with
    a store-bought item that doesn''t quite do everything you need.'
  prefs: []
  type: TYPE_NORMAL
- en: Reaching out to the NodeBots community
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Join us on Gitter at [https://gitter.im/rwaldron/johnny-five](https://gitter.im/rwaldron/johnny-five).
    We love to help troubleshoot problems and answer questions! When you see someone
    doing NodeBots on Twitter, Reddit, and so on, make sure to reach out! Collaboration
    brings solutions and innovation, and it's a case of the more the merrier in the
    Johnny-Five and NodeBots community!
  prefs: []
  type: TYPE_NORMAL
- en: Where to go to learn more about Electronics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s a small selection of books that help teach electronics and related
    skills to those of you who aren''t electrical engineers; I find them super helpful
    for when I have a hardware problem on my projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The Adafruit Guide to Excellent Soldering* ([https://learn.adafruit.com/adafruit-guide-excellent-soldering/tools](https://learn.adafruit.com/adafruit-guide-excellent-soldering/tools)).
    If you don''t know how to solder, or you''ve just been winging it, give this a
    read to make sure your soldering isn''t what''s stopping your project from working.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Practical Guide to Electronics for Inventors, Fourth Edition*, by Paul Scherz.
    This is a thick book and a dense read, but is a great reference work if you want
    to learn how electronic components work without doing differential equations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Getting Started in Electronics*, by Forrest M Mims III. Do you need something
    a bit lighter than the Practical Guide? This book is a seminal work in hobbyist
    electronics, and this series of project notebooks teaches you how to use components
    to build fun and educational projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we completed our NodeBots journey together by learning how
    to get our NodeBots to talk to each other (or themselves). Then, we delved into
    the wider world of Johnny-Five and NodeBots. Finally, we looked at good reads
    to continue your quest for knowledge regarding electronics and related skills.
  prefs: []
  type: TYPE_NORMAL
- en: I love to see what my readers build—please feel free to reach me at `@nodebotani.st`
    or `@nodebotanist` on twitter to show me what you have come up with—even if it's
    a blinking LED and you're just proud to show it, I'm always happy to see it.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you so much for reading. I appreciate my readers and wish you all the
    best!
  prefs: []
  type: TYPE_NORMAL
