- en: Finding and Working with Geographic Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have spent a significant amount of time creating and interacting with maps
    in our previous chapters. In all our examples, the geographic data was included.
    In this chapter, we will explain how to find geographic data about any country
    in the world.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are typically two sets of data that we will need to create a map in D3:'
  prefs: []
  type: TYPE_NORMAL
- en: A dataset that represents the geographic shape of our map (geodata)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some meaningful data that we want to visualize on the map (for example, population
    density by US countries, or unemployment rate by countries in the world)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This chapter is focused on understanding, manipulating, and optimizing geodata
    for map visualizations. We will accomplish these goals by:'
  prefs: []
  type: TYPE_NORMAL
- en: Explaining three important formats that contain geospatial vector data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding, downloading, and working with large amounts of map data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using techniques to build the right geodata file for your map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geodata file types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are dozens of file formats that represent geographic information. In
    this section, we will focus on three file types: shapefiles, GeoJSON, and TopoJSON.'
  prefs: []
  type: TYPE_NORMAL
- en: What are shapefiles and how do I get them?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Shapefiles are the most popular vector-based file format. They contain polygons
    and lines that represent geographic boundaries. The shapefile format was developed
    by the company Esri as an open standard to work with **geographic information
    systems** (**GIS**). This vector information can also describe other geographic
    entities (rivers, lakes, and railroads). In addition, the file format has the
    ability to store data attributes that are useful when working with visualizations
    (for example, the name of the geographic object, the type, and some relationships).
    Most importantly for us, there is a large repository of free shapefiles located
    at [http://diva-gis.org](http://diva-gis.org). This repository contains a tremendous
    wealth of data at different levels of specificity and granularity.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately for us, shapefiles are in binary format and can be very large.
    This makes them very difficult, if not impossible, to use in standard web development.
    Thankfully, there are some tools to help us leverage the large repository of shapefiles
    and convert them to GeoJSON and TopoJSON. GeoJSON and TopoJSON are JavaScript-friendly,
    much smaller, and easier to use in our web development context. In the previous
    chapters, all of the geographic data was provided in TopoJSON.
  prefs: []
  type: TYPE_NORMAL
- en: Acquiring shapefiles for a specific country
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with a map of Spain and go through the process of getting our
    first shapefile:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [http://www.diva-gis.org/gdata](http://www.diva-gis.org/gdata) and select
    Spain from the drop-down list, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f3a34fa-cee1-4148-8c70-7e6898af70ba.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Once Spain is selected, you will see a large selection of geographic data to
    choose from (Roads, Railroads, and so on). Select the Administrative areas option
    to draw the primary boundaries of the country and regions. Click on OK; it will
    take you to the download page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it's downloaded, you will have an `ESP_adm.zip` file containing the shapefile
    data for the administrative areas of Spain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After unzipping the file, you will see that the files are organized into progressively
    increasing numbers, `ESP_adm0` to `ESP_adm4`. ESP represents the abbreviation
    of the country and each number represents the increasing amount of detail found
    in each data file. For example, `ESP_adm0` will draw just the outline of Spain,
    while `ESP_adm3` will include the provinces of the country.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GeoJSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GeoJSON is a specific JSON format for describing geographic data structures.
    It is important to know that GeoJSON does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Contains all the information required to draw geographic data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is a standard JSON format and can be used instantly in JavaScript when building
    for the web.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is required by D3 when defining our `d3.geo.path` function, as seen in the previous
    chapters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discretely defines each geographic shape. For example, if two countries share
    a border, the GeoJSON file will completely define both countries, therefore defining
    the border twice. It does not provide any mechanisms to optimize the data file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because D3 relies on GeoJSON, we will explain some of the highlights of the
    specification. For a complete explanation, please see [http://geojson.org](http://geojson.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, you will not incorporate the GeoJSON file directly in your D3 work.
    TopoJSON, explained in the next section, offers a more compact solution. However,
    it is still important to understand the specification, so let''s walk through
    the GeoJSON of Spain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first property of the JSON object identifies the GeoJSON file as a collection
    of features (`FeatureCollection`). Each member of the collection (the array in
    the preceding `features` property) holds a specially formatted JSON object called
    a `feature`. The `d3.geo.path` function that we used in the previous chapters
    knows how to convert the `feature` object into a polygon using an SVG path. By
    iterating over an array of these features and drawing each polygon one by one,
    we create a D3 map.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `feature` object must adhere to the following properties in order for D3
    to convert the object into a polygon:'
  prefs: []
  type: TYPE_NORMAL
- en: '`geometry`: This is another GeoJSON specification that contains types and coordinates
    that indicate exactly how to draw the shape. We will not spend a lot of time explaining
    exactly how the specification draws the object. D3 will do all the hard work for
    us. Leveraging the enter/update/exit pattern, we pass a special `d3.geo.path`
    function to each feature. This function will take the geometry information about
    the feature and create the shape for us automatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`properties`: This is any additional data to be attached to the feature. This
    is a typical name/value pair JSON object. In the preceding example, the `properties`
    attribute is leveraged to store the name of the country. This is very helpful
    when we need to find the country later to bind additional data to the visualization.
    See the following screenshot for examples of properties that can be bound to a
    feature object:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1f1de33e-82ab-4547-9695-b1c01d9306b6.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '`id`: This is a placeholder that can be leveraged to store a unique identifier
    to the particular feature in the collection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A quick map in D3 with only GeoJSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For a moment, let''s pretend that TopoJSON does not exist and illustrate how
    only GeoJSON can be used to create a map. This will help illustrate the need for
    TopoJSON in the next section. The following code snippet is a quick example to
    tie everything together; you can also open `example-1.html` from the `chapter-6`
    folder (`http://localhost:8080/chapter-6/example-1.html`) to see the map in your
    browser of the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that the code is almost identical to the examples in the previous chapters.
    The only exception is that we are not calling the `topojson` function (we will
    cover why `topojson` is important next). Instead, we are passing the data from
    the AJAX call directly into the *data join* for the following `enter()` call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As predicted, we have our map of Spain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a1aec861-0596-499a-83e0-6a6e706191fd.png)'
  prefs: []
  type: TYPE_IMG
- en: While using GeoJSON directly may seem like the best approach, there are some
    problems. Primarily, a one-to-one conversion of an Esri shapefile to the GeoJSON
    format contains a lot of detail that is probably unnecessary and will create a
    huge GeoJSON file. The larger the file, the more time it will take to download.
    For example, `spain-geo.json` produced an almost 7 MB GeoJSON file.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will explore how TopoJSON can help by modifying several optimization
    levers while still maintaining significant details.
  prefs: []
  type: TYPE_NORMAL
- en: TopoJSON basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TopoJSON is another JSON-based format that encodes geographic data. If you remember,
    GeoJSON describes geographic data discretely. This means GeoJSON borders can be
    described twice. The TopoJSON format removes this duplicate behavior, often creating
    files that are 80 percent smaller. This format is extremely helpful when building
    for the web, where data transfer size plays an important role.
  prefs: []
  type: TYPE_NORMAL
- en: 'The term TopoJSON can be confusing. Let''s break it down into its three dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TopoJSON, the serialized format**: The actual serialized JSON format that
    describes how to draw geographic shapes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**topojson, the command-line utility**: This is a program that a user can run
    to create TopoJSON files from shapefiles. The utility contains many levers to
    further reduce the size of the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**topojson.js, the JavaScript library**: The library used in your D3 map to
    convert the TopoJSON-serialized format back to GeoJSON, so that the `d3.geo.path`
    functions work correctly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To illustrate to what extent TopoJSON can reduce the file size, let''s execute
    the command-line utility against the shapefiles we downloaded earlier. Open the
    command line and execute the following in the same directory where you downloaded
    and unzipped the `ESP_adm.zip` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This command creates a new TopoJSON-formatted file named `spain-topo.json`
  prefs: []
  type: TYPE_NORMAL
- en: and preserves all the data properties (the `-p` flag) from the `ESP_adm0` shapefile
  prefs: []
  type: TYPE_NORMAL
- en: (note that the shapefile needs to come after the `--` in the command-line syntax).
  prefs: []
  type: TYPE_NORMAL
- en: The `-o` parameter defines the name of the resulting TopoJSON file.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s compare file sizes with GeoJSON versus TopoJSON for the exact
    same geographic region:'
  prefs: []
  type: TYPE_NORMAL
- en: 'GeoJSON: 6.4 MB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TopoJSON: 379 KB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is an incredible compression rate, and we just used the defaults!
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to incorporate TopoJSON into our map, we need to use the `topojson.js`
    JavaScript library and alter a few lines of code. We will start with `example-1.html`.
    The final version can be viewed in `example-2.html` (`http://localhost:8080/chapter-6/example-2.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we add the JavaScript library as a `<script>` tag to our file. Now you
    know why we have been using this library all along:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we inject our `topojson` file that we just created via AJAX:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We add an additional line of code to convert the TopoJSON format to the GeoJSON
    feature format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to remember to create our bounding box using the interpolated features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we use the *data join* on our new data. As expected, we will see our map
    of Spain. Let''s show them side by side in the following screenshot to compare
    GeoJSON and TopoJSON (with GeoJSON on the left and TopoJSON on the right):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7206aacb-4946-41b4-a5ff-beb72e30b230.png)'
  prefs: []
  type: TYPE_IMG
- en: TopoJSON command-line tips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TopoJSON command-line documentation is very complete ([https://github.com/mbostock/topojson/wiki/Command-Line-Reference](https://github.com/mbostock/topojson/wiki/Command-Line-Reference)).
    However, here are a couple of quick and easy tips to get you started.
  prefs: []
  type: TYPE_NORMAL
- en: Preserving specific attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the GeoJSON section, we illustrated that data properties are often part
    of the geographic data. The `topojson` command gives you the ability to filter
    out the ones you are not interested in, as well as provide a better naming convention
    to the ones you do want to keep. These capabilities are in the `-p` flag and passed
    to the command. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create the TopoJSON file, remove all properties except ISO, and rename
    the ISO property to something easy to recognize. You can address multiple properties
    by comma-separating the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Simplification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mike Bostock provides an excellent tutorial on simplification, and how it works,
    at [http://bost.ocks.org/mike/simplify/](http://bost.ocks.org/mike/simplify/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, it is a way to reduce geometric complexity through line-simplification
    algorithms. For example, if you do not need much detail in a very jagged coast
    of a country, you can apply line-simplification algorithms to smooth out the jaggedness
    and significantly reduce the size of the TopoJSON file. The command-line parameter
    you use is `-s` to adjust the simplification in the TopoJSON conversion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We typically realize that when dealing with shapefiles from DIVA-GIS, the best
    range is around 7e-7 to keep within the per-pixel threshold, which is less than
    the area of the map. At this range, the size compression is very significant and
    the map quality is still very acceptable for web development. Consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Original**: 378 KB, great detail and quality:![](img/b0f255d9-ee89-48e3-a11c-1bc58c048241.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simplified at -s 7e-7**: 3.6 KB and acceptable quality:![](img/ed1bd98f-f84b-4c79-b5fd-649d03080af1.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Very simple at -s 7e-5**: 568 bytes but the map is unrecognizable:![](img/e2fea97e-d050-43dd-a42c-64796c5c982f.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merging files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final tip involves merging multiple shapefiles into a single TopoJSON file.
    This is extremely useful if you need separate geographic information but want
    to fetch it in a single AJAX request. To append additional files, you add them
    after the `-` in the command line. Consider this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'It will produce the following object structure, where the data for `ESP_adm0`
    is the data for the country, and `ESP_adm1` is the data for the regions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03f298b1-106d-4f6c-8008-ab18f2922c15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There is also the opportunity to rename the object they will map to in the
    resulting TopoJSON file. Again, this can help create readable code. The renaming
    follows the same convention as renaming specific properties. For example, type
    in this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will create the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae3f9b56-eb2b-465d-b93f-707363a7eed0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this case, you would change your original code, which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You have to change it to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This is much nicer to look at! Please look at `example-3.html` (`http://localhost:8080/chapter-6/example-3.html`)
    to see how all of this information can be tied together.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you should feel confident that you can find and modify datasets
    to your needs. We've covered common locations from where you can acquire data,
    and we've touched on the different types of flags TopoJSON offers. With these
    skills, it is up to you to make sure your data is trimmed and is acquired to your
    visualization needs. This closes the circle of developing maps with D3\. In the
    next chapter, we will refine your craft by focusing on testing your visualizations.
  prefs: []
  type: TYPE_NORMAL
