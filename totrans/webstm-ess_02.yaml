- en: Chapter 2. Improving Your Efficiency with Smart Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you embarked on the path of familiarizing yourself
    with the world of WebStorm. You have not just learned about a couple of basic
    things, but also created a simple project using several features so you now have
    the first-hand elementary experience of using WebStorm, and now it is time to
    go further and cultivate your skills.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to deal with a number of really smart features
    that will enable you to fundamentally change your approach to web development
    and learn how to gain maximum benefit from WebStorm. We are going to study the
    following in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Syntax highlighting
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On-the-fly code analysis
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart code features
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiselect feature
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactoring facility
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced navigation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Syntax highlighting
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Syntax highlighting facility is one of the core things that any code editor
    must be great at, because even a dozen of uncolored lines of code may be confusing
    and even irritating. Further, you can see how WebStorm performs the highlighting:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![Syntax highlighting](img/00020.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: WebStorm not only neatly highlights the code, but also provides you with a bunch
    of flexible settings for doing this. It means that you are able to customize each
    particle of the code appearance completely up to your preferences. You are enabled
    to customize highlighting for JavaScript and CoffeeScript and TypeScript, CSS
    and SASS/SCSS, JSON and XML and YAML, and so on.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure syntax highlighting, open the **Preferences** window, then go
    to the **Colors & Fonts** subsection of the **Editor** section, and choose the
    language or technology for customizing its code styling:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![Syntax highlighting](img/00021.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: For each code unit—keywords, tags, numbers and words, comments, punctuation
    signs, variable and function declarations—you can change its appearance—bold or
    italic, the color of the foreground and background, font effects, and much more.
    Below the configuration panel, you can find a preview panel where you can observe
    all the changes you performed in real time. Besides, if you know what code unit
    you would like to customize but don't know what it is called, you can simply click
    on any sign or word of the code in the preview panel, and it will be automatically
    chosen in the list of code unit names, as well as all occurrences of the same
    type of unit get to blink so you can see what you are choosing.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: After customizing, you can save all settings as a new scheme so that the settings
    can be applied for further projects, as well as this one. To do this, you can
    simply click the **Save As...** button above the settings, and name this new code
    style scheme.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: WebStorm is also able to detect the language you are using in specific contexts
    and will highlight the code accordingly. So, for example, if you are writing JavaScript
    code inside an HTML file, WebStorm will be able to detect this and highlight your
    code correctly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: On-the-fly code analysis
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WebStorm will perform static code analysis on your code on the fly. The editor
    will check the code, based on the language used, and the rules you specify and
    highlight warnings and errors as you type. This is a very powerful feature that
    means you don't need to have an external linter and will catch most errors quickly,
    thus making a dynamic and complex language like JavaScript more predictable and
    easy to use.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Runtime error and any other error, such as syntax or performance, are two things
    to consider. To investigate the first one, you need tests or a debugger, and it
    is obvious that they have almost nothing in common with the IDE itself (although,
    when these facilities are integrated into the IDE, such a synergy is better, but
    that is not it). You can also examine the second type of errors the same way,
    but is it convenient? Just imagine that you need to run tests after writing the
    next line of code. It is no go! Won''t it be more efficient and helpful to use
    something that keeps an eye on and analyzes each word being typed in order to
    notify you about probable performance issues and bugs, code style and workflow
    issues, various validation issues, warn of dead code and other likely execution
    issues before executing the code, to say nothing of reporting inadvertent misprints.
    WebStorm is the best fit for it. It performs a deep-level analysis of each line,
    each word in the code. Moreover, you needn''t break off your developing process
    when WebStorm scans your code; it is performed on the fly and thus so called:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![On-the-fly code analysis](img/00022.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: 'WebStorm also enables you to get a full inspection report on demand. To get
    it, go to the menu: **Code** | **Inspect Code**. It pops up the **Specify Inspection
    Scope** dialog where you can define what exactly you would like to inspect, and
    click **OK**. Depending on what is selected and of what size, you need to wait
    a little for the process to finish, and you will see the detailed results where
    the Terminal window is located:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![On-the-fly code analysis](img/00023.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: You can expand all the items, if needed. To the right of this inspection result
    list you can see an explanation window. To jump to the erroneous code lines, you
    can simply click on the necessary item, and you will flip into the corresponding
    line.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides simple indicating where some issue is located, WebStorm also unequivocally
    suggests the ways to eliminate this issue. And you needn''t even make any changes
    yourself—WebStorm already has quick solutions, which you need just to click on,
    and they will be instantly inserted into the code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![On-the-fly code analysis](img/00024.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: We will go more into the details of code analysis and quality in [Chapter 7](part0048_split_000.html#1DOR01-0c7cc7dc97984506a3b137496d3ab1d6
    "Chapter 7. Analyzing and Debugging Your Code"), *Analyzing and Debugging Your
    Code*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Smart code features
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being an **Integrated Development Environment** (**IDE**) and tending to be
    intelligent, WebStorm provides a really powerful pack of features which you can
    use to strongly improve your efficiency and save a lot of time.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most useful and hot features is code completion. WebStorm continually
    analyzes and processes the code of the whole project, and smartly suggests the
    pieces of code appropriate in the current context, and even more—alongside the
    method names you can find the usage of these methods. Of course, code completion
    itself is not a fresh innovation, but WebStorm performs it in a much smarter way
    than other IDEs do. WebStorm can auto-complete a lot things: Class and function
    names, keywords and parameters, types and properties, punctuation, and even file
    paths.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the code completion facility is on. To invoke it, simply start
    typing some code. For example, in the following image you can see how WebStorm
    suggests object methods:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![Smart code features](img/00025.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: 'You can navigate through the list of suggestions using your mouse or the *Up*
    and *Down* arrow keys. However, the list can be very long, which makes it not
    very convenient to browse. To reduce it and retain only the things appropriate
    in the current context, keep on typing the next letters. Besides typing only initial
    consecutive letter of the method, you can either type something from the middle
    of the method name, or even use the CamelCase style, which is usually the quickest
    way of typing really long method names:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![Smart code features](img/00026.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: It may turn out for some reason that the code completion isn't working automatically.
    To manually invoke it, press *Ctrl* + *Space* on Mac or *Ctrl* + *Space* on Windows.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: To insert the suggested method, press *Enter*; to replace the string next to
    the current cursor position with the suggested method, press *Tab*. If you want
    the facility to also arrange correct syntactic surroundings for the method, press
    *Shift* + *⌘* + *Enter* on Mac or *Ctrl* + *Shift* + *Enter* on Windows, and missing
    brackets and/or new lines will be inserted, up to the styling standards of the
    current language of the code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: The multiselect feature
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the multiple selection (or simply multiselect) feature, you can place
    the cursor in several locations simultaneously, and when you will type the code
    it will be applied at all these positions. For example, you need to add different
    background colors for each table cell, and then make them of twenty-pixel width.
    In this case, you don''t need to perform these identical tasks repeatedly and
    can save a lot of time by placing the cursor after the `<td>` tag, press *Alt*,
    and put the cursor in each `<td>` tag, which you are going to apply styling to:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![The multiselect feature](img/00027.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: 'Now you can start typing the necessary attribute—it is `bgcolor`. Note that
    WebStorm performs smart code completion here too, independently of you typing
    something on a single line or not. You get empty values for `bgcolor` attributes,
    and you fill them out individually a bit later. You need also to change the width
    so you can continue typing. As cell widths are arranged to be fixed-sized, simply
    add the value for `width` attributes as well. An example is shown in the following
    image:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以开始输入必要的属性了——它是`bgcolor`。请注意，WebStorm即使在您没有在单行输入任何内容的情况下，也会在这里执行智能代码补全。您会得到`bgcolor`属性的空值，稍后您将单独填写它们。您还需要更改宽度，以便继续输入。由于单元格宽度被设置为固定大小，因此只需添加`width`属性的值即可。以下图像显示了示例：
- en: '![The multiselect feature](img/00028.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![多选功能](img/00028.jpeg)'
- en: 'Moreover, the multiselect feature can select identical values or just words
    independently, that is, you needn''t place the cursor in multiple locations. Let
    us look at this feature by using another example. Say, you changed your mind and
    decided to colorize not backgrounds but borders of several consecutive cells.
    You may instantly think of using a simple replace feature but you needn''t replace
    all attribute occurrences, only several consecutive ones. For doing this, you
    can place the cursor on the first attribute, which you are going to perform changes
    from, and click *Ctrl* + *G* on Mac or *Alt* + *J* on Windows as many times as
    you need. One by one the same attributes will be selected, and you can replace
    the `bgcolor` attribute for the `bordercolor` one:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，多选功能可以选择相同值或独立单词，也就是说，您不需要将光标放在多个位置。让我们通过另一个示例来查看这个功能。比如说，您改变了主意，决定将几个连续单元格的背景色改为边框色。您可能会立刻想到使用简单的替换功能，但您不需要替换所有属性出现，只需几个连续的即可。为此，您可以将光标放在您将要执行更改的第一个属性上，然后在Mac上多次点击*Ctrl*
    + *G*或在Windows上点击*Alt* + *J*，直到您需要。一个接一个地，相同的属性将被选中，您可以将`bgcolor`属性替换为`bordercolor`：
- en: '![The multiselect feature](img/00029.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![多选功能](img/00029.jpeg)'
- en: You can also select all occurrences of any word by clicking *Ctrl* + *command*
    + *G* on Mac or *Ctrl* + *Alt* + *Shift* + *J*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过在Mac上点击*Ctrl* + *command* + *G*或在Windows上点击*Ctrl* + *Alt* + *Shift* +
    *J*来选择任何单词的所有出现。
- en: To get out of the multiselect mode you have to click in a different position
    or use the *Esc* key.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出多选模式，您必须点击不同的位置或使用*Esc*键。
- en: Refactoring facility
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构功能
- en: Throughout the development process, it is almost unavoidable that you have to
    use refactoring. Also, the bigger code base you have, the more difficult it becomes
    to control the code, and when you need to refactor some code, you will most likely
    be up against some issues relating to, for example, naming omission or not taking
    into consideration function usage. You learned that WebStorm performs a thorough
    code analysis so it understands what is connected with what and, if some changes
    occur, it collates them and decides what is acceptable, and what is not to perform
    in the rest of the code. Let us try a simple example.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个开发过程中，您几乎不可避免地需要使用重构。而且，您的代码库越大，控制代码就越困难。当您需要重构某些代码时，您很可能会遇到一些问题，例如命名遗漏或没有考虑到函数的使用。您已经了解到WebStorm执行彻底的代码分析，因此它理解什么与什么相关联，如果发生某些变化，它会收集它们并决定在其余代码中可以执行什么，不可以执行什么。让我们尝试一个简单的例子。
- en: 'In a big HTML file you have the following line:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个大的HTML文件中，您有以下的行：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And in a big JavaScript file you have another one:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个大的JavaScript文件中，您还有另一个：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You decided to rename the `id` attribute's value of the input element to `search_field`
    because it is less confusing. You could simply rename it here but after that you
    would have to manually find all the occurrences of the word `search` in the code.
    It is evident that the word is rather frequent so you would spend a lot of time
    recognizing usage cases appropriate in the current context or not. And there is
    a high probability that you would forget something important, and even more time
    will be spent on investigating an issue. Instead, you can entrust WebStorm with
    this task. Select the code unit to refactor (in our case, it is the `search` value
    of the `id` attribute), and click *Ctrl* + *T* on Mac or *Ctrl* + *Alt* + *Shift*
    + *T* on Windows (or simply click the **Refactor** menu item) to call the **Refactor
    This** dialog. There, choose the **Rename…** item and enter the new name for the
    selected code unit (`search_field` in our case). To get only a preview of what
    will happen during the refactoring process, click the **Preview** button, and
    all the changes to apply will be displayed in the bottom. You can walk through
    the hierarchical tree and either apply the change by clicking the **Do Refactor**
    button, or not. If you need a preview, you can simply click the **Refactor** button.
    What you will see is that the `id` attribute got the `search_field` value, not
    the type or placeholder values, even if they have the same value, and in the JavaScript
    file you got `getElementById('search_field')`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that even though WebStorm can perform various smart tasks, it still remains
    a program, and some issues can be caused by so-called artificial intelligence
    imperfection, so you should always be careful when performing the refactoring.
    In particular, manually check the `var` declarations because WebStorm sometimes
    can apply the changes to them as well, but it is not always necessary because
    of the scope.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, this is just a little of what you are enabled to perform with refactoring.
    The basic things that the refactoring facility allows you to do are as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![Refactoring facility](img/00030.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: 'The elements in the preceding screenshot are explained as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '**Rename…**: You have already got familiar with this refactoring. Once again,
    with it you can rename code units, and WebStorm automatically will fix all references
    of them in the code. The shortcut is *Shift* + *F6*.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Change Signature…**: This feature is used for changing function names, and
    adding/removing, reordering, or renaming function parameters, that is, changing
    the function signature. The shortcut is *⌘* + *F6* for Mac and *Ctrl* + *F6* for
    Windows.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Move…**: This feature enables you to move files or directories within a project,
    and it simultaneously repairs all references to these project elements in the
    code so you needn''t manually repair them. The shortcut is *F6*.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Copy…**: With this feature, you can copy a file or directory or even a class,
    with its structure, from one place to another. The shortcut is *F5*.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safe Delete…**: This feature is really helpful. It allows you to safely delete
    any code or entire files from the project. When performing this refactoring, you
    will be asked about whether it is necessary to inspect comments and strings or
    all text files for the occurrence of the required piece of code or not. The shortcut
    is *⌘* + *delete* for Mac and *Alt* + *Delete* for Windows.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Variable…**: This refactoring feature declares a new variable where the result
    of the selected statement or expression is put. It can be useful when you realize
    there are too many occurrences of a certain expression so it can be turned into
    a variable, and the expression can just initialize it. The shortcut is *Alt* +*⌘*
    + *V* for Mac and *Ctrl* + *Alt* + *V* for Windows.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parameter…**: When you need to add a new parameter to some method and appropriately
    update its calls, use this feature. The shortcut is *Alt* + *⌘* + *P* for Mac
    and *Ctrl* + *Alt* + *P* for Windows.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Method…**: During this refactoring, the code block you selected undergoes
    analysis, through which the input and output variables get detected, and the extracted
    function receives the output variable as a return value. The shortcut is *Alt*
    + *⌘* + *M* for Mac and *Ctrl* + *Alt* + *M* for Windows.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inline…**: The inline refactoring works contrariwise to the extract method
    refactoring—it replaces surplus variables with their initializers making the code
    more compact and concise. The shortcut is *Alt* + *⌘* + *N* for Mac and *Ctrl*
    + *Alt* + *N* for Windows.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced navigation
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigation is one of the most important things in any IDE because if you cannot
    quickly find or switch over to whatever you want, there is little reason to use
    such a program, as there is no time saving aspect.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Partially, we examined some navigation features WebStorm provides. They are
    the menu panel, the navigation toolbar, and tool tabs. It is all great but we
    still need to perform a lot of mouse movements to reach the necessary place in
    the code. We are going to see how WebStorm can help us working with code by going
    through some of these power navigation tools. We are going to go through them
    based on what type of action they can help us perform.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: File navigations
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This are a set of shortcuts that help us work efficiently with files:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: To navigate to a file in the project, press *Shift* + *⌘* + *O* on Mac or *Ctrl*
    + *Shift* + *N* on Windows.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To navigate between the files opened in the editor, press *Ctrl* + *Tab* on
    Mac or *Alt* + *Tab* on Windows.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To see what files were last opened, press *⌘* + *E* on Mac or *Ctrl* + *E* on
    Windows. To see what files were recently updated, press *Shift* + *⌘* + *E* on
    Mac or *Ctrl* + *Shift* + *E* on Windows.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To navigate to a class in the project, press *⌘* + *O* on Mac or *Ctrl* + *N*
    on Windows.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code navigations
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These shortcuts are designed to help us to navigate and quickly perform tasks
    on our source code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: To pop up a structure view of the file, press *⌘* + *F12* on Mac or *Ctrl* +
    *F12* on Windows.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To get hierarchy for the selected class, press *Ctrl* + *H* on Mac or *Ctrl*
    + *H* on Windows.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To navigate to a declaration in the project, press *⌘* + *B* on Mac or *Ctrl*
    + *B* on Windows.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To navigate to the next method, press *⌘* + *O* on Mac or *Alt* + *Down* arrow
    key on Windows. To navigate to the previous method, press *⌘* + *O* on Mac or
    *Alt* + *Up* arrow key on Windows.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to duplicate the current line, press *Ctrl* + *D* on Mac or *Alt*
    + *D* on Windows.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to comment/uncomment the line, press *⌘* + */* on Mac or *Ctrl*
    + */* on Windows.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to move the line to another place in the code, press *Shift* + *⌘*
    + *Down*/*Up* on Mac or *Ctrl* + *Shift* + *Down*/*Up* on Windows. It will also
    preserve syntactical correctness when moving.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search navigations
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use the search navigations to quickly find what we need in our project:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: To find something in path, press *Shift* + *⌘* + *F* on Mac or *Ctrl* + *Shift*
    + *F* on Windows. To replace something in path, press *Shift* + *⌘* + *R* on Mac
    or *Ctrl* + *Shift* + *R* on Windows.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To find all usages of the selected piece of code, press *Alt* + *F7*. To find
    the usages of the selected piece of code only in the current file, press *⌘* +
    *F7* on Mac or *Ctrl* + *F7* on Windows.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To open the last used tool window, press *F12*. To close the currently active
    tool window, press *Shift* + *Esc*.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To get more information about shortcuts read the online documentation: [https://www.jetbrains.com/webstorm/help/keyboard-shortcuts-and-mouse-reference.html](https://www.jetbrains.com/webstorm/help/keyboard-shortcuts-and-mouse-reference.html).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the most distinctive features of WebStorm,
    which are the core constituents of improving your efficiency in building web applications.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we are going to see how we can build simple web pages with
    the help of project templates and work with VCS and file watchers.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
