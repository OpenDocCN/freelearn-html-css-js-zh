["```js\n$ meteor create RESTSample\n$ cd RESTSample\n$ rm RESTSample.*\n$ mkdir -p server/api\n$ mkdir server/model\n$ meteor add iron:router\n$ meteor\n\n```", "```js\n    http://localhost:3000/api/\n\n    ```", "```js\n    Content-Type | application/json\n\n    ```", "```js\n    Quotes = new Mongo.Collection('quotes');\n    ```", "```js\n    function writeHeaders(self) {\n      self.response.statusCode = 200;\n      self.response.setHeader('Content-type', 'application/json');\n      self.response.setHeader('Access-Control-Allow-Origin', '*');\n      self.response.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n    }\n    ```", "```js\n    Router.route('/api', {\n        where: 'server'\n      })\n      .get(function () {\n        //write headers\n        writeHeaders(this);\n        //send our response...\n        this.response.end('GET not supported\\n');\n      });\n    ```", "```js\n    .post(function () {\n        writeHeaders(this);\n        var user = this.request.body.owner;\n        if (!user) {\n          this.response.end('No user specified...\\n');\n          return;\n        }\n        var quotes = Quotes.find({\n          owner: user\n        }).fetch();\n        this.response.end(JSON.stringify(quotes));\n      })\n    ```", "```js\n    .put(function () {\n        writeHeaders(this)\n        var upQuote = this.request.body.update;\n        if (!upQuote) {\n          this.response.end('nothing to update');\n        }\n        var update = Quotes.upsert({\n          _id: upQuote.id\n        }, {\n          $set: upQuote.changes\n\n        });\n        this.response.end('Quote accepted!...\\n');\n\n      });\n    ```", "```js\n    {\"update\":{\n    \"changes\":{\"author\":\"Jerry Pournelle and Larry Niven\", \"text\":\"Second guessing God is an old, old game.\", \"owner\":\"me\"    \n    }\n    }}\n    ```", "```js\n    Quote accepted!...\n\n    ```", "```js\n    {\"owner\":\"me\"}\n    ```", "```js\n$ meteor create QuotesApp\n$ cd QuotesApp\n$ rm QuotesApp.*\n$ mkdir {client,both}\n$ meteor add twbs:bootstrap\n$ meteor\n\n```", "```js\n    <head>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\">\n      <link href='http://fonts.googleapis.com/css?family=Raleway' rel='stylesheet' type='text/css'>\n    </head>\n    ```", "```js\n    <template name=\"layout\">\n      <div class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n        <div class=\"navbar-header\">\n          <a class=\"navbar-brand\" id=\"btn-home\" href=\"/\">\n            <span class=\"glyphicon glyphicon-book\"></span></a>\n          <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n          </button>\n        </div>\n        <div class=\"navbar-collapse collapse\">\n          <ul class=\"nav navbar-nav navbar-right\">\n            <!-- Login buttons will go here -->\n          </ul>\n        </div>\n      </div>\n      <!-- App panels will go here-->\n    </template>\n    ```", "```js\n    <body>\n      {{> layout}}\n    </body>\n    ```", "```js\n    body {font-family: 'Raleway', sans-serif;}\n    .page {vertical-align: top;position: absolute;width: 100%;height: 100%;background-color: #eee;top: 50px;}\n    .page-detail {background-color: #fff;color: #555;}\n    .glyphicon-book {font-size: 3rem;line-height: 2rem;}\n    .toggle-edit{margin-top: 1.4rem;font-size: 2rem;\n    background-color: #777;border-radius: 50%;\n    border: none;padding: 1.5rem;width: 5rem;height: 5rem;}\n    .input-group {margin-top: 1.4rem;}\n    .quote {font-size:2rem;}\n    .title {font-size:3rem;}\n    .author {margin-bottom:2rem;margin-top:1rem;}\n    .tag {margin:0.25rem;}\n    .tags {margin-top:1rem;}\n    .add-quote {height:9rem;}\n    .add-quote .btn{color:#5bc0de;font-size:4rem;}\n    ```", "```js\n    $ meteor add accounts-twitter\n    $ meteor add ian:accounts-ui-bootstrap-3\n\n    ```", "```js\n    <!-- Login buttons will go here -->\n    ```", "```js\n    {{> loginButtons}}\n    ```", "```js\n    $ meteor remove autopublish\n\n    ```", "```js\n    Quotes = new Mongo.Collection('quotes');\n    ```", "```js\n    if (Meteor.isClient) {\n      Meteor.subscribe('quotes');\n    } else {\n      Meteor.publish('quotes', function () {\n        return Quotes.find({\n          owner: this.userId\n        });\n      })\n    }\n    ```", "```js\n    $ meteor add iron:router\n\n    ```", "```js\n    Router.configure({ layoutTemplate: 'layout' });\n    ```", "```js\n    <!-- App panels will go here-->\n    ```", "```js\n    {{> yield}}\n    ```", "```js\n    Router.map(function(){\n      this.route('main', {\n        path: '/',\n        template:'main'\n      });\n      this.route('detail', {\n        path: '/quote/:_id',\n        template:'detail', data: function () {\n          return Quotes.findOne({_id: this.params._id});\n        }\n      });\n    });\n    ```", "```js\n    <template name=\"main\">\n      <div class=\"page\">\n        <h1>this is the main page</h1>\n      </div>\n    </template>\n    ```", "```js\n    <template name=\"detail\">\n      <div class=\"page page-detail\">\n        <h1>this is the detail page</h1>\n      </div>\n    </template>\n    ```", "```js\n    $ meteor add percolate:momentum-iron-router\n\n    ```", "```js\n    Template.layout.helpers({\n      transition: function () {\n        return function (from, to, element) {\n          if (to.template==\"main\") return 'left-to-right';\n          return 'right-to-left';\n        }\n      }\n    });\n    ```", "```js\n    {{#momentum plugin='iron-router' options=transition}}\n          {{> yield}}\n    {{/momentum}}\n\n    ```", "```js\n     <template name=\"main\">\n      <div class=\"page\">\n     <div class=\"list-group\">\n     {{#each quotes}}\n     <a class=\"list-group-item quote-title\">\n     <span class=\"glyphicon glyphicon-menu-right pull-right\"></span>\n     <h4 class=\"list-group-item-heading\">{{title}}</h4>\n     {{#each tagsFormatted}}\n     <div class=\"btn btn-xs btn-primary\">{{tag}}</div>\n     {{/each}}\n     </a>\n     {{/each}}\n     </div>\n      </div>\n    </template>\n    ```", "```js\n    Template.main.helpers({\n      quotes: function(){\n        return Quotes.find().fetch();\n      },\n      tagsFormatted: function(){\n        var tags = this.tags;\n        if (!tags) return [];\n        return _.map(tags.split(','),function(d){\n          var retTag = '#' + d;\n          return {tag:retTag};\n        });\n      }\n    });\n    ```", "```js\n    Template.main.events({\n      'click .quote-title' : function(e){\n        Router.go('/quote/'+this._id);\n      }\n    });\n    ```", "```js\n    Quotes.insert({owner:Meteor.userId(), title:'quote title', quote:'quote body', author:'quote author', tags:'test,tags,field'})\n\n    ```", "```js\n    <template name=\"detail\">\n      <div class=\"page page-detail\">\n        <div class=\"container\">\n          {{#if editing}}\n          {{else}}\n          <h3 class=\"title\">{{title}}</h3>\n          <div class=\"container quote\">{{quote}}</div>\n          <div class=\"row container author\">\n            <div class=\"pull-right\">-{{author}}</div>\n          </div>\n          <div class=\"row container tags\">\n            {{#each tagsFormatted}}\n            <div class=\"btn btn-xs btn-primary tag\">{{tag}}</div>\n            {{/each}}\n          </div>\n          {{/if}}\n        </div>\n      </div>\n    </template>\n    ```", "```js\n    Template.detail.helpers({\n      tagsFormatted: function () {\n        var tags = this.tags;\n        if (!tags) return [];\n        return _.map(tags.split(','), function (d) {\n          var retTag = '#' + d;\n          return {\n            tag: retTag\n          };\n        });\n      }\n    });\n    ```", "```js\n        </div>\n     <div class=\"container\">\n     <div class=\"btn btn-danger toggle-edit pull-right\">\n     <span class=\"glyphicon {{editbuttonstate}}\"></span>\n     </div>\n     </div>\n      </div>\n    </template>\n    ```", "```js\n    {{#if editing}}\n     <div class=\"input-group input-group-lg\">\n     <span class=\"input-group-addon\" id=\"addon-title\">Title</span>\n     <input type=\"text\" id=\"input-title\" class=\"form-control\" placeholder=\"title...\" value=\"{{title}}\">\n     </div>\n    {{else}}\n    ```", "```js\n          </div>\n     <div class=\"input-group\">\n     <span class=\"input-group-addon\" id=\"addon-quote\">Quote</span>\n     <textarea name=\"input-quote\" id=\"input-quote\" rows=\"4\" class=\"form-control\">{{quote}}\n     </textarea>\n     </div>\n    {{else}}\n    ```", "```js\n          </div>\n     <div class=\"input-group\">\n     <input type=\"text\" id=\"input-author\" class=\"form-control\" placeholder=\"author...\" value=\"{{author}}\">\n     <span class=\"input-group-addon\" id=\"addon-author\">Author</span>\n     </div>\n    {{else}}\n    ```", "```js\n          </div>\n     <div class=\"form tags\">\n     <textarea name=\"input-tags\" id=\"input-tags\" class=\"form-control\" rows=\"5\">{{tags}}</textarea>\n     </div>\n    {{else}}\n    ```", "```js\n      },\n     editbuttonstate: function () {\n     return (Session.get('editing')) ?\n     'glyphicon-ok' : 'glyphicon-pencil';\n     },\n     editing: function () {\n     return (Session.equals('editing', true));\n     }\n    });\n    ```", "```js\n    Template.detail.events({\n      'click .toggle-edit': function (e) {\n        e.preventDefault();\n        var editflag = Session.equals('editing', true);\n        if (editflag && Meteor.userId()) {\n          var upQuote = {};\n          upQuote.title = $('#input-title').val();\n          upQuote.quote = $('#input-quote').val();\n          upQuote.author = $('#input-author').val();\n          upQuote.tags = $('#input-tags').val();\n          upQuote.owner = Meteor.userId();\n          Quotes.upsert({\n            _id: this._id\n          }, {\n            $set: upQuote\n          });\n        }\n        if (!editflag && !Meteor.userId()) return;\n        Session.set('editing', (!editflag));\n      }\n    });\n    ```", "```js\n          {{/each}}\n     <a href=\"#\" class=\"list-group-item add-quote\">\n     <div class=\"btn btn-lg center-block\">\n     <span class=\"glyphicon glyphicon-plus\"></span>\n     </div>\n     </a>\n        </div>\n      </div>\n    </template>\n    ```", "```js\n      },\n     'click .add-quote' : function(e){\n     if (!Meteor.userId()) return;\n     Quotes.insert({owner:Meteor.userId()},\n     function(e,d){\n     if (!e){\n     Session.set('editing',true);\n     Router.go('/quote/'+d);\n     }\n     });\n     }\n    });\n    ```", "```js\n    $ meteor deploy [your-test-url].meteor.com\n\n    ```", "```js\n    $ meteor deploy packt-quotes.meteor.com\n\n    ```", "```js\n    Deploying to packt-quotes.meteor.com. \n    Now serving at http://packt-quotes.meteor.com\n\n    ```", "```js\n    $ meteor install-sdk ios\n\n    ```", "```js\n    $ meteor add-platform ios\n\n    ```", "```js\n    $ meteor run ios-device --mobile-server [your-app-url.com]\n\n    ```", "```js\n    $ meteor run ios-device --mobile-server packt-quotes.meteor.com\n\n    ```", "```js\n    App.info({\n    name: '[yourappname]',\n    description: 'Description of my app',\n    version: '0.0.1'\n    });\n\n    App.icons({\n    'iphone': 'resources/icons/icon-60.png',\n    'iphone_2x': 'resources/icons/icon-60@2x.png'\n    });\n\n    App.launchScreens({\n    'iphone': 'resources/splash/Default~iphone.png',\n    'iphone_2x': 'resources/splash/Default@2x~iphone.png',\n    'iphone5': 'resources/splash/Default-568h@2x~iphone.png'\n    });\n    ```", "```js\n    $ meteor build [your-output-directory] --server=[your-app-url]\n\n    ```", "```js\n    $ meteor build ~/builds/ --server=packt-quotes.meteor.com\n\n    ```", "```js\n    $ meteor add meteorhacks:npm\n    $ meteor\n\n    ```", "```js\n    {\n      \"twit\" : \"1.1.20\"\n    }\n    ```", "```js\n    $ meteor\n\n    ```", "```js\n    Twitter = Meteor.npmRequire('twit');\n\n    Twit = new Twitter({\n      consumer_key: '…',\n      consumer_secret:'…',\n      access_token: '…',\n      access_token_secret: '…'\n    });\n    ```", "```js\n    Meteor.methods({\n      twuote : function(id){\n      }\n    });\n    ```", "```js\n        if (!id || !this.userId) return;\n        var quote = Quotes.findOne({_id:id});\n        if (!quote || !quote.quote || !quote.author) return;\n    ```", "```js\n        var tweet = '\"';\n        if (quote.quote.length>138){\n          tweet += quote.quote.slice(0,135);\n          tweet += '...\"';\n        } else {\n          tweet += quote.quote + '\" --' + quote.author;\n        }\n        if (tweet.length>140){\n          tweet = tweet.slice(0,137) + '...';\n        }\n    ```", "```js\n        Twit.post('statuses/update', { status: tweet },\n          Meteor.bindEnvironment(function(err, data, response) {\n          Quotes.update({_id:id},{$set:{tweeted:true}});\n        })\n        );\n        return tweet;\n    ```", "```js\n        <div class=\"container\">\n          <div class=\"btn btn-danger toggle-edit pull-right\">\n            ...\n          </div>\n     <div class=\"btn pull-left {{tweetColor}}\" id=\"btn-tweet\">{{tweetText}}\n     </div>\n        </div>\n    ```", "```js\n    #btn-tweet{margin-top: 2.4rem;}\n    ```", "```js\n    editing: function () {\n        ...\n      },\n     tweetText: function (){\n     return (this.tweeted)?'shared':'share...';\n     },\n     tweetColor: function (){\n     return (this.tweeted)?'btn-success':'btn-info';\n     }\n    });\n    ```", "```js\n      },\n     'click #btn-tweet' : function (e) {\n     if (this.tweeted) return;\n     Meteor.call('twuote',this._id);\n     }\n    });\n    ```"]