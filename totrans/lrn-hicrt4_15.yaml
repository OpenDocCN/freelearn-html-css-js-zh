- en: Chapter 15. Highcharts Online Services and Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 15 章. Highcharts 在线服务和插件
- en: 'In the previous chapter, you learned how to run Highcharts on the server side.
    This enables Highcharts to expand its reach to online services. We will visit
    these services in this chapter and explore what benefits we can gain from them.
    As well as that, we examine how we can extend Highcharts with plugins. In this
    chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何在服务器端运行 Highcharts。这使得 Highcharts 能够将其范围扩展到在线服务。我们将在本章中访问这些服务，并探讨我们可以从它们中获得哪些好处。此外，我们还将探讨如何通过插件扩展
    Highcharts。在本章中，我们将涵盖以下主题：
- en: What service [export.highcharts.com](http://export.highcharts.com) provides
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务 [export.highcharts.com](http://export.highcharts.com) 提供的内容
- en: A step-by-step exercise to create an online chart from the new cloud service—[cloud.highcharts.com](http://cloud.highcharts.com)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用新云服务——[cloud.highcharts.com](http://cloud.highcharts.com) 创建在线图表的逐步练习
- en: What a Highcharts plugin is
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高charts 插件是什么
- en: Two plugin examples – regression and draggable points
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个插件示例 - 回归和可拖动点
- en: Creating a new user experience by interoperating both plugins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过互操作插件创建新的用户体验
- en: How to write a plugin – extend existing methods, export a new method, and handle
    events
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何编写插件 – 扩展现有方法、导出新方法以及处理事件
- en: Highcharts export server – export.highcharts.com
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Highcharts 导出服务器 – export.highcharts.com
- en: In the last chapter, we looked into running Highcharts on the server side. However,
    some users may not want to set up their own server operations. This is where [export.highcharts.com](http://export.highcharts.com)
    comes in. Originally, it was only set up for the exporting module so that users
    running Highcharts on the Internet could export their charts freely. Later, the
    URL was expanded to support online services. This let users enter their own Highcharts
    configuration and download the resulting chart images.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了在服务器端运行 Highcharts。然而，一些用户可能不想设置自己的服务器操作。这时，[export.highcharts.com](http://export.highcharts.com)
    就派上用场了。最初，它仅用于设置导出模块，以便在互联网上运行 Highcharts 的用户可以自由导出他们的图表。后来，URL 扩展以支持在线服务。这使得用户可以输入自己的
    Highcharts 配置并下载生成的图表图像。
- en: 'The following is part of the [export.highcharts.com](http://export.highcharts.com)
    web page:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容是 [export.highcharts.com](http://export.highcharts.com) 网页的一部分：
- en: '![Highcharts export server – export.highcharts.com](img/7451OS_15_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Highcharts 导出服务器 – export.highcharts.com](img/7451OS_15_01.jpg)'
- en: As we can see, the user input indeed corresponds to the parameters of the server-side
    script, `highcharts_convert.js`, which we covered in a previous chapter. Both
    the web interface and server process are implemented in Java, which deliver the
    user's options to the PhantomJS/`highcharts_convert.js` process and exports it
    into SVG. Once the Java server receives the SVG result, it launches Batik to format
    into image files. The source for the whole web service solution is available in
    the `exporting-server/java/highcharts-export` directory.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，用户输入确实对应于服务器端脚本的参数，即我们在上一章中提到的 `highcharts_convert.js`。Web 界面和服务器过程都是用
    Java 实现的，它们将用户的选择传递给 PhantomJS/`highcharts_convert.js` 进程，并将其导出为 SVG。一旦 Java 服务器收到
    SVG 结果，它就会启动 Batik 将其格式化为图像文件。整个网络服务解决方案的源代码位于 `exporting-server/java/highcharts-export`
    目录中。
- en: The downside to the online export service is that it is not WYSIWYG, and so
    can be unintuitive to use. For this reason, a new web service with much richer
    user experience was born— **Highcharts Cloud Service**. We will take a ride in
    the next section and see what difference it brings.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在线导出服务的缺点是它不是所见即所得（WYSIWYG），因此使用起来可能不太直观。因此，诞生了一个具有更丰富用户体验的新网络服务——**Highcharts
    云服务**。我们将在下一节中体验一下，看看它带来了哪些不同。
- en: Highcharts Cloud Service
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Highcharts 云服务
- en: 'In this section, we will review a brand new online chart service developed
    by the Highcharts team, Highcharts Cloud Service ([http://cloud.highcharts.com](http://cloud.highcharts.com)).
    The following screenshot shows the initial welcome screen:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾由 Highcharts 团队开发的一个全新的在线图表服务——Highcharts 云服务 ([http://cloud.highcharts.com](http://cloud.highcharts.com))。以下截图显示了初始欢迎屏幕：
- en: '![Highcharts Cloud Service](img/7451OS_15_02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Highcharts 云服务](img/7451OS_15_02.jpg)'
- en: 'Highcharts Cloud Service is a major milestone in terms of expanding the product
    line. It is designed for users to:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts 云服务是扩展产品线的一个重大里程碑。它旨在为用户提供：
- en: Create HTML5 charts even without any JavaScript or Highcharts knowledge (in
    SIMPLE mode)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使没有任何 JavaScript 或 Highcharts 知识，也能创建 HTML5 图表（在 SIMPLE 模式下）
- en: Prototype their charts interactively without any installation and setting up
    on the web server and Highcharts
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需在Web服务器和Highcharts上安装和设置，即可交互式地原型化图表
- en: Embed charts in online articles, applications, or web pages with a simple hyperlink
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用简单的超链接将图表嵌入在线文章、应用程序或网页中
- en: Store their charts in the cloud rather than locally
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将他们的图表存储在云中而不是本地
- en: Share their charts easily with other people
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他人轻松分享他们的图表
- en: 'The following is a screenshot of a news website linking a chart created from
    the cloud service:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从云服务创建的图表的新闻网站截图：
- en: '![Highcharts Cloud Service](img/7451OS_15_03.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![Highcharts云服务](img/7451OS_15_03.jpg)'
- en: 'Let''s try to create our first chart using the cloud service. The web interface
    is wizard-based and intuitive for any non-technical users. The following is the
    initial screen of the cloud service:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用云服务创建我们的第一个图表。Web界面基于向导，对任何非技术用户来说都是直观的。以下是云服务的初始屏幕：
- en: '![Highcharts Cloud Service](img/7451OS_15_04.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Highcharts云服务](img/7451OS_15_04.jpg)'
- en: 'There are three major sections in the interface: the left wizard panel, the
    top-right result chart panel, and the bottom-right series data editor. At the
    top of the left wizard panel, it shows which stage we are currently in. At the
    first stage (**IMPORT**), we can either paste our CSV data into the text area
    and click on upload or manually enter series data through the bottom-right editor.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 界面中分为三个主要部分：左侧向导面板、右上角的结果图表面板和右下角的系列数据编辑器。在左侧向导面板的顶部，显示了我们当前所处的阶段。在第一个阶段（**导入**），我们可以将CSV数据粘贴到文本区域并点击上传，或者通过右下角的编辑器手动输入系列数据。
- en: 'In the preceding screenshot, we have already pasted some data in the left panel.
    When we click on the **Upload and Continue** button, the application progresses
    to stage 2 (**TEMPLATES**). Here is the screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一张截图中，我们已经在左侧面板中粘贴了一些数据。当我们点击**上传并继续**按钮时，应用程序进入第2阶段（**模板**）。以下是截图：
- en: '![Highcharts Cloud Service](img/7451OS_15_05.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![Highcharts云服务](img/7451OS_15_05.jpg)'
- en: 'First, we can see the top-right panel updated with the default line series
    and the bottom-right editor panel is populated with the series data. Although
    the top-right chart doesn''t show anything meaningful, it will become clearer
    as we configure the chart in a later stage. At this point, we can further edit
    the series data in the editor panel if we need to. Let''s select a series in the
    left panel, **3D column chart**, which immediately updates the top-right chart:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以看到右上角面板更新了默认的折线系列，而右下角的编辑器面板填充了系列数据。尽管右上角的图表没有显示任何有意义的内容，但在稍后的配置阶段将会变得清晰。在此阶段，如果我们需要，可以进一步在编辑器面板中编辑系列数据。让我们在左侧面板中选择一个系列，**3D柱状图**，这将立即更新右上角的图表：
- en: '![Highcharts Cloud Service](img/7451OS_15_06.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![Highcharts云服务](img/7451OS_15_06.jpg)'
- en: 'A 3D column chart is displayed in the top-right panel, but the axis and chart
    title are still incorrect. We can either click on the **CONTINUE TO CUSTOMIZE**
    button (shown in the preceding screenshot) or on **CUSTOMIZE** to go to the next
    stage and tune each component in the chart:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在右上角面板中显示了一个3D柱状图，但坐标轴和图表标题仍然不正确。我们可以点击**继续自定义**按钮（如前一张截图所示）或点击**自定义**进入下一阶段，调整图表中的每个组件：
- en: '![Highcharts Cloud Service](img/7451OS_15_07.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![Highcharts云服务](img/7451OS_15_07.jpg)'
- en: 'As we can see, there are different areas in the chart that we can choose to
    configure. In this example, we have changed the chart title, axis type, title,
    and label format. Note that at the **CUSTOMIZE** stage, there are three tabs shown
    underneath. This lets the user choose how to update the chart. **SIMPLE** is the
    most basic and is for non-technical users without any programming experience,
    or for quick simple changes. **ADVANCED** mode is for users who are familiar with
    Highcharts'' options. The user interface is a simple properties update in name
    and value style. The **CODE** level is for users who wish to write JavaScript
    code for the chart, for example, the event handler. The following screenshot shows
    both the **ADVANCED** and **CODE** user interfaces:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，图表中有不同的区域我们可以选择进行配置。在这个例子中，我们已更改了图表标题、坐标轴类型、标题和标签格式。请注意，在**自定义**阶段，下面显示了三个标签。这使用户可以选择如何更新图表。**简单**是最基本的，适用于没有编程经验的技术用户，或者用于快速简单的更改。**高级**模式适用于熟悉Highcharts选项的用户。用户界面是以名称和值样式进行的简单属性更新。**代码**级别适用于希望为图表编写JavaScript代码的用户，例如事件处理程序。以下截图显示了**高级**和**代码**用户界面：
- en: '![Highcharts Cloud Service](img/7451OS_15_08.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Highcharts 云服务](img/7451OS_15_08.jpg)'
- en: Once we are happy with our final chart, we can click on **CONTINUE TO SHARE**
    to generate a hyperlink for the chart.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们对最终的图表满意，我们可以点击 **继续分享** 以生成图表的链接。
- en: Highcharts plugins
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Highcharts 插件
- en: Highcharts can be extended through plugins that allow us to add functionality
    without disturbing the core layer of code and are easy to share. There is a library
    of plugins available online contributed by Highcharts staff and other users at
    [http://www.highcharts.com/plugin-registry](http://www.highcharts.com/plugin-registry).
    One distinct advantage of developing features out of plugins is that we can pick
    and choose the plugin features and build a compressed JavaScript library from
    them. In fact, we can already do something similar with the Highcharts library
    on the download page.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts 可以通过插件进行扩展，这些插件允许我们在不干扰代码核心层的情况下添加功能，并且易于共享。网上有一个插件库，由 Highcharts
    员工和其他用户贡献，位于 [http://www.highcharts.com/plugin-registry](http://www.highcharts.com/plugin-registry)。开发插件功能的一个显著优势是我们可以选择和选择插件功能，并从中构建一个压缩的
    JavaScript 库。实际上，我们已经在下载页面上的 Highcharts 库中做到了类似的事情。
- en: In this section, we will take a tour of a couple of plugins that you may find
    handy.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将浏览一些你可能觉得有用的插件。
- en: The regression plot plugin
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回归绘图插件
- en: 'When we create a scatter plot with lots of data points, it is often worthwhile
    to overlay them with a regression line. Of course, we can always achieve this
    by adding a line series manually. However, we still need to write the code for
    regression analysis. It is much more convenient to include a plugin. The Highcharts
    regression plugin created by Ignacio Vazquez does the job nicely. First, we include
    the plugin:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个包含大量数据点的散点图时，通常值得叠加回归线。当然，我们可以通过手动添加线系列来实现这一点。然而，我们仍然需要编写回归分析的代码。包含一个插件会方便得多。Ignacio
    Vazquez 创建的 Highcharts 回归插件做得很好。首先，我们包含该插件：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we create our scatter chart as usual. Since we include the regression
    plugin, it provides additional regression options:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们像往常一样创建我们的散点图。由于我们包含了回归插件，它提供了额外的回归选项：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here is the chart from the demo ([http://www.highcharts.com/plugin-registry/single/22/Highcharts%20regression](http://www.highcharts.com/plugin-registry/single/22/Highcharts%20regression)):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是演示中的图表（[http://www.highcharts.com/plugin-registry/single/22/Highcharts%20regression](http://www.highcharts.com/plugin-registry/single/22/Highcharts%20regression)）：
- en: '![The regression plot plugin](img/7451OS_15_09.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![回归绘图插件](img/7451OS_15_09.jpg)'
- en: The draggable points plugin
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可拖动点插件
- en: 'Here is another remarkable plugin by Torstein that enables chart viewers to
    drag any series data points. We import the plugin with the following line:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 Torstein 另一个引人注目的插件，它允许图表查看者拖动任何系列数据点。我们使用以下行导入该插件：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This plugin brings two new point events, `drag` and `drop`, which we can define
    the handlers for via the `plotOptions.series.point.events` option (or the `events`
    option in a data point object). Here is the example code from the demo:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件引入了两个新的点事件，`drag` 和 `drop`，我们可以通过 `plotOptions.series.point.events` 选项（或数据点对象中的
    `events` 选项）来定义处理程序。以下是演示中的示例代码：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When we select a data point and move the mouse, a drag event is triggered and
    the demo code will update the textbox below the chart, as seen in the following
    screenshot. The plugin provides several new options to control how we can drag
    and drop the data points. The following is a usage example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们选择一个数据点并移动鼠标时，会触发拖动事件，并且演示代码将更新图表下方的文本框，如下面的截图所示。该插件提供了几个新选项来控制我们如何拖放数据点。以下是一个使用示例：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The Boolean option `draggableX/Y` notifies which direction the data points
    can be dragged in. Furthermore, the drag range can be limited by the `dragMinX/Y`
    and `dragMaxX/Y` options. The following screenshot shows a column being dragged:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔选项 `draggableX/Y` 通知数据点可以拖动的方向。此外，可以通过 `dragMinX/Y` 和 `dragMaxX/Y` 选项限制拖动范围。以下截图显示了正在拖动的柱状图：
- en: '![The draggable points plugin](img/7451OS_15_10.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![可拖动点插件](img/7451OS_15_10.jpg)'
- en: Creating a new effect by combining plugins
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过组合插件创建新的效果
- en: 'So far, we have seen the effect of two individual plugins. It''s time for us
    to create a new user experience by loading these two plugins and combining their
    effects. The idea is to create a regression chart with movable data points, so
    that the regression line automatically adjusts in real time as we drag a data
    point. When doing so, we need to slightly modify the regression plugin code. Here
    is part of the original code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了两个独立插件的效果。是时候通过加载这两个插件并组合它们的效果来创建新的用户体验了。想法是创建一个带有可移动数据点的回归图，这样当我们拖动一个数据点时，回归线会自动实时调整。在这样做的时候，我们需要稍微修改回归插件代码。以下是原始代码的一部分：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Basically, before the chart is created and rendered, the plugin scans the series
    data, computes the regression result, and formats the result into a line series
    option. To do that, the regression implementation is included as part of the `init`
    method for the `Chart` class, which is called when a `Chart` object is created.
    To extend an existing function in Highcharts, we call the `wrap` function on a
    method inside the object's prototype. In other words, when a `Chart` object is
    created, it will call the `init` function, which executes each function stacked
    internally (closure). We will further investigate this subject later.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，在图表创建和渲染之前，插件会扫描系列数据，计算回归结果，并将结果格式化为线系列选项。为此，回归实现被包含在 `Chart` 类的 `init`
    方法中，该方法在创建 `Chart` 对象时被调用。为了扩展Highcharts中的现有功能，我们在对象的原型中的方法上调用 `wrap` 函数。换句话说，当创建
    `Chart` 对象时，它将调用 `init` 函数，该函数执行堆叠在内部的每个函数（闭包）。我们将在稍后进一步研究这个主题。
- en: 'For the purpose of updating the regression line at runtime, we need the ability
    to call `_linear` from outside the plugin. Here is a pseudo code of the new modification
    to add a new method, `updateRegression`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在运行时更新回归线，我们需要从插件外部调用 `_linear` 的能力。以下是添加新方法 `updateRegression` 的新修改的伪代码：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now we have a regression plugin with an accessible method, `updateRegression`,
    to call the inner scope function `_linear`. With this new plugin function, we
    can link the functionality with the `drag` event exported by the draggable plugin:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个具有可访问方法 `updateRegression` 的回归插件，可以调用内部作用域函数 `_linear`。有了这个新的插件函数，我们可以将功能与可拖拽插件导出的
    `drag` 事件链接起来：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In order to observe the new effect more clearly, we use a smaller set of scatter
    plots. Here is the series configuration with both plugin options:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚地观察新的效果，我们使用了一组更小的散点图。以下是包含两个插件选项的系列配置：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the configuration, we have the scatter points draggable in both x and y
    directions and the regression type is linear. Let''s load our new improved chart.
    The following is the initial screen:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置中，我们有在x和y方向上都可以拖动的散点图，回归类型是线性的。让我们加载我们新的改进图表。以下是初始屏幕：
- en: '![Creating a new effect by combining plugins](img/7451OS_15_11.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![通过组合插件创建新的效果](img/7451OS_15_11.jpg)'
- en: 'Let''s hypothetically assume an overactive, unapproved slim-fast drug, "mouse
    down", has slipped onto the market, which has some unreported side effects. The
    unfortunate ones will shoot up and the really unfortunate ones have their heights
    gravitate. Here is the outcome of the new result:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设一种过度活跃、未经批准的减肥药“鼠标按下”已经进入市场，它有一些未报告的副作用。不幸的人会迅速增加，而真正不幸的人的身高会下降。以下是新结果的结果：
- en: '![Creating a new effect by combining plugins](img/7451OS_15_12.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![通过组合插件创建新的效果](img/7451OS_15_12.jpg)'
- en: The regression line responds in real time as well as updating the top-left legend
    box as we mouse down those weights at the far-right data points.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在最右侧的数据点的这些权重上按下鼠标时，回归线会实时响应，并更新左上角的图例框。
- en: Guidelines for creating a plugin
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建插件的指南
- en: Some users create a plugin because certain tasks cannot be fulfilled by the
    API and the task is generic enough that it will be beneficial to other chart users.
    However, there is no standard API to create a plugin; developers have to be hands-on
    with their knowledge of Highcharts code. Nonetheless, there are a few guidelines
    that we can generalize from existing plugins.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一些用户创建插件是因为某些任务无法通过API完成，而且这个任务足够通用，对其他图表用户也有益。然而，没有标准的API来创建插件；开发者必须亲自动手，利用他们对Highcharts代码的了解。尽管如此，我们可以从现有的插件中概括出一些指导方针。
- en: Implementing the plugin within a self-invoking anonymous function
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在自调用匿名函数中实现插件
- en: 'Always implement the plugin within a self-invoking anonymous function with
    Highcharts as the parameter. A self-invoking anonymous function is a pretty common
    technique in JavaScript. All the Highcharts plugins are implemented in this style.
    The following code shows an example:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 总是在一个自调用的匿名函数中实现插件，并将 Highcharts 作为参数。自调用的匿名函数是 JavaScript 中相当常见的技术。所有 Highcharts
    插件都是用这种方式实现的。以下代码展示了示例：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: None of the named functions and variables declared in the plugin are accessible
    externally because they are declared within the scope of a self-invoking anonymous
    function (closure and module pattern). Hence, the implementation is private to
    the outside world unless we assign properties in the Highcharts namespace.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 插件中声明的所有命名函数和变量都无法从外部访问，因为它们是在自调用的匿名函数的作用域内声明的（闭包和模块模式）。因此，实现对外部是私有的，除非我们在 Highcharts
    命名空间中分配属性。
- en: Using Highcharts.wrap to extend existing functions
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Highcharts.wrap 来扩展现有函数
- en: 'Depending on the plugin task, some plugins need to extend an existing function.
    For instance, the regression plugin calls `H.wrap` to extend the `init` function,
    which is called from the `Chart` constructor. See the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 根据插件任务，某些插件需要扩展现有函数。例如，回归插件调用 `H.wrap` 来扩展 `init` 函数，该函数由 `Chart` 构造函数调用。请参见以下代码：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`Highcharts.wrap` is a commonly used function within plugins. The way `wrap`
    functions work is to overwrite the `init` function with a new function body that
    includes the previous implementation `proceed`. When we extend the method with
    our new plugin code in an anonymous function, we have to accept the `proceed`
    argument, which represents the parent function body. Before or after our plugin
    code, we must call `proceed.apply` on the same arguments in order to complete
    the chain of executions.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`Highcharts.wrap` 是插件中常用的一种函数。`wrap` 函数的工作方式是用包含先前实现 `proceed` 的新函数体覆盖 `init`
    函数。当我们用匿名函数中的新插件代码扩展方法时，我们必须接受 `proceed` 参数，它代表父函数体。在我们自己的插件代码之前或之后，我们必须对相同的参数调用
    `proceed.apply`，以完成执行链。'
- en: For reference, we can always extend methods for a particular series, for example,
    `Highcharts.seriesTypes.column.prototype`, where `seriesTypes` is an object containing
    all the series classes. Alternatively, if the plugin needs to be set up for all
    the series, we can invoke the `wrap` method on `Highcharts.Series.prototype` instead
    (all series classes are extended from `Highcharts.Series`).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参考，我们始终可以扩展特定系列的方法，例如 `Highcharts.seriesTypes.column.prototype`，其中 `seriesTypes`
    是一个包含所有系列类的对象。或者，如果插件需要为所有系列设置，我们可以调用 `Highcharts.Series.prototype` 上的 `wrap`
    方法代替（所有系列类都是从 `Highcharts.Series` 扩展的）。
- en: Using a prototype to expose a plugin method
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用原型来暴露插件方法
- en: 'Sometimes we may need to export specific methods for a plugin. To do so, we
    should always define new methods inside the `prototype` property, such as:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们可能需要为插件导出特定的方法。为此，我们应始终在 `prototype` 属性内部定义新方法，例如：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is because any code declared within the anonymous function is not accessible
    from the outside. Therefore, the only way to create a callable method is bound
    to the object passed to the anonymous function, which is the top level Highcharts
    object in this case. The `prototype` property is the standard way in JavaScript
    to inherit properties and methods from objects. The reason for attaching the method
    within the `prototype` property is because we don't know how developers will use
    the plugin. For instance, they may decide to create a new `Chart` object and call
    the plugin method. In such cases, the plugin code will still work.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为在匿名函数内声明的任何代码都无法从外部访问。因此，创建可调用方法的唯一方法是将对象绑定到匿名函数传递的对象上，在这种情况下是顶级 Highcharts
    对象。`prototype` 属性是 JavaScript 中从对象继承属性和方法的标准方式。在 `prototype` 属性中附加方法的原因是我们不知道开发者会如何使用插件。例如，他们可能会决定创建一个新的
    `Chart` 对象并调用插件方法。在这种情况下，插件代码仍然可以工作。
- en: Defining a new event handler
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义一个新的事件处理器
- en: 'Another type of action for plugins is to define new events, as we saw in the
    draggable plugin. Here is the problem: we need access to a chart element to bind
    the event handler, that is, after the chart is rendered. However, the class `init`
    method is executed prior to the chart being rendered. This is where the `Highcharts.Chart.prototype.callbacks`
    array comes in. It is a place designed to store external functions that require
    access to elements. For example, the exporting module uses this array to insert
    buttons into the chart. Here is some pseudo code to set up events:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的一种动作类型是定义新事件，正如我们在可拖动插件中看到的那样。这里的问题是：我们需要访问图表元素来绑定事件处理器，也就是说，在图表渲染之后。然而，`init`
    类方法是在图表渲染之前执行的。这就是`Highcharts.Chart.prototype.callbacks` 数组发挥作用的地方。这是一个设计用来存储需要访问元素的外部函数的地方。例如，导出模块使用这个数组来在图表中插入按钮。以下是一些设置事件的伪代码：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Highcharts has two event-related methods: `addEvent` and `fireEvent`. The former
    method is to bind an event to a chart element with a handler, whereas `fireEvent`
    triggers an event on an element.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Highcharts 有两个与事件相关的方法：`addEvent` 和 `fireEvent`。前者方法是将事件绑定到图表元素并带有处理器，而 `fireEvent`
    则在元素上触发事件。
- en: The preceding code basically creates an anonymous function that organizes all
    the event(s) setup, such as defining the handler(s) and binding them to elements.
    The function must accept `chart` as the only parameter. Finally, we append the
    function into the `callbacks` array. The function will be automatically executed
    once the chart is fully rendered.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码基本上创建了一个匿名函数，该函数组织所有事件设置，例如定义处理器并将它们绑定到元素上。该函数必须接受 `chart` 作为唯一参数。最后，我们将该函数追加到
    `callbacks` 数组中。该函数将在图表完全渲染后自动执行。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we visited the Highcharts online export server and the new
    cloud service. We took a short tour of the cloud service and demonstrated how
    we can create a chart online without any prior knowledge of JavaScript and Highcharts.
    Another topic covered was the Highcharts plugin in which we experimented with
    two plugins: regression and draggable data points. We then demonstrated how to
    modify one plugin to make both plugins work together to provide a new user experience.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们参观了 Highcharts 在线导出服务器和新的云服务。我们对云服务进行了简短的游览，并展示了我们如何在线创建图表，而无需任何先前的 JavaScript
    和 Highcharts 知识。另一个讨论的主题是 Highcharts 插件，我们在其中尝试了两个插件：回归和可拖动数据点。然后我们演示了如何修改一个插件，使其两个插件能够协同工作，提供新的用户体验。
- en: So far, all my knowledge and experience of Highcharts is enclosed in this journal.
    To achieve two editions in 3 years has been much tougher than I expected. Hence,
    my journey with Highcharts has come to an end, and I can put my time back to where
    it should always be, family. My utmost gratitude to you for purchasing and reading
    this book. My goal was to illustrate to you how dynamic and impressive Highcharts
    can be, and I hope I have achieved this and ended this book on a high note.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我所有关于 Highcharts 的知识和经验都包含在这本日志中。在三年内完成两版对我来说比预期的要困难得多。因此，我的 Highcharts
    之旅已经结束，我可以把时间重新投入到它应该始终在的地方，家庭。对于您购买和阅读这本书，我表示由衷的感谢。我的目标是向您展示 Highcharts 的动态性和令人印象深刻之处，我希望我已经实现了这一点，并以一个高调的结尾结束了这本书。
