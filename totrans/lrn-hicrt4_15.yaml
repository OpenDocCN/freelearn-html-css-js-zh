- en: Chapter 15. Highcharts Online Services and Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, you learned how to run Highcharts on the server side.
    This enables Highcharts to expand its reach to online services. We will visit
    these services in this chapter and explore what benefits we can gain from them.
    As well as that, we examine how we can extend Highcharts with plugins. In this
    chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What service [export.highcharts.com](http://export.highcharts.com) provides
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A step-by-step exercise to create an online chart from the new cloud service—[cloud.highcharts.com](http://cloud.highcharts.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What a Highcharts plugin is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two plugin examples – regression and draggable points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new user experience by interoperating both plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to write a plugin – extend existing methods, export a new method, and handle
    events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highcharts export server – export.highcharts.com
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we looked into running Highcharts on the server side. However,
    some users may not want to set up their own server operations. This is where [export.highcharts.com](http://export.highcharts.com)
    comes in. Originally, it was only set up for the exporting module so that users
    running Highcharts on the Internet could export their charts freely. Later, the
    URL was expanded to support online services. This let users enter their own Highcharts
    configuration and download the resulting chart images.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is part of the [export.highcharts.com](http://export.highcharts.com)
    web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Highcharts export server – export.highcharts.com](img/7451OS_15_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, the user input indeed corresponds to the parameters of the server-side
    script, `highcharts_convert.js`, which we covered in a previous chapter. Both
    the web interface and server process are implemented in Java, which deliver the
    user's options to the PhantomJS/`highcharts_convert.js` process and exports it
    into SVG. Once the Java server receives the SVG result, it launches Batik to format
    into image files. The source for the whole web service solution is available in
    the `exporting-server/java/highcharts-export` directory.
  prefs: []
  type: TYPE_NORMAL
- en: The downside to the online export service is that it is not WYSIWYG, and so
    can be unintuitive to use. For this reason, a new web service with much richer
    user experience was born— **Highcharts Cloud Service**. We will take a ride in
    the next section and see what difference it brings.
  prefs: []
  type: TYPE_NORMAL
- en: Highcharts Cloud Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will review a brand new online chart service developed
    by the Highcharts team, Highcharts Cloud Service ([http://cloud.highcharts.com](http://cloud.highcharts.com)).
    The following screenshot shows the initial welcome screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Highcharts Cloud Service](img/7451OS_15_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Highcharts Cloud Service is a major milestone in terms of expanding the product
    line. It is designed for users to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create HTML5 charts even without any JavaScript or Highcharts knowledge (in
    SIMPLE mode)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prototype their charts interactively without any installation and setting up
    on the web server and Highcharts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embed charts in online articles, applications, or web pages with a simple hyperlink
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store their charts in the cloud rather than locally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Share their charts easily with other people
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a screenshot of a news website linking a chart created from
    the cloud service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Highcharts Cloud Service](img/7451OS_15_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try to create our first chart using the cloud service. The web interface
    is wizard-based and intuitive for any non-technical users. The following is the
    initial screen of the cloud service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Highcharts Cloud Service](img/7451OS_15_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are three major sections in the interface: the left wizard panel, the
    top-right result chart panel, and the bottom-right series data editor. At the
    top of the left wizard panel, it shows which stage we are currently in. At the
    first stage (**IMPORT**), we can either paste our CSV data into the text area
    and click on upload or manually enter series data through the bottom-right editor.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, we have already pasted some data in the left panel.
    When we click on the **Upload and Continue** button, the application progresses
    to stage 2 (**TEMPLATES**). Here is the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Highcharts Cloud Service](img/7451OS_15_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'First, we can see the top-right panel updated with the default line series
    and the bottom-right editor panel is populated with the series data. Although
    the top-right chart doesn''t show anything meaningful, it will become clearer
    as we configure the chart in a later stage. At this point, we can further edit
    the series data in the editor panel if we need to. Let''s select a series in the
    left panel, **3D column chart**, which immediately updates the top-right chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Highcharts Cloud Service](img/7451OS_15_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A 3D column chart is displayed in the top-right panel, but the axis and chart
    title are still incorrect. We can either click on the **CONTINUE TO CUSTOMIZE**
    button (shown in the preceding screenshot) or on **CUSTOMIZE** to go to the next
    stage and tune each component in the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Highcharts Cloud Service](img/7451OS_15_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, there are different areas in the chart that we can choose to
    configure. In this example, we have changed the chart title, axis type, title,
    and label format. Note that at the **CUSTOMIZE** stage, there are three tabs shown
    underneath. This lets the user choose how to update the chart. **SIMPLE** is the
    most basic and is for non-technical users without any programming experience,
    or for quick simple changes. **ADVANCED** mode is for users who are familiar with
    Highcharts'' options. The user interface is a simple properties update in name
    and value style. The **CODE** level is for users who wish to write JavaScript
    code for the chart, for example, the event handler. The following screenshot shows
    both the **ADVANCED** and **CODE** user interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Highcharts Cloud Service](img/7451OS_15_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once we are happy with our final chart, we can click on **CONTINUE TO SHARE**
    to generate a hyperlink for the chart.
  prefs: []
  type: TYPE_NORMAL
- en: Highcharts plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Highcharts can be extended through plugins that allow us to add functionality
    without disturbing the core layer of code and are easy to share. There is a library
    of plugins available online contributed by Highcharts staff and other users at
    [http://www.highcharts.com/plugin-registry](http://www.highcharts.com/plugin-registry).
    One distinct advantage of developing features out of plugins is that we can pick
    and choose the plugin features and build a compressed JavaScript library from
    them. In fact, we can already do something similar with the Highcharts library
    on the download page.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will take a tour of a couple of plugins that you may find
    handy.
  prefs: []
  type: TYPE_NORMAL
- en: The regression plot plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we create a scatter plot with lots of data points, it is often worthwhile
    to overlay them with a regression line. Of course, we can always achieve this
    by adding a line series manually. However, we still need to write the code for
    regression analysis. It is much more convenient to include a plugin. The Highcharts
    regression plugin created by Ignacio Vazquez does the job nicely. First, we include
    the plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create our scatter chart as usual. Since we include the regression
    plugin, it provides additional regression options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the chart from the demo ([http://www.highcharts.com/plugin-registry/single/22/Highcharts%20regression](http://www.highcharts.com/plugin-registry/single/22/Highcharts%20regression)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The regression plot plugin](img/7451OS_15_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The draggable points plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is another remarkable plugin by Torstein that enables chart viewers to
    drag any series data points. We import the plugin with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This plugin brings two new point events, `drag` and `drop`, which we can define
    the handlers for via the `plotOptions.series.point.events` option (or the `events`
    option in a data point object). Here is the example code from the demo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When we select a data point and move the mouse, a drag event is triggered and
    the demo code will update the textbox below the chart, as seen in the following
    screenshot. The plugin provides several new options to control how we can drag
    and drop the data points. The following is a usage example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The Boolean option `draggableX/Y` notifies which direction the data points
    can be dragged in. Furthermore, the drag range can be limited by the `dragMinX/Y`
    and `dragMaxX/Y` options. The following screenshot shows a column being dragged:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The draggable points plugin](img/7451OS_15_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new effect by combining plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, we have seen the effect of two individual plugins. It''s time for us
    to create a new user experience by loading these two plugins and combining their
    effects. The idea is to create a regression chart with movable data points, so
    that the regression line automatically adjusts in real time as we drag a data
    point. When doing so, we need to slightly modify the regression plugin code. Here
    is part of the original code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Basically, before the chart is created and rendered, the plugin scans the series
    data, computes the regression result, and formats the result into a line series
    option. To do that, the regression implementation is included as part of the `init`
    method for the `Chart` class, which is called when a `Chart` object is created.
    To extend an existing function in Highcharts, we call the `wrap` function on a
    method inside the object's prototype. In other words, when a `Chart` object is
    created, it will call the `init` function, which executes each function stacked
    internally (closure). We will further investigate this subject later.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of updating the regression line at runtime, we need the ability
    to call `_linear` from outside the plugin. Here is a pseudo code of the new modification
    to add a new method, `updateRegression`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have a regression plugin with an accessible method, `updateRegression`,
    to call the inner scope function `_linear`. With this new plugin function, we
    can link the functionality with the `drag` event exported by the draggable plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to observe the new effect more clearly, we use a smaller set of scatter
    plots. Here is the series configuration with both plugin options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the configuration, we have the scatter points draggable in both x and y
    directions and the regression type is linear. Let''s load our new improved chart.
    The following is the initial screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new effect by combining plugins](img/7451OS_15_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s hypothetically assume an overactive, unapproved slim-fast drug, "mouse
    down", has slipped onto the market, which has some unreported side effects. The
    unfortunate ones will shoot up and the really unfortunate ones have their heights
    gravitate. Here is the outcome of the new result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new effect by combining plugins](img/7451OS_15_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The regression line responds in real time as well as updating the top-left legend
    box as we mouse down those weights at the far-right data points.
  prefs: []
  type: TYPE_NORMAL
- en: Guidelines for creating a plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some users create a plugin because certain tasks cannot be fulfilled by the
    API and the task is generic enough that it will be beneficial to other chart users.
    However, there is no standard API to create a plugin; developers have to be hands-on
    with their knowledge of Highcharts code. Nonetheless, there are a few guidelines
    that we can generalize from existing plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the plugin within a self-invoking anonymous function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Always implement the plugin within a self-invoking anonymous function with
    Highcharts as the parameter. A self-invoking anonymous function is a pretty common
    technique in JavaScript. All the Highcharts plugins are implemented in this style.
    The following code shows an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: None of the named functions and variables declared in the plugin are accessible
    externally because they are declared within the scope of a self-invoking anonymous
    function (closure and module pattern). Hence, the implementation is private to
    the outside world unless we assign properties in the Highcharts namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Using Highcharts.wrap to extend existing functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Depending on the plugin task, some plugins need to extend an existing function.
    For instance, the regression plugin calls `H.wrap` to extend the `init` function,
    which is called from the `Chart` constructor. See the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`Highcharts.wrap` is a commonly used function within plugins. The way `wrap`
    functions work is to overwrite the `init` function with a new function body that
    includes the previous implementation `proceed`. When we extend the method with
    our new plugin code in an anonymous function, we have to accept the `proceed`
    argument, which represents the parent function body. Before or after our plugin
    code, we must call `proceed.apply` on the same arguments in order to complete
    the chain of executions.'
  prefs: []
  type: TYPE_NORMAL
- en: For reference, we can always extend methods for a particular series, for example,
    `Highcharts.seriesTypes.column.prototype`, where `seriesTypes` is an object containing
    all the series classes. Alternatively, if the plugin needs to be set up for all
    the series, we can invoke the `wrap` method on `Highcharts.Series.prototype` instead
    (all series classes are extended from `Highcharts.Series`).
  prefs: []
  type: TYPE_NORMAL
- en: Using a prototype to expose a plugin method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes we may need to export specific methods for a plugin. To do so, we
    should always define new methods inside the `prototype` property, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This is because any code declared within the anonymous function is not accessible
    from the outside. Therefore, the only way to create a callable method is bound
    to the object passed to the anonymous function, which is the top level Highcharts
    object in this case. The `prototype` property is the standard way in JavaScript
    to inherit properties and methods from objects. The reason for attaching the method
    within the `prototype` property is because we don't know how developers will use
    the plugin. For instance, they may decide to create a new `Chart` object and call
    the plugin method. In such cases, the plugin code will still work.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a new event handler
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another type of action for plugins is to define new events, as we saw in the
    draggable plugin. Here is the problem: we need access to a chart element to bind
    the event handler, that is, after the chart is rendered. However, the class `init`
    method is executed prior to the chart being rendered. This is where the `Highcharts.Chart.prototype.callbacks`
    array comes in. It is a place designed to store external functions that require
    access to elements. For example, the exporting module uses this array to insert
    buttons into the chart. Here is some pseudo code to set up events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Highcharts has two event-related methods: `addEvent` and `fireEvent`. The former
    method is to bind an event to a chart element with a handler, whereas `fireEvent`
    triggers an event on an element.'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding code basically creates an anonymous function that organizes all
    the event(s) setup, such as defining the handler(s) and binding them to elements.
    The function must accept `chart` as the only parameter. Finally, we append the
    function into the `callbacks` array. The function will be automatically executed
    once the chart is fully rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we visited the Highcharts online export server and the new
    cloud service. We took a short tour of the cloud service and demonstrated how
    we can create a chart online without any prior knowledge of JavaScript and Highcharts.
    Another topic covered was the Highcharts plugin in which we experimented with
    two plugins: regression and draggable data points. We then demonstrated how to
    modify one plugin to make both plugins work together to provide a new user experience.'
  prefs: []
  type: TYPE_NORMAL
- en: So far, all my knowledge and experience of Highcharts is enclosed in this journal.
    To achieve two editions in 3 years has been much tougher than I expected. Hence,
    my journey with Highcharts has come to an end, and I can put my time back to where
    it should always be, family. My utmost gratitude to you for purchasing and reading
    this book. My goal was to illustrate to you how dynamic and impressive Highcharts
    can be, and I hope I have achieved this and ended this book on a high note.
  prefs: []
  type: TYPE_NORMAL
