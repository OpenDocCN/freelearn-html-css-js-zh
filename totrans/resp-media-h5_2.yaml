- en: Chapter 2. Adding Responsive Video Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout the history of the Internet, since its early days, designers and
    developers have been able to add images to websites—these are great to illustrate
    points or concepts, but are a static record at a point in time. More and more
    developers are turning to the power of video to help illustrate something: the
    themes are varied, from news right through to cooking, or even a step-by-step
    coding tutorial! With the advent of mobile media comes an increasing need for
    responsive content—we need to ensure our content can be viewed without issue on
    more and more devices.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll go on a journey through some of the concepts required
    to make our content responsive, as well as cover some of the tips and tricks to
    make our content available on multiple platforms. In this chapter, we will cover
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Determining support for the `<video>` formats and choosing the right format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding HTML5 video content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining an available viewport for use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catering to fallback support and applying vendor fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using JavaScript libraries to provide support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catering to different platforms and displaying full size videos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Curious? Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: We will begin with the basics of choosing the right format for HTML5 video,
    but first, we need to cover some simple administrative tasks that will help us
    throughout the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the purpose of our exercises in this chapter, we''ll be using similar markup
    throughout; it is worth saving the following code as a template file to help you
    complete each exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our groundwork prepared, let's begin our journey into working
    with responsive video, with a look first at the formats available for use.
  prefs: []
  type: TYPE_NORMAL
- en: We will also be using various videos from the Big Buck Bunny Project by the
    Blender Foundation, namely the 852 x 480 and 1280 x 720 formats; you can download
    these from [http://www.bigbuckbunny.org/index.php/download/](http://www.bigbuckbunny.org/index.php/download/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The videos used throughout this project are copyright © 2008, Blender Foundation,
    available at [www.bigbuckbunny.org](http://www.bigbuckbunny.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also recommended that you create a project folder for the purposes of
    this chapter; I called mine `code`. Inside it, you will need to create two folders:
    `css` and `js`. We will refer to these two folders throughout the chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Determining support for <video> formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step on our journey in creating responsive video content is to determine
    which video format we''re going to use. There are several video formats available
    for use in the browser, but the two worth noting are WebM and MP4\. The former
    is still supported within Firefox, Chrome, and Opera only; the latter is supported
    by all of the main desktop browsers, except IE8 and Opera. For the purposes of
    creating responsive content, we still need to work with both though, as the mobile
    platform has yet to decide on a common standard:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Browser** | Firefox | Chrome | Safari | IE (9+) | Opera | iOS | Android
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Format supported** | MP4 | MP4 | MP4 | MP4 | WebM | MP4, WebM | MP4, WebM
    |'
  prefs: []
  type: TYPE_TB
- en: This table can also be referred to at [http://www.jwplayer.com/html5/](http://www.jwplayer.com/html5/)
    (in the article "The State of HTML5 Video", by Jeroen Wijering).
  prefs: []
  type: TYPE_NORMAL
- en: As the HTML5 video standard is still in something of a state of flux, it is
    worth checking the CanIUse.com site, to keep abreast of progress at [http://caniuse.com/#search=video](http://caniuse.com/#search=video).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may come across references to the OGG format as an HTML5 `<video>` standard;
    while this will work perfectly well, the format was removed from the HTML5 standard
    in 2007, due to issues with patents. It is not as widely supported as the other
    formats.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we're up to speed on video formats, let's take a look at getting our
    video content converted to the right format, ready for use.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've learnt that to work with the HTML5 `<video>` tags, we need to
    use either the WebM or MP4 formats (or ideally both, to ensure coverage). It's
    possible that you may have existing content that isn't in this format; if this
    is the case, let's look at how we can get it converted.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are dozens of applications available for download, to convert from one
    format to another—my personal favorite is XMedia Recode for Windows, which is
    available at [http://www.xmedia-recode.de](http://www.xmedia-recode.de). This
    allows conversion to and from a host of different formats, including both WebM
    and MP4\. Let''s take a look at how it works using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by downloading a copy of XMedia Recode from [http://www.xmedia-recode.de/en/download.html](http://www.xmedia-recode.de/en/download.html);
    the latest version is 3.1.9.4 at the time of this writing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the setup executable to launch installation and accept all defaults
    throughout the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, XMedia Recode will be installed; we now need to run through the
    conversion process. It's possible to really go to town on configuring the conversion
    process—for now, we'll stick to the basic conversion, which is sufficient for
    our needs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the XMedia Recode application, click on **Open File**, then select your video
    and click on **Open**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for XMedia Recode to analyze the video, and then select the desired format
    from the **Output Format** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the foot of the window, we need to select our destination folder, so go ahead
    and select the same folder where you store your video content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''re about ready to begin the conversion; to do so, we need to click on **Add
    to queue** and then on **Encode** to start the process, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Choosing the right format](img/6968OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: XMedia Recode will prompt when the conversion process is completed. We can either
    elect to convert another video or close the application at this point. For those
    of us who use Apple Macs or Linux, there are several alternatives available; they
    perform a similar process to XMedia Recode. A couple of options that are worth
    looking at are the cross-platform application Handbrake ([http://www.handbrake.fr](http://www.handbrake.fr)—
    for MP4 conversion), and the browser-based Firefogg applet available at [http://www.firefogg.org](http://www.firefogg.org).
    Although the latter is meant to convert to OGG format, it will also convert videos
    to WebM format as well.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on the WebM format, or if you have any difficulty in configuring
    it for use on your PC, then take a look at the documentation for the project at
    [http://www.webmproject.org/tools](http://www.webmproject.org/tools).
  prefs: []
  type: TYPE_NORMAL
- en: We now have our videos ready, so what's next? Ah yes—let's take a look at embedding
    them into a page, so we can see how to make them responsive. We'll use some converted
    videos from the Big Buck Bunny Project as our source media; if you would like
    to try something smaller, there are sample videos available at [http://techslides.com/sample-webm-ogg-and-mp4-video-files-for-html5/](http://techslides.com/sample-webm-ogg-and-mp4-video-files-for-html5/),
    which will work equally well.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding HTML5 video content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with all projects, we need to start somewhere—we could simply double-click
    on a video and let it play in any application we have installed, that supports
    the format. However, this isn't what we're here to do; we want to view the content
    in a browser and set it to resize automatically!
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will show you how to achieve this using videos I''ve converted
    from the open source Big Bunny Project at [http://www.bigbuckbunny.org](http://www.bigbuckbunny.org):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by opening a copy of the template file we created earlier in the
    book, then alter the `<title>` tag of our demo, as shown in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `<body>` tag of our code, go ahead and add the following lines; these
    reference the different video formats we can use, depending on which browser we''re
    working with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the results as `basic.html`. At this point, if we were to preview the
    results in a browser, we can clearly see that we have a problem! The video hasn''t
    resized, resulting in only part of it being displayed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Embedding HTML5 video content](img/6968OS_02_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Fortunately, it''s easy to fix; if you were expecting a lot of complicated
    CSS code, then fear not; the solution is easier than you think! Add the following
    to a new file, saving it as `basic.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `basic.html`, go ahead and amend the CSS style sheet link as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we refresh our browser, we can now see that the content is responsive, resizing
    automatically when we reduce the browser window in size:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Embedding HTML5 video content](img/6968OS_02_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now that our initial content is set up and working, we need to consider one
    important point—what if we're designing for a small viewport? Should we still
    display the video or hide it on smaller devices such as mobile phones? All these
    questions are good ones. Let's take a look at how we can determine our available
    viewport size so we can decide what will or will not be included in our design.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you find that videos don''t play correctly, then you may need to create
    a `.htaccess` file at the root of your project folder, then add the following
    lines of code in that file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Determining an available viewport for use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have spent any time developing content for responsive layouts, you will
    have no doubt come across media queries. The same applied to videos; you could
    typically see something akin to the following (simplified) example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, most browsers have since removed support for media queries.
    This is largely due to the poor user experience we get if the video is suddenly
    interrupted when resizing the screen. Fortunately, we can produce similar effects,
    although we need to resort to JavaScript or jQuery to achieve this. In this next
    example, we''re going to show a small video if the screen is resized to a small
    window, or hide it when displayed in full screen. Let''s take a look at how we
    can achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll begin with extracting a copy of `viewport.html`, along with the `video`,
    `js`, and `css` folders from the code download that accompanies this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next comes the real magic behind this demo. In the `js` folder is a copy of
    `detect.js`; this controls the display of our video according to the size of the
    available viewport. Let''s go through it in sections, starting with the creation
    of the `wi` variable, to store the current window size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next comes the rendering of the initial size of our window using the following
    line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The real magic happens next. In the resize function, we get the new width,
    then work out if we''re below `480px` and set the video to display if `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the size is larger, then the video is hidden:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, let's run the demo in a browser to see the results. If we try resizing
    the browser window to below `480px`, we should see a notification appear, along
    with the video, as shown in the following screenshot:![Determining an available
    viewport for use](img/6968OS_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try resizing the window to a larger size. Notice how the video is no longer
    displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Although this demo is somewhat simplistic in nature, it shows that we can mimic
    the effects of media queries. So, we can work out what space is available to us
    and either display a larger, high-quality video, or one of a smaller size. After
    all, we don't want to download a huge video on a mobile when a smaller version
    is available!
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**How can I see the effects of resizing my browser window?**'
  prefs: []
  type: TYPE_NORMAL
- en: We could always resize it manually, but a better solution is to use a resizer
    tool such as the one created by Malte Wasserman, which simulates a range of sizes
    and is available at [http://lab.maltewassermann.com/viewport-resizer/](http://lab.maltewassermann.com/viewport-resizer/).
  prefs: []
  type: TYPE_NORMAL
- en: The example does open up some possibilities, although it should be handled with
    care, and any solution you develop needs to be fully tested before being implemented
    in production.
  prefs: []
  type: TYPE_NORMAL
- en: Catering to fallback support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've produced HTML5-formatted video content and seen how to embed it
    in our pages. There may be occasions, though, when we are working on a device
    that doesn't support a certain type of video format.
  prefs: []
  type: TYPE_NORMAL
- en: 'While support for HTML5 video is improving all the time, we''re still at a
    stage where not every platform supports the same formats. This leaves us with
    two choices. We can either try to incorporate a different format, or we can simply
    set the content to degrade gracefully. We''ve looked at providing different formats,
    so let''s switch track and see how we can gracefully degrade our content using
    Modernizr as the basis for our test. The following steps will guide us through
    the process of content degrading:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by adding the following code to a new file and save it as `modernizr.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following code to a new file and save it as `modernizr.css`.
    This will provide some basic styling in the event that the video test proves negative:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We need to provide some additional files. From the code download that accompanies
    this book, extract the `js` and `video` folders; save these in the project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To test this, we'll use Firefox; in the browser address bar, enter `about:config`
    to bring up the configuration settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **I'll be careful, I promise!** in the security warning message that
    pops up. Then look for **javascript.enabled** and double-click on it to set it
    to **false**:![Catering to fallback support](img/6968OS_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, let''s preview the results of our effort in the browser. If
    all is well, we should not see our video, but the following warning instead:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Catering to fallback support](img/6968OS_02_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Return to step 5, but this time double-click on the entry to enable JavaScript
    support. Once done, refresh the preview, where we should see our all too familiar
    Buck Bunny video.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, what happens if our video content can't be converted to HTML5 format for
    some reason? A good example might be that the content is only available in YouTube
    or Vimeo format; copyright restrictions may prevent us from converting it. It's
    not a problem though; we can still use it. While it is strictly speaking not going
    to be in HTML5 format, we can still make it responsive with a little additional
    effort.
  prefs: []
  type: TYPE_NORMAL
- en: Using JS libraries to provide support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the key benefits of using the HTML5 `<video>` element is that resizing
    is a breeze; it only takes a couple of lines of CSS to make videos responsive
    when using this tag. However, the same cannot be said for videos of other formats;
    we may come across occasions when we are forced to use formats such as YouTube
    or Vimeo, which rely on embedding through the use of `<iframes>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thankfully, we can make these responsive although the route to doing so is
    a little more involved. It requires the use of a library such as `FitVids.js`,
    available at [http://www.fitvidsjs.com](http://www.fitvidsjs.com), which works
    with jQuery. The following steps will help us use JS libraries to make the videos
    responsive:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by first downloading the FitVids library. Browse to [https://github.com/davatron5000/FitVids.js](https://github.com/davatron5000/FitVids.js),
    then click on **Download ZIP** on the right. From the archive, extract and save
    `jquery.fitvids.js` into your project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, in a copy of the template file we created earlier, alter the `<head>`
    section as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add some more markup in the `<body>` tag. So, go ahead and add the
    following lines in the `<head>` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we preview the results in a browser and begin to resize the browser window,
    the video will resize automatically:![Using JS libraries to provide support](img/6968OS_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''re not forced to have to use FitVids, although it is a popular choice;
    there are others available that will work in a similar manner, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: FluidVids, from [http://toddmotto.com/fluid-and-responsive-youtube-and-vimeo-videos-with-fluidvids-js/](http://toddmotto.com/fluid-and-responsive-youtube-and-vimeo-videos-with-fluidvids-js/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SimpleVid, available at [http://johnpolacek.github.io/SimpleVid/](http://johnpolacek.github.io/SimpleVid/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ResponsiveVideo, available at [http://cbavota.bitbucket.org/responsive-video/](http://cbavota.bitbucket.org/responsive-video/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an alternative, and ideal if you're only working with a small number of videos
    on your site, you can use the online service at [EmbedResponsively.com](http://EmbedResponsively.com)
    to manually make your embedded videos responsive. This works by adding a container
    in HTML and then styling this to allow its resizing responsively, much in the
    same way as we do when using the FitVids library.
  prefs: []
  type: TYPE_NORMAL
- en: By now, we've produced video content using the `<video>` tags and seen how we
    can implement it responsively in our site. We do need to bear in mind the need
    to make content available on the mobile platform though, so let's take a look
    at how we can do this now.
  prefs: []
  type: TYPE_NORMAL
- en: Catering to different platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It goes without saying that part of responsive design is the need to produce
    content that will work on mobile devices; otherwise it wouldn't be responsive!
    We could spend lots of time trying to develop something from the ground up, but
    there is little point in doing so. Others have already produced players that work
    on a desktop.
  prefs: []
  type: TYPE_NORMAL
- en: 'With a little extra effort, we can make the players responsive. Thankfully,
    Neil Gee of the Coolest Guides on the Planet site has already done the hard work
    for us. Let''s take a look at one example player to see how he has made it responsive;
    we''ll use VideoJS for the purposes of our demo. Perform the following steps for
    this demo:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by extracting the `player` folder from the code download that accompanies
    this book and save it to our project folder. It contains a working example of
    the video player, already configured for use. We'll add the necessary changes
    to make it responsive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `player.html`, modify the links to the CSS style sheets, shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, in a new file, add the following CSS style rules and save it as `video-js-overrides.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we preview the results in a browser, we will see the video play normally.
    For better results, it is recommended to use Google Chrome. We can emulate different
    devices using the Developer Toolbar, as indicated in the following screenshot:![Catering
    to different platforms](img/6968OS_02_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting the **Sony Xperia S, Ion** option produces the following result in
    Chrome. In the following screenshot, the screen has been flipped into landscape
    mode by changing the **Resolution** options in the **Screen** tab of Developer
    Toolbar:![Catering to different platforms](img/6968OS_02_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try changing the options to emulate different devices; you will begin to see
    that no matter what size is set, the player is still able to play properly.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a completed example available in the code download, as `player-finished.html`
    and `player-finished.css`. Rename both files to `player.html` and `player.css`
    to see the finished article. Other video players have had similar treatment by
    Neil—you can see articles for them at [http://coolestguidesontheplanet.com/videodrome/videojs/](http://coolestguidesontheplanet.com/videodrome/videojs/).
  prefs: []
  type: TYPE_NORMAL
- en: Allowing for vendor prefixes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While working on our code, have you noticed anything in particular, such as
    the apparent lack of need for vendor prefixes? That's right, to produce a basic
    responsive solution for a video doesn't require any, so it would be right to ask
    why we're now talking about needing to allow for them in our code!
  prefs: []
  type: TYPE_NORMAL
- en: The answer lies not in providing the basic styling needed to handle the `<video>`
    or `<iframe>` tags, but when we move into the realms of setting our video to display
    full screen or in the background. The former still needs vendor prefixes. While
    we could provide them manually, it is considered better practice to automatically
    add them at compilation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we go any further, this demo requires Node to be installed; this is available
    at [http://nodejs.org/](http://nodejs.org/). Go ahead and install it for your
    platform before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at using the Autoprefixer plugin for Grunt, which ties in with
    the service from [http://www.caniuse.com](http://www.caniuse.com); the Grunt plugin
    is available at [https://github.com/postcss/autoprefixer](https://github.com/postcss/autoprefixer).
    The following steps will help you understand the process of adding prefixes:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by creating a new folder for our compilation. In our example, I
    will use `g:\grunt`; if you use something else, then adjust accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the folder, add a new folder called `build` and add three new files under
    it, namely `gruntfile.js`, `package,json`, and `style.css`, as shown in the following
    screenshot:![Allowing for vendor prefixes](img/6968OS_02_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `gruntfile.js` file, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `package.json`, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the Node command prompt, enter and run the following command to install
    Autoprefixer and a watch facility:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Node will run through installing all of the dependencies automatically. When
    completed, we can then run the following line at the prompt to start Grunt watching
    for any changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can then make a change to the `style.css` file, such as adding the following
    line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will see Grunt kick in and recompile our code automatically:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Allowing for vendor prefixes](img/6968OS_02_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We can verify that Autoprefixer has done its magic by looking at the `style.css`
    file that will have appeared in the build folder. While our example was a little
    simplistic, the functionality will become very useful in our next demo, which
    uses a number of CSS3 vendor-prefixed properties and where Autoprefixer could
    cater to this as part of the compilation process.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you prefer to use a non-command line alternative, then Autoprefixer for SublimeText
    is worth a look; it's available at [http://www.hongkiat.com/blog/css-automatic-vendor-prefix/](http://www.hongkiat.com/blog/css-automatic-vendor-prefix/).
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on and take a look something different. How often have you come across
    sites that play videos full size when launched? It's a really cool effect, although
    it must be done with care. Let's take a look at how we can implement this in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying full-size videos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've covered a lot of theory about creating responsive videos. Now
    it's time to have a little fun! If we look on the Internet, we will see plenty
    of examples where designers have created sites that display videos full-size in
    the background when viewing content.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are plenty of examples online of how to achieve this. We''re going to
    use the jQuery Cover plugin created by Swedish developer Anton Trollbäck, which
    is available for download from [https://github.com/antontrollback/cover](https://github.com/antontrollback/cover).
    Let''s make our video appear in its full size using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, from the code download that accompanies this book, extract a copy of
    `fullsize.html`. It contains some basic markup, which uses the HTML5 video tags
    to include two videos in MP4 and WebM format along with some text in an overlay.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `fullsize.html`, add the following lines immediately below the `<title>`
    statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following lines to the foot of the `fullsize.css` file and save
    it to the `css` subfolder in your project folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From the code download, copy across the `bigbuckbunny.mp4` and `bigbuckbunny.webm`
    videos and store these in the `video` subfolder within your project folder. We
    will also need the `jquery.js` and `jquery.cover.js` files as well, so copy these
    into the `js` subfolder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this stage, we should have a working demo. So go ahead and preview the results
    in a browser; if all is well, you should see the video play without sound, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying full-size videos](img/6968OS_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we can simply play the video in full view when it's opened.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a working example within the code bundle for this demo. Rename the
    `fullsize-finished.html` file to `fullsize.html` and the `fullsize-finished.css`
    file to `fullsize.css` before viewing the finished article.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating full size videos produces an intriguing effect, which needs to be
    managed with care. There are a few points to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: Use Modernizr (or similar tool) to detect if a mobile device is in use. If so,
    then display a background image instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This feature is useful for big announcements, where content needs to be displayed
    for a finite period of time—it will lose its appeal quickly though!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't set the video to display sound; this will only put people off from visiting
    your site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you use a poster image, try to keep the file size to a minimum, without reducing
    the quality too much.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to provide some mechanism whereby the video can be turned off if needed.
    Not everyone will want to see it running.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may want to consider using something like the Network API to gauge the user's
    Internet connection. If they don't have a fast connection, then a smaller video
    should be played instead or the facility will be bypassed entirely for that user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ultimately, it is worth giving this some careful consideration before implementing
    such a facility. If done well, it can produce a superb effect; there is a fine
    line that is all too easily crossed! This kind of effect would work well on music
    artists' websites. For some intriguing examples, take a look at [http://www.creativebloq.com/web-design/video-backgrounds-2131982](http://www.creativebloq.com/web-design/video-backgrounds-2131982).
    Hopefully, this will give you some inspiration for your next project!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've come to the end of our journey through responsive video, where we've covered
    a variety of useful effects. Let's take a moment to consider what we've covered
    in this chapter. We began with a brief look at video formats that work well with
    responsive video design; as part of this, we covered how easy it is to convert
    other formats into one of the recognized HTML5 video formats.
  prefs: []
  type: TYPE_NORMAL
- en: We then looked at embedding content into a page, using standard HTML5 tags,
    and noted some of the issues that appear. We then moved on and took a look at
    determining how we can get the available viewport size, as a replacement for media
    queries when working with videos. We then took a look at catering to support for
    other formats, followed by a look at using JavaScript libraries to provide fall
    back support for videos.
  prefs: []
  type: TYPE_NORMAL
- en: We then covered how you can provide support for different mobile platforms,
    using popular video players such as VideoJS. We then finished with a look at providing
    support for full size videos in a website, using the Big Buck Bunny videos created
    by the Blender Foundation.
  prefs: []
  type: TYPE_NORMAL
- en: So far throughout this book, we've worked with either images or videos. It is
    unlikely that your site will just require one or the other. In the next chapter,
    we'll see how to include both and look at the pitfalls of doing so in order to
    avoid heavy pages and long download times.
  prefs: []
  type: TYPE_NORMAL
