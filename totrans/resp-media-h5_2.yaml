- en: Chapter 2. Adding Responsive Video Content
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章：添加响应式视频内容
- en: 'Throughout the history of the Internet, since its early days, designers and
    developers have been able to add images to websites—these are great to illustrate
    points or concepts, but are a static record at a point in time. More and more
    developers are turning to the power of video to help illustrate something: the
    themes are varied, from news right through to cooking, or even a step-by-step
    coding tutorial! With the advent of mobile media comes an increasing need for
    responsive content—we need to ensure our content can be viewed without issue on
    more and more devices.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网的历史上，自从它的早期，设计师和开发者就能够向网站添加图片——这些图片非常适合说明观点或概念，但它们在某个时间点是静态的记录。越来越多的开发者转向视频的力量来帮助说明某些内容：主题多种多样，从新闻到烹饪，甚至是一步一步的编码教程！随着移动媒体的出现，对响应式内容的需求不断增加——我们需要确保我们的内容可以在更多和更多的设备上无问题地查看。
- en: 'In this chapter, we''ll go on a journey through some of the concepts required
    to make our content responsive, as well as cover some of the tips and tricks to
    make our content available on multiple platforms. In this chapter, we will cover
    the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一些使我们的内容响应式所需的观念，同时也会介绍一些技巧和窍门，以便我们的内容能在多个平台上可用。在本章中，我们将涵盖以下主题：
- en: Determining support for the `<video>` formats and choosing the right format
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定对 `<video>` 格式的支持并选择正确的格式
- en: Embedding HTML5 video content
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入HTML5视频内容
- en: Determining an available viewport for use
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定可用的视口
- en: Catering to fallback support and applying vendor fixes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适应回退支持和应用供应商修复
- en: Using JavaScript libraries to provide support
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript库提供支持
- en: Catering to different platforms and displaying full size videos
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适应不同平台并显示全尺寸视频
- en: Curious? Let's get started!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 好奇吗？让我们开始吧！
- en: We will begin with the basics of choosing the right format for HTML5 video,
    but first, we need to cover some simple administrative tasks that will help us
    throughout the chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从选择HTML5视频的正确格式的基础知识开始，但在开始之前，我们需要介绍一些简单的管理任务，这些任务将有助于我们整章的学习。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For the purpose of our exercises in this chapter, we''ll be using similar markup
    throughout; it is worth saving the following code as a template file to help you
    complete each exercise:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本章的练习目的，我们将在整个章节中使用类似的标记；值得将以下代码保存为模板文件，以帮助您完成每个练习：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now that we have our groundwork prepared, let's begin our journey into working
    with responsive video, with a look first at the formats available for use.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了基础，让我们开始我们的旅程，学习如何使用响应式视频，首先看看可用的格式。
- en: We will also be using various videos from the Big Buck Bunny Project by the
    Blender Foundation, namely the 852 x 480 and 1280 x 720 formats; you can download
    these from [http://www.bigbuckbunny.org/index.php/download/](http://www.bigbuckbunny.org/index.php/download/).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用来自Blender Foundation的Big Buck Bunny项目的各种视频，具体为852 x 480和1280 x 720格式；您可以从[http://www.bigbuckbunny.org/index.php/download/](http://www.bigbuckbunny.org/index.php/download/)下载这些视频。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The videos used throughout this project are copyright © 2008, Blender Foundation,
    available at [www.bigbuckbunny.org](http://www.bigbuckbunny.org).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目中使用的视频版权©2008，Blender Foundation，可在[www.bigbuckbunny.org](http://www.bigbuckbunny.org)找到。
- en: 'It is also recommended that you create a project folder for the purposes of
    this chapter; I called mine `code`. Inside it, you will need to create two folders:
    `css` and `js`. We will refer to these two folders throughout the chapter.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 还建议您为本章内容创建一个项目文件夹；我称之为 `code`。在里面，您需要创建两个文件夹：`css` 和 `js`。我们将在整章中引用这两个文件夹。
- en: Determining support for <video> formats
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定对 <video> 格式的支持
- en: 'The first step on our journey in creating responsive video content is to determine
    which video format we''re going to use. There are several video formats available
    for use in the browser, but the two worth noting are WebM and MP4\. The former
    is still supported within Firefox, Chrome, and Opera only; the latter is supported
    by all of the main desktop browsers, except IE8 and Opera. For the purposes of
    creating responsive content, we still need to work with both though, as the mobile
    platform has yet to decide on a common standard:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建响应式视频内容的旅程中，第一步是确定我们将使用哪种视频格式。浏览器中可用几种视频格式，但值得注意的两个是WebM和MP4。前者仅由Firefox、Chrome和Opera支持；后者由所有主要桌面浏览器支持，除了IE8和Opera。为了创建响应式内容，我们仍然需要与两者一起工作，因为移动平台尚未决定一个共同的标准：
- en: '| **Browser** | Firefox | Chrome | Safari | IE (9+) | Opera | iOS | Android
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| **浏览器** | Firefox | Chrome | Safari | IE (9+) | Opera | iOS | Android |'
- en: '| **Format supported** | MP4 | MP4 | MP4 | MP4 | WebM | MP4, WebM | MP4, WebM
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| **支持的格式** | MP4 | MP4 | MP4 | MP4 | WebM | MP4, WebM | MP4, WebM |'
- en: This table can also be referred to at [http://www.jwplayer.com/html5/](http://www.jwplayer.com/html5/)
    (in the article "The State of HTML5 Video", by Jeroen Wijering).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此表也可参考[http://www.jwplayer.com/html5/](http://www.jwplayer.com/html5/)（在Jeroen
    Wijering撰写的“HTML5视频状态”文章中）。
- en: As the HTML5 video standard is still in something of a state of flux, it is
    worth checking the CanIUse.com site, to keep abreast of progress at [http://caniuse.com/#search=video](http://caniuse.com/#search=video).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于HTML5视频标准仍处于某种程度的变动之中，值得查看CanIUse.com网站，以了解[http://caniuse.com/#search=video](http://caniuse.com/#search=video)上的最新进展。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may come across references to the OGG format as an HTML5 `<video>` standard;
    while this will work perfectly well, the format was removed from the HTML5 standard
    in 2007, due to issues with patents. It is not as widely supported as the other
    formats.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到关于OGG格式的引用，作为HTML5 `<video>`标准；虽然这会工作得很好，但由于专利问题，该格式在2007年被从HTML5标准中移除。它不像其他格式那样得到广泛支持。
- en: Now that we're up to speed on video formats, let's take a look at getting our
    video content converted to the right format, ready for use.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了视频格式，让我们来看看如何将我们的视频内容转换为正确的格式，以便使用。
- en: Choosing the right format
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择正确的格式
- en: So far, we've learnt that to work with the HTML5 `<video>` tags, we need to
    use either the WebM or MP4 formats (or ideally both, to ensure coverage). It's
    possible that you may have existing content that isn't in this format; if this
    is the case, let's look at how we can get it converted.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解到，要使用HTML5 `<video>`标签，我们需要使用WebM或MP4格式（或者理想情况下两者都要，以确保覆盖）。可能你现有的内容不是这种格式；如果是这种情况，让我们看看我们如何将其转换。
- en: 'There are dozens of applications available for download, to convert from one
    format to another—my personal favorite is XMedia Recode for Windows, which is
    available at [http://www.xmedia-recode.de](http://www.xmedia-recode.de). This
    allows conversion to and from a host of different formats, including both WebM
    and MP4\. Let''s take a look at how it works using the following steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有数十种应用程序可供下载，用于将一种格式转换为另一种格式——我个人的最爱是Windows上的XMedia Recode，可在[http://www.xmedia-recode.de](http://www.xmedia-recode.de)找到。这允许转换到和从众多不同的格式，包括WebM和MP4。让我们通过以下步骤看看它是如何工作的：
- en: We'll start by downloading a copy of XMedia Recode from [http://www.xmedia-recode.de/en/download.html](http://www.xmedia-recode.de/en/download.html);
    the latest version is 3.1.9.4 at the time of this writing.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先从[http://www.xmedia-recode.de/en/download.html](http://www.xmedia-recode.de/en/download.html)下载XMedia
    Recode的副本；在撰写本文时，最新版本是3.1.9.4。
- en: Double-click on the setup executable to launch installation and accept all defaults
    throughout the wizard.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击安装可执行文件以启动安装并接受向导中的所有默认设置。
- en: At this point, XMedia Recode will be installed; we now need to run through the
    conversion process. It's possible to really go to town on configuring the conversion
    process—for now, we'll stick to the basic conversion, which is sufficient for
    our needs.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止，XMedia Recode已经安装；我们现在需要运行转换过程。可以真正深入配置转换过程——目前，我们将坚持基本的转换，这对我们的需求来说是足够的。
- en: In the XMedia Recode application, click on **Open File**, then select your video
    and click on **Open**.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在XMedia Recode应用程序中，点击**打开文件**，然后选择您的视频并点击**打开**。
- en: Wait for XMedia Recode to analyze the video, and then select the desired format
    from the **Output Format** box.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待XMedia Recode分析视频，然后从**输出格式**框中选择所需的格式。
- en: At the foot of the window, we need to select our destination folder, so go ahead
    and select the same folder where you store your video content.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗口底部，我们需要选择我们的目标文件夹，所以请选择您存储视频内容的相同文件夹。
- en: 'We''re about ready to begin the conversion; to do so, we need to click on **Add
    to queue** and then on **Encode** to start the process, as shown in the following
    screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将开始转换；要这样做，我们需要点击**添加到队列**然后点击**编码**以开始过程，如以下截图所示：
- en: '![Choosing the right format](img/6968OS_02_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![选择正确的格式](img/6968OS_02_01.jpg)'
- en: XMedia Recode will prompt when the conversion process is completed. We can either
    elect to convert another video or close the application at this point. For those
    of us who use Apple Macs or Linux, there are several alternatives available; they
    perform a similar process to XMedia Recode. A couple of options that are worth
    looking at are the cross-platform application Handbrake ([http://www.handbrake.fr](http://www.handbrake.fr)—
    for MP4 conversion), and the browser-based Firefogg applet available at [http://www.firefogg.org](http://www.firefogg.org).
    Although the latter is meant to convert to OGG format, it will also convert videos
    to WebM format as well.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: XMedia Recode将在转换过程完成后提示。我们可以选择转换另一个视频或在此处关闭应用程序。对于我们使用Apple Mac或Linux的用户，有几种替代方案可用；它们执行与XMedia
    Recode类似的过程。几个值得考虑的选项是跨平台应用程序Handbrake([http://www.handbrake.fr](http://www.handbrake.fr)——用于MP4转换)，以及可在[http://www.firefogg.org](http://www.firefogg.org)找到的基于浏览器的Firefogg小程序。尽管后者旨在转换为OGG格式，但它也可以将视频转换为WebM格式。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on the WebM format, or if you have any difficulty in configuring
    it for use on your PC, then take a look at the documentation for the project at
    [http://www.webmproject.org/tools](http://www.webmproject.org/tools).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 关于WebM格式的更多信息，或者如果您在为PC配置它时遇到任何困难，请查看项目文档[http://www.webmproject.org/tools](http://www.webmproject.org/tools)。
- en: We now have our videos ready, so what's next? Ah yes—let's take a look at embedding
    them into a page, so we can see how to make them responsive. We'll use some converted
    videos from the Big Buck Bunny Project as our source media; if you would like
    to try something smaller, there are sample videos available at [http://techslides.com/sample-webm-ogg-and-mp4-video-files-for-html5/](http://techslides.com/sample-webm-ogg-and-mp4-video-files-for-html5/),
    which will work equally well.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了准备好的视频，接下来是什么？啊，是的——让我们看看如何将它们嵌入到页面中，这样我们就可以看到如何使它们具有响应性。我们将使用Big Buck
    Bunny项目的转换视频作为我们的源媒体；如果您想尝试更小的视频，可以在[http://techslides.com/sample-webm-ogg-and-mp4-video-files-for-html5/](http://techslides.com/sample-webm-ogg-and-mp4-video-files-for-html5/)找到样本视频，它们同样适用。
- en: Embedding HTML5 video content
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入HTML5视频内容
- en: As with all projects, we need to start somewhere—we could simply double-click
    on a video and let it play in any application we have installed, that supports
    the format. However, this isn't what we're here to do; we want to view the content
    in a browser and set it to resize automatically!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有项目一样，我们需要从某个地方开始——我们可以在视频上双击，让它在我们安装的任何支持该格式的应用程序中播放。然而，这并不是我们在这里要做的事情；我们想在浏览器中查看内容，并设置它自动调整大小！
- en: 'The following steps will show you how to achieve this using videos I''ve converted
    from the open source Big Bunny Project at [http://www.bigbuckbunny.org](http://www.bigbuckbunny.org):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将向您展示如何使用我从开源Big Bunny项目[http://www.bigbuckbunny.org](http://www.bigbuckbunny.org)转换的视频来实现这一点：
- en: 'Let''s start by opening a copy of the template file we created earlier in the
    book, then alter the `<title>` tag of our demo, as shown in the following code
    snippet:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先打开本书中之前创建的模板文件的副本，然后修改我们的演示中的`<title>`标签，如下代码片段所示：
- en: '[PRE1]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the `<body>` tag of our code, go ahead and add the following lines; these
    reference the different video formats we can use, depending on which browser we''re
    working with:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的代码的`<body>`标签中，添加以下行；这些行引用了我们可以使用的不同视频格式，具体取决于我们正在使用的浏览器：
- en: '[PRE2]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Save the results as `basic.html`. At this point, if we were to preview the
    results in a browser, we can clearly see that we have a problem! The video hasn''t
    resized, resulting in only part of it being displayed:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将结果保存为`basic.html`。在此阶段，如果我们想在浏览器中预览结果，我们可以清楚地看到我们有一个问题！视频没有调整大小，导致只有部分显示：
- en: '![Embedding HTML5 video content](img/6968OS_02_02.jpg)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![嵌入HTML5视频内容](img/6968OS_02_02.jpg)'
- en: 'Fortunately, it''s easy to fix; if you were expecting a lot of complicated
    CSS code, then fear not; the solution is easier than you think! Add the following
    to a new file, saving it as `basic.css`:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 幸运的是，这很容易修复；如果您预期会有很多复杂的CSS代码，那么不用担心；解决方案比您想象的要简单！将以下内容添加到新文件中，并将其保存为`basic.css`：
- en: '[PRE3]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In `basic.html`, go ahead and amend the CSS style sheet link as shown here:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`basic.html`中，按照以下方式修改CSS样式表链接：
- en: '[PRE4]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we refresh our browser, we can now see that the content is responsive, resizing
    automatically when we reduce the browser window in size:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们刷新浏览器，现在我们可以看到内容是响应式的，当我们减小浏览器窗口大小时会自动调整大小：
- en: '![Embedding HTML5 video content](img/6968OS_02_03.jpg)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![嵌入HTML5视频内容](img/6968OS_02_03.jpg)'
- en: Now that our initial content is set up and working, we need to consider one
    important point—what if we're designing for a small viewport? Should we still
    display the video or hide it on smaller devices such as mobile phones? All these
    questions are good ones. Let's take a look at how we can determine our available
    viewport size so we can decide what will or will not be included in our design.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的初始内容已经设置并运行，我们需要考虑一个重要的问题——如果我们是为小视口设计，我们应该显示视频还是隐藏它？例如，在手机等较小设备上？所有这些问题都是很好的问题。让我们看看我们如何确定可用的视口大小，以便我们可以决定在设计中包含什么或不包含什么。
- en: Tip
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'If you find that videos don''t play correctly, then you may need to create
    a `.htaccess` file at the root of your project folder, then add the following
    lines of code in that file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现视频播放不正确，那么你可能需要在项目文件夹的根目录下创建一个`.htaccess`文件，然后在那个文件中添加以下代码行：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Determining an available viewport for use
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定可用的视口以使用
- en: 'If you have spent any time developing content for responsive layouts, you will
    have no doubt come across media queries. The same applied to videos; you could
    typically see something akin to the following (simplified) example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你花过时间开发响应式布局的内容，你无疑会遇到媒体查询。同样的，这也适用于视频；你通常可以看到类似以下（简化）的示例：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Unfortunately, most browsers have since removed support for media queries.
    This is largely due to the poor user experience we get if the video is suddenly
    interrupted when resizing the screen. Fortunately, we can produce similar effects,
    although we need to resort to JavaScript or jQuery to achieve this. In this next
    example, we''re going to show a small video if the screen is resized to a small
    window, or hide it when displayed in full screen. Let''s take a look at how we
    can achieve this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，大多数浏览器已经取消了媒体查询的支持。这主要是因为当屏幕调整大小时，视频突然中断给用户带来的糟糕体验。幸运的是，我们可以产生类似的效果，尽管我们需要求助于JavaScript或jQuery来实现这一点。在下一个示例中，我们将展示如果屏幕调整到小窗口，将显示一个小视频；如果全屏显示，则隐藏它。让我们看看我们如何实现这一点：
- en: We'll begin with extracting a copy of `viewport.html`, along with the `video`,
    `js`, and `css` folders from the code download that accompanies this book.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先从本书附带的代码下载中提取`viewport.html`的副本，以及`video`、`js`和`css`文件夹。
- en: 'Next comes the real magic behind this demo. In the `js` folder is a copy of
    `detect.js`; this controls the display of our video according to the size of the
    available viewport. Let''s go through it in sections, starting with the creation
    of the `wi` variable, to store the current window size:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是这个演示背后的真正魔法。在`js`文件夹中有一个`detect.js`的副本；它根据可用视口的大小控制视频的显示。让我们分部分来看，首先是创建`wi`变量，用于存储当前窗口大小：
- en: '[PRE7]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next comes the rendering of the initial size of our window using the following
    line of code:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是使用以下代码行渲染窗口的初始大小：
- en: '[PRE8]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The real magic happens next. In the resize function, we get the new width,
    then work out if we''re below `480px` and set the video to display if `true`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真正的魔法接下来发生。在调整大小的函数中，我们获取新的宽度，然后确定我们是否低于`480px`，如果为`true`，则设置视频显示：
- en: '[PRE9]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If the size is larger, then the video is hidden:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果大小更大，则隐藏视频：
- en: '[PRE10]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, let's run the demo in a browser to see the results. If we try resizing
    the browser window to below `480px`, we should see a notification appear, along
    with the video, as shown in the following screenshot:![Determining an available
    viewport for use](img/6968OS_02_04.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在浏览器中运行这个演示，看看结果。如果我们尝试将浏览器窗口调整到`480px`以下，我们应该看到一个通知出现，以及视频，如下面的截图所示：![确定可用的视口以使用](img/6968OS_02_04.jpg)
- en: Try resizing the window to a larger size. Notice how the video is no longer
    displayed.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试将窗口调整到更大的尺寸。注意视频不再显示。
- en: Although this demo is somewhat simplistic in nature, it shows that we can mimic
    the effects of media queries. So, we can work out what space is available to us
    and either display a larger, high-quality video, or one of a smaller size. After
    all, we don't want to download a huge video on a mobile when a smaller version
    is available!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个演示在本质上有些简单，但它表明我们可以模仿媒体查询的效果。因此，我们可以计算出我们有多少可用空间，并显示一个更大、高质量的视频，或者一个更小的视频。毕竟，我们不想在手机上下载一个巨大的视频，而有一个更小的版本可用！
- en: Tip
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**How can I see the effects of resizing my browser window?**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**我如何看到调整浏览器窗口大小后的效果？**'
- en: We could always resize it manually, but a better solution is to use a resizer
    tool such as the one created by Malte Wasserman, which simulates a range of sizes
    and is available at [http://lab.maltewassermann.com/viewport-resizer/](http://lab.maltewassermann.com/viewport-resizer/).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以手动调整大小，但更好的解决方案是使用像Malte Wasserman创建的调整大小工具，它模拟了一系列大小，可在[http://lab.maltewassermann.com/viewport-resizer/](http://lab.maltewassermann.com/viewport-resizer/)找到。
- en: The example does open up some possibilities, although it should be handled with
    care, and any solution you develop needs to be fully tested before being implemented
    in production.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子确实打开了一些可能性，尽管它应该小心处理，并且任何解决方案在投入生产之前都需要进行全面测试。
- en: Catering to fallback support
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 满足回退支持
- en: So far, we've produced HTML5-formatted video content and seen how to embed it
    in our pages. There may be occasions, though, when we are working on a device
    that doesn't support a certain type of video format.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经制作了HTML5格式的视频内容，并了解了如何在我们的页面上嵌入它。然而，有时我们可能在处理不支持某种视频格式的设备上工作。
- en: 'While support for HTML5 video is improving all the time, we''re still at a
    stage where not every platform supports the same formats. This leaves us with
    two choices. We can either try to incorporate a different format, or we can simply
    set the content to degrade gracefully. We''ve looked at providing different formats,
    so let''s switch track and see how we can gracefully degrade our content using
    Modernizr as the basis for our test. The following steps will guide us through
    the process of content degrading:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然HTML5视频的支持一直在改善，但我们仍然处于这样一个阶段，即并非每个平台都支持相同的格式。这给我们留下了两个选择。我们可以尝试整合不同的格式，或者我们可以简单地设置内容以优雅地降级。我们已经探讨了提供不同格式的方法，所以让我们改变方向，看看我们如何使用Modernizr作为测试的基础来优雅地降级我们的内容。以下步骤将指导我们通过内容降级的过程：
- en: 'Let''s begin by adding the following code to a new file and save it as `modernizr.html`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从将以下代码添加到新文件并保存为`modernizr.html`开始：
- en: '[PRE11]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, add the following code to a new file and save it as `modernizr.css`.
    This will provide some basic styling in the event that the video test proves negative:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下代码添加到新文件中，并将其保存为`modernizr.css`。这将提供一些基本的样式，以防视频测试结果为否定：
- en: '[PRE12]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We need to provide some additional files. From the code download that accompanies
    this book, extract the `js` and `video` folders; save these in the project folder.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要提供一些额外的文件。从伴随本书的代码下载中提取`js`和`video`文件夹；将这些保存到项目文件夹中。
- en: To test this, we'll use Firefox; in the browser address bar, enter `about:config`
    to bring up the configuration settings.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试这一点，我们将使用Firefox；在浏览器地址栏中输入`about:config`以打开配置设置。
- en: Click on **I'll be careful, I promise!** in the security warning message that
    pops up. Then look for **javascript.enabled** and double-click on it to set it
    to **false**:![Catering to fallback support](img/6968OS_02_05.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的安全警告消息中点击**我会小心，我保证**！然后查找**javascript.enabled**并双击将其设置为**false**：![满足回退支持](img/6968OS_02_05.jpg)
- en: 'At this point, let''s preview the results of our effort in the browser. If
    all is well, we should not see our video, but the following warning instead:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止，让我们在浏览器中预览我们的努力结果。如果一切顺利，我们不应该看到我们的视频，而是一个以下警告：
- en: '![Catering to fallback support](img/6968OS_02_06.jpg)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![满足回退支持](img/6968OS_02_06.jpg)'
- en: Return to step 5, but this time double-click on the entry to enable JavaScript
    support. Once done, refresh the preview, where we should see our all too familiar
    Buck Bunny video.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到第5步，但这次双击条目以启用JavaScript支持。完成后，刷新预览，我们应该看到我们非常熟悉的Buck Bunny视频。
- en: Now, what happens if our video content can't be converted to HTML5 format for
    some reason? A good example might be that the content is only available in YouTube
    or Vimeo format; copyright restrictions may prevent us from converting it. It's
    not a problem though; we can still use it. While it is strictly speaking not going
    to be in HTML5 format, we can still make it responsive with a little additional
    effort.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们的视频内容由于某种原因无法转换为HTML5格式，会发生什么呢？一个很好的例子可能是内容仅以YouTube或Vimeo格式提供；版权限制可能阻止我们将其转换。但这不是问题；我们仍然可以使用它。虽然严格来说它不会是HTML5格式，但我们可以通过一些额外的工作使其具有响应性。
- en: Using JS libraries to provide support
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JS库提供支持
- en: One of the key benefits of using the HTML5 `<video>` element is that resizing
    is a breeze; it only takes a couple of lines of CSS to make videos responsive
    when using this tag. However, the same cannot be said for videos of other formats;
    we may come across occasions when we are forced to use formats such as YouTube
    or Vimeo, which rely on embedding through the use of `<iframes>`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 HTML5 `<video>` 元素的一个关键好处是调整大小非常简单；使用这个标签使视频响应式只需要几行 CSS。然而，对于其他格式的视频来说，情况并非如此；我们可能会遇到不得不使用
    YouTube 或 Vimeo 等格式的情况，这些格式依赖于使用 `<iframes>` 进行嵌入。
- en: 'Thankfully, we can make these responsive although the route to doing so is
    a little more involved. It requires the use of a library such as `FitVids.js`,
    available at [http://www.fitvidsjs.com](http://www.fitvidsjs.com), which works
    with jQuery. The following steps will help us use JS libraries to make the videos
    responsive:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们可以使这些视频响应式，尽管实现这一点的路径稍微复杂一些。这需要使用像 `FitVids.js` 这样的库，它可以在 [http://www.fitvidsjs.com](http://www.fitvidsjs.com)
    找到，并且与 jQuery 一起工作。以下步骤将帮助我们使用 JS 库使视频响应式：
- en: We'll start by first downloading the FitVids library. Browse to [https://github.com/davatron5000/FitVids.js](https://github.com/davatron5000/FitVids.js),
    then click on **Download ZIP** on the right. From the archive, extract and save
    `jquery.fitvids.js` into your project folder.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要下载 FitVids 库。浏览到 [https://github.com/davatron5000/FitVids.js](https://github.com/davatron5000/FitVids.js)，然后点击右侧的
    **下载 ZIP**。从压缩包中提取并保存 `jquery.fitvids.js` 到你的项目文件夹中。
- en: 'Next, in a copy of the template file we created earlier, alter the `<head>`
    section as shown in the following code snippet:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在之前创建的模板文件的副本中，修改 `<head>` 部分如下所示：
- en: '[PRE13]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We need to add some more markup in the `<body>` tag. So, go ahead and add the
    following lines in the `<head>` section:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在 `<body>` 标签中添加一些额外的标记。所以，请继续在 `<head>` 部分添加以下行：
- en: '[PRE14]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If we preview the results in a browser and begin to resize the browser window,
    the video will resize automatically:![Using JS libraries to provide support](img/6968OS_02_07.jpg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中预览结果并开始调整浏览器窗口大小，视频将自动调整大小：![使用 JS 库提供支持](img/6968OS_02_07.jpg)
- en: 'We''re not forced to have to use FitVids, although it is a popular choice;
    there are others available that will work in a similar manner, such as the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不必非得使用 FitVids，尽管它是一个流行的选择；还有其他一些可以选择，它们的工作方式类似，如下所示：
- en: FluidVids, from [http://toddmotto.com/fluid-and-responsive-youtube-and-vimeo-videos-with-fluidvids-js/](http://toddmotto.com/fluid-and-responsive-youtube-and-vimeo-videos-with-fluidvids-js/)
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FluidVids，来自 [http://toddmotto.com/fluid-and-responsive-youtube-and-vimeo-videos-with-fluidvids-js/](http://toddmotto.com/fluid-and-responsive-youtube-and-vimeo-videos-with-fluidvids-js/)
- en: SimpleVid, available at [http://johnpolacek.github.io/SimpleVid/](http://johnpolacek.github.io/SimpleVid/)
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SimpleVid，可在 [http://johnpolacek.github.io/SimpleVid/](http://johnpolacek.github.io/SimpleVid/)
    找到
- en: ResponsiveVideo, available at [http://cbavota.bitbucket.org/responsive-video/](http://cbavota.bitbucket.org/responsive-video/)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ResponsiveVideo，可在 [http://cbavota.bitbucket.org/responsive-video/](http://cbavota.bitbucket.org/responsive-video/)
    找到
- en: As an alternative, and ideal if you're only working with a small number of videos
    on your site, you can use the online service at [EmbedResponsively.com](http://EmbedResponsively.com)
    to manually make your embedded videos responsive. This works by adding a container
    in HTML and then styling this to allow its resizing responsively, much in the
    same way as we do when using the FitVids library.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种替代方案，如果你只在你网站上处理少量视频，你可以使用在线服务 [EmbedResponsively.com](http://EmbedResponsively.com)
    来手动使你的嵌入视频响应式。这是通过在 HTML 中添加一个容器，然后对其进行样式化以允许其响应式调整大小来实现的，这与我们使用 FitVids 库的方式非常相似。
- en: By now, we've produced video content using the `<video>` tags and seen how we
    can implement it responsively in our site. We do need to bear in mind the need
    to make content available on the mobile platform though, so let's take a look
    at how we can do this now.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用 `<video>` 标签制作了视频内容，并看到了如何在我们的网站上实现响应式布局。然而，我们也需要考虑到在移动平台上提供内容的需求，所以现在让我们看看如何实现这一点。
- en: Catering to different platforms
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适应不同平台
- en: It goes without saying that part of responsive design is the need to produce
    content that will work on mobile devices; otherwise it wouldn't be responsive!
    We could spend lots of time trying to develop something from the ground up, but
    there is little point in doing so. Others have already produced players that work
    on a desktop.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，响应式设计的一部分是产生能够在移动设备上工作的内容；否则它就不会是响应式的！我们可以花很多时间尝试从头开始开发，但这样做几乎没有意义。其他人已经制作了在桌面电脑上工作的播放器。
- en: 'With a little extra effort, we can make the players responsive. Thankfully,
    Neil Gee of the Coolest Guides on the Planet site has already done the hard work
    for us. Let''s take a look at one example player to see how he has made it responsive;
    we''ll use VideoJS for the purposes of our demo. Perform the following steps for
    this demo:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一点额外的努力，我们可以使播放器变得响应式。幸运的是，来自“地球上最酷的指南”网站的Neil Gee已经为我们做了艰苦的工作。让我们看看一个示例播放器，看看他是如何使其变得响应式的；我们将使用VideoJS作为我们的演示目的。为此演示，请执行以下步骤：
- en: We'll start by extracting the `player` folder from the code download that accompanies
    this book and save it to our project folder. It contains a working example of
    the video player, already configured for use. We'll add the necessary changes
    to make it responsive.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先从本书附带的代码下载中提取`player`文件夹，并将其保存到我们的项目文件夹中。它包含一个工作视频播放器示例，已经配置好以供使用。我们将添加必要的更改以使其响应式。
- en: 'In `player.html`, modify the links to the CSS style sheets, shown as follows:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`player.html`中，修改指向CSS样式表的链接，如下所示：
- en: '[PRE15]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, in a new file, add the following CSS style rules and save it as `video-js-overrides.css`:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在一个新文件中，添加以下CSS样式规则，并将其保存为`video-js-overrides.css`：
- en: '[PRE16]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If we preview the results in a browser, we will see the video play normally.
    For better results, it is recommended to use Google Chrome. We can emulate different
    devices using the Developer Toolbar, as indicated in the following screenshot:![Catering
    to different platforms](img/6968OS_02_08.jpg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中预览结果，我们会看到视频正常播放。为了获得更好的效果，建议使用Google Chrome。我们可以使用开发者工具栏来模拟不同的设备，如下面的截图所示：![满足不同平台需求](img/6968OS_02_08.jpg)
- en: Selecting the **Sony Xperia S, Ion** option produces the following result in
    Chrome. In the following screenshot, the screen has been flipped into landscape
    mode by changing the **Resolution** options in the **Screen** tab of Developer
    Toolbar:![Catering to different platforms](img/6968OS_02_09.jpg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**索尼爱立信Xperia S, Ion**选项，在Chrome中会产生以下结果。在下面的截图中，屏幕已经通过更改开发者工具栏“屏幕”选项卡中的**分辨率**选项翻转成横幅模式：![满足不同平台需求](img/6968OS_02_09.jpg)
- en: Try changing the options to emulate different devices; you will begin to see
    that no matter what size is set, the player is still able to play properly.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试更改选项以模拟不同的设备；你将开始看到，无论设置什么大小，播放器仍然能够正常播放。
- en: Tip
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: There is a completed example available in the code download, as `player-finished.html`
    and `player-finished.css`. Rename both files to `player.html` and `player.css`
    to see the finished article. Other video players have had similar treatment by
    Neil—you can see articles for them at [http://coolestguidesontheplanet.com/videodrome/videojs/](http://coolestguidesontheplanet.com/videodrome/videojs/).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 代码下载中有一个完成的示例，作为`player-finished.html`和`player-finished.css`。将这两个文件重命名为`player.html`和`player.css`以查看最终成果。Neil还对其他视频播放器进行了类似的处理——你可以在[http://coolestguidesontheplanet.com/videodrome/videojs/](http://coolestguidesontheplanet.com/videodrome/videojs/)上查看它们的文章。
- en: Allowing for vendor prefixes
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 允许供应商前缀
- en: While working on our code, have you noticed anything in particular, such as
    the apparent lack of need for vendor prefixes? That's right, to produce a basic
    responsive solution for a video doesn't require any, so it would be right to ask
    why we're now talking about needing to allow for them in our code!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码的过程中，你是否注意到一些特别的地方，比如明显不需要供应商前缀？没错，为了制作一个基本的响应式视频解决方案，确实不需要任何前缀，所以现在讨论在我们的代码中允许它们的需求是合理的！
- en: The answer lies not in providing the basic styling needed to handle the `<video>`
    or `<iframe>` tags, but when we move into the realms of setting our video to display
    full screen or in the background. The former still needs vendor prefixes. While
    we could provide them manually, it is considered better practice to automatically
    add them at compilation.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 答案不在于提供处理`<video>`或`<iframe>`标签所需的基本样式，而在于我们将视频设置为全屏或背景显示时。前者仍然需要供应商前缀。虽然我们可以手动提供它们，但自动在编译时添加它们被认为是更好的做法。
- en: Note
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Before we go any further, this demo requires Node to be installed; this is available
    at [http://nodejs.org/](http://nodejs.org/). Go ahead and install it for your
    platform before continuing.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，这个演示需要安装 Node；可以在 [http://nodejs.org/](http://nodejs.org/) 找到它。请在继续之前为您的平台安装它。
- en: 'Let''s look at using the Autoprefixer plugin for Grunt, which ties in with
    the service from [http://www.caniuse.com](http://www.caniuse.com); the Grunt plugin
    is available at [https://github.com/postcss/autoprefixer](https://github.com/postcss/autoprefixer).
    The following steps will help you understand the process of adding prefixes:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 Grunt 的 Autoprefixer 插件，它与 [http://www.caniuse.com](http://www.caniuse.com)
    的服务相结合；Grunt 插件可在 [https://github.com/postcss/autoprefixer](https://github.com/postcss/autoprefixer)
    找到。以下步骤将帮助您了解添加前缀的过程：
- en: We'll start by creating a new folder for our compilation. In our example, I
    will use `g:\grunt`; if you use something else, then adjust accordingly.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先为我们的编译创建一个新的文件夹。在我们的例子中，我将使用 `g:\grunt`；如果您使用其他名称，请相应调整。
- en: Within the folder, add a new folder called `build` and add three new files under
    it, namely `gruntfile.js`, `package,json`, and `style.css`, as shown in the following
    screenshot:![Allowing for vendor prefixes](img/6968OS_02_10.jpg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件夹内，添加一个名为 `build` 的新文件夹，并在其中添加三个新文件，分别是 `gruntfile.js`、`package.json` 和 `style.css`，具体请参考以下截图：![允许使用供应商前缀](img/6968OS_02_10.jpg)
- en: 'In the `gruntfile.js` file, add the following code:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `gruntfile.js` 文件中，添加以下代码：
- en: '[PRE17]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In `package.json`, add the following code:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `package.json` 中添加以下代码：
- en: '[PRE18]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'From the Node command prompt, enter and run the following command to install
    Autoprefixer and a watch facility:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Node 命令提示符中输入并运行以下命令以安装 Autoprefixer 和监视功能：
- en: '[PRE19]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Node will run through installing all of the dependencies automatically. When
    completed, we can then run the following line at the prompt to start Grunt watching
    for any changes:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Node 会自动安装所有依赖项。完成后，我们可以在提示符下运行以下行以启动 Grunt 监视任何更改：
- en: '[PRE20]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can then make a change to the `style.css` file, such as adding the following
    line of code:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以修改 `style.css` 文件，例如添加以下代码行：
- en: '[PRE21]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We will see Grunt kick in and recompile our code automatically:'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将看到 Grunt 自动启动并重新编译我们的代码：
- en: '![Allowing for vendor prefixes](img/6968OS_02_11.jpg)'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![允许使用供应商前缀](img/6968OS_02_11.jpg)'
- en: We can verify that Autoprefixer has done its magic by looking at the `style.css`
    file that will have appeared in the build folder. While our example was a little
    simplistic, the functionality will become very useful in our next demo, which
    uses a number of CSS3 vendor-prefixed properties and where Autoprefixer could
    cater to this as part of the compilation process.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过查看在构建文件夹中出现的 `style.css` 文件来验证 Autoprefixer 是否已经完成了它的魔法。虽然我们的例子有点简单，但这个功能将在我们下一个演示中变得非常有用，该演示使用了许多
    CSS3 供应商前缀属性，而 Autoprefixer 可以在编译过程中处理这些属性。
- en: Note
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you prefer to use a non-command line alternative, then Autoprefixer for SublimeText
    is worth a look; it's available at [http://www.hongkiat.com/blog/css-automatic-vendor-prefix/](http://www.hongkiat.com/blog/css-automatic-vendor-prefix/).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢使用非命令行替代方案，那么 SublimeText 的 Autoprefixer 值得一看；它可在 [http://www.hongkiat.com/blog/css-automatic-vendor-prefix/](http://www.hongkiat.com/blog/css-automatic-vendor-prefix/)
    找到。
- en: Let's move on and take a look something different. How often have you come across
    sites that play videos full size when launched? It's a really cool effect, although
    it must be done with care. Let's take a look at how we can implement this in practice.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续前进，看看一些不同的东西。你有多少次遇到过启动时播放全尺寸视频的网站？这是一个非常酷的效果，尽管必须小心操作。让我们看看如何在实践中实现这一点。
- en: Displaying full-size videos
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示全尺寸视频
- en: So far, we've covered a lot of theory about creating responsive videos. Now
    it's time to have a little fun! If we look on the Internet, we will see plenty
    of examples where designers have created sites that display videos full-size in
    the background when viewing content.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了创建响应式视频的大量理论。现在是时候有点乐趣了！如果我们查看互联网，我们会看到许多设计师创建的网站，在查看内容时在背景中显示全尺寸视频。
- en: 'There are plenty of examples online of how to achieve this. We''re going to
    use the jQuery Cover plugin created by Swedish developer Anton Trollbäck, which
    is available for download from [https://github.com/antontrollback/cover](https://github.com/antontrollback/cover).
    Let''s make our video appear in its full size using the following steps:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在网上有很多如何实现这一点的例子。我们将使用由瑞典开发者Anton Trollbäck创建的jQuery Cover插件，该插件可以从[https://github.com/antontrollback/cover](https://github.com/antontrollback/cover)下载。让我们按照以下步骤使用以下步骤使视频以全尺寸显示：
- en: Firstly, from the code download that accompanies this book, extract a copy of
    `fullsize.html`. It contains some basic markup, which uses the HTML5 video tags
    to include two videos in MP4 and WebM format along with some text in an overlay.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，从本书附带的代码下载中提取`fullsize.html`的副本。它包含一些基本的标记，使用HTML5视频标签包含两个MP4和WebM格式的视频，以及一些叠加文本。
- en: 'In `fullsize.html`, add the following lines immediately below the `<title>`
    statement:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`fullsize.html`中，在`<title>`声明下方立即添加以下行：
- en: '[PRE22]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, add the following lines to the foot of the `fullsize.css` file and save
    it to the `css` subfolder in your project folder:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下行添加到`fullsize.css`文件的底部，并将其保存到项目文件夹中的`css`子文件夹：
- en: '[PRE23]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: From the code download, copy across the `bigbuckbunny.mp4` and `bigbuckbunny.webm`
    videos and store these in the `video` subfolder within your project folder. We
    will also need the `jquery.js` and `jquery.cover.js` files as well, so copy these
    into the `js` subfolder.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从代码下载中复制`bigbuckbunny.mp4`和`bigbuckbunny.webm`视频，并将这些视频存储在项目文件夹中的`video`子文件夹内。我们还需要`jquery.js`和`jquery.cover.js`文件，所以将这些文件复制到`js`子文件夹。
- en: 'At this stage, we should have a working demo. So go ahead and preview the results
    in a browser; if all is well, you should see the video play without sound, as
    shown in the following screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们应该有一个可以工作的演示。所以，在浏览器中预览结果；如果一切顺利，你应该会看到视频无声播放，如下面的截图所示：
- en: '![Displaying full-size videos](img/6968OS_02_12.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![显示全尺寸视频](img/6968OS_02_12.jpg)'
- en: Now we can simply play the video in full view when it's opened.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在打开时简单地播放全屏视频。
- en: Note
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is a working example within the code bundle for this demo. Rename the
    `fullsize-finished.html` file to `fullsize.html` and the `fullsize-finished.css`
    file to `fullsize.css` before viewing the finished article.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 代码包中包含了这个演示的示例。在查看最终文章之前，将`fullsize-finished.html`文件重命名为`fullsize.html`，将`fullsize-finished.css`文件重命名为`fullsize.css`。
- en: 'Creating full size videos produces an intriguing effect, which needs to be
    managed with care. There are a few points to consider:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 创建全尺寸视频会产生一个引人入胜的效果，这需要谨慎管理。以下是一些需要考虑的点：
- en: Use Modernizr (or similar tool) to detect if a mobile device is in use. If so,
    then display a background image instead.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Modernizr（或类似工具）来检测是否正在使用移动设备。如果是，则显示一个背景图像。
- en: This feature is useful for big announcements, where content needs to be displayed
    for a finite period of time—it will lose its appeal quickly though!
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个功能对于需要显示有限时间内容的大型公告很有用——但它很快就会失去吸引力！
- en: Don't set the video to display sound; this will only put people off from visiting
    your site.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要设置视频显示声音；这只会让人们对访问你的网站感到厌烦。
- en: If you use a poster image, try to keep the file size to a minimum, without reducing
    the quality too much.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用海报图像，尽量将文件大小保持在最小，同时不要过度降低质量。
- en: Try to provide some mechanism whereby the video can be turned off if needed.
    Not everyone will want to see it running.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试提供一种机制，以便在需要时可以关闭视频。并不是每个人都想看到它在运行。
- en: You may want to consider using something like the Network API to gauge the user's
    Internet connection. If they don't have a fast connection, then a smaller video
    should be played instead or the facility will be bypassed entirely for that user.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能想要考虑使用类似网络API的东西来检测用户的互联网连接。如果他们没有快速连接，那么应该播放一个较小的视频，或者完全绕过该用户的功能。
- en: Ultimately, it is worth giving this some careful consideration before implementing
    such a facility. If done well, it can produce a superb effect; there is a fine
    line that is all too easily crossed! This kind of effect would work well on music
    artists' websites. For some intriguing examples, take a look at [http://www.creativebloq.com/web-design/video-backgrounds-2131982](http://www.creativebloq.com/web-design/video-backgrounds-2131982).
    Hopefully, this will give you some inspiration for your next project!
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，在实施此类功能之前，仔细考虑这一点是值得的。如果做得好，它可以产生出色的效果；这是一条很容易越过的细线！这种效果在音乐艺术家的网站上会很好。对于一些有趣的例子，请查看[http://www.creativebloq.com/web-design/video-backgrounds-2131982](http://www.creativebloq.com/web-design/video-backgrounds-2131982)。希望这能给你下一个项目带来一些灵感！
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We've come to the end of our journey through responsive video, where we've covered
    a variety of useful effects. Let's take a moment to consider what we've covered
    in this chapter. We began with a brief look at video formats that work well with
    responsive video design; as part of this, we covered how easy it is to convert
    other formats into one of the recognized HTML5 video formats.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了对响应式视频的探索之旅，其中我们涵盖了各种有用的效果。让我们花一点时间回顾一下本章我们所学的内容。我们首先简要地看了看与响应式视频设计兼容的视频格式；作为其中的一部分，我们讨论了将其他格式转换为已知的HTML5视频格式是多么容易。
- en: We then looked at embedding content into a page, using standard HTML5 tags,
    and noted some of the issues that appear. We then moved on and took a look at
    determining how we can get the available viewport size, as a replacement for media
    queries when working with videos. We then took a look at catering to support for
    other formats, followed by a look at using JavaScript libraries to provide fall
    back support for videos.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着探讨了如何使用标准的HTML5标签将内容嵌入到页面中，并注意到了一些出现的问题。然后我们继续前进，研究了如何确定可用的视口大小，作为处理视频时媒体查询的替代方案。然后我们研究了支持其他格式，接着是使用JavaScript库为视频提供回退支持。
- en: We then covered how you can provide support for different mobile platforms,
    using popular video players such as VideoJS. We then finished with a look at providing
    support for full size videos in a website, using the Big Buck Bunny videos created
    by the Blender Foundation.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '我们还介绍了如何使用流行的视频播放器，如VideoJS，为不同的移动平台提供支持。然后我们以使用Blender Foundation制作的Big Buck
    Bunny视频为例，探讨了在网站上提供全尺寸视频支持。 '
- en: So far throughout this book, we've worked with either images or videos. It is
    unlikely that your site will just require one or the other. In the next chapter,
    we'll see how to include both and look at the pitfalls of doing so in order to
    avoid heavy pages and long download times.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书中，我们一直使用图像或视频。你的网站不太可能只要求其中之一。在下一章中，我们将看到如何包含两者，并探讨这样做可能遇到的陷阱，以避免页面重量过大和下载时间过长。
