- en: Chapter 1. Ember CLI Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ember CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring pods and the folder layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asset compilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ember CLI is a **Node.js**-based command-line interface tool designed for application
    programming in **Ember.js**. Since its creation, this tool has become the preferred
    method to create Ember applications.
  prefs: []
  type: TYPE_NORMAL
- en: Simply put, Ember CLI makes starting a new Ember application easy. In other
    frameworks, you might need to learn **gulp** or **grunt** as your task runners.
    In Ember CLI, this is all built-in for you. Having Ember CLI in the Ember.js ecosystem
    is a game changer and makes this framework stand out above the rest.
  prefs: []
  type: TYPE_NORMAL
- en: Ember CLI handles testing, compiling, and upgrading, and even has a built-in
    web server. Ember CLI not only generates boilerplate code for you, but it also
    integrates nicely with many testing frameworks. It has a robust add-on system
    that extends the functionality well beyond its current capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ember CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The installation of Ember CLI is essential to learning Ember and will be used
    throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before the installation of Ember CLI, we must have the **Node Package Manager**
    (**npm**) installed. `npm` is a package manager for JavaScript and is installed
    by default with Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: You must install version 0.12 or later of Node.js for Ember CLI to run. If you
    can, try to install version 4.0.0 or higher. This is the preferred version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Node.js is available in several major platforms including Windows, Mac, and
    Linux. There are several ways to install Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '**One-click installers**: Many platforms such as Windows and Mac have this
    available'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Homebrew** or **MacPorts**: This is useful for Mac OS users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download TAR file**: Download a TAR file of Node.js and extract'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Install via the Linux package management system**: Yum, apt-get, or pacman
    can be used to install on a Linux environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A one-click installer for Windows or Mac
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method is by far the easiest. To install node, you'll need to open the
    node website at [http://nodejs.org/download](http://nodejs.org/download). Click
    on the `pkg`, `msi`, or `exe` installer for Windows or Mac. Run it after it's
    downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: Homebrew or MacPorts for Mac
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you already have Homebrew installed, just run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, if you are running MacPorts, you can use the port install
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: MacPorts can be installed from [http://www.macports.org](http://www.macports.org).
    Homewbrew can be installed from [http://brew.sh](http://brew.sh). Both offer simple
    package management for OS X systems.
  prefs: []
  type: TYPE_NORMAL
- en: A TAR file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A TAR file is a type of archive file. To install node via a TAR, you will need
    to download the TAR file from the Node.js website and extract and install it.
    One way of doing this is to use `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'I would only recommend this method if you are using a Linux distribution. If
    you are running on Linux, you''ll need the right tools installed to compile from
    source. On Ubuntu, you''ll need to install the build-essential and `curl` packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The Linux package manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All major Linux distributions offer Node.js packages. In Ubuntu, you can simply
    use `apt-get`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In Fedora, you can use `yum`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Check with your Linux distribution to find out more details on how to install
    packages such as Node.js. Be aware that some distributions might offer outdated
    versions of Node.js. In this case, I would recommend that you use the **Node Version
    Manager** (**NVM**) installation method that will be discussed later.
  prefs: []
  type: TYPE_NORMAL
- en: Test installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To test your installation, run the `–v` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will show the current installed version. Keep in mind that you must run
    v0.12 or above to run Ember CLI. If possible, try to run v4.0.0 or above.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The NVM is a bash script that helps manage multiple active Node.js versions.
    NVM offers a very simple command-line interface to install any version of Node.js
    without having to visit the Node.js website. It separates each installation making
    it very easy to change between versions. I would recommend most beginners on Mac
    and Linux to run this. You can download NVM at [https://github.com/creationix/nvm](https://github.com/creationix/nvm).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll need to use `npm` to install Ember CLI. We'll install it globally with
    the `–g` option so that it can be run anywhere from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command prompt and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If NVM was installed, you don't need `sudo` at the start of the command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After Ember CLI is installed, we''ll need to download **Bower**. Bower is a
    package manager for client-side programming and another essential component of
    Ember.js. Node.js and npm must be installed before beginning the installation
    of Bower. We''ll be using Bower to install all our client-side libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Similar to the last command, you don't need `sudo` at the start of the command
    if Node.js was installed via NVM.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The last step is to install **PhantomJS**. PhantomJS is a scripted headless
    browser used to automate and test web pages. It''s preferred by Ember CLI and
    needs to be installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you are on Windows, install the Ember CLI Windows tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once installed, this tool can be run in any project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure to download and install Git for Windows: [https://git-scm.com/downloads](https://git-scm.com/downloads)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Working with Windows**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build times on Windows can be longer then Mac or Linux. The Ember CLI Windows
    tool can help speed up and optimize build performance. Just run it in the project
    directory. You can also download it as an add-on instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Another way to help with performance is to always run PowerShell/CMD with elevated
    privileges. Otherwise, performance issues and errors might occur. Lastly, try
    to use npm version 3 or higher. You may run into issues with long file paths with
    older versions in Windows.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Another handy tip is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Optional: Install Watchman**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Watchman is a file-watching service for OS X and UNIX-like operating systems.
    It was developed by Facebook and is a more effective way for Ember CLI to watch
    project changes. If it's not installed, Ember CLI will fall back to using **NodeWatcher**.
    NodeWatcher is more error-prone and has trouble observing large trees. Install
    Watchman if your platform supports it. To download and configure Watchman, visit
    [https://facebook.github.io/watchman/](https://facebook.github.io/watchman/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ember CLI is written in Node.js and can be installed via npm. The tool interprets
    commands from the user to help create an Ember.js application. Each command from
    the user is looked up and then executed. Ember CLI relies on several other dependencies
    including Bower, Lodash, Broccoli, and Babel, to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at commands and aliases.
  prefs: []
  type: TYPE_NORMAL
- en: Commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once Ember CLI is installed, we''ll have access to several commands. Here is
    a short list of some of the more important ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ember` | This prints a list of available commands |'
  prefs: []
  type: TYPE_TB
- en: '| `ember new <name-of-app>` | This creates a directory called `<name-of-app>`
    and creates the application structure |'
  prefs: []
  type: TYPE_TB
- en: '| `ember init` | This creates an application in the current directory |'
  prefs: []
  type: TYPE_TB
- en: '| `ember build` | This builds the application in the `/dist` folder |'
  prefs: []
  type: TYPE_TB
- en: '| `ember server` | This starts a web server |'
  prefs: []
  type: TYPE_TB
- en: '| `ember generate <generator-name>` | This runs a generator that builds scaffolding
    for the project |'
  prefs: []
  type: TYPE_TB
- en: '| `ember destroy <generator-name>` | This uninstalls the module that was created
    by the generator |'
  prefs: []
  type: TYPE_TB
- en: '| `ember test` | This runs tests using **Testem** |'
  prefs: []
  type: TYPE_TB
- en: '| `ember install <addon-name>` | This installs add-ons |'
  prefs: []
  type: TYPE_TB
- en: Aliases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Keep in mind that for every command, there is an alias. These aliases make
    it a little quicker to run commands. Suppose that you wanted to build a new project.
    Normally, you would type this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will work and is fine. It will generate a new project and application structure.
    You can also use an alias.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here is a list of some common aliases that you can use. This is optional.
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Alias |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ember build` | `ember b` |'
  prefs: []
  type: TYPE_TB
- en: '| `ember generate` | `ember g` |'
  prefs: []
  type: TYPE_TB
- en: '| `ember init` | `ember i` |'
  prefs: []
  type: TYPE_TB
- en: '| `ember server` | `ember s` |'
  prefs: []
  type: TYPE_TB
- en: '| `ember destroy` | `ember d` |'
  prefs: []
  type: TYPE_TB
- en: '| `ember test` | `ember t` |'
  prefs: []
  type: TYPE_TB
- en: '| `ember version` | `ember v` |'
  prefs: []
  type: TYPE_TB
- en: Creating your first project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we'll create our first project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll begin with the Ember CLI tool to create our first project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command prompt and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a brand new project called `my-project`. The project structure
    will have everything that we need to get started.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To display this project, we can simply run the server command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `ember server` command will start up a web server on port 4200\. You can
    access this port by opening `http://localhost:4200`. You should see the default
    **Welcome to Ember website**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: It is a good idea to keep the Ember server running while developing your application.
    Ember CLI uses a tool called **LiveReload** to refresh the web browser when changes
    are made. This can be useful to see how new changes are affecting your application.
    To run LiveReload, simply type `ember server`. This will start the server with
    LiveReload.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The server command defaults to port 4200\. You can easily change this using
    the `--port` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will start the server on port `1234` instead of the default 4200.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Another useful option is the `--proxy` argument. This will proxy all **Asynchronous
    JavaScript and XML** (**Ajax**) requests to the given address. Let''s say that
    we have a node server running on port `8080`. We can run the server as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For every Ajax request, Ember now will send these requests to the localhost
    at port `8080`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind that as of Ember 2.0, **Internet Explorer** (**IE**) 8 support
    has been dropped. All modern web browsers and versions of IE after 8 work fine.
    If by chance IE 8 support is needed, Ember.js version 1.13 has extended browser
    support and should work with it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ember server` command creates a **Node.js Express server**. This server
    uses LiveReload and refreshes the web page whenever any changes are made. The
    server command accepts different arguments, including `--proxy` and `--port`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When running the server, you have access to tests. After you start the server,
    you''ll have access to the **QUnit** interface. QUnit is a JavaScript unit testing
    framework. It is used to run your integration and acceptance tests. To access
    the interface, navigate your browser to `http://localhost:4200/tests`. This will
    show all your tests in the project. From here, you can see which tests passed
    and which failed. We will cover this in the later chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/00002.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Exploring pods and the folder layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ember CLI will create our folder structure for us. Ember.js uses the **model-view-controller**
    (**MVC**) pattern. You'll see in this recipe how the folder structure is laid
    out and how the model, controller, and view (templates) are separated from each
    other.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ember CLI relies on **ES2015** modules. This means that you can write code today
    using tomorrow's JavaScript syntax. This is accomplished via the **Ember Resolver**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**ES2015**'
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 6, also known as ES2015, is the upcoming version of the ECMAScript
    programming language. ES2015 includes several new features, including template
    strings, destructuring, arrow functions, modules, and class definitions, to name
    a few. This is all available now within your Ember project.
  prefs: []
  type: TYPE_NORMAL
- en: Pods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An ember pod is a different type of structure that organizes your modules by
    feature instead of type. As your project grows, you may want to organize your
    project by feature to help keep things organized. The Ember Resolver will look
    for a pod structure first before it looks at the traditional structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up the pod structure automatically, you can edit the `.ember-cli` file
    in the root of your project directory and add this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will set the default structure to always use pods. When using pods, it
    is a good idea to set the location where all pods live. To do this, you will need
    to edit the `config/environment.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `podModulePrefix` property sets the POD path with the following format,
    `{appname}/{poddir}`. In the preceding example, the pod directory is now set to
    `/pods` in the `app` folder. If the location is not set, all new modules will
    be created in the `app/` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After a new project is created, a normal folder layout is generated. This layout
    consists of several different types of modules. Here is a short description of
    each directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Directory | What it does |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `app/adapters` | Adapters help extend logic to communicate with a backend
    data store |'
  prefs: []
  type: TYPE_TB
- en: '| `app/components` | Components are used to help reuse code and must have a
    dash in their name |'
  prefs: []
  type: TYPE_TB
- en: '| `app/helpers` | Helpers are used for HTML reuse |'
  prefs: []
  type: TYPE_TB
- en: '| `app/initializers` | Initializers are run first and help set up your application
    |'
  prefs: []
  type: TYPE_TB
- en: '| `app/mixins` | This is a special type of **Ember.Object** used with multiple
    inheritance |'
  prefs: []
  type: TYPE_TB
- en: '| `app/routes` | Routes help move through different application states |'
  prefs: []
  type: TYPE_TB
- en: '| `app/serializers` | This serializes your data model |'
  prefs: []
  type: TYPE_TB
- en: '| `app/transform` | Transform is used to deserialize and serialize model attributes
    |'
  prefs: []
  type: TYPE_TB
- en: '| `app/utils` | Utils are small utility classes |'
  prefs: []
  type: TYPE_TB
- en: '| `app/models` | Models hold the data store |'
  prefs: []
  type: TYPE_TB
- en: '| `app/templates` | Templates use HTMLBars to display HTML to the user |'
  prefs: []
  type: TYPE_TB
- en: '| `app/templates/components` | These are templates used in your components
    |'
  prefs: []
  type: TYPE_TB
- en: 'A new project `app` folder with a default layout will look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00003.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Each module will have its own directory. For example, the `templates` folder
    will store all the templates while the `components` controller will store all
    the components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say that we added a new post resource using pods. The following command
    will generate a new post model, route, and template, and it will update the router:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the filesystem will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Pods sorts directories by features. The post and posts folders are features
    and the files are named after the function they serve.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The directory structure in each Ember CLI project is by design. When creating
    a new project or generating new scaffolding, the CLI will place files in a certain
    directory with a certain naming structure that the Ember Resolver understands
    using the ES2015 format.
  prefs: []
  type: TYPE_NORMAL
- en: The Ember Resolver is responsible for the looking up of code in your application
    and converting the name conventions in the actual class files. With Ember pods,
    the resolver knows to look there first before the default structure.
  prefs: []
  type: TYPE_NORMAL
- en: Asset compilation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we'll take a look at how assets are added to a project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your application, at some point, you may want to add assets and minimize
    or fingerprint your project. This is done in the `root` folder of your project
    in the `ember-cli-build.js` file or in the `asset` folder.
  prefs: []
  type: TYPE_NORMAL
- en: CSS and assets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the assets should be placed in the `public/assets` folder. The assets can
    be referred throughout the program at `assets/images/{image file}`. CSS files
    should be placed in the `app/styles` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Minifying
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, CSS and JavaScript files are minified during the production build
    process. There are ways to turn this functionality on and off. For example, let''s
    say that you want to turn off the minification for both CSS and JavaScript. To
    do this, we can simply edit the `ember-cli-build.js` file, and under the `// Add
    options here` section, add the `minifyCSS` and `minifyJS` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This will tell the compiler not to minify JavaScript and CSS. To build the
    application in the production mode, simply use the `--environment` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Fingerprinting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All files by default will be fingerprinted during the production build process.
    This will include all `js`, `css`, `png`, `jpg`, and `gif` assets. During this
    process, all these files will have an md5 checksum appended at the end of their
    filenames. During this process, all HTML and css files will be rewritten to include
    these new names.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several options available when fingerprinting a file. This is all
    controlled in the `ember-cli-build.js` file. Let''s suppose that you wanted to
    disable fingerprinting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Another useful option is to prepend a domain to all static files. This can
    be done using the `prepend` option. Once again, this needs to be added to the
    `ember-cli-build.js` file in the root of the `application` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, all assets will include the `www.example.com` domain. For example, a normal
    JavaScript `src` file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This will be transformed into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Another useful option is `exclude`. This accepts an array of strings. Any filename
    in the `exclude` array will not be fingerprinted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ignore` option also accepts an array of strings. Any filename that contains
    any item in the `ignore` array will not be processed or fingerprinted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The `extension` option defaults to `''js''`, `''css''`, `''png''`, `''jpg''`,
    `''gif''`, and `''map''`. This option can be used to add other file types to get
    fingerprinted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `replaceExtensions` option defaults to `''html''`, `''css''`, and `''js''`.
    If needed, new file types can be added to replace source code with new checksum
    file names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The import process is done via the Broccoli asset pipeline library. This build
    tool performs all the fingerprinting, minifying, and importing of the assets.
    In addition, Broccoli handles all the preprocessors if the appropriate plugins
    are installed.
  prefs: []
  type: TYPE_NORMAL
- en: The asset manifest is located in the `ember-cli-build.js` file in the root of
    the project folder. You can only import assets that are in the `bower_components`
    or `vendor` directories.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's look at dependency management and how we can use it in our Ember projects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bower is used for dependency management for Ember CLI. Bower is a frontend tool
    that is used to help fetch and install packages that you might need.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `bower.json` file is located in the `root` folder of your project. It contains
    all the dependencies. Let''s say that we want to install the **Bootstrap library**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will install `bootstrap` in the `bower_components` folder and save
    the package information in the `bower.json` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Ember add-ons**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Another popular way of adding third-party libraries to Ember is using add-ons
    or addons as you sometimes see it. An add-on is Ember's way of sharing libraries
    between applications. There are well over a thousand of them available.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can install add-ons using Ember CLI. For example, to install Bootstrap,
    you''d type this on the command line in the project directory:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`$ ember install ember-bootstrap`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can easily find a list of add-ons at these websites:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://www.emberobserver.com](http://www.emberobserver.com)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://www.emberaddons.com](http://www.emberaddons.com)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will be discussed in more detail in the *Working and creating add-ons*
    recipe in [Chapter 11](part0088_split_000.html#2JTHG1-d21a6ad8148a415181fa52c0043435bb
    "Chapter 11. Real-Time Web Applications"), *Real-Time Web Applications*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If, for some reason, you need to reinstall your dependencies, you can run the
    `install` command by itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will install all dependencies that are listed in the `bower.json` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The app.import code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ember CLI allows you to load **Asynchronous** **Module Definition** (**AMD**)
    and non-AMD assets. It's a way of defining code modules and their dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'To load a non-AMD asset, you''ll need to import it using the `ember-cli-build.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is useful as you can use Bower to install components, and then use the
    `app.import` AMD so that it's available in the program. You'll need to consult
    the package specification to see how to use it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Tip on JSHint**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: JSHint is a community-driven tool that detects errors and potential problems
    with JavaScript code. It's built-in in Ember CLI. When using non-AMD assets, you
    may get errors with JSHint if you have global variables. To fix this, add `/*
    global MY_GLOBAL */` at the top of your module page. In the moment example, it
    would look like `/* global moment */`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'AMD assets are imported in a similar way. You add the path in the first argument
    and a list of exports and modules in the second:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To use this asset in your application, you can import it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dependency management is done via Bower. After the dependency is installed,
    the Broccoli library is called on to add the assets to the pipeline. Both these
    tools are written in node and are built-in in Ember CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ember CLI is constantly being upgraded and every six weeks Ember.js has another
    release. It is important to keep your build tools and versions up to date. In
    this recipe we'll look at the best way of doing this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To upgrade your Ember CLI version, you must perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by uninstalling the old `ember-cli`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clear the npm cache:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clear the Bower cache:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the latest version of `ember-cli`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you need, you can specify the version to use represented by `X.X.X`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Updating an existing project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In some situations, you might want to take an existing project and update it
    to the latest version of Ember CLI. In this case, you''ll need to perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by changing directories that you want to upgrade in the root of the project
    folder. Delete these temporary development directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `package.json` file with the version of Ember that we''re upgrading
    to using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`X.X.X` represents the version of `ember-cli`. The `--save-dev` argument will
    save the information in the `package.json` file.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Install all the npm and Bower packages again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last step is to run the `init` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `init` command will add the default project blueprint to your directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**init**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `init` command will create a new application blueprint in your project directory.
    Follow the prompts and review all the changes. You may be asked to replace existing
    files. Press *d* to do a diff of the files and review the changes made. Create
    a backup of your project before you begin the upgrade process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Keep in mind that after upgrading your project, you might have many new deprecation
    warnings to deal with. You will see these warnings when you run `ember server`.
    Each one will need to be addressed.
  prefs: []
  type: TYPE_NORMAL
- en: To address these deprecations, view the warnings that the applications provide.
    For instance, you may get a warning about `Ember.View`. The warning will describe
    that `Ember.Component` should be used instead. You'll then need to swap out the
    effected code with Ember components instead of Ember views.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you upgrade the tool, you are simply uninstalling the node package and
    reinstalling the latest one. It's a good idea to clear the Bower and Node cache
    as well so that Node and Bower won't have any conflicting packages.
  prefs: []
  type: TYPE_NORMAL
- en: When we update an existing project we first have to make sure that all the existing
    modules and packages are deleted. This is important because when we install the
    latest version of Ember CLI, some packages might change. After `ember-cli` is
    saved back in the package file, then you can install `npm` and Bower again.
  prefs: []
  type: TYPE_NORMAL
- en: Running `ember init` generates the application structure in the directory that
    you're in. This is important because some files may have changed since the last
    upgrade. You can always press *d* to diff the changes.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After creating your application you'll need to be able to deploy it. Let's take
    a look at a few ways to deploy your application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first fundamental step before deployment is building your project. To build
    your application, run the `build` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command builds the contents of the project in the `/dist` folder. To build
    your project for production, you''ll need to use the `-prod` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you need, you can designate the default output folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Building your application for production will automatically minify your files
    as well as fingerprint them. This does not occur when your environment is set
    up for development, which is set by default.
  prefs: []
  type: TYPE_NORMAL
- en: The `/dist` folder has everything that your web server needs. At this point,
    to deploy your application, all you need to do is copy the contents of the `/dist`
    folder to your web server.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Ember CLI Deploy**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another great way to deploy your Ember application is to use the Ember add-on
    called **Ember CLI Deploy**. This add-on helps you deploy your Ember application
    to a number of different services. It has a very active community behind it so
    you can expect frequent updates. As your Ember applications grows you may want
    to take a look at this. You can find more information about Ember CLI deploy here:
    [https://github.com/ember-cli/ember-cli-deploy](https://github.com/ember-cli/ember-cli-deploy).'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to Firebase
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Firebase is a backend service that can handle data storage, user authentication,
    static hosting, and more. For this example we'll be using Firebase as a way to
    host our Ember application.
  prefs: []
  type: TYPE_NORMAL
- en: Sign up for an account with Firebase. This can be done at [http://www.firebase.com](http://www.firebase.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, install the `firebase-tools`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After you have a project created and you''re ready to deploy, run the `firebase
    init` command in the root of the folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After running this command, you'll be asked a few questions. It will first ask
    you to sign in to your Firebase account. Enter your credentials to continue. Then,
    it will ask for the name of your Firebase application. Lastly, it will ask for
    the name of your app's public directory. In most cases, this should be `/dist`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `firebase.json` file and add some rewrite rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is needed to help with navigation in the application. Change `my-new-app`
    to the name of your app as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'All that''s left is to deploy to Firebase:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Ember CLI build process is compiled using the Broccoli asset pipeline and
    the build tool itself. It takes all the files and minifies, fingerprints, and
    organizes them in the `/dist` folder so that it is ready to be deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Many services exist that can host static files. You can use Firebase or just
    host it in your own Nginx or Apache server after building it for production.
  prefs: []
  type: TYPE_NORMAL
