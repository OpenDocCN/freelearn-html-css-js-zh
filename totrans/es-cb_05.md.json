["```js\n// main.js \nexport function main() {  \n  console.log('Hello, from main.'); \n  const worker = new Worker('./worker.js'); \n  worker.postMessage({ type: 'hello-message' }); \n}  \n```", "```js\n// worker.js \nconsole.log('Hello, from the worker.');  \n```", "```js\n// worker.js \nconsole.log('Hello, from the worker.'); \n\nthis.onmessage = function (message) {\n console.log('Message Recieved: (%s)', message.data.type); }\n```", "```js\n// main.js \nfunction onMessage(message) { \n  const { type, index } = message.data; \n  console.log('Main recieved a messge (%s) from index: (%s)',  \n              type, index); \n}  \n```", "```js\n// main.js \nconst WORKER_COUNT = 5; \n```", "```js\nexport function main() { \n  for (let index = 0; index < WORKER_COUNT; index++) { \n    const worker = new Worker('./worker.js'); \n\n    worker.onmessage = onMessage; \n    worker.postMessage({ type: 'ping', index }); \n  } \n}  \n```", "```js\n// worker.js \nconst global = this;  \n```", "```js\n// worker.js \nglobal.onmessage = (message) => { \n  const { type, index } = message.data; \n  console.log('Worker (%s) recieved a messge (%s)', index, type); \n\n  global.postMessage({ index, type: 'pong' }) \n  global.postMessage({ index, type: 'another-type' }) \n}; \n```", "```js\n// main.js \nfunction onMessage(message) { \n  const { result, type } = message.data; \n  console.log('Result for operation (%s): (%s)', type, result); \n}  \n```", "```js\nexport function main() { \n  const worker = new Worker('./worker.js'); \n  worker.onmessage = onMessage; \n\n  const numbers = (new Array(100)).fill().map(Math.random) \n  worker.postMessage({ type: 'average', numbers}); \n}  \n```", "```js\n// worker.js \nconst global = this; \n```", "```js\n// worker.js \nglobal.onmessage = (message) => { \n  const { type, numbers } = message.data; \n\n  switch (type) { \n    case 'sum': \n      const sum = numbers.reduce((acc, curr) => acc + curr, 0); \n      global.postMessage({ result: sum, type }) \n      break; \n      case 'average': \n      const average = numbers.reduce((acc, curr) => acc + curr, \n       0) /numbers.length; \n      global.postMessage({ result: average, type }) \n      break; \n  } \n};  \n```", "```js\n// main.js \nfunction onComplete(message, workers) { \n  const { index, timeout } = message.data; \n  workers.map((w) => w.terminate()); \n\n  console.log( \n    'Result from worker (%s) after timeout (%s): %s', \n    index, \n    timeout \n  ); \n}  \n```", "```js\n  export function main() { \n  const totalWorkers = 10; \n  const workers = []; \n\n  for (let i = 0; i < totalWorkers; i++) { \n    const worker = new Worker('./worker.js'); \n    worker.onmessage = (msg) => onComplete(msg, workers); \n    workers.push(worker); \n  } \n\n  workers.map((worker, index) => { \n    workers[index].postMessage({ index }); \n  }); \n}  \n```", "```js\n// worker.js \nconst global = this;  \n```", "```js\n// worker.js \nconst timeout = Math.floor(Math.random() * 10000); \n```", "```js\n// worker.js \nglobal.onmessage = (message) => { \n  const data = JSON.parse(message.data); \n  const data = { \n    index: data.index, \n    timeout: timeout \n  }; \n\n  setTimeout(() => global.postMessage(data), timeout) \n};   \n```", "```js\nexport function main() { \n  const NUM_COUNT = 2048; \n  const BYTES_FOR_32_BIT = 4; \n  const ARRAY_SIZE = NUM_COUNT * BYTES_FOR_32_BIT; \n  const MAX_NUMBER = 1024; \n} \n```", "```js\nexport function main() { \n  // ... \n const sab = new SharedArrayBuffer(ARRAY_SIZE);\n const intBuffer = new Int32Array(sab);\n}  \n```", "```js\nexport function main() { \n  // ... \n // fill with random numbers  // fill with random numbers\n  intBuffer.forEach((value, index) => {\n    intBuffer[index] = Math.random() * MAX_NUMBER;\n  }); } \n```", "```js\n export function main() { \n  // ... \n // sum the ints\n  const sum = intBuffer.reduce((acc, number) =>\n    acc + number\n  , 0);\n} \n```", "```js\nfunction onMessage(message) { \n  const { result, type } = message.data; \n  console.log('result from worker operation: %s', type, result); \n} \n```", "```js\nexport function main() { \n  const NUM_COUNT = 2048; \n  const BYTES_FOR_32_BIT = 4; \n  const ARRAY_SIZE = NUM_COUNT * BYTES_FOR_32_BIT; \n  const MAX_NUMBER = 1024; \n} \n```", "```js\nexport function main() { \n  // ... \n const sab = new SharedArrayBuffer(ARRAY_SIZE); const worker = new Worker('./worker.js'); \n} \n```", "```js\nexport function main() { \n  // ... \n worker.onmessage = onMessage; worker.postMessage({ type: 'load-array', array: sab });; \n} \n```", "```js\nexport function main() { \n  // ... \n const intBuffer = new Int32Array(sab); // fill with random numbers intBuffer.forEach((value, index) => { intBuffer[index] = Math.random() * MAX_NUMBER; }); \n} \n```", "```js\nexport function main() { \n  // ... \n worker.postMessage({ type: 'calculate-sum' }); worker.postMessage({ type: 'calculate-average'}); \n} \n```", "```js\n// worker.js \nconst global = this; \nlet sharedIntArray; \n\nglobal.onmessage = (message) => {};  \n```", "```js\nglobal.onmessage = (message) => { \n const { data } = message; switch (data.type) {} \n};  \n```", "```js\nglobal.onmessage = (message) => { \n  const { data } = message; \n  switch (data.type) { \n case 'load-array': sharedIntArray = new Int32Array(data.array); break; \n    } \n  }; \n```", "```js\nglobal.onmessage = (message) => { \n  const { data } = message; \n  switch (data.type) { \n    case 'load-array': \n      sharedIntArray = new Int32Array(data.array); \n      break; \n case 'calculate-sum': const sum = sharedIntArray.reduce((acc, number) => acc +\n      number, \n      0); global.postMessage({ type: 'sum', result: sum }); break; \n    } \n  };  \n```", "```js\nglobal.onmessage = (message) => { \n  const { data } = message; \n  switch (data.type) { \n    case 'load-array': \n      sharedIntArray = new Int32Array(data.array); \n      break; \n    case 'calculate-sum': \n      const sum = sharedIntArray.reduce((acc, number) =>  \n        acc + number, \n      0); \n      global.postMessage({ type: 'sum', result: sum }); \n      break;     \n\n case 'calculate-average': const total = sharedIntArray.reduce((acc, number) => acc + number , 0); const average = total / sharedIntArray.length; global.postMessage({ type: 'average', result: average }); break; \n    } \n  }; \n```", "```js\n// main.js\nfunction onMessage(message) {\nconst { \n    type, \n    result, \n    workerIndex, \n    startIndex, \n    endIndex, \n    windowSize \n  } = message.data; \n  console.log(`Result from worker operation { \n    type: ${type}, \n    result: ${result}, \n    workerIndex: ${workerIndex}, \n    startIndex: ${startIndex}, \n    endIndex: ${endIndex}, \n    windowSize: ${windowSize} \n  }`); \n} \n```", "```js\nexport function main() { \n  console.log('Main function starting.'); \n  const NUM_COUNT = 2048; \n  const BYTES_FOR_32_BIT = 4; \n  const ARRAY_SIZE = NUM_COUNT * BYTES_FOR_32_BIT; \n  const MAX_NUMBER = 32; \n  const WORKER_COUNT = 10; \n  } \n```", "```js\nexport function main() { \n  // ... \n // create workers let workers = []; console.log('Creating workers.'); for (let i = 0; i < WORKER_COUNT; i++) { const worker = new Worker('./worker.js'); worker.onmessage = onMessage; workers = workers.concat(worker); } \n} \n```", "```js\nexport function main() { \n  // ... \n // create buffer and add data const sab = new SharedArrayBuffer(ARRAY_SIZE); const intBuffer = new Int32Array(sab); // fill with random numbers console.log('Filling Int buffer'); intBuffer.forEach((value, index) => { intBuffer[index] = (Math.random() * MAX_NUMBER) + 1; }); \n} \n```", "```js\nexport function main() { \n  // ... \n workers.forEach((worker, workerIndex) => { worker.postMessage({ type: 'load-array', array: sab }); worker.postMessage({ type: 'load-indices', workerIndex,\n    workerCount: WORKER_COUNT }); worker.postMessage({ type: 'calculate-sum' }); worker.postMessage({ type: 'calculate-average' }); });; \n} \n```", "```js\n// worker.js \nconst global = this; \nlet sharedIntArray; \nlet sharedIntArraylSlice; \nlet workerIndex; \nlet workerCount; \nlet startIndex; \nlet endIndex; \n\nglobal.onmessage = (message) => {};  \n```", "```js\nglobal.onmessage = (message) => { \n const { data } = message; switch (data.type) {} };  \n```", "```js\nglobal.onmessage = (message) => { \n  const { data } = message; \n  switch (data.type) { \n case 'load-array': sharedIntArray = new Int32Array(data.array); break; \n    } \n  };  \n```", "```js\nglobal.onmessage = (message) => { \n  const { data } = message; \n  switch (data.type) { \n    case 'load-array': \n      sharedIntArray = new Int32Array(data.array); \n      break; \n case 'load-indices':\n workerIndex = data.workerIndex;\n workerCount = data.workerCount;\n\n const windowSize = Math.floor(sharedIntArray.length /\n      workerCount)\n startIndex = windowSize * workerIndex;\n const isLastWorker = workerIndex === workerCount - 1;\n endIndex = (isLastWorker) ? sharedIntArray.length : \n      startIndex+windowSize;\n sharedIntArraySlice = sharedIntArray.slice(startIndex,\n      endIndex);\n break;\n  }; \n```", "```js\nglobal.onmessage = (message) => { \n  const { data } = message; \n  switch (data.type) { \n   // ... \n case 'calculate-sum':\n      const sum = sharedIntArraySlice.reduce((acc, number) =>\n        acc + number\n      , 0);\n      sendResult('sum', sum);\n      break; \n    } \n  };  \n```", "```js\nglobal.onmessage = (message) => { \n  const { data } = message; \n  switch (data.type) { \n    //...     \n    case 'calculate-average':\n      const total = sharedIntArraySlice.reduce((acc, number) =>\n        acc + number\n      , 0);\n      const average = total / sharedIntArraySlice.length\n      sendResult('average', average);\n      break;     \n    } \n  };  \n```", "```js\nfunction sendResult(type, result) { \n  global.postMessage({ \n    type, \n    result, \n    workerIndex, \n    startIndex, \n    endIndex, \n    windowSize: endIndex - startIndex - 1 \n  }); \n} \n```", "```js\n// main.js\nconst NUMBER_COUNT = Math.pow(2, 10); \nconst BYTES_FOR_32_BIT = 4;\nconst ARRAY_SIZE = NUMBER_COUNT * BYTES_FOR_32_BIT; \nconst sab = new SharedArrayBuffer(ARRAY_SIZE); \nconst intBuffer = new Int32Array(sab); \nconst outSab = new SharedArrayBuffer(BYTES_FOR_32_BIT); \nconst unsafeSab = new SharedArrayBuffer(BYTES_FOR_32_BIT); \nconst workerCount = 256; \n```", "```js\n// main.js\nlet workersFinishedCount = 0; \n```", "```js\n//main.js\nfunction onMessage(message) { \n  workersFinishedCount++;  \n  if (workersFinishedCount === WORKER_COUNT) { \n    const outIntBuffer = new Int32Array(outSab); \n    const unsafeIntBuffer = new Int32Array(unsafeSab); \n    console.log('Unsafe Sum: %s', unsafeIntBuffer[0]); \n    console.log('Merged sum: %s', outIntBuffer[0]); \n    const localSum = intBuffer.reduce((acc, curr) => acc + curr, \n    0); \n    console.log('Local sum: %s', localSum); \n  } \n} \n```", "```js\nexport function main() { \n  const MAX_NUMBER = 32; \n} \n```", "```js\nexport function main() { \n  // ... \n // create workers\n</strong>  let workers = [];\n console.log('Creating workers.'); for (let i = 0; i < WORKER_COUNT; i++) { const worker = new Worker('./worker.js'); worker.onmessage = onMessage; workers = workers.concat(worker); } \n} \n```", "```js\nexport function main() { \n  // ... \n // fill with random numbers console.log('Filling Int buffer'); intBuffer.forEach((value, index) => { intBuffer[index] = (Math.random() * MAX_NUMBER) + 1; }); \n} \n```", "```js\nexport function main() { \n  // ... \n workers.forEach((worker, workerIndex) => { worker.postMessage({ type: 'load-shared-input', input: sab \n    }); worker.postMessage({ type: 'load-shared-output', safe: \n    outSab,\n    unsafe: unsafeSab }); worker.postMessage({ type: 'load-indices', workerIndex, \n    workerCount: WORKER_COUNT }); worker.postMessage({ type: 'calculate-sum' }); }); \n} \n```", "```js\n// worker.js \nconst global = this; \nlet sharedIntArray; \nlet resultArray; \nlet unsafeResultArray; \nlet sharedIntArraylSlice; \n\nglobal.onmessage = (message) => {};  \n```", "```js\nglobal.onmessage = (message) => { \n const { data } = message; switch (data.type) {} \n};  \n```", "```js\nglobal.onmessage = (message) => { \n  const { data } = message; \n  switch (data.type) { \n case 'load-shared-input': sharedIntArray = new Int32Array(data.input); break; \n  } \n};  \n```", "```js\n global.onmessage = (message) => { \n  const { data } = message; \n  switch (data.type) { \n case 'load-shared-output': resultArray = new Int32Array(data.safe); unsafeResultArray = new Int32Array(data.unsafe); break; \n    } \n  }; \n```", "```js\nglobal.onmessage = (message) => { \n  const { data } = message; \n  switch (data.type) { \n    case 'load-array': \n      sharedIntArray = new Int32Array(data.array); \n      break; \n case 'load-indices': const { workerIndex, workerCount } = data; const windowSize = Math.floor(sharedIntArray.length / \n      workerCount); const startIndex = windowSize * workerIndex; const lastWorker = workerIndex === workerCount - 1; const endIndex = (lastWorker) ? sharedIntArray.length :\n      startIndex + windowSize; sharedIntArraySlice = sharedIntArray.slice(startIndex,\n      endIndex); break; } \n  }; \n```", "```js\nglobal.onmessage = (message) => { \n  const { data } = message; \n  switch (data.type) { \n   // ... \n case 'calculate-sum': const sum = sharedIntArraySlice.reduce((acc, number) => acc + number , 0); sendResult('sum', sum); break; \n    } \n  }; \n```", "```js\n// main.js\nasync function sumOnWorker(array) {}\n```", "```js\n// main.jsfunction sumOnWorker(array) { \n  return new Promise(function (resolve) { \n    const worker = new Worker('./worker.js'); \n worker.onmessage = (message) => {}; worker.postMessage({ type: 'calculate-sum', array }); \n  }); \n} \n```", "```js\n// main.js\nasync function sumOnWorker(array) { \n  return new Promise(function (resolve) { \n    const worker = new Worker('./worker.js'); \n    worker.onmessage = (message) => { \n const { type, result } = message.data; console.log('Completed operation (%s), result: %s', type, result ); return resolve(result); \n    }; \n\n    worker.postMessage({ type: 'calculate-sum', array }); \n  }); \n} \n```", "```js\nexport function main() { \n  const array0 = (new Array(10000)).fill().map(Math.random); \n  const array1 = (new Array(1000)).fill().map(Math.random); \n  const array2 = (new Array(100)).fill().map(Math.random); \n} \n```", "```js\nexport function main() { \n  // ... \n sumOnWorker(array0).then((sum) => console.log('Array 0 sum: \n  %s', sum)); sumOnWorker(array1).then((sum) => console.log('Array 1 sum: \n  %s', sum)); sumOnWorker(array2).then((sum) => console.log('Array 2 sum: \n  %s', sum));; \n} \n```", "```js\n// worker.js \nconst global = this;  \nglobal.onmessage = (message) => {};  \n```", "```js\nglobal.onmessage = (message) => { \n const { data } = message; switch (data.type) {} \n};  \n```", "```js\nglobal.onmessage = (message) => { \n  const { data } = message; \n  switch (data.type) { \n case 'calculate-sum': const sum = data.array.reduce((acc, number) => acc + \n      number,0); global.postMessage({ type: 'sum', result: sum }); break;\n  } \n}; \n```"]