["```js\nfunction print(message) {\n    console.log(message);\n}\nsetTimeout(() => {\nprint(\"Message from Timeout\");\n}, 0);\nprint(\"Message 1\");\nprint(\"Message 2\");\n```", "```js\naddScript(\"js/app.js\", (script, error) => {\n        if (error) {\n          addErrorMessage(\"main\", error.message);\n        } else {\n          setTimeout(() => {\n            let message = execute();\n            addSuccessMessage(\"main\", message);\n            setTimeout(() => {\n              message = \"operation completed successfully\";\n              addSuccessMessage(\"main\", message);\n              setTimeout(() => {\n                message = \"ready for another execution\";\n                addSuccessMessage(\"main\", message);\n              }, 2000);\n            }, 3000);\n          }, 4000);\n        }\n      });\n```", "```js\naddPromisifiedScript (\"js/app.js\")\n        .then(() =>\n            new Promise((resolve) => {\n              setTimeout(() => {\n                let message = execute();\n                addSuccessMessage(\"main\", message);\n                resolve();\n              }, 4000);\n            })\n        )\n        .then(() =>\n            new Promise((resolve) => {\n              setTimeout(() => {\n                let message = \"operation completed successfully\";\n                addSuccessMessage(\"main\", message);\n                resolve();\n              }, 3000);\n            })\n        )\n        .then(() =>\n            new Promise((resolve) => {\n              setTimeout(() => {\n                let message = \"ready for another execution\";\n                addSuccessMessage(\"main\", message);\n                resolve();\n              }, 2000);\n            })\n        )\n        .catch((error) => addErrorMessage(\"main\", error.message));\n```", "```js\nfunction delay(ms) {\n        return new Promise((resolve) => setTimeout(resolve, ms));\n      }\n      addPromisifiedScript(\"js/app.js\")\n        .then(() => delay(4000))\n        .then(() => {\n          let message = execute();\n          addSuccessMessage(\"main\", message);\n        })\n        .then(() => delay(3000))\n        .then(() => {\n          let message = \"operation completed successfully\";\n          addSuccessMessage(\"main\", message);\n        })\n        .then(() => delay(2000))\n        .then(() => {\n          let message = \"ready for another execution\";\n          addSuccessMessage(\"main\", message);\n        })\n        .catch((error) => addErrorMessage(\"main\", error.message));\n```", "```js\naddPromisifiedScript(\"js/app.js\").then(\n        (resolve) => {},//success continuation\n        (reject) => {}//error handling\n      );\n```", "```js\nconst usernames = [\"TuralSuleymani\", \"rasulhsn\"];\n      const url = \"https://api.github.com/users/\";\n      let requests = usernames.map((name) => fetch(url.concat(name)));\n      Promise.all(requests)\n        .then((responses) => Promise.all(responses.map((r) => \n          r.json())))\n        .then((gitusers) =>\n          gitusers.forEach((user) => createAvatar(user.avatar_url))\n        );\n```", "```js\nPromise.all([\n    new Promise((resolve, reject) => setTimeout(() => resolve(\"success \n      resolve\"), 500)),\n    new Promise((resolve, reject) => setTimeout(() => reject(new \n      Error(\"Something went wrong!!\")), 1000)),\n    new Promise((resolve, reject) => setTimeout(() => resolve(\"another \n      success resolve\"), 1500))\n  ])\n  .then((success) => console.log(success))\n  .catch(alert); // Error: Something went wrong!!\n```", "```js\nPromise.allSettled([\n    new Promise((resolve, reject) => setTimeout(() => resolve(\"success \n      resolve\"), 500)),\n    new Promise((resolve, reject) => setTimeout(() => reject(new \n      Error(\"Something went wrong!!\")), 1000)),\n    new Promise((resolve, reject) => setTimeout(() => resolve(\"another \n      success resolve\"), 1500))\n  ])\n  .then(results => {\n    // 'results' is an array containing information about each promise (resolved or rejected)\n    console.log(results);\n  });\n```", "```js\nPromise.race([\n    new Promise((resolve, reject) => setTimeout(() => resolve(\"success \n      resolve\"), 2500)),\n    new Promise((resolve, reject) => setTimeout(() => reject(new \n      Error(\"Something went wrong!!\")), 1000)),\n    new Promise((resolve, reject) => setTimeout(() => resolve(\"another \n      success resolve\"), 3500))\n  ])\n  .then(result => {\n    console.log(result);\n  }).catch((err)=>console.log('Error detected', err));\n```", "```js\nPromise.any([\n    new Promise((resolve, reject) => setTimeout(() => resolve(\"success \n      resolve\"), 2500)),\n    new Promise((resolve, reject) => setTimeout(() => reject(new \n      Error(\"Something went wrong!!\")), 1000)),\n    new Promise((resolve, reject) => setTimeout(() => resolve(\"another \n      success resolve\"), 3500))\n  ])\n  .then(result => {\n    console.log(result);\n  }).catch((err) => console.log('Error detected', err));//will not be executed\n```", "```js\nasync function sayHello() {\n    return \"hello user\";\n}\n```", "```js\nfunction sayHello() {\n   return Promise.resolve(\"hello user\");\n}\n```", "```js\nfunction delayedMessage(msg) {\n    return new Promise((resolve)=> {\n        setTimeout(() => {\n            resolve(msg);\n        }, 3000);\n    });\n}\n```", "```js\nlet message = await delayedMessage(\"hello\");//wait here for the Promise to be settled\n```", "```js\nconst url = \"https://jsonplaceholder.typicode.com\";\nconst paths = [\"/posts\",\"/comments\"];\nlet promises = Promise.all(paths.map(path=> fetch(url.concat(path))));\npromises.then(responses=> Promise.all(responses.map(t => t.json())))\n.then(data=> {\n    data.forEach(element => {\n        console.log(element);\n    });\n})\n```", "```js\nconst url = \"https://jsonplaceholder.typicode.com\";\nconst paths = [\"/posts\",\"/comments\"];\nlet getData = async function() {\n    const responses = await Promise.all( paths.map(path=>fetch(url\n      .concat(path))));\n    constJavaScriptons = await Promise.all( responses\n      .map(response=>response.json()));\n   JavaScriptons.forEach(element => {\n        console.log(element);\n    });\n}\ngetData();\n```", "```js\nlet promise = Promise.resolve();\npromise.then(() => console.log(\"planning to see this message first\"));\nconsole.log(\"but this message will be seen first\");\n```"]