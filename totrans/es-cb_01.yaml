- en: Building with Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring browsers—Chrome and Firefox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Python, using SimpleHTTPServer to host a local static file server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an HTML page that loads an ECMAScript module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting/importing multiple modules for external use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Renaming imported modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nesting modules under a single namespace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript is the most famous language that adheres to the ECMAScript standard.
    This standard was created in the late 1990s in order to guide the development
    of the language. In the early years, development was slow, with only four major
    versions reaching production in the first two decades. However, with increased
    exposure, largely thanks to the popularization of the Node.js run-time, the pace
    of development has increased dramatically. The years 2015, 2016, and 2017 each
    saw new releases of the of the standard, with another planned for 2018.
  prefs: []
  type: TYPE_NORMAL
- en: With all these developments, now is an exciting time to be a JavaScript developer.
    A lot of new ideas are coming in from other languages, and the standard API is
    expanding to be more helpful. This book focuses on new features and techniques
    that can be used in the newer versions of JS as well as future versions!
  prefs: []
  type: TYPE_NORMAL
- en: Historically, creating JavaScript programs that span multiple files has been
    a painful experience. The simplest approach was to include each of the files in
    separate `<script>` tags. This also requires developers to position the tags in
    the correct order.
  prefs: []
  type: TYPE_NORMAL
- en: Various libraries have attempted to improve this situation. RequireJS, Browserfy,
    and Webpack all attempt to solve the problem of JavaScript dependencies and module
    loading. Each of these requires some kind of configuration or build step.
  prefs: []
  type: TYPE_NORMAL
- en: The situation has improved in recent years. Browser manufacturers collaborate
    in creating the ECMAScript specification. It is then up to the manufacturers to
    implement JavaScript interpreters (programs that actually run the JavaScript)
    that adhere to that specification
  prefs: []
  type: TYPE_NORMAL
- en: New versions of browsers are being released that support native ECMAScript modules.
    ECMAScript modules provide an elegant method for including dependencies. Best
    of all, unlike the previous methods, modules don't require any build step or configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter focus on installing and configuring the Chrome and Firefox 
    web browsers and how to take full advantage of ES modules and the import/export
    syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring - Chrome
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Subsequent recipes will assume an environment that is capable of using ES modules.
    There are two strategies for accomplishing this: creating a build step that collects
    all the modules used into a single file for the browser to download, or using
    a browser that is capable of using ES modules. This recipe demonstrates the latter
    option.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To step through this recipe, you need a computer with an operating system (OS)
    that is supported by Chrome (not Chromium). It supports recent versions of Windows
    and macOS, as well as a large number of Linux distributions. Most likely, if your
    OS doesn't support this browser, you are already aware of this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To download Chrome, navigate your browser to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://www.google.co.in/chrome/](https://www.google.co.in/chrome/).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click Download and accept the terms of service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the installer finishes downloading, double-click the installer to launch
    it and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To check the version of Chrome, open the Chrome browser, and enter the following
    URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`chrome://settings/help`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the Version number where the number is 61 or higher. See the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7b15a0ae-f6f6-4db2-8cb8-e2e77dafda50.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The current versions of Chrome come with ES modules enabled out of the box.
    So no configuration or plugins are required to get them working!
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, only a few browsers support ECMAScript. You can see
    which browsers support modules under the Browser compatibility section of the
    page at [https://mzl.la/1PY7nnm.](https://mzl.la/1PY7nnm)
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring - Firefox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Subsequent recipes will assume an environment that is capable of using ES modules.
    There are two strategies for accomplishing this: creating a build step that collects
    all the modules used into a single file for the browser to download, or using
    a browser that is capable of using ES modules. This recipe demonstrates the latter
    option.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To step through this recipe, you need a computer with an operating system (OS)
    that is supported by Firefox. It supports recent versions of Windows and macOS,
    as well as a large number of Linux distributions. Most likely, if your OS doesn't
    support Firefox, you are already aware of this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Firefox, open a browser and enter the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`https://www.mozilla.org/firefox`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the button that says Download to download the installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the installer has finished downloading, double click the installer and
    follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To configure Firefox, open the Firefox browser and enter the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`about:config`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The menu will allow you to enable advanced and experimental features. If you
    see a warning, click the button that says I accept the risk!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the dom.moduleScripts.enabled setting, and double-click it to set the
    value to true**,** as shown in following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e92323cd-a98f-4724-be81-b6271d10df52.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firefox supports ES modules, but disables them by default. This allows developers
    to experiment with the feature, while the majority of users are not exposed to
    it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The same as the *Installing and configuring - Chrome* section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python, using SimpleHTTPServer to host a local static file server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible to browse web pages directly from the filesystem. However, Chrome
    and Firefox have security features that make this inconvenient for development.
    What we need is a simple static file server. This recipe demonstrates how to install
    Python (if necessary) and use it to serve files from a directory.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Find out how to open the command line on your OS. On macOS and Linux, this is
    called the Terminal. On Windows, it is called the Command Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: You should use a browser that is configured to load ES modules (see the first
    recipe).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Check whether you have Python installed already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see an output like the one displayed as follows, Python is already installed.
    And you can skip to *step 6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you receive an error such as the following, continue with the installation
    in *step 5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Python on your computer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For macOS, download and run the installer for the latest version of Python 2
    or 3 from the following link: [https://www.python.org/downloads/mac-osx/](https://www.python.org/downloads/mac-osx/)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For Windows, download and run the installer for the latest version of Python
    2 or 3 from the following link: [https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For Linux, use the operating system's built in the package manager to install
    the Python package
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a folder on your desktop named `es8-cookbook-workspace`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the folder, create a text file named `hello.txt` and save some text to
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the Command Prompt and navigate to the folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Linux or macOS Terminal enter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the Python HTTP server with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we can use following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your browser and enter the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see a page that shows the contents of the `es8-cookbook-workspace` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a983f629-b47b-4cdb-b94b-4e6908163069.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the link to hello.txt and you'll see the text contents of the file
    you created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we did was check if Python was installed. The best way to do
    this is to ask Python for its version number. This way we know whether Python
    is installed, and if it's new enough for our purposes.
  prefs: []
  type: TYPE_NORMAL
- en: If it's not installed, Python can be retrieved via the OS's package manager,
    or via the installers made available through Python's website.
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, Python comes with a lot of utilities. The one we are interested
    in is the appropriately named `SimpleHTTPServer`. This utility listens for HTTP
    requests on port `8000`, and returns the contents of the files relative to the
    directory root. If the path points to a directory, it returns an HTML page that
    lists the directory contents.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an HTML page that loads an ECMAScript module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous recipes, we went over installation and configurations instructions
    to run a static file server using Python and configure a browser to use ES modules.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you have the static file server running in your working
    directory. If you haven't installed Python or configured your browser to work
    with ES modules, please see the first two recipes in the book.
  prefs: []
  type: TYPE_NORMAL
- en: The following steps will demonstrate how to create an ES module and load it
    into an HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create an `hello.html` file with a some text content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Open `hello.html` by opening your browser, and entering the following URL: ` http://localhost:8000/hello.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see Open Your Console! displayed by the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/57a7992c-da30-4b82-8b7a-341c30c4e717.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lets do what the page tells us and open up the Developer Console. For both
    Firefox and Chrome, the command is the same:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On Windows and Linux:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'On macOS:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, in the same directory, create a file called `hello.js`, which exports
    a function named `sayHi` that writes a message to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Next add a script module tag to the head of `hello.html` that imports the `sayHi` method
    from `hello.js` (pay attention to the type value).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reload the browser window with the Developer Console open and you should see
    the `hello` message displayed as text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e2413b0-c7b4-415e-a8c9-18314f5ee757.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although our browser can work with ES modules, we still need to specify that
    is how we want our code to be loaded. The older way of including script files
    uses `type="text/javascript"`. This tells the browser to execute the content of
    the tag immediately (either from tag contents or from the `src` attribute).
  prefs: []
  type: TYPE_NORMAL
- en: By specifying `type="module"`, we are telling the browser that this tag is an
    ES module. The code within this tag can import members from other modules. We
    imported the function `sayHi` from the `hello` module and executed it within that
    `<script>` tag. We'll dig into the `import` and `export` syntax in the next couple
    of recipes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Exporting/importing multiple modules for external use*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Adding fallback script tags*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting/importing multiple modules for external use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we loaded an ES module into an HTML page and executed
    an exported function. Now we can take a look at using multiple modules in a program.
    This allows us more flexibility when organizing our code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have Python installed and your browser properly configured.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new working directory, navigate into it with your command-line application,
    and start the Python `SimpleHTTPServer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `rocket.js` that exports the name of a rocket, a countdown
    duration, and a launch function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file named `main.js` that imports from `rocket.js`, logs out details,
    and then calls the launch function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create an `index.html` file that imports the `main.js` module and runs
    the `main` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your browser and then the `index.html` file. You should see the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3be6b910-02e5-4259-b3e3-85233e7fa412.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two options for exporting a member from a module. It can either be
    exported as the `default` member, or as a named member. In `rocket.js`, we see
    both methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the string `"Saturn V"` is exported as the default member, while
    `COUNT_DOWN_DURATION` and `launch` are exported as named members. We can see the
    effect this has had when importing the module in `main.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We can see the difference in how the default member and the name members are
    imported. The name members appear inside the curly braces, and the name they are
    imported with matches their name in the module source file. The default module,
    on the other hand, appears outside the braces, and can be assigned to any name.
    The unexported member `launchSequence` cannot be imported by another module.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Renaming imported modules*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Nesting imported modules under a single namespace*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Renaming imported modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modules allow more flexibility in organizing code. This allows for a shorter,
    more contextual name. For example, in the previous recipe, we named a function
    `launch` instead of something more verbose such as `launchRocket`. This helps
    keep our code more readable, but it also means that different modules can export
    members that use the same name.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll rename imports in order to avoid these namespace collisions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll be reusing the code from the previous recipe (*Exporting/importing multiple
    modules for external use*). The changes from the previous files will be highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Copy the folder created for the previous recipe into a new directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to that directory with your command-line application and start the
    Python server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Rename `rocket.js` to `saturn-v.js`, add the name of the rocket to the log
    statements, and update the `main.js` import statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy `saturn-v.js` to a new file named `falcon-heavy.js` and change the default
    export value and the `COUNT_DOWN_DURATION`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the `falcon` module into `main.js`. Rename the imported members to avoid
    conflicts and launch the falcon rocket as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `index.html` in your browser and you should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8dbb64e7-e312-4818-958a-29b40c21704b.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we duplicated the `saturn-v.js` file to and imported the members from `falcon-heavy.js`,
    we had a potential namespace conflict. Both files export members named `COUNT_DOWN_DURATION`
    and launch. But using the `as` keyword, we renamed those members in order to avoid
    that conflict. Now the importing `main.js` file can use both sets of members without
    issue.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming members can also be helpful to adding context. For example, it might
    be useful to rename the launch as `launchRocket` even if there is no conflict.
    This give the importing module additional context, and makes the code a bit clearer.
  prefs: []
  type: TYPE_NORMAL
- en: Nesting modules under a single namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the number of modules grows, patterns start to emerge. For practical and
    architectural reasons, it makes sense to group multiple modules together and use
    them as a single package.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates how to collect multiple modules together and use them
    as a single package.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It will be helpful to have the source code available from previous recipes to
    bootstrap this recipe. Otherwise, you'll need to reference *Exporting/importing
    multiple modules for external use* for how to create the `index.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new folder with an `index.html` file, as seen in *Exporting/importing
    multiple modules for external use*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside of that directory, create a folder named `rockets`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside of `rockets`, create three files: `falcon-heavy.js`, `saturn-v.js`,
    and `launch-sequence.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create `index.js`, which exports the members of those files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main.js` file (in the folder that contains `rockets`), which imports
    `falconHeavey` and `saturnV` from the `index.js` file and launches them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Open in the browser, and see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f30de003-ea57-4257-a371-8fecbddbacfa.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The * syntax seen on the first two lines of `index.js` imports all the exported
    members under the same object. This means that the `name`, `COUNT_DOWN_DURATION`,
    and `launch` members of `falcon-heavey.js` are all attached to the `falconHeavy`
    variable. Likewise, for the `saturn-v.js` modules and the `saturnV` variable.
    So, when `falconHeavy` and `saturnV` are exported on *line 4*, those exported
    names now contain all the exported members of their respective modules.
  prefs: []
  type: TYPE_NORMAL
- en: This provides a single point where another module (`main.js` in this case) can
    import those members. The pattern has three advantages. It is simple; there is
    only one file to import members from, rather than many. It is consistent, because
    all packages can use an `index` module to expose members of multiple modules.
    It is more flexible; members of some modules can be used throughout a package
    and not be exported by the `index` module.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is possible to export named items directly. Consider the following file, `atlas.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The `atlas` member can be exported directly by `index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then the `main.js` file can import the `atlas` member and launch it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This is one benefit of always using named exports; it's easier to collect and
    export specific members from packages with multiple modules.
  prefs: []
  type: TYPE_NORMAL
- en: Whether named or not, nesting is a great technique for grouping modules. It
    provides a mechanism for organizing code as the number of modules continues to
    grow.
  prefs: []
  type: TYPE_NORMAL
