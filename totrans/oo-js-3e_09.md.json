["```js\n    var result = database.query(\"SELECT * FROM table\");      \n    console.log(\"After reading from the database\"); \n\n```", "```js\n    function c(z2) { \n        console.log(new Error().stack); \n    } \n    function b(z1) { \n        c(z1+ 1); \n    } \n    function a(z) { \n        b(z + 1); \n    } \n    a(1);  \n\n    //at c (eval at <anonymous>) \n    //at b (eval at <anonymous>) \n    //at a (eval at <anonymous>) \n\n```", "```js\n    var xhr = new XMLHttpRequest(); \n    xhr.open('GET', 'http://babeljs.io', true); \n    xhr.onload = function(e) { \n      if (this.status == 200) { \n        console.log(\"Works\"); \n      } \n    }; \n    xhr.send(); \n\n```", "```js\n    fs.readFile('/etc/passwd', (err, data) => { \n      if (err) throw err; \n     console.log(data); \n    }); \n\n```", "```js\n    fs.readFile('/etc/passwd',  \n      //success \n      function(data) { \n        console.log(data) \n      }, \n      //error \n      function(error) { \n        console.log(error) \n      } \n    );   \n\n```", "```js\n    console.log(\"1\"); \n    cps(\"2\", function cps_step2(val2){ \n      console.log(val2); \n      cps(\"3\", function cos_step3(val3){ \n        console.log(val3); \n      }) \n      console.log(\"4\"); \n    }); \n    console.log(\"5\"); \n    //1 5 2 4 3 \n\n    function cps(val, callback) { \n      setTimeout(function () { \n            callback(val); \n      }, 0); \n    } \n\n```", "```js\n    asyncFunction(arg, result => { \n      //... \n    }) \n\n```", "```js\n    asyncFunction(arg). \n    then(result=>{ \n      //... \n    }); \n\n```", "```js\n    asyncFunction(arg) \n    .then(resultA=>{ \n      //... \n      return asyncFunctionB(argB); \n    }) \n    .then(resultB=>{ \n      //... \n    }) \n\n```", "```js\n    fs.readFile('text.json', \n      function (error, text) { \n          if (error) { \n              console.error('Error while reading text file'); \n          } else { \n              try { \n                  //... \n              } catch (e) { \n                  console.error('Invalid content'); \n              } \n          } \n      }); \n\n```", "```js\n    readFileWithPromises('text.json') \n    .then(text=>{ \n      //...process text \n    }) \n    .catch(error=>{ \n      console.error('Error while reading text file'); \n    }) \n\n```", "```js\n    const p = new Promise( \n      function (resolve, reject) { // (1) \n\n          if (   ) { \n              resolve(value); // success \n          } else { \n              reject(reason); // failure \n          } \n      }); \n\n```", "```js\n    promise \n    .then(result => { /* promise fulfilled */ }) \n    .catch(error => { /* promise rejected */ }); \n\n```", "```js\n    import {readFile} from 'fs'; \n    function readFileWithPromises(filename) { \n        return new Promise( \n            function (resolve, reject) { \n                readFile(filename,  \n                    (error, data) => { \n                        if (error) { \n                            reject(error); \n                        } else { \n                            resolve(data); \n                        } \n                    }); \n            }); \n    } \n\n```", "```js\n    readFileWithPromises('file.txt') \n    .then(result=> { 'something causes an exception'}) \n    .catch(error=> {'Something went wrong'}); \n\n```", "```js\n    readFileWithPromises('file.txt') \n    .then(throw new Error()) \n    .catch(error=> {'Something went wrong'}); \n\n```", "```js\n    Promise.all([ \n        f1(), \n        f2() \n    ]) \n    .then(([r1,r2]) => { \n        //    \n    }) \n    .catch(err => { \n        //.. \n    }); \n\n```", "```js\n    const introspection = { \n      intro() { \n        console.log(\"I think therefore I am\"); \n      } \n    } \n    for (const key of Object.keys(introspection)){ \n      console.log(key);  //intro \n    } \n\n```", "```js\n    var handler = { \n      get: function(target, name){ \n        return name in target ? target[name] :42; \n      } \n    } \n    var p = new Proxy({}, handler); \n    p.a = 100; \n    p.b = undefined; \n    console.log(p.a, p.b); // 100, undefined \n    console.log('c' in p, p.c); // false, 42 \n\n```", "```js\n    let ageValidator = { \n      set: function(obj, prop, value) { \n        if (prop === 'age') { \n          if (!Number.isInteger(value)) { \n            throw new TypeError('The age is not an number'); \n          } \n          if (value > 100) { \n            throw new RangeError('You cant be older than 100'); \n          } \n        } \n        // If no error - just store the value in the property \n        obj[prop] = value; \n      } \n    }; \n    let p = new Proxy({}, ageValidator); \n    p.age = 100; \n    console.log(p.age); // 100 \n    p.age = 'Two'; // Exception \n    p.age = 300; // Exception \n\n```", "```js\n    var car = { \n      name: \"Ford\", \n      method_1: function(text){ \n        console.log(\"Method_1 called with \"+ text); \n      } \n    } \n    var methodInterceptorProxy = new Proxy(car, { \n     //target is the object being proxied, receiver is the proxy \n     get: function(target, propKey, receiver){ \n      //I only want to intercept method calls, not property access \n      var propValue = target[propKey]; \n      if (typeof propValue != \"function\"){ \n       return propValue; \n  } \n      else{ \n       return function(){ \n        console.log(\"intercepting call to \" + propKey\n          + \" in car \" + target.name); \n        //target is the object being proxied \n        return propValue.apply(target, arguments); \n       } \n      } \n     } \n    }); \n    methodInterceptorProxy.method_1(\"Mercedes\"); \n    //\"intercepting call to method_1 in car Ford\" \n    //\"Method_1 called with Mercedes\" \n\n```"]