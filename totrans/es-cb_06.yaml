- en: Plain Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Object.assign to add properties to an object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Object.entries to get iterable property-name pairs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Object.is to compare two values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining function properties as methods on a plain object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining read-only props with Object.defineProperty
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overriding read-only props with Object.defineProperty
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a non-enumerable property with Object.defineProperty
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an object using object structuring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Picking values from an object using destructuring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a spread operator to combine objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With all the new features made available in recent versions of ECMAScript, it's
    easy to lose sight of the fundamentals. The Object API, like others, has received
    plenty of updates. They may seem mundane compared to less familiar features (such
    as `SharedArrayBuffer`), but they allow you to create some interesting and useful
    behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll be looking at how to use the Object API to create rich
    relationships and interesting properties.
  prefs: []
  type: TYPE_NORMAL
- en: Using Object.assign to add properties to an object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Combining the properties from different objects is a fairly common task. Doing
    this value by value is limited and tedious, because each property has to be enumerated.
    This recipe demonstrates how to do the same thing with the `Object.assign` method.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `06-01-object-assign-add-properties`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file with a `main` function that creates two objects, and
    then uses `Object.assign` to combine them with another anonymous object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eb449fb7-e2ab-4acf-a2ea-9311dda42ef5.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Object` assign method iterates over all the properties of the objects passed
    to it. Then it assigns them to the leftmost object. Priority is given to properties
    on rightmost objects. So, you can see that the value of `foo` comes from the anonymous
    object. The leftmost object is mutated by the values from the right, while the
    other objects are left unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: We'll see how to use the spread operator to accomplish the same task later on.
  prefs: []
  type: TYPE_NORMAL
- en: Using Object.entries to get iterable property-name pairs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Object.assign` works well for copying properties from one object to another.
    However, we sometimes want to perform other operations based on the properties
    of an object. This recipe shows how to use `Object.entries` to get an iterable
    of an object''s properties.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `06-02-object-entries-to-get-iterable`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` with a function named `main` that creates an object then
    uses a `for-of` loop to loop over the result of `Object.entries`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/33138a26-3529-4b8c-b3d5-5ee8f5eb4f81.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Object.entries` returns what is known as an iterable. These lists can be traversed
    with `for-of` loops. The items in this iterable are pairs of property names and
    values.  The props are `foo` and `bar`, while the value entries are their corresponding
    values for those props.'
  prefs: []
  type: TYPE_NORMAL
- en: The syntax `[prop, value]` destructures this pair into individual variables
    that are then logged out. Alternatively, we could reference the entry `prop` and
    `value` as the zero and 1 index of an array, but the destructured syntax is a
    little more direct. We'll look at destructuring in future recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Using Object.is to compare two values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript has a complex relationship with equality. It is common knowledge
    that using `===` is preferable to `==` because it gives more predictable results,
    and in most cases `===` behaves as expected. Unfortunately, due to quirks in the
    JavaScript type system, there are some frustrating edge cases.  In this recipe,
    we'll see how to use `Object.is` to get expected results for comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `06-03-compare-with-object-is`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` with a `main` function that makes a few illustrative comparisons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5e51f831-3718-4574-a48e-34f434886116.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Object.is` method has a different specification from the `===` operator.
    You can see that they agree most of the time, but there are certain edge cases
    where they disagree.  The initial test cases (the `object`, `null`, and `undefined`
    comparison) all agree, but we start to see some differences when we hit corner
    cases. You can see the differences between a positive and negative zero comparison,
    as well as a NaN comparison.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information, see the documentation on the Mozilla Developer page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).'
  prefs: []
  type: TYPE_NORMAL
- en: Defining function properties as methods on a plain object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Defining methods on object literals has always been possible with normal key-value
    pairs. More recent versions of ECMAScript have added a shorthand that mimics the
    syntax for defining methods on classes.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see that we can create and override methods on object
    literals using either technique.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `06-04-define-function-properties-as-method`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` with a function named `main`that defines two methods with the
    property and method syntax, overrides them, and calls them before and after override:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/30c222da-8028-4298-8015-a15aa85268e4.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw previously, the two syntaxes are equivalent. The two methods are defined
    as properties with function values, and because they don't have any attributes
    that prevent it, they can be overridden. Both `method0` and `method1` are defined
    on the initial object and executed immediately thereafter.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we assign a new function value to those properties of the same object.
    So when they are called again, the new functions are executed, rather than the
    originals.
  prefs: []
  type: TYPE_NORMAL
- en: In future recipes, we'll see how to prevent this kind of overriding.
  prefs: []
  type: TYPE_NORMAL
- en: Defining read-only props with Object.defineProperty
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's not always ideal to have methods that can be overridden. By default, properties
    that are assigned to an object can be reassigned. We need another option to add
    functions to an object so they won't be changed.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to add non-writable properties to an object with
    `Object.defineProperty`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `06-05-define-readonly-props`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file with a `main` function that defines a non-writable
    property, and then tries to write to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bad291f3-9cc8-4305-9e7a-f3dbb9ddc956.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we see that object properties are not simple key-value pairs.
    They have attributes that governern their behavior. One of these properties is
    writable. This property means that we can reassign the value afterwards. By default,
    this property is set to true; using `Object.defineProperty` we can see other values.
  prefs: []
  type: TYPE_NORMAL
- en: We'll see how other properties can be used to control other behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding read-only props with Object.defineProperty
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a non-writable property isn't the final word. In some cases, it is
    still possible to rewrite these properties. Thankfully, it is not something that
    is likely to be done by accident. In this recipe, we'll see how to define and
    redefine non-writable props with `Object.define`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `06-06-redefine-read-only-props`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file with a `main` function that creates an object. Define
    a configurable, non-writable property named `prop1` with a random value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Redefine that property as another `random` value and change configurable to
    `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Attempt to redefine the property a third time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8fb48c41-eb43-4088-a72b-f35b0ecba239.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writable is only part of the equation. Setting writable to false means that
    the property can be reassigned normally. By default, it cannot be redefined with
    `Object.defineProperty`. However, if `configurable` is set to true, then the property
    can be redefined. Once the `configurable` attribute is set to false, then we can
    no longer redefine it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a non-enumerable property with Object.defineProperty
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen in previous recipes how to avoid having properties overridden. There
    are situations where we might not want a property to be read. Recall the `Object.entries` method,
    which creates an iterator of all the properties and values on the object. Well,
    that's not precisely true. It creates an iterator of all the `enumerable` properties.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to create properties that won't be included in
    the iterator.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `06-07-non-enumerable-props`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file with a `main` function that creates an object with
    key-value pairs of books and authors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Define two properties, one an `enumerable` with a random value and another
    non-enumerable with a function as the value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/167601f8-fd15-4a62-866f-463d2f3f2332.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The key values defined as literals on the object are enumerable as before. The
    next two properties are more interesting. The first property, `visibleProp`, explicitly
    sets the `enumerable` attribute to true, and appears in the list. The `invisibleProp` property
    is not explicitly set; the default value is false. Only the `enumerable` properties
    appear in the iterator.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an object using object structuring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pulling attributes from an object is yet another repetitive task. There seems
    to be unnecessary repetition. Newer versions of ECMAScript include a syntactic
    feature that makes this process less onerous. This recipe demonstrates how to
    use object destructuring to pull new variables from object props.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `06-08-pick-values-from-object-destructuring`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file. Create a main function that creates a new object then
    creates new constants from the properties therein:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b12aa271-e818-4be0-bf7d-750c24a8050a.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Destructuring is syntactic shorthand. The names of the variables are used to
    reference properties on the object. The values are assigned to the variable of
    the corresponding name.
  prefs: []
  type: TYPE_NORMAL
- en: Picking values from an object using destructuring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bundling multiple properties into a single object is another common task in
    JavaScript that can be really tedious. More recent versions of ECMAScript have
    added a new bit of syntax to make this more convenient.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use this new syntax to create an object from
    existing variables.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `06-09-create-objects-with-structuring`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file with an `async` function named `main`, which creates
    several constants and then uses object structuring to create an object with properties
    of the corresponding names and values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b948e29b-9434-40fb-80c7-12f42b25d17e.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like the previous recipe, the syntax uses the names of the variables between
    the curly braces to determine the property name on the object. Each of the properties
    is created with the variable name and value of the corresponding constant.
  prefs: []
  type: TYPE_NORMAL
- en: Using a spread operator to combine objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a previous recipe, we saw how to use `Object.assign` to combine objects.
    It gets the job done, but by using newer ECMAScript syntax we can do this in a
    more compact way. In this recipe, we'll see how to use the new spread operator
    to combine objects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `06-10-spread-operator-combine`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file with an `async` function named `main`, which creates
    a couple of objects and a constant. It then uses the spread operator and object
    structuring to combine them into a single object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/42d91977-788f-4d94-b667-9b29d6a5e41f.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The spread operator spreads out the `enumerable` properties of an object so
    that they are all referenced when structuring the new object. Like `Object.assign`,
    the values are given priority from right to left, and the last property is handled
    in the sane way as with object structuring in a prior recipe.
  prefs: []
  type: TYPE_NORMAL
