["```js\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVhNjhhNDMzMDJkMWNlZDU5YjExNDg3MCIsImlhdCI6MTUxNzI0MjM1M30.5xY59iTIjpt9ukDmxseNAGbOdz6weWL1drJkeQzoO3M\n```", "```js\n$ npm install jsonwebtoken --save\n\n```", "```js\n...\nconst morgan = require('morgan')\nconst fs = require('fs')\nconst jwt = require('jsonwebtoken');\n...\n```", "```js\n$ npm install passport --save\n```", "```js\n...\n\"nodemon\": \"^1.14.10\",\n\"passport\": \"^0.4.0\",\n\"sass-loader\": \"^6.0.6\",\n...\n```", "```js\n$ npm install\n```", "```js\n...\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst morgan = require('morgan');\nconst fs = require('fs');\nconst jwt = require('jsonwebtoken');\nconst passport = require('passport');\n\nconst app = express();\nconst router = express.Router();\napp.use(morgan('combined'));\napp.use(bodyParser.json());\napp.use(cors());\napp.use(passport.initialize());\n...\n```", "```js\n$ npm install passport-jwt --save\n```", "```js\n...\n\"nodemon\": \"^1.14.10\",\n\"passport\": \"^0.4.0\", \"passport-jwt\": \"^3.0.1\",\n\"sass-loader\": \"^6.0.6\",\n...\n\n```", "```js\n...\nconst morgan = require('morgan');\nconst fs = require('fs');\nconst jwt = require('jsonwebtoken');\nconst passport = require('passport');\nconst passportJWT = require('passport-jwt');\nconst ExtractJwt = passportJWT.ExtractJwt;\nconst JwtStrategy = passportJWT.Strategy;\nconst jwtOptions = {}\njwtOptions.jwtFromRequest = ExtractJwt.fromAuthHeaderWithScheme('jwt');\njwtOptions.secretOrKey = 'movieratingapplicationsecretkey';\n\nconst app = express();\nconst router = express.Router();\n...\n```", "```js\nconst mongoose = require('mongoose');\n\nconst Schema = mongoose.Schema;\nconst UserSchema = new Schema({\n name: String,\n email: String,\n password: String,\n});\n\nconst User = mongoose.model('User', UserSchema);\nmodule.exports = User;\n```", "```js\n$ npm install bcryptjs --save\n```", "```js\nconst mongoose = require('mongoose');\nconst bcryptjs = require('bcryptjs');\n\nconst Schema = mongoose.Schema;\nconst UserSchema = new Schema({\n  name: String,\n  email: String,\n  password: String,\n});\n\nconst User = mongoose.model('User', UserSchema);\nmodule.exports = User;\n```", "```js\n...\nconst User = mongoose.model('User', UserSchema);\nmodule.exports = User;\n\nmodule.exports.createUser = (newUser, callback) => {\n bcryptjs.genSalt(10, (err, salt) => {\n bcryptjs.hash(newUser.password, salt, (error, hash) => {\n // store the hashed password\n const newUserResource = newUser;\n newUserResource.password = hash;\n newUserResource.save(callback);\n });\n });\n};\n...\n```", "```js\nconst User = require('../models/User.js');\n\nmodule.exports.controller = (app) => {\n // register a user\n app.post('/users/register', (req, res) => {\n const name = req.body.name;\n const email = req.body.email;\n const password = req.body.password;\n const newUser = new User({\n name,\n email,\n password,\n });\n User.createUser(newUser, (error, user) => {\n if (error) { console.log(error); }\n res.send({ user });\n });\n });\n};\n```", "```js\n<template>\n <v-form v-model=\"valid\" ref=\"form\" lazy-validation>\n <v-text-field\n label=\"Name\"\n v-model=\"name\"\n required\n ></v-text-field>\n <v-text-field\n label=\"Email\"\n v-model=\"email\"\n :rules=\"emailRules\"\n required\n ></v-text-field>\n <v-text-field\n label=\"Password\"\n v-model=\"password\"\n required\n ></v-text-field>\n <v-text-field\n name=\"input-7-1\"\n label=\"Confirm Password\"\n v-model=\"confirm_password\"\n ></v-text-field>\n <v-btn\n @click=\"submit\"\n :disabled=\"!valid\"\n >\n submit\n </v-btn>\n <v-btn @click=\"clear\">clear</v-btn>\n </v-form>\n</template>\n```", "```js\nimport Vue from 'vue';\nimport Router from 'vue-router';\nimport Home from '@/components/Home';\nimport Contact from '@/components/Contact';\nimport AddMovie from '@/components/AddMovie';\nimport Movie from '@/components/Movie';\nimport Register from '@/components/Register';\n\nVue.use(Router);\n\nexport default new Router({\n  mode: 'history',\n  routes: [\n    {\n      path: '/',\n      name: 'Home',\n      component: Home,\n    },\n    {\n      path: '/contact',\n      name: 'Contact',\n      component: Contact,\n    },\n    {\n      path: '/movies/add',\n      name: 'AddMovie',\n      component: AddMovie,\n    },{ path: '/movies/:id',name: 'Movie',component: Movie,},\n {\n path: '/users/register',\n name: 'Register',\n component: Register,\n },\n  ],\n});\n```", "```js\n...\n    <v-btn @click=\"clear\">clear</v-btn>\n  </v-form>\n</template>\n<script>\nexport default {\n data: () => ({\n valid: true,\n name: '',\n email: '',\n password: '',\n confirm_password: '',\n emailRules: [\n v => !!v || 'E-mail is required',\n v => /\\S+@\\S+\\.\\S+/.test(v) || 'E-mail must be valid',\n ],\n }),\n methods: {\n async submit() {\n if (this.$refs.form.validate()) {\n // add process here\n }\n },\n clear() {\n this.$refs.form.reset();\n },\n },\n};\n</script>\n```", "```js\n$ npm install axios --save\n```", "```js\n...\n</v-form>\n</template>\n<script>\nimport axios from 'axios';\n\nexport default {\n  data: () => ({\n    valid: true,\n    name: '',\n    email: '',\n    password: '',\n    confirm_password: '',\n    emailRules: [\n      v => !!v || 'E-mail is required',\n      v => /\\S+@\\S+\\.\\S+/.test(v) || 'E-mail must be valid',\n    ],\n  }),\n  methods: {\n    async submit() {\n if (this.$refs.form.validate()) {\n return axios({\n method: 'post',\n data: {\n name: this.name,\n email: this.email,\n password: this.password,\n },\n url: 'http://localhost:8081/users/register',\n headers: {\n 'Content-Type': 'application/json',\n },\n })\n .then(() => {\n this.$swal(\n 'Great!',\n 'You have been successfully registered!',\n 'success',\n );\n this.$router.push({ name: 'Login' });\n })\n .catch((error) => {\n const message = error.response.data.message;\n this.$swal('Oh oo!', `${message}`, 'error');\n });\n }\n return true;\n },\n clear() {\n this.$refs.form.reset();\n },\n  },\n};\n</script>\n```", "```js\nconst User = require('../models/User.js');\n\nmodule.exports.controller = (app) => {\n  // register a user\n  app.post('/users/register', (req, res) => {\n    const name = req.body.name;\n    const email = req.body.email;\n    const password = req.body.password;\n    const newUser = new User({\n      name,\n      email,\n      password,\n    });\n    User.createUser(newUser, (error, user) => {\n      if (error) {\n res.status(422).json({\n message: 'Something went wrong. Please try again after some time!',\n });\n }\n      res.send({ user });\n    });\n  });\n};\n```", "```js\n...\nconst User = mongoose.model('User', UserSchema);\nmodule.exports = User;\n\nmodule.exports.createUser = (newUser, callback) => {\n  bcryptjs.genSalt(10, (err, salt) => {\n    bcryptjs.hash(newUser.password, salt, (error, hash) => {\n      // store the hashed password\n      const newUserResource = newUser;\n      newUserResource.password = hash;\n      newUserResource.save(callback);\n    });\n  });\n};\n\nmodule.exports.getUserByEmail = (email, callback) => {\n const query = { email };\n User.findOne(query, callback);\n};\n```", "```js\n...\nmodule.exports.getUserByEmail = (email, callback) => {\n  const query = { email };\n  User.findOne(query, callback);\n};\n\nmodule.exports.comparePassword = (candidatePassword, hash, callback) => {\n bcryptjs.compare(candidatePassword, hash, (err, isMatch) => {\n if (err) throw err;\n callback(null, isMatch);\n });\n};\n```", "```js\nconst User = require('../models/User.js');\n\nconst passportJWT = require('passport-jwt');\nconst jwt = require('jsonwebtoken');\n\nconst ExtractJwt = passportJWT.ExtractJwt;\nconst jwtOptions = {};\njwtOptions.jwtFromRequest = ExtractJwt.fromAuthHeaderWithScheme('jwt');\njwtOptions.secretOrKey = 'thisisthesecretkey';\n\nmodule.exports.controller = (app) => {\n  // register a user\n  app.post('/users/register', (req, res) => {\n    const name = req.body.name;\n    const email = req.body.email;\n    const password = req.body.password;\n    const newUser = new User({\n      name,\n      email,\n      password,\n    });\n    User.createUser(newUser, (error, user) => {\n      if (error) {\n        res.status(422).json({\n          message: 'Something went wrong. Please try again after some time!',\n        });\n      }\n      res.send({ user });\n    });\n  });\n\n  // login a user\n app.post('/users/login', (req, res) => {\n if (req.body.email && req.body.password) {\n const email = req.body.email;\n const password = req.body.password;\n User.getUserByEmail(email, (err, user) => {\n if (!user) {\n res.status(404).json({ message: 'The user does not exist!' });\n } else {\n User.comparePassword(password, user.password, (error, isMatch) => {\n if (error) throw error;\n if (isMatch) {\n const payload = { id: user.id };\n const token = jwt.sign(payload, jwtOptions.secretOrKey);\n res.json({ message: 'ok', token });\n } else {\n res.status(401).json({ message: 'The password is incorrect!' });\n }\n });\n }\n });\n }\n });\n};\n```", "```js\n<template>\n <v-form v-model=\"valid\" ref=\"form\" lazy-validation>\n <v-text-field\n label=\"Email\"\n v-model=\"email\"\n :rules=\"emailRules\"\n required\n ></v-text-field>\n <v-text-field\n label=\"Password\"\n v-model=\"password\"\n required\n ></v-text-field>\n <v-btn\n @click=\"submit\"\n :disabled=\"!valid\"\n >\n submit\n </v-btn>\n <v-btn @click=\"clear\">clear</v-btn>\n </v-form>\n</template>\n```", "```js\nimport Vue from 'vue';\nimport Router from 'vue-router';\nimport Home from '@/components/Home';\nimport Contact from '@/components/Contact';\nimport AddMovie from '@/components/AddMovie';\nimport Movie from '@/components/Movie';\nimport Register from '@/components/Register';\nimport Login from '@/components/Login';\n\nVue.use(Router);\n\nexport default new Router({\n  mode: 'history',\n  routes: [\n    {\n      path: '/',\n      name: 'Home',\n      component: Home,\n    },\n    {\n      path: '/contact',\n      name: 'Contact',\n      component: Contact,\n    },\n    {\n      path: '/movies/add',\n      name: 'AddMovie',\n      component: AddMovie,\n    },\n    {\n      path: '/movies/:id',\n      name: 'Movie',\n      component: Movie,\n    },\n    {\n      path: '/users/register',\n      name: 'Register',\n      component: Register,\n    },\n    {\n path: '/users/login',\n name: 'Login',\n component: Login,\n },\n  ],\n});\n```", "```js\n...\n</v-form>\n</template>\n<script>\nimport axios from 'axios';\n\nexport default {\n data: () => ({\n valid: true,\n email: '',\n password: '',\n emailRules: [\n v => !!v || 'E-mail is required',\n v => /\\S+@\\S+\\.\\S+/.test(v) || 'E-mail must be valid',\n ],\n }),\n methods: {\n async submit() {\n return axios({\n method: 'post',\n data: {\n email: this.email,\n password: this.password,\n },\n url: 'http://localhost:8081/users/login',\n headers: {\n 'Content-Type': 'application/json',\n },\n })\n .then((response) => {\n window.localStorage.setItem('auth', response.data.token);\n this.$swal('Great!', 'You are ready to start!', 'success');\n this.$router.push({ name: 'Home' });\n })\n .catch((error) => {\n const message = error.response.data.message;\n this.$swal('Oh oo!', `${message}`, 'error');\n this.$router.push({ name: 'Login' });\n });\n },\n clear() {\n this.$refs.form.reset();\n },\n },\n};\n</script>\n```", "```js\nconst MovieSchema = require('../models/Movie.js');\nconst Rating = require('../models/Rating.js');\nconst passport = require('passport');\n\nmodule.exports.controller = (app) => {\n  // fetch all movies\n  app.get('/movies', passport.authenticate('jwt', { session: false }), (req, res) => {\n    MovieSchema.find({}, 'name description release_year genre', (error, movies) => {\n      if (error) { console.log(error); }\n      res.send({\n        movies,\n      });\n    });\n  });\n...\n```", "```js\n...\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'Movies',\n  data() {\n    return {\n      movies: [],\n    };\n  },\n  mounted() {\n    this.fetchMovies();\n  },\n  methods: {\n    async fetchMovies() {\n const token = window.localStorage.getItem('auth');\n return axios({\n method: 'get',\n url: 'http://localhost:8081/movies',\n headers: {\n Authorization: `JWT ${token}`,\n 'Content-Type': 'application/json',\n },\n })\n .then((response) => {\n this.movies = response.data.movies;\n this.current_user = response.data.current_user;\n })\n .catch(() => {\n });\n },\n  },\n};\n</script>\n```", "```js\n$ npm install serve-static --save \n```", "```js\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst morgan = require('morgan');\nconst fs = require('fs');\nconst session = require('express-session');\nconst config = require('./config/Config');\nconst passport = require('passport');\nconst app = express();\nconst router = express.Router();\nconst serveStatic = require('serve-static');\n\napp.use(morgan('combined'));\napp.use(bodyParser.json());\napp.use(cors());\n\n...\n\n// Include controllers\nfs.readdirSync(\"controllers\").forEach(function (file) {\n  if(file.substr(-3) == \".js\") {\n    const route = require(\"./controllers/\" + file)\n    route.controller(app)\n  }\n})\napp.use(serveStatic(__dirname + \"/dist\"));\n...\n```", "```js\n$ npm run build \n```", "```js\n$ npm run dev \n```", "```js\n$ nodemon server.js\n```", "```js\nvar Movie = require(\"../models/Movie\");\n\nmodule.exports.controller = (app) => {\n  // fetch all movies\n app.get(\"/movies\", function(req, res) {\n    Movie.find({}, 'name description release_year genre', function \n    (error, movies) {\n      if (error) { console.log(error); }\n       res.send({\n        movies: movies\n      })\n    })\n  })\n\n  // add a new movie\n app.post('/movies', (req, res) => {\n    const movie = new Movie({\n      name: req.body.name,\n      description: req.body.description,\n      release_year: req.body.release_year,\n      genre: req.body.genre\n    })\n\n    movie.save(function (error, movie) {\n      if (error) { console.log(error); }\n      res.send(movie)\n    })\n  })\n}\n```", "```js\nconst User = require(\"../models/User\");\nconst config = require('./../config/Config');\nconst passport = require('passport');\n\nmodule.exports.controller = (app) => {\n  // local strategy\n  const LocalStrategy = require('passport-local').Strategy;\n  passport.use(new LocalStrategy({\n      usernameField: 'email',\n      passwordField: 'password'\n    },\n    function(email, password, done) {\n      User.getUserByEmail(email, function(err, user){\n        if (err) { return done(err); }\n        if (!user) { return done(null, false); }\n        User.comparePassword(password, user.password, function(err, \n        isMatch){\n          if(isMatch) {\n            return done(null, user);\n          } else {\n            return done(null, false);\n          }\n        })\n      });\n    }\n  ));\n\n app.post('/users/login',\n    passport.authenticate('local', { failureRedirect: '/users/login' }),\n    function(req, res) {\n      res.redirect('/');\n    });\n\n  passport.serializeUser(function(user, done) {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(function(id, done) {\n    User.findById(id, function(err, user){\n      done(err, user)\n    })\n  });\n\n  // register a user\n app.post('/users/register', (req, res) => {\n    const email = req.body.email;\n    const fullname = req.body.fullname;\n    const password = req.body.password;\n    const role = req.body.role || 'user';\n    const newUser = new User({\n      email: email,\n      fullname: fullname,\n      role: role,\n      password: password\n    })\n    User.createUser(newUser, function(error, user) {\n      if (error) {\n        res.status(422).json({\n          message: \"Something went wrong. Please try again after some \n          time!\"\n        });\n      }\n      res.send({ user: user })\n    })\n  })\n}\n```", "```js\n<script>\nimport axios from 'axios';\n\nexport default {\n  data: () => ({\n    valid: true,\n    name: '',\n    description: '',\n    genre: '',\n    release_year: '',\n    nameRules: [\n      v => !!v || 'Movie name is required',\n    ],\n    genreRules: [\n      v => !!v || 'Movie genre year is required',\n      v => (v && v.length <= 80) || 'Genre must be less than equal to \n      80 characters.',\n    ],\n    releaseRules: [\n      v => !!v || 'Movie release year is required',\n    ],\n    select: null,\n    years: [\n      '2018',\n      '2017',\n      '2016',\n      '2015',\n    ],\n  }),\n  methods: {\n    submit() {\n      if (this.$refs.form.validate()) {\n        return axios({\n          method: 'post',\n          data: {\n            name: this.name,\n            description: this.description,\n            release_year: this.release_year,\n            genre: this.genre,\n          },\n url: '/movies',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        })\n          .then(() => {\n            this.$swal(\n              'Great!',\n              'Movie added successfully!',\n              'success',\n            );\n            this.$router.push({ name: 'Home' });\n            this.$refs.form.reset();\n          })\n          .catch(() => {\n            this.$swal(\n              'Oh oo!',\n              'Could not add the movie!',\n              'error',\n            );\n          });\n      }\n      return true;\n    },\n    clear() {\n      this.$refs.form.reset();\n    },\n  },\n};\n</script>\n```", "```js\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'Movies',\n  data() {\n    return {\n      movies: [],\n    };\n  },\n  mounted() {\n    this.fetchMovies();\n  },\n  methods: {\n    async fetchMovies() {\n      return axios({\n        method: 'get',\n url: '/movies',\n      })\n        .then((response) => {\n          this.movies = response.data.movies;\n        })\n        .catch(() => {\n        });\n    },\n  },\n};\n</script>\n```", "```js\n<script>\n  import axios from 'axios';\n  import bus from \"./../bus.js\";\n\n  export default {\n    data: () => ({\n      valid: true,\n      email: '',\n      password: '',\n      emailRules: [\n        (v) => !!v || 'E-mail is required',\n        (v) => /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(v) \n        || 'E-mail must be valid'\n      ],\n      passwordRules: [\n        (v) => !!v || 'Password is required',\n      ]\n    }),\n    methods: {\n      async submit () {\n        if (this.$refs.form.validate()) {\n          return axios({\n            method: 'post',\n            data: {\n              email: this.email,\n              password: this.password\n            },\n url: '/users/login',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          })\n          .then((response) => {\n            localStorage.setItem('jwtToken', response.data.token)\n            this.$swal(\"Good job!\", \"You are ready to start!\", \n            \"success\");\n            bus.$emit(\"refreshUser\");\n            this.$router.push({ name: 'Home' });\n          })\n          .catch((error) => {\n            const message = error.response.data.message;\n            this.$swal(\"Oh oo!\", `${message}`, \"error\")\n          });\n        }\n      },\n      clear () {\n        this.$refs.form.reset()\n      }\n    }\n  }\n</script>\n```", "```js\n<script>\n  import axios from 'axios';\n  export default {\n    data: () => ({\n      e1: false,\n      valid: true,\n      fullname: '',\n      email: '',\n      password: '',\n      confirm_password: '',\n      fullnameRules: [\n        (v) => !!v || 'Fullname is required'\n      ],\n      emailRules: [\n        (v) => !!v || 'E-mail is required',\n        (v) => /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(v) \n        || 'E-mail must be valid'\n      ],\n      passwordRules: [\n        (v) => !!v || 'Password is required'\n      ]\n    }),\n    methods: {\n      async submit () {\n        if (this.$refs.form.validate()) {\n          return axios({\n            method: 'post',\n            data: {\n              fullname: this.fullname,\n              email: this.email,\n              password: this.password\n            },\n url: '/users/register',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          })\n          .then((response) => {\n            this.$swal(\n              'Great!',\n              `You have been successfully registered!`,\n              'success'\n            )\n            this.$router.push({ name: 'Home' })\n          })\n          .catch((error) => {\n            const message = error.response.data.message;\n            this.$swal(\"Oh oo!\", `${message}`, \"error\")\n          });\n        }\n      },\n      clear () {\n        this.$refs.form.reset()\n      }\n    }\n  }\n</script>\n```", "```js\ndevServer: {\n    clientLogLevel: 'warning',\n    historyApiFallback: {\n      rewrites: [\n        { from: /.*/, to: path.posix.join(config.dev.assetsPublicPath, \n        'index.html') },\n      ],\n    },\n    hot: true,\n    contentBase: false, // since we use CopyWebpackPlugin.\n    compress: true,\n    host: HOST || config.dev.host,\n    port: PORT || config.dev.port,\n    open: config.dev.autoOpenBrowser,\n    overlay: config.dev.errorOverlay\n      ? { warnings: false, errors: true }\n      : false,\n    publicPath: config.dev.assetsPublicPath,\n    quiet: true, // necessary for FriendlyErrorsPlugin\n    watchOptions: {\n      poll: config.dev.poll,\n    }\n  },\n```", "```js\n$ npm run build\n```", "```js\n$ npm install connect-history-api-fallback --save\n```", "```js\n...\nconst passport = require('passport');\nconst serveStatic = require('serve-static');\nconst history = require('connect-history-api-fallback');\nconst app = express();\nconst router = express.Router();\n\n...\n\n// Include controllers\nfs.readdirSync(\"controllers\").forEach(function (file) {\n  if(file.substr(-3) == \".js\") {\n    const route = require(\"./controllers/\" + file)\n    route.controller(app)\n  }\n})\napp.use(history());\napp.use(serveStatic(__dirname + \"/dist\"));\n...\n```", "```js\n$ npm install passport-local --save\n```", "```js\n...\n\"node-sass\": \"^4.7.2\",\n\"nodemon\": \"^1.14.10\",\n\"passport\": \"^0.4.0\",\n\"passport-local\": \"^1.0.0\",\n...\n```", "```js\nconst User = require('../models/User.js');\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\nmodule.exports.controller = (app) => {\n// local strategy\n passport.use(new LocalStrategy({\n usernameField: 'email',\n passwordField: 'password',\n }, (email, password, done) => {\n User.getUserByEmail(email, (err, user) => {\n if (err) { return done(err); }\n if (!user) { return done(null, false); }\n User.comparePassword(password, user.password, (error, isMatch) => {\n if (isMatch) {\n return done(null, user);\n }\n return done(null, false);\n });\n return true;\n });\n }));\n\n// user login\n app.post('/users/login',\n passport.authenticate('local', { failureRedirect: '/users/login' }),\n (req, res) => {\n res.redirect('/');\n });\n\n passport.serializeUser((user, done) => {\n done(null, user.id);\n });\n\n passport.deserializeUser((id, done) => {\n User.findById(id, (err, user) => {\n done(err, user);\n });\n });\n\n  // register a user\n  app.post('/users/register', (req, res) => {\n    const name = req.body.name;\n    const email = req.body.email;\n    const password = req.body.password;\n    const newUser = new User({\n      name,\n      email,\n      password,\n    });\n    User.createUser(newUser, (error, user) => {\n      if (error) {\n        res.status(422).json({\n          message: 'Something went wrong. Please try again after some time!',\n        });\n      }\n      res.send({ user });\n    });\n  });\n};\n```", "```js\n$ npm install express-session --save\n```", "```js\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst morgan = require('morgan');\nconst fs = require('fs');\nconst session = require('express-session');\nconst config = require('./config/Config');\nconst passport = require('passport');\nconst serveStatic = require('serve-static');\nconst history = require('connect-history-api-fallback');\n\nconst app = express();\nconst router = express.Router();\napp.use(morgan('combined'));\napp.use(bodyParser.json());\napp.use(cors());\n\napp.use(session({\n secret: config.SECRET,\n resave: true,\n saveUninitialized: true,\n cookie: { httpOnly: false }\n}))\napp.use(passport.initialize());\napp.use(passport.session());\n\n//connect to mongodb\nmongoose.connect(config.DB, function() {\n  console.log('Connection has been made');\n})\n.catch(err => {\n  console.error('App starting error:', err.stack);\n  process.exit(1);\n});\n\n// Include controllers\nfs.readdirSync(\"controllers\").forEach(function (file) {\n  if(file.substr(-3) == '.js') {\n    const route = require('./controllers/' + file);\n    route.controller(app);\n  }\n})\napp.use(history());\napp.use(serveStatic(__dirname + \"/dist\"));\n\nrouter.get('/api/current_user', isLoggedIn, function(req, res) {\n if(req.user) {\n res.send({ current_user: req.user })\n } else {\n res.status(403).send({ success: false, msg: 'Unauthorized.' });\n }\n})\n\nfunction isLoggedIn(req, res, next) {\n if (req.isAuthenticated())\n return next();\n\n res.redirect('/');\n console.log('error! auth failed')\n}\n\nrouter.get('/api/logout', function(req, res){\n req.logout();\n res.send();\n});\n\nrouter.get('/', function(req, res) {\n  res.json({ message: 'API Initialized!'});\n});\n\nconst port = process.env.API_PORT || 8081;\napp.use('/', router);\nvar server = app.listen(port, function() {\n  console.log(`api running on port ${port}`);\n});\n\nmodule.exports = server\n```", "```js\napp.use(session({\n secret: config.SECRET,\n resave: true,\n saveUninitialized: true,\n cookie: { httpOnly: false }\n}))\napp.use(passport.initialize());\napp.use(passport.session());\n```", "```js\nmodule.exports = {\n DB: 'mongodb://localhost/movie_rating_app',\n SECRET: 'movieratingappsecretkey'\n}\n```", "```js\nimport Vue from 'vue';\n\nconst bus = new Vue();\n\nexport default bus;\n```", "```js\n...\n<script>\nimport axios from 'axios';\nimport bus from './../bus';\n\nexport default {\n  data: () => ({\n    valid: true,\n    email: '',\n    password: '',\n    emailRules: [\n      v => !!v || 'E-mail is required',\n      v => /\\S+@\\S+\\.\\S+/.test(v) || 'E-mail must be valid',\n    ],\n  }),\n  methods: {\n    async submit() {\n      return axios({\n        method: 'post',\n        data: {\n          email: this.email,\n          password: this.password,\n        },\n        url: 'http://localhost:8081/users/login',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(() => {\n          this.$swal('Great!', 'You are ready to start!', 'success');\n          bus.$emit('refreshUser');\n          this.$router.push({ name: 'Home' });\n        })\n        .catch((error) => {\n          const message = error.response.data.message;\n          this.$swal('Oh oo!', `${message}`, 'error');\n          this.$router.push({ name: 'Login' });\n        });\n    },\n    clear() {\n      this.$refs.form.reset();\n    },\n  },\n};\n</script>\n```", "```js\n<template>\n  <v-app id=\"inspire\">\n    <v-navigation-drawer\n      fixed\n      v-model=\"drawer\"\n      app\n    >\n      <v-list dense>\n        <router-link v-bind:to=\"{ name: 'Home' }\" class=\"side_bar_link\">\n          <v-list-tile>\n            <v-list-tile-action>\n              <v-icon>home</v-icon>\n            </v-list-tile-action>\n            <v-list-tile-content>Home</v-list-tile-content>\n          </v-list-tile>\n        </router-link>\n        <router-link v-bind:to=\"{ name: 'Contact' }\" class=\"side_bar_link\">\n          <v-list-tile>\n            <v-list-tile-action>\n              <v-icon>contact_mail</v-icon>\n            </v-list-tile-action>\n            <v-list-tile-content>Contact</v-list-tile-content>\n          </v-list-tile>\n        </router-link>\n      </v-list>\n    </v-navigation-drawer>\n    <v-toolbar color=\"indigo\" dark fixed app>\n      <v-toolbar-side-icon @click.stop=\"drawer = !drawer\"></v-toolbar-side-icon>\n      <v-toolbar-title>Home</v-toolbar-title>\n      <v-spacer></v-spacer>\n      <v-toolbar-items class=\"hidden-sm-and-down\">\n <v-btn id=\"add_movie_link\" flat v-bind:to=\"{ name: 'AddMovie' }\"\n v-if=\"current_user\">\n Add Movie\n </v-btn>\n <v-btn id=\"user_email\" flat v-if=\"current_user\">{{ current_user.email }}</v-btn>\n <v-btn flat v-bind:to=\"{ name: 'Register' }\" v-if=\"!current_user\" id=\"register_btn\">\n Register\n </v-btn>\n <v-btn flat v-bind:to=\"{ name: 'Login' }\" v-if=\"!current_user\" id=\"login_btn\">Login</v-btn>\n <v-btn id=\"logout_btn\" flat v-if=\"current_user\" @click=\"logout\">Logout</v-btn>\n </v-toolbar-items>\n    </v-toolbar>\n    <v-content>\n      <v-container fluid>\n        <div id=\"app\">\n          <router-view/>\n        </div>\n      </v-container>\n    </v-content>\n    <v-footer color=\"indigo\" app>\n      <span class=\"white--text\">&copy; 2018</span>\n    </v-footer>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios';\n\nimport './assets/stylesheets/main.css';\nimport bus from './bus';\n\nexport default {\n  data: () => ({\n    drawer: null,\n    current_user: null,\n  }),\n  props: {\n    source: String,\n  },\n  mounted() {\n this.fetchUser();\n this.listenToEvents();\n },\n  methods: {\n    listenToEvents() {\n bus.$on('refreshUser', () => {\n this.fetchUser();\n });\n },\n async fetchUser() {\n return axios({\n method: 'get',\n url: '/api/current_user',\n })\n .then((response) => {\n this.current_user = response.data.current_user;\n })\n .catch(() => {\n });\n },\n    logout() {\n return axios({\n method: 'get',\n url: '/api/logout',\n })\n .then(() => {\n bus.$emit('refreshUser');\n this.$router.push({ name: 'Home' });\n })\n .catch(() => {\n });\n },\n  },\n};\n</script>\n```", "```js\nconst MovieSchema = require('../models/Movie.js');\nconst Rating = require('../models/Rating.js');\n\nmodule.exports.controller = (app) => {\n  // fetch all movies\n  app.get('/movies', (req, res) => {\n    MovieSchema.find({}, 'name description release_year genre', (error, movies) => {\n      if (error) { console.log(error); }\n      res.send({\n        movies,\n      });\n    });\n  });\n\n  // fetch a single movie\n  app.get('/api/movies/:id', (req, res) => {\n    MovieSchema.findById(req.params.id, 'name description release_year genre', (error, movie) => {\n      if (error) { console.error(error); }\n      res.send(movie);\n    });\n  });\n\n  // rate a movie\n  app.post('/movies/rate/:id', (req, res) => {\n    const newRating = new Rating({\n      movie_id: req.params.id,\n      user_id: req.body.user_id,\n      rate: req.body.rate,\n    });\n\n    newRating.save((error, rating) => {\n      if (error) { console.log(error); }\n      res.send({\n        movie_id: rating.movie_id,\n        user_id: rating.user_id,\n        rate: rating.rate,\n      });\n    });\n  });\n\n  // add a new movie\n  app.post('/movies', (req, res) => {\n    const newMovie = new MovieSchema({\n      name: req.body.name,\n      description: req.body.description,\n      release_year: req.body.release_year,\n      genre: req.body.genre,\n    });\n\n    newMovie.save((error, movie) => {\n      if (error) { console.log(error); }\n      res.send(movie);\n    });\n  });\n};\n```"]