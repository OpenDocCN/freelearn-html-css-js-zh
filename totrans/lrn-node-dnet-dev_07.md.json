["```js\nlanguage: node_js\nnode_js:\n - 6\n - 4\n```", "```js\n> npm install -g gulp-cli\n> npm install gulp@~3.x --save-dev\n> npm install gulp-mocha --save-dev\n> npm install gulp-env --save-dev\n\n```", "```js\n'use strict';\n\nconst gulp = require('gulp');\nconst mocha = require('gulp-mocha');\nconst env = require('gulp-env');\n\ngulp.task('test', function() {\n  env({ vars: { NODE_ENV: 'test' } });\n  return gulp.src('test/**/*.js')\n    .pipe(mocha());\n});\n\ngulp.task('default', ['test']);\n```", "```js\nlanguage: node_js\nbefore_script:\n - npm install -g gulp\nscript: gulp\nnode_js:\n - 6\n - 4 \n```", "```js\n> npm install -g eslint\n\n```", "```js\n{\n    \"extends\": \"eslint:recommended\",\n    \"env\": {\n        \"node\": true,\n        \"es6\": true,\n        \"mocha\": true,\n        \"browser\": true,\n        \"jquery\": true\n\t},\n    \"rules\": {\n        \"semi\": [2, \"always\"],\n        \"quotes\": [2, \"single\"]\n    }\n}\n```", "```js\n> eslint **/*.js\n\n```", "```js\n    \"rules\": {\n        \"semi\": [2, \"always\"],\n        \"quotes\": [2, \"single\"],\n \"no-unused-vars\": [2, {\"argsIgnorePattern\": \"next\"}]\n    }\n```", "```js\n/*eslint-env phantomjs */\n/*eslint-disable no-console */\n```", "```js\n> eslint **/*.js --fix\n\n```", "```js\n> npm install gulp-eslint --save-dev\n\n```", "```js\n{\n    \"extends\": \"eslint:recommended\",\n    \"rules\": {\n        \"no-unused-vars\": [2, { \"args\": \"after-used\" }],\n        \"quotes\": [2, \"single\"],\n        \"semi\": [2, \"always\"]\n    }\n}\n```", "```js\nconst eslint = require('gulp-eslint');\n\ngulp.task('lint-server', function() {\n    return gulp.src(['src/**/*.js', '!src/public/**/*.js'])\n        .pipe(eslint({\n            envs: [ 'es6', 'node' ],\n            rules: {\n                'no-unused-vars': [2, {'argsIgnorePattern': 'next'}]\n            }\n        }))\n        .pipe(eslint.format())\n        .pipe(eslint.failAfterError());\n});\n\ngulp.task('lint-client', function() {\n    return gulp.src('src/public/**/*.js')\n        .pipe(eslint({ envs: [ 'browser', 'jquery' ] }))\n        .pipe(eslint.format())\n        .pipe(eslint.failAfterError());\n});\n\ngulp.task('lint-test', function() {\n    return gulp.src('test/**/*.js')\n        .pipe(eslint({ envs: [ 'es6', 'node', 'mocha' ] }))\n        .pipe(eslint.format())\n        .pipe(eslint.failAfterError());\n});\n\ngulp.task('lint-integration-test', function() {\n    return gulp.src('integration-test/**/*.js')\n        .pipe(eslint({\n            envs: [ 'browser', 'phantomjs', 'jquery' ],\n            rules: { 'no-console': 0 }\n        }))\n        .pipe(eslint.format())\n        .pipe(eslint.failAfterError());\n});\n```", "```js\ngulp.task('test', ['lint-test'], function() {\n  env({ vars: { NODE_ENV: 'test' } });\n  return gulp.src('test/**/*.js')\n    .pipe(mocha());\n});\n\ngulp.task('lint', [\n 'lint-server', 'lint-client', 'lint-test', 'lint-integration-test'\n]);\ngulp.task('default', ['lint', 'test']);\n```", "```js\n{\n    \"extends\": \"eslint:recommended\",\n    \"rules\": {\n        \"no-unused-vars\": [2, { \"args\": \"after-used\" }],\n        \"quotes\": [2, \"single\"],\n        \"semi\": [2, \"always\"],\n \"strict\": [2, \"safe\"]\n    }\n}\n```", "```js\n> npm install gulp-istanbul --save-dev\n\n```", "```js\nconst istanbul = require('gulp-istanbul');\n\n...\n\ngulp.task('instrument', function() {\n    return gulp.src('src/**/*.js')\n        .pipe(istanbul())\n        .pipe(istanbul.hookRequire())\n});\n```", "```js\ngulp.task('test', ['lint-test', 'instrument'], function() {\n    gulp.src('test/**/*.js')\n        .pipe(mocha())\n .pipe(istanbul.writeReports())\n .pipe(istanbul.enforceThresholds({\n thresholds: { global:90 }\n }));\n});\n```", "```js\ngulp.task('test', ['lint-test', 'instrument'], function() {\n    return gulp.src('test/**/*.js')\n        .pipe(mocha())\n        .pipe(istanbul.writeReports())\n        .pipe(istanbul.enforceThresholds({\n thresholds: {\n global: {\n statements: 70,\n branches: 50\n }\n }\n        }));\n});\n```", "```js\n> npm install gulp-shell --save-dev\n\n```", "```js\nvar rootUrl = 'http://localhost:' +\n                  require('system').env.TEST_PORT || 3000;\n```", "```js\nconst shell = require('gulp-shell');\n\n...\n\ngulp.task('integration-test',\n          ['lint-integration-test', 'test'], (done) => {\n  const TEST_PORT = 5000;\n  let server = require('http')\n    .createServer(require('./src/app.js'))\n    .listen(TEST_PORT, function() {\n      gulp.src('integration-test/**/*.js')\n        .pipe(shell('node node_modules/phantomjs-prebuilt/bin/phantomjs <%=file.path%>', {\n            env: { 'TEST_PORT': TEST_PORT }\n        }))\n        .on('error', () => server.close(done))\n        .on('end', () => server.close(done))\n    });\n});\n```", "```js\nlanguage: node_js\nbefore_script:\n  - npm install -g gulp\nscript: gulp default integration-test\nnode_js:\n - 5\n - 4\n```"]