["```js\nrequire(path)\n```", "```js\nvar http = require('http'); //loads a core module\n```", "```js\nvar data = require('./data'); //loads a directory\n```", "```js\nvar dataModels = require('./data/models'); //loads the file models.js\n```", "```js\nvar redis = require('redis'); //loads a module\n```", "```js\nmodule.exports = 'This value is from requireTest';\n```", "```js\nvar requireTest = require('./requireTest');\nconsole.log(requireTest);\n```", "```js\n    module.exports = function Foo(bar) {do something with bar};\n    ```", "```js\n    module.exports = function FooConstructor() {};\n    ```", "```js\n    module.exports = {foo: foo()};\n    module.exports.foo = foo();\n    ```", "```js\n.hostname()\n```", "```js\nos.hostname();\n```", "```js\n.cpus()\n```", "```js\nvar cpus = os.cpus().length;\n```", "```js\n.networkInterfaces()\n```", "```js\nvar network = os.networkInterfaces();\n```", "```js\nstdout\n```", "```js\nstderr\n```", "```js\nprocess.stderr.write(\"Something seems to have gone wrong.\");\n```", "```js\nstdin\n```", "```js\nprocess.stdin.on('readable', function() {\n  var data = process.stdin.read();\n  if(data !== null) process.stdout.write(data);\n});\n```", "```js\nargv\n\n```", "```js\nprocess.argv.forEach(function(val){ if(val === 'debug'){ debug(); } });\n```", "```js\nprocess.on({signal, callback});\n```", "```js\nprocess.on('SIGINT', function(){\n  //ctrl+c was pressed\n});\n```", "```js\nprocess.env\n```", "```js\nif(process.env.NODE_ENV !== 'production')\n  //do test stuff\nvar redisHost = process.env.REDIS_HOST;\n```", "```js\nprocess.kill(pid, [signal])\n```", "```js\nprocess.kill(4634, 'SIGTERM');\n```", "```js\nprocess.pid\n```", "```js\nprocess.kill(process.pid, 'SIGTERM');\n```", "```js\nprocess.cwd()\n```", "```js\nvar cwd = process.cwd();\n```", "```js\n__filename\n\n```", "```js\nconsole.log(__filename);\n\n```", "```js\n__dirname\n\n```", "```js\n//express is loaded\napp.use(express.static(__dirname + '/static'));\n```", "```js\nvar fs = require('fs');\n```", "```js\nfs.statstat(path, callback)\nfs.statSync(path)\n```", "```js\nfs.stat(__dirname + '\\test.txt', function(err, stats){\n  console.log(stats);\n});\n```", "```js\nfs.open(path, flags, [mode], callback)\nfs.openSync(path, flags, [mode])\n```", "```js\nfs.open(__dirname + '\\file.txt', 'r', function(err, fd){\n  //fd is available to be read from\n});\n```", "```js\nfs.read(fd, buffer, offset, length, position, callback) \nfs.readSync(fd, buffer, offset, length, position)\n```", "```js\nfs.stat(__dirname + '/test.txt', function(error, stats) {\n  fs.open(__dirname + '/test.txt', 'r', function(err, fd){\n    var buffer = new Buffer(stats.size);\n    fs.read(fd, buffer, 0, stats.size, null, function(err, bytesRead, buffer){\n      console.log(buffer.toString('utf8'));\n    });\n  });\n});\n```", "```js\nfs.readFile(filename, [options], callback)\nfs.readFileSync(filename, [options])\n```", "```js\nvar filename = __dirname + '/test.txt';\n\nfs.readFile(filename, {flag: 'r', encoding: 'utf8'}, function(err, data){\n  console.log(data.toString('utf8'));\n});\n```", "```js\nfs.close(fd, callback)\nfs.closeSync(fd)\n```", "```js\nfs.close(fd, function(err){\n  //handle err here\n});\n```", "```js\nfs.write(fd, buffer, offset, length, position, callback)\nfs.writeSync(fd, buffer, offset, length, position)\n```", "```js\nvar fs = require('fs');\nvar filename = __dirname + '/test.txt';\nvar writeFile = __dirname + '/test2.txt';\n\nfs.stat(filename, function(error, stats) {\n  fs.open(filename, 'r', function(err, fd) {\n    var buffer = new Buffer(stats.size);\n    fs.read(fd, buffer, 0, stats.size, null, function(err, bytesRead, buffer) {\n      fs.open(writeFile, 'w', function(err, writeFD) {\n        //will create a file named test2.txt with the contents from test.txt\n        fs.write(writeFD, buffer, 0, buffer.length, null, function(err, bytesWritten, writeBuffer) {\n          console.log(writeBuffer.toString('utf8'));\n        });\n      });\n    });\n  });\n});\n```", "```js\nfs.writeFile(filename, data, [options], callback)\nfs.writeFileSync(filename, data, [options])\n```", "```js\nvar filename = __dirname + '/write.txt';\nvar buffer = new Buffer('Write this to a file.', 'utf8');\nfs.writeFile(filename, buffer, {encoding: 'utf8', flag: 'w'}, function(err){\n  if(null !== null){\n    //do something\n  }\n});\n```", "```js\nfs.appendFile(filename, data, [options], callback) \nfs.appendFileSync(filename, data, [options])\n```", "```js\nvar filename = __dirname + '/write.txt';\nvar buffer = new Buffer('Append this to a file.', 'utf8');\nfs.appendFile(filename, buffer, {encoding: 'utf8', flag: 'w'}, function(err){\n  if(null !== null){\n    //do something\n  }\n});\n```", "```js\nvar path = require('path');\n```", "```js\npath.normalize(pathString)\n```", "```js\nvar pathString = \"/unix/style/path/separators\";\nconsole.log(path.normalize(pathString));\n```", "```js\npath.join([pathString1],[…])\n```", "```js\nconsole.log(path.join('path', 'separators', 'added'));\n```", "```js\npath.resolve([pathString], […])\n```", "```js\n    console.log(path.resolve('/home/josh/node', '..', 'test'));\n    ```", "```js\n    console.log(path.resolve('/home/josh/node', '/home/brian/node'));\n    ```", "```js\npath.relative(from, to)\n```", "```js\nvar from = '/home/josh/node';\nvar to = '/home/brian/node';\nconsole.log(path.relative(from, to));\n```", "```js\npath.dirname(pathString)\n```", "```js\nconsole.log(path.dirname(__filename));\n```", "```js\npath.basename(pathString, [ext])\n```", "```js\n    console.log(path.basename('/home/josh/test.js', '.js'));\n    ```", "```js\n    console.log(path.basename('/home/josh'));\n    ```", "```js\npath.extname(pathString)\n```", "```js\n    console.log(path.extname('/home/josh/test.js'));\n    ```", "```js\n    console.log(path.extname('/home/josh'));\n    ```", "```js\nnode\n```", "```js\nnode\n//wait for >\nconsole.log('hey this REPL!');\n```", "```js\n    try{\n        JSON.parse(jsonObject);\n    } catch (ex) {\n        //do something with this error\n    }\n    ```", "```js\nfs.read(path, function (err, data) {\n    if(err !== null)\n        //handle error\n})\n```", "```js\nsocket.on('error', function(error){\n   //handle error here\n})\n```", "```js\nvar events = require('events');\n```", "```js\nevents.EventEmitter\n```", "```js\nvar util = require('util');\nvar events = require('events');\n\nfunction MyEventEmitter(){\n    events.EventEmitter.call(this);\n    this.test = function (emitThis) {\n        this.emit('testEvent', emitThis);\n    }\n}\n\nutil.inherits(MyEventEmitter, events.EventEmitter);\n\nvar myEE = new MyEventEmitter();\n\nmyEE.on('testEvent', function (data) { console.log(data) });\n\nmyEE.test('test');\n```", "```js\nemitter.on(event, listenerFunction)\nemitter.addListener(event, listenerFunction)\n```", "```js\nvar quickLog = function (data) {\n    console.log('quickLog: ' + data);\n}\nmyEE.on('testEvent', quickLog);\n```", "```js\nemitter.once(event, listenerFunction)\n```", "```js\nemitter.removeListener(event, function)\n```", "```js\nmyEE.removeListener('testEvent', quickLog);\n```", "```js\nemitter.removeAllListeners([event])\n```", "```js\nmyEE.removeAllListeners('testEvent');\n```", "```js\nemitter.setMaxListeners(numberOfListeners)\n```", "```js\n(node) warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.\n```", "```js\nmyEE.setMaxListeners(50);\n```", "```js\nemitter.emit(eventName, [argument], […])\n```", "```js\nmyEE.on('testEvent', function (data) { console.log(data) });\nmyEE.emit('testEvent', 'Emit This!', 'Another Argument!');\n```", "```js\nvar crypto = require('crypto');\n```", "```js\ncrypto.createHash(algorithm)\n```", "```js\nvar md5 = crypto.createHash('md5');\n```", "```js\nhash.update(data, [encoding])\nhash.digest([encoding])\n```", "```js\nvar f = file.readFileSync(__dirname + '/test.txt');\n\nvar md5 = crypto.createHash('md5');\nmd5.update(f);\nconsole.log(md5.digest('base64'));\n```", "```js\ncrypto.pbkdf2(password, salt, iterations, keyLength, callback)\ncrypto.pbkdf2Sync(password, salt, iterations, keyLength)\n```", "```js\ncrypto.pbkdf2('password', 'salt', 10000, 32, function (err, key) {\n    console.log(key.toString('base64'));\n});\n```", "```js\ncrypto.randomBytes(length, [callback])\n```", "```js\nvar random = crypto.randomBytes(256);\n\ncrypto.pbkdf2('password', random.toString('base64'), 10000, 32, function (err, key) {\n    console.log(key.toString('base64'));\n});\n```", "```js\ncrypto.pseudoRandomBytes(length, [calback])\ncrypto.pseudoRandomBytes(length)\n```", "```js\ncrypto.pseudoRandomBytes(256, function (err, randomData) {\n    console.log(randomData.toString('base64'));\n});\n```", "```js\nnew Buffer(size)\nnew Buffer(array)\nnew Buffer(str, [encoding])\n```", "```js\nvar hello = [72, 101, 108, 108, 111];\nvar buffer = new Buffer(hello);\nconsole.log(buffer.toString('ascii'));\n```", "```js\nbuffer[index]\n```", "```js\nvar buffer = new Buffer('Hello!');\nconsole.log(buffer[0]);\n```", "```js\nbuffer.toString([encoding], [start], [end])\n```", "```js\nvar buffer = new Buffer('Hello this is a buffer');\nconsole.log(buffer.toString('utf8', 0, buffer.length));\n```", "```js\nbuffer.toJSON()\n```", "```js\nvar buffer = new Buffer('Hello this is a buffer');\nconsole.log(buffer.toJSON());\n```", "```js\nBuffer.isBuffer(objectToTest)\n```", "```js\nvar buffer = new Buffer('Hello this is a buffer');\nconsole.log(Buffer.isBuffer(buffer));\n```", "```js\nbuffer.write(stringToWrite, [offset], [length], [encoding])\n```", "```js\nvar buffer = new Buffer(12);\nvar written = buffer.write('Buffer ', 0, 7, 'utf8');\nconsole.log(written);\nbuffer.write('time.', written);\nconsole.log(buffer.toString());\n```", "```js\nbuffer.byteLength(string, [encoding])\n```", "```js\nvar byteLength = Buffer.byteLength('Buffer time.', 'utf8');\nvar buffer = new Buffer(byteLength);\nvar written = buffer.write('Buffer time.', 0, buffer.length, 'utf8');\nconsole.log(buffer.toString());\n```", "```js\nbuffer.readUInt8(offset, [noAssert])\nbuffer.readUInt16LE(offset, [noAssert])\nbuffer.readUInt16BE(offset, [noAssert])\nbuffer.readUInt32LE(offset, [noAssert])\nbuffer.readUInt32BE(offset, [noAssert])\n```", "```js\nvar buffer = new Buffer(2);\nbuffer[0] = 0x1;\nbuffer[1] = 0x2;\nconsole.log(buffer.readUInt16LE(0));\nconsole.log(buffer.readUInt16BE(0));\n```", "```js\nbuffer.writeUInt8(value, offset, [noAssert])\nbuffer.writeUInt16LE(value, offset, [noAssert])\nbuffer.writeUInt16BE(value, offset, [noAssert])\nbuffer.writeUInt32LE(value, offset, [noAssert])\nbuffer.writeUInt32BE(value, offset, [noAssert])\n```", "```js\nvar buffer = new Buffer(4);\nbuffer.writeUInt16LE(0x0001, 0);\nbuffer.writeUInt16LE(0x0002, 2);\nconsole.log(buffer);\n```", "```js\nconsole.log(message, […])\n```", "```js\nconsole.log('Multiple parameters in %s', 'console.log');\n```", "```js\nconsole.dir(object)\n```", "```js\nconsole.time(label)\nconsole.timeEnd(label)\n```", "```js\nconsole.time('simple-timer');\nsetTimeout(function () {\n    console.timeEnd('simple-timer');\n}, 500);\n```", "```js\nconsole.trace(message, […])\n```", "```js\nconsole.trace('This should be the first line.');\n```", "```js\nnpm init\n```", "```js\nnpm install \nnpm install [package] [@version] [--save | --save-dev]\n\n```", "```js\nnpm update [package]\n```", "```js\nnpm shrinkwrap\n```", "```js\nnpm run [script]\n\n```", "```js\npackage.json:\n \"scripts\": {\n \"hey\":  \"echo hey\"\n}\nnpm run hey\n\n```", "```js\nvar fs = require('fs');\nvar readable = fs.createReadStream('test.txt');\n\nreadable.on('data', function (chunk) {\n    console.log(chunk.toString());\n});\nvar fs = require('fs');\nreadable.on('readable', function () {\n    var chunk;\n   while (chunk = readable.read()) {\n        console.log(chunk.toString());\n    }\n});\n```", "```js\nreadable.read([size])\n```", "```js\nreadable.on('readable', function () {\n    var chunk;\n   while (chunk = readable.read()) {\n        console.log(chunk.toString());\n    }\n});\n```", "```js\nstream.setEncoding(encoding)\n```", "```js\nreadable.setEncoding('utf8');\nreadable.on('readable', function () {\n    var chunk;\n   while (chunk = readable.read()) {\n        console.log(chunk);\n    }\n});\n```", "```js\nstream.pause()\nstream.resume()\n```", "```js\nreadable.pause();\nreadable.on('data', function (chunk) {\n    console.log(chunk.toString());\n});\nsetTimeout(function () { readable.resume();}, 3000);\n```", "```js\nreadable.pipe(writable, [options])\n```", "```js\nvar readable = fs.createReadStream('test.txt');\nreadable.pipe(process.stdout);\n```", "```js\nwritable.write(chunk, [encoding], [callback])\n```", "```js\nvar fs = require('fs');\nvar writable = fs.createWriteStream('WriteStream.txt');\n\nvar hasWritten = writable.write('Write this!', 'utf8', function () {\n    console.log('The buffer has written');\n});\nend\n```", "```js\nwritable.end([chunk], [encoding], [callback])\n```", "```js\nvar fs = require('fs');\nvar writable = fs.createWriteStream('WriteStream.txt');\n\nwritable.end('Last data written.', 'utf8', function () {\n    //this runs when everything has been written.\n});\n```", "```js\nvar net = require('net');\n```", "```js\nnet.createServer([options], [listener]) \n```", "```js\nvar net = require('net');\nvar server = net.createServer(function (connection) {\n    connection.write('You connected!');\n});\nserver.listen(5000, function () { \n    console.log('Listening on port 5000');\n});\n```", "```js\nvar net = require('net');\nvar server = net.createServer();\nserver.on('listening', function () {\n    console.log('I am listening');\n});\nserver.on('connection', function (socket) {\n    console.log(socket);\n    socket.end();\n    server.close();\n});\nserver.on('error', function (err) {\n    console.log(err);\n});\nserver.on('close', function () {\n    console.log('The server has stopped listening');\n});\nserver.listen(5000);\n```", "```js\nserver.listen(port, [host], [backlog], [callback])\n```", "```js\nserver.listen(5000, '127.0.0.1', 500, function () { \n    console.log('Listening on port 5000');\n});\n```", "```js\nserver.close([callback])\n```", "```js\nserver.address()\n```", "```js\nserver.getConnections(callback)\n```", "```js\nnet.connect(port, [host], [connectListener])\nnet.createConnection(port, [host], [connectListener])\n```", "```js\nvar net = require('net');\nvar server = net.createServer();\nserver.on('listening', function () {\n    console.log('I am listening');\n});\nserver.on('connection', function (socket) {\n    socket.on('data', function (d) {\n        console.log('from client: ' + d);\n    });\n});\n\nserver.listen(5000);\n\nvar client = net.connect({ port: 5000, host: 'localhost' }, function () {\n    setInterval(function () {\n        client.write('hey!');\n    }, 1000);\n});\n```", "```js\nvar server = net.createServer();\nserver.on('listening', function () {\n    console.log('I am listening');\n});\nserver.on('connection', function (socket) {\n    socket.on('data', function (d) {\n        console.log('from client: ' + d);\n    });\n});\n\nserver.listen(5000);\n\nvar client = new net.Socket();\nclient.on('connect', function () {\n    setInterval(function () {\n        client.write('Hey!');\n    }, 1000);\n});\n\nclient.connect(5000, 'localhost');\n```", "```js\nsocket.connect(port, [host], [listener])\n```", "```js\nvar client = new net.Socket();\nclient.on('connect', function () {\n    setInterval(function () {\n        client.write('Hey!');\n    }, 1000);\n});\n\nclient.connect(5000, 'localhost');\n```", "```js\nsocket.write(data, [encoding], [callback])\n```", "```js\nvar client = new net.Socket();\nclient.on('connect', function () {\n    client.write('This is the data', 'utf8', function(){\n        console.log('Data has been sent');\n    });\n});\n\nclient.connect(5000, 'localhost');\n```", "```js\nsocket.end([data], [encoding])\n```", "```js\nHere is an example that closes a socket.\nvar client = new net.Socket();\nclient.on('connect', function () {\n    client.end('I am closing', 'utf8');\n});\n\nclient.connect(5000, 'localhost');\n```", "```js\nvar http = require('http');\n```", "```js\nhttp.createServer([requestListener])\n```", "```js\nvar server = http.createServer(function (req, res) {\n    console.log('Someone made a request!');\n    res.end();\n});\nserver.listen(8080);\n```", "```js\nserver.listen(port, [host], [callback])\nserver.listen(path, [callback])\nserver.listen(fd, [callback])\n```", "```js\nvar server = http.createServer();\nserver.listen(8080, 'localhost', function(){\n    console.log('The server is listening');\n});\n```", "```js\nserver.close([callback])\n```", "```js\nvar server = http.createServer();\nserver.listen(8080, 'localhost', function () {\n    server.close(function () {\n        console.log('Server has closed');\n    });\n});\n```", "```js\nserver.on('request', function (req, res) { });\n```", "```js\nserver.on('request', function (req, res) {\n    res.end();\n    console.log('A request was received');\n});\n```", "```js\nserver.on('close', function () { });\n```", "```js\nserver.on('upgrade', function (req, socket, buffer) { });\n```", "```js\nmessage.headers\n```", "```js\nserver.on('request', function (req, res) {\n    if (req.headers.authorization !== undefined)\n        //do a check here\n    res.end();\n});\n```", "```js\nmessage.method\n```", "```js\nserver.on('request', function (req, res) {\n    if (req.method === 'GET')\n        res.write(req.method);\n    res.end();\n});\n```", "```js\nmessage.url\n```", "```js\nserver.on('request', function (req, res) {\n        var file = fs.createReadStream('.' + req.url);\n        file.pipe(res);\n});\n```", "```js\nvar data = '';\nresponse.on('data', function (chunk) {\n    console.log(chunk);\n    data += chunk;\n});\n\nresponse.on('end', function () {\n    console.log(data);\n});\n```", "```js\nresponse.WriteHead(statusCode, [headers])\n```", "```js\nserver.on('request', function (req, res) {\n    res.writeHead(200, { 'Content-Type': 'text/html' });\n    res.end();\n});\n```", "```js\nresponse.statusCode\n```", "```js\nserver.on('request', function (req, res) {\n    res.statusCode = 404;\n    res.end();\n});\n```", "```js\nresponse.setHeader(name, value)\n```", "```js\nserver.on('request', function (req, res) {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/html');\n    res.setHeader('Custom-Header', 'Custom-Value');\n    res.end();\n});\n```", "```js\nresponse.write(chunk, [encoding])\n```", "```js\nserver.on('request', function (req, res) {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/html');\n    res.write('<html><body><h1>Hello!</h1></body></html>');\n    res.end();\n});\n```", "```js\nresponse.end([data], [encoding])\n```", "```js\nhttp.request(options, [callback])\n```", "```js\nvar request = http.request({\n    host: 'www.packtpub.com',\n    port: 80,\n    path: '/',\n    method: 'GET'\n}, function (res) {\n    console.log(res);\n});\n\nrequest.end();\n```", "```js\nhttp.get(options, [callback])\n```", "```js\nhttp.get('http://www.packtpub.com', function (res) {\n    console.log(res);\n});\n```", "```js\nrequest.write(data, [encoding])\n```", "```js\nrequest.end([data], [encoding])\n```", "```js\nrequest.on('response', function(response){})\n```", "```js\nvar request = http.request({host: 'www.google.com', path: '/', port: 80, method: 'GET'});\n\nrequest.on('response', function (response) {\n    var data = '';\n    response.on('data', function (chunk) {\n        console.log(chunk);\n        data += chunk;\n    });\n\n    response.on('end', function () {\n        console.log(data);\n    });\n});\n```"]