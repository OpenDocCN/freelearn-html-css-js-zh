["```js\n// maxStrings.ts\nconst maxStrings = (a: string[]) => a.sort().pop();\nconst countries = [\n  \"Argentina\",\n  \"Uruguay\",\n  \"Brasil\",\n  \"Paraguay\",\n];\nconsole.log(maxStrings(countries)); // \"Uruguay\"\n```", "```js\nconst maxStrings2 = (a: string[]): string =>\n  [...a].sort().pop() as string;\nconst maxStrings3 = (a: string[]): string =>\n  a.slice().sort().pop() as string;\nconsole.log(maxStrings2(countries)); // \"Uruguay\"\nconsole.log(maxStrings3(countries)); // \"Uruguay\"\nconsole.log(countries);\n// [\"Argentina\", \"Uruguay\", \"Brasil\", \"Paraguay\"]\n// unchanged\n```", "```js\nconst myObj = { d: 22, m: 9 };\nconsole.log(myObj);\n// {d: 22, m: 9}\nmyObj = { d: 12, m: 4 };\n// Uncaught TypeError: Assignment to constant variable.\nmyObj.d = 12; // but this is fine!\nmyObj.m = 4;\nconsole.log(myObj);\n// {d: 12, m: 4}\n```", "```js\nconst myObj2 = { d: 22, m: 9 };\nconsole.log(myObj2);\n// {d: 22, m: 9}\nObject.freeze(myObj2);\nmyObj2.d = 12; // won't have effect...\nmyObj2.m = 4;\nconsole.log(myObj2);\n// Object {d: 22, m: 9}\n```", "```js\nconst myObj3 = {\n  d: 22,\n  m: 9,\n  o: { c: \"MVD\", i: \"UY\", f: { a: 56 } },\n};\nObject.freeze(myObj3);\nconsole.log(myObj3);\n// {d:22, m:9, o:{c:\"MVD\", i:\"UY\", f:{ a:56}}}\n```", "```js\nmyObj3.d = 8888;     // won't work, as earlier\nmyObj3.o.f.a = 9999; // oops, does work!!\nconsole.log(myObj3);\n// {d:22, m:9, o:{c:\"MVD\", i:\"UY\", f:{ a:9999 }}}\n```", "```js\n// deepFreeze.ts\nconst deepFreeze = <O extends OBJ>(obj: O): O => {\n  if (\n    obj &&\n    typeof obj === \"object\" &&\n    !Object.isFrozen(obj)\n  ) {\n    Object.freeze(obj);\n    Object.getOwnPropertyNames(obj).forEach((prop) =>\n      deepFreeze(obj[prop])\n    );\n  }\n  return obj;\n};\n```", "```js\nconst oldObject = {\n  d: 22,\n  m: 9,\n  o: { c: \"MVD\", i: \"UY\", f: { a: 56 } },\n};\nconst newObject = {\n  d: oldObject.d,\n  m: oldObject.m,\n  o: {\n    c: oldObject.o.c,\n    i: oldObject.o.i,\n    f: { a: oldObject.o.f.a },\n  },\n};\n```", "```js\nconst myObj = { d: 22, m: 9 };\nconst newObj1 = Object.assign({}, myObj);\nconst newObj2 = { ...myObj };\n```", "```js\nconst myArray = [1, 2, 3, 4];\nconst newArray1 = myArray.slice();\nconst newArray2 = [...myArray];\n```", "```js\nconst oldObject = {\n  d: 22,\n  m: 9,\n  o: { c: \"MVD\", i: \"UY\", f: { a: 56 } },\n};\nconst newObject2 = Object.assign({}, oldObject);\nnewObject2.d = 8888;\nnewObject2.o.f.a = 9999;\nconsole.log(newObject2);\n// {d:8888, m:9, o: {c:\"MVD\", i:\"UY\", f: {a:9999}}} -- ok\nconsole.log(oldObject);\n// {d:22, m:9, o: {c:\"MVD\", i:\"UY\", f: {a:9999}}} -- oops!!\n```", "```js\n// deepCopy.ts\nconst jsonCopy = <O extends OBJ>(obj: O): O =>\n  JSON.parse(JSON.stringify(obj));\n```", "```js\nconst myDate = new Date();\nconst newDate = jsonCopy(myDate);\nconsole.log(typeof myDate, typeof newDate);\n// object string\n```", "```js\n// continued...\nconst deepCopy = <O extends OBJ>(obj: O): O => {\n  let aux: O = obj;\n  if (obj && typeof obj === \"object\") {\n    aux = new (obj as any).constructor(); // TS hack!\n    Object.getOwnPropertyNames(obj).forEach((prop) => {\n      aux[prop as keyof O] = deepCopy(obj[prop]);\n    });\n  }\n  return aux;\n};\n```", "```js\nlet oldObject = {\n  d: 22,\n  m: 9,\n  o: { c: \"MVD\", i: \"UY\", f: { a: 56 } },\n};\nlet newObject = deepCopy(oldObject);\nnewObject.d = 8888;\nnewObject.o.f.a = 9999;\nconsole.log(newObject);\n// {d:8888, m:9, o:{c:\"MVD\", i:\"UY\", f:{a:9999}}}\nconsole.log(oldObject);\n// {d:22, m:9, o:{c:\"MVD\", i:\"UY\", f:{a:56}}} -- unchanged!\n```", "```js\n// getByPath.ts\nconst getField =\n  <O extends OBJ>(f: keyof O) =>\n  (obj: O) =>\n    obj[f];\n```", "```js\n// continued...\nconst getField2 = curry(getField);\n```", "```js\n// continued...\nconst getByPath = <O extends OBJ>(\n  arr: string[],\n  obj: O\n): any => {\n  if (arr[0] in obj) {\n    return arr.length > 1\n      ? getByPath(arr.slice(1), obj[arr[0]])\n      : deepCopy(obj[arr[0]]);\n  } else {\n    return undefined;\n  }\n};\n```", "```js\nconst myObj4 = deepFreeze({\n  d: 22,\n  m: 9,\n  o: { c: \"MVD\", i: \"UY\", f: { a: 56 } },\n});\nconsole.log(getByPath([\"d\"], myObj4));\n// 22\nconsole.log(getByPath([\"o\"], myObj4));\n// {c: \"MVD\", i: \"UY\", f: {a: 56}}\nconsole.log(getByPath([\"o\", \"c\"], myObj4));\n// \"MVD\"\nconsole.log(getByPath([\"o\", \"f\", \"a\"], myObj4));\n// 56\n```", "```js\nconst fObj = getByPath([\"o\", \"f\"], myObj4);\nconsole.log(fObj);\n// {a: 56}\nfObj.a = 9999;\nconsole.log(fObj);\n// {a: 9999} -- it's not frozen\n```", "```js\n// setByPath.ts\nconst setByPath = <O extends OBJ>(\n  arr: string[],\n  value: any,\n  obj: O\n): O => {\n  if (!(arr[0] in obj)) {\n    (obj as any)[arr[0]] =\n      arr.length === 1\n        ? null\n        : Number.isInteger(arr[1])\n        ? []\n        : {};\n  }\n  if (arr.length > 1) {\n    return setByPath(arr.slice(1), value, obj[arr[0]]);\n  } else {\n    obj[arr[0] as keyof O] = value;\n    return obj;\n  }\n};\n```", "```js\n// continued...\nconst updateObject = <O extends OBJ>(\n  arr: string[],\n  obj: O,\n  value: any\n) => {\n  const newObj = deepCopy(obj);\n  setByPath(arr, value, newObj);\n  return deepFreeze(newObj);\n};\n```", "```js\nconst myObj3 = {\n  d: 22,\n  m: 9,\n  o: { c: \"MVD\", i: \"UY\", f: { a: 56 } },\n};\nconst new1 = updateObject([\"m\"], myObj3, \"sep\");\nconsole.log(new1);\n// {d: 22, m: \"sep\", o: {c: \"MVD\", i: \"UY\", f: {a: 56}}};\nconst new2 = updateObject([\"b\"], myObj3, 220960);\nconsole.log(new2);\n// {d: 22, m: 9, o: {c: \"MVD\", i: \"UY\", f: {a: 56}}, b:\n  220960};\nconst new3 = updateObject([\"o\", \"f\", \"a\"], myObj3, 9999);\nconsole.log(new3);\n// {d: 22, m: 9, o: {c: \"MVD\", i: \"UY\", f: {a: 9999}}};\nconst new4 = updateObject(\n  [\"o\", \"f\", \"j\", \"k\", \"l\"],\n  myObj3,\n  \"deep\"\n);\nconsole.log(new4);\n// {d: 22, m: 9, o: {c: \"MVD\", i: \"UY\", f: {a: 56, j: {k:\n  \"deep\"}}}};\n```", "```js\nconst author = {\n  user: \"fkereki\",\n  name: {\n    first: \"Federico\",\n    middle: \"\",\n    last: \"Kereki\",\n  },\n  books: [\n    { name: \"Google Web Toolkit\", year: 2010 },\n    { name: \"Functional Programming\", year: 2017 },\n    { name: \"Javascript Cookbook\", year: 2018 },\n  ],\n};\n```", "```js\nconst lens1 = lens(getField(\"user\"), setField(\"user\"));\n```", "```js\nconst lens1 = lensProp(\"user\");\n```", "```js\nconsole.log(view(lens1)(author));\n// fkereki\n```", "```js\nconsole.log(\n  view(lensProp(\"last\"))(view(lensProp(\"name\"))(author))\n);\n// Kereki\n```", "```js\nconst lensBooks = lensProp(\"books\");\nconsole.log(\n  \"The author wrote \" +\n    view(lensBooks)(author).length +\n    \" book(s)\"\n);\n// The author wrote 3 book(s)\n```", "```js\nconsole.log(set(lens1)(\"FEFK\")(author));\n/*\n{\n  user: 'FEFK',\n  name: { first: 'Federico', middle: '', last: 'Kereki' },\n  books: [\n    { name: 'Google Web Toolkit', year: 2010 },\n    { name: 'Functional Programming', year: 2017 },\n    { name: 'Javascript Cookbook', year: 2018 }\n  ]\n}\n*/\n```", "```js\nconst triple = (x: string): string => x + x + x;\nconst newAuthor = over(lens1)(triple)(author);\nconsole.log(newAuthor);\n/*\n{\n  user: 'fkerekifkerekifkereki',\n  name: { first: 'Federico', middle: '', last: 'Kereki' },\n  books: [\n    { name: 'Google Web Toolkit', year: 2010 },\n    { name: 'Functional Programming', year: 2017 },\n    { name: 'Javascript Cookbook', year: 2018 }\n  ]\n}\n*/\n```", "```js\n// lensesWithObjects.ts\nconst getField =\n  <O extends OBJ>(attr: string) =>\n  (obj: O) =>\n    obj[attr];\nconst setField =\n  <O extends OBJ>(attr: string) =>\n  (value: any) =>\n  (obj: O): O => ({ ...obj, [attr]: value });\n```", "```js\n// continued...\ntype GET<O extends OBJ> = ReturnType<typeof getField<O>>;\ntype SET<O extends OBJ> = ReturnType<typeof setField<O>>;\nconst lens = <O extends OBJ>(\n  getter: GET<O>,\n  setter: SET<O>\n) => ({\n  getter,\n  setter,\n});\nconst lens = (getter: GET, setter: SET): LENS => ({\n  getter,\n  setter,\n});\nconst lensProp = (attr: string) =>\n  lens((getField as any)(attr), setField(attr));\n```", "```js\n// continued...\ntype LENS<O extends OBJ> = ReturnType<typeof lens<O>>;\nconst view =\n  <O extends OBJ>(someLens: LENS<O>) =>\n  (someObj: O) =>\n    someLens.getter(someObj);\n```", "```js\n// continued...\nconst set =\n  <O extends OBJ>(someLens: LENS<O>) =>\n  (newVal: any) =>\n  (someObj: O) =>\n    someLens.setter(newVal)(someObj);\n```", "```js\n// continued...\nconst over =\n  <O extends OBJ>(someLens: LENS<O>) =>\n  (mapFn: (arg: any) => any) =>\n  (someObj: O) =>\n    someLens.setter(mapFn(someLens.getter(someObj)))(\n      someObj\n    );\n```", "```js\n// continued...\nconst composeTwoLenses = <O extends OBJ>(\n  lens1: LENS<O>,\n  lens2: LENS<O>\n) => ({\n  getter: (obj: O) => lens2.getter(lens1.getter(obj)),\n  setter: (newVal: any) => (obj: O) =>\n    lens1.setter(lens2.setter(newVal)(lens1.getter(obj)))(\n      obj\n    ),\n});\n```", "```js\nconst deepObject = {\n  a: 1,\n  b: 2,\n  c: {\n    d: 3,\n    e: {\n      f: 6,\n      g: { i: 9, j: { k: 11 } },\n      h: 8,\n    },\n  },\n};\n```", "```js\nconst lC = lensProp(\"c\");\nconst lE = lensProp(\"e\");\nconst lG = lensProp(\"g\");\nconst lJ = lensProp(\"j\");\nconst lK = lensProp(\"k\");\n```", "```js\nconst lJK = composeTwoLenses(lJ, lK);\nconst lGJK = composeTwoLenses(lG, lJK);\nconst lEGJK = composeTwoLenses(lE, lGJK);\nconst lCEGJK1 = composeTwoLenses(lC, lEGJK);\nconsole.log(view(lCEGJK1)(deepObject));\nconst lCE = composeTwoLenses(lC, lE);\nconst lCEG = composeTwoLenses(lCE, lG);\nconst lCEGJ = composeTwoLenses(lCEG, lJ);\nconst lCEGJK2 = composeTwoLenses(lCEGJ, lK);\nconsole.log(view(lCEGJK2)(deepObject));\n/*\n11 both times\n*/\n```", "```js\nconst setTo60 = set(lCEGJK1)(60)(deepObject);\n/*\n{\n  a: 1,\n  b: 2,\n  c: {\n    d: 3,\n    e: {\n      f: 6,\n      g: { i: 9, j: { k: 60 } },\n      h: 8,\n    },\n  },\n};\n*/\n```", "```js\nconst setToDouble = over(lCEGJK2)((x) => x * 2)(deepObject);\n/*\n{\n  a: 1,\n  b: 2,\n  c: {\n    d: 3,\n    e: {\n      f: 6,\n      g: { i: 9, j: { k: 22 } },\n      h: 8,\n    },\n  },\n};\n*/\n```", "```js\n// lensesWithFunctions.ts\nconst lens =\n  <O extends OBJ>(getter: GET<O>, setter: SET<O>) =>\n  (fn: FN) =>\n  (obj: O) =>\n    fn(getter(obj)).map((value: any) =>\n      setter(value)(obj));\n```", "```js\n// continued...\nclass Constant<V> {\n  private value: V;\n  map: FN;\n  constructor(v: V) {\n    this.value = v;\n    this.map = () => this;\n  }\n}\n```", "```js\n// continued...\nconst view =\n  <O extends OBJ, V>(someLens: LENS<O>) =>\n  (obj: O) =>\n    someLens((x: V) => new Constant(x))(obj).value;\nconst user = view(lensProp(\"user\"), author);\n/*\nfkereki\n*/\n```", "```js\n// continued...\nclass Variable<V> {\n  private value: V;\n  map: FN;\n  constructor(v: V) {\n    this.value = v;\n    this.map = (fn) => new Variable(fn(v));\n  }\n}\n```", "```js\n// continued...\nconst set =\n  <O extends OBJ, V>(someLens: LENS<O>) =>\n  (newVal: V) =>\n  (obj: O) =>\n    someLens(() => new Variable(newVal))(obj).value;\nconst changedUser = set(lensProp(\"user\"))(\"FEFK\")(author);\n/*\n{\n  user: 'FEFK',\n  name: { first: 'Federico', middle: '', last: 'Kereki' },\n  books: [\n    { name: 'Google Web Toolkit', year: 2010 },\n    { name: 'Functional Programming', year: 2017 },\n    { name: 'Javascript Cookbook', year: 2018 }\n  ]\n}\n*/\n```", "```js\n// continued...\nconst over =\n  <O extends OBJ, V>(someLens: LENS<O>) =>\n  (mapfn: FN) =>\n  (obj: O) =>\n    someLens((x: V) => new Variable(mapfn(x)))(obj).value;\nconst newAuthor = over(lensProp(\"user\"))(triple)(author);\n/*\n{\n  user: 'fkerekifkerekifkereki',\n  name: { first: 'Federico', middle: '', last: 'Kereki' },\n  books: [\n    { name: 'Google Web Toolkit', year: 2010 },\n    { name: 'Functional Programming', year: 2017 },\n    { name: 'Javascript Cookbook', year: 2018 }\n  ]\n}\n*/\n```", "```js\n// continued...\nconst lastName = view(\n  compose(lensProp(\"name\"), lensProp(\"last\"))\n)(author);\n/*\nKereki\n*/\n```", "```js\nconst author = {\n  user: \"fkereki\",\n  name: {\n    first: \"Federico\",\n    middle: \"\",\n    last: \"Kereki\",\n  },\n  books: [\n    { name: \"Google Web Toolkit\", year: 2010 },\n    { name: \"Functional Programming\", year: 2017 },\n    { name: \"Javascript Cookbook\", year: 2018 },\n  ],\n};\n```", "```js\nconst pUser = prismProp(\"user\");\nconsole.log(preview(pUser, author).toString());\n/*\nfkereki\n*/\n```", "```js\nconst pPseudonym = prismProp(\"pseudonym\");\nconsole.log(preview(pPseudonym, author).toString());\n/*\nundefined\n*/\n```", "```js\nconst lPseudonym = lensProp(\"pseudonym\");\nconst lUsedSince = lensProp(\"usedSince\");\nconsole.log(\n  \"PSEUDONYM, USED SINCE\",\n  view(compose(lPseudonym, lUsedSince))(author)\n);\n/*\nTypeError: Cannot read property 'usedSince' of undefined\n.\n. many more error lines, snipped out\n.\n*/\n```", "```js\nconst pUsedSince = prismProp(\"usedSince\");\nconsole.log(\n  preview(compose(pPseudonym, pUsedSince))(\n    author\n  ).toString()\n);\n/*\nundefined\n*/\n```", "```js\nconst fullAuthor2 = review(\n  compose(prismProp(\"name\"), prismProp(\"first\")),\n  \"FREDERICK\",\n  author\n);\n```", "```js\nconst fullAuthor3 = review(pPseudonym, \"NEW ALIAS\", author);\n// returns author, unchanged\n```", "```js\n// prisms.ts\nconst getFieldP =\n  <O extends OBJ>(attr: string) =>\n  (obj: O) =>\n    obj && attr in obj ? obj[attr] : undefined;\n```", "```js\n// continued...\nconst setFieldP =\n  <O extends OBJ>(attr: string) =>\n  (value: any) =>\n  (obj: O): O =>\n    obj && attr in obj\n      ? { ...obj, [attr]: value }\n      : { ...obj };\n```", "```js\n// lists.ts\nclass ListNode<T> {\n  value: T;\n  next: ListNode<T> | null;\n  constructor(value: any, next = null) {\n    this.value = value;\n    this.next = next;\n  }\n}\n```", "```js\nmyObj = {\n    a: ...,\n    b: ...,\n    c: ...,\n    d: {\n        e: ...,\n        f: ...,\n        g: {\n            h: ...,\n            i: ...\n        }\n    }\n};\n```", "```js\nnewObj = {\n  a: myObj.a,\n  b: myObj.b,\n  c: myObj.c,\n  d: {\n    e: myObj.d.e,\n    f: the new value,\n    g: myObj.d.g,\n  },\n};\n```", "```js\n// objects.ts\nconst setIn = <O extends OBJ>(\n  arr: (string | number)[],\n  value: any,\n  obj: O\n): O => {\n  const newObj = Number.isInteger(arr[0]) ? [] : {};\n  Object.keys(obj).forEach((k) => {\n    (newObj as any)[k] = k !== arr[0] ? obj[k] : null;\n  });\n  (newObj as any)[arr[0]] =\n    arr.length > 1\n      ? setIn(arr.slice(1), value, obj[arr[0]])\n      : value;\n  return newObj as O;\n};\n```", "```js\nconst myObj1 = {\n  a: 111,\n  b: 222,\n  c: 333,\n  d: {\n    e: 444,\n    f: 555,\n    g: {\n      h: 666,\n      i: 777,\n    },\n    j: [{ k: 100 }, { k: 200 }, { k: 300 }],\n  },\n};\n```", "```js\nlet myObj2 = setIn([\"d\", \"f\"], 88888, myObj1);\n/*\n{\n  a: 111,\n  b: 222,\n  c: 333,\n  d: {\n    e: 444,\n    f: 88888,\n    g: { h: 666, i: 777 },\n    j: [{ k: 100 }, { k: 200 }, { k: 300 }],\n  }\n}\n*/\nconsole.log(myObj1.d === myObj2.d);     // false\nconsole.log(myObj1.d.f === myObj2.d.f); // false\nconsole.log(myObj1.d.g === myObj2.d.g); // true\n```", "```js\nconst myObj3 = setIn([\"d\", \"j\", 1, \"k\"], 99999, myObj2);\n/*\n{\n  a: 111,\n  b: 222,\n  c: 333,\n  d: {\n    e: 444,\n    f: 88888,\n    g: { h: 666, i: 777 },\n    j: [{ k: 100 }, { k: 99999 }, { k: 300 }],\n  }\n}\n*/\nconsole.log(myObj1.d.j === myObj3.d.j);       // false\nconsole.log(myObj1.d.j[0] === myObj3.d.j[0]); // true\nconsole.log(myObj1.d.j[1] === myObj3.d.j[1]); // false\nconsole.log(myObj1.d.j[2] === myObj3.d.j[2]); // true\n```", "```js\n// continued...\nconst deleteIn = <O extends OBJ>(\n  arr: (string | number)[],\n  obj: O\n): O => {\n  const newObj = Number.isInteger(arr[0]) ? [] : {};\n  Object.keys(obj).forEach((k) => {\n    if (k !== arr[0]) {\n      (newObj as any)[k] = obj[k];\n    }\n  });\n  if (arr.length > 1) {\n    (newObj as any)[arr[0]] = deleteIn(\n      arr.slice(1),\n      obj[arr[0]]\n    );\n  }\n  return newObj as O;\n};\n```", "```js\nconst myObj4 = deleteIn([\"d\", \"g\"], myObj3);\nconst myObj5 = deleteIn([\"d\", \"j\"], myObj4);\nconsole.log(myObj5);\n// { a: 111, b: 222, c: 333, d: { e: 444, f: 88888 } }\n```", "```js\ntype MUSICAL_KEY = string;\nclass Node {\n  key: MUSICAL_KEY;\n  next: Node | null;\n  constructor(key: MUSICAL_KEY, next: Node | null) {\n    this.key = key;\n    this.next = next;\n  }\n}\nconst c3 =\n  new Node(\"G\",\n    new Node(\"B\",\n      new Node(\"F\",\n        new Node(\"A\",\n          new Node(\"C\",\n            new Node(\"E\", null)\n          )\n        )\n      )\n    )\n  );\n```", "```js\nconst fullNameLens = lens(\n...your getter...,\n...your setter...\n);\nconsole.log(view(fullNameLens, author));\n/*\nKereki, Federico\n*/\nconsole.log(set(fullNameLens, \"Doe, John\", author));\n/*\n{\n  user: 'fkereki',\n  name: { first: ' John', middle: '', last: 'Doe' },\n…\n}\n*/\n```", "```js\nconst getArray = curry((ind, arr) => arr[ind]);\nconst setArray = curry((ind, value, arr) => {\n  arr[ind] = value;\n  return arr;\n});\nconst lensArray = (ind) =>\n  lens(getArray(ind), setArray(ind));\n```", "```js\nconst lensMap = key => lens(getMap(key), setMap(key));\n```"]