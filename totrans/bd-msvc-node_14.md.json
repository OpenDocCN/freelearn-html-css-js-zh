["```js\nnpm install winston\n```", "```js\nconst winston = require('winston');\n// Define log levels\nconst logLevels = {\n  error: 0,\n  warn: 1,\n  info: 2,\n  debug: 3,\n};\n// Define log level colors (optional)\nconst logColors = {\n  error: 'red',\n  warn: 'yellow',\n  info: 'green',\n  debug: 'blue',\n};\n// Configure Winston logger\nconst logger = winston.createLogger({\n  levels: logLevels,\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.printf(({ level, message, timestamp }) => {\n      return `${timestamp} [${level.toUpperCase()}]: ${message}`;\n    })\n  ),\n  transports: [\n    new winston.transports.Console({\n      level: 'debug', // Log level for the console transport\n      format: winston.format.combine(\n        winston.format.colorize({ all: true }),\n        winston.format.simple()\n      ),\n    }),\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' }),\n  ],\n});\n// Apply colors to log levels (optional)\nwinston.addColors(logColors);\nmodule.exports = logger;\n```", "```js\nconst logger = require('./logger');\nlogger.error('This is an error message');\nlogger.warn('This is a warning message');\nlogger.info('This is an info message');\nlogger.debug('This is a debug message');\n```", "```js\nconst winston = require('winston');\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.simple(),\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n  ],\n});\nlogger.info('This is an info message');\nlogger.error('This is an error message');\n```", "```js\n    new winston.transports.Console()\n    ```", "```js\n    new winston.transports.File({ filename: 'error.log', level: 'error' })\n    ```", "```js\n    const { CloudWatchLogTransport } = require('winston-aws-cloudwatch');\n    ```", "```js\n    new CloudWatchLogTransport({\n    ```", "```js\n      logGroupName: 'your-log-group-name',\n    ```", "```js\n      logStreamName: 'your-log-stream-name',\n    ```", "```js\n      level: 'info',\n    ```", "```js\n      formatLog: (info) => `${info.timestamp} ${info.message}`,\n    ```", "```js\n    })\n    ```", "```js\n    const winston = require('winston');\n    ```", "```js\n    const logger = winston.createLogger({\n    ```", "```js\n      format: winston.format.simple(),\n    ```", "```js\n      transports: [\n    ```", "```js\n        new winston.transports.Console(),\n    ```", "```js\n        new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    ```", "```js\n        new winston.transports.File({ filename: 'combined.log' }),\n    ```", "```js\n      ],\n    ```", "```js\n      // Filtering to include only error logs in a specific file\n    ```", "```js\n      exceptionHandlers: [\n    ```", "```js\n        new winston.transports.File({ filename: 'exceptions.log' }),\n    ```", "```js\n      ],\n    ```", "```js\n    });\n    ```", "```js\n    logger.info('This will be logged');\n    ```", "```js\n    logger.error('This will be logged as an error');\n    ```", "```js\n    // Manually throw an exception to trigger the exception handler\n    ```", "```js\n    try {\n    ```", "```js\n      throw new Error('This is a manually triggered exception');\n    ```", "```js\n    } catch (error) {\n    ```", "```js\n      logger.error('Caught an exception:', error);\n    ```", "```js\n    }\n    ```", "```js\n    const winston = require('winston');\n    ```", "```js\n    const logger = winston.createLogger({\n    ```", "```js\n      format: winston.format.simple(),\n    ```", "```js\n      transports: [\n    ```", "```js\n        new winston.transports.Console(),\n    ```", "```js\n        new winston.transports.File({ filename: 'sampled.log' }),\n    ```", "```js\n      ],\n    ```", "```js\n    });\n    ```", "```js\n    // Custom sampling function to log only 10% of the messages\n    ```", "```js\n    const samplingFunction = (info) => Math.random() < 0.1 ? info : false;\n    ```", "```js\n    logger.add(\n    ```", "```js\n      new winston.transports.File({\n    ```", "```js\n        filename: 'sampled.log',\n    ```", "```js\n        format: winston.format.combine(\n    ```", "```js\n          winston.format(info => samplingFunction(info))(),\n    ```", "```js\n          winston.format.simple()\n    ```", "```js\n        ),\n    ```", "```js\n      })\n    ```", "```js\n    );\n    ```", "```js\n    for (let i = 0; i < 100; i++) {\n    ```", "```js\n      logger.info(`Log message ${i}`);\n    ```", "```js\n    }\n    ```", "```js\n    const winston = require('winston');\n    ```", "```js\n    const logger = winston.createLogger({\n    ```", "```js\n      format: winston.format.simple(),\n    ```", "```js\n      transports: [\n    ```", "```js\n        new winston.transports.Console(),\n    ```", "```js\n        new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    ```", "```js\n      ],\n    ```", "```js\n      exceptionHandlers: [\n    ```", "```js\n        new winston.transports.File({ filename: 'exceptions.log' }),\n    ```", "```js\n      ],\n    ```", "```js\n    });\n    ```", "```js\n    // Example of logging an exception\n    ```", "```js\n    try {\n    ```", "```js\n      // Some code that might throw an exception\n    ```", "```js\n      throw new Error('This is an exception');\n    ```", "```js\n    } catch (error) {\n    ```", "```js\n      logger.error('Caught an exception:', error);\n    ```", "```js\n    }\n    ```", "```js\n// Middleware to add context to requests\napp.use((req, res, next) => {\n  // Add a unique request ID to the request\n  req.requestId = generateRequestId();\n  // Log the start of the request\n  logger.info(`[${new Date()}] Start processing request ${req.requestId}`);\n  next();\n});\n// Middleware for logging requests\napp.use((req, res, next) => {\n  // Log relevant information with the request context\n  logger.info(`[${new Date()}] ${req.method} ${req.url} - Request ID: ${req.requestId}`);\n  next();\n});\n// Other middleware and routes\n// Error handling middleware\napp.use((err, req, res, next) => {\n  // Log errors with the request context\n  logger.error(`[${new Date()}] Error processing request ${req.requestId}: ${err.message}`, err);\n  res.status(500).send('Something went wrong!');\n});\n```"]