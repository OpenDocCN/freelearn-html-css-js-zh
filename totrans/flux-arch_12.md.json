["```js\nimport alt from '../alt';\nimport actions from '../actions';\n\nclass Todo {\n  constructor() {\n\n    // This is the state of the input element\n    // used to create a new Todo item.\n    this.inputValue = '';\n\n    // The initial list of todo items...\n    this.todos = [\n      { title: 'Build this thing' },\n      { title: 'Build that thing' },\n      { title: 'Build all the things' }\n    ];\n\n    // Sets up the handler methods to be called\n    // when the corresponding action is dispatched.\n    this.bindListeners({\n      createTodo: actions.CREATE_TODO,\n      removeTodo: actions.REMOVE_TODO,\n      updateInputValue: actions.UPDATE_INPUT_VALUE\n    });\n  }\n\n  // Creates a new Todo using the action \"payload\"\n  // as the title.\n  createTodo(payload) {\n    this.todos.push({ title: payload });\n  }\n\n  // Removes the Todo based on the index, which is\n  // passed in as the action payload.\n  removeTodo(payload) {\n    this.todos.splice(payload, 1);\n  }\n\n  // Updates the Todo value that the user is currently\n  // entering in the Todo input box.\n  updateInputValue(payload) {\n    this.inputValue = payload;\n  }\n}\n\n// The \"createStore()\" function hooks our store class\n// up with all the relevant action dispatching machinery,\n// returning an instance of the store.\nexport default alt.createStore(Todo, 'Todo');\n```", "```js\nimport alt from '../alt';\nimport actions from '../actions';\nimport todo from './todo';\n\nclass Done {\n  constructor() {\n\n    // The \"done\" state holds an array of\n    // completed items.\n    this.done = [];\n\n    // Binds the only listener of this store.\n    this.bindListeners({\n      createDone: actions.CREATE_DONE\n    });\n  }\n\n  // This action payload is the index of an item\n  // from the \"todo\" store. This is called when\n  // the item is clicked, and the item is added\n  // to the \"done\" array.\n  //\n  // Note that this action handler does not mutate\n  // the \"todo\" state as that is not allowed.\n  createDone(payload) {\n    const { todos } = todo.getState();\n    this.done.splice(0, 0, todos[payload]);\n  }\n}\n\n// Creates the store instance, and hooks it\n// up with the Alt dispatching machinery.\nexport default alt.createStore(Done, 'Done');\n```", "```js\nimport alt from './alt';\n\n// Exports an object with functions that accept\n// a payload argument. These are the action\n// creators. Also creates action constants\n// based on the names passed to \"generateActions()\"\nexport default alt.generateActions(\n  'createTodo',\n  'createDone',\n  'removeTodo',\n  'updateInputValue'\n);\n```", "```js\n// The React and Alt components we need...\nimport React from 'react';\nimport { render } from 'react-dom';\nimport AltContainer from 'alt-container';\n\n// The stores and React components from\n// this application...\nimport todo from './stores/todo';\nimport done from './stores/done';\nimport TodoList from './views/todo-list';\nimport DoneList from './views/done-list';\n\n// Renders the \"AltContainer\" component. This\n// is where the stores are tied to the views.\n// The \"TodoList\" and \"DoneList\" components\n// are children of the \"AltContainer\", so\n// they get the \"todo\" and the \"done\" stores\n// as props.\nrender(\n  <AltContainer stores={{ todo, done }}>\n    <TodoList/>\n    <DoneList/>\n  </AltContainer>,\n  document.getElementById('app')\n);\n```", "```js\nimport React from 'react';\nimport { Component } from 'react';\n\nimport actions from '../actions';\n\nexport default class TodoList extends Component {\n    render() {\n\n      // The relevant state from the \"todo\" store\n      // that we're rendering here.\n      const { todos, inputValue } = this.props.todo;\n\n      // Renders an input for new todos, and the list\n      // of current todos. When the user types\n      // and then hits enter, the new todo is created.\n      // When the user clicks a todo, it's moved to the\n      // \"done\" store.\n      return (\n        <div>\n          <h3>TODO</h3>\n          <div>\n            <input\n              value={inputValue}\n              placeholder=\"TODO...\"\n              onKeyUp={this.onKeyUp}\n              onChange={this.onChange}\n              autoFocus\n            />\n          </div>\n          <ul>\n            {todos.map(({ title }, i) =>\n              <li key={i}>\n                <a\n                  href=\"#\"\n                  onClick={this.onClick.bind(null, i)}\n                >{title}</a>\n              </li>\n            )}\n          </ul>\n        </div>\n      );\n    }\n\n    // An active Todo was clicked. The \"key\" is the\n    // index of the Todo within the store. This is\n    // passed as the payload to the \"createDone()\"\n    // action, and next to the \"removeTodo()\" action.\n    onClick(key) {\n      actions.createDone(key);\n      actions.removeTodo(key);\n    }\n\n    // If the user has entered some text and the\n    // \"enter\" key is pressed, we use the\n    // \"createTodo()\" action to create a new\n    // item using the entered text. Then we clear\n    // the input using the \"updateInputValue()\"\n    // action, passing it an empty string.\n    onKeyUp(e) {\n      const { value } = e.target;\n\n      if (e.which === 13 && value) {\n        actions.createTodo(value);\n        actions.updateInputValue('');\n      }\n    }\n\n    // The text input value changed - update the store.\n    onChange(e) {\n      actions.updateInputValue(e.target.value);\n    }\n}\n```", "```js\nimport React from 'react';\nimport { Component } from 'react';\n\nexport default class DoneList extends Component {\n  render() {\n\n    // The \"done\" array is the only state we need\n    // from the \"done\" store.\n    const { done } = this.props.done;\n\n    // We want to display these items\n    // as strikethrough text.\n    const itemStyle = {\n      textDecoration: 'line-through'\n    }\n\n    // Renders the list of done items, with\n    // the \"itemStyle\" applied to each item.\n    return (\n      <div>\n        <h3>DONE</h3>\n        <ul>\n          {done.map(({ title }) =>\n            <li style={itemStyle}>{title}</li>\n          )}\n        </ul>\n      </div>\n    );\n  }\n}\n```", "```js\nimport Immutable from 'immutable';\n\n// The initial state of the Redux store. The\n// \"shape\" of the application state includes\n// two domains - \"Todo\" and \"Done\". Each domain\n// is an Immutable.js structure.\nconst initialState = {\n  Todo: Immutable.fromJS({\n    inputValue: '',\n    todos: [\n      { title: 'Build this thing' },\n      { title: 'Build that thing' },\n      { title: 'Build all the things' }\n    ]\n  }),\n  Done: Immutable.fromJS({\n    done: []\n  })\n};\n\nexport default initialState;\n```", "```js\nimport Immutable from 'immutable';\n\nimport initialState from '../initial-state';\nimport {\n  UPDATE_INPUT_VALUE,\n  CREATE_TODO,\n  REMOVE_TODO\n} from '../constants';\n\nexport default function Todo(state = initialState, action) {\n  switch (action.type) {\n\n    // When the \"UPDATE_INPUT_VALUE\" action is dispatched,\n    // we set the \"inputValue\" key of the Immutable.Map.\n    case UPDATE_INPUT_VALUE:\n      return state.set('inputValue', action.payload);\n\n    // When the \"CREATE_TODO\" action is dispatched,\n    // we push the new item to the end of the\n    // Immutable.List\n    case CREATE_TODO:\n      return state.set('todos',\n        state.get('todos').push(Immutable.Map({\n          title: action.payload\n        }))\n      );\n\n    // When the \"REMOVE_TODO\" action is dispatched,\n    // we delete the item at the given index from\n    // the Immutable.List.\n    case REMOVE_TODO:\n      return state.set('todos',\n        state.get('todos').delete(action.payload));\n    default:\n      return state;\n  }\n}\n```", "```js\nimport Immutable from 'immutable';\n\nimport initialState from '../initial-state';\nimport { CREATE_DONE } from '../constants';\n\nexport default function Done(state = initialState, action) {\n  switch (action.type) {\n\n    // When the \"CREATE_DONE\" action is dispatched,\n    // we insert the new item into the beginning\n    // of the Immutable.List.\n    case CREATE_DONE:\n      return state.set('done',\n        state.get('done')\n          .insert(0, Immutable.Map(action.payload))\n      );\n\n    // Nothing to do, return the state \"as-is\".\n    default:\n      return state;\n  }\n}\n```", "```js\nimport { combineReducers, createStore } from 'redux';\n\nimport initialState from './initial-state';\nimport Todo from './reducers/todo.js';\nimport Done from './reducers/done.js';\n\nexport default createStore(combineReducers({\n  Todo,\n  Done\n}), initialState);\n```", "```js\nimport {\n  CREATE_TODO,\n  CREATE_DONE,\n  REMOVE_TODO,\n  UPDATE_INPUT_VALUE\n} from './constants';\n\n// Creates a new Todo item. The \"payload\" should\n// be an object with a \"title\" property.\nexport function createTodo(payload) {\n  return {\n    type: CREATE_TODO,\n    payload\n  };\n}\n\n// Creates a new Done item. The \"payload\" should\n// be an object with a \"title\" property.\nexport function createDone(payload) {\n  return {\n    type: CREATE_DONE,\n    payload\n  };\n}\n\n// Removes the todo and the given \"payload\" index.\nexport function removeTodo(payload) {\n  return {\n    type: REMOVE_TODO,\n    payload\n  };\n}\n\n// Updates the \"inputValue\" state with the given\n// \"payload\" string value.\nexport function updateInputValue(payload) {\n  return {\n    type: UPDATE_INPUT_VALUE,\n    payload\n  };\n}\n```", "```js\nimport React from 'react';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  updateInputValue,\n  createTodo,\n  createDone,\n  removeTodo\n} from '../actions';\n\nclass TodoList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.onClick = this.onClick.bind(this);\n    this.onKeyUp = this.onKeyUp.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  render() {\n\n    // The relevant state from the \"todo\" store\n    // that we're rendering here.\n    const { todos, inputValue } = this.props;\n\n    // Renders an input for new todos, and the list\n    // of current todos. When the user types\n    // and then hits enter, the new todo is created.\n    // When the user clicks a todo, it's moved to the\n    // \"done\" array.\n    return (\n      <div>\n        <h3>TODO</h3>\n        <div>\n          <input\n            value={inputValue}\n            placeholder=\"TODO...\"\n            onKeyUp={this.onKeyUp}\n            onChange={this.onChange}\n            autoFocus\n          />\n        </div>\n        <ul>\n          {todos.map(({ title }, i) =>\n            <li key={i}>\n              <a\n                href=\"#\"\n                onClick={this.onClick.bind(null, i)}\n              >{title}</a>\n            </li>\n          )}\n        </ul>\n      </div>\n    );\n  }\n\n  // An active Todo was clicked. The \"key\" is the\n  // index of the Todo within the store. This is\n  // passed as the payload to the \"createDone()\"\n  // action, and next to the \"removeTodo()\" action.\n  onClick(key) {\n    const { dispatch, todos } = this.props;\n\n    dispatch(createDone(todos[key]));\n    dispatch(removeTodo(key));\n  }\n\n  // If the user has entered some text and the\n  // \"enter\" key is pressed, we use the\n  // \"createTodo()\" action to create a new\n  // item using the entered text. Then we clear\n  // the input using the \"updateInputValue()\"\n  // action, passing it an empty string.\n  onKeyUp(e) {\n    const { dispatch } = this.props;\n    const { value } = e.target;\n\n    if (e.which === 13 && value) {\n      dispatch(createTodo(e.target.value));\n      dispatch(updateInputValue(''));\n    }\n  }\n\n  // The text input value changed - update the store.\n  onChange(e) {\n    this.props.dispatch(\n    updateInputValue(e.target.value));\n  }\n}\n\n// The props that get passed to this component\n// from the store. We just need to convert the\n// \"Todo\" Immutable.js structure to plain JS.\nfunction mapStateToProps(state) {\n  return state.Todo.toJS();\n}\n\n// Exports the \"connected\" version of the\n// component that's connect to the Redux store.\nexport default connect(mapStateToProps)(TodoList);\n```", "```js\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass DoneList extends Component {\n  render() {\n\n    // The \"done\" array is the only state we need\n    // from the \"done\" store.\n    const { done } = this.props;\n\n    // We want to display these items\n    // as strikethrough text.\n    constitemStyle = {\n      textDecoration: 'line-through'\n    }\n\n    // Renders the list of done items, with\n    // the \"itemStyle\" applied to each item.\n    return (\n      <div>\n        <h3>DONE</h3>\n        <ul>\n          {done.map(({ title }, i) =>\n            <li key={i} style={itemStyle}>{title}</li>\n          )}\n        </ul>\n      </div>\n    );\n  }\n}\n\n// The props that get passed to this component\n// from the store. We just need to convert the\n// \"Done\" Immutable.js structure to plain JS.\nfunction mapStateToProps(state) {\n  return state.Done.toJS();\n}\n\n// Exports the \"connected\" version of the\n// component that's connect to the Redux store.\nexport default connect(mapStateToProps)(DoneList);\n```", "```js\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport TodoList from './views/todo-list';\nimport DoneList from './views/done-list';\n\n// Renders the \"TodoList\" and the \"DoneList\"\n// components. The \"Provider\" component is\n// used to connect the store to the components.\n// When the store changes state, the children\n// of \"Provider\" are re-rendered.\nrender(\n  <Provider store={store}>\n    <div>\n      <TodoList/>\n      <DoneList/>\n    </div>\n  </Provider>,\n  document.getElementById('app')\n);\n```"]