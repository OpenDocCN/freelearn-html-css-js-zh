- en: Chapter 4. Accessing Offline Content with Advanced Techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Templating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing read-through caching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing offline Google Analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing offline user interaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing selective caching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will continue to improve on our experience working with
    offline content using the service worker.
  prefs: []
  type: TYPE_NORMAL
- en: We will look into advanced techniques, including how to use templating with
    a template engine, diving into Google Analytics, how to solve issues with offline
    user interaction, and implementing selective caching.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start off this chapter by experimenting with templating for the service
    worker.
  prefs: []
  type: TYPE_NORMAL
- en: Templating
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditional server-side page rendering has become a thing of the past with modern-day
    **single page applications** (**SPAs**). Even though server-side rendering is
    faster, state data will prove hard to implement with the service worker. Instead,
    we can request JSON data and a template, allow the service worker to take in the
    data and the template, and render a response page. JavaScript templating is a
    client-side data binding method, implemented with the use of the JavaScript language.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to learn more about templating, please refer the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/JavaScript_templating](https://en.wikipedia.org/wiki/JavaScript_templating)'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure. Alternatively, you
    can download the files from the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/04/01/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/04/01/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must create an `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `service-worker.js`, in the same folder as
    the `index.html` file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JSON file called `people.js`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download the handlebars library from [http://handlebarsjs.com/installation.html](http://handlebarsjs.com/installation.html)
    and save as `handlebars.js` in the same directory as the `index.html` file, as
    shown in the following screenshot:![How to do it...](img/B05381_04_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_04_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are using handlebars as our choice of templating engine for this example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The template for the service worker is the `index.html` file itself. We are
    using double curly braces, the `Handlebars` syntax, inside a table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The values are read from the JSON file that we feed into the template. The `{{#users}}`
    tag is an array, and it works like a loop, printing out the content inside the
    `users` property to the screen by replacing the placeholder, such as `{{twitter}}`,
    with the relevant value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `people.json` file contains data we need for our template. The `users`
    property contains an array of the users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s move on to the `service-worker.js` file. There we handle two events:
    install and fetch. In the install event handler, we are caching all the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the fetch handler, we check to see whether the fetch request is the
    template, in our case the `index.html` file, and we send the response in text
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If the fetch request is the JSON file, we return the result in JSON format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we render the template with the JSON data and then send the response
    back with a header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `Handlebars.compile()` function takes in a template and returns a function,
    which can in turn take in data and render an output.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Registering a service worker in detail* recipe in [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing read-through caching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read-through caching is an assertive approach to all-out caching for types of
    static content you visit regularly. This is not very suitable for dynamic content,
    such as news or sports. A selective caching approach would be better suited for
    such instances. Read-through caching saves us the necessary bandwidth for the
    server, as well as requests over the network. The way read-through caching works
    is that after the service worker takes control of your page, when the first `fetch()`
    request is called, the response will be cached, and subsequent requests to the
    same URL will be served from the cache.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the instructions to set up your file structure. Alternatively, you can
    download the files from the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/04/02](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/04/02)/'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must create an `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a CSS file called `style.css` in the same folder as the `index.html`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `index.js` in the same folder as the `index.html`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `service-worker.js` in the same folder as the
    `index.html` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open up a browser and go to `index.html`:![How to do it...](img/B05381_04_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up Developer Tools (*Cmd* + *Alt* + *I* or *F12*). You will see messages
    logged on the console, saying most resources were not found in the cache, so were
    fetched from the network:![How to do it...](img/B05381_04_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you refresh the page, you will see different messages appearing in the console.
    This time, the resources are fetched from the cache:![How to do it...](img/B05381_04_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `service-worker.js` file, we are setting a page-specific name for the
    cache, as the caches are origin-based, and no other page should use the same cache
    name. We are also versioning the cache, in order to address a scenario where you
    would want a fresh cache; in this instance, we can update the version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We also make sure that the old caches are purged at the time the service worker
    is activated. So, we delete all the caches that do not match the name we previously
    specified for our cache name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The fetch event listener looks into the cache to find whether our requested
    resource is in the cache; if it is found, it will respond with the entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, if there is no entry for `event.request` in the cache, the response
    is going to be undefined, so we have to fetch the resource using `fetch()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `clone()` call is useful if we use `cache.put()` later.
  prefs: []
  type: TYPE_NORMAL
- en: Making a copy is necessary because both `cache.put()` and `fetch()` will consume
    the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also make sure not to cache error responses by checking the `response.status`
    parameter is not 400 or above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we call the `clone()` method on the response, in order to save a copy
    in the cache, and then return the response to the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Allowing offline Google Analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed read-through caching in the previous recipe. Let's quickly recap
    what read-through caching is. After a service worker gains control of the page,
    the first time a new resource has been requested, the response will be stored
    in the service worker cache.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are utilizing this feature to store any failed Google Analytics/collect
    pings in an IndexedDb database. IndexedDb is a client-side, user-specific storage
    specification that allows us to store data in an indexed manner, and is backed
    by an API that provides search capabilities. So any time the service worker starts
    up, any saved Google Analytics pings will be replayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about IndexedDb you can follow these links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://seanamarasinghe.com/developer/indexeddb/](http://seanamarasinghe.com/developer/indexeddb/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will give you a great platform to perform transactions offline, regardless
    of connectivity and availability.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the instructions to set up your file structure. Alternatively, you can
    download the files from the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/04/03/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/04/03/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must create an `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a CSS file called `style.css`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `index.js`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `analytics.js`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open up DevTools (*Cmd* + *Alt* + *I* or *F12*) and go to the **Network**
    tab. You will see the `/collect` requests have a state of **200**, which means
    successful:![How to do it...](img/B05381_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh the page. You will see an image as shown in the following screenshot:![How
    to do it...](img/B05381_04_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Console** tab of DevTools:![How to do it...](img/B05381_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go to the **Network** tab of DevTools and select **Offline**:![How to do
    it...](img/B05381_04_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh the page and you will still see the same page, but if you view the network
    requests, you will be able to find out that the service worker has saved the analytics
    requests in IndexedDb:![How to do it...](img/B05381_04_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now change the **Offline** option to **No throttling** in DevTools:![How to
    do it...](img/B05381_04_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Reset** button on this page to refresh the service worker, and
    monitor the console in DevTools. You will see that the replay message extracted
    from IndexedDb has been sent:![How to do it...](img/B05381_04_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `service-worker.js` file, we are accessing IndexedDb by getting a reference
    to it. Then we go on attaching event handlers for the `error`, `upgradeneed`,
    and `onsuccess` events of the database instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Because of the read-through, caching will cache the initial requests; the subsequent
    requests to the same resource will be handled by the `fetch()` event handler of
    the service worker. The fetch event handler queries the cache for requests in
    the `currentCaches` cache, and sends the response back to the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If the response was not found, it will send a fetch request to the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If the response for the preceding request was successful, the response will
    be cloned and added to the cache, with the request as the key and the response
    as the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we make sure that we resolve the current promise as soon as another one
    in the array gets resolved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If the response is not a server error, and is likely to be a timeout, we pass
    the request URL to `checkForAnalyticsRequest()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `checkForAnalyticsRequest()` function is in the `analytics.js` file. Let''s
    examine this method. The passed-in URL is first checked to make sure whether it''s
    a call to `google-analytics.com`, regardless of whether the subdomain is `www`
    or `ssl`, and the path name has `/collect` in it. This is to make sure this is
    an analytics ping:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `saveGoogleAnalyticsRequest()` method will add the URL and the timestamp
    to the store, which in turn saves the entry.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `onsuccess()` method, back in the `service-worker.js` file, calls the `replayGoogleAnalyticsRequests()`
    method. Inside this method, the analytics requests will be saved in a queue called
    `savedGoogleAnalyticsRequests`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `openCursor()` function is a pointer to the database where you can traverse
    records.
  prefs: []
  type: TYPE_NORMAL
- en: 'The callback of the `onsuccess` event handler will pass in the value of `event.target.result`
    into the `savedGoogleAnalyticsRequests` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, each saved Google Analytics request will be replayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Implementing read-through caching* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing offline user interaction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most websites out there, including news articles, sports videos, or music, are
    not quite able to be taken offline completely, given their amount of content.
    There is no real reason for having everything in your cache if you don't access
    them. But giving the user the option of saving the content in the cache to read
    later is the ideal solution. In this recipe, we are going to investigate how we
    can achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the instructions to set up your file structure. Alternatively, you can
    download the files from the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/04/04/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/04/04/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must create an `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `index.js`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `service-worker.js`, in the same folder as
    the `index.html` file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a CSS file called `style.css`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open up a browser and go to the `index.html` file. You will see one prefetched
    bookmark:![How to do it...](img/B05381_04_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the video to the cache by clicking on the **Watch Later** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, change the **Offline** option to **No throttling** in DevTools:![How to
    do it...](img/B05381_04_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now refresh the page. You will see that styles aren't loaded, but the video
    is still accessible:![How to do it...](img/B05381_04_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our `service-worker.js` file, we are only caching the `index.html` file
    in order to load the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `index.html` file, we have a video tag with its source pointing to a
    video file. If the `.mp4` extension is not supported by the browser, it will show
    the `Your browser does not support the video tag` message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'When you click the **Watch Later** button, the event handler gets fired, which
    is in turn is handled inside the `index.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The `cache.add()` function adds the response URL to the cache. Back in `service-worker.js`,
    the event listener for fetch retrieves this saved response when we refresh the
    page in offline mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Implementing selective caching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the second recipe of this chapter, *Implementing read-through caching*, we
    discussed caching all resources at the time of the first request, and we talked
    about how it does not suit some scenarios, such as news or sports, where most
    articles will become outdated and you will never access them again. The solution
    we pointed out at the time was selective caching. So let's look at a working example.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must create an `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `index.js`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download the `webfont-serif.woff` file from the source code, or use your own
    font file, in the same folder as the `index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a JavaScript file called `service-worker.js`, in the same folder as
    the `index.html` file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a CSS file called `style.css`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open up a browser and go to `index.html`. You will see the **Registration status:
    successful** message and the logo:![How to do it...](img/B05381_04_17.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if you refresh the page and inspect the **Console** tab of the Developer
    Tools, you will be able to see that the `webfont-serif.woff` file has been fetched
    from the cache.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our `index.html` file, we add a placeholder section for our message to be
    displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `style.css` file, we declare the font family we are going to use, and
    then assign it to the paragraph we are targeting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `service-worker.js` file, we make sure that if a cached version is available,
    we use it instead of a network request, but fetch an update the next time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Implementing read-through caching* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
