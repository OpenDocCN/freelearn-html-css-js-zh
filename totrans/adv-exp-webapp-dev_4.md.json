["```js\nredis-server\n\n```", "```js\nredis-cli\n\n```", "```js\n    monitor\n\n    ```", "```js\n    flushall\n\n    ```", "```js\n    keys *\n\n    ```", "```js\n    get <key>\n\n    ```", "```js\nnpm install redis --save\n\n```", "```js\n  \"redis\": {\n    \"port\": 6379\n  , \"host\": \"localhost\"\n  }\n```", "```js\nvar redis = require('redis')\n, config = require('../configuration');\n\nfunction Redis() {\n  this.port = config.get(\"redis:port\");\n  this.host = config.get(\"redis:host\");\n  this.password = config.get(\"redis:password\");\n  this.client = redis.createClient(this.port, this.host);\n  if (this.password) this.client.auth(this.password, function() {});\n}\n\nmodule.exports = Redis;\n```", "```js\nvar Redis = require('../../cache/redis')\n  , util = require('util');\n\nutil.inherits(Publisher, Redis);\n\nfunction Publisher() {\n  Redis.apply(this, arguments);\n};\n\nRedis.prototype.save = function(key, items) {\n  this.client.set(key, JSON.stringify(items));\n};\n\nRedis.prototype.publish = function(key, items) {\n  this.client.publish(key, JSON.stringify(items));\n};\n\nmodule.exports = Publisher;\n```", "```js\nvar Redis = require('../../cache/redis')\n  , util = require('util');\n\nutil.inherits(Subscriber, Redis);\n\nfunction Subscriber() {\n  Redis.apply(this, arguments);\n};\n\nSubscriber.prototype.subscribe = function(key) {\n  this.client.subscribe(key);\n};\n\nmodule.exports = Subscriber;\n```", "```js\nvar async =  require('async')\n  , _ =  require('underscore')\n  , util = require('util')\n  , db = require('../db')\n  , Publisher = require('../cache/publisher')\n  , GitHubRepo = require('../github')\n  , Project = require('../models').model('Project');\n\nutil.inherits(Populate, Publisher);\n\nfunction Populate() {\n  Publisher.apply(this, arguments);\n};\n\nPopulate.prototype.run = function(callback) {\n  var me = this;\n\n  Project.find({}, function(error, projects) {\n    if (error) callback();\n    if (projects == null) callback();\n\n    async.each(projects, function(project, callback) {\n      var git = new GitHubRepo(project.token, project.user);\n\n      git.commits(project.repositories, function(error, commits) {\n        if (error || !commits) callback();\n\n        me.save('commits:' + project._id, commits);\n        me.publish('commits', { projectId : project._id, commits : commits});\n\n        git.issues(project.repositories, function(error, issues) {\n          if (error || !issues) callback();\n\n          me.save('issues' + project._id, issues);\n          me.publish('issues', { projectId : project._id, issues : issues});\n        });\n      });\n\n      callback(error);\n    }\n    , function(error) {\n      callback(error);\n    });\n  });\n};\nmodule.exports = Populate;\n```", "```js\nnpm install socket.io --save\n\n```", "```js\n\"sockets\": {\n    \"loglevel\": 3\n  , \"pollingduration\": 10\n  , \"browserclientminification\" : false\n  , \"browserclientetag\" : false\n  , \"browserclientgzip\" : false\n  }\n```", "```js\nvar config = require('../configuration');\n\nfunction Socket(server) {\n    var socketio = require('socket.io').listen(server);\n\n    if (config.get('sockets:browserclientminification'))\n      socketio.enable('browser client minification');\n    if (config.get('sockets:browserclientetag'))\n      socketio.enable('browser client etag');\n    if (config.get('sockets:browserclientgzip'))\n      socketio.enable('browser client gzip');\n    socketio.set(\"polling duration\",\n      config.get('sockets:pollingduration'));\n    socketio.set('log level', config.get('sockets:loglevel'));\n\n    socketio.set('transports', [\n        'websocket'\n        , 'flashsocket'\n        , 'htmlfile'\n        , 'xhr-polling'\n        , 'jsonp-polling'\n    ]);\n\n    return socketio;\n};\n\nmodule.exports = Socket;\n```", "```js\nvar http = require('http')\n  , logger = require(\"../logger\")\n  , Socket = require('../socket')\n  , Subscriber = require('../cache/subscriber')\n  , subscriber = new Subscriber();\n\nfunction SocketHandler(httpServer) {\n\n  var socketIo = new Socket(httpServer)\n\n  socketIo.sockets.on('connection', function(socket) {\n    subscriber.subscribe(\"issues\");\n    subscriber.subscribe(\"commits\");\n\n    subscriber.client.on(\"message\", function (channel, message) {\n      socket.broadcast.to(message.projectId).emit(channel, JSON.parse(message));\n    });\n\n    socket.on('subscribe', function (data) {\n      socket.join(data.channel);\n    });\n\n    socket.on('unsubscribe', function () {\n      var rooms = socketIo.sockets.manager.roomClients[socket.id];\n\n      for (var room in rooms) {\n          if (room.length > 0) {\n            room = room.substr(1);\n            socket.leave(room);\n          }\n      }\n    });\n  });\n\n  socketIo.sockets.on('error', function() {\n    logger.error(arguments);\n  });\n};\n\nmodule.exports = SocketHandler;\n```", "```js\n, SocketHandler = require('../socket/handler')\n..\nvar httpServer = http.createServer(app).listen(app.get('port'))\nsocketHandler = new SocketHandler(httpServer);\n```", "```js\nbower install socketio-client\n\n```", "```js\napp.use('/sockets', express.static('public/components/socket.io-client/dist/'));\n```", "```js\n<script src=\"img/socket.io.js\"></script>\n```", "```js\nVision.Router = Backbone.Router.extend({\n  projectListView : '',\n  repositoryListView:'',\n  issueListView:'',\n  commitListView:'',\n socket: null,\n\n  routes: {\n    '' : 'index',\n    'add' : 'add'\n  },\n\n  initialize : function(socket) {\n this.socket = socket;\n    this.project();\n    this.listenTo(this.projectListView, 'join', this.join);\n this.socket.on('issues', this.issues);\n this.socket.on('commits', this.commits);\n  },\n\n  join : function(args) {\n    this.repository(args);\n    this.issues(args);\n    this.commits(args);\n this.socket.emit('unsubscribe');\n this.socket.emit('subscribe', {channel : args.projectId});\n  },\n\n  project : function() {\n    this.projectListView = new Vision.ProjectListView();\n  },\n\n  repository : function(args) {\n\n    this.repositoryListView = new Vision.RepositoryListView(\n      {el: 'ul#repository-list', projectId: args.projectId,\n        editMode: args.editMode });\n  },\n\n  issues : function(args) {\n\n    this.issueListView = new Vision.IssueListView(\n      {el: 'ul#issues-list', projectId: args.projectId,\n        issues : args.issues});\n  },\n\n  commits : function(args) {\n\n    this.commitListView = new Vision.CommitListView(\n      { el: 'ul#commits-list', projectId: args.projectId,\n        commits : args.commits});\n  },\n\n  index : function(){\n    this.projectListView.render();\n  },\n\n  add : function(){\n    this.projectListView.showForm();\n  }\n});\n```", "```js\nVision.Application = function() {\n  this.start = function() {\n var socketio = io.connect('/');\n    var router = new Vision.Router(socketio);\n    Backbone.history.start();\n    router.navigate('index', true);\n  }\n};\n```", "```js\nnpm install node-schedule --save\n```", "```js\nvar schedule = require('node-schedule')\n  , logger = require('./lib/logger')\n  , Populate = require('./lib/cache/populate')\n  , populate = new Populate();\n\nschedule.scheduleJob('*/5 * * * *', function() {\n  populate.run(function(err) {\n    if (err) logger.error('Redis Population error', err);\n    if (!err) logger.info('Redis Population complete');\n  });\n});\n```", "```js\nnpm start\n\n```", "```js\nnode populate.js\n\n```"]