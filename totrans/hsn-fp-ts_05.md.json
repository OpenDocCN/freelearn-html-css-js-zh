["```js\nclass Person {\n\n    public name: string;\n    public surname: string;\n    public age: number = 0;\n\n    public constructor(name: string, surname: string) {\n        this.name = name;\n        this.surname = surname;\n    }\n\n    public greet() {\n        let msg = 'Hi! my name is ${this.name} ${this.surname}';\n        msg += 'I'm ${this.age}';\n    }\n\n}\n```", "```js\nvar Person = (function() {\n\n    function Person(name, surname) {\n        this.age = 0;\n        this.name = name;\n        this.surname = surname;\n    }\n\n    Person.prototype.greet = function() {\n        let msg = \"Hi! my name is \" + this.name +\n                    \" \" + this.surname;\n        msg += \"I'm \" + this.age;\n    };\n\n    return Person;\n\n})();\n```", "```js\nconst name = \"Remo\";\nconst surname = \"Jansen\";\n\nfunction Person(name, surname) {\n      // instance properties\n      this.name = name;\n      this.surname = surname;\n}\n\nconst person1 = new Person(name, surname);\nperson1.age = 27;\n```", "```js\nfor(let property in person1) {\n  console.log(\"property: \" + property + \", value: '\" +\n  person1[property] + \"'\");\n}\n```", "```js\nproperty: name, value: 'Remo'\nproperty: surname, value: 'Jansen'\nproperty: age, value: 27\nproperty: greet, value: 'function (city, country) {\n    let msg = \"Hi, my name is \" + this.name + \" \" + this.surname;\n    msg += \"\\nI'm from \" + city + \" \" + country;\n    console.log(msg);\n}'\n```", "```js\nlet person2 = new Person(\"John\", \"Wick\");\nperson2.name; // \"John\"\nperson1.name; // \"Remo\"\n```", "```js\nPerson.prototype.name = name; // instance property\nPerson.prototype.surname = surname; // instance property\n```", "```js\nfunction MathHelper() {\n  //...\n}\n\n// class property\nMathHelper.PI = 3.14159265359;\n```", "```js\nfunction MathHelper() {\n    // ...\n}\n\n// class property\nMathHelper.PI = 3.14159265359;\n\n// class method\nMathHelper.areaOfCircle = function(radius) {\n  return radius * radius * MathHelper.PI;\n}\n```", "```js\nfunction MathHelper() {\n  // instance property\n  this.PI = 3.14159265359;\n}\n```", "```js\n// class method\nMathHelper.areaOfCircle = function(radius) {\n  return radius * radius * this.PI; // this.PI is undefined\n}\n\nMathHelper.areaOfCircle(5); // NaN\n```", "```js\nfunction MathHelper () { /* ... */ }\n\n// class property\nMathHelper.PI = 3.14159265359;\n\n// instance method\nMathHelper.prototype.areaOfCircle = function(radius) {\n return radius * radius * this.constructor.PI;\n}\n\nconst math = new MathHelper ();\nconsole.log(MathHelper.areaOfCircle(5)); // 78.53981633975\n```", "```js\nthis === MathHelper.prototype; // true\n```", "```js\nclass MathHelper {\n\n    // class property\n    public static PI = 3.14159265359;\n\n    // class method\n    public static areaOfCircle(radius: number) {\n        return radius * radius * MathHelper.PI;\n    }\n}\n```", "```js\nclass SuperHero extends Person {\n\n    public superpower: string;\n\n    public constructor(\n        name: string,\n        surname: string,\n        superpower: string\n    ) {\n        super(name, surname);\n        this.superpower = superpower;\n    }\n\n    public userSuperPower() {\n        return 'I'm using my ${this.superpower}';\n    }\n\n}\n```", "```js\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\n```", "```js\nvar __extends = this.__extends || function (d, b) { // ...\n```", "```js\nfunction (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n}\n```", "```js\nfor (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n```", "```js\nfunction __() { this.constructor = d; }\n```", "```js\n__.prototype = b.prototype;\n```", "```js\nvar instance = new d():\n```", "```js\nvar SuperHero = (function (_super) {\n\n    __extends(SuperHero, _super);\n\n    function SuperHero(name, surname, superpower) {\n        _super.call(this, name, surname);\n        this.superpower = superpower;\n    }\n\n    SuperHero.prototype.userSuperPower = function () {\n        return \"I'm using my \" + superpower;\n    };\n\n    return SuperHero;\n\n})(Person);\n```", "```js\n_super.call(this, name, surname);\n```", "```js\nfunction Person(name, surname) {\n    // this points to the instance of SuperHero being created\n    this.name = name;\n    this.surname = surname;\n}\n```", "```js\nclass Base {\n    public method1() { return 1; }\n    public method2() { return 2; }\n}\n\nclass Derived extends Base {\n    public method2() { return 3; }\n    public method3() { return 4; }\n}\n```", "```js\nvar Base = (function () {\n    function Base() {\n    }\n    Base.prototype.method1 = function () { return 1; };\n    Base.prototype.method2 = function () { return 2; };\n    return Base;\n})();\n\nvar Derived = (function (_super) {\n    __extends(Derived, _super);\n    function Derived() {\n        _super.apply(this, arguments);\n    }\n    Derived.prototype.method2 = function () { return 3; };\n    Derived.prototype.method3 = function () { return 4; };\n    return Derived;\n})(Base);\n```", "```js\nconst derived = new Derived();\n```", "```js\nconsole.log(derived.method1()); // 1\n```", "```js\nconsole.log(derived.method2()); // 3\n```", "```js\nconsole.log(derived.method3()); // 4\n```", "```js\nconsole.log(derived.method4()); // error\n```", "```js\nfunction makeArmy() {\n    const shooters = [];\n    for (let i = 0; i < 10; i++) {\n        const shooter = () => { // a shooter is a function\n            console.log(i); // which should display it's number\n        };\n        shooters.push(shooter);\n    }\n    return shooters;\n}\n```", "```js\nconst army = makeArmy();\n```", "```js\narmy[0](); // 10 (expected 0)\narmy[5](); // 10 (expected 5)\n```", "```js\nfunction makeArmy() {\n    const shooters = [];\n    for (let i = 0; i < 10; i++) {\n        ((index: number) => {\n            const shooter = () => {\n                console.log(index);\n            };\n            shooters.push(shooter);\n        })(i);\n    }\n    return shooters;\n}\n\nconst army = makeArmy();\narmy[0](); // 0\narmy[5](); // 5\n```", "```js\nclass Counter {\n\n private static _COUNTER = 0;\n\n public increment() {\n this._changeBy(1);\n }\n\n public decrement() {\n this._changeBy(-1);\n }\n\n public value() {\n return Counter._COUNTER;\n }\n\n private _changeBy(val: number) {\n Counter._COUNTER += val;\n }\n\n}\n```", "```js\nvar Counter = (function () {\n\n    function Counter() {\n    }\n\n    Counter.prototype._changeBy = function (val) {\n        Counter._COUNTER += val;\n    };\n\n    Counter.prototype.increment = function () {\n        this._changeBy(1);\n    };\n\n    Counter.prototype.decrement = function () {\n        this._changeBy(-1);\n    };\n\n    Counter.prototype.value = function () {\n        return Counter._COUNTER;\n    };\n\n    Counter._COUNTER = 0;\n    return Counter;\n\n})();\n```", "```js\nvar Counter = (function() {\n\n    // closure context\n\n    let _COUNTER = 0;\n\n    function changeBy(val: number) {\n        _COUNTER += val;\n    }\n\n    interface Counter {\n        increment: () => void;\n        decrement: () => void;\n        value: () => number;\n    }\n\n    interface CounterConstructor {\n        new(): Counter;\n    }\n\n    function Counter() {};\n\n    // closure functions\n\n    Counter.prototype.increment = function() {\n      changeBy(1);\n    };\n\n    Counter.prototype.decrement = function() {\n      changeBy(-1);\n    };\n\n    Counter.prototype.value = function() {\n      return _COUNTER;\n    };\n\n    return (Counter as unknown) as CounterConstructor;\n\n})();\n```", "```js\nlet counter1 = new Counter();\nlet counter2 = new Counter();\nconsole.log(counter1.value()); // 0\nconsole.log(counter2.value()); // 0\ncounter1.increment();\ncounter1.increment();\nconsole.log(counter1.value()); // 2\nconsole.log(counter2.value()); // 2 (expected 0)\ncounter1.decrement();\nconsole.log(counter1.value()); // 1\nconsole.log(counter2.value()); // 1 (expected 0)\n```", "```js\nfunction makeCounter() {\n\n    // closure context\n    let _COUNTER = 0;\n\n    function changeBy(val: number) {\n        _COUNTER += val;\n    }\n\n    class Counter {\n\n        public increment() {\n            changeBy(1);\n        }\n\n        public decrement() {\n            changeBy(-1);\n        }\n\n        public value() {\n            return _COUNTER;\n        }\n\n    }\n\n    return new Counter();\n\n}\n```", "```js\nlet counter1 = makeCounter();\nlet counter2 = makeCounter();\nconsole.log(counter1.value()); // 0\nconsole.log(counter2.value()); // 0\ncounter1.increment();\ncounter1.increment();\nconsole.log(counter1.value()); // 2\nconsole.log(counter2.value()); // 0 (expected 0)\ncounter1.decrement();\nconsole.log(counter1.value()); // 1\nconsole.log(counter2.value()); // 0 (expected 0)\n```", "```js\nconsole.log(counter1.counter); // Error\nconsole.log(counter1.changeBy(2)); // Error\n```"]