["```js\nsphere = createMesh(new THREE.SphereGeometry(5, 10, 10));\ncube = createMesh(new THREE.BoxGeometry(6, 6, 6));\n\ngroup = new THREE.Object3D();\ngroup.add(sphere);\ngroup.add(cube);\n\nscene.add(group);\n```", "```js\nvar arrow = new THREE.ArrowHelper(new THREE.Vector3(0, 1, 0), group.position, 10, 0x0000ff);\nscene.add(arrow);\n```", "```js\nvar geometry = new THREE.Geometry();\nfor (var i = 0; i < controls.numberOfObjects; i++) {\n  var cubeMesh = addcube();\n  cubeMesh.updateMatrix();\n  geometry.merge(cubeMesh.geometry,cubeMesh.matrix);\n}\nscene.add(new THREE.Mesh(geometry, cubeMaterial));\n```", "```js\nvar result = knot.toJSON();\nlocalStorage.setItem(\"json\", JSON.stringify(result));\n```", "```js\n{\n  \"metadata\": {\n    \"version\": 4.3,\n    \"type\": \"Object\",\n    \"generator\": \"ObjectExporter\"\n  },\n  \"geometries\": [{\n    \"uuid\": \"53E1B290-3EF3-4574-BD68-E65DFC618BA7\",\n    \"type\": \"TorusKnotGeometry\",\n    \"radius\": 10,\n    \"tube\": 1,\n    \"radialSegments\": 64,\n    \"tubularSegments\": 8,\n    \"p\": 2,\n    \"q\": 3,\n    \"heightScale\": 1\n  }],\n  ...\n}\n```", "```js\nvar json = localStorage.getItem(\"json\");\n\nif (json) {\n  var loadedGeometry = JSON.parse(json);\n  var loader = new THREE.ObjectLoader();\n\n  loadedMesh = loader.parse(loadedGeometry);\n  loadedMesh.position.x -= 50;\n  scene.add(loadedMesh);\n}\n```", "```js\n<script type=\"text/javascript\" src=\"img/SceneLoader.js\"></script>\n<script type=\"text/javascript\" src=\"img/SceneExporter.js\"></script>\n```", "```js\nvar exporter = new THREE.SceneExporter();\nvar sceneJson = JSON.stringify(exporter.parse(scene));\nlocalStorage.setItem('scene', sceneJson);\n```", "```js\n{\n  \"metadata\": {\n    \"formatVersion\": 3.2,\n    \"type\": \"scene\",\n    \"generatedBy\": \"SceneExporter\",\n    \"objects\": 5,\n    \"geometries\": 3,\n    \"materials\": 3,\n    \"textures\": 0\n  },\n  \"urlBaseType\": \"relativeToScene\", \"objects\": {\n    \"Object_78B22F27-C5D8-46BF-A539-A42207DDDCA8\": {\n      \"geometry\": \"Geometry_5\",\n      \"material\": \"Material_1\",\n      \"position\": [15, 0, 0],\n      \"rotation\": [-1.5707963267948966, 0, 0],\n      \"scale\": [1, 1, 1],\n      \"visible\": true\n    }\n    ... // removed all the other objects for legibility\n  },\n  \"geometries\": {\n    \"Geometry_8235FC68-64F0-45E9-917F-5981B082D5BC\": {\n      \"type\": \"cube\",\n      \"width\": 4,\n      \"height\": 4,\n      \"depth\": 4,\n      \"widthSegments\": 1,\n      \"heightSegments\": 1,\n      \"depthSegments\": 1\n    }\n    ... // removed all the other objects for legibility\n  }\n  ... other scene information like textures\n```", "```js\nvar json = (localStorage.getItem('scene'));\nvar sceneLoader = new THREE.SceneLoader();\nsceneLoader.parse(JSON.parse(json), function(e) {\n  scene = e.scene;\n}, '.');\n```", "```js\n{\n\n  \"metadata\" :\n  {\n    \"formatVersion\" : 3.1,\n    \"generatedBy\"   : \"Blender 2.7 Exporter\",\n    \"vertices\"      : 208,\n    \"faces\"         : 124,\n    \"normals\"       : 115,\n    \"colors\"        : 0,\n    \"uvs\"           : [270,151],\n    \"materials\"     : 1,\n    \"morphTargets\"  : 0,\n    \"bones\"         : 0\n  },\n...\n```", "```js\n\"materials\": [{\n  \"DbgColor\": 15658734,\n  \"DbgIndex\": 0,\n  \"DbgName\": \"misc_chair01\",\n  \"blending\": \"NormalBlending\",\n  \"colorAmbient\": [0.53132, 0.25074, 0.147919],\n  \"colorDiffuse\": [0.53132, 0.25074, 0.147919],\n  \"colorSpecular\": [0.0, 0.0, 0.0],\n  \"depthTest\": true,\n  \"depthWrite\": true,\n  \"mapDiffuse\": \"misc_chair01_col.jpg\",\n  \"mapDiffuseWrap\": [\"repeat\", \"repeat\"],\n  \"shading\": \"Lambert\",\n  \"specularCoef\": 50,\n  \"transparency\": 1.0,\n  \"transparent\": false,\n  \"vertexColors\": false\n}],\n```", "```js\nvar loader = new THREE.JSONLoader();\nloader.load('../assets/models/misc_chair01.js', function (geometry, mat) {\n  mesh = new THREE.Mesh(geometry, mat[0]);\n\n  mesh.scale.x = 15;\n  mesh.scale.y = 15;\n  mesh.scale.z = 15;\n\n  scene.add(mesh);\n\n}, '../assets/models/');\n```", "```js\nv -0.032442 0.010796 0.025935\nv -0.028519 0.013697 0.026201\nv -0.029086 0.014533 0.021409\nusemtl Material\ns 1\nf 2731 2735 2736 2732\nf 2732 2736 3043 3044\n```", "```js\nnewmtl Material\nNs 56.862745\nKa 0.000000 0.000000 0.000000\nKd 0.360725 0.227524 0.127497\nKs 0.010000 0.010000 0.010000\nNi 1.000000\nd 1.000000\nillum 2\n```", "```js\n<script type=\"text/javascript\" src=\"img/OBJLoader.js\"></script>\n```", "```js\nvar loader = new THREE.OBJLoader();\nloader.load('../assets/models/pinecone.obj', function (loadedMesh) {\n  var material = new THREE.MeshLambertMaterial({color: 0x5C3A21});\n\n  // loadedMesh is a group of meshes. For\n  // each mesh set the material, and compute the information\n  // three.js needs for rendering.\n  loadedMesh.children.forEach(function (child) {\n    child.material = material;\n    child.geometry.computeFaceNormals();\n    child.geometry.computeVertexNormals();\n  });\n\n  mesh = loadedMesh;\n  loadedMesh.scale.set(100, 100, 100);\n  loadedMesh.rotation.x = -0.3;\n  scene.add(loadedMesh);\n});\n```", "```js\n<script type=\"text/javascript\" src=\"img/OBJLoader.js\"></script>\n<script type=\"text/javascript\" src=\"img/MTLLoader.js\"></script>\n<script type=\"text/javascript\" src=\"img/OBJMTLLoader.js\"></script>\n```", "```js\nvar loader = new THREE.OBJMTLLoader();\nloader.load('../assets/models/butterfly.obj', '../assets/models/butterfly.mtl', function(object) {\n  // configure the wings\n  var wing2 = object.children[5].children[0];\n  var wing1 = object.children[4].children[0];\n\n  wing1.material.opacity = 0.6;\n  wing1.material.transparent = true;\n  wing1.material.depthTest = false;\n  wing1.material.side = THREE.DoubleSide;\n\n  wing2.material.opacity = 0.6;\n  wing2.material.depthTest = false;\n  wing2.material.transparent = true;\n  wing2.material.side = THREE.DoubleSide;\n\n  object.scale.set(140, 140, 140);\n  mesh = object;\n  scene.add(mesh);\n\n  mesh.rotation.x = 0.2;\n  mesh.rotation.y = -1.3;\n});\n```", "```js\n<script type=\"text/javascript\" src=\"img/ColladaLoader.js\"></script>\n```", "```js\nvar mesh;\nloader.load(\"../assets/models/dae/Truck_dae.dae\", function (result) {\n  mesh = result.scene.children[0].children[0].clone();\n  mesh.scale.set(4, 4, 4);\n  scene.add(mesh);\n});\n```", "```js\nvar result = {\n\n  scene: scene,\n  morphs: morphs,\n  skins: skins,\n  animations: animData,\n  dae: {\n    ...\n  }\n};\n```", "```js\n<script type=\"text/javascript\" src=\"img/PDBLoader.js\"></script>\n```", "```js\nvar loader = new THREE.PDBLoader();\nvar group = new THREE.Object3D();\nloader.load(\"../assets/models/diamond.pdb\", function (geometry, geometryBonds) {\n  var i = 0;\n\n  geometry.vertices.forEach(function (position) {\n    var sphere = new THREE.SphereGeometry(0.2);\n    var material = new THREE.MeshPhongMaterial({color: geometry.colors[i++]});\n    var mesh = new THREE.Mesh(sphere, material);\n    mesh.position.copy(position);\n    group.add(mesh);\n  });\n\n  for (var j = 0; j < geometryBonds.vertices.length; j += 2) {\n    var path = new THREE.SplineCurve3([geometryBonds.vertices[j], geometryBonds.vertices[j + 1]]);\n    var tube = new THREE.TubeGeometry(path, 1, 0.04)\n    var material = new THREE.MeshPhongMaterial({color: 0xcccccc});\n    var mesh = new THREE.Mesh(tube, material);\n    group.add(mesh);\n  }\n  console.log(geometry);\n  console.log(geometryBonds);\n\n  scene.add(group);\n});\n```", "```js\nvar sphere = new THREE.SphereGeometry(0.2);\nvar material = new THREE.MeshPhongMaterial({color: geometry.colors[i++]});\nvar mesh = new THREE.Mesh(sphere, material);\nmesh.position.copy(position);\ngroup.add(mesh)\n```", "```js\nvar path = new THREE.SplineCurve3([geometryBonds.vertices[j], geometryBonds.vertices[j + 1]]);\nvar tube = new THREE.TubeGeometry(path, 1, 0.04)\nvar material = new THREE.MeshPhongMaterial({color: 0xcccccc});\nvar mesh = new THREE.Mesh(tube, material);\ngroup.add(mesh);\n```", "```js\nvar loader = new THREE.PLYLoader();\nvar group = new THREE.Object3D();\nloader.load(\"../assets/models/test.ply\", function (geometry) {\n  var material = new THREE.PointCloudMaterial({\n    color: 0xffffff,\n    size: 0.4,\n    opacity: 0.6,\n    transparent: true,\n    blending: THREE.AdditiveBlending,\n    map: generateSprite()\n  });\n\n  group = new THREE.PointCloud(geometry, material);\n  group.sortParticles = true;\n\n  scene.add(group);\n});\n```"]