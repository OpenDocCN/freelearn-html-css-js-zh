["```js\n// StudentAttendanceTable.js\n\nexport default class StudentAttendanceTable extends HTMLElement {\n  constructor() {\n    super();\n\n    this.innerText = this.getLoadingText();\n  }\n\n  connectedCallback() {\n    // let's start our fetch call\n    this.getStudentList();\n  }\n\n  getStudentList() {\n    // lets use fetch api\n    // https://developer.mozilla.org/en-US/docs/Web\n    // /API/Fetch_API/Using_Fetch\n    fetch('./student.json')\n    .then(response => {\n\n      // converts response to json\n      return response.json();\n\n    })\n    .then(jsonData => {\n      this.generateTable(jsonData);\n    })\n    .catch(e => {\n\n      // lets set the error message for\n      // the user\n      this.innerText = this.getErrorText();\n\n      // lets print out the error\n     // message for the devs\n      console.log(e);\n    });\n\n  }\n\n  generateTable(names) {\n    // lets loop through names\n    // with the help of map\n    let rows = names.map((data, index) => {\n      return this.getTableRow(index, data.name);\n    });\n\n    // creating the table\n    let table = document.createElement('table');\n    table.innerHTML = rows.join('');\n\n    // setting the table as html for this component\n    this.appendHTMLToShadowDOM(table);\n  }\n\n  getTableRow(index, name) {\n    let tableRow = `<tr>\n        <td>${index + 1}</td>\n        <td>${name}</td>\n        <td>\n          <input type=\"checkbox\" name=\"${index}-attendance\"/>\n        </td>\n      </tr>`;\n\n    return tableRow;\n  }\n\n  appendHTMLToShadowDOM(html) {\n    // clearing out old html\n    this.innerHTML = '';\n\n    let shadowRoot = this.attachShadow({mode: 'open'});\n\n    // add a text node\n    shadowRoot.append(html);\n  }\n\n  getLoadingText() {\n    return `loading..`;\n  }\n\n  getErrorText() {\n    return `unable to retrieve student list.`;\n  }\n}\n```", "```js\n// CustomButton.js\n\nexport default class CustomButton extends HTMLElement {\n  constructor() {\n    super();\n\n    // Initializing an initial state\n    this.timesClicked = 0;\n\n    let template = `\n      <button>Click Me</button>\n      <span>${this.getTimesClicked()}</span>\n    `;\n\n    this.innerHTML = template;\n  }\n\n  connectedCallback() {\n\n    // adding event handler to the button\n    this.querySelector('button')\n      .addEventListener('click', (e) => {\n        this.handleClick(e);\n      });\n  }\n\n  handleClick() {\n    // updating the state\n    this.timesClicked++;\n\n    this.querySelector('span')\n      .innerText = this.getTimesClicked();\n  }\n\n  getTimesClicked() {\n    return `Times Clicked: ${this.timesClicked}`;\n  }\n}\n```", "```js\n<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n  <head>\n    <title>Connected Callback Example</title>\n\n    <!--\n      Notice how we use type=\"module\"\n    -->\n    <script type=\"module\">\n\n      /// importing the first custom element\n      import CustomButton from './CustomButton.js';\n\n      customElements.define('custom-button', CustomButton);\n    </script>\n\n  </head>\n  <body>\n\n    <custom-button></custom-button>\n\n  </body>\n</html>\n```", "```js\n// CustomButton.js\n\nexport default class CustomButton extends HTMLElement {\n  constructor() {\n    super();\n\n    // Initializing an initial state\n    this.timesClicked = 0;\n\n    let template = `\n      <button>Click Me</button>\n      <span>${this.getTimesClicked()}</span>\n    `;\n\n    this.innerHTML = template;\n  }\n\n  connectedCallback() {\n\n    // adding event handler to the button\n    this.querySelector('button')\n      .addEventListener('click', this.handleClick.bind(this));\n  }\n\n  disconnectedCallback() {\n    console.log('We are inside disconnectedCallback');\n\n    // adding event handler to the button\n    this.querySelector('button')\n      .removeEventListener('click', this.handleClick);\n  }\n\n  handleClick() {\n    // updating the state\n    this.timesClicked++;\n\n    this.querySelector('span')\n      .innerText = this.getTimesClicked();\n  }\n\n  getTimesClicked() {\n    return `Times Clicked: ${this.timesClicked}`;\n  }\n}\n```", "```js\ndocument.querySelector('custom-button').remove();\n```", "```js\nadoptedCallback() {\n  console.log('I am adopted');\n}\n```", "```js\n// MyName.js\n\nexport default class MyName extends HTMLElement {\n  constructor() {\n    super();\n\n    this.innerText = 'Hello, my name is John Doe';\n  }\n}\n```", "```js\n<my-name fullname=\"John Doe\"></my-name>\n```", "```js\nstatic get observedAttributes() {\n  return ['fullname'];\n}\n```", "```js\nattributeChangedCallback(name, oldValue, newValue) {\n  if (name == 'fullname') {\n    this.innerText = 'Hello, my name is ' + newValue;\n  }\n}\n```", "```js\n// MyName.js\n\nexport default class MyName extends HTMLElement {\n  constructor() {\n    super();\n\n   this.innerText = 'Hello, my name is NO NAME';\n  }\n\n  static get observedAttributes() {\n    return ['fullname'];\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name == 'fullname') {\n      this.innerText = 'Hello, my name is ' + newValue;\n    }\n  }\n}\n```", "```js\n<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n  <head>\n    <title>Attribute Changed Callback Example</title>\n\n    <!--\n      Notice how we use type=\"module\"\n    -->\n    <script type=\"module\">\n\n      /// importing the first custom element\n      import MyName from './MyName.js';\n\n      customElements.define('my-name', MyName);\n    </script>\n\n  </head>\n  <body>\n\n    <my-name fullname=\"John Doe\"></my-name>\n\n  </body>\n</html>\n```"]