["```js\nvar my = {ui:{},tools:{},controllers:{}}\n```", "```js\n//Create our application namespace\nvar my = {\n  ui:{\n    mod : require('dateWin')\n  },\n  tools:{},\n  controllers:{}\n};\n```", "```js\nmy.ui.win = my.ui.mod.createWindow();\n\nmy.ui.win.open();\n```", "```js\n    var helpers = function(){\n      var createAt = new Date();\n    ```", "```js\n    this.createdOn = function(){\n        return createAt;\n      };\n    ```", "```js\n    this.addDays = function(value,n){\n        var tempValue = new Date(value.getTime()); \n        tempValue.setDate(tempValue.getDate()+n);\n        return tempValue;\n      }\n    };\n    ```", "```js\nmodule.exports = helpers;\n```", "```js\n    var mod = require('datehelpers');\n    ```", "```js\n    exports.fetchWindow=function(){\n    ```", "```js\n      var dateHelper = new mod();\n    ```", "```js\n      var currentDateTime = new Date();\n    ```", "```js\n      var win = Ti.UI.createWindow({\n        backgroundColor:'#fff'\n      });\n    ```", "```js\n      var dateDisplayLabel = Ti.UI.createLabel({\n        text:String.formatDate\n        (exports.currentDateTime,\"medium\"),\n        top:120, height:50, width:Ti.UI.FILL, \n        textAlign:'center', color:'#000', font:{fontSize:42}\n      });\n      win.add(dateDisplayLabel);\n    ```", "```js\n      var addButton = Ti.UI.createButton({\n        title:\"Add Day\", top:220, left:5, width:150, height:50\n      });\n      win.add(addButton);\n    ```", "```js\n      var subtractButton = Ti.UI.createButton({\n        title:\"Subtract Day\", top:220, right:5, \n      \t width:150, height:50\n      });\n      win.add(subtractButton);\n    ```", "```js\n      addButton.addEventListener('click',function(e){\n    ```", "```js\n        exports.currentDateTime = \n        dateHelper.addDays(currentDateTime,1);\n    ```", "```js\n        dateDisplayLabel.text = String.formatDate(\n        exports.currentDateTime,\"medium\");\n      });    \n      subtractButton.addEventListener('click',function(e){\n    ```", "```js\n        exports.currentDateTime = \n        _dateHelper.addDays(currentDateTime,-1);\n    ```", "```js\n        dateDisplayLabel.text = String.formatDate(\n        currentDateTime,\"medium\");\n      });\n      return win;\n    };\n    ```", "```js\nvar myModule = require('datehelpers');\n```", "```js\nexports.myProperty = \"I am a property\";\n```", "```js\nexports.myObjectProperty = {\n  foo:1,\n  bar:'hello'\n};\n```", "```js\nvar _myObjectProperty = {\n  foo:1,\n  bar:'hello'\n};\n```", "```js\nexports.myObjectProperty = _myObjectProperty\n```", "```js\nexports.AddDays = function(value,n){\n```", "```js\n  var workingValue = new Date(value.getTime());\n```", "```js\n  workingValue.setDate(workingValue.getDate()+n);\n```", "```js\n  return workingValue;\n};\n```", "```js\nfunction addDays(value,n){\n  var workingValue = new Date(value.getTime());\n  workingValue.setDate(workingValue.getDate()+n);\n  return workingValue;\n};\n```", "```js\nexports.AddDays = addDays;\n```", "```js\n    var employee = function(name,employeeId,title){\n      this.name = name;\n      this.employeeId = employeeId;\n      this.title = title;\n      this.isVIP = function(level){\n        return (title.toUpperCase()==='CEO');\n      }\n    };\n    ```", "```js\n    module.exports = employee;\n    ```", "```js\n    var employee = require('employee');\n    ```", "```js\n    var bob = new employee('Bob Smith',1234,'manager');\n    var chris = new employee('Chris Jones',001,'CEO');\n    ```", "```js\n    Ti.API.info('Is ' + bob.name + ' a VIP? ' + bob.isVIP());\n    Ti.API.info('Is ' + chris.name + ' a VIP? ' + chris.isVIP());\n    ```", "```js\n//Create our application namespace\nvar my = {\n  tools: require('scope_test'),\n  session:{\n    foo: \"Session value in context\"\n  }\n};\n```", "```js\nmy.tools.testScope();\n```", "```js\nexports.testScope = function(){\n Ti.API.log\n (\"Test Module Scope - Foo =  \" + my.session.foo);\n return my.session.foo;\n};\n```", "```js\n    //Create our application namespace\n    var my = {\n      platformHelpers : require('platform_helpers')\n    };\n\n    (function(){\n    ```", "```js\n    var win = Ti.UI.createWindow({\n      backgroundColor:'#fff'\n    });\n    ```", "```js\n    var deviceData = [];\n    ```", "```js\n    if(my.platformHelpers.isSimulator){\n      deviceData.push({\n        title:'Running on Simulator', child:false\n      });\n    }\n    ```", "```js\n    deviceData.push({\n      title:'Platform: ' + \n      (my.platformHelpers.isAndroid ? 'Android' : 'iOS'), \n      child:false\n    });\n\n    deviceData.push({\n      title:'osname: ' +  my.platformHelpers.osname, \n      child:false\n    });\n\n    deviceData.push({\n      title:'manufacturer: ' +  \n      my.platformHelpers.manufacturer, child:false\n    });\n    ```", "```js\n    deviceData.push({\n      title:(my.platformHelpers.isTablet ? \n      'Is a Tablet' : 'Is not a Tablet'), child:false\n    });\n    ```", "```js\n    deviceData.push({\n      title:'Model: ' + my.platformHelpers.deviceModel, \n      child:false\n    });\n\n    deviceData.push({\n      title:'Backgrounding Support: ' + \n      my.platformHelpers.supportsBackground,\n      child:false\n    });\n    ```", "```js\n    deviceData.push({\n      title:'Height: ' + my.platformHelpers.deviceHeight +\n      ' Width: ' + my.platformHelpers.deviceWidth,\n      child:false\n    });\n    ```", "```js\n    if(my.platformHelpers.isIOS){\n      deviceData.push({\n        title:'iOS Device Type: ' + \n        (my.platformHelpers.iPad ? \n        (my.platformHelpers.iPadMiniNonRetina ? \n        'iPad Mini' : 'Is an iPad') : 'iPhone'),\n        child:false\n      });\n\n      deviceData.push({\n        title:'Is Retina : ' + my.platformHelpers.isRetina,\n        child:false\n      });\t\t\t\t\n    }\n    ```", "```js\n    var tableView = Ti.UI.createTableView({top:0, \n    data:deviceData});\n\n      win.add(tableView);\n      win.open();\n    })(); \n    ```", "```js\nexports.osname = Ti.Platform.osname;\nexports.manufacturer = Ti.Platform.manufacturer;\nexports.deviceModel = Ti.Platform.model;\nexports.deviceHeight = Ti.Platform.displayCaps.platformHeight;\nexports.deviceWidth = Ti.Platform.displayCaps.platformWidth;\nexports.densitylevel = Ti.Platform.displayCaps.density;\nexports.deviceDPI = Ti.Platform.displayCaps.dpi;\n```", "```js\nexports.isAndroid = exports.osname === 'android';\nexports.isIOS = (exports.osname === 'ipad' || \nexports.osname === 'iphone');\n```", "```js\nexports.isSimulator = (function(){\n  return (Ti.Platform.model.toUpperCase() === 'GOOGLE_SDK' || \n  Ti.Platform.model.toUpperCase()  === 'SIMULATOR' || \n  Ti.Platform.model.toUpperCase()  === 'X86_64')\n})();\n```", "```js\nexports.supportsBackground = (function(){\n```", "```js\n      if(exports.osname === 'android'){\n        return true;\n      }\n    ```", "```js\n      if(exports.osname === 'iphone'){\n    ```", "```js\n        var osVersion = Ti.Platform.version.split(\".\");\n        //If no iOS 4, then false\n        if(parseInt(osVersion[0],10) < 4){\n          return false;\n        } \n    ```", "```js\n        var model = exports.deviceModel.toLoweCase()\n        .replace(\"iphone\",\"\").trim();\n        var phoneVersion = Ti.Platform.version.split(\".\");\n        if(parseInt(phoneVersion[0],10) < 3){\n          return false;\n        } \t\t\n      }\n      //Assume modern device return true\n      return true;\n\n    })();\n    ```", "```js\n//Determine if running on a tablet\nexports.isTablet = (function() {\n```", "```js\n  var tabletCheck = exports.osname === 'ipad' || \n    (exports.osname === 'android' && \n    (!(Math.min(\n    exports.deviceHeight,\n    exports.deviceWidth\n    ) < 700)));\n    return tabletCheck;\n})();\n```", "```js\nexports.newIPhoneSize = (function(){\n```", "```js\n  if(exports.osname !== 'iphone'){\n    return false;\n  }\n```", "```js\n  return (Math.max(\n    exports.deviceHeight,\n    exports.deviceWidth\n  ) > 480);\n});\n```", "```js\nexports.iPad = exports.osname === 'ipad';\n```", "```js\nexports.iPadMiniNonRetina= (function() {\n```", "```js\n      if((exports.osname !== 'ipad')||\n      (exports.osname === 'ipad' &&\n      exports.densitylevel==='high')){\n        return false;\n      }\n    ```", "```js\n      var modelToCompare = exports.deviceModel.toLowerCase();\n      return !(\n        (modelToCompare===\"ipad1,1\")||\n        (modelToCompare===\"ipad2,1\")||\n        (modelToCompare===\"ipad2,2\")||\n        (modelToCompare===\"ipad2,3\")||\t\n        (modelToCompare===\"ipad2,4\")\t\t\n      );\n    })();\n    ```", "```js\nTi.App.addEventListener('app:myEvent', myFunctionToHandleThisEvent);\n```", "```js\nTi.App.fireEvent('app:myEvent',\"My parameter objects\");\n```", "```js\n//Create our application namespace\nvar my = {\n  ui:{\n    mainWindow : require('mainWin').createWindow()\n  },\n  logger : require('logger')\n};\n```", "```js\n//Run setup to create our logging db\nmy.logger.setup();\n```", "```js\n//Add a global event to listen for log messages\nTi.App.addEventListener('app:log',function(e){\n //Provide Log Message to CommonJS Logging Component\n my.logger.add(e);\n});\n\n//Open our sample window\nmy.ui.mainWindow.open();\n```", "```js\nvar LOG_DB_NAME = \"my_log_db\";\n```", "```js\nexports.setup=function(){\n  var createSQL = 'CREATE TABLE IF NOT EXISTS LOG_HISTORY '; \n  createSQL +='(LOG_NAME TEXT, LOG_MESSAGE TEXT, ';\n  createSQL += 'LOG_DATE DATE)';\n  //Install the db if needed\n  var db = Ti.Database.open(LOG_DB_NAME);\n  //Create our logging table if needed\n  db.execute(createSQL);\n  //Close the db\n  db.close();\n};\n```", "```js\nexports.add=function(logInfo){\n  var insertSQL =\"INSERT INTO LOG_HISTORY \";\n  insertSQL +=\" (LOG_NAME,LOG_MESSAGE,LOG_DATE)\"; \n  insertSQL +=\" \"VALUES(?,?,?)\";\n  var db = Ti.Database.open(LOG_DB_NAME);\n  //Create our logging table if needed\n  db.execute(insertSQL,logInfo.name,logInfo.message, \n  new Date());\n  //Close the db\n  db.close();\n};\n```", "```js\nvar _press_Count = 0;\n```", "```js\nexports.fetchWindow=function(){\n```", "```js\n  var win = Ti.UI.createWindow({\n    backgroundColor:'#fff'\n  });\n```", "```js\n  var addLogButton = Ti.UI.createButton({\n    title:\"Fire Log Event\", top:180, \n    left:5,right:5, height:50\n  });\n```", "```js\n  addLogButton.addEventListener('click',function(e){\t\t\n```", "```js\n    _press_Count ++;\n```", "```js\n    var logObject = {\n      name:'test log',\n      message:'example message ' + \n      _press_Count\n    };\n```", "```js\n    Ti.App.fireEvent('app:log',logObject);\n  });    \n  win.add(addLogButton);\n\n  //Return window\n  return win;\n};\n```", "```js\nTi.App.removeEventListener('app:myEvent', myFunctionToHandleThisEvent);\n```"]