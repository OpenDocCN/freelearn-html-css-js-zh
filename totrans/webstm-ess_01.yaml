- en: Chapter 1. Getting Started with WebStorm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WebStorm is a full-fledged JavaScript **integrated development environment**
    (**IDE**) engineered by JetBrains for client-side and server-side web development.
    It is built on the basis of IntelliJ IDEA; WebStorm inherits all its features
    and peculiarities with which you can work conveniently with web-oriented languages,
    such as JavaScript, HTML, and CSS, as well as utilize essential-for-developers
    capabilities, such as refactoring, debugging, and version control management.
    Besides, WebStorm natively supports Node.js and comprises a bunch of innovations
    from previous versions, such as support for AngularJS, CoffeeScript and TypeScript,
    LESS, and SASS, and other great features.
  prefs: []
  type: TYPE_NORMAL
- en: This book is intended for you to learn about the newest features that WebStorm
    10 provides and use WebStorm to exploit cutting-edge web technologies. You will
    see how to develop high-quality web applications and discover best practices and
    timesaving hacks in the web development process. Ultimately, you will gain all
    the skills required to revolutionize your web development experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Find out what is new in WebStorm 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install and configure WebStorm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Become familiar with the WebStorm workspace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up and run a simple project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore WebStorm settings and preferences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is new in WebStorm 10?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WebStorm tends to improve and, thus, constantly acquires cutting-edge technologies,
    and Version 10 is quite demonstrative coming with an impressive arsenal of advanced
    features for full-scale web development:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Improved JavaScript support**: In this version of WebStorm, the support for
    JavaScript has been improved for larger projects with faster code highlighting
    and completion, enhanced ECMAScript 2015 support, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TypeScript**: This new version of WebStorm comes with support for versions
    1.4 and 1.5 and a built-in compiler'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spy-js improvements**: WebStorm 10 adds the possibility of creating application
    dependency diagrams and tracing languages compiled to JavaScript'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grunt**: You can easily navigate and edit the jobs inside WebStorm. The grunt
    integration has been reworked to provide a consistent experience whether or not
    you decide to use Grunt or Gulp for your project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Live Dart analysis view**: You can now perform on-the-fly analysis for your
    code through the Dart Analysis Server. All the results will be displayed directly
    in the editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the time of writing this book, JetBrains is already preparing to release
    WebStorm 11 that will bring cool features, such as Yeoman integration, advanced
    NPM integration, Webpack support, AngularJS 2 support, and improved JSX support
    to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: Installing WebStorm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I believe that you are intrigued by all these features and are now longing to
    try out WebStorm 10 to leverage them. We need to install the IDE. You can find
    the download package directly on the WebStorm website at [https://www.jetbrains.com/webstorm/](https://www.jetbrains.com/webstorm/).
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the strongest advantages of WebStorm is that it''s cross-platform. You
    can run WebStorm on the following operating systems:'
  prefs: []
  type: TYPE_NORMAL
- en: OS X 10.5 or higher, including 10.10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Windows 8/7/Vista/2003/XP (including 64-bit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GNU/Linux with GNOME or the KDE desktop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Besides, your machine should have the following configuration so as to painlessly
    run the IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: A minimum of 512 MB of RAM (1 GB of RAM is recommended)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intel Pentium III/800 MHz or higher (or compatible)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A minimum screen resolution of 1024 x 768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle (Sun) JDK 1.6+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the OS, the installation process varies slightly, but it still
    remains simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a Mac machine, you should:'
  prefs: []
  type: TYPE_NORMAL
- en: Mount the downloaded `WebStorm-10*.dmg` disk image file as another disk in your
    system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy WebStorm to your `Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On a Windows machine, you should:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the downloaded `WebStorm-10*.exe` file that starts the installation wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow all steps suggested by the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On a Linux machine, you should:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unpack the downloaded `WebStorm-10*.tar.gz` file using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Move the extracted or unpacked archive folder to the desired location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `WebStorm.sh` from the bin subdirectory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring WebStorm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to configure a couple of things to complete the installation and proceed
    to work in the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, it''s suggested you import your settings from a previous version. However,
    since we assume here that you are new to WebStorm, click on the **I don''t have
    a previous version of WebStorm or I don''t want to import settings** button, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring WebStorm](img/00002.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, you get a popup of the **WebStorm License Activation** dialog, where
    you can activate your license if it exists, buy it, or run a 30-day WebStorm trial.
    Read the license agreement and accept all its terms. The following screenshot
    shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring WebStorm](img/00003.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you are done with the license, in the **WebStorm Initial Configuration**
    dialog, you can set the **Keymap scheme** depending on what is habitual to you,
    the **IDE theme**, and the **Editor colors and fonts** depending on what you prefer
    more—dark or bright colors. Use the **Click to preview** section to evaluate whether
    the theme and colors you have set fit your needs and preferences or not. The shortcuts
    in this book are based on the **Mac OS X 10.5+** scheme. The following screenshot
    captures this discussion aptly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring WebStorm](img/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have WebStorm installed, so the time is ripe to look into its interface—the
    world where you are supposed to dwell when developing web applications. It is
    necessary that you understand the interface in order to be in your element and
    make your use in WebStorm efficient and pleasant.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first time that you run WebStorm or, later, when no project is open, you
    will see a welcome screen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Before you start](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can either create a new project, open an existing one, check out the code
    from version control systems, or choose a setting action to perform from the **Configure**
    drop-down list. To get familiar with the WebStorm user interface, let's create
    a new, simple HTML project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a new project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Create New Project** button, and the **New Project** dialog opens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give a name to our project, for example, `MyFirstWebProject`, and specify the
    folder for the project files, either manually or by choosing the folder using
    the browse (**…**) button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, leave the **Project type** field with the **Empty project** value—for
    now, we are just going to immerse in the interface and not create something really
    useful—and click on the **OK** button. The following screenshot depicts these
    steps:![Creating a new project](img/00006.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The WebStorm workspace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The WebStorm main window opens. It can be visually divided into seven logical
    parts, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The WebStorm workspace](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Instead of simply introducing them, let's create a very simple yet rather interesting
    project—that of automatically locating you with Google Maps. In the preceding
    image, you can see the final version of what we are going to do. So, after completing
    this section, you will have the same view.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what you can see now is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Menu line** (**1**), which has a bunch of options, including the standard
    **File**, **Edit**, **View** options and the WebStorm-specific **Code**, **Refactor**,
    **Run**, and **VCS** ones.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The main window is divided into two plainly distinguishable parts:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Project tool panel** (**4**) on the left-hand side, where you will see
    your project structure and file. You now only have a line with the project name,
    yet in the image, you can already see the hierarchical structure of our project.
    The Project tool panel correlates with another interface element, **Tool tabs**
    (**3**), which I will describe a bit later.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Editor panel** (**5**) on the right-hand side, where you will type your
    code.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Slightly above these two panels, you can find **Navigation toolbar** (**2**).
    For now, you have it with a sole breadcrumb, `MyFirstWebProject`, prepended with
    a typical folder icon and appended with a right-arrow shape, yet in the image,
    there are three breadcrumbs, where each one stands for the next hierarchy level.
    The Navigation toolbar is great for quick navigation and better understanding
    of the project file hierarchy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the very bottom, you can find **Status bar** (**7**), which contains some
    auxiliary information, such as denoting the current caret position in the editor
    (in the `line:column` format), line ending type (Windows-styled, Mac-styled, and
    so on), encoding the current file in the editor, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your project is as yet empty. Let''s get down to business! Add an HTML file
    to the project by right-clicking on the project name in the **Project** tool window,
    and name it `map.html` or simply `map`. This is encapsulated in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The WebStorm workspace](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that unambiguously indicating the extension is optional because it is automatically
    added depending on the kind of field chosen.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the editor, you see simple HTML5 starter code. There, let''s indicate where
    our map will be displayed. It will be a simple `div` element with the `map` ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I suggest you to keep from simply copying any code given in at least the first
    few chapters so that you acutely feel the advantages that WebStorm offers you.
  prefs: []
  type: TYPE_NORMAL
- en: In the `body` section, start typing `<div>`. As you type each symbol, what you
    see is that WebStorm suggests appropriate tags within the current content. You
    can navigate through the drop-down tag list with a mouse and select a tag with
    the *Enter* key in the same way that you can add attributes to the tag. When you
    type `>`, you will find that WebStorm automatically closes the tag if it is a
    pair tag. You should notice that WebStorm puts the cursor directly where you will
    further write the tag or attribute value; it slightly yet pleasantly saves some
    time. While you work on WebStorm, there is no need to save your files; by default,
    it will watch for changes in your files when you change your frame and save them
    automatically. This behavior can be set up/ modified in the **Preferences** |
    **Appearances & Behavior** | **System Settings** dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need JavaScript code to render the map. To add it, first create a new
    directory, `js`, in the project root directory and add there a JavaScript file,
    `map.js`. It opens in a new tab and contains a comment on the author and the creation
    time. Fill the file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The code we just created uses the Google Maps API's features, renders the map
    on your HTML page, locates you, and shows an **I am here!** message there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now pay attention to one more workspace element. It is located at almost
    the bottom of the IDE (6). Doesn''t this remind you of something? Yes, it is a
    standard Terminal of your OS, which is integrated into WebStorm. You can activate
    it in the bottom-left corner by either clicking on the **Terminal** button, or
    selecting the **Terminal** option in the drop-down option list when clicking on
    the ![The WebStorm workspace](img/00009.jpeg) icon, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The WebStorm workspace](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The terminal opens, and you can use it as if you were using the terminal built
    in to your OS. I want you to create one more directory—`css`—to keep the `map.css`
    file via the WebStorm Terminal. Simply execute the following commands, and both
    the `css` directory and `map.css` file appear in the **Project** tool panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You will now have a new directory named `css`. In this folder, create a new
    CSS file named `map.css` from the context dialog or **File** | **New** menu. There
    is no advantage in using the terminal in preference to context menu manipulations,
    or vice versa. Which you use is up to you, but since we are exploring an instrument,
    WebStorm, that is new to you, I will nevertheless prefer using its interface as
    much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now double-click on the `map.css` file in the project structure hierarchy and
    fill it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now we need to add the finishing touch—we should tell HTML to use our CSS and
    JavaScript files as well as point out where the Google Maps API is located. We
    can do it by simply adding the link and script tags to the `head` section. In
    the same way that it was described, you can use WebStorm's code completion feature
    to speed up your code typing. I want to mention one more feature now which is
    really essential here (we will talk about WebStorm's smart code completion in
    detail in the next chapter). It concerns those attributes that point to the other
    project files—in our case, it is the `src` and `href` attributes. There is no
    need to manually search for files to point at from these tags (it is especially
    appreciable in huge projects)—WebStorm does everything for you. When already being
    between quotes and waiting to input an attribute value, you can simply press on
    *Ctrl* + *Space* (on Windows) / *Ctrl* + *Space* (on Mac), and WebStorm displays
    only those files in the drop-down list that are possible in this context. If there
    are too many files, you can simply start typing the name of the file and WebStorm's
    smart completion does its work, too. Of course, it is a scintilla of what WebStorm
    can offer you. You will become familiar with a bundle of smart techniques in the
    next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the resulting HTML code is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The last yet not least important interface element is Tool tabs (3), which
    I have already mentioned, but only now, we can see the benefits of using it. Earlier,
    we were on the **Project** tab, where we could see the file and directory hierarchy.
    Change the tab for the **Structure** one, and for each file—`map.html`, `map.js`,
    and `map.css`—you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The WebStorm workspace](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is also a hierarchy, but not of filesystem elements; this is a content-based
    hierarchy. For HTML, it means tag hierarchy; for CSS, all styles are enumerated;
    and for JavaScript, you can see information about all objects and functions with
    parameters. Moreover, clicking on any line moves you directly to the place in
    the code where the element on this line is declared or exists.
  prefs: []
  type: TYPE_NORMAL
- en: Voilà, your first project within WebStorm is ready! Now it's time to run our
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Running the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Do you remember that the purpose of any IDE is to take as many actions as possible
    upon itself in order to help you to only concentrate on designing projects and
    typing code, instead of performing a huge number of minor yet numerous actions?
    It means that most of the time, you will stay within the four walls of the IDE,
    performing almost all actions from inside it. If you need to perform something
    outside the IDE, give a thought to whether you can perform it by means of the
    IDE. However, there is one thing for which you will need to leave the IDE—it is
    your browser. You need to see your results, don''t you? But even in this case,
    WebStorm helps you. When you were typing the HTML code, did you notice a browser
    icon list panel in the top-right corner in the editor? Here''s what the panel
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Yes, each icon is a shortcut to a browser executable, and if you click on any
    one, the corresponding browser opens with the current page. Note that only installed
    browsers will open.
  prefs: []
  type: TYPE_NORMAL
- en: The page with your current location opens at the address `http://localhost:63342/MyFirstWebProject/map.html`.
    Don't be afraid if you see a blank page. First, you need to allow your browser
    to get your location as it will ask about it. Then, you will see a map wherein
    your location will be indicated with the words **I am here!**.
  prefs: []
  type: TYPE_NORMAL
- en: The only question that remains is, what is the strange number after the `localhost`
    word? WebStorm provides the facility of a simple HTTP server running on the default
    port `63342`. You can change the port in IDE Settings.
  prefs: []
  type: TYPE_NORMAL
- en: Settings and preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, we are going to speak about customizing something not in the code, but
    in WebStorm itself, so I must tell you about the multifarious settings that WebStorm
    offers.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two similar yet separate settings windows:'
  prefs: []
  type: TYPE_NORMAL
- en: The settings of the whole IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The settings of the current project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the first case, to open the settings window, you can simply press either
    *Ctrl* + *Alt* + *S* (Windows) or *⌘* + *,* (Mac), and you will get the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Settings and preferences](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To access project settings, select **File** | **Default Settings**, and you
    will get something similar to the WebStorm settings, but with a reduced list of
    configurable options.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I should say at once that settings are not a thing that matters every day, so
    you needn't think of it as something to necessarily be utterly and completely
    configured—in most cases, everything is already tuned up; moreover, if something
    needs configuring, it will pop up as an information balloon with a direct link
    to a setting.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to configure something, what you will need to do is quickly find
    the necessary setting. To do that, start typing its name in the search field,
    and, as you type, the first matching setting gets highlighted, and the corresponding
    page is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: But let's stroll further through the settings. I am not aiming to describe all
    the settings, but still I am going to cover the most important ones.
  prefs: []
  type: TYPE_NORMAL
- en: Themes and colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the stage of initial configuration, you chose a theme and the colors you
    wanted your IDE to have. Maybe during the process of programming, you realized
    that you'd better use another theme and/or color.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to change a theme of the IDE, go to the **Appearance** subsection
    of the **Appearance & Behavior** section. There, you will find the **Theme** drop-down
    list where you can change your current theme, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Themes and colors](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to change a color for a certain section of your IDE, you can go
    to the **Colors & Fonts** subsection of the **Editor** section and try various
    parameters there so as to find the ones that suit you. You can observe the changes
    in real time by clicking on the **Apply** button. This discussion is aptly depicted
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Themes and colors](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Keymap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The keymap is that very thing that developers must know and feel on the tips
    of their fingers because the proficiency level to use shortcut keys is directly
    proportional to the speed of development. It is evident that each person has his
    own preferences of what key combination to use in each case. So, the IDE should
    take into account the necessity to customize the keymap so as to suit a larger
    number of developers.
  prefs: []
  type: TYPE_NORMAL
- en: WebStorm offers you comprehensive keymap management, which you can access in
    the **Keymap** subsection of the **Appearance & Behavior** section. For each menu
    item and command accessible inside the IDE, you get an opportunity to change the
    default key combination. Of course, WebStorm prevents you from overwriting and
    overriding the already existing combinations with a warning message.
  prefs: []
  type: TYPE_NORMAL
- en: To add a new shortcut or to change an existing one, you need to just select
    what you are going to process and click on the **Remove** or/and **Add Keyboard
    Shortcut** button—depending on what you intend to do. Then, simply press the combination
    that you would like to set for a certain action, and that's all.
  prefs: []
  type: TYPE_NORMAL
- en: This is great news for those who migrated from one OS to another or from one
    IDE to WebStorm. If you are already used to a keymap specific to your previous
    workspace, you need to first check the **Keymap** options list, where you can
    reliably find an option that satisfies you. Among the options are Emacs, Visual
    Studio, Eclipse, NetBeans, Mac OS X, Linux, Windows, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Code Style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the **Code Style** subsection of the **Editor** section, you can see the
    possibility of customizing the appearance of each language in which you an write
    the code using WebStorm: JavaScript, CoffeeScript, CSS, Haml, JSON, Dart, XML,
    YAML, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Settings about the languages that you can change are uncountable. You can set
    the indent size, indent type, and if you are using tabs, their size, where to
    put or not put spaces, how to perform wrapping, and lot of other aspects. On the
    customization panel for each language is a preview of what you get if you change
    something.
  prefs: []
  type: TYPE_NORMAL
- en: Languages & Frameworks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is a **Languages & Frameworks** section in settings that is responsible
    for the technologies considered to be used. Here, you can specify the executables
    for the necessary frameworks and language interpreters, set the default parameters
    to run with, add packages for them, and so on. The following screenshot encapsulates
    the discussion aptly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Languages & Frameworks](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Plugins are an important part of WebStorm because they can dramatically expand
    the core functionality of the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be selective and do not install the plugins one by one. Remember that the more
    plugins you install, the more the time it will take you to launch the IDE, and
    the poorer the performance it will have. But don't be afraid of installing plugins—each
    one adds just a couple of dozens of milliseconds to the startup time of your IDE,
    so you will not experience performance degradation unless you install only necessary
    plugins. Up to 10-15 plugins is fine for performance as well as enough for a typical
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can manage plugins in the **Plugins** section of the **Preferences** window,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plugins](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The plugins that are checked are already installed and accessible inside the
    IDE. If you need more plugins, there are two ways of getting them. You can either
    browse them in online repositories or install already downloaded or engineered
    plugins directly from the disk.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between the **Install JetBrains plugin…** window and the **Browse
    repositories…** window is that the second one allows you to install any plugin
    available in online repositories, whether it be third-party or of JetBrains.
  prefs: []
  type: TYPE_NORMAL
- en: There is nothing about it in the installation process of a plugin. You need
    to just find what you want and simply click on the **Install Plugin from disk…**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: Version Control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any development process, be it web, desktop, or whatever else, is inconceivable
    without version control. That commits IDEs to integrate various version control
    systems, and WebStorm is not an exception. WebStorm supports **Git**, **Subversion**,
    **Mercurial**, **CVS**, and **Perforce** besides providing a binding with your
    GitHub account. Besides, WebStorm provides you with the facility of the so-called
    "local history", which enables you to track any changes in the code by means of
    the IDE, without using dedicated VCSes. Despite the differences between these
    VCSes, WebStorm allows you to use them in similar ways. As an IDE, WebStorm, of
    course, takes a lot of issues, so dealing with VCSes is visual and becomes even
    simpler than via the standard command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can decide which actions require confirmation (in the following image),
    specify which ones can run in the background, configure what is to be ignored,
    manage history cache handling, and so on. Then, you will be able to unnoticeably
    yet skillfully manage your VCS using just shortcut keys. **Version Control** is
    depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Version Control](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Proxy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may need to use WebStorm at work. A lot of companies are using internal
    networks, so it may turn out in a way that you will not be able to perform most
    Internet-oriented actions without a proxy. There may also be something else, which
    prevents you from comfortably working on the Internet. So, let's learn how to
    set up a proxy in WebStorm.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of manually searching where the proxy settings are located, let's query
    the search box about it, entering the word `proxy` there. It will instantly not
    only show where the proxy settings are, but also filter out only the menu sections
    containing "proxy". Moreover, it highlights all the parameters that contain the
    word "proxy", so we can rapidly find what we are searching for.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the proxy to process connections is a small matter. You need to fill out
    the blank fields as displayed here and click on the **Apply** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Proxy](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to install and then prepare WebStorm for the
    development process. We implemented a simple web application, and by the example
    of the files that we created and the actions we performed, we scrutinized the
    WebStorm interface and the means to customize the most significant elements of
    it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to discover a bunch of the most essential
    and smart features that drastically improve your efficiency and, thus, makes WebStorm
    really great for web development.
  prefs: []
  type: TYPE_NORMAL
