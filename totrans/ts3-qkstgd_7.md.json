["```js\nnpm install @types/jquery --save-dev\n```", "```js\n\"declaration\": true\n```", "```js\n{\n\"name\": \"your-library\",\n\"main\": \"./lib/main.js\",\n\"types\": \"./lib/main.d.ts\"\n}\n```", "```js\ndeclare module \"redux\" {\n   export interface Dispatch<S> {\n   <R, E>(asyncAction: ThunkAction<R, S, E>): R;\n }\n}\n```", "```js\nnamespace Merge {\n export interface I1 { m1: string; }\n}\n\nnamespace Merge {\n export interface I2 { m2: string; }\n}\n```", "```js\nnamespace Merge {\n   export interface I1 { m1: string; }\n   export interface I2 { m2: string; }\n}\n```", "```js\ninterface Mergeable {\n m1: string;\n}\n\ninterface Mergeable {\n m2: string;\n}\nconst mergeInterface: Mergeable = { m1: \"\", m2: \"\" }\n```", "```js\nexport interface Album { m1: string; m2: number; }\nexport class Album {\npublic m2: number = 12;\n}\nconst a = new Album();\na.m1; // Not implemented but compile.\na.m2;\n```", "```js\nfunction functionInJavaScript(param: string): string {\n  return functionInJavaScript.variableOfFunction + param;\n}\nnamespace functionInJavaScript {\n  export let variableOfFunction = \"\";\n}\n```", "```js\ndeclare global {\n   interface Array<T> {\n       toObservable(): Observable<T>;\n   }\n}\n```", "```js\ndeclare function myGlobalFunction(p1: string): string;\n```", "```js\nLet var1:string = myGlobalFunction(“test”);\n```", "```js\ninterface myGlobalType{\n   name: string;\n}\n```", "```js\nLet var1: myGlobalType={name:”test”};\n```", "```js\ndeclare namespace myScope{\n  let var1: number;\n  class MyClass{\n  }\n}\n\nlet x: number = myScope.var1;\nlet y: myScope.MyClass = new myScope.MyClass();\n```", "```js\ndeclare namespace myScope{\n interface MyObject{\n    x: number;\n }\n\n type data = string;\n function myFunction():void{};\n}\n```", "```js\nlet s: myScope.MyObject = { x: 5 };\nlet x: myScope.data = “test”;\nmyScope.myFunction();\n```", "```js\nexport as namespace myScope;\n```", "```js\nexport function myFunction(): void;\nexport interface MyObject{\n x: number;\n}\nexport let data: string;\n```", "```js\nimport {myFunction, MyObject, data} from “myScope”;\nmyFunction();\nx:MyObject = {x:1};\nconsole.log(data);\n```", "```js\nexport namespace myProperty{\n   export function myFunction2(): void;\n}\n```", "```js\nImport {myProperty} from “myScope”;\nmyProperty.myFunction2();\n//or\nImport * from my from “myScope”\nmy.myProperty.myFunction2();\n```", "```js\ndeclare module \"modulenamehere\" {\n  type Msg = (params: {}) => string;\n  type SrcMessage = string | SrcObject;\n  interface SrcObject {\n  m1: SrcMessage;\n}\n\nclass MessageFormat {\n  constructor(message: string);\n  constructor();\n  compile: (messages: SrcMessage, locale?: string) => Msg;\n}\n\nexport = MessageFormat ; // CommonJs/AMD export syntax\n}\n\n// Usage:\n\nimport MessageFormat from \"modulenamehere\";\nconst mf = new MessageFormat(\"en\");\nconst thing = mf.compile(\"blarb\");\n```", "```js\ndeclare module \"*\";\n```", "```js\ndeclare module \"react-summernote\" {\n  import * as React from \"react\";\n  let ReactSummernote: React.ComponentClass<any>;\n  export default ReactSummernote;\n}\n```", "```js\nimport * as extendMe from \"moduleToExtend\";\nimport * as other from \"anotherModule\";\n\ndeclare module \"moduleToExtend\" {\nexport function theNewMethod(x: extendMe.aTypeInsideModuleToExtend): other.anotherTypeFromAnotherModule;\nexport interface ExistingInterfaceFromModuleToExtend {\nnewMember: string;\n}\n\nexport interface NewTypeForModuleToExtend {\nsize: number;\n}\n}\n```"]