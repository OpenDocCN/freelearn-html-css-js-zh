- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: External Modules and npm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Node Package Manager** (**npm**) is one of the most popular software registries
    around the world. There are more than two million packages available for us to
    use. In this chapter, we will explore how to use npm commands and NPX, as well
    as what the isomorphic libraries are and how to choose the correct dependencies
    for our project, so we can minimize the risks. As a final practice, you will publish
    a package to npm.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore how to use external modules in our projects.
    This will allow us to reuse code from other developers and save time and effort.
    We will explore together the vast ecosystem of Node.js modules, and we will learn
    how to choose the correct modules for our projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up, here are the main topics that we will explore in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing the application with `package.json`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing the correct dependencies for your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding `package-lock.json`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing dependencies versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building Isomorphic JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using npm scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing packages directly with NPX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: npm alternatives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing your first package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code files for the chapter can be found at [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)
  prefs: []
  type: TYPE_NORMAL
- en: Check out the code in action video for this chapter on [https://youtu.be/B-7vZyAfi2U](https://youtu.be/B-7vZyAfi2U)
  prefs: []
  type: TYPE_NORMAL
- en: Managing the application with package.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you install Node.js, npm is installed as well. npm is the package manager
    for Node.js. It is used to install, update, and remove packages from our projects.
    It also allows us to publish our own packages.
  prefs: []
  type: TYPE_NORMAL
- en: A package is a JavaScript library that we can use in our applications to speed
    up the process of developing our own projects. There are many different types
    of packages, from very simple ones such as a function that can tell us whether
    a number is odd or not ([https://www.npmjs.com/package/is-odd](https://www.npmjs.com/package/is-odd)),
    to very complex libraries that can help us to use Firebase ([https://firebase.google.com/?hl=es](https://firebase.google.com/?hl=es))
    to store information from our users ([https://www.npmjs.com/package/firebase](https://www.npmjs.com/package/firebase)).
    It is quite common to use many libraries in a single project, and some companies
    create their own private libraries to distribute utilities, configurations, and
    many more things across their many code bases.
  prefs: []
  type: TYPE_NORMAL
- en: The `package.json` file is the manifest file for our project. It contains the
    metadata of our project, such as the name, version, description, author, and license.
    It also contains the dependencies of our project, both the runtime dependencies
    and the development dependencies, and it contains the scripts that we can run
    with npm.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create a `package.json` file, we can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command will ask us a few questions, and then it will create the `package.json`
    file. For an even faster creation, you can use `npm init -y` to automatically
    create the file with the default values suggested.
  prefs: []
  type: TYPE_NORMAL
- en: We can also create the `package.json` file manually, but it is recommended to
    use the `npm` `init` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `package.json` file can be very simple, like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: But it can also be a large file, with one or many dependencies, scripts, and
    additional metadata. Currently, there is no official standard for the `package.json`
    file, but there are efforts to create it in the Standards Working Group from the
    OpenJS Foundation ([https://github.com/openjs-foundation/standards/issues/233](https://github.com/openjs-foundation/standards/issues/233)).
  prefs: []
  type: TYPE_NORMAL
- en: Currently, we can use the npm documentation to know what fields we can use in
    the `package.json` file. The documentation is available at [https://docs.npmjs.com/cli/v7/configuring-npm/package-json](https://docs.npmjs.com/cli/v7/configuring-npm/package-json).
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, we will see some of the most important fields in the `package.json`
    file and how to use them in our projects.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the correct dependencies for your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is true that the npm ecosystem is very solid and growing every day. But it
    is also true that many packages are not maintained anymore, or that include security
    vulnerabilities and performance issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'The community is aware of this and there are plenty of jokes and memes about
    this topic. For example, the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – npm Delivery by MonkeyUser – a classic meme that shows how many
    dependencies we tend to include in our projects (https://www.monkeyuser.com/2017/npm-delivery/)](img/B21678_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – npm Delivery by MonkeyUser – a classic meme that shows how many
    dependencies we tend to include in our projects (https://www.monkeyuser.com/2017/npm-delivery/)
  prefs: []
  type: TYPE_NORMAL
- en: While this is a joke based on the huge number of dependencies and sub-dependencies
    that we install on an average project, it is true that we need to be careful when
    choosing the dependencies for our projects. In this section, we will see how to
    choose the correct dependencies for our projects.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Most modules depend on other modules, and those modules depend on other modules,
    and so on. This is called the **dependency tree**. When we install a module, we
    are installing all the dependencies of that module, and all the dependencies of
    the dependencies, and so on. This is why it is important to choose the correct
    dependencies for our projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before choosing a dependency, we need to ask ourselves the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the risks associated with choosing a bad dependency?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the criteria that I should use to choose a dependency?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s see the answers to these questions!
  prefs: []
  type: TYPE_NORMAL
- en: Risks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our modern world, we are used to using dependencies. It will be very hard
    or directly impossible to build modern web applications without using dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we choose a dependency, we are taking a risk. Let’s see what the main
    risks associated with choosing a bad dependency are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security vulnerabilities**: A dependency can have security vulnerabilities
    or even be a malicious piece of code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance issues**: A dependency can have performance issues and generate
    memory leaks that can affect the performance of our application and even crash
    it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintenance issues**: A dependency cannot be maintained anymore, and it can
    be deprecated in the future. This can cause our application to stop working in
    the future or prevent us from upgrading other dependencies or Node.js itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In 2020, I published a controversial blog post called *What is a backdoor?*
    *Let’s build one with Node.js* ([https://snyk.io/blog/what-is-a-backdoor/](https://snyk.io/blog/what-is-a-backdoor/)).
    In that blog post, I explained that a backdoor is a piece of code that allows
    us to access a system without going through the authentication process. I also
    explained how to build a backdoor with Node.js using a few lines of code and I
    demonstrated how easy was to publish and distribute a malicious package.
  prefs: []
  type: TYPE_NORMAL
- en: I know that security is a very sensitive topic, especially if you are starting
    your journey in web development. [*Chapter 15*](B21678_15.xhtml#_idTextAnchor394)
    of this book is dedicated to security, and we will explore security in depth there.
  prefs: []
  type: TYPE_NORMAL
- en: In order to minimize the risks, we need to choose the correct dependencies for
    our projects. Let’s see how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Good criteria
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many criteria that we can use to choose the correct dependencies for
    our projects. In this section, we will see some of the most important ones.
  prefs: []
  type: TYPE_NORMAL
- en: What are we trying to avoid?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We try to avoid the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Packages that are not maintained anymore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packages that have known security vulnerabilities and are not patched
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packages that depend on a lot of packages or have low-quality dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packages that are not popular or are low quality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packages with license issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What evidence do we have?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We are going to do some basic OSINT before we install any package, and we are
    going to check two data sources in detail: the npm website and the GitHub or code
    repository.'
  prefs: []
  type: TYPE_NORMAL
- en: OSINT is intelligence produced by collecting and analyzing public information
    with the purpose of answering a specific intelligence question. (Ritu Gill, [https://www.sans.org/blog/what-is-open-source-intelligence/](https://www.sans.org/blog/what-is-open-source-intelligence/).)
  prefs: []
  type: TYPE_NORMAL
- en: Real example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this book, we are going to use the Express library. Express is a very popular
    library for Node.js, and it is used to build web applications and APIs. In this
    image, we can see in detail how the Express library is showcased on the npm website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Express library package in npm (https://www.npmjs.com/package/express)](img/B21678_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Express library package in npm (https://www.npmjs.com/package/express)
  prefs: []
  type: TYPE_NORMAL
- en: 'From the npm website, we can see the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: There are 31 dependencies, most of which are very popular and well-maintained
    by the same Express maintainers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are +77k dependents, which means that many other package authors are using
    Express in their projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are 271 versions published
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are almost 31M weekly downloads, which means that Express is a very popular
    package for the Node.js community
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An MIT license, which is a permissive license and valid as open source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clear and solid documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was last published few days ago, which means that the package is maintained
    and updated regularly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From npm, we can access the GitHub repository of the package. In the following
    image, we can see in detail how the Express library is showcased on the GitHub
    website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21678_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Express library repository in GitHub (https://github.com/expressjs/express)
  prefs: []
  type: TYPE_NORMAL
- en: 'From the GitHub website, we can see the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: It has +10k forks, which means that many other developers are contributing to
    the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has +60k stars, which means that the project is popular in the community
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has +5k commits, which means that the project has a long history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has +3k issues closed, +120 issues open, +1k pull requests closed, and +60
    pull requests open, which means that the project is active
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has almost 300 contributors, which means that many other developers are contributing
    to the project and evolving it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we can see, we have a lot of information from the npm website and the GitHub
    repository at least to make a first decision, especially if we want to compare
    several packages. The offer is huge and sometimes it is difficult to choose the
    correct package.
  prefs: []
  type: TYPE_NORMAL
- en: Exceptions to the rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need to be quite flexible with the rules that we have seen before because
    very often we can find exceptions to the rules.
  prefs: []
  type: TYPE_NORMAL
- en: For example, johnny-five ([https://www.npmjs.com/package/johnny-five](https://www.npmjs.com/package/johnny-five))
    is a great library to use when working with Arduino and Raspberry Pi in Node.js.
    But the total download per week is very low. In this case, we need to consider
    that there are much less developers working with Arduino and Raspberry Pi than
    developers working with Express, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Another example is Lodash ([https://www.npmjs.com/package/lodash](https://www.npmjs.com/package/lodash)),
    which is a very popular library and is used by many other packages. But the last
    version was published three years ago. In this case, we need to consider that
    the project is mostly completed, and it is not evolving anymore and only making
    new releases when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecation notices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, we can find a package that is deprecated. In this case, we should
    avoid using it. We can find a deprecation notice in the npm website, in the GitHub
    repository, or when we install the package.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21678_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Image from the npm documentation that shows how the deprecation
    warnings are shown in npm (https://docs.npmjs.com/packages-and-modules/updating-and-managing-your-published-packages/deprecate-package.png)
  prefs: []
  type: TYPE_NORMAL
- en: Very often, in the deprecation notice, we can find a recommendation to use another
    package. In this case, we should follow the recommendation.
  prefs: []
  type: TYPE_NORMAL
- en: Tooling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the previous OSINT analysis, we answered most of our questions, but we didn’t
    answer questions regarding known vulnerabilities. These days, I use two tools
    to check known vulnerabilities: *Snyk* ([https://snyk.io/](https://snyk.io/))
    and *socket.dev* ([https://socket.dev/](https://socket.dev/)).'
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 15*](B21678_15.xhtml#_idTextAnchor394), we will see how they are
    used in detail. In order to use these tools properly, you will need to understand
    how the dependency tree works and how the vulnerabilities are classified. Otherwise,
    these tools can be very confusing for beginners.
  prefs: []
  type: TYPE_NORMAL
- en: I will suggest to say "In the next section, we will learn how to install the
    dependencies in our projects.
  prefs: []
  type: TYPE_NORMAL
- en: Installing dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to choose the correct dependencies for our projects, and
    we have a `package.json` we can start installing our dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Locally or globally
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can install dependencies in two ways: locally or globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '`node_modules` folder of our project. For example, `express` is a local dependency
    of our application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Globally**: These are dependencies that are installed in the global folder
    of our system, so they become available from anywhere in our system, such as Node.js
    binary, which is available as soon as we open the terminal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We would prefer to install dependencies locally because it is easier to manage
    the dependencies of our project and to avoid conflicts between different projects.
    We will install dependencies globally only when it is strictly necessary.
  prefs: []
  type: TYPE_NORMAL
- en: One example of a dependency that we will install globally is `yeoman`, a scaffolding
    tool, which we will use to generate a new project.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency or development dependency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can install the local dependencies in two ways: as a dependency or as a
    development dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '`express` is a dependency of our application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`standard`, which is a linter library, will be used only while developing the
    code but not when running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'There is an additional mode to install dependencies: **peer dependencies**.
    We will not cover this mode in this book, but you can find more information and
    use cases in this blog post: [https://nodejs.org/en/blog/npm/peer-dependencies](https://nodejs.org/en/blog/npm/peer-dependencies).'
  prefs: []
  type: TYPE_NORMAL
- en: The segmentation of dependencies is very important because it allows us to install
    only the dependencies that we need in each environment and to reduce the size
    of our application and attack surface.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new dependency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For example, if we want to install the `express` package, we can use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can install the `standard` package as a development dependency. Development
    dependencies are those dependencies that we need when we are actually coding the
    project, but they are not used when the project is being deployed or distributed
    as a library. As `standard` is a linting tool, we will use it only when adding
    or changing code, but we won’t use it while the application is running. This segmentation
    of the dependencies has a lot of benefits as our final applications will be smaller
    (ignoring the development dependencies) and more secure as we have less external
    code. We can use the `-D` or `--save-dev` for installing development dependencies
    arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the `package.json` file has been updated with the new dependencies
    in two different sections: `dependencies` and `devDependencies`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: One new file, `package-lock.json`, has also been added and the `node_modules`
    folder has been created with the dependencies structured in folders and files.
  prefs: []
  type: TYPE_NORMAL
- en: We will explore in the next section how the `package-lock.json` file works.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `node_modules` should not be included with the project source code if you
    are using Git or any other system to distribute your source code. It is good practice
    to include the `node_modules` folder in the `.gitignore` file to avoid including
    it in the repository. If you need a solid `.gitignore` file for Node.js, you can
    generate one ([https://www.toptal.com/developers/gitignore/api/node](https://www.toptal.com/developers/gitignore/api/node)).
    We should ignore `node_modules` because the folder can be huge, and have many
    files and a heavy weight, but also because we can install the dependencies at
    any time, as soon as we keep our changes in `package.log`, we will be able to
    install the correct dependencies
  prefs: []
  type: TYPE_NORMAL
- en: 'Global dependencies are installed with the `-g` or `–``global` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the list of global dependencies with the `list` or `ls` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this command will be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Installing all the dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we want to install all the dependencies that are listed in the `package.json`
    file, we can use the `install` or `i` command without any argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use the `--only` argument to install only the dependencies or the
    development dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the production environments, we want to avoid using development tools because,
    although this will make our applications smaller and more secure, in our development
    environments we will require all the dependencies to properly do our job.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore how to properly remove dependencies from
    our projects.
  prefs: []
  type: TYPE_NORMAL
- en: Removing dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can remove a dependency using the `uninstall` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This command will remove the dependency from the `package.json` and `package-lock.json`
    files and the `node_modules` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Global dependencies are removed with the `-g` or `--``global` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the next section we will explore how the `package-lock.json` file can help
    us to manage our dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the package-lock.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Historically, the `package.json` file was the only file that we needed to manage
    the dependencies of our project. But this file has a problem: it doesn’t contain
    the exact version of each sub-dependency that we have installed in our project
    and was also quite slow to install the dependencies.'
  prefs: []
  type: TYPE_NORMAL
- en: Not having the exact version of each sub-dependency can be a problem because
    if we install the same dependency in two different environments, we can end up
    with different versions of the same dependency. The lack of immutability in our
    dependencies can lead to unexpected errors and bugs that are quite complicated
    to debug.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, by default, when we install a dependency the version that is recorded
    in `package.json` includes a caret `^` symbol, such as `"express": "^4.18.3"`.
    This symbol means that we can install any version of the dependency that is compatible
    with the version that is recorded in `package.json`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `package-lock.json` file is a file that is automatically generated when
    we install a new dependency and also speeds up the installation of the dependencies
    because it contains the exact version of each dependency and the source where
    it comes from.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file can be huge, but the structure per dependency is quite simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the exact `version` is included, as well as the `resolved` and
    `integrity` fields that are used to validate the origin of the dependency and
    to avoid manipulations with the data in transit as `integrity` provides a checksum.
    Also, the `dependencies` field is included to list the sub-dependencies with the
    exact version.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`package-lock.json` should be distributed with the source code of the project
    and should be committed to the repository; basically, it should be treated as
    `package.json` in terms of distribution.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to classify and organize the dependencies in our projects,
    it is time to explore how to install specific versions and notice outdated dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Managing dependencies versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we want to install a specific version of a package, we can use the @ symbol.
    You can be as specific as you want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Outdated dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Eventually, the dependencies that we have installed in our project will be
    outdated, and we will need to update them. To check if we have any outdated dependencies,
    we can use the `outdated` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will list all the outdated dependencies, as well as the current
    version, the wanted version, and the latest version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now that we are clear on how to handle outdated dependencies it is time to explore
    in the next section how to create isomorphic JavaScript code that can be executed
    in all environments (browsers and Node.js)
  prefs: []
  type: TYPE_NORMAL
- en: Building Isomorphic JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Isomorphic JavaScript is a term that is used to describe JavaScript code that
    can run both in the browser and in Node.js. In other words, it is a library that
    can be used in both environments. In order to do that, you will limit yourself
    to the features that are available in both environments.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can’t use the `fs` module in the browser, and you can’t use
    the `window` object in Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, we install dependencies in our projects that are designed to be used
    in the browser and we try to use them in Node.js, and vice versa. This is a common
    mistake that we need to avoid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the projects will specify which environment they are designed for.
    Here is an example from Lodash ([https://lodash.com/](https://lodash.com/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21678_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Image from the Lodash documentation that explains in detail how
    to install the library in both environments ([https://lodash.com/](https://lodash.com/))
  prefs: []
  type: TYPE_NORMAL
- en: It is quite clear that lodash is designed to be used in Node.js and in the browser,
    and from the figure you can see how to install it in each environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how we can use npm scripts to improve our
    developer experience while building Node.js projects.
  prefs: []
  type: TYPE_NORMAL
- en: Using npm scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'npm scripts are commands that we can define in the `package.json` file. These
    commands can be executed using the `run` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This is great because we can define our own commands and we can use them to
    automate tasks. For example, we can define a command to run the linter in our
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: npm scripts are basically shortcuts to run commands that we can run manually
    in the terminal. So, you can build quite complex things such as starting/stopping
    a server, running tests, preparing infrastructure, and deploying your application.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very powerful feature that we can use to automate tasks in our projects,
    especially when we are working in a team, and we want to make sure that everyone
    is running the same commands or with continuous integration tools.
  prefs: []
  type: TYPE_NORMAL
- en: We will use npm scripts in the next chapters to automate tasks in our projects.
  prefs: []
  type: TYPE_NORMAL
- en: Executing packages directly with NPX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since version 5.2.0, npm comes with a new tool called `npx`, which allows us
    to execute packages without installing them globally. This is great for one-time
    commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say that we have a project with outdated dependencies, and we want to
    update them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As we saw in the previous section, we can use the `npm outdated` command to
    check which dependencies are outdated, but the upgrade process is a bit more complex
    as we need to upgrade each dependency manually or modify the `package.json` directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, there is a package called npm-check-updates ([https://www.npmjs.com/package/npm-check-updates](https://www.npmjs.com/package/npm-check-updates)),
    which allows us to upgrade all the dependencies in our project. Let’s learn how
    to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will list all the outdated dependencies, and will show the new
    version that is available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can use the `-u` flag to upgrade all the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `npm-check-updates` package offers a lot of options to customize the upgrade
    process, you can check the documentation at [https://www.npmjs.com/package/npm-check-updates](https://www.npmjs.com/package/npm-check-updates)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dependencies were upgraded in `package.json`, we just need to run `npm
    install` to make the changes take effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can take an extra step and automate this process using npm scripts,
    so in the future, we can speed up this process, and we do this just by adding
    the following scripts to your `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This was a great example of how you can combine npm scripts and npx to automate
    tasks in your projects and increase the developer experience for other contributors
    as they can run the same command to upgrade the dependencies when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Also, this combination is great for continuous integration tools, as you can
    run the same commands in your CI pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: But the most important thing is that you don’t need to install any global or
    local packages, so you keep your dependencies to a minimum.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section we are going to learn more about the current alternatives
    to npm.
  prefs: []
  type: TYPE_NORMAL
- en: npm alternatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the years, npm has become the standard package manager for JavaScript,
    but there are other alternatives that you can use in your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the alternatives are compatible with the npm registry, so you can use
    the same packages that you use with npm and you can switch between them without
    any problem.
  prefs: []
  type: TYPE_NORMAL
- en: Each alternative has its own advantages and disadvantages, so you need to evaluate
    which one is the best for your project. Most of the time, npm will be the best
    option, but it is good to know that there are other alternatives designed to solve
    very specific scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s introduce some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: Yarn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Yarn** ([https://yarnpkg.com/](https://yarnpkg.com/)) is a package manager
    created by Facebook and released in 2016\. It was created to solve some specific
    problems that npm had at that time, but over the years, npm has improved a lot
    and it has solved most of the problems that Yarn solved originally.'
  prefs: []
  type: TYPE_NORMAL
- en: PNPM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`node_modules` folder, it creates a single folder for all the dependencies
    in the project. This approach has some advantages such as disk space usage and
    network usage.'
  prefs: []
  type: TYPE_NORMAL
- en: Verdaccio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Verdaccio** ([https://verdaccio.org/](https://verdaccio.org/)) is a private
    npm registry that you can use to host your own packages. This is great if you
    want to have a private registry for your company or if you want to have a mirror
    of the npm registry.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Verdaccio is a great tool if you have connectivity issues or if you want to
    experiment with the npm registry before publishing the packages.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section we will learn how to publish and distribute our own packages
    so we can re-use our code across projects. Also, other developers can use the
    libraries that we built.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing your first package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how to install packages from the npm registry, but we can also
    publish our own packages. This is great if we want to share our code with other
    developers or if we want to reuse our code in other projects.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s see how to publish our first package in the npm registry.
  prefs: []
  type: TYPE_NORMAL
- en: Registries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we start, we need to understand how the npm registry works. The npm registry
    is a public repository where all the packages are stored. This is the default
    registry that npm uses, but you can also use other registries such as Verdaccio
    ([https://verdaccio.org/](https://verdaccio.org/)) or GitHub Packages ([https://github.com/features/packages](https://github.com/features/packages)).
  prefs: []
  type: TYPE_NORMAL
- en: We will use the npm registry in this chapter, but the process is very similar
    for other registries. Some developers publish their packages in multiple registries,
    so you can choose the one that you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you want to publish a private package, it is more common to use a private
    registry such as Verdaccio or GitHub Packages, but if you want to publish a public
    package, the npm registry is the best option.
  prefs: []
  type: TYPE_NORMAL
- en: npm account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can publish our packages, we need to create an account in the npm
    registry. You can create an account on the npm website ([https://www.npmjs.com/signup](https://www.npmjs.com/signup))
    by following the steps in the next section ([https://docs.npmjs.com/creating-a-new-npm-user-account](https://docs.npmjs.com/creating-a-new-npm-user-account)).
  prefs: []
  type: TYPE_NORMAL
- en: Prepare the package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, let’s start by creating a new folder for our package with the name `my-first-package`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: You will need to replace `@USERNAME` with your npm username, which is `@ulisesgascon`
    in my case, and also change the `author` field with your name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we will create an `index.mjs` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to include a `README.md` file with some information about
    the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]bash'
  prefs: []
  type: TYPE_NORMAL
- en: npm install @USERNAME/demo-package
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]js'
  prefs: []
  type: TYPE_NORMAL
- en: import { sum } from '@USERNAME/demo-package'
  prefs: []
  type: TYPE_NORMAL
- en: console.log(sum(1, 2))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Replace `@USERNAME` with your npm username as we did previously with the `package.json`.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very simple package, but it is enough to show how to publish a package
    in the npm registry.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have our package ready, we can publish it in the npm registry.
    To do that, we need to run the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `--dry-run` flag is optional, but it is a good idea to use it the first
    time to see what is going to happen. This command will show you the files that
    are going to be published and some information about the package.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there is a file that is not needed, the `.vscode/settings.json`
    file. This file is used by Visual Studio Code to configure the editor, but it
    is not needed in the package. We can remove it by adding a `.npmignore` file with
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This file will tell npm to ignore the `.vscode` folder when publishing the
    package. If you run the command again, you will see that the file is not included
    in the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Publish the package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have our package ready, we can publish it in the npm registry.
    To do that, we need to run the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `--access public` flag makes this package available to the world, so anyone
    with internet access can download your package.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see in the output that the package is published in the npm registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you go to the npm website ([https://www.npmjs.com/](https://www.npmjs.com/))
    and search for your package, you will see it in the search results. You can also
    access the package page directly using the following URL: `https://www.npmjs.com/package/@USERNAME/demo-package`
    (replace `@USERNAME` with your npm username, which is `@ulisesgascon` in my case).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21678_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – The published package in the npm registry
  prefs: []
  type: TYPE_NORMAL
- en: Avoid the scoped packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is possible to publish packages without a scope in the npm registry, but
    it is difficult to find a name that is not already taken. For that reason, it
    is a good idea to use the scoped packages, such as `@ulisesgascon/demo-package`
    in our case.
  prefs: []
  type: TYPE_NORMAL
- en: But nothing stops you from publishing a package without a scope such as `my-great-demo-package`
    if the name is not already taken. But if you do that, you will need to be careful
    with the name, because once you publish a package, you can’t change the name.
    So, if you want to change the name, you will need to publish a new package with
    the new name and deprecate the old one.
  prefs: []
  type: TYPE_NORMAL
- en: Release new versions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s make some changes to improve our package. We will add a new `multiply`
    function to the `index.mjs` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also include it in the `README.md` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]js'
  prefs: []
  type: TYPE_NORMAL
- en: import { sum, multiply } from '@ulisesgascon/demo-package'
  prefs: []
  type: TYPE_NORMAL
- en: console.log(sum(1, 2))
  prefs: []
  type: TYPE_NORMAL
- en: console.log(multiply(5, 2))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are ready to publish again the package using `npm publish --access
    public` again, but there is an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We forgot to change the version number in the `package.json` file, so we need
    to do that before publishing the package again. We should always follow semantic
    versioning ([https://semver.org/](https://semver.org/)), so in this case we will
    change the version number to `1.1.0` as it is a minor change, we can make this
    change using the `npm version minor` command and as a result, we can see that
    `package.json` has been updated as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can publish the package again and we will see the new version on the
    npm website and in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'If we check the npm URL again, we can see the new version available and the
    changes we made:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21678_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – The published package updated in npm
  prefs: []
  type: TYPE_NORMAL
- en: Prevent accidental publishing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While not very common, it is possible to publish a package by mistake, so it
    is a good idea to prevent that by adding the `private` flag to the `package.json`
    file if you don’t plan to publish the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Best practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we know how to create and publish a package, it is time to talk about
    quality. The best packages have a high-level standard and follow the best practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the best practices are quite advanced, so we will not cover them in
    this book, but here are two great resources to learn more about them:'
  prefs: []
  type: TYPE_NORMAL
- en: Best practices for creating a modern npm package with security in mind ([https://snyk.io/blog/best-practices-create-modern-npm-package/](https://snyk.io/blog/best-practices-create-modern-npm-package/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10 npm Security Best Practices ([https://snyk.io/blog/ten-npm-security-best-practices/](https://snyk.io/blog/ten-npm-security-best-practices/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored how to create a package from scratch, and how to
    install and maintain our dependencies over time. We learned how to use the `package.json`
    file to manage our dependencies, and how to use the `package-lock.json` file to
    lock the dependencies versions.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we learned how to use npm scripts to automate tasks, and how to
    use global dependencies and `npx` to run commands without installing them globally.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how to create our own packages and publish them in the npm
    registry, and how to update them over time.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to take advantage of the event-driven
    architecture in Node.js to create our own events and listen to them, and how core
    libraries such as HTTP use events to notify us about incoming requests and much
    more. We will build our first web server using the HTTP library.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Happy Developers, Healthy Modules - Together We Can Do This - Michael Dawson,*
    *IBM* ([https://www.youtube.com/watch?v=e7tj_IbHEF4](https://www.youtube.com/watch?v=e7tj_IbHEF4))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What is npm, and why do we need it? | Tutorial for* *beginners* ([https://www.youtube.com/watch?v=P3aKRdUyr0s](https://www.youtube.com/watch?v=P3aKRdUyr0s))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Package.json vs* *Package-lock.json* ([https://www.atatus.com/blog/package-json-vs-package-lock-json/](https://www.atatus.com/blog/package-json-vs-package-lock-json/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Best practices for creating a modern npm package with security in* *mind*
    ([https://snyk.io/blog/best-practices-create-modern-npm-package/](https://snyk.io/blog/best-practices-create-modern-npm-package/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What is a backdoor? Let’s build one with* *Node.js* ([https://snyk.io/blog/what-is-a-backdoor/](https://snyk.io/blog/what-is-a-backdoor/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Juan Picado @ NodeTLV 22 - Deep dive into Verdaccio, a lightweight Node.js*
    *registry* ([https://www.youtube.com/watch?v=qRMucS3i3kQ&](https://www.youtube.com/watch?v=qRMucS3i3kQ&))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Isaac Schlueter: How npm* *Works* ([https://www.youtube.com/watch?v=ShRDgdvlZQ8](https://www.youtube.com/watch?v=ShRDgdvlZQ8))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Leveling up Monorepos with npm Workspaces - Ruy Adorno, DevOps.js Conference*
    *2022* ([https://www.youtube.com/watch?v=A-pWrajferM](https://www.youtube.com/watch?v=A-pWrajferM))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ashley Williams | You don’t know* *npm* ([https://www.youtube.com/watch?v=g3_e5Sp9vd4](https://www.youtube.com/watch?v=g3_e5Sp9vd4))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
