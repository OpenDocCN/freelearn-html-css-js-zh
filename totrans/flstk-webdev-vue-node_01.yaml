- en: Introducing MEVN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Mongo, Express, Vue.js, and Node.js **(**MEVN**) is a collection of JavaScript
    technologies just like **MongoDB**, **Express**, **Angular**, and **Node.js**
    (**MEAN**), and like**MongoDB**,** Express**,** React**, and **Node.js** (**MERN**).
    It is a full-stack solution for building web-based applications that use MongoDB
    as data storage, Express.js as the backend framework (which is built on top of
    Node.js), Vue.js as the JavaScript framework for the frontend, and Node.js as
    the main engine for the backend.'
  prefs: []
  type: TYPE_NORMAL
- en: This book is for web developers who are interested in learning to build a full-stack
    JavaScript application using MongoDB, Express.js, Vue.js, and Node.js. It is suitable
    for beginners and intermediate developers with a basic knowledge of HTML, CSS,
    and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: The term MEVN may be new, but the technologies used in it are not new. The only
    new technology that is being introduced here is Vue.js. Vue.js is an open source
    JavaScript framework, and its popularity is growing rapidly. There's not much
    of a learning curve with Vue.js and it is also a fierce competitor of other JavaScript
    frameworks such as AngularJS and ReactJS.
  prefs: []
  type: TYPE_NORMAL
- en: Modern web applications need to be fast and easily scalable. In the past, JavaScript
    was used in web applications only when there was a need to add some visual effects
    or animations that normal HTML and CSS could not achieve. But today, JavaScript
    has changed. Today, JavaScript is used in almost every web-based application,
    from small- to large-scale apps. JavaScript is chosen when the application needs
    to be much faster and more interactive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Building a full-stack application using JavaScript as the sole programming
    language has its own benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are just starting out and learning how to program, you only have to
    master one language: JavaScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full-stack engineers are high in demand. Becoming a full-stack developer means
    that you have an idea of how databases work, you know how to build both the backend
    and the frontend, and you also have the skills for UI/UX.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this book, we will build the application using these technology stacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to the MEVN technology stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to Node.js and its installation on Windows, Linux, and macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of `npm` and its installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to MongoDB and its installation and a few basic commands used
    in MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to GitHub version control and how it helps software engineers
    in terms of easy access to code history and collaboration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evolution of the technology stack in JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript is one of the most important programming languages today. Founded
    by Brendan Eich in 1995, it has done superbly well, not only in maintaining its
    status, but also in rising above all other programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: The popularity of JavaScript is ever growing with no end in sight. Building
    web applications with JavaScript as the sole programming language has always been
    popular. And with this fast growing pace, the need for software engineers to have
    knowledge of JavaScript is only increasing. No matter what programming language
    you choose to excel at, JavaScript always crawls its way in to get involved with
    other programming languages as well, one way or the other.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of technologies to choose from for the frontend and backend
    while developing an application. While this book uses Express.js for the backend,
    there are other frameworks as well, which you can learn if you want.
  prefs: []
  type: TYPE_NORMAL
- en: The other available backend frameworks are **Meteor.js**, **Sails.js**, **Hapi.js**,
    **Mojito**, **Koa.js**, and many others.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, for the frontend, the technologies include **Vue.js**, **React**,
    **Angular**, **Backbone**, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: For databases, the options, other than MongoDB, are **MySQL**, **PostgreSQL**,
    **Cassandra**, and others.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing MEVN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript frameworks are rising day by day, both in terms of numbers and their
    usage. JavaScript used to be implemented only for the client-side logic but, over
    the years, it has seen significant growth and now it is used both on frontends
    and backends.
  prefs: []
  type: TYPE_NORMAL
- en: 'Express.js in the MEVN stack is used to manage all the backend-related stuff
    and Vue.js handles all the view-related stuff. The advantages of using an MEVN
    stack are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: One language is used throughout the whole application, which means the only
    language you need to know is JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the client side and server side is very easy with one language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its very fast and reliable application with the non-blocking I/O of Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its a great way to keep updated on the growing ecosystem of JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started, we need to add all the dependencies that are required for an
    MEVN stack application. We can also refer to the documentation on the official
    website ([https://nodejs.org/](https://nodejs.org/)) for details on how to install
    Node.js in any operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two ways to install Node.js on macOS: using the installer or using
    the bash.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js using the installer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Node.js using the installer, perform the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the installer: We can download the installer for macOS from the official
    website''s download page ([https://nodejs.org/en/#download](https://nodejs.org/en/#download)).
    We will be installing the latest `node` version, which is `10.0.0`. You can install
    any `node` version you want, but the application that we will be building in this
    book will require the `node` version `>= 6.0.0`. Run the installer and follow
    the instructions given. When we download and run the installer, we will be prompted
    with the following dialog box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a6868792-7dc7-4c0f-b1b6-2c5ae9bcf818.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Just hit Continue until the installation finishes. Once the installation is
    complete, we will be able to see the following dialog box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/72da9af1-2959-4f12-93d2-cadf6a8edce8.png)'
  prefs: []
  type: TYPE_IMG
- en: Just hit Close and we will be done.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js using the bash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Node.js can be easily installed using Homebrew in macOS. Homebrew is a free
    and open source software package manager that is used to install software on macOS.
    I personally prefer Homebrew because it makes it very easy to install different
    software on Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `Homebrew`, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, use `Homebrew` to install Node.js with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Installing Node.js on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For Linux, we can either install the default distribution of Node.js or we can
    download it from NodeSource to use the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js from the default distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install from the default distribution, we can install Node.js on Linux by
    using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Installing Node.js from NodeSource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Node.js from NodeSource, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First download the latest version of Node.js from NodeSource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install Node.js with the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `apt` is a short form of Advanced Package Tool that is used to install software
    on Debian and Linux distributions. Basically, this is equivalent to the Homebrew
    command in macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can install Node.js on Windows by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Node.js installer from the official website ([https://nodejs.org/en/download/](https://nodejs.org/en/download/)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the installer and follow the given instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Close/Finish button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Node.js for Windows via an installer is almost the same as on macOS.
    Once we download and run the installer, we will be prompted with a dialog box.
    Just click on Continue until the installation completes. When we finally see a
    dialog with a confirmation, we hit Close. Node.js will be installed!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing NVM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**NVM** stands for **Node Version Manager**.NVM keeps track of all the `node`
    versions that we installed and also lets us switch between different versions.
    This is handy when the application that we built for one version of Node.js does
    not become compatible with the other versions, and we need that specific `node`
    version to make things work. NVM allows us to manage these versions easily. This
    is also very helpful when we need to upgrade or downgrade the `node` versions.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js from NVM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To download NVM, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether `nvm` has successfully installed using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to install `node` via `nvm`, use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Introducing npm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The npm is the acronym for **Node Package Manager**. Basically, it is a tool
    that takes care of all the packages that we install for Node.js. We can find all
    the existing packages on the official website ([https://www.npmjs.com/](https://www.npmjs.com/)).
    `npm` makes it easy for developers to keep their code updated and to reuse code
    shared by many other developers.
  prefs: []
  type: TYPE_NORMAL
- en: Developers are often confused by the terms package and modules. However, there
    is a clear distinction between these two.
  prefs: []
  type: TYPE_NORMAL
- en: Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A module is something that can be loaded by Node.js with a `require` command
    and has a namespace. A module has a `package.json` file associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: Package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `package` is just a file, or group of files, that is capable of functioning
    on its own. Every package also has a `package.json` file that contains all the
    metadata-related information that describes that package. A combination of modules
    makes up a `node` package.
  prefs: []
  type: TYPE_NORMAL
- en: Installing npm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we install Node.js from the installer itself, `npm` is installed as a
    part of the `node`. We can check whether `npm` is installed or not by using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If `npm` is not installed, the command displays an error, whereas if installed,
    it just prints out the version of the installed `npm`.
  prefs: []
  type: TYPE_NORMAL
- en: Using npm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`npm` is used to install different packages in our application. There are two
    ways to install packages: locally and globally. When we want to install a certain
    package specific to our application, we want to install that package locally.
    However, if we want to use a certain package as a command-line tool or be able
    to access it outside our application as well, we will want to install it as a
    global package.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing an npm package locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install a package specific to our application only, we can use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Installing an npm package globally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install a package globally, we can use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Introducing package.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the `node` packages and modules consist of a file called `package.json`.
    The main function of this file is to carry all the meta information associated
    with that package or module. A `package.json` file requires the content to be
    a JSON object.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a minimum, a `package.json` file consists of the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name**:The name of the package. This is an important part of a `package.json`
    file as it is the main thing that distinguishes it from other packages and, hence,
    it is a required field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**version**:The version of the package. This is also a required field. To be
    able to install our package, the `name` and `version` fields need to be given.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**description**: A short summary of the package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**main**:This is the primary entry point used to look for the package. Basically,
    it is a file path, so when a user installs this package, it knows where to start
    looking for the modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**scripts**:This field consists of commands that can be run for various states
    in the application. It has a key-value pair. The `key` is the event at which the
    command should be run and the `value` is the actual command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**author/contributors**: The author and contributors are the people. It contains
    an identifier of the person. An author is a single person, whereas contributors
    can be a group of people.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**license**: The license field, when provided, makes it easy for the users
    to use our package. This helps in identifying the permissions and restrictions
    when using the package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a package.json file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can manually create a `package.json` file and specify the options ourselves,
    or we can use a command to create it interactively from the command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go ahead and initialize a sample application with a `package.json` using
    `npm`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a folder in your projects directory using the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a `package.json` file, run the following command in the application
    that we created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this command will ask us a bunch of questions that we can answer interactively
    from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9242cbf3-4880-4130-897e-cbd9b258a49b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the end, it will create a `package.json` file, which will have the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/703c36f8-ede0-4290-bd40-25d0788cd7d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB is the first part of the technology in the MEVN stack. MongoDB is a
    free and open source document-based database published under a GNU license. It
    is a NoSQL database, meaning it is a non-relational database. Unlike relational
    databases, which use tables and rows to represent data, MongoDB uses collections
    and documents. MongoDB represents the data as a collection of JSON documents. It
    provides us with the flexibility to add fields in whatever way we want. Each document
    in a single collection can have a totally different structure. Aside from adding
    fields, it also provides the flexibility to change the fields from document to
    document in whatever way we want, something that is a cumbersome task in relational
    databases.
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of MongoDB compared to Relational Database Management Systems (RDBMS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MongoDB offers a lot of benefits compared to Relational Database Management
    Systems:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Schema-less architecture: MongoDB does not require us to design a specific
    schema for its collections. A schema for one document can vary, with another document
    being totally different.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each document is stored in a JSON-structured format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying and Indexing the MongoDB is very easy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB is a free and open source program.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing MongoDB on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two ways to install MongoDB. We can either download it from the official
    MongoDB website ([https://www.mongodb.org/downloads#production](https://www.mongodb.org/downloads#production))
    or we can use Homebrew to install it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB by downloading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Download the version of MongoDB you want from [https://www.mongodb.com/download-center#production.](https://www.mongodb.com/download-center#production)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the downloaded gzipped to the root folder. Adding it to the root folder
    will allow us to use it globally:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Unzip the gzipped file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a directory that will be used by Mongo to save data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to check if the installation was done successfully, start the Mongo server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have successfully installed and started the `mongo` server.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB via Homebrew
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install MongoDB in macOS from Homebrew, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With Homebrew, we just need a single command to install MongoDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a directory that will be used by Mongo to save data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the Mongo server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Hence, MongoDB is finally installed.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two ways to install MongoDB on Linux as well: we can either use the `apt-get`
    command or we can download the tarball and extract it.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB using apt-get
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install MongoDB using `apt-get`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to install the latest version of MongoDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify if `mongod` has been successfully installed by running the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To start the `mongod` process, execute the following command in the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'See if the log file has a line that denotes that the MongoDB connection was
    made successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To stop the `mongod` process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To restart the `mongod` process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Installing MongoDB using tarball
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Download the binary file from [https://www.mongodb.com/download-center?_ga=2.230171226.752000573.1511359743-2029118384.1508567417](https://www.mongodb.com/download-center?_ga=2.230171226.752000573.1511359743-2029118384.1508567417). Use
    this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract the downloaded files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy and extract to the target directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the location of the binary in the PATH variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a directory to be used by Mongo to store all database-related data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To start the `mongod` process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Installing MongoDB on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing MongoDB from the installer is as easy as installing any other software
    on Windows. Just like we did for Node.js, we can download the MongoDB installer
    for Windows from the official website ([https://www.mongodb.com/download-center#atlas](https://www.mongodb.com/download-center#atlas)).
    This will download an executable file.
  prefs: []
  type: TYPE_NORMAL
- en: Once the executable file is downloaded, run the installer and follow the instructions.
    Just go through the dialog box, reading the instructions carefully. When the installation
    is complete, just click on the Close button and you are done.
  prefs: []
  type: TYPE_NORMAL
- en: Using MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s dive a little deeper into MongoDB. As mentioned earlier as well, Mongo
    consists of a database with collections (tables/groups of data) and documents
    (rows/entries/records). We will use a few commands provided by MongoDB to create,
    update, and delete the documents:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, start the Mongo server with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open the Mongo shell with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Creating or using a MongoDB database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the place where we can see all of our databases, collections, and documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'To display the list of databases that we have, we can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, this command should list all the existing databases. To use the database
    that we want, we can simply run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: But if there is no database listed, don't worry. MongoDB provides us with a
    functionality where, when we run the preceding command, even if that database
    does not exist, it will automatically create a database with the given name for
    us.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if we already have a database that we want to use, we simply run that command
    and, if there are no databases yet, we create one using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: When we run this command, a database named `posts` will be created.
  prefs: []
  type: TYPE_NORMAL
- en: Creating documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's quickly review the commands used in MongoDB. The `insert` command
    is used to create new documents in a collection in MongoDB. Let's add a new record
    to the database that we just created called `posts`.
  prefs: []
  type: TYPE_NORMAL
- en: Here as well, in order to add a document to a collection, we first need a collection,
    which we don't have yet. But MongoDB allows us to create a collection easily by
    running the `insert` command. Again, if the collection exists, it will add the
    document to the given collection and, if the collection does not exist, it will
    simply create a new collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in the Mongo shell, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The command will create a new collection called `posts` in the `posts` database.
    The output of this command is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8a7bc64-056f-4843-ad70-fa136b03b44e.png)'
  prefs: []
  type: TYPE_IMG
- en: It will return a JSON object that has the ID of the document that we just created
    in the `insertedId` key and a flag that the event was received as `acknowledged`.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This command is used when we want to fetch the records from a collection.  We
    can either fetch all the records or a specific document by passing parameters
    as well. We can add a few more documents to the `posts` database to better learn
    the command
  prefs: []
  type: TYPE_NORMAL
- en: Fetching all documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To fetch all the records from the `posts` collection, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return all the documents that we have in the `posts` collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ace2e83f-51d0-47e3-acb3-5fbdf1882add.png)'
  prefs: []
  type: TYPE_IMG
- en: Fetching a specific document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s find a post where the title is `MEVN`. To do that, we can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will return only those documents whose title is `MEVN`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d46f10fd-7826-4822-94c0-7ca9dcd84c9c.png)'
  prefs: []
  type: TYPE_IMG
- en: Updating documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This command is used when we want to update a certain part of a collection.
    Let''s say we want to update the description of a post whose title is `Vue.js`;
    we can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for this command will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5873c55-7a64-47ee-9b04-999a1ba0b4f2.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see here that the `matchedCount` is `1`, which means that as regards
    the parameter that we sent to update the record with the title `MEVN`, there was
    one document in the `posts` collection that matched the query.
  prefs: []
  type: TYPE_NORMAL
- en: The other key called `modifiedCount` gives us the count of the documents that
    got updated.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `delete` command is used to remove documents from a collection. There are
    several ways to delete a document from MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting documents that match a given criteria
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To remove all the documents with certain conditions, we can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This command will remove all the documents from the `posts` collection whose
    titles are `MEVN`.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a single document that matches the given criteria
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To delete only the first record that satisfies the given criteria, we can just
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Deleting all records
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To delete all the records from a collection, we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Introducing Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git is a version control system for tracking the code changes in our application.
    It is a free and open source software used to track and coordinate multiple users
    when building an application.
  prefs: []
  type: TYPE_NORMAL
- en: To start using this software, we need to install it first. There is a very easy
    way to install it on every OS.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can find the installer for Git for Windows at [https://gitforwindows.org/.](https://gitforwindows.org/)
  prefs: []
  type: TYPE_NORMAL
- en: Download the executable installer file for Windows and follow the step-by-step
    instructions accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git on Mac
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can easily install Git on Mac via Homebrew. Just type the following command
    in the command line to install Git on Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Installing Git on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing Git in Linux is as easy as installing Git on macOS. Just type the
    following command and hit Enter to install Git on Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Introducing GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub is a version control service. It is a source code management tool specifically
    designed to track changes to our code. GitHub also provides features of social
    networking, such as adding comments, and displaying feeds, which makes it even
    more powerful because multiple developers can collaborate at the same time in
    a single application.
  prefs: []
  type: TYPE_NORMAL
- en: Why GitHub?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GitHub is a savior for software engineers. There are several advantages that
    GitHub provides that make it worthwhile to use. A few benefits that are provided
    by GitHub are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tracking code changes**: GitHub helps track changes to the code, which means
    it maintains a history of our code. This enables us to view revisions of our code
    base made during any time period.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Documentation**: GitHub provides features for adding documentation, Wikis,
    and so on to our code bases, and these can be written using the simple markdown
    language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Graphs and reporting**: GitHub provides insight into various metrics, including
    how many additions and deletions were made to the code, who the top contributors
    were, and who has the most commits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bug tracking**: Since GitHub tracks all the activities made at every point
    in time, when something breaks, we can easily backtrack to the point that broke
    the code. We can also integrate third-party tools such as Travis for continuous
    integration, which helps us to track and identify bugs easily.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collaboration is easy**: Github tracks every activity done by every collaborator
    working on the project and also sends email notifications about the same. It also
    provides social media features, such as feeds, comments, emojis, and mentions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hosting our own website**: We can also host our own website with GitHub using
    a feature called GitHub pages. We just need to create a repo for our own project
    and host it using Github pages, which will then make the website applicable to
    the URL: `https://<username>.github.io`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GitHub is very easy to use. However, to get started using GitHub, we need to least
    know about a few terminologies that are used in GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Repository/Repo**:  A repository is a place where all of our code bases are
    stored. A repository can be either private or public.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ssh-key**:  ssh-key is a way to authorize in GitHub. It stores our identities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Branch**:  A branch can be defined as multiple states of a repository. The
    primary branch of any repository is the `master` branch. Multiple users can work in
    parallel on different branches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commit**:  A commit makes it easy to distinguish between different states
    of a file at a given time. When we make a commit, a unique identifier is assigned
    to that commit so what it''s easy to check what changes were made in that commit.
    A commit takes a message as a parameter to describe the type of change that is
    being made.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Push**:  A push sends the commit that we made back to our repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pull**:  As opposed to pushing, pulling fetches the commit from the remote
    repository to our local project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Merge**:  Merging is basically done between multiple branches. It is used
    to apply changes from one branch to another.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pull requests**:  Creating a `pull request` is basically sending the changes
    that we made to our code base for the approval of other developers. We can start
    discussions on a `pull request` to check the quality of code and ensure that the
    changes don''t break anything.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about the vocabulary used in GitHub, visit [https://help.github.com/articles/github-glossary/](https://help.github.com/articles/github-glossary/).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a GitHub repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know the basics of GitHub, let''s get started creating a GitHub
    repository for the project we want to build:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a folder for the application in the root folder. Let''s name
    this application `blog`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Create an account on GitHub at [https://github.com/](https://github.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to your profile. Under the Repositories tab, click New as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a167a04d-7d3a-48e7-a0f0-c5cb1553e087.png)'
  prefs: []
  type: TYPE_IMG
- en: Name this repository `blog`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, on the Terminal, go to the location of this application and initialize
    an empty repository with this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create a file called `README.md` and write a description for the
    application and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this file to GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `commit` so that we have a history of this change of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to link the local application with the `remote` repository in GitHub,
    use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to `push` this `commit` to GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'When it''s done, visit the GitHub repository where you will find a history
    of the commits made to our repository, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95a1bce9-e60d-484a-a21c-f435eb23d0fb.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it. Now, when we want to write changes, we will first create a branch
    and push the changes to the branch.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what an MEVN stack is. We learned what Node.js,
    npm, and MongoDB, are as well as receiving a brief summary of GitHub and how it
    helps software engineers for easy access to code history and collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn more about Node.js and Node.js modules. We
    will learn about the MVC architecture and how to implement it by building an application
    with Express.js.
  prefs: []
  type: TYPE_NORMAL
