- en: Chapter 1. The Evolution of CSS and Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML, CSS, and JavaScript—the three most important tools for you as a web developer
    in today's ever-evolving and ever-demanding Web 2.0 and Web 3.0 world. As the
    mobile world and its needs grow every day, the websites and web pages you'll be
    required to develop are far more challenging. Thankfully, as the appetite increases,
    the industry also serves with all new engines and mechanisms to meet the demand.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are going to be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing CSS3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the mobile-first philosophy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning the basics of responsive design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Bootstrap as a responsive design framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The purpose of this book is to understand and be proficient in using Bootstrap.
    Since Bootstrap is largely based on CSS3, we will spend a few minutes to see the
    evolution of CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Evolution of CSS and Bootstrap](img/B03987_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In late 1996, the official CSS1 specifications were published; some of the critical
    aspects were color of text, backgrounds, capability of margin, border, padding,
    positioning, various font properties, various text properties, spacing, alignment,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The CSS2 specifications were published in 1998, including a number of features
    such as element positioning, z-index, font shadows, and bidirectional texts.
  prefs: []
  type: TYPE_NORMAL
- en: However, CSS3 was a major shift and is currently the latest version. It added
    a number of powerful capabilities and boosted the mobile-first philosophy of the
    technology. Some of the very crucial inclusions are Media queries, Selectors,
    Cascading and Inheritance, Template layouts, Namespaces, MathML, Flexible and
    Grid layouts, Transformations and Transitions, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Several modules of CSS3 are still under consideration and in proposal stage;
    many older browsers of both mobile devices and desktop do not support CSS3 tags.
    Bootstrap uses them and is heavily based on CSS3 and HTML5; thus, as a developer,
    you must make sure that while using Bootstrap, you are building a future proof
    website, but at the same time, your website is not going to be compatible with
    older browsers, unless you are taking extra precautions in that aspect.
  prefs: []
  type: TYPE_NORMAL
- en: The mobile-first philosophy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an experienced web developer, you must be aware of the mobile-first philosophy
    until now, and if you are not, it is high time to wake up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following few facts (all approximate values):'
  prefs: []
  type: TYPE_NORMAL
- en: There are more than 1 billion mobile users worldwide, and counting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More than 25 percent of web users access it on a mobile only; they rarely use
    a desktop to browse the web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More than 90 percent of all people on earth have a mobile phone, and more than
    50 percent own a smartphone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More than 50 percent of mobile phone users use mobile device as their primary
    Internet source, and not a desktop computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More than 70 percent of tablet owners purchase things online from their tablets
    each week
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By 2015 and 2016, mobiles and tablets are predicted to overtake desktop internet
    usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So if not now, within a couple years down the line, we will develop websites
    not only for a desktop machine, but mostly for the mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: There comes the mobile-first approach which goes side by side with terms such
    as Progressive Enhancement, Graceful Degradation, and Responsive Web Design.
  prefs: []
  type: TYPE_NORMAL
- en: In Progressive Enhancement, you design and develop your website for a mobile
    phone, which has the smallest real estate of them all. Then, you upgrade your
    site and contents to match with the available space of a tablet, and your full
    website for a desktop screen, which means that you are designing your website
    bottom-up.
  prefs: []
  type: TYPE_NORMAL
- en: '![The mobile-first philosophy](img/B03987_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the other hand, in case of Graceful Degradation, you follow the opposite
    approach—the traditional top-down approach. There you design the full-fledged
    website for desktop users, which then gradually becomes compatible with various
    mobile devices with lesser space and real estate by deducting some optional contents
    and redesigning all the CSS styles and JavaScript to suit the mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: '![The mobile-first philosophy](img/B03987_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Progressive Enhancement approach is getting popular day by day over Graceful
    Degradation—putting the mobile-first philosophy as one of the most crucial aspects
    of today's web design.
  prefs: []
  type: TYPE_NORMAL
- en: However, Responsive Web Design techniques are common and imperative in either
    strategy—irrespective of whether you go for Progressive Enhancement or Graceful
    Degradation. Also, as a web developer, this is one of most important skills you
    want to possess.
  prefs: []
  type: TYPE_NORMAL
- en: This revolutionizes the whole web design and development paradigm. Of course,
    the major impact is on how you build your CSS classes and styles, and designing
    a website for mobile devices is a responsibility to the CSS developers, rather
    than to the website programmers. CSS3 comes to the rescue here. As we saw, as
    the demand of a responsive website design has increased, so has the power of CSS.
    Most of the CSS3 features and specifications are in line with what you need to
    develop a responsive website.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive design basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a nutshell, Responsive Web Design means designing and building your website
    that would properly render in almost all the devices irrespective of the device
    size, browser, screen size, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: As we discussed earlier, the best approach is to design the site for the smallest
    screen size first, and then to move upward. There are few very basic steps to
    be followed in order to achieve responsiveness and a good user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The below points are only to get underlying concepts clearer and make your elemental
    background ready. We will later on see in detail how Bootstrap can be used to
    build and generate a full functional responsive website.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the viewport
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Viewport is the visible area of a web page on the device or monitor the user
    is accessing on. The size of viewport varies with the device—for a mobile phone,
    it is very small; for a tablet, it is little bigger; for a desktop computer, it
    is bigger than that for a tablet; for a TV, it is much bigger.
  prefs: []
  type: TYPE_NORMAL
- en: Pages targeted and optimized for a variety of devices must include a `meta`
    viewport element in the `head` section of the document. The `meta` viewport element
    makes the browser understand how to control the page's dimensions and scaling
    for rendering different page elements.
  prefs: []
  type: TYPE_NORMAL
- en: For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `meta` viewport value `width=device-width` instructs the browser to match
    the screen's width in device-independent pixels while rendering the page. HTML5
    has introduced this `meta` tag to enable web developers take control over the
    size of the browser screen and render the web page contents as per the size. This
    is essentially the base of Responsive Web Design.
  prefs: []
  type: TYPE_NORMAL
- en: Sizing your content to the viewport
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Irrespective of the device and browser that the user is working on, nobody prefers
    a horizontal scroll bar. Thus, you need to make sure that all your contents and
    elements are adjusted within the screen real estate you have got—with only the
    vertical scroll bar.
  prefs: []
  type: TYPE_NORMAL
- en: While you have set the page contained within the available viewport, it is also
    necessary to create and structure your content so as to fit into the space available.
    For example, if you put an image with fixed width 600 px, in a screen with 320
    px, you will face a horizontal scroll bar to see the full image, even if you have
    got the `meta viewport` element added into the `head` section.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, a proper responsive design requires that all the web page content is also
    automatically adaptive to screen viewport size.
  prefs: []
  type: TYPE_NORMAL
- en: Using media queries to achieve responsiveness
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a crazy range of mobile devices available in the market. So what do
    you do in order to make sure that your page does render in all the devices and
    browsers efficiently without compromising on any user experience? Of course, you
    cannot write separate code to handle separate devices and then dynamically find
    out which code base is to be made executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here come the CSS media queries—these are simple filters to change styles of
    the HTML elements, based on the characteristics and properties of the device.
    Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Responsive design patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the few established and well-adopted patterns in Responsive Web Design:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fluid design**: This is the most popular and easiest option for responsive
    design. In this pattern, larger screen multiple columns layout renders as a single
    column in a smaller screen in absolutely same sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Column drop**: In this pattern also, the page gets rendered as a single column,
    however, the order of blocks gets altered. This means, if a content block is visible
    first in order in case of larger screen, the block might be rendered as second
    or third in case of smaller screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layout shifter**: This is a complex but powerful pattern in which the whole
    layout of the screen contents get altered, in the case of smaller screen. This
    means that you need to develop different page layouts for large, medium, and small
    screens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigation patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are some of the things you should take care while designing a responsive
    web page. These are essentially the major navigational elements that you would
    concentrate on while developing a mobile-friendly and responsive website:'
  prefs: []
  type: TYPE_NORMAL
- en: Menu bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigation/app bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Footer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Main container shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tabs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML forms and elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alerts and popups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedded audios and videos and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can see that there are lots of elements and aspects you need to take care
    of to create a fully responsive design. While all of these are achieved by using
    various features and technologies in CSS3, it is of course not an easy problem
    to solve without a framework that could help you do so. Precisely, you need a
    frontend framework that takes care of all the pains of technical responsive design's
    implementation and releases you only for your brand and application design.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we introduce Bootstrap, which will help you design and develop a Responsive
    Web Design in a much optimized and efficient way.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Simply put, Bootstrap is a frontend framework for faster and easier web development
    in the new standard of the mobile-first philosophy. It uses HTML, CSS, and JavaScript.
    In August 2010, Twitter released Bootstrap as open source.
  prefs: []
  type: TYPE_NORMAL
- en: There are quite a few similar frontend frameworks available in the industry,
    but Bootstrap is arguably by far the most popular in the lot. It is evident when
    we see Bootstrap is the most starred project in GitHub since 2012.
  prefs: []
  type: TYPE_NORMAL
- en: 'Until now, you must be in a position to fathom why and where we need to use
    Bootstrap for web development; however, just to recap, here are the points in
    short:'
  prefs: []
  type: TYPE_NORMAL
- en: The mobile-first approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A responsive design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic browser support and handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to adapt and get going
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What Bootstrap includes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following diagram demonstrates the overall structure of Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What Bootstrap includes](img/B03987_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: CSS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bootstrap comes with fundamental HTML elements styled, global CSS classes, classes
    for advanced grid patterns, and lots of enhanced and extended CSS classes.
  prefs: []
  type: TYPE_NORMAL
- en: For example, this is how `HTML` global element is configured in Bootstrap CSS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how a standard `HR` HTML element is styled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of new classes introduced in Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bootstrap offers a rich set of reusable and built-in components such as breadcrumbs,
    progress bars, alerts, and navigation bars. The components are technically custom
    CSS classes specially crafted for the specific purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to create a breadcrumb in your page, you simply add
    a `DIV` tag in your HTML using Bootstrap''s `breadcrumb` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the background (stylesheet), this Bootstrap class is used to create your
    `breadcrumb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that these sets of code blocks are simply snippets; we will explore
    all these features and functionalities in detail in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bootstrap framework comes with a number of ready-to-use JavaScript plugins.
    Thus, when you need to create Popup windows, Tabs, Carousels or Tooltips, and
    so on, you just use one of the prepackaged JavaScript plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you need to create a tab control in your page, you use the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To activate (open) a tab, you write this JS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you may have guessed by looking at the syntax of this JavaScript line here,
    that the Bootstrap JS plugins are built on the top of jQuery. Thus the JS code
    you would write for Bootstrap are also all based on jQuery. We will explore more
    on this in the later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Customization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even though Bootstrap offers most (if not all) standard features and functionalities
    for Responsive Web Design, there might be several cases when you would want to
    customize and extend the framework. One of the very basic requirements for customization
    would be to deploy your own branding and color combinations (themes), instead
    of the Bootstrap default ones. There can be several such cases where you would
    want to change the default behavior of the framework.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap offers very easy and stable ways to customize the platform. We will
    explore more on this in the later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you use the Bootstrap CSS, all the global and fundamental HTML elements
    automatically become responsive and would properly behave as the client device
    on which the web page is browsed.
  prefs: []
  type: TYPE_NORMAL
- en: The built-in components are also designed to be responsive, and as the developer,
    you shouldn't be worried about how these advanced components would behave in different
    devices and in different client agents.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We briefly went through the history of CSS evolution. We saw how the design
    approach of web portals and pages has changed toward the mobile-first approach
    and going to be further matured.
  prefs: []
  type: TYPE_NORMAL
- en: We have also covered the basics of Responsive Web Design and realized the need
    of a frontend framework that will help us develop responsive web pages.
  prefs: []
  type: TYPE_NORMAL
- en: In this context, we have been introduced to Bootstrap framework and have briefly
    seen the elements that are the part of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive deep into Bootstrap, understand the structure,
    and see how to use Bootstrap. We will also briefly discuss some CSS preprocessor
    tools and languages.
  prefs: []
  type: TYPE_NORMAL
