["```js\nclass Receipts extends Model {}\nReceipts.init({\n  receipt: DataTypes.JSON\n});\n```", "```js\nawait Receipts.create({\n    receipt: {\n        name: {\n            first: \"Bob\",\n            last: \"Smith\"\n        },\n        items: [\n            {\n                sku: \"abc123\",\n                quantity: 10\n            },\n            {\n                sku: \"xyz321\",\n                quantity: 1\n            }\n        ],\n        subtotal: 100\n    }\n});\n```", "```js\nawait Receipts.findOne({\n    where: {\n        receipt: {\n            name: {\n                first: \"Bob\",\n                last: \"Smith\"\n            }\n        }\n    }\n});\n```", "```js\nawait Receipts.findOne({\n    where: {\n        \"receipts.name.first\": \"Bob\",\n        \"receipts.name.last\": \"Smith\"\n    }\n});\n```", "```js\nconst receipts = await Receipts.findAll({\n    where: {\n      receipt: {\n        name: {\n          last: \"Smith\",\n        },\n      },\n    },\n    order: [\n      [\"receipt.name.first\"]\n    ]\n});\n```", "```js\nawait Receipts.update({\n    receipt: {\n        name: {\n            first: \"Bob\",\n            last: \"Smith\"\n        },\n        items: [\n            {\n                sku: \"abc123\",\n                quantity: 10\n            },\n            {\n                sku: \"xyz321\",\n                quantity: 1\n            }\n        ],\n        subtotal: 120\n    }\n  }, {\n    where: {\n      \"receipt.name.first\": \"Bob\"\n    }\n});\n```", "```js\nconst receipts = await Receipts.findAll({\n    where: {\n        receipt: {\n            items: {\n                [Op.contains]: {\n                    sku: \"abc123\"\n                }\n            }\n        }\n    }\n});\n```", "```js\nconst receipts = await Receipts.findAll({\n    where: Sequelize.literal(`JSON_CONTAINS(JSON_EXTRACT\n        (receipt, '$.items[*].sku', '\"abc123\"')`)\n});\n```", "```js\nclass Users extends Model {}\nUsers.init({\n    metadata: DataTypes.STRING\n});\nawait Users.create({\n    metadata: JSON.stringify({\n        first_name: \"Bob\",\n        last_name: \"Smith\"\n    })\n});\nawait Users.findAll({\n    where: sequelize.where(\n        sequelize.fn('JSON_VALUE', sequelize.col('metadata'), '$.first_name'),\n        'Bob'\n    )\n});\n```", "```js\n    class Users extends Model {}\n    Users.init({\n        avatar: DataTypes.BLOB,\n        keycode: DataTypes.BLOB\n    });\n    ```", "```js\n    await Users.create({\n        avatar: require(\"fs\").readFileSync\n                (\"/some/path/avatar.jpg\"),\n        keycode: Buffer.from(\"secretpassword\")\n    });\n    ```", "```js\n    const user = await Users.findOne({});\n    require(\"fs\").writeFileSync(\n        \"/some/path/to/write/avatar.jpg\",\n        user.avatar\n    );\n    ```", "```js\nclass Stats extends Model {}\nStats.init({\n    A: {\n        type: Sequelize.INTEGER(11).UNSIGNED.ZEROFILL,\n        validate: {\n            min: 1\n        }\n    },\n    B: {\n        type: Sequelize.INTEGER(11).UNSIGNED.ZEROFILL,\n        validate: {\n            min: 1\n        }\n    },\n    C: {\n        type: Sequelize.INTEGER(11).UNSIGNED.ZEROFILL,\n        validate: {\n            min: 1\n        }\n    },\n});\n```", "```js\n    class NATURAL_NUMBER extends DataTypes.ABSTRACT {\n    ```", "```js\n        toSql() {\n            return 'INTEGER(11) UNSIGNED ZEROFILL'\n        }\n    ```", "```js\n        validate(value, options) {\n            const isNumber = Number.isInteger(value);\n            const isAboveZero = Number.parseInt(value) > 0;\n\n            return isNumber && isAboveZero;\n        }\n    ```", "```js\n        _stringify(value) {\n          return value.toString();\n        }\n        static parse(value) {\n          return Number.parseInt(value);\n        }\n    ```", "```js\n    }\n    NATURAL_NUMBER.prototype.key = NATURAL_NUMBER.key = 'NATURAL_NUMBER';\n    DataTypes.NATURAL_NUMBER = Sequelize.Utils.classToInvokable(NATURAL_NUMBER);\n    ```", "```js\n    class Stats extends Model {}\n    Stats.init({\n        A: DataTypes.NATURAL_NUMBER,\n        B: DataTypes.NATURAL_NUMBER,\n        C: DataTypes.NATURAL_NUMBER\n    });\n    ```", "```js\nawait Stats.create({\n    A: 100,\n    B: 20,\n    C: \"NotANumber\" // not an number\n});\nawait Stats.create({\n    A: 100,\n    B: 20,\n    C: 1.1 // not an integer\n});\nawait Stats.create({\n    A: 100,\n    B: 20,\n    C: -3 // not a natural number\n});\n```", "```js\nawait Stats.create({\n    A: 100,\n    B: 20,\n    C: 10\n}); // success!\n```", "```js\n    sequelize-cli model:generate --name Receipts --attributes receipt:json\n    ```", "```js\n    sequelize db:migrate\n    ```", "```js\n      BoardingTicket.afterSave('saveReceipt', \n          async(ticket, options) => {\n        await sequelize.models.Receipts.create({\n          receipt: ticket.get()\n        }, {\n          transaction: options.transaction\n        });\n      });\n    ```"]