- en: Chapter 9. Authoring Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Finding plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contributing to a plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a basic plugin project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a plugin task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing tests for a plugin task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding documentation for a plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing a plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the most part, Grunt is a framework that allows developers to package and
    configure the various tools available to web application developers in a uniform
    fashion. In the Grunt sphere, tools are packaged into what are called plugins,
    and these plugin packages all conform to Grunt operation and configuration conventions.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the more popular plugins are provided by the Grunt core team, but all
    the others are contributed by the community of developers that use Grunt in their
    projects. Now that we're making use of Grunt in our project, we are part of this
    community, and we can take it upon ourselves to assist in the creation and maintenance
    of these plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Finding plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we even consider creating a plugin of our own, we should first determine
    whether there isn't already a plugin out there that will satisfy our requirements.
    In most cases, you will find that someone else has already ventured to solve the
    problems you are faced with now, and has done most if not all the work for you.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most obvious place to start looking for a plugin would be on the Internet.
    So the first thing we'll need to do is open our favorite web browser and get ready
    to navigate.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps will take us through navigating to the Grunt project's website
    and using it to search for a plugin that we can use to run tasks concurrently.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll navigate to the official Grunt plugin listing page by entering
    the following URL in our web browser: [http://gruntjs.com/plugins](http://gruntjs.com/plugins).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we'll select the search input textbox that should look something like
    the following:![How to do it...](img/image00277.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the textbox selected, we can now proceed to type the term we wish to search
    for; in this case we'll be entering `concurrent` as our search term:![How to do
    it...](img/image00278.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we've finished typing, we should see the list automatically loading for
    a little while and then display the search results:![How to do it...](img/image00279.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we see a plugin listed that looks like it might be what we're looking
    for, we can click on the list item to review its documentation. The installation
    instructions for the plugin should usually be somewhere near the top of the documentation
    page.![How to do it...](img/image00280.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Contributing to a plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've found a plugin that closely matches your needs, you might find that
    some aspect of it is either broken, incomplete, or missing. This is where you
    can step in and contribute to the project in a variety of ways.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing to a plugin project provides you with the advantage of getting
    exactly what you want from it, without having to create the entire project yourself.
    It's also beneficial to others, such as yourself, who have encountered the issue
    you face or require the same additional features.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **GitHub** account is required to make any of the contributions mentioned
    in this recipe. If you don't already have an account, creating one is as simple
    as visiting GitHub's home page and filling out the registration form there at
    [https://github.com/](https://github.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following URL provides another good all-round introduction to Git and GitHub:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://guides.github.com/activities/hello-world/](https://guides.github.com/activities/hello-world/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Familiarize yourself with the practice of creating **issues** in the GitHub
    Issues section. The mechanism to create and manage issues is quite simple, but
    it''s very important to apply good practices when making use of it. Well-written
    issues make all the difference and will help you get what you need in a shorter
    period of time. You can find out more about good issue-writing practices at the
    following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://wiredcraft.com/posts/2014/01/08/how-we-write-our-github-issues.html](http://wiredcraft.com/posts/2014/01/08/how-we-write-our-github-issues.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In order to retrieve the code and documentation for any of the plugin projects,
    you will need to have the Git version control software installed. You can find
    out more about the various installation options for Git at the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://git-scm.com/book/en/v1/Getting-Started-Installing-Git](http://git-scm.com/book/en/v1/Getting-Started-Installing-Git)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you''d like to contribute the changes to code or documentation that you''ve
    made to a project hosted on GitHub, you will have to familiarize yourself with
    the pull request workflow. More information on the pull request workflow can be
    found at the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://help.github.com/articles/using-pull-requests/](https://help.github.com/articles/using-pull-requests/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To get the best out of your contribution efforts to the Grunt project and its
    plugins, be sure to familiarize yourself with the Grunt contribution guide, which
    can be found at the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://gruntjs.com/contributing](http://gruntjs.com/contributing)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Be sure to carefully study the documentation of the project that 're considering
    contributing to ensure that you are using it correctly, and that the feature that
    you're looking for is not already available. The documentation of a Grunt plugin
    project should always be found in the `README.md` file in the root of the project's
    repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: GitHub will display the `README.md` document located in the repository root
    as the repository's home page by default.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Each project might also have its own specific contribution guidelines that need
    to be followed. These are usually found either at the end of `README.md` or in
    the `CONTRIBUTING.md` document at the root of the project's repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many ways to contribute to an existing plugin. Let''s list them according
    to their difficulty, starting with the simplest one:'
  prefs: []
  type: TYPE_NORMAL
- en: Helping with an existing issue by commenting on it's contents, reproducing it's
    error, or providing a resolution to the stated problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding issues for faults as you encounter them. Keep in mind that a new issue
    is only helpful if you clearly state the context and problem. What's even more
    helpful is to provide a potential solution to the problem if you can think of
    one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Be sure to check for existing issues with a similar subject. If the issue focuses
    on the same subject, it is usually better to just add to it. However, if it slightly
    differs from the existing one, it might be a good idea to refer to it in a new
    issue.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It's also recommended to review the documentation of a plugin before submitting
    an issue. This is to ensure that the issue or behavior you experience is not expected
    and that you are actually using the plugin as intended by its authors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adding issues for possible improvements. As always, it's important to clearly
    state the context and concept of the improvement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Be sure to check issues and pull requests to see whether the feature has not
    been requested or developed yet. Also, review the documentation to ensure that
    it is not yet available in some other form.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Submitting updates and improvements to the documentation of the plugin. This
    requires forking the plugin project and submitting a pull request that contains
    the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resolving issues and submitting the changes to the code base. This requires
    forking the project and submitting a pull request. If the reported issue is not
    breaking tests yet, it's essential to add a test for the specific use case that
    was causing the error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing new features and submitting the changes to the code base. This
    requires forking the plugin project and submitting a pull request. Keep in mind
    that adding a feature requires the documentation for the project to be updated
    and tests to be created that ensure that the new feature behaves as documented.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up a basic plugin project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the base of every Grunt plugin lies a Node.js project that contains information
    about its purpose, version, dependencies, and so forth. Due to the basic project
    structure for all Grunt plugins being pretty much the same, we'll make use of
    a project generator to provide us with a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the **Yeoman** project's scaffolding tool
    to generate our basic Grunt plugin project. It provides generators for a large
    variety of project setups, all of which have Grunt as their core automation tool.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can learn more about the Yeoman project at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://yeoman.io/](http://yeoman.io/)'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only requirement for this recipe is a global installation of Node.js, with
    Grunt installed into it as per the *Installing the Grunt CLI* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*. Be sure to refer to it if you are not yet familiar with its
    contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through installing the Yeoman tool and using it
    to generate a basic Grunt plugin project.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll need to install the Yeoman tool globally using the **npm** utility.
    This is done by entering the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll also need to install the Yeoman generator that is specifically geared
    toward generating a Grunt plugin project. This is done by entering the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll create a directory called `grunt-myplugin`, which will contain
    our plugin project, and navigate to it using a command similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With Yeoman and the required generator installed, we can now use it to generate
    our plugin project by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After running the previous command, you will be presented with a series of
    questions that will assist the generator in creating the project. This interaction
    should look something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: All the references to 'me' in the previous example are where you should enter
    your own name, account name, and credentials.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After all the questions have been answered, the generator will create all the
    files required for a simple plugin with a single functioning task. The output,
    which is similar to the following, will inform us of these actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With all the necessary files created, we now need to install the dependencies
    required for the project to function. These dependencies are listed in the generated
    `package.json` file and can be installed using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This command uses the `package.json` file, which is found in the current directory,
    so be sure to have navigated to the `grunt-myplugin` directory we created earlier,
    if you have not done so already.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The best way to confirm that the project has been successfully set up (apart
    from actually using it in a Grunt project) would be to run the generated tests.
    This can be done using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Successfully running the tests should produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a plugin task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The functionality of Grunt plugins are mostly contained inside the tasks they
    provide. The plugin project scaffolding provided by the Yeoman tool creates one
    such task for us to work from or use as a reference when creating our own.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we'll work with the basic project structure we created in the
    *Setting up a basic plugin project* recipe earlier in this chapter. Be sure to
    refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe also contains concepts that are introduced in the *Creating a multi
    task*, *Using options in a task* and *Using files in a task* recipes that can
    be found at the end of [Chapter 8](part0081.xhtml#aid-2D7TI1 "Chapter 8. Creating
    Custom Tasks"), *Creating Custom Tasks*. Be sure to refer to these recipes if
    you'd like to gain a deeper understanding of the concepts they introduced.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a task that concatenates all the
    indicated source files, and then prepends a comment containing a timestamp and
    location to the result.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by creating a new file called `timestamp.js` in the `tasks` directory
    that will contain our task code. It's good practice to have the file that contains
    a task named after the task itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we''ll set up the code module that will contain our task code and register
    the new task inside it by filling the new file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `module.exports` object is automatically made available by Node.js for
    each file. Whatever gets assigned to it is what will be made available when the
    file is imported into another file. You can read more about `module.exports` at
    the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://nodejs.org/api/modules.html#modules_module_exports](https://nodejs.org/api/modules.html#modules_module_exports)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The first thing we''ll need to do inside our task is retrieve the options for
    the task target and store it in the `options` variable. We''ll also provide some
    default values for the available options to be sure that our task works even without
    any options being provided. The following code takes care of this and can be added
    at the top of the task function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The default for the `datetime` option is the very earliest available value in
    the Unix time range. This value is determined by creating a standard JavaScript
    `Date` object and providing `0` as its only parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next thing we''ll do is create a `comment` variable that contains an empty
    string, and then add the contents of our comment to it piece by piece. The following
    code does this for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our comment string ready, we can now concatenate all the source files,
    and write the comment and result to the indicated destination file. The following
    code does this for all files indicated in the task configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we''ve got our task registered and functional, we can add some configurations
    that we can test it with. Let''s add two targets: one called `default_options`
    that tests the task without any options provided and another called `custom_options`
    that tests the task with all the possible options provided. We can do this by
    adding the following configuration in our Gruntfile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We're making use of the `Date.UTC` function here to ensure that the behavior
    of this code doesn't differ between the various time zones. Setting the date in
    this way will always amount to a date and time value in the GMT time zone.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In order for these task targets to work, they will also have to indicate the
    source files they would like to read from and the destination file they would
    like the result to be written to. For our test, we''ll use the files that were
    created by the project generator in the `test/fixtures` directory as sources,
    and write the result to the `tmp/timestamp` directory. This can be done by adding
    the following `files` configurations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can run our task using the `grunt timestamp` command, which should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To confirm that the tasks ran correctly, we can check the contents of the files
    created in the `tmp/timestamp` directory. The `custom_options` file, for example,
    should have content similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Writing tests for a plugin task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The creation of tests forms an essential part of the development of all programming
    modules, which includes Grunt plugins. Tests provide a way for us to confirm that
    our tasks work and keep working as expected in a variety of situations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we'll continue to work on the project we created in the *Creating
    a plugin task* recipe earlier in this chapter. Be sure to refer to it if you are
    not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating expected output files and a test
    suite that checks that the actual output files from the task match them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we get started on creating the actual test suite, we''ll create a file
    called `default_options` in the `test/expected/timestamp` directory that contains
    the expected output of running the task with the `default_options` target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll create another file called `custom_options` in the same directory
    that contains the expected output of running the file with the `custom_options`
    target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we''ve got the files containing the expected output ready, we can
    begin to set up the test suite that will actually compare their contents with
    the task''s results. We''ll start by creating a file called `timestamp_test.js`
    in the `test` directory and fill it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The Grunt library is imported and assigned to the `grunt` variable at the beginning
    of the file for later use in the tests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We also assign an empty object to a property named after the task in the `module.exports`
    object. We'll add our test functions to this object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With the basic framework for our test suite in place, we can now add a test
    for each of our expected results. We''ll name the tests after the targets that
    they''ll be testing, just like the expected result files we created earlier. The
    tests are added by adding the following properties to the exported object in the
    `timestamp_test.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The format of tests is usually determined by the framework that runs them.
    In the case of our example, which is based on the generated Grunt plugin project,
    we use the **nodeunit** framework. You can read more about the framework at the
    following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://github.com/caolan/nodeunit](https://github.com/caolan/nodeunit)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we have our test suite set up, we need to indicate to the `test` alias
    task that it should run the timestamp task before running the tests. This causes
    the task to produce the resulting files that can then be tested against files
    that have been set up as the expected results. This is done by adding the `timestamp`
    task to the `test` alias task before the `nodeunit` task that runs the tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can run the tests using either the `npm test` or `grunt test` command,
    which should produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can now see by the output near the end that our tests have run successfully
    and we can keep running them during development to make sure we haven't broken
    anything with our latest changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding documentation for a plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: High-quality documentation is essential for the success of most software development
    projects. In the context of a Grunt plugin, its main purpose is to provide instructions
    and information on the usage of the plugin and its tasks. As with most projects
    hosted on GitHub, the documentation for a plugin is located in the `README.md`
    file, and written in the **Markdown** format.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the general Markdown format, you can visit the following
    URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://daringfireball.net/projects/markdown/](http://daringfireball.net/projects/markdown/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://help.github.com/articles/github-flavored-markdown/](https://help.github.com/articles/github-flavored-markdown/)'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we'll continue to work on the project we created in the *Creating
    a plugin task* recipe earlier in this chapter. Be sure to refer to it if you are
    not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through reviewing and adding to the documentation
    generated by Yeoman and the `gruntplugin` generator we used earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by using our favorite editor to open the `README.md` file located
    in our project root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we''ll check the title and description right at the beginning of the
    documentation file. As per our initial generation of the project, the title `grunt-myplugin`
    is probably still fine for us. We do, however, have a new task in this plugin
    that we should probably mention in the description. Let''s change it to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we can review the `Getting Started` section to ensure that it still suits
    our project. In this case, the generated instructions should still be sufficient.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Going further along in the documentation, we should now see the tasks contained
    in the plugin being listed. The first and only task currently listed is the `myplugin`
    task that we generated along with the project. Let''s begin writing the documentation
    for our `timestamp` task by adding the following header after the `myplugin` tasks
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first part we''ll add to our new task''s section will be the overview.
    This should provide a basic explanation of the goal and operation of the task.
    The following should be sufficient for our new task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we should probably provide instructions with regard to the options that
    are available to tweak the task. Let''s add the following to explain the `datetime`
    and `location` options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll add some usage examples for our task. The following examples illustrate
    using task with the default options, and with all the available options set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: grunt.initConfig({
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'timestamp: {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'options: {},'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'files: {'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '''dest/default_options'': ['
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '''src/foo'','
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '''src/bar'''
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: grunt.initConfig({
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'timestamp: {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'options: {'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'datetime: new Date(2014, 0, 1),'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'location: ''New York'''
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'files: {'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '''dest/default_options'': ['
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '''src/foo'','
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '''src/bar'''
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: // Wed, 01 Jan 2014 00:00:00 GMT at New York
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, we can review the contents of the `Contributing`, `Release History`
    and `License` sections to ensure there isn't anything we'd like to change in,
    or add to, our project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publishing a plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having a plugin published could be your introduction to the world of open source
    development and collaboration. As a project gains traction in the community and
    becomes useful to others, you may begin to see contributions being made to the
    project; contributions such as the fixing of issues and implementing of features
    that you may or may not have had on your roadmap.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we'll publish the project that we've been creating throughout
    this chapter, culminating with the project from the *Adding documentation for
    a plugin* recipe. Be sure to refer to it and its preceding recipes if you'd like
    to see how we got to this point.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can publish anything to the **node package manager** registry, we'll
    need to register as a user with the package hosting service. This can be done
    at [https://www.npmjs.com/signup](https://www.npmjs.com/signup).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps take us through publishing our plugin project to the node
    package manager registry:'
  prefs: []
  type: TYPE_NORMAL
- en: To start with, we'll need to identify ourselves to the NPM service by entering
    the `npm adduser` command in the command line and entering the user credentials
    we registered with at the [www.npmjs.com](http://www.npmjs.com) website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we should make sure that we are in the root directory of the plugin project
    we wish to publish. If we are not yet there, we should navigate to it before we
    continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we''re in the appropriate directory, publishing our plugin is as simple
    as running the `npm publish` command, which should produce output similar to the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the sake of this example, we''ll also remove our plugin from the registry
    using the `npm unpublish --force` command, which should produce output similar
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
