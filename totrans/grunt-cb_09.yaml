- en: Chapter 9. Authoring Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 插件编写
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Finding plugins
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找插件
- en: Contributing to a plugin
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为插件做出贡献
- en: Setting up a basic plugin project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基本的插件项目
- en: Creating a plugin task
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建插件的任务
- en: Writing tests for a plugin task
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为插件任务编写测试
- en: Adding documentation for a plugin
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为插件添加文档
- en: Publishing a plugin
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布插件
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: For the most part, Grunt is a framework that allows developers to package and
    configure the various tools available to web application developers in a uniform
    fashion. In the Grunt sphere, tools are packaged into what are called plugins,
    and these plugin packages all conform to Grunt operation and configuration conventions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在很大程度上，Grunt是一个框架，它允许开发者以统一的方式打包和配置提供给网络应用开发者的各种工具。在Grunt领域，工具被打包成被称为插件的包，这些插件包都符合Grunt的操作和配置约定。
- en: Some of the more popular plugins are provided by the Grunt core team, but all
    the others are contributed by the community of developers that use Grunt in their
    projects. Now that we're making use of Grunt in our project, we are part of this
    community, and we can take it upon ourselves to assist in the creation and maintenance
    of these plugins.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一些更受欢迎的插件是由Grunt核心团队提供的，但所有其他插件都是由使用Grunt的项目开发者社区贡献的。现在我们正在我们的项目中使用Grunt，我们成为了这个社区的一部分，我们可以承担起协助创建和维护这些插件的职责。
- en: Finding plugins
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找插件
- en: Before we even consider creating a plugin of our own, we should first determine
    whether there isn't already a plugin out there that will satisfy our requirements.
    In most cases, you will find that someone else has already ventured to solve the
    problems you are faced with now, and has done most if not all the work for you.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们考虑创建自己的插件之前，我们首先应该确定是否已经存在一个能够满足我们需求的插件。在大多数情况下，你会发现其他人已经尝试解决你现在面临的问题，并且已经为你做了大部分甚至全部的工作。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The most obvious place to start looking for a plugin would be on the Internet.
    So the first thing we'll need to do is open our favorite web browser and get ready
    to navigate.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找插件最明显的地方是互联网。因此，我们首先需要做的是打开我们喜欢的网页浏览器并准备导航。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps will take us through navigating to the Grunt project's website
    and using it to search for a plugin that we can use to run tasks concurrently.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们导航到Grunt项目的网站，并使用它来搜索我们可以用来运行并发任务的插件。
- en: 'First, we''ll navigate to the official Grunt plugin listing page by entering
    the following URL in our web browser: [http://gruntjs.com/plugins](http://gruntjs.com/plugins).'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将通过在我们的网页浏览器中输入以下URL来导航到官方Grunt插件列表页面：[http://gruntjs.com/plugins](http://gruntjs.com/plugins)。
- en: Next, we'll select the search input textbox that should look something like
    the following:![How to do it...](img/image00277.jpeg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将选择搜索输入文本框，它应该看起来像以下这样：![如何操作...](img/image00277.jpeg)
- en: With the textbox selected, we can now proceed to type the term we wish to search
    for; in this case we'll be entering `concurrent` as our search term:![How to do
    it...](img/image00278.jpeg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本框被选中后，我们现在可以开始输入我们想要搜索的术语；在这种情况下，我们将输入`concurrent`作为我们的搜索词：![如何操作...](img/image00278.jpeg)
- en: Once we've finished typing, we should see the list automatically loading for
    a little while and then display the search results:![How to do it...](img/image00279.jpeg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们完成输入，我们应该看到列表自动加载一段时间，然后显示搜索结果：![如何操作...](img/image00279.jpeg)
- en: Now that we see a plugin listed that looks like it might be what we're looking
    for, we can click on the list item to review its documentation. The installation
    instructions for the plugin should usually be somewhere near the top of the documentation
    page.![How to do it...](img/image00280.jpeg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们看到的一个插件列表看起来可能就是我们要找的，我们可以点击列表项来查看其文档。插件的安装说明通常应该在文档页面的顶部附近。![如何操作...](img/image00280.jpeg)
- en: Contributing to a plugin
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为插件做出贡献
- en: Once you've found a plugin that closely matches your needs, you might find that
    some aspect of it is either broken, incomplete, or missing. This is where you
    can step in and contribute to the project in a variety of ways.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你找到一个与你的需求非常接近的插件，你可能会发现它的某些方面可能是有缺陷的、不完整的或缺失的。这就是你可以介入并为项目做出各种贡献的地方。
- en: Contributing to a plugin project provides you with the advantage of getting
    exactly what you want from it, without having to create the entire project yourself.
    It's also beneficial to others, such as yourself, who have encountered the issue
    you face or require the same additional features.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 贡献插件项目可以为您提供从项目中获得您所需内容的优势，而无需自己创建整个项目。这对其他人，包括您自己，也有好处，因为他们遇到了您面临的问题或需要相同的附加功能。
- en: Getting started
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: A **GitHub** account is required to make any of the contributions mentioned
    in this recipe. If you don't already have an account, creating one is as simple
    as visiting GitHub's home page and filling out the registration form there at
    [https://github.com/](https://github.com/).
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要进行本食谱中提到的任何贡献，需要一个 **GitHub** 账户。如果您还没有账户，创建一个账户就像访问 GitHub 主页并填写注册表单一样简单，请访问
    [https://github.com/](https://github.com/)。
- en: Tip
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The following URL provides another good all-round introduction to Git and GitHub:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下网址提供了对 Git 和 GitHub 的全面介绍：
- en: '[https://guides.github.com/activities/hello-world/](https://guides.github.com/activities/hello-world/)'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://guides.github.com/activities/hello-world/](https://guides.github.com/activities/hello-world/)'
- en: 'Familiarize yourself with the practice of creating **issues** in the GitHub
    Issues section. The mechanism to create and manage issues is quite simple, but
    it''s very important to apply good practices when making use of it. Well-written
    issues make all the difference and will help you get what you need in a shorter
    period of time. You can find out more about good issue-writing practices at the
    following location:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 熟悉在 GitHub 问题部分创建 **问题** 的实践。创建和管理问题的机制相当简单，但在使用时应用良好的实践非常重要。良好的问题编写将产生重大差异，并有助于您在更短的时间内获得所需内容。您可以在以下位置了解更多关于良好问题编写实践的信息：
- en: '[http://wiredcraft.com/posts/2014/01/08/how-we-write-our-github-issues.html](http://wiredcraft.com/posts/2014/01/08/how-we-write-our-github-issues.html)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://wiredcraft.com/posts/2014/01/08/how-we-write-our-github-issues.html](http://wiredcraft.com/posts/2014/01/08/how-we-write-our-github-issues.html)'
- en: 'In order to retrieve the code and documentation for any of the plugin projects,
    you will need to have the Git version control software installed. You can find
    out more about the various installation options for Git at the following URL:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了检索任何插件项目的代码和文档，您需要安装 Git 版本控制软件。您可以在以下网址了解有关 Git 的各种安装选项：
- en: '[http://git-scm.com/book/en/v1/Getting-Started-Installing-Git](http://git-scm.com/book/en/v1/Getting-Started-Installing-Git)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://git-scm.com/book/en/v1/Getting-Started-Installing-Git](http://git-scm.com/book/en/v1/Getting-Started-Installing-Git)'
- en: 'If you''d like to contribute the changes to code or documentation that you''ve
    made to a project hosted on GitHub, you will have to familiarize yourself with
    the pull request workflow. More information on the pull request workflow can be
    found at the following URL:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想将您对托管在 GitHub 上的项目所做的代码或文档更改贡献出来，您需要熟悉拉取请求（pull request）的工作流程。有关拉取请求工作流程的更多信息，请参阅以下网址：
- en: '[https://help.github.com/articles/using-pull-requests/](https://help.github.com/articles/using-pull-requests/)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://help.github.com/articles/using-pull-requests/](https://help.github.com/articles/using-pull-requests/)'
- en: 'To get the best out of your contribution efforts to the Grunt project and its
    plugins, be sure to familiarize yourself with the Grunt contribution guide, which
    can be found at the following URL:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了从您对 Grunt 项目及其插件的贡献中获得最佳效果，请确保您熟悉 Grunt 贡献指南，该指南可在以下网址找到：
- en: '[http://gruntjs.com/contributing](http://gruntjs.com/contributing)'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://gruntjs.com/contributing](http://gruntjs.com/contributing)'
- en: Be sure to carefully study the documentation of the project that 're considering
    contributing to ensure that you are using it correctly, and that the feature that
    you're looking for is not already available. The documentation of a Grunt plugin
    project should always be found in the `README.md` file in the root of the project's
    repository.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您考虑贡献的项目中，务必仔细研究项目文档，以确保您正确使用它，并且您正在寻找的功能尚未提供。Grunt 插件项目的文档应始终位于项目仓库根目录下的 `README.md`
    文件中。
- en: Tip
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: GitHub will display the `README.md` document located in the repository root
    as the repository's home page by default.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: GitHub 默认会将位于仓库根目录的 `README.md` 文档显示为仓库的主页。
- en: Each project might also have its own specific contribution guidelines that need
    to be followed. These are usually found either at the end of `README.md` or in
    the `CONTRIBUTING.md` document at the root of the project's repository.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个项目可能都有自己的特定贡献指南，需要遵循。这些通常可以在`README.md`的末尾或项目存储库根目录下的`CONTRIBUTING.md`文档中找到。
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'There are many ways to contribute to an existing plugin. Let''s list them according
    to their difficulty, starting with the simplest one:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方式可以为现有插件做出贡献。让我们根据其难度进行列表，从最简单的一个开始：
- en: Helping with an existing issue by commenting on it's contents, reproducing it's
    error, or providing a resolution to the stated problem.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过评论其内容、重现其错误或提供对所述问题的解决方案来帮助现有问题。
- en: Adding issues for faults as you encounter them. Keep in mind that a new issue
    is only helpful if you clearly state the context and problem. What's even more
    helpful is to provide a potential solution to the problem if you can think of
    one.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在遇到问题时添加问题。请注意，只有当您清楚地说明上下文和问题时，新问题才有帮助。如果您能想到一个潜在解决方案，那么提供该解决方案将更有帮助。
- en: Tip
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Be sure to check for existing issues with a similar subject. If the issue focuses
    on the same subject, it is usually better to just add to it. However, if it slightly
    differs from the existing one, it might be a good idea to refer to it in a new
    issue.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一定要检查具有类似主题的现有问题。如果问题关注的是相同主题，通常最好是添加到它。然而，如果它与现有问题略有不同，那么在新的问题中引用它可能是个好主意。
- en: It's also recommended to review the documentation of a plugin before submitting
    an issue. This is to ensure that the issue or behavior you experience is not expected
    and that you are actually using the plugin as intended by its authors.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在提交问题之前，也建议审查插件的文档。这是为了确保您遇到的问题或行为不是预期的，并且您实际上正在按照作者的意图使用插件。
- en: Adding issues for possible improvements. As always, it's important to clearly
    state the context and concept of the improvement.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加可能改进的问题。始终，清楚地说明上下文和改进的概念很重要。
- en: Tip
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Be sure to check issues and pull requests to see whether the feature has not
    been requested or developed yet. Also, review the documentation to ensure that
    it is not yet available in some other form.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一定要检查问题和pull request，看看是否尚未请求或开发该功能。此外，审查文档以确保它尚未以其他形式可用。
- en: Submitting updates and improvements to the documentation of the plugin. This
    requires forking the plugin project and submitting a pull request that contains
    the changes.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交对插件文档的更新和改进。这需要分支插件项目并提交包含更改的pull request。
- en: Resolving issues and submitting the changes to the code base. This requires
    forking the project and submitting a pull request. If the reported issue is not
    breaking tests yet, it's essential to add a test for the specific use case that
    was causing the error.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决问题并将更改提交到代码库。这需要分支项目并提交一个pull request。如果报告的问题尚未破坏测试，则添加一个针对特定用例的测试是至关重要的，该用例导致了错误。
- en: Implementing new features and submitting the changes to the code base. This
    requires forking the plugin project and submitting a pull request. Keep in mind
    that adding a feature requires the documentation for the project to be updated
    and tests to be created that ensure that the new feature behaves as documented.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现新功能并将更改提交到代码库。这需要分支插件项目并提交一个pull request。请注意，添加功能需要更新项目的文档并创建测试来确保新功能的行为符合文档描述。
- en: Setting up a basic plugin project
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基本插件项目
- en: At the base of every Grunt plugin lies a Node.js project that contains information
    about its purpose, version, dependencies, and so forth. Due to the basic project
    structure for all Grunt plugins being pretty much the same, we'll make use of
    a project generator to provide us with a starting point.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Grunt插件的基础都是一个包含其目的、版本、依赖等信息Node.js项目。由于所有Grunt插件的基项目结构几乎相同，我们将利用项目生成器为我们提供一个起点。
- en: In this recipe, we'll make use of the **Yeoman** project's scaffolding tool
    to generate our basic Grunt plugin project. It provides generators for a large
    variety of project setups, all of which have Grunt as their core automation tool.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用**Yeoman**项目的脚手架工具来生成我们的基本Grunt插件项目。它提供了一系列项目设置的生成器，所有这些项目都以Grunt作为其核心自动化工具。
- en: Tip
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'You can learn more about the Yeoman project at the following URL:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下URL了解更多关于Yeoman项目的信息：
- en: '[http://yeoman.io/](http://yeoman.io/)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://yeoman.io/](http://yeoman.io/)'
- en: Getting started
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: The only requirement for this recipe is a global installation of Node.js, with
    Grunt installed into it as per the *Installing the Grunt CLI* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*. Be sure to refer to it if you are not yet familiar with its
    contents.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的唯一要求是在全局安装 Node.js，并按照 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。开始使用 Grunt")
    中 *安装 Grunt CLI* 食谱的说明安装 Grunt。如果您还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through installing the Yeoman tool and using it
    to generate a basic Grunt plugin project.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导您安装 Yeoman 工具并使用它生成一个基本的 Grunt 插件项目。
- en: 'First, we''ll need to install the Yeoman tool globally using the **npm** utility.
    This is done by entering the following command:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要使用 **npm** 工具全局安装 Yeoman 工具。这是通过输入以下命令完成的：
- en: '[PRE0]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We''ll also need to install the Yeoman generator that is specifically geared
    toward generating a Grunt plugin project. This is done by entering the following
    command:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要安装专门针对生成 Grunt 插件项目的 Yeoman 生成器。这是通过输入以下命令完成的：
- en: '[PRE1]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we''ll create a directory called `grunt-myplugin`, which will contain
    our plugin project, and navigate to it using a command similar to the following:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个名为 `grunt-myplugin` 的目录，它将包含我们的插件项目，并使用类似以下命令导航到它：
- en: '[PRE2]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With Yeoman and the required generator installed, we can now use it to generate
    our plugin project by running the following command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装了 Yeoman 和所需的生成器之后，我们现在可以通过运行以下命令来使用它生成我们的插件项目：
- en: '[PRE3]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After running the previous command, you will be presented with a series of
    questions that will assist the generator in creating the project. This interaction
    should look something like the following:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行上一个命令后，您将看到一系列问题，这些问题将帮助生成器创建项目。这种交互应该类似于以下内容：
- en: '[PRE4]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: All the references to 'me' in the previous example are where you should enter
    your own name, account name, and credentials.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上一个示例中所有关于 '我' 的引用处，您应该输入您自己的姓名、账户名称和凭证。
- en: 'After all the questions have been answered, the generator will create all the
    files required for a simple plugin with a single functioning task. The output,
    which is similar to the following, will inform us of these actions:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在回答完所有问题后，生成器将创建一个简单插件所需的所有文件，具有一个功能任务。输出，类似于以下内容，将通知我们这些操作：
- en: '[PRE5]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With all the necessary files created, we now need to install the dependencies
    required for the project to function. These dependencies are listed in the generated
    `package.json` file and can be installed using the following command:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建了所有必要的文件之后，我们现在需要安装项目运行所需的依赖。这些依赖项列在生成的 `package.json` 文件中，可以使用以下命令安装：
- en: '[PRE6]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: This command uses the `package.json` file, which is found in the current directory,
    so be sure to have navigated to the `grunt-myplugin` directory we created earlier,
    if you have not done so already.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令使用当前目录中找到的 `package.json` 文件，因此请确保您已经导航到我们之前创建的 `grunt-myplugin` 目录，如果您还没有这样做的话。
- en: 'The best way to confirm that the project has been successfully set up (apart
    from actually using it in a Grunt project) would be to run the generated tests.
    This can be done using the following command:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认项目已成功设置的最佳方式（除了在 Grunt 项目中实际使用它之外）是运行生成的测试。这可以通过以下命令完成：
- en: '[PRE7]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Successfully running the tests should produce output similar to the following:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功运行测试应该产生类似于以下内容的输出：
- en: '[PRE8]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating a plugin task
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建插件任务
- en: The functionality of Grunt plugins are mostly contained inside the tasks they
    provide. The plugin project scaffolding provided by the Yeoman tool creates one
    such task for us to work from or use as a reference when creating our own.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Grunt 插件的功能主要包含在它们提供的任务中。Yeoman 工具提供的插件项目脚手架为我们提供了一个这样的任务，我们可以从中工作或作为创建我们自己的参考。
- en: Getting started
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: In this recipe, we'll work with the basic project structure we created in the
    *Setting up a basic plugin project* recipe earlier in this chapter. Be sure to
    refer to it if you are not yet familiar with its contents.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用本章前面 *设置基本插件项目* 食谱中创建的基本项目结构。如果您还不熟悉其内容，请务必参考它。
- en: This recipe also contains concepts that are introduced in the *Creating a multi
    task*, *Using options in a task* and *Using files in a task* recipes that can
    be found at the end of [Chapter 8](part0081.xhtml#aid-2D7TI1 "Chapter 8. Creating
    Custom Tasks"), *Creating Custom Tasks*. Be sure to refer to these recipes if
    you'd like to gain a deeper understanding of the concepts they introduced.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方还包含在[第8章](part0081.xhtml#aid-2D7TI1 "第8章。创建自定义任务")的“创建多任务”、“在任务中使用选项”和“在任务中使用文件”配方中介绍的概念，这些配方可以在“创建自定义任务”部分的末尾找到。如果您想深入了解这些概念，请务必参考这些配方。
- en: How to do it...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: The following steps take us through creating a task that concatenates all the
    indicated source files, and then prepends a comment containing a timestamp and
    location to the result.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个任务，该任务将连接所有指定的源文件，并在结果前添加包含时间戳和位置的注释。
- en: We'll start by creating a new file called `timestamp.js` in the `tasks` directory
    that will contain our task code. It's good practice to have the file that contains
    a task named after the task itself.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先在`tasks`目录中创建一个名为`timestamp.js`的新文件，该文件将包含我们的任务代码。将包含任务的文件命名为任务本身是一种良好的做法。
- en: 'Next, we''ll set up the code module that will contain our task code and register
    the new task inside it by filling the new file with the following code:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置包含我们的任务代码的代码模块，并通过填充以下代码来在模块内部注册新任务：
- en: '[PRE9]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The `module.exports` object is automatically made available by Node.js for
    each file. Whatever gets assigned to it is what will be made available when the
    file is imported into another file. You can read more about `module.exports` at
    the following URL:'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Node.js自动为每个文件提供`module.exports`对象。将其分配给它的任何内容都将在文件被导入到另一个文件时可用。您可以在以下URL中了解更多关于`module.exports`的信息：
- en: '[https://nodejs.org/api/modules.html#modules_module_exports](https://nodejs.org/api/modules.html#modules_module_exports)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://nodejs.org/api/modules.html#modules_module_exports](https://nodejs.org/api/modules.html#modules_module_exports)'
- en: 'The first thing we''ll need to do inside our task is retrieve the options for
    the task target and store it in the `options` variable. We''ll also provide some
    default values for the available options to be sure that our task works even without
    any options being provided. The following code takes care of this and can be added
    at the top of the task function:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的任务内部，我们首先需要做的是检索任务目标的选项，并将其存储在`options`变量中。我们还将为可用的选项提供一些默认值，以确保即使没有提供任何选项，我们的任务也能正常工作。以下代码负责此操作，并可以添加到任务函数的顶部：
- en: '[PRE10]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The default for the `datetime` option is the very earliest available value in
    the Unix time range. This value is determined by creating a standard JavaScript
    `Date` object and providing `0` as its only parameter.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`datetime`选项的默认值是Unix时间范围内可用的最早值。此值是通过创建一个标准的JavaScript `Date`对象并为其提供`0`作为唯一参数来确定的。'
- en: 'The next thing we''ll do is create a `comment` variable that contains an empty
    string, and then add the contents of our comment to it piece by piece. The following
    code does this for us:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个包含空字符串的`comment`变量，然后逐步将我们的注释内容添加到其中。以下代码为我们执行此操作：
- en: '[PRE11]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With our comment string ready, we can now concatenate all the source files,
    and write the comment and result to the indicated destination file. The following
    code does this for all files indicated in the task configuration:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在准备好我们的注释字符串后，我们现在可以连接所有源文件，并将注释和结果写入指定的目标文件。以下代码为任务配置中指示的所有文件执行此操作：
- en: '[PRE12]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that we''ve got our task registered and functional, we can add some configurations
    that we can test it with. Let''s add two targets: one called `default_options`
    that tests the task without any options provided and another called `custom_options`
    that tests the task with all the possible options provided. We can do this by
    adding the following configuration in our Gruntfile:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经注册并使任务功能化，我们可以添加一些配置，以便我们可以通过它们来测试任务。让我们添加两个目标：一个名为`default_options`的目标，它测试没有提供任何选项的任务，另一个名为`custom_options`的目标，它测试提供了所有可能选项的任务。我们可以在我们的Gruntfile中添加以下配置来实现这一点：
- en: '[PRE13]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We're making use of the `Date.UTC` function here to ensure that the behavior
    of this code doesn't differ between the various time zones. Setting the date in
    this way will always amount to a date and time value in the GMT time zone.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在这里使用`Date.UTC`函数来确保此代码在不同时区之间的行为不会有所不同。以这种方式设置日期将始终等于GMT时区中的日期和时间值。
- en: 'In order for these task targets to work, they will also have to indicate the
    source files they would like to read from and the destination file they would
    like the result to be written to. For our test, we''ll use the files that were
    created by the project generator in the `test/fixtures` directory as sources,
    and write the result to the `tmp/timestamp` directory. This can be done by adding
    the following `files` configurations:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使这些任务目标能够工作，它们还必须指明它们想要从中读取的源文件以及它们想要将结果写入的目标文件。在我们的测试中，我们将使用在`test/fixtures`目录中由项目生成器创建的文件作为源文件，并将结果写入`tmp/timestamp`目录。这可以通过添加以下`files`配置来完成：
- en: '[PRE14]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, we can run our task using the `grunt timestamp` command, which should
    produce output similar to the following:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以使用`grunt timestamp`命令来运行我们的任务，它应该产生类似于以下内容的输出：
- en: '[PRE15]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To confirm that the tasks ran correctly, we can check the contents of the files
    created in the `tmp/timestamp` directory. The `custom_options` file, for example,
    should have content similar to the following:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确认任务运行正确，我们可以检查在`tmp/timestamp`目录中创建的文件内容。例如，`custom_options`文件应该包含类似于以下内容：
- en: '[PRE16]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Writing tests for a plugin task
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为插件任务编写测试
- en: The creation of tests forms an essential part of the development of all programming
    modules, which includes Grunt plugins. Tests provide a way for us to confirm that
    our tasks work and keep working as expected in a variety of situations.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的创建是所有编程模块开发的一个基本部分，包括Grunt插件。测试为我们提供了一种方式，以确认我们的任务在多种情况下都能按预期工作并保持工作。
- en: Getting started
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始
- en: In this recipe, we'll continue to work on the project we created in the *Creating
    a plugin task* recipe earlier in this chapter. Be sure to refer to it if you are
    not yet familiar with its contents.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将继续在本章前面“创建插件任务”菜谱中创建的项目进行工作。如果你还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: The following steps take us through creating expected output files and a test
    suite that checks that the actual output files from the task match them.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建预期的输出文件和一个测试套件，以检查实际输出文件是否与它们匹配。
- en: 'Before we get started on creating the actual test suite, we''ll create a file
    called `default_options` in the `test/expected/timestamp` directory that contains
    the expected output of running the task with the `default_options` target:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们开始创建实际的测试套件之前，我们将在`test/expected/timestamp`目录中创建一个名为`default_options`的文件，该文件包含使用`default_options`目标运行任务时预期的输出：
- en: '[PRE17]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we''ll create another file called `custom_options` in the same directory
    that contains the expected output of running the file with the `custom_options`
    target:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在同一目录中创建另一个名为`custom_options`的文件，该文件包含使用`custom_options`目标运行文件时预期的输出：
- en: '[PRE18]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that we''ve got the files containing the expected output ready, we can
    begin to set up the test suite that will actually compare their contents with
    the task''s results. We''ll start by creating a file called `timestamp_test.js`
    in the `test` directory and fill it with the following code:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了包含预期输出的文件，我们可以开始设置实际的测试套件，该套件将比较它们的与任务结果的差异。我们将在`test`目录中创建一个名为`timestamp_test.js`的文件，并填充以下代码：
- en: '[PRE19]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Tip
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The Grunt library is imported and assigned to the `grunt` variable at the beginning
    of the file for later use in the tests.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在文件开始处将Grunt库导入并分配给`grunt`变量，以便在测试中使用。
- en: We also assign an empty object to a property named after the task in the `module.exports`
    object. We'll add our test functions to this object.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还在`module.exports`对象中为任务分配了一个以任务命名的空对象。我们将把我们的测试函数添加到这个对象中。
- en: 'With the basic framework for our test suite in place, we can now add a test
    for each of our expected results. We''ll name the tests after the targets that
    they''ll be testing, just like the expected result files we created earlier. The
    tests are added by adding the following properties to the exported object in the
    `timestamp_test.js` file:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的测试套件的基本框架就绪后，我们现在可以为每个预期的结果添加一个测试。我们将按照之前创建的预期结果文件命名测试，将测试添加到`timestamp_test.js`文件中导出的对象中：
- en: '[PRE20]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The format of tests is usually determined by the framework that runs them.
    In the case of our example, which is based on the generated Grunt plugin project,
    we use the **nodeunit** framework. You can read more about the framework at the
    following URL:'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试的格式通常由运行它们的框架决定。在我们的例子中，它基于生成的Grunt插件项目，我们使用**nodeunit**框架。你可以在以下URL了解更多关于该框架的信息：
- en: '[https://github.com/caolan/nodeunit](https://github.com/caolan/nodeunit)'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[nodeunit](https://github.com/caolan/nodeunit)'
- en: 'Now that we have our test suite set up, we need to indicate to the `test` alias
    task that it should run the timestamp task before running the tests. This causes
    the task to produce the resulting files that can then be tested against files
    that have been set up as the expected results. This is done by adding the `timestamp`
    task to the `test` alias task before the `nodeunit` task that runs the tests:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经设置了测试套件，我们需要指示 `test` 别名任务在运行测试之前应该运行时间戳任务。这会导致任务生成可以与已设置为预期结果的文件进行测试的结果文件。这是通过在运行测试的
    `nodeunit` 任务之前将 `timestamp` 任务添加到 `test` 别名任务中实现的：
- en: '[PRE21]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we can run the tests using either the `npm test` or `grunt test` command,
    which should produce output similar to the following:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以使用 `npm test` 或 `grunt test` 命令来运行测试，这应该会产生类似于以下内容的输出：
- en: '[PRE22]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We can now see by the output near the end that our tests have run successfully
    and we can keep running them during development to make sure we haven't broken
    anything with our latest changes.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以通过接近结尾的输出看到，我们的测试已经成功运行，我们可以在开发过程中继续运行它们，以确保我们没有因为最新的更改而破坏任何东西。
- en: Adding documentation for a plugin
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为插件添加文档
- en: High-quality documentation is essential for the success of most software development
    projects. In the context of a Grunt plugin, its main purpose is to provide instructions
    and information on the usage of the plugin and its tasks. As with most projects
    hosted on GitHub, the documentation for a plugin is located in the `README.md`
    file, and written in the **Markdown** format.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 高质量的文档对于大多数软件开发项目的成功至关重要。在Grunt插件的上下文中，其主要目的是提供有关插件及其任务的使用说明和信息。与GitHub上托管的大多数项目一样，插件的文档位于
    `README.md` 文件中，并使用 **Markdown** 格式编写。
- en: Tip
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'For more information on the general Markdown format, you can visit the following
    URLs:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Markdown通用格式的更多信息，您可以访问以下网址：
- en: '[http://daringfireball.net/projects/markdown/](http://daringfireball.net/projects/markdown/)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[Markdown](http://daringfireball.net/projects/markdown/)'
- en: '[https://help.github.com/articles/github-flavored-markdown/](https://help.github.com/articles/github-flavored-markdown/)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[GitHub flavored Markdown](https://help.github.com/articles/github-flavored-markdown/)'
- en: Getting started
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: In this recipe, we'll continue to work on the project we created in the *Creating
    a plugin task* recipe earlier in this chapter. Be sure to refer to it if you are
    not yet familiar with its contents.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将继续在本章前面“创建插件任务”菜谱中创建的项目上工作。如果你还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: The following steps take us through reviewing and adding to the documentation
    generated by Yeoman and the `gruntplugin` generator we used earlier.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们审查和添加由Yeoman和之前使用的 `gruntplugin` 生成器生成的文档。
- en: Let's start by using our favorite editor to open the `README.md` file located
    in our project root.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先使用我们最喜欢的编辑器打开位于项目根目录中的 `README.md` 文件。
- en: 'First, we''ll check the title and description right at the beginning of the
    documentation file. As per our initial generation of the project, the title `grunt-myplugin`
    is probably still fine for us. We do, however, have a new task in this plugin
    that we should probably mention in the description. Let''s change it to the following:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将在文档文件的开始部分检查标题和描述。根据我们项目的初始生成，标题 `grunt-myplugin` 可能对我们来说仍然适用。然而，我们在这个插件中有一个新的任务，我们可能需要在描述中提到它。让我们将其更改为以下内容：
- en: '[PRE23]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Next, we can review the `Getting Started` section to ensure that it still suits
    our project. In this case, the generated instructions should still be sufficient.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以回顾“入门”部分，以确保它仍然适合我们的项目。在这种情况下，生成的说明应该仍然足够。
- en: 'Going further along in the documentation, we should now see the tasks contained
    in the plugin being listed. The first and only task currently listed is the `myplugin`
    task that we generated along with the project. Let''s begin writing the documentation
    for our `timestamp` task by adding the following header after the `myplugin` tasks
    section:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文档中进一步深入，我们现在应该看到插件中包含的任务列表。目前列出的第一个也是唯一一个任务是我们在项目中生成的 `myplugin` 任务。让我们在 `myplugin`
    任务部分之后添加以下标题，开始编写我们的 `timestamp` 任务文档：
- en: '[PRE24]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The first part we''ll add to our new task''s section will be the overview.
    This should provide a basic explanation of the goal and operation of the task.
    The following should be sufficient for our new task:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将添加到我们新任务部分的第一个部分将是概述。这应该提供对任务目标和操作的基本解释。以下内容对于我们的新任务应该是足够的：
- en: '[PRE25]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now we should probably provide instructions with regard to the options that
    are available to tweak the task. Let''s add the following to explain the `datetime`
    and `location` options:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可能需要提供有关可调整任务的选项的说明。让我们添加以下内容来解释`datetime`和`location`选项：
- en: '[PRE26]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, we''ll add some usage examples for our task. The following examples illustrate
    using task with the default options, and with all the available options set:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的任务添加一些使用示例。以下示例说明了使用默认选项和使用所有可用选项设置的任务：
- en: '[PRE27]js'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PRE27]js'
- en: grunt.initConfig({
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: grunt.initConfig({
- en: 'timestamp: {'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'timestamp: {'
- en: 'options: {},'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'options: {},'
- en: 'files: {'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'files: {'
- en: '''dest/default_options'': ['
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''dest/default_options'': ['
- en: '''src/foo'','
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''src/foo'','
- en: '''src/bar'''
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''src/bar'''
- en: ']'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ']'
- en: '},'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: '})'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE28]js'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PRE28]js'
- en: grunt.initConfig({
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: grunt.initConfig({
- en: 'timestamp: {'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'timestamp: {'
- en: 'options: {'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'options: {'
- en: 'datetime: new Date(2014, 0, 1),'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'datetime: new Date(2014, 0, 1),'
- en: 'location: ''New York'''
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'location: ''New York'''
- en: '},'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: 'files: {'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'files: {'
- en: '''dest/default_options'': ['
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''dest/default_options'': ['
- en: '''src/foo'','
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''src/foo'','
- en: '''src/bar'''
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''src/bar'''
- en: ']'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ']'
- en: '},'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: '})'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE29]js'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PRE29]js'
- en: // Wed, 01 Jan 2014 00:00:00 GMT at New York
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // Wed, 01 Jan 2014 00:00:00 GMT at New York
- en: '[PRE30]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Finally, we can review the contents of the `Contributing`, `Release History`
    and `License` sections to ensure there isn't anything we'd like to change in,
    or add to, our project.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以回顾一下`Contributing`、`Release History`和`License`部分的内容，以确保项目中没有我们想要更改或添加的内容。
- en: Publishing a plugin
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布插件
- en: Having a plugin published could be your introduction to the world of open source
    development and collaboration. As a project gains traction in the community and
    becomes useful to others, you may begin to see contributions being made to the
    project; contributions such as the fixing of issues and implementing of features
    that you may or may not have had on your roadmap.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 发布一个插件可能就是您进入开源开发和协作世界的入门。随着项目在社区中获得关注并变得对他人有用，您可能会开始看到对项目的贡献；这些贡献可能包括修复问题和实现您可能或可能没有在路线图中列出的功能。
- en: Getting started
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: In this recipe, we'll publish the project that we've been creating throughout
    this chapter, culminating with the project from the *Adding documentation for
    a plugin* recipe. Be sure to refer to it and its preceding recipes if you'd like
    to see how we got to this point.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将发布我们在本章中创建的项目，最终以*为插件添加文档*菜谱中的项目结束。如果您想了解我们是如何到达这个阶段的，请务必参考它及其前面的菜谱。
- en: Before we can publish anything to the **node package manager** registry, we'll
    need to register as a user with the package hosting service. This can be done
    at [https://www.npmjs.com/signup](https://www.npmjs.com/signup).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够将任何内容发布到**node包管理器**注册表之前，我们需要在包托管服务中以用户身份进行注册。这可以在[https://www.npmjs.com/signup](https://www.npmjs.com/signup)完成。
- en: How to do it...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps take us through publishing our plugin project to the node
    package manager registry:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们如何将插件项目发布到node包管理器注册表：
- en: To start with, we'll need to identify ourselves to the NPM service by entering
    the `npm adduser` command in the command line and entering the user credentials
    we registered with at the [www.npmjs.com](http://www.npmjs.com) website.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要通过在命令行中输入`npm adduser`命令并向NPM服务确认我们，然后输入我们在[www.npmjs.com](http://www.npmjs.com)网站上注册的用户凭据。
- en: Next, we should make sure that we are in the root directory of the plugin project
    we wish to publish. If we are not yet there, we should navigate to it before we
    continue.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们应该确保我们处于我们想要发布的插件项目的根目录中。如果我们还没有在那里，我们应该在继续之前导航到那里。
- en: 'Once we''re in the appropriate directory, publishing our plugin is as simple
    as running the `npm publish` command, which should produce output similar to the
    following:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们处于适当的目录中，发布我们的插件就像运行`npm publish`命令一样简单，这应该会产生类似于以下内容的输出：
- en: '[PRE31]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'For the sake of this example, we''ll also remove our plugin from the registry
    using the `npm unpublish --force` command, which should produce output similar
    to the following:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了这个示例，我们还将使用`npm unpublish --force`命令从注册表中删除我们的插件，这应该会产生类似于以下内容的输出：
- en: '[PRE32]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
