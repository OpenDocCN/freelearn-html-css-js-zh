["```js\nfunction f1(){\n   a = 2; // No explicit \"var\", hence global scope instead of function scope\n}\n```", "```js\na = 2; // Won't create a variable in TypeScript\n```", "```js\nconsole.log(\"Test\", a); // Won’t allow to use the variable in TypeScript\nvar a = 2;\n```", "```js\nvar a = 2;\nvar a = 23;\n```", "```js\nfunction letFunction() {\n   let a: number = 1;\n   { // Scope start\n     let a: number = 2;\n   } // Scope end\n   console.log(a); // 1\n\n   if(true){ // Scope start\n     let a: number = 3;\n    } // Scope end\n    console.log(a); // 1\n}\nletFunction()\n```", "```js\nlet a:number = 2;\na = \"two\"; // Doesn’t compile\n```", "```js\nfunction switchFunction(num: number) {\n   let b: string = \"functionb\";\n\n   switch (num) {\n       case 1:\n         let b: string = \"case 1\";\n       break;\n   }\n}\n```", "```js\nfunction switchFunction(num: number) {\n let b: string = \"functionb\";\n\n  switch (num) {\n    case 1:\n     let b: string = \"case 1\";\n    break;\n    case 2:\n     let b: string = \"case 2\";\n    break;\n  }\n}\n```", "```js\nfunction switchFunction(num: number) {\n  let b: string = \"functionb\";\n\n  switch (num) {\n    case 1: {\n      let b: string = \"case 1\";\n    break;\n    } // After break\n    case 2: {\n      let b: string = \"case 2\";\n    } // Before break\n    break;\n  }\n\n}\n```", "```js\nconst arr: number[] = [1, 2, 3];\narr.push(4);\n```", "```js\nconst myObj: { x: number } = { x: 1 };\nmyObj.x = 2;\n```", "```js\nconst a = 2;\nfunction z() {\n   let a = 3;\n}\n```", "```js\nfunction noNeedConstLetvar(parameter1: number) { }\n```", "```js\nlet boolean: number = true; // Won't compile\n```", "```js\n let boolean1: number = Number(true);\n let boolean2: number = Number(false);\n```", "```js\nlet boolean3: number = true ? 1 : 0;\nlet boolean4: number = false ? 1 : 0;\n```", "```js\n  let boolean5: number = +true;\n  let boolean6: number = +false;\n```", "```js\n  let string1: number = Number(\"123.5\");\n  let string2: number = Number(\"-123.5\");\n```", "```js\n  let string3: number = parseInt(\"123.5\", 10);\n  let string4: number = parseInt(\"-123.5\", 10);\n```", "```js\n  let string5: number = +\"123.5\";\n  let string6: number = +\"-123.5\";\n```", "```js\nlet numeric_separator: number = 9_000_100;\n```", "```js\n  let number1: number = 0x10;\n  let number2: number = 0b10;\n  let number3: number = 0o10;\n```", "```js\n  let string1: string = 's1';\n  let string2: string = \"s2\";\n  let string3: string = `s3`;\n```", "```js\nlet interpolation1: string = `This contains the variable s1: ${string1} as well as ${string2}`;\nlet interpolation2: string = `Can invoke variable function: ${string1.substr(0, 1)} as well as any code like this addition: ${1 + 1}`;\n\nconsole.log(interpolation2);\n```", "```js\n  let multipleLine1: string = \"Line1\" +\n      \"Line2\";\n\n  let multipleLine2: string = `Line1\n      Line2`;\n```", "```js\n  let bool1: boolean = true; // true\n  let bool2: boolean = false; // false\n  let bool3: boolean = 1 === 1; // true\n```", "```js\nlet bool4: boolean = Boolean(\"true\"); // true\nlet bool5: boolean = Boolean(\"TRUE\"); // true\nlet bool6: boolean = Boolean(\"false\"); // true\nlet bool7: boolean = Boolean(\"FALSE\"); // true\nlet bool8: boolean = Boolean(NaN); // false\n\nlet bool9: boolean = new Boolean(\"true\").valueOf(); // true\nlet bool10: boolean = new Boolean(\"false\").valueOf(); // true\n\nlet bool11: boolean = \"true\" as any as boolean; // true\nlet bool12: boolean = \"false\" as any as boolean; // false\n```", "```js\nlet bool13 = isTrue(\"true\"); // true\nlet bool14 = isTrue(\"false\"); // false\n\nfunction isTrue(s: string): boolean {\n    return s.toLocaleLowerCase() === \"true\";\n}\n```", "```js\n  let n1: string | null = Math.random() > 0.5 ? null : \"test\";\n  // console.log(n1.substring(0, 1)); // Won't compile since can be null\n\n  if (n1 !== null) {\n      console.log(n1.substring(0, 1));\n  }\n```", "```js\nlet primitiveWithNull: number | null = null;\n```", "```js\n  let n2: string | undefined = Math.random() > 0.5 ? undefined : \"test\";\n  // console.log(n2.substring(0, 1)); // Won't compile since can be null\n\n  if (n2 !== null) {\n      console.log(n2.substring(0, 1));\n  }\n```", "```js\nfunction f1(optional?: string): void {\n    if (optional === undefined) {\n        // Optional parameter was not provided OR was set to undefined\n    } else {\n        // The optional parameter is for sure a string (not undefined)\n    }\n}\n```", "```js\n  let obj = { test: 1 };\n  console.log(obj[\"notInObject\"]);\n```", "```js\nlet primitiveWithUndefined: number | undefined = undefined;\n\nfunction functOptionalArg(primitiveOptional?: number): void {\n    // ...\n}\n\nfunctOptionalArg();\nfunctOptionalArg(undefined);\nfunctOptionalArg(1);\n```", "```js\ninterface InterfaceWithUndefined {\n    m1?: number;\n}\n```", "```js\nlet i1: InterfaceWithUndefined = {};\nlet i2: InterfaceWithUndefined = { m1: undefined };\n\nconsole.log(i1.m1 === undefined); // True\nconsole.log(i2.m1 === undefined); // True\n```", "```js\nconst s2 = Symbol(\"s\");\nconst c1 = \"s\";\nconst c2 = \"s\";\n\nif(isSymbolEqualS(s2)){\n    console.log(\"Symbols are equal\"); // Won’t print\n}\n\nif(c1 === c2){\n    console.log(\"Constants are equal\");\n}\n\nfunction isSymbolEqualS(p1:Symbol): boolean{\n    return Symbol(\"s\") === p1;\n}\n\n```", "```js\nlet s100 = Symbol(\"same\");\nlet s101 = Symbol(\"same\");\n\nif (s100 === s101) {\n console.log(\"Same\"); // Won't print\n}\n```", "```js\nconst field1 = Symbol(\"field\");\nconst obj = {\n    [field1]: \"field1 value\"\n};\n\nconsole.log(obj[field1]); // Print \"field1 value\"\n```", "```js\n\"lib\": [\n \"es2015\",\n \"es2015.symbol\"\n ]\n```", "```js\nlet a: void = undefined;\nconsole.log(a);\n```", "```js\nfunction returnNothing():void{\n      return;\n}\nconsole.log(returnNothing()); // undefined\n```", "```js\nfunction returnWithoutType(i: number) {\n    if (i === 0) {\n        return false;\n    } else if (i < 0) {\n        return -1;\n    } else {\n        return \"positive\";\n    }\n}\n```", "```js\nlet changeMe: any;\nchangeMe = 1;\nchangeMe = \"string too\";\nchangeMe = false;\n```", "```js\nlet anyDangerous: any = false; // still not a boolean, neither a string\nconsole.log(changeMe.subString(0, 1)); // Compile, but crash at runtime\n```", "```js\nfunction returnNever(i: number): never {\n\n  // Logic here\n\n  if (i === 0) {\n      throw Error(\"i is zero\");\n  } else {\n      throw Error(\"i is not zero\");\n  }\n\n  // Will never reach the end of the function\n\n}\n```", "```js\ntype myUnion = \"a\" | \"b\";\n\nfunction elseNever(value: myUnion) {\n    if (value === \"a\") {\n        value; // type is “a”\n    } else if (value === \"b\") {\n        value; // type is “b”\n    } else {\n        value; // type is never\n    }\n}\n```", "```js\ntype myUnion = \"a\" | \"b\";\nlet c: myUnion = Math.random() > 0.5 ? \"a\" : \"b\";\n\nif (c == \"a\") {\n    console.log(\"Union a\");\n} else {\n    exhaustiveCheck(c); //”b” will fallthrough\n}\n\nfunction exhaustiveCheck(x: never): never {\n    throw new Error(\"\");\n}\n```", "```js\nfunction f1(x: any): string {\n return x;\n}\n\nfunction f2(x: unknown): string {\n return x; // Does not compile\n}\n```", "```js\nlet arrayWithSquareBrackets: number[] = [1, 2, 3];\nlet arrayWithObject: Array<number> = [1, 2, 3];\nlet arrayWithObjectNew: Array<number> = new Array<number>(1, 2 ,3);\n```", "```js\nlet arrayWithSquareBrackets2: (number | string)[] = [1, 2, \"one\", \"two\"];\nlet arrayWithObject2: Array<number | string> = [1, 2, \"one\", \"two\"];\n```", "```js\nconst position1 = arrayWithObject2[0]; // 1\nconst unexisting = arrayWithObject2[100]; // undefined\n```", "```js\narrayWithSquareBrackets.forEach(function (element: number){\n  console.log(element);\n});\n```", "```js\n  enum Weather {\n       Sunny,\n       Cloudy,\n       Rainy,\n       Snowy\n   }\n```", "```js\n  enum Weather {\n    Sunny = 100,\n    Cloudy,\n    Rainy,\n    Snowy\n}\n```", "```js\n  enum Weather {\n    Sunny = 100,\n    Cloudy,\n    Rainy = 200,\n    Snowy\n}\n```", "```js\nenum Weather {\n    Sunny = \"Sun\",\n    Cloudy = \"Cloud\",\n    Rainy = 200,\n    Snowy\n}\n```", "```js\nlet today: Weather = Weather.Cloudy;\nlet tomorrow: Weather = 200;\n\nconsole.log(\"Today value\", today); // Today value Cloud\nconsole.log(\"Today key\", Weather[today]); // Today key undefined\nconsole.log(\"Tommorow value\", tomorrow); // Tommorow value 200\nconsole.log(\"Tommorow key\", Weather[tomorrow]); // Tommorow key Rainy\n```", "```js\n  enum Weather {\n    Sunny = 0,\n    Cloudy = 1 << 0,\n    Rainy = 1 << 1,\n    Snowy = 1 << 2,\n    Stormy = Cloudy | Rainy // Can reside inside\n}\n\nlet today: Weather= Weather.Snowy | Weather.Cloudy; // Can be outside as well\n\nif (today & Weather.Rainy) { // Check\n    console.log(\"Bring an umbrella\");\n}\n```", "```js\ntoday |= Weather.Rainy;\ntoday &= ~Weather.Snowy;\nconsole.log(today); // 3 -> 011 = Cloudy and Rainy\n```", "```js\nif (Weather.Rainy === (today & Weather.Rainy)) { // Check\n  console.log(\"Rainy\");\n}\n\nif (Weather.Cloudy === (today & Weather.Cloudy)) { // Check\n  console.log(\"Cloudy\");\n}\n\nif ((Weather.Cloudy & Weather.Rainy) === (today & Weather.Cloudy & Weather.Rainy)) { // Check\n  console.log(\"Cloudy and Rainy\");\n}\n```", "```js\nlet x: string = \"Value1\";\nx = \"Value2\";\n\nlet y: \"Literal\";\ny = \"Literal\";\ny = \"sdasd\"; // Won't compile\n```", "```js\ninterface Book {\n    type: \"book\";\n    isbn: string;\n    page: number;\n}\n\ninterface Movie {\n    type: \"movie\";\n    lengthMinutes: number;\n}\n\nlet hobby: Movie = { type: \"movie\", lengthMinutes: 120 };\n\nfunction showHobby(hobby: Book | Movie): void {\n    if (hobby.type === \"movie\") {\n        console.log(\"Long movie of \" + hobby.lengthMinutes);\n    } else {\n        console.log(\"A book of few pages: \" + hobby.page);\n    }\n}\n```", "```js\nlet myLiteral: \"onlyAcceptedValue\" = \"onlyAcceptedValue\";\n```", "```js\nconst myLiteral = \"onlyAcceptedValue\"; // Not a string\n```", "```js\nfunction funct1(param1: number): string { return \"\"; }\n```", "```js\nfunction funct2(param1: boolean, param2: string): void { }\n```", "```js\nfunction funct3(param1: boolean | string): void { }\n```", "```js\nfunction funct4(): string | number | boolean { return \"\"; }\n```", "```js\nfunction funct5(param1: boolean): string;\nfunction funct5(param1: Date): number;\nfunction funct5(param1: boolean | Date): string | number {\n    if (typeof param1 === \"boolean\") {\n        return param1 ? \"Yes\" : \"No\";\n    } else {\n        return 0;\n    }\n```", "```js\n}\n\nconst expectedString: string = funct5(true); // Yes\nconst expectedNumber: number = funct5(new Date()); // 0\n```", "```js\nfunction returnAnAnonymousFunction(): () => number {\n    return () => 1;\n}\n\nfunction returnAnAnonymousFunction2(): Function {\n    return function () { return 1 };\n}\n```", "```js\nconst variable = (message: string) => message + \" world\";\nconst variable2 = (message: string) => { return message + \" world\" };\nconst variable3 = function (message: string) { return message + \" world\" };\n\nvariable(\"Hello\");\n```", "```js\nfunction functWithOptional(param1?: boolean): void { }\nfunctWithOptional();\nfunctWithOptional(undefined);\nfunctWithOptional(true);\n```", "```js\nfunction functWithUndefined(param1: boolean | undefined): void { }\nfunctWithUndefined(true);\nfunctWithUndefined(undefined);\n```", "```js\nfunction functWithOptional2(param1?: boolean, param2: string): void { } // Doesn't compile\nfunction functWithOptional3(param1?: boolean, param2?: string): void { }\n```", "```js\n  class ClassFullOfFunctions {\n      public f1() { }\n      private f2(p1: number): string { return \"\"; }\n      protected f3(): void { }\n      f4(): boolean { return true; }\n      f5(): void { } // Public\n}\n```", "```js\nprivate long: (p1: number) => string = (p1: number) => { return \"\"; }\nprivate short: (p1: number) => string = (p1) => \"\";\nprivate tiny = (p1: number) => \"\";\n```", "```js\nconst x = 1;\nlet y = 1;\nlet z;\n// ...\nz = 1;\n```", "```js\nconst d1 = new Date();\nlet d2 = new Date();\n\nconst b1 = true;\nlet b2 = false;\n\nconst c1 = {\n m1: 1\n};\n\nlet c2 = {\n m1: 1\n};\n```", "```js\nfunction f1(a) {\n   return a;\n}\n```", "```js\nfunction f2(a: number) {\n   return a;\n}\n```", "```js\nfunction f3() {\n   if (true) {\n       return 1;\n   } else {\n       return \"1\";\n   }\n}\n```"]