- en: Appendix E. Answers to Exercise Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This appendix lists possible answers to the exercises at the end of the chapters.
    Possible answers meaning they are not the only ones, so don't worry if your solution
    is different.
  prefs: []
  type: TYPE_NORMAL
- en: As with the rest of the book, you should try them in your console and play around
    a bit.
  prefs: []
  type: TYPE_NORMAL
- en: The first and the last chapters don't have the *Exercises* section, so let's
    start with [Chapter 2](ch02.html "Chapter 2. Primitive Data Types, Arrays, Loops,
    and Conditions"), *Primitive Data Types, Arrays, Loops, and Conditions*.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2, Primitive Data Types, Arrays, Loops, and Conditions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lets try and solve the following exercises:'
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The result will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you declare a variable but do not initialize it with a value, it automatically
    gets the undefined value. You can also check:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The value of `v` will be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding `1` to the string `'1s'` returns the string `'1s1'`, which is *Not A
    Number*, but the `++` operator should return a number; so it returns the special
    `NaN` number.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The program is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The tricky part of the question is that `"false"` is a string and all strings
    are `true` when cast to Booleans (except the empty string `""`). If the question
    wasn''t about the string `"false"` but the Boolean `false` instead, the double
    negation !! returns the same Boolean:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you''d expect, single negation returns the opposite:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can test with any string and it will cast to a Boolean `true`, except the
    empty string:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output after executing `undefined` is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here `undefined` is one of the falsy values and it casts to `false`. You can
    try with any of the other falsy values, such the empty string `""` in the previous
    example, `NaN`, or `0`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The number type includes all numbers, `NaN`, positive and negative `Infinity`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output after executing the following is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The string `"0"` is cast to the number `0`. Division by `0` is `Infinity`, which
    has no remainder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output after executing the following is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Comparison with `==` operator doesn''t check the types, but converts the operands;
    in this case both are falsy values. Strict comparison checks the types too:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the code line and its output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Strict comparison between different types (in this case Boolean and string)
    is doomed to fail, no matter what the values are.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following is the code line and its output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Anything in quotes is a string, even though:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the code line and its output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`3e+3` is `3` with three zeroes, meaning `3000`. Then `++` is a post-increment,
    meaning it returns the old value and then it increments it and assigns it to `a`.
    That''s why you get the return value `3000` in the console, although `a` is now
    `3001`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The value of `v` after executing the following is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If `v` has never been declared, it''s `undefined` so this is the same as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: However, if `v` has already been defined and initialized with a non-falsy value,
    you'll get the previous value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The second use of `var` doesn't "reset" the variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `v` was already a falsy value (not a `100`), the check `v || 10` will return
    `10`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For printing multiplication tables, perform the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Chapter 3, Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lets do the following exercises:'
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To convert Hex colors to RGB, perform the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: One problem with this solution is that array access to strings like `hex[0]`
    is not in ECMAScript 3, although many browsers have supported it for a long time
    and is now described in ES5.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'However, But at this point in the book, there was as yet no discussion of objects
    and methods. Otherwise an ES3-compatible solution would be to use one of the string
    methods, such as `charAt()`, `substring()`, or `slice()`. You can also use an
    array to avoid too much string concatenation:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Bonus exercise**: Rewrite the preceding function using a loop so you don''t
    have to type `parseInt()` three times, but just once.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The result is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, the parsing of a string gives up on the first non-integer value. `parseInt()`
    doesn''t understand exponential literals, it expects integer notation:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is parsing the string `''1e1''` while expecting it to be in decimal notation,
    including exponential:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the code line and its output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Because `0/10` is `0` and `0` is finite.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following is the code line and its output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Because division by `0` is `Infinity`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the code line and its output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Parsing the special `NaN` value is `NaN`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'What is the result of:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This snippet alerts `2` even though `n()` was defined before the assignment,
    `a = 2`. Inside the function `n()` you see the variable `a` that is in the same
    scope, and you access its most recent value at the time invocation of `f()` (and
    hence `n()`). Due to hoisting `f()` acts as if it was:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'More interestingly, consider this code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It alerts `undefined` and then `2`. You might expect the first alert to say
    `1`, but again due to variable hoisting, the declaration (not initialization)
    of `a` is moved to the top of the function. As if `f()` was:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The local `a` "shadows" the global `a`, even if it's at the bottom.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Why all these alert "Boo!"
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is the result of Example 1:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the result of Example 2\. You can assign a function to a different
    variable. So `f()` points to `alert()`. Evaluating this string is like doing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the output after we execute `eval()`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the output of Example 3\. `eval()` returns the result on the
    evaluation. In this case it''s an assignment `e = f` that also returns the new
    value of `e`. Like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So `eval('e=f')` gives you a pointer to `alert()` that is executed immediately
    with `"Boo!"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The immediate (self-invoking) anonymous function returns a pointer to the function
    `alert()`, which is also immediately invoked with a parameter `"Boo!"`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Chapter 4, Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lets solve the following exercises:'
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What happens here? What is `this` and what's `o`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `this === window` because `C()` was called without `new`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also `o === window` because `new F()` returns the object returned by `C()`,
    which is `this`, and `this` is `window`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can make the call to `C()` a constructor call:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, `this` is the object created by the `C()` constructor. So is `o`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It becomes more interesting with ES5''s strict mode. In the strict mode, non-constructor
    invocations result in `this` being `undefined`, not the global object. With `"use
    strict"` inside `F()` or `C()` constructor''s body, `this` would be `undefined`
    in `C()`. Therefore, `return C()` cannot return the non-object `undefined` (because
    all constructor invocations return some sort of object) and returns `F` instances''
    `this` (which is in the closure scope). Try it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Testing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What happens when invoking this constructor with `new`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`new C()` is an object, not Boolean, because constructor invocations always
    produce an object. It''s the `this` object you get unless you return some other
    object in your constructor. Returning non-objects doesn''t work and you still
    get `this`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What does this do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is because `sort()` compares strings. `[1, 2].toString()` is `"1,2"`, so
    it comes after `"1"` and before `"2"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The same thing with `join()`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Pretend `String()` doesn't exist and create `MyString()` mimicking `String()`.
    Treat the input primitive strings as arrays (array access officially supported
    in ES5).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here's a sample implementation with just the methods the exercise asked for.
    Feel free to continue with the rest of the methods. Refer to [Appendix C](apc.html
    "Appendix C. Built-in Objects"), *Built-in Objects* for the full list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Testing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Feel free to play splitting with a regular expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update `MyString()` with a `reverse()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Imagine `Array()` is gone and the world needs you to implement `MyArray()`.
    Here are a handful of methods to get you started:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Testing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you found this exercise amusing, don't stop with `join()`; go on with as
    many methods as possible.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create `MyMath` object that also has `rand()`, `min([])`, `max([])`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The point here is that `Math` is not a constructor, but an object that has some
    "static" properties and methods. Below are some methods to get you started.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's also use an immediate function to keep some private utility functions.
    You can also take this approach with `MyString` above, where `this._value` could
    be really private.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After you have finished the book and know about ES5 you can try using `defineProperty()`
    for tighter control and closer replication of the built-ins.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Chapter 5, Prototype
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lets try and solve the following exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create an object called `shape` that has a `type` property and a `getType()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the program for a `Triangle ()` constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To add the `getPerimeter()` method, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Loop over `t` showing only own properties and methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Randomize array elements using the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Testing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Chapter 6, Inheritance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lets solve the following exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Multiple inheritance by mixing into the prototype, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Testing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Property `a` is `2` because `obj_b` overwrote the property with the same name
    from `obj_a` (last one wins):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Practice with the canvas example at [http://www.phpied.com/files/canvas/](http://www.phpied.com/files/canvas/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Draw a few triangles using the following code snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Draw a few squares using the following code snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Draw a few rectangles using the following code snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To add Rhombus, Kite, Pentagon, Trapezoid, and Circle (reimplements `draw()`),
    use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Testing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Exercises](img/image_69_001.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The result of testing new shapes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Think of another way to do the inheritance part. Use `uber` so kids can have
    access to their parents. Also, get parents to be aware of their children.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Keep in mind that not all children inherit `Shape`; for example, `Rhombus`
    inherits `Kite` and `Square` inherits `Rectangle`. You end up with something like
    this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the inheritance pattern from the chapter and the previous exercise, all
    children were sharing the same prototype, for example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While this is convenient, it also means no one can touch the prototype because
    it will affect everyone else's prototype. The drawback is that all custom methods
    need to own properties, for example `this.getArea`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It's a good idea to have methods shared among instances and defined in the prototype,
    instead of recreating them for every object. The following example moves the custom
    `getArea()` methods to the prototype.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the inheritance function, you''ll see the children only inherit the parent''s
    prototype. So own properties such as `this.lines` will not be set. Therefore,
    you need to have each child constructor call its `uber` in order to get the own
    properties, for example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Another nice-to-have feature is carrying over the prototype properties already
    added to the child. This allows the child to inherit first and then add more customizations
    or the other way around as well, which is just a little more convenient.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Everything about `Shape()`, `Line()`, and `Point()` stays the same. The changes
    are in the children only:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inheritance:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Testing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Testing that `instanceof` is correct:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `children` arrays:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And uber looks ok too:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calling `isPrototypeOf()` also returns expected results:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The full code is available at [http://www.phpied.com/files/canvas/index2.html](http://www.phpied.com/files/canvas/index2.html),
    together with the additional `Kite()`, `Circle()`, and so on from the previous
    exercise.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Chapter 7, The Browser Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lets practice the following exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The title clock program is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To animate resizing of a 200 x 200 pop up to 400 x 400, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Every 100 ms (1/10th of a second) the pop-up size increases by five pixels.
    You keep a reference to the interval `i` so you can clear it once done. The variable
    `size` tracks the pop-up size (and why not keep it private inside a closure).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The earthquake program is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Try all of them, but using `requestAnimationFrame()` instead of `setInterval()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A different `walkDOM()` with a callback is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Testing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To remove content and clean up functions, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Testing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To include scripts dynamically, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Testing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Events**: The event utility program is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Testing**: Go to any page with links, execute the following, and then click
    any link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move a `div` around with the keyboard using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your own Ajax utility:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When testing, remember that same origin restrictions apply, so you have to
    be on the same domain. You can go to [http://www.phpied.com/files/jinc/](http://www.phpied.com/files/jinc/),
    which is a directory listing and then test in the console:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The result of the two is the same, but if you look into the **Network** tab
    of the Web Inspector, you can see that the second is indeed a `POST` request with
    a body.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
