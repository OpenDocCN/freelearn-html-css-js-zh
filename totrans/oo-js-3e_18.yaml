- en: Appendix E. Answers to Exercise Questions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This appendix lists possible answers to the exercises at the end of the chapters.
    Possible answers meaning they are not the only ones, so don't worry if your solution
    is different.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: As with the rest of the book, you should try them in your console and play around
    a bit.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The first and the last chapters don't have the *Exercises* section, so let's
    start with [Chapter 2](ch02.html "Chapter 2. Primitive Data Types, Arrays, Loops,
    and Conditions"), *Primitive Data Types, Arrays, Loops, and Conditions*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2, Primitive Data Types, Arrays, Loops, and Conditions
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lets try and solve the following exercises:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The result will be as follows:'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you declare a variable but do not initialize it with a value, it automatically
    gets the undefined value. You can also check:'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The value of `v` will be:'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Adding `1` to the string `'1s'` returns the string `'1s1'`, which is *Not A
    Number*, but the `++` operator should return a number; so it returns the special
    `NaN` number.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The program is as follows:'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The tricky part of the question is that `"false"` is a string and all strings
    are `true` when cast to Booleans (except the empty string `""`). If the question
    wasn''t about the string `"false"` but the Boolean `false` instead, the double
    negation !! returns the same Boolean:'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you''d expect, single negation returns the opposite:'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can test with any string and it will cast to a Boolean `true`, except the
    empty string:'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output after executing `undefined` is as follows:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here `undefined` is one of the falsy values and it casts to `false`. You can
    try with any of the other falsy values, such the empty string `""` in the previous
    example, `NaN`, or `0`.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The number type includes all numbers, `NaN`, positive and negative `Infinity`.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output after executing the following is:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The string `"0"` is cast to the number `0`. Division by `0` is `Infinity`, which
    has no remainder.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output after executing the following is:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Comparison with `==` operator doesn''t check the types, but converts the operands;
    in this case both are falsy values. Strict comparison checks the types too:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following is the code line and its output:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Strict comparison between different types (in this case Boolean and string)
    is doomed to fail, no matter what the values are.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following is the code line and its output:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Anything in quotes is a string, even though:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is the code line and its output:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`3e+3` is `3` with three zeroes, meaning `3000`. Then `++` is a post-increment,
    meaning it returns the old value and then it increments it and assigns it to `a`.
    That''s why you get the return value `3000` in the console, although `a` is now
    `3001`:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The value of `v` after executing the following is:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If `v` has never been declared, it''s `undefined` so this is the same as:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: However, if `v` has already been defined and initialized with a non-falsy value,
    you'll get the previous value.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The second use of `var` doesn't "reset" the variable.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `v` was already a falsy value (not a `100`), the check `v || 10` will return
    `10`.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For printing multiplication tables, perform the following:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Or:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Chapter 3, Functions
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lets do the following exercises:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To convert Hex colors to RGB, perform the following:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: One problem with this solution is that array access to strings like `hex[0]`
    is not in ECMAScript 3, although many browsers have supported it for a long time
    and is now described in ES5.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'However, But at this point in the book, there was as yet no discussion of objects
    and methods. Otherwise an ES3-compatible solution would be to use one of the string
    methods, such as `charAt()`, `substring()`, or `slice()`. You can also use an
    array to avoid too much string concatenation:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Bonus exercise**: Rewrite the preceding function using a loop so you don''t
    have to type `parseInt()` three times, but just once.'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The result is as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here, the parsing of a string gives up on the first non-integer value. `parseInt()`
    doesn''t understand exponential literals, it expects integer notation:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This is parsing the string `''1e1''` while expecting it to be in decimal notation,
    including exponential:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following is the code line and its output:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Because `0/10` is `0` and `0` is finite.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following is the code line and its output:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Because division by `0` is `Infinity`:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following is the code line and its output:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Parsing the special `NaN` value is `NaN`.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'What is the result of:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This snippet alerts `2` even though `n()` was defined before the assignment,
    `a = 2`. Inside the function `n()` you see the variable `a` that is in the same
    scope, and you access its most recent value at the time invocation of `f()` (and
    hence `n()`). Due to hoisting `f()` acts as if it was:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'More interestingly, consider this code:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'It alerts `undefined` and then `2`. You might expect the first alert to say
    `1`, but again due to variable hoisting, the declaration (not initialization)
    of `a` is moved to the top of the function. As if `f()` was:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The local `a` "shadows" the global `a`, even if it's at the bottom.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Why all these alert "Boo!"
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is the result of Example 1:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The following is the result of Example 2\. You can assign a function to a different
    variable. So `f()` points to `alert()`. Evaluating this string is like doing:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following is the output after we execute `eval()`:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The following is the output of Example 3\. `eval()` returns the result on the
    evaluation. In this case it''s an assignment `e = f` that also returns the new
    value of `e`. Like the following:'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: So `eval('e=f')` gives you a pointer to `alert()` that is executed immediately
    with `"Boo!"`.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The immediate (self-invoking) anonymous function returns a pointer to the function
    `alert()`, which is also immediately invoked with a parameter `"Boo!"`:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Chapter 4, Objects
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lets solve the following exercises:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What happens here? What is `this` and what's `o`?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Here, `this === window` because `C()` was called without `new`.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also `o === window` because `new F()` returns the object returned by `C()`,
    which is `this`, and `this` is `window`.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can make the call to `C()` a constructor call:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Here, `this` is the object created by the `C()` constructor. So is `o`:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'It becomes more interesting with ES5''s strict mode. In the strict mode, non-constructor
    invocations result in `this` being `undefined`, not the global object. With `"use
    strict"` inside `F()` or `C()` constructor''s body, `this` would be `undefined`
    in `C()`. Therefore, `return C()` cannot return the non-object `undefined` (because
    all constructor invocations return some sort of object) and returns `F` instances''
    `this` (which is in the closure scope). Try it:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Testing:'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: What happens when invoking this constructor with `new`?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '`new C()` is an object, not Boolean, because constructor invocations always
    produce an object. It''s the `this` object you get unless you return some other
    object in your constructor. Returning non-objects doesn''t work and you still
    get `this`.'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What does this do?
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This is because `sort()` compares strings. `[1, 2].toString()` is `"1,2"`, so
    it comes after `"1"` and before `"2"`.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The same thing with `join()`:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Pretend `String()` doesn't exist and create `MyString()` mimicking `String()`.
    Treat the input primitive strings as arrays (array access officially supported
    in ES5).
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here's a sample implementation with just the methods the exercise asked for.
    Feel free to continue with the rest of the methods. Refer to [Appendix C](apc.html
    "Appendix C. Built-in Objects"), *Built-in Objects* for the full list.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Testing:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Feel free to play splitting with a regular expression.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update `MyString()` with a `reverse()` method:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Imagine `Array()` is gone and the world needs you to implement `MyArray()`.
    Here are a handful of methods to get you started:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Testing:'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: If you found this exercise amusing, don't stop with `join()`; go on with as
    many methods as possible.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create `MyMath` object that also has `rand()`, `min([])`, `max([])`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The point here is that `Math` is not a constructor, but an object that has some
    "static" properties and methods. Below are some methods to get you started.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's also use an immediate function to keep some private utility functions.
    You can also take this approach with `MyString` above, where `this._value` could
    be really private.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: After you have finished the book and know about ES5 you can try using `defineProperty()`
    for tighter control and closer replication of the built-ins.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Chapter 5, Prototype
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lets try and solve the following exercise:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create an object called `shape` that has a `type` property and a `getType()`
    method:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The following is the program for a `Triangle ()` constructor:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'To add the `getPerimeter()` method, use the following code:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Test the following code:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Loop over `t` showing only own properties and methods:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Randomize array elements using the following code snippet:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Testing:'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Chapter 6, Inheritance
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lets solve the following exercise:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Multiple inheritance by mixing into the prototype, for example:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Testing:'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Property `a` is `2` because `obj_b` overwrote the property with the same name
    from `obj_a` (last one wins):'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Practice with the canvas example at [http://www.phpied.com/files/canvas/](http://www.phpied.com/files/canvas/).
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Draw a few triangles using the following code snippet:'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Draw a few squares using the following code snippet:'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Draw a few rectangles using the following code snippet:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'To add Rhombus, Kite, Pentagon, Trapezoid, and Circle (reimplements `draw()`),
    use the following code:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Testing:'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '![Exercises](img/image_69_001.jpg)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The result of testing new shapes
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Think of another way to do the inheritance part. Use `uber` so kids can have
    access to their parents. Also, get parents to be aware of their children.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Keep in mind that not all children inherit `Shape`; for example, `Rhombus`
    inherits `Kite` and `Square` inherits `Rectangle`. You end up with something like
    this:'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'In the inheritance pattern from the chapter and the previous exercise, all
    children were sharing the same prototype, for example:'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: While this is convenient, it also means no one can touch the prototype because
    it will affect everyone else's prototype. The drawback is that all custom methods
    need to own properties, for example `this.getArea`.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It's a good idea to have methods shared among instances and defined in the prototype,
    instead of recreating them for every object. The following example moves the custom
    `getArea()` methods to the prototype.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the inheritance function, you''ll see the children only inherit the parent''s
    prototype. So own properties such as `this.lines` will not be set. Therefore,
    you need to have each child constructor call its `uber` in order to get the own
    properties, for example:'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Another nice-to-have feature is carrying over the prototype properties already
    added to the child. This allows the child to inherit first and then add more customizations
    or the other way around as well, which is just a little more convenient.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Everything about `Shape()`, `Line()`, and `Point()` stays the same. The changes
    are in the children only:'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Inheritance:'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Testing:'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Testing that `instanceof` is correct:'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The `children` arrays:'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'And uber looks ok too:'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Calling `isPrototypeOf()` also returns expected results:'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: The full code is available at [http://www.phpied.com/files/canvas/index2.html](http://www.phpied.com/files/canvas/index2.html),
    together with the additional `Kite()`, `Circle()`, and so on from the previous
    exercise.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Chapter 7, The Browser Environment
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lets practice the following exercise:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The title clock program is as follows:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'To animate resizing of a 200 x 200 pop up to 400 x 400, use the following code:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Every 100 ms (1/10th of a second) the pop-up size increases by five pixels.
    You keep a reference to the interval `i` so you can clear it once done. The variable
    `size` tracks the pop-up size (and why not keep it private inside a closure).
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The earthquake program is as follows:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Try all of them, but using `requestAnimationFrame()` instead of `setInterval()`.
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尝试所有这些，但使用 `requestAnimationFrame()` 而不是 `setInterval()`。
- en: 'A different `walkDOM()` with a callback is as follows:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 带有回调函数的不同的 `walkDOM()` 如下所示：
- en: '[PRE84]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Testing:'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试：
- en: '[PRE85]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'To remove content and clean up functions, use the following code:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除内容并清理函数，请使用以下代码：
- en: '[PRE86]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Testing:'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试：
- en: '[PRE87]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'To include scripts dynamically, use the following code:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要动态包含脚本，请使用以下代码：
- en: '[PRE88]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Testing:'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试：
- en: '[PRE89]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '**Events**: The event utility program is as follows:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**事件**：事件实用程序如下所示：'
- en: '[PRE90]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '**Testing**: Go to any page with links, execute the following, and then click
    any link:'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**测试**：访问任何带有链接的页面，执行以下操作，然后点击任何链接：'
- en: '[PRE91]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Move a `div` around with the keyboard using the following code:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码通过键盘移动 `div`：
- en: '[PRE92]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Your own Ajax utility:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您自己的Ajax工具：
- en: '[PRE93]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'When testing, remember that same origin restrictions apply, so you have to
    be on the same domain. You can go to [http://www.phpied.com/files/jinc/](http://www.phpied.com/files/jinc/),
    which is a directory listing and then test in the console:'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在测试时，请记住同源限制适用，因此您必须在同一域名下。您可以访问 [http://www.phpied.com/files/jinc/](http://www.phpied.com/files/jinc/)，这是一个目录列表，然后在控制台中测试：
- en: '[PRE94]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: The result of the two is the same, but if you look into the **Network** tab
    of the Web Inspector, you can see that the second is indeed a `POST` request with
    a body.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两个的结果是相同的，但如果您查看网络检查器的 **网络** 选项卡，您可以看到第二个确实是一个带有主体的 `POST` 请求。
