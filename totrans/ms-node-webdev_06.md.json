["```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\nimport { basicHandler } from \"./handler\";\nconst port = 5000;\nconst expressApp: Express = express();\nexpressApp.get(\"/favicon.ico\", (req, resp) => {\n    resp.statusCode = 404;\n    resp.end();\n});\nexpressApp.get(\"*\", basicHandler);\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nexport const basicHandler = (req: IncomingMessage, resp: ServerResponse) => {\n    resp.end(\"Hello, World\");\n}; \n```", "```js\nnpm start \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nexport const basicHandler = (req: IncomingMessage, resp: ServerResponse) => {\n    **for (let i = 0****; i < 10; i++) {**\n **resp.write(`Message: ${i}\\n`);**\n **}**\n\n **resp.end(\"End\");**\n}; \n```", "```js\ncurl --include http://localhost:5000 \n```", "```js\n(Invoke-WebRequest http://localhost:5000).RawContent \n```", "```js\n...\nHTTP/1.1 200 OK\nConnection: keep-alive\nKeep-Alive: timeout=5\nTransfer-Encoding: chunked\nDate: Wed, 01 Nov 2023 19:46:02 GMT\nX-Powered-By: Express\nMessage: 0\nMessage: 1\nMessage: 2\nMessage: 3\nMessage: 4\nMessage: 5\nMessage: 6\nMessage: 7\nMessage: 8\nMessage: 9\nEnd\n... \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nexport const basicHandler = (req: IncomingMessage, resp: ServerResponse) => {\n    **resp.setHeader(\"Content-Type\", \"text/plain\");**\n    for (let i = 0; i < 10; i++) {\n        resp.write(`Message: ${i}\\n`);\n    }\n\n    resp.end(\"End\");\n}; \n```", "```js\n...\nHTTP/1.1 200 OK\nConnection: keep-alive\nKeep-Alive: timeout=5\nTransfer-Encoding: chunked\n**Content-Type: text/plain**\nDate: Wed, 01 Nov 2023 21:19:45 GMT\nX-Powered-By: Express\n... \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nexport const basicHandler = (req: IncomingMessage, resp: ServerResponse) => {\n    resp.setHeader(\"Content-Type\", \"text/plain\");\n   **for (let i = 0; i <** **10_000; i++) {**\n **if (resp.write(`Message: ${i}\\n`)) {**\n **console.log(\"Stream buffer is at capacity\");**\n **}**\n **}**\n\n    resp.end(\"End\");\n}; \n```", "```js\n...\nStream buffer is at capacity\nStream buffer is at capacity\nStream buffer is at capacity\n... \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nexport const basicHandler = (req: IncomingMessage, resp: ServerResponse) => {\n    resp.setHeader(\"Content-Type\", \"text/plain\");\n    **let i = 0;**\n **let canWrite = true;**\n **const writeData = () => {**\n**console.log(\"Started writing data\");** \n **do {**\n **canWrite = resp.write(`Message: ${i++}\\n`);**\n **} while (i < 10_000 && canWrite);**\n **console.****log(\"Buffer is at capacity\");**\n **if (i < 10_000) {**\n **resp.once(\"drain\", () => {**\n **console.log(\"Buffer has been drained\");**\n**writeData();**\n **});**\n **} else {**\n **resp.end(\"End\");**\n **}**\n **}**\n **writeData();**\n}; \n```", "```js\n`...`\n`const writeData = () => {`\n `console.log(\"Started writing data\");` \n `do {`\n ``canWrite = resp.write(`Message: ${i++}\\n`);``\n `} while (i < 10_000 && canWrite);`\n `console.log(\"Buffer is at capacity\");`\n `if (i < 10_000) {`\n `resp.once(\"drain\", () => {`\n `console.log(\"Buffer has been drained\");`\n `writeData();`\n `});`\n `}`\n`}`\n`writeData();`\n`resp.end(\"End\");`\n`...` \n```", "```js\n...\nStarted writing data\nBuffer is at capacity\nBuffer has been drained\nStarted writing data\n... \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <script>\n            document.addEventListener('DOMContentLoaded', function() {\n                document.getElementById(\"btn\")\n                    .addEventListener(\"click\", sendReq);\n            });\n            sendReq = async () => {\n                let payload = \"\";\n                for (let i = 0; i < 10_000; i++) {\n                    payload += `Payload Message: ${i}\\n`;\n                }\n                const response = await fetch(\"/read\", {\n                    method: \"POST\", body: payload\n                })\n                document.getElementById(\"msg\").textContent\n                     = response.statusText;\n                document.getElementById(\"body\").textContent\n                    = await response.text();\n            }\n        </script>\n    </head>\n    <body>\n       <button id=\"btn\">Send Request</button>\n       <div id=\"msg\"></div>\n       <div id=\"body\"></div>\n    </body>\n</html> \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\n**import { readFileSync } from \"fs\";**\nexport const basicHandler = (req: IncomingMessage, resp: ServerResponse) => { \n    **resp.write(readFileSync(\"static/index.html\"));**\n **resp.end();**\n}; \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nexport const readHandler = (req: IncomingMessage, resp: ServerResponse) => {\n    // TODO - read request body\n    resp.end();\n} \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\nimport { basicHandler } from \"./handler\";\n**import { readHandler } from \"./readHandler\";**\nconst port = 5000;\nconst expressApp: Express = express();\nexpressApp.get(\"/favicon.ico\", (req, resp) => {\n    resp.statusCode = 404;\n    resp.end();\n});\nexpressApp.get(\"*\", basicHandler);\n**expressApp.post(\"/read\", readHandler);**\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nexport const readHandler = (req: IncomingMessage, resp: ServerResponse) => **{**\n **req.setEncoding(\"utf-8\");**\n **req.on(\"data\", (data: string) => {**\n **console****.log(data);**\n **});**\n **req.on(\"end\", () => {**\n **console.log(\"End: all data read\");**\n **resp.end();**\n **});** \n} \n```", "```js\n...\nPayload Message: 0\nPayload Message: 1\nPayload Message: 2\nPayload Message: 3\n...\nPayload Message: 9997\nPayload Message: 9998\nPayload Message: 9999\nEnd: all data read\n... \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\n**export const readHandler = async (req: IncomingMessage, resp: ServerResponse) => {**\n    req.setEncoding(\"utf-8\");\n **for await (const data of req) {**\n **console.log(data);**\n **}**\n **console.****log(\"End: all data read\");**\n **resp.end();**\n} \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nexport const readHandler = async (req: IncomingMessage, resp: ServerResponse) => {\n    **req.pipe(resp);**\n} \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\n**import { Transform } from \"stream\";**\nexport const readHandler = async (req: IncomingMessage, resp: ServerResponse) => {\n **req.pipe(createLowerTransform()).pipe(resp);**\n**}**\n**const** **createLowerTransform = () =>  new Transform({**\n **transform(data, encoding, callback) {**\n **callback(null, data.toString().toLowerCase());**\n **}**\n**});** \n```", "```js\n...\nreq.pipe(**createLowerTransform()**).pipe(resp);\n... \n```", "```js\n...\n<script>\n    document.addEventListener('DOMContentLoaded', function() {\n        document.getElementById(\"btn\").addEventListener(\"click\", sendReq);\n    });\n    sendReq = async () => {\n        **let payload = [];**\n **for (let i = 0; i < 5; i++) {**\n **payload.push({ id: i, message: `Payload Message: ${i}\\n`****});**\n **}**\n        const response = await fetch(\"/read\", {\n           ** method: \"POST\", body: JSON.stringify****(payload),**\n **headers: {**\n **\"Content-Type\": \"application/json\"**\n **}**\n        });\n        document.getElementById(\"msg\").textContent = response.statusText;\n        document.getElementById(\"body\").textContent = await response.text();\n    }\n</script>\n... \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { Transform } from \"stream\";\nexport const readHandler = async (req: IncomingMessage, resp: ServerResponse) => {   \n    **if (req.headers[\"content-type\"] == \"application/json\") {**\n **req.pipe(createFromJsonTransform()).on(\"data\", (payload) =>** **{**\n **if (payload instanceof Array) {**\n **resp.write(`Received an array with ${payload.length} items`)**\n **}  else {**\n **resp.write(\"Did not receive an array\");**\n **}**\n **resp.end****();**\n **});**\n **} else {**\n **req.pipe(resp);**\n **}**\n}\n**const createFromJsonTransform = () => new Transform({**\n **readableObjectMode: true,**\n **transform(data, encoding, callback****) {**\n **callback(null, JSON.parse(data));**\n **}**\n**});** \n```", "```js\ndocument.addEventListener('DOMContentLoaded', function() {\n    document.getElementById(\"btn\").addEventListener(\"click\", sendReq);\n});\nsendReq = async () => {\n    let payload = [];\n    for (let i = 0; i < 5; i++) {\n        payload.push({ id: i, message: `Payload Message: ${i}\\n`});\n    }\n    const response = await fetch(\"/read\", {\n        method: \"POST\", body: JSON.stringify(payload),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    document.getElementById(\"msg\").textContent = response.statusText;\n    document.getElementById(\"body\").textContent = await response.text();\n} \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n       ** <script src=\"img/client.js\"></script>**\n    </head>\n    <body>\n       **<img src=\"img/city.png\"**\n **style=\"width: 100%; display: block; margin-bottom: 2px;\">**\n       <button id=\"btn\">Send Request</button>\n       <div id=\"msg\"></div>\n       <div id=\"body\"></div>\n    </body>\n</html> \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\n**//import { basicHandler } from \"./handler\";**\nimport { readHandler } from \"./readHandler\";\nconst port = 5000;\nconst expressApp: Express = express();\n**// expressApp.get(\"/favicon.ico\", (req, resp) => {**\n**//     resp.statusCode = 404;**\n**//     resp.end();**\n**// });**\n**//expressApp.get(\"*\", basicHandler);**\nexpressApp.post(\"/read\", readHandler);\n**expressApp.use(express.static(\"static\"));**\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nnpm install bootstrap@5.3.2 \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\nimport { readHandler } from \"./readHandler\";\nconst port = 5000;\nconst expressApp: Express = express();\nexpressApp.post(\"/read\", readHandler);\nexpressApp.use(express.static(\"static\"));\n**expressApp.use(express.static(\"node_modules/bootstrap/dist\"));**\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <script src=\"img/client.js\"></script>\n       ** <****link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" />**\n    </head>\n    <body>\n       <img src=\"img/city.png\"\n           style=\"width: 100%; display: block; margin-bottom: 2px;\">\n       **<button id=\"btn\" class=\"****btn btn-primary my-2\">Send Request</button>**\n       <div id=\"msg\"></div>\n       <div id=\"body\"></div>\n    </body>\n</html> \n```", "```js\nimport { createServer } from \"http\";\n**import** **express, {Express, Request, Response } from \"express\";**\nimport { readHandler } from \"./readHandler\";\nconst port = 5000;\nconst expressApp: Express = express();\nexpressApp.post(\"/read\", readHandler);\n**expressApp.get(\"/sendcity\", (req, resp****) => {**\n **resp.sendFile(\"city.png\", { root: \"static\"});**\n**});**\n**expressApp.get(\"/downloadcity\", (req: Request, resp: Response) => {**\n **resp.****download(\"static/city.png\");**\n**});**\nexpressApp.get(\"/json\", (req: Request, resp: Response) => {\n    resp.json(\"{name: Bob}\");\n});\n\nexpressApp.use(express.static(\"static\"));\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express, Request, Response } from \"express\";\nimport { readHandler } from \"./readHandler\";\nconst port = 5000;\nconst expressApp: Express = express();\n**expressApp.use(express.json());**\nexpressApp.post(\"/read\", readHandler);\nexpressApp.get(\"/sendcity\", (req, resp) => {\n    resp.sendFile(\"city.png\", { root: \"static\"});\n});\nexpressApp.get(\"/downloadcity\", (req: Request, resp: Response) => {\n    resp.download(\"static/city.png\");\n});\nexpressApp.get(\"/json\", (req: Request, resp: Response) => {\n    resp.json(\"{name: Bob}\");\n});\n\nexpressApp.use(express.static(\"static\"));\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\n**//import { Transform } from \"stream\";**\n**import { Request, Response } from \"express\";**\nexport const readHandler = async (req: Request, resp: Response) => {   \n    **if (req.headers[\"content-type\"] == \"application/json\") {**\n **const payload = req.body;**\n **if (payload instanceof Array) {**\n**//resp.write(`Received an array with ${payload.length} items`)**\n **resp.json({arraySize: payload.length});**\n **}  else {**\n **resp.write(\"Did not receive an array\");**\n        }\n        resp.end();\n    } else {\n        req.pipe(resp);\n    }\n}\n**// const createFromJsonTransform = () => new Transform({**\n**//     readableObjectMode: true,**\n**//     transform(data, encoding, callback) {**\n**//         callback(null, JSON.parse(data));**\n**//     }**\n**// });** \n```"]