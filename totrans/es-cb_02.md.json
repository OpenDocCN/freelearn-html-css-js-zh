["```js\ngit clone https://github.com/creationix/nvm.git ~/.nvm\n```", "```js\n# Configure NVM \nexport NVM_DIR=\"$HOME/.nvm\" \n[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" \n[ -s \"$NVM_DIR/bash_completion\" ] && . \"$NVM_DIR/bash_completion\"   \n```", "```js\nsource ~/.bashrc # (or ~/.zshrc if you're running zshell)\n```", "```js\n> nvm --version 0.33.5\n```", "```js\n> nvm list-remote\n```", "```js\n    > nvm install 8.9.4\n```", "```js\n    >  node --version\n    v8.9.4\n    > npm --version\n    5.6.0\n```", "```js\n    nvm alias default 9.6.1 \n```", "```js\n    > nvm version\n    1.1.6 \n```", "```js\n    > nvm list available\n```", "```js\n    > nvm install 8.9.4\n    6.11.0\n    Downloading node.js version 8.9.4 (64-bit)...\n    Complete\n    Creating C:UsersrtharAppDataRoamingnvmtemp\n\n    Downloading npm version 5.6.0... Complete\n    Installing npm v5.6.0...\n\n    Installation complete. \n```", "```js\n    nvm use 8.9.6\n```", "```js\n    nvm use 9.6.1\n```", "```js\n    mkdir 02-creating-client-bundles\n    cd 02-creating-client-bundles\n    npm init -y\n```", "```js\n// main.js \nimport { atlas, saturnV } from './rockets/index.js' \n\nexport function main () { \n  saturnV.launch(); \n  atlas.launch(); \n} \n```", "```js\n// rockets/index.js \nimport * as saturnV from './saturn-v.js'; \nimport * as atlas from './atlas.js'; \nexport { saturnV, atlas }; \n\n// rockets/launch-sequence.js \nexport function launchSequence (countDownDuration, name) { \n  let currCount = countDownDuration; \n  console.log(`Launching in ${countDownDuration}`, name); \n\n  const countDownInterval = setInterval(function () { \n    currCount--; \n\n    if (0 < currCount) { \n      console.log(currCount); \n    } else { \n      console.log('%s LIFTOFF!!! ', name); \n      clearInterval(countDownInterval); \n    } \n  }, 1000); \n} \n\n// rockets/atlas.js \nimport { launchSequence } from './launch-sequence.js'; \n\nconst name = 'Atlas'; \nconst COUNT_DOWN_DURATION = 20; \n\nexport function launch () { \n  launchSequence(COUNT_DOWN_DURATION, name); \n} \n\n// rockets/saturn-v.js \nimport { launchSequence } from './launch-sequence.js'; \n\nexport const name = \"Saturn V\"; \nexport const COUNT_DOWN_DURATION = 10; \n\nexport function launch () { \n  launchSequence(COUNT_DOWN_DURATION, name); \n} \n```", "```js\n// index.js \nimport { main } from './main.js'; \nmain();  \n```", "```js\n   > npm install --save-dev Webpack\n```", "```js\n// webpack.config.js \nconst path = require('path'); \n\nmodule.exports = { \n  entry: './index.js', \n  output: { \n    filename: 'bundle.js', \n    path: path.resolve(__dirname) \n  } \n}; \n```", "```js\n{\n  /** package.json content**/\n  \"scripts\": {\n    \"build\": \"webpack --config webpack.config.js\"\n  }\n}\n```", "```js\n > npm run build\n```", "```js\nHash: 5f2f1a7c077186c7a7a7 \nVersion: webpack 3.6.0 \nTime: 134ms \n    Asset    Size  Chunks             Chunk Names \nbundle.js  6.7 kB       0  [emitted]  main \n   [0] ./rockets/launch-sequence.js 399 bytes {0} [built] \n   [1] ./index.js 42 bytes {0} [built] \n   [2] ./main.js 155 bytes {0} [built] \n   [3] ./rockets/index.js 162 bytes {0} [built] \n   [4] ./rockets/falcon-heavy.js 206 bytes {0} [built] \n   [5] ./rockets/saturn-v.js 203 bytes {0} [built] \n   [6] ./rockets/atlas.js 270 bytes {0} [built]  \n```", "```js\n node ./bundle.js \n```", "```js\n<html> \n  <head> \n    <meta charset='UTF-8' /> \n  </head> \n  <body> \n    <h1>Open your console.</h1> \n    <script type=\"module\"> \n      import { main } from './main.js'; \n      main(); \n    </script> \n  </body> \n</html> \n```", "```js\n  <body> \n    <h1>Open your console.</h1> \n    <script type=\"module\"> \n      import { main } from './main.js'; \n      main(); \n    </script> \n <script nomodule type=\"text/javascript\"src=\"img/bundle.js\"></script> \n  </body> \n```", "```js\n    ./node_modules/.bin/webpack --config webpack.config.js\n```", "```js\nimport { atlas, saturnV } from './rockets/index.js' \n\nexport function main () { \n const rockets = [saturnV, atlas]; for (const rocket of rockets.values()) { rocket.launch(); } \n}  \n```", "```js\n    npm install --save babel-polyfill  \n```", "```js\nconst path = require('path'); \n\nmodule.exports = { \n entry: ['babel-polyfill', './index.js'], \n  output: { \n    filename: 'bundle.js', \n    path: path.resolve(__dirname) \n  } \n};  \n```", "```js\n<!-- index.html --> \n<script type=\"module\"> \n import './node_modules/babel-polyfill/dist/polyfill.min.js'; \n  import { main } from './main.js'; \n  main(); \n</script>  \n```", "```js\nimport { atlas, saturnV } from './rockets/index.js' \n\nexport function main () { \n  const rockets = [saturnV, atlas]; \n rockets.map((rocket) => rocket.launch() ); \n} \n```", "```js\n    npm install --save-dev babel-cli babel-preset-es2015 babel-loader\n```", "```js\n// .babelrc \n{ \n  \"presets\": [\"es2015\"] \n} \n```", "```js\nconst path = require('path'); \n\nmodule.exports = { \n  entry: ['babel-polyfill', './index.js'], \n  output: { \n    filename: 'bundle.js', \n    path: path.resolve(__dirname) \n }, module: { rules: [ { test: /.js$/, exclude: /node_modules/, use: 'babel-loader' } ] } \n};  \n```", "```js\n{\n  /* package.json configuration */\n\n  \"scripts\": {\n    \"bundle\": \"webpack --config webpack.config.js\",\n  }\n\n  /* remaining properties */\n}   \n```", "```js\nnpm run bundle  \n```", "```js\n // .baberc \n{ \n  \"presets\": [ \n    [\"env\", { \n   \"targets\": { \n     \"browsers\": [\"last 2 versions\", \"safari >= 7\"] \n   } \n }] \n  ] \n} \n```", "```js\n./node_modules/.bin/webpack --config webpack.config.js  --profile --json > compilation-stats.json\n```"]