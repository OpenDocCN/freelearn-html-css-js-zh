["```js\nExt.define('Packt.model.security.User', {\n    extend: 'Packt.model.security.Base', //#1\n\n fields: [\n        { name: 'name' },\n        { name: 'userName' },\n        { name: 'email' },\n        { name: 'picture' },\n        { name: 'groups_id' , type: 'int'}\n});\n```", "```js\nExt.define('Packt.model.security.Base', {\n    extend: 'Ext.data.Model',\n\n    requires: [\n        'Packt.util.Util'\n    ],\n\n    idProperty: 'id',\n\n    fields: [\n        { name: 'id', type: 'int' } //#1\n    ],\n\n    schema: {\n        namespace: 'Packt.model.security', //#2\n        urlPrefix: 'php',                  //#3\n        proxy: {\n            //proxy code here\n        }\n    }\n});\n```", "```js\ntype: 'ajax',\napi :{\n    read : '{prefix}/{entityName:lowercase}/list.php', //#4\n    create: '{prefix}/{entityName:lowercase}/create.php',\n    update: '{prefix}/{entityName:lowercase}/update.php',\n    destroy: '{prefix}/{entityName:lowercase}/destroy.php'\n},\nreader: {\n    type: 'json',\n    rootProperty: 'data'\n},\nwriter: { //#5\n    type: 'json',\n    writeAllFields: true,\n    encode: true,\n    rootProperty: 'data',\n    allowSingle: false\n},\nlisteners: { //#6\n    exception: function(proxy, response, operation){\n        Packt.util.Util.showErrorMsg(response.responseText);\n    }\n}\n```", "```js\nExt.define('Packt.view.security.UsersGrid', {\n    extend: 'Ext.grid.Panel',\n    alias: 'widget.users-grid',  //#1\n\n    reference: 'usersGrid', //#2\n\n    columns: [  //#3\n        {\n            width: 150,\n            dataIndex: 'userName',  //#4\n            text: 'Username'\n        },\n        {\n            width: 200,\n            dataIndex: 'name',\n            flex: 1,             //#5\n            text: 'Name'\n        },\n        {\n            width: 250,\n            dataIndex: 'email',\n            text: 'Email'\n        },\n        {\n            width: 150,\n            dataIndex: 'groups_id', //#6\n            text: 'Group'\n        }\n    ]\n});\n```", "```js\nExt.define('Packt.view.security.User', {\n    extend: 'Ext.panel.Panel',\n    xtype: 'user',\n\n    requires: [\n        'Packt.view.security.UsersGrid' //#1\n    ],\n\n    controller: 'user', //#2\n    viewModel: {        //#3\n        type: 'user'\n    },\n\n    frame: true,        //#4\n\n    layout: {           //#5\n        type: 'vbox',\n        align: 'stretch'\n    },\n\n    items: [\n        {\n            xtype: 'users-grid', //#6\n            flex: 1              //#7\n        }\n    ]\n});\n```", "```js\ndockedItems: [\n    {\n        xtype: 'toolbar',\n        dock: 'top', //#1\n        items: [\n            {\n                xtype: 'button',\n                text: 'Add',\n                glyph: Packt.util.Glyphs.getIcon('add'), //#2\n                listeners: {\n                    click: 'onAdd' //#3\n                }\n            },\n            {\n                xtype: 'button',\n                text: 'Edit',\n                glyph: Packt.util.Glyphs.getIcon('edit'),\n                listeners: {\n                    click: 'onEdit'\n                }\n            },\n            {\n                xtype: 'button',\n                text: 'Delete',\n                glyph: Packt.util.Glyphs.getIcon('destroy'),\n                listeners: {\n                    click: 'onDelete'\n                }\n            }\n        ]\n    }\n]\n```", "```js\nExt.define('Packt.util.Glyphs', {\n    singleton: true, //#1\n\n    config: { //#2\n        webFont: 'FontAwesome',\n        add: 'xf067',\n        edit: 'xf040',\n        destroy: 'xf1f8',\n        save: 'xf00c',\n        cancel: 'xf0e2'\n    },\n\n    constructor: function(config) { //#3\n        this.initConfig(config);\n    },\n\n    getGlyph : function(glyph) { //#4\n        var me = this,\n            font = me.getWebFont(); //#5\n        if (typeof me.config[glyph] === 'undefined') {\n            return false;\n        }\n        return me.config[glyph] + '@' + font;\n    }\n});\n```", "```js\nrequires: [\n    //other requires\n    'Packt.util.Glyphs'\n],\n```", "```js\nExt.define('Packt.view.security.UserModel', {\n    extend: 'Ext.app.ViewModel',\n\n    alias: 'viewmodel.user',\n\n    stores: { //#1\n        users: { //#2\n            model: 'Packt.model.security.User',\n            autoLoad: true //#3\n        }\n    }\n});\n```", "```js\nbind : '{users}',\n```", "```js\nbind: {\n    disabled: '{!usersGrid.selection}'\n}\n```", "```js\nrequires: [\n    //other requires\n    'Packt.view.security.UserModel'd\n],\n```", "```js\nExt.define('Packt.view.security.UserController', {\n    extend: 'Ext.app.ViewController',\n\n    alias: 'controller.user',\n\n    requires: [\n        'Packt.util.Util'\n    ],\n\n    onAdd: function(button, e, options){},\n\n    onEdit: function(button, e, options){},\n\n    createDialog: function(record){},\n\n    getRecordsSelected: function(){},\n\n    onDelete: function(button, e, options){},\n\n    onSave: function(button, e, options){},\n\n    onSaveSuccess: function(form, action) {},\n\n    onSaveFailure: function(form, action) {},\n\n    onCancel: function(button, e, options){},\n\n    refresh: function(button, e, options){},\n\n    onFileFieldChange: function(fileField, value, options) {}\n});\n```", "```js\nrequires: [\n    //other requires\n    'Packt.view.security.UserController'\n],\n```", "```js\nUPDATE `sakila`.`menu` SET `className`='user' WHERE `id`='3';\n```", "```js\nExt.define('Packt.view.security.UserForm', {\n    extend: 'Ext.window.Window',\n    alias: 'widget.user-form',\n\n    height: 270,\n    width: 600,\n\n    requires: [\n        'Packt.util.Util',\n        'Packt.util.Glyphs'\n    ],\n\n    layout: {\n        type: 'fit'\n    },\n\n    bind: {\n        title: '{title}' //#1\n    },\n\n    closable: false,\n    modal: true,\n\n    items: [\n        {\n            xtype: 'form',\n            reference: 'form',\n            bodyPadding: 5,\n            modelValidation: true, //#2\n            layout: {\n                type: 'hbox',      //#3\n                align: 'stretch'\n            },\n            items: [\n                //add form items here\n            ]\n        }\n    ]\n});\n```", "```js\n{\n    xtype: 'fieldset',\n    flex: 1,                   //#4\n    title: 'User Information',\n    layout: 'anchor',          //#5\n    defaults: {\n        afterLabelTextTpl: Packt.util.Util.required, //#6\n        anchor: '100%',                              //#7\n        xtype: 'textfield',\n        msgTarget: 'side',\n        labelWidth: 75\n    },\n    items: [\n        //add items here\n    ]\n},\n```", "```js\nrequired: '<span style=\"color:red;font-weight:bold\" data-qtip=\"Required\"> *</span>',\n```", "```js\n{\n    xtype: 'hiddenfield',\n    name: 'id',               //#8\n    fieldLabel: 'Label',\n    bind : '{currentUser.id}' //#9\n},\n{\n    fieldLabel: 'Username',\n    name: 'userName',\n    bind : '{currentUser.userName}'\n},\n{\n    fieldLabel: 'Name',\n    name: 'name',\n    bind : '{currentUser.name}'\n},\n{\n    fieldLabel: 'Email',\n    name: 'email',\n    bind : '{currentUser.email}'\n},\n{\n    xtype: 'combo',\n    fieldLabel: 'Group',\n    displayField: 'name',  //#10\n    valueField: 'id',      //#11\n    queryMode: 'local',    //#12\n    forceSelection: true,  //#13\n    editable: false,       //#14\n    name: 'groups_id',\n    bind: {\n        value: '{currentUser.groups_id}', //#15\n        store: '{groups}',                //#16\n        selection: '{currentUser.group}'  //#17\n    }\n},\n{\n    xtype: 'filefield',\n    fieldLabel: 'Photo',\n    name: 'picture',\n    buttonText: 'Select Photo...',\n    afterLabelTextTpl: '',          //#18\n    listeners: {\n        change: 'onFileFieldChange' //#19\n    }\n}\n```", "```js\n{\n    xtype: 'fieldset',\n    title: 'Photo',\n    width: 170,  //#19\n    items: [\n        {\n            xtype: 'image',\n            reference: 'userPicture', //#20\n            height: 150,\n            width: 150,\n            bind:{\n                src: 'resources/profileImages/{currentUser.picture}' //#21\n            }\n        }\n    ]\n}\n```", "```js\ndockedItems: [\n    {\n        xtype: 'toolbar',\n        dock: 'bottom',\n        ui: 'footer', \n        layout: {\n            pack: 'end', //#22\n            type: 'hbox'\n        },\n        items: [\n            {\n                xtype: 'button',\n                text: 'Save',\n                glyph: Packt.util.Glyphs.getGlyph('save'),\n                listeners: {\n                    click: 'onSave'\n                }\n            },\n            {\n                xtype: 'button',\n                text: 'Cancel',\n                glyph: Packt.util.Glyphs.getGlyph('cancel'),\n                listeners: {\n                    click: 'onCancel'\n                }\n            }\n        ]\n    }\n]\n```", "```js\nExt.define('Packt.model.security.Group', {\n    extend: 'Packt.model.security.Base',\n\n    fields: [\n        { name: 'name' }\n    ]\n});\n```", "```js\nstores: {\n    users: {\n        model: 'Packt.model.security.User',\n        autoLoad: true\n    },\n    groups: {        model: 'Packt.model.security.Group',        autoLoad: true    }\n}\n```", "```js\n{\n    \"success\": true,\n    \"data\": [{\n        \"id\": \"1\",\n        \"name\": \"admin\"\n    }]\n}\n```", "```js\nonAdd: function(button, e, options){\n    this.createDialog(null);\n},\n```", "```js\ncreateDialog: function(record){\n\n    var me = this,           \n        view = me.getView(); //#1\n\n    me.dialog = view.add({\n        xtype: 'user-form',  //#2\n        viewModel: {         //#3\n            data: {\n                title: record ? 'Edit: ' + record.get('name') : 'Add User' //#4\n            },\n            links: { //#5\n                currentUser: record || { //#6\n                    type: 'User',        //#7\n                    create: true\n                }\n            }\n        }\n    });\n\n    me.dialog.show(); //#7\n},\n```", "```js\nonEdit: function(button, e, options){\n\n    var me = this,\n        records = me.getRecordsSelected(); //#1\n\n    if(records[0]){ //#2\n        me.createDialog(records[0]); //#3\n    }\n},\n```", "```js\ngetRecordsSelected: function(){\n    var grid = this.lookupReference('usersGrid'); //#4\n    return grid.getSelection(); //#5\n},\n```", "```js\nselModel: {\n    mode: 'MULTI'\n},\n```", "```js\nonCancel: function(button, e, options){\n    var me = this;\n    me.dialog = Ext.destroy(me.dialog);\n},\n```", "```js\nonSave: function(button, e, options){\n\n    var me = this,\n        form = me.lookupReference('form'); //#1\n\n    if (form && form.isValid()) { //#2\n        form.submit({     //#3\n            clientValidation: true, //#4\n            url: 'php/user/save.php', //#5\n            scope: me,                //#6\n            success: 'onSaveSuccess',\n            failure: 'onSaveFailure'\n        });\n    }\n},\n```", "```js\nonSaveSuccess: function(form, action) {\n    var me = this;\n    me.onCancel(); //#7\n    me.refresh();  //#8\n    Packt.util.Util.showToast('Success! User saved.'); //#9\n},\n```", "```js\nrefresh: function(button, e, options){\n    var me = this,\n        store = me.getStore('users');\n\n    store.load();\n},\n```", "```js\nshowToast: function(text) {\n    Ext.toast({\n        html: text,\n        closable: false,\n        align: 't',\n        slideInDuration: 400,\n        minWidth: 400\n    });\n}\n```", "```js\nonSaveFailure: function(form, action) {\n    Packt.util.Util.handleFormFailure(action);\n},\n```", "```js\nhandleFormFailure: function(action){\n    var me = this,\n    result = Packt.util.Util.decodeJSON(action.response.responseText);\n\n    switch (action.failureType) {\n        case Ext.form.action.Action.CLIENT_INVALID:\n            me.showErrorMsg('Form fields may not be submitted with invalid values'); //#1\n            break;\n        case Ext.form.action.Action.CONNECT_FAILURE:\n            me.showErrorMsg(action.response.responseText);\n            break;\n        case Ext.form.action.Action.SERVER_INVALID:\n            me.showErrorMsg(result.msg);\n    }\n}\n```", "```js\nvalidators: {\n    name: [\n        { type: 'presence', message: 'This field is mandatory'},\n        { type: 'length', min: 3, max: 100}\n    ],\n    userName: [\n        { type: 'exclusion', list: ['Admin', 'Operator'] },\n        { type: 'format', matcher: /([a-z]+)/i },\n        { type: 'presence', message: 'This field is mandatory'},\n        { type: 'length', min: 3, max: 25}\n    ],\n    email: [\n        { type: 'presence', message: 'This field is mandatory'},\n        { type: 'length', min: 5, max: 100},\n        { type: 'email' }\n    ],\n    groups_id: 'presence'\n},\n```", "```js\nonFileFieldChange: function(fileField, value, options) {\n\n    var me = this,\n        file = fileField.fileInputEl.dom.files[0], //#1\n        picture = this.lookupReference('userPicture'); //#2\n\n    if (typeof FileReader !== 'undefined' && (/image/i).test(file.type)) { //#3\n        var reader = new FileReader();       //#4\n        reader.onload = function(e){         //#5\n            picture.setSrc(e.target.result); //#6\n        };\n        reader.readAsDataURL(file);          //#7\n    } else if (!(/image/i).test(file.type)){ //#8\n        Ext.Msg.alert('Warning', 'You can only upload image files!');\n        fileField.reset();                   //#9\n    }\n}\n```", "```js\nonDelete: function(button, e, options){\n    var me = this,\n        view = me.getView(),\n        records = me.getRecordsSelected(), //#1\n        store = me.getStore('users');      //#2\n\n    if (store.getCount() >= 2 && records.length){ //#3\n        Ext.Msg.show({\n            title:'Delete?', //#4\n            msg: 'Are you sure you want to delete?',\n            buttons: Ext.Msg.YESNO,\n            icon: Ext.Msg.QUESTION,\n            fn: function (buttonId){\n                if (buttonId == 'yes'){ //#5\n                    store.remove(records); //#6\n                    store.sync();          //#7\n                }\n            }\n        });\n    } else if (store.getCount() === 1) { //#8\n        Ext.Msg.show({\n            title:'Warning',\n            msg: 'You cannot delete all the users from the application.',\n            buttons: Ext.Msg.OK,\n            icon: Ext.Msg.WARNING\n        });\n    }\n},\n```", "```js\nhasOne: [\n    {\n        model: 'Group',         //#1\n        name: 'group',          //#2\n        foreignKey:'groups_id', //#3\n        associationKey: 'group'\n    }\n]\n```", "```js\n{ name:'groupName', type:'string', persist:false,\n    convert:function(v, rec){\n        var data = rec.data;\n        if (data.group && data.group.name){\n            return data.group.name;\n        }\n        return data.groups_id;\n    }\n}\n```", "```js\ndataIndex: 'groupName',\n```"]