- en: Chapter 5. Become a Musical Maestro
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although you might think the games you created while reading this book are
    complete, they lack some kind of atmosphere due to a simple reason: they are mute.'
  prefs: []
  type: TYPE_NORMAL
- en: No sounds, no background music, nothing. A complete, fully polished game must
    have background music and sound effects, and that's what you are going to learn
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow me, and you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Add sound effects to your games
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add background music to your games
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loop sounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start and stop sounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the volume of music and sound effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, just because the more you learn the better it is, you will also see how
    to create option menus.
  prefs: []
  type: TYPE_NORMAL
- en: Now, surf the Web and choose some great music and sound effects.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing sounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's guess what happened. You found that incredible song, which is a mix between
    electronic and heavy metal and think it would fit really good in your space shooter
    game. You downloaded it and enjoyed 4 minutes and 56 seconds of Blu-ray quality
    sound.
  prefs: []
  type: TYPE_NORMAL
- en: Also, in a matter of minutes, you found at least three more songs that would
    also fit perfectly in your game. Let's add them all, doing an in-game radio like
    in a GTA series.
  prefs: []
  type: TYPE_NORMAL
- en: No. Wait! The player is running your game in a browser, probably outside any
    free Wi-Fi zone, with a not so high download speed. You simply can't make them
    wait half an hour just to download a song unless your name is Lady Gaga and that
    sound is your latest smash hit.
  prefs: []
  type: TYPE_NORMAL
- en: People want to press *play* and play your game; remember, you are making games,
    not sounds in a matter of seconds, so choose your sounds wisely, they can't be
    bigger than the game itself.
  prefs: []
  type: TYPE_NORMAL
- en: Play with sound quality until you find a good compromise between quality and
    weight, and when choosing background music, a short loop is way better than a
    long tune.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, remember different browsers in different operative system read different
    sound types, so you should provide the same sound in three different formats:
    `MP3`, `WAV`, and `OGG`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Talking about sounds optimization and conversion is beyond the scope of this
    book, but I suggest you use the free software I used to edit sounds to be included
    in my games, **Audacity**, found at [http://audacity.sourceforge.net/](http://audacity.sourceforge.net/).
  prefs: []
  type: TYPE_NORMAL
- en: Preloading sounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Preloading sounds is exactly the same as preloading graphic assets. In the
    `assets` folder, there are two mp3 files: `loop.mp3`, which is a short loop used
    as background music, and `bang.mp3`, which is an Uzi sound effect. Remember in
    your final project, you will have to include the `WAV` and `OGG` files as well
    in order to ensure the largest compatibility possible among different browsers
    in various devices.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `loadassets.js` file will include the array of sounds to preload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's create a menu to play with sounds and music.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a sound menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several ways to create a menu, and the most interesting is to create
    the graphic assets of every menu item, then add touch or mouse listeners, and
    handle the whole thing in a way you should already know.
  prefs: []
  type: TYPE_NORMAL
- en: 'This time, you''ll see something new: the Cocos2d-JS built-in `Menu` class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the content of `gameScript.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s really a lot of stuff, but there isn''t that much to learn: the `gameScene`
    variable declaration is the same as in previous projects, and the game declaration
    is different from the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will allow you to initialize the audio engine, you only find a lot: seven
    menu item declarations to be precise like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `cc.MenuItemFont.create` function creates a text menu item with a zoom effect
    when it's clicked.
  prefs: []
  type: TYPE_NORMAL
- en: The three arguments represent the text to display, the callback function to
    run, and the target to run the callback, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: All seven menu items are created in the same way and placed with the `setPosition`
    method you already know.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once all these items have been created, you turn them into an actual menu with
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `Menu.create` function contains all the menu items you just created, and
    it's added and positioned on the stage as usual with `addChild` and `setPosition`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the project and you will see what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a sound menu](img/0075OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click or touch the menu items to see the zoom-in effect, although nothing happens
    because callback functions still have to be created.
  prefs: []
  type: TYPE_NORMAL
- en: Managing music and sound effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s time to create all the callback functions, so let''s expand the content
    of the `game` class declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you test the project, you will be able to play and stop sounds as well
    as adjust adjust the volume of the music and sound effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see all the functions one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When the music is not playing, use the `playMusic` method to play the music.
    The second argument means to loop it. You can see whether the music is playing,
    thanks to the `isMusicPlaying` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Applying the same concept used before, if the music is already playing, you
    stop it with the `stopMusic` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `getMusicVolume` and `setMusicVolume` methods get and set music volume
    with values from 0 (no volume) to 1 (full volume), respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following concepts are applied to `getEffectsVolume` and `setEffectsVolume`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Also, this is how you can manage sounds with Cocos2d-JS.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks to what you learned in this chapter, your games will now feature background
    music and sound effects.
  prefs: []
  type: TYPE_NORMAL
- en: Why don't you add sounds to the games you made during previous chapters? Then,
    get ready because we are going to bring interactivity to a whole new level!
  prefs: []
  type: TYPE_NORMAL
