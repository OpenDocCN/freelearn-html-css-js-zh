- en: Creating Images from Simple Text
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从简单文本创建图像
- en: 'In this chapter, a high-level overview of **Scalable Vector Graphics** (**SVG**)
    will be presented by explaining how it operates and what elements it encompasses.
    In a browser context, SVG is very similar to HTML and is one of the means by which
    D3 expresses its power. Understanding the nodes and attributes of SVG will empower
    us to create many kinds of visualizations, not just maps. This chapter includes
    the following points:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将通过解释其操作方式和包含的元素来介绍**可缩放矢量图形**（**SVG**）。在浏览器环境中，SVG与HTML非常相似，并且是D3表达其功能的一种方式。理解SVG的节点和属性将使我们能够创建许多类型的可视化，而不仅仅是地图。本章包括以下内容：
- en: A general overview of SVG and its key elements
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG及其关键元素的概述
- en: The SVG coordinate system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG坐标系
- en: The primary elements of SVG (lines, rectangles, circles, polygons, and paths)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG的主要元素（线条、矩形、圆、多边形和路径）
- en: SVG, an XML markup language, is designed to describe two-dimensional vector
    graphics. The SVG markup language resides in the DOM as a node that describes
    exactly how to draw a shape (a curve, line, circle, or polygon). Just like HTML,
    SVG tags can also be styled from standard CSS. Note that, because all commands
    reside in the DOM, the more shapes you have, the more nodes you have and the more
    work for the browser. This is important to remember because, as SVG visualizations
    become more complex, the less fluidly they will perform.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: SVG，一种XML标记语言，旨在描述二维矢量图形。SVG标记语言位于DOM中，作为一个节点，精确地描述了如何绘制一个形状（曲线、线、圆或多边形）。就像HTML一样，SVG标签也可以通过标准CSS进行样式化。请注意，由于所有命令都位于DOM中，形状越多，节点就越多，浏览器的工作量就越大。这一点很重要，因为随着SVG可视化变得更加复杂，它们的性能将变得不那么流畅。
- en: 'The main SVG node is declared as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的SVG节点声明如下：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This node''s basic properties are width and height; they provide the primary
    container for the other nodes that make up a visualization. For example, if you
    wanted to create 10 sequential circles in a `200` x `200` box, the tags would
    look like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此节点的基本属性是宽度和高度；它们为构成可视化的其他节点提供了主要容器。例如，如果你想在`200` x `200`的框中创建10个连续的圆，标签看起来会是这样：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that 10 circles would need 10 nodes in the DOM, plus its container.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，10个圆需要10个DOM节点，加上其容器。
- en: SVG contains several primitives that allow the developer to draw shapes quickly.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: SVG包含几个原语，允许开发者快速绘制形状。
- en: 'We will cover the following primitives throughout this chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中介绍以下原语：
- en: '`circle`: A standard circle with a defined radius and position attributes'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`circle`：具有定义的半径和位置属性的常规圆'
- en: '`rect`: A standard rectangle with height, width, and position attributes'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rect`：具有高度、宽度和位置属性的常规矩形'
- en: '`polygon`: Any polygon, described by a list of points'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polygon`：任何多边形，由一系列点描述'
- en: '`line`: A line with start and end points'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`line`：具有起点和终点的线'
- en: '`path`: A complex line created through a series of drawing commands'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path`：通过一系列绘图命令创建的复杂线'
- en: The SVG coordinate system
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SVG坐标系
- en: What about position? Where do these primitives draw inside the SVG element?
    What if you wanted to put a circle in the top-left and another one bottom-right?
    Where do you start?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 关于位置的问题？这些原语在SVG元素内部绘制在哪里？如果你想在左上角放一个圆，在右下角放另一个圆怎么办？从哪里开始？
- en: 'SVG is positioned by a grid system, similar to the Cartesian coordinate system.
    However, in SVG (0,0) is the top-left corner. The *x* axis proceeds horizontally
    from left to right starting at 0\. The *y* axis also starts at 0 and extends downward.
    See the following illustration:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: SVG通过一个类似于笛卡尔坐标系的网格系统进行定位。然而，在SVG中（0,0）是左上角。*x*轴从左到右水平延伸，起始值为0。*y*轴也从0开始，向下延伸。请参见以下插图：
- en: '![](img/05846a5a-7c2f-4852-9a0c-fbec3565e9e8.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/05846a5a-7c2f-4852-9a0c-fbec3565e9e8.png)'
- en: What about drawing shapes on top of each other? How do you control the *z* index?
    In SVG, there is no *z* coordinate. Depth is determined by the order in which
    the shape is drawn. If you were to draw a circle with coordinates (10,10) and
    then another one with coordinates (10,10), you would see the second circle drawn
    on top of the first.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关于在形状上方绘制形状的问题？如何控制*z*索引？在SVG中，没有*z*坐标。深度由绘制形状的顺序决定。如果你要绘制一个坐标为（10,10）的圆，然后绘制另一个坐标为（10,10）的圆，你会看到第二个圆覆盖在第一个圆的上方。
- en: The following sections will cover the basic SVG primitives for drawing shapes
    and some of their most common attributes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下章节将介绍用于绘制形状的基本SVG原语及其一些最常见属性。
- en: Line
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线
- en: The SVG line is one of the simplest in the library. It draws a straight line
    from
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: SVG线条是库中最简单的一种。它从
- en: 'one point to another. The syntax is very straightforward and can be experimented
    with at: `http://localhost:8080/chapter-2/line.html`, assuming the HTTP server
    is running:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个点到另一个点。语法非常简单，可以在以下位置进行实验：`http://localhost:8080/chapter-2/line.html`，假设HTTP服务器正在运行：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will give you the following output:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出以下输出：
- en: '![](img/c26a89ed-8a23-4cf9-9378-40a79cd63e40.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c26a89ed-8a23-4cf9-9378-40a79cd63e40.png)'
- en: 'A description of the element''s attributes is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的属性描述如下：
- en: '`x1` and `y1`: The starting *x* and *y* coordinates'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x1`和`y1`: 起始的*x*和*y*坐标'
- en: '`x2` and `y2`: The ending *x* and *y* coordinates'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x2`和`y2`: 结束的*x*和*y*坐标'
- en: '`stroke`: This gives the line a red color'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stroke`: 这会给线条一个红色'
- en: '`stroke-width`: This denotes the width of the line to be drawn in pixels'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stroke-width`: 这表示要绘制的线条的像素宽度'
- en: 'The `line` tag also has the ability to change the style of the end of the line.
    For example, adding the following would change the image so it has round ends:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`line`标签也有改变线条末端风格的能力。例如，添加以下内容将改变图像，使其具有圆形末端：'
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As stated earlier, all SVG tags can also be styled with CSS elements. An alternative
    way of producing the same graphic would be to first create a CSS style, as shown
    in the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，所有SVG标签也可以使用CSS元素进行样式设置。产生相同图形的另一种方法是在以下代码中首先创建一个CSS样式：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then you can create a very simple SVG tag using the following code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以使用以下代码创建一个非常简单的SVG标签：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: More complex lines, as well as curves, can be achieved with the `path` tag;
    we will cover it in the *Path* section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`path`标签可以实现更复杂的线条以及曲线；我们将在*路径*部分进行介绍。
- en: Rectangle
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 长方形
- en: 'The basic HTML code to create a rectangle is as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 创建矩形的HTML代码如下：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s apply the following style:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们应用以下样式：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will create a rectangle that starts at the coordinates (`10`,`10`), and is
    `100` pixels wide and `20` pixels high. Based on the styling, it will have a blue
    outline, a gray interior, and will appear slightly opaque. See the following output
    and example
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个以坐标(`10`,`10`)开始的长方形，宽度为`100`像素，高度为`20`像素。根据样式，它将有一个蓝色轮廓，灰色内部，并且看起来稍微不透明。请参见以下输出和示例
- en: '`http://localhost:8080/chapter-2/rectangle.html`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/chapter-2/rectangle.html`:'
- en: '![](img/d87ddf47-9e5d-46ac-b040-892f972f4772.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d87ddf47-9e5d-46ac-b040-892f972f4772.png)'
- en: There are two more attributes that are useful when creating rounded borders
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建圆角边框时，还有两个有用的属性
- en: '(`rx` and `ry`):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '(`rx`和`ry`):'
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: These attributes indicate that the `x` and `y` corners will have `5`-pixel curves.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性表示`x`和`y`角落将会有`5`像素的曲线。
- en: Circle
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 圆形
- en: 'A circle is positioned with the `cx` and `cy` attributes. These indicate the
    *x* and *y* coordinates of the center of the circle. The radius is determined
    by the `r` attribute. The following is an example you can experiment with ( `http://localhost:8080/chapter-2/circle.html`):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 圆的位置由`cx`和`cy`属性确定。这些属性表示圆心的*x*和*y*坐标。半径由`r`属性确定。以下是一个你可以实验的示例（`http://localhost:8080/chapter-2/circle.html`）：
- en: '![](img/e95c09bf-ead3-4be7-bd3e-d45731843ac3.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e95c09bf-ead3-4be7-bd3e-d45731843ac3.png)'
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now type in the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入以下代码：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will create a circle with the familiar blue outline, a gray interior, and
    half-way opaque.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个具有熟悉的蓝色轮廓、灰色内部和半透明度的圆。
- en: Polygon
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多边形
- en: 'To create a polygon, use the `polygon` tag. The best way to think about an
    SVG polygon is to compare it to a child''s dot-to-dot game. You can imagine a
    series of dots and a pen connecting each (*x, y*) coordinate with a straight line.
    The series of *dots* is identified in the `points` attribute. Take the following
    as an example (`http://localhost:8080/chapter-2/polygon.html`):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建多边形，请使用`polygon`标签。最好的方法是将其与孩子的点对点游戏进行比较。你可以想象一系列的点，用笔将每个(*x, y*)坐标用直线连接起来。一系列的点在`points`属性中标识。以下是一个示例（`http://localhost:8080/chapter-2/polygon.html`）：
- en: '![](img/195bcc5f-d4c2-4654-94ec-e1f6a39bd853.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/195bcc5f-d4c2-4654-94ec-e1f6a39bd853.png)'
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: First, we start at `60,5` and we move to `10,120`. Then, we proceed to `115,120`
    and, finally, return to `60,5`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从`60,5`开始，移动到`10,120`。然后，我们继续到`115,120`，最后返回到`60,5`。
- en: The pen returns to the starting position automatically.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 笔自动返回到起始位置。
- en: Path
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路径
- en: When creating maps with D3, the `path` SVG tag is used most often. Using the
    definition from W3C, you can think of the `path` tag as a series of commands that
    explain how to draw any shape by moving a pen on a piece of paper. The `path`
    commands start with the location to place the pen and then a series of follow-up
    commands that tell the pen how to connect additional points with lines. The `path`
    shapes can also be filled or have their outline styled.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 D3 创建地图时，最常使用的是 `path` SVG 标签。根据 W3C 的定义，你可以将 `path` 标签视为一系列命令，这些命令解释了如何通过在纸上移动笔来绘制任何形状。`path`
    命令从放置笔的位置开始，然后是一系列后续命令，告诉笔如何用线条连接额外的点。`path` 形状也可以填充或对其轮廓进行样式化。
- en: Let's look at a very simple example to replicate the triangle we created as
    a polygon.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个非常简单的例子，复制我们创建的多边形三角形。
- en: 'Open your browser, go to `http://localhost:8080/chapter-2/path.html`, and you
    will see the following output on your screen:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的浏览器，转到 `http://localhost:8080/chapter-2/path.html`，你将在屏幕上看到以下输出：
- en: '![](img/47939436-45b1-4655-8c89-7e6bcbfb3b4f.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47939436-45b1-4655-8c89-7e6bcbfb3b4f.png)'
- en: Right-click anywhere in the triangle and select Inspect element.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在三角形的任何位置右键单击并选择“检查元素”。
- en: 'The `path` command for this shape is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此形状的 `path` 命令如下：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The attribute that contains the path-drawing commands is `d`. The commands
    adhere to the following structure:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 包含路径绘制命令的属性是 `d`。命令遵循以下结构：
- en: '`M`: Put the pen down to start drawing at `x = 120 y = 120`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M`: 将笔放下，开始在 `x = 120 y = 120` 处绘制'
- en: '`L`: Draw a straight line that connects (`120`,`120`) to `x = 220 y = 220`,
    then draw another straight line that connects (`220`,`220`) to `x = 420 y = 120`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`L`: 画一条直线连接 (`120`,`120`) 到 `x = 220 y = 220`，然后画另一条直线连接 (`220`,`220`) 到 `x
    = 420 y = 120`'
- en: '`Z`: Connect the last data point (`420`,`120`) to where we started (`120`,`120`)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Z`: 将最后一个数据点 (`420`,`120`) 连接到起始点 (`120`,`120`)'
- en: Experiment
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实验
- en: 'Let''s try some experiments to reinforce what we just learned. From the Chrome
    developer tools, simply remove the `Z` at the end of the path, and hit *Enter*:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些实验来巩固我们刚刚学到的知识。从 Chrome 开发者工具中，只需简单地从路径末尾移除 `Z`，然后按 *Enter*：
- en: '![](img/af30d800-0ac2-4c5f-a940-f48ce2548d49.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af30d800-0ac2-4c5f-a940-f48ce2548d49.png)'
- en: You should see the top line disappear. Try some other experiments with changing
    the data points in the `L` subcommand.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到最上面的线条消失了。尝试在 `L` 子命令中更改数据点的其他实验。
- en: Paths with curves
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 曲线路径
- en: 'Paths can also have curves. The concept is still the same; you connect several
    data points with lines. The main difference is that now you apply a curve to each
    line as it connects the dots. There are three types of curve commands:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 路径也可以有曲线。概念仍然是相同的；你用线条连接几个数据点。主要区别在于现在你在连接点时应用曲线。有三种类型的曲线命令：
- en: Cubic Bézier
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 立方贝塞尔
- en: Quadratic Bézier
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二次贝塞尔
- en: Elliptical arc
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 椭圆弧
- en: 'Each command is explained in detail at [http://www.w3.org/TR/SVG11/paths.html](http://www.w3.org/TR/SVG11/paths.html).
    As an example, let''s apply a cubic Bézier curve to the triangle. The format for
    the command is as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 每个命令都在 [http://www.w3.org/TR/SVG11/paths.html](http://www.w3.org/TR/SVG11/paths.html)
    中详细解释。作为一个例子，让我们将立方贝塞尔曲线应用到三角形上。命令的格式如下：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This command can be inserted into the path structure at any point:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令可以插入到路径结构中的任何位置：
- en: '`C`: Indicates that we are applying a Cubic Bézier curve, just as `L` in the
    previous example indicates a straight line'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C`: 表示我们正在应用立方贝塞尔曲线，就像前一个例子中的 `L` 表示直线'
- en: '`x1` and `y1`: Adds a control point to influence the curve''s tangent'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x1` 和 `y1`: 添加一个控制点以影响曲线的切线'
- en: '`x2` and `y2`: Adds a second control point after applying `x1` and `y1`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x2` 和 `y2`: 在应用 `x1` 和 `y1` 后添加第二个控制点'
- en: '`x` and `y`: Indicates the final resting place of the line'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x` 和 `y`: 表示线条最终停留的位置'
- en: To apply this command to our previous triangle, we need to replace the second
    line command (`320 120`) with a cubic command (`C 200 70 480 290 320 120`).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此命令应用到我们之前的三角形上，我们需要将第二条线条命令 (`320 120`) 替换为立方命令 (`C 200 70 480 290 320 120`)。
- en: 'Before, the statement was as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，语句如下：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After adding the cubic command, it will be as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 添加立方命令后，它将如下所示：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will produce the following shape:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下形状：
- en: '![](img/050d0d87-b973-4525-b2e4-ec5fdd827cf9.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/050d0d87-b973-4525-b2e4-ec5fdd827cf9.png)'
- en: 'To illustrate how the cubic Bézier curve works, let''s draw circles and lines
    to show the control points in the `C` command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明立方贝塞尔曲线的工作原理，让我们画圆和线来显示 `C` 命令中的控制点：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The output should look like the one shown in the following screenshot, and can
    be experimented with at `http://localhost:8080/chapter-2/curves.html`. You can
    see the angles created by the control points (indicated by circles in the output)
    and the cubic Bézier curves applied.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该看起来像以下屏幕截图所示，可以在 `http://localhost:8080/chapter-2/curves.html` 进行实验。您可以看到由控制点（输出中用圆圈表示）和应用的立方贝塞尔曲线创建的角度。
- en: '![](img/31c59086-521c-469f-a270-fcd49fe4b1b2.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31c59086-521c-469f-a270-fcd49fe4b1b2.png)'
- en: 'SVG paths are the main tool leveraged when drawing geographic regions. However,
    imagine if you were to draw an entire map by hand using SVG paths; the task would
    become exhausting! For example, the command structure for the map of Europe in
    our first chapter has 3,366,121 characters in it! Even a simple state such as
    Colorado would be a lot of code if executed by hand:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 路径是在绘制地理区域时利用的主要工具。然而，想象一下，如果您要手动使用 SVG 路径绘制整个地图，这项任务将变得非常耗时！例如，我们第一章中欧洲地图的命令结构有
    3,366,121 个字符！即使是一个简单的州，如科罗拉多州，如果手动执行，代码也会很多：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We will learn in later chapters how D3 will come to the rescue.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中学习 D3 如何提供帮助。
- en: Transform
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变换
- en: 'The `transform` allows you to change your visualization dynamically and is
    one of the advantages of using SVG and commands to draw shapes. Transform is an
    additional attribute you can add to any of the elements we have discussed so far.
    Two important types of `transform` when dealing with our D3 maps are:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`transform` 允许您动态地更改您的可视化，这是使用 SVG 和命令绘制形状的优点之一。变换是您可以添加到我们迄今为止讨论的任何元素上的一个附加属性。在处理我们的
    D3 地图时，两种重要的 `transform` 类型是：'
- en: '**Translate**: Move the element'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平移**：移动元素'
- en: '**Scale**: Adjust the coordinates for all attributes in the element'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放**：调整元素中所有属性的坐标'
- en: Translate
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 翻译
- en: 'You will likely use this transformation in all of your cartography work and
    will see it in most D3 examples online. As a technique, it''s often used with
    a margin object to shift the entire visualization. The following syntax can be
    applied to any element:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会在所有地图制图工作中使用这种变换，并在大多数在线的 D3 示例中看到它。作为一种技术，它通常与边距对象一起使用，以移动整个可视化。以下语法可以应用于任何元素：
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, `x` and `y` are the coordinates to move the element by.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`x` 和 `y` 是移动元素的坐标。
- en: 'For example, a translate `transform` can move our circle `50` pixels to the
    left and `50` pixels down by using the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个平移 `transform` 可以使用以下代码将我们的圆向左移动 `50` 像素，向下移动 `50` 像素：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here is the output:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是输出：
- en: '![](img/2d8a8747-f164-4620-b4f7-ab3255e1f7d7.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d8a8747-f164-4620-b4f7-ab3255e1f7d7.png)'
- en: 'Note that the translucent image represents the original image and the location
    the shape moved from. The `translate` attribute is not an absolute position. It
    adjusts the origin of the circle relatively to `cx`, `cy` and adds `50` to those
    coordinates. If you were to move the circle to the top-left of the container,
    you would translate with negative values. For example:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，半透明的图像代表原始图像和形状移动的起始位置。`translate` 属性不是绝对位置。它相对于 `cx`、`cy` 调整圆的起点，并给这些坐标加上
    `50`。如果您要将圆移动到容器的左上角，您将使用负值进行平移。例如：
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Feel free to experiment with your Chrome developer tools or code editor at
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 随意使用您的 Chrome 开发者工具或代码编辑器进行实验。
- en: '`http://localhost:8080/chapter-2/translate.html`.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/chapter-2/translate.html`。'
- en: Scale
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩放
- en: The scale transform is easy to understand but often creates undesired effects
    if you lose the focus of where the scaling originated.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放变换易于理解，但如果您失去了缩放起源的焦点，它通常会创建不希望的效果。
- en: 'Scale adjusts the (*x, y*) values across all attributes in the element. Using
    the earlier `circle` code, we have the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放调整元素中所有属性的 (*x, y*) 值。使用之前的 `circle` 代码，我们有以下内容：
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The scale is going to double the `cx`, `cy`, radius, and `stroke-width`, producing
    the following output (`http://localhost:8080/chapter-2/scale.html`):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放将使 `cx`、`cy`、半径和 `stroke-width` 加倍，产生以下输出（`http://localhost:8080/chapter-2/scale.html`）：
- en: '![](img/4e572a01-dbbf-4105-b95a-1881943e5a7c.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e572a01-dbbf-4105-b95a-1881943e5a7c.png)'
- en: 'It is important to emphasize that, because we are using SVG commands to draw
    the shapes, there is no loss of quality as we scale the images, unlike raster
    images such as PNG or JPEG. The transform types can be combined to adjust for
    scale, altering the *x* and *y* position of the shape. Let''s use the `path` example
    that we used earlier in the following code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 需要强调的是，因为我们使用 SVG 命令来绘制形状，所以在缩放图像时不会出现质量损失，这与 PNG 或 JPEG 这样的光栅图像不同。可以通过组合变换类型来调整缩放，改变形状的
    *x* 和 *y* 位置。以下代码中使用了我们之前用过的 `path` 示例：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preceding code will produce the following output (`http://localhost:8080/chapter-2/scale_translate.html`):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将产生以下输出（`http://localhost:8080/chapter-2/scale_translate.html`）：
- en: '![](img/e185d2e3-7bc0-424c-a11f-bf728ad6da78.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e185d2e3-7bc0-424c-a11f-bf728ad6da78.png)'
- en: Grouping
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分组
- en: 'The group tag `<g>` is used often in SVG, especially in maps. It is used to
    group elements and then apply a set of attributes to that set. It provides the
    following benefits:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`<g>` 组标签在 SVG 中经常使用，尤其是在地图中。它用于将元素分组，然后对该组应用一系列属性。它提供了以下好处：'
- en: It allows you to treat a set of shapes as a single shape for the purpose of
    scaling and translating.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许您将一组形状视为单个形状，用于缩放和平移。
- en: It prevents code duplication by allowing you to set attributes at a higher level
    and have them inherit all the elements included.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过允许您在较高级别设置属性并让它们继承所有包含的元素来防止代码重复。
- en: Groups are essential for applying transformations to large sets of SVG nodes
    in a performant manner. Grouping offsets the parent group rather than modifying
    each of the attributes in every item of the group.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组对于以高效的方式应用变换到大量 SVG 节点至关重要。分组相对于父组进行偏移，而不是修改组中每个项目的每个属性。
- en: 'Let''s take the set of shapes used to explain Bézier curves and add all of
    them to a single group, combining everything we have learned so far, in the following
    code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将用于解释贝塞尔曲线的形状集添加到一个单独的组中，在以下代码中结合我们迄今为止所学的一切：
- en: '[PRE23]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding code will produce the following image (`http://localhost:8080/chapter-2/group.html`):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将产生以下图像（`http://localhost:8080/chapter-2/group.html`）：
- en: '![](img/030af2bc-e3a6-49ad-8ac2-a2c856745710.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/030af2bc-e3a6-49ad-8ac2-a2c856745710.png)'
- en: Without using the group element, we would have had to apply a transform, translate,
    and scale to all six shapes in the set. Grouping helps us save time and allows
    us to make quick alignment tweaks in the future.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不使用组元素，我们就必须对集合中的所有六个形状应用变换、平移和缩放。分组帮助我们节省时间，并允许我们在将来快速调整对齐。
- en: Text
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本
- en: 'The text element, as its name describes, is used to display text in SVG. The
    basic HTML code to create a text node is as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 文本元素，正如其名称所描述的，用于在 SVG 中显示文本。创建文本节点的基本 HTML 代码如下：
- en: '[PRE24]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'It has an `x` and a `y` coordinate to tell it where to begin writing in the
    SVG coordinate system. Styling can be achieved with a CSS class in order to have
    a clear separation of concerns within our code base. For example, check out the
    following code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 它有一个 `x` 和 `y` 坐标来告诉它在 SVG 坐标系中从哪里开始写入。可以通过 CSS 类来实现样式，以便在我们的代码库中清晰地分离关注点。例如，查看以下代码：
- en: '[PRE25]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Text also supports rotation in order to provide flexibility when positioning
    it on the visualization:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 文本也支持旋转，以便在可视化中定位时提供灵活性：
- en: '[PRE26]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Some examples are located at `http://localhost:8080/chapter-2/text.html` and
    displayed as shown in the following image:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一些示例位于 `http://localhost:8080/chapter-2/text.html`，并如图所示显示：
- en: '![](img/ff32ab5f-9ddc-4554-ba6f-cbec8431f8ab.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff32ab5f-9ddc-4554-ba6f-cbec8431f8ab.png)'
- en: Keep in mind that, if you rotate the text, it will rotate relative to its origin
    (*x* and *y*). You can specify the origin of the translation via `cx` and `cy`,
    or in this case `250,150`. See the `transform` property in the code for more clarity.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果您旋转文本，它将相对于其原点（*x* 和 *y*）旋转。您可以通过 `cx` 和 `cy` 或在此情况下 `250,150` 指定平移的原点。请参阅代码中的
    `transform` 属性以获得更多清晰度。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has given us a wealth of information regarding SVG. We explained
    paths, lines, circles, rectangles, text, and some of their attributes. We also
    covered transformation by scaling and translating shapes. Since this chapter has
    given us a solid baseline, we can now create complicated shapes. The next chapter
    will introduce us to D3 and how it is used to manage SVG programmatically. On
    we go!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为我们提供了关于 SVG 的丰富信息。我们解释了路径、线条、圆形、矩形、文本及其一些属性。我们还介绍了通过缩放和变换形状的变换。由于本章为我们提供了一个坚实的基础，我们现在可以创建复杂的形状。下一章将介绍
    D3 以及它是如何用于程序化地管理 SVG 的。我们继续前进！
