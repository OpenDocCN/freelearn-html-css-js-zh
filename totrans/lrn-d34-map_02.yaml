- en: Creating Images from Simple Text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, a high-level overview of **Scalable Vector Graphics** (**SVG**)
    will be presented by explaining how it operates and what elements it encompasses.
    In a browser context, SVG is very similar to HTML and is one of the means by which
    D3 expresses its power. Understanding the nodes and attributes of SVG will empower
    us to create many kinds of visualizations, not just maps. This chapter includes
    the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: A general overview of SVG and its key elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SVG coordinate system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The primary elements of SVG (lines, rectangles, circles, polygons, and paths)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SVG, an XML markup language, is designed to describe two-dimensional vector
    graphics. The SVG markup language resides in the DOM as a node that describes
    exactly how to draw a shape (a curve, line, circle, or polygon). Just like HTML,
    SVG tags can also be styled from standard CSS. Note that, because all commands
    reside in the DOM, the more shapes you have, the more nodes you have and the more
    work for the browser. This is important to remember because, as SVG visualizations
    become more complex, the less fluidly they will perform.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main SVG node is declared as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This node''s basic properties are width and height; they provide the primary
    container for the other nodes that make up a visualization. For example, if you
    wanted to create 10 sequential circles in a `200` x `200` box, the tags would
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that 10 circles would need 10 nodes in the DOM, plus its container.
  prefs: []
  type: TYPE_NORMAL
- en: SVG contains several primitives that allow the developer to draw shapes quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following primitives throughout this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`circle`: A standard circle with a defined radius and position attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rect`: A standard rectangle with height, width, and position attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polygon`: Any polygon, described by a list of points'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`line`: A line with start and end points'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path`: A complex line created through a series of drawing commands'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SVG coordinate system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What about position? Where do these primitives draw inside the SVG element?
    What if you wanted to put a circle in the top-left and another one bottom-right?
    Where do you start?
  prefs: []
  type: TYPE_NORMAL
- en: 'SVG is positioned by a grid system, similar to the Cartesian coordinate system.
    However, in SVG (0,0) is the top-left corner. The *x* axis proceeds horizontally
    from left to right starting at 0\. The *y* axis also starts at 0 and extends downward.
    See the following illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05846a5a-7c2f-4852-9a0c-fbec3565e9e8.png)'
  prefs: []
  type: TYPE_IMG
- en: What about drawing shapes on top of each other? How do you control the *z* index?
    In SVG, there is no *z* coordinate. Depth is determined by the order in which
    the shape is drawn. If you were to draw a circle with coordinates (10,10) and
    then another one with coordinates (10,10), you would see the second circle drawn
    on top of the first.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections will cover the basic SVG primitives for drawing shapes
    and some of their most common attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SVG line is one of the simplest in the library. It draws a straight line
    from
  prefs: []
  type: TYPE_NORMAL
- en: 'one point to another. The syntax is very straightforward and can be experimented
    with at: `http://localhost:8080/chapter-2/line.html`, assuming the HTTP server
    is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give you the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c26a89ed-8a23-4cf9-9378-40a79cd63e40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A description of the element''s attributes is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`x1` and `y1`: The starting *x* and *y* coordinates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x2` and `y2`: The ending *x* and *y* coordinates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stroke`: This gives the line a red color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stroke-width`: This denotes the width of the line to be drawn in pixels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `line` tag also has the ability to change the style of the end of the line.
    For example, adding the following would change the image so it has round ends:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As stated earlier, all SVG tags can also be styled with CSS elements. An alternative
    way of producing the same graphic would be to first create a CSS style, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can create a very simple SVG tag using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: More complex lines, as well as curves, can be achieved with the `path` tag;
    we will cover it in the *Path* section.
  prefs: []
  type: TYPE_NORMAL
- en: Rectangle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The basic HTML code to create a rectangle is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s apply the following style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We will create a rectangle that starts at the coordinates (`10`,`10`), and is
    `100` pixels wide and `20` pixels high. Based on the styling, it will have a blue
    outline, a gray interior, and will appear slightly opaque. See the following output
    and example
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/chapter-2/rectangle.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d87ddf47-9e5d-46ac-b040-892f972f4772.png)'
  prefs: []
  type: TYPE_IMG
- en: There are two more attributes that are useful when creating rounded borders
  prefs: []
  type: TYPE_NORMAL
- en: '(`rx` and `ry`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: These attributes indicate that the `x` and `y` corners will have `5`-pixel curves.
  prefs: []
  type: TYPE_NORMAL
- en: Circle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A circle is positioned with the `cx` and `cy` attributes. These indicate the
    *x* and *y* coordinates of the center of the circle. The radius is determined
    by the `r` attribute. The following is an example you can experiment with (Â `http://localhost:8080/chapter-2/circle.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e95c09bf-ead3-4be7-bd3e-d45731843ac3.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now type in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This will create a circle with the familiar blue outline, a gray interior, and
    half-way opaque.
  prefs: []
  type: TYPE_NORMAL
- en: Polygon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a polygon, use the `polygon` tag. The best way to think about an
    SVG polygon is to compare it to a child''s dot-to-dot game. You can imagine a
    series of dots and a pen connecting each (*x, y*) coordinate with a straight line.
    The series of *dots* is identified in the `points` attribute. Take the following
    as an example (`http://localhost:8080/chapter-2/polygon.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/195bcc5f-d4c2-4654-94ec-e1f6a39bd853.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: First, we start at `60,5` and we move to `10,120`. Then, we proceed to `115,120`
    and, finally, return to `60,5`.
  prefs: []
  type: TYPE_NORMAL
- en: The pen returns to the starting position automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating maps with D3, the `path` SVG tag is used most often. Using the
    definition from W3C, you can think of the `path` tag as a series of commands that
    explain how to draw any shape by moving a pen on a piece of paper. The `path`
    commands start with the location to place the pen and then a series of follow-up
    commands that tell the pen how to connect additional points with lines. The `path`
    shapes can also be filled or have their outline styled.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at a very simple example to replicate the triangle we created as
    a polygon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your browser, go to `http://localhost:8080/chapter-2/path.html`, and you
    will see the following output on your screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47939436-45b1-4655-8c89-7e6bcbfb3b4f.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click anywhere in the triangle and select Inspect element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `path` command for this shape is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The attribute that contains the path-drawing commands is `d`. The commands
    adhere to the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`M`: Put the pen down to start drawing at `x = 120 y = 120`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`L`: Draw a straight line that connects (`120`,`120`) to `x = 220 y = 220`,
    then draw another straight line that connects (`220`,`220`) to `x = 420 y = 120`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Z`: Connect the last data point (`420`,`120`) to where we started (`120`,`120`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experiment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s try some experiments to reinforce what we just learned. From the Chrome
    developer tools, simply remove the `Z` at the end of the path, and hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af30d800-0ac2-4c5f-a940-f48ce2548d49.png)'
  prefs: []
  type: TYPE_IMG
- en: You should see the top line disappear. Try some other experiments with changing
    the data points in the `L` subcommand.
  prefs: []
  type: TYPE_NORMAL
- en: Paths with curves
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Paths can also have curves. The concept is still the same; you connect several
    data points with lines. The main difference is that now you apply a curve to each
    line as it connects the dots. There are three types of curve commands:'
  prefs: []
  type: TYPE_NORMAL
- en: Cubic BÃ©zier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quadratic BÃ©zier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elliptical arc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each command is explained in detail at [http://www.w3.org/TR/SVG11/paths.html](http://www.w3.org/TR/SVG11/paths.html).
    As an example, let''s apply a cubic BÃ©zier curve to the triangle. The format for
    the command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This command can be inserted into the path structure at any point:'
  prefs: []
  type: TYPE_NORMAL
- en: '`C`: Indicates that we are applying a Cubic BÃ©zier curve, just as `L` in the
    previous example indicates a straight line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x1` and `y1`: Adds a control point to influence the curve''s tangent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x2` and `y2`: Adds a second control point after applying `x1` and `y1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x` and `y`: Indicates the final resting place of the line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To apply this command to our previous triangle, we need to replace the second
    line command (`320 120`) with a cubic command (`C 200 70 480 290 320 120`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Before, the statement was as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding the cubic command, it will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce the following shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/050d0d87-b973-4525-b2e4-ec5fdd827cf9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To illustrate how the cubic BÃ©zier curve works, let''s draw circles and lines
    to show the control points in the `C` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The output should look like the one shown in the following screenshot, and can
    be experimented with at `http://localhost:8080/chapter-2/curves.html`. You can
    see the angles created by the control points (indicated by circles in the output)
    and the cubic BÃ©zier curves applied.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/31c59086-521c-469f-a270-fcd49fe4b1b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'SVG paths are the main tool leveraged when drawing geographic regions. However,
    imagine if you were to draw an entire map by hand using SVG paths; the task would
    become exhausting! For example, the command structure for the map of Europe in
    our first chapter has 3,366,121 characters in it! Even a simple state such as
    Colorado would be a lot of code if executed by hand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We will learn in later chapters how D3 will come to the rescue.
  prefs: []
  type: TYPE_NORMAL
- en: Transform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `transform` allows you to change your visualization dynamically and is
    one of the advantages of using SVG and commands to draw shapes. Transform is an
    additional attribute you can add to any of the elements we have discussed so far.
    Two important types of `transform` when dealing with our D3 maps are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Translate**: Move the element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scale**: Adjust the coordinates for all attributes in the element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will likely use this transformation in all of your cartography work and
    will see it in most D3 examples online. As a technique, it''s often used with
    a margin object to shift the entire visualization. The following syntax can be
    applied to any element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here, `x` and `y` are the coordinates to move the element by.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a translate `transform` can move our circle `50` pixels to the
    left and `50` pixels down by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d8a8747-f164-4620-b4f7-ab3255e1f7d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the translucent image represents the original image and the location
    the shape moved from. The `translate` attribute is not an absolute position. It
    adjusts the origin of the circle relatively to `cx`, `cy` and adds `50` to those
    coordinates. If you were to move the circle to the top-left of the container,
    you would translate with negative values. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Feel free to experiment with your Chrome developer tools or code editor at
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/chapter-2/translate.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: Scale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The scale transform is easy to understand but often creates undesired effects
    if you lose the focus of where the scaling originated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scale adjusts the (*x, y*) values across all attributes in the element. Using
    the earlier `circle` code, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The scale is going to double the `cx`, `cy`, radius, and `stroke-width`, producing
    the following output (`http://localhost:8080/chapter-2/scale.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e572a01-dbbf-4105-b95a-1881943e5a7c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is important to emphasize that, because we are using SVG commands to draw
    the shapes, there is no loss of quality as we scale the images, unlike raster
    images such as PNG or JPEG. The transform types can be combined to adjust for
    scale, altering the *x* and *y* position of the shape. Let''s use the `path` example
    that we used earlier in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will produce the following output (`http://localhost:8080/chapter-2/scale_translate.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e185d2e3-7bc0-424c-a11f-bf728ad6da78.png)'
  prefs: []
  type: TYPE_IMG
- en: Grouping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The group tag `<g>` is used often in SVG, especially in maps. It is used to
    group elements and then apply a set of attributes to that set. It provides the
    following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: It allows you to treat a set of shapes as a single shape for the purpose of
    scaling and translating.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It prevents code duplication by allowing you to set attributes at a higher level
    and have them inherit all the elements included.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Groups are essential for applying transformations to large sets of SVG nodes
    in a performant manner. Grouping offsets the parent group rather than modifying
    each of the attributes in every item of the group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take the set of shapes used to explain BÃ©zier curves and add all of
    them to a single group, combining everything we have learned so far, in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will produce the following image (`http://localhost:8080/chapter-2/group.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/030af2bc-e3a6-49ad-8ac2-a2c856745710.png)'
  prefs: []
  type: TYPE_IMG
- en: Without using the group element, we would have had to apply a transform, translate,
    and scale to all six shapes in the set. Grouping helps us save time and allows
    us to make quick alignment tweaks in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The text element, as its name describes, is used to display text in SVG. The
    basic HTML code to create a text node is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'It has an `x` and a `y` coordinate to tell it where to begin writing in the
    SVG coordinate system. Styling can be achieved with a CSS class in order to have
    a clear separation of concerns within our code base. For example, check out the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Text also supports rotation in order to provide flexibility when positioning
    it on the visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Some examples are located at `http://localhost:8080/chapter-2/text.html` and
    displayed as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff32ab5f-9ddc-4554-ba6f-cbec8431f8ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Keep in mind that, if you rotate the text, it will rotate relative to its origin
    (*x* and *y*). You can specify the origin of the translation via `cx` and `cy`,
    or in this case `250,150`. See the `transform` property in the code for more clarity.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has given us a wealth of information regarding SVG. We explained
    paths, lines, circles, rectangles, text, and some of their attributes. We also
    covered transformation by scaling and translating shapes. Since this chapter has
    given us a solid baseline, we can now create complicated shapes. The next chapter
    will introduce us to D3 and how it is used to manage SVG programmatically. On
    we go!
  prefs: []
  type: TYPE_NORMAL
