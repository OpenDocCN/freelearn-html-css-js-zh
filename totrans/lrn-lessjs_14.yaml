- en: Chapter 14. Extending and Contributing to Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we've covered an array of topics, from getting started
    with Less to using it in CMS systems or creating colors.
  prefs: []
  type: TYPE_NORMAL
- en: It's at this point we can say that the world is your oyster. Hopefully, this
    book has whetted your appetite sufficiently to go out and produce the next killer
    web application. However, I suspect some of you will say, "What if I want to alter
    Less itself?"
  prefs: []
  type: TYPE_NORMAL
- en: It's a valid question. After all, the ethos of many open source applications
    (of which Less is no exception) is to try to give back something to the project
    if it has been of help to you in your own. Thankfully, there are a number of ways
    in which you can contribute, from reporting issues and bugs to submitting patches
    and feature requests for future versions of Less.
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout this chapter, we''ll go on a whirlwind tour of some of the information
    you need to know, in order to be able to contribute to the project. In this chapter,
    we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Where to find Less repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to report bugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to contribute code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Want to know more? Let's get started...!
  prefs: []
  type: TYPE_NORMAL
- en: Locating the Less repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, we've spent a fair amount of time learning about Less and how it works.
    There will come a point when we might find that we have an issue with our code
    and need help.
  prefs: []
  type: TYPE_NORMAL
- en: 'With most open source applications or projects, access to the original source
    code will be available in some form; Less is no different. The source files for
    both the library and documentation are stored on GitHub in two different repositories;
    they are accessible from the top-right corner of the main Less website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Locating the Less repositories](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can either access the GitHub repositories through these links, or directly
    via a URL:'
  prefs: []
  type: TYPE_NORMAL
- en: For the main documentation repository, go to [https://github.com/less/less-docs](https://github.com/less/less-docs).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To log any issues with the Less documentation, go to [https://github.com/less/less-docs/issues](https://github.com/less/less-docs/issues);
    you can also see any existing issues listed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the main repository of interest at [https://github.com/less/less.js](https://github.com/less/less.js).
    This is the Less.js repository for the source code for Less and to which any changes
    or updates will be merged into core as part of each release.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have any issues you need to log, visit [https://github.com/less/less.js/issues](https://github.com/less/less.js/issues);
    there's a thriving community who will be able to offer advice and assistance in
    fixing the issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we''ve seen where we can go for more assistance, let''s turn the focus
    of our attention to what is arguably the most important step: logging our requests
    for help.'
  prefs: []
  type: TYPE_NORMAL
- en: Finding and reporting issues in Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've started using Less, there will no doubt be occasions where you need
    some assistance. The Less team advises the best place to log such requests for
    help is on the popular Stack Overflow site, which is [http://www.stackoverflow.com](http://www.stackoverflow.com).
    If, however, you have an issue that relates to the documentation on the site,
    then this should be logged on the Less documentation area in GitHub at [https://github.com/less/less-docs](https://github.com/less/less-docs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Any requests for assistance shouldn''t be logged in the GitHub areas for Less;
    these should be kept for the purpose of logging and fixing bugs within the code.
    The Less Core team has released a set of guidelines to help with raising issues
    to ensure they stand the best chance of successful resolution:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Search for existing issues**: The team gets a lot of duplicate issues, so
    it is worth checking first to see if anyone has already reported the same issue
    and whether a fix has been posted for it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create an isolated and reproducible test case**: This helps to ensure that
    the issue is within the Less library; have a look at [http://css-tricks.com/reduced-test-cases/](http://css-tricks.com/reduced-test-cases/)
    for some tips on how to create such a test case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test with the latest version**: It is surprising, but a lot of issues are
    resolved by updating to the latest version of Less.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Include a live example**: You can use [http://www.less2css.org](http://www.less2css.org)
    to help create and share your isolated test cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Share information**: Share as much information as possible about the nature
    of your issue. There are some useful snippets of information that will help:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mention the operating system and version
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe how you use Less
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you use it in the browser, include the browser and version and the version
    of Less.js you're using
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Include whether you are using the command line (`lessc`) or an external tool
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to include steps to reproduce the bug
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have a solution or suggestion on how to fix the bug you're reporting,
    include it, or make a pull request—don't assume the maintainers know how to fix
    it just because you do!
  prefs: []
  type: TYPE_NORMAL
- en: If, however, you find that the problem is more than just an issue with how to
    do something and that there is clearly a fault in the library itself, then you
    might find a bug report needs to be filed. Let's take a look at how to achieve
    this within GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting bugs in the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No, this isn't an excuse to go swatting every insect you find (pardon the pun),
    but an opportunity to ask for help if you come across an issue or bug that you
    find in Less.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Less team welcome any reports of bugs, which once fixed can help improve
    the code; the following guidelines are worth noting:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Use the GitHub issue search facility**: Check whether the issue has already
    been reported by others; it is not worth duplicating the effort, but you might
    like to add your voice to the existing issue log to help prioritize the issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Check whether the issue has been fixed**: Try to reproduce it using the latest
    master or development branch downloads, which are usually available in the repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Isolate the problem**: Create a reduced test case and a live example; Chris
    Coyier has a useful article at [http://css-tricks.com/reduced-test-cases/](http://css-tricks.com/reduced-test-cases/)
    on how to produce such a test case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The key to a good report is providing enough information for others to work
    on, without going overboard. It''s not easy to get the right balance. This will
    come with more experience over time. However, you can help others by providing
    key details, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: What is your environment? Is the problem limited to one browser, or does it
    surface in different browsers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the steps to reproduce the issue, and are they consistent?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What do you expect to see as the outcome?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All of these details (and more) will help people to fix any bugs you find;
    to help with presenting the right information, there is a useful format you can
    follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Short and descriptive example bug report title**'
  prefs: []
  type: TYPE_NORMAL
- en: Please provide a summary of the issue and the browser/OS environment in which
    it occurs. If suitable, include the steps required to reproduce the bug.
  prefs: []
  type: TYPE_NORMAL
- en: This is the first step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the second step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further steps and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<url>` is a link pointing to a reduced test case, showing the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Any other information you want to share that is relevant to the issue being
    reported. This might include the lines of code that you have identified as causing
    the bug and potential solutions (and your opinions on their merits).
  prefs: []
  type: TYPE_NORMAL
- en: If, however, you want to help fix some bugs, then there is a process you need
    to follow. Let's change tack and have a look at how you can help contribute to
    the library.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing to the Less source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've become more accustomed to working with Less, you might feel a desire
    to contribute something back to the project. After all, the project owners spent
    countless hours developing the library, so any help is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways you can help with contributing to the project: submitting
    feature requests and creating pull requests. Before we look at them, there is
    a small bit of work that is worth completing first, that is, install Node.js and
    Grunt.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting prepared
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you spend any time in developing code submissions for Less, then it is essential
    to install two tools; these are key to the whole development process for Less:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js**: This can be downloaded from [http://www.nodejs.org](http://www.nodejs.org)
    for your platform. At the time of writing this, the latest Version is 0.10.28.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grunt**: This is available from [http://www.gruntjs.com](http://www.gruntjs.com);
    at the time of writing this, it is at Version 0.4.5.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we need to install Grunt. In a command prompt, enter the following and
    press *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our base environment set up, let's look at each method of contributing
    in turn, beginning with feature requests.
  prefs: []
  type: TYPE_NORMAL
- en: Submitting feature requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Feature requests are always welcome. It is recommended that you take a moment
    to find out whether your idea is something that fits in with the vision of the
    project.
  prefs: []
  type: TYPE_NORMAL
- en: It's down to you to provide a sufficiently strong case for a new feature, based
    on as much detail as you can provide. Bear in mind that as projects are open source,
    you might find it preferable to simply fork the existing project before adding
    your new feature.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth checking to see whether someone hasn't already suggested it. The
    team is always receptive to new ideas, but won't add functionality unless there
    is a good reason to do so. It might be preferable to implement your new feature
    in a third-party build system such as assemble-less, rather than implementing
    it within the core library itself.
  prefs: []
  type: TYPE_NORMAL
- en: Creating pull requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you've submitted a feature request that has gained traction and is likely
    to be committed to source, the team always encourages submission of a pull request
    where possible.
  prefs: []
  type: TYPE_NORMAL
- en: The team asks that if you create a pull request, it should stay within scope
    and avoid containing unrelated commits. I always try to follow the principle of
    one change per commit, which makes it easier to remove if there is a need to do
    so at a later date. If your pull request is set to implement significant changes,
    such as porting to a new language, then it is worth asking the developers first;
    it otherwise means that you could spend a lot of time developing new functionality
    that the developers might not want to merge into the main library.
  prefs: []
  type: TYPE_NORMAL
- en: If your pull request solves an existing issue but using a different (or better)
    solution, then it should be raised as a new issue, not as a replacement for an
    existing pull request. Any pull request that is submitted should be accompanied
    with a set of tests. We will cover this in more detail later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'No matter what the reason is for developing a pull request though, you should
    follow some simple standards that have been set to ensure consistency within the
    submitted code:'
  prefs: []
  type: TYPE_NORMAL
- en: Always use spaces, never tabs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: End lines with semicolons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loosely aim towards jsHint standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any patch that is submitted will be licensed by the Less team under the Apache
    License.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To help guide you through a consistent process to submit via Git, it is worth
    taking a look at the process outlined by Nicolas Gallagher, which is available
    at [https://github.com/necolas/issue-guidelines/blob/master/CONTRIBUTING.md](https://github.com/necolas/issue-guidelines/blob/master/CONTRIBUTING.md).
  prefs: []
  type: TYPE_NORMAL
- en: Using GUIs with Git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's worth noting that using Git requires a certain level of skill. It is often
    easier using a GUI-based client, instead of working with the command line; there
    is a list of some of the popular clients available at [http://git-scm.com/downloads/guis](http://git-scm.com/downloads/guis).
    My personal favorite is GitHub for Windows, available at [http://windows.github.com](http://windows.github.com).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you''re interested in learning more about Git, then it''s worth taking a
    look at *Git: Version Control for Everyone*, *Ravishankar Somasundaram*, published
    by *Packt Publishing*, or go to the website at [http://git-scm.com/book](http://git-scm.com/book).'
  prefs: []
  type: TYPE_NORMAL
- en: Testing your submissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A key part of submitting any changes to a functionality is to ensure that your
    code has been through a linting process, to analyze it for any potential errors.
    There are a number of ways to do this, but the preferred one is to use Grunt;
    packages have been produced to help with this process.
  prefs: []
  type: TYPE_NORMAL
- en: A good example of this is the Less Lint Grunt plugin, by Jacob Gable, which
    is available at [https://github.com/jgable/grunt-lesslint](https://github.com/jgable/grunt-lesslint).
    For a more in-depth option, you can check out the article by Tom Loudon of Axisto
    Media, at [https://coderwall.com/p/g1kqzg](https://coderwall.com/p/g1kqzg), which
    details a process to add pre-Git commit linting with Grunt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your code has been linted, then it needs to be tested. To do this, we
    need to do the following (assuming you have installed Node and Grunt as detailed
    in the *Getting prepared* section earlier in this chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: Clone the Less repository. This can either be done via the command line, or
    using a GUI such as GitHub for Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a command prompt and then change the folder to the location where you've
    stored your local copy of the Less repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the command prompt, enter `npm install` to install Less' npm dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When completed, enter the following command at the prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can now visit `http://localhost:8088/tmp/browser/` to view the test runner
    pages. You should also be able to enter `lessc <name of file>.less` at the prompt;
    this will be compiled by Less and rendered on screen; this will allow you to compare
    it with your local copy of compiled CSS to see if it produces the same results.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing to the Less documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've seen how you can make a contribution to the Less library, either
    as reporting issues or bugs, or by contributing suggestions and code for new features.
    What happens if your issue lies with the documentation?
  prefs: []
  type: TYPE_NORMAL
- en: 'The Less team maintains the source documentation within GitHub; it''s here
    that you can find the source for all documentation published at [http://www.lesscss.org](http://www.lesscss.org),
    along with options to raise issues if you find any, or submit pull requests to
    help maintain the documentation. All of the documentation content can be found
    in the `./content` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Contributing to the Less documentation](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To get a feel for how Less works, it's worth taking a look at the Less schematic
    diagram, which is available at [http://www.gliffy.com/go/publish/4784259](http://www.gliffy.com/go/publish/4784259).
  prefs: []
  type: TYPE_NORMAL
- en: Installing the documentation locally
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with updating the documentation, we need to build a local copy
    on our own PC. This requires installing Assemble ([http://assemble.io/](http://assemble.io/)),
    by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the GitHub area for the Less documentation, which is at [https://github.com/less/less-docs](https://github.com/less/less-docs),
    and then click on **Download ZIP** to get the latest version of the Less documentation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder on your PC. We will assume it has been called `lessdocs` for
    the purpose of this exercise; extract the contents of the archive file into this
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bring up a command prompt, and change the current location to the `lessdocs`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the prompt, enter `npm install` to install Assemble and then wait for it
    to complete its process:![Installing the documentation locally](img/00127.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once completed, enter this command to build the documentation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When this has finished, you will be able to view the documentation offline and
    use it to submit pull requests into GitHub for consideration by the Less team.
  prefs: []
  type: TYPE_NORMAL
- en: Working to coding guidelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a copy of the documentation installed locally, we''re ready
    to start contributing! However, before we do so, there are some guidelines that
    are worth noting and it will help make the documentation consistent, readable,
    and maintainable. Let''s take a brief look at these standards in more detail,
    beginning with markdown standards:'
  prefs: []
  type: TYPE_NORMAL
- en: Use `#` for titles, not underlines. Underlines are not semantic, aren't as flexible,
    and aren't always highlighted properly in code highlighters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always add a space between `#` and the heading.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrap the inline code with a single backtick, or blocks of code with three backticks
    (code fences).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With code blocks, always use the correct language after the first code fence.
    Although GitHub does not highlight Less, our documentation is more likely to show
    up in GitHub's and Google's search results when the correct language is used.
    For example, use [PRE3]less [PRE4]` [PRE5]` for CSS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A similar set of guidelines exist for maintaining standards in Less code; they
    are reproduced in full by browsing to the `CONTRIBUTING.md` page, which is listed
    in the main index at [https://github.com/less/less-docs](https://github.com/less/less-docs);
    the main points of note relate to proper spacing, use of multiple line formatting,
    and correct use of quotes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is worth taking a look at the guidelines for reporting issues, bugs, and
    feature requests, which are based on a generic set created by Nicolas Gallagher,
    for any GitHub project; you can view the original set at [https://github.com/necolas/issue-guidelines/blob/master/CONTRIBUTING.md](https://github.com/necolas/issue-guidelines/blob/master/CONTRIBUTING.md).
  prefs: []
  type: TYPE_NORMAL
- en: If you follow these guidelines, it will help maintain a consistent, manageable
    set of documentation relating to Less.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered a lot of content throughout our journey in learning Less, finishing
    with a look at how you can give back to the project in the form of reporting issues
    and bugs, or submitting code to help fix or improve the existing functionality
    within the library.
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off this chapter with a look at how to access the two source repositories
    for Less. We also covered where you can log issues and bugs within the GitHub
    issue logs for the source code and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: We moved onto looking at the guidelines that should be followed when submitting
    feature or pull requests and took a quick look at how any code that is submitted
    should be tested against the Less tests and linted to ensure quality of code is
    maintained and any errors have been fixed.
  prefs: []
  type: TYPE_NORMAL
- en: We then examined how you can contribute to the documentation by reporting issues
    or suggestions for improvements. We covered the need to download and install a
    local copy of the documentation, before looking at the standards that need to
    be followed to ensure that the quality of document is maintained for the Less
    project.
  prefs: []
  type: TYPE_NORMAL
- en: It's at this point that we've come to the end of the book. I sincerely hope
    you've enjoyed our journey through learning how to use Less as much as I have
    and that it is of some help to you in your future projects.
  prefs: []
  type: TYPE_NORMAL
- en: Appendix A. Color Functions in Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Less library includes a number of color functions that we can use to manipulate
    colors within our site—this appendix lists the details of each function, within
    the four groups of defining color formats, channeling colors, performing color
    operations, and blending colors.
  prefs: []
  type: TYPE_NORMAL
- en: Defining color formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a list of the color functions that handle the color formats
    within Less:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function | Purpose of the function | Example value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `rgb` | Creates an opaque color object from the decimal red, green, and blue
    (RGB) values | `rgb(90, 129, 32)` |'
  prefs: []
  type: TYPE_TB
- en: '| `rgba` | Creates a transparent color object from the decimal red, green,
    blue, and alpha (RGBA) values | `rgba(90, 129, 32, 0.5)` |'
  prefs: []
  type: TYPE_TB
- en: '| `argb` | Creates a hex representation of a color in the `#AARRGGBB` format
    (not `#RRGGBBAA!`) | `argb(rgba(90, 23, 148, 0.5));` |'
  prefs: []
  type: TYPE_TB
- en: '| `hsl` | Creates an opaque color object from the hue, saturation, and lightness
    (HSL) values | `hsl(90, 100%, 50%)` |'
  prefs: []
  type: TYPE_TB
- en: '| `hsla` | Creates a transparent color object from the hue, saturation, lightness,
    and alpha (HSLA) values | `hsl(90, 100%, 50%, 0.5)` |'
  prefs: []
  type: TYPE_TB
- en: '| `hsv` | Creates an opaque color object from the hue, saturation, and value
    (HSV) values | `hsv(90, 100%, 50%)` |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, read the documentation on the main Less site at [http://lesscss.org/functions/#color-definition](http://lesscss.org/functions/#color-definition).
    I've also created a CodePen that shows these effects in action—this is available
    at [http://codepen.io/alibby251/pen/horqx](http://codepen.io/alibby251/pen/horqx).
  prefs: []
  type: TYPE_NORMAL
- en: Channeling colors using Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a list of the functions that allow us to channel colors when
    using Less:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function | Purpose of the function | Example value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `hue` | Extracts the hue channel of a color object in the HSL color space
    | `hue(hsl(90, 100%, 50%))` |'
  prefs: []
  type: TYPE_TB
- en: '| `saturation` | Extracts the saturation channel of a color object in the HSL
    color space | `saturation(hsl(90, 100%, 50%))` |'
  prefs: []
  type: TYPE_TB
- en: '| `lightness` | Extracts the lightness channel of a color object in the HSL
    color space | `lightness(hsl(90, 100%, 50%))` |'
  prefs: []
  type: TYPE_TB
- en: '| `hsvhue` | Extracts the hue channel of a color object in the HSV color space
    | `hsvhue(hsv(90, 100%, 50%))` |'
  prefs: []
  type: TYPE_TB
- en: '| `hsvsaturation` | Extracts the saturation channel of a color object in the
    HSV color space | `hsvsaturation(hsv(90, 100%, 50%))` |'
  prefs: []
  type: TYPE_TB
- en: '| `hsvvalue` | Extracts the value channel of a color object in the HSV color
    space | `hsvvalue(hsv(90, 100%, 50%))` |'
  prefs: []
  type: TYPE_TB
- en: '| `red` | Extracts the red channel of a color object | `red(rgb(10, 20, 30))`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `green` | Extracts the green channel of a color object | `green(rgb(10, 20,
    30))` |'
  prefs: []
  type: TYPE_TB
- en: '| `blue` | Extracts the blue channel of a color object | `blue(rgb(10, 20,
    30))` |'
  prefs: []
  type: TYPE_TB
- en: '| `alpha` | Extracts the alpha channel of a color object | `alpha(rgba(10,
    20, 30, 0.5))` |'
  prefs: []
  type: TYPE_TB
- en: '| `luma` | Calculates the luma (perceptual brightness) of a color object |
    `luma(rgb(100, 200, 30))` |'
  prefs: []
  type: TYPE_TB
- en: '| `luminance` | Calculates the value of the luma without gamma correction |
    `luminance(rgb(100, 200, 30))` |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, read the documentation on the main Less site at [http://lesscss.org/functions/#color-channel](http://lesscss.org/functions/#color-channel).
  prefs: []
  type: TYPE_NORMAL
- en: Operating on colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a list of the operation functions that can be applied to the
    Less code:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function | Purpose of the function | Example value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `saturate` | Increases the saturation of a color in the HSL color space by
    an absolute amount. | `saturate(hsl(0, 59.4%, 40.6%), 20%);` |'
  prefs: []
  type: TYPE_TB
- en: '| `desaturate` | Decreases the saturation of a color in the HSL color space
    by an absolute amount. | `desaturate(hsl(0, 59.4%, 40.6%), 20%);` |'
  prefs: []
  type: TYPE_TB
- en: '| `lighten` | Increases the lightness of a color in the HSL color space by
    an absolute amount. | `lighten(hsl(0, 59.4%, 40.6%), 20%);` |'
  prefs: []
  type: TYPE_TB
- en: '| `darken` | Decreases the lightness of a color in the HSL color space by an
    absolute amount. | `darken(hsl(0, 59.4%, 40.6%), 20%);` |'
  prefs: []
  type: TYPE_TB
- en: '| `fadein` | Decreases the transparency (or increases the opacity) of a color,
    making it more opaque. | `fadein(hsl(0, 59.4%, 40.6%), 20%);` |'
  prefs: []
  type: TYPE_TB
- en: '| `fadeout` | Increases the transparency (or decreases the opacity) of a color,
    making it less opaque. | `fadeout(hsl(0, 59.4%, 40.6%), 20%);` |'
  prefs: []
  type: TYPE_TB
- en: '| `fade` | Sets the absolute transparency of a color. It can be applied to
    colors irrespective of whether they already have an opacity value or not. | `fade(hsl(0,
    59.4%, 40.6%), 20%);` |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, read the documentation on the main Less site at [http://lesscss.org/functions/#color-operations](http://lesscss.org/functions/#color-operations).
    I've also created a CodePen that shows these effects in action—this is available
    at [http://codepen.io/alibby251/pen/KGltj](http://codepen.io/alibby251/pen/KGltj).
  prefs: []
  type: TYPE_NORMAL
- en: Color blending
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our final group of functions handle the blending of colors within Less:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function | Purpose of the function | Example value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `multiply` | Multiplies two colors. | `multiply(#9ec1ef, #091d37);` |'
  prefs: []
  type: TYPE_TB
- en: '| `screen` | Does the opposite of `multiply`. The result is a brighter color.
    | `screen (#9ec1ef, #091d37);` |'
  prefs: []
  type: TYPE_TB
- en: '| `overlay` | Combines the effects of both `multiply` and `screen`. Conditionally
    makes light channels lighter and dark channels darker. | `overlay (#9ec1ef, #091d37);`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `softlight` | Similar to `overlay` but avoids pure black resulting in pure
    black, and pure white resulting in pure white. | `softlight (#9ec1ef, #091d37);`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `hardlight` | The same as `overlay` but with the color roles reversed. |
    `hardlight (#9ec1ef, #091d37);` |'
  prefs: []
  type: TYPE_TB
- en: '| `difference` | Subtracts the second color from the first color on a channel-by-channel
    basis. | `difference (#9ec1ef, #091d37);` |'
  prefs: []
  type: TYPE_TB
- en: '| `exclusion` | A similar effect to `difference` but with lower contrast. |
    `exclusion (#9ec1ef, #091d37);` |'
  prefs: []
  type: TYPE_TB
- en: '| `average` | Computes the average of two colors on a per-channel (RGB) basis.
    | `average (#9ec1ef, #091d37);` |'
  prefs: []
  type: TYPE_TB
- en: '| `negation` | Does the opposite of `difference`. | `negation (#9ec1ef, #091d37);`
    |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, read the documentation on the main Less site at [http://lesscss.org/functions/#color-blending](http://lesscss.org/functions/#color-blending).
    I've also created a CodePen that shows these effects in action—this is available
    at [http://codepen.io/alibby251/pen/IKqEk](http://codepen.io/alibby251/pen/IKqEk).
  prefs: []
  type: TYPE_NORMAL
