["```js\n1\\.  var age = 26;\n2\\.  age = \"twenty-six\";\n3\\.  age = false;\n```", "```js\n// Let's create the person object\nfunction Person(first, last, age) {\n    this.firstName = first;\n    this.lastName = last;\n    this.age = age;\n}\nvar diego = new Person(\"Diego\", \"Arguelles\", 27);\n\n//JSON representation of the same object\n{\n    firstName: \"Diego\",\n    lastName: \"Arguelles\",\n    age: 27\n}\n```", "```js\nfunction sum(numberA, numberB){\n    return numberA + numberB\n}\nsum(4,5) //9\nsum(5,2) //7\nsum(sum(5,1),9) //15\n\n```", "```js\nfunction Person(first, last, age) {\n    this.firstName = first;\n    this.lastName = last;\n    this.age = age;\n}\n\nvar diego = new Person('Diego', 'Arguelles', 26)\ndiego.nationality = 'Peruvian'\nconsole.log(diego) \n// Person {firstName: \"Diego\", lastName: \"Arguelles\", age: 26, nationality: \"Peruvian\"}\n\nPerson.prototype.career = 'Engineering'\nconsole.log(diego.career) // Engineering\n```", "```js\ndocument.querySelector('body').onclick = function() {\n    alert('You clicked the page body!!!');\n}\n```", "```js\nfunction Person(name, age) {\n    this.name = name;\n    this.age   = age;\n}\nPerson.prototype.sayHi = function() {\n    return 'Hi, my name is ' + this.name + ' and i have ' + this.age + ' years old';\n}\n\nvar Erikson = new Person('Erikson', 26);\nErikson.sayHi(); // 'Hi, my name is Erikson and i have 26 years old'\n\n```", "```js\nfunction Person(name, age) {\n    this.name = name;\n    this.age   = age;\n\n    this.sayHi = function () {\n        return 'Hi, my name is ' + this.name + ' and i have ' + this.age + ' years old';\n    }\n}\n```", "```js\nclass Person {\n\n    // Contructor define properties for our object representartion\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n    // Class method\n    sayHi() {\n        return 'Hi, my name is ' + this.name + ' and i have ' + this.age + ' years old';\n    }\n}\nvar Erikson = new Person('Erikson', 26);\nErikson.sayHi() // Hi , my name is Erikson and I have 26 years old\n```", "```js\nclass Developer extends Person {\n\n    constructor(name, age, role){\n        super(name, age)\n        this.role = role;\n    }\n    sayHi(){\n        return super.sayHi() + ' and i am a ' + this.role\n    }\n}\nvar Erikson = new Person('Erikson', 26, 'Javascript developer');\nErikson.sayHi() // 'Hi, my name is Erikson and i have 26 years old and i am a Javascript developer'\n```", "```js\nclass Person {\n\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n    get checkName() {\n        return this.name;\n    }\n    set giveName(newName) {\n        this.name = newName;\n    }\n}\nvar Erikson = new Person('Erikson', 26);\nErikson.checkName() // returns Erikson\nErikson.giveName('Hazis')\nErikson.checkName() // returns Hazis\n```", "```js\nErikson.name = 'Diego'\nErikson.name // Returns Diego\n```", "```js\nclass Example {\n    static returnMessage(){\n        return 'From static method'\n    }\n}\nlet staticMessage = Example.returnMessage() // From static method\n```", "```js\nvar PI = 3.1416\n```", "```js\nvar data = ['Ronaldo', 'Messi', 'Maradona'];\ndata.forEach(function (elem) {\n    console.log(elem)\n});\n```", "```js\nvar data = ['Ronaldo', 'Messi', 'Maradona'];\ndata.forEach(elem => {\n    console.log(elem);\n});\n```", "```js\n// We could transform this\nlet sum = function(num) {\n    return num + num;\n};\n// Into just this\nlet sum = (num) => num + num;\n```", "```js\nlet string1 = \"JavaScript\";\nlet string2 = \"awesome\";\nlet string3 = string1 + \" \" + string2\n```", "```js\nlet string1 = \"JavaScript\";\nlet string2 = \"awesome\";\nlet string3 = `${string1} ${string2}`\n```", "```js\nvar [a, b] = [\"hello\", \"world\"];\nconsole.log(a); // \"hello\"\nconsole.log(b); // \"world\"\n\nvar obj = { name: \"Diego\", lastName: \"Arguelles\" };\nvar { name, lastName } = obj;\nconsole.log(name); // \"Diego\"\n\nvar foo = function() {\n    return [\"175\", \"75\"];\n};\nvar [height, weight] = foo();\nconsole.log(height); //175\nconsole.log(weight); //75\n```", "```js\n$ node â€“v\n```", "```js\n$ npm install npm@latest -g\n```", "```js\n$ npm install <package-name>\n```", "```js\n$ ls node_modules\n```", "```js\nnpm install <package-name>@<version>\n```", "```js\n$ npm init\n```", "```js\n$ npm init --yes\n```", "```js\n{\n  \"name\": \"my_package\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/package_owner/my_package.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/package_owner/my_package/issues\"\n  },\n  \"homepage\": \"https://github.com/package_owner/my_package\"\n}\n```", "```js\n$ npm install <package_name> --save\n```", "```js\n@Injectable()\nclass Ticket { /* */ }\n\n@Component({\n  selector: 'ticket',\n  providers: [Ticket],\n  template: `...`\n}) //Configuration code mixed with business class\nexport class Sale {\n    constructor(private ticket: Ticket) {}\n\n    public activate() {\n        // do something...\n        this.ticket.toast(\"Sale processed!\");\n    }\n}\n```", "```js\n/* product-list.component.ts */\n@Component({\n    selector: 'product-list',\n    template: `<div><product-detail *ngFor=\"let thing of things\" [product]=\"product\" /></div>`\n})\nexport class ProductList {\n    public products: Product[];\n}\n```", "```js\nimport {ProductDetail} from \"./ProductDetail\";\n\ninterface Props {\n    products: Product[];\n}\nexport class ProductList extends React.Component<Props, undefined> {\n    render() {\n        return <div>\n            {this.props.products.map(th => <ProductDetail key={th.id} product={th} />)}\n        </div>\n    }\n}\n```", "```js\nclass Ticket { /* class code, properties, methods... */ }\n\n@inject\nexport class Sale {\n    constructor( ticket ) {}\n\n    public activate() {\n        // do something...\n        this.ticket.toast(\"Sale processed!\");\n    }\n}\n```", "```js\n<!-- product-list.html -->\n<template>\n    <require from=\"product-detail\"/>\n    <div>\n        <product-detail repeat.for=\"product of products\" product.bind=\"product\"/>\n    </div>\n</template>\n/* producty-list.js */\nexport class ProductList {\n    public products[];\n}\n```", "```js\nnpm install -g aurelia-cli\n```", "```js\nau help\n```", "```js\nau new my-app\n```", "```js\ncd my-app\nau run --watch --env prod\n```", "```js\nexport class App {\n  constructor() {\n    this.message = 'Hola Mundo!';\n  }\n}\n```", "```js\nau test --watch --env stage\n```", "```js\nau build --env prod\n```", "```js\nnpm install -g http-server\n```", "```js\ncd dist\nhttp-server \n```", "```js\nau generate element my-reusable-element\n```", "```js\nau new worldcup-app\n```", "```js\nProject Configuration\n    Name: worldcup-app\n    Platform: Web\n    Bundler: Aurelia-CLI\n    Loader: RequireJS\n    Transpiler: Babel\n    Markup Processor: None\n    CSS Processor: Sass\n    Unit Test Runner: Karma\n    Editor: WebStorm\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Aurelia</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n\n  <body aurelia-app=\"main\">\n    <script src=\"img/vendor-bundle.js\" data-main=\"aurelia-bootstrapper\"></script>\n  </body>\n</html>\n```", "```js\nimport environment from './environment';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n```", "```js\n aurelia.start().then(() => aurelia.setRoot('my-component', document.getElementById('my-div')));\n```", "```js\nexport class App {\n  constructor() {\n    this.message = 'Hello World!';\n  }\n}\n```", "```js\nexport class App {\n  message = 'Hello World!';\n}\n```", "```js\n<template>\n  <h1>${message}</h1>\n</template>\n```", "```js\nexport class App {\n\n  constructor() {\n    this.message = 'Hello World!';\n  }\n\n  changeMessage() {\n this.message = 'World-Cup App';\n }\n\n}\n```", "```js\n<template>\n  <h1>${message}</h1>\n  <button click.trigger=\"changeMessage()\">Change</button>\n</template>\n```"]