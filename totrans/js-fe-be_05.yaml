- en: '*Chapter 3*: Getting Started with Vue.js'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The JavaScript world is constantly changing. In recent years, a new concept
    has emerged: that of developing applications by creating components.'
  prefs: []
  type: TYPE_NORMAL
- en: New JavaScript libraries for developing component-based apps have emerged, the
    main ones being Angular, React, Svelte, and **Vue.js**. Among all these libraries,
    which are quite similar to each other, we have chosen to present Vue.js to you
    because it is widely used and quite simple to implement. The other libraries mentioned
    operate according to the same principles.
  prefs: []
  type: TYPE_NORMAL
- en: Why Use Vue.js?
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage of Vue.js is the possibility of developing an application
    using components. We cut the web application into a set of components (actually
    JavaScript files) and then assemble them to form the final application. Vue.js
    can test each component independently of the others and can also reuse them in
    other applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will study how to build our first application with Vue.js,
    by creating and using our first component.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Vue.js in an HTML page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first Vue.js application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using reactivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding methods in components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using attributes in components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the code files for this chapter on GitHub at: [https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%203.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%203.zip).'
  prefs: []
  type: TYPE_NORMAL
- en: Using Vue.js in an HTML page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use Vue.js in an HTML page, simply insert the library file into it using
    the `<script>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check that Vue.js is correctly integrated into the page, let’s display the
    version number of the library in the `Vue.version` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying Vue.js version number (index.html file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If Vue.js is accessible in the page, the `Vue` object provides access to the
    version number in its `version` property as we can see in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Displaying the Vue.js version number'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.1_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – Displaying the Vue.js version number
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have integrated Vue.js into our HTML page, let’s go about creating
    our first application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first Vue.js application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once Vue.js has been inserted into the HTML page, you must define the HTML elements
    of the page in which Vue.js will be used.
  prefs: []
  type: TYPE_NORMAL
- en: In general, you want to use Vue.js on the whole HTML page, but it is possible
    to use it only on certain elements of the page as well. This would allow us, for
    example, to manage an HTML page with jQuery, except for a particular `<div>` element,
    which would be managed with Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate this, let us create an HTML page with two `<div>` elements, only
    the first of which will be managed by Vue.js:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an HTML page partially managed by Vue.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have used the `Vue.createApp(options)` method defined
    on the `Vue` object. The `options` object is used to set options for creating
    the Vue.js application. One of the options of `Vue.createApp(options)` is the
    `template` option, which allows us to define the view (that is to say the HTML
    display) that will be displayed on the page, thanks to the call of the `app.mount(element)`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: The `app` object is the one obtained as a result of the `Vue.createApp()` method
    call.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `element` parameter represents the HTML element on which Vue.js will act.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s run the previous program; we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – First Vue.js app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.2_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – First Vue.js app
  prefs: []
  type: TYPE_NORMAL
- en: On the preceding screen, we can see the result of using Vue.js on the page.
    The content of the first `<div>` is replaced by the template written in the `options`
    parameter of the `Vue.createApp(options)` method. The second `<div>` is not transformed.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, to manage an entire HTML page with Vue.js, just indicate in the `<body>`
    part of the page a single `<div>` element, which will be the one on which Vue.js
    will be activated.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s see how to use an important concept of Vue.js, which is the correspondence
    between the variables defined in the program and their display on the HTML page.
    This concept is called reactivity.
  prefs: []
  type: TYPE_NORMAL
- en: Using reactivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the objectives of Vue.js is to separate the management of the display
    (the **view**) and that of the data (the **model**). This is the concept that
    is frequently found in what is called the **Model View Controller** (**MVC**)
    model.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate, suppose we want to display a counter that increments from 0\.
    A good separation of view and model would be for the view to constantly display
    the value of the counter, even if that value is changed elsewhere. This concept
    makes it possible not to link the display with the management of the data displayed.
    For this, we use the reactivity offered by Vue.js, by creating so-called **reactive
    variables**.
  prefs: []
  type: TYPE_NORMAL
- en: Reactive Variables
  prefs: []
  type: TYPE_NORMAL
- en: A variable will be said to be reactive if its modification in memory causes
    it to be modified automatically wherever the variable is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Reactive variables are defined in the `options` object of the `Vue.createApp(options)`
    method. For this, we add in the `options` object, and the definition of the `data()`
    method, which will have to return an object containing the so-called reactive
    variables of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use a reactive variable named `count` in our Vue.js application:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining a count reactive variable
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the `count` reactive variable is defined in the `data()`
    method, which returns the `{ count : 0 }` object containing the program’s reactive
    variable. Other variables can be defined afterward.'
  prefs: []
  type: TYPE_NORMAL
- en: This reactive variable can then be used in the template by means of the notation
    with `{{ and }}`. This notation is used to indicate a JavaScript expression, such
    as the value of a variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The definition of a so-called reactive variable makes it possible to link the
    display to the value of the variable. As soon as the variable is modified, the
    display is also modified. We can see the counter value in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Displaying a reactive variable'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.3_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – Displaying a reactive variable
  prefs: []
  type: TYPE_NORMAL
- en: 'The counter remains positioned at its initial value: `count` variable is modified.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, let’s increment the value of the variable every second as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: Incrementing count variable every second
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Using JavaScript’s `setInterval()` function, we increment the value of the `count`
    variable every second. Vue.js provides access to the `count` variable using `vm.count`,
    where `vm` is the object returned by the `app.mount()` method. Reactive variables
    become properties of this `vm` object. In the preceding code, we can see the separation
    of view and data processing, as advocated by the MVC pattern. The incrementation
    of the variable is done outside the view, which would not have been possible with
    a library such as jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: We can see the incrementation and the automatic update of the display, thanks
    to the reactivity offered by Vue.js, as evident in the following figure
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Incrementing a reactive variable'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.4_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – Incrementing a reactive variable
  prefs: []
  type: TYPE_NORMAL
- en: The previous program is very simple, but in reality, applications are of course
    more complex. As such, it is necessary to break down an application into small
    pieces, which will then be assembled. Now let’s learn how to write one of the
    small pieces of an application, called a component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s see how to use Vue.js to create our own components.
  prefs: []
  type: TYPE_NORMAL
- en: A Vue.js component will be similar to a new HTML element. It will be used in
    the form of HTML tags to which new attributes can be associated if necessary.
    To use the component, all you have to do is use the corresponding tag.
  prefs: []
  type: TYPE_NORMAL
- en: The components are therefore a means of enriching the HTML code by creating
    our own tags.
  prefs: []
  type: TYPE_NORMAL
- en: How to Discover the Components to Use to Build Our Application
  prefs: []
  type: TYPE_NORMAL
- en: All you have to do is visually cut the HTML page you want to display into the
    simplest possible elements (which will be the basic components of your application),
    then group several elements together to form a component that will group them,
    and so on until you have the main component, which will be your complete application.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if a list of elements is displayed on the HTML page, each element’s
    line of the list corresponds to a basic component, while the global list that
    groups these different components will be associated with another component. The
    set of all components of the HTML page corresponds to the main component, often
    named `<App>` or `<GlobalApp>`. Let’s see how to create and use the `<counter>`
    component corresponding to the previous counter by first learning how to insert
    the component.
  prefs: []
  type: TYPE_NORMAL
- en: You can create the component directly into the HTML page or include it from
    an external file. Let’s look at these two ways to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting a component in the application file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A component can simply be embedded in the main application Vue.js file. Just
    use the `app.component(name, options)` method to create it as follows. The variable
    `app` corresponds to the object returned by `Vue.createApp()`:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the <counter> component directly in the application
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the variable `app` corresponds to the object returned
    by `Vue.createApp()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `app.component(name, options)` method works on the same principle as `Vue.createApp(options)`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `name` parameter corresponds to the name of the component, which will then
    be used as tags in HTML templates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `options` parameter is similar in both cases. There is the `template` section,
    `data`, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `<counter>` component can then be used in other templates, including the
    one defined for the application. When you run the preceding code, you will see
    the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – The <counter> component'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.5_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 – The <counter> component
  prefs: []
  type: TYPE_NORMAL
- en: As we can see in the preceding figure, for the moment, the counter remains at
    `0`. To increment the reactive variable `count` in the component, it is necessary
    to be able to write the instruction of incrementation once the component is created.
    For this, Vue.js provides internal methods allowing access to the life cycle of
    each component created.
  prefs: []
  type: TYPE_NORMAL
- en: One of the methods of a component’s life cycle is the `created()` method. It
    is called when the component is created. You can use this method to write the
    increment of the variable `count` every second, using the `setInterval()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use the component’s `created()` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the component’s created() method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have used the notation `()=>` instead of `function()`.
    This notation (called a lambda function) was introduced in the latest versions
    of JavaScript in order to allow the value of `this` to be kept inside callback
    functions, which is necessary here. If you replace the lambda function `()=>`
    with the `function()` keyword, the program won’t work, as the `this` value won’t
    be the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'On running the preceding code, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Incrementing the counter in the component'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.6_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.6 – Incrementing the counter in the component
  prefs: []
  type: TYPE_NORMAL
- en: Inserting a component from an external file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rather than defining the component directly in the HTML page, it is preferable
    to define it in an external file. The component can be used in the HTML page thanks
    to the inclusion of the external file in the HTML page. For this, we use the concept
    of modules provided by JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: The Advantage of Components Defined in an External File
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of defining the component in an external file is to be able to
    include this file in several different HTML pages, and therefore to use the component
    in several different applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<counter>` component is defined in an external `counter.js` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: <counter> component definition (counter.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: The `<counter>` component is defined as an object, having `template`, `data`,
    and `created` properties. Its definition is similar to the one shown previously
    in the `app.component()` method.
  prefs: []
  type: TYPE_NORMAL
- en: The `export default Counter` instruction makes the component accessible in the
    other files where this module is imported.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<counter>` component can now be integrated into the main file of our application.
    We use the JavaScript `import` statement for this. The code will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing the component into the program (index.html file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, to import the `counter.js` file and use the corresponding
    component, the following takes place:'
  prefs: []
  type: TYPE_NORMAL
- en: The `type="module"` attribute is indicated in the `<script>` tag. This allows
    the use of the `import` statement in the JavaScript statements of the `<script>`
    tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use the `import` statement to import the corresponding module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We declare the imported components in the new `components` section. Components
    are declared as an object. The names of the properties in this object correspond
    to the name used by the component in the templates (`<counter>` or `<Counter>`),
    while the values correspond to the name of the imported component (`Counter`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using HTTP Instead of the FILE Protocol
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'However, as we use the import of JavaScript modules, it is necessary to run
    our application on an HTTP server, and no longer with a simple drag and drop as
    before. Hence the use of the URL that begins with `http://localhost`. If you need
    to know how to install an HTTP server, you can, for example, use the documentation
    here: [https://developer.mozilla.org/en-US/docs/Learn/Common_questions/set_up_a_local_testing_server](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/set_up_a_local_testing_server).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the following figure, we can see that creating a component directly in the
    HTML page or in an external file produces the same result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Execution of the HTML file on an HTTP server (here, localhost)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.7_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.7 – Execution of the HTML file on an HTTP server (here, localhost)
  prefs: []
  type: TYPE_NORMAL
- en: The current component only has a simple reactive variable. It is possible, in
    a component, to add methods to it that will be used in the component. Now let’s
    take a look at how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding methods in components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how to create reactive variables in a component, using the `data`
    section of the component. It is also possible to create methods in a component
    that can be used in the component template.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to add methods to a component:'
  prefs: []
  type: TYPE_NORMAL
- en: The first is to define the method in the `methods` section of the component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second is to create a so-called computed property that will be defined in
    the `computed` section of the component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at these two ways to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Defining methods in the methods section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For each incrementation of the counter, it should be necessary to display the
    time at which it occurs. A `time()` function would be very useful in the component,
    allowing us to display the time in the form HH:MM:SS. This `time()` function will
    be defined in the `methods` section of the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<counter>` component is modified to integrate the display of the time
    at the beginning of the line. We can achieve all this using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: <counter> component displaying time (counter.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the `time()` method is defined in the `methods` section
    and is then directly used in the component template within the double braces `{{
    and }}`.
  prefs: []
  type: TYPE_NORMAL
- en: A method defined in the `methods` section can use the other methods of this
    section or the reactive variables of the `data` section by prefixing them with
    the `this` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is displayed in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Time display in the component'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.8_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.8 – Time display in the component
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js allows you to define, in the form of methods, new variables that will
    be reactive. They are called computed properties. Let’s see how to create and
    use them.
  prefs: []
  type: TYPE_NORMAL
- en: Defining computed properties in the computed section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A computed property is similar to a reactive variable. It is the result of the
    calculation performed on one or more reactive variables, and it will also be reactive.
    Any modification to one of the reactive variables associated with this computed
    property will cause it to be modified immediately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a `countX2` property that calculates double the `count` variable
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining a computed property countX2 in the component (counter.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Using a computed property'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.9_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.9 – Using a computed property
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding figure, we can see the modification of the `count` variable.
    Every second leads to the automatic modification of the `countX2` variable thanks
    to its definition in the `computed` section.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how to define methods and reactive variables in a component. Now
    let’s see how to pass parameters to a component, using the component’s attributes
    for this.
  prefs: []
  type: TYPE_NORMAL
- en: Using attributes in components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Attributes in a component allow it to pass parameters for its use. For example,
    we could use in the `<counter>` component a `start` attribute indicating at what
    value we start counting. If this attribute is not indicated, it is considered
    to be 0 (that is, counting starts at 0 as in the preceding code example).
  prefs: []
  type: TYPE_NORMAL
- en: 'For a component to be able to employ attributes during its use, it suffices
    to indicate the name of the attributes in the `props` section of the component.
    The component can access the attribute value using the `this` keyword (for example,
    `this.start` to access the `start` attribute in the component). We can see this
    in action in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the start attribute in the component (index.html file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following code, the attribute is passed when using the component, as
    is traditionally done in HTML. The value of the attribute here will be a character
    string `"10"` and not the value `10`:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the start attribute in the <counter> component (counter.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, notice the use of the `parseInt()` function (defined
    as standard in JavaScript) to retrieve the value of `this.start` in integer form.
    Indeed, the attributes are transmitted in the form of character strings, hence
    the need to transform `this.start` into an integer value.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to avoid transforming the attribute value into an integer value.
    All you have to do is indicate when using the attribute that you want to keep
    the JavaScript value and not the character string. We prefix the name of the attribute
    with the character `:`, for example, `:start='10'`. In this case, the value `10`
    will be transmitted and not the string `"10"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This makes it possible to be able to transmit in the attributes any types of
    values: numeric values, character strings, arrays, or objects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following figure we can see the counter has started from the value indicated
    in the `start` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Using the start attribute in the component'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.10_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.10 – Using the start attribute in the component
  prefs: []
  type: TYPE_NORMAL
- en: We have therefore seen how to create new attributes in a component. Vue.js has
    specific attributes as standard, which can be used in all components. These specific
    attributes, created by Vue.js, are called directives. We will study them now.
  prefs: []
  type: TYPE_NORMAL
- en: Using directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue.js improves the writing of HTML code by offering to write its own components,
    as we have seen in the preceding section. The framework also makes it easier to
    write basic HTML code by adding new attributes to the HTML elements or to the
    components created. These new attributes are called directives.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Directives are used exclusively in HTML elements or created components, that
    is, in the `template` section of components.
  prefs: []
  type: TYPE_NORMAL
- en: Their name begins with `v-`, so as not to be confused with other existing HTML
    attributes. The main directives are `v-if`, `v-else`, `v-show`, `v-for`, and `v-model`.
    They will be explained now.
  prefs: []
  type: TYPE_NORMAL
- en: The v-if and v-else directives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `v-if` directive is used to specify a condition. If true, the HTML element
    (or component) will be inserted into the HTML page. Otherwise, it will not be
    present.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use the `v-if` directive to indicate that we want to display the value
    of the counter only for values less than or equal to 20\. As soon as the value
    20 is exceeded, the counter is no longer displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following snippet, we have only indicated the code of the `template`
    section of the component, knowing that the rest is not modified:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the v-if directive
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: Using backticks `'` and `'` to define the template avoids having to manage the
    concatenation of character strings on several lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<span>` element on which the `v-if` directive is applied will be included
    in the HTML page only if the following condition is true: if `count<=20`. Beyond
    20, only the time will be displayed without the counter value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As long as the counter is less than or equal to 20, it is displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Display of the counter whose value is less than 20'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.11_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.11 – Display of the counter whose value is less than 20
  prefs: []
  type: TYPE_NORMAL
- en: 'When the counter exceeds the value 20, it is no longer displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Display as soon as the counter exceeds the value 20'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.12_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.12 – Display as soon as the counter exceeds the value 20
  prefs: []
  type: TYPE_NORMAL
- en: The `v-else` directive is used to indicate an alternative when the condition
    expressed in `v-if` is `false`. The element on which the `v-else` directive is
    used will be inserted into the HTML page if the condition expressed in `v-if`
    is `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use the `v-else` directive to display another message when the counter
    exceeds the value 20:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the v-else directive
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: 'When the counter exceeds the value 20, we now get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – Counter having exceeded the value 20'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.13_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.13 – Counter having exceeded the value 20
  prefs: []
  type: TYPE_NORMAL
- en: The v-show directive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `v-show` directive is similar to the `v-if` directive. A condition is given
    next. If the condition is `true`, the element that uses the directive is displayed;
    otherwise, it is not.
  prefs: []
  type: TYPE_NORMAL
- en: The difference from the `v-if` directive is that the element, if not displayed,
    is only hidden, but it is still inserted into the page. Whereas with the `v-if`
    directive, the element is not inserted (if the condition is `false`).
  prefs: []
  type: TYPE_NORMAL
- en: The v-for directive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `v-for` directive allows you to loop over a set of elements or over the
    properties of an object. For each iteration of the loop, it inserts the HTML element
    on which the directive is positioned.
  prefs: []
  type: TYPE_NORMAL
- en: Let us assume the `<counter>` component is a set of counters associated with
    the variable `counts`, which is a JavaScript array. Each counter is, in our example,
    a character string (for example, `"Counter 1"`), and we want to display the whole
    in the form of a list (see the following code snippets).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the two possible forms of the `v-for` directive.
  prefs: []
  type: TYPE_NORMAL
- en: Using the directive v-for=”count in counts”
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s use the first form of the `v-for` directive. It allows access to each
    element of the array indicated in the directive (in our example, the JavaScript
    `counts` array):'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying counters as a list (counter.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have positioned the `v-for` directive on the element
    that we want to repeat (in this case, the `<li>` element). The value associated
    with the `v-for` directive is a character string of the form `"count in counts"`,
    knowing that `counts` is the variable on which we are iterating. The `count` variable
    thus corresponds to each of the elements of the `counts` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Using the v-for directive'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.14_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.14 – Using the v-for directive
  prefs: []
  type: TYPE_NORMAL
- en: Using the directive v-for=”(count, index) in counts”
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A second form of the `v-for` directive gives access to each element of the
    array as before, but also to its index (starting from 0):'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying counters and their index (counter.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the preceding code, the following is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Using index in the v-for directive'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.15_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.15 – Using index in the v-for directive
  prefs: []
  type: TYPE_NORMAL
- en: Using the key attribute with the v-for directive
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `v-for` directive can also be used to display large lists, for which reactivity
    must be maintained. That is, changing the reactive variable specified in the `v-for`
    directive should update the corresponding displayed list.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform the update as quickly as possible, Vue.js uses a special attribute
    (to be used only for this specific case) named `key`. This attribute can be positioned
    after the `v-for` directive. Its value must be unique for each item in the list.
    For example, the value of the index being unique for each list element can be
    used as a value in the `key` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the key attribute with the v-for directive
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the value of the attribute is a JavaScript expression
    (the variable `index`). We use `:key` and not just `key`; otherwise, the attribute
    would constantly have the string `"index"` as its value (instead of the value
    of the variable `index`).
  prefs: []
  type: TYPE_NORMAL
- en: Of course, adding the `key` attribute does not produce any display changes,
    but the performance will be visible on subsequent changes to the displayed list
    (it helps Vue.js to keep track of the element and prevent unnecessary re-rendering).
  prefs: []
  type: TYPE_NORMAL
- en: The v-model directive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `v-model` directive is used to manage form elements during an interaction
    (input in a field, a click on a checkbox or radio button, the choice of an element
    in a list).
  prefs: []
  type: TYPE_NORMAL
- en: The `v-model` directive is used to immediately retrieve the result of input
    or selection in a reactive variable without having to perform any particular processing.
    It’s the `v-model` directive that performs this update (of the reactive variable)
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `v-model` directive in the form `v-model="varname"`, where `varname`
    is the name of a reactive variable that will be updated on input or selection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use the `v-model` directive in a form input field. To clearly see what
    happens with or without its use, we display two input fields: one managed without
    `v-model`, the other with:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the v-model directive in an input field (counter.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some notes on the preceding program:'
  prefs: []
  type: TYPE_NORMAL
- en: The first `<input>` field does not use `v-model`, but only uses the `value`
    attribute, which will be updated based on the `count` variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second `<input>` field uses the `v-model` directive associated with the
    same `count` variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value of the `count` variable is displayed after the two input fields.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When the program is launched, the value of the reactive variable `count` is
    transferred to the `value` attribute of the first input field, as well as to the
    second. This produces the initialization of the contents of the two input fields
    as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – Display when starting the program'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.16_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.16 – Display when starting the program
  prefs: []
  type: TYPE_NORMAL
- en: 'If we change the contents of the first input field (which is not used with
    `v-model`), we will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – Editing an input field without v-model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.17_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.17 – Editing an input field without v-model
  prefs: []
  type: TYPE_NORMAL
- en: Note that modifying the input field (without `v-model`) has no effect on the
    reactive variable associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s modify the contents of the second input field, managed by `v-model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – Editing an input field with v-model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.18_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.18 – Editing an input field with v-model
  prefs: []
  type: TYPE_NORMAL
- en: We now see that the use of `v-model` causes the immediate modification of the
    reactive variable to which it is associated, which then causes the modification
    of the `value` attribute of the first input field (because it is linked to the
    reactive variable).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have mainly studied how to create a component and methods
    or attributes associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: It is now necessary to study how to manage the actions of the user in a component,
    then how to assemble the components to form an application.
  prefs: []
  type: TYPE_NORMAL
