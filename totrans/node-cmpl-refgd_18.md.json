["```js\n  npm install passport\n  npm install passport-http\n```", "```js\nconst passport = require('passport');\nconst BasicStrategy = require('passport-http').BasicStrategy;\n\npassport.use(new BasicStrategy(function(username, password, done) {\n  if (username == 'user' && password=='default') {\n    return done(null, username);\n  }\n}));\n\nrouter.get('/v1/', \n  passport.authenticate('basic', { session: false }), \n     function(request,    response, next) {\n       catalogV1.findAllItems(response);\n});\nrouter.get('/v2/', \n  passport.authenticate('basic', { session: false }), \n     function(request,    response, next) {\n       catalogV1.findAllItems(response);\n});\n\nrouter.get('/', \n  passport.authenticate('basic', { session: false }), \n     function(request,    response, next) {\n       catalogV1.findAllItems(response);\n});\n```", "```js\npassport.use(new BasicStrategy(\nfunction(username, password, done) {\n  AuthUser.findOne({username: username, password: password}, \n    function(error, user) {\n      if (error) {\n        return done(error);\n      } else {\n        if (!user) {\n          console.log('unknown user');\n          return done(error);\n        } else {\n          console.log(user.username + ' \n          authenticated successfully');\n          return done(null, user);\n        }\n      }\n    });  \n  })\n); \n```", "```js\nnpm install passport-oauth\n```", "```js\nvar passport = require('passport')\n  , OAuthStrategy = require('passport-oauth').OAuthStrategy;\n\npassport.use('provider', new OAuthStrategy({\n    requestTokenURL: 'https://www.provider.com/oauth/request_token',\n    accessTokenURL: 'https://www.provider.com/oauth/access_token',\n    userAuthorizationURL: 'https://www.provider.com/oauth/authorize',\n    consumerKey: '123-456-789',\n    consumerSecret: 'secret'\n    callbackURL: 'https://www.example.com/auth/provider/callback'\n  }, function(token, tokenSecret, profile, done) {  \n    //lookup the profile and authenticate   and call done\n  }\n));\n```", "```js\napp.use(express.session()); \napp.use(passport.initialize()); \napp.use(passport.session()); \n```", "```js\npassport.serializeUser(function(user, done) { done(null, user); }); passport.deserializeUser(function(obj, done) { done(null, obj); });\n```", "```js\n      var passport = require('passport')\n        , LinkedInStrategy = require('passport-\n        linkedin').Strategy;\n\n        app.use(express.session());\n        app.use(passport.initialize());\n        app.use(passport.session());\n\n      passport.serializeUser(function(user, done) {\n        done(null, user);\n      });\n\n      passport.deserializeUser(function(obj, done) {\n        done(null, obj);\n      });\n\n        passport.use(new LinkedInStragety({\n          consumerKey: 'api-key',\n          consumerSecret: 'secret-key',\n          callbackURL: \"http://localhost:3000/catalog/v2\"\n        },\n          function(token, tokenSecret, profile, done) {\n            process.nextTick(function () {\n              return done(null, profile);\n            });\n          })\n        ); \n```", "```js\n      router.get('/v2/', \n        cache('minutes',1), \n        passport.authenticate('linked', { session: true}), \n        function(request, response) {\n          //...\n        }\n      });\n```", "```js\n      router.get('/logout', function(req, res){\n      request.logout();\n        response.redirect('/catalog');\n      });\n\n```", "```js\nfunction authorize(user, response) {\n  if ((user == null) || (user.role != 'Admin')) {\n    response.writeHead(403, { 'Content-Type' : \n    'text/plain'});\n    response.end('Forbidden');\n    return;\n  }\n} \n```", "```js\napp.post('/v2', \n  passport.authenticate('basic', { session: false }), \n    function(request, response) {\n      authorize(request.user, response);\n      if (!response.closed) {\n        catalogV2.saveItem(request, response);\n      }\n    }\n); \n```", "```js\nsudo apt-get install openssl\n```", "```js\nopensslreq -x509 -nodes -days 365 -newkey rsa:2048-keyoutcatalog.pem -out catalog.crt\n```", "```js\nvar https = require('https');\nvar app = express();\napp.set('port', process.env.PORT || 3443); \n```", "```js\nvar options = {key : fs.readFileSync('./ssl/catalog.pem'),\n                cert : fs.readFileSync('./ssl/catalog.crt')\n}; \n```", "```js\nhttps.createServer(options, app).listen(app.get('port'));\n```"]