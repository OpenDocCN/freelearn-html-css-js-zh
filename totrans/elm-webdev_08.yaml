- en: Adding More Features to the Weather App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to [Chapter 8](5fdf7617-7e2c-4ff4-a7eb-28033a281ad5.xhtml), *Adding
    More Features to the Weather App*. The goal of this chapter is to improve our
    simple weather app by adding more features to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will cover include:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding `elm-mdl` to our app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting the temperature display from Kelvin to Celsius
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the Round module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After completing this chapter, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Be able to use the Material Design library for Elm, `elm-mdl`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand how the Round module works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing Material and Round modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start, let''s create a new folder, call it `chapter8`, point the console
    inside this newly-created folder, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once the app is prepared, simply copy all the code we had in `Main.elm` at the
    end of [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml), *Making a Weather
    App in Elm*, into this new `Main.elm`. This will be our starting point (rather
    than beginning with the boilerplate app, like we did in the last few chapters).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there is a slight issue that we need to resolve. Currently, our new
    app will not compile. Instead, we will get the following warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The issue stems from the fact that we did not update the Elm packages. Let''s
    quickly fix that by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After we approve the upgrades, we''ll be greeted with the following message
    output to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can start serving our Elm app and watch for changes as we update our
    app. To start serving the app, let''s point our console to the `improved-weather-app-ch8`
    folder and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We will begin adding improvements to our app by using the `elm-mdl` module.
    The preview of this module in action is available at [https://debois.github.io/elm-mdl/](https://debois.github.io/elm-mdl/)
    and the official documentation can be found at [https://github.com/debois/elm-mdl](https://github.com/debois/elm-mdl).
  prefs: []
  type: TYPE_NORMAL
- en: 'To start off, let''s import all the dependencies we will be using. Open `Main.elm`,
    and locate the beginning section of the code, where the imports are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'At the bottom of the imports, we will be importing `elm-mdl` module dependencies,
    and then, at the very bottom, the `Round` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The official `elm-mdl` package is also listed on the elm packages website, at [http://package.elm-lang.org/packages/debois/elm-mdl/latest](http://package.elm-lang.org/packages/debois/elm-mdl/latest),
    and the `Round` package is located at [http://package.elm-lang.org/packages/myrho/elm-round/latest](http://package.elm-lang.org/packages/myrho/elm-round/latest).
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, at this point our app is again not compiling. The reason is
    similar to the issue we fixed a bit earlier: we need to install the missing packages.
    We can verify that that is the case by looking at the compiler''s error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To fix the issue, let''s run the following command in our console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's try running our app again, with `elm-app start`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, our app does not compile; this time, we are missing the `Round` module.
    Let''s add it with the following command in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: After successfully installing the dependencies needed to run our app, we can
    now see it successfully compiling and being served to the browser by running `elm-app
    start` once again. Right now, the app looks exactly as it did at the end of [Chapter
    7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml), *Making a Weather App in Elm*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding elm-mdl to our Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While our main function will remain unchanged—meaning it will still use `Html.program`
    in exactly the same way as in the previous chapter, we will have to add changes
    to our `Model` type alias.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml), *Making a Weather
    App in Elm*, our `Model` looked as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The only thing we need to do is add another entry to the `Model`''s record,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This new entry, `mdl : Material.Model`, is the type of data that holds everything
    we need to display the `mdl` element. Our `TemperatureInfo` type alias will remain
    unchanged.'
  prefs: []
  type: TYPE_NORMAL
- en: Updating the init function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will need to update the `init` function so that we take into account the
    initial value of `Material.model`. The `init` function we ended up with in [Chapter
    7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml), *Making a Weather App in Elm*,
    looked as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The update is simple, and it will reflect the change we made to the `Model`
    type alias:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: With this update, we have sorted out the initial values that our weather app
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Msg union type and the update function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to reflect the improvements we made with the introduction of the `elm-mdl`
    package, we need to add another type constructor to our `Msg` union type. The
    `Msg` union type will look exactly as it did in [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml),
    *Making a Weather App in Elm*, save for the new `Mdl` type constructor, which
    we''ll simply append to the end of the union type, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `Mdl` type constructor is simply the message that will be generated by `mdl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now add improvements to our `update` function, which looked like this
    at the end of [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml), *Making
    a Weather App in Elm*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As we can see in the preceding code snippet, we pattern-matched for `GetTemp`,
    `NewTemp`, and `CityInput`, which was explained in [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml),
    *Making a Weather App in Elm*. The change that we need to make to the `update`
    function at this point has to do with pattern matching for the new `Msg` type
    constructor, namely, `Mdl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Practically, this means that the `update` function will remain exactly as it
    was, with just one simple addition: `Mdl` branch for our `case-of` expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we will add updates to our `view` function.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the view function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `view` function at the end of [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml),
    *Making a Weather App in Elm*, looked as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we basically had no styles in the preceding code, the updated `view`
    function might seem a bit daunting at first glance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Check the look of your app in the browser, since at this point we are successfully
    applying `elm-mdl` to it.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, the preceding code is pretty straightforward once you understand how
    it works. Let's go through it step by step. Since the code in [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml),
    *Making a Weather App in Elm*, did not have any styles, the functions we used
    were easy enough to understand from the get-go. We simply had an `input`, a `button`,
    and four `divs` containing text nodes. As we did not use any styles, we used `br`
    functions to visually separate the `input`, the `button`, and the four `divs`.
  prefs: []
  type: TYPE_NORMAL
- en: The improvements in [Chapter 8](5fdf7617-7e2c-4ff4-a7eb-28033a281ad5.xhtml),
    *Adding More Features to the Weather App*, involve adding `mdl` specific elements,
    including `mdl` specific `Textfield`, `Button`, and `Card`. Let's look at `Textfield`
    a bit closer.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Textfield function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code for our `Textfield` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We start off with `Textfield.render Mdl`, which means that its message type
    is `Mdl` and that it simply renders the `Textfield` component. Every `mdl` component
    that we use needs to have a unique ID, simply marked with a number. In the preceding
    example, we are assigning a unique ID to `Textfield` using a zero: `[ 0 ]`.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we specify the part of the model that this will apply to, which is `model.mdl`. In
    the second list, we provide the specifics on the appearance we want our `Textfield`
    to have.
  prefs: []
  type: TYPE_NORMAL
- en: All the options that have to do with appearance for our `Textfield` component
    are available at the following URL, [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Textfield](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Textfield).
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand how the appearance changes in the second list provided to our
    `Textfield`, we can simply turn off some of the members of the list, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: By commenting out `Textfield.label`, `Textfield.floatingLabel`, and `Textfield.text_`,
    we effectively turned them off, leaving only the bare minimum of the functionality
    needed for our app to still work. If we were to comment out either `Textfield.value
    model.city`, or `Options.onInput CityInput`, our app would stop working, so in
    the preceding case, we had to keep these two, while we were able to comment out
    the rest.
  prefs: []
  type: TYPE_NORMAL
- en: The reason our app would stop working is that we would break the model that
    the update function expects from the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier in this section, we can refer to the *Options*, *Appearance*,
    and *Html attributes* sections of the official documentation for `Textfield` in
    order to get different results and styling. For example, we could set the `maxlength` of
    our `Textfield` to, say, five characters. In that case, our `Textfield` will need
    to look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will be able to type a city whose name is up to five characters long.
    For example, we can still look for weather information for Paris, but we would
    not be able to look up London, since we would not be able to type all six characters
    of that city's name.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll go through the `Button` function.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Button function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Looking at the `Button` after the `Textfield`, we can see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Armed with our understanding of how `Textfield` works, we can figure out the
    preceding section of our `view` function almost at a glance: our `Button` gets
    rendered with an `Mdl` message. We give our `Button` an id of `1`, and we use
    the appearance options of `Button.raised`, `Button.colored`, and `Button.ripple`.
    We top it off by sending the `GetTemp` message, by using elm-mdl''s `Options.onClick`.
    There is also a third list, which reads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Why did we use an empty list in `Textfield`, if we were not going to use it?
    The reason is, of course, to satisfy Elm's static type system. For example, if
    we were to erase the last, empty list from the `Textfield` function, the compiler
    would throw an error. Next, we'll look at the `Card` function.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Card function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a component, `Card` is relatively complex, as it is made up of several subsections,
    since its role is to display related information in a coherent way. The official
    documentation for the `Card` function is available at the following URL, [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Card](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Card).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the use of Card.view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at the first several lines where we are using the `Card` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: First thing to note, the `br` function is completely redundant here, so we can
    simply erase it without any changes in the functionality or layout of our weather
    app. We begin the next line with `Card.view`.
  prefs: []
  type: TYPE_NORMAL
- en: As the official documentation reads, the `Card.view` function is used to construct
    a card. While `Textfield` and `Button` were constructed using the `render` function,
    here we are using `view`. We add additional styling using `Options.css`, followed
    with two `Strings`, the former setting the property of our CSS, and the latter
    setting the value for the property.
  prefs: []
  type: TYPE_NORMAL
- en: '`Material.Elevation` is used to give the shadow effect to our `mdl` components.
    For a full description of available `Elevations`, refer to the official documentation
    at [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Elevation](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Elevation). 
    For example, to get the maximum possible shadow using `Elevation`, we can change
    the line that reads `Elevation.e8` to a new value, `Elevation.e24`. Similar to
    shadow, we can set the time it takes for our transition, in milliseconds. We set
    our transition to a quarter of a second with `Elevation.transition 250`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next line sets the color for our card:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The official documentation of the `elm-mdl` package that deals with `Material.Color` is
    available at [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Color](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Color).
  prefs: []
  type: TYPE_NORMAL
- en: Rendering the Card.title content block
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we render a `Card.title`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Before going through each of the preceding lines, it is important to note that
    each `Card ` in `elm-mdl` consists of content blocks. Content blocks can be `Card.title`,
    `Card.media`, `Card.text`, and `Card.actions`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The type signature for the `Card.title` content block is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This means that each title content block takes two `Lists` and returns a `Block`.
  prefs: []
  type: TYPE_NORMAL
- en: All the other content blocks (`media`, `text`, and `actions`) have identical
    type signatures, save for the name of the content block function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we know that the `title` content block needs to have two `Lists`, and
    that the first `List` needs to specify styles, it''s now easy to understand what
    this line of code does:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding line of code simply specifies the style to be used on our `Card.title`.
    If we wanted to, we could, for example, add another style here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Obviously, with the preceding change, our card will get a left padding of 100
    pixels. The second `List` inside our `Card.title` content block specifies the
    `Html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we can see `Card.head` being used. The official documentation
    for `Card.head` is available at [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Card#head](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Card#head). The
    `Card.head` function behaves as we expect—it takes two `Lists` and returns an
    `Html a`. The first `List` lets us specify `Style`, and the second one lets us
    specify `Html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the official documentation for `Material.Options`, available at [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Options](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Options),
    we can navigate to the *Elements* section, which begins with `div`. As the official
    documentation reads, `div` is a:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Convenience function for the ultra-common case of apply elm-mdl styling to
    a div element."'
  prefs: []
  type: TYPE_NORMAL
- en: Inside `Options.div`, we specify the styles in the first `List`, then `Html`
    with `Options.span` in the second `List`. Following the same pattern, the `Options.span`
    itself holds two `Lists`. Inside the first `List` we specify the styles to use
    by calling `Material.Typography` and `Material.Color`—all together three separate
    styles. Then, in the second `List`, expectedly, we render a `text` node.
  prefs: []
  type: TYPE_NORMAL
- en: The contents of the `text` node, inside parentheses, might look a bit complicated,
    so let's pick it apart. To begin with, we can see that we are calling `Round.round`.
    Let's refer to the official documentation for more information on this package. To
    do that, point your browser to the following URL, [http://package.elm-lang.org/packages/myrho/elm-round/latest/Round](http://package.elm-lang.org/packages/myrho/elm-round/latest/Round).
  prefs: []
  type: TYPE_NORMAL
- en: As it says on the official page of the `Round` package, it allows us to convert
    a `Float` to a `String`, with the additional benefit of setting the number of
    digits after the decimal point. It also lets us specify how we want to round the
    rest of the digits on our `Float`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first example we see on the official page is this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code shows that `round` takes an `Int` and a `Float`, and returns
    a `String`. You can find the exact type signature at the following link, [http://package.elm-lang.org/packages/myrho/elm-round/latest/Round#round](http://package.elm-lang.org/packages/myrho/elm-round/latest/Round#round).
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we have this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Looking at the `temperatureInfo` type alias, we can see that `temperatureInfo.temperature`
    is a `Float`. So, we are indeed taking an `Int` and a `Float`, and returning a
    `String`. One caveat here is the concatenated degree symbol, which, although a
    `String`, gets concatenated with a `Float`, all thanks to `Round.round`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The value of the first parameter is zero, meaning we do not want to have any
    decimal points when displaying the temperature. We can change that to, for example,
    one digit after the decimal point, by simply replacing the zero, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Next, we'll look at the `Card.actions` code.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Card.actions code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, it''s time to discuss the `Card.actions` part of our `Card` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The official documentation of `Material.Card` specifies `Card.actions` as allowing
    us to generate an `actions` block. As we have seen before, the `actions` block
    is simply one of the four possible content blocks for our `mdl` components.
  prefs: []
  type: TYPE_NORMAL
- en: The official documentation for the Material Design Language—that is, Google
    documentation, not Elm package documentation—states that a card action is to be
    used as a way to interact with our card. In essence, it's a call to an action
    button. For example, if we displayed a listing of blog post excerpts in the form
    of MDL cards on a website, the card action could be the button that holds the
    *Read More* text node.
  prefs: []
  type: TYPE_NORMAL
- en: However, in our example, we are not really interacting with the information
    provided under the temperature in our card component. In other words, we do not
    have the intention for the user to click on the *wind*, *pressure*, and *humidity*
    information that is listed below the temperature reading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, it is safe to change the line that reads `, Card.actions []` with
    this code: `, Card.text []`. We can leave all the other code as is, and the app
    will still work. The only change that will happen has to do with the compiled
    HTML structure of our weather app. In order to see the change, we will need to
    inspect the code in the `dev` tools, which can be accessed in most major browsers
    by pressing the *F12* button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If using `Card.action` in our Elm app, the resultant `div` in the browser will
    have this CSS class attribute: `mdl-card__actions`. If we instead switch to using
    `Card.text` in our view, the resultant `div` of the running app in the browser
    will have the CSS class attribute of `mdl-card__supporting-text`.'
  prefs: []
  type: TYPE_NORMAL
- en: We finish our `view` function's code by piping the `Material.Scheme.top` at
    the very bottom. This will add the `mdl` CSS to our app. To find out more about
    this, refer to the official documentation at [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Scheme#top](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Scheme#top).
  prefs: []
  type: TYPE_NORMAL
- en: Adding color schemes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can change the way our mdl-styled app looks, almost effortlessly, by utilizing
    color schemes. To understand how to do that, we will first need to refer to the
    official documentation of the elm-mdl package. More specifically, we are interested
    in `topWithScheme`, a function that is made available in the `elm-mdl` package.
    The official documentation for this function is available at [http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Scheme#topWithScheme](http://package.elm-lang.org/packages/debois/elm-mdl/8.1.0/Material-Scheme#topWithScheme). If
    you visit the referenced URL, you will see that all we need to do to make it work
    is provide the primary and accent colors as parameters to the `topWithScheme`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: To better understand how the color schemes work in mdl, refer to the color scheme
    customizer at `https://getmdl.io/customize/index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Practically, this means that we can update our `view` function with a number
    of color schemes, just by changing one line of code. Until now, the first few
    lines of our `view` function looked as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'To update the view so that it uses the `topWithScheme` function, we simply
    add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the primary color is now orange, and the accent color is red.
    At this point, we have nearly finished updating our weather app. There are no
    changes to be made to either the `subscriptions` function or to the `getTemperature`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: The only function that still needs updating is the `decodeTemperatureInfo` function,
    in which we need to make just some minor tweaks, which we will be doing in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Updating decodeTemperatureInfo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We left off in [Chapter 7](db847a07-9e71-4a31-a477-32d85a1f34c3.xhtml), *Making
    a Weather App in Elm*, with the following code for `decodeTemperatureInfo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The only thing to update in the `decodeTemperatureInfo` function is that we
    need to convert the temperature from Kelvin to Celsius. Luckily, this conversion
    is very straightforward: in order to convert to Celsius, we simply need to subtract
    `273.15` from the Kelvin-based value. In other words, if the current temperature
    is `293.15` Kelvins, the conversion to Celsius will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus, `293.15` degrees Kelvin is `20` degrees Celsius. This makes it pretty
    straightforward to update our `decodeTemperatureInfo`. We simply need to replace
    the existing code with this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We will leave the rest of the code the same as in the previous version of our
    app.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we updated the temperature so as to display Celsius to Kelvin.
    If you view the app in the browser, you will be able to see this change.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to improve the styling of an existing app
    with the wonderful `elm-mdl` package. We have looked at using `Result` and `Maybe`
    to deal with operations that might fail and to deal with possibly missing data.
    We looked at using decoders, and mapping over them. We also looked at using the
    HTTP package to get remote JSON data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how to write tests for our Elm apps.
  prefs: []
  type: TYPE_NORMAL
