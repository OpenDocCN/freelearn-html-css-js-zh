["```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch2/data-lake-s3 --path cncb-data-lake-s3\n```", "```js\nservice: cncb-data-lake-s3\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nfunctions:\n  transformer:\n    handler: handler.transform\n    timeout: 120\n\nresources:\n  Resources:\n    Bucket:\n      Type: AWS::S3::Bucket\n      DeletionPolicy: Retain\n    DeliveryStream:\n      Type: AWS::KinesisFirehose::DeliveryStream\n      Properties:\n        DeliveryStreamType: KinesisStreamAsSource      \n        KinesisStreamSourceConfiguration: \n          KinesisStreamARN: ${cf:cncb-event-stream-${opt:stage}.streamArn}\n          ...\n        ExtendedS3DestinationConfiguration:\n          BucketARN:\n            Fn::GetAtt: [ Bucket, Arn ]\n          Prefix: ${cf:cncb-event-stream-${opt:stage}.streamName}/\n          ...\n\n  Outputs:\n    DataLakeBucketName:\n      Value:\n        Ref: Bucket\n```", "```js\nexports.transform = (event, context, callback) => {\n  const output = event.records.map((record, i) => {\n    // store all available data\n    const uow = {\n      event: JSON.parse((Buffer.from(record.data, 'base64')).toString('utf8')),\n      kinesisRecordMetadata: record.kinesisRecordMetadata,\n      firehoseRecordMetadata: {\n        deliveryStreamArn: event.deliveryStreamArn,\n        region: event.region,\n        invocationId: event.invocationId,\n        recordId: record.recordId,\n        approximateArrivalTimestamp: record.approximateArrivalTimestamp,\n      }\n    };\n\n    return {\n      recordId: record.recordId,\n      result: 'Ok',\n      data: Buffer.from(JSON.stringify(uow) + '\\n', 'utf-8').toString('base64'),\n    };\n  });\n\n  callback(null, { records: output });\n};\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-data-lake-s3@1.0.0 dp:lcl <path-to-your-workspace>/cncb-data-lake-s3\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nStack Outputs\nDataLakeBucketName: cncb-data-lake-s3-john-bucket-1851i1c16lnha\n...\n```", "```js\n$ cd <path-to-your-workspace>/cncb-event-stream\n$ sls invoke -r us-east-1 -f publish -s $MY_STAGE -d '{\"type\":\"thing-created\"}'\n{\n    \"ShardId\": \"shardId-000000000000\",\n    \"SequenceNumber\": \"49582906351415672136958521360120605392824155736450793474\"\n}\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch2/event-first --path cncb-event-first\n```", "```js\nservice: cncb-event-first\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - kinesis:PutRecord\n      Resource: ${cf:cncb-event-stream-${opt:stage}.streamArn}\n\nfunctions:\n  submit:\n    handler: handler.submit\n    environment:\n      STREAM_NAME: ${cf:cncb-event-stream-${opt:stage}.streamName}\n```", "```js\nmodule.exports.submit = (thing, context, callback) => {\n  thing.id = thing.id || uuid.v4();\n\n  const event = {\n    type: 'thing-submitted',\n    id: uuid.v1(),\n    partitionKey: thing.id,\n    timestamp: Date.now(),\n    tags: {\n      region: process.env.AWS_REGION,\n      kind: thing.kind,\n    },\n    thing: thing,\n  };\n\n  const params = {\n    StreamName: process.env.STREAM_NAME,\n    PartitionKey: event.partitionKey,\n    Data: Buffer.from(JSON.stringify(event)),\n  };\n\n  const kinesis = new aws.Kinesis();\n\n  kinesis.putRecord(params, (err, resp) => {\n    callback(err, event);\n  });\n};\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-event-first@1.0.0 dp:lcl <path-to-your-workspace>/cncb-event-first\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nfunctions:\n  submit: cncb-event-first-john-submit\n...\n```", "```js\n$ sls invoke -f submit -r us-east-1 -s $MY_STAGE -d '{\"id\":\"11111111-1111-1111-1111-111111111111\",\"name\":\"thing one\",\"kind\":\"other\"}'\n\n{\n    \"type\": \"thing-submitted\",\n    \"id\": \"2a1f5290-42c0-11e8-a06b-33908b837f8c\",\n    \"partitionKey\": \"11111111-1111-1111-1111-111111111111\",\n    \"timestamp\": 1524025374265,\n    \"tags\": {\n        \"region\": \"us-east-1\",\n        \"kind\": \"other\"\n    },\n    \"thing\": {\n        \"id\": \"11111111-1111-1111-1111-111111111111\",\n        \"name\": \"thing one\",\n        \"kind\": \"other\"\n    }\n}\n```", "```js\n$ sls logs -f submit -r us-east-1 -s $MY_STAGE\n\nSTART ...\n2018-04-18 00:22:54 ... params: {\"StreamName\":\"john-cncb-event-stream-s1\",\"PartitionKey\":\"11111111-1111-1111-1111-111111111111\",\"Data\":{\"type\":\"Buffer\",\"data\":[...]}}\n2018-04-18 00:22:54 ... response: {\"ShardId\":\"shardId-000000000000\",\"SequenceNumber\":\"4958...2466\"}\nEND ...\nREPORT ... Duration: 381.21 ms    Billed Duration: 400 ms ... Max Memory Used: 34 MB    \n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch2/micro-event-store --path cncb-micro-event-store\n```", "```js\nservice: cncb-micro-event-store\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:PutItem\n        - dynamodb:Query\n      Resource:\n        Fn::GetAtt: [ Table, Arn ]\n  environment:\n    TABLE_NAME:\n      Ref: Table\n\nfunctions:\n  listener:\n    handler: handler.listener\n    events:\n      - stream:\n          type: kinesis\n          ...\n  trigger:\n    handler: handler.trigger\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt: [ Table, StreamArn ]\n          batchSize: 100\n          startingPosition: TRIM_HORIZON\n\nresources:\n  Resources:\n    Table:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${opt:stage}-${self:service}-events\n        AttributeDefinitions:\n          ...\n        KeySchema:\n          - AttributeName: partitionKey\n            KeyType: HASH\n          - AttributeName: eventId\n            KeyType: RANGE\n        ...\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n```", "```js\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToEvent)\n    .filter(byType)\n    .flatMap(put)\n    .collect()\n    .toCallback(cb);\n};\n\n...\nconst byType = event => event.type.matches(/thing-.+/);\n\nconst put = event => {\n  const params = {\n    TableName: process.env.TABLE_NAME,\n    Item: {\n      partitionKey: event.partitionKey,\n      eventId: event.id,\n      event: event,\n    }\n  };\n\n  const db = new aws.DynamoDB.DocumentClient();\n  return _(db.put(params).promise());\n};\n\nmodule.exports.trigger = (event, context, cb) => {\n  _(event.Records)\n    .flatMap(getMicroEventStore)\n    .tap(events => console.log('events: %j', events))\n    .collect().toCallback(cb);\n};\n\nconst getMicroEventStore = (record) => {\n  const params = {\n    TableName: process.env.TABLE_NAME,\n    KeyConditionExpression: '#partitionKey = :partitionKey',\n    ExpressionAttributeNames: {\n      '#partitionKey': 'partitionKey'\n    },\n    ExpressionAttributeValues: {\n      ':partitionKey': record.dynamodb.Keys.partitionKey.S\n    }\n  };\n\n  const db = new aws.DynamoDB.DocumentClient();\n  return _(db.query(params).promise());\n}\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-micro-event-store@1.0.0 dp:lcl <path-to-your-workspace>/cncb-micro-event-store\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nfunctions:\n  listener: cncb-micro-event-store-john-listener\n  trigger: cncb-micro-event-store-john-trigger\n...\n```", "```js\n$ cd <path-to-your-workspace>/cncb-event-stream\n$ sls invoke -r us-east-1 -f publish -s $MY_STAGE -d '{\"type\":\"thing-updated\",\"partitionKey\":\"11111111-1111-1111-1111-111111111111\",\"thing\":{\"new\":{\"name\":\"thing one\",\"id\":\"11111111-1111-1111-1111-111111111111\"}}}'\n\n{\n    \"ShardId\": \"shardId-000000000000\",\n    \"SequenceNumber\": \"49583553996455686705785668952922460091805481438885707778\"\n}\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE\n\nSTART ...\n2018-04-18 01:18:55... {\"type\":\"thing-updated\",\"partitionKey\":\"11111111-1111-1111-1111-111111111111\",\"thing\":{\"new\":{\"name\":\"thing one\",\"id\":\"11111111-1111-1111-1111-111111111111\"}},\"id\":\"fcc03460-42c7-11e8-8756-f75e650b2731\",\"timestamp\":1524028734118,\"tags\":{\"region\":\"us-east-1\"}}\n2018-04-18 01:18:55.394 (-04:00)    b42aaa92-8a9a-418d-8e22-ecc54e9966f6    params: {\"TableName\":\"john-cncb-micro-event-store-events\",\"Item\":{\"partitionKey\":\"11111111-1111-1111-1111-111111111111\",\"eventId\":\"fcc03460-42c7-11e8-8756-f75e650b2731\",\"event\":{\"type\":\"thing-updated\",\"partitionKey\":\"11111111-1111-1111-1111-111111111111\",\"thing\":{\"new\":{\"name\":\"thing one\",\"id\":\"11111111-1111-1111-1111-111111111111\"}},\"id\":\"fcc03460-42c7-11e8-8756-f75e650b2731\",\"timestamp\":1524028734118,\"tags\":{\"region\":\"us-east-1\"}}}}\nEND ...\nREPORT ... Duration: 149.24 ms    Billed Duration: 200 ms ... Max Memory Used: 35 MB    \n```", "```js\n$ sls logs -f trigger -r us-east-1 -s $MY_STAGE\n\nSTART ...\n2018-04-18 01:18:56 ... event: {\"Records\":[{\"eventID\":\"b8dbee2d9f49ee05609a7e930ac204e7\",\"eventName\":\"INSERT\",...,\"Keys\":{\"eventId\":{\"S\":\"fcc03460-42c7-11e8-8756-f75e650b2731\"},\"partitionKey\":{\"S\":\"11111111-1111-1111-1111-111111111111\"}},...}]}\n2018-04-18 01:18:56 ... params: {\"TableName\":\"john-cncb-micro-event-store-events\",...,\"ExpressionAttributeValues\":{\":partitionKey\":\"11111111-1111-1111-1111-111111111111\"}}\n2018-04-18 01:18:56 ... events: {\"Items\":[{\"eventId\":\"2a1f5290-42c0-11e8-a06b-33908b837f8c\",\"partitionKey\":\"11111111-1111-1111-1111-111111111111\",\"event\":{\"id\":\"2a1f5290-42c0-11e8-a06b-33908b837f8c\",\"type\":\"thing-submitted\",\"partitionKey\":\"11111111-1111-1111-1111-111111111111\",\"thing\":{\"name\":\"thing one\",\"kind\":\"other\",\"id\":\"11111111-1111-1111-1111-111111111111\"},\"timestamp\":1524025374265,\"tags\":{\"region\":\"us-east-1\",\"kind\":\"other\"}}},{\"eventId\":\"fcc03460-42c7-11e8-8756-f75e650b2731\",\"partitionKey\":\"11111111-1111-1111-1111-111111111111\",\"event\":{\"id\":\"fcc03460-42c7-11e8-8756-f75e650b2731\",\"type\":\"thing-updated\",\"partitionKey\":\"11111111-1111-1111-1111-111111111111\",\"thing\":{\"new\":{\"name\":\"thing one\",\"id\":\"11111111-1111-1111-1111-111111111111\"}},\"timestamp\":1524028734118,\"tags\":{\"region\":\"us-east-1\"}}}],\"Count\":2,\"ScannedCount\":2}\nEND ...\nREPORT ... Duration: 70.88 ms    Billed Duration: 100 ms     Memory Size: 1024 MB    Max Memory Used: 42 MB    \n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch2/db-first-dynamodb --path cncb-db-first-dynamodb\n```", "```js\nservice: cncb-db-first-dynamodb\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:PutItem\n      Resource:\n        Fn::GetAtt: [ Table, Arn ]\n    - Effect: Allow\n      Action:\n        - kinesis:PutRecord\n      Resource: ${cf:cncb-event-stream-${opt:stage}.streamArn}\n\nfunctions:\n  command:\n    handler: handler.command\n    environment:\n      TABLE_NAME:\n        Ref: Table\n  trigger:\n    handler: handler.trigger\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt: [ Table, StreamArn ]\n          ...\n    environment:\n      STREAM_NAME: ${cf:cncb-event-stream-${opt:stage}.streamName}\n\nresources:\n  Resources:\n    Table:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${opt:stage}-${self:service}-things\n        AttributeDefinitions:\n          ...\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ...\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n```", "```js\nmodule.exports.command = (request, context, callback) => {\n  const thing = {\n    id: uuid.v4(),\n    ...request,\n  };\n\n  const params = {\n    TableName: process.env.TABLE_NAME,\n    Item: thing,\n  };\n\n  const db = new aws.DynamoDB.DocumentClient();\n  db.put(params, callback);\n};\n\nmodule.exports.trigger = (event, context, cb) => {\n  _(event.Records)\n    .map(toEvent)\n    .flatMap(publish)\n    .collect()\n    .toCallback(cb);\n};\n\nconst toEvent = record => ({\n  id: record.eventID,\n  type: `thing-${EVENT_NAME_MAPPING[record.eventName]}`,\n  timestamp: record.dynamodb.ApproximateCreationDateTime * 1000,\n  partitionKey: record.dynamodb.Keys.id.S,\n  tags: {\n    region: record.awsRegion,\n  },\n  thing: {\n    old: record.dynamodb.OldImage ?\n      aws.DynamoDB.Converter.unmarshall(record.dynamodb.OldImage) :\n      undefined,\n    new: record.dynamodb.NewImage ?\n      aws.DynamoDB.Converter.unmarshall(record.dynamodb.NewImage) :\n      undefined,\n  },\n});\n\nconst EVENT_NAME_MAPPING = {\n  INSERT: 'created',\n  MODIFY: 'updated',\n  REMOVE: 'deleted',\n};\n\nconst publish = event => {\n  const params = {\n    StreamName: process.env.STREAM_NAME,\n    PartitionKey: event.partitionKey,\n    Data: Buffer.from(JSON.stringify(event)),\n  };\n\n  const kinesis = new aws.Kinesis();\n  return _(kinesis.putRecord(params).promise());\n}\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-db-first-dynamodb@1.0.0 dp:lcl <path-to-your-workspace>/cncb-db-first-dynamodb\n> sls deploy -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nfunctions:\n  command: cncb-db-first-dynamodb-john-command\n  trigger: cncb-db-first-dynamodb-john-trigger\n```", "```js\n$ sls invoke -r us-east-1 -f command -s $MY_STAGE -d '{\"name\":\"thing one\"}'\n```", "```js\n$ sls logs -f command -r us-east-1 -s $MY_STAGE\nSTART ...\n2018-04-17 00:29:13 ... request: {\"name\":\"thing one\"}\n2018-04-17 00:29:13 ... params: {\"TableName\":\"john-cncb-db-first-dynamodb-things\",\"Item\":{\"id\":\"4297c253-f512-443d-baaf-65f0a36aaaa3\",\"name\":\"thing one\"}}\nEND ...\nREPORT ... Duration: 136.99 ms    Billed Duration: 200 ms     Memory Size: 1024 MB    Max Memory Used: 35 MB    \n```", "```js\n$ sls logs -f trigger -r us-east-1 -s $MY_STAGE\nSTART ...\n2018-04-17 00:29:15 ... event: {\"Records\":[{\"eventID\":\"39070dc13de0eb76548506a977d4134c\",\"eventName\":\"INSERT\",...,\"dynamodb\":{\"ApproximateCreationDateTime\":1523939340,\"Keys\":{\"id\":{\"S\":\"4297c253-f512-443d-baaf-65f0a36aaaa3\"}},\"NewImage\":{\"name\":{\"S\":\"thing one\"},\"id\":{\"S\":\"4297c253-f512-443d-baaf-65f0a36aaaa3\"}},\"SequenceNumber\":\"100000000006513931753\",...},...}]}\n2018-04-17 00:29:15 ... {\"id\":\"39070dc13de0eb76548506a977d4134c\",\"type\":\"thing-created\",\"timestamp\":1523939340000,\"partitionKey\":\"4297c253-f512-443d-baaf-65f0a36aaaa3\",\"tags\":{\"region\":\"us-east-1\"},\"thing\":{\"new\":{\"name\":\"thing one\",\"id\":\"4297c253-f512-443d-baaf-65f0a36aaaa3\"}}}\n2018-04-17 00:29:15 ... params: {\"StreamName\":\"john-cncb-event-stream-s1\",\"PartitionKey\":\"4297c253-f512-443d-baaf-65f0a36aaaa3\",\"Data\":{\"type\":\"Buffer\",\"data\":[...]}}\n2018-04-17 00:29:15 ... {\"ShardId\":\"shardId-000000000000\",\"SequenceNumber\":\"4958...3778\"}\nEND ...\nREPORT ... Duration: 326.99 ms    Billed Duration: 400 ms ... Max Memory Used: 40 MB    \n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch2/db-first-cognito --path cncb-db-first-cognito\n```", "```js\nservice: cncb-db-first-cognito\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  ...\n\nfunctions:\n  trigger:\n    handler: handler.trigger\n    events:\n      - stream:\n          type: kinesis\n          arn:\n            Fn::GetAtt: [ CognitoStream, Arn ]\n          ...\n    environment:\n      STREAM_NAME: ${cf:cncb-event-stream-${opt:stage}.streamName}\n\nresources:\n  Resources:\n    CognitoStream:\n      Type: AWS::Kinesis::Stream\n      Properties:\n          ShardCount: 1\n\n    IdentityPool:\n      Type: AWS::Cognito::IdentityPool\n      Properties:\n        CognitoStreams:\n          StreamName:\n            Ref: CognitoStream\n    ...\n\n  Outputs:\n    identityPoolId:\n      Value: \n        Ref: IdentityPool\n    identityPoolName:\n      Value: \n        Fn::GetAtt: [ IdentityPool, Name ]\n```", "```js\nmodule.exports.trigger = (event, context, cb) => {\n  _(event.Records)\n    .flatMap(recordToSync)\n    .map(toEvent)\n    .flatMap(publish)\n    .collect().toCallback(cb);\n};\n\nconst recordToSync = r => {\n  const data = JSON.parse(Buffer.from(r.kinesis.data, 'base64'));\n  return _(data.kinesisSyncRecords.map(sync => ({\n    record: r,\n    data: data,\n    sync: sync,\n    thing: JSON.parse(sync.value)\n  })));\n}\n\nconst toEvent = uow => ({\n  id: uuid.v1(),\n  type: `thing-created`,\n  timestamp: uow.sync.lastModifiedDate,\n  partitionKey: uow.thing.id,\n  tags: {\n    region: uow.record.awsRegion,\n    identityPoolId: uow.data.identityPoolId,\n    datasetName: uow.data.datasetName\n  },\n  thing: {\n      identityId: uow.data.identityId, // the end user\n      ...uow.thing,\n  },\n  raw: uow.sync\n});\n\n...\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-db-first-cognito@1.0.0 dp:lcl <path-to-your-workspace>/cncb-db-first-cognito\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nfunctions:\n  trigger: cncb-db-first-cognito-john-trigger\n\nStack Outputs\nidentityPoolName: IdentityPool_P6awUWzjQH0y\nidentityPoolId: us-east-1:e51ba12c-75c2-4548-868d-2d023eb9398b\n...\n```", "```js\n$ sls logs -f trigger -r us-east-1 -s $MY_STAGE\n\nSTART ...\n2018-04-19 00:50:15 ... {\"id\":\"2714e290-438d-11e8-b3de-2bf7e0b964a2\",\"type\":\"thing-created\",\"timestamp\":1524113413268,\"partitionKey\":\"fd398c3b-8199-fd26-8c3c-156bb7ae8feb\",\"tags\":{\"region\":\"us-east-1\",\"identityPoolId\":\"us-east-1:e51ba12c-75c2-4548-868d-2d023eb9398b\",\"datasetName\":\"things\"},\"thing\":{\"identityId\":\"us-east-1:28a2c685-2822-472e-b42a-f7bd1f02545a\",\"id\":\"fd398c3b-8199-fd26-8c3c-156bb7ae8feb\",\"name\":\"thing six\",\"description\":\"the sixth thing\"},\"raw\":{\"key\":\"thing\",\"value\":\"{\\\"id\\\":\\\"fd398c3b-8199-fd26-8c3c-156bb7ae8feb\\\",\\\"name\\\":\\\"thing six\\\",\\\"description\\\":\\\"the sixth thing\\\"}\",\"syncCount\":1,\"lastModifiedDate\":1524113413268,\"deviceLastModifiedDate\":1524113410528,\"op\":\"replace\"}}\n2018-04-19 00:50:15 ... params: {\"StreamName\":\"john-cncb-event-stream-s1\",\"PartitionKey\":\"fd398c3b-8199-fd26-8c3c-156bb7ae8feb\",\"Data\":{\"type\":\"Buffer\",\"data\":[...]}}\nEND ...\nREPORT ... Duration: 217.22 ms    Billed Duration: 300 ms ... Max Memory Used: 40 MB    \n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch2/materialized-view-dynamodb --path cncb-materialized-view-dynamodb\n```", "```js\nservice: cncb-materialized-view-dynamodb\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    ...\n  environment:\n    TABLE_NAME:\n      Ref: Table\n\nfunctions:\n  listener:\n    handler: handler.listener\n    events:\n      - stream:\n          type: kinesis\n          arn: ${cf:cncb-event-stream-${opt:stage}.streamArn}\n          ...\n  query:\n    handler: handler.query\n\nresources:\n  Resources:\n    Table:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${opt:stage}-${self:service}-things\n        AttributeDefinitions:\n          ...\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ...\n```", "```js\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToEvent)\n    .filter(forThingCreated)\n    .map(toThing)\n    .flatMap(put)\n    .collect()\n    .toCallback(cb);\n};\n\n...\nconst forThingCreated = e => e.type === 'thing-created';\n\nconst toThing = event => ({\n  id: event.thing.new.id,\n  name: event.thing.new.name,\n  description: event.thing.new.description,\n  asOf: event.timestamp,\n});\n\nconst put = thing => {\n  const params = {\n    TableName: process.env.TABLE_NAME,\n    Item: thing,\n  };\n\n  const db = new aws.DynamoDB.DocumentClient();\n  return _(db.put(params).promise());\n};\n\nmodule.exports.query = (id, context, callback) => {\n  const params = {\n    TableName: process.env.TABLE_NAME,\n    Key: {\n      id: id,\n    },\n  };\n\n  const db = new aws.DynamoDB.DocumentClient();\n  db.get(params, callback);\n};\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-materialized-view-dynamodb@1.0.0 dp:lcl <path-to-your-workspace>/cncb-materialized-view-dynamodb\n> sls deploy -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nfunctions:\n  listener: cncb-materialized-view-dynamodb-john-listener\n  query: cncb-materialized-view-dynamodb-john-query\n```", "```js\n$ cd <path-to-your-workspace>/cncb-event-stream\n$ sls invoke -r us-east-1 -f publish -s $MY_STAGE -d '{\"type\":\"thing-created\",\"thing\":{\"new\":{\"name\":\"thing two\",\"id\":\"22222222-2222-2222-2222-222222222222\"}}}'\n{\n \"ShardId\": \"shardId-000000000000\",\n \"SequenceNumber\": \"49583553996455686705785668952916415462701426537440215042\"\n}\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE\nSTART ...\n2018-04-17 00:54:48 ... event: {\"Records\":[...]}\n2018-04-17 00:54:48 ... {\"id\":\"39070dc13de0eb76548506a977d4134c\",\"type\":\"thing-created\",\"timestamp\":1523939340000,\"tags\":{\"region\":\"us-east-1\"},\"thing\":{\"new\":{\"name\":\"thing two\",\"id\":\"22222222-2222-2222-2222-222222222222\"}}}\n2018-04-17 00:54:48 ... params: {\"TableName\":\"john-cncb-materialized-view-dynamodb-things\",\"Item\":{\"id\":\"22222222-2222-2222-2222-222222222222\",\"name\":\"thing two\",\"asOf\":1523939340000}}\nEND ...\nREPORT ... Duration: 306.17 ms    Billed Duration: 400 ms ... Max Memory Used: 36 MB    \n```", "```js\n$ sls invoke -r us-east-1 -f query -s $MY_STAGE -d 22222222-2222-2222-2222-222222222222\n{\n    \"Item\": {\n        \"id\": \"22222222-2222-2222-2222-222222222222\",\n        \"name\": \"thing two\",\n        \"asOf\": 1523939340000\n    }\n}\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch2/materialized-view-s3 --path cncb-materialized-view-s3\n```", "```js\nservice: cncb-materialized-view-s3\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    ...\n\nfunctions:\n  listener:\n    handler: handler.listener\n    events:\n      - stream:\n          type: kinesis\n          arn: ${cf:cncb-event-stream-${opt:stage}.streamArn}\n          ...\n    environment:\n      BUCKET_NAME:\n        Ref: Bucket\n\nresources:\n  Resources:\n    Bucket:\n      Type: AWS::S3::Bucket\n\n  Outputs:\n    BucketName:\n      Value:\n        Ref: Bucket\n    BucketDomainName:\n      Value:\n        Fn::GetAtt: [ Bucket, DomainName ]\n```", "```js\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToEvent)\n    .filter(forThingCreated)\n    .map(toThing)\n    .flatMap(put)\n    .collect()\n    .toCallback(cb);\n};\n\n...\nconst forThingCreated = e => e.type === 'thing-created';\n\nconst toThing = event => ({\n  id: event.thing.new.id,\n  name: event.thing.new.name,\n  description: event.thing.new.description,\n  asOf: event.timestamp,\n});\n\nconst put = thing => {\n  const params = {\n    Bucket: process.env.BUCKET_NAME,\n    Key: `things/${thing.id}`,\n    ACL: 'public-read',\n    ContentType: 'application/json',\n    CacheControl: 'max-age=300',\n    Body: JSON.stringify(thing),\n  };\n\n  const s3 = new aws.S3();\n  return _(s3.putObject(params).promise());\n};\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-materialized-view-s3@1.0.0 dp:lcl <path-to-your-workspace>/cncb-materialized-view-s3\n> sls deploy -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nfunctions:\n  listener: cncb-materialized-view-s3-john-listener\n\nStack Outputs\nBucketName: cncb-materialized-view-s3-john-bucket-1pp3d4c2z99kt\nBucketDomainName: cncb-materialized-view-s3-john-bucket-1pp3d4c2z99kt.s3.amazonaws.com\n...\n```", "```js\n$ cd <path-to-your-workspace>/cncb-event-stream\n$ sls invoke -r us-east-1 -f publish -s $MY_STAGE -d '{\"type\":\"thing-created\",\"thing\":{\"new\":{\"name\":\"thing three\",\"id\":\"33333333-3333-3333-3333-333333333333\"}}}'\n{\n    \"ShardId\": \"shardId-000000000000\",\n    \"SequenceNumber\": \"49583553996455686705785668952918833314346020725338406914\"\n}\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE\nSTART ...\n2018-04-17 22:49:20 ... event: {\"Records\":[...]}\n2018-04-17 22:49:20 ... {\"type\":\"thing-created\",\"thing\":{\"new\":{\"name\":\"thing three\",\"id\":\"33333333-3333-3333-3333-333333333333\"}},\"id\":\"16a7b930-42b3-11e8-8700-a918e007d88a\",\"partitionKey\":\"3de89e9d-c48d-4255-84fc-6c1b7e3f8b90\",\"timestamp\":1524019758148,\"tags\":{\"region\":\"us-east-1\"}}\n2018-04-17 22:49:20 ... params: {\"Bucket\":\"cncb-materialized-view-s3-john-bucket-1pp3d4c2z99kt\",\"Key\":\"things/33333333-3333-3333-3333-333333333333\",\"ACL\":\"public-read\",\"ContentType\":\"application/json\",\"CacheControl\":\"max-age=300\",\"Body\":\"{\\\"id\\\":\\\"33333333-3333-3333-3333-333333333333\\\",\\\"name\\\":\\\"thing three\\\",\\\"asOf\\\":1524019758148}\"}\n2018-04-17 22:49:20 ... {\"ETag\":\"\\\"edfee997659a520994ed18b82255be2a\\\"\"}\nEND ...\nREPORT ... Duration: 167.66 ms    Billed Duration: 200 ms ... Max Memory Used: 36 MB    \n```", "```js\n$ curl https://s3.amazonaws.com/cncb-materialized-view-s3-$MY_STAGE-bucket-<bucket-suffix>/things/33333333-3333-3333-3333-333333333333 | json_pp\n{\n \"asOf\" : 1524019758148,\n \"name\" : \"thing three\",\n \"id\" : \"33333333-3333-3333-3333-333333333333\"\n}\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch2/materialized-view-es --path cncb-materialized-view-es\n```", "```js\nservice: cncb-materialized-view-es\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    ...\n  environment:\n    DOMAIN_ENDPOINT:\n      Fn::GetAtt: [ Domain, DomainEndpoint ]\n\n...\n\nfunctions:\n  listener:\n    handler: handler.listener\n    events:\n      - stream:\n          type: kinesis\n          arn: ${cf:cncb-event-stream-${opt:stage}.streamArn}\n          ...\n  search:\n    handler: handler.search\n\nresources:\n  Resources:\n    Domain:\n      Type: AWS::Elasticsearch::Domain\n      Properties:\n        ...\n\n  Outputs:\n    DomainName:\n      Value:\n        Ref: Domain\n    DomainEndpoint:\n      Value:\n        Fn::GetAtt: [ Domain, DomainEndpoint ]\n```", "```js\nconst client = require('elasticsearch').Client({\n  hosts: [`https://${process.env.DOMAIN_ENDPOINT}`],\n  connectionClass: require('http-aws-es'),\n  log: 'trace',\n});\n\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToEvent)\n    .filter(forThingCreated)\n    .map(toThing)\n    .flatMap(index)\n    .collect()\n    .toCallback(cb);\n};\n\n...\nconst forThingCreated = e => e.type === 'thing-created';\n\nconst toThing = event => ({\n  id: event.thing.new.id,\n  name: event.thing.new.name,\n  description: event.thing.new.description,\n  asOf: event.timestamp,\n});\n\nconst index = thing => {\n  const params = {\n    index: 'things',\n    type: 'thing',\n    id: thing.id,\n    body: thing,\n  };\n\n  return _(client.index(params));\n};\n\nmodule.exports.search = (query, context, callback) => {\n  const params = {\n    index: 'things',\n    q: query,\n  };\n\n  client.search(params, callback);\n};\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-materialized-view-es@1.0.0 dp:lcl <path-to-your-workspace>/cncb-materialized-view-es\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nfunctions:\n  listener: cncb-materialized-view-es-john-listener\n  search: cncb-materialized-view-es-john-search\n\nStack Outputs\n...\nDomainEndpoint: search-cncb-ma-domain-gw419rzj26hz-p2g37av7sdlltosbqhag3qhwnq.us-east-1.es.amazonaws.com\nDomainName: cncb-ma-domain-gw419rzj26hz\n...\n```", "```js\n$ cd <path-to-your-workspace>/cncb-event-stream\n$ $ sls invoke -r us-east-1 -f publish -s $MY_STAGE -d '{\"type\":\"thing-created\",\"thing\":{\"new\":{\"name\":\"thing four\",\"id\":\"44444444-4444-4444-4444-444444444444\"}}}'\n\n{\n    \"ShardId\": \"shardId-000000000000\",\n    \"SequenceNumber\": \"49583655996852917476267785004768832452002332571160543234\"\n}\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE\n\nSTART ...\n2018-04-19 01:54:33 ... {\"type\":\"thing-created\",\"thing\":{\"new\":{\"name\":\"thing four\",\"id\":\"44444444-4444-4444-4444-444444444444\"}},\"id\":\"0e1a68c0-4395-11e8-b455-8144cebc5972\",\"partitionKey\":\"8082a69c-00ee-4388-9697-c590c523c061\",\"timestamp\":1524116810060,\"tags\":{\"region\":\"us-east-1\"}}\n2018-04-19 01:54:33 ... params: {\"index\":\"things\",\"type\":\"thing\",\"id\":\"44444444-4444-4444-4444-444444444444\",\"body\":{\"id\":\"44444444-4444-4444-4444-444444444444\",\"name\":\"thing four\",\"asOf\":1524116810060}}\n2018-04-19 01:54:33 ... {\"_index\":\"things\",\"_type\":\"thing\",\"_id\":\"44444444-4444-4444-4444-444444444444\",\"_version\":1,\"result\":\"created\",\"_shards\":{\"total\":2,\"successful\":1,\"failed\":0},\"_seq_no\":0,\"_primary_term\":1}\nEND ...\nREPORT ... Duration: 31.00 ms    Billed Duration: 100 ms ... Max Memory Used: 42 MB    \n```", "```js\n$ sls invoke -r us-east-1 -f search -s $MY_STAGE -d four\n\n{\n    ...\n    \"hits\": {\n        \"total\": 1,\n        \"max_score\": 0.2876821,\n        \"hits\": [\n            {\n                \"_index\": \"things\",\n                \"_type\": \"thing\",\n                \"_id\": \"44444444-4444-4444-4444-444444444444\",\n                \"_score\": 0.2876821,\n                \"_source\": {\n                    \"id\": \"44444444-4444-4444-4444-444444444444\",\n                    \"name\": \"thing four\",\n                    \"asOf\": 1524116810060\n                }\n            }\n        ]\n    }\n}\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch2/materialized-view-cognito --path cncb-materialized-view-cognito\n```", "```js\nservice: cncb-materialized-view-cognito\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    ...\n\nfunctions:\n  listener:\n    handler: handler.listener\n    events:\n      - stream:\n          type: kinesis\n          arn: ${cf:cncb-event-stream-${opt:stage}.streamArn}\n          ...\n    environment:\n      IDENTITY_POOL_ID:\n        Ref: IdentityPool\n\nresources:\n  Resources:\n    IdentityPool:\n      Type: AWS::Cognito::IdentityPool\n      ...\n\n  Outputs:\n    identityPoolId:\n      Value: \n        Ref: IdentityPool\n    identityPoolName:\n      Value: \n        Fn::GetAtt: [ IdentityPool, Name ]\n```", "```js\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToEvent)\n    .filter(forThingCreated)\n    .map(toThing)\n    .flatMap(put)\n    .collect()\n    .toCallback(cb);\n};\n\n...\nconst forThingCreated = e => e.type === 'thing-created';\n\nconst toThing = event => ({\n  id: event.thing.new.id,\n  name: event.thing.new.name,\n  description: event.thing.new.description,\n  identityId: event.thing.new.identityId, // the end user\n  asOf: event.timestamp,\n});\n\nconst put = thing => {\n  const params = {\n    IdentityPoolId: process.env.IDENTITY_POOL_ID,\n    IdentityId: thing.identityId,\n    DatasetName: 'things',\n  };\n\n  const cognitosync = new aws.CognitoSync();\n\n  return _(\n    cognitosync.listRecords(params).promise()\n      .then(data => {\n        params.SyncSessionToken = data.SyncSessionToken;\n        params.RecordPatches = [{\n          Key: 'thing',\n          Value: JSON.stringify(thing),\n          Op: 'replace',\n          SyncCount: data.DatasetSyncCount,\n        }];\n\n        return cognitosync.updateRecords(params).promise()\n      })\n  );\n};\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-materialized-view-cognito@1.0.0 dp:lcl <path-to-your-workspace>/cncb-materialized-view-cognito\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nfunctions:\n  listener: cncb-materialized-view-cognito-john-listener\n\nStack Outputs\nidentityPoolName: IdentityPool_c0GbzyVSh3Ws\nidentityPoolId: us-east-1:3a07e120-f1d8-4c85-9c34-0f908f2a21a1\n...\n```", "```js\n$ cd <path-to-your-workspace>/cncb-event-stream\n$ sls invoke -r us-east-1 -f publish -s $MY_STAGE -d '{\"type\":\"thing-created\",\"thing\":{\"new\":{\"name\":\"thing five\",\"id\":\"55555555-5555-5555-5555-555555555555\", \"identityId\":\"<identityId from previous step>\"}}}'\n\n{\n    \"ShardId\": \"shardId-000000000000\",\n    \"SequenceNumber\": \"49583655996852917476267784847452524471369889169788633090\"\n}\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE\n\nSTART ...\n2018-04-19 00:18:42 ... {\"type\":\"thing-created\",\"thing\":{\"new\":{\"name\":\"thing five\",\"id\":\"55555555-5555-5555-5555-555555555555\",\"identityId\":\"us-east-1:ee319396-fec4-424d-aa19-71ee751624d1\"}},\"id\":\"bda76e80-4388-11e8-a845-5902692b9264\",\"partitionKey\":\"c9d4e9e5-d33f-4907-9a7a-af03710fa50f\",\"timestamp\":1524111521129,\"tags\":{\"region\":\"us-east-1\"}}\n2018-04-19 00:18:42 ... params: {\"IdentityPoolId\":\"us-east-1:3a07e120-f1d8-4c85-9c34-0f908f2a21a1\",\"IdentityId\":\"us-east-1:ee319396-fec4-424d-aa19-71ee751624d1\",\"DatasetName\":\"things\"}\n2018-04-19 00:18:43 ... {\"Records\":[{\"Key\":\"thing\",\"Value\":\"{\\\"id\\\":\\\"55555555-5555-5555-5555-555555555555\\\",\\\"name\\\":\\\"thing five\\\",\\\"asOf\\\":1524111521129,\\\"identityId\\\":\\\"us-east-1:ee319396-fec4-424d-aa19-71ee751624d1\\\"}\",\"SyncCount\":1,\"LastModifiedDate\":\"2018-04-19T04:18:42.978Z\",\"LastModifiedBy\":\"123456789012\",\"DeviceLastModifiedDate\":\"2018-04-19T04:18:42.978Z\"}]}\nEND ...\nREPORT ... Duration: 340.94 ms    Billed Duration: 400 ms ... Max Memory Used: 33 MB    \n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch2/replaying-events --path cncb-replaying-events\n```", "```js\nexports.command = 'replay [bucket] [prefix]'\nexports.desc = 'Replay the events in [bucket] for [prefix]'\n\nconst _ = require('highland');\nconst lodash = require('lodash');\nconst aws = require('aws-sdk');\naws.config.setPromisesDependency(require('bluebird'));\n\nexports.builder = {\n    bucket: {\n        alias: 'b',\n    },\n    prefix: {\n        alias: 'p',\n    },\n    function: {\n        alias: 'f',\n    },\n    dry: {\n        alias: 'd',\n        default: true,\n        type: 'boolean'\n    },\n    region: {\n        alias: 'r',\n        default: 'us-east-1'\n    },\n}\n\nexports.handler = (argv) => {\n    aws.config.logger = process.stdout;\n    aws.config.region = argv.region;\n\n    const s3 = new aws.S3();\n    const lambda = new aws.Lambda();\n\n    paginate(s3, argv)\n        .flatMap(obj => get(s3, argv, obj))\n        .flatMap(event => invoke(lambda, argv, event))\n        .collect()\n        .each(list => console.log('count:', list.length));\n}\n\nconst paginate = (s3, options) => {\n    let marker = undefined;\n\n    return _((push, next) => {\n        const params = {\n            Bucket: options.bucket,\n            Prefix: options.prefix,\n            Marker: marker // paging indicator\n        };\n\n        s3.listObjects(params).promise()\n            .then(data => {\n                if (data.IsTruncated) {\n                    marker = lodash.last(data.Contents)['Key'];\n                } else {\n                    marker = undefined;\n                }\n\n                data.Contents.forEach(obj => {\n                    push(null, obj);\n                })\n            })\n            .catch(err => {\n                push(err, null);\n            })\n            .finally(() => {\n                if (marker) { // indicates more pages\n                    next();\n                } else {\n                    push(null, _.nil);\n                }\n            })\n    });\n}\n\nconst get = (s3, options, obj) => {\n    const params = {\n        Bucket: options.b,\n        Key: obj.Key\n    };\n\n    return _(\n        s3.getObject(params).promise()\n            .then(data => Buffer.from(data.Body).toString())\n    )\n        .split() // EOL we added in data lake recipe transformer\n        .filter(line => line.length != 0)\n        .map(JSON.parse);\n}\n\nconst invoke = (lambda, options, event) => {\n    let payload = {\n        Records: [\n            {\n                kinesis: {\n                    partitionKey: event.kinesisRecordMetadata.partitionKey,\n                    sequenceNumber: event.kinesisRecordMetadata.sequenceNumber,\n                    data: Buffer.from(JSON.stringify(event.event)).toString('base64'),\n                    kinesisSchemaVersion: '1.0',\n                },\n                eventID: `${event.kinesisRecordMetadata.shardId}:${event.kinesisRecordMetadata.sequenceNumber}`,\n                eventName: 'aws:kinesis:record',\n                eventSourceARN: event.firehoseRecordMetadata.deliveryStreamArn,\n                eventSource: 'aws:kinesis',\n                eventVersion: '1.0',\n                awsRegion: event.firehoseRecordMetadata.region,\n            }\n        ]\n    };\n\n    payload = Buffer.from(JSON.stringify(payload));\n\n    const params = {\n        FunctionName: options.function,\n        InvocationType: options.dry ? 'DryRun' : \n           payload.length <= 100000 ? 'Event' : 'RequestResponse',\n        Payload: payload,\n    };\n\n    return _(\n        lambda.invoke(params).promise()\n    );\n}\n```", "```js\n$ node index.js replay -b cncb-data-lake-s3-john-bucket-396po814rlai -p john-cncb-event-stream-s1 -f cncb-replaying-events-john-listener -dry false\n[AWS s3 200 0.288s 0 retries] listObjects({ Bucket: 'cncb-data-lake-s3-john-bucket-396po814rlai',\n  Prefix: 'john-cncb-event-stream-s1',\n  Marker: undefined })\n[AWS s3 200 0.199s 0 retries] getObject({ Bucket: 'cncb-data-lake-s3-john-bucket-396po814rlai',\n  Key: 'john-cncb-event-stream-s1/2018/04/08/03/cncb-data-lake-s3-john-DeliveryStream-13N6LEC9XJ6DZ-3-2018-04-08-03-53-28-d79d6893-aa4c-4845-8964-61256ffc6496' })\n[AWS lambda 202 0.199s 0 retries] invoke({ FunctionName: 'cncb-replaying-events-john-listener',\n  InvocationType: 'Event',\n  Payload: '***SensitiveInformation***' })\n[AWS lambda 202 0.151s 0 retries] invoke({ FunctionName: 'cncb-replaying-events-john-listener',\n  InvocationType: 'Event',\n  Payload: '***SensitiveInformation***' })\n[AWS lambda 202 0.146s 0 retries] invoke({ FunctionName: 'cncb-replaying-events-john-listener',\n  InvocationType: 'Event',\n  Payload: '***SensitiveInformation***' })\ncount: 3\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE\nSTART ...\n2018-04-17 23:43:14 ... event: {\"Records\":[{\"kinesis\":{\"partitionKey\":\"ccfd67c3-a266-4dec-9576-ae5ea228a79c\",\"sequenceNumber\":\"49583337208235522365774435506752843085880683263405588482\",\"data\":\"...\",\"kinesisSchemaVersion\":\"1.0\"},\"eventID\":\"shardId-000000000000:49583337208235522365774435506752843085880683263405588482\",\"eventName\":\"aws:kinesis:record\",\"eventSourceARN\":\"arn:aws:firehose:us-east-1:123456789012:deliverystream/cncb-data-lake-s3-john-DeliveryStream-13N6LEC9XJ6DZ\",\"eventSource\":\"aws:kinesis\",\"eventVersion\":\"1.0\",\"awsRegion\":\"us-east-1\"}]}\nEND ...\nREPORT ... Duration: 10.03 ms    Billed Duration: 100 ms ... Max Memory Used: 20 MB    \n\n...  \n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch2/data-lake-es --path cncb-data-lake-es\n```", "```js\nservice: cncb-data-lake-es\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n\nplugins:\n  - elasticsearch\n\nfunctions:\n  transformer:\n    handler: handler.transform\n    timeout: 120\n\nresources:\n  Resources:\n    Domain:\n      Type: AWS::Elasticsearch::Domain\n      Properties:\n        ...\n\n    DeliveryStream:\n      Type: AWS::KinesisFirehose::DeliveryStream\n      Properties: \n        DeliveryStreamType: KinesisStreamAsSource      \n        KinesisStreamSourceConfiguration: \n          KinesisStreamARN: ${cf:cncb-event-stream-${opt:stage}.streamArn}\n          ...\n        ElasticsearchDestinationConfiguration: \n          DomainARN: \n            Fn::GetAtt: [ Domain, DomainArn ]\n          IndexName: events\n          IndexRotationPeriod: OneDay\n          TypeName: event\n          BufferingHints: \n            IntervalInSeconds: 60\n            SizeInMBs: 50\n          RetryOptions: \n            DurationInSeconds: 60\n          ...\n          ProcessingConfiguration: ${file(includes.yml):ProcessingConfiguration}\n\n    Bucket:\n      Type: AWS::S3::Bucket\n\n    ...\n\n  Outputs:\n    ...\n    DomainEndpoint:\n      Value:\n        Fn::GetAtt: [ Domain, DomainEndpoint ]\n    KibanaEndpoint:\n      Value:\n        Fn::Join:\n          - ''\n          - - Fn::GetAtt: [ Domain, DomainEndpoint ]\n            - '/_plugin/kibana'\n    ...\n```", "```js\nexports.transform = (event, context, callback) => {\n  const output = event.records.map((record, i) => {\n    // store all available data\n    const uow = {\n      event: JSON.parse((Buffer.from(record.data, 'base64')).toString('utf8')),\n      kinesisRecordMetadata: record.kinesisRecordMetadata,\n      firehoseRecordMetadata: {\n        deliveryStreamArn: event.deliveryStreamArn,\n        region: event.region,\n        invocationId: event.invocationId,\n        recordId: record.recordId,\n        approximateArrivalTimestamp: record.approximateArrivalTimestamp,\n      }\n    };\n\n    return {\n      recordId: record.recordId,\n      result: 'Ok',\n      data: Buffer.from(JSON.stringify(uow), 'utf-8').toString('base64'),\n    };\n  });\n\n  callback(null, { records: output });\n};\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-data-lake-es@1.0.0 dp:lcl <path-to-your-workspace>/cncb-data-lake-es\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nfunctions:\n  transformer: cncb-data-lake-es-john-transformer\n\nStack Outputs\nDeliveryStream: cncb-data-lake-es-john-DeliveryStream-1ME9ZI78H3347\nDomainEndpoint: search-cncb-da-domain-5qx46izjweyq-oehy3i3euztbnog4juse3cmrs4.us-east-1.es.amazonaws.com\nDeliveryStreamArn: arn:aws:firehose:us-east-1:123456789012:deliverystream/cncb-data-lake-es-john-DeliveryStream-1ME9ZI78H3347\nKibanaEndpoint: search-cncb-da-domain-5qx46izjweyq-oehy3i3euztbnog4juse3cmrs4.us-east-1.es.amazonaws.com/_plugin/kibana\nDomainArn: arn:aws:es:us-east-1:123456789012:domain/cncb-da-domain-5qx46izjweyq\n...\n```", "```js\n$ cd <path-to-your-workspace>/cncb-event-stream\n$ sls invoke -r us-east-1 -f publish -s $MY_STAGE -d '{\"type\":\"thing-created\"}'\n\n{\n \"ShardId\": \"shardId-000000000000\",\n \"SequenceNumber\": \"49583655996852917476267785049074754815059037929823272962\"\n}\n```", "```js\n$ sls logs -f transformer -r us-east-1 -s $MY_STAGE   \n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch2/bi-directional-sync --path cncb-1-bi-directional-sync\n\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch2/bi-directional-sync --path cncb-2-bi-directional-sync\n```", "```js\nservice: cncb-1-bi-directional-sync\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    ...\n  environment:\n    SERVERLESS_PROJECT: ${self:service}\n    ...\n\nfunctions:\n  command:\n    handler: handler.command\n  trigger:\n    handler: handler.trigger\n    events:\n      - stream:\n          type: dynamodb\n          ...\n  listener:\n    handler: handler.listener\n    events:\n      - stream:\n          type: kinesis\n          ...\n  query:\n    handler: handler.query\n\nresources:\n  Resources:\n    Table:\n      ...\n```", "```js\nmodule.exports.command = (request, context, callback) => {\n  const thing = {\n    id: uuid.v4(),\n    latch: 'open',\n    ...request,\n  };\n\n  ...\n  db.put(params, callback);\n};\n\nmodule.exports.trigger = (event, context, cb) => {\n  _(event.Records)\n    .filter(forLatchOpen)\n    .map(toEvent)\n    .flatMap(publish)\n    .collect()\n    .toCallback(cb);\n};\n\nconst forLatchOpen = e => e.dynamodb.NewImage.latch.S === 'open';\n\nconst toEvent = record => ({\n  id: record.eventID,\n  ...\n  tags: {\n    region: record.awsRegion,\n    source: process.env.SERVERLESS_PROJECT\n  },\n  thing: ...,\n});\n\n...\n\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToEvent)\n    .filter(forSourceNotSelf)\n    .filter(forThingCrud)\n    .map(toThing)\n    .flatMap(put)\n    .collect()\n    .toCallback(cb);\n};\n\n...\nconst forSourceNotSelf = e => e.tags.source != process.env.SERVERLESS_PROJECT;\n...\n\nconst toThing = event => ({\n  id: event.thing.new.id,\n  ...\n  latch: 'closed',\n});\n\n...\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-1-bi-directional-sync@1.0.0 dp:lcl <path-to-your-workspace>/cncb-1-bi-directional-sync\n> sls deploy -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nfunctions:\n  command: cncb-1-bi-directional-sync-john-command\n  trigger: cncb-1-bi-directional-sync-john-trigger\n  listener: cncb-1-bi-directional-sync-john-listener\n  query: cncb-1-bi-directional-sync-john-query\n```", "```js\n$ sls invoke -r us-east-1 -f command -s $MY_STAGE -d '{\"id\":\"77777777-7777-7777-7777-777777777777\",\"name\":\"thing seven\"}'\n```", "```js\n$ sls logs -f command -r us-east-1 -s $MY_STAGE\n\nSTART ...\n2018-04-24 02:02:11 ... event: {\"id\":\"77777777-7777-7777-7777-777777777777\",\"name\":\"thing seven\"}\n2018-04-24 02:02:11 ... params: {\"TableName\":\"john-cncb-1-bi-directional-sync-things\",\"Item\":{\"id\":\"77777777-7777-7777-7777-777777777777\",\"latch\":\"open\",\"name\":\"thing seven\"}}\nEND ...\nREPORT ... Duration: 146.90 ms    Billed Duration: 200 ms ... Max Memory Used: 40 MB    \n\n$ sls logs -f trigger -r us-east-1 -s $MY_STAGE\nSTART ...\n2018-04-24 02:02:13 ... event: {\"Records\":[{\"eventID\":\"494ec22686941c0d5ff56dee86df47dd\",\"eventName\":\"INSERT\",...,\"Keys\":{\"id\":{\"S\":\"77777777-7777-7777-7777-777777777777\"}},\"NewImage\":{\"name\":{\"S\":\"thing seven\"},\"id\":{\"S\":\"77777777-7777-7777-7777-777777777777\"},\"latch\":{\"S\":\"open\"}},...},...}]}\n2018-04-24 02:02:13 ... {\"id\":\"494ec22686941c0d5ff56dee86df47dd\",\"type\":\"thing-created\",...,\"tags\":{\"region\":\"us-east-1\",\"source\":\"cncb-1-bi-directional-sync\"},\"thing\":{\"new\":{\"name\":\"thing seven\",\"id\":\"77777777-7777-7777-7777-777777777777\",\"latch\":\"open\"}}}\n...\nEND ...\nREPORT ... Duration: 140.20 ms    Billed Duration: 200 ms ... Max Memory Used: 35 MB    \n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE\n\n$ sls logs -f trigger -r us-east-1 -s $MY_STAGE\n```", "```js\n$ sls invoke -r us-east-1 -f query -s $MY_STAGE -d 77777777-7777-7777-7777-777777777777\n```"]