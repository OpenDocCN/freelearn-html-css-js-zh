["```js\n{\n  \"name\": \"building\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```", "```js\nnpm install gulp --global\nnpm install gulp --save-dev\n\n```", "```js\n  \"devDependencies\": {\n    \"gulp\": \"^3.8.10\"\n  }\n```", "```js\n\"use strict\";\nvar fs = require('fs');\nvar gulp = require('gulp');\nvar buildDirectory = './build';\ngulp.task('default', function(cb) {\n  fs.exists(buildDirectory, function(yes) {\n    if(yes) {\n      return cb();\n    }\n    fs.mkdirSync(buildDirectory);\n    cb();\n  });\n});\n```", "```js\nUsing gulpfile ~/building/gulpfile.js\nStarting 'default'...\nFinished 'default' after 720 μs\n\n```", "```js\ngulp.task('initialize',function(cb) {\n  fs.exists(buildDirectory, function(yes) {\n    ...\n    cb();\n  });\n});\n\ngulp.task('default', ['initialize'], function() {\n  console.log('Build is complete');\n});\n```", "```js\ngulp.task('move', function() {\n  gulp\n  .src('./source/**')\n  .pipe(gulp.dest('./build'))\n});\n```", "```js\ngulp.task('default', ['initialize', 'move'], function() ...)\n```", "```js\nStarting 'initialize'...\nStarting 'move'...\nFinished 'move' after 3.66 ms\nFinished 'initialize' after 4.64 ms\nStarting 'default'...\nBuild is complete\nFinished 'default' after 19 μs\n```", "```js\ngulp.task('move', ['initialize'], function() {\n  ...\n});\n```", "```js\n\"use strict\";\n\n//  npm install coffee-script -> this is used for test task\nrequire('coffee-script/register');\n\nvar path = require('path');\nvar mkdirp = require('mkdirp');\nvar del  = require('del');\nvar source = require('vinyl-source-stream');\nvar buffer = require('vinyl-buffer');\nvar browserSync = require('browser-sync');\nvar gulp = require('gulp');\nvar coffee = require('gulp-coffee');\nvar coffeelint = require('gulp-coffeelint');\nvar sourcemaps = require('gulp-sourcemaps');\nvar changed = require('gulp-changed');\nvar concat = require('gulp-concat');\nvar handlebars = require('gulp-handlebars');\nvar browserify = require('browserify');\nvar sass = require('gulp-sass');\nvar wrap = require('gulp-wrap');\nvar mocha = require('gulp-mocha');\nvar uglify = require('gulp-uglify');\nvar minifyHTML = require('gulp-minify-html');\n\n//  A map of relevant source/build folders\nvar buildDir     = './build';\nvar sourceDir     = './source';\nvar s_scriptsDir   = './source/scripts';\nvar b_scriptsDir   = './build/js';\nvar s_stylesDir   = './source/styles';\nvar b_stylesDir   = './build/css';\nvar s_templatesDir   = './source/templates';\nvar b_templatesDir   = './build/templates';\nvar s_testsDir    = './source/tests';\n\n//  Clean out build directories before each build\ngulp.task('clean', function(cb) {\n  del([\n    path.join(b_scriptsDir, '**/*.js'),\n    path.join(b_stylesDir, '**/*.css'),\n    path.join(b_templatesDir, '*.js'),\n    path.join(buildDir, '*.html')\n  ], cb);\n});\ngulp.task('scaffold', ['clean'], function() {\n  mkdirp.sync(s_scriptsDir);\n  mkdirp.sync(b_scriptsDir);\n  mkdirp.sync(s_stylesDir);\n  mkdirp.sync(b_stylesDir);\n  mkdirp.sync(s_templatesDir);\n  mkdirp.sync(b_templatesDir);\n  mkdirp.sync(s_testsDir);\n});\n\n...\n\ngulp.task('default', [\n  'clean',\n  'scaffold',\n  'lint',\n  'scripts',\n  'styles',\n  'templates',\n  'browserify',\n  'views',\n  'test',\n  'watch',\n  'server'\n]);\n```", "```js\nbuild\n  css\n  js\n  templates\nsource\n  scripts\n  styles\n  templates\ntests\n```", "```js\ngulp.task('lint', ['scaffold'], function() {\n  return gulp.src(path.join(s_scriptsDir, '**/*.coffee'))\n  .pipe(coffeelint('./coffeelint.json'))\n  .pipe(coffeelint.reporter('default'))\n});\n```", "```js\ngulp.task('scripts', ['lint'], function() {\n  return gulp.src(path.join(s_scriptsDir, '**/*.coffee'))\n  .pipe(changed(b_scriptsDir, {extension: '.js'}))\n  .pipe(sourcemaps.init())\n  .pipe(coffee({bare: true}))\n  .pipe(sourcemaps.write())\n  .pipe(gulp.dest(b_scriptsDir))\n});\n```", "```js\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNhbXBsZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxJQUFBOztBQUFBLElBQUEsR0FBTyxxQkFBUCxDQUFBIiwiZmlsZSI6InNhbXBsZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImRheXMgPSBbMS4uN11cbiJdfQ==\n```", "```js\ngulp.task('styles', function() {\n  return gulp.src(path.join(s_stylesDir, '**/*.scss'))\n  .pipe(sass())\n  .pipe(concat('app.css'))\n  .pipe(gulp.dest(b_stylesDir));\n});\n```", "```js\n<ul>\n  {{#each days}}\n    <li>{{this}}</li>\n  {{/each}}\n</ul>\n```", "```js\ngulp.task('templates', function () {\n  return gulp.src(path.join(s_templatesDir, '/**/*.hbs'))\n  .pipe(handlebars())\n  .pipe(wrap('var Handlebars = require(\"handlebars/runtime\")[\"default\"];module.exports = Handlebars.template(<%= contents %>);'))\n  .pipe(gulp.dest(b_templatesDir));\n});\n```", "```js\nvar myTemplate = require(\"build/templates/myTemplate.js\");\n$(document.body).append(myTemplate({days: ['mon','tue','wed'...]}));\n```", "```js\ngulp.task('browserify', ['scripts', 'templates', 'views'], function() {\n  return browserify(b_scriptsDir + '/app.js')\n  .bundle()\n  // Converts browserify out to streaming vinyl file object\n  .pipe(source('app.js'))\n  // uglify needs conversion from streaming to buffered vinyl file object\n  .pipe(buffer())\n  .pipe(uglify())\n  .pipe(gulp.dest(b_scriptsDir));\n});\n```", "```js\n$ = require(\"jquery\")\ndays = require(\"../../build/js/sample.js\")\ncomplimentTemplate = require(\"../../build/templates/compliment.js\")\nhelloTemplate = require(\"../../build/templates/hello.js\")\ndaysTemplate = require(\"../../build/templates/days.js\")\n$ ->\n  $(\"#hello\").html helloTemplate(name: \"Dave\")\n  $(\"#compliment\").html complimentTemplate(compliment: \"You're great!\")\n  $(\"#days\").html daysTemplate(days: days)\n```", "```js\ngulp.task('views', ['scaffold'], function() {\n  return gulp.src(path.join(sourceDir, '*.html'))\n  .pipe(minifyHTML({\n    empty: true\n  }))\n  .pipe(gulp.dest(buildDir))\n});\n```", "```js\ngulp.task('server', ['test','watch'], function() {\n  browserSync({\n    notify: false,\n    port: 8080,\n    server: {\n      baseDir: buildDir\n    }\n  });\n});\n```", "```js\ngulp.task('test', ['browserify'], function() {\n  return gulp.src(path.join(s_testsDir, '**/*.coffee'), {\n    read: false\n  })\n  .pipe(coffee({bare: true}))\n  .pipe(mocha({\n  reporter: 'spec'\n  }));\n});\n```", "```js\ndays = require('../../build/js/sample.js')\nassert = require(\"assert\")\ndescribe \"days() data\", ->\n  it \"should have a length of 7\", ->\n    assert.equal days().length, 7\n```", "```js\ngulp.task('watch', ['scaffold'], function() {\n  gulp.watch(path.join(s_scriptsDir, '**/*'), [\n    'browserify', browserSync.reload\n  ]);\n  gulp.watch(path.join(s_templatesDir, '**/*'), [\n    'browserify', browserSync.reload\n  ]);\n  gulp.watch(path.join(s_stylesDir, '**/*'), [\n    'styles', browserSync.reload\n  ]);\n  gulp.watch(path.join(sourceDir, '*.html'), [\n    'views', browserSync.reload\n  ]);\n});\n```", "```js\n> node debug somescript.js\n\n```", "```js\nmyVar = 123;\nsetTimeout(function () {\n  debugger;\n  console.log(\"world\");\n}, 1000);\nconsole.log(\"hello\");\n```", "```js\n> node debug somescript.js\n< debugger listening on port 5858\nconnecting... ok\nbreak in debug-sample.js:1\n 1 myVar = 123;\n 2 setTimeout(function () {\n 3   debugger;\ndebug>\n\n```", "```js\n    ...\n    #3 Module._compile module.js:456:26\n    #4 Module._extensions..js module.js:474:10\n    #5 Module.load module.js:356:32\n    ... etc.\n    ```", "```js\ndebug> cont\n< hello // ... a pause of 1000 ms will now occur, then...\nbreak in debug-sample.js:3\n 1 myVar = 123;\n 2 setTimeout(function () {\n 3   debugger;\n 4   console.log(\"world\");\n 5 }, 1000);\ndebug>\n\n```", "```js\ndebug> repl\nPress Ctrl + C to leave debug repl\n> myVar\n123\n\n```", "```js\ndebug> cont\n< world\nprogram terminated\ndebug>\n\n```", "```js\ndebug> next\nbreak in timers.js:125\n 123\n 124   debug(msecs + ' list empty');\n 125   assert(L.isEmpty(list));\n 126   list.close();\n 127   delete lists[msecs];\ndebug> scripts\n* 37: timers.js\n 46: debug-sample.js\ndebug>\n\n```", "```js\n> require('assert').equal(1,2,\"Not equal!\")\nAssertionError: Not equal!\n at repl:1:20\n ...\n\n```", "```js\n> require('assert').equal(1,1,\"Not equal!\")\nundefined\n\n```", "```js\n1 == \"1\" // true\nfalse == \"0\" // true\nfalse == null // false\n```", "```js\n1 === \"1\" // false\nfalse === \"0\" // false\nfalse === null // false\n```", "```js\nvar a = function(){};\nvar b = new a;\nvar c = new a;\nvar d = b;\nconsole.log(a == function(){}) // false\nconsole.log(b == c) // false\nconsole.log(b == d) // true\nconsole.log(b.constructor === c.constructor); // true\n```", "```js\nvar a = [1,2,3];\nvar b = [1,2,3];\nassert.deepEqual(a, b);  // passes\nassert.strictEqual(a, b);  // throws AssertionError: [1,2,3] === [1,2,3]\n```", "```js\n> console.assert(1 == 2, \"Nope!\")\nAssertionError: Nope!\n\n```", "```js\nscripts\nspec\n  helpers\n```", "```js\nmocha ./spec --require ./spec/helpers/chai.js --reporter spec\n\n```", "```js\n describe(\"Test of Utility Class\", function() {\n  it(\"Running #date should return a date\", function(){\n    // Test date function\n  });\n  it(\"Running #parse should return JSON\", function() {\n    // Run some string through #parse\n  });\n});\n```", "```js\ndescribe(\"An asynchronous test\", function() {\n  it(\"Runs an async function\", function(done) {\n    // Run async test, and when finished call...\n    done();\n  });\n});\n```", "```js\ndescribe(\"Main block\", function() {\n  describe(\"Sub block\", function() {\n    it(\"Runs an async function\", function() {\n      // A test running in sub block\n    });\n  });\n  it(\"Runs an async function\", function() {\n    // A test running in main block\n  });\n});\n```", "```js\nvar chai = require('chai');\nchai.config.includeStack = true;\nglobal.sinon = require('sinon');\nglobal.expect = chai.expect;\nglobal.AssertionError = chai.AssertionError;\nglobal.Assertion = chai.Assertion;\n```", "```js\nexpect('hello').to.be.a('string')\nexpect({ foo: 'bar' }).to.have.property('foo')\nexpect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });\nexpect(true).to.not.be.false\nexpect(1).to.not.be.true\nexpect(5).to.be.at.least(10) // fails\n```", "```js\nvar Utils = function() {\n  this.capitalize = function(str) {\n    return str.split('').map(function(char) {\n      return char.toUpperCase();\n    }).join('');\n  };\n};\n```", "```js\ndescribe('Testing Utils', function() {\n  var utils = new Utils();\n  it('capitalizes a string', function() {\n    var result = utils.capitalize('foobar');\n    expect(result).to.be.a('string').and.equal('FOOBAR');\n  });\n});\n```", "```js\nvar sinon = require('sinon');\nvar argA = \"foo\";\nvar argB = \"bar\";\nvar callback = sinon.spy();\n\ncallback(argA);\ncallback(argB);\n\nconsole.log(\n  callback.called,\n  callback.callCount,\n  callback.calledWith(argA),\n  callback.calledWith(argB),\n  callback.calledWith('baz')\n);\n```", "```js\ntrue 2 true true false\n\n```", "```js\nvar redis = require(\"redis\");\nvar client1 = redis.createClient();\nvar client2 = redis.createClient();\n\n//  Testing this\nfunction nowPublish(channel, msg) {\n  client2.publish(channel, msg);\n};\ndescribe('Testing pub/sub', function() {\n  before(function() {\n    sinon.spy(client1, \"subscribe\");\n  });\n  after(function() {\n    client1.subscribe.restore();\n  });\n  it('tests that #subscribe works', function() {\n    client1.subscribe(\"channel\");\n    expect(client1.subscribe.calledOnce);\n  });\n  it('tests that #nowPublish works', function(done) {\n    var callback = sinon.spy();\n    client1.subscribe('channel', callback);\n    client1.on('subscribe', function() {\n      nowPublish('channel', 'message');\n      expect(callback.calledWith('message'));\n      expect(client1.subscribe.calledTwice);\n      done();\n    });\n  });\n});\n```", "```js\nhttp.get(\"http://www.example.org\", function(res) {\n  console.log(\"Got status: \" + res.statusCode);\n}).on('error', function(e) {\n  console.log(\"Got error: \" + e.message);\n});\n```", "```js\nvar http = require('http');\nvar sinon = require('sinon');\nsinon.stub(http, 'get').yields({\n  statusCode: 404\n});\n// This URL is never actually called\nhttp.get(\"http://www.example.org\", function(res) {\n  console.log(\"Got response: \" + res.statusCode);\n  http.get.restore();\n});\n```", "```js\nvar http = require('http');\nmodule.exports = function() {\n  this.makeCall = function(url, cb) {\n    http.get(url, function(res) {\n      cb(this.parseResponse(res));\n    }.bind(this))\n  }\n  this.parseResponse = function(res) {\n    if(!res.statusCode) {\n      throw new Error('No status code present');\n    }\n    switch(res.statusCode) {\n      case 200:\n      return 'handled';\n      break;\n      case 404:\n      return 'handled';\n      break;\n      default:\n      return 'not handled';\n      break;\n    }\n  }\n}\n```", "```js\nvar Caller = require('../scripts/Caller.js');\n\ndescribe('Testing endpoint responses', function() {\n  var caller = new Caller();\n  function setTestForCode(code) {\n    return function(done) {\n      sinon.stub(caller, 'makeCall').yields(caller.parseResponse({\n        statusCode: code\n      }));\n      caller.makeCall('anyURLWillDo', function(h) {\n        expect(h).to.be.a('string').and.equal('handled');\n        done();\n      });\n    }\n  }\n  afterEach(function() {\n    caller.makeCall.restore();\n  });\n  it('Tests 200 handling', setTestForCode(200));\n  it('Tests 404 handling', setTestForCode(404));\n  it('Tests 403 handling', setTestForCode(403));\n});\n```", "```js\nvar sinon = require('sinon');\nvar Utils = require('./Utils.js');\nvar utils = new Utils();\nvar arr = ['a','b','c','d','e'];\nvar mock = sinon.mock(utils);\n\n// Expectations\nmock.expects(\"capitalize\").exactly(5).withArgs.apply(sinon,arr);\n\narr.map(utils.capitalize);\nconsole.log(mock.verify());\n```", "```js\nExpectationError: Expected capitalize([...]) 5 times (called 4 times)\n\n```", "```js\nvar redis = require(\"redis\");\nvar client = redis.createClient();\n\ndescribe('Mocking pub/sub', function() {\n  var mock = sinon.mock(client);\n  mock.expects('subscribe').withExactArgs('channel').once();\n  it('tests that #subscribe is being called correctly', function() {\n    client.subscribe('channel');\n    expect(mock.verify()).to.be.true;\n  });\n});\n```", "```js\nExpectationError: Unexpected call: subscribe(channel)\n\n```", "```js\nvar page = require('webpage').create();\nvar system = require('system');\nvar fs = require('fs');\nvar twitterId = system.args[1];\n\npage.open(encodeURI(\"http://mobile.twitter.com/\" + twitterId), function(status) {\n  if(!status) {\n    throw new Error(\"Can't connect to Twitter!\");\n  }\n  var tweets = page.evaluate(function() {\n    var _tweets = [];\n    var coll = Array.prototype.slice.call(document.querySelectorAll('div.tweet-text'))\n    coll.forEach(function(tweet) {\n      _tweets.push(tweet.innerText);\n    });\n    return _tweets\n  });\n  fs.write(twitterId + '.json', JSON.stringify(tweets));\n  phantom.exit();\n});\n```", "```js\nphantomjs phantom-twitter.js kanyewest\n\n```", "```js\nvar phantom = require('phantom');\nphantom.create(function(ph) {\n  ph.createPage(function(page) {\n    page.open(\"http://www.example.org\", function(status) {\n      page.evaluate(function() {\n        return document.title;\n      }, function(title) {\n        console.log('Page title: ' + title);\n        ph.exit();\n      });\n    });\n  });\n});\n```", "```js\nPage title: Example Domain\n\n```", "```js\ncasper.start('http://example.org/', function() {\n  this.echo('Page title: ' + this.getTitle());\n});\ncasper.run();\n```", "```js\nPage title: Example Domain\n\n```", "```js\ncasper.start('http://google.com/', function() {\n  this\n  .thenEvaluate(function(term) {\n    document.querySelector('input[name=\"q\"]').setAttribute('value', term);\n    document.querySelector('form[name=\"f\"]').submit();\n  }, 'node.js')\n  .then(function() {\n    this.click('h3.r a');\n  })\n  .then(function() {\n    this.echo('New location: ' + this.getCurrentUrl());\n  });\n});\ncasper.run();\n```", "```js\nNew location: http://nodejs.org/\n\n```", "```js\ncasper.start('http://translate.google.com/', function() {\n  this\n  .sendKeys('#source', 'Ciao')\n  .waitForText('Hello')\n  .then(function() {\n    this.test.assertSelectorHasText('#result_box', 'Hello');\n  })\n  .then(function() {\n    this.capture('snapshot.png');\n  });\n});\ncasper.run();\n```", "```js\nPASS Find \"Hello\" within the selector \"#result_box\"\n\n```"]