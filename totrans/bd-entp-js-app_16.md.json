["```js\n$ yarn add redux\n```", "```js\n$ yarn add react-redux\n```", "```js\nimport { createStore } from 'redux';\n\n const initialState = {};\n const reducer = function (state = initialState, action) {\n   return state;\n }\n const store = createStore(reducer, initialState);\n```", "```js\nconst initialState = {\n   loginForm: {\n     token: null,\n     email: {\n       value: \"\",\n       valid: null\n     },\n     password: {\n       value: \"\",\n       valid: null\n     }\n   },\n   registrationForm: {\n     userId: null,\n     email: {\n       value: \"\",\n       valid: null\n     },\n     password: {\n       value: \"\",\n       valid: null\n     }\n   }\n };\n```", "```js\n<Route exact path=\"/register\" store={store} render={() => <RegistrationForm {...store.getState().registrationForm} />} />,\n <Route exact path=\"/login\" store={store} render={() => <LoginForm {...store.getState().loginForm} />} />,\n```", "```js\nfunction render () {\n   ReactDOM.render( ... );\n }\n\n store.subscribe(render);\n\n render();\n```", "```js\nhandleInputChange = (name, event) => {\n   const value = event.target.value;\n   const valid = validator[name](value);\n   this.setState({\n     [name]: { value, valid }\n   });\n }\n```", "```js\nhandleInputChange = (name, event) => {\n   const value = event.target.value;\n   const action = {\n     type: 'RegistrationForm:update',\n     field: name,\n     value\n   }\n   this.props.store.dispatch(action);\n }\n```", "```js\nimport deepmerge from 'deepmerge';\n import { validator } from './utils';\n const reducer = function (state = initialState, action) {\n   if (action.type === 'RegistrationForm:update') {\n     const { field, value } = action;\n     const valid = validator[field](value);\n     const newState = {\n       registrationForm: {\n         [field]: {\n           value,\n           valid\n         }\n       }\n     }\n     return deepmerge(state, newState);\n   }\n   return state;\n }\n```", "```js\n$ yarn add deepmerge\n```", "```js\n$ yarn add react-redux\n```", "```js\nimport { Provider } from 'react-redux';\n ReactDOM.render((\n   <Provider store={store}>\n     <BrowserRouter>\n       <Switch>\n       <Route exact path=\"/register\" component={RegistrationForm} />\n       <Route exact path=\"/login\" component={LoginForm} />\n       </Switch>\n     </BrowserRouter>\n   </Provider>\n ), document.getElementById('renderTarget'));\n```", "```js\nconnect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\n```", "```js\nexport default LoginForm;\n```", "```js\nfunction mapStateToProps (state) {\n   return state.loginForm;\n }\n export default connect(mapStateToProps)(LoginForm);\n```", "```js\nfunction mapDispatchToProps (dispatch) {\n   return {\n     handleInputChange: (name, event) => {\n       const value = event.target.value;\n       const action = {\n         type: 'LoginForm:update',\n         field: name,\n         value\n       }\n       dispatch(action);\n     }\n   };\n };\n```", "```js\nfunction mapDispatchToProps (dispatch) {\n   return { dispatch };\n };\n```", "```js\nfunction mapDispatchToProps (dispatch) {\n   return {\n     handleInputChange: (name, event) => { ... },\n     handleSuccess: token => {\n       const action = {\n         type: 'LoginForm:success',\n         token\n       }\n       dispatch(action);\n     }\n   };\n };\n```", "```js\nexport default connect(\n   mapStateToProps,\n   mapDispatchToProps\n )(LoginForm);\n```", "```js\nclass LoginForm extends React.Component {\n   handleLogin = (event) => {\n     ...\n     fetch(request)\n       .then( ... )\n       .then(this.props.handleSuccess)\n       .catch(console.error)\n   }\n }\n```"]