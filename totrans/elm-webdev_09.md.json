["```js\nnpm install -g elm-test\n```", "```js\nC:\\Users\\PC\\AppData\\Roaming\\npm\\elm-test -> C:\\Users\\PC\\AppData\\Roaming\\npm\\node_modules\\elm-test\\bin\\elm-test\n\n> elm-test@0.18.12 install C:\\Users\\PC\\AppData\\Roaming\\npm\\node_modules\\elm-test\n> node install.js\n\nDownloading binaries from https://dl.bintray.com/elmlang/elm-test/0.18.12/win32-x64.tar.gz\nSuccessfully downloaded and processed https://dl.bintray.com/elmlang/elm-test/0.18.12/win32-x64.tar.gz\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.2 (node_modules\\elm-test\\node_modules\\fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.2: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"})\n\n+ elm-test@0.18.12\nadded 166 packages in 649.159s\n```", "```js\nadded 166 packages in 649.159s\n```", "```js\nelm-test init\n```", "```js\nStarting downloads...\n\n ● debois/elm-dom 1.2.3\n ● eeue56/elm-html-query 3.0.0\n ● eeue56/elm-html-in-elm 5.2.0\n ● eeue56/elm-lazy 1.0.0\n ● eeue56/elm-lazy-list 1.0.0\n ● eeue56/elm-html-test 5.1.3\n ● eeue56/elm-shrink 1.0.0\n ● elm-community/elm-test 4.2.0\n ● elm-lang/core 5.1.1\n ● debois/elm-mdl 8.1.0\n ● elm-lang/dom 1.1.1\n ● elm-lang/html 2.0.0\n ● elm-lang/http 1.0.0\n ● elm-lang/mouse 1.0.1\n ● elm-lang/virtual-dom 2.0.4\n ● elm-lang/window 1.0.1\n ● mgold/elm-random-pcg 5.0.2\n ● myrho/elm-round 1.0.2\n\nPackages configured successfully!\n```", "```js\ndir\n```", "```js\nelm-package.json  elm-stuff  public  README.md  src  tests\n```", "```js\nelm-package.json  elm-stuff  Example.elm  Tests.elm\n```", "```js\n{\n    \"version\": \"1.0.0\",\n    \"summary\": \"Test Suites\",\n    \"repository\": \"https://github.com/user/project.git\",\n    \"license\": \"BSD3\",\n    \"source-directories\": [\n        \"..\\\\src\",\n        \".\"\n    ],\n    \"exposed-modules\": [],\n    \"dependencies\": {\n        \"debois/elm-mdl\": \"8.1.0 <= v < 9.0.0\",\n        \"eeue56/elm-html-test\": \"5.1.3 <= v < 6.0.0\",\n        \"elm-community/elm-test\": \"4.0.0 <= v < 5.0.0\",\n        \"elm-lang/core\": \"5.0.0 <= v < 6.0.0\",\n        \"elm-lang/html\": \"2.0.0 <= v < 3.0.0\",\n        \"elm-lang/http\": \"1.0.0 <= v < 2.0.0\",\n        \"myrho/elm-round\": \"1.0.2 <= v < 2.0.0\"\n    },\n    \"elm-version\": \"0.18.0 <= v < 0.19.0\"\n}\n```", "```js\n    \"version\": \"1.0.0\",\n    \"summary\": \"Test Suites\",\n    \"repository\": \"https://github.com/user/project.git\",\n    \"license\": \"BSD3\",   \n```", "```js\n    \"source-directories\": [\n        \"..\\\\src\",\n        \".\"\n    ],\n```", "```js\n    \"dependencies\": {\n        \"debois/elm-mdl\": \"8.1.0 <= v < 9.0.0\",\n        \"elm-lang/core\": \"5.0.0 <= v < 6.0.0\",\n        \"elm-lang/html\": \"2.0.0 <= v < 3.0.0\",\n        \"elm-lang/http\": \"1.0.0 <= v < 2.0.0\",\n        \"myrho/elm-round\": \"1.0.2 <= v < 2.0.0\"\n    },\n```", "```js\n    \"dependencies\": {\n        \"debois/elm-mdl\": \"8.1.0 <= v < 9.0.0\",\n        \"eeue56/elm-html-test\": \"5.1.3 <= v < 6.0.0\",\n        \"elm-community/elm-test\": \"4.0.0 <= v < 5.0.0\",\n        \"elm-lang/core\": \"5.0.0 <= v < 6.0.0\",\n        \"elm-lang/html\": \"2.0.0 <= v < 3.0.0\",\n        \"elm-lang/http\": \"1.0.0 <= v < 2.0.0\",\n        \"myrho/elm-round\": \"1.0.2 <= v < 2.0.0\"\n    },\n```", "```js\n        \"eeue56/elm-html-test\": \"5.1.3 <= v < 6.0.0\",\n        \"elm-community/elm-test\": \"4.0.0 <= v < 5.0.0\",\n```", "```js\nmodule Example exposing (..)\n\nimport Expect exposing (Expectation)\nimport Fuzz exposing (Fuzzer, int, list, string)\nimport Test exposing (..)\n\nsuite : Test\nsuite =\n    todo \"Implement our first test. See http://package.elm-lang.org/packages/elm-community/elm-test/latest for how to do this!\"\n```", "```js\ndescribe \"An arbitrary description of our test\" \n  [ test ...\n  , test ...\n  , test ... \n  ]\n```", "```js\nsuite : Test\nsuite =\n  describe \"Zero is equal to zero\"\n    [ test \"Zero is equal to one minus one\" <|\n        \\_ -> Expect.equal 0 (1 - 1)\n    , test \"Zero is equal to two minus two\" <|\n        \\_ -> Expect.equal 0 (2 - 2)\n    ]\n```", "```js\nelm-test tests/Example.elm\n```", "```js\n$ elm-test tests/Example.elm\nSuccess! Compiled 0 modules.\nSuccessfully generated /dev/null\nSuccess! Compiled 1 module.\nSuccessfully generated C:\\Users\\PC\\Desktop\\improved-weather-app\\elm-stuff\\generated-code\\elm-community\\elm-test\\elmTestOutput.js\n\nelm-test 0.18.12\n----------------\n\nRunning 2 tests. To reproduce these results, run: elm-test --fuzz 100 --seed 800244194 tests/Example.elm\n\nTEST RUN PASSED\n\nDuration: 517 ms\nPassed: 2\nFailed: 0\n```", "```js\ntest \"Zero is equal to one minus one\" <|\n        \\_ -> Expect.equal 0 (1 - 1)\n```", "```js\ntest \"Zero is equal to one minus one\"\n        ( \\_ -> Expect.equal 0 (1 - 1) )\n```", "```js\n( \\_ -> Expect.equal 0 (1 - 1) )\n```", "```js\n( \\_ -> Expect.equal 0 <| 1 - 1 )\n```", "```js\nsuite : Test\nsuite =\n  describe \"Zero is equal to zero\"\n    [ test \"Zero is equal to one minus one\" <|\n        \\_ -> Expect.equal 0 <| 1 - 1\n    , test \"Zero is equal to two minus two\" <|\n        \\_ -> Expect.equal 0 <| 2 - 2\n    ]\n```", "```js\nmodule Tests exposing (..)\n\nimport Test exposing (..)\nimport Expect\n\n-- Check out http://package.elm-lang.org/packages/elm-community/elm-test/latest to learn more about testing in Elm!\n\nall : Test\nall =\n    describe \"A Test Suite\"\n        [ test \"Addition\" <|\n            \\_ ->\n                Expect.equal 10 (3 + 7)\n        , test \"String.left\" <|\n            \\_ ->\n                Expect.equal \"a\" (String.left 1 \"abcdefg\")\n        , test \"This test should fail\" <|\n            \\_ ->\n                Expect.fail \"failed as expected!\"\n        ]\n```", "```js\nelm-test\n```", "```js\nSuccess! Compiled 1 module.\nSuccessfully generated /dev/null\nSuccess! Compiled 1 module.\nSuccessfully generated C:\\Users\\PC\\Desktop\\improved-weather-app\\elm-stuff\\generated-code\\elm-community\\elm-test\\elmTestOutput.js\n\nelm-test 0.18.12\n----------------\n\nRunning 5 tests. To reproduce these results, run: elm-test --fuzz 100 --seed 1660804947\n\n> Tests\n> A Test Suite\n> This test should fail\n\n    failed as expected!\n\nTEST RUN FAILED\n\nDuration: 696 ms\nPassed: 4\nFailed: 1\n```", "```js\nmodule Example exposing (..)\n\nimport Expect exposing (Expectation)\n-- import Fuzz exposing (Fuzzer, int, list, string)\nimport Test exposing (..)\n\nsuite : Test\nsuite =\n  describe \"A Test Suite\"\n    [ describe \"Testing addition\"\n      [ test \"Addition\" <|\n        \\_ ->\n          Expect.equal 10 (3 + 7)\n      ]\n    , describe \"Using let-in expression in a test suite\"\n      [ test \"Multiplication\" <|\n        \\_ ->\n          let\n            x = 2\n            y = 4\n            xy = x * y\n          in\n            xy\n              |> \\_ -> Expect.equal 8 (2 * 4)\n      ]\n    ]\n```", "```js\nSuccess! Compiled 1 module.\nSuccessfully generated /dev/null\nSuccess! Compiled 1 module.\nSuccessfully generated C:\\Users\\PC\\Desktop\\improved-weather-app\\elm-stuff\\generated-code\\elm-community\\elm-test\\elmTestOutput.js\n\nelm-test 0.18.12\n----------------\n\nRunning 2 tests. To reproduce these results, run: elm-test --fuzz 100 --seed 983607346 tests/Example.elm\n\nTEST RUN PASSED\n\nDuration: 334 ms\nPassed: 2\nFailed: 0\n```", "```js\nmodule DecoderTests exposing (..)\n\nimport Expect exposing (Expectation)\nimport Fuzz exposing (Fuzzer, int, list, string)\nimport Main exposing (..)\nimport Test exposing (..)\n\nsuite : Test\nsuite =\n    describe \"Decoder test\"\n        [ test \"Test decoding valid string\" <|\n            \\_ ->\n                let\n                    jsonInput =\n                        \"{\\\"main\\\":{\\\"temp\\\":303.15,\\\"pressure\\\":30,\\\"humidity\\\":20},\\\"wind\\\":{\\\"speed\\\":15.3},\\\"name\\\":\\\"Rome\\\"}\"\n\n                    expectedResult =\n                        TemperatureInfo \"Rome\" 15.3 30.0 30.0 20.0\n                in\n                Expect.equal expectedResult (decodeTemperatureInfo jsonInput)\n\n        {--\n        , test \"Test decoding invalid string\" <|\n            \\_ ->\n                let\n                    jsonInput =\n                        \"Scrabbled json message\"\n\n                    expectedResult =\n                        TemperatureInfo \"Error decoding data!\" 0 0 0 0\n                in\n                Expect.equal expectedResult (decodeTemperatureInfo jsonInput)\n        , fuzz string \"Fuzz test decoding invalid string\" <|\n            \\randomlyGeneratedString ->\n                let\n                    expectedResult =\n                        TemperatureInfo \"Error decoding data!\" 0 0 0 0\n                in\n                Expect.equal expectedResult (decodeTemperatureInfo randomlyGeneratedString)\n        -}\n        ]\n```", "```js\nelm-test tests/DecoderTests.elm\n```", "```js\nSuccess! Compiled 2 modules.\nSuccessfully generated /dev/null\nSuccess! Compiled 3 modules.\nSuccessfully generated C:\\Users\\PC\\Desktop\\elm-web-development\\chapter9\\weather-app-with-tests-ch9\\elm-stuff\\generated-code\\elm-community\\elm-test\\elmTestOutput.js\n\nelm-test 0.18.12\n----------------\n\nRunning 1 test. To reproduce these results, run: elm-test --fuzz 100 --seed 1485733894 tests/DecoderTests.elm\n\nTEST RUN PASSED\n\nDuration: 663 ms\nPassed: 1\nFailed: 0\n```", "```js\njsonInput =\n\"{\\\"main\\\":{\\\"temp\\\":303.15,\\\"pressure\\\":30,\\\"humidity\\\":20},\\\"wind\\\":\\\"speed\\\":15.3},\\\"name\\\":\\\"Rome\\\"}\"\n```", "```js\nmodule CustomExpectations exposing (..)\n\nimport Expect exposing (Expectation)\nimport Json.Decode exposing (decodeString, field, int, list, map2, string)\nimport Test exposing (..)\n\ntype alias Player =\n    { name : String\n    , language : String\n    }\n\nplayerDecoder =\n    map2 Player\n        (field \"name\" string)\n        (field \"language\" string)\n\nsuite : Test\nsuite =\n    describe \"A Test Suite\"\n        [ describe \"A custom expectation with a custom decoder\"\n            [ test \"Decoding JSON strings\" <|\n                \\_ ->\n                    let\n                        json =\n                            \"\"\"\n                            {\n                            \"name\" : \"John Doe\",\n                            \"language\" : \"English\"\n                            }\n                            \"\"\"\n                    in\n                    case decodeString playerDecoder json of\n                        Ok json ->\n                            Expect.pass\n\n                        Err err ->\n                            Expect.fail err\n            ]\n        ]\n```", "```js\nSuccess! Compiled 0 modules.\nSuccessfully generated /dev/null\nSuccess! Compiled 1 module.\nSuccessfully generated C:\\Users\\PC\\Desktop\\elm-web-development\\chapter9\\weather-app-with-tests-ch9\\elm-stuff\\generated-code\\elm-community\\elm-test\\elmTestOutput.js\n\nelm-test 0.18.12\n----------------\n\nRunning 1 test. To reproduce these results, run: elm-test --fuzz 100 --seed 619873355 tests/CustomExpectations.elm\n\nTEST RUN PASSED\n\nDuration: 468 ms\nPassed: 1\nFailed: 0\n```", "```js\nplayerDecoder =\n    map2 Player\n        (field \"name\" string)\n        (field \"age\" string)\n```", "```js\ndecoder : Json.Decode.Decoder String\n```", "```js\nmodule Example exposing (..)\n\n-- import Fuzz exposing (Fuzzer, int, list, string)\n\nimport Expect exposing (Expectation)\nimport Test exposing (..)\n\nsuite : Test\nsuite =\n    describe \"Zero is equal to zero\"\n        [ test \"Zero is equal to one minus one\" <|\n            \\_ -> Expect.equal 0 (1 - 1)\n        , test \"Zero is equal to two minus two\" <|\n            \\_ -> Expect.equal 0 (2 - 2)\n        ]\n```", "```js\nmodule Example exposing (..)\n\n-- import Fuzz exposing (Fuzzer, int, list, string)\n\nimport Expect exposing (Expectation)\nimport Test exposing (..)\n\nsuite : Test\nsuite =\n    describe \"Zero is equal to zero\"\n        [ test \"Zero is equal to one minus one\" <|\n            \\_ -> Expect.equal 0 (1 - 1)\n        , test \"Zero is equal to two minus two\" <|\n            \\_ -> Expect.equal 0 (2 - 2)\n        ]\n```", "```js\nmodule Example exposing (..)\n\nimport Expect exposing (Expectation)\nimport Fuzz exposing (Fuzzer, int, list, string)\nimport Test exposing (..)\n\nsuite : Test\nsuite =\n    describe \"Zero is equal to zero\"\n        [ fuzz int \"Zero is equal to random number minus itself\" <|\n            \\randomNumber -> Expect.equal 0 (randomNumber - randomNumber)\n        ]\n```", "```js\nmodule Example exposing (..)\n\nimport Expect exposing (Expectation)\nimport Fuzz exposing (Fuzzer, int, list, string)\nimport Test exposing (..)\n\nsuite : Test\nsuite =\n    describe \"Zero is equal to zero\"\n      [ fuzz2 int int \"Swiching positions on two numbers being added will still yield the same result\" <|\n          \\randomNumber1 randomNumber2 -> \n            Expect.equal (randomNumber1 + randomNumber2) (randomNumber2 + randomNumber1)\n      ]\n```"]