- en: Chapter 5. Implementing DDP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。实现DDP
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Reading the DDP stream
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取DDP流
- en: Using client-only collections
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用仅客户端集合
- en: Implementing a multiserver DDP
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现多服务器DDP
- en: Integrating DDP with other technologies
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将DDP与其他技术集成
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Fundamental to Meteor is the concept of real-time applications, with the client
    and server interacting with each other using the principle of **data on the wire**.
    The folks at Meteor have developed a protocol for this real-time client-server
    communication, called the **Distributed Data Protocol** (**DDP**). As with everything
    else in Meteor, DDP is a discreet (albeit core) library, which you can use separately.
    The recipes in this chapter will show you how DDP works and give you some ideas
    about what you can do with it outside of its default use in Meteor.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Meteor来说，实时应用程序的概念是基础，客户端和服务器通过**数据在线上**的原则相互交互。Meteor团队为此实时客户端-服务器通信开发了一种协议，称为**分布式数据协议**（**DDP**）。与Meteor中的其他一切一样，DDP是一个独立的（尽管是核心）库，您可以使用它单独使用。本章中的食谱将向您展示DDP是如何工作的，并给您一些关于如何在Meteor的默认使用之外使用它的想法。
- en: Reading the DDP stream
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取DDP流
- en: To truly understand what is going on with DDP (and for debugging purposes) it's
    useful to be able to read the DDP stream. Seeing DDP in action can not only help
    with the debugging process, but can also help you to better understand how flexible
    and useful this protocol is. This recipe will show you how to use Arunoda Susiripala's
    most excellent DDP Analyzer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正理解DDP（以及调试目的）的情况，能够读取DDP流非常有用。看到DDP的实际操作不仅可以帮助调试过程，还可以帮助您更好地理解这个协议的灵活性和实用性。这个食谱将向您展示如何使用Arunoda
    Susiripala的出色的DDP分析器。
- en: Getting ready
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You will need Meteor, Node, and npm installed. For installation instructions,
    visit the following URLs:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装Meteor、Node和npm。有关安装说明，请访问以下网址：
- en: Node—[http://nodejs.org](http://nodejs.org)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node—[http://nodejs.org](http://nodejs.org)
- en: npm—[https://www.npmjs.com/](https://www.npmjs.com/)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npm—[https://www.npmjs.com/](https://www.npmjs.com/)
- en: You will also need a project. You can use pretty much any project you like.
    Because it offers a decent, controllable amount of client-server communication
    (in other words, DDP streams), we will use the `todos` example application. Note
    that you can also use your own Meteor project if you like. We are only using this
    as an example because it's convenient and because we can control the flow of data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要一个项目。您可以使用几乎任何您喜欢的项目。因为它提供了合理的、可控的客户-服务器通信量（换句话说，DDP流），我们将使用`todos`示例应用程序。请注意，如果您愿意，您也可以使用自己的Meteor项目。我们之所以使用这个示例，是因为它方便，并且我们可以控制数据流。
- en: 'To install the `todos` example, open a terminal window, navigate to a directory
    of your choice, and enter the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`todos`示例，请打开一个终端窗口，导航到您选择的目录，并输入以下命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Go ahead and start your Meteor application by entering the following commands:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在请输入以下命令启动您的Meteor应用程序：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You are now ready to install and run the DDP Analyzer on the `todos` app.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已准备好在`todos`应用程序上安装和运行DDP分析器。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'First, we need to install the DDP Analyzer. In a terminal window, enter and
    execute the following command:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要安装DDP分析器。在终端窗口中，输入并执行以下命令：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that you may need to use `sudo` when using the `–g` operator to make the
    Analyzer available from anywhere and to make sure it has proper permissions. After
    a brief installation process, the Analyzer will be installed and ready to be used.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，您可能需要在使用`-g`操作符时使用`sudo`，以便从任何地方使分析器可用，并确保它具有适当的权限。经过简短的安装过程后，分析器将安装并准备好使用。
- en: 'Start the Analyzer proxy by entering the following command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令启动分析器代理：
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will get a message similar to the following:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将收到类似以下的消息：
- en: '[PRE4]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We now need to restart our Meteor instance with the environmental variable
    mentioned in the preceding step. In your terminal window, stop the `meteor` if
    it is still running and enter the following commands:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要重新启动我们的Meteor实例，使用前面步骤中提到的环境变量。在您的终端窗口中，如果`meteor`仍在运行，请停止它，并输入以下命令：
- en: '[PRE5]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once the `meteor` starts the backup, navigate to `http://localhost:3000` in
    a browser and the DDP Analyzer will be ready for action.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦`meteor`开始备份，请在浏览器中导航到`http://localhost:3000`，DDP分析器将准备就绪。
- en: Perform several tasks, such as adding new `todo` items, completing/editing existing
    items, and so on.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行多个任务，例如添加新的`todo`项，完成/编辑现有项等。
- en: Take a look at the DDP stream in the terminal window where you started the DDP
    Analyzer. It will look similar to the following screenshot:![How to do it...](img/image00369.jpeg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看你在启动 DDP 分析器时所在的终端窗口中的 DDP 流。它看起来会类似于以下截图：![如何做...](img/image00369.jpeg)
- en: You will be able to see all the messages intended for the clients. The numbers
    in yellow tell you which client it was sent to/from. Messages preceded by **IN**
    indicate that the message was sent from the server to the client. If the message
    is preceded by **OUT**, this indicates the message and outbound request from the
    client to the server. The messages are in plain text following the color-coded
    texts.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将能够看到所有针对客户端的消息。黄色数字告诉你消息是发送给哪个客户端的。以 **IN** 开头的消息表示消息是从服务器发送到客户端的。如果消息以 **OUT**
    开头，这表示消息和客户端到服务器的出站请求。消息是按照颜色编码的文本之后的纯文本。
- en: With the DDP Analyzer, you can really get under the hood, seeing exactly how
    DDP works. You'll quickly realize how flexible and simple the protocol is, and
    you will gain a better understanding of what you can do with it inside your Meteor
    (or other) applications.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 DDP 分析器，你可以真正地深入了解，看到 DDP 究竟是如何工作的。你会很快意识到该协议是多么灵活和简单，并且你将更好地理解你可以在你的 Meteor（或其他）应用程序中使用它做什么。
- en: How it works...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: DDP, oversimplified, is a series of messages between two end points. The messages
    show updates, additions, and deletions, and are transmitted over websockets. This
    means the messages can be sent in real time, rather than waiting for the traditional
    client request polling. This cuts down on traffic (chatter) and ensures that the
    messages are delivered as quickly as possible.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，DDP 是两个端点之间的一系列消息。这些消息显示了更新、添加和删除，并通过 WebSocket 传输。这意味着消息可以实时发送，而不是等待传统的客户端请求轮询。这减少了流量（嘈杂），并确保消息尽可能快地送达。
- en: The DDP Analyzer uses the DDP protocol and listens in on the streaming conversation
    between your browser and the Meteor application. When you changed the port that
    DDP executes through using the `DDP_DEFAULT_CONNECTION_URL=` command, you rerouted
    your app through port `3030`. The DDP Analyzer listened on this port, proxied
    the connection to port `3000`, and logged all the traffic approaching it in the
    terminal window.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: DDP 分析器使用 DDP 协议，监听你的浏览器和 Meteor 应用程序之间的流式对话。当你使用 `DDP_DEFAULT_CONNECTION_URL=`
    命令更改 DDP 执行的端口时，你通过端口 `3030` 重定向了你的应用程序。DDP 分析器监听这个端口，代理连接到端口 `3000`，并在终端窗口中记录所有接近它的流量。
- en: There's more…
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Once you have finished, be sure to either open a new terminal window or change
    your environment variable back to port `3000` using the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，请确保打开一个新的终端窗口或使用以下命令将你的环境变量改回端口 `3000`：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you don't, your application will stop working because DDP is still running
    through port `3030`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不这样做，你的应用程序将停止工作，因为 DDP 仍在通过端口 `3030` 运行。
- en: See also
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using the web console* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Optimizing
    Your Workflow"), *Optimizing Your Workflow*
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。优化你的工作流程") 的 *使用 web 控制台* 食谱中，*优化你的工作流程*
- en: Using client-only collections
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用仅客户端集合
- en: To truly understand how DDP works, it's helpful to try *rolling your own* as
    far as communicating with data over the wire is concerned. The best way to do
    this (and a quite helpful recipe to boot!) is to let the client continue to take
    advantage of the built-in Mongo collections and programmatically send updates
    from the server based on some simple logic. This recipe will walk you through
    creating a client-only collection and manipulating this collection with calls
    on the server side.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正理解 DDP 的工作原理，尝试自己实现与数据通过网络通信是有帮助的。这样做（并且是一个非常有用的食谱！）的最佳方式是让客户端继续利用内置的 Mongo
    集合，并基于一些简单的逻辑从服务器端程序性地发送更新。这个食谱将指导你创建一个仅客户端的集合，并通过服务器端的调用来操作这个集合。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are going to need a sample project to use as a baseline. For this baseline,
    we will quickly create a bookmark application. No bells and whistles, just a simple
    list of bookmark titles and URLs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要一个示例项目作为基准。为此基准，我们将快速创建一个书签应用程序。没有铃声和哨声，只是一个简单的书签标题和 URL 列表。
- en: To do this, we first need our default template scaffolding. Please create a
    new project called `bookmarks` using the *Setting up your project file structure*
    recipe in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Optimizing Your Workflow"),
    *Optimizing Your Workflow*, as your starting file structure.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们首先需要默认的模板脚手架。请使用[第1章](part0015.xhtml#aid-E9OE1 "第1章。优化你的工作流程")中“设置你的项目文件结构”配方创建一个名为`bookmarks`的新项目，作为你的起始文件结构。
- en: 'We need to add and remove some Meteor packages. Start by removing the `autopublish`
    package. Open a terminal window, navigate to the root folder of your project,
    and execute the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加和移除一些Meteor包。首先，移除`autopublish`包。打开一个终端窗口，导航到你的项目根目录，并执行以下命令：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, let''s add the `bootstrap` package. Execute the following command in
    your terminal window:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加`bootstrap`包。在你的终端窗口中执行以下命令：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We will now add the HTML and JavaScript needed to create our `bookmarks` program.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将添加创建我们的`bookmarks`程序所需的HTML和JavaScript。
- en: 'Replace the contents of your `[project root]/client/main.html` file with the
    following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的`[项目根目录]/client/main.html`文件的内容替换为以下内容：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, in your `[project root]/client/scripts` folder, add the following to
    `main.js`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在你的`[项目根目录]/client/scripts`文件夹中，将以下内容添加到`main.js`中：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, create a `templateHelpers.js` file in the same `scripts` folder and add
    the following `helpers` function:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在同一个`scripts`文件夹中创建一个`templateHelpers.js`文件，并添加以下`helpers`函数：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the same `templateHelpers.js` file, add the following `events` function:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一个`templateHelpers.js`文件中，添加以下`events`函数：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we need a bit of styling. Open the `style.css` file found in your `[project
    root]/libs/styles` folder and replace the existing styles with the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一点样式。打开位于你的`[项目根目录]/libs/styles`文件夹中的`style.css`文件，并用以下样式替换现有的样式：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We need to declare our URLs collection, so create a `collections.js` file in
    your `[project root]/both` folder and add the following `Mongo.Collection` declaration
    and `String.prototyp` `e` function:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要声明我们的URL集合，因此在你的`[项目根目录]/both`文件夹中创建一个`collections.js`文件，并添加以下`Mongo.Collection`声明和`String.prototype`函数：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, we add some server logic. Open `[project root]/server/server.js` and
    replace any existing code with the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加一些服务器逻辑。打开`[项目根目录]/server/server.js`，并用以下代码替换任何现有的代码：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Save all your changes, start up your `meteor` instance, and navigate to your
    project in a browser (usually `http://localhost:3000`). If everything went correctly,
    you will now have a working `bookmarks` app, where you can add URLs and (by double-clicking)
    add/change the titles for the bookmarks. The following screenshot is a sample
    of how the browser will look when it is complete:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有更改，启动你的`meteor`实例，并在浏览器中导航到你的项目（通常是`http://localhost:3000`）。如果一切顺利，你现在将有一个工作的`bookmarks`应用，你可以添加URLs，并通过双击添加/更改书签的标题。以下截图是浏览器完成时的一个示例：
- en: '![Getting ready](img/image00370.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/image00370.jpeg)'
- en: How to do it…
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We are going to add a counter at the bottom of our `bookmarks` page. This counter
    will tell us how many secure and non-secure links we have (determined by whether
    the link starts with `https`).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在“书签”页面的底部添加一个计数器。这个计数器会告诉我们有多少个安全和非安全链接（通过链接是否以`https`开头来决定）。
- en: 'First, we will add the client-only collection called `bmcounts` and subscribe
    to it. If we declare the collection anywhere in the `clients` folder, the server
    will not be able see it. Hence, it will be a client-only collection. Open the
    `main.js` file in your client `scripts` folder (`[project root]/client/scripts/main.js`)
    and add the following two lines around the existing `Meteor.subscribe(''urls'')`
    command, as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将添加一个客户端只读的集合`bmcounts`并订阅它。如果我们在这个`clients`文件夹的任何地方声明这个集合，服务器将看不到它。因此，它将是一个客户端只读的集合。在你的客户端`scripts`文件夹中的`main.js`文件（`[项目根目录]/client/scripts/main.js`）中打开，并在现有的`Meteor.subscribe('urls')`命令周围添加以下两行，如下所示：
- en: '[PRE16]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'While we are in the `scripts` folder, let''s open the `templateHelpers.js`
    file and add the reactive `Template.helpers` function which we''ll need to display
    the counts. Add the following function to the bottom of the file:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在`scripts`文件夹中时，让我们打开`templateHelpers.js`文件，并添加我们需要来显示计数的反应式`Template.helpers`函数。将以下函数添加到文件的底部：
- en: '[PRE17]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now let''s add the HTML template. Open `main.html`, found in your `client`
    folder, and add the following code around the `<body>` tag:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加HTML模板。打开位于你的`client`文件夹中的`main.html`，并在`<body>`标签周围添加以下代码：
- en: '[PRE18]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We''ll pretty up our counter a bit with some CSS as well. Open your `style.css`
    file, found in your `lib`/`styles` director, and add the following CSS declaration:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还会用一些CSS让计数器看起来更美观。打开你的`style.css`文件，它位于你的`lib`/`styles`目录中，并添加以下CSS声明：
- en: '[PRE19]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We have some real work to do now on the server side. We need to count and sort
    the bookmarks as they are added, removed, or changed. Open your `server.js` file,
    found in your `server` folder, and add the following `Meteor.publ``ish` function:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要在服务器端做一些实际的工作。我们需要在添加、删除或更改书签时计数和排序。打开你的`server.js`文件，它位于你的`server`文件夹中，并添加以下`Meteor.publish`函数：
- en: '[PRE20]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Inside the preceding code block, we have three `TODO` comments. We first need
    to create the `added` listener. Directly under the `//TODO: Added` comment, add
    the following code:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在前面的代码块中，我们有三个`TODO`注释。我们首先需要创建`added`监听器。直接在`//TODO: Added`注释下方，添加以下代码：'
- en: '[PRE21]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next is the `removed` listener. Directly under the `//TODO: Removed` comment,
    add the following code:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '接下来是`removed`监听器。直接在`//TODO: Removed`注释下方，添加以下代码：'
- en: '[PRE22]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, the `changed` listener. Add the following code directly under the
    `//TODO: Changed` comment:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '最后，是`changed`监听器。直接在`//TODO: Changed`注释下方添加以下代码：'
- en: '[PRE23]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Save all your changes, start your `meteor` instance if it isn't already started,
    and navigate to your project in a browser (usually `http://localhost:3000`). You
    should see a small information button at the bottom-right corner of your screen
    with a count of secure and non-secure links. Add some new links, delete others,
    and watch the count change instantly in your browser, similar to the following
    screenshot:![How to do it…](img/image00371.jpeg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有更改，如果你的`meteor`实例尚未启动，请启动它，并在浏览器中导航到你的项目（通常是`http://localhost:3000`）。你应该会在屏幕的右下角看到一个包含安全和非安全链接计数的小信息按钮。添加一些新链接，删除一些链接，并观察浏览器中的计数即时变化，类似于以下截图：![如何做…](img/image00371.jpeg)
- en: How it works…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: All of the client-side code we just added is exactly the same as it would be
    for a regular Mongo collection. As far as the client is concerned, everything
    is normal.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加的所有客户端代码与常规Mongo集合的代码完全相同。对于客户端来说，一切都是正常的。
- en: On the server, however, we'd need to manually update the DDP stream with the
    `.added` and `.changed` messages, based on the changes made to the `URLs` collection.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在服务器上，我们需要手动根据对`URLs`集合所做的更改更新DDP流中的`.added`和`.changed`消息。
- en: 'To accomplish this, we start by using the function passed as an argument in
    the `Meteor.publish()` function arguments:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们首先使用`Meteor.publish()`函数参数中传递的函数：
- en: '[PRE24]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This function is rerun every time a client subscribes to the DDP stream. Inside
    the function, we create a `handle` using the `Mongo.Cursor.observeChanges()` function:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 每当客户端订阅DDP流时，这个函数就会重新运行。在函数内部，我们使用`Mongo.Cursor.observeChanges()`函数创建一个`handle`：
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Inside the `observeChanges` function, if a document is added (except when initializing),
    we check whether the `src` property begins with `https` to see whether we can
    increment the `secCount` (secure count) variable; otherwise, we'll just increment
    the normal `count` variable.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在`observeChanges`函数内部，如果添加了一个文档（除了初始化时），我们会检查`src`属性是否以`https`开头，以确定是否可以增加`secCount`（安全计数）变量；否则，我们只会增加正常的`count`变量。
- en: If a document is removed, we have to do a bit of trickery, but we will recalculate
    the `secCount` and `count` variables.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个文档被删除，我们不得不做一些小技巧，但我们会重新计算`secCount`和`count`变量。
- en: If a document's `src` variable is changed, we will perform the same check as
    we did in `added` and move the increment from `count` to `secCount`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文档的`src`变量被更改，我们将执行与`added`中相同的检查，并将增量从`count`移动到`secCount`。
- en: These three situations will happen as the `URLs` collection changes in real
    time. Therefore, after each change, we will call the `self.changed()` function,
    which sends a message to the client via DDP, mimicking the automatic change messages
    that would be sent if we were modifying the `bmcounts` collection normally.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 随着`URLs`集合实时变化，这三种情况将会发生。因此，在每个更改之后，我们将调用`self.changed()`函数，该函数通过DDP向客户端发送消息，模拟如果我们正常修改`bmcounts`集合时将会发送的自动更改消息。
- en: 'You will notice that the `bmcounts` collection is never used on the server.
    Instead, we send messages to the client through the `"bmcounts"` subscription
    channel, as in the following example:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到`bmcounts`集合在服务器上从未被使用。相反，我们通过`"bmcounts"`订阅通道向客户端发送消息，如下例所示：
- en: '[PRE26]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This is an important distinction. The client does not subscribe to the actual
    MondoDB collection. Instead, it subscribes to a `DDP` messaging channel. In this
    case, we're letting the client do the heavy lifting for us by sending the `"bmcounts"`
    subscription messages into the `bmcount` client-only collection. In essence, the
    server is sending data changes over the wire, and the client, being none the wiser,
    is treating the messages as actual data changes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the method is cleanup for when a client unsubscribes, using `handle.stop()`
    to complete the initialization. It includes making a `self.added()` call, which
    does the same thing as a `self.changed()` call (mimics a data change and sends
    it over the wire to the subscribed clients). The final step in initialization
    is to call `self.ready()`, which lets the subscribed client know that all the
    initial data changes have been sent.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Implementing a partial collection* recipe in [Chapter 4](part0046.xhtml#aid-1BRPS1
    "Chapter 4. Creating Models"), *Creating Models*
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Basic safety – turning off autopublish* recipe in [Chapter 9](part0073.xhtml#aid-25JP21
    "Chapter 9. Securing Your Application"), *Securing Your Application*
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing multiserver DDP
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The fun doesn't stop with a single client and server DDP connection. Oh no!
    Indeed, Meteor has invited everybody to the DDP party, and in this recipe, we're
    going to see how two Meteor servers can speak to each other using DDP.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the code base from the *Using client-only collections* recipe,
    found in this chapter. Please create an instance of this project and start your
    `meteor` server.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'For this project, we will change the color of the bookmark titles, based on
    whether the links are secure or not; so we need to make one change to our first
    project to make the color dependent on the `secType` property (which we will create
    in this recipe). Open the `templateHelpers.js` file, found in the `[project root]/client/scripts`
    folder of the first project. Locate the `Template.urls.helpers` section and make
    the following change to the `selected` function:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'As we will be implementing another Meteor server instance, we will also need
    to create a new Meteor project. In a terminal window, navigate to a location outside
    your root project folder, and enter the following commands in the terminal window:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will properly initialize our second server instance and start it up on
    port `3030`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: We're now ready to get our second Meteor project talking to our first project!
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to change the color of the bookmark titles using a new bookmark
    property called `secType`. Our new (second) project will check bookmarks as they
    come across the DDP wire and add a `secType` property if needed. Let's get started.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will want to make use of the `String.startsWith()` function we''re
    familiar with from the *Using client-only collections* recipe. Add the following
    prototype modifier to the bottom of the `typecheck.js` file, found in your second
    project''s root folder:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将想要利用我们从*使用仅客户端集合*食谱中熟悉的`String.startsWith()`函数。将以下原型修改器添加到位于您第二个项目根文件夹中的`typecheck.js`文件底部：
- en: '[PRE29]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now, we want to create a server-only file so that we can concentrate on the
    task at hand. Create a `server` folder in your project root and then create and
    open a file named `DDPChecker.js` for editing.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们想要创建一个仅服务器文件，以便我们可以专注于手头的任务。在项目根目录下创建一个`server`文件夹，然后创建并打开一个名为`DDPChecker.js`的文件进行编辑。
- en: 'In the `DDPChecker.js` file, add the following code to connect and subscribe
    to the `urls` collection from our first project:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`DDPChecker.js`文件中，添加以下代码以从我们的第一个项目连接和订阅`urls`集合：
- en: '[PRE30]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, we create a function that checks a record to see whether the `secType`
    variable has been set or not. If it hasn''t and if there''s an `src` property
    to check, it will update the record with the appropriate `secType` variable. Add
    the following function to the bottom of `DDPChecker.js`:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们创建一个函数来检查记录，看`secType`变量是否已设置。如果没有设置，并且有一个要检查的`src`属性，它将使用适当的`secType`变量更新记录。将以下函数添加到`DDPChecker.js`文件底部：
- en: '[PRE31]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The last piece of the puzzle is to add a call to the `checkSecType` function
    we just created, whenever a record is added or changed. We do this by calling
    the `observeChanges` function and the `URLs.find()` cursor. Add the following
    code to the bottom of `DDPChecker.js`:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个拼图是添加对刚刚创建的`checkSecType`函数的调用，每次记录被添加或更改时。我们通过调用`observeChanges`函数和`URLs.find()`游标来完成此操作。将以下代码添加到`DDPChecker.js`文件底部：
- en: '[PRE32]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Open a browser and navigate to your project (usually `http://localhost:3000`).
    The colors of each bookmark should correspond to the security types of the bookmark
    links, similar to the following screenshot:![How to do it…](img/image00372.jpeg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并导航到您的项目（通常是`http://localhost:3000`）。每个书签的颜色应该对应于书签链接的网络安全类型，类似于以下截图：![如何做…](img/image00372.jpeg)
- en: How it works…
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Inside our second project, we are declaring the `URLs` collection and subscribing
    to changes just like we would in a normal `client` app. The difference here is
    that we''re establishing a connection to an existing Meteor server, using the
    `DDP.Connect()` function:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第二个项目中，我们声明了`URLs`集合并订阅了变化，就像在正常的`client`应用中做的那样。这里的区别在于我们正在使用`DDP.Connect()`函数建立与现有Meteor服务器的连接：
- en: '[PRE33]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We passed the handle to this connection as an argument, called `conn`, when
    we declared our `URLs` collection. This tells Meteor that we're interested in
    the collection (more accurately, the DDP messages) coming from our first server.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们声明`URLs`集合时，我们将此连接的处理程序作为名为`conn`的参数传递。这告诉Meteor我们对该集合（更准确地说，是DDP消息）感兴趣，这些消息来自我们的第一个服务器。
- en: To avoid redundant code, we created the `checkSecType` function, which listens
    to the changes made to the `URLs` collection and sets the `secType` property to
    correspond with the security type of the `src` property. We then use the `checkSecType`
    function as the event handler for both `added` and `changed` events coming through
    the DDP wire via `observeChanges`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免冗余代码，我们创建了`checkSecType`函数，该函数监听对`URLs`集合所做的更改，并将`secType`属性设置为与`src`属性的网络安全类型相对应。然后我们将`checkSecType`函数用作通过`observeChanges`通过DDP线传入的`added`和`changed`事件的处理器。
- en: There's more…
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Using DDP as a client isn't unique to Meteor. You can use DDP with nearly any
    technology. You'll see an example in the *Integrating DDP with other technologies*
    recipe, found later in this chapter.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 使用DDP作为客户端并不局限于Meteor。您可以使用DDP与几乎所有技术一起使用。您将在本章后面的*将DDP与其他技术集成*食谱中看到一个示例。
- en: See also
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Implementing a partial collection* recipe in [Chapter 4](part0046.xhtml#aid-1BRPS1
    "Chapter 4. Creating Models"), *Creating Models*
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第4章](part0046.xhtml#aid-1BRPS1 "第4章。创建模型")的*实现部分集合*食谱中，*创建模型*
- en: The *Integrating DDP with other technologies* recipe in this chapter
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*将DDP与其他技术集成*食谱
- en: Integrating DDP with other technologies
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将DDP与其他技术集成
- en: The party never stops with DDP! DDP libraries are available for most major programming
    languages and platforms, and you can very quickly get your client, server, or
    even hardware devices talking to your Meteor server without much effort. This
    recipe will show you how to connect to a Meteor server using DDP from a `Node.js`
    program.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: DDP 永远不会停止！DDP 库适用于大多数主要编程语言和平台，你可以非常快速地让你的客户端、服务器，甚至是硬件设备与你的 Meteor 服务器进行通信，而不需要太多努力。这个配方将向你展示如何从
    `Node.js` 程序使用 DDP 连接到 Meteor 服务器。
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll want to use the code base from the *Using client-only collections* recipe,
    found in this chapter. Please create an instance of that project and start your
    `meteor` server.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将想要使用本章中找到的 *使用仅客户端集合* 配方的代码库。请创建该项目的实例并启动你的 `meteor` 服务器。
- en: 'You will need Node and npm installed to complete this recipe. They are installed
    with Meteor by default. However, if you need instructions on how to install Node.js
    and npm, they can be found on the following websites:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要安装 Node 和 npm 来完成这个配方。它们默认与 Meteor 一起安装。但是，如果你需要有关如何安装 Node.js 和 npm 的说明，可以在以下网站上找到：
- en: Node—[http://nodejs.org](http://nodejs.org)
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node—[http://nodejs.org](http://nodejs.org)
- en: NPM—[https://www.npmjs.com/](https://www.npmjs.com/)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NPM—[https://www.npmjs.com/](https://www.npmjs.com/)
- en: 'We will also need to make sure that the `ddp` npm module is installed. Open
    a terminal window and execute the following command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要确保 `ddp` `npm` 模块已安装。打开终端窗口并执行以下命令：
- en: '[PRE34]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Tip
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'When installing `npm` modules globally, you may need to use the `sudo` command,
    similar to the following command:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当全局安装 `npm` 模块时，你可能需要使用 `sudo` 命令，类似于以下命令：
- en: '[PRE35]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How to do it…
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will create a Node service that will check the `src` properties for records
    in our `URLs` collection to make sure they''re secure (HTTPS). If they aren''t
    secure, the Node service will call our Meteor `updateSRC` method and change the
    `src` properties to be secure. To integrate DDP with other technologies, perform
    the following steps:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个 Node 服务，该服务将检查 `URLs` 集合中记录的 `src` 属性以确保它们是安全的（HTTPS）。如果它们不安全，Node 服务将调用我们的
    Meteor `updateSRC` 方法并将 `src` 属性更改为安全。要与其他技术集成 DDP，请执行以下步骤：
- en: 'We first create the project folder. In a terminal window, create a `nodecheck`
    folder and `cd` to this directory, and add the `ddp` `npm` module by executing
    the following commands:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先创建项目文件夹。在终端窗口中，创建一个 `nodecheck` 文件夹，然后使用 `cd` 命令进入该目录，并通过执行以下命令添加 `ddp`
    `npm` 模块：
- en: '[PRE36]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We now want to create our service. Create a file in the `nodecheck` directory
    named `main.js`. Open it for editing and declare the DDP connection by adding
    the following code:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在想创建我们的服务。在 `nodecheck` 目录中创建一个名为 `main.js` 的文件。打开它进行编辑，并声明 DDP 连接，添加以下代码：
- en: '[PRE37]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We now want to connect to our Meteor server using the `.connect()` function
    and display the result of a successful subscription in the console window. Append
    the following code to `m``ain.js`:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在想使用 `.connect()` 函数连接到我们的 Meteor 服务器，并在控制台窗口中显示成功订阅的结果。将以下代码添加到 `main.js`：
- en: '[PRE38]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Finally, we will listen to the messages coming across the DDP wire using the
    `.on()` function. We will check all the `added` and `changed` messages and replace
    the URL with a secure URL where needed, using the `.call()` function to invoke
    the remote Meteor server `updateSRC` method. Append the following code to `m``ain.js`:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将使用 `.on()` 函数监听通过 DDP 传输的消息。我们将检查所有 `added` 和 `changed` 消息，并在需要时将 URL
    替换为安全的 URL，使用 `.call()` 函数调用远程 Meteor 服务器 `updateSRC` 方法。将以下代码添加到 `main.js`：
- en: '[PRE39]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Okay, we're now ready to run our Node service. Save all your changes, and make
    sure you have an instance of your original Meteor project open in a browser (usually
    `http://localhost:3000`) so that you can see the changes. They'll happen quickly,
    so don't blink!
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 好的，我们现在可以运行我们的 Node 服务了。保存所有更改，并确保你在浏览器中打开了你原始 Meteor 项目的实例（通常是 `http://localhost:3000`），这样你就可以看到更改。它们会很快发生，所以不要眨眼！
- en: 'In a terminal window, navigate to your `nodecheck` folder and enter the following
    command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端窗口中，导航到你的 `nodecheck` 文件夹，并输入以下命令：
- en: '[PRE40]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In your web browser, every link that was previously using `http` will now be
    using `https`. If you add another link and intentionally try to enter the link
    as `http`, the running node service will immediately change it to `https`. If
    you look in the terminal window where you ran the node `main.js` command, you''ll
    see the word **updated** for every converted link and your web browser will look
    something like the following screenshot:'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中，之前使用 `http` 的每个链接现在都将使用 `https`。如果你添加另一个链接并故意尝试将其作为 `http` 输入，正在运行的节点服务将立即将其更改为
    `https`。如果你查看运行 `node main.js` 命令的终端窗口，你将看到每个转换后的链接旁边都有单词 **updated**，你的网页浏览器看起来可能如下截图所示：
- en: '![How to do it…](img/image00373.jpeg)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/image00373.jpeg)'
- en: How it works…
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The Meteor server is listening for client subscription requests using DDP.
    Since we are using a DDP `client` library built for Node (using the `ddp` `npm`
    module), we are able to declare our connection using the new `DDPClient()` function,
    connect and subscribe to the `urls` channel, and monitor all messages coming through
    DDP using the `.on()` function:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor 服务器正在使用 DDP 监听客户端订阅请求。由于我们使用的是为 Node 构建的 DDP `client` 库（使用 `ddp` `npm`
    模块），因此我们可以使用新的 `DDPClient()` 函数声明我们的连接，连接并订阅 `urls` 通道，并使用 `.on()` 函数监控通过 DDP
    传递的所有消息：
- en: '[PRE41]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Finally, if we want to make a modification, we can do so by invoking the Meteor
    server''s remote `methods` using the `.call()` function:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们想要进行修改，可以通过调用 Meteor 服务器的远程 `methods` 来实现，使用 `.call()` 函数：
- en: '[PRE42]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: You'll notice that we had to do nothing on the Meteor server side to get this
    to work. That's the beauty of DDP; the protocol is the same for any compatible
    DDP library. As long as both systems are using the DDP protocol, the languages,
    hardware, and operating systems of the systems are immaterial and don't affect
    communications between the servers.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，我们不需要在 Meteor 服务器端做任何事情就能使它工作。这就是 DDP 的美妙之处；对于任何兼容的 DDP 库，协议都是相同的。只要两个系统都使用
    DDP 协议，系统的语言、硬件和操作系统都是无关紧要的，并且不会影响服务器之间的通信。
- en: As you can tell, the DDP protocol is quite powerful because it's simple and
    clean. There are many other aspects to DDP, for which you will want to consult
    the Meteor and the corresponding GitHub documentation.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，DDP 协议非常强大，因为它简单且清晰。DDP 还有许多其他方面，你将需要查阅 Meteor 和相应的 GitHub 文档。
- en: There's more…
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: You can see a fairly up-to-date list of available DDP clients by visiting Meteoropedia
    at [http://www.meteorpedia.com/read/DDP_Clients](http://www.meteorpedia.com/read/DDP_Clients).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问 Meteoropedia 在 [http://www.meteorpedia.com/read/DDP_Clients](http://www.meteorpedia.com/read/DDP_Clients)
    查看可用的 DDP 客户端列表。
- en: See also
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using client-only collections* and *Implementing multiserver DDP* recipes
    in this chapter
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *使用仅客户端集合* 和 *实现多服务器 DDP* 菜单
