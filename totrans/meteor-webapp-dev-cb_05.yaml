- en: Chapter 5. Implementing DDP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Reading the DDP stream
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using client-only collections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a multiserver DDP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating DDP with other technologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fundamental to Meteor is the concept of real-time applications, with the client
    and server interacting with each other using the principle of **data on the wire**.
    The folks at Meteor have developed a protocol for this real-time client-server
    communication, called the **Distributed Data Protocol** (**DDP**). As with everything
    else in Meteor, DDP is a discreet (albeit core) library, which you can use separately.
    The recipes in this chapter will show you how DDP works and give you some ideas
    about what you can do with it outside of its default use in Meteor.
  prefs: []
  type: TYPE_NORMAL
- en: Reading the DDP stream
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To truly understand what is going on with DDP (and for debugging purposes) it's
    useful to be able to read the DDP stream. Seeing DDP in action can not only help
    with the debugging process, but can also help you to better understand how flexible
    and useful this protocol is. This recipe will show you how to use Arunoda Susiripala's
    most excellent DDP Analyzer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need Meteor, Node, and npm installed. For installation instructions,
    visit the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: Node—[http://nodejs.org](http://nodejs.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: npm—[https://www.npmjs.com/](https://www.npmjs.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also need a project. You can use pretty much any project you like.
    Because it offers a decent, controllable amount of client-server communication
    (in other words, DDP streams), we will use the `todos` example application. Note
    that you can also use your own Meteor project if you like. We are only using this
    as an example because it's convenient and because we can control the flow of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the `todos` example, open a terminal window, navigate to a directory
    of your choice, and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Go ahead and start your Meteor application by entering the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You are now ready to install and run the DDP Analyzer on the `todos` app.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to install the DDP Analyzer. In a terminal window, enter and
    execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that you may need to use `sudo` when using the `–g` operator to make the
    Analyzer available from anywhere and to make sure it has proper permissions. After
    a brief installation process, the Analyzer will be installed and ready to be used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Analyzer proxy by entering the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will get a message similar to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to restart our Meteor instance with the environmental variable
    mentioned in the preceding step. In your terminal window, stop the `meteor` if
    it is still running and enter the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once the `meteor` starts the backup, navigate to `http://localhost:3000` in
    a browser and the DDP Analyzer will be ready for action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform several tasks, such as adding new `todo` items, completing/editing existing
    items, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take a look at the DDP stream in the terminal window where you started the DDP
    Analyzer. It will look similar to the following screenshot:![How to do it...](img/image00369.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be able to see all the messages intended for the clients. The numbers
    in yellow tell you which client it was sent to/from. Messages preceded by **IN**
    indicate that the message was sent from the server to the client. If the message
    is preceded by **OUT**, this indicates the message and outbound request from the
    client to the server. The messages are in plain text following the color-coded
    texts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With the DDP Analyzer, you can really get under the hood, seeing exactly how
    DDP works. You'll quickly realize how flexible and simple the protocol is, and
    you will gain a better understanding of what you can do with it inside your Meteor
    (or other) applications.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DDP, oversimplified, is a series of messages between two end points. The messages
    show updates, additions, and deletions, and are transmitted over websockets. This
    means the messages can be sent in real time, rather than waiting for the traditional
    client request polling. This cuts down on traffic (chatter) and ensures that the
    messages are delivered as quickly as possible.
  prefs: []
  type: TYPE_NORMAL
- en: The DDP Analyzer uses the DDP protocol and listens in on the streaming conversation
    between your browser and the Meteor application. When you changed the port that
    DDP executes through using the `DDP_DEFAULT_CONNECTION_URL=` command, you rerouted
    your app through port `3030`. The DDP Analyzer listened on this port, proxied
    the connection to port `3000`, and logged all the traffic approaching it in the
    terminal window.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have finished, be sure to either open a new terminal window or change
    your environment variable back to port `3000` using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you don't, your application will stop working because DDP is still running
    through port `3030`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the web console* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Optimizing
    Your Workflow"), *Optimizing Your Workflow*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using client-only collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To truly understand how DDP works, it's helpful to try *rolling your own* as
    far as communicating with data over the wire is concerned. The best way to do
    this (and a quite helpful recipe to boot!) is to let the client continue to take
    advantage of the built-in Mongo collections and programmatically send updates
    from the server based on some simple logic. This recipe will walk you through
    creating a client-only collection and manipulating this collection with calls
    on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to need a sample project to use as a baseline. For this baseline,
    we will quickly create a bookmark application. No bells and whistles, just a simple
    list of bookmark titles and URLs.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we first need our default template scaffolding. Please create a
    new project called `bookmarks` using the *Setting up your project file structure*
    recipe in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Optimizing Your Workflow"),
    *Optimizing Your Workflow*, as your starting file structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add and remove some Meteor packages. Start by removing the `autopublish`
    package. Open a terminal window, navigate to the root folder of your project,
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s add the `bootstrap` package. Execute the following command in
    your terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We will now add the HTML and JavaScript needed to create our `bookmarks` program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the contents of your `[project root]/client/main.html` file with the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, in your `[project root]/client/scripts` folder, add the following to
    `main.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a `templateHelpers.js` file in the same `scripts` folder and add
    the following `helpers` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same `templateHelpers.js` file, add the following `events` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need a bit of styling. Open the `style.css` file found in your `[project
    root]/libs/styles` folder and replace the existing styles with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to declare our URLs collection, so create a `collections.js` file in
    your `[project root]/both` folder and add the following `Mongo.Collection` declaration
    and `String.prototyp` `e` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we add some server logic. Open `[project root]/server/server.js` and
    replace any existing code with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Save all your changes, start up your `meteor` instance, and navigate to your
    project in a browser (usually `http://localhost:3000`). If everything went correctly,
    you will now have a working `bookmarks` app, where you can add URLs and (by double-clicking)
    add/change the titles for the bookmarks. The following screenshot is a sample
    of how the browser will look when it is complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00370.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to add a counter at the bottom of our `bookmarks` page. This counter
    will tell us how many secure and non-secure links we have (determined by whether
    the link starts with `https`).
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will add the client-only collection called `bmcounts` and subscribe
    to it. If we declare the collection anywhere in the `clients` folder, the server
    will not be able see it. Hence, it will be a client-only collection. Open the
    `main.js` file in your client `scripts` folder (`[project root]/client/scripts/main.js`)
    and add the following two lines around the existing `Meteor.subscribe(''urls'')`
    command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While we are in the `scripts` folder, let''s open the `templateHelpers.js`
    file and add the reactive `Template.helpers` function which we''ll need to display
    the counts. Add the following function to the bottom of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let''s add the HTML template. Open `main.html`, found in your `client`
    folder, and add the following code around the `<body>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll pretty up our counter a bit with some CSS as well. Open your `style.css`
    file, found in your `lib`/`styles` director, and add the following CSS declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have some real work to do now on the server side. We need to count and sort
    the bookmarks as they are added, removed, or changed. Open your `server.js` file,
    found in your `server` folder, and add the following `Meteor.publ``ish` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the preceding code block, we have three `TODO` comments. We first need
    to create the `added` listener. Directly under the `//TODO: Added` comment, add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next is the `removed` listener. Directly under the `//TODO: Removed` comment,
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, the `changed` listener. Add the following code directly under the
    `//TODO: Changed` comment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all your changes, start your `meteor` instance if it isn't already started,
    and navigate to your project in a browser (usually `http://localhost:3000`). You
    should see a small information button at the bottom-right corner of your screen
    with a count of secure and non-secure links. Add some new links, delete others,
    and watch the count change instantly in your browser, similar to the following
    screenshot:![How to do it…](img/image00371.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All of the client-side code we just added is exactly the same as it would be
    for a regular Mongo collection. As far as the client is concerned, everything
    is normal.
  prefs: []
  type: TYPE_NORMAL
- en: On the server, however, we'd need to manually update the DDP stream with the
    `.added` and `.changed` messages, based on the changes made to the `URLs` collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'To accomplish this, we start by using the function passed as an argument in
    the `Meteor.publish()` function arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This function is rerun every time a client subscribes to the DDP stream. Inside
    the function, we create a `handle` using the `Mongo.Cursor.observeChanges()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Inside the `observeChanges` function, if a document is added (except when initializing),
    we check whether the `src` property begins with `https` to see whether we can
    increment the `secCount` (secure count) variable; otherwise, we'll just increment
    the normal `count` variable.
  prefs: []
  type: TYPE_NORMAL
- en: If a document is removed, we have to do a bit of trickery, but we will recalculate
    the `secCount` and `count` variables.
  prefs: []
  type: TYPE_NORMAL
- en: If a document's `src` variable is changed, we will perform the same check as
    we did in `added` and move the increment from `count` to `secCount`.
  prefs: []
  type: TYPE_NORMAL
- en: These three situations will happen as the `URLs` collection changes in real
    time. Therefore, after each change, we will call the `self.changed()` function,
    which sends a message to the client via DDP, mimicking the automatic change messages
    that would be sent if we were modifying the `bmcounts` collection normally.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice that the `bmcounts` collection is never used on the server.
    Instead, we send messages to the client through the `"bmcounts"` subscription
    channel, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This is an important distinction. The client does not subscribe to the actual
    MondoDB collection. Instead, it subscribes to a `DDP` messaging channel. In this
    case, we're letting the client do the heavy lifting for us by sending the `"bmcounts"`
    subscription messages into the `bmcount` client-only collection. In essence, the
    server is sending data changes over the wire, and the client, being none the wiser,
    is treating the messages as actual data changes.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the method is cleanup for when a client unsubscribes, using `handle.stop()`
    to complete the initialization. It includes making a `self.added()` call, which
    does the same thing as a `self.changed()` call (mimics a data change and sends
    it over the wire to the subscribed clients). The final step in initialization
    is to call `self.ready()`, which lets the subscribed client know that all the
    initial data changes have been sent.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Implementing a partial collection* recipe in [Chapter 4](part0046.xhtml#aid-1BRPS1
    "Chapter 4. Creating Models"), *Creating Models*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Basic safety – turning off autopublish* recipe in [Chapter 9](part0073.xhtml#aid-25JP21
    "Chapter 9. Securing Your Application"), *Securing Your Application*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing multiserver DDP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The fun doesn't stop with a single client and server DDP connection. Oh no!
    Indeed, Meteor has invited everybody to the DDP party, and in this recipe, we're
    going to see how two Meteor servers can speak to each other using DDP.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the code base from the *Using client-only collections* recipe,
    found in this chapter. Please create an instance of this project and start your
    `meteor` server.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this project, we will change the color of the bookmark titles, based on
    whether the links are secure or not; so we need to make one change to our first
    project to make the color dependent on the `secType` property (which we will create
    in this recipe). Open the `templateHelpers.js` file, found in the `[project root]/client/scripts`
    folder of the first project. Locate the `Template.urls.helpers` section and make
    the following change to the `selected` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'As we will be implementing another Meteor server instance, we will also need
    to create a new Meteor project. In a terminal window, navigate to a location outside
    your root project folder, and enter the following commands in the terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This will properly initialize our second server instance and start it up on
    port `3030`.
  prefs: []
  type: TYPE_NORMAL
- en: We're now ready to get our second Meteor project talking to our first project!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to change the color of the bookmark titles using a new bookmark
    property called `secType`. Our new (second) project will check bookmarks as they
    come across the DDP wire and add a `secType` property if needed. Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will want to make use of the `String.startsWith()` function we''re
    familiar with from the *Using client-only collections* recipe. Add the following
    prototype modifier to the bottom of the `typecheck.js` file, found in your second
    project''s root folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we want to create a server-only file so that we can concentrate on the
    task at hand. Create a `server` folder in your project root and then create and
    open a file named `DDPChecker.js` for editing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `DDPChecker.js` file, add the following code to connect and subscribe
    to the `urls` collection from our first project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we create a function that checks a record to see whether the `secType`
    variable has been set or not. If it hasn''t and if there''s an `src` property
    to check, it will update the record with the appropriate `secType` variable. Add
    the following function to the bottom of `DDPChecker.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last piece of the puzzle is to add a call to the `checkSecType` function
    we just created, whenever a record is added or changed. We do this by calling
    the `observeChanges` function and the `URLs.find()` cursor. Add the following
    code to the bottom of `DDPChecker.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open a browser and navigate to your project (usually `http://localhost:3000`).
    The colors of each bookmark should correspond to the security types of the bookmark
    links, similar to the following screenshot:![How to do it…](img/image00372.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inside our second project, we are declaring the `URLs` collection and subscribing
    to changes just like we would in a normal `client` app. The difference here is
    that we''re establishing a connection to an existing Meteor server, using the
    `DDP.Connect()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: We passed the handle to this connection as an argument, called `conn`, when
    we declared our `URLs` collection. This tells Meteor that we're interested in
    the collection (more accurately, the DDP messages) coming from our first server.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid redundant code, we created the `checkSecType` function, which listens
    to the changes made to the `URLs` collection and sets the `secType` property to
    correspond with the security type of the `src` property. We then use the `checkSecType`
    function as the event handler for both `added` and `changed` events coming through
    the DDP wire via `observeChanges`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using DDP as a client isn't unique to Meteor. You can use DDP with nearly any
    technology. You'll see an example in the *Integrating DDP with other technologies*
    recipe, found later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Implementing a partial collection* recipe in [Chapter 4](part0046.xhtml#aid-1BRPS1
    "Chapter 4. Creating Models"), *Creating Models*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Integrating DDP with other technologies* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating DDP with other technologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The party never stops with DDP! DDP libraries are available for most major programming
    languages and platforms, and you can very quickly get your client, server, or
    even hardware devices talking to your Meteor server without much effort. This
    recipe will show you how to connect to a Meteor server using DDP from a `Node.js`
    program.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll want to use the code base from the *Using client-only collections* recipe,
    found in this chapter. Please create an instance of that project and start your
    `meteor` server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need Node and npm installed to complete this recipe. They are installed
    with Meteor by default. However, if you need instructions on how to install Node.js
    and npm, they can be found on the following websites:'
  prefs: []
  type: TYPE_NORMAL
- en: Node—[http://nodejs.org](http://nodejs.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NPM—[https://www.npmjs.com/](https://www.npmjs.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will also need to make sure that the `ddp` npm module is installed. Open
    a terminal window and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When installing `npm` modules globally, you may need to use the `sudo` command,
    similar to the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a Node service that will check the `src` properties for records
    in our `URLs` collection to make sure they''re secure (HTTPS). If they aren''t
    secure, the Node service will call our Meteor `updateSRC` method and change the
    `src` properties to be secure. To integrate DDP with other technologies, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We first create the project folder. In a terminal window, create a `nodecheck`
    folder and `cd` to this directory, and add the `ddp` `npm` module by executing
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now want to create our service. Create a file in the `nodecheck` directory
    named `main.js`. Open it for editing and declare the DDP connection by adding
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now want to connect to our Meteor server using the `.connect()` function
    and display the result of a successful subscription in the console window. Append
    the following code to `m``ain.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we will listen to the messages coming across the DDP wire using the
    `.on()` function. We will check all the `added` and `changed` messages and replace
    the URL with a secure URL where needed, using the `.call()` function to invoke
    the remote Meteor server `updateSRC` method. Append the following code to `m``ain.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Okay, we're now ready to run our Node service. Save all your changes, and make
    sure you have an instance of your original Meteor project open in a browser (usually
    `http://localhost:3000`) so that you can see the changes. They'll happen quickly,
    so don't blink!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In a terminal window, navigate to your `nodecheck` folder and enter the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In your web browser, every link that was previously using `http` will now be
    using `https`. If you add another link and intentionally try to enter the link
    as `http`, the running node service will immediately change it to `https`. If
    you look in the terminal window where you ran the node `main.js` command, you''ll
    see the word **updated** for every converted link and your web browser will look
    something like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00373.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Meteor server is listening for client subscription requests using DDP.
    Since we are using a DDP `client` library built for Node (using the `ddp` `npm`
    module), we are able to declare our connection using the new `DDPClient()` function,
    connect and subscribe to the `urls` channel, and monitor all messages coming through
    DDP using the `.on()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, if we want to make a modification, we can do so by invoking the Meteor
    server''s remote `methods` using the `.call()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: You'll notice that we had to do nothing on the Meteor server side to get this
    to work. That's the beauty of DDP; the protocol is the same for any compatible
    DDP library. As long as both systems are using the DDP protocol, the languages,
    hardware, and operating systems of the systems are immaterial and don't affect
    communications between the servers.
  prefs: []
  type: TYPE_NORMAL
- en: As you can tell, the DDP protocol is quite powerful because it's simple and
    clean. There are many other aspects to DDP, for which you will want to consult
    the Meteor and the corresponding GitHub documentation.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can see a fairly up-to-date list of available DDP clients by visiting Meteoropedia
    at [http://www.meteorpedia.com/read/DDP_Clients](http://www.meteorpedia.com/read/DDP_Clients).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using client-only collections* and *Implementing multiserver DDP* recipes
    in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
