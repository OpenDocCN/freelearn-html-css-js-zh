["```js\nconst subscribers = [];\nlet clickCount = 0;\nconst store = {\n  subscribe: (fn) => {\n    fn(clickCount);\n    subscribers.push(fn);\n    return () => {\n      subscribers.splice(subscribers.indexOf(fn), 1);\n    }\n  },\n}\n```", "```js\n<script>\n  import { store } from './store.js';\n</script>\n{$store}\n```", "```js\nconst store = {\n  subscribe: (fn) => {\n    // ...\n    document.addEventListener('click', () => {\n      clickCount++;\n      // notify subscribers\n      subscribers.forEach(subscriber => subscriber(clickCount));\n    });\n  },\n};\n```", "```js\nlet called = false;\nconst store = {\n  subscribe: (fn) => {\n    // ...\n    if (!called) {\n      called = true;\n      document.addEventListener('click', () => {... });\n    }\n  },\n};\n```", "```js\nconst store = {\n  subscribe: (fn) => {\n    // ...\n    if (subscribers.length === 0) {\n      document.addEventListener('click', () => {... });\n    }\n  },\n};\n```", "```js\nconst store = {\n  subscribe: (fn) => {\n    return () => {\n      subscribers.splice(subscribers.indexOf(fn), 1);\n      if (subscribers.length === 0) {\n        document.removeEventListener('click', () => {...});\n      }\n    };\n  },\n};\n```", "```js\nlet clickCount = 0;\nconst store = readable(clickCount, (set) => {\n  const onClick = () => set(++clickCount);\n  document.addEventListener('click', onClick);\n  return () => {\n    document.removeEventListener('click', onClick);\n  };\n});\n```", "```js\n<script>\n  const scrollPosition = createStore();\n  function createStore() {\n    // Your code here\n  }\n</script>\nScroll position {$scrollPosition}\n```", "```js\n<script>\n  let value = createUndoRedoStore();\n  $value = 123;\n  $value = 456;\n  $value = 789;\n  value.undo(); // $value now goes back to 456\n  value.undo(); // $value now goes back to 123\n  value.redo(); // $value now turns to 456\n</script>\nValue: {$value}\n```", "```js\nfunction createUndoRedoStore() {\n  const store = writable();\n  return store;\n}\n```", "```js\nfunction createUndoRedoStore() {\n  const store = writable();\n  function set(value) {\n    store.set(value);\n  }\n  return {\n    subscribe: store.subscribe,\n    set: set,\n  };\n}\n```", "```js\nfunction createUndoRedoStore() {\n  const store = writable();\n  function set(value) { store.set(value); }\n  function undo() {}\n  function redo() {}\n  return {\n    subscribe: store.subscribe,\n    set: set,\n    undo: undo,\n    redo: redo,\n  };\n}\n```", "```js\nfunction createUndoRedoStore() {\n  const store = writable();\n  const undoHistory = [];\n  const redoHistory = [];\n  function set(value) {\n    undoHistory.push(value);\n    redoHistory.length = 0; // resets redoHistory\n    store.set(value);\n  }\n  function undo() {\n    if (undoHistory.length <= 1) return;\n    redoHistory.push(undoHistory.pop());\n    store.set(undoHistory[undoHistory.length – 1]);\n  }\n  function redo() {\n    if (redoHistory.length === 0) return;\n    const value = redoHistory.pop();\n    undoHistory.push(value);\n    store.set(value);\n  }\n  // ...\n}\n```", "```js\nconst store = createTweenedStore(0); // $store = 0\n```", "```js\n$store = 10;\n```", "```js\n<script>\n  function debounce(store) { ... }\n  const store = writable();\n  const debouncedStore = debounce(store);\n</script>\nStore value: {$store}\nDebounced store value: {$debouncedStore}\n```", "```js\nfunction debounce(store) {\n  const debounced = writable();\n  return {\n    subscribe: debounced.subscribe,\n    set: store.set,\n  };\n}\n```", "```js\nfunction debounce(store) {\n  const debounced = writable();\n  function set(value) {\n    store.set(value);\n    // some debounce logic and call debounce.set(value);\n  }\n  return {\n    subscribe: debounced.subscribe,\n    set: set,\n  };\n}\n```", "```js\nfunction debounce(store) {\n  const debounced = writable();\n  store.subscribe(value => {\n    // some debounce logic and call debounce.set(value);\n  });\n  // ...\n}\n```", "```js\nfunction debounce(store) {\n  const debounced = writable();\n  let timeoutId = null;\n  store.subscribe(value => {\n    if (timeoutId !== null) clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      debounced.set(value);\n    }, 200);\n  });\n  // ...\n}\n```", "```js\nfunction debounce(store) {\n  const debounced = writable();\n  function subscribe(fn) {\n    const debouncedUnsubscribe = debounced.subscribe(fn);\n    const unsubscribe = store.subscribe(...);\n    return () => {\n      debouncedUnsubscribe();\n      unsubscribe();\n    };\n  }\n  // ...\n  return {\n    subscribe: subscribe,\n    set: store.set,\n  };\n}\n```", "```js\nimport { writable, derived } from 'svelte/store';\nconst store = writable(1);\nconst double = derived(store, value => value * 2);\n```", "```js\nconst store1 = writable(1);\nconst store2 = writable(2);\nconst sum = derived(\n  [store1, store2],\n  ([$store1, $store2]) => $store1 + $store2\n);\n```", "```js\nderived(store, ($store) => ...) // synchronous\nderived(store, ($store, set) => ...) // asynchronous\n```", "```js\nfunction debounce(store) {\n  const debounced = derived(store, (value, set) => {\n    let timeoutId = setTimeout(() => {\n      timeoutId = null;\n      set(value);\n    }, 200);\n    return () => {\n      if (timeoutId !== null) clearTimeout(timeoutId);\n    };\n  });\n  return {\n    subscribe: debounced.subscribe,\n    set: store.set,\n  };\n}\n```", "```js\nconst value = createUndoRedoStore();\nconst debouncedValue = debounce(value);\n$debouncedValue = 123;\n$debouncedValue = 456;\ndebouncedValue.undo(); // $debouncedValue reverts to 123\n```", "```js\nfunction debounce(store) {\n  const debounced = derived(...);\n  return {\n    ...store,\n    subscribe: debounced.subscribe,\n  };\n}\n```", "```js\nimport { writable } from 'svelte/store';\nconst originalStore = writable(100);\nconst undoRedoStore = undoRedo(originalStore);\n$undoRedoStore = 42;\nundoRedoStore.undo(); // store value now goes back to 5\n```"]