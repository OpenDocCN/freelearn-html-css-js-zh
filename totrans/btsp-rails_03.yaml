- en: Chapter 3. Powering a Rails App with Bootstrap's Grid System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have a good knowledge of what Bootstrap is, and how we can get it installed
    in our projects. With this chapter, we will understand the what can be done part
    of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Grid system is an integral part of the Bootstrap framework. You won't be able
    to make a responsive website/application without properly understanding Bootstrap's
    grid system. By responsive, I mean an application that works and looks perfect
    in devices of all sizes.
  prefs: []
  type: TYPE_NORMAL
- en: This is the generation of Hybrid applications! Developers want to write the
    code once and make it accessible from all the devices. To do this, they have to
    first make their web application responsive. Bootstrap helps in creating a responsive
    website using one of its most popular features called **grid system**.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will first understand Bootstrap's grid system and then proceed
    to use it in our first application called Online Packt Shopping. We will try to
    use this same app in the rest of book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Bootstrap's grid system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Bootstrap's Grid System in Rails application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Bootstrap's grid system?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we first think about grids, we imagine the intersection of vertical and
    horizontal lines that create grids. That's what's happening here too. Bootstrap's
    grid system contains rows equivalent to horizontal lines, and columns equivalent
    to vertical lines. When these rows and columns meet, they create grids, which
    can be used to fill some content in our webpage. Simple, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: One of the biggest advantages of using Bootstrap's grid system is that it is
    responsive. Unlike HTML tables, Bootstrap's grid system is flexible and adjusts
    itself properly in the smaller screens as well. The size of the grids in Bootstrap
    isn't fixed. They change as per the size of the device's screen. Hence, the content
    is rearranged, as per the space available.
  prefs: []
  type: TYPE_NORMAL
- en: Most developers fail to understand the grid system properly and hence they fail
    to achieve a responsive web design. In this section, we will first create a static
    non-Rails webpage showcasing how to create Bootstrap's Grid System, and then we
    will use it in our Rails application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a folder called `Responsive_website_static` anywhere in the system.
    Then, create an HTML file called `index.html`. We will use Bootstrap''s CDN link
    to import Bootstrap''s CSS and JavaScript codes inside the webpage. Now, open
    the `index.html` file and then paste the following basic HTML layout into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The above markup is as per Bootstrap's recommended markup. You can see that
    it has got some additional meta tags also. These meta tags are used to render
    the webpage properly in all kinds of devices. The `UTF-8` charset is used to tell
    the browser that your webpage contains some `unicode` characters.
  prefs: []
  type: TYPE_NORMAL
- en: The next meta tag with the `http-equiv="X-UA-Compatible"` and `content="IE=edge"`
    attributes is used for Internet Explorer. Sometimes, Internet Explorer switches
    to the compatible mode instead of using its best mode available. Hence, this tag
    tells Internet Explorer to use its best mode when rendering your website.
  prefs: []
  type: TYPE_NORMAL
- en: The next meta tag is a `viewport` tag. It tells the browser to scale and fit
    the webpage to the whole screen in mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of downloading the Bootstrap files from its browser, we have used the
    CDN links to link to the Bootstrap's CSS and JavaScript files. Since Bootstrap
    also depends on jQuery, we have also used the CDN link of the jQuery file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we have an `<h1>` tag to display the message **Hello World** on the
    webpage. So, let''s open it in the browser and check whether all the files have
    been properly loaded. The webpage should now look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is Bootstrap''s grid system?](img/7269OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you are using Google Chrome, you can easily check whether all the CDN files
    are loaded properly. Right-click anywhere on the webpage, and select the inspect
    element. Many web developer tool tabs will appear below the screen. Select the
    **Network** tab and reload the page. In the **Status Text** column, you will see
    many response codes against each resource name. If none of the response codes
    fail, then all the files are loaded properly.
  prefs: []
  type: TYPE_NORMAL
- en: '![What is Bootstrap''s grid system?](img/7269OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we start filling any content inside the webpage, we need to create a
    container. This will be used to wrap all the webpage content and center it to
    the browser screen. There are two different container classes in Bootstrap: `"container"`
    and `"container-fluid"` The first class, `"container"`, has a fixed width and
    centers itself to the browser window. The second class, `"container-fluid"`, is
    a full width container. It spans from the left edge to the right edge of the browser
    window. So, let''s define a container inside `index.html` and move the Hello World
    message inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is Bootstrap''s grid system?](img/7269OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see how it has moved the message towards the center. It will be more
    clearly visible if we apply a background to the container. So, let''s write an
    inline CSS to the container markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is Bootstrap''s grid system?](img/7269OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You should always define a container before using Bootstrap''s Grid System.
    We can now proceed to define rows. To define a row, we have to use a class called
    `row.` So, let''s proceed and create a row inside the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating a row is a way of telling Bootstrap that you want to use its grid
    system. It''s time to layout vertical columns inside the above row. A single column
    in Bootstrap will occupy all the space inside the row. Creating two columns will
    divide the row''s space into two equal halves. Hence, the more columns you create,
    the row''s space will be divided equally. Bootstrap''s grid system scales up to
    12 columns. If you create more than 12 columns, the remaining columns will be
    moved automatically to a new row. So, let''s first create a single column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is Bootstrap''s grid system?](img/7269OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A column in the Bootstrap grid system is declared using the amount of columns
    it will span across. If you want to create a single column, you need it to span
    across 12 Bootstrap columns. Hence, we get the class `"col-xs-12"`. If you want
    to create two columns, you have to use the class `"col-xs-6"`. This will make
    each column span across six Bootstrap columns. So, let''s proceed and create two
    columns in the preceding markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is Bootstrap''s grid system?](img/7269OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Bootstrap has defined classes for devices of different sizes. In the preceding
    examples, we have been using the classes such as `"col-xs-*"`. Here the letters
    *xs* stand for extra-small devices and the devices above that range. Hence a class,
    "`col-xs-"` will create a column of size 12 Bootstrap columns in all types of
    devices starting from extra-small devices. There are four different types of Bootstrap
    classes for four different sizes of devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Extra-Small Devices ".col-xs-*"`: These devices have a screen size less than
    768 px'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Small Devices ".col-sm-*"`: These devices have a screen size less than 992
    px and larger than or equal to 786 px'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Medium Devices ".col-md-*"`: These devices have a screen size less than 1200
    px and larger than and equal to 992 px'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Large Devices ".col-lg-*"`: These devices have a screen size larger than 1200
    px'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For instance, if you are defining columns, keeping in mind medium devices greater
    than or equal to 992 px, then these columns will look the same even in larger
    devices greater than or equal to 992 px 1200 px. They will be stacked on top of
    each other in small devices smaller than 992 px and extra-small devices 768 px.
    Hence, if you define columns for extra-small devices, then they will look the
    same in all kinds of devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Bootstrap, you can also dynamically change the number of columns in different
    devices. For example, using the classes `"col-xs-4"` and `"col-sm-6"` together
    will make a column span across four Bootstrap columns in extra-small devices,
    and six Bootstrap columns in small devices. The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is Bootstrap''s grid system?](img/7269OS_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows the webpage in extra-small devices. The browser
    renders one column per row because of the class `"col-xs-12"`.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, now you have got an idea of how Bootstrap's columns are named. So,
    let's proceed to another important concept in Bootstrap's grid system, nesting
    columns.
  prefs: []
  type: TYPE_NORMAL
- en: Nesting columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Bootstrap, it is possible to define columns within columns. To do so, you
    need to declare a new row within a column markup and then proceed to create columns
    within it. Let''s modify the previous code to test nested columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nesting columns](img/7269OS_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, you can clearly see that we have created two different
    columns within the first column. Since the second column doesn't have any nested
    columns in it, the background color (cyan) of the main container is now visible
    to us. This way you can create as many nesting columns as you want.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Bootstrap's grid system in a Rails application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to finally use the Grid system in our Rails application. As stated
    earlier, we will create an application called Online Packt Shopping. We will use
    grid system in this chapter and create a CRUD app for products. We will continue
    developing this app throughout this book as we learn Bootstrap's different features.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's proceed and create a Rails application called Online Packt Shopping.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the application is created, you should navigate inside the newly created
    folder and start the Rails server to test if the application is properly installed.
    So, let''s do it using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Access the webpage at `http://localhost:3000`. It should show the default Rails
    app **Welcome Board**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our product will have the following four attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: Name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Featured Image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Price
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's scaffold accordingly
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will scaffold and generate a product model with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will create a model named **NewProduct** and its associated attributes.
    You need to migrate the newly created model to the database. You can do so using
    the rake command, which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is done successfully, run the server and open: `http://localhost:3000/products`.
    You should see an empty products listing page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We have to first include Bootstrap in this application. For that, we will use
    the CDN method, as described in [Chapter 2](ch02.html "Chapter 2. Introducing
    Bootstrap 3"): *Introducing Bootstrap 3* in the section *Installing Bootstrap
    in a Rails project*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have included Bootstrap in your application, you can reload the preceding
    webpage and see the CSS reset the Bootstrap applies on the HTML elements. You
    can also see that the font has changed from `Times New Roman` to `Open Sans`.
    So, let''s take a look at the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will follow all the steps, as discussed in the previous section. First, we
    need to define a container for our application. Open `application.html.erb`, which
    is present in app/views/layouts.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to wrap `<%= yield %>` inside the Bootstrap container markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need to change the way the content appears on this page. We don't need
    a table to list our products. We will use Bootstrap's grid system to display the
    products beautifully in a responsive grid layout.
  prefs: []
  type: TYPE_NORMAL
- en: Open `index.html.erb` which is present inside the `products` folder by navigating
    to `app/views/products`. If you are familiar with Rails development, you must
    know that there's a separate folder present inside the `views` folder for each
    model. The `index.html.erb` file inside each model folder is used for displaying
    various models. Go ahead and delete everything which is present inside this file.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need a page header that tells the users what the page is displaying.
    So, let''s create a page header using Bootstrap''s `".page-header"` class. Insert
    the following code in `index.html.erb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to create a row for displaying the products. Hence, update the
    markup and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will create columns inside this row. For our application, we want the
    following features in our layout:'
  prefs: []
  type: TYPE_NORMAL
- en: Columns in extra-small mobile devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Columns in small mobile devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Columns in medium devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Columns in large devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hence, the combination which we will use to define our column is `"col-xs-12
    col-sm-6 col-md-4 col-lg-3"`. Let''s proceed and update the preceding row markup
    with a single column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now loop this column markup for each product. Hence, we need to update
    our markup as following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to fill this column with the product details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, I am looping through the `product` object to repeatedly
    print the same markup, but with a different data. For each product, I am printing
    its name using the `<h2>` tag, an image using, `<img>` tag, product description
    in a `<p>` tag, product price in the `<h4>` tag, and finally the link to the product
    page using `link_to`.
  prefs: []
  type: TYPE_NORMAL
- en: You can see, that while printing the data in HTML tags, I have also added some
    additional classes. These classes carry some CSS styles associated with them that
    are written by Bootstrap. For example, adding a class `"img-responsive"` to an
    `<img>` tag will make the image fit to the size of the grid, irrespective of the
    size of the image. I have also used the combination of classes `btn` and `btn-success`
    which are used for the `<a>` and `<button>` tags. These classes give links a fancy
    button look. We will learn more about these classes in subsequent chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s proceed and check out how this page will look once we have filled data
    in our database using the `New Product` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot is the desktop view.
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot is a medium-sized device view. This will be the view
    in most of the tablets in the market, the output for this is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can mark that the number of columns is reducing, as per our design requirement.
    The preceding image shows the layout in smaller devices. The following screenshot
    shows the view for extra-small devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that the layout has changed to single-column design in extra-small
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s still a thing missing in this page, a link to add a new product. Let''s
    place a nice fancy `New Product` page right-aligned with the page header. An update
    page header markup is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The webpage should now look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Bootstrap''s grid system in a Rails application](img/7269OS_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You must be wondering how I pulled the New Product button to the right side
    of the page. If you see the markup properly, I have used an additional Bootstrap
    class named `pull-right`. These classes are called helper classes in Bootstrap.
    There are many helper classes in Bootstrap, we will learn more about them as we
    proceed with the book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we understood Bootstrap''s Grid System and created two different
    types of projects: a static demo webpage and an online shopping Rails app. We
    saw how to use the Grid system, and make our homepage responsive to various sizes
    of devices. There are still many pages left unstyled in the current app: `add
    product` page, `edit product` page, and `single product` page. We will use Bootstrap
    to style them in subsequent chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will understand various typography support from Bootstrap,
    play with beautiful Bootstrap buttons, and do more with images using Bootstrap.
  prefs: []
  type: TYPE_NORMAL
