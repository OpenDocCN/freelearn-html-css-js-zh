- en: Leveraging the Edge of the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用云端的边缘优势
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下食谱：
- en: Serving a single-page application from the CDN
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 CDN 提供单页应用程序
- en: Associating a custom domain name with a CDN
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将自定义域名与 CDN 关联
- en: Serving a website from the CDN
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 CDN 提供网站
- en: Deploying a service behind a CDN
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 CDN 后部署服务
- en: Serving static JSON from a CDN
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 CDN 提供静态 JSON
- en: Triggering the invalidation of content in a CDN
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发 CDN 中内容的无效化
- en: Executing code at the edge of the cloud
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云端的边缘执行代码
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The edge of the cloud is likely the single most underrated layer of cloud-native
    systems. However, as I have previously mentioned, my first cloud-native *wow*
    moment was when I realized I could run a **single-page application** (**SPA**)
    presentation layer from the edge without the complexity, risk, and cost of running
    an elastic load balancer and multiple EC2 instances. Furthermore, leveraging the
    edge brings global scale to certain aspects of cloud-native systems without expending
    additional effort on multi-regional deployments. Our end users enjoy reduced latency,
    while we reduce the load on the internals of our system, reduce cost, and increase
    security. The recipes in this chapter cover a multitude of ways we can leverage
    the edge of the cloud to advance the quality of our cloud-native system, with
    minimum effort.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 云端的边缘可能是云原生系统中最被低估的一层。然而，正如我之前提到的，我的第一个云原生“哇”时刻是当我意识到我可以在不运行弹性负载均衡器和多个 EC2 实例的复杂度、风险和成本的情况下，从边缘运行
    **单页应用程序**（SPA）表示层。此外，利用边缘可以将云原生系统的一些方面扩展到全球规模，而无需在多区域部署上付出额外的努力。我们的最终用户享受较低的延迟，而我们减少了系统内部负载，降低了成本，并提高了安全性。本章中的食谱涵盖了多种我们可以利用云端的边缘来提升云原生系统质量的方法，而所需的工作量最小。
- en: Serving a single-page application from a CDN
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 CDN 提供单页应用程序
- en: In the *Deploying a single-page application* recipe, we covered the steps required
    to serve a single-page application from an S3 bucket. It is great fun to watch
    the light bulb turn on in an architect's mind when he or she realizes that such
    a simple deployment process can deliver so much scalability. Here is a recent
    quote from one of my customers—*That's it? No really, that's it*? In this recipe,
    we take this process one step further and demonstrate how easily we can add a
    CloudFront **Content Delivery Network** (**CDN**) layer in front of S3 to avail
    ourselves of even more valuable features.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *部署单页应用程序* 食谱中，我们介绍了从 S3 存储桶提供单页应用程序所需的步骤。当一位架构师意识到这样一个简单的部署过程可以提供如此多的可扩展性时，这真是一件令人愉快的事情。以下是来自我的客户的一个最近的引用——“这就完了？真的吗？这就完了？”在本食谱中，我们将此过程进一步推进，并展示我们如何轻松地在
    S3 前添加 CloudFront **内容分发网络**（CDN）层，以利用更多有价值的特性。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the project from the following template:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下模板创建项目：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Navigate to the `cncb-cdn-spa` directory with `cd cncb-cdn-spa`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cd cncb-cdn-spa` 切换到 `cncb-cdn-spa` 目录。
- en: 'Review the file named `serverless.yml` with the following content:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看以下内容的 `serverless.yml` 文件：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Install the dependencies with `npm install`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm install` 安装依赖。
- en: Run the tests with `npm test`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm test` 运行测试。
- en: 'Review the contents generated in the `.serverless` directory:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看在 `.serverless` 目录中生成的内容：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Build the app with `npm run build`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm run build` 构建应用。
- en: 'Deploy the stack:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署堆栈：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Deploying a CloudFront distribution can take upwards of 20 minutes or more.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 CloudFront 分发可能需要 20 分钟或更长时间。
- en: Review the stack and CloudFront distribution in the AWS Console.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中查看堆栈和 CloudFront 分发。
- en: 'Browse to `WebsiteS3URL` and `WebsiteDistributionURL`, shown in the stack output,
    and note the performance difference between the two in the network tab of your
    browser''s inspect tool, with the cache enabled and disabled:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到堆栈输出中显示的 `WebsiteS3URL` 和 `WebsiteDistributionURL`，并在浏览器检查工具的网络标签中注意启用和禁用缓存时两者的性能差异：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm run rm:lcl -- -s $MY_STAGE` 删除堆栈，一旦你完成操作。
- en: How it works...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The configuration of a CloudFront distribution is verbose and boilerplate. The
    `serverless-spa-config` plugin simplifies the effort, encapsulates the best practices,
    and allows for configuration by exception. In this recipe, we use all the defaults.
    In the generated `.serverless/cloudformation-template-update-stack.json` template,
    we can see that the `WebsiteBucket` is defined and configured as the default `S3Origin`,
    with the `index.html` file as the `DefaultRootObject`. The `PriceClass` defaults
    to North America and Europe, to minimize the amount of time it takes to provision
    the distribution. The error handling of the bucket (`ErrorDocument`) and the distribution
    (`CustomErrorResponses`) is configured to delegate error handling to the logic
    of the SPA.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFront分发的配置既冗长又模板化。`serverless-spa-config`插件简化了这项工作，封装了最佳实践，并允许通过异常进行配置。在这个菜谱中，我们使用所有默认设置。在生成的`.serverless/cloudformation-template-update-stack.json`模板中，我们可以看到`WebsiteBucket`被定义并配置为默认的`S3Origin`，其中`index.html`文件作为`DefaultRootObject`。`PriceClass`默认为北美和欧洲，以最小化分配分发所需的时间。桶的错误处理（`ErrorDocument`）和分发的错误处理（`CustomErrorResponses`）被配置为委托错误处理给SPA的逻辑。
- en: The main purpose of the distribution is to cache the SPA resources at the edge.
    This logic is handled by two pieces. First, the `DefaultCacheBehavior` is set
    up with a `DefaultTTL` of zero, to ensure that the cache-control headers of the
    individual resources in the bucket are used to control the TTL. Second, the `serverless-spa-deploy`
    plugin is configured with two different `CacheControl` settings. Everything other
    than the `index.html` file is deployed with a max-age of one year because Webpack
    names these resources with a hash value that is generated for each build to implicitly
    bust the cache. The `index.html` file must have a constant name, because it is
    the `DefaultRootObject`, so we set its max-age to 5 minutes. This means that within
    approximately five minutes of a deployment, we can expect end users to start receiving
    the latest code changes. After five minutes, the browser will ask the CDN for
    the `index.html` file and the CDN will return an error 304 if the ETag is unchanged.
    This strikes a balance between minimizing data transfer and allowing changes to
    propagate quickly. You can increase or decrease the max-age as you see fit.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 分发的核心目的是在边缘缓存SPA资源。这个逻辑由两部分处理。首先，`DefaultCacheBehavior`被设置为`DefaultTTL`为零，以确保使用桶中个别资源的缓存控制头来控制TTL。其次，`serverless-spa-deploy`插件配置了两个不同的`CacheControl`设置。除了`index.html`文件之外的所有内容都部署了一个最大存活时间（max-age）为一年，因为Webpack使用为每个构建生成的哈希值来命名这些资源，从而隐式地清除缓存。`index.html`文件必须有一个恒定的名称，因为它作为`DefaultRootObject`，所以我们将其max-age设置为5分钟。这意味着在部署后的大约五分钟内，我们可以预期最终用户开始接收最新的代码更改。五分钟后，浏览器将向CDN请求`index.html`文件，如果ETag未更改，CDN将返回错误304。这在不减少数据传输的同时允许快速传播更改。您可以根据需要增加或减少max-age。
- en: At this point, we are using the CDN to improve download performance for the
    user by pushing the resources to the edge to reduce latency, and compressing the
    resources to reduce bandwidth. This alone is reason enough to leverage the edge
    of the cloud. Additional features include custom domain names, SSL certificates,
    logging, and integration with a **web application firewall** (**WAF**). We will
    cover these topics in further recipes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们通过将资源推送到边缘以减少延迟，并压缩资源以减少带宽，使用CDN来提高用户的下载性能。仅此一项就足以利用云的边缘。其他功能包括自定义域名、SSL证书、日志记录以及与**Web应用防火墙（WAF**）的集成。我们将在后续的菜谱中介绍这些主题。
- en: Associating a custom domain name with a CDN
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将自定义域名与CDN关联
- en: In the *Serving a single-page application from a CDN* recipe, we covered the
    steps required to add a CloudFront CDN layer in front of S3 and avail ourselves
    of more valuable features. One of these features is the ability to associate a
    custom domain name with the resources served from the CDN, such as a single-page
    application or a cloud-native service. In this recipe, we will take the deployment
    process another step further and demonstrate how to add a Route53 record set and
    a CloudFront alias.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在“从CDN中提供单页应用程序”菜谱中，我们介绍了在S3前面添加CloudFront CDN层并利用更多有价值功能的步骤。这些功能之一是能够将自定义域名与CDN提供的资源关联起来，例如单页应用程序或云原生服务。在这个菜谱中，我们将部署过程再向前推进一步，并演示如何添加Route53记录集和CloudFront别名。
- en: Getting ready
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need a registered domain name and a Route53 hosted zone, which you
    can use in this recipe to create a subdomain for the SPA that will be deployed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个已注册的域名和一个 Route53 托管区域，您可以使用这些信息在本配方中创建一个用于部署的 SPA 子域名。
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the project from the following template:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下模板创建项目：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Navigate to the `cncb-cdn-dns` directory with `cd cncb-cdn-dns`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cd cncb-cdn-dns` 命令进入 `cncb-cdn-dns` 目录。
- en: 'Review the file named `serverless.yml` with the following content:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看以下内容的 `serverless.yml` 文件：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Update the `serverless.yml` file with your `hostedZoneId` and `domainName`.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的 `hostedZoneId` 和 `domainName` 更新 `serverless.yml` 文件。
- en: Install the dependencies with `npm install`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm install` 安装依赖项。
- en: Run the tests with `npm test`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm test` 运行测试。
- en: 'Review the contents generated in the `.serverless` directory:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看在 `.serverless` 目录中生成的内容：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Build the app with `npm run build`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm run build` 构建应用程序。
- en: 'Deploy the stack:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署堆栈：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Deploying a CloudFront distribution can take upwards of 20 minutes or more.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 CloudFront 分发可能需要 20 分钟或更长时间。
- en: Review the stack, Route53, and CloudFront distribution in the AWS Console.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中查看堆栈、Route53 和 CloudFront 分发。
- en: 'Browse to `WebsiteURL`, shown in the stack output:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到堆栈输出中显示的 `WebsiteURL`：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后使用 `npm run rm:lcl -- -s $MY_STAGE` 删除堆栈。
- en: How it works...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we improve on the *Serving a single-page application from a
    CDN* recipe by adding a custom domain name for the SPA. In `serverless.yml`, we
    added the `hostedZoneId`, `domainName`, and `endpoint` values. These values trigger
    the `serverless-spa-config` plugin to configure the `WebsiteEndpointRecord` in
    Route53, and set the `Aliases` on the CloudFront distribution.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们通过为 SPA 添加自定义域名来改进 *从 CDN 提供单页应用程序* 配方。在 `serverless.yml` 中，我们添加了 `hostedZoneId`、`domainName`
    和 `endpoint` 值。这些值触发 `serverless-spa-config` 插件配置 Route53 中的 `WebsiteEndpointRecord`，并在
    CloudFront 分发上设置 `Aliases`。
- en: Serving a website from the CDN
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 CDN 提供网站服务
- en: As an industry, we have a tendency to create very dynamic websites, even when
    the content does not change frequently. Some **Content Management Systems** (**CMS**)
    recalculate content for every request, even when the content has not changed.
    These requests pass through multiple layers, read from the database, and then
    calculate and return the response. It is not uncommon to see average response
    times in the range of five seconds. It is said that doing the same thing over
    and over again and expecting a different result is the definition of insanity.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作为行业，我们倾向于创建非常动态的网站，即使内容不经常变化。一些 **内容管理系统** (**CMS**) 即使内容没有变化，也会为每个请求重新计算内容。这些请求通过多个层级，从数据库读取，然后计算并返回响应。平均响应时间在五秒左右并不罕见。据说，重复做同样的事情并期望不同的结果，这就是疯狂的定义。
- en: Cloud-native systems take an entirely different approach to creating websites.
    JAMstack ([https://jamstack.org](https://jamstack.org)) is a modern, cloud-native
    approach based on client-side JavaScript, reusable APIs, and Markup. These static
    sites are managed by Git workflows, generated by CI/CD pipelines, and deployed
    to the edge of the cloud many times a day. This is yet another example of cloud-native
    challenging us to rewire our software engineering brains. This recipe demonstrates
    the generation and deployment of these static websites.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生系统在创建网站方面采取了一种完全不同的方法。JAMstack ([https://jamstack.org](https://jamstack.org))
    是一种基于客户端 JavaScript、可重用 API 和标记的现代云原生方法。这些静态网站由 Git 工作流程管理，由 CI/CD 管道生成，并且每天部署到云的边缘多次。这是云原生挑战我们重新配置软件工程大脑的另一个例子。本配方演示了这些静态网站的生成和部署。
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the project from the following template:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下模板创建项目：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Navigate to the `cncb-cdn-site` directory with `cd cncb-cdn-site`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cd cncb-cdn-site` 命令进入 `cncb-cdn-site` 目录。
- en: 'Review the file named `serverless.yml` with the following content:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看以下内容的 `serverless.yml` 文件：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Update the `serverless.yml` file with your `hostedZoneId` and `domainName`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的 `hostedZoneId` 和 `domainName` 更新 `serverless.yml` 文件。
- en: Install the dependencies with `npm install`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm install` 安装依赖项。
- en: Run the tests with `npm test`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm test` 运行测试。
- en: 'Review the contents generated in the `.serverless` directory:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看在 `.serverless` 目录中生成的内容：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Deploy the stack:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署堆栈：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Deploying a CloudFront distribution can take upwards of 20 minutes or more.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 CloudFront 分发可能需要 20 分钟或更长时间。
- en: Review the stack, Route53, and CloudFront distribution in the AWS Console.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWS控制台中查看堆栈、Route53和CloudFront分发。
- en: 'Browse to `WebsiteURL`, shown in the stack output, and again without the `www.`,
    and observe the redirect to `www`:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到堆栈输出中显示的`WebsiteURL`，然后再不带`www.`的情况下浏览，并观察重定向到`www`：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Browse through the website pages.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览网站页面。
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成使用`npm run rm:lcl -- -s $MY_STAGE`后，删除堆栈。
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we use a static site generator called **Phenomic** ([https://www.staticgen.com/phenomic](https://www.staticgen.com/phenomic)).
    There is a seemingly endless array of tools enumerated on the **StaticGen** site
    ([https://www.staticgen.com](https://www.staticgen.com)). With Phenomic, we write
    the website in a combination of ReactJS and Markdown. Then, we isomorphically
    generate the JavaScript and Markdown into a set of static resources that we deploy
    to S3, as can be seen in the deployment output. I have pre-built the website and
    included the generated resources in the repository. A typical SPA downloads the
    JavaScript and generates the site in the browser. Depending on the website, this
    process can be lengthy and noticeable. Runtime-based isomorphic generation performs
    this process on the server-side before returning the website to the browser. A
    JAMstack website, on the other hand, is statically generated at deployment time,
    which results in the best runtime performance. Although the website is static,
    the pages contain dynamic JavaScript that is written just like in any ReactJS
    SPA. These websites are frequently updated and re-deployed multiple times per
    day, which adds another dynamic dimension without having to ask the server on
    every request if something has changed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们使用了一个名为**Phenomic**的静态站点生成器（[https://www.staticgen.com/phenomic](https://www.staticgen.com/phenomic)）。在**StaticGen**网站上列出了看似无穷无尽的工具（[https://www.staticgen.com](https://www.staticgen.com)）。使用Phenomic，我们用ReactJS和Markdown的组合编写网站。然后，我们将JavaScript和Markdown同构生成一组静态资源，并将其部署到S3，如部署输出所示。我已经预先构建了网站，并将生成的资源包含在存储库中。一个典型的SPA会在浏览器中下载JavaScript并生成网站。根据网站的不同，这个过程可能很耗时且明显。基于运行时的同构生成在将网站返回浏览器之前在服务器端执行此过程。另一方面，JAMstack网站在部署时静态生成，这导致了最佳的运行时性能。尽管网站是静态的，但页面包含像任何ReactJS
    SPA一样编写的动态JavaScript。这些网站经常更新并每天多次重新部署，这在不要求每次请求都询问服务器是否有所变化的情况下，又增加了一个动态维度。
- en: These sites are typically deployed to a `www` subdomain, and support redirecting
    the root domain to this subdomain. Building on the *Serving a single-page application
    from a CDN* and *Associating a custom domain name with CDN* recipes, this recipe
    leverages the `serverless-spa-deploy` and `serverless-spa-config` plugins and
    adds some additional settings. We specify the `endpoint` as `www.${self:custom.dns.domainName}`
    and set the redirect flag to `true`. This, in turn, creates the `RedirectBucket`, which
    performs the redirects, along with an additional `RedirectDistribution` and `RedirectEndpointRecord`
    to support the root domain.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这些网站通常部署到`www`子域名，并支持将根域名重定向到该子域名。基于**从CDN提供单页应用程序**和**将自定义域名与CDN关联**的菜谱，这个菜谱利用了`serverless-spa-deploy`和`serverless-spa-config`插件，并添加了一些额外的设置。我们指定`endpoint`为`www.${self:custom.dns.domainName}`，并将重定向标志设置为`true`。这反过来创建了`RedirectBucket`，它执行重定向，以及额外的`RedirectDistribution`和`RedirectEndpointRecord`以支持根域名。
- en: Deploying a service behind a CDN
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在CDN后面部署服务
- en: When we think of a CDN, it is typical to think that they are only useful for
    serving up static content. However, it is an AWS best practice to place CloudFront
    in front of all resources, even dynamic services, to improve security and performance.
    From a security perspective, CloudFront minimizes the attack surfaces and handles
    DDOS attacks at the edge to reduce the load on internal components. With regard
    to performance, CloudFront optimizes the pipe between the edge and availability
    zones, which improves performance even for `POST` and `PUT` operations. Furthermore,
    even a cache-control header of just a few seconds can have a significant impact
    on `GET` operations. In this recipe, we will demonstrate how to add CloudFront
    in front of the AWS API Gateway.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想到 CDN 时，通常会认为它们仅用于提供静态内容。然而，将 CloudFront 放置在所有资源之前，即使是动态服务，也是 AWS 的最佳实践，以提高安全性和性能。从安全角度来看，CloudFront
    最小化了攻击面，并在边缘处理 DDoS 攻击，以减轻内部组件的负载。至于性能，CloudFront 优化了边缘和可用区之间的管道，即使对于 `POST` 和
    `PUT` 操作也能提高性能。此外，即使只有几秒钟的缓存控制头也能对 `GET` 操作产生重大影响。在本菜谱中，我们将演示如何将 CloudFront 添加到
    AWS API Gateway 之前。
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the project from the following template:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下模板创建项目：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Navigate to the `cncb-cdn-service` directory with `cd cncb-cdn-service`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cd cncb-cdn-service` 命令进入 `cncb-cdn-service` 目录。
- en: 'Review the file named `serverless.yml` with the following content:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看名为 `serverless.yml` 的文件，其内容如下：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Review the file named `handler.js` with the following content:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看名为 `handler.js` 的文件，其内容如下：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Install the dependencies with `npm install`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm install` 安装依赖项。
- en: Run the tests with `npm test`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm test` 运行测试。
- en: Review the contents generated in the `.serverless` directory.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看在 `.serverless` 目录中生成的内容。
- en: 'Deploy the stack:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署堆栈：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Deploying a CloudFront distribution can take upwards of 20 minutes or more.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 CloudFront 分发可能需要 20 分钟或更长时间。
- en: Review the stack and CloudFront distribution in the AWS Console.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中查看堆栈和 CloudFront 分发。
- en: 'Invoke the endpoint shown in the stack output, with the following `curl` command,
    multiple times to see the difference in performance for the cached results:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 `curl` 命令多次调用堆栈输出中显示的端点，以查看缓存结果的性能差异：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后使用 `npm run rm:lcl -- -s $MY_STAGE` 删除堆栈。
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first thing to note in the `serverless.yml` file is that the `endpointType`
    is set to `REGIONAL`. By default, AWS API Gateway will provision a CloudFront
    distribution. However, we do not have access to this distribution and cannot take
    advantage of all its features. Plus, the default does not support multi-regional
    deployments. Therefore, we specify `REGIONAL` so that we can manage the CDN ourselves.
    Next, we need to configure the `Origins`. We specify the `DomainName` to point
    to the regional API Gateway endpoint, and we specify the stage as the `OriginPath`,
    so that we no longer need to include it in the URL.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `serverless.yml` 文件中要注意的第一件事是 `endpointType` 设置为 `REGIONAL`。默认情况下，AWS API
    Gateway 将提供 CloudFront 分发。然而，我们无法访问此分发，也无法利用其所有功能。此外，默认设置不支持多区域部署。因此，我们指定 `REGIONAL`
    以便我们可以自行管理 CDN。接下来，我们需要配置 `Origins`。我们指定 `DomainName` 指向区域 API Gateway 端点，并指定阶段为
    `OriginPath`，这样我们就不需要在 URL 中包含它了。
- en: Next, we configure the `DefaultCacheBehavior`. We allow both read and write
    methods, and we cache the read methods. We set `DefaultTTL` to zero to ensure
    that the `Cache-Control` headers set in the service code are used to control the
    TTL. In this recipe, the code sets the `max-age` to 5 seconds, and we can see
    that our cache hits respond approximately twice as fast. We also set `Compress`
    to `true` to minimize data transfer for both increased performance and to help
    reduced cost. It is important to forward all the `Headers` that are expected by
    the backend. For example, the authorization header is crucial for securing a service
    with OAuth 2.0, as we will discuss in the *Securing an API gateway with OAuth
    2.0* recipe in [Chapter 5](75b256e5-1fe4-4c9e-ab56-28cef7a8a0ab.xhtml), *Securing
    Cloud-Native Systems*.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们配置 `DefaultCacheBehavior`。我们允许读取和写入方法，并缓存读取方法。我们将 `DefaultTTL` 设置为零以确保在服务代码中设置的
    `Cache-Control` 头部用于控制 TTL。在本配方中，代码将 `max-age` 设置为 5 秒，我们可以看到我们的缓存命中响应速度大约是两倍。我们还设置
    `Compress` 为 `true` 以最小化数据传输，从而提高性能并帮助降低成本。向前转发所有后端期望的 `Headers` 非常重要。例如，授权头部对于使用
    OAuth 2.0 保护服务至关重要，正如我们将在第 5 章 *使用 OAuth 2.0 保护 API 网关* 配方中讨论的那样，*保护云原生系统*。
- en: Note that `ApiGatewayRestApi` is the logical resource ID that is created and
    controlled by the Serverless Framework.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`ApiGatewayRestApi` 是由 Serverless Framework 创建和控制的逻辑资源 ID。
- en: Serving static JSON from a CDN
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 CDN 提供静态 JSON
- en: In the *Implementing a search BFF* recipe, we created a service that serves
    some content from a materialized view in Elasticsearch via an API Gateway, and
    other content directly from a materialized view in S3\. This is a great approach
    that can cost-effectively deliver under extremely heavy loads. In this recipe,
    we will demonstrate how to add a single CloudFront distribution in front of both
    the API Gateway and S3 to encapsulate these internal design decisions behind a
    single domain name.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *实现搜索 BFF* 配方中，我们创建了一个服务，通过 API Gateway 从 Elasticsearch 中的物化视图中提供一些内容，并直接从
    S3 中的物化视图中提供其他内容。这是一个非常棒的方法，可以在极端高负载下以成本效益的方式交付。在本配方中，我们将演示如何为 API Gateway 和 S3
    前面添加单个 CloudFront 分发，以将这些内部设计决策封装在单个域名之后。
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the project from the following template:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下模板创建项目：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Navigate to the `cncb-cdn-json` directory with `cd cncb-cdn-json`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cd cncb-cdn-json` 切换到 `cncb-cdn-json` 目录。
- en: 'Review the file named `serverless.yml` with the following content:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看以下内容的 `serverless.yml` 文件：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Install the dependencies with `npm install`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm install` 安装依赖项。
- en: Run the tests with `npm test`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm test` 运行测试。
- en: Review the contents generated in the `.serverless` directory.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看在 `.serverless` 目录中生成的内容。
- en: 'Deploy the stack:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署堆栈：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Deploying a CloudFront distribution can take upwards of 20 minutes or more.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 CloudFront 分发可能需要 20 分钟或更长时间。
- en: Review the stack and CloudFront distribution in the AWS Console.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中查看堆栈和 CloudFront 分发。
- en: 'Invoke the following command to load data:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令加载数据：
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Invoke the endpoint shown in the stack output with the following `curl` commands:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 `curl` 命令调用堆栈输出中显示的端点：
- en: '[PRE24]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Remove the stack with `npm run rm:lcl -- -s $MY_STAGE`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm run rm:lcl -- -s $MY_STAGE` 删除堆栈。
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe builds on the *Deploying a service behind a CDN* recipe. The main
    difference in this recipe is that we have multiple `Origins` and multiple `CacheBehaviors`,
    one each for our `Bucket` and our `ApiGatewayRestApi`. We use the `DefaultCacheBehavior`
    for our `S3Origin`, because we could store many different business domains in
    the bucket with different paths. Conversely, there is a single `PathPattern` (`/search`)
    that needs to be directed to our `APIGateway` origin, therefore we define this
    under `CacheBehaviors`. Again, in all cases, we set the `DefaultTTL` to zero to
    ensure our cache-control headers control the TTL. The end result is that our multiple
    origins now look like one from the outside.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方基于 *在 CDN 后部署服务* 配方。本配方中的主要区别在于我们有多达多个 `Origins` 和多个 `CacheBehaviors`，每个分别对应我们的
    `Bucket` 和 `ApiGatewayRestApi`。我们为我们的 `S3Origin` 使用 `DefaultCacheBehavior`，因为我们可以在桶中存储许多不同的业务域，路径不同。相反，有一个单一的
    `PathPattern` (`/search`) 需要指向我们的 `APIGateway` 原点，因此我们在 `CacheBehaviors` 下定义它。再次强调，在所有情况下，我们将
    `DefaultTTL` 设置为零以确保我们的缓存控制头控制 TTL。最终结果是，我们的多个原点现在从外部看起来像一个。
- en: Note that `ApiGatewayRestApi` is the logical resource ID that is created and
    controlled by the Serverless Framework.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`ApiGatewayRestApi` 是由 Serverless Framework 创建和控制的逻辑资源 ID。
- en: Triggering the invalidation of content in a CDN
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发 CDN 中内容的失效
- en: In the *Implementing a search BFF* recipe, we statically serve dynamic JSON
    content from S3, and in the *Serving static JSON from a CDN* recipe, we add a
    cache-control header with a long max-age to further improve the performance. This
    technique works great for content that is dynamic, yet changes at a slow and unpredictable
    rate. In this recipe, we will demonstrate how to improve on this design by responding
    to data change events and invalidating the cache so that the latest data is retrieved.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *实现搜索 BFF* 配方中，我们从 S3 静态服务动态 JSON 内容，在 *从 CDN 服务器静态 JSON* 配方中，我们添加了一个具有长最大年龄的缓存控制头，以进一步提高性能。这种技术对于动态且变化缓慢且不可预测的内容非常有效。在此配方中，我们将展示如何通过响应数据更改事件并使缓存失效，以便检索最新数据。
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the project from the following template:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下模板创建项目：
- en: '[PRE25]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Navigate to the `cncb-cdn-invalidate` directory with `cd cncb-cdn-invalidate`.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cd cncb-cdn-invalidate` 命令导航到 `cncb-cdn-invalidate` 目录。
- en: 'Review the file named `serverless.yml` with the following content:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看名为 `serverless.yml` 的文件，其内容如下：
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Review the file named `handler.js` with the following content:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看名为 `handler.js` 的文件，其内容如下：
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Install the dependencies with `npm install`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm install` 安装依赖项。
- en: Run the tests with `npm test`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm test` 运行测试。
- en: Review the contents generated in the `.serverless` directory.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看在 `.serverless` 目录中生成的内容。
- en: 'Deploy the stack:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署堆栈：
- en: '[PRE28]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Deploying a CloudFront distribution can take upwards of 20 minutes or more.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 CloudFront 分发可能需要 20 分钟或更长时间。
- en: Review the stack in the AWS Console.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中查看堆栈。
- en: 'Invoke the following command to load data:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令加载数据：
- en: '[PRE29]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Invoke the endpoint shown in the stack output with the following `curl` commands:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 `curl` 命令调用堆栈输出中的端点：
- en: '[PRE30]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Invoke the following command to load data:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令加载数据：
- en: '[PRE31]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Take a look at the logs for the `trigger` function:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看 `trigger` 函数的日志：
- en: '[PRE32]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Invoke the endpoint shown in the stack output with the following `curl` commands
    until the invalidation completes and the output changes:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 `curl` 命令调用堆栈输出中的端点，直到失效完成且输出更改：
- en: '[PRE33]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，使用 `npm run rm:lcl -- -s $MY_STAGE` 删除堆栈。
- en: How it works...
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe builds on the *Implementing a materialized view in S3* and *Implementing
    a search BFF* recipes. We define the bucket's `NotificationConfiguration` to send
    events to the SNS `BucketTopic` so that we can trigger more than one consumer.
    In the *Implementing a search BFF* recipe, we triggered indexing in Elasticsearch.
    In this recipe, we demonstrate how we can also trigger the invalidation of the
    cache in the CloudFront distribution. The `trigger` function creates an invalidation
    request for each `trigger.s3.object.key`. These invalidations will force the CDN
    to retrieve these resources from the origin the next time they are requested.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方基于 *在 S3 中实现物化视图* 和 *实现搜索 BFF* 配方。我们定义存储桶的 `NotificationConfiguration` 以将事件发送到
    SNS `BucketTopic`，以便我们可以触发多个消费者。在 *实现搜索 BFF* 配方中，我们在 Elasticsearch 中触发了索引。在此配方中，我们展示了如何触发
    CloudFront 分发中缓存的失效。`trigger` 函数为每个 `trigger.s3.object.key` 创建一个失效请求。这些失效将迫使 CDN
    在下一次请求时从源检索这些资源。
- en: A slow flow of invalidations does not incur significant cost. However, large
    batches of individual invalidations can be costly. This could occur during a data
    conversion process when enhancing a service. In these cases, the `DISABLED` environment
    variable should be set to `true` before executing the conversion. Then, manually
    invalidate the distribution with a wildcard when the conversion is complete.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存失效的缓慢流程不会产生显著成本。然而，大量单个失效批次可能会产生费用。这可能在增强服务时的数据转换过程中发生。在这些情况下，在执行转换之前应将 `DISABLED`
    环境变量设置为 `true`。然后，在转换完成后，使用通配符手动失效分发。
- en: Executing code at the edge of the cloud
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在云边缘执行代码
- en: AWS Lambda@Edge is a feature that allows functions to execute at the edge of
    the cloud in response to CloudFront events. This capability opens some interesting
    opportunities to control, modify, and generate content at the edge of the cloud
    with extremely low latency. I think we are only just beginning to uncover the
    potential use cases that can be implemented with this new feature. This recipe
    demonstrates the association of a bare-bones function with a CloudFront distribution.
    The function responds with an Unauthorized (403) status code when an authorization
    header is not present in the request.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda@Edge 是一个功能，允许函数在云边缘响应 CloudFront 事件时执行。这种能力为在云边缘以极低延迟控制、修改和生成内容提供了有趣的机会。我认为我们才刚刚开始挖掘可以使用这个新功能实现的应用场景。这个配方演示了将裸骨函数与
    CloudFront 分发关联起来。当请求中不存在授权头时，该函数会以未授权（403）状态码响应。
- en: How to do it...
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the project from the following template:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下模板创建项目：
- en: '[PRE34]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Navigate to the `cncb-cdn-lambda` directory with `cd cncb-cdn-lambda`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cd cncb-cdn-lambda` 命令导航到 `cncb-cdn-lambda` 目录。
- en: 'Review the file named `serverless.yml` with the following content:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看名为 `serverless.yml` 的文件，其内容如下：
- en: '[PRE35]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Install the dependencies with `npm install`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm install` 安装依赖项。
- en: Run the tests with `npm test`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm test` 运行测试。
- en: 'Review the contents generated in the `.serverless` directory:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看在 `.serverless` 目录中生成的内容：
- en: '[PRE36]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Deploy the stack:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署栈：
- en: '[PRE37]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Deploying a CloudFront distribution can take upwards of 20 minutes or more.
    Any changes to these functions will cause a redeploy of the distribution, because
    the distribution is linked to the function version.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 CloudFront 分发可能需要 20 分钟或更长时间。对这些函数的任何更改都将导致分发的重新部署，因为分发与函数版本相关联。
- en: Review the stack, function, and CloudFront distribution in the AWS Console.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中查看栈、函数和 CloudFront 分发。
- en: 'Invoke the following command to load the data:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令加载数据：
- en: '[PRE38]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Invoke the endpoint shown in the stack output with the following `curl` commands:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 `curl` 命令调用栈输出中显示的端点：
- en: '[PRE39]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Review the logs in the AWS Console.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中查看日志。
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm run rm:lcl -- -s $MY_STAGE` 命令完成后删除栈。
- en: Lambda@Edge replicates functions to multiple regions per the `PriceClass` of
    the distribution. A function cannot be deleted until all the replicas have been
    deleted. This should happen within several hours of deleting the distribution.
    Therefore, removing the stack will initially fail, and can be repeated after the
    replicas have been deleted.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda@Edge 根据分发的 `PriceClass` 将函数复制到多个区域。在所有副本被删除之前，无法删除函数。这应该在删除分发后的几小时内发生。因此，删除栈最初会失败，可以在副本被删除后重复执行。
- en: How it works...
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we use the `serverless-plugin-cloudfront-lambda-edge` plugin
    to associate the `authorize` function with the CloudFront `ApiDistribution`. We
    specify the `distribution` and the `eventType` under the `lambdaAtEdge` element.
    The plugin then uses this information to create the `LambdaFunctionAssociations`
    element on the distribution in the generated CloudFormation template. The `eventType`
    can be set to `viewer-request`, `origin-request`, `origin-response`, or `view-response`.
    This recipe uses the `viewer-request`, because it needs access to the authorization
    header sent by the viewer. We explicitly set the `memorySize` and `timeout` for
    the function, because Lambda@Edge imposes restrictions on these values.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们使用 `serverless-plugin-cloudfront-lambda-edge` 插件将 `authorize` 函数与 CloudFront
    的 `ApiDistribution` 关联起来。我们在 `lambdaAtEdge` 元素下指定了 `distribution` 和 `eventType`。然后插件使用这些信息在生成的
    CloudFormation 模板中的分发上创建 `LambdaFunctionAssociations` 元素。`eventType` 可以设置为 `viewer-request`、`origin-request`、`origin-response`
    或 `view-response`。这个配方使用 `viewer-request`，因为它需要访问由观众发送的授权头。我们明确设置了函数的 `memorySize`
    和 `timeout`，因为 Lambda@Edge 对这些值有限制。
- en: Lambda@Edge records `console.log` statements in the region associated with the
    specific edge location that was accessed. This recipe returns `logGroupName` and
    `AWS_REGION` in the response to help demonstrate where to find the logs.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda@Edge 在与特定边缘位置关联的区域记录 `console.log` 语句。这个配方在响应中返回 `logGroupName` 和 `AWS_REGION`，以帮助演示如何找到日志。
