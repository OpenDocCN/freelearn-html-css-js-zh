- en: Leveraging the Edge of the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Serving a single-page application from the CDN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Associating a custom domain name with a CDN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving a website from the CDN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a service behind a CDN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving static JSON from a CDN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triggering the invalidation of content in a CDN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing code at the edge of the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The edge of the cloud is likely the single most underrated layer of cloud-native
    systems. However, as I have previously mentioned, my first cloud-native *wow*
    moment was when I realized I could run a **single-page application** (**SPA**)
    presentation layer from the edge without the complexity, risk, and cost of running
    an elastic load balancer and multiple EC2 instances. Furthermore, leveraging the
    edge brings global scale to certain aspects of cloud-native systems without expending
    additional effort on multi-regional deployments. Our end users enjoy reduced latency,
    while we reduce the load on the internals of our system, reduce cost, and increase
    security. The recipes in this chapter cover a multitude of ways we can leverage
    the edge of the cloud to advance the quality of our cloud-native system, with
    minimum effort.
  prefs: []
  type: TYPE_NORMAL
- en: Serving a single-page application from a CDN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Deploying a single-page application* recipe, we covered the steps required
    to serve a single-page application from an S3 bucket. It is great fun to watch
    the light bulb turn on in an architect's mind when he or she realizes that such
    a simple deployment process can deliver so much scalability. Here is a recent
    quote from one of my customers—*That's it? No really, that's it*? In this recipe,
    we take this process one step further and demonstrate how easily we can add a
    CloudFront **Content Delivery Network** (**CDN**) layer in front of S3 to avail
    ourselves of even more valuable features.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create the project from the following template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the `cncb-cdn-spa` directory with `cd cncb-cdn-spa`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the file named `serverless.yml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Install the dependencies with `npm install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the tests with `npm test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the contents generated in the `.serverless` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Build the app with `npm run build`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Deploy the stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Deploying a CloudFront distribution can take upwards of 20 minutes or more.
  prefs: []
  type: TYPE_NORMAL
- en: Review the stack and CloudFront distribution in the AWS Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Browse to `WebsiteS3URL` and `WebsiteDistributionURL`, shown in the stack output,
    and note the performance difference between the two in the network tab of your
    browser''s inspect tool, with the cache enabled and disabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The configuration of a CloudFront distribution is verbose and boilerplate. The
    `serverless-spa-config` plugin simplifies the effort, encapsulates the best practices,
    and allows for configuration by exception. In this recipe, we use all the defaults.
    In the generated `.serverless/cloudformation-template-update-stack.json` template,
    we can see that the `WebsiteBucket` is defined and configured as the default `S3Origin`,
    with the `index.html` file as the `DefaultRootObject`. The `PriceClass` defaults
    to North America and Europe, to minimize the amount of time it takes to provision
    the distribution. The error handling of the bucket (`ErrorDocument`) and the distribution
    (`CustomErrorResponses`) is configured to delegate error handling to the logic
    of the SPA.
  prefs: []
  type: TYPE_NORMAL
- en: The main purpose of the distribution is to cache the SPA resources at the edge.
    This logic is handled by two pieces. First, the `DefaultCacheBehavior` is set
    up with a `DefaultTTL` of zero, to ensure that the cache-control headers of the
    individual resources in the bucket are used to control the TTL. Second, the `serverless-spa-deploy`
    plugin is configured with two different `CacheControl` settings. Everything other
    than the `index.html` file is deployed with a max-age of one year because Webpack
    names these resources with a hash value that is generated for each build to implicitly
    bust the cache. The `index.html` file must have a constant name, because it is
    the `DefaultRootObject`, so we set its max-age to 5 minutes. This means that within
    approximately five minutes of a deployment, we can expect end users to start receiving
    the latest code changes. After five minutes, the browser will ask the CDN for
    the `index.html` file and the CDN will return an error 304 if the ETag is unchanged.
    This strikes a balance between minimizing data transfer and allowing changes to
    propagate quickly. You can increase or decrease the max-age as you see fit.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we are using the CDN to improve download performance for the
    user by pushing the resources to the edge to reduce latency, and compressing the
    resources to reduce bandwidth. This alone is reason enough to leverage the edge
    of the cloud. Additional features include custom domain names, SSL certificates,
    logging, and integration with a **web application firewall** (**WAF**). We will
    cover these topics in further recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Associating a custom domain name with a CDN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Serving a single-page application from a CDN* recipe, we covered the
    steps required to add a CloudFront CDN layer in front of S3 and avail ourselves
    of more valuable features. One of these features is the ability to associate a
    custom domain name with the resources served from the CDN, such as a single-page
    application or a cloud-native service. In this recipe, we will take the deployment
    process another step further and demonstrate how to add a Route53 record set and
    a CloudFront alias.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need a registered domain name and a Route53 hosted zone, which you
    can use in this recipe to create a subdomain for the SPA that will be deployed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create the project from the following template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the `cncb-cdn-dns` directory with `cd cncb-cdn-dns`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the file named `serverless.yml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Update the `serverless.yml` file with your `hostedZoneId` and `domainName`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the dependencies with `npm install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the tests with `npm test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the contents generated in the `.serverless` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Build the app with `npm run build`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Deploy the stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Deploying a CloudFront distribution can take upwards of 20 minutes or more.
  prefs: []
  type: TYPE_NORMAL
- en: Review the stack, Route53, and CloudFront distribution in the AWS Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Browse to `WebsiteURL`, shown in the stack output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we improve on the *Serving a single-page application from a
    CDN* recipe by adding a custom domain name for the SPA. In `serverless.yml`, we
    added the `hostedZoneId`, `domainName`, and `endpoint` values. These values trigger
    the `serverless-spa-config` plugin to configure the `WebsiteEndpointRecord` in
    Route53, and set the `Aliases` on the CloudFront distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Serving a website from the CDN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an industry, we have a tendency to create very dynamic websites, even when
    the content does not change frequently. Some **Content Management Systems** (**CMS**)
    recalculate content for every request, even when the content has not changed.
    These requests pass through multiple layers, read from the database, and then
    calculate and return the response. It is not uncommon to see average response
    times in the range of five seconds. It is said that doing the same thing over
    and over again and expecting a different result is the definition of insanity.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-native systems take an entirely different approach to creating websites.
    JAMstack ([https://jamstack.org](https://jamstack.org)) is a modern, cloud-native
    approach based on client-side JavaScript, reusable APIs, and Markup. These static
    sites are managed by Git workflows, generated by CI/CD pipelines, and deployed
    to the edge of the cloud many times a day. This is yet another example of cloud-native
    challenging us to rewire our software engineering brains. This recipe demonstrates
    the generation and deployment of these static websites.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create the project from the following template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the `cncb-cdn-site` directory with `cd cncb-cdn-site`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the file named `serverless.yml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Update the `serverless.yml` file with your `hostedZoneId` and `domainName`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the dependencies with `npm install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the tests with `npm test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the contents generated in the `.serverless` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploy the stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Deploying a CloudFront distribution can take upwards of 20 minutes or more.
  prefs: []
  type: TYPE_NORMAL
- en: Review the stack, Route53, and CloudFront distribution in the AWS Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Browse to `WebsiteURL`, shown in the stack output, and again without the `www.`,
    and observe the redirect to `www`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Browse through the website pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we use a static site generator called **Phenomic** ([https://www.staticgen.com/phenomic](https://www.staticgen.com/phenomic)).
    There is a seemingly endless array of tools enumerated on the **StaticGen** site
    ([https://www.staticgen.com](https://www.staticgen.com)). With Phenomic, we write
    the website in a combination of ReactJS and Markdown. Then, we isomorphically
    generate the JavaScript and Markdown into a set of static resources that we deploy
    to S3, as can be seen in the deployment output. I have pre-built the website and
    included the generated resources in the repository. A typical SPA downloads the
    JavaScript and generates the site in the browser. Depending on the website, this
    process can be lengthy and noticeable. Runtime-based isomorphic generation performs
    this process on the server-side before returning the website to the browser. A
    JAMstack website, on the other hand, is statically generated at deployment time,
    which results in the best runtime performance. Although the website is static,
    the pages contain dynamic JavaScript that is written just like in any ReactJS
    SPA. These websites are frequently updated and re-deployed multiple times per
    day, which adds another dynamic dimension without having to ask the server on
    every request if something has changed.
  prefs: []
  type: TYPE_NORMAL
- en: These sites are typically deployed to a `www` subdomain, and support redirecting
    the root domain to this subdomain. Building on the *Serving a single-page application
    from a CDN* and *Associating a custom domain name with CDN* recipes, this recipe
    leverages the `serverless-spa-deploy` and `serverless-spa-config` plugins and
    adds some additional settings. We specify the `endpoint` as `www.${self:custom.dns.domainName}`
    and set the redirect flag to `true`. This, in turn, creates the `RedirectBucket`, which
    performs the redirects, along with an additional `RedirectDistribution` and `RedirectEndpointRecord`
    to support the root domain.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a service behind a CDN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we think of a CDN, it is typical to think that they are only useful for
    serving up static content. However, it is an AWS best practice to place CloudFront
    in front of all resources, even dynamic services, to improve security and performance.
    From a security perspective, CloudFront minimizes the attack surfaces and handles
    DDOS attacks at the edge to reduce the load on internal components. With regard
    to performance, CloudFront optimizes the pipe between the edge and availability
    zones, which improves performance even for `POST` and `PUT` operations. Furthermore,
    even a cache-control header of just a few seconds can have a significant impact
    on `GET` operations. In this recipe, we will demonstrate how to add CloudFront
    in front of the AWS API Gateway.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create the project from the following template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the `cncb-cdn-service` directory with `cd cncb-cdn-service`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the file named `serverless.yml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Review the file named `handler.js` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Install the dependencies with `npm install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the tests with `npm test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the contents generated in the `.serverless` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Deploy the stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Deploying a CloudFront distribution can take upwards of 20 minutes or more.
  prefs: []
  type: TYPE_NORMAL
- en: Review the stack and CloudFront distribution in the AWS Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Invoke the endpoint shown in the stack output, with the following `curl` command,
    multiple times to see the difference in performance for the cached results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing to note in the `serverless.yml` file is that the `endpointType`
    is set to `REGIONAL`. By default, AWS API Gateway will provision a CloudFront
    distribution. However, we do not have access to this distribution and cannot take
    advantage of all its features. Plus, the default does not support multi-regional
    deployments. Therefore, we specify `REGIONAL` so that we can manage the CDN ourselves.
    Next, we need to configure the `Origins`. We specify the `DomainName` to point
    to the regional API Gateway endpoint, and we specify the stage as the `OriginPath`,
    so that we no longer need to include it in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we configure the `DefaultCacheBehavior`. We allow both read and write
    methods, and we cache the read methods. We set `DefaultTTL` to zero to ensure
    that the `Cache-Control` headers set in the service code are used to control the
    TTL. In this recipe, the code sets the `max-age` to 5 seconds, and we can see
    that our cache hits respond approximately twice as fast. We also set `Compress`
    to `true` to minimize data transfer for both increased performance and to help
    reduced cost. It is important to forward all the `Headers` that are expected by
    the backend. For example, the authorization header is crucial for securing a service
    with OAuth 2.0, as we will discuss in the *Securing an API gateway with OAuth
    2.0* recipe in [Chapter 5](75b256e5-1fe4-4c9e-ab56-28cef7a8a0ab.xhtml), *Securing
    Cloud-Native Systems*.
  prefs: []
  type: TYPE_NORMAL
- en: Note that `ApiGatewayRestApi` is the logical resource ID that is created and
    controlled by the Serverless Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Serving static JSON from a CDN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Implementing a search BFF* recipe, we created a service that serves
    some content from a materialized view in Elasticsearch via an API Gateway, and
    other content directly from a materialized view in S3\. This is a great approach
    that can cost-effectively deliver under extremely heavy loads. In this recipe,
    we will demonstrate how to add a single CloudFront distribution in front of both
    the API Gateway and S3 to encapsulate these internal design decisions behind a
    single domain name.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create the project from the following template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the `cncb-cdn-json` directory with `cd cncb-cdn-json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the file named `serverless.yml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Install the dependencies with `npm install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the tests with `npm test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the contents generated in the `.serverless` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Deploy the stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Deploying a CloudFront distribution can take upwards of 20 minutes or more.
  prefs: []
  type: TYPE_NORMAL
- en: Review the stack and CloudFront distribution in the AWS Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Invoke the following command to load data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Invoke the endpoint shown in the stack output with the following `curl` commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Remove the stack with `npm run rm:lcl -- -s $MY_STAGE`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe builds on the *Deploying a service behind a CDN* recipe. The main
    difference in this recipe is that we have multiple `Origins` and multiple `CacheBehaviors`,
    one each for our `Bucket` and our `ApiGatewayRestApi`. We use the `DefaultCacheBehavior`
    for our `S3Origin`, because we could store many different business domains in
    the bucket with different paths. Conversely, there is a single `PathPattern` (`/search`)
    that needs to be directed to our `APIGateway` origin, therefore we define this
    under `CacheBehaviors`. Again, in all cases, we set the `DefaultTTL` to zero to
    ensure our cache-control headers control the TTL. The end result is that our multiple
    origins now look like one from the outside.
  prefs: []
  type: TYPE_NORMAL
- en: Note that `ApiGatewayRestApi` is the logical resource ID that is created and
    controlled by the Serverless Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Triggering the invalidation of content in a CDN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Implementing a search BFF* recipe, we statically serve dynamic JSON
    content from S3, and in the *Serving static JSON from a CDN* recipe, we add a
    cache-control header with a long max-age to further improve the performance. This
    technique works great for content that is dynamic, yet changes at a slow and unpredictable
    rate. In this recipe, we will demonstrate how to improve on this design by responding
    to data change events and invalidating the cache so that the latest data is retrieved.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create the project from the following template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the `cncb-cdn-invalidate` directory with `cd cncb-cdn-invalidate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the file named `serverless.yml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Review the file named `handler.js` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Install the dependencies with `npm install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the tests with `npm test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the contents generated in the `.serverless` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Deploy the stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Deploying a CloudFront distribution can take upwards of 20 minutes or more.
  prefs: []
  type: TYPE_NORMAL
- en: Review the stack in the AWS Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Invoke the following command to load data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Invoke the endpoint shown in the stack output with the following `curl` commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Invoke the following command to load data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the logs for the `trigger` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Invoke the endpoint shown in the stack output with the following `curl` commands
    until the invalidation completes and the output changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe builds on the *Implementing a materialized view in S3* and *Implementing
    a search BFF* recipes. We define the bucket's `NotificationConfiguration` to send
    events to the SNS `BucketTopic` so that we can trigger more than one consumer.
    In the *Implementing a search BFF* recipe, we triggered indexing in Elasticsearch.
    In this recipe, we demonstrate how we can also trigger the invalidation of the
    cache in the CloudFront distribution. The `trigger` function creates an invalidation
    request for each `trigger.s3.object.key`. These invalidations will force the CDN
    to retrieve these resources from the origin the next time they are requested.
  prefs: []
  type: TYPE_NORMAL
- en: A slow flow of invalidations does not incur significant cost. However, large
    batches of individual invalidations can be costly. This could occur during a data
    conversion process when enhancing a service. In these cases, the `DISABLED` environment
    variable should be set to `true` before executing the conversion. Then, manually
    invalidate the distribution with a wildcard when the conversion is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Executing code at the edge of the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Lambda@Edge is a feature that allows functions to execute at the edge of
    the cloud in response to CloudFront events. This capability opens some interesting
    opportunities to control, modify, and generate content at the edge of the cloud
    with extremely low latency. I think we are only just beginning to uncover the
    potential use cases that can be implemented with this new feature. This recipe
    demonstrates the association of a bare-bones function with a CloudFront distribution.
    The function responds with an Unauthorized (403) status code when an authorization
    header is not present in the request.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create the project from the following template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the `cncb-cdn-lambda` directory with `cd cncb-cdn-lambda`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the file named `serverless.yml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Install the dependencies with `npm install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the tests with `npm test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the contents generated in the `.serverless` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploy the stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Deploying a CloudFront distribution can take upwards of 20 minutes or more.
    Any changes to these functions will cause a redeploy of the distribution, because
    the distribution is linked to the function version.
  prefs: []
  type: TYPE_NORMAL
- en: Review the stack, function, and CloudFront distribution in the AWS Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Invoke the following command to load the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Invoke the endpoint shown in the stack output with the following `curl` commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Review the logs in the AWS Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lambda@Edge replicates functions to multiple regions per the `PriceClass` of
    the distribution. A function cannot be deleted until all the replicas have been
    deleted. This should happen within several hours of deleting the distribution.
    Therefore, removing the stack will initially fail, and can be repeated after the
    replicas have been deleted.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we use the `serverless-plugin-cloudfront-lambda-edge` plugin
    to associate the `authorize` function with the CloudFront `ApiDistribution`. We
    specify the `distribution` and the `eventType` under the `lambdaAtEdge` element.
    The plugin then uses this information to create the `LambdaFunctionAssociations`
    element on the distribution in the generated CloudFormation template. The `eventType`
    can be set to `viewer-request`, `origin-request`, `origin-response`, or `view-response`.
    This recipe uses the `viewer-request`, because it needs access to the authorization
    header sent by the viewer. We explicitly set the `memorySize` and `timeout` for
    the function, because Lambda@Edge imposes restrictions on these values.
  prefs: []
  type: TYPE_NORMAL
- en: Lambda@Edge records `console.log` statements in the region associated with the
    specific edge location that was accessed. This recipe returns `logGroupName` and
    `AWS_REGION` in the response to help demonstrate where to find the logs.
  prefs: []
  type: TYPE_NORMAL
