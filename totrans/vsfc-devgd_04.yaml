- en: Chapter 4. Visualforce Custom Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Salesforce has a large collection of standard Visualforce components such as
    `<apex:detail>`, `<apex:pageBlock>`, `<apex:pageBlockTable>`, and `<apex:relatedList>`.
    They are ready to be used in Visualforce pages, and the Force.com platform allows
    us to build our own Visualforce components which can be used in Visualforce pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter serves as an overview of Visualforce custom components and further
    explains how to create a custom component. This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Visualforce custom components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create and use a custom component in a Visualforce page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom attributes and custom controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's build our own Visualforce custom components.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Visualforce custom components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are lots of standard Visualforce components (such as `<apex:detail>`,
    `<apex:pageBlock>`, `<apex:pageBlockTable>`, and `<apex:relatedList>`) which can
    be reused in Visualforce pages. A standard Visualforce component is a pre-built,
    encapsulated code segment. These standard Visualforce components are built according
    to common usage.
  prefs: []
  type: TYPE_NORMAL
- en: The Force.com platform allows us to develop custom Visualforce components that
    can be reused within a particular application. Custom components can be developed
    using both Apex and Visualforce. For example, suppose we want to create a customer
    summary with recent orders and we need to use this functionality in different
    locations in our order processing app. We also need to specify the number of recent
    orders. According to the specified number, the number of recent orders displayed
    in the customer's summary will be changed. The use of Visualforce custom components
    becomes the best choice for implementing such a specific requirement.
  prefs: []
  type: TYPE_NORMAL
- en: A Visualforce custom component can have zero or more attributes to pass as parameters
    into the component. A custom component with attributes is like a parameterized
    Apex method. We can change the value of an attribute during the final usage level
    (in a Visualforce page).
  prefs: []
  type: TYPE_NORMAL
- en: Creating and using a custom component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can create a Visualforce component to use in a Visualforce page. Navigate
    to the following path to create a new Visualforce component:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Your Name** | **Setup** | **Develop** | **Components** | **New**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating and using a custom component](img/9818_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create new Visualforce components
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to specify the following properties while creating a custom component:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Label**: This custom component will be identified in the setup tools by using
    the label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name**: This custom component will be identified in Visualforce markup by
    using `name`. This must be unique within the organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: This gives the description of the custom component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Body**: The Visualforce markup must be placed within the body section.![Creating
    and using a custom component](img/9818_04_02.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The name of the custom component should begin with a letter, and it should not
    end with an underscore. Further, spaces or two consecutive underscores should
    not be included in the name.
  prefs: []
  type: TYPE_NORMAL
- en: The maximum amount of data that a custom component can contain is 1 MB, or approximately
    1,000,000 characters.
  prefs: []
  type: TYPE_NORMAL
- en: We can specify the version of Visualforce and the API used with the particular
    component by using the version setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'The body of a custom component can be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The component markup is same as other Visualforce pages. It can be a combination
    of Visualforce and HTML tags. We can also add customized CSS and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the markup should be defined within the `<apex:component>` tag. Our custom
    component example is a customer''s summary with recent orders. Suppose our custom
    component name is `customerSummary`, we can use this component in multiple Visualforce
    pages. The usage is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Custom attributes and custom controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we are creating complex custom components, we need to use some other features
    to build custom components. Mainly, we have to use custom attributes and custom
    controllers for custom components. The attributes can be defined in `<apex:component>`
    for passing values from the Visualforce page (the page that used the component)
    to the custom component or to the component's controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have implemented the example explained from the beginning of this chapter.
    The following is the component markup and it contains the attribute''s and the
    component''s definitions. We have two attributes to be passed, which are customer
    ID and the number of recent orders that we want to show in the page. These two
    parameters are used to pass the values to the component''s controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code snippet shows the custom controller that is associated with
    the `cutomerSummary` custom component. This controller is used to manipulate the
    attribute''s values. In this example, we have queried the customer record and
    the recent order details of the particular customer. The query results of `CurrentCustomer`
    and `RecentOrderList` depend on the `CusID` and `RecentNo` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the way of using our custom component. Here, we have passed the customer
    ID and the number of recent orders values that we want to see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the result of the `customerSummary` custom component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Custom attributes and custom controllers](img/9818_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw an overview of Visualforce custom components. We now
    have the knowledge to create and use Visualforce custom components. With the usage
    of Visualforce custom components, we learned the mechanisms for reusing code in
    Visualforce. We have seen how to build more customizable custom components by
    using custom attributes and custom controllers.
  prefs: []
  type: TYPE_NORMAL
