- en: Chapter 6. Templates and UX sugar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using templates in a view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a template loader
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Mustache templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding validation to a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling form events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing a form with the Bootstrap framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assembling layouts with LayoutManager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a semantic and an easily styleable data grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing on the HTML5 canvas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduces you to templates, which are used to separate HTML markup
    from the application code. Thus, the application becomes more structured and clean.
    We will discuss the templating engine provided by Underscore.js and learn how
    to integrate Backbone with third-party templating engines, such as Mustache.js.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we will discuss useful Backbone extensions, which allows the use of forms,
    layouts, and grids.
  prefs: []
  type: TYPE_NORMAL
- en: Using templates in a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you are going to learn how to use templates in the Backbone
    view. By default, Backbone.js is integrated with templating engine provided by
    Underscore.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take an example of the *Rendering a collection in a view* recipe in
    [Chapter 4](ch04.html "Chapter 4. Views"), *Views*, where we rendered a collection
    with a view and updated the code using Underscore''s templating engine. The result
    will look like the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using templates in a view](img/2728OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to use templates in a view:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have models and collection objects defined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define a view with the `template` property which contains a template. Then,
    when rendering a view, use `template()` to return rendered HTML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a collection instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a view instance, render it, and set the result to the value of `body`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the help of the `_.template()` method provided by Underscore.js, we can
    define an HTML template where we can include JavaScript code inside the `<% …
    %>` brackets. To output a variable into the template, we need to use the `<%=
    … %>` syntax, and to output an HTML escaped variable, we can use the `<%- … %>`
    syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Further, in the `render()` method, we pass the collection items in the JSON
    format into a template.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to learn how to split a template into partials.
  prefs: []
  type: TYPE_NORMAL
- en: Splitting a template into partials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Partial is a template that can be called from other templates as a function.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case we want to reuse parts of the existing templates, we can split one
    template into different parts. To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the template part.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define the main template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When rendering a template, pass a partial method as a setting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get more information about templates in Underscore.js, you can refer to the
    official docs at [http://underscorejs.org/#template](http://underscorejs.org/#template).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a template loader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a large application, which follows separation of concerned paradigm, it is
    important to store templates apart from views, so the web designer can modify
    them easily without harming views. Such a practice also provides template reusability
    within the application.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Store all your templates in a single HTML file**'
  prefs: []
  type: TYPE_NORMAL
- en: For server-side applications, developers typically store templates in separate
    files, achieving a convenient way for accessing and editing them. However, this
    can hardly be applied to client-side applications, because it makes a browser
    download multiple small files from a server, delaying an application start.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe we will store our templates apart from views in a single HTML
    file. Also, we will write a template loader, which will load those templates into
    the memory, allowing them to be accessed from all over the application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to implement the template loader:'
  prefs: []
  type: TYPE_NORMAL
- en: Add templates enclosed in the `script` tag to the header of the `index.html`
    file. Set the `id` attribute to distinguish one template from another.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a template loading utility and place it into the `js/template-loader.js`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Include the template loader into the `index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When rendering a view, use templates defined in the global `$.tpl` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because we defined our templates in `index.html`, they are loaded instantaneously.
    Then, in the template loader, when the document is fully loaded, we move them
    into the global variable `$.tpl` and remove templates from the DOM. This should
    speed up further usage of our templates as if we defined them in the JS file.
    Now, we can use those templates in different views of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Using Mustache templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mustache is a beautiful, logicless template syntax. It can be used for HTML,
    config files, source code, and so on. There are various implementations of Mustache
    that exist for different languages, such as JavaScript, PHP, Ruby, Python, and
    many others.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn how to use Mustache.js, which is the
    implementation of Mustache for JavaScript, with Backbone.js.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download Mustache.js from its GitHub page at [https://github.com/janl/mustache.js](https://github.com/janl/mustache.js).
    To include Mustache.js into your project, save the `mustache.js` file into the
    `lib` folder, and include a reference to it in `index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Including the Backbone extension into your project is described in detail in
    the *Extending an application with plugins* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to use a Mustache template:'
  prefs: []
  type: TYPE_NORMAL
- en: Define a Mustache template in the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `Mustache.render()` method to render a template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Mustache.render()` compiles a template string into a JavaScript code, and
    then executes it. A template string contains placeholders like `{{placeholder}}`,
    which are replaced with values provided in the second parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section describes how to use compiled templates and partials in Mustache.js.
  prefs: []
  type: TYPE_NORMAL
- en: Using compiled templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To improve the performance of your application, you can compile the template
    before using it by calling `Mustache.compile()`. This method accepts the template
    string as a single parameter and returns a JavaScript function, which can be called
    to return HTML code. The following example demonstrates how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Using partials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As in Underscore templates, Mustache.js allows partials to be used. To call
    a partial template, use the `>` syntax.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The partial template will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can pass the partial template in several ways, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: An object of partials, which are strings as well, may be passed as the third
    argument to `Mustache.render()`. The object should be keyed by the name of the
    partial, and its value should be the partial text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Template partials can also be compiled using the `Mustache.compilePartial()`
    function. The first parameter of this function is the name of the partial as it
    is named within a parent template. The second parameter is a partial template
    string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn more about the Mustche.js syntax, you can visit its official GitHub
    page at [https://github.com/janl/mustache.js](https://github.com/janl/mustache.js).
  prefs: []
  type: TYPE_NORMAL
- en: Defining a form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost any web application requires an HTML form for user input. In the previous
    chapters, we learned how to render a form manually and bind it to the view model.
  prefs: []
  type: TYPE_NORMAL
- en: However, we should look for backbone-forms extensions, which allow us to deal
    with forms more easily by writing less code. In this recipe and in further recipes,
    we are going to learn how to use this extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a simple form for `BuyerModel`, which will look like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining a form](img/2728OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To include backbone-forms into your project, download the entire extension archive
    from the GitHub page ([https://github.com/powmedia/backbone-forms](https://github.com/powmedia/backbone-forms)),
    and extract it into the `lib/backbone-forms` directory. Then include a reference
    to the extension files into `index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Including the Backbone extension into your project is described in detail in
    the *Extending an application with plugins* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to define a form:'
  prefs: []
  type: TYPE_NORMAL
- en: Define a form schema definition inside the model object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a view which should render a form with the help of the `Backbone.Form`
    object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a `submit` callback to the view. In this, the callback form is validated,
    and its values are passed to a model through the `commit()` method of the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Backbone.Form` object extends `Backbone.Views` by overriding the `render()`
    method, where it builds a form based on the schema definition we pass along with
    the model. If the model has initial values, then those values will be assigned
    to the form elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'By executing the `commit()` method, form validation is performed and form values
    are assigned to the model properties. If the `{validate: true}` option is passed
    to this method, then both form validation and model validation are performed.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section describes how to build a form without a model.
  prefs: []
  type: TYPE_NORMAL
- en: Using a form without a model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can create a form without tying a schema definition to a model. The following
    example shows how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: To get form values, use the `getValue()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn more about schema definition, you can check their official docs at
    [https://github.com/powmedia/backbone-forms#schema-definition](https://github.com/powmedia/backbone-forms#schema-definition).
    In the later recipes, we will continue learning backbone-forms extension.
  prefs: []
  type: TYPE_NORMAL
- en: Adding validation to a form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will continue to learn backbone-forms extension, and we will
    talk about form validation, which is quite a useful functionality and required
    by almost any web application which leverages backbone-forms extensions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add validation to a form:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have model schema defined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add validators.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set a validation message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To enable validation, we need to pass the `validators` array to a schema field
    definition. A validator can be a string, an object, a regexp (regular expression),
    or a function.
  prefs: []
  type: TYPE_NORMAL
- en: A string is used to set built-in validators, which do not require additional
    parameters. These validators are `required`, `email`, and `url`. If a validator
    requires an additional parameter (for example, `match` and `regexp`), or if we
    want to override an error message, we need to use an object to define a validator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To perform a custom validator, we need to pass a validation function with two
    parameters: `value`, which is a form element value, and `formValues`, which is
    a hash of all form values.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Validation is performed when the `form.validate()` or `form.commit()` method
    is called.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section describes more about form validation.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing error messages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It can be useful to override an error message for all built-in validators of
    a specific type at once. It is quite easy to do this by overriding values in `Backbone.Form.validators.errMessages`
    (the configuration object). We can use Mustache tags. Here is how it is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Performing a model validation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to perform a model validation when committing or validating a form,
    you need to make sure that the model's `validate()` method returns an object of
    error messages keyed by the field names.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn more about form validation, you can refer to the docs at [https://github.com/powmedia/backbone-forms#validation](https://github.com/powmedia/backbone-forms#validation).
  prefs: []
  type: TYPE_NORMAL
- en: Handling form events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Backbone.Form` extension provides several events that we can use in our
    application. For example, by leveraging such events, we can implement specific
    functionalities where the value of one field depends on the value of another field.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we are going to create a form for the `InvoiceModel` model,
    where the **Paid Date** field will be shown only if the **Paid** option is selected
    as the **Status** field value. Our form will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Handling form events](img/2728OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps tohandle form events:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the model and the form schema.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create `InvoiceForm` based on `Backbone.Form`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Override parent's `initialize()` method to bind the `status` field's `change`
    event to the callback, which will update dependent fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Implement the `update` method for the form, which will update dependent fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Override the `render` method of the form, where we need to run the `update`
    method to ensure dependent fields are shown properly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Backbone.Form` provides several form events, which we can bind to our callbacks
    using the `on()` method. They are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`change`: This event is triggered whenever something happens that affects the
    result of `form.getValue()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`focus`: This event is triggered whenever this form gains focus, that is, when
    the input of an editor within this form becomes `document.activeElement`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`blur`: This event is triggered whenever this form loses focus, that is, when
    the input of an editor within this form stops being `document.activeElement`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<key>:<event>`: the `change`, `focus`, or `blur` event is triggered for the
    form element specified by `key`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Backbone.Form` extends `Backbone.Views` and implements `initialize()` and
    `render()` methods. In our child object, we need to use these methods, and so
    we need to make sure parent methods are executed, which is possible because of
    JavaScript''s `__super__` keyword. Then, apply the method.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Handling events of Backbone objects* recipe in [Chapter 5](ch05.html "Chapter 5. Events
    and Bindings"), *Events and Bindings*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing a form with the Bootstrap framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Default backbone-form''s styles look pretty boring, and we may want to replace
    them with something cool like Bootstrap. In this case, our form will look much
    better, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing a form with the Bootstrap framework](img/2728OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we also use a List element (aka editor) to allow the user to input invoice
    item details. When user clicks on the **Add** button, the following popup is generated
    and shown to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing a form with the Bootstrap framework](img/2728OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to be prepared to use Bootstrap.js:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Bootstrap framework archive from its GitHub page at [http://twitter.github.com/bootstrap](http://twitter.github.com/bootstrap),
    and extract it into the `lib` folder of the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `default.css` style's reference from `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include links to the Bootstrap files into `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Include links to the `Backbone.Forms` extension, List editor, Bootstrap modal
    adapter, Bootstrap templates, and styles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Including Backbone extension into your project is described in detail in the
    *Extending an application with plugins* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to customize a form with the Bootstrap framework:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following line of code into `main.js` in order to set default modal
    adapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add invoice items field definitions into the Backbone schema.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We included files which override default backbone-forms templates and styles
    in order to achieve integration with the Bootstrap framework. Also, we used List
    element, which makes a special call to the Bootstrap modal adapter to show a nice
    modal popup.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section describes how to override form templates.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding form templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous example, we included `lib/backbone-forms/distribution/templates/bootstrap.js`
    into our project to make sure proper templates are used in order to provide integration
    with the Bootstrap engine. In this file, the `setTemplates()` method of the `Backbone.Form`
    object is called to override default templates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Mustache syntax is used for template definition, and the templates that can
    be overridden are: `form`, `fieldset`, `field`, `nestedField`, `list`, `listItem`,
    `date`, `dateTime`, and `''list.Modal''`.'
  prefs: []
  type: TYPE_NORMAL
- en: To use a specific template that is different from the one defined for the form
    element, add a template, and pass its name in the template parameter in the schema
    definition.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: To use a specific template for the form, pass its name when creating a new form.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can check the official Bootstrap.js docs to learn more about it at [http://twitter.github.com/bootstrap](http://twitter.github.com/bootstrap).
    Also, look at the `lib/backbone-forms/distribution/templates/default.js` file
    to find out all the available templates which can be overridden.
  prefs: []
  type: TYPE_NORMAL
- en: Assembling layouts with LayoutManager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Backbone.LayoutManager** is one of the most useful extensions for Backbone.js.
    It allows to build a layout out of panes easily and to get rid of many lines of
    code compared to using just Backbone views. LayoutManager also provides mechanisms
    to load templates from the main HTML file or external files.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's build an application which will have two panes. On the first pane, the
    user will see a list of invoices, and on the other pane he'll see invoice details.
  prefs: []
  type: TYPE_NORMAL
- en: '![Assembling layouts with LayoutManager](img/2728OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By clicking on the invoice number from the first pane, our application will
    update the second pane immediately.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download Backbone.LayoutManager from its GitHub page at [https://github.com/tbranyen/backbone.layoutmanager](https://github.com/tbranyen/backbone.layoutmanager).
    To include LayoutManager into your project, save the `backbone.layoutmanager.js`
    file into the `lib` folder and include a reference to it in `index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Including Backbone extension into your project is described in detail in the
    *Extending an application with plugins* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to assemble layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have model and collection objects defined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define the invoice list pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define the invoice pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define a router with routes and create the collection instance in its `initialize()`
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a page callback to the router, which creates a `Backbone.Layout` object
    and renders it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add templates to the `<head>` tag of the page element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Backbone.LayoutManager` object implements the template loader, the `render()`
    method, and provides many other cool features, which is typically done by the
    developer. In the views option, we can select which layout pane or Backbone view
    should be attached to the HTML elements that is specified in the main template
    for the layout.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the LayoutManager docs to learn more about the extension at
    [https://github.com/tbranyen/backbone.layoutmanager/wiki](https://github.com/tbranyen/backbone.layoutmanager/wiki).
  prefs: []
  type: TYPE_NORMAL
- en: Building a semantic and an easily styleable data grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In your application, you may want to output the data as a sortable, filterable,
    and editable grid, which is not an easy task to do from scratch. In this recipe,
    we will learn a quick solution for that task using Backgrid.js, a powerful extension
    for building data grids in Backbone applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this application, we are going to create a simple grid using the Backgrid
    example. It will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a semantic and an easily styleable data grid](img/2728OS_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When a user clicks on the column header, the grid is sorted by this column.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a semantic and an easily styleable data grid](img/2728OS_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If a user double-clicks on a specific cell, that cell is replaced by an input
    element, where a user can enter a new value.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a semantic and an easily styleable data grid](img/2728OS_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to be prepared to use Backgrid extension:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Backgrid.js extension from its official web site at [http://backgridjs.com/](http://backgridjs.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include Backgrid.js into your project by extracting this extension into the
    `lib/backgrid` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include references to the extension files into `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Including Backbone extension into your project is described in detail in the
    *Extending an application with plugins* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to build a grid:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have a model and collection objects defined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a collection instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define grid column settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Initialize a new grid instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add models into the collection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Backgrid.Grid` extends `Backbone.View` so you can create its instance and
    pass column settings keyed by the `columns` parameter. Column settings are defined
    as an array, and each row has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: It''s the name of the model property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label`: It''s the label of the heading column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sortable`: It returns a boolean value to check whether a column is sortable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`editable`: It returns a boolean value to check whether a column is editable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cell`: It''s the cell type, which could be one of these: `datetime`, `date`,
    `time`, `number`, `integer`, `string`, `uri`, `email`, `boolean`, and `select`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to specify additional parameters for a cell type, you can extend
    the corresponding class and pass it to the `cell` property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to use several extensions for Backgrid, which
    can add extra features to our grid.
  prefs: []
  type: TYPE_NORMAL
- en: Performing bulk operations on grid models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We are going to add an extra column to our grid, which will contain checkboxes
    allowing users to select specific models in a grid and to perform bulk operations
    on them, for example, deleting. The following screenshot shows what our table
    will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing bulk operations on grid models](img/2728OS_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To complete this task, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Include the SelectAll extension files into `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wrap grid into `TableView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the checkbox's column in the `initalize()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Append the delete button in the `render()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Handle the button click event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new `TableView` instance and append it into the `body` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Performing records filtering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To allow users to filter records, we are going to use the Select extension and
    the Lunr.js library, which is shipped with the Backgrid package. Also, we will
    apply Bootstrap styles to make the search box look neat.
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing records filtering](img/2728OS_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Follow these steps to perform records filtering:'
  prefs: []
  type: TYPE_NORMAL
- en: Include Select extension, Lunr library, and Boostrap files into `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wrap grid into `TableView` as we did in the *Performing bulk operations on grid
    models* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initialize `ClientSideFilter` in the `TableView.initalize()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Prepend the table with `ClientSideFilter` in the `TableView.render()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Backgrid extension is actually very vast to be fully considered in this recipe.
    So, you can check the official Backgrid documentation at [http://backgridjs.com/](http://backgridjs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Drawing on the HTML5 canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, we may want to render our view on the HTML5 canvas element, which
    can give more freedom and flexibility. The canvas can be used for rendering graphs
    as well as for creating an online game.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we are going to visualize the collection of models on the
    HTML5 canvas. The output of our code will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing on the HTML5 canvas](img/2728OS_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we are going to take an example from the *Splitting a view into
    subviews* recipe in [Chapter 4](ch04.html "Chapter 4. Views"), *Views*, to change
    `InvoiceItemView` and `InvoiceItemListView`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Set box boundaries in the `initialize()` method of `InvoiceItemView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Draw a box and output model values on `ctx`, the canvas context, in the `render()`
    method of `InvoiceItemView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define `InvoiceItemListView`, which creates an empty canvas and triggers model
    view rendering iteratively, passing `ctx` as an option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`InvoiceItemListView` defines canvas as a main view element and sets its boundaries.
    In the `render()` method, we get `ctx`, the context object of the canvas, by calling
    the `getContext()` method. Context object allows us to draw on the canvas by running
    special HTML5 methods.'
  prefs: []
  type: TYPE_NORMAL
- en: By passing `ctx` and canvas dimensions to the subview as options, we allow them
    to be used for text and shapes output to the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTML 5 canvas reference could be found at [http://www.w3schools.com/html/html5_canvas.asp](http://www.w3schools.com/html/html5_canvas.asp).
  prefs: []
  type: TYPE_NORMAL
