["```js\n// main.js \nexport function main() { \n  const object = {}; \n  const otherObject = { \n    foo: 'original value', \n    bar: 'another value' \n  } \n\n  Object.assign(object, otherObject, { \n    foo: 'override value' \n  }); \n\n  console.log(object); \n}  \n```", "```js\n// main.js \nexport function main() { \n  const object = { \n    foo: Math.random(), \n    bar: Math.random() \n  }; \n  for (let [prop, value] of Object.entries(object)) { \n    console.log(prop, value); \n  } \n} \n```", "```js\n// main.js \nexport function main() {\n  const obj1 = {};\n  const obj2 = {};\n\n  console.log('obj1 === obj2', obj1 === obj2);\n  console.log('obj1 is obj2', Object.is(obj1, obj2));\n  console.log('obj2 === obj2', obj2 === obj2);\n  console.log('obj2 is obj2', Object.is(obj2, obj2));\n  console.log('undefined === undefined', undefined === \n  undefined);\n  console.log('undefined is undefined', Object.is(undefined, \n  undefined));\n  console.log('null === undefined', null === undefined);\n  console.log('null is undefined', Object.is(null, undefined));\n\n  // Special cases (from MDN documentation)\n  console.log('Special Cases:');\n  console.log('0 === -0', 0 === -0);\n  console.log('0 is -0', Object.is(0, -0));\n  console.log('-0 === -0', -0 === -0);\n  console.log('-0 is -0', Object.is(-0, -0));\n  console.log('NaN === NaN', NaN === NaN);\n  console.log('NaN is NaN', Object.is(NaN, NaN));\n} \n```", "```js\n// main.js  \nexport function main() { \n     const obj = { \n    method0: function() { \n      console.log('Hello, from method one.') \n    }, \n       method1() { \n      console.log('Hello, from method one.') \n    } \n  }; \n  obj.method0(); \n  obj.method1(); \n\n  obj.method0 = () => console.log('Override of method 0.'); \n  obj.method1 = () => console.log('Override of method 1.'); \n  obj.method0(); \n  obj.method1(); \n}   \n```", "```js\n export function main() { \n  const obj = {}; \n\n  Object.defineProperty(obj, 'method1',{ \n    writable: false, \n    value: () => { \n      console.log('Hello, from method one.') \n    } \n  }); \n  obj.method1(); \n\n  // throws error \n  obj.method1 = () => console.log('Override of method 1.'); \n} \n```", "```js\nexport function main() { \n  const obj = {}; \n\n  Object.defineProperty(obj, 'prop1',{ \n    writable: false, \n    configurable: true, \n    value: Math.random() \n  }); \n  console.log(obj.prop1) \n} \n```", "```js\nexport function main() { \n  // ... \n Object.defineProperty(obj, 'prop1',{ writable: false, configurable: false, value: Math.random() }); console.log(obj.prop1)}\n```", "```js\n export function main() { \n  // ... \n // throws error Object.defineProperty(obj, 'prop1',{ value: Math.random() }); \n} \n```", "```js\n// main.js\nexport function main() { \n  const bookAuthors = { \n    \"Star's End\": \"Cassandra Rose Clarke\", \n    \"Three Body Problem\": \"Liu Cixin\", \n    \"Houston Houston, Do You Read?\": \"James Tiptree Jr.\" \n  };  \n} \n```", "```js\nexport function main() { \n  // ... \n Object.defineProperty(bookAuthors, 'visibleProp', { enumerable: true, value: Math.random() }); Object.defineProperty(bookAuthors, 'invisibleProp', { value: () => console.log('This function is hidden.') }); for (const [prop, value] of Object.entries(bookAuthors)) { console.log(prop, value) } bookAuthors.invisibleProp();\n } \n} \n```", "```js\n// main.js\nexport function main() { \n  const object = { \n    prop1: 'some value', \n    prop2: 'some other value', \n    objectProp: { foo: 'bar' } \n  }; \n\n  const { prop1, prop2, objectProp } = object; \n  console.log(prop1); \n  console.log(prop2); \n  console.log(objectProp); \n} \n```", "```js\n// main.js\nexport function main() { \n  const prop1 = 'some value'; \n  const prop2 = 'some other value'; \n  const objectProp = { foo: 'bar' }; \n  const object = { prop1, prop2, objectProp }; \n\n  console.log(object); \n} \n```", "```js\n// main.js\nexport function main() { \n  const object1 = { \n    prop1: 'some value', \n    prop2: 'some other value', \n  } \n  const object2 = { \n    prop2: 'some overriding value', \n    objectProp: { foo: 'bar' } \n  } \n  const anotherProp = Math.random(); \n\n  const combinedObject = { ...object1, ...object2, anotherProp }; \n  console.log(combinedObject); \n} \n```"]