- en: '*Chapter 8*: Using MongoDB with Node.js'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**MongoDB** is the database traditionally associated with Node.js. It is a
    NoSQL type database, which means that SQL will not be used to access the information
    it contains.'
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB is a document-oriented database in which we store so-called *documents*;
    that is, a data structure of any type, such as information written on a sheet
    of paper (which is then equivalent to a document). Several sheets of paper, thus
    corresponding to several documents, form what is called a *collection*.
  prefs: []
  type: TYPE_NORMAL
- en: An example of a document is, for example, the first name, the last name, and
    the address of a customer. Aggregated information from multiple customers would
    be called a collection.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll study how to use MongoDB in conjunction with Node.js
    in order to store, read, delete, or update information in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting, searching, updating, or deleting data are the main actions that can
    be performed in a database. Therefore, in this chapter, we’ll see how to perform
    these operations with the MongoDB database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB and the mongoose module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to the MongoDB database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by installing MongoDB and the **mongoose** module, which will allow
    MongoDB to be used in Node.js programs.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the code files for this chapter on GitHub at: [https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%208.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%208.zip).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MongoDB database is independent of Node.js, which requires installing it
    separately. To do this, go to the site [https://www.mongodb.com/docs/manual/administration/install-community/](https://www.mongodb.com/docs/manual/administration/install-community/).
    Download the version suitable for your system.
  prefs: []
  type: TYPE_NORMAL
- en: Once MongoDB is installed, verify that the installation is correct by typing
    the `mongo -h` command in a command interpreter. The `mongo` command is located
    in the `Server/x.x/bin` directory of MongoDB, where `x.x` is the version number
    of MongoDB installed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the `mongo` utility is available directly when installing
    MongoDB. However, it is possible that this utility will soon be available separately
    and called `mongosh`. In this case, download this utility from [https://www.mongodb.com/docs/mongodb-shell/install/](https://www.mongodb.com/docs/mongodb-shell/install/).
  prefs: []
  type: TYPE_NORMAL
- en: The `mongo` command will simply be replaced by the equivalent `mongosh` command.
    Both commands work identically.
  prefs: []
  type: TYPE_NORMAL
- en: After installing MongoDB, we will look into the mongo (or mongosh) utility.
    The mongo utility makes it easy to see the contents of database collections, without
    having to write program lines. It is therefore useful for checking, for example,
    whether a document has been correctly inserted into a collection, or that its
    deletion has been successful. Let’s see how to use the mongo utility.
  prefs: []
  type: TYPE_NORMAL
- en: Using the mongo utility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The mongo utility enables you to easily view databases and the collections they
    contain. The mongo utility is launched by simply typing the `mongo` command in
    a command interpreter. The program then waits for database access commands, or
    the `exit` command to exit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the list of the main commands available in the mongo utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '`show dbs`: This shows a list of existing databases. A database will be visible
    here only if it contains at least one collection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db=connect("mydb_test")`: This is to connect to the database `mydb_test`.
    The `db` variable will then be used to access the database collections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show collections`: This shows the collections of the connected database. A
    collection will be present if it contains at least one document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db.clients.find()`: This shows all documents in the `clients` collection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db.clients.find({name:"Clinton"})`: This lists documents in the `clients`
    collection whose name is `Clinton`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db.clients.find().sort({name:1})`: This sorts documents in ascending order
    of the `name` field. Use `{name:-1}` for descending sort.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db.clients.count()`: This counts the number of documents found in the `clients`
    collection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db.clients.renameCollection("clients2")`: This renames the `clients` collection
    to `clients2`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db.clients.drop()`: This drops the `clients` collection (all documents are
    dropped).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db.dropDatabase()`: This drops the connected database (all collections are
    removed).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other commands exist, in particular, for inserting, updating, or deleting documents
    in a collection. But since these actions are performed through the mongoose module
    instead, we will describe them using the mongoose module.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the mongoose module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To establish the relationship between MongoDB and Node.js, several npm modules
    have been created. The most widely used one currently is the `mongoose` module.
    It is installed in the `node_modules` directory of the current directory by typing
    the `npm install mongoose` command.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Installing the mongoose module'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.01_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – Installing the mongoose module
  prefs: []
  type: TYPE_NORMAL
- en: 'Once mongoose has been downloaded by npm, we check whether it is accessible
    for our programs. Let’s display the mongoose version for our programs. We write
    this snippet in the file `test.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying mongoose version (test.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s use the `node test.js` command to run the previous program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Checking that mongoose is accessible'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.02_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.2 – Checking that mongoose is accessible
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: If you get an error loading the mongoose module, it’s probably because you installed
    it globally (with the `-g` option). In this case, just type the `npm link mongoose`
    command in the terminal to get rid of the error.
  prefs: []
  type: TYPE_NORMAL
- en: The mongoose module will allow us to use the MongoDB database to create documents,
    search them, update them, or destroy them. These are the classic operations that
    can be performed on a database.
  prefs: []
  type: TYPE_NORMAL
- en: But to be able to perform these operations, it is necessary to first connect
    to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the MongoDB database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All operations to access MongoDB require establishing a connection with it.
    Now let’s see how to establish a connection with MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: The `mongoose.connect(url)` instruction connects the mongoose module to the
    database specified in the `url` parameter. The `url` parameter is of the form
    `"mongodb://localhost/mydb_test"` to connect to the `mydb_test` database on the
    localhost server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The database will actually be created (and visible with the execution of the
    `show dbs` command of the mongo utility) when the first document is inserted into
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the mydb_test database (test.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s run the previous program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Database connection'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.03_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.3 – Database connection
  prefs: []
  type: TYPE_NORMAL
- en: To know whether the connection to the database has actually been made, mongoose
    sends the `open` event (if the connection was successful) or the `error` event
    (if the connection fails) on the `mongoose.connection` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will take these two events into account and integrate them into the
    previous program. This is done using the `on(event, callback)` method defined
    on the `mongoose.connection` object:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `on(event, callback)` method is used to process the reception of the event
    and to associate it with the processing described in the callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Using open and error events on database connection (test.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s run the previous program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Successful connection to the database'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.04_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.4 – Successful connection to the database
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how to connect to the database. We will therefore be able to create
    documents in a collection of the database.
  prefs: []
  type: TYPE_NORMAL
- en: Creating documents in MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the database has been accessed, you can create documents in it.
  prefs: []
  type: TYPE_NORMAL
- en: A document will be inserted into a *collection*. A collection will therefore
    group together a set of documents. The database will therefore be a set of collections,
    each containing documents.
  prefs: []
  type: TYPE_NORMAL
- en: In order to be able to insert documents, mongoose asks us to describe the structure
    of these documents. For this, we will use schemas and models.
  prefs: []
  type: TYPE_NORMAL
- en: Describing document structure using schemas and models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access the documents in the database, the documents must be described by
    means of schemas and models.
  prefs: []
  type: TYPE_NORMAL
- en: Definitions
  prefs: []
  type: TYPE_NORMAL
- en: A *schema* allows you to define the structure of a document that is stored in
    a collection. The structure is defined according to MongoDB data types.
  prefs: []
  type: TYPE_NORMAL
- en: A *model* is the representation of a schema as a JavaScript class. It links
    a schema to a MongoDB collection.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at how to create a schema and then a model.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A schema defines the fields of a document using Node.js internal object classes.
    These are the following classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`String`: This defines a string of characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Number`: This defines a numeric field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Boolean`: This defines a Boolean.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Array`: This defines an array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Buffer`: This defines a buffer of bytes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Date`: This defines a date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Object`: This defines a JavaScript object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `mongoose.Schema(format)` method is used to define the schema associated
    with the document. The `format` parameter is a JavaScript object that associates
    each field in the document with the type (in the above list) that represents it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create the schema defining a client. A client is characterized by its
    `lastname`, `firstname`, and `address`. All these fields are of type `String`:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining the schema associated with a client (test.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s explain how to create a model from the schema.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The schema is then used to define the model associated with the document. The
    model corresponds to a JavaScript class that will be used to create the documents
    in a collection.
  prefs: []
  type: TYPE_NORMAL
- en: The `mongoose.model(collection, schema)` method returns a JavaScript class associated
    with the schema. This class is called a model.
  prefs: []
  type: TYPE_NORMAL
- en: Documents created with this class will be inserted into the specified `collection`.
    The collection may not exist before inserting a document. A collection requires
    at least one document within it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: A schema specifies the format of a document stored in a collection, while a
    model is a JavaScript class used to create each such document. We associate a
    document schema with a collection using the `mongoose.model(collection, schema)`
    method call. This returns a JavaScript class that can then be used to generate
    individual document instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create the `Client` class, which will create the clients that will be
    stored in the `clients` collection. It is traditional to name the collection based
    on the name of the model, in lowercase and in plural:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Client model from the schema (test.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `Client` class is now available to create the documents that will be inserted
    into the `clients` collection.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the document
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two methods for creating the documents in a collection. These are
    the `doc.save(callback)` instance method and the `create(doc, callback)` class
    method. Let’s look at these two ways to create documents in a collection.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by using the `doc.save(callback)` instance method.
  prefs: []
  type: TYPE_NORMAL
- en: Using the doc.save(callback) instance method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The client document is created in memory from the previously created class (by
    means of `var client = new Client()`), then saved in the `clients` collection
    by means of the `client.save()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The callback function allows processing when the document has finished being
    inserted into the collection. This is especially useful if it is necessary to
    wait for the document to be inserted into the database before continuing processing:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the save() instance method to save document (test.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The callback function takes the `err` parameter, which corresponds to a possible
    error message (otherwise, it is `null`).
  prefs: []
  type: TYPE_NORMAL
- en: 'We get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Using the doc.save() instance method'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.05_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.5 – Using the doc.save() instance method
  prefs: []
  type: TYPE_NORMAL
- en: Using the traces displayed in the console, we can see that the message `The
    client is inserted into the collection` is displayed after the other messages,
    which means that inserting a document is not blocking other tasks (i.e., other
    tasks can be done while waiting for insertion in the database).
  prefs: []
  type: TYPE_NORMAL
- en: The `save()` method can also be used as a `Promise` object (see [*Chapter 2*](B17416_02_ePub.xhtml#_idTextAnchor044),
    *Exploring the Advanced Concepts of JavaScript*). For this, we use the `then(callback)`
    method afterward, possibly followed by the `catch(callback)` method to process
    the cases of error when calling the `save()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the save() method as a Promise objet
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s see the other method of creating a document with the `create(doc,
    callback)` class method.
  prefs: []
  type: TYPE_NORMAL
- en: Using the create(doc, callback) class method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A class method means that we can use the method without having instantiated
    an object, unlike an instance method, which requires that the object of the class
    be created (with `c = new Client()`).
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the document associated with the client identified by `{lastname:"Obama",
    firstname:"Barack", address:"Washington"}`, we would write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Client.create(doc, callback) class method to save document (test.js
    file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: The `create(doc, callback)` class method is used by prefixing it with the name
    of the JavaScript class (here, the `Client` class).
  prefs: []
  type: TYPE_NORMAL
- en: The document to be saved is written in the form of a JavaScript object (JSON
    format) but can also be an object instantiated with `c = new Client()`.
  prefs: []
  type: TYPE_NORMAL
- en: The callback function of the form `callback(err, doc)` is executed at the end
    of saving the document in the database. This callback function is useful if you
    want to perform a process while being certain that the document has been saved
    in the collection.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Note that the callback function `callback(err, doc)` of the `create(doc, callback)`
    method has the two parameters `err` and `doc`, which are the possible error and
    the document saved in the database, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s run the previous program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Using the Client.create() class method'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.06_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.6 – Using the Client.create() class method
  prefs: []
  type: TYPE_NORMAL
- en: 'The saved document has the fields indicated in the format associated with the
    model (here, the `lastname`, `firstname`, and `address` fields), but also the
    `_id` and `__v` fields, added automatically by MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: The `_id` field is a field used by MongoDB to give a unique identifier to each
    document in a collection. It plays the role of a primary key.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `__v` field is a field added by mongoose, associated with the document version
    number. We will not use it here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As with the `save()` instance method, the `create(doc)` class method can be
    used as a `Promise` object. For this, we do not use the `callback` parameter in
    the `create(doc)` method and instead use the `then(callback)` and `catch(callback)`
    methods following the `create(doc)` method call.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we could also write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using create() method as a Promise object
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: In the previous examples, we have inserted two documents into the `clients`
    collection. Let’s use the mongo utility to display the inserted documents and
    verify the documents that are present in the collection.
  prefs: []
  type: TYPE_NORMAL
- en: Using the mongo utility to view inserted documents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To display the inserted documents, use the mongo utility and type the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`db=connect("mydb_test")` to connect to the database'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`show collections` to show the collections already present'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`db.clients.find()` to display documents from the `clients` collection'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Using the mongo utility to view documents'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.07_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.7 – Using the mongo utility to view documents
  prefs: []
  type: TYPE_NORMAL
- en: We thus check that the two documents of the `clients` collection are indeed
    present.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how to search for them with mongoose module methods.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for documents in MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the documents have been inserted into the collection, they can be searched
    for using the `find()` class method.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `find()` method is a class method, which means that it is used by prefixing
    it with the class name associated with the model, for example, `Client.find()`.
  prefs: []
  type: TYPE_NORMAL
- en: The `find(conditions, callback)` method is used to perform a search in the collection
    associated with the model, then to retrieve the results of the search in the callback
    function indicated as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take an in-depth look at the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The `conditions` parameter is a JavaScript object used to specify search conditions.
    If no condition is specified, do not indicate anything (or indicate an empty object
    `{}`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The callback function is of the form `callback(err, results)` where `err` is
    an error message (`null` otherwise) and `results` is an array containing the search
    results (empty `[]` if none).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is also the `findOne(conditions, callback)` class method, which allows
    you, on the same principle, to find only the first document that satisfies the
    search. The callback function is of the form `callback(err, result)` where `result`
    is the first document found.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `findOne(conditions, callback)` method will be useful if you are looking
    for a single document, for example, from its identifier `_id`.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `find(conditions)` and `findOne(conditions)` methods without
    specifying the callback function as a parameter. For this, we use the `then(callback)`
    and `catch(callback)` methods to perform the processing on the documents found
    or in the event of an error. We can also use the `exec(callback)` method, as explained
    in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Let us now examine how to write the `conditions` parameter used in the two methods
    `find()` and `findOne()`.
  prefs: []
  type: TYPE_NORMAL
- en: Writing search conditions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `conditions` parameter, we indicate an object whose properties are the
    fields of the documents in the collection, and the associated values are the values
    sought for the field, of the form `{field1:value1, field2:value2...}`, for example,
    `{lastname:"Clinton", firstname:"Bill"}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other properties can be used as keywords to express conditions. They start
    with the `$` sign, such as: `$or`, `$exists`, `$type`, `$where`, `$gt`, and `$lt`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of possible keywords can be found here: [https://docs.mongodb.com/manual/reference/operator/query/](https://docs.mongodb.com/manual/reference/operator/query/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples of conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`{ }`: All documents in the collection. You can also write `find()`, which
    is equivalent to `find({})`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{ lastname: "Clinton" }`: All documents whose lastname is `Clinton`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{ lastname: "Clinton", firstname: "Bill" }`: All documents whose lastname
    is `Clinton` and first name is `Bill`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{ $or: [{ lastname: "Clinton"}, { firstname: "Jimmy" }] }`: All documents
    whose lastname is `Clinton` or first name is `Jimmy`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{ lastname: /obama/i }`: All documents whose lastname contains the string
    `obama` regardless of case (regular expression).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{ address: { $exists: true} }`: All documents whose `address` field exists,
    regardless of its type (String, Object, etc.).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{ address: { $exists: true, $type: 2 } }`: All documents whose `address` field
    exists, and which is of type `2` (String).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{"address.city": "Washington" }`: All documents containing the `address` field
    that itself has a city field whose value is `Washington`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{lastname:{$type:2}, $where:"this.lastname.match(/^Clinton|carter$/i)"}`:
    All documents whose lastname is a string (type = `2`) and whose lastname begins
    with `Clinton` or ends with `carter`, regardless of case. You must indicate that
    the lastname is a character string, otherwise you may have an error with names
    that are not in this form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{lastname: { $gt: "J", $lt: "S" }}`: All documents whose lastname is greater
    than `"J"` and less than `"S"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{lastname: { $in:["Clinton", "Carter", "Obama"] }}` : All documents whose
    lastname is `Clinton`, `Carter`, or `Obama`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the search conditions have been expressed, the results found must be retrieved
    and displayed. Let’s see how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving and displaying the results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whatever the condition expressed, the corresponding results can be retrieved
    in the callback function associated with the `find()` method, of the form `callback(err,
    results)`. We will also see that it is possible to use the `exec(callback)` method
    to retrieve the results.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at these two ways to retrieve search results.
  prefs: []
  type: TYPE_NORMAL
- en: Using the callback parameter of the find(conditions, callback) method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s find all clients whose lastname is `Clinton` or firstname is `Barack`.
    The result will be displayed in the callback function:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying clients whose lastname is “Clinton” or firstname is “Barack” (test.js
    file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'We obtain the result shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Displaying search results with find(conditions, callback)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.08_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.8 – Displaying search results with find(conditions, callback)
  prefs: []
  type: TYPE_NORMAL
- en: The callback function can be expressed in the `find()` method as before, or
    be specified in the `exec()` method used after the `find()` method. Let us now
    examine this second possibility.
  prefs: []
  type: TYPE_NORMAL
- en: Using the exec(callback) method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another way to retrieve results is to use the `exec(callback)` method following
    the `find(conditions)` method. The `find(conditions)` method is used here without
    indicating a callback function in its parameters because the callback function
    is indicated in the `exec(callback)` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantage of this is that we can insert new methods between the `find()`
    method and the `exec()` method. For example, if we want to add as additional conditions
    that the `lastname` field must be equal to `Clinton`, we can write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding as search conditions that lastname is “Clinton” (test.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Methods such as `where(field)` and `eq(value)` can be chained after the `find()`
    method. The execution of the search will be effective when calling the `exec()`
    method. Other usage possibilities are described here: [https://mongoosejs.com/docs/api/query.html#query_Query-where](https://mongoosejs.com/docs/api/query.html#query_Query-where).'
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `exec(callback)` method without specifying the callback
    function as a parameter. For this, we use the `then(callback)` and `catch(callback)`
    methods to perform the processing on the documents found or in the event of an
    error.
  prefs: []
  type: TYPE_NORMAL
- en: 'We write the following for this:'
  prefs: []
  type: TYPE_NORMAL
- en: Using exec() method as a Promise object
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: The result is displayed in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Using the exec(callback) method'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.09_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.9 – Using the exec(callback) method
  prefs: []
  type: TYPE_NORMAL
- en: We’ve learned how to create documents, then search for them. Now let’s look
    at how to update them.
  prefs: []
  type: TYPE_NORMAL
- en: Updating documents in MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible to modify one or more documents of a collection. The `updateOne()`
    and `updateMany()` class methods are used respectively to modify the first document
    found or all of the documents found.
  prefs: []
  type: TYPE_NORMAL
- en: 'These two methods have similar parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`updateMany(conditions, update, callback)` indicates modifying the data indicated
    in the `update` object on the documents specified by the indicated `conditions`.
    The callback function of the form `callback(err, response)` is called after the
    update.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updateOne(conditions, update, callback)` indicates modifying the data indicated
    in the `update` object on the first document found by the indicated `conditions`.
    The callback function of the form `callback(err, response)` is called after the
    update.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only the `conditions` and `update` parameters are mandatory in the two methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the callback is not present in the method, you must use the `then()` or `exec()`
    method afterward, otherwise the update is not done.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s modify the address of `Clinton`, which will now be `New York`:'
  prefs: []
  type: TYPE_NORMAL
- en: Using updateOne() to modify the address of “Clinton” (test.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we use the callback function to display the content of the `response`
    parameter returned by the function. We get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Updating a document'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.10_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.10 – Updating a document
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `response.modifiedCount` field indicates the number of modified documents.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not want to perform any processing at the end of the update, you can
    omit the callback function, but in this case, you must use the `then()` or `exec()`
    method afterward, otherwise, the update will not take place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use the `exec()` method to perform the update:'
  prefs: []
  type: TYPE_NORMAL
- en: Performing update using exec() method (test.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Once you know how to create, search for, and then modify documents, you just
    have to know how to delete them. Let’s look at how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting documents in MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to `updateOne()` and `updateMany()`, there are the two class methods,
    namely `deleteOne(conditions, callback)` and `deleteMany(conditions, callback)`
    that allow you to delete the first document (`deleteOne()`) or all the documents
    (`deleteMany()`) that satisfy the conditions expressed.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the instance method `doc.remove(callback)` also makes it possible
    to delete the `doc` document when it is in memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s remove `Clinton` from the collection by using the `deleteOne()` method,
    then display the new contents of the collection:'
  prefs: []
  type: TYPE_NORMAL
- en: Using deleteOne() to delete client “Clinton” (test.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: In the same way as for the `updateOne()` and `updateMany()` methods, it is the
    presence of the callback function that triggers the update of the database. If
    you do not indicate a callback function, you must in this case use the `then()`
    or `exec()` method following the `deleteOne()` or `deleteMany()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is displayed in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Deleting the "Clinton" client with deleteOne()'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.11_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.11 – Deleting the “Clinton” client with deleteOne()
  prefs: []
  type: TYPE_NORMAL
- en: The `response` object returned in the callback of the `deleteOne()` (or `deleteMany()`)
    method indicates the `deletedCount` field, which contains the number of documents
    deleted.
  prefs: []
  type: TYPE_NORMAL
- en: We have successively studied the four possible operations on documents in a
    MongoDB database, namely inserting, searching, modifying, and deleting documents.
    And with this, we come to the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data management with MongoDB is relatively easy, thanks to the use of external
    modules such as mongoose. All possible actions on a database are easily achievable.
  prefs: []
  type: TYPE_NORMAL
- en: The mongo utility, available when installing MongoDB, makes it easy to view
    collections and the documents they contain.
  prefs: []
  type: TYPE_NORMAL
- en: Using the MongoDB database is essential for building client-server applications
    and maintaining user information.
  prefs: []
  type: TYPE_NORMAL
- en: All that’s left is to see how to interconnect a client side made with Vue.js
    and a server side made with Node.js. We will see this in the following chapter.
    We will build a 100% JavaScript application in order to show how simple and efficient
    it is.
  prefs: []
  type: TYPE_NORMAL
