- en: Chapter 1. Patterns and Platform Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining an app namespace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CommonJS in practice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using platform indicators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global logging using Ti.App.Listener
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For many, building a Titanium app will be their first experience with a large,
    complete JavaScript project. Whether you are designing a small expense tracking
    system or a complete CRM tool, implementing proper design patterns in Titanium
    will improve the performance and maintainability of your app.
  prefs: []
  type: TYPE_NORMAL
- en: The cross-platform nature and underlying architecture of Titanium influences
    how many common design patterns can be implemented. In this chapter, we will demonstrate
    how to apply patterns to increase speed of development while implementing best
    practices for multiple device support.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Titanium
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Appcelerator Titanium Mobile is a platform for building cross-platform native
    mobile applications using modern web technologies, such as JavaScript, CSS, and
    HTML. Titanium Mobile is an open source project developed by Appcelerator Inc
    and licensed under the OSI-approved Apache Public License (Version 2).
  prefs: []
  type: TYPE_NORMAL
- en: The Titanium Mobile project is one of the most active on Github with a large
    number of commits each day. The Github repository is the focal point for many
    in the community including module developers, app developers needing night builds,
    and individual contributors to the Titanium project.
  prefs: []
  type: TYPE_NORMAL
- en: The Titanium ecosystem is one of the largest in the industry with a community
    of more than 450,000 worldwide developers running apps on 10 percent of the world's
    devices. Appcelerator boasts one of the largest mobile marketplaces providing
    third-party components for Titanium Mobile platform.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture of Titanium
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Titanium is a module-based mobile development platform consisting of JavaScript
    and native platform code (Java, Objective-C, and C++). The architectural goal
    of Titanium is to provide a cross-platform JavaScript runtime and API for mobile
    development; this differs from other frameworks' approaches of building "native-wrapped"
    web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Titanium uses a JavaScript interpreter to create a bridge between your app's
    JavaScript code and the underlying native platform. This approach allows Titanium
    to expose a large number of APIs, and native UI widgets without sacrificing performance.
    Titanium's UI controls are truly native and not visually emulated through CSS.
    Thus, when you create a `Ti.UI.Switch`, it is actually using the native UISwitch
    control on iOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each Titanium application is organized into layered architecture consisting
    of the following major components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Your JavaScript code**: At compile time, this will be encoded and inserted
    into Java or Objective-C files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Titanium''s JavaScript interpreter**: On Android V8 or JavaScriptCore for
    iOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Titanium API**: This is specific for a targeted platform created in Java,
    Objective-C, or C++'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Native Custom Modules**: A large variety of open source and commercial modules
    are available![Architecture of Titanium](img/5343OT_01_07.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At runtime, the Titanium SDK embedded within your app creates a native code
    JavaScript execution context. This execution content is then used to evaluate
    your app's JavaScript code. As your JavaScript is executed, it will create proxy
    objects to access native APIs such as buttons and views. These proxies are special
    objects that exist both in the JavaScript and native contexts acting as a bridge
    between the two environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we have a `Ti.UI.View` object and we update the `backgroundColor`
    to `blue`, the property is changed in JavaScript and then the proxy then updates
    the correct property in the underlying native layer as shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Architecture of Titanium](img/5343OT_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Building a Cross-platform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Titanium provides a high-level cross-platform API, however it is not a write
    once, run anywhere framework. When building cross-platform apps, it is recommended
    to adopt a "write once, adapt everywhere" philosophy. With Titanium you can add
    platform-specific code to handle each platform's different UI requirements, while
    keeping your business logic 100 percent cross-platform compatible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Building best of breed cross-platform applications, Titanium provides tools
    to:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify the platform and model at runtime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to handle platform-specific resources at build time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply platform and device-specific styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to platform tooling, the Titanium API is designed to assist with
    cross-platform development. Each major component such as `Maps`, `Contacts`, and
    `FileSystem` are separated into its own component namespaces under the top-level
    namespace called `Ti` or `Titanium`. These component namespaces then have their
    own child namespaces to segment platform-specific behavior.
  prefs: []
  type: TYPE_NORMAL
- en: An example of this segmentation is the `Ti.UI namespace`, which contains all
    UI components. This namespace contains common APIs such as `Ti.UI.View` and `Ti.UI.TableView`.
    Additionally, the `Ti.UI` namespace has platform-specific child namespaces such
    as `Ti.UI.iPad` containing controls such as `Ti.UI.iPad.Popover`. The same design
    applies to non-visual APIs such as `Ti.Android`, a namespace which contains Android-specific
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Defining an app namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using namespaces is important in Titanium app development, as it helps organize
    your code while not polluting the global namespace. The practice of creating variables
    and methods without being associated with a namespace or other scoping condition
    is called **polluting the global namespace** . Since these functions and objects
    are scoped globally, they will not be eligible for collection until the global
    namespace loses scope during application shutdown. This can often result in memory
    leaks or other unwanted side effects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following example shows how to create a namespace for our app in our `app.js`
    called `my` with three subnamespaces called `ui`, `tools`, and `controllers`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As we build our recipes, we will continue to add functionality to the preceding
    namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: CommonJS in practice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Organizing your application code using CommonJS modules is a best practice in
    Titanium development. CommonJS is a popular specification for creating reusable
    JavaScript modules and has been adopted by several major platforms and frameworks
    such as Node.js and MongoDb.
  prefs: []
  type: TYPE_NORMAL
- en: CommonJS modules help solve JavaScript scope problems, placing each module within
    its own namespace and execution context. Variables and functions are locally scoped
    to the module, unless explicitly exported for use by other modules.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to assisting with JavaScript scope concerns, CommonJS provides a
    pattern to expose a public stable interface to program against. The information-hiding
    design pattern allows module developers to update the internals of the module
    without breaking the public contract or interface. The ability to maintain a stable
    public interface in JavaScript is the key part of writing maintainable code that
    will be shared across apps and teams.
  prefs: []
  type: TYPE_NORMAL
- en: Titanium has implemented CommonJS in a similar fashion to Node.js in that you
    use the `require` method to return a JavaScript object, with properties, functions,
    and other data assigned to it, which form the public interface to the module.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshots illustrate the example app used to demonstrate the
    CommonJS high-level concepts that will be used throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: '![CommonJS in practice](img/5343OT_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding the CommonJS modules used in this recipe is straightforward and consists
    of copying the `datahelper.js` and `dateWin.js` files into the root of our Titanium
    project as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following recipe illustrates how to use CommonJS to create both `UI` and
    `Tools` modules. In the following example, a simple app is created, which allows
    the user to increase or decrease the date by a day.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project's app.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our `app.js` we create our application namespace. These namespace variables
    will be used to reference our CommonJS modules later in the example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: '`Ti.UI.Window` is then created using the `my.ui.mod` already added to our app
    namespace. The `open` method is then called on our `win` object to open our example
    app''s main window.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Building the datehelpers module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the `Resources` folder of our project, we have a CommonJS module `datehelpers.js`.
    This module has the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: The `helpers` method is created within the `datahelpers` module. This function
    is private by default until it is exposed using the `exports` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `createdOn` method is added to the `helpers` function. This function returns
    the `createAt` variable. This function is used to provide a timestamp value to
    demonstrate how the module can be initialized several times. Each time a new session
    is created for the module, the `createAt` variable will display the newly initialized
    timestamp.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `addDays` method is added to the `helpers` function. This method increases
    the provided date value by the number of days provided in the `n` argument.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `module.exports` is the object returned as the result of a `require` call.
    By assigning the `helpers` function to `module.exports`, we are able to make the
    private `helpers` function publically accessible.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The dateWin module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Also included in the `Resources` folder of our project is a CommonJS module
    `dateWin.js`. The following code section discusses the contents of this module.
  prefs: []
  type: TYPE_NORMAL
- en: Use the `require` keyword to import the `datehelpers` CommonJS module. This
    is imported in the `mod` module level variable for later usage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `createWindow` function returns `Ti.UI.Window` allowing the user to work
    with the recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next a new instance of the `dateHelper` module is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The next step in building the `createWindow` function is to set the `currentDateTime`
    module property to a default of the current date/time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Ti.UI.Window` object, which will be returned by the `createWindow` function,
    is then created. This will be used to attach all of our UI elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `dateDisplayLabel` is used to show the result of the `datehelper` module
    as the user increases or decreases the date value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `addButton` is used later in this recipe to call the `datehelper` module
    and add days to the current module value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `subtractButton` is used later in this recipe to call the `datehelper` module
    and reduce the date of the current module value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following code in the `addButton` and `subtractButton` click handlers shows
    how the `AddDays` method is called to increment the `currentDateTime` property
    of the module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following line demonstrates how to increase the `currentDateTime` value
    by a single day:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Update the `dateDisplayLabel` with the new module value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following code snippet demonstrates how to reduce the `currentDateTime`
    by a day:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Update the `dateDisplayLabel` with the new module value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a module is easy. You simply add a JavaScript file to your project
    and write your application code. By default, any variables, objects, or functions
    are private unless you have added them to the `module` or `exports` objects. The
    `module` and `exports` objects are special JavaScript objects created by Titanium
    and returned by the `require` method.
  prefs: []
  type: TYPE_NORMAL
- en: Require
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To use a CommonJS module you must use the globally available `require` function.
    This function has a single parameter through which you provide the path to your
    JavaScript module. The following line demonstrates how to load a CommonJS module
    called `datehelpers.js` located in the root of your Titanium project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When providing the `require` function with an absolute path, Titanium will start
    from the `Resources` folder of your project.
  prefs: []
  type: TYPE_NORMAL
- en: Titanium has optimized the module loading process so that when a module is first
    loaded using the `require` method, it is then cached to avoid the need to re-evaluate
    the module's JavaScript. This approach significantly improves the load performance
    for modules which share common dependencies. It is helpful to keep in mind the
    JavaScript is not re-evaluated if you have the need to manage/alter the module
    on load.
  prefs: []
  type: TYPE_NORMAL
- en: Properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adding a property to your CommonJS module is easy. You simply attach a variable
    to the `exports` object.
  prefs: []
  type: TYPE_NORMAL
- en: The following snippet demonstrates how to create a basic CommonJS property with
    a default value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'More complex object properties can also be created, for example, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You can also use a private variable to set the initial property's value. This
    often makes for more readable and streamlined code.
  prefs: []
  type: TYPE_NORMAL
- en: Create a local variable reflecting your business need.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then assign the local variable to a property attached to the `exports`
    object, for example, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember these are just properties on the `exports` JavaScript object and can
    be changed by any caller.
  prefs: []
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating public functions is easy in CommonJS, you simply add a function to
    the `exports` object. Create an `Adddays` method as part of the `exports` object.
    This function accepts a date in the `value` parameter and an integer as the `n`
    value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Create a new variable to avoid the provided value from mutating.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Increase the date by using the `n` value provided. This could be either a positive
    or negative value. Negative values will decrease the date value provided.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Return the new adjusted value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: You can also assign an `exports` method to a privately scoped function. This
    can be helpful in managing large or complex functions.
  prefs: []
  type: TYPE_NORMAL
- en: Create a locally scoped function named `addDays`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `addDays` function is then assigned to `exports.AddDays` exposing it to
    callers outside of the module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember these are just methods on the `exports` JavaScript object and can be
    changed by any caller.
  prefs: []
  type: TYPE_NORMAL
- en: Instance object using module.exports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Titanium provides the ability to create a module instance object using `module.exports`.
    This allows you to create a new instance of the function or object attached to
    `module.exports`. This is helpful in describing one particular object and the
    instance methods represent actions that this particular object can take.
  prefs: []
  type: TYPE_NORMAL
- en: This pattern encourages developers to think more modularly and to follow the
    single responsibility principle as only one object or function can be assigned
    to the `module.exports`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippets demonstrate how to create and call a module using
    this pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Titanium Studio, create the employee (`employee.js`) module file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next create the `employee` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then assign the `employee` function to `module.exports`. This will make the
    `employee` function publicly available to call using `require`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using `require`, a reference to the module is created and assigned to the `employee`
    variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next the `bob` and `chris` objects are created using new instances of the `employee`
    object created earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, the properties and functions on the `bob` and `chris` objects are called
    to demonstrate each object's instance information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: CommonJS global scope anti-pattern
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CommonJS implementation across Android and iOS is largely the same with
    one major scoping exception. If you are using a version of the Titanium framework
    below version 3.1, Android scopes all variable access to the module itself, while
    iOS allows the module to access objects outside of the module already loaded in
    the execution context. This should be considered an anti-pattern as it breaks
    many of the encapsulation principles the CommonJS specification was designed to
    prevent.
  prefs: []
  type: TYPE_NORMAL
- en: In Titanium Version 3.1, the decision has been made to deprecate global scope
    access in both iOS and Android in favor of the new `Alloy.Globals` object. You
    can read more about the `Alloy.Globals` object at [http://docs.appcelerator.com/titanium/latest/#!/api/Alloy](http://docs.appcelerator.com/titanium/latest/#!/api/Alloy).
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe demonstrates this common anti-pattern and highlights the
    CommonJS implementation differences in this area between iOS and Android.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `testScope` method is called on the `tools` module. This demonstrates how
    CommonJS module scope anti-pattern works.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The `tools` module containing the `testScope` method is part of this recipe''s
    code and can be found in the `scope.js` file root of our project. This module
    contains the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The scope-access anti-pattern is shown when calling the `my.tools.testScope()`
    method. In iOS, `my.tools.testScope()` returns `"Session Value in context"`, because
    it has access to `my.session.foo` from the current execution context. In Android,
    prior to Titanium SDK Version 3.1, undefined object used to be returned as the
    module did not have access to the `my.session.foo` object. In the Titanium SDK
    Version 3.1 and greater, Android now returns `"Session Value in context"` as it
    has access to the `my.session.foo` object.
  prefs: []
  type: TYPE_NORMAL
- en: Access to global scope has been deprecated on both platforms starting with Titanium
    SDK Version 3.1 and will be removed in a future version of the SDK. If you have
    previously implemented this anti-pattern, corrective action is recommended as
    the deprecation of this feature will cause breaking changes within your app.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn more about the CommonJS specification, please visit the wiki on CommonJS.org
    at [http://wiki.commonjs.org/wiki/CommonJS](http://wiki.commonjs.org/wiki/CommonJS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details and examples on Titanium's implementation of the CommonJS specification,
    please review their guides at [http://docs.appcelerator.com/titanium/latest/#!/guide/CommonJS_Modules_in_Titanium](http://docs.appcelerator.com/titanium/latest/#!/guide/CommonJS_Modules_in_Titanium)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using platform indicators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Handling different devices, platforms, and models is often the biggest challenge
    with cross-platform development. Titanium provides the `Ti.Platform` namespace
    to help you make decisions in your code on how to handle runtime execution.
  prefs: []
  type: TYPE_NORMAL
- en: In the following recipes, we will walk through how to create a `PlatformHelpers`
    CommonJS module containing convenience methods to solve many of your platform-related
    queries. The following screenshots demonstrate this recipe while running on both
    the iPhone and Android platforms.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using platform indicators](img/5343OT_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Ti.Platform` namespace is helpful for providing platform and device-specific
    details, but often you need a high level of detail such as when you have a tablet
    running your app and if so if it is an iPad Mini.
  prefs: []
  type: TYPE_NORMAL
- en: Adding recipe components to your project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Adding the `PlatformHelpers` module to your project is easy. Simply copy the
    `platform_helpers.js` file into your project as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding recipe components to your project](img/5343OT_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following `app.js` demonstrates the `PlatformHelpers` module described earlier
    in this chapter. This sample app presents a window with your device details. Give
    it a try on all of your Android and iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: To create our same app, first we declare our app namespace and import our `PlatformHelper`
    module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next we create the window in which we will present the device information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next we create an empty array to store our device details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: An entry is added to `deviceData` if your device is running on a simulator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `isSimulator` property is used to show the simulator message, only if the
    recipe is currently running on a platform simulator or emulator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next the platform, operating system's name, and manufacturer are added to `deviceData`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following statement adds a flag to `deviceData` indicating if the current
    device is a tablet form factor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next we add the device model and specify if it supports background tasks in
    the `deviceData` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Screen dimensions are the most commonly used properties. The following snippet
    adds the height and width of the screen to the `deviceData` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If your app is currently running on an iOS device, the following snippet adds
    the device type and specifies if it is retina enabled, to the `deviceData` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `PlatformHelper` module provides a great deal of data. To best display this,
    we will be using a `Ti.UI.TableView` with the `deviceData` array that we have
    built in an earlier code snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The device platform lookups will frequently be accessed across your app. To
    avoid performance issues by repeatedly crossing the JavaScript Bridge, we import
    the values we will use and assign them to properties in our CommonJS `PlatformHelpers`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'It is often helpful to have a Boolean indicator for the platform with which
    you are working. The following snippet shows how to create `isAndroid` and `isIOS`
    properties to accomplish this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Simulator check
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on your platform, several features may not work in that platform's
    simulator or emulator. By using the `isSimulator` property, detect which environment
    you are in and branch your code accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Background capabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mobile apps are often required to perform tasks in the background. This recipe
    demonstrates how to perform a version-based capability check to determine if the
    device your application is running on supports backgrounding/multitasking.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First check if the user is running on Android. If so, return `true` as most
    Android ROMs support background processing by default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next confirm the recipe is running on an iOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The version is checked to ensure that the device is running iOS 4 or greater.
    This confirms the operating system supports background processing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally the recipe confirms the device version is greater than the iPhone 3GS.
    This confirms the hardware supports background processing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on the platform, this feature may be turned off by the user. A secondary
    capacity check is also recommended.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Detecting tablets
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Universal app development is a common requirement on both Android and iOS.
    The following helper provides a Boolean indicator if your app is running on a
    tablet form factor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Check if the device is either an iPad or an Android device with at least one
    dimension of 700 pixels or greater.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For Android, this checks if there is a height or width greater than 700 pixels.
    You may wish to change this based on your targeted devices. For example, if you
    are targeting some of the larger screen Android phones, you would need to update
    the default 700 pixels/points to reflect them having a large screen yet still
    being considered a phone form factor.
  prefs: []
  type: TYPE_NORMAL
- en: A 4-inch iPhone
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With the introduction of the iPhone 5, we need to be aware of two different
    iPhone screen sizes. The following snippet shows how to create a property indicating
    if your app is running on an iPhone with this new screen size.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: First verify the recipe is running on an iPhone device.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Next check the size to see if there is any dimension greater than 480 points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note, the preceding `newIPhoneSize` method will only return `true`, if
    the app has been completed to support a 4-inch display. Otherwise, it will return
    `false` as your app is running in the letterbox mode.
  prefs: []
  type: TYPE_NORMAL
- en: iPad
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Titanium allows you to create universal apps on iOS. Using the following property,
    you can branch your code to show different functionalities to your iPad users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: iPad Mini
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The iPad Mini was designed with the same resolution as the first and second
    generation iPads. Although designed to run iPad apps without modification, the
    smaller screen size often requires UI adjustments for smaller touch targets. The
    following code demonstrates how to determine if your app is running on an iPad
    Mini:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Now perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First check if the recipe is running on a nonretina iPad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next verify if the nonretina iPad is not an iPad 1 or iPad 2\. If not either
    of these modules, assume the recipe is running on an iPad Mini.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apple currently does not provide a platform indicator for the iPad Mini. This
    check uses model numbers and might not be future proof.
  prefs: []
  type: TYPE_NORMAL
- en: Global logging using Ti.App.Listener
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is built-in ability of Titanium to fire and listen to application wide
    events. This powerful feature can be a perfect fit for creating loosely-coupled
    components. This pattern can provide a decoupled logging approach, which is helpful
    for specific situations such as analytics, logging, and process monitoring modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe details how `Ti.App.Listener` can be used to create a decoupled
    re-useable application component. The following screenshot demonstrates this recipe
    running on both the iPhone and Android platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Global logging using Ti.App.Listener](img/5343OT_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding the CommonJS modules used in this recipe is straightforward and consists
    of copying the `logger.js` and `mainWin.js` files into the root of our Titanium
    project as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Application-level events allow you to implement a publish/subscribe pattern
    globally in your app, even across execution contexts. By simply adding a listener
    such as the following, you can receive messages fired from anywhere in your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Firing a custom event in Titanium is easy. You simply use the `Ti.App.fireEvent`
    and provide the event name and an optional parameter payload. This example shows
    how to call the `app:myEvent` listener we defined earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is recommended that you name your events using a descriptive convention.
    For example, `app:myEvent` describes that this is an application event and is
    defined in my `app.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: Designing global logging using events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following recipes show how to use application-level custom events to implement
    logging across the different contexts of our app.
  prefs: []
  type: TYPE_NORMAL
- en: Defining our app.js
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the `app.js`, we define our application namespace and import the logger and
    UI CommonJS modules.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Next in our `app.js`, the `setup` method is called on the `logger` module. This
    ensures our database logging tables are created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: The application-level listener is then defined in our `app.js`. This listener
    will wait for the `app:log` event to be fired and then call the logger's `add`
    method with the payload provided.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: The logging module
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following code snippet demonstrates how to create the basic CommonJS module,
    `logger.js`, used in our global listener recipe. This module has two methods;
    `setup`, which creates our database objects, and `add`, which the listener calls
    to log our messages.
  prefs: []
  type: TYPE_NORMAL
- en: Create a constant with the logging database name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Create the `setup` module-level method. This is used to create the `LOG_HISTORY`
    table, which will later be used to record all log statements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Create the `add` module-level method. This method is used to record the information
    to be added to the log table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Bringing it all together
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following sections show the contents of our `mainWin.js` module. This module
    returns a window with a single button that when pressed fires our logging event.
  prefs: []
  type: TYPE_NORMAL
- en: Window and module variable setup
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `fetchWindow` function returns a simple window demonstrating how to fire
    an application-level event. To demonstrate, a new message is sent each time, and
    we add a module level variable named `_press_Count`, which increments with each
    click.
  prefs: []
  type: TYPE_NORMAL
- en: Create the module-level variable `_press_Count` to record the number of times
    `addLogButton` has been pressed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The `fetchWindow` method returns a `Ti.UI.Window` containing the UI elements
    for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: A `Ti.UI.Window` is created for all of our UI elements to be attached.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: The `addLogButton Ti.UI.Button` is created. This button will be used to trigger
    the `Ti.App.fireEvent` used to demonstrate global listeners in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Firing the application-level event
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: On clicking on the `addLogButton` button, the `_press_Count` variable is increased
    by one and a logging object is created. The following code demonstrates how the
    `Ti.App.fireEvent` method is called for the `app:log` event and a JavaScript object
    containing our logging details is provided. The listener we defined in our `app.js`
    will then receive this message and log our results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: The first action taken after the user taps the `addLogButton` is to increase
    the `_pressCount` by one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Next the `logObject` containing information to be submitted for logging is created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Finally, the `Ti.App.fireEvent` is called for the `app:log` event. The `logObject`
    is also provided as a parameter when calling this application global event.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: App logging is just one of the many examples of how you can use application-level
    events to decouple your app's components. This pattern will be used several times
    over the course of this book when decoupled component interaction is required.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since application-level listeners are globally scoped, you need to take caution
    where and when they are defined. A general rule of thumb is to define application-level
    listeners in an area of your app that is always available and never reloaded,
    such as your `app.js`, CommonJS file which is only loaded once, or another bootstrapping
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you must define them within a window or other module that is loaded repeatedly,
    make sure you remove the listener when the object is no longer needed. To remove
    the event listener, you need to call the `Ti.App.removeEventListener` method with
    the same arguments used on creation. The following snippet shows how to remove
    the `app:myEvent` listener created earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you do not remove a listener, all associated JavaScript objects will not
    be eligible for garbage collection, often resulting in a memory leak.
  prefs: []
  type: TYPE_NORMAL
