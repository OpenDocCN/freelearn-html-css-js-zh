- en: Chapter 3. Visualforce and Standard Web Development Technologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The combination of native Visualforce markup and standard web development technologies
    can be used to build rich UIs for Force.com applications. However HTML rendering
    of Visualforce is complicated and there are many ways to change Visualforce's
    generated default HTML by using additional resources such as CSS and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter teaches how to develop Visualforce pages with standard web development
    technologies such as CSS, JavaScript, jQuery, and HTML5\. The usage of static
    resources for CSS, JavaScript, and jQuery are also included in the chapter. The
    following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Styling Visualforce pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using JavaScript in Visualforce pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using jQuery in Visualforce pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5 and Visualforce pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's build rich user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Styling Visualforce pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We use Visualforce pages to accomplish both simple UI requirements and sophisticated
    UI requirements. In the case of implementing sophisticated scenarios, we cannot
    meet such requirements by using only Salesforce's standard styles. We can customize
    the look and feel of a Visualforce page by using our own stylesheets or styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many standard Visualforce components have the `style` and/or `styleClass` attribute.
    We can use either of these attributes to customize the page by using CSS. This
    allows us to change the default style (width, height, color, and font) of components.
    There are two types of styles in Visualforce, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Salesforce styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Salesforce styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Salesforce standard pages have standard styles that can be used on Visualforce
    pages. When we use standard Visualforce components such as `<apex:inputField>`,
    `<apex:pageBlock>`, `<apex:pageBlockTable>`, and `<apex:detail>`, they acquire
    the default styles provided by Salesforce. The `tabStyle` attribute in the `<apex:page>`
    or `<apex:apgeBlock>` component can specify the style of a particular object tab.
    It will change the color scheme of the preceding components. When we use a standard
    controller, Visualforce page components inherit the styles of the associated objects.
    When we use a custom controller, we can use the styles of any of Salesforce's
    standard tabs by using the `tabStyle` attribute on the `<apex:page>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: Custom styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can extend the Salesforce styles by using custom styles. Custom styles can
    be added to a Visualforce page by using the `style` and/or `styleClass` attribute.
    The `style` attribute and the `styleClass` attribute are available on most Visualforce
    components. The `style` attribute allows you to add inline custom CSS statements.
    The `styleClass` attribute allows you to add custom styles via a class name which
    is specified in a CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the sample Visualforce page has custom styles that
    have been added via the `style` and `styleClass` attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we have implemented CSS on the Visualforce page. But,
    if we use the same style in multiple locations, we have to add that particular
    CSS file to every Visualforce page. We can use static resources to overcome this
    problem. This is another way to bind custom styles to the Visualforce markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Static resources are uploaded to the Force.com platform via the **Setup** screen.
    The Force.com platform allows us to upload images, stylesheets, JavaScript, and
    archives (`.zip` and `.jar` files). The following is the stylesheet (CSS filename:
    `main.css`) we have used above Visualforce page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see how we can upload this stylesheet into static resources. The resource
    name is `CusomMainStyle` which must be unique. The resource can be created by
    navigating to the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Your Name** | **Setup** | **Develop** | **Static Resources** | **New**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Custom styles](img/9818_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Use static resources to store CSS file
  prefs: []
  type: TYPE_NORMAL
- en: 'We can refer to the `CustomMainStyle` static resources in a Visualforce page
    as follows. The `<apex:stylesheet>` tag can be used to include a stylesheet. The
    resource name is used to refer the static resource in a Visualforce page as given
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to remove the Salesforce standard styles entirely, you have to
    set a false value to the `standardStylesheets`, `sidebar`, and `showHeader` attributes
    on the `<apex:page>` tag. If you stop loading standard Salesforce stylesheets,
    you can reduce the size of your Visualforce page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We have mentioned earlier that the Force.com platform allows us to upload archive
    files (such as ZIP and JAR files) as static resources. In such a scenario, a ZIP
    file can contain resources such as images, CSS files and JavaScript files. In
    this case, we can refer an individual resource within the ZIP file by using the
    `URLFOR` function. The `URLFOR` function has two parameters. The first parameter
    is the name of the static resource, which we provide while uploading a static
    resource. The second parameter is the path to the particular file within the ZIP
    file. The static resource that is used in the following example is a ZIP file
    that has the `main.css` stylesheet in a directory called `CustomStyleZipFolder`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Custom styles](img/9818_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Upload zip file as a static resource
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a special scenario with the static resources where you can use relative
    paths of files in static resource. This allows us to refer to other contents within
    the archive in a relative manner. For example, the `Main.css` file has the following
    style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding style code, the image's path needs to be specified relatively
    to the `Main.css` file. In this scenario, we prepare our `CustomStyleZipFolder`
    directory, that contains the `Main.css` file and the `images` folder. Here, the
    `sfLogo.jpg` image present in `Images` is referred in `Main.css`.
  prefs: []
  type: TYPE_NORMAL
- en: Then we only need to include the `Main.css` file into a Visualforce page. We
    do not need to worry about the relative path in the stylesheet, because the static
    resource contains both the stylesheet and the image.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Maximum size of a single static resource is 5 MB. Maximum size of static resources
    that we can have in an organization is 250 MB.
  prefs: []
  type: TYPE_NORMAL
- en: Using JavaScript in Visualforce pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JavaScript is one of the key browser technologies for Visualforce pages. JavaScript
    provides the framework for communicating between other JavaScript objects, HTML
    elements, and the Visualforce controller. We can use JavaScript libraries as well
    as some Visualforce components (such as `<apex:actionFunction>`, `<apex:actionSupport>,
    <apex:commandButton>`, `<apex:commandLink>`) with Visualforce pages. JavaScript
    code can be written in a Visualforce page and can be included in a Visualforce
    page by using a static resource. This is the best method to use to include a JavaScript
    library in a Visualforce page. We can use the `<apex:includeScript>` component
    to include a JavaScript library from static resources. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Accessing Visualforce components in JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we refer Visualforce components in the JavaScript code, the ID attribute
    comes into play. Every Visualforce component has an ID attribute. The ID attribute
    must be specified with a particular component to refer it in JavaScript, and it
    is used to bind the two components together. When the page is rendered, this ID
    attribute is a part of DOM ID for a particular component. The ID attribute must
    be unique as well. The following code snippet shows a way of binding two components
    using the `id` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example provides an idea about the way to handle JavaScript in
    a Visualforce page. This page has been implemented to change the pick list value
    by checkbox through JavaScript. The JavaScript code is included within the `<script>`
    tag. The JavaScript function has two arguments. The first argument is the element
    that triggered the event (`input`) and the second one is the DOM ID (`id`) of
    the target pick list field. The `{!$Component.inputStatus}` expression obtains
    the DOM ID of the HTML element generated by the `<apex:inputField id="inputStatus"
    value="{!order.Status__c}"/>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code is the associated controller class for the preceding Visualforce
    page. It retrieves the existing orders as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript remoting for Apex controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Javascript remoting is the process that provides support for some methods in
    APEX controllers that are to be called via JavaScript. This feature allows us
    to implement complex and dynamic behaviors that cannot be accomplished using standard
    Visualforce Ajax components. JavaScript remoting was released as a Developer Preview
    in Spring ''11\. Since the Summer ''11 release, JavaScript remoting provides support
    for additional return data types. Also, the references to the same objects are
    no longer duplicated in the response. JavaScript remoting has three main parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript code which is used to invocate a remote method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The remote method in the Apex controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The callback function (written in JavaScript) in a Visualforce page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use JavaScript remoting, your request must take the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The description of the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`namespace`: This is your organization''s namespace. This is only required
    if the class comes from an installed package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`controller`: This is the name of your Apex controller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`method`: This is the name of the Apex method you''re calling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params`: This is a comma-separated list of parameters that your method takes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`callbackFunction`: This is the name of the function that handles the response
    from the controller. It returns the status of the call and the method result.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape`: This specifies whether your response should be escaped (by default,
    `true`) or not (`false`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The remote method must begin with the `@RemoteAction` annotation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The remote method can have the following data types as arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: Apex primitives (String, Integer, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collections (Set, List, Map)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sObject (Standard objects and custom objects)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User-defined Apex classes and interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The remote method can return the following data types:'
  prefs: []
  type: TYPE_NORMAL
- en: Apex primitives (String, Integer, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sObjects (standard objects and custom objects)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collections (Set, List, Map)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User-defined Apex classes and enums
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SelectOption`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PageReference`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SaveResult`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UpsertResult`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DeleteResult`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The remote method must be uniquely identified by the name and number of parameters.
    For example, we cannot write a remote method with the same method name and equal
    number of arguments and different type of arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows how to use JavaScript remoting in a Visualforce
    page and the Apex controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the associated Apex controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Using jQuery in Visualforce pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery is an open source JavaScript library which allows us to implement client-side
    scripting of HTML. jQuery has been designed to be capable of extending the main
    libraries with new plugins for introducing a wide variety of new features. And
    also it allows us to navigate a document, select a DOM element, create animations,
    event handling, and develop Ajax applications.
  prefs: []
  type: TYPE_NORMAL
- en: When we develop Visualforce pages, jQuery can be used to simplify the UI developments.
    For example, jQuery is used to simplify the DOM manipulations and give access
    to the library of UI elements, and simplify the Ajax techniques and technologies
    of mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows the jQuery version of our previous example. This
    is used to explain the JavaScript code in Visualforce. This example uses the `Order__c`
    standard controller. This page needs the ID parameter with an order id:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://c.ap1.visual.force.com/apex/JQueryExample?id=a02900000086Hlr](https://c.ap1.visual.force.com/apex/JQueryExample?id=a02900000086Hlr)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This page renders the order detail page. We are using jQuery to fulfill our
    requirement. Therefore, the Visualforce page needs to include the jQuery library
    for jQuery implementations. In the following example we used an online reference
    of the main jQuery library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You can also use static resources to include the jQuery library. The usage is
    same as in the JavaScript and CSS examples.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are other JavaScript libraries with the same default global variable name
    (`$`). If we also use the same global variable name, there will be a conflict
    at the client side. Our jQuery functions will not work. To eliminate that conflict,
    we can use `jQuery.noConflict()` and assign it to another global variable and
    use that new global variable in our jQuery code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we don''t use an `id` attribute for a particular component, Visualforce
    uses a dynamically-generated `id`, for example, `j_id0, j_id0:j_id1`. Consider
    an example, we have specified the `id` attribute for `<apex:inputField id="inputOne"/>`.
    But we haven''t specified any `id` attribute for parent components of `inputOne`.
    We can select such a component using jQuery. It is called partial selectors.For
    example: `j$(''[id*= inputOne]'')`'
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 and Visualforce pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 is the new standard of HTML. The previous version of HTML is HTML 4.01\.
    HTML5 has new features such as new elements, new attributes, video and audio support,
    2D/3D graphic support, full CSS3 support, local storage, local SQL database support,
    and featuring web applications. With these features, we can reduce the use of
    external plugins. There are also are more markups to replace scripting. HTML5
    has better error handling mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to the Force.com developments, we can use HTML5 for Visualforce
    page developments and develop mobile web applications. In the Force.com platform,
    HTML5 plays a major role in developing web-based mobile applications. For example,
    recently Salesforce has released touch.salesforce.com, which uses HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Visualforce pages are functioned with `docType` of HTML 4.01 transitional.
    Since the Winter '12 version, Visualforce pages are supported to change the `docType`
    attribute in the `<apex:page>` tag. In a pure HTML5 page, the `<!DOCTYPE html>`
    tag must be specified at the top of the page. The `docType` attribute of `<apex:page>`
    achieves that requirement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the example usage for the `docType` Visualforce attribute
    on the `<apex:page>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example is a Visualforce page with drag-and-drop functionality
    by using HTML5\. Here we have a rectangle and an image which is referring from
    static resources. We can drag the image into the rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we became familiar with the combined usage of native Visualforce
    markup and standard web development technologies. We have seen the way to build
    rich UIs in the Force.com platform by using CSS, JavaScript, jQuery, and HTML5\.
    We have learned the usage of static resources for CSS, JavaScript, and jQuery.
  prefs: []
  type: TYPE_NORMAL
