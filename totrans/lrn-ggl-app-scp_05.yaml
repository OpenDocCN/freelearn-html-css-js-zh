- en: Chapter 5. Creating Google Calendar and Drive Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to create Forms programmatically using
    `FormApp`, `ContentService`, and `HtmlService`. Also, you learned how to use the
    `doGet` and `doPost` functions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Create Calendar events
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable Google's advanced services
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a few Drive applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CalendarApp class
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `CalendarApp` class provides direct access to Calendar's basic service.
    This service allows you to read and update your default as well as subscribed
    Calendars. Using GAS, you can create Calendar events, and invite your friends
    programmatically. You can even grab event details and populate them in Sheets.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Creating Calendar events from a simple description
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can create an event by just passing a description as an argument to the
    `createEventFromDescription` method of the `CalendarApp` class:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating simple Calendar events
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also create events by specifying the title, start time, and end time:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating events with options
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code shows how to create an event with the specified options,
    such as the description and location. Uncomment the `sendInvites` line only if
    you insert the guest''s e-mail ID(s). Use a comma to separate them if there is
    more than one e-mail ID:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating events from Sheets data
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create events from prepopulated Sheets data, create a Sheet named `Events`
    and create column headers as shown here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating events from Sheets data](img/B05010_05_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: 'Create the function `createCalendarEventsFromSheetData` as shown here:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating events from an external CSV file's contents
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of creating events from Sheet data, you can create them from an external
    CSV file uploaded to the Drive. Upload a CSV file with the same headers as in
    the previous task.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the key/ID of the uploaded file and replace it with the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Enabling advanced Google services
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, you have been using GAS's basic services, such as `GmailApp` and
    `ContactsApp`. Now it is time to learn how to enable advanced services.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: In this task, we are going to use a Calendar service, which is an advanced service,
    so we have to enable it before using it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'In the script editor, click on **Resources**, and then on **Advanced Google
    services…**, and a pop-up window will open:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling advanced Google services](img/B05010_05_02.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: 'In the **Advanced Google Services** pop-up window, all the GAS advanced services
    will be listed. Look for the **Calendar API** service, select the latest version
    (it is selected by default), and then enable it if is not already enabled. In
    the following screenshot, you can see that the Calendar API service is enabled:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling advanced Google services](img/B05010_05_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: Enabling advanced services only in scripts is not enough, you also need to enable
    it in the Google Developers Console, as indicated in the pop-up window. To do
    so, click on the link provided in the pop-window.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Then a new browser window or tab will open with popular APIs listed as groups.
    You can see **Calendar API** under the **Google Apps APIs** group. If not listed,
    search the word `calendar` using the search option provided at the top of the
    page.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling advanced Google services](img/B05010_05_04.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: 'Click on **Calendar API** (highlighted in yellow in the preceding screenshot),
    then on the follow-up web page, click on **Enable API**:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling advanced Google services](img/B05010_05_05.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: That's all; you have enabled Calendar advanced services.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Listing all the Calendars
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After enabling Calendar advanced services, you can use the `listCalendars`
    function to log all of your Calendars:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `Calendar.CalendarList.list` object returns a list of all the Calendars,
    provided that the number of Calendars is less than the value of `maxResults`.
    If the number of Calendars is greater than this value, then the `nextPageToken`
    value is used as a page token for the next iteration. A sample output of the log
    is shown here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![Listing all the Calendars](img/B05010_05_06.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: Listing Calendar events in Sheets
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To list events from any one Calendar into Sheets, create a new Sheet named
    `ExistingEvents` and add the following function:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The function we just mentioned collects all the events from the Calendar, constructs
    a 2-dimensional array, and stores that array in the `ExistingEvents` sheet. A
    sample output of the preceding code is shown here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![Listing Calendar events in Sheets](img/B05010_05_07.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: Syncing events from one Calendar to another Calendar
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `syncEvents` function (listed in the following code) syncs the last 30
    days events from the source Calendar to the destination Calendar. To test this
    application, create the main function `syncEvents` and other helper functions
    such as `updateEvent_`, `deleteEvent_`, and `insertEvent_`. We are marking those
    events synced from the source to the destination by prefixing `sync:` and enclosing
    an event title/summary in square brackets. For example, if the source event is
    `Example event`, then it will be marked as `[sync:Example event]` and inserted/updated
    in the destination Calendar:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The previously mentioned `syncEvents` function collects events from the `Source`
    and `Destination` events and processes them as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: It updates all the events that appear in both the source and destination (common
    to both arrays)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It deletes all the events that are not present in the source but are present
    in the destination (that is, they are present in the destination only)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It inserts all the events that appear in the source but not in the destination
    (that is, they are present in the source only)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The helper functions are listed here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Congratulations! You have created a working Calendar sync application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: The DriveApp class
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This class allows you to create, search, and modify files and folders in your
    Drive.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'For reference documentation on the `DriveApp` class, refer to the website:
    [https://developers.google.com/apps-script/reference/drive/drive-app?hl=en](https://developers.google.com/apps-script/reference/drive/drive-app?hl=en).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Creating customized PDF files
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Imagine that you need to create customized PDF files from the Sheet or external
    data. We can create PDF files from the HTML template. You simply need to format
    column headers and put some sample data in a new Sheet (`AddressBook`) as shown
    in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating customized PDF files](img/B05010_05_10.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: 'Create the `createPdfs` function in the `Code.gs` file as listed here:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `createPdfs` function gets data from a Sheet, or you can modify it to get
    data from an external source. It creates an HTML template for each row of data,
    converts it to a PDF, and stores it in a Drive folder. Let's assign the `name`,
    `title`, `company`, `address`, `city`, and `zip_pin` variables as global variables.
    Only then can we get those values in an HTML template.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an HTML file called `Template.html` and enter the code listed here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This code gets the global variable values as we described and returns customized
    HTML. Update your message and name in the appropriate places. From this HTML template,
    the `createPdfs` function creates PDF files, each of which is customized with
    individual row data from the Sheet. All the PDF files created are saved in Drive
    (`My Drive` | `Letter`) folder.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'The content of one of the PDF files (`Aaron.pdf`) created as per the Sheet
    data (row 2) is shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating customized PDF files](img/B05010_05_11.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: For a sample, we used this template for a simple letter, but you can use any
    type of template, such as an invoice, resume, job application, and more, as per
    your requirements and imagination.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Drive file routing application
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This application can move files by matching the name with the criteria terms
    in the `Settings` tab. First of all, create a new Sheet or tab named `Settings`
    and column headings as shown here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Drive file routing application](img/B05010_05_08.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: 'Also, create the `moveDriveFiles` function as shown in the following code snippet.
    If you run this function, then it moves files from the root folder to the appropriate
    folder as per the settings in the **Settings** Sheet. The destination folder is
    created if it does not already exist. You can also create a trigger to run this
    function at a predefined time or periodically:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating a Drive file search application
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now you are going to create a file search application. It can search files
    in Drive with certain criteria in a text field. Create the functions `onOpen`,
    `showSidebar`, and `listDriveFiles` in the `Code.gs` file as listed here:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `onOpen` function creates an add-ons menu and calls the `showSidebar` function.
    This means whenever the spreadsheet is opened, the add-ons menu is added and the
    sidebar is displayed:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a new HTML file named `Sidebar.html` and put the following code in it:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `Sidebar.html` 的新 HTML 文件，并将以下代码放入其中：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: On opening the spreadsheet or running the `showSidebar` function, the sidebar
    opens as shown in the following screenshot, except the text `Chapter` in the text
    field. You can type any other text to search files. On clicking the **Search**
    button, the script searches the Drive for those files whose name contains the
    text and populates data in the `Files` Sheet.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开电子表格或运行 `showSidebar` 函数时，侧边栏将打开，如以下截图所示，除了文本字段中的 `Chapter` 文本。你可以输入任何其他文本来搜索文件。点击
    **搜索** 按钮后，脚本将在 Drive 中搜索包含该文本的文件，并在 `Files` 工作表中填充数据。
- en: 'The following screenshot shows the sidebar and sample output:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了侧边栏和示例输出：
- en: '![Creating a Drive file search application](img/B05010_05_09.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个驱动文件搜索应用](img/B05010_05_09.jpg)'
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about, and created, many useful real-world applications,
    including an event sync application. In the next chapter, you will learn how to
    create RSS/Atom readers and language translator applications.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了并创建了许多有用的实际应用，包括一个事件同步应用。在下一章中，你将学习如何创建 RSS/Atom 阅读器和语言翻译应用。
