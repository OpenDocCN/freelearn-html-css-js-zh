["```js\nasync function getAirplane(req, res) {\n    const airplane = await models.Airplane.findByPk\n     (req.params.id);\n    if (!airplane) {\n        return res.sendStatus(404);\n    }\n    res.json(airplane);\n}\nexports.getAirplane = getAirplane;\n```", "```js\nasync function createAirplane(req, res) {\n    const { name, seats } = req.body;\n    try {\n        const airplane = await models.Airplane.create({\n            planeModel: name,\n            totalSeats: seats,\n        });\n        return res.json(airplane);\n    } catch (error) {\n        res.status(500).send(error);\n    }\n}\nexports.createAirplane = createAirplane;\n```", "```js\nasync function flightSchedules(req, res) {\n    const records = await models.FlightSchedule.findAll({\n       include: [models.Airplane]\n    });\n    res.json(records);\n}\nexports.flightSchedules = flightSchedules;\n```", "```js\nconst { bookTicket } = require(\"./routes/tickets\")\nconst { createSchedule, flightSchedules } = \nrequire(\"./routes/flights\");\nconst { getAirplane, createAirplane } = \nrequire(\"./routes/airplanes\");\n```", "```js\napp.get('/airplanes/:id', getAirplane);\n```", "```js\napp.get('/flights', flightSchedules);\n```", "```js\n    name: {\n      type: DataTypes.STRING,\n      validate: {\n        notEmpty: {\n            msg: \"A name is required for the customer\",\n        }\n      }\n    },\n    email: {\n      type: DataTypes.STRING,\n      validate: {\n        isEmail: {\n            msg: \"Invalid email format for the customer\",\n        }\n      }\n    }\n```", "```js\nconst { ValidationError } = require(\"@sequelize/core\");\n```", "```js\nconst { scheduleId, seat, name, email } = req.body;\n```", "```js\nconst [customer] = await models.Customer.findOrCreate({\n    where: {\n        email,\n    },\n    defaults: {\n        name,\n    }\n});\n```", "```js\nawait boardingTicket.setCustomer(\n customer,\n { transaction: tx }\n);\n```", "```js\n    } catch (error) {\n        if (error instanceof ValidationError) {\n            let errObj = {};\n            error.errors.map(err => {\n               errObj[err.path] = err.message;\n            });\n            return res.status(400).json(errObj);\n        }\n        if (error instanceof Error) {\n            return res.status(400).send(error.message);\n        }\n        return res.status(400).send(error.toString());\n    }\n```", "```js\nconst path = require(\"path\");\n```", "```js\napp.use(express.static(path.join(__dirname, \"public\")));\n```", "```js\nnpm i --save express-basic-auth\n```", "```js\nconst basicAuth = require(\"express-basic-auth\");\n```", "```js\napp.use(adminJs.options.rootPath, basicAuth({\n        users: { 'admin': 'supersecret' }, challenge: true,\n        }), router);\n```", "```js\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n      <title>Welcome to Avalon Airlines!</title>\n      <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css\">\n      <script src=\"img/cdn.min.js\" defer></script>\n    </head>\n    <body>\n      <section class=\"section\">\n        <div class=\"container\">\n          <h1 class=\"title\">\n            Welcome to Avalon Airlines!\n          </h1>\n          <p class=\"subtitle\">\n            Where would you like to go \n             <strong>today</strong>?\n          </p>\n        </div>\n      </section>\n    </body>\n    </html>\n    ```", "```js\n      <section class=\"section\">\n        <div class=\"container\">\n          <div class=\"columns\" x-data=\"{\n                        flights: [],\n                        selected: {}\n                      }\" x-init=\"fetch('/flights')\n                          .then(res => res.json())\n                          .then(res => flights = res)\">\n            <div class=\"column\">\n            </div>\n            <div class=\"column\">\n          </div>\n        </div>\n      </section>\n    ```", "```js\n    <table class=\"table is-bordered is-striped is-narrow is-hoverable is-fullwidth\">\n        <thead>\n          <tr>\n            <th>Origin</th>\n            <th>Departure</th>\n            <th>Departure Time</th>\n            <th>Model</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          <template x-for=\"flight in flights\">\n            <tr>\n              <td x-text=\"flight.originAirport\"></td>\n              <td x-text=\"flight.destinationAirport\"></td>\n              <td x-text=\"flight.departureTime\"></td>\n              <td x-text=\n               \"flight.Airplane.planeModel\"></td>\n              <td><button x-on:click=\"selected = flight\" \n               class=\"button is-primary is-light is-\n               small\">Book\n                  Flight</button></td>\n            </tr>\n          </template>\n        </tbody>\n      </table>\n    ```", "```js\n    <script>\n      function flightForm() {\n        return {\n          data: {\n            email: \"\",\n            name: \"\",\n            seat: \"\",\n            success: false,\n          },\n          formMessages: [],\n          loading: false,\n    ```", "```js\n          submit(e) {\n            this.loading = true;\n            fetch(\"/book-flight\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n              },\n              body: JSON.stringify({\n                ...this.data,\n                scheduleId: this.selected.id,\n              }),\n            })\n    ```", "```js\n              .then(async (response) => {\n                const { headers, ok, message, body } = \n                 response;\n                const isJson = headers.get('content-\n                 type')?.includes('application/json');\n                const data = isJson ? await \n                 response.json() : await response.text();\n                if (!ok) {\n                  return Promise.reject(isJson ? \n                  Object.values(data) : data);\n                }\n               // boarding ticket was successfully created\n                this.formMessages = [];\n                this.data = {\n                  email: \"\",\n                  name: \"\",\n                  seat: this.data.seat,\n                  success: true,\n                }\n              })\n    ```", "```js\n              .catch((err) => {\n                this.formMessages = Array.isArray(err) ? \n                 err : [err];\n              })\n              .finally(() => {\n                this.loading = false;\n              });\n          },\n        };\n      }\n    </script>\n    ```", "```js\n    <div x-show=\"!!selected.id\">\n      <section class=\"hero is-info\">\n        <div class=\"hero-body\">\n          <p class=\"title\">\n            <span x-text=\"selected.originAirport\"></span> &#8594; <span x-text=\"selected.destinationAirport\">\n            </span>\n          </p>\n          <p class=\"subtitle\">\n            Departs at <span x-text=\"selected.\n            departureTime\"></span>\n          </p>\n        </div>\n      </section>\n    ```", "```js\n    <form x-data=\"flightForm()\" @submit.prevent=\"submit\">\n      <div x-show=\"!!data.success\">\n        <section class=\"hero is-primary\">\n          <div class=\"hero-body\">\n            <p class=\"title\">\n              Your boarding ticket has been created!\n            </p>\n            <p class=\"subtitle\">\n              Your seat for this flight is <span \n               x-text=\"data.seat\"></span>\n            </p>\n          </div>\n        </section>\n        <div class=\"mt-4 field is-grouped is-grouped-  \n         centered\">\n          <p class=\"control\">\n            <a class=\"button is-light\" \n              x-on:click=\"selected = {}; data.success =     \n              false; data.seat = ''\">\n              OK\n            </a>\n          </p>\n        </div>\n      </div>\n    ```", "```js\n    <div x-show=\"!data.success\">\n      <div class=\"field pt-4\">\n        <label class=\"label\">Full Name</label>\n        <div class=\"control\">\n          <input class=\"input\" type=\"text\" x-model=\n           \"data.name\" placeholder=\"e.g Alex Smith\">\n        </div>\n      </div>\n      <div class=\"field\">\n        <label class=\"label\">Your Email</label>\n        <div class=\"control\">\n          <input class=\"input\" type=\"email\" \n            x-model=\"data.email\"\n            placeholder=\"e.g. alexsmith@avalon-\n            airlines.com\">\n        </div>\n      </div>\n      <div class=\"field\">\n        <label class=\"label\">Seat Selection</label>\n        <div class=\"control\">\n          <input class=\"input\" type=\"text\" \n            x-model=\"data.seat\" placeholder=\"e.g. 1A\">\n        </div>\n      </div>\n    ```", "```js\n    <div class=\"field is-grouped is-grouped-centered\">\n      <p class=\"control\">\n        <button type=\"submit\" :disabled=\"loading\" \n        class=\"button is-primary\">\n          Purchase Ticket\n        </button>\n      </p>\n      <p class=\"control\">\n        <a class=\"button is-light\" x-on:click=\"selected = {}; \n        data.success = false; formMessages = []\">\n          Cancel\n        </a>\n      </p>\n    </div>\n    ```", "```js\n                    <template x-for=\"message in \n                     formMessages\">\n                      <article class=\"message is-warning\">\n                        <div class=\"message-header\">\n                          <p>A correction is required</p>\n                        </div>\n                        <div x-text=\"message\" class=\n                         \"message-body\"></div>\n                      </article>\n                    </template>\n                  </div>\n                </form>\n    ```", "```js\ngit init\n```", "```js\nbrew install flyctl\n```", "```js\ncurl -L https://fly.io/install.sh | sh\n```", "```js\niwr https://fly.io/install.ps1 -useb | iex\n```", "```js\nflyctl auth signup\n```", "```js\nflyctl auth login\n```", "```js\nflyctl launch\n```", "```js\nCreating app in /Users/daniel/Documents/Book/code/ch10\nScanning source code\nDetected a NodeJS app\nUsing the following build configuration:\n\tBuilder: heroku/buildpacks:20\n? App Name (leave blank to use an auto-generated name):\nAutomatically selected personal organization: Daniel Durante\n? Select region: iad (Ashburn, Virginia (US))\nCreated app nameless-shape-3908 in organization personal\nWrote config file fly.toml\n? Would you like to set up a Postgresql database now? No\n? Would you like to deploy now? No\nYour app is ready. Deploy with `flyctl deploy`\n```", "```js\nfly launch\n```", "```js\nfly volumes create mysqldata --size 1\n```", "```js\nfly secrets set MYSQL_PASSWORD=password MYSQL_ROOT_PASSWORD=root_password\n```", "```js\nkill_signal = “SIGINT”\nkill_timeout = 5\n[mounts]\n  source=”mysqldata”\n  destination=”/data”\n[env]\n  MYSQL_DATABASE = “avalon_airlines”\n  MYSQL_USER = “avalon_airlines”\n[build]\n  image = “mysql:5.7”\n[experimental]\n  cmd = [\n    “--default-authentication-plugin”,\n    “mysql_native_password”,\n    “--datadir”,\n    “/data/mysql”\n  ]\n```", "```js\nfly scale memory 256\nfly deploy\n```", "```js\nflyctl secrets set DATABASE_URL=mysql://avalon_airlines:<YOUR PASSWORD>@<YOUR MYSQL’S APPLICATION NAME>.internal/avalon_airlines\n```", "```js\n  “scripts”: {\n    “start”: “node index.js”,\n    “dev”: “nodemon index.js”\n  },\n  “engines”: {\n    “node”: “16.x”\n  },\n```", "```js\n    “production”: {\n        “use_env_variable”: “DATABASE_URL”,\n        “dialect”: “mysql”\n    }\n```", "```js\napp.listen(process.env.PORT || 3000, function () {\n    console.log(“> express server has started”);\n});\n```", "```js\n[env]\n  PORT = “8080”\n  NODE_ENV = “production”\n```", "```js\nflyctl deploy\nflyctl open\n```"]