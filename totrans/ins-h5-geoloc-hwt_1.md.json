["```js\n--\nTable structure for table 'points'\n--\n\nCREATE TABLE IF NOT EXISTS 'points' (\n'id' int(11) NOT NULL AUTO_INCREMENT COMMENT 'Our primary index field',\n'latitude' float NOT NULL COMMENT 'Our latitude coordinate',\n'longitude' float NOT NULL COMMENT 'Our longitude coordinate',\n'user_id' int(11) NOT NULL COMMENT 'The unique ID of the user',\n'time' int(11) NOT NULL COMMENT 'The UNIX timestamp of the time when the point was recorded',\nPRIMARY KEY ('id'),\nKEY 'user_id' ('user_id'),\nKEY 'time' ('time')\n) ENGINE=InnoDB;\n```", "```js\n    <?php\n\n    $server = '';\t\t    // Enter your database server here\n    $username = '';\t\t    // Enter your database username here\n    $password = '';\t\t    // Enter your database password here\n    $database = '';\t    // Enter your database name here\n\n    // Connect to the database\n\n    if (mysql_connect(\n      $server,\n      $username,\n      $password\n    )) {\n      mysql_select_db(\n        $database\n      );\n    } else {\n      header($_SERVER['SERVER_PROTOCOL'] . \n      ' 500 Internal Server Error', true, 500);\n      echo \"Could not connect to the database.\";\n      exit;\n    }\n    ```", "```js\n    <?php\n    // Load our common library file, and fail if it isn't present\n    require_once('lib.php');\n\n    // Check for the existence of longitude and latitude in our POST request\n    // variables; if they're present, continue attempting to save\n    if (isset($_POST['longitude']) && isset($_POST['latitude'])) {\n      // Cast variables to float \n      (never accept unsanitized input!)\n      $longitude = (float) $_POST['longitude'];\n      $latitude = (float) $_POST['latitude'];\n      // For now, let's hard-code the user identifier to \"1\" - \n      we can\n      // use PHP sessions and authentication to set this \n      differently later\n      // on\n      $user = 1;\n      // Set the timestamp from the current system time\n      $time = time();\n      // Put our query together:\n      $query = \"insert into points set 'longitude' = \n      {$longitude}, \n      'latitude' = {$latitude},\n      'user_id' = {$user},\n      'time' = {$time}\";\n      // Run the query, and return an error if it fails\n      if (!($result = mysql_query($query))) {\n        header($_SERVER['SERVER_PROTOCOL'] . \n        ' 500 Internal Server Error', true, 500);\n        echo \"Could not save point.\";\n        exit;\n      }\n\n    }\n    ```", "```js\n    <!doctype html>\n    <html>\n      <head>\n        <title>\n          Location detector\n        </title>\n\n        <!-- We're using jQuery to simplify our JavaScript DOM-\n        handling code -->\n        <script src=\"//code.jquery.com/\n        jquery-1.9.1.min.js\"></script>\n\n        <script language=\"javascript\">\n\n          // This function is called when the Geolocation API \n          successfully\n          // retrieves the user's location\n          function savePosition(point) {\n\n            // Send the retrieved coordinates to \n            callback.php via a POST\n            // request, and then set the page content to \n            \"Location saved\"\n            // once this process is complete \n            (or \"We couldn't save your\n            // location\" if it failed for some reason)\n            $.ajax({\n              url: 'callback.php',\n              type: 'POST',\n              data:   {\n                latitude: point.coords.latitude,\n                longitude: point.coords.longitude\n              },\n              statusCode: {\n                500: function() {\n                  $('#locationpane').html\n                  ('<p>We couldn\\'t save your location.</p>');\n                }\n              }\n            }).done(function() {\n              $('#locationpane').html\n              ('<p>Location saved.</p>');\n            }).fail(function() {\n              $('#locationpane').html\n              ('<p>We couldn\\'t save your location.</p>');\n            });\n\n          }\n\n          // This function is called when there is a problem \n          retrieving\n          // the user's location (but the Geolocation API is \n          supported in\n          // his or her browser)\n          function errorPosition(error) {\n            switch(error.code) {\n\n            // Error code 1: permission to access the user's \n            location\n            // was denied\n            case 1: $('#locationpane').html\n            ('<p>No location was retrieved.</p>');\n            break;\n\n            // Error code 2: the user's location could not be \n            determined\n            case 2: $('#locationpane').html\n            ('<p>We couldn\\'t find you.</p>');\n            break;\n\n            // Error code 3: the Geolocation API timed out\n            case 3: $('#locationpane').html\n            ('<p>We took too long \n            trying to find your location.</p>');\n            break;\n\n          }\n        }\n\n        </script>\n\n      </head>\n      <body>\n\n        <div id=\"locationpane\">\n\n          <p>\n            Waiting for location ...\n          </p>\n\n        </div>\n\n        <!-- We're including the Geolocation API code at the \n        bottom of the page\n        so that page content will have loaded first -->\n        <script language=\"javascript\">\n\n          // First, check if geolocation support is available\n          if (navigator.geolocation) {\n\n            // If it is, attempt to get the current position. \n            Instantiate\n            // the savePosition function if the operation was \n            successful, or\n            // errorPosition if it was not.\n            navigator.geolocation.getCurrentPosition\n            (savePosition, errorPosition);\n\n          } else {\n\n            // If the browser doesn't support the Geolocation \n            API, tell the user.\n            $('#locationpane').html\n            ('<p>No geolocation support is available.</p>');\n\n          }\n\n        </script>\n\n      </body>\n    </html>\n    ```", "```js\nif (navigator.geolocation) { /* The Geolocation API is supported */ }\n```", "```js\nnavigator.geolocation.getCurrentPosition(savePosition, errorPosition);\n```", "```js\nnavigator.geolocation.getCurrentPosition(savePosition, highAccuracyErrorPosition, {enableHighAccuracy: true});\n```", "```js\nfunction highAccuracyErrorPosition(error) {\n\nnavigator.geolocation.getCurrentPosition(savePosition, errorPosition, {enableHighAccuracy: false});\n\n}\n```", "```js\n$query =    \"insert into points set 'longitude' = {$longitude}, \n    'latitude' = {$latitude},\n    'user_id' = {$user},\n    'time' = {$time}\";\n```", "```js\n    <?php\n\n    $server = '';\t\t    // Enter your database server here\n    $username = '';\t\t    // Enter your database username here\n    $password = '';\t\t    // Enter your database password here\n    $database = '';\t    // Enter your database name here\n\n    // Connect to the database server, and then select $database as the database\n    if (mysql_connect\t(\n      $server,\n      $username,\n      $password\n    )) {\n      mysql_select_db(\n        $database\n      );\n    } else {\n      header($_SERVER['SERVER_PROTOCOL'] . \n      ' 500 Internal Server Error', true, 500);\n      echo \"Could not connect to the database.\";\n      exit;\n    }\n\n    /**\n    Retrieve all the stored locations in the database\n    @return array\n    */\n    function getPreviousLocations($user_id) {\n\n      // Initialize the array that we'll return\n      $points = array();\n\n      // It's always important to validate input, \n      and particularly when\n      // we're using it in the context of a database query. \n      Here we make\n      // sure $user_id is an integer.\n      $user_id = (int) $user_id;\n\n      // SQL query to simply return all points from our \n      database - over time\n      // you may wish to add a limit clause\n      $query = \"select 'latitude', 'longitude', 'time' from \n      'points' where user_id = $user_id order by 'time' desc\";\n\n      // If we have points in the database, add them to the \n      $points array\n      if ($result = mysql_query($query)) {\n        while ($row = mysql_fetch_object($result)) {\n          $points[] = $row;\n        }\n      } else {\n      echo mysql_error();\n    }\n    // Finally, return the $points array\n    return $points;\n\n    }\n    ```", "```js\n    <?php \n\n    // Load our common library file, and fail if it isn't present\n    require_once('lib.php');\n\n    ?>\n    <!doctype html>\n    <html>\n      <head>\n        <title>\n          Location detector\n        </title>\n\n        <!-- We're using jQuery to simplify our JavaScript \n        DOM-handling code -->\n        <script type=\"text/javascript\" \n        src=\"img/\"></script>\n\n          <!-- We're using the Google Maps API v3; \n          note that we need to tell\n          Google we're using a sensor for geolocation -->\n          <script type=\"text/javascript\" \n          src=\"//maps.googleapis.com/maps/api/js?v=3.\n          exp&sensor=true\"></script>\n\n          <script type=\"text/javascript\">\n\n            // This function is called when the Geolocation API \n            successfully\n            // retrieves the user's location\n            function savePosition(point) {\n\n              // Save the current latitude and longitude as \n              properties\n              // on the window object\n              window.latitude = point.coords.latitude;\n              window.longitude = point.coords.longitude;\n\n              // Send the retrieved coordinates to callback.php \n              via a POST\n              // request, and then set the page content to \n              \"Location saved\"\n              // once this process is complete \n              (or \"We couldn't save your\n              // location\" if it failed for some reason)\n              $.ajax({\n                url: 'callback.php',\n                type: 'POST',\n                data:   {\n                  latitude: window.latitude,\n                  longitude: window.longitude\n                },\n                statusCode: {\n                  500: function() {\n                  $('#location_pane').html\n                  ('<p>We couldn\\'t save your location.</p>');\n                }\n              }\n\n            }).done(function() {\n              // Let the user know the location's been \n              saved to the database\n              $('#location_pane').html\n              ('<p>Location saved.</p>');\n\n              // Center the map on the user's current location\n              var currentLocation = \n              new google.maps.LatLng(window.latitude, \n              window.longitude);\n              window.googleMap.setCenter(currentLocation);\n\n              // Create a marker at the user's current location\n              var marker = new google.maps.Marker({\n                position: currentLocation,\n                map: window.googleMap,\n                title: 'Current location'\n              });\n            }).fail(function() {\n            $('#location_pane').html\n            ('<p>We couldn\\'t save your location.</p>');\n          });\n\n        }\n\n        // This function is called when there is a problem \n        retrieving\n        // the user's location (but the Geolocation API is \n        supported in\n        // his or her browser)\n        function errorPosition(error) {\n          switch(error.code) {\n\n          // Error code 1: permission to access the user's \n          location\n          // was denied\n          case 1: $('#location_pane').html('<p>No location was \n          retrieved.</p>');\n          break;\n\n          // Error code 2: the user's location could not be \n          determined\n          case 2: $('#location_pane').html\n          ('<p>We couldn\\'t find \n          you.</p>');\n          break;\n\n          // Error code 3: the Geolocation API timed out\n          case 3: $('#location_pane').html\n          ('<p>We took too long trying to find your \n          location.</p>');\n          break;\n\n        }\n      }\n\n      // This function is called when there is a problem \n      retrieving\n      // The high-accuracy position. Instead of failing \n      outright, it\n      // attempts to retrieve the low-accuracy position, \n      telling the\n      // getCurrentPosition function to call errorPosition if \n      there is\n      // an error this time.\n      function highAccuracyErrorPosition(error) {\n\n        navigator.geolocation.getCurrentPosition(savePosition, \n        errorPosition, {enableHighAccuracy: false});\n\n        }\n\n        </script>\n\n        </head>\n        <body>\n\n          <div id=\"location_pane\">\n\n            <p>\n              Waiting for location ...\n            </p>\n\n          </div>\n          <div id=\"map_pane\" style=\"width: 500px; \n          height: 500px\"></div>\n\n          <!-- We're including the Geolocation API code at the \n          bottom of the page\n          so that page content will have loaded first -->\n          <script language=\"javascript\">\n\n          // Set initial viewing options for the map\n          var mapOptions = {\n            zoom: 15,\n            mapTypeId: google.maps.MapTypeId.HYBRID\n          };\n\n          // Initialize the map as a googleMap property on \n          the window object\n          window.googleMap = \n          new google.maps.Map\n          (document.getElementById('map_pane'), mapOptions);\n\n          // Load any previous points into a JSON array, \n          which itself is written\n          // to the page using PHP. We're hardcoding the user \n          ID to 1, as in\n          // callback.php.\n          var jsonPoints = \n          <?=json_encode(getPreviousLocations(1));?>;\n\n          // If jsonPoints isn't empty, \n          iterate through and create new map points\n          // for each geolocation point\n          if (jsonPoints.length > 0) {\n            window.points = new Array();\n            jsonPoints.forEach(function(point) {\n              window.points.push(new google.maps.Marker({\n                position: new google.maps.LatLng\n                (point.latitude, point.longitude),\n                map: window.googleMap\n              }))\n            });\n          }\n\n          // First, check if geolocation support is available\n          if (navigator.geolocation) {\n\n            // If it is, attempt to get the current position. \n            Instantiate\n            // the savePosition function if the operation was \n            successful, or\n            // errorPosition if it was not.\n            navigator.geolocation.getCurrentPosition\n            (savePosition, highAccuracyErrorPosition, \n            {enableHighAccuracy: true});\n\n          } else {\n\n            // If the browser doesn't support \n            the Geolocation API, tell the user.\n            $('#location_pane').html\n            ('<p>No geolocation support is available.</p>');\n\n          }\n\n        </script>\n\n      </body>\n    </html>\n    ```", "```js\n$query = \"select 'latitude', 'longitude', 'time' from 'points' where user_id = $user_id order by 'time' asc\";\n```", "```js\n<?php \n// Load our common library file, and fail if it isn't present\nrequire_once('lib.php');\n?>\n```", "```js\n<script type=\"text/javascript\" src=\"img/js?v=3.exp&sensor=true\"></script>\n```", "```js\n// Set initial viewing options for the map\nvar mapOptions = {\n  zoom: 15,\n  mapTypeId: google.maps.MapTypeId.HYBRID\n};\n```", "```js\nwindow.googleMap = new google.maps.Map(document.getElementById('map_pane'), mapOptions);\n```", "```js\nvar jsonPoints = <?=json_encode(getPreviousLocations(1));?>;\n```", "```js\nvar jsonPoints = [{\"latitude\":\"37.7595\",\"longitude\":\"-122.463\",\"time\":\"1362975429\"}];\n```", "```js\nif (jsonPoints.length > 0) {\n  window.points = new Array();\n  jsonPoints.forEach(function(point) {\n    window.points.push(new google.maps.Marker({\n      position: new google.maps.LatLng(point.latitude, \n      point.longitude),\n      map: window.googleMap\n    }))\n  });\n}  \n```", "```js\nvar currentLocation = new google.maps.LatLng(window.latitude, window.longitude);\n```", "```js\nwindow.googleMap.setCenter(currentLocation);\n```", "```js\nvar marker = new google.maps.Marker({\n  position: currentLocation,\n  map: window.googleMap,\n  title: 'Current location'\n});\n```", "```js\n    <?php \n\n    // Load our common library file, and fail if it isn't present\n    require_once('lib.php');\n\n    // PHP's date function requires that the timezone is set. As I'm located on\n    // America's west coast, I'm setting this to America/Los_Angeles. You can\n    // also set this in your php.ini.\n    date_default_timezone_set('America/Los_Angeles');\n\n    // Create a new XML file using PHP's DOM extension.\n    $feed = new DOMDocument('1.0','UTF-8');\n    $feed->formatOutput = true;\n\n    // Create a root node for the XML document.\n    $rootNode = $feed->appendChild($feed->createElementNS('http://earth.google.com/kml/2.2', 'kml'));\n\n    // Create a document node inside the root node.\n    $documentNode = $rootNode->appendChild($feed->createElement('Document'));\n    $documentNameNode = $documentNode->appendChild($feed->createElement('name','Location detector feed'));\n\n    // Attempt to retrieve previous map points - and if they exist, iterate\n    // through them. Note that we're hardcoding $user_id to 1; in more complex\n    // implementations with user management, we might get $user_id from the\n    // current user session.\n    if ($points = getPreviousLocations(1)) {\n      foreach($points as $point) {\n        // Each place is stored inside a Placemark tag\n        $placeNode = $documentNode->appendChild\n        ($feed->createElement('Placemark'));\n        // We're going to use the timestamp of the saved \n        // location as its title\n        $nameNode = $placeNode->appendChild\n        ($feed->createElement('name',date('r',$point->time)));\n        // The actual coordinates are stored inside a Point tag\n        $pointNode = $placeNode->appendChild\n        ($feed->createElement('Point'));\n        // Note that KML coordinates are longitude \n        // then latitude!\n        $coordinatesNode = $pointNode->appendChild\n        ($feed->createElement('coordinates',\n        $point->longitude . ',' . $point->latitude));\n        // Each place also has an actual TimeStamp tag\n        $timeNode = $placeNode->appendChild\n        ($feed->createElement('TimeStamp', date('c',$point->time)));\n      }\n    }\n\n    // Make sure browsers know to render the feed as XML\n    header('Content-type: text/xml');\n\n    // Write the feed content to the page\n    echo $feed->saveXML();\n    ```", "```js\nMon, 11 Mar 2013 19:30:00 -0700\n```", "```js\n$feed = new DOMDocument('1.0','UTF-8');\n```", "```js\n$rootNode = $feed->appendChild($feed->createElementNS('http://earth.google.com/kml/2.2', 'kml'));\n```", "```js\n$documentNode = $rootNode->appendChild($feed->createElement('Document'));\n```", "```js\nheader('Content-type: text/xml');\n```", "```js\necho $feed->saveXML();\n```", "```js\nwindow.kmlLayer = new google.maps.KmlLayer('http://your/kml/feed.php');\nwindow.kmlLayer.setMap(window.googleMap);\n```", "```js\n    <?php \n    // Load our common library file, and fail if it isn't present\n    require_once('lib.php');\n\n    ?>\n    <!doctype html>\n    <html>\n    <head>\n    <title>\n    Continuous location detector\n    </title>\n\n    <script type=\"text/javascript\" src=\"img/\"></script>\n      <script type=\"text/javascript\" \n      src=\"//maps.googleapis.com/maps/api/\n      js?v=3.exp&sensor=true\"></script>\n\n    <script language=\"javascript\">\n    ```", "```js\n    function savePosition(point) {\n\n      // Save the current latitude and longitude as properties\n      // on the window object\n      window.latitude = point.coords.latitude;\n      window.longitude = point.coords.longitude;\n\n      // Send the retrieved coordinates to \n      callback.php via a POST\n      // request, and then set the page \n      content to \"Location saved\"\n      // once this process is complete \n      (or \"We couldn't save your\n      // location\" if it failed for some reason)\n      $.ajax({\n        url: 'callback.php',\n        type: 'POST',\n        data:   {\n          latitude: window.latitude,\n          longitude: window.longitude\n        },\n        statusCode: {\n          500: function() {\n            $('#location_pane').html\n            ('<p>We couldn\\'t save your location.</p>');\n          }\n        }\n      }).done(function() {\n      // Let the user know the location's \n      been saved to the database\n      $('#location_pane').html('<p>Location saved.</p>');\n      // Center the map on the user's current location\n      var currentLocation = new \n      google.maps.LatLng(window.latitude, window.longitude);\n      window.googleMap.setCenter(currentLocation);\n      // Create a marker at the user's current \n      location and save it\n      // to our array of map points\n      window.geopath.push(new google.maps.LatLng(window.latitude, window.longitude));\n    }).fail(function() {\n    $('#location_pane').html('<p>We couldn\\'t save your location.</p>');\n    });\n    }\n    ```", "```js\n    function errorPosition(error) {\n      switch(error.code) {\n        // Error code 1: permission to access the user's \n        location\n        // was denied\n        case 1: $('#location_pane').html('<p>No location was \n        retrieved.</p>');\n        break;\n        // Error code 2: the user's location could not be \n        determined\n        case 2: $('#location_pane').html('<p>We couldn\\'t find \n        you.</p>');\n        break;\n        // Error code 3: the Geolocation API timed out\n        case 3: $('#location_pane').html('<p>We took too long \n        trying to find your location.</p>');\n        break;\n      }\n    }\n    ```", "```js\n    function stopWatching() {\n      if (navigator.geolocation) {\n        navigator.geolocation.clearWatch\n        (window.watchLocationID);\n        $('#watchingButton').hide();\n      }\n    }\n    ```", "```js\n    </script>\n    </head>\n      <body>\n        <div id=\"location_pane\">\n        <p>\n          Waiting for location ...\n        </p>\n        </div>\n        <p>\n          <button onclick=\"stopWatching()\" \n          id=\"watchingButton\">Stop watching position</button>\n        </p>\n          <div id=\"map_pane\" style=\"width: 500px; \n          height: 500px\"></div>\n          <!-- We're including the Geolocation API code \n          at the bottom of the page\n          so that page content will have loaded first -->\n          <script language=\"javascript\">\n          // Set initial viewing options for the map\n          var mapOptions = {\n            zoom: 15,\n            mapTypeId: google.maps.MapTypeId.HYBRID\n          };\n\n          // Initialize the map as a googleMap property \n          on the window object\n          window.googleMap = new \n          google.maps.Map(document.getElementById('map_pane'), \n          mapOptions);\n          // Load any previous points into a JSON array, \n          which itself is written\n          // to the page using PHP. We're hardcoding \n          the user ID to 1, as in\n          // callback.php.\n          var jsonPoints = \n          <?=json_encode(getPreviousLocations(1));?>;\n          window.polyLine = new google.maps.Polyline({\n          strokeColor: '#ff0000',\n          strokeOpacity: 1.0,\n          strokeWeight: 3\n        });\n          window.polyLine.setMap(window.googleMap);\n          window.geopath = window.polyLine.getPath();\n\n          // If jsonPoints isn't empty, iterate through and \n          create new map points\n          // for each geolocation point\n          if (jsonPoints.length > 0) {\n            jsonPoints.forEach(function(point) {\n              window.geopath.push(new google.maps.LatLng\n              (point.latitude, point.longitude))\n            });\n          }\n          // First, check if geolocation support is available\n          if (navigator.geolocation) {\n            // If Geolocation API support is available:\n            // Attempt to get the current position, and \n            // watch the user's location; \n            instantiate the savePosition \n            // function if the location was saved, \n            or errorPosition if \n            // it was not. Note that we don't ever want \n            low-accuracy\n            // location measurements in this context.\n            window.watchLocationID = \n            navigator.geolocation.watchPosition(savePosition, \n            errorPosition, {enableHighAccuracy: true});\n          } else {\n            // If the browser doesn't support the \n            Geolocation API, tell the user.\n            $('#location_pane').html\n            ('<p>No geolocation support is available.</p>');\n          }\n        </script>\n      </body>\n    </html>\n    ```", "```js\nwindow.watchLocationID = navigator.geolocation.watchPosition(savePosition, errorPosition, {enableHighAccuracy: true});\n```", "```js\nnavigator.geolocation.clearWatch(window.watchLocationID);\n```", "```js\nwindow.points.push(new google.maps.Marker({\n  position: currentLocation,\n  map: window.googleMap,\n  title: 'Detected location'\n}));\n```", "```js\nwindow.polyLine = new google.maps.Polyline({\n  strokeColor: '#ff0000',\n  strokeOpacity: 1.0,\n  strokeWeight: 3\n});\n```", "```js\nwindow.polyLine.setMap(window.googleMap);\n```", "```js\nwindow.geopath = window.polyLine.getPath();\n```", "```js\n// If jsonPoints isn't empty, iterate through and create new map \n// points for each geolocation point\nif (jsonPoints.length > 0) {\n  jsonPoints.forEach(function(point) {\n    window.geopath.push(new google.maps.LatLng\n    (\n      point.latitude, point.longitude\n    ))\n  });\n}\n```", "```js\n// Create a marker at the user's current location and save it\n// to our array of map points\nwindow.geopath.push(new google.maps.LatLng(window.latitude, window.longitude));\n```"]