["```js\n<button id=\"billButton\"\n    onclick=\"billTheUser(some, sales, data)\">Bill me\n      </button>\n```", "```js\nfunction billTheUser(some, sales, data) {\n  window.alert(\"Billing the user...\");\n  // actually bill the user\n}\n```", "```js\n<button\n  id=\"billButton\"\n  onclick=\"billTheUser(some, sales, data)\">Bill me\n</button>\n<b>WARNING: PRESS ONLY ONCE, DO NOT PRESS AGAIN!!</b>\n```", "```js\nlet clicked = false;\n.\n.\n.\nfunction billTheUser(some, sales, data) {\n  if (!clicked) {\n    clicked = true;\n    window.alert(\"Billing the user...\");\n    // actually bill the user\n  }\n}\n```", "```js\nfunction billTheUser(some, sales, data) {\n  document\n    .getElementById(\"billButton\")\n    .onclick = null;\n  window.alert(\"Billing the user...\");\n  // actually bill the user\n}\n```", "```js\n<button\n  id=\"billButton\"\n  onclick=\"billTheUser('billButton', some, sales, data)\"\n>Bill me\n</button>\n```", "```js\nfunction billTheUser(buttonId, some, sales, data) {\n  document.getElementById(buttonId).onclick = null;\n  window.alert(\"Billing the user...\");\n  // actually bill the user\n}\n```", "```js\nfunction alreadyBilled() {\n  window.alert(\"Your billing process is running; don't\n    click, please.\");\n}\n```", "```js\nfunction billTheUser(some, sales, data) {\n  document\n    .getElementById(\"billButton\")\n    .onclick = alreadyBilled;\n  window.alert(\"Billing the user...\");\n  // actually bill the user\n}\n```", "```js\nfunction billTheUser(some, sales, data) {\n  document\n    .getElementById(\"billButton\")\n    .setAttribute(\"disabled\", \"true\");\n  window.alert(\"Billing the user...\");\n  // actually bill the user\n}\n```", "```js\nfunction billTheUser(some, sales, data) {\n  billTheUser = function() {};\n  window.alert(\"Billing the user...\");\n  // actually bill the user\n}\n```", "```js\nvar billTheUser = (clicked => {\n  return (some, sales, data) => {\n    if (!clicked) {\n      clicked = true;\n      window.alert(\"Billing the user...\");\n      // actually bill the user\n    }\n  };\n})(false);\n```", "```js\n// once.ts\nconst once = <FNType extends (...args: any[]) => any>(\n  fn: FNType\n) => {\n  let done = false;\n  return ((...args: Parameters<FNType>) => {\n    if (!done) {\n      done = true;\n      return fn(...args);\n    }\n  }) as FNType;\n};\n```", "```js\n// once_JS.js\nconst once = (fn) => {\n  let done = false;\n  return (...args) => {\n    if (!done) {\n      done = true;\n      return fn(...args);\n    }\n  };\n};\n```", "```js\nconst billOnce = once(billTheUser);\n```", "```js\n<button id=\"billButton\"\n  onclick=\"billOnce(some, sales, data)\">Bill me\n</button>;\n```", "```js\n// once.manual.ts\nconst squeak = a => console.log(a, \" squeak!!\");\nsqueak(\"original\"); // \"original squeak!!\"\nsqueak(\"original\"); // \"original squeak!!\"\nsqueak(\"original\"); // \"original squeak!!\"\n```", "```js\n// continued...\nconst squeakOnce = once(squeak);\nsqueakOnce(\"only once\"); // \"only once squeak!!\" squeakOnce(\"only once\"); // no output\nsqueakOnce(\"only once\"); // no output\n```", "```js\n// once.test.ts\nimport once } from \"./once\";\ndescribe(\"once\", () => {\n  it(\"without 'once', a function always runs\", () => {\n    const myFn = jest.fn();\n    myFn();\n    myFn();\n    myFn();\n    expect(myFn).toHaveBeenCalledTimes(3);\n  });\n  it(\"with 'once', a function runs one time\", () => {\n    const myFn = jest.fn();\n    const onceFn = jest.fn(once(myFn));\n    onceFn();\n    onceFn();\n    onceFn();\n    expect(onceFn).toHaveBeenCalledTimes(3);\n    expect(myFn).toHaveBeenCalledTimes(1);\n  });\n});\n```", "```js\n// onceAndAfter.ts\nconst onceAndAfter = <\n  FNType extends (...args: any[]) => any\n>(\n  f: FNType,\n  g: FNType\n) => {\n  let done = false;\n  return ((...args: Parameters<FNType>) => {\n    if (!done) {\n      done = true;\n      return f(...args);\n    } else {\n      return g(...args);\n    }\n  }) as FNType;\n};\n```", "```js\n// onceAndAfter.manual.ts\nimport { onceAndAfter } from \"./onceAndAfter\";\nconst squeak = (x: string) => console.log(x, \"squeak!!\");\nconst creak = (x: string) => console.log(x, \"creak!!\");\nconst makeSound = onceAndAfter(squeak, creak);\nmakeSound(\"door\"); // \"door squeak!!\"\nmakeSound(\"door\"); // \"door creak!!\"\nmakeSound(\"door\"); // \"door creak!!\"\nmakeSound(\"door\"); // \"door creak!!\"\n```", "```js\n// onceAndAfter.test.ts\nimport { onceAndAfter } from \"./onceAndAfter\";\ndescribe(\"onceAndAfter\", () => {\n  it(\"calls the 1st function once & the 2nd after\", () => {\n    const func1 = jest.fn();\n    const func2 = jest.fn();\n    const testFn = jest.fn(onceAndAfter(func1, func2));\n    testFn();\n    testFn();\n    testFn();\n    testFn();\n    expect(testFn).toHaveBeenCalledTimes(4);\n    expect(func1).toHaveBeenCalledTimes(1);\n    expect(func2).toHaveBeenCalledTimes(3);\n  });\n});\n```", "```js\nconst sayA = () => console.log(\"A\");\nconst sayB = () => console.log(\"B\");\nconst alt = alternator(sayA, sayB);\nalt(); // A\nalt(); // B\nalt(); // A\nalt(); // B\nalt(); // A\nalt(); // B\n```"]