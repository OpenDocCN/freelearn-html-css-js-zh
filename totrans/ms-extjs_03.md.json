["```js\nExt.define('Packt.view.login.Login', { // #1\n    extend: 'Ext.window.Window',       // #2\n\n    xtype: 'login-dialog',             // #3\n\n    autoShow: true,                    // #4\n    height: 170,                       // #5\n    width: 360,                        \n    layout: {\n        type: 'fit'                    // #7\n    },\n    iconCls: 'fa fa-key fa-lg',        // #8\n    title: 'Login',                    // #9\n    closeAction: 'hide',               // #10\n    closable: false,                   // #11\n    draggable: false,                  // #12\n    resizable: false                   // #13\n});\n```", "```js\n    Ext.create('Packt.view.login.Login');\n    ```", "```js\n    Ext.create('widget.login-dialog');\n    ```", "```js\n    Ext.widget('login-dialog');\n    ```", "```js\n    items: [\n      {\n        xtype: 'login-dialog'\n      }\n    ]\n    ```", "```js\n    new Packt.view.login.Login();\n    ```", "```js\nExt.create('Packt.view.login.Login');\n```", "```js\nExt.create('Packt.view.login.Login').show();\n```", "```js\nitems: [\n{\n    xtype: 'form',          //#14\n    bodyPadding: 15,        //#15\n    defaults: {             //#16\n        xtype: 'textfield', //#17\n        anchor: '100%',     //#18\n        labelWidth: 60      //#19\n    },\n    items: [\n        {\n            name: 'user',\n            fieldLabel: 'User'\n        },\n        {\n            inputType: 'password', //#20\n            name: 'password',\n            fieldLabel: 'Password'\n        }\n    ]\n]\n```", "```js\nallowBlank: false, // #21\nvtype: 'alphanum', // #22\nminLength: 3,      // #23\nmsgTarget: 'under' // #24\n```", "```js\nname: 'user', \nfieldLabel: 'User',\nmaxLength: 25\n\n```", "```js\ninputType: 'password', \nname: 'password',\nfieldLabel: 'Password',\nmaxLength: 15\n\n```", "```js\nExt.apply(Ext.form.field.VTypes, {\n    customPass: function(val, field) {\n        return /^((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{6,20})/.test(val);\n    },\n    customPassText: 'Not a valid password.  Length must be at least 6 characters and maximum of 20\\. Password must contain one digit, one letter lowercase, one letter uppercase, one special symbol @#$% and between 6 and 20 characters.'\n});\n```", "```js\n\"js\": [\n    {\n        \"path\": \"app.js\",\n        \"bundle\": true\n    }\n],\n```", "```js\n\"js\": [\n    {\n        \"path\": \"app.js\",\n        \"bundle\": true\n    },\n    {\n \"path\": \"app/CustomVTypes.js\",\n \"includeInBundle\": true\n }\n], \n```", "```js\nvtype: 'customPass',\nmsgTarget: 'side'\n```", "```js\ndockedItems: [\n    {\n        xtype: 'toolbar',\n        dock: 'bottom',\n        items: [\n                xtype: 'tbfill' //#25\n            },\n            {\n                xtype: 'button', //#26\n                iconCls: 'fa fa-times fa-lg',\n                text: 'Cancel'\n            },\n            { \n                xtype: 'button', //#27\n                formBind: true,  //#28\n                iconCls: 'fa fa-sign-in fa-lg',\n                text: 'Submit'\n            }\n        ]\n    }\n]\n```", "```js\nviews: [\n    'login.Login'\n],\n```", "```js\nme.splashscreen.next().fadeOut({\n    duration: 1000,\n    remove:true,\n    listeners: {\n       afteranimate: function(el, startTime, eOpts ){\n Ext.widget('login-dialog'); //#1\n        }\n    }\n});\n```", "```js\n$fa-font-path: \"../resources/fonts\" !default;\n```", "```js\n@import \"fontAwesome/font-awesome\";\n```", "```js\nExt.define('Packt.view.login.LoginController', { // #1\n    extend: 'Ext.app.ViewController',            // #2\n    alias: 'controller.login',                   // #3 \n\n    onTextFieldSpecialKey: function(field, e, options){ }, // #4\n\n    onTextFieldKeyPress: function(field, e, options){ }, // #5\n\n    onButtonClickCancel: function(button, e, options){ }, // #6\n\n    onButtonClickSubmit: function(button, e, options){ }, // #7\n\n    doLogin: function() { }, // #8\n\n    onLoginFailure: function(form, action) { }, // #9\n\n    onLoginSuccess: function(form, action) { } // #10\n});\n```", "```js\ncontroller: 'login',\n```", "```js\nrequires: [\n    'Packt.view.login.LoginController'\n],\n```", "```js\nxtype: 'button',\niconCls: 'fa fa-times fa-lg',\ntext: 'Cancel',\nlisteners: {    click: 'onButtonClickCancel'}\n\n```", "```js\nonButtonClickCancel: function(button, e, options){}\n```", "```js\nxtype: 'button',\nformBind: true,\niconCls: 'fa fa-sign-in fa-lg',\ntext: 'Submit',\nlisteners: {    click: 'onButtonClickSubmit'}\n\n```", "```js\nonButtonClickCancel: function(button, e, options){\n    console.log('login cancel'); // #1\n},\n\nonButtonClickSubmit: function(button, e, options){\n    console.log('login submit');  // #2          \n},\n```", "```js\nxtype: 'form',\nreference: 'form',\n\n```", "```js\nonButtonClickCancel: function(button, e, options){\n    this.lookupReference('form').reset();\n},\n```", "```js\nonButtonClickSubmit: function(button, e, options){\n    var me = this;\n    if (me.lookupReference('form').isValid()){ // #1\n        me.doLogin();              // #2\n    }\n},\n```", "```js\ndoLogin: function() {\n    var me = this,\n        form = me.lookupReference('form');\n\n    form.submit({\n        clientValidation: true,        // #3\n        url: 'php/security/login.php', // #4\n        scope: me,         // #5\n        success: 'onLoginSuccess',     // #6\n        failure: 'onLoginFailure'      // #7\n    });\n},\n```", "```js\n    CREATE  TABLE IF NOT EXISTS `sakila`.`Groups` (\n      `id` INT NOT NULL AUTO_INCREMENT ,\n      `name` VARCHAR(45) NOT NULL ,\n      PRIMARY KEY (`id`) )\n    ENGINE = InnoDB;\n    ```", "```js\n    CREATE  TABLE IF NOT EXISTS `sakila`.`User` (\n      `id` INT NOT NULL AUTO_INCREMENT ,\n      `name` VARCHAR(100) NOT NULL ,\n      `userName` VARCHAR(20) NOT NULL ,\n      `password` VARCHAR(100) NOT NULL ,\n      `email` VARCHAR(100) NOT NULL ,\n      `picture` VARCHAR(100) NULL ,\n      `Group_id` INT NOT NULL ,\n      PRIMARY KEY (`id`, `Group_id`) ,\n      UNIQUE INDEX `userName_UNIQUE` (`userName` ASC) ,\n      INDEX `fk_User_Group1_idx` (`Group_id` ASC) ,\n      CONSTRAINT `fk_User_Group1`\n        FOREIGN KEY (`Group_id` )\n        REFERENCES `sakila`.`Groups` (`id` )\n        ON DELETE NO ACTION\n        ON UPDATE NO ACTION)\n    ENGINE = InnoDB;\n    ```", "```js\n    INSERT INTO `sakila`.`Groups` (`name`) VALUES ('admin');\n    INSERT INTO `sakila`.`User` (`name`, `userName`, `password`, `email`, `Group_id`) \n    VALUES ('Loiane Groner', 'loiane', '$2a$10$2a4e8803c91cc5edca222evoNPfhdRyGEG9RZcg7.qGqTjuCgXKda', 'me@loiane.com', '1');\n    ```", "```js\n<?php \n$server = \"127.0.0.1\";\n$user = \"root\";\n$pass = \"root\";\n$dbName = \"sakila\";\n\n$mysqli = new mysqli($server, $user, $pass, $dbName);\n\n/* check connection */\nif ($mysqli->connect_errno) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n?>\n```", "```js\nrequire(\"../db/db.php\"); // #1\nrequire(\"PassHash.php\"); // #2\n\nsession_start();         // #3\n\n$userName = $_POST['user']; // #4\n$pass = $_POST['password']; // #5\n\n$userName = stripslashes($userName); // #6\n$pass = stripslashes($pass);         // #7\n\n$userName = $mysqli->real_escape_string($userName); // #8\n$sql = \"SELECT * FROM USER WHERE userName='$userName'\"; // #9\n```", "```js\nif ($resultDb = $mysqli->query($sql)) { //#10\n\n  $count = $resultDb->num_rows; //#11\n\n  if($count==1){ //#12\n\n        $record = $resultDb->fetch_assoc(); //#13\n\n         //#14  \n        if (PassHash::check_password($record['password'],$pass)){\n            $_SESSION['authenticated'] = \"yes\"; //#15\n            $_SESSION['username'] = $userName; //#16\n\n            $result['success'] = true; //#17\n            $result['msg'] = 'User authenticated!'; //#18\n        } else{\n            $result['success'] = false; //#19\n            $result['msg'] = 'Incorrect password.'; //#20\n        }\n  } else {\n    $result['success'] = false; //#21\n    $result['msg'] = 'Incorrect user or password.'; //#22\n  }\n  $resultDb->close(); //#23\n}\n```", "```js\n$mysqli->close(); // #23\n\necho json_encode($result); // #24\n```", "```js\nonLoginSuccess: function(form, action) {\n    this.getView().close();             //#1\n    Ext.create('Packt.view.main.Main'); //#2\n}\n```", "```js\nonLoginFailure: function(form, action) {\n\n  var result = Ext.JSON.decode(action.response.responseText, true); //#3\n\n  if (!result){ //#4\n      result = {};\n      result.success = false;\n      result.msg = action.response.responseText;\n  }\n\n  switch (action.failureType) {\n      case Ext.form.action.Action.CLIENT_INVALID:  //#5\n          Ext.Msg.show({\n            title:'Error!',\n            msg: 'Form fields may not be submitted with invalid values',\n            icon: Ext.Msg.ERROR,\n            buttons: Ext.Msg.OK\n        });\n      break;\n      case Ext.form.action.Action.CONNECT_FAILURE:  //#6\n        Ext.Msg.show({\n            title:'Error!',\n            msg: 'Form fields may not be submitted with invalid values',\n            icon: Ext.Msg.ERROR,\n            buttons: Ext.Msg.OK\n        });\n         break;\n      case Ext.form.action.Action.SERVER_INVALID:  //#7\n          Ext.Msg.show({\n            title:'Error!',\n            msg: result.msg, //#8\n            icon: Ext.Msg.ERROR,\n            buttons: Ext.Msg.OK\n        });\n  }\n},\n```", "```js\nExt.define('Packt.util.Util', {\n\n    statics : { //#1\n\n        decodeJSON : function (text) { //#2\n            var result = Ext.JSON.decode(text, true);\n            if (!result){\n                result = {};\n                result.success = false;\n                result.msg = text;\n            }\n\n            return result;\n        },\n\n        showErrorMsg: function (text) { //#3\n            Ext.Msg.show({\n                title:'Error!',\n                msg: text,\n                icon: Ext.Msg.ERROR,\n                buttons: Ext.Msg.OK\n            });\n        }\n    }\n});\n```", "```js\nonLoginFailure: function(form, action) {\n\n    var result = Packt.util.Util.decodeJSON(action.response.responseText);\n\n    switch (action.failureType) {\n        case Ext.form.action.Action.CLIENT_INVALID:\n            Packt.util.Util.showErrorMsg('Form fields may not be submitted with invalid values');\n            break;\n        case Ext.form.action.Action.CONNECT_FAILURE:\n       Packt.util.Util.showErrorMsg(action.response.responseText);\n            break;\n        case Ext.form.action.Action.SERVER_INVALID:\n            Packt.util.Util.showErrorMsg(result.msg);\n    }\n}, \n```", "```js\nrequires: [\n    'Packt.util.Util'\n],\n```", "```js\nthis.getView().mask('Authenticating... Please wait...');\n```", "```js\nthis.getView().unmask();\n```", "```js\nlisteners: {\n    specialKey: 'onTextFieldSpecialKey'\n}\n```", "```js\nonTextFieldSpecialKey: function(field, e, options){\n    if (e.getKey() === e.ENTER) {\n        this.doLogin();\n    }\n},\n```", "```js\nExt.tip.QuickTipManager.init();\n```", "```js\nid: 'password',\nenableKeyEvents: true,\nlisteners: {\n    keypress: 'onTextFieldKeyPress'\n}\n```", "```js\nExt.define('Packt.view.login.CapsLockTooltip', {\n    extend: 'Ext.tip.QuickTip',\n\n    xtype: 'capslocktooltip',\n\n    target: 'password',\n    anchor: 'top',\n    anchorOffset: 0,\n    width: 300,\n    dismissDelay: 0,\n    autoHide: false,\n    title: '<div class=\"fa fa-exclamation-triangle\"> Caps Lock is On</div>',\n    html: '<div>Having Caps Lock on may cause you to enter ' +\n        'your password incorrectly.</div><br/>' +\n        '<div>You should press Caps Lock to turn it off ' +\n        'before entering your password.</div>'\n});\n```", "```js\nrequires: [\n 'Packt.view.login.CapsLockTooltip',\n    'Packt.util.Util'\n],\n```", "```js\nonTextFieldKeyPress: function(field, e, options){\n\n    var charCode = e.getCharCode(),  \n        me = this;\n\n    if((e.shiftKey && charCode >= 97 && charCode <= 122) || //#2\n        (!e.shiftKey && charCode >= 65 && charCode <= 90)){\n\n        if(me.capslockTooltip === undefined){                 //#3\n          me.capslockTooltip = Ext.widget('capslocktooltip'); //#4\n        }\n\n        me.capslockTooltip.show(); //#5\n\n    } else {\n\n        if(me.capslockTooltip !== undefined){ //#6\n            me.capslockTooltip.hide();        //#7\n        }\n    }\n},\n```"]