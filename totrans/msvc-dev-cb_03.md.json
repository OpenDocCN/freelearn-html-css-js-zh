["```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '1.5.9.RELEASE'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\npackage com.packtpub.microservices.ch03.message;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch03.message.models;\n\npublic class Message {\n\n    private String toUser;\n    private String fromUser;\n    private String body;\n\n    public Message() {}\n\n    public Message(String toUser, String fromUser, String body) {\n        this.toUser = toUser;\n        this.fromUser = fromUser;\n        this.body = body;\n    }\n\n    public String getToUser() {\n        return toUser;\n    }\n\n    public String getFromUser() {\n        return fromUser;\n    }\n\n    public String getBody() {\n        return body;\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch03.message.controllers;\n\nimport com.packtpub.microservices.models.Message;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\npublic class MessageController {\n\n    @RequestMapping(\n            path=\"/messages\",\n            method=RequestMethod.POST,\n            produces=\"application/json\")\n    public Message create(@RequestBody Message message) {\n        return message;\n    }\n}\n```", "```js\n$ ./gradlew bootRun\nStarting a Gradle Daemon, 1 busy Daemon could not be reused, use --status for details\n\n> Task :bootRun\n\n . ____ _ __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/ ___)| |_)| | | | | || (_| | ) ) ) )\n ' |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot :: (v1.5.9.RELEASE)\n\n...\n```", "```js\n$ curl -H \"Content-Type: application/json\" -X POST http://localhost:8080/messages -d'{\"toUser\": \"reader\", \"fromUser\": \"paulosman\", \"body\": \"Hello, World\"}'\n\n{\"toUser\":\"reader\",\"fromUser\":\"paulosman\",\"body\":\"Hello, World\"}\n```", "```js\nGET /friendships?username=paulosman&filter=reader\n\n{\n  \"username\": \"paulosman\",\n  \"friendships\": [\n    \"reader\"\n  ]\n}\n```", "```js\npackage com.packtpub.microservices.ch03.message.models;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class UserFriendships {\n    private String username;\n    private List<String> friendships;\n\n    public UserFriendships() {}\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public List<String> getFriendships() {\n        return friendships;\n    }\n\n    public void setFriendships(List<String> friendships) {\n        this.friendships = friendships;\n    }\n}\n```", "```js\nprivate List<String> getFriendsForUser(String username, String filter) {\n    String url = \"http://localhost:4567/friendships?username=\" + username + \"&filter=\" + filter;\n    RestTemplate template = new RestTemplate();\n```", "```js\n    UserFriendships friendships = template.getForObject(url, UserFriendships.class);\n    return friendships.getFriendships();\n}\n```", "```js\n@RequestMapping(\n            path=\"/messages\",\n            method=RequestMethod.POST,\n            produces=\"application/json\")\n    public ResponseEntity<Message> create(@RequestBody Message message) {\n        List<String> friendships = getFriendsForUser(message.getFromUser(), message.getToUser());\n\n        if (friendships.isEmpty())\n            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n\n        URI location = ServletUriComponentsBuilder\n                .fromCurrentRequest().path(\"/{id}\")\n                .buildAndExpand(message.getFromUser()).toUri();\n\n        return ResponseEntity.created(location).build();\n    }\n```", "```js\npackage com.packtpub.microservices.ch03.message.controllers;\n\nimport com.packtpub.microservices.models.Message;\nimport com.packtpub.microservices.models.UserFriendships;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\nimport java.net.URI;\nimport java.util.List;\n\n@RestController\npublic class MessageController {\n\n    @RequestMapping(\n            path=\"/messages\",\n            method=RequestMethod.POST,\n            produces=\"application/json\")\n    public ResponseEntity<Message> create(@RequestBody Message message) {\n        List<String> friendships = getFriendsForUser(message.getFromUser(), message.getToUser());\n\n        if (friendships.isEmpty())\n            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n\n        URI location = ServletUriComponentsBuilder\n                .fromCurrentRequest().path(\"/{id}\")\n                .buildAndExpand(message.getFromUser()).toUri();\n\n        return ResponseEntity.created(location).build();\n    }\n\n    private List<String> getFriendsForUser(String username, String filter) {\n        String url = \"http://localhost:4567/friendships?username=\" + username + \"&filter=\" + filter;\n        RestTemplate template = new RestTemplate();\n        UserFriendships friendships = template.getForObject(url, UserFriendships.class);\n        return friendships.getFriendships();\n    }\n}\n```", "```js\nimport org.springframework.scheduling.annotation.Async;\nimport java.util.concurrent.CompletableFuture;\n\n...\n\n@Async\npublic CompletableFuture<Boolean> isFollowing(String fromUser, String toUser) {\n\n    String url = String.format(\n      \"http://localhost:4567/followings?user=%s&filter=%s\",\n      fromUser, toUser);\n\n    RestTemplate template = new RestTemplate();\n    UserFollowings followings = template.forObject(url, UserFollowings.class);\n\n    return CompletableFuture.completedFuture(\n        followings.getFollowings().isEmpty()\n    );\n}\n```", "```js\n@RequestMapping(\n            path=\"/messages\",\n            method=RequestMethod.POST,\n            produces=\"application/json\")\n    public ResponseEntity<Message> create(@RequestBody Message message) {\n\n    CompletableFuture<Boolean> result1 = isFollowing(message.getFromUser(), message.getToUser());\n    CompletableFuture<Boolean> result2 = isFollowing(message.getToUser(), message.getFromUser());\n\n    CompletableFuture.allOf(result1, result2).join();\n\n    // if both are not true, respond with a 403\n    if (!(result1.get() && result2.get()))\n        ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n\n    ... // proceed\n\n}\n```", "```js\npackage com.packtpub.microservices;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.scheduling.annotation.EnableAsync;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\nimport java.util.concurrent.Executor;\n\n@SpringBootApplication\n@EnableAsync\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args).close();\n    }\n\n    @Bean\n    public Executor asyncExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(2);\n        executor.setMaxPoolSize(2);\n        executor.setQueueCapacity(500);\n        executor.setThreadNamePrefix(\"SocialServiceCall-\");\n        executor.initialize();\n        return executor;\n    }\n\n}\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath group: 'io.spring.gradle', name: 'dependency-management-plugin', version: '0.5.6.RELEASE'\n        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '1.5.9.RELEASE'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\napply plugin: \"io.spring.dependency-management\"\n\nsourceCompatibility = 1.8\n\ndependencyManagement {\n    imports {\n        mavenBom 'org.springframework.cloud:spring-cloud-zookeeper-dependencies:1.1.1.RELEASE'\n    }\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'io.reactivex', name: 'rxjava', version: '1.1.5'\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'\n    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-zookeeper-discovery', version: '1.1.1.RELEASE'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\npackage com.packtpub.microservices.ch03.servicediscovery;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```", "```js\nspring:\n  cloud:\n    zookeeper:\n      connect-string: localhost:2181\n```", "```js\nspring:\n  cloud:\n    zookeeper:\n      connect-string: localhost:2181\n  application:\n    name: users-service\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath group: 'io.spring.gradle', name: 'dependency-management-plugin', version: '0.5.6.RELEASE'\n        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '1.5.9.RELEASE'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\napply plugin: 'io.spring.dependency-management'\n\nsourceCompatibility = 1.8\n\ndependencyManagement {\n imports {\n mavenBom 'org.springframework.cloud:spring-cloud-zookeeper-dependencies:1.1.1.RELEASE'\n    }\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n compile 'io.reactivex:rxjava:1.3.4'\n compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-zookeeper-discovery', version: '1.1.1.RELEASE'\n    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-feign', version: '1.2.5.RELEASE'\n    compile group: 'org.springframework.kafka', name: 'spring-kafka', version: '2.1.1.RELEASE'    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\npackage com.packtpub.microservices.ch03.servicediscovery.clients;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.netflix.feign.EnableFeignClients;\nimport org.springframework.cloud.netflix.feign.FeignClient;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.util.List;\n\n@Configuration\n@EnableFeignClients\n@EnableDiscoveryClient\npublic class UsersClient {\n\n    @Autowired\n    private Client client;\n\n    @FeignClient(\"users-service\")\n    interface Client {\n        @RequestMapping(path = \"/followings/{userId}\", method = RequestMethod.GET)\n        @ResponseBody\n        List<String> getFollowings(@PathVariable(\"userId\") String userId);\n    }\n\n    public List<String> getFollowings(String userId) {\n        return client.getFollowings(userId);\n    }\n}\n```", "```js\npackage com.packtpub.microservices;\n...\n@RestController\npublic class MessagesController {\n    ...\n    @Autowired\n    private UsersClient usersClient;\n    ...\n}\n```", "```js\n@Async\npublic CompletableFuture<Boolean> isFollowing(String fromUser, String toUser) {\n\n    List<String> friends = usersClient.getFollowings(fromUser)\n            .stream()\n            .filter(toUser::equals)\n            .collect(Collectors.toList());\n\n    return CompletableFuture.completedFuture(friends.isEmpty());\n}\n```", "```js\n$ aws create-launch-configuration --launch-configuration-name users-service-launch-configuration \\\n --image-id ami-05355a6c --security-groups sg-8422d1eb \\\n --instance-type m3.medium\n```", "```js\n$ aws create-auto-scaling-group --auto-scaling-group-name users-service-asg \\\n --launch-configuration-name users-service-launch-configuration \\\n --min-size 2 \\\n --max-size 10\n```", "```js\n$ aws create-load-balancer --load-balancer-name users-service-elb \\\n --listeners \"Protocol=HTTP,LoadBalancerPort=80,InstanceProtocol=HTTP,InstancePort=8080\"\n```", "```js\n$ aws autoscaling attach-load-balancers --auto-scaling-group-name users-service-asg --load-balancer-names users-service-elb\n```", "```js\n...\ndependencies {\n  ...\n  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-ribbon', version: '1.4.2.RELEASE'\n}\n...\n```", "```js\nusers-service:\n  ribbon:\n    eureka:\n      enabled: false\n    listOfServers: localhost:8090,localhost:9092,localhost:9999\n    ServerListRefreshInterval: 15000\n```", "```js\npackage com.packtpub.microservices.ch03.clientsideloadbalancing;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\n\nimport com.netflix.client.config.IClientConfig;\nimport com.netflix.loadbalancer.IPing;\nimport com.netflix.loadbalancer.IRule;\nimport com.netflix.loadbalancer.PingUrl;\nimport com.netflix.loadbalancer.AvailabilityFilteringRule;\n\npublic class UsersServiceConfiguration {\n\n  @Autowired\n  IClientConfig ribbonClientConfig;\n\n  @Bean\n  public IPing ribbonPing(IClientConfig config) {\n    return new PingUrl();\n  }\n\n  @Bean\n  public IRule ribbonRule(IClientConfig config) {\n    return new AvailabilityFilteringRule();\n  }\n\n}\n```", "```js\n@RibbonClient(name = \"users-service\", configuration = UsersServiceConfiguration.class)\n@RestClient\npublic class MessageController {\n\n}\n```", "```js\n@RibbonClient(name = \"users-service\", configuration = UsersServiceConfiguration.class)\n@RestClient\npublic class MessageController {\n    ...\n    @LoadBalanced\n    @Bean\n    RestTemplate restTemplate(){\n      return new RestTemplate();\n    }\n    ...\n\n    @Async\n    public CompletableFuture<Boolean> isFollowing(String fromUser, String toUser) {\n\n        String url = String.format(\n                \"http://localhost:4567/followings?user=%s&filter=%s\",\n                fromUser, toUser);\n\n        RestTemplate template = new RestTemplate();\n        UserFriendships followings = template.getForObject(url, UserFriendships.class);\n\n        return CompletableFuture.completedFuture(\n                followings.getFriendships().isEmpty()\n        );\n    }\n}\n```", "```js\ndependencies {\n    compile group: 'org.springframework.kafka', name: 'spring-kafka', version: '2.1.1.RELEASE'\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\npackage com.packtpub.microservices.ch03.message;\n\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.kafka.core.DefaultKafkaProducerFactory;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.core.ProducerFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@SpringBootApplication\n@EnableAsync\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n    @Bean\n    public Map<String, Object> producerConfigs() {\n        Map<String, Object> props = new HashMap<>();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        return props;\n    }\n\n    @Bean\n    public ProducerFactory<Integer, String> producerFactory() {\n        return new DefaultKafkaProducerFactory<>(producerConfigs());\n    }\n\n    @Bean\n    public KafkaTemplate<Integer, String> kafkaTemplate() {\n        return new KafkaTemplate<Integer, String>(producerFactory());\n    }\n}\n```", "```js\n...\nimport org.springframework.kafka.core.KafkaTemplate;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n...\n\n@RestController\npublic class MessageController {\n\n    @Autowired\n    private KafkaTemplate kafkaTemplate;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    ...\n}\n```", "```js\n@RestController\npublic class MessageController {\n\n    ...\n\n    private void publishMessageEvent(Message message) {\n        try {\n            String data = objectMapper.writeValueAsString(message);\n            ListenableFuture<SendResult> result = kafkaTemplate.send(\"messages\", data);\n            result.addCallback(new ListenableFutureCallback<SendResult>() {\n                @Override\n                public void onFailure(Throwable ex) {\n                    System.err.println(\"Failed to emit message event: \" + ex.getMessage());\n                }\n\n                @Override\n                public void onSuccess(SendResult result) {\n                    System.out.println(\"Successfully published message event\");\n                }\n            });\n        } catch (JsonProcessingException e) {\n            System.err.println(\"Error processing json: \" + e.getMessage());\n        }\n    }\n}\n```", "```js\n@RequestMapping(\n            path=\"/messages\",\n            method=RequestMethod.POST,\n            produces=\"application/json\")\npublic ResponseEntity<Message> create(@RequestBody Message message) {\n\n    ...\n\n    publishMessageEvent(message);\n    return ResponseEntity.created(location).build();\n}\n```", "```js\nbin/kafka-topics.sh --create \\\n --zookeeper localhost:2181 \\\n --replication-factor 1 --partitions 1 \\\n --topic messages\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '1.5.9.RELEASE'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'org.springframework.kafka', name: 'spring-kafka', version: '2.1.1.RELEASE'\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\npackage com.packtpub.microservices.ch03.consumer;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```", "```js\nGET /messages?user_id=123\nGET /messages/123\nPOST /messages\nDELETE /messages/123\n```", "```js\n{\n  \"message\": {\n    \"from_user\": \"sender\",\n    \"to_user\": \"recipient\",\n    \"body\": \"Hello, there\",\n    \"message_text\": \"Hello, there\"\n  }\n}\n```"]