["```js\n    index.html\n    js/\n      js/jquery-2.1.3.js\n      js/untangle.js\n      js/untangle.drawing.js\n      js/untangle.data.js\n      js/untangle.input.js\n    css/\n      css/untangle.css\n    images/\n    ```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"utf-8\">\n      <title>Drawing Circles in Canvas</title>\n      <link rel=\"stylesheet\" href=\"css/untangle.css\">\n    </head>\n    <body>\n      <header>\n        <h1>Drawing in Canvas</h1>\n      </header>  \n\n      <canvas id=\"game\" width=\"768\" height=\"400\">\n        This is an interactive game with circles and lines connecting them.\n      </canvas>\n\n    <script src=\"img/jquery-2.1.3.min.js\"></script>\n    <script src=\"img/untangle.data.js\"></script>\n    <script src=\"img/untangle.drawing.js\"></script>\n    <script src=\"img/untangle.input.js\"></script>\n    <script src=\"img/untangle.js\"></script>\n    </body>\n    </html>\n    ```", "```js\n    canvas {\n      background: grey;\n    }\n    ```", "```js\n    $(document).ready(function(){\n      var canvas = document.getElementById(\"game\");  \n      var ctx = canvas.getContext(\"2d\");\n      ctx.fillStyle = \"GOLD\";\n      ctx.beginPath();\n      ctx.arc(100, 100, 50, 0, Math.PI*2, true); \n      ctx.closePath();\n      ctx.fill();\n    });\n    ```", "```js\n<canvas id=\"game\" width=\"768\" height=\"400\">\n  This is an interactive game with circles and lines connecting them.\n</canvas>\n```", "```js\nvar canvas = document.getElementById(\"game\");  \nvar ctx = canvas.getContext(\"2d\");\n```", "```js\nradians = Ï€/180 x degrees\n```", "```js\nctx.fill();\n```", "```js\nvar canvas = document.getElementById('game');  \nvar ctx = canvas.getContext('2d');\nctx.fillStyle = \"red\";\nctx.arc(100, 100, 50, 0, Math.PI*2, true); \nctx.fill();\n\nctx.arc(210, 100, 50, 0, Math.PI*2, true);\nctx.fillStyle = \"green\";\nctx.fill();\n```", "```js\n    if (untangleGame === undefined) {\n      var untangleGame = {};\n    }\n\n    untangleGame.drawCircle = function(x, y, radius) {\n      var ctx = untangleGame.ctx;\n      ctx.fillStyle = \"GOLD\";\n      ctx.beginPath();\n      ctx.arc(x, y, radius, 0, Math.PI*2, true);\n      ctx.closePath();\n      ctx.fill();\n    };\n    ```", "```js\n    if (untangleGame === undefined) {\n      var untangleGame = {};\n    }\n\n    untangleGame.createRandomCircles = function(width, height) {\n      // randomly draw 5 circles\n      var circlesCount = 5;\n      var circleRadius = 10;\n      for (var i=0;i<circlesCount;i++) {\n        var x = Math.random()*width;\n        var y = Math.random()*height;\n        untangleGame.drawCircle(x, y, circleRadius);\n      }\n    };\n    ```", "```js\n    if (untangleGame === undefined) {\n      var untangleGame = {};\n    }\n\n    // Entry point\n    $(document).ready(function(){\n      var canvas = document.getElementById(\"game\");\n      untangleGame.ctx = canvas.getContext(\"2d\");\n\n      var width = canvas.width;\n      var height = canvas.height;\n\n      untangleGame.createRandomCircles(width, height);\n\n    }); \n    ```", "```js\nif (untangleGame === undefined) {\n  var untangleGame = {};\n}\n```", "```js\n    untangleGame.Circle = function(x,y,radius){\n      this.x = x;\n      this.y = y;\n      this.radius = radius;\n    }\n    ```", "```js\n    untangleGame.circles = [];\n    ```", "```js\n    untangleGame.circles.push(new untangleGame.Circle(x,y,circleRadius));\n    ```", "```js\n    if (untangleGame === undefined) {\n      var untangleGame = {};\n    }\n\n    untangleGame.circles = [];\n\n    untangleGame.Circle = function(x,y,radius){\n      this.x = x;\n      this.y = y;\n      this.radius = radius;\n    };\n\n    untangleGame.createRandomCircles = function(width, height) {\n      // randomly draw 5 circles\n      var circlesCount = 5;\n      var circleRadius = 10;\n      for (var i=0;i<circlesCount;i++) {\n        var x = Math.random()*width;\n        var y = Math.random()*height;\n        untangleGame.circles.push(new untangleGame.Circle(x,y,circleRadius));\n        untangleGame.drawCircle(x, y, circleRadius);\n      }\n    };\n    ```", "```js\nvar circle1 = new Circle(100, 200, 10);\n```", "```js\n    untangleGame.Line = function(startPoint, endPoint, thickness) {\n      this.startPoint = startPoint;\n      this.endPoint = endPoint;\n      this.thickness = thickness;\n    }\n    ```", "```js\n    untangleGame.thinLineThickness = 1;\n    untangleGame.lines = [];\n    ```", "```js\n    untangleGame.drawLine = function(ctx, x1, y1, x2, y2, thickness) {    \n      ctx.beginPath();\n      ctx.moveTo(x1,y1);\n      ctx.lineTo(x2,y2);\n      ctx.lineWidth = thickness;\n      ctx.strokeStyle = \"#cfc\";\n      ctx.stroke();\n    }\n    ```", "```js\n    untangleGame.connectCircles = function() {\n      // connect the circles to each other with lines\n      untangleGame.lines.length = 0;\n      for (var i=0;i< untangleGame.circles.length;i++) {\n        var startPoint = untangleGame.circles[i];\n        for(var j=0;j<i;j++) {\n          var endPoint = untangleGame.circles[j];\n          untangleGame.drawLine(startPoint.x, startPoint.y, endPoint.x,\n          endPoint.y, 1);\n          untangleGame.lines.push(new untangleGame.Line(startPoint, endPoint,\n          untangleGame.thinLineThickness));\n        }\n      }\n    };\n    ```", "```js\n    untangleGame.connectCircles();\n    ```", "```js\n    untangleGame.clear = function() {\n      var ctx = untangleGame.ctx;\n      ctx.clearRect(0,0,ctx.canvas.width,ctx.canvas.height);\n    };\n    ```", "```js\n    untangleGame.drawAllLines = function(){\n      // draw all remembered lines\n      for(var i=0;i<untangleGame.lines.length;i++) {\n        var line = untangleGame.lines[i];\n        var startPoint = line.startPoint;\n        var endPoint = line.endPoint;\n        var thickness = line.thickness;\n        untangleGame.drawLine(startPoint.x, startPoint.y, endPoint.x,\n        endPoint.y, thickness);\n      }\n    };\n\n    untangleGame.drawAllCircles = function() {\n      // draw all remembered circles\n      for(var i=0;i<untangleGame.circles.length;i++) {\n        var circle = untangleGame.circles[i];\n        untangleGame.drawCircle(circle.x, circle.y, circle.radius);\n      }\n    };\n    ```", "```js\n    // set up an interval to loop the game loop\n    setInterval(gameloop, 30);\n\n    function gameloop() {\n      // clear the Canvas before re-drawing.\n      untangleGame.clear();\n      untangleGame.drawAllLines();\n      untangleGame.drawAllCircles();\n    }\n    ```", "```js\n    untangleGame.handleInput();\n    ```", "```js\n    if (untangleGame === undefined) {\n      var untangleGame = {};\n    }\n\n    untangleGame.handleInput = function(){\n      // Add Mouse Event Listener to canvas\n      // we find if the mouse down position is on any circle\n      // and set that circle as target dragging circle.\n      $(\"#game\").bind(\"mousedown\", function(e) {\n        var canvasPosition = $(this).offset();\n        var mouseX = e.pageX - canvasPosition.left;\n        var mouseY = e.pageY - canvasPosition.top;\n\n        for(var i=0;i<untangleGame.circles.length;i++) {\n          var circleX = untangleGame.circles[i].x;\n          var circleY = untangleGame.circles[i].y;\n          var radius = untangleGame.circles[i].radius;\n          if (Math.pow(mouseX-circleX,2) + Math.pow(mouseY-circleY,2) < Math.pow(radius,2)) {\n            untangleGame.targetCircleIndex = i;\n            break;\n          }\n        }\n      });\n\n      // we move the target dragging circle \n      // when the mouse is moving\n      $(\"#game\").bind(\"mousemove\", function(e) {\n        if (untangleGame.targetCircleIndex !== undefined) {\n          var canvasPosition = $(this).offset();\n          var mouseX = e.pageX - canvasPosition.left;\n          var mouseY = e.pageY - canvasPosition.top;\n          var circle = untangleGame.circles[untangleGame.targetCircleIndex];\n          circle.x = mouseX;\n          circle.y = mouseY;\n        }\n        untangleGame.connectCircles();\n      });\n\n      // We clear the dragging circle data when mouse is up\n      $(\"#game\").bind(\"mouseup\", function(e) {\n        untangleGame.targetCircleIndex = undefined;\n      });\n    };\n    ```", "```js\nif (Math.pow(mouseX-circleX,2) + Math.pow(mouseY-circleY,2) < Math.pow(radius,2)) {\n  untangleGame.targetCircleIndex = i;\n  break;\n}\n```", "```js\ncontext.clearRect(x, y, width, height)\n```", "```js\nctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n```", "```js\nctx.clearRect(0, 0, ctx.canvas.width, 0);\n```", "```js\n    untangleGame.boldLineThickness = 5;\n    ```", "```js\n    untangleGame.isIntersect = function(line1, line2) {\n      // convert line1 to general form of line: Ax+By = C\n      var a1 = line1.endPoint.y - line1.startPoint.y;\n      var b1 = line1\\. startPoint.x - line1.endPoint.x;\n      var c1 = a1 * line1.startPoint.x + b1 * line1.startPoint.y;\n\n      // convert line2 to general form of line: Ax+By = C\n      var a2 = line2.endPoint.y - line2.startPoint.y;\n      var b2 = line2\\. startPoint.x - line2.endPoint.x;\n      var c2 = a2 * line2.startPoint.x + b2 * line2.startPoint.y;\n\n      // calculate the intersection point    \n      var d = a1*b2 - a2*b1;\n\n      // parallel when d is 0\n      if (d === 0) {\n        return false;\n      }\n\n      // solve the interception point at (x, y)\n      var x = (b2*c1 - b1*c2) / d;\n      var y = (a1*c2 - a2*c1) / d;\n\n      // check if the interception point is on both line segments\n      if ((isInBetween(line1.startPoint.x, x, line1.endPoint.x) || isInBetween(line1.startPoint.y, y, line1.endPoint.y)) &&\n         (isInBetween(line2.startPoint.x, x, line2.endPoint.x) || isInBetween(line2.startPoint.y, y, line2.endPoint.y))) {\n          return true;\n        }\n\n        // by default the given lines is not intersected.\n        return false;\n    };\n\n    // return true if b is between a and c,\n    // we exclude the result when a==b or b==c\n    untangleGame.isInBetween = function(a, b, c) {\n      // return false if b is almost equal to a or c.\n      // this is to eliminate some floating point when\n      // two value is equal to each other \n      // but different with 0.00000...0001\n      if (Math.abs(a-b) < 0.000001 || Math.abs(b-c) < 0.000001) {\n        return false;\n      }\n\n      // true when b is in between a and c\n      return (a < b && b < c) || (c < b && b < a);\n    };\n    ```", "```js\n    untangle.updateLineIntersection = function() {\n      // checking lines intersection and bold those lines.\n      for (var i=0;i<untangleGame.lines.length;i++) {\n        for(var j=0;j<i;j++) {\n          var line1 = untangleGame.lines[i];\n          var line2 = untangleGame.lines[j];\n\n          // we check if two lines are intersected, \n          // and bold the line if they are.\n          if (isIntersect(line1, line2)) {\n            line1.thickness = untangleGame.boldLineThickness;\n            line2.thickness = untangleGame.boldLineThickness;\n          }              \n        }\n      }\n    }\n    ```", "```js\nA = y2-y1\nB = x1-x2\nC = A * x1 + B * y2\n```", "```js\nLine 1: A1X+B1Y = C1\nLine 2: A2X+B2Y = C2\n```", "```js\nX = (B2 * C1 â€“ B1 * C2) / (A1 * B2 â€“ A2 * B1)\nY = (A1 * C2 â€“ A2 * C1) / (A1 * B2 â€“ A2 * B1)\n```", "```js\n    canvas {\n      /* for iOS devices */\n      -webkit-tap-highlight-color: transparent;\n    }\n    ```", "```js\n    $(\"#game\").bind(\"mousedown touchstart\", function(e) {\n      // disable default drag to scroll behavior\n      e.preventDefault();\n\n      // touch or mouse position\n      var touch = e.originalEvent.touches && e.originalEvent.touches[0];\n      var pageX = (touch||e).pageX;\n      var pageY = (touch||e).pageY;\n\n      var canvasPosition = $(this).offset();\n      var mouseX = pageX - canvasPosition.left;\n      var mouseY = pageY - canvasPosition.top;\n\n      // existing code goes here.\n\n    }\n    ```", "```js\n    $(\"#game\").bind(\"mousemove touchmove\", function(e) {\n      // disable default drag to scroll behavior\n      e.preventDefault();\n\n      // touch or mouse position\n      var touch = e.originalEvent.touches && e.originalEvent.touches[0];\n      var pageX = (touch||e).pageX;\n      var pageY = (touch||e).pageY;\n\n      var canvasPosition = $(this).offset();\n      var mouseX = pageX - canvasPosition.left;\n      var mouseY = pageY - canvasPosition.top;\n\n      // existing code goes here.    \n    }\n    ```", "```js\n    $(\"#game\").bind(\"mouseup touchend\", function(e) {\n     // existing code goes here.\n    }\n    ```", "```js\nvar touch = e.originalEvent.touches && e.originalEvent.touches[0];\n```", "```js\nvar pageX = (touch||e).pageX;\n```"]