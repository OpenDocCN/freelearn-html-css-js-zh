["```js\n    const jwt = require('jsonwebtoken');\n    ```", "```js\n    // Middleware for authenticating requests\n    ```", "```js\n    function authenticateToken(req, res, next) {\n    ```", "```js\n      const token = req.header('Authorization');\n    ```", "```js\n      if (!token) return res.sendStatus(401);\n    ```", "```js\n      jwt.verify(token, 'your-secret-key', (err, user) => {\n    ```", "```js\n        if (err) return res.sendStatus(403);\n    ```", "```js\n        req.user = user;\n    ```", "```js\n        next();\n    ```", "```js\n      });\n    ```", "```js\n    }\n    ```", "```js\n    // Example route that requires authentication\n    ```", "```js\n    app.get('/api/resource', authenticateToken, (req, res) => {\n    ```", "```js\n      // Process the request for authenticated users\n    ```", "```js\n      res.json({ message: 'Access granted!' });\n    ```", "```js\n    });\n    ```", "```js\n    // Middleware for role-based authorization\n    ```", "```js\n    function authorize(role) {\n    ```", "```js\n      return (req, res, next) => {\n    ```", "```js\n        if (req.user && req.user.role === role) {\n    ```", "```js\n          return next(); // User has the required role\n    ```", "```js\n        }\n    ```", "```js\n        res.status(403).send('Forbidden'); // User does not have the required role\n    ```", "```js\n      };\n    ```", "```js\n    }\n    ```", "```js\n    // Example route that requires a specific role\n    ```", "```js\n    app.get('/api/admin/resource', authenticateToken, authorize('admin'), (req, res) => {\n    ```", "```js\n      // Process the request for users with the 'admin' role\n    ```", "```js\n      res.json({ message: 'Admin access granted!' });\n    ```", "```js\n    });\n    ```"]