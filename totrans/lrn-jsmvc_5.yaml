- en: Chapter 5. StealJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**StealJS** is an independent code manager and packaging tool, which allows
    us to load JavaScript and other file types into an application, concatenate multiple
    JavaScript or CSS files, and compress their content. StealJS provides cross-browser
    message logging, code generators, and a simple package management tool.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will go through all the StealJS features.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: StealJS requires Java 1.6 or greater.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Dependency management** is a tool, which provides an organized way for managing
    software components to work together as a one system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are a few StealJS key features:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading individual files only once
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading files from different domains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading JavaScript and CoffeeScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading CSS less
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have used StealJS many times in the previous chapters. Let's have a closer
    look at it now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using StealJS, we can load files as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'These files are loaded in parallel and in a random order. If `file_two` has
    dependences in `file_one`, we can wait for `file_one` before starting to fetch
    `file_two`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Logger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`steal.dev` provides two logging functions similar to the popular `console.log()`
    function, and automatically removes them from the production build.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All logs are removed from the production build.
  prefs: []
  type: TYPE_NORMAL
- en: Code cleaner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`steal.clean` beautifies the JavaScript code and checks it using the **JSLint**
    code quality tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.jslint.com](http://www.jslint.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://jsbeautifier.org](http://jsbeautifier.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can use the `cleanjs` command to beautify the code in one file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Or all files in our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To run our code against JSLint, add the `-jslint true` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can ignore the files from being cleaned by adding a comment similar to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Concatenation and compression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`steal.build` compresses and concatenates CSS and JavaScript files into a single
    or several files. It uses the Google Closure compressor by default.'
  prefs: []
  type: TYPE_NORMAL
- en: Since it opens the applications in Envjs, it can be run against applications
    that don't use StealJS.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make production-ready files of our `Todo` application, we can run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can run the script against a URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to load files into the project, used cross-browser
    logging systems that are removed in production build, cleaned the code and made
    a production-ready application.
  prefs: []
  type: TYPE_NORMAL
