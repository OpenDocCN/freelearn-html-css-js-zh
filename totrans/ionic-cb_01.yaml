- en: Creating Our First App with Ionic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a HelloWorld app via the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a HelloWorld app via Ionic Creator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing the app using your web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing the app using the Ionic CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing the app using Xcode for iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing the app using Genymotion for Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing the app using Ionic View
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many options for developing mobile applications today. Native applications
    require a unique implementation for each platform, such as iOS, Android, and Windows
    phone. It's required in some cases, such as high-performance CPU and GPU processing
    with lots of memory consumption. Any application that does not need over-the-top
    graphics and intensive CPU processing could benefit greatly from a cost-effective,
    write once and run anywhere HTML5 mobile implementation.
  prefs: []
  type: TYPE_NORMAL
- en: For those who choose the HTML5 route, there are many great choices on the market.
    Some options may be very easy to start, but they could be very hard to scale or
    could face performance problems. Commercial options are generally expensive for
    small developers to find product/market fit. The best practice is to think of
    the users first. There are instances where a simple, responsive website design
    is the best choice; for example, when a business mainly has fixed content with
    minimal updating required or the content is better off on the web for SEO purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Ionic Framework has several advantages over its competitors, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: Ionic is based on Angular, which is a robust framework for application development.
    You have all the components to structure and create an application built into
    it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI performance is strong because of its usage of the `requestAnimationFrame()`
    technique.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It offers a beautiful and comprehensive set of default styles, similar to a
    mobile-focused twitter Bootstrap.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sass** is available for quick, easy, and effective theme customization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There have been many significant changes between the launch of AngularJS 1.x
    and Angular. All of these changes are applicable to Ionic as well. Consider the
    following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Angular utilizes **TypeScript**, which is a superset of the **ECMAScript 6**
    (**ES6**) standard, to build your code into JavaScript. This allows developers
    to leverage TypeScript features such as type checking during the compilation step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are no more controllers and directives in AngularJS. Previously, a controller
    was assigned to a DOM node, while a directive converted a template into a component-like
    architecture. However, it is very hard to scale and debug large AngularJS 1.x
    applications due to the misuse of controllers and/or issues with conflicting directives.
    In Angular, there is only a single conceptâ€”that of a component, which eventually
    has a selector corresponding to an HTML template and a class containing functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `$scope` object no longer exists in Angular because all properties are now
    defined inside a component. This is actually good news because debugging errors
    in `$scope` (especially with nested scenarios) is very difficult in AngularJS
    1.x.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, Angular offers better performance and supports both ES5 and ES6 standards.
    You could write Angular in TypeScript, Dart, or just pure JavaScript.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, you will work through several HelloWorld examples to Bootstrap
    your Ionic app. This process will give you a basic skeleton with which you can
    start building more comprehensive apps. The majority of apps have similar user
    experiences flow, such as tabs and side menus.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you create your first app, your environment must have the required components
    ready. These components ensure a smooth development, build, and test process.
    The default Ionic project folder is based on Cordova's. Therefore, you need the
    Ionic CLI to automatically add the correct platform (that is, iOS, Android, or
    Windows phone) and build the project. This will ensure all Cordova plugins are
    included properly. The tool has many options to run your app in the browser or
    simulator with live reload.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to install Ionic and its dependencies to get started. Ionic itself
    is just a collection of CSS styles, Angular components, and standard Cordova plugins.
    It's also a command-line tool to help manage all technologies, such as Cordova.
    The installation process will give you a command line to generate the initial
    code and build the app.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic uses `npm` as the installer, which is included when installing Node.js.
    Please install the latest version of Node.js from [https://nodejs.org/en/download/](https://nodejs.org/en/download/).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to install `cordova`, `ios-sim` (an iOS Simulator) and `ionic`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can install all three components with this single command line instead of
    issuing three command lines separately. The `-g` parameter is to install the package
    globally (not just in the current directory).
  prefs: []
  type: TYPE_NORMAL
- en: 'For Linux and Mac, you may need to use the `sudo` command to allow system access,
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are a few common options for an **integrated development environment**
    (**IDE**):'
  prefs: []
  type: TYPE_NORMAL
- en: Xcode for iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Studio for Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Visual Studio Code (VS Code)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JetBrains' WebStorm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sublime Text ([http://www.sublimetext.com/](http://www.sublimetext.com/)) for
    web development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these have a free license. You could code directly in Xcode or Android
    Studio, but those are somewhat heavy-duty for web apps, especially when you have
    a lot of windows open and just need something simple to code. Sublime Text is
    free for non-commercial developers, but you have to purchase a license if you
    are a commercial developer. Most frontend developers would prefer to use Sublime
    Text for coding HTML and JavaScript, because it's very lightweight and comes with
    a well-supported developer community. Sublime Text has been around for a long
    time and is very user-friendly. However, there are many features in Ionic that
    make Visual Studio Code very compelling. For example, it has the look and feel
    of a full IDE without being bulky. You could debug JavaScript directly inside
    VS Code, as well as getting autocomplete (for example, IntelliSense). The following
    instructions cover both Sublime Text and VS Code, although the rest of this book
    will use VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'VS Code works on Mac, Windows, and Linux. Here are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://code.visualstudio.com.](https://code.visualstudio.com)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install for your specific OS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unzip the downloaded file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `.app` file into the `Applications` folder and drag it to Mac's Dock
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Microsoft Visual Studio Code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *p* to open the command palette
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the shell command in the command palette
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the shell command: Install code command in PATH command to install
    the script to add Visual Studio Code in your terminal $PATH'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart Visual Studio Code for this to take effect
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Later on, you can just write code (including the dot) directly from the Ionic
    project folder and VS Code will automatically open that folder as a project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the following screenshots were taken from a Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5b571fb-adf8-4e21-bf74-3a840948255e.png)'
  prefs: []
  type: TYPE_IMG
- en: If you decide to use Sublime Text, you will need Package Control ([https://packagecontrol.io/installation](https://packagecontrol.io/installation)),
    which is similar to a Plugin Manager. Since Ionic uses Sass, it's optional to
    install the Sass Syntax Highlighting package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to Sublime Text | Preferences | Package Control.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to Package Control: Install Package. You could also just type the partial
    command (that is, `inst`) and it will automatically select the right option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5fbfb5a6-fffd-48f1-8bb8-8ed90e343003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Type `Sass` and the search results will show one option for TextMate & Sublime
    Text. Select that item to install:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a98d51cd-80f5-4b23-931b-379d29c8975e.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are tons of Sublime Text packages that you may want to use, such as HTML,
    JSHint, JSLint, Tag, and ColorPicker. You can visit [https://sublime.wbond.net/browse/popular](https://sublime.wbond.net/browse/popular)
    for additional needs.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a HelloWorld app via the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The quickest way to start your app is using the existing templates. Ionic gives
    you some standard out-of-the-box templates via the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Blank**: This is a simple page with minimal JavaScript code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tabs**: These are multiple pages with routes. A route URL goes to a tab'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Side menu**: This is a template with a left/right menu with the center content
    area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Super:** This is a template with prebuilt pages and providers, which emphasize
    the best practices for Ionic app development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up the app with a `blank` template from `ionic`, use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you replace `blank` with `tabs`, it will create a `tabs` template, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, the following command will create an app with a `sidemenu`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '4\. Likewise, the following command will create an app with the `super` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Additional guidance for the Ionic CLI is available on the GitHub page: [https://github.com/ionic-team/ionic-cli](https://github.com/ionic-team/ionic-cli).'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will show you how to quickly start your code base and visualize
    the result. More details about Angular and its template syntax will be discussed
    in various chapters of this book, however, the core concepts are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Component**: Angular is very modular because you could write your code in
    a file and use an export class to turn it into a component. If you are familiar
    with AngularJS 1.x, this is similar to a controller and how it binds with a DOM
    node. A component will have its own private and public properties and methods
    (that is, functions). To tell whether a class is an Angular component or not,
    you have to use the `@Component` decorator. This is another new concept in TypeScript
    since you could enforce characteristics (metadata) on any class so that they behave
    in a certain way.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Template**: A template is an HTML string or a separate `.html` file that
    tells AngularJS how to render a component. This concept is very similar to any
    other frontend and backend framework. However, Angular has its own syntax to allow
    simple logic on the DOM, such as repeat rendering (`*ngFor`), event binding (`click`),
    or custom tags (`<my-tag>`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Directive**: This allows you to manipulate the DOM, since the directive is
    bound to a DOM object. So, `*ngFor` and `*ngIf` would be examples of directives
    because they alter the behavior of that DOM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service**: This refers to the abstraction to manage models or collections
    of complex logic besides `get`/`set` required. There is no service decorator,
    as with a component. So, any class could be a service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pipe**: This is mainly used to process an expression in the template and
    return some data (that is, rounding numbers and adding currency) using the `{{
    expression | filter }}` format. For example, `{{amount | currency}}` will return
    $100 if the amount variable is 100.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ionic automatically creates a project folder structure that looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a549849-9f35-490b-b785-db44809a4e42.png)'
  prefs: []
  type: TYPE_IMG
- en: You will spend most of your time in the `/src` folder because that's where your
    application components will be placed. This is very different from Ionic 1.x because
    the `/www` folder here is actually compiled by TypeScript. If you build the app
    for iOS, the Ionic build command line will also create another copy at `/platforms/ios/www`,
    which is specifically for Cordova to point to. Another interesting change in Angular
    is that your app has a root component, which is located at `/src/app` folder,
    and all other pages or screens are in `/src/pages`. Since Angular is component
    based, each component will come with HTML, CSS, and JS. If you add in more JavaScript
    modules, you can put them in the `/src/assets` folder, or a better practice is
    to use `npm install` so that it's automatically added in the `/node_modules` folder.
    Ionic has completely gotten rid of Grunt and Bower. Everything is simplified into
    just `package.json`, where your third-party dependencies will be listed.
  prefs: []
  type: TYPE_NORMAL
- en: There is no need to modify the `/platforms` or `/plugins` folder manually unless
    troubleshooting needs to be done. Otherwise, the Ionic or Cordova CLI will automate
    the content of these folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, from the Ionic template, the Angular app name is called `MyApp`.
    You will see something like this in `app/app.component.ts`, which is the root
    component file for the entire app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26105712-f983-44a9-890e-3a305a193167.png)'
  prefs: []
  type: TYPE_IMG
- en: This root component of your app and all content will be injected inside `<ion-app></ion-app>`
    of `index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that if you double-click on the `index.html` file to open it in the browser,
    it will show a blank page. This doesn't mean that the app isn't working. The reason
    for this is that the Angular component of Ionic dynamically loads all the `.js`
    files and this behavior requires server access via the `http://` protocol. If
    you open a file locally, the browser automatically treats it as a file protocol
    (`file://`), and therefore Angular will not have the ability to load additional
    `.js` modules to run the app properly. There are several methods of running the
    app, which will be discussed later.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a HelloWorld app via Ionic Creator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way to start your app code base is to use **Ionic Creator**. This is
    a great interface builder to accelerate your app development with the drag and
    drop style. You can quickly take the existing components and position them to
    visualize how it should look in the app via a web-based interface. Most common
    components, such as buttons, images, and checkboxes are available.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic Creator allows the user to export everything as a project with all `.html`,
    `.css`, and `.js` files. You should be able to edit content in the `/app` folder
    to build on top of the interface.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ionic Creator requires registration for a free account at [https://creator.ionic.io/](https://creator.ionic.io/)
    to get started.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project called `myApp`:![](img/0cd94da3-89cc-4384-930a-d1a967eac333.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Validate, to ensure that you see the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/03cb16d0-347e-46f5-8cfb-04c0abf3cec0.png)'
  prefs: []
  type: TYPE_IMG
- en: The center area is your app interface. The left side gives you a list of pages.
    Each page is a single route. You also have access to a number of UI components
    that you would normally have to code by hand in an HTML file. The panel on the
    right shows the properties of any selected component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You're free to do whatever you need to do here by dropping components to the
    center screen. If you need to create a new page, you have to click on the Add
    Page in the Pages panel. Each page is represented as a link, which is basically
    a route in Angular UI-Router's definition. To navigate to another page (for example,
    after clicking a button), you can just change the link property and point to that
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is an edit button on top, where you can toggle back and forth between
    the edit mode and preview mode. It's very useful to see how your app will look
    and behave.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once completed, click the export button at the top of the navigation bar. You
    have the following four options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the Ionic CLI tool to get the code
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the project as a ZIP file
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Export it to native code (similar to PhoneGap Build), as shown:![](img/0cbcd00b-b04d-4d32-afb2-f0fb5d5d2462.png)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Export it to the preview mode using the Creator app
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The best way to learn Ionic Creator is to play with it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To switch to the preview mode, where you can see the UI in a device simulator,
    click on the switch button in the top right to enable Test, as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54cfb320-3ae1-47d6-928e-5999081f1dc3.png)'
  prefs: []
  type: TYPE_IMG
- en: In this mode, you should be able to interact with the components in the web
    browser as if they're actually deployed on the device.
  prefs: []
  type: TYPE_NORMAL
- en: If you break something, it's very simple to start a new project. It's a great
    tool to use for prototyping and to get the initial template or project scaffolding.
    You should continue coding in your regular IDE for the rest of the app. Ionic
    Creator doesn't do everything for you yet. For example, if you want to access
    specific Cordova plugin features, you have to write that code separately.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you want to tweak the interface outside of what is allowed within Ionic
    Creator, it will also require specific modifications to the `.html` and `.css`
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the app using your web browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to run the web app, you need to turn your `/www` folder into a web
    server. Again, there are many methods to do this and people tend to stick with
    one or two ways to keep things simple. A few other options are unreliable, such
    as Sublime Text's live watch package or a static page generator (for example,
    the Jekyll and Middleman apps). They are slow to detect changes and may freeze
    your IDE, so won't be mentioned here.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recommended method is to use the Ionic serve command line. It basically
    launches an HTTP server so that you can open your app in a desktop browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, you need to be in the project folder. Let''s assume that it is the side
    menu `HelloWorld`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'From there, just issue the simple command line, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it! There''s no need to go into the `/www` folder or figure out which
    port to use. The command line will provide the following options while the web
    server is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4d0d88e-ea86-44a9-89f0-aa68dde11dc4.png)'
  prefs: []
  type: TYPE_IMG
- en: The most common option to use here is *Ctrl* + *C* to quit when you are done.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are additional steps to view the app with the correct device resolution:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Google Chrome if it's not already on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the link (for example, `http://localhost:8100/`) from Ionic serve in
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Google Chrome.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Turn on Developer Tools. For example, in Mac's Google Chrome, navigate to View
    | Developer | DeveloperTools:![](img/1c9d45d2-e902-4ec0-b0ae-edb046953f97.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the small mobile icon in the Chrome Developer Tools area, as illustrated:![](img/103b910d-43f1-426b-b80b-9aca61a350d6.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There will be a long list of devices to pick from, as shown:![](img/a91ef19f-fcc7-41f6-8838-1c039bc6fce1.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After selecting a device, you need to refresh the page to ensure that the UI
    is updated. Chrome should give you the exact view resolution of the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/19796489-764c-404c-979d-5cc2a138b7be.png)'
  prefs: []
  type: TYPE_IMG
- en: Most developers would prefer to use this method to code, as you can debug the
    app using Chrome Developer Tools. It works exactly like any other web application.
    You can create breakpoints or output variables to the console.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note that Ionic serve is actually watching everything under the `/src` folder
    and transpiring the TypeScript code into JavaScript under `/www` on the fly. This
    makes sense because there is no need for the system to scan through every single
    file when the probability of it changing is very small.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the web server is running, you can go back to the IDE and continue coding.
    For example, let''s open `page1.html` or any other template file and change the
    first line to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Go back to the web browser where Ionic opened the new page; the app interface
    will change the title bar right away without requiring you to refresh the browser.
    This is a very nice feature when there is a lot of back and forth between code
    changes and instantly checking how it works or looks in the app.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the app using the Ionic CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have been testing the web app portion of Ionic. Most of the time,
    you will need to actually run the app on a physical device or at least an emulator
    to see how the app behaves and whether all native features work.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the emulator installed. iOS emulator comes when you do
    npm install, `-g ios-sim`, and the Android emulator comes with Android Studio.
    To test the app on a physical device, you must connect the device to your computer
    via a USB connection.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Add the specific platform (such as iOS) and build the app using the following
    command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note that you need to add the platforms to build the app. However, if you use
    the standard template from the Ionic CLI, it should already have the iOS platform
    included. To build and run for Android, you can replace iOS with Android.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To emulate the app using the `ios` emulator, use the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the app on the actual physical iPhone device, use the command line as
    shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Viewing the app using Xcode for iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You could run the app using Xcode (in Mac) as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to the `/platforms/ios` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for the folder with `.xcodeproj` and open it in Xcode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the iOS device icon and select your choice of iOS simulator:![](img/3016082f-baf7-4360-890b-8f69bb912547.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the run button and you should be able to see the app running in
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the simulator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can connect a physical device via a USB port and it will show up in the
    iOS Device list for you to pick it. Then, you can deploy the app directly on your
    device. Note that iOS Developer membership is required for this. This method is
    more complex than just viewing the app via a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, it''s a must when you want to test out your code regarding device
    features, such as cameras or maps. If you change the code in the `/src` folder
    and want to run it again in Xcode, you have to do Ionic Cordova build ios first,
    because the running code is in the Staging folder of your Xcode project, as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3cc9de18-0aac-4293-b593-e527bfa3f28d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For debugging, the Xcode console can output JavaScript logs as well. However,
    you could use the more advanced features of Safari''s **Web Inspector** (which
    is similar to Google Chrome''s Developer Tools) to debug your app. Note that only
    Safari can debug a web app running on a connected physical iOS device because
    Chrome does not support this on a Mac. It''s easy to enable this capability, and
    it can be done with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Allow remote debugging for an iOS device by navigating to Settings | Safari
    | Advanced and enabling Web Inspector:![](img/14e20162-800e-4a57-955d-308ddaffa542.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the physical iOS device to your Mac via USB and run the app
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Safari browser
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Develop | your device''s name or **iOS Simulator** | **index.html**,
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d897b15c-4158-4e37-be04-fff1e443d5e1.png)'
  prefs: []
  type: TYPE_IMG
- en: If you don't see the Develop menu in Safari, you need to navigate to **Preferences
    |**Advanced and check on Show Develop menu in menu bar.
  prefs: []
  type: TYPE_NORMAL
- en: Safari will open a new console just for that specific device, just as it's running
    within the computer's Safari.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the app using Genymotion for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While it's possible to install the Google Android simulator, many developers
    have an inconsistent experience on a Mac. There are many commercial and free alternatives
    that offer more convenience and a wide range of device support. Genymotion provides
    some unique advantages, such as allowing users to switch the Android model and
    version, supporting networking from within the app, and allowing SD card simulation.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will learn how to set up an Android developer environment
    (on a Mac in this case) first. Then, you will install and configure Genymotion
    for mobile app development.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to set up the Android environment properly for development.
    Download and install Android Studio from [https://developer.android.com/studio/index.html](https://developer.android.com/studio/index.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You might be asked to install other libraries if your machine doesn't have the
    correct dependencies. If that is the case, you should run `sudo apt-get install
    lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6` from the command line to install
    them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run Android Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to install all of the required packages, such as Android SDK. Just
    click Next twice on the setup wizard screen and click on the Finish button to
    start the packages' installation.![](img/3236f0e5-c8ba-4b2a-bd22-cba24ec8c117.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the installation is complete, you need to install additional packages
    and other SDK versions. On the Quick Start screen, select Configure:![](img/6a0f173d-f6da-4d0d-b352-a3b72652a865.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After this, select SDKManager, as shown:![](img/a697cd9c-6640-4442-8db4-ee9147a23c1b.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's good practice to install the previous version, such as Android5.0.1 and
    5.1.1\. You may also want to install all Tools and Extras for later use:![](img/f89849eb-b8b8-4e7f-98c0-a9c1aeabb919.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Install packages... button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box on **Accept License** and select Install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The SDK Manager will give you an SDK path on the top. Make a copy of this path
    because you need to modify the environment path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the terminal and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will open a text editor to edit your bash profile file. Insert the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the line, where `/YOUR_PATH_TO/android-sdk` should be the SDK Path that you
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'copied earlier:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Save and close that text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go back to the terminal and type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You should see the output as your SDK path. This verifies that you have correctly
    configured the Android developer environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is to install and configure Genymotion. Download and install Genymotion
    and Genymotion Shell from `sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0
    lib32stdc++6`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run Genymotion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add button to start adding a new Android device, as illustrated:![](img/22bfb2c1-6441-454a-9436-d069d506f0fb.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the device that you want to simulate. In this case, let's select Samsung
    Galaxy S5, as follows:![](img/ef9f22c4-64d9-4a15-b667-7a97a410bc82.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see the device being added to your virtual devices. Click on that device.![](img/1f49fdb7-a3e9-4e5a-b5b3-222235cd8f4c.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then click on Start.![](img/46909828-85b3-4c8b-80e5-105c5f650d5b.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The simulator will take a few seconds to start and will show another window.
    This is just a blank simulator without your app running inside it yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run Genymotion Shell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From Genymotion Shell, you need to get a device list and keep the IP address
    of the device attached, which is the Samsung Galaxy S5\. Type `devices list![](img/af3d8f10-6236-46d6-b0b8-fed4a48e5cb5.png)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `adb connect 192.168.56.101` (or whatever the IP address was that you saw
    earlier from the devices list command line).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `adb devices` to confirm that it is connected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `Ionic Cordova platform` adds Android to add Android as a platform for
    your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, type Ionic Cordova run android.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should be able to see the Genymotion window showing your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Although there are many steps to take to get this working, it's a lot less likely
    that you have to go through the same process over. Once your environment is set
    up, all you need to do is to leave Genymotion running, while writing code. If
    there is a need to test the app on different Android devices, it's easy to add
    another virtual device in Genymotion and connect to it.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the app using Ionic View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Ionic View** is an app viewer that you can download from the App Store or
    Google Play. When you are in the development process and the app is not complete,
    you don''t want to submit it to either Apple or Google right away but limit access
    to your testers. Ionic View can help load your own app inside Ionic View and make
    it behave like a real app with some access to native device features. Additionally,
    Ionic View lets you use your app on an iOS device without any certification requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: Since Ionic View uses the Cordova `InAppBrowser` plugin to launch your app,
    all the device features have to be hacked to make it work. Currently, Ionic View
    only supports SQLite, battery, camera, device motion, device orientation, dialog/notification,
    geolocation, globalization, network information, vibration, keyboard, status bar,
    barcode scanner, and zip. It's a good idea to check the updated support list prior
    to using Ionic View to ensure that your app works properly.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two ways to use Ionic View. You can either upload your own app or
    load someone else''s app ID. If you test your own app, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Ionic View from either the App Store or Google Play.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure to register an account on [ionic.io](http://ionic.io).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to your app's project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for the Ionic upload.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The CLI will upload the entire app and give you the app ID, which is 152909f7
    in this case. You may want to keep this app ID to share with other testers later.![](img/5706a465-0584-452d-a3ee-f94482e42c81.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Ionic View app on the mobile device and log in if you haven't done
    so already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you should be able to see the app name on your MY APPS page. Go ahead and
    select the app name (myApp in this case), as illustrated:![](img/92efd36b-9dc1-44ed-90a7-a55ac7128e33.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select VIEW APP to run the app, as shown:![](img/e7a78bfb-56fa-4ed7-90a6-f3afce981d10.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see that the app interface appears with initial instructions on how
    to exit the app. Since your app will cover the full screen of Ionic View, you
    need to swipe down using three fingers, as illustrated, to exit back to Ionic
    View:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6040a102-883f-4d7e-8d03-29162d635944.png)'
  prefs: []
  type: TYPE_IMG
- en: If there is no code update, the process is the same, except that you need to
    select SYNC TO LATEST from the menu.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To summarize, there are several benefits of using Ionic View, some of which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It's convenient because there is only one command line to push the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anyone can access your app by entering the app ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no need to have iOS Developer membership to start developing with Ionic.
    Apple has its own TestFlight app, which is very similar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can maintain an agile development process by having testers test the app
    as you develop it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic View supports a wide range of device features, and that support continues
    to grow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
