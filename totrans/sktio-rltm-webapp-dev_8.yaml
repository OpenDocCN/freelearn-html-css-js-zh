- en: Appendix B. Socket.IO Backends
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Socket.io started in Node.js and the primary backend continues to be Node.js.
    This book focuses on building a chat system with socket.io, Node.js, and Express.js.
    But what if your primary platform of choice is not Node.js or you are working
    on a project where you want the same capabilities as provided by socket.io but
    cannot as you have an existing standardized platform and cannot bring a new system
    in the equation. Many before you have faced the same dilemma and in the spirit
    of open source, socket.io servers exist for various platforms. In this appendix
    let's take a look at the various implementations available for socket.io backends.
  prefs: []
  type: TYPE_NORMAL
- en: Every platform will require you to apply the learning and logic from this book
    to rewrite the server-side code targeting that platform. The client code can continue
    to be the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an alphabetic list of the implementations by their languages/platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: Erlang
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two different backends for socket.io on erlang, Yurii Rashkovskii's
    **socket.io-erlang** ([https://github.com/yrashk/socket.io-erlang](https://github.com/yrashk/socket.io-erlang))
    and Yongboy's **erlang-socketio** ([https://code.google.com/p/erlang-scoketio/](https://code.google.com/p/erlang-scoketio/)).
  prefs: []
  type: TYPE_NORMAL
- en: Yurii seems to have a disagreement with the path taken by socket.io's post-0.6.x
    releases, and so the library supports only up to Version 0.6 of the spec. Naturally,
    most of the examples in this book and many other examples on the Internet, won't
    work over it.
  prefs: []
  type: TYPE_NORMAL
- en: Yongboy's erlang-socketio seems to be keeping itself up to date with the latest
    happenings in socket.io and is compatible with the latest spec for socket.io-1.0
    at the time of writing. Thus we will focus the rest of this section on this library.
  prefs: []
  type: TYPE_NORMAL
- en: This library is available for **Cowboy** and **Mochiweb** , two popular server-side
    frameworks in erlang. Both these versions support socket.io spec 1.0\. The Cowboy
    version supports all the transports, while the Mochiweb version is limited to
    `xhr-polling`, `htmlfile`, and `json-polling`.
  prefs: []
  type: TYPE_NORMAL
- en: Google Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Go** is a language in its early years, but is gaining popularity, mainly
    due to the corporate backing from Google and being one of the three languages
    supported on the Google App Engine, beside Python and Java.'
  prefs: []
  type: TYPE_NORMAL
- en: The `go-socket.io` implementation provides socket.io support on Go. This project
    supports almost all the transports and also supports socket.io on Google's App
    Engine. The original codebase for this project is at [https://github.com/madari/go-socket.io](https://github.com/madari/go-socket.io),
    but the development there has stagnated for a while; but others seem to have taken
    up the torch. The socket.io wiki points to this fork:[https://github.com/davies/go-socket.io](https://github.com/davies/go-socket.io).
  prefs: []
  type: TYPE_NORMAL
- en: One thing to notice here is that this codebase still doesn't support versions
    higher than 0.6.x.
  prefs: []
  type: TYPE_NORMAL
- en: Check out the forks created in github and you will find interesting developments
    being done to the code. Like this fork, which was updated much more recently:[https://github.com/justinfx/go-socket.io](https://github.com/justinfx/go-socket.io).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use a newer version of socket.io, the fork at [https://github.com/murz/go-socket.io](https://github.com/murz/go-socket.io)
    should support versions up to 0.8.x (this was at the time of writing).
  prefs: []
  type: TYPE_NORMAL
- en: Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are multiple implementations available for socket.io on a Java server.
    Let's take a look at them.
  prefs: []
  type: TYPE_NORMAL
- en: The first is **Socket.IO-Java** , maintained most actively at [https://github.com/Ovea/Socket.IO-Java](https://github.com/Ovea/Socket.IO-Java).
    It has been forked and modified to work with various servers and platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Then there is **Atmosphere**. Atmosphere began as a project to bring server
    push to glassfish servers, but was spun off as a project of its own and works
    with almost any Java server. Atmosphere server comes with atmosphere.js, which
    is its own JS client, but any Atmosphere application will work with a socket.io
    client out of the box, without any modification; use [https://github.com/Atmosphere/atmosphere/wiki/Getting-Started-with-Socket.IO](https://github.com/Atmosphere/atmosphere/wiki/Getting-Started-with-Socket.IO)
    to get started with Atmosphere,. If you are starting a new java project or are
    introducing push in your existing java one, don't make a decision until you have
    taken a look at Atmosphere.
  prefs: []
  type: TYPE_NORMAL
- en: '**Netty** brings an asynchronous server to Java; and very important to mention
    is Yongboy''s **socket** **io-netty** ([http://code.google.com/p/socketio-netty/](http://code.google.com/p/socketio-netty/)).
    It is highly recommended due to the async nature of netty, which is more suited
    for these applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gisio** ([https://bitbucket.org/c58/gnisio/wiki/Home](https://bitbucket.org/c58/gnisio/wiki/Home))
    brings socket.io to the GWT framework, the Google''s write-in-Java-and-compile-to-JS
    library. So if your application is built in GWT and you want to introduce server-push
    in your application, you can use this library.'
  prefs: []
  type: TYPE_NORMAL
- en: And for the new and upcoming completely asynchronous server **Vert.x** , there
    is **mo** **d-socket-io** ([https://github.com/keesun/mod-socket-io](https://github.com/keesun/mod-socket-io))
    Again, if you are looking at an application of a highly asynchronous nature, I
    would suggest you to take a look at this server and this module.
  prefs: []
  type: TYPE_NORMAL
- en: Perl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perl may be a very old language, but is still used in many places, and it has
    an actively maintained socket.io server module called **pocketio** ([https://github.com/vti/pocketio](https://github.com/vti/pocketio)).
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is another language that is gaining wide acceptance and popularity. And
    there are multiple socket.io server implementations for Python.
  prefs: []
  type: TYPE_NORMAL
- en: The first we look at is **gevent-socket.io** ([https://github.com/abourget/gevent-socketio](https://github.com/abourget/gevent-socketio)),
    which works with any WSGI-based web frameworks. So if you are using any framework
    such as Pyramid, Pylons, Flask, and Django, this will work for you. The only dependencies
    are **gevent** and **gevent-websocket**.
  prefs: []
  type: TYPE_NORMAL
- en: If Tornado is your framework of choice, take a look at **Tornadio 2** ([https://github.com/MrJoes/tornadio2](https://github.com/MrJoes/tornadio2)),
    which provides support for socket.io Versions 0.7 and higher. Again, Tornado is
    an asynchronous framework and good for such applications.
  prefs: []
  type: TYPE_NORMAL
- en: And dedicated to bringing socket.io to Django is **django-socketio** ([https://github.com/stephenmcd/django-socketio](https://github.com/stephenmcd/django-socketio)).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we saw the socket.io backend implementations for some popular
    platforms. If you are using some other platform, just search for a socket.io server
    implementation on the Internet and I am sure you will find one. It may not be
    the best or in an ideal state, but you definitely will find a solution to get
    started.
  prefs: []
  type: TYPE_NORMAL
