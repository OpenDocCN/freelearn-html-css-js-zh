- en: Chapter 4. Debugging JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Now, when we have created our own workspaces and projects, we can begin to
    work with Aptana Studio. Surely you have already created your own project with
    some files for your web application or website.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this chapter we will take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Aptana Studio Debugger Extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the debug console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with breakpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring AJAX requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uninstalling the Debugger Extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Debug perspective
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can start to debug our application, the first thing we have to do
    is to switch to the **Debug** perspective under **Window** | **Open Perspective**
    | **Debug**. The **Debug** perspective contains several useful views such as the
    **Console** view, the **Debug** view, the **Breakpoints** view, and so on, which
    are perfect for JavaScript debugging.
  prefs: []
  type: TYPE_NORMAL
- en: But first, let's start with installing the Debugger Extension, which is absolutely
    necessary for debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the JavaScript debugger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to debug some JavaScript code with Aptana Studio, we need to install
    the required extensions for our browser. The Debugger Extension is currently only
    available for Firefox and Internet Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: We want to install the Debugger Extension **for** the Firefox browser.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – installing Aptana Debugger for Firefox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start up your Firefox browser. If you don't have Firefox already installed,
    do it now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the Aptana Debugger Extension for Firefox. You will find it at [http://firefox.aptana.com/update/aptanadebugger.xpi](http://firefox.aptana.com/update/aptanadebugger.xpi).
    By clicking on this link, Firefox automatically starts the installation. Only
    your confirmation and a Firefox restart is necessary.![Time for action – installing
    Aptana Debugger for Firefox](img/8246_04_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After installing the extension, navigate to **Firefox** | **Add-ons** and take
    a look at the requirements of your version of **Aptana Debugger**.![Time for action
    – installing Aptana Debugger for Firefox](img/8246_04_1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our case the Aptana Debugger 1.7.2 requires Firebug 1.2 to 1.8\. Now navigate
    to [www.getfirebug.com](http://www.getfirebug.com) and install the required Firebug
    extension dependent on your currently installed Firefox version. We navigate to
    the website at [https://getfirebug.com/releases/firebug/1.8/](https://getfirebug.com/releases/firebug/1.8/)
    and install the highest required Firebug version 1.8.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Already a newer version of Firebug installed?**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you already have a newer version of Firebug installed, you need to uninstall
    it and install one of the required versions. This might be unintended, because
    the newer versions of Firebug provide many nice features. In this case, you might
    install a second (older) version of Firefox that you're only using for Aptana
    Studio debugging.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After you have both the extensions installed, restart Firefox to complete the
    installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have just prepared your Firefox browser for debugging your Aptana Studio
    projects with it. In detail, this means you have integrated the Aptana Debugger
    Extension and the required Firebug extension.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is absolutely recommended that the Firebug extension is compatible with the
    Aptana Debugger Extension.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the debugger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aptana Studio provides you with the option to configure many different debug
    configurations. For example, if you have a local installation of different Firefox
    or Internet Explorer versions, you could create a debug configuration for each
    of these browsers, so that you can start to debug your code in any of these browsers
    just by a single-click on the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a debug configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create a debugging configuration, we click on the small triangle
    on the right-hand side of the **Debug** toolbar button to drop-down the **Debug**
    menu and select the entry **Debug Configurations…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **New launch configuration** button (a white paper symbol) at the
    top-left of the configuration window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After Studio has inserted a configuration entry below the **Web Browser** node
    within the left-hand side tree, enter the name for the debug configuration into
    the **Name** field at the top-right. We enter, for example, the name `Firefox
    - Internal Server`.![Time for action – creating a debug configuration](img/8246_04_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a browser within the **Main** tab in which our debugging function should
    run. We enter the path to our Firefox, for example, `/usr/bin/firefox`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further, we want to start the debugger on the current page; therefore we select
    the **Use current page** option in the **Start Action** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We select the **Use built-in Web server** entry because our first simple debug
    configuration should use the internal web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Afterwards, just click on **Apply** in order to save the first settings of the
    configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further we want that our debug configuration should appear under the **Debug**
    menu within the toolbar. Therefore, we select the **Common** tab and the **Debug**
    entry within the **Display in favorites menu** list.![Time for action – creating
    a debug configuration](img/8246_04_3.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on **Apply** to save the changes, and afterwards click on **Close**
    to finish the creation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have created a debug configuration, which furthermore can be directly selected
    over the toolbar. When you select this configuration, Aptana Studio opens the
    related browser and starts the debugging.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_04_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Debugging JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After we have created the required configuration for JavaScript debugging, let's
    go forward and take a look at how we can debug a JavaScript file.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – debugging JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At first, click on the **Debug** toolbar button in order to debug the file that
    is currently open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you haven't already installed the Debugger Extension, you get the following
    message:![Time for action – debugging JavaScript](img/8246_04_5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this case, just click on **Yes** and Aptana Studio will install it directly
    in the background. After the quick and successful installation you receive a corresponding
    message where you click on **OK** and you can continue.![Time for action – debugging
    JavaScript](img/8246_04_6.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Maybe you have to restart Firefox after the Debugger Extension installation,
    if Firefox was running during the installation. When Firefox was running during
    the installation, and you continue without a restart, you get a **Socket connection
    error** error message. Please try shutting down and restarting your web browser,
    and then run **Debug** again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, the next time when Firefox starts, you get the **Another program on your
    computer would like to modify Firefox with the following add-on:** message. Here
    we have to select **Allow this installation** and click on **Continue**.![Time
    for action – debugging JavaScript](img/8246_04_7.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to complete the installation of the Aptana Debugger Extension of Firefox,
    you have to restart Firefox again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally the debug process should run your script in a simple browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have debugged our first JavaScript code. But we currently see nothing spectacular
    during this process—everything behaves as usual.
  prefs: []
  type: TYPE_NORMAL
- en: This happens because we haven't set a breakpoint or any other debugging action.
    But because this is what we really want to do, let's take a look at the options
    which the debugger provides us with to debug our code.
  prefs: []
  type: TYPE_NORMAL
- en: Before we go forward, we have to stop the current debugging process. Therefore
    we click the **Terminate** view button, which is displayed as a red square and
    you will find it in the **Debug** view and the **Console** view. Alternatively,
    you can also just close the browser window in which the debugging process runs.
  prefs: []
  type: TYPE_NORMAL
- en: Console view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Console** view allows you to print some log entries while your program
    processes. You can print values, types, and many more directly while processing
    occurs.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following action prints just a simple message in the **Console**
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of both these actions looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: An additional method of the **Console** view is the `trace` method. The `trace`
    method will print a complete backtrace in the **Console** view, so that you can
    quickly locate the position of a problem.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Time for action – working with the Console view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Prepare an HTML file with the following JavaScript code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Switch to the **Debug** perspective.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the debug process by clicking on the **Debug** toolbar button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Firefox window automatically opens and executes our JavaScript code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the **Console** view contains all logging values and backtraces.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just executed some JavaScript code that contains one `aptana.log` and
    two different `aptana.trace`. The **Console** view displays all logged values
    now.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_04_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the first five rows, we see the result of the `aptana.log`, which was called
    within the loop. These five entries log only the calculation.
  prefs: []
  type: TYPE_NORMAL
- en: Next is the first backtrace with a simple variable. This is a very useful feature.
    As you can see, the value of the variable is printed followed by the complete
    backtrace of the program process. You can see all the functions that were successively
    called and listed in the **Console** view. In this case each function call is
    displayed with the filename and the related line number, so that you can find
    their positions quickly. In addition, you're also able to perform a double-click
    on this filename, and the editor automatically jumps to the function.
  prefs: []
  type: TYPE_NORMAL
- en: The second backtrace shows you how to combine the backtrace with an exception,
    so that you always get enough information if a problem occurs.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, just a warning if you're working often with `aptana.log` and `aptana.trace`.
    One of the most often occurring errors is, a forgotten `aptana.log()` or `aptana.trace()`
    call within your JavaScript code. Within the normal debugging process, it isn't
    always noticeable—but if you execute your JavaScript code directly within a browser
    (without a debug console), you will get a **Aptana is** **not defined** error
    message.
  prefs: []
  type: TYPE_NORMAL
- en: 'That is correct, because the libraries by Aptana Studio are no longer included.
    So in order to optimize your code and prevent this error, you can wrap the Aptana
    functions into a separate function that checks if Aptana''s libraries are available.
    This could look something like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Using breakpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Breakpoints** view gives you an overview about all breakpoints you have
    set within your current workspace. In the following screenshot, you can see the
    **Breakpoints** view, with a breakpoint on line 11 of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using breakpoints](img/8246_04_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: But, what is a breakpoint and why should you set it?
  prefs: []
  type: TYPE_NORMAL
- en: A breakpoint is an exact position within your source code where the debugger
    should stop the execution. For example, if you have a loop of actions in your
    code, but something goes wrong somewhere within the code (maybe with your variables;
    they get bad values or invalid types). In this case you are able to set a breakpoint
    within your loop, and take a precise look at all variable values and see how they
    change in each cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're setting a breakpoint on a line, the execution always stops before
    the line itself is executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the *Time for action – adding a breakpoint* section, we need the following
    JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Time for action – adding a breakpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a JavaScript file or an HTML file with a JavaScript tag, and copy the JavaScript
    code in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search the **Add a breakpoint here** line and perform a right-click on the left-hand
    side of the line number.![Time for action – adding a breakpoint](img/8246_04_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Toggle Breakpoint** in order to set a breakpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatively, you can also double-click on the position where you right-clicked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the file within the debugger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just manually set a breakpoint on a line within a loop on which the
    debugger should stop in each cycle, so you're able to inspect the current state
    of your script environment.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Resume a breakpoint**'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to resume a breakpoint, you can do this simply by pressing *F8*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you take a look into the **Console** view, you see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the debugger prints the current value of the `i` variable in
    each cycle of the loop, and also the result of the calculation at the end.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The debugger stops only at breakpoints that are placed on lines that have executable
    source code. If you set a breakpoint on an empty line, the debugger will ignore
    it.
  prefs: []
  type: TYPE_NORMAL
- en: If you have placed several breakpoints in your script, and you don't need some
    of them in the actual execution of the script, you have the option to disable
    your breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – disabling a breakpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the **Breakpoints** view and search the unnecessary breakpoints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deselect the checkbox on the left-hand side of the breakpoint entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatively, you can search the breakpoint line within the editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the blue breakpoint beside the line number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Breakpoints properties…** and deselect the **Enabled** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have deactivated a breakpoint by using the **Breakpoints** view and selecting
    the **Breakpoints properties...** beside the editor's line numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Identify disabled breakpoints**'
  prefs: []
  type: TYPE_NORMAL
- en: To identify disabled and enabled breakpoints in the whole IDE is very easy.
    Disabled breakpoints are always displayed with a white point, and enabled breakpoints
    always with a blue point.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – setting a hit count on a breakpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Search the line of our currently placed breakpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the blue breakpoint on the left-hand side of the related line
    number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Breakpoints properties…** entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Hit Count** checkbox and enter the number `3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the file within the debugger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we adjusted our breakpoint, so that it's not stopped just at the third time
    it's reached.
  prefs: []
  type: TYPE_NORMAL
- en: This is very useful, if you already know that the problem within your loop happens
    for the first time in the third cycle. Now the debugger also stops just within
    the cycle where you want to search for the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Identify breakpoints with a hit count or a condition**'
  prefs: []
  type: TYPE_NORMAL
- en: By working with the **Breakpoints** view and within the editor, you can always
    identify a breakpoint with a hit count or a condition through the small question
    mark on the left-hand side of the point.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to search for errors, the **Variables** view is very useful. The
    **Variables** view displays all variables with their values, and the type in which
    the variable was defined and the actual type which the variable has within the
    current scope of the breakpoint. In order to select the columns that are displayed,
    you can navigate to **View Menu** to **Layout** | **Show columns**.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Variables** view only displays information when a breakpoint stops your
    JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – inspecting variables at a breakpoint and changing their values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Execute the last debugged JavaScript code, with the placed Hit Count breakpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the script stops at the breakpoint, open the **Variables** view in Aptana
    Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take a look at the list of variables and check if they are correct.![Time for
    action – inspecting variables at a breakpoint and changing their values](img/8246_04_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform a double-click on the value of the `loopEnd` variable and change the
    value from `5` to `7`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Enter* to take the new value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that press *F8* to resume the debug process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now you have inspected the current variables on a breakpoint and changed the
    `loopEnd` variable to a new value. By finishing the script the **Console** view
    should have the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the script assumes the new variable value directly and now executes
    seven cycles.
  prefs: []
  type: TYPE_NORMAL
- en: Studio AJAX monitor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're developing an application, which sends a lot of AJAX requests during
    the whole execution time, it's often necessary to know what kind of data is returned.
    For this, Aptana Studio provides the **Studio AJAX Monitor**, in which you're
    able to track all AJAX requests and their responses.
  prefs: []
  type: TYPE_NORMAL
- en: The **Studio AJAX Monitor** consists of three parts. First, there is the overview
    about all requests. Here you can see which URL is requested by which method, and
    at what time.
  prefs: []
  type: TYPE_NORMAL
- en: The other two parts are each a part of the request information and the response
    information. Both are separated in a **Headers** area and a **Body** area where
    you can inspect the AJAX request in detail.
  prefs: []
  type: TYPE_NORMAL
- en: '![Studio AJAX monitor](img/8246_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the *Time for action – installing the Debugger Extension* section, we need
    a small script like the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Time for action – uninstalling the Aptana Debugger Extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a JavaScript file or an HTML file with a JavaScript tag and place the JavaScript
    code within it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the debugging and open the **Studio AJAX Monitor** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the browser executes an AJAX request, and we are able to inspect them within
    the **Studio AJAX Monitor** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take a look at the listed AJAX request within the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have fired a simple AJAX request and the request is directly listed in the
    **Studio AJAX Monitor** view. Here you are able to inspect the request, at what
    moment it starts, what kind of headers are sent, and which data is in the response.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Uninstalling the debugger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maybe you want to uninstall Aptana Studio or whatever, and you want to uninstall
    the Aptana Debugger too.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how to uninstall the Aptana Firefox Extension.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – uninstalling the Aptana Debugger Extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Firefox and navigate to **Tools** | **Add-Ons**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Extensions** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Aptana Debugger** Extension and click on **Remove**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally restart Firefox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just removed the Aptana Debugger Extension from your Firefox. Now the
    extension is no longer available.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – selecting a JavaScript file which you didn't code yourself
    and inspect the functionality by using the debugger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now your task is to go forward and select a JavaScript file, which is coded
    by another developer. Integrate it to a simple HTML wrapper file and try to inspect
    the functionality. Use the **Breakpoints** and the **Log** functions in order
    to learn how the script works.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Which function you have to call, if you want to print a backtrace within
    your **Console** view?
  prefs: []
  type: TYPE_NORMAL
- en: The `aptana.log()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `aptana.print()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `aptana.trace()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Why is it necessary to remove all Aptana functions when your application
    goes into public use?
  prefs: []
  type: TYPE_NORMAL
- en: Because all users of your application received your debug messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because all users of your application received error messages, as the Aptana
    object isn't available in a non-debugger use case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's not necessary to remove the Aptana functions. The script works fine with
    or without it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. Why don't you place a breakpoint within an empty line?
  prefs: []
  type: TYPE_NORMAL
- en: Because the debugger stops the debugging in this line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because the debugger ignores the breakpoint and the script will continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's no reason. Placing a breakpoint on an empty line works fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q4\. Which color has a disabled breakpoint?
  prefs: []
  type: TYPE_NORMAL
- en: Disabled breakpoints are red.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disabled breakpoints are blue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disabled breakpoints are white.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be able to debug your JavaScript code.
    This means, you should know how to set and remove breakpoints, and also how to
    find available breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: If a breakpoint stops the execution within your code, you should know how you
    are able to inspect the variables in the current state of your application.
  prefs: []
  type: TYPE_NORMAL
- en: Now we're ready to start up with the next chapter, where we'll take a look at
    how we can document our JavaScript files and projects.
  prefs: []
  type: TYPE_NORMAL
