["```js\nnpm start \n```", "```js\n# secret used to sign session cookies\nCOOKIE_SECRET=\"sportsstoresecret\"\n# Google OAuth Credentials\nGOOGLE_CLIENT_ID=enter client ID here\nGOOGLE_CLIENT_SECRET=enter client secret here \n```", "```js\nexport interface Customer {\n    id?: number;\n    name: string;\n    email: string;\n  **  federatedId?: string;**\n} \n```", "```js\nimport { Validator } from \"./validator\";\nimport { required, minLength, email, no_op } from \"./basic_rules\";\nimport { Address } from \"../order_models\";\nimport { Customer } from \"../customer_models\";\nexport const CustomerValidator = new Validator<Customer>({\n    name: [required, minLength(6)],\n    email: email,\n   ** federatedId: no_op**\n});\nexport const AddressValidator = new Validator<Address>({\n    street: required,\n    city: required,\n    state: required,\n    zip: no_op\n}); \n```", "```js\nimport { Customer } from \"./customer_models\";\nimport { Address } from \"./order_models\";\nexport interface CustomerRepository {\n    getCustomer(id: number) : Promise<Customer | null>;\n    getCustomerByFederatedId(id: string): Promise<Customer | null>;\n    getCustomerAddress(id: number): Promise<Address | null>;\n    storeCustomer(customer: Customer): Promise<Customer>;\n} \n```", "```js\nimport { Model, CreationOptional, InferAttributes, InferCreationAttributes }\n    from \"sequelize\";\nimport { Customer } from \"../../customer_models\";\nexport class CustomerModel extends Model<InferAttributes<CustomerModel>,\n        InferCreationAttributes<CustomerModel>> implements Customer {\n    declare id?: CreationOptional<number>;\n    declare name: string;\n    declare email: string;\n **   declare federatedId?: string;**\n} \n```", "```js\nimport { DataTypes, Sequelize } from \"sequelize\";\nimport { CustomerModel } from \"./customer_models\";\nexport const initializeCustomerModels = (sequelize: Sequelize) => {\n    CustomerModel.init({\n        id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true},\n        name: { type: DataTypes.STRING},       \n        email: { type: DataTypes.STRING },\n      **  federatedId: { type: DataTypes.STRING }**\n    }, { sequelize})\n} \n```", "```js\nimport { DataTypes, Sequelize } from \"sequelize\";\nimport { OrderModel, ProductSelectionModel, AddressModel }\n    from \"./order_models\";\nimport { CustomerModel } from \"./customer_models\";\nimport { ProductModel } from \".\";\nconst primaryKey = {\n    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true }\n};\n\nexport const initializeOrderModels = (sequelize: Sequelize) => {\n\n    // ...statements omitted for brevity...\n    ProductSelectionModel.belongsTo(ProductModel, { as: \"product\"});\n    **AddressModel****.hasMany(OrderModel, { foreignKey: \"addressId\"});**\n} \n```", "```js\nimport { Customer } from \"../customer_models\";\nimport { CustomerRepository } from \"../customer_repository\";\nimport { Address } from \"../order_models\";\nimport { BaseRepo, Constructor } from \"./core\"\nimport { CustomerModel } from \"./models/customer_models\";\nimport { AddressModel, OrderModel } from \"./models/order_models\";\nexport function AddCustomers<TBase extends\n        Constructor<BaseRepo>>(Base: TBase)  {\n    return class extends Base implements CustomerRepository {\n        getCustomer(id: number): Promise<Customer | null> {\n            return CustomerModel.findByPk(id, {\n                raw: true\n            });\n        }\n        getCustomerByFederatedId(id: string): Promise<Customer | null> {\n            return CustomerModel.findOne({\n                where: { federatedId: id },\n                raw: true\n            })\n        }\n        getCustomerAddress(id: number): Promise<Address | null> {\n            return AddressModel.findOne({\n                include: [{\n                    model: OrderModel,\n                    where: { customerId: id },\n                    attributes: []\n                }],\n                order: [[\"updatedAt\", \"DESC\"]]\n            });\n        }\n        async storeCustomer(customer: Customer): Promise<Customer> {\n            const [data, created] = await CustomerModel.findOrCreate({\n                where: { email: customer.email },\n                defaults: customer,\n            });\n            if (!created) {\n                data.name = customer.name;\n                data.email = customer.email;\n                data.federatedId = customer.federatedId;\n                await data.save();\n            }\n            return data;\n        }\n    }\n} \n```", "```js\nimport { BaseRepo } from \"./core\";\nimport { AddQueries } from \"./queries\";\nimport { AddStorage } from \"./storage\";\nimport { AddOrderQueries } from \"./order_queries\";\nimport { AddOrderStorage } from \"./order_storage\";\n**import { AddCustomers } from \"./customers\";**\nconst CatalogRepo = AddStorage(AddQueries(BaseRepo));\nconst RepoWithOrders = AddOrderStorage(AddOrderQueries(CatalogRepo));\n**const RepoWithCustomers = AddCustomers(RepoWithOrders);**\n**export** **const CatalogRepoImpl = RepoWithCustomers;** \n```", "```js\nimport { CatalogRepository } from \"./catalog_repository\";\nimport { CatalogRepoImpl} from \"./orm\";\nimport { OrderRepository } from \"./order_repository\";\n**import { CustomerRepository } from \"./customer_repository\"****;**\nconst repo = new CatalogRepoImpl();\nexport const catalog_repository: CatalogRepository = repo;\nexport const order_repository: OrderRepository = repo;\n**export const customer_repository: CustomerRepository = repo;** \n```", "```js\nnpm install passport@0.7.0\nnpm install passport-google-oauth20@2.0.0\nnpm install --save-dev @types/passport@1.0.16\nnpm install --save-dev @types/passport-google-oauth20@2.0.14 \n```", "```js\n`passport` \n```", "```js\n`passport-google-oauth20` \n```", "```js\n`@types/passport` \n```", "```js\n`@types/passport-google-oauth20` \n```", "```js\nimport { Express } from \"express\";\nimport { getConfig, getSecret } from \"./config\";\nimport passport from \"passport\";\nimport { Strategy as GoogleStrategy, Profile, VerifyCallback }\n    from \"passport-google-oauth20\";\nimport { customer_repository } from \"./data\";\nimport { Customer } from \"./data/customer_models\";\nconst callbackURL: string = getConfig(\"auth:openauth:redirectionUrl\");\nconst clientID = getSecret(\"GOOGLE_CLIENT_ID\");\nconst clientSecret = getSecret(\"GOOGLE_CLIENT_SECRET\");\ndeclare global {\n    namespace Express {\n        interface User extends Customer {  }\n    }\n}\nexport const createAuthentication = (app:Express) => {\n    passport.use(new GoogleStrategy({\n        clientID, clientSecret, callbackURL,\n        scope: [\"email\", \"profile\"],\n        state: true\n    } , async (accessToken: string, refreshToken: string,\n            profile: Profile, callback: VerifyCallback) => {\n        const emailAddr = profile.emails?.[0].value ?? \"\";           \n        const customer = await customer_repository.storeCustomer({\n            name: profile.displayName, email: emailAddr,\n            federatedId: profile.id\n        });\n        const { id, name, email } = customer;\n        return callback(null, { id, name, email });\n    }));\n    passport.serializeUser((user, callback) => {\n        callback(null, user.id);\n    });\n    passport.deserializeUser((id: number, callbackFunc) => {\n        customer_repository.getCustomer(id).then(user =>\n            callbackFunc(null, user));\n    });\n    app.use(passport.session());\n} \n```", "```js\n...\npassport.use(new GoogleStrategy({\n    clientID, clientSecret, callbackURL,\n    scope: [\"email\", \"profile\"]\n... \n```", "```js\n...\n} , async (accessToken: string, refreshToken: string,\n        profile: Profile, callback: VerifyCallback) => {\n... \n```", "```js\n{\n  id: '101XXXXXXXXXXXXXXXXXX',\n  displayName: Alice Smith',\n  name: { familyName: 'Smith', givenName: 'Alice' },\n  emails: [ { value: alice@example.com', verified: true } ],\n  photos: [{value: 'https://lh3.googleusercontent.com/a/XXXX'}],\n  provider: 'google',\n  _raw: '{\\n' +\n    '  \"sub\": \"101XXXXXXXXXXXXXXXXXX\",\\n' +\n    '  \"name\": \"Alice Smith\",\\n' +\n    '  \"given_name\": \"Adam\",\\n' +\n    '  \"family_name\": \"Smith\",\\n' +\n    '  \"picture\": \"https://lh3.googleusercontent.com/a/XXXX\",\\n' +\n    '  \"email\": \"alice@example.com\",\\n' +\n    '  \"email_verified\": true,\\n' +\n    '  \"locale\": \"en\"\\n' +\n    '}',\n  _json: {\n    sub: '101XXXXXXXXXXXXXXXXXX',\n    name: Alice Smith',\n    given_name: 'Alice',\n    family_name: 'Smith',\n    picture: 'https://lh3.googleusercontent.com/a/XXXX',\n    email: 'alice@example.com',\n    email_verified: true,\n    locale: 'en'\n  }\n} \n```", "```js\n...\napp.use(passport.session());\n... \n```", "```js\nimport { createServer } from \"http\";\nimport express, { Express } from \"express\";\nimport helmet from \"helmet\";\nimport { getConfig } from \"./config\";\nimport { createRoutes } from \"./routes\";\nimport { createTemplates } from \"./helpers\";\nimport { createErrorHandlers } from \"./errors\";\nimport { createSessions } from \"./sessions\";\n**import { createAuthentication } from \"./authentication\";**\nconst port = getConfig(\"http:port\", 5000);\nconst expressApp: Express = express();\nexpressApp.use(helmet());\nexpressApp.use(express.json());\nexpressApp.use(express.urlencoded({extended: true}))\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\nexpressApp.use(express.static(\"node_modules/bootstrap-icons\"));\ncreateTemplates(expressApp);\ncreateSessions(expressApp);\n**createAuthentication(expressApp);**\ncreateRoutes(expressApp);\ncreateErrorHandlers(expressApp);\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\n{\n    \"http\": {\n        \"port\": 5000\n    },\n    // ...configuration sections omitted for brevity...\n    \"sessions\": {\n        \"maxAgeHrs\": 2,\n        \"reset_db\": true,\n        \"orm\": {\n            \"settings\": {\n                \"dialect\": \"sqlite\",\n                \"storage\": \"sessions.db\"\n            },\n            \"logging\": true\n        }\n    },\n   ** \"auth\": {**\n **\"openauth\": {**\n **\"redirectionUrl\": \"http://localhost:5000/signin-google\"**\n **}**\n **}**\n} \n```", "```js\n...\napp.use(session({\n    secret, store,\n  **  resave: false, saveUninitialized: true,**\n    cookie: {\n        maxAge: config.maxAgeHrs * 60 * 60 * 1000,\n        **sameSite: false, httpOnly: false, secure****: false }**\n}));\n... \n```", "```js\n<form method=\"post\" action=\"/checkout\">\n    **<div class=\"container\">**\n **<div class=\"row flex-row align-items-center\">**\n **<div** **class=\"col-7\">{{> order_details_customer }}</div>**\n **<div class=\"col\">**\n **<div** **class=\"d-flex justify-content-center\">**\n **<a class=\"btn btn-primary\" href=\"/checkout/google\">**\n **<i** **class=\"bi bi-google\"></i>**\n **Use Google Account**\n **</a>**\n **</div>**\n **</div>**\n**</div>**\n **<div class=\"row\">**\n **{{> order_details_address }}**\n **</div>**\n **<div class****=\"row\">**\n **<div class=\"m-2\">**\n **<button type=\"submit\" class****=\"btn btn-primary\">**\n **Place Order**\n **</button>**\n **<a href=\"/cart?returnUrl={{ escapeUrl (navigationUrl )}}\"**\n **class=\"btn btn-primary\">Back****</a>**\n **</div>**\n **</div>**\n **</div>**\n</form> \n```", "```js\nimport { Express } from \"express\";\nimport { Address } from \"../data/order_models\";\nimport { AddressValidator, CustomerValidator, ValidationResults, getData, isValid }\n    from \"../data/validation\";\nimport { Customer } from \"../data/customer_models\";\nimport { createAndStoreOrder } from \"./order_helpers\";\n**import { customer_repository } from \"../data\";**\n**import passport from \"passport\";**\ndeclare module \"express-session\" {\n    interface SessionData {\n       orderData?: {\n            customer?: ValidationResults<Customer>,\n            address?: ValidationResults<Address>\n       },\n       pageSize?: string;\n    }\n}\nexport const createOrderRoutes = (app: Express) => {\n    **app.****get(\"/checkout/google\", passport.authenticate(\"google\"));**\n **app.get(\"/signin-google\", passport.authenticate(\"google\",**\n **{ successRedirect: \"****/checkout\", keepSessionInfo: true }));**\n    app.get(\"/checkout\", async (req, resp) => {\n       ** if (!req.session.orderData && req.****user) {**\n **req.session.orderData = {**\n **customer: await CustomerValidator.validate(req.user),**\n **address: await** **AddressValidator.validate(**\n **await customer_repository.getCustomerAddress(**\n **req.user?.id ?? 0) ?? {})** \n **}**\n }\n        req.session.pageSize =\n            req.session.pageSize ?? req.query.pageSize?.toString() ?? \"3\";\n        resp.render(\"order_details\", {\n            order: req.session.orderData,\n            page: 1,\n            pageSize: req.session.pageSize\n        });\n    });\n    // ...other routes omitted for brevity...\n} \n```", "```js\n...\napp.get(\"/checkout/google\", **passport.authenticate(\"google\")**);\n... \n```", "```js\n...\napp.get(\"/signin-google\", **passport.authenticate(\"google\",**\n **{ successRedirect: \"/checkout\", keepSessionInfo: true })**);\n... \n```"]