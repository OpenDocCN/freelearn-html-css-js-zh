- en: Integrating Elm with Rails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to [Chapter 10](8950bab6-3465-43c5-8ba7-15cb0513c346.xhtml), *Integrating
    Elm with Rails*. The goal of this chapter is to implement simple user authentication
    with Elm on the frontend. For the backend, we will use Ruby on Rails 5.1.5.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will cover include:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a basic Rails 5.1.5 app using Codeanywhere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Ruby 2.5.0 and Rails 5.1.5 on Codeanywhere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a brand new Rails project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Elm with Rails 5.1.5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding our Elm weather app to our Rails app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After completing this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Install a brand new Rails project on Codeanywhere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilize the webpacker gem to work with Elm more easily
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrate Elm-powered modules inside an existing Rails application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a basic Rails 5.1.5 app using Codeanywhere
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Codeanywhere** is an online **Integrated Development Environment** (**IDE**),
    with a number of great features. You can access it by pointing your browser to
    [codeanywhere.com](http://codeanywhere.com).'
  prefs: []
  type: TYPE_NORMAL
- en: To begin using it, a registration is needed.
  prefs: []
  type: TYPE_NORMAL
- en: Before actually being able to use a containerized Ubuntu 14.04 environment to
    run our Rails 5.1.5 app, Codeanywhere requires new registrants to confirm their
    email.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, choose a new Blank Development Stack on Ubuntu 14.04, give it a name,
    for example, elmrails, and click the CREATE button.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the CREATE button will make a new Ubuntu 14.04 container, ready for
    us to work on.
  prefs: []
  type: TYPE_NORMAL
- en: 'A very important thing to note is the message we get in the editor pane of
    the Codeanywhere app. The editor pane is nothing fancy; it is simply the largest
    pane in an open Codeanywhere app, which lists open files as tabs. The message
    that we get upon a successful container creation lists the name of the container
    and some additional information, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Of all the information listed here, this is the most important to note:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason why this information is important is simple: that address will be
    the address that you''ll need to open in your browser to see your working Rails
    application. However, it is still too early to do that, since we still need to
    install Ruby 2.5.0 and Rails 5.1.5.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ruby 2.5.0 and Rails 5.1.5 on Codeanywhere
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have completed the container setup, click the link to the Editor,
    and you can get started installing Ruby 2.5.0 and Rails 5.1.5\. Detailed instructions
    on how to do this can be found in the excellent online guide at the gorails.com
    website, at the following address: [https://gorails.com/setup/ubuntu/14.04](https://gorails.com/setup/ubuntu/14.04).'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we'll just list all the commands that need to be run in the console, as
    a quick overview. Note that the following commands can also be found in the code
    files that accompany this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that, at a certain point, you will need to run the command `rbenv install
    2.5.0`, which will make the console seem frozen. To have a better idea of what
    is happening, you can run this command with the following flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Running this flag with the `rbenv install` command will turn on verbose logging
    so that you can see the progress of the installation in more detail, and not wonder
    if the app is doing anything at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete list of commands that should be run is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have installed all the prerequisites, we'll install a Rails app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a brand new Rails project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install a new Rails app, your `bash` needs to be inside the `workspace`
    folder. To verify you are in the right location, you should see the following
    output in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, simply run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that the word `simple` can be anything that you want. The word you choose
    to use will determine the folder name inside of which your Rails 5 app will be
    installed.
  prefs: []
  type: TYPE_NORMAL
- en: Next, in the left-hand pane of the Codeanywhere app, right-click on the bottom-most
    entry, which reads `elmrails`, and in the contextual menu that pops up, click
    the 'refresh' command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Doing this will result in the tree structure being refreshed, and now you''ll
    be able to see another folder, titled `simple`, listed inside the `elmrails` project
    folder, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Clicking on the `simple` folder''s title inside the left-hand panel will toggle
    the visibility of the folder structure. If you click it to twirl it open, you''ll
    see the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you are sure that you have successfully installed Rails, it''s time
    to take it for a spin. Point your bash to the simple folder by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, type the command to spin up a Rails server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now''s the time to look at our boilerplate Rails app running online. To do
    that, we''ll need to reference the information we got after our Ubuntu container
    was created, that is, we need to check for the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that when we ran the `rails s` command, the console output ended with
    this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'That means that our Rails app is being served at the address that satisfies
    the following pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you open a new tab in your browser and point it at this address, you''ll
    see the Rails 5 splash screen greeting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we have successfully installed Rails. Not only that, but by
    providing the `--webpack=elm` flag to our Rails project creation command, we successfully
    integrated Elm with our new Rails project.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s why we had to go through a relatively long installation of Rails 5.1.5
    at the beginning of this chapter: to have a simple, painless integration of Rails
    and Elm.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll start modifying our Rails app and start using Elm
    inside of it.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Elm with Rails 5.1.5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When running a `rails new <projectname>` command without passing any additional
    flags, the resultant Rails app that gets created is a default one, without Elm
    integration. It might be a good exercise to delete the folder of the new Rails
    project we made in the previous step and run a new Rails project creation command,
    this time without passing flags. However, to avoid the waste of time involved
    in doing such a thing, we are going to list here some of the additional files
    that get created when we pass the `--webpack=elm` flag to the `rails new <projectname>`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: To understand how Elm integrates with Rails, the best place to start is the
    `app/javascript` folder, and inside that folder, the `hello_elm.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the contents of `hello_elm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This JavaScript file will take the view rendered by the `Main.elm` file and
    embed it inside a `div` element.
  prefs: []
  type: TYPE_NORMAL
- en: But where will this `div` element live? That is entirely up to us.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the first three lines of `hello_elm.js` are actually one-line JavaScript
    comments, and they give us exact instructions on how to render the Elm-powered
    view in the layout file of our Rails site.
  prefs: []
  type: TYPE_NORMAL
- en: As the commented-out instruction reads, we need to go to the default layout
    view of our Rails app, which is `application.html.erb`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full path to this file is `simple/app/views/layouts/application.html.erb`. 
    So let''s open this file and add `javascript_pack_tag` to its `head`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to hook everything up, we need to make `application#index` the default
    route that our Rails app will open. We will do that by updating the `routes.rb`
    file, located inside the `simple/config/` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this file, we only added the `root 'application#index'` route, just above
    the last line of the file. Doing this says to our Rails app that we want to route
    it to the application controller's index action as the default route, or *root*
    route.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we refresh our running app in the browser, at this point we will get the
    following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: That means that we need to add the index view for our `ApplicationController`.
    To do that, let's simply create a new folder inside the `views` folder. We'll
    call this new folder `application`. Next, inside the `application` folder, let's
    create a new file, which we'll call `index.html.erb`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that in order to create folders and files in Codeanywhere, you need to
    right-click on the parent folder that should contain them. Then, choose either
    the *Create Folder* or the *Create File* command, depending on your needs. Once
    you make your choice, a modal will appear, and you will be able to input the name
    of your file or folder, depending on the command you picked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open the newly-created `index.html.erb` file and type only one line of
    code inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Next, save everything and refresh the page in which you are viewing your Rails
    app (which had the Rails splash screen).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open the bash tab that has your Rails server running. Notice that the
    console is outputting the following messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'These messages mean that the webpacker is at work, compiling your Elm code
    and integrating it inside your Rails project. As you can see from the output,
    it took about 188 seconds for this compilation to complete. Once it''s done, you
    can refresh the page in which you are previewing your served Rails app, and now,
    instead of the default Rails app splash screen, you should see the following message
    in the upper-center part of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Having your Rails app serve this message in the default route means that you
    have successfully integrated Elm with Rails.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have successfully integrated Elm with our Rails app, let's further
    improve on our results by building something a bit more complex.
  prefs: []
  type: TYPE_NORMAL
- en: Adding our Elm weather app to our Rails app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will improve our Rails app by adding the Elm weather app
    to it. We will use the finished version of the weather app, as we had it at the
    end of [Chapter 8](5fdf7617-7e2c-4ff4-a7eb-28033a281ad5.xhtml), *Adding More Features
    to the Weather App*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, let''s open the `elm-package.json` file in the root of our Rails
    app, and update it with additional dependencies, so that the complete updated
    file looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to install the packages. We can''t install them directly via
    Elm, but rather by using Yarn. The command we need to run is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The console will print out the following to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to make a new file, which we will call `WeatherApp.elm`. Next,
    we can simply copy and paste the complete weather app into this file. The only
    change we need to make to it is in the first line, which needs to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The complete code for the `WeatherApp.elm` file can be found in the code files
    for [Chapter 8](5fdf7617-7e2c-4ff4-a7eb-28033a281ad5.xhtml), *Adding More Features
    to the Weather App*, (since we are using the code that can be found in the `Main.elm`
    file of the improved weather app we completed at the end of [Chapter 8](5fdf7617-7e2c-4ff4-a7eb-28033a281ad5.xhtml),
    *Adding More Features to the Weather App*).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we also need to add the JS file that will be the entry point for our `WeatherApp.elm`
    file. We'll name this JS file similar to `hello_elm.js`, meaning we'll separate
    the words using the underscore character, and we will not capitalize any letters
    in the filename. So, create a new file inside the `javascript/packs` folder and
    call it `weather_app.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the following code to this new file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to update our `views/application/index.html.erb` file by adding
    the `javascript_pack_tag` and passing it a `div` with the `id` attribute of `weather-app`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can restart our Rails server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that, this time, webpacker is going to take quite some time to compile
    all the newly-added packages (`Http`, `Material`, and `Round`). You should see
    this message in the console after running the `rails s` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, after the compilation is complete, we will see this message logged
    to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If we open our Rails app in the browser and refresh it, we will see the following
    web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e2957c8-074e-487a-b670-9a05826a00db.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, our Rails-powered website currently has three parts: a static
    `h1` heading and two separate Elm-powered apps, the weather app and the hello
    app.'
  prefs: []
  type: TYPE_NORMAL
- en: This means that we have successfully added two separate Elm apps to our Rails
    app. This way, we can slowly start introducing Elm widgets to an existing Rails-powered
    website. This is great if we work in a team of developers who do not know Elm
    but want to see how it integrates with an existing project and learn from it.
    Another possible case where this approach would be useful is if the management
    in our company decides to give Elm a try without going all in.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we covered the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a basic Rails 5.1.5 app using Codeanywhere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Ruby 2.5.0 and Rails 5.1.5 on Codeanywhere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a brand new Rails project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Elm with Rails 5.1.5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding our Elm weather app to our Rails app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Armed with this knowledge, we can start adding standalone Elm-powered modules
    to our Rails apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'This brings us to the end of this book. However, your journey with Elm is just
    beginning. Here are some useful resources if you are interested in learning more
    about this excellent language (the following links are listed in no particular
    order):'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/bryanjenningz/25-elm-examples](https://github.com/bryanjenningz/25-elm-examples)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.smashingmagazine.com/2018/01/learning-elm-drum-sequencer-part-1/](https://www.smashingmagazine.com/2018/01/learning-elm-drum-sequencer-part-1/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://elmprogramming.com/](http://elmprogramming.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.reddit.com/r/elm/](https://www.reddit.com/r/elm/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://elmlang.herokuapp.com/](http://elmlang.herokuapp.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.elmlog.com/meetup_groups](https://www.elmlog.com/meetup_groups)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://discourse.elm-lang.org/](https://discourse.elm-lang.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visit elmcasts.com
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: And finally, a brand new project started by the author of this book. A website
    dedicated to learning Elm.
  prefs: []
  type: TYPE_NORMAL
- en: In the tradition of sites such as [railscasts.com](http://railscasts.com) and
    [laracasts.com](http://laracasts.com), I've decided to name it [**elmcasts.com**](http://elmcasts.com).
    The website should be up and running by the time this book is on the market.
  prefs: []
  type: TYPE_NORMAL
