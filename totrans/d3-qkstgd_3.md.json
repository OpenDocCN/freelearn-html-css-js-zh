["```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title></title>\n    </head>\n    <body>\n    </body>\n</html>\n```", "```js\n<body>    \n    <script src=\"img/d3.v5.min.js\"></script>\n</body>\n```", "```js\nconsole.log('this works');\nconsole.log(d3);\n```", "```js\n<body>\n    <script src=\"img/d3.v5.min.js\"></script>\n    <script src=\"img/app.js\" charset=\"utf-8\"></script>\n</body>\n```", "```js\n<body>\n    <svg></svg>\n    <script src=\"img/d3.v5.min.js\"></script>\n    <script src=\"img/app.js\" charset=\"utf-8\"></script>\n</body>\n```", "```js\nvar WIDTH = 800;\nvar HEIGHT = 600;\n```", "```js\nvar WIDTH = 800;\nvar HEIGHT = 600;\n\nd3.select('svg');\n```", "```js\nd3.select('svg')\n    .style('width', WIDTH)\n    .style('height', HEIGHT);\n```", "```js\nvar WIDTH = 800;\nvar HEIGHT = 600;\n\nvar runs = [\n    {\n        id: 1,\n        date: 'October 1, 2017 at 4:00PM',\n        distance: 5.2\n    },\n    {\n        id: 2,\n        date: 'October 2, 2017 at 5:00PM',\n        distance: 7.0725\n    },\n    {\n        id: 3,\n        date: 'October 3, 2017 at 6:00PM',\n        distance: 8.7\n    }\n];\n\nd3.select('svg')\n    .style('width', WIDTH)\n    .style('height', HEIGHT);\n```", "```js\n<svg>\n    <circle/>\n    <circle/>\n    <circle/>\n</svg>\n```", "```js\ncircle {\n    r:5;\n    fill: black;\n}\nsvg {\n    border: 1px solid black;\n}\n```", "```js\n<head>\n    <meta charset=\"utf-8\">\n    <title></title>\n    <link rel=\"stylesheet\" href=\"app.css\">\n</head>\n```", "```js\nvar yScale = d3.scaleLinear(); //create the scale \n```", "```js\nyScale.domain([0, 10]); //minimum data value is 0, max is 10\n```", "```js\n//HEIGHT corresponds to min data value\n//0 corresponds to max data value\nyScale.range([HEIGHT, 0]); \n```", "```js\nvar yScale = d3.scaleLinear(); //create the scale\nyScale.domain([0, 10]); //minimum data value is 0, max is 10\n//HEIGHT corresponds to min data value\n//0 corresponds to max data value\nyScale.range([HEIGHT, 0]);\n```", "```js\n//you can get the domain whenever you want like this\nconsole.log(yScale.domain());\n//you can get the range whenever you want like this:\nconsole.log(yScale.range());\n```", "```js\nconsole.log(yScale(5)); //get a visual point from a data value\n```", "```js\n//get a data values from a visual point\nconsole.log(yScale.invert(450));\n```", "```js\nyScale.range([HEIGHT, 0]);\nyScale.domain([0, 10]);\n//selectAll is like select,\n//but it selects all elements that match the query string\nd3.selectAll('circle').data(runs);\n```", "```js\nd3.selectAll('circle').attr('cy', 300);\n```", "```js\nd3.selectAll('circle').data(runs)\n    .attr('cy', function(datum, index){\n        return yScale(datum.distance);\n    });\n```", "```js\n//scaleTime maps date values with numeric visual points\nvar xScale = d3.scaleTime();\nxScale.range([0,WIDTH]); \nxScale.domain([new Date('2017-10-1'), new Date('2017-10-31')]); console.log(xScale(new Date('2017-10-28'))); console.log(xScale.invert(400));\n```", "```js\n//this format matches our data in the runs array\nvar parseTime = d3.timeParse(\"%B%e, %Y at %-I:%M%p\"); \nconsole.log(parseTime('October 3, 2017 at 6:00PM'));\nvar formatTime = d3.timeFormat(\"%B%e, %Y at %-I:%M%p\");\n//this format matches our data in the runs array \nconsole.log(formatTime(new Date()));\n```", "```js\n//use parseTime to convert the date string property on the datum object to a Date object.\n//xScale then converts this to a visual value\nd3.selectAll('circle')\n    .attr('cx', function(datum, index){\n        return xScale(parseTime(datum.date));\n    });\n```", "```js\nvar yScale = d3.scaleLinear(); //create the scale\nyScale.range([HEIGHT, 0]); //set the visual range (for example 600 to 0)\nyScale.domain([0, 10]); //set the data domain (for example 0 to 10)\n```", "```js\nvar yScale = d3.scaleLinear(); //create the scale\nyScale.range([HEIGHT, 0]); //set the visual range (for example 600 to 0)\nvar yMin = d3.min(runs, function(datum, index){\n    //compare distance properties of each item in the data array\n    return datum.distance; \n})\nvar yMax = d3.max(runs, function(datum, index){\n    //compare distance properties of each item in the data array\n    return datum.distance;\n})\n//now that we have the min/max of the data set for distance,\n//we can use those values for the yScale domain\nyScale.domain([yMin, yMax]); \nconsole.log(yScale.domain());\n```", "```js\nvar yMin = d3.min(runs, function(datum, index){\n    //compare distance properties of each item in the data array\n    return datum.distance; \n})\n```", "```js\nvar yScale = d3.scaleLinear(); //create the scale\nyScale.range([HEIGHT, 0]); //set the visual range (for example 600 to 0)\nvar yMin = d3.min(runs, function(datum, index){\n    //compare distance properties of each item in the data array\n    return datum.distance;\n})\nvar yMax = d3.max(runs, function(datum, index){\n    //compare distance properties of each item in the data array\n    return datum.distance; \n})\n//now that we have the min/max of the data set for distance\n//we can use those values for the yScale domain\nyScale.domain([yMin, yMax]);\nconsole.log(yScale.domain());\n```", "```js\nvar yScale = d3.scaleLinear(); //create the scale\nyScale.range([HEIGHT, 0]); //set the visual range (for example 600 to 0)\nvar yDomain = d3.extent(runs, function(datum, index){\n    //compare distance properties of each item in the data array\n    return datum.distance; \n})\nyScale.domain(yDomain);\n```", "```js\n//scaleTime maps date values with numeric visual points\nvar xScale = d3.scaleTime(); \nxScale.range([0,WIDTH]);\nxScale.domain([new Date('2017-10-1'), new Date('2017-10-31')]);\n\n//this format matches our data in the runs array\nvar parseTime = d3.timeParse(\"%B%e, %Y at %-I:%M%p\");\n//this format matches our data in the runs array \nvar formatTime = d3.timeFormat(\"%B%e, %Y at %-I:%M%p\"); \n```", "```js\nvar parseTime = d3.timeParse(\"%B%e, %Y at %-I:%M%p\");\nvar formatTime = d3.timeFormat(\"%B%e, %Y at %-I:%M%p\");\nvar xScale = d3.scaleTime();\nxScale.range([0,WIDTH]);\nvar xDomain = d3.extent(runs, function(datum, index){\n    return parseTime(datum.date);\n});\nxScale.domain(xDomain);\n```", "```js\n<body>\n    <svg></svg>\n    <script src=\"img/d3.v5.min.js\"></script>\n    <script src=\"img/app.js\" charset=\"utf-8\"></script>\n</body>\n```", "```js\nd3.selectAll('circle').data(runs)\n    .attr('cy', function(datum, index){\n        return yScale(datum.distance);\n    });\n```", "```js\n//since no circles exist, we need to select('svg')\n//so that d3 knows where to append the new circles\nd3.select('svg').selectAll('circle')\n    .data(runs) //attach the data as before\n    //find the data objects that have not yet \n    //been attached to visual elements\n    .enter()\n    //for each data object that hasn't been attached,\n    //append a <circle> to the <svg>\n    .append('circle'); \n\nd3.selectAll('circle')\n    .attr('cy', function(datum, index){\n        return yScale(datum.distance);\n    });\n```", "```js\nd3.select('svg').selectAll('circle')\n```", "```js\n//pass the appropriate scale in as a parameter\nvar bottomAxis = d3.axisBottom(xScale);\n```", "```js\nd3.select('svg')\n    .append('g') //put everything inside a group\n    .call(bottomAxis); //generate the axis within the group\n```", "```js\n//pass the appropriate scale in as a parameter\nvar bottomAxis = d3.axisBottom(xScale); \nd3.select('svg')\n    .append('g') //put everything inside a group\n    .call(bottomAxis) //generate the axis within the group\n    //move it to the bottom\n    .attr('transform', 'translate(0,'+HEIGHT+')'); \n```", "```js\nsvg {\n    overflow: visible;    \n}\n```", "```js\nvar leftAxis = d3.axisLeft(yScale);\nd3.select('svg')\n    .append('g')\n    //no need to transform, since it's placed correctly initially\n    .call(leftAxis); \n```", "```js\nbody {\n    margin: 20px 40px;\n}\n```", "```js\n<body>\n    <svg></svg>\n    <table>\n        <thead>\n            <tr>\n                <th>id</th>\n                <th>date</th>\n                <th>distance</th>\n            </tr>\n        </thead>\n        <tbody>\n        </tbody>\n    </table>\n    <script src=\"img/d3.v5.min.js\"></script>\n    <script src=\"img/app.js\" charset=\"utf-8\"></script>\n</body>\n```", "```js\nvar createTable = function(){\n    for (var i = 0; i < runs.length; i++) {\n        var row = d3.select('tbody').append('tr');\n        row.append('td').html(runs[i].id);\n        row.append('td').html(runs[i].date);\n        row.append('td').html(runs[i].distance);\n    }\n}\n\ncreateTable();\n```", "```js\ntable, th, td {\n   border: 1px solid black;\n}\nth, td {\n    padding:10px;\n    text-align: center;\n}\n```", "```js\nsvg {\n    overflow: visible;\n    margin-bottom: 50px;\n}\n```"]