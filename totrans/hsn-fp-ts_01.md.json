["```js\nfunction isIndexPage() {\n  return window.location.pathname === \"/\";\n}\n```", "```js\nfunction isIndexPage(pathname: string) {\n  return pathname === \"/\";\n}\n```", "```js\nfunction shouldReturnTrueWhenPathIsIndex(){\n    let expected = true;\n    let result = isIndexPage(\"/\");\n    if (expected !== result) {\n        throw new Error('Expected ${expected} to equals ${result}');\n    }\n}\n\nfunction shouldReturnFalseWhenPathIsNotIndex() {\n    let expected = false;\n    let result = isIndexPage(\"/someotherpage\");\n    if (expected !== result) {\n        throw new Error('Expected ${expected} to equals ${result}');\n    }\n}\n```", "```js\ninterface User {\n    ageInMonths: number;\n    name: string;\n}\n\nfunction findUserAgeByName(users: User[], name: string): number {\n    if (users.length == 0) {\n        throw new Error(\"There are no users!\");\n    }\n    const user = users.find(u => u.name === name);\n    if (!user) {\n        throw new Error(\"User not found!\");\n    } else {\n        return user.ageInMonths;\n    }\n}\n```", "```js\nconst users = [\n    { ageInMonths: 1, name: \"Remo\" },\n    { ageInMonths: 2, name: \"Leo\" }\n];\n\n// The variable userAge1 is as number\nconst userAge1 = findUserAgeByName(users, \"Remo\"); \nconsole.log('Remo is ${userAge1 / 12} years old!');\n\n// The variable userAge2 is a number but the function throws!\nconst userAge2 = findUserAgeByName([], \"Leo\"); // Error\nconsole.log('Leo is ${userAge2 / 12} years old!');\n```", "```js\nfunction safeFindUserAgeByName(users: User[], name: string): Promise<number> {\n    if (users.length == 0) {\n        return Promise.reject(new Error(\"There are no users!\"));\n    }\n    const user = users.find(u => u.name === name);\n    if (!user) {\n        return Promise.reject(new Error(\"User not found!\"));\n    } else {\n        return Promise.resolve(user.ageInMonths);\n    }\n}\n\nsafeFindUserAgeByName(users, \"Remo\")\n    .then(userAge1 => console.log('Remo is ${userAge1 / 12} years old!'));\n\nsafeFindUserAgeByName([], \"Leo\") // Error\n    .then(userAge1 => console.log('Leo is ${userAge1 / 12} years old!'));\n```", "```js\nlet result = isIndexPage(\"/\");\n```", "```js\nlet result = true;\n```", "```js\ninterface Result {\n id: number;\n result:number;\n}\n\nconst results: Result[] = [\n { id: 1, result: 64 },\n { id: 2, result: 87 },\n { id: 3, result: 89 }\n];\n\nfunction avg(arr: Result[]) {\n let total = 0;\n for (var i = 0; i < arr.length; i++) {\n total += arr[i].result;\n }\n return total / arr.length;\n}\n\nconst resultsAvg = avg(results);\nconsole.log(resultsAvg);\n```", "```js\ninterface Result {\n    id: number;\n    result:number;\n}\n\nconst results: Result[] = [\n    { id: 1, result: 64 },\n    { id: 2, result: 87 },\n    { id: 3, result: 89 }\n];\n\nconst add = (a: number, b: number) => a + b;\nconst division = (a: number, b: number) => a / b;\n\nconst avg = (arr: Result[]) =>\n    division(arr.map(a => a.result).reduce(add, 0), arr.length)\n\nconst resultsAvg = avg(results);\nconsole.log(resultsAvg);\n```", "```js\nconst add = (a: number, b: number) => a + b;\nconst addMany = (...args: number[]) => args.reduce(add, 0);\nconst div = (a: number, b: number) => a / b;\nconst mapProp = <T>(k: keyof T, arr: T[]) => arr.map(a => a[k]);\nconst avg = (arr: number[]) => div(addMany(...arr), arr.length);\n\ninterface Result {\n    id: number;\n    result:number;\n}\n\nconst results: Result[] = [\n    { id: 1, result: 64 },\n    { id: 2, result: 87 },\n    { id: 3, result: 89 }\n];\n\nconst resultsAvg = avg(mapProp(\"result\", results));\nconsole.log(resultsAvg);\n```", "```js\nconst resultsAvg = avg(mapProp(\"result\", results));\n```", "```js\nclass ImmutableList<T> {\n    private readonly _list: ReadonlyArray<T>;\n    private _deepCloneItem(item: T) {\n        return JSON.parse(JSON.stringify(item)) as T;\n    }\n    public constructor(initialValue?: Array<T>) {\n        this._list = initialValue || [];\n    }\n    public add(newItem: T) {\n        const clone = this._list.map(i => this._deepCloneItem(i));\n        const newList = [...clone, newItem];\n        const newInstance = new ImmutableList<T>(newList);\n        return newInstance;\n    }\n    public remove(\n        item: T,\n        areEqual: (a: T, b: T) => boolean = (a, b) => a === b\n    ) {\n        const newList = this._list.filter(i => !areEqual(item, i))\n                            .map(i => this._deepCloneItem(i));\n        const newInstance = new ImmutableList<T>(newList);\n        return newInstance;\n    }\n    public get(index: number): T | undefined {\n        const item = this._list[index];\n        return item ? this._deepCloneItem(item) : undefined;\n    }\n    public find(filter: (item: T) => boolean) {\n        const item = this._list.find(filter);\n        return item ? this._deepCloneItem(item) : undefined;\n    }\n}\n```", "```js\ninterface Hero { \n    name: string;\n    powers: string[];\n}\n\nconst heroes = [\n    {\n        name: \"Spiderman\",\n        powers: [\n            \"wall-crawling\",\n            \"enhanced strength\",\n            \"enhanced speed\",\n            \"spider-Sense\"\n        ]\n    },\n    {\n        name: \"Superman\",\n        powers: [\n            \"flight\",\n            \"superhuman strength\",\n            \"x-ray vision\",\n            \"super-speed\"\n        ]\n    }\n];\n\nconst hulk = {\n    name: \"Hulk\",\n    powers: [\n        \"superhuman strength\",\n        \"superhuman speed\",\n        \"superhuman Stamina\",\n        \"superhuman durability\"\n    ]\n};\n```", "```js\nconst myList = new ImmutableList<Hero>(heroes);\nconst myList2 = myList.add(hulk);\nconst result1 = myList.find((h => h.name === \"Hulk\")); \nconst result2 = myList2.find((h => h.name === \"Hulk\"));\nconst areEqual = myList2 === myList;\n\nconsole.log(result1); // undefined\nconsole.log(result2); // { name: \"Hulk\", powers: Array(4) }\nconsole.log(areEqual); // false\n```", "```js\nfunction find<T>(arr: T[], filter: (i: T) => boolean) {\n    return arr.filter(filter);\n}\n\nfind(heroes, (h) => h.name === \"Spiderman\");\n```", "```js\nfunction find<T>(filter: (i: T) => boolean) {\n    return (arr: T[]) => {\n        return arr.filter(filter);\n    }\n}\n\nconst findSpiderman = find((h: Hero) => h.name === \"Spiderman\");\nconst spiderman = findSpiderman(heroes);\n```", "```js\nconst findSpiderman = find((h: Hero) => h.name === \"SPiderman\");\n```", "```js\nconst log = function(arg: any) { console.log(arg); };\n```", "```js\nconst log = (arg: any) => console.log(arg);\n```", "```js\nfunction isNull<T>(a: T|null) {\n    return (a === null);\n}\n```", "```js\nfunction add(a: number, b: number) {\n    return a + b;\n}\n```", "```js\nfunction addMany(...numbers: number[]) {\n    numbers.reduce((p, c) => p + c, 0);\n}\n```", "```js\nfunction addDelay(msg: string, ms: number) {\n    return () => {\n        setTimeout(() => {\n            console.log(msg);\n        }, ms);\n    };\n}\n\nconst delayedSayHello = addDelay(\"Hello world!\", 500);\ndelayedSayHello(); // Prints \"Hello world!\" (after 500 ms)\n```", "```js\nfunction addDelay(func: () => void, ms: number) {\n    return () => {\n        setTimeout(() => {\n            func();\n        }, ms);\n    };\n}\n\nfunction sayHello() {\n    console.log(\"Hello world!\");\n}\n\nconst delayedSayHello = addDelay(sayHello, 500);\ndelayedSayHello(); // Prints \"Hello world!\" (after 500 ms)\n```", "```js\nfunction lazyFind<T>(arr: T[], filter: (i: T) => boolean): T {\n\n    let hero: T | null = null;\n\n    const proxy = new Proxy(\n        {},\n        {\n            get: (obj, prop) => {\n                console.log(\"Filtering...\");\n                if (!hero) {\n                    hero = arr.find(filter) || null;\n                }\n                return hero ? (hero as any)[prop] : null;\n            }\n        }\n    );\n\n    return proxy as any;\n}\n```", "```js\nconst heroes = [\n    {\n        name: \"Spiderman\",\n        powers: [\n            \"wall-crawling\",\n            \"enhanced strength\",\n            \"enhanced speed\",\n            \"spider-Sense\"\n        ]\n    },\n    {\n        name: \"Superman\",\n        powers: [\n            \"flight\",\n            \"superhuman strength\",\n            \"x-ray vision\",\n            \"super-speed\"\n        ]\n    }\n];\n\nconsole.log(\"A\");\nconst spiderman = lazyFind(heroes, (h) => h.name === \"Spiderman\");\nconsole.log(\"B\");\nconsole.log(spiderman.name);\nconsole.log(\"C\");\n\n/*\n    A\n    B\n    Filtering...\n    Spiderman\n    C\n*/\n```"]