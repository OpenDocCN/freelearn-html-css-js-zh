["```js\n$ npm install --save-dev jasmine\n\n```", "```js\n// specs/mathSpec.js\t\ndescribe('Basic mathematicfunctions', () => {\nit('should result 4 the sum of 2 + 2', () => {\n  });\n\nit('should result 1 the substract of 3 - 2', () => {\n  });\n\nit('should result 3 the division of 9 / 3', () => {\n  });\n\nit('should throw an error when divide by zero', () => {\n  });\n});\n```", "```js\n// app/js/math.js\nvar math = {\nsum(a, b) {\nreturn a + b;\n  },\n\nsubstract(a, b) {\nreturn a - b;\n  },\n\ndivide(a, b) {\nif (b === 0) {\nthrow new Error('Can not divide by zero');\n    }\n\nreturn a / b;\n  }\n};\n\nmodule.exports = math;\n```", "```js\nexpect(sum(2, 2)).toEqual(4);\n```", "```js\n// spec/mathSpec.js\nvar math = require('../app/js/math');\n\ndescribe('Basic mathematic functions', () => {\nit('should result 4 the sum of 2 + 2', () => {\nexpect(math.sum(2, 2)).toBe(4);\n  });\n\nit('should result 1 the substract of 3 - 2', () => {\nexpect(math.substract(3, 2)).toBe(1);\n  });\n\nit('should result 3 the division of 9 / 3', () => {\nexpect(math.divide(9, 3)).toBe(3);\n  });\n\nit('should throw an error when divide by zero', () => {\nexpect(() =>math.divide(9, 0)).toThrowError();\n  });\n});\n```", "```js\n// spec/run.js\nvar Jasmine = require('jasmine');\nvar jasmine = new Jasmine();\n\njasmine.loadConfig({\nspec_dir: 'spec',\nspec_files: [\n    '**/*[sS]pec.js'\n  ]\n});\n\njasmine.execute();\n```", "```js\n$ node spec/run.js\nStarted\n....\n\n4 specs, 0 failures\nFinished in 0.008 seconds\n\n```", "```js\n$ node spec/run.js\nStarted\nF...\n\nFailures:\n1) Basic mathematic functions should result 4 the sum of 2 + 2\n Message:\n Expected 4 to be 5.\n Stack:\n Error: Expected 4 to be 5.\nat Object.<anonymous>(/path/to/your/project/spec/mathSpec.js:5:28)\n\n4 specs, 1 failure\nFinished in 0.009 seconds\n\n```", "```js\nvar math = {\n  // ...\n\nasyncSum(a, b, callback) {\n    // Will respond after 1.5 seconds.\nsetTimeout(function() {\ncallback(a + b);\n    }, 1500);\n  },\n\n  // ...\n};\n```", "```js\nmath.asyncSum(2, 2, result => {\n  // After 1500ms result will be equal to 4\n});\n```", "```js\nit('sums two numbers asynchronously', done => {\nmath.asyncSum(2, 2, function(result) {\nexpect(result).toEqual(4);\ndone();\n  });\n});\n```", "```js\n$ npm install --save-dev karma karma-jasmine karma-browserify karma-chrome-launcher karma-spec-reporter\n\n```", "```js\n// Karma configuration\n// http://karma-runner.github.io/0.12/config/configuration-file.html\n\nmodule.exports = function(config) {\n  'use strict';\n\nconfig.set({\n    // enable / disable watching file and executing tests whenever\n    // any file changes\nautoWatch: true,\n\n    // base path, that will be used to resolve files and exclude\nbasePath: '',\n\n    // testing framework to use (jasmine/mocha/qunit/...)\nframeworks: ['browserify', 'jasmine'],\n\n    // list of files / patterns to load in the browser\nfiles: [\n      'spec/**/*Spec.js'\n    ],\n\n    // preprocess matching files before serving them to \n    // the browser available preprocessors:\n    // https://npmjs.org/browse/keyword/karma-preprocesso\npreprocessors: {\n      'spec/**/*Spec.js': ['browserify']\n    },\n\n    // Cobfigure how to bundle the test files with Browserify\nbrowserify: {\ndebug: true,\ntransform: ['jstify'],\nextensions: ['.js', '.tpl']\n    },\n\n    // report on console and growl if available\n    //\n    // More info about growl notifications on\n    // http://mattn.github.io/growl-for-linux/\n    // http://growl.info/\nreporters: ['spec'],\n\n    // list of files / patterns to exclude\nexclude: [],\n\n    // web server port\nport: 9876,\n\n    // enable / disable colors in the output (reporters and logs)\ncolors: true,\n\n    // level of logging\n    // possible values:\n    // LOG_DISABLE || LOG_ERROR || LOG_WARN || \n    // LOG_INFO || LOG_DEBUG\nlogLevel: config.LOG_INFO,\n\n    // Continuous Integration mode\n    // if true, it capture browsers, run tests and exit\nsingleRun: false,\n\n    // Start these browsers, currently available:\n    // - Chrome\n    // - ChromeCanary\n    // - Firefox\n    // - Opera\n    // - Safari (only Mac)\n    // - PhantomJS\n    // - IE (only Windows)\nbrowsers: ['Chrome']\n});\n};\n```", "```js\n$ ./node_modules/karma/bin/karma start \n\n```", "```js\n// configuration of Gulp\n\n```", "```js\n// spec/apps/contacts/models/contactSpec.js\nvar Contact = require('../../../../app/js/apps/contacts/models/contact');\n\ndescribe('Contact model', () => {\ndescribe('creating a new contact', () => {\nit('has the default values', () => {\nvar contact = new Contact();\n\nexpect(contact.get('name')).toEqual('');\nexpect(contact.get('phone')).toEqual('');\nexpect(contact.get('email')).toEqual('');\nexpect(contact.get('address1')).toEqual('');\nexpect(contact.get('address2')).toEqual('');\nexpect(contact.get('avatar')).toEqual(null);\n    });\n  });\n\nit('has the rigthurl', () => {\nvar contact = new Contact();\nexpect(contact.url()).toEqual('/api/contacts');\n  });\n});\n```", "```js\n// spec/apps/contacts/collections/contactCollectionSpec.js\nvarContactCollection = require('../../../../app/js/apps/contacts/collections/contactCollection');\n\ndescribe('Contac collection', () => {\nit('has the rigthurlRoot', () => {\nvar collection = new ContactCollection();\nexpect(collection.url).toEqual('/api/contacts');\n  });\n});\n```", "```js\nvar Backbone = require('backbone');\nvar ContactForm = require('../../../../app/js/apps/contacts/views/contactForm');\n\ndescribe('Contact form', () => {\nvar fakeContact;\n\nbeforeEach(() => {\nfakeContact = new Backbone.Model({\nname: 'John Doe',\nfacebook: 'https://www.facebook.com/john.doe',\ntwitter: '@john.doe',\ngithub: 'https://github.com/johndoe',\ngoogle: 'https://plus.google.com/johndoe'\n    });\n  });\n\nit('has the rigth class', () => {\nvar view = new ContactForm({model: fakeContact});\nexpect(view.className).toEqual('form-horizontal');\n  });\n\nit('renders the rigth HTML', () => {\nvar view = new ContactForm({model: fakeContact});\n\nview.render();\n\nexpect(view.$el.html()).toContain(fakeContact.get('name'));\nexpect(view.$el.html()).toContain(fakeContact.get('twitter'));\nexpect(view.$el.html()).toContain(fakeContact.get('github'));\nexpect(view.$el.html()).toContain(fakeContact.get('google'));\nexpect(view.$el.html())\n.toContain(fakeContact.get('facebook'));\n  });\n});\n```", "```js\nexpect(view.$el.find('#name').val())\n.toContain(fakeContact.get('name'));\n```", "```js\nit('triggers a form:save event when save button is cliecked', () => {\nvar view = new ContactForm({model: fakeContact});\nvar callback = jasmine.createSpy('callback');\n\nview.on('form:save', callback);\nview.render();\n\n// Emulate a user click\nview.$el.find('#save').trigger('click');\n\nexpect(callback).toHaveBeenCalled();\n});\n```", "```js\nexpect(callback).toHaveBeenCalledWith(mockContact);\n```", "```js\nit('updates the model when the save button is clicked', () => {\nvar view = new ContactForm({model: fakeContact});\nvar callback = jasmine.createSpy('callback');\nvarexpectedValues = {\nname: 'Jane Doe',\nfacebook: 'https://www.facebook.com/example',\ntwitter: '@example',\ngithub: 'https://github.com/example',\ngoogle: 'https://plus.google.com/example'\n  };\n\nview.on('form:save', callback);\nview.render();\n\n  // Change the input fields\n  view.$el.find('#name').val(expectedValues.name);\nview.$el.find('#facebook').val(expectedValues.facebook);\nview.$el.find('#twitter').val(expectedValues.twitter);\nview.$el.find('#github').val(expectedValues.github);\nview.$el.find('#google').val(expectedValues.google);\n\n  // Emulate a change events on all input fields\nview.$el.find('input').trigger('change');\n\n  // Emulate a user click\nview.$el.find('#save').trigger('click');\n\n// Get the argument passed to the callback function\nvar callArgs = callback.calls.argsFor(0);\nvar model = callArgs[0];\n\nexpect(model.get('name')).toEqual(expectedValues.name);\nexpect(model.get('facebook')).toEqual(expectedValues.facebook);\nexpect(model.get('twitter')).toEqual(expectedValues.twitter);\nexpect(model.get('github')).toEqual(expectedValues.github);\nexpect(model.get('google')).toEqual(expectedValues.google);\n});\n```", "```js\n$ npm install --save-dev proxyquirefy\n\n```", "```js\n// ...\n\nbrowserify: {\ndebug: true,\nplugin: ['proxyquireify/plugin'],\ntransform: ['jstify'],\nextensions: ['.js', '.tpl']\n},\n\n// ...\n```", "```js\nvar proxyquire = require('proxyquireify')(require);\n```", "```js\nvar ContactViewer = proxyquire('./contacts/contactViewer');\n```", "```js\nvar targetFile = '../../app/js/apps/contacts/contactViewer';\nvar fakes = {\n'./views/ContactView': Backbone.View\n}\nvar ContactViewer = proxyquire(targetFile, fakes);\n```", "```js\n// spec/fakes/app.js\n'use strict';\n\nvar fakeRouter = {\nnavigate: jasmine.createSpy()\n};\n\nvar FakeApp = {\nrouter:  fakeRouter,\n\nnotifySuccess(message) {\nthis.lastSuccessMessage= message;\n  },\n\nnotifyError(message) {\nthis.lastErrorMessage = message;\n  },\n\nreset() {\ndeletethis.lastSuccessMessage;\ndeletethis.lastErrorMessage;\nthis.router.navigate = jasmine.createSpy();\n  }\n};\n\n_.extend(FakeApp, Backbone.Events);\n\nmodule.exports = FakeApp;\n```", "```js\n// spec/fakes/region.js\n'use strict';\n\nclass FakeRegion {\nshow(view) {\nview.render();\n  }\n}\n\nmodule.exports = FakeRegion;\n```", "```js\n// spec/apps/contacts/contactEditor.js\nvar proxyquery = require('proxyquireify')(require);\nvar Backbone = require('backbone');\n\nvar FakeRegion = require('../../fakes/region');\nvar fakes = {\n'./views/contactPreview': Backbone.View,\n'./views/phoneListView': Backbone.View,\n'./views/emailListView': Backbone.View,\n'./collections/phoneCollection': Backbone.Collection,\n'./collections/emailCollection': Backbone.Collection\n};\n\nvar ContactEditor = proxyquery('../../../app/js/apps/contacts/contactEditor', fakes);\n\ndescribe('Contact editor', () => {\nvar fakeContact;\nvar editor;\nvar region;\n\nbeforeEach(() => {\nregion = new FakeRegion();\neditor = new ContactEditor({region});\nfakeContact = new Backbone.Model({\nname: 'John Doe',\nfacebook: 'https://www.facebook.com/john.doe',\ntwitter: '@john.doe',\ngithub: 'https://github.com/johndoe',\ngoogle: 'https://plus.google.com/johndoe'\n    });\n  });\n\ndescribe('showing a contact editor', () => {\nit('renders the editor in the given region', () => {\nspyOn(region, 'show').and.callThrough();\neditor.showEditor(fakeContact);\nexpect(region.show).toHaveBeenCalled();\n    });\n  });\n});\n```", "```js\n// spec/fakes/formLayout.js\n'use strict';\n\nvar Common = require('../../app/js/common');\n\nclass FakeFormLayout extends Common.Layout {\nconstructor(options) {\nsuper(options);\nthis.template = '<div class=\"phone-list-container\" />' +\n                    '<div class=\"email-list-container\" />';\n\nthis.regions = {\nphones: '.phone-list-container',\nemails: '.email-list-container'\n    };\n  }\n}\n\nmodule.exports = FakeFormLayout;\n```", "```js\nvar FakeFormLayout = require('../../fakes/formLayout');\n\nvar fakes = {\n'./views/contactPreview': Backbone.View,\n'./views/phoneListView': Backbone.View,\n'./views/emailListView': Backbone.View,\n'./views/contactForm': FakeFormLayout,\n'./collections/phoneCollection': Backbone.Collection,\n'./collections/emailCollection': Backbone.Collection\n};\n\n// ...\n```", "```js\nclass ContactEditor {\n  // ...\n\nshowEditor(contact) {\n    // Data\nvar phonesData = contact.get('phones') || [];\nvar emailsData = contact.get('emails') || [];\nthis.phones = new PhoneCollection(phonesData);\nthis.emails = new EmailCollection(emailsData);\n\n    // Create the views\nthis.layout = new ContactFormLayout({model: contact});\nthis.phonesView = new PhoneListView({\ncollection: this.phones\n});\nthis.emailsView = new EmailListView({\ncollection: this.emails\n});\nthis.contactForm = new ContactForm({model: contact});\nthis.contactPreview = new ContactPreview({\ncontroller: this,\nmodel: contact\n    });\n\n    // Render the views\nthis.region.show(this.layout);\nthis.layout.getRegion('form').show(this.contactForm);\nthis.layout.getRegion('preview').show(this.contactPreview);\nthis.contactForm.getRegion('phones').show(this.phonesView);\nthis.contactForm.getRegion('emails').show(this.emailsView);\n\nthis.listenTo(this.contactForm, 'form:save',\nthis.saveContact);\nthis.listenTo(this.contactForm, 'form:cancel', this.cancel);\nthis.listenTo(this.contactForm, 'phone:add', this.addPhone);\nthis.listenTo(this.contactForm, 'email:add', this.addEmail);\n\nthis.listenTo(this.phonesView, 'item:phone:deleted', \n(view, phone) => {\nthis.deletePhone(phone);\n    });\nthis.listenTo(this.emailsView, 'item:email:deleted',\n (view, email) => {\nthis.deleteEmail(email);\n    });\n\n    // When avatar is selected, we can save it inmediatly if the\n    // contact already exists on the server, otherwise just\n    // remember the file selected\nthis.listenTo(this.contactPreview, 'avatar:selected',\nblob => {\nthis.avatarSelected = blob;\n\nif (!contact.isNew()) {\nthis.uploadAvatar(contact);\n      }\n    });\n  }\n\n  // ...\n}\n```", "```js\nit('binds the avatar:selected event in the contact preview', () => {\nvar expectedBlob = new Blob(['just text'], {\ntype: 'text/plain'\n});\n\neditor.showEditor(fakeContact);\n// Fake the uploadAvatar method to prevent side effects\neditor.uploadAvatar = jasmine.createSpy();\n\neditor.contactPreview.trigger('avatar:selected', expectedBlob);\nexpect(editor.avatarSelected).toEqual(expectedBlob);\n});\n```", "```js\ndescribe('Contact editor', () => {\n  // ...\ndescribe('saving a contact', () => {\nbeforeEach(() => {\njasmine.Ajax.install();\n\n      // Fake the contact url, it is not important here\n      fakeContact.url = '/fake/contact';\n\n      // Fake upload avatar, we are not testing this feature\neditor.uploadAvatar = function(contact, options) {\noptions.success();\n      };\n\neditor.showEditor(fakeContact);\n    });\n\nafterEach(() => {\njasmine.Ajax.uninstall();\nFakeApp.reset();\n    });\n  }\n}\n```", "```js\n$ npm install --save-devkarma-jasmine-ajax\n\n```", "```js\nframeworks: ['browserify', 'jasmine-ajax', 'jasmine'],\n```", "```js\nit('shows a success message when the contact is saved', () => {\neditor.saveContact(fakeContact);\n\njasmine.Ajax.requests.mostRecent().respondWith({\nstatus: '200',\ncontentType: 'application/json',\nresponseText: '{}'\n  });\n\nexpect(FakeApp.lastSuccessMessage).toEqual('Contact saved');\nexpect(FakeApp.router.navigate)\n.toHaveBeenCalledWith('contacts', true);\n});\n```", "```js\nit('shows an error message when the contact cant be saved', () => {\neditor.saveContact(fakeContact);\n\njasmine.Ajax.requests.mostRecent().respondWith({\nstatus: '400',\ncontentType: 'application/json',\nresponseText: '{}'\n  });\n\nexpect(FakeApp.lastErrorMessage)\n.toEqual('Something goes wrong');\nexpect(FakeApp.router.navigate)\n.not.toHaveBeenCalled();\n});\n```", "```js\nit('saves the model with the phones and emails added', () => {\nvar expectedPhone = {\ndescription: 'test',\nphone: '555 5555'\n  };\nvar expectedEmail = {\ndescription: 'test',\nphone: 'john.doe@example.com'\n  };\n\neditor.phones = new Backbone.Collection([expectedPhone]);\neditor.emails = new Backbone.Collection([expectedEmail]);\neditor.saveContact(fakeContact);\n\nvar requestText = jasmine.Ajax.requests.mostRecent().params;\nvar request = JSON.parse(requestText);\n\nexpect(request.phones.length).toEqual(1);\nexpect(request.emails.length).toEqual(1);\nexpect(request.phones).toContain(expectedPhone);\nexpect(request.emails).toContain(expectedEmail);\n});\n```", "```js\nit('does not save the contact if the model is not valid', () => {\n  // Emulates an invalid model\nfakeContact.isValid = function() {\nreturn false;\n  };\n\neditor.saveContact(fakeContact);\nexpect(jasmine.Ajax.requests.count()).toEqual(0);\n});\n```", "```js\nit('uploads the selected avatar if model is new', () => {\n  // Emulates a new model\nfakeContact.isNew= function() {\nreturn true;\n  };\n\neditor.uploadAvatar = jasmine.createSpy('uploadAvatar');\neditor.saveContact(fakeContact);\n\njasmine.Ajax.requests.mostRecent().respondWith({\nstatus: '200',\ncontentType: 'application/json',\nresponseText: '{}'\n  });\n\nexpect(editor.uploadAvatar).toHaveBeenCalled();\n});\n\nit('does not upload the selected avatar if model is not new', () => {\n  // Emulates a not new model\nfakeContact.isNew= function() {\nreturn false;\n  };\n\neditor.uploadAvatar = jasmine.createSpy('uploadAvatar');\neditor.saveContact(fakeContact);\n\njasmine.Ajax.requests.mostRecent().respondWith({\nstatus: '200',\ncontentType: 'application/json',\nresponseText: '{}'\n  });\n\nexpect(editor.uploadAvatar).not.toHaveBeenCalled();\n});\n```", "```js\nvar proxyquery = require('proxyquireify')(require);\n\nvar FakeApp = require('../../fakes/app');\nvar FakeRegion = require('../../fakes/region');\nvar FakeContactEditor = require('../../fakes/contactEditor');\n\nvar fakes = {\n'../../app': FakeApp,\n'./contactEditor': FakeContactEditor,\n'./contactList': {},\n'./contactViewer': {}\n};\n\nvar ContactsApp = proxyquery('../../../app/js/apps/contacts/app', fakes);\n\ndescribe('Contacts application facade', () => {\nvar app;\nvar region;\n\nfunction respond(request) {\nvar fakeResponse = {\nname: 'John Doe',\nfacebook: 'https://www.facebook.com/john.doe',\ntwitter: '@john.doe',\ngithub: 'https://github.com/johndoe',\ngoogle: 'https://plus.google.com/johndoe'\n    };\n\nrequest.respondWith({\nstatus: 200,\ncontentType: 'application/json',\nresponseText: JSON.stringify(fakeResponse)\n    });\n  }\n\nbeforeEach(() => {\nregion = new FakeRegion();\napp = new ContactsApp({region});\n\njasmine.Ajax.install();\n  });\n\nafterEach(() => {\njasmine.Ajax.uninstall();\n  });\n\ndescribe('showing contact editor', () => {\n\n  });\n});\n```", "```js\nit('fetches data from the server', () => {\napp.showContactEditorById('1');\n\nvar request = jasmine.Ajax.requests.mostRecent();\nexpect(request.url).toEqual('/api/contacts/1');\n});\n```", "```js\nit('triggers a loading:start event', () => {\nvar callback = jasmine.createSpy('callback');\n\nFakeApp.on('loading:start', callback);\napp.showContactEditorById('1');\n\nexpect(callback).toHaveBeenCalled();\n});\n```", "```js\nit('triggers a loading:stop event when the contact is loaded', () => {\nvar callback = jasmine.createSpy('callback');\n\nFakeApp.on('loading:stop', callback);\napp.showContactEditorById('1');\nrespond(jasmine.Ajax.requests.mostRecent());\n\nexpect(callback).toHaveBeenCalled();\n});\n```", "```js\nit('shows the rigth contact', () => {\nspyOn(FakeContactEditor.prototype, 'showEditor');\napp.showContactEditorById('1');\nrespond(jasmine.Ajax.requests.mostRecent());\n\nexpect(FakeContactEditor.prototype.showEditor)\n.toHaveBeenCalled();\n\nvar args = FakeContactEditor.prototype\n.showEditor.calls.argsFor(0);\nvar model = args[0];\n\nexpect(model.get('id')).toEqual('1');\nexpect(model.get('name')).toEqual('John Doe');\n});\n```"]