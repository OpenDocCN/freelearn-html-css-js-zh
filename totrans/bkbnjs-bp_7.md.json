["```js\nvar userAttrs = {\n  username: req.body.username,\n  passwordHash: signin.hashPassword(req.body.password),\n  score: 0,\n  time: 3600,\n  games: []\n};\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n  <title> Tokenr </title>\n  <link rel=\"stylesheet\"  href=\"/style.css\" />\n</head>\n<body>\n```", "```js\n</body>\n</html>\n```", "```js\n<% include header %>\n<div id=\"main\">\n  <form method=\"post\" action=\"/login\">\n    <h1> Sign In </h1>\n    <p><input type='text' name='username' /></p>\n    <p><input type='password' name='password' /></p>\n    <p><button>Log In</button></p>\n  </form>\n  <form method=\"post\" action=\"/create\">\n    <h1> Sign Up </h1>\n    <p><input type='text' name='username' /></p>\n    <p><input type='password' name='password' /></p>\n    <p><button>Create Account</button></p>\n  </form>\n</div>\n<% include footer %>\n```", "```js\n<% include header %>\n<div id=\"main\"></div>\n<script src=\"img/jquery.js\"></script>\n<script src=\"img/underscore.js\"></script>\n<script src=\"img/backbone.js\"></script>\n<script src=\"img/models.js\"></script>\n<script src=\"img/views.js\"></script>\n<script src=\"img/router.js\"></script>\n<% include footer %>\n```", "```js\napp.get('/*', function (req, res) {\n  if (!req.user) {\n    res.redirect(\"/login\");\n    return;\n  }\n  res.render(\"index.ejs\");\n});\n```", "```js\n[{\"id\":1,\"level\":3,\"word\":\"anguine\",\"definition\":\"snakelike\"},\n{\"id\":2, \"level\":1,\"word\":\"cardinal\",\"definition\":\"of fundamental importance\"},\n{\"id\":3, \"level\":3,\"word\":\"detersion\",\"definition\":\"act of cleansing\"},\n{\"id\":4, \"level\":3,\"word\":\"exiguous\",\"definition\":\"meager\"},\n{\"id\":5, \"level\":2,\"word\":\"fraternise\",\"definition\":\"associate with\"},\n```", "```js\nvar _ = require('./public/underscore');\nvar words = new Bourne('words.json');\n```", "```js\nfunction getWords(level, cb) {\n  words.find({ level: level }, function (err, records) {\n    cb(null, _.shuffle(records).slice(0, 8));\n  });\n}\n```", "```js\napp.get('/game/:level', function (req, res) {\n  var level = parseInt(req.params.level, 10);\n  getWords(level, function (err, words) {\n    res.json(words);\n  });\n});\n```", "```js\nvar Token = Backbone.Model.extend({});\nvar Tokens = Backbone.Collection.extend({\n  model: Token\n});\n```", "```js\nvar Word = Backbone.Model.extend({\n  initialize: function () {\n    this.set('points', this.get('word').length + this.get('level'));\n  },\n  parts: function () {\n    return Word.split(this.get('word'));\n  }\n});\n```", "```js\nBackbone.Model.extend({\n  // instance properties\n},\n{\n  // class properties\n});\n```", "```js\n[[2, 0.2], [3, 0.4], [4,0.4]]\n```", "```js\nweightedRandomGenerator: function(items) {\n  var total = items.reduce(function (prev, cur) { \n    return prev + cur[1]; \n  }, 0),sum = 0,list = [];\n  for (var i = 0; i < items.length; i++) {\n    sum = (sum*100 + items[i][1]*100) / 100;\n    list.push(sum);\n  }\n  return function () {\n    var random = Math.random() * total;\n    for (var i = 0; i < list.length; i++) {\n      if (random <= list[i]) {\n        return items[i][0];\n      }\n    }\n  }\n}\n```", "```js\n[0.2, 0.6, 1]\n```", "```js\nfunction split(word) {\n  word = word.split('');\n  var tokens = [];\n\n  var rand234 = Word.weightedRandomGenerator([[2, 0.2], [3, 0.4], [4,0.4]]),\n    rand23  = Word.weightedRandomGenerator([[2, 0.5], [3, 0.5]]),\n    rand24  = Word.weightedRandomGenerator([[2, 0.5], [4, 0.5]]);\n\n  var w, length;\n  while (word.length > 0) {\n    w = word.length;\n    if      (w  >  5) length = rand234();\n    else if (w === 5) length = rand23();\n    else if (w === 4) length = rand24();\n    else              length = w;\n\n    tokens.push(word.splice(0, length).join(''));\n  }\n  return tokens;\n}\n```", "```js\nvar Game = Backbone.Collection.extend({\n  model: Word,\n  initialize: function (models, options) {\n    this.guessedCorrectly = [];\n    this.seconds = -1;\n    this.score = 0;\n    this.level = 1;\n  },\n  getWords: function () {\n    return Backbone\n      .ajax(\"/game/\" + this.level)\n      .then(this.reset.bind(this));\n  },\n  tokens: function () {\n    var tokens = _.flatten(this.invoke('parts'));\n    return new Tokens(tokens.map(function (token) {\n      return { text: token };\n    }));\n  }\n});\n```", "```js\nvar TokensView = Backbone.View.extend({\n  render: function () {\n    this.collection.tokens()\n      .shuffle().forEach(this.addToken, this);\n    return this;\n  },\n  addToken: function (token) {\n    this.el.appendChild(new TokenView({ \n      model: token \n    }).render().el);\n  }\n});\n```", "```js\nvar TokenView = Backbone.View.extend({\n  className: 'token',\n  events: {\n    'click': 'choose'\n  },\n  render: function () {\n    this.model.view = this;\n    this.el.innerHTML = this.model.get('text');\n    return this;\n  },\n  choose: function () {\n    Backbone.trigger('token', this.model);\n    this.hide();\n  },\n  hide: function () {\n    this.$el.addClass('hidden');\n  },\n  show: function () {\n    this.$el.removeClass('hidden');\n  }\n});\n```", "```js\n<script>\n  var game = new Game();\n  game.getWords().then(function () {\n    $('#main').append(new TokensView({ \n      collection: game \n    }).render().el);\n  }.bind(this));\n</script>\n```", "```js\n@import url(\"//fonts.googleapis.com/css?family=Lato:300,400,700\");\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: lato, helvetica-neue, sans-serif;\n  background: #2B3E50;\n  font-weight:300;\n  color: #ebebeb;\n}\n#main {\n  width: 540px;\n  padding: 0 5%;\n  margin: auto;\n}\n```", "```js\na {\n  text-decoration: none;\n  font-weight: 700;\n  color: #ebebeb;\n}\n#main a:hover {\n  text-decoration: underline;\n}\n```", "```js\n.token {\n  font-size: 150%;\n  font-weight: 700;\n  margin: 5px;\n  padding:7px 0;\n  display: inline-block;\n  background:#F0AD4E;\n  color: #474747;\n  width: 100px;\n  text-align:center;\n}\n.token:nth-child(5n+1) {\n  margin-left: 0;\n}\n.token:nth-child(5n) {\n  margin-right:0;\n}\n.token:hover {\n  background: #DF691A;\n  cursor: pointer;\n  color: #ececec;\n}\n.hidden {\n  visibility: hidden; \n}\n```", "```js\nvar CluesView = Backbone.View.extend({\n  tagName: 'table',\n  render: function () {\n    this.collection.forEach(function (word) {\n      this.el.appendChild(new ClueView({ \n        model: word \n      }).render().el);\n    }, this);\n    return this;\n  }\n});\n```", "```js\nvar ClueView = Backbone.View.extend({\n  tagName: 'tr',\n  template: _.template($('#clue').html()),\n  initialize: function () {\n    Backbone.on('correct', this.correct, this);\n  },\n  render: function () {\n    this.el.innerHTML = this.template(this.model.toJSON());\n    return this;\n  },\n  correct: function (word) {\n    if (this.model.get('word') === word.get('word')) {\n      this.$el.addClass('correct');\n      this.$('.word')\n        .removeClass('clue')\n        .text(word.get('word'));\n    }\n  }\n});\n```", "```js\n<script type='text/template' id='clue'>\n  <td>{{ definition }}</td>\n  <td class='word clue'>{{ word.length }} letters</td>\n</script>\n```", "```js\ntable {\n  width: 100%;\n}\ntd:nth-of-type(1) {\n  width:75%;\n}\n.clue {\n  font-size:75%;\n}\n.word {\n  float: right;\n}\n.correct {\n  color: #5CB85C;\n  font-weight: 700;\n}\n```", "```js\n$('#main')\n  .append(new CluesView({ collection: game }).render().el)\n  .append(new TokensView({ collection: game }).render().el);\n```", "```js\n<script type='text/template' id='guess'>\n  <div class='btn text'></div>\n  <div id='guessBtn' class='btn'> Guess </div>\n</script>\n```", "```js\nvar GuessView = Backbone.View.extend({\n  className: 'guess',\n  template: $('#guess').html(),\n  events: {\n    'click #guessBtn': 'guess'\n  },\n  initialize: function () {\n    Backbone.on('token', this.add, this);\n    this.currentTokens = [];\n  },\n  render: function () {\n    this.el.innerHTML = this.template;\n    this.guessText = this.$('.text');\n    return this;\n  },\n  add: function (token) {\n    this.currentTokens.push(token);\n    this.guessText.append(token.get('text'));\n  }\n});\n```", "```js\n.guess {\n  overflow: hidden;\n  margin: 20px 0 5px;\n  border: 5px solid #D4514D;\n}\n.btn {\n  background: #D4514D;\n  width: 30%;\n  cursor: pointer;\n  line-height: 50px;\n  height: 50px;\n  font-size:200%;\n  text-align: center;\n  float:left;\n}\n.btn:hover {\n  background: #C04946;\n}\n.btn.text {\n  background: #5BC0DE;\n  width:70%;\n}\n```", "```js\n$('#main')\n  .append(new CluesView({ collection: game }).render().el)\n  .append(new GuessView({ collection: game }).render().el)\n  .append(new TokensView({ collection: game }).render().el);\n```", "```js\n'mouseover #guessBtn': 'color',\n'mouseout #guessBtn': 'color'\n```", "```js\ncolor: function () {\n  this.$el.toggleClass('border');\n},\n```", "```js\n.border {\n  border-color: #C04946;\n}\n```", "```js\nguess: function (evt) {\n  var results = this.collection.guess(this.guessText.text());\n  if (results.word) {\n    Backbone.trigger('correct', results.word);\n  } else {\n    this.currentTokens.forEach(function (token) {\n      token.view.show();\n    });\n  }\n  this.currentTokens = [];\n  this.guessText.text('');\n  if (results.complete) \n    Backbone.trigger('completed', this.collection);\n}\n```", "```js\nguess: function (word) {\n  var results = {\n    word: this.findWhere({ word: word }),\n    complete: false\n  };\n  if (results.word) {\n    results.word.set('correct', true);\n    var score = results.word.get('points');\n    var mult = 10 - parseInt(this.seconds / 15);\n    if (mult <= 0) mult = 1;\n    this.score += score * mult;\n    results.complete = this.where({\n      correct:true\n    }).length === this.length;\n  }\n  return results;\n}\n```", "```js\n<script type='text/template' id='info'>\n  <span class='timer'> 00:00 </span>\n  <span class='points'> 0 points </span>\n</script>\n```", "```js\nstart: function (callback) {\n  this.callback = callback;\n  this.loop();\n},\nloop: function () {\n  this.seconds++;\n  this.callback(this.time());\n  this.timeout = setTimeout(this.loop.bind(this), 1000);\n},\n```", "```js\ntime: function () {\n  var hrs = parseInt(this.seconds / 3600),\n    min = parseInt((this.seconds % 3600) / 60),\n    sec = (this.seconds % 3600) % 60;\n\n  if (min < 10) min = \"0\" + min;\n  if (sec < 10) sec = \"0\" + sec;\n  var time = min + \":\" + sec;\n\n  if (hrs === 0) return time;\n\n  if (hrs < 10) hrs = \"0\" + hrs;\n  return hrs + \":\" + time;\n},\n```", "```js\nvar InfoView = Backbone.View.extend({\n  className: 'info',\n  template: $('#info').html(),\n  initialize: function () {\n    this.listenTo(Backbone, 'correct', this.updateScore);\n    this.collection.listenTo(Backbone, 'completed', this.collection.stop);\n  },\n  render: function () {\n    this.el.innerHTML = this.template;\n    this.time = this.$('.timer');\n    this.score = this.$('.score');\n    this.collection.start(this.time.text.bind(this.time));\n    return this;\n  },\n  updateScore: function () {\n    this.score.text(this.collection.score + ' points');\n  }\n});\n```", "```js\n.info {\n  font-size:60px;\n  margin: 20px 0;\n}\n.info span {\n  margin-right:40px;\n}\n```", "```js\n$('#main')\n  .append(new InfoView({ collection: game }).render().el)\n  .append(new CluesView({ collection: game }).render().el)\n  .append(new GuessView({ collection: game }).render().el)\n  .append(new TokensView({ collection: game }).render().el);\n```", "```js\nstop: function () {\n  clearTimeout(this.timeout);\n  Backbone.ajax({\n    url: '/game',\n    method: 'POST', \n    data: {\n      time: this.seconds,\n      score: this.score,\n      date: new Date().toJSON()\n    }\n  });\n}\n```", "```js\nvar GameInfo = Backbone.Model.extend({\n  urlRoot: '/game'\n});\n```", "```js\n(new GameInfo({\n  time: this.seconds,\n  score: this.score,\n  date: new Date()\n}).save();\n```", "```js\napp.post('/game', function (req, res) {\n  if (!req.user) return res.redirect('/login');\n  var game = {\n    time : parseInt(req.body.time, 10),\n    score: parseInt(req.body.score, 10),\n    date : req.body.date\n  };\n  req.user.games.push(game);\n\n  if (game.score > req.user.score) req.user.score = game.score;\n  if (game.time  < req.user.time ) req.user.time  = game.time;\n\n  users.update({ id: req.user.id }, req.user, function (err, user) {\n    res.json(game);\n  });\n});\n```", "```js\nvar GameView = Backbone.View.extend({\n  render: function () {\n    var attrs  = { collection: this.collection },\n      info   = new InfoView(attrs),\n      clues  = new CluesView(attrs),\n      guess  = new GuessView(attrs),\n      tokens = new TokensView(attrs);\n\n    this.$el.append(info.render().el)\n      .append(clues.render().el)\n      .append(guess.render().el)\n      .append(tokens.render().el);\n\n    return this;\n  }\n});\n```", "```js\n$('#main').append(new GameView({ collection: game }).render().el);\n```", "```js\nvar Router = Backbone.Router.extend({\n  initialize: function (options) {\n    this.main = options.main;\n  },\n  routes: {\n    'play': 'play',\n    'play/:level': 'play'\n  },\n  play: function (level) {\n    var game = new Game();\n    if (level) game.level = level;\n    game.getWords().then(function () {\n      this.main.append(new GameView({ \n        collection: game \n      }).render().el);\n    }.bind(this));\n  }\n});\n```", "```js\nvar r = new Router({\n  main: $(\"#main\")\n});\nBackbone.history.start({ pushState: true });\n```", "```js\nvar HomeView = Backbone.View.extend({\n  template: $('#levels').html(),\n  events: {\n    'click a' : 'chooseLevel'\n  },\n  render: function () {\n    this.el.innerHTML = this.template;\n    return this;\n  },\n  chooseLevel: function (evt) {\n    evt.preventDefault();\n    this.remove();\n    Backbone.history.navigate(evt.currentTarget.pathname, \n      { trigger: true });\n    return false;\n  }\n});\n```", "```js\n<script type='text/template' id='home'>\n  <h1>Pick a Level:</h1>\n  <h2><a href='/play/1'> Level 1 </a></h2>\n  <h2><a href='/play/2'> Level 2 </a></h2>\n  <h2><a href='/play/3'> Level 3 </a></h2>\n  <h1>Or, check out the <a href='/scoreboard'>scoreboard</a></h1>\n</script>\n```", "```js\nh1 {\n  font-weight:300;\n  font-size:39px;\n}\n```", "```js\n'': 'index'\n```", "```js\nindex: function () {\n  this.main.html(new HomeView().render().el);\n},\n```", "```js\napp.get('/scoreboard', function (req, res) {\n  users.find(function (err, userRecords) {\n    userRecords.forEach(function (user) {\n      user.totalScore = 0;\n      user.games.forEach(function (game) {\n        user.totalScore += game.score;\n      });\n    });\n    userRecords.sort(function (a,b) { \n      return b.score - a.score\n    });\n\n    res.render(\"scoreboard.ejs\", { users: userRecords });\n  });\n});\n```", "```js\n<% include header %>\n<div id=\"main\">\n  <h1> Scoreboard </h1>\n  <table class=\"users\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Total Score</th>\n      <th>Best Game</th>\n      <th>Best Time</th>\n    </tr>\n  </thead>\n  <tbody>\n  <% users.forEach(function(user){ %>\n    <tr>\n      <td><%=: user.username | capitalize %></td>\n      <td><%=  user.totalScore %></td>\n      <td><%= user.score %></td>\n      <td><%=: user.time | time %></td>\n    </tr>\n  <% }); %>\n  </tbody>\n  </table>\n</div>\n<% include footer %>\n```", "```js\nvar ejs = require('ejs');\n```", "```js\nejs.filters.time = function(seconds) {\n  var hrs = parseInt(seconds / 3600),\n    min = parseInt((seconds % 3600) / 60),\n    sec = (seconds % 3600) % 60;\n\n  if (min < 10) min = \"0\" + min;\n  if (sec < 10) sec = \"0\" + sec;\n  var time = min + \":\" + sec;\n\n  if (hrs === 0) return time;\n\n  if (hrs < 10) hrs = \"0\" + hrs;\n  return hrs + \":\" + time;\n};\n```", "```js\ntable.users {\n  border-collapse: collapse;\n}\n\n.users tbody tr {\n  background: #4E5D6C;\n}\n\n.users tbody tr td {\n  padding: 10px;\n}\n\n.users th,\n.users td {\n  width: 25%;\n  text-align:center;\n}\n```", "```js\n<nav>\n  <ul>\n    <li><a href=\"/\">Tokenr</a></li>\n    <li><a href=\"/\"> Play </a></li>\n    <li><a href=\"/scoreboard\"> Scoreboard </a></li>\n  </ul>\n</nav>\n```", "```js\nnav {\n  margin:0;\n  background-color: #4E5D6C;\n  overflow: hidden;\n  font-size:19px;\n}\nul {\n  list-style-type:none;\n  margin:0;\n  padding: 0;\n}\nnav li {\n  display: inline-block;\n}\nnav li a {\n  display: inline-block;\n  padding: 10px;\n}\nnav li a:hover {\n  background-color: #485563;\n}\nnav li:nth-of-type(1) a {\n  color: #D4514D;\n}\n```", "```js\n<% include nav %>\n```", "```js\napp.get('/new', function (req, res) {\n  if (req.user && req.user.admin) {\n    res.render('new.ejs');\n  } else {\n    res.redirect('/');\n  }\n});\n```", "```js\n<% include header %>\n<% include nav %>\n<div id='main'>\n  <form method=\"post\" action=\"/new\">\n    <h1> Add a Word </h1>\n    <p>Word:</p>\n    <p><input type='text' name='word' /></p>\n    <p>Definition:</p>\n    <p><input type='text' name='definition' /></p>\n    <p>Level:\n      1 <input type='radio' name='level' value='1' />\n      2 <input type='radio' name='level' value='2' />\n      3 <input type='radio' name='level' value='3' />\n    </p>\n    <p><button>Add</button></p>\n  </form>\n</div>\n<% include footer %>\n```", "```js\napp.post('/new', function (req, res) {\n  if (req.user && req.user.admin) {\n    var w = {\n      word: req.body.word.toLowerCase(),\n      definition: req.body.definition,\n      level: parseInt(req.body.level, 10)\n    };\n    words.find({ word: w.word }, function (err, ws) {\n      if (ws.length === 0) {\n        words.insert(w);\n      }\n    });\n    res.redirect('/new');\n  } else {\n    res.redirect('/');\n  }\n});\n```", "```js\n<% if (admin) { %>\n  <li><a href=\"/new\"> Add Word </a></li>\n<% } %>\n```", "```js\nres.render(\"index.ejs\", { admin: req.user && req.user.admin });\n```"]