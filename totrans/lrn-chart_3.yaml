- en: Chart.js - Quick Start
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provides a quick start to creating web-based data visualizations
    with Chart.js. You will learn how to set up the library and configure a basic
    web page where you can include a chart. We will walk through a complete step-by-step
    example, describing how to create a bar chart and configure it with labels, tooltips,
    titles, interactions, colors, animations, and more. By using Chart.js to create
    a full-featured chart, you will have a better understanding of the main concepts
    when we explore the details later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to install and set up Chart.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a simple bar chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to configure axes, colors, and tooltips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add animation and respond to simple events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a horizontal and a stacked bar chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Chart.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chart.js is an open source community-maintained JavaScript data visualization
    library based on HTML5 Canvas. At the time of writing, it is available as version
    2.7.3, and comes with eight customizable chart types. It's very easy to create
    a chart using Chart.js. It can be as simple as loading the JavaScript library
    into your page, choosing a chart type, and providing it with an array of data.
  prefs: []
  type: TYPE_NORMAL
- en: All charts are configured with a default look and feel, as well as basic interactive
    features. You can focus on the data and quickly create a simple responsive and
    interactive chart that fits nicely in your page. You don't have to worry about
    configuring padding or margins, fitting labels in axes, adding tooltips, or controlling
    transitions. But if you need to change something, there are many configuration
    options available.
  prefs: []
  type: TYPE_NORMAL
- en: Installation and setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up a web page for Chart.js, you just need to load the library. If you
    already have a website set up, you can download Chart.js from [www.chartjs.org](http://www.chartjs.org),
    store it where you can load it from a web page, and import it using the `<script>`
    tag, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use `npm` or `bower` to install Chart.js if you have a modular
    development environment, as shown in the following code. Chart.js integrates well
    with ES6 modules, *Angular*, *React*, and *Vue* applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The simplest way to get started is to link to a library file provided by a **Content
    Delivery Network** (**CDN**). You can obtain a list at `cdnjs.com/libraries/Chart.js`,
    choose the version and CDN provider of your choice, and copy one of the links.
    Unless you want to inspect the code, use the minified link (that ends in `min.js).`
    It's best not to use the bundle version, since it includes some extra non-Chart.js
    libraries (a better practice is to include third-party libraries separately when
    needed).
  prefs: []
  type: TYPE_NORMAL
- en: 'Using any text or code editor, copy the link to the `src` attribute of a `script`
    tag placed somewhere in the `<head>` of your HTML file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you have a development environment, such as Visual Studio Code, PHPStorm,
    or Brackets, you may wish to set up a template file that includes the Chart.js
    CDN script tag for new pages.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to explore Chart.js and follow the examples in this book, is to
    use an online code editor, such as *CodePen* or *JSFiddle*. It's also a great
    way to share your charts and code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using JSFiddle ([https://jsfiddle.net/](https://jsfiddle.net/)), you just need
    to add the Chart.js CDN to the Resources tab, as shown in the following screenshot,
    and then you can use the tabs to write the HTML, CSS, and JavaScript code for
    your charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59bcbb2a-4644-47f2-a7a3-2cbc139e3d88.png)'
  prefs: []
  type: TYPE_IMG
- en: Using *JSFiddle* (*jsfiddle.net*) as an online code editor
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure Chart.js in *CodePen* ([https://codepen.io/](https://codepen.io/)),
    click the Settings menu and then the JavaScript tab. Search for Chart.js, and
    click the first option to add the CDN to your environment, as demonstrated in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95cb49bb-437f-4061-b5a6-de39ea8603d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding Chart.js support to *CodePen* (*codepen.io*)
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now use the Chart.js library and see the results in real time, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98b04dce-db9c-4817-a4a3-3a3f7c2152bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Using CodePen (codepen.io) as an online code editor
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple bar chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have a working environment set up, let's get started and create
    a simple bar chart. You can type in the code as we go along, but you can also
    download the full working examples from the GitHub repository for this chapter.
    Each screenshot and code listing in this book contains a reference to the file
    used to produce it.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the graphics context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Charts are displayed inside the graphics context provided by an HTML Canvas
    object. There are many ways to create one; the simplest way is to use plain HTML.
    Place a `<canvas>` element somewhere inside `<body>`. It should have an `ID` attribute,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Chart.js graphics are responsive by default. The chart will fit in the available
    space: the `height` and `width` attributes won''t affect the actual size of the
    chart (unless you change the defaults).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can obtain a JavaScript handle to the `canvas` object using DOM (or JQuery)
    in any script block or file loaded by your HTML file, as shown in the following
    code snippet (the script block will be ignored in most JavaScript listings in
    this book):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also dynamically create a `<canvas>` object using **Document Object
    Model** (**DOM**), or JQuery. In this case, an `ID` attribute is not strictly
    necessary, since the variable itself can be used as a handle, but it''s good practice
    to define one, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'A chart is created using the `Chart()` constructor. It receives two arguments:
    the graphics *context* of the canvas where the chart will be displayed, and an
    *object* containing the chart data, as demonstrated in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If your `canvas` object has declared an `ID` attribute, you don''t need a `context`
    object. You can simply use the `ID` attribute as the first argument, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The object that contains the chart data requires at least two properties: `type`,
    which selects one of the eight different kinds of Chart.js charts; and `data`,
    which references an object containing the datasets and properties of the data
    to be displayed, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Normally, the chart object is configured inside the constructor, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is the basic setup for any chart created with Chart.js. It won't show any
    chart yet, because we didn't provide any data, but if your library loaded correctly,
    you should see an empty axis. The code is in the `Templates/BasicTemplate.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: If nothing shows up in your screen, there may be a syntax error in your code.
    Check your browser's JavaScript console. It's always a good idea to keep it open
    when you are working with JavaScript, so that errors can be detected and fixed
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bar chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A bar chart displays a list of categories associated with values represented
    by the length of the bars. To create a simple bar chart, we need a list of *categories*,
    as well as list of *values*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a simple chart to display the volume of water in each ocean.
    We will need an array of categories, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, we will also need a corresponding array of values, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `data` object should contain a `labels` property, which will refer to the
    `categories` array, and a `datasets` property, which contains an array with at
    least one `dataset` object. Each `dataset` object has a `label` property, and
    a `data` property, which will receive the data for our chart (the `volumes` array),
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Charts already come preconfigured with scales, axes, default colors, fonts,
    animation, and tooltips. Include the `dataObj` object from the preceding code
    as the `data` property of the chart object (`chartObj`), and you will have an
    interactive and responsive bar chart similar to the one shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2272fab9-7c70-44e8-8d02-860ed62a8eb7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A simple bar chart (code: *Pages/BarChart1.html)*'
  prefs: []
  type: TYPE_NORMAL
- en: Try resizing the window and see how the labels and scales adapt to the new display.
    Move your mouse over the bars and see how the tooltips display the chart's information.
    Click on the `dataset` label and toggle its visibility. In the following sections,
    we will configure some of its appearance and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full listing is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Try typing in the preceding code in your development environment, or download
    it from `Pages/BarChart1.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring colors, fonts, and responsiveness
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Charts created with Chart.js are born responsive and fit nicely into your screen,
    but they are also born gray. In this section, you will discover how to change
    some style properties.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset configuration for bar charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides the `data` and `label` properties, each dataset object can contain
    a number of optional configuration properties. Most of them are used to configure
    fill and border colors and widths. They are briefly described in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `data` | `Number[]` | An array of numbers containing the data to display
    (this is mandatory) |'
  prefs: []
  type: TYPE_TB
- en: '| `label` | `String` | A label for the dataset |'
  prefs: []
  type: TYPE_TB
- en: '| `backgroundColor` | `String` or `String[]` | The fill color of the bar |'
  prefs: []
  type: TYPE_TB
- en: '| `borderColor` | `String` or `String[]` | The color of the border |'
  prefs: []
  type: TYPE_TB
- en: '| `borderWidth` | `Number` or `Number[]` | The width of the border |'
  prefs: []
  type: TYPE_TB
- en: '| `hoverBackgroundColor` | `String` or `String[]` | The fill when the mouse
    is over the bar |'
  prefs: []
  type: TYPE_TB
- en: '| `hoverBorderColor` | `String` or `String[]` | The border color when the mouse
    is over the bar |'
  prefs: []
  type: TYPE_TB
- en: '| `hoverBorderWidth` | `Number` or `Number[]` | The border width when the mouse
    is over the bar |'
  prefs: []
  type: TYPE_TB
- en: '| `borderSkipped` | `bottom`, `left`, `top`, `right` | Selects which edge of
    the bar with no border (the default is `bottom` for `bar`, and `left` for `horizontalBar`
    ) |'
  prefs: []
  type: TYPE_TB
- en: '| `yAxisID` and `xAxisID` | An Axis ID (see [Chapter 5](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml),
    *Scales and Grid Configuration*) | Used in axis configuration |'
  prefs: []
  type: TYPE_TB
- en: Dataset properties for bar charts
  prefs: []
  type: TYPE_NORMAL
- en: 'You can change the gray colored bars by adding color properties in each `dataset`
    object, or by configuring global defaults that affect all charts. The `backgroundColor`
    property receives a string containing a color specified in a legal CSS format.
    For example, if you want to have solid red bars, you can use the following formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '`red`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rgb(255,0,0)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rgba(100%,0,0,1)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#ff0000`, `#f00`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hsl(0,100%,50%)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hsla(0,100%,50%,1)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `borderColor` property controls the color of the label icon. It also configures
    the color of the bars if the `borderWidth` is specified with a value greater than
    zero, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code should produce the result shown as follows. The full code
    is available at `Pages/BarChart2.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd747d35-bf9d-450d-96d6-453c240c2b74.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Applying color attributes to a bar chart (code: *Pages/BarChart2.html)*'
  prefs: []
  type: TYPE_NORMAL
- en: Options configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Defaults are configured per chart with an options configuration object included
    in the `chart` object (the second parameter of the constructor), as demonstrated
    in the following block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'There are many defaults that you can change. You might, for example, wish to
    have more control over the size of your chart, which resizes automatically. That
    happens because charts are responsive by default. You can turn responsiveness
    off by overriding the `responsive` property, which has a default `true` value,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your chart no longer resizes automatically. However, what if you do want
    to undertake resizing, but don''t care about the aspect ratio? Then, you can override
    the `maintainAspectRatio` property, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You might want this if your `canvas` object is located inside a parent `<div>`
    container, which controls its size and is configured with CSS. In the following
    code (`Pages/BarChart4.html`), the canvas will occupy `80%` of the size of its
    parent container, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If you try to resize the chart, it will, by default, maintain its aspect ratio
    (and no longer fit in the page), unless the `maintainAspectRatio` property is
    set to `false`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e45ebc88-1d4f-48cf-ab51-1320ecf5be09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Configuring the aspect ratio of a chart to make it fit in a canvas (code: *Pages/BarChart4.html)*'
  prefs: []
  type: TYPE_NORMAL
- en: Text and fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Text can be included in many different objects. Each data object can have a
    list of categories, each dataset can have a legend, the chart can have a title,
    and tooltips can have titles and other information. Some text is visible or invisible
    by default. You can configure the visibility, font families, font sizes, and colors
    of any text inside a chart.
  prefs: []
  type: TYPE_NORMAL
- en: Fonts can be applied globally (for all charts) using default configurations.
    Using the `options` configuration object, they can be applied locally to titles
    and legends, which are also configured as objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our chart, we have a single dataset, which makes the legend superfluous.
    You can hide it by changing the `legend.display` property to `false`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also give the chart a title and configure its font size, color, and
    family, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s not enough to simply add the title to the `text` property. Since the
    `display` property is `false` by default, you must explicitly define it to be
    `true` for the title to be displayed. With these changes, your chart should look
    similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e212da7a-0758-4ef1-b7c2-5f64a69aa42a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Adding a title and defining font properties (code: *Pages/BarChart5.html)*'
  prefs: []
  type: TYPE_NORMAL
- en: You can configure the style of all of the text in the chart, including individual
    tooltip titles and bodies, scales, and major and minor ticks, as we will see in
    the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Global defaults
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Local configuration options override global default configurations, which can
    be configured using the `Chart.defaults.global` object. You can configure properties,
    such as fonts, colors, axes, gridlines, ticks, animations, tooltips, and element
    properties, either globally (for all charts), or locally (for a specific chart).
  prefs: []
  type: TYPE_NORMAL
- en: 'To specify a global font family, you can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This will affect all of the text in the chart. You can also define defaults
    for specific text elements by changing the properties, such as `Chart.defaults.global.legend`,
    `Chart.defaults.global.title`, and many more, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The default color used in charts is `rgba(0,0,0,0.1) (lightgray)`. You can change
    this using `Chart.defaults.global.defaultColor`.
  prefs: []
  type: TYPE_NORMAL
- en: Global properties are great to include in a separate `.js` file, so that your
    charts have a consistent look and field. You might also prefer to use them even
    when you have a single chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists specific configurations for bar charts that can be
    applied locally or globally. The global bar chart settings are stored in `Chart.defaults.bar`
    and `Charts.defaults.horizontalBar`. Local settings should be stored inside the
    `options` object under `scales.xAxes[]` or `scales.yAxes[]`, for vertical and
    horizontal bar charts, respectively. Try using some of these in your chart and
    see the results you get:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `barPercentage` | `Number` | The percentage of the category (all datasets)
    width taken by the bar (each dataset) width. The default is `0.9`. |'
  prefs: []
  type: TYPE_TB
- en: '| `categoryPercentage` | The percentage of the sample width taken by the category
    width. The default is `0.8`. |'
  prefs: []
  type: TYPE_TB
- en: '| `barThickness` | This manually sets the bar width (ignores `categoryPercentage`
    and `barPercentage`). |'
  prefs: []
  type: TYPE_TB
- en: '| `maxBarThickness` | This limits the bar thickness to this number. |'
  prefs: []
  type: TYPE_TB
- en: Option configuration properties for charts
  prefs: []
  type: TYPE_NORMAL
- en: Transitions, interactions, and tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All charts are also born with basic transitions, animations, and interactive
    tooltips. For a simple chart, you might not need to change anything; but in case
    you want more control, you can configure these behaviors with local and global
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: Transition duration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can create charts that change the way they look on user interaction. They
    will automatically transition to the new values gracefully and smoothly. Transition
    animations are configured with default ease algorithms and durations, but you
    can change them by editing the properties of the `Chart.defaults.global.animation`
    object, or override any defaults locally by using the `options.animation` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in the following chart code, all transitions last five seconds
    (`Pages/BarChart6.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Updating charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use JavaScript functions and libraries to change your data dynamically,
    but the changes will not be reflected immediately in your chart. After changing
    data, you have to call `update()` in order to redraw it. For this, you will need
    a variable reference to the `chart` object, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example toggles the data in the chart, replacing the values in
    the dataset with a different array, and changing labels, titles, and colors. The
    `toggle()` function is registered as a click event listener on the canvas. Whenever
    you click anywhere in the canvas it will run, change the values of several properties,
    and call `update()`,which forces the chart to transition to the new data and appearance,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the same chart before and after being clicked.
    The full code is available at `Pages/BarChart7.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad68d79b-4ceb-4e07-8ed0-895e58f8a507.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Screenshots of same chart after and before a click. Code: *Pages/BarChart7.html*'
  prefs: []
  type: TYPE_NORMAL
- en: Tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The animation duration does not affect tooltips, which have their own configuration.
    Besides animation, you can configure colors, fonts, spacing, shape, and behaviors
    in tooltips. You can also declare callback functions that change the appearance
    and content at every interaction. If you need to add more information to a tooltip,
    Chart.js allows you to create sophisticated HTML tooltips containing images and
    text.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following configuration creates black tooltips that contain
    default title colors. The tooltip configuration options contain callbacks that
    set text colors that match the colors of the bars, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: You can run the preceding code in the `Pages/BarChart8.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: Working with larger and multiple datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From what we have seen so far, you should already be able to create a simple
    bar chart. In this section, we will explore some configuration options related
    to large datasets, which you will probably load as an external file, and multiple
    datasets, which can be plotted on the same chart.
  prefs: []
  type: TYPE_NORMAL
- en: Loading data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many times, your data will be available online and you may want to load it dynamically.
    It's also a good idea to keep your data and code in separate files. If you have
    data in a CSV file, you can load it into your JavaScript code and use it to generate
    the chart.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript loads data asynchronously using Ajax. You can use standard Ajax,
    JQuery, or the ES6 fetch function, which functions like a JavaScript promise.
    After you load the CSV file, you need to parse it. If you only need one set of
    category labels and values, you can handle it without a parser.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will use a CSV file that contains the amount of plastic
    waste disposed of in the oceans by the 20 greatest pollutants. You can find the
    following code in the GitHub repository for this chapter in `Data/waste.csv`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code loads and parses the file, splitting the data into rows,
    and then splitting each row by a comma to assemble a `labels` array and a `values`
    array (we could also have used a CSV parser). This process transforms the data
    into arrays in a format that can be used by Chart.js, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `draw()` function contains the code to set up a canvas, and create and
    display the bar chart, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You can view the full code in `Pages/BarChart9.html`. The result is shown as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52adf5d3-3266-4afa-b365-eab2cbebf0a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A bar chart created with data loaded from an external file (code: *Pages/BarChart9.html)*'
  prefs: []
  type: TYPE_NORMAL
- en: Horizontal bar chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you have a lot of data to display and compare, it might fit better in
    a horizontal bar chart. You can easily convert a vertical bar chart into a horizontal
    one by changing the `type` to `horizontalBar`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding chart seems better as a horizontal chart, since the category
    labels don''t have to be turned sideways. You can see the full code in `Pages/BarChart10.html`.
    The following screenshot shows what the chart looks like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6725df78-0e5a-4433-9a00-fbd422213be2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A horizontal bar chart (code: *Pages/BarChart10.html)*'
  prefs: []
  type: TYPE_NORMAL
- en: Adding extra datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can add more datasets to a bar chart, and configure it with a new legend
    label, colors, and data arrays. In the following example, we will load a larger
    `.csv` file, which contains the data for plastic waste disposal in `2010`, and
    a forecast for `2025`. It has one extra column, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, the code will generate two `data` arrays and a single `labels` array.
    The data and labels that belong to the same category have the same index, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The new values will be included in a second dataset, in the `datasets` array,
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The full code is in `Pages/BarChart12.html`. With two datasets, there are two
    bars for each category. There is also one legend item for each dataset. The result
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2eef614-efa6-4cee-84e2-e6fc1d5f45fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A bar chart with two datasets (code: *Pages/BarChart12.html)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'With two or more datasets, you may want to configure the width of the bars
    using the configuration option properties, `barPercentage` and `categoryPercentage`.
    The former controls the width of the individual bars for each category, and the
    latter determines the space taken by all of the bars in one category. These properties
    should be defined in `options.scales.xAxes[]` if you are using a bar chart, and
    `options.scales.yAxes[]` if it is a `horizontalBar` (see `Pages/BarChart12.html`),
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Stacking bars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bars are usually placed side-by-side for comparison. However, if the values
    are part of a whole, you can stack bars in different datasets to emphasize this
    relationship. We can stack the volumes of the world''s oceans, since their sum
    reveals the total volume of ocean water in the world. The following data object
    places the volume of each ocean in a separate dataset, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'To transform a bar chart into a stacked chart, you have to configure the settings
    for the *x* and *y* axes, enabling the stacked property as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The expected result is shown in the following screenshot. The full code is
    in `Pages/BarChart13.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6686f468-f2dd-45af-acfe-5ca5465f0a7a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A stacked bar chart can be used to display data as parts of a whole (code:
    *Pages/BarChart13.html)*'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to install Chart.js in a web application and
    how to quickly create a simple interactive and responsive bar chart, which can
    be included in a web page. We also learned how to configure the default look and
    feel of a chart, by changing basic properties, such as colors, fonts, responsiveness,
    animation duration, and tooltips. With this knowledge, you can already start using
    Chart.js to display simple data visualizations in your web pages.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also explored some real-world issues, such as loading external
    files, and how to deal with larger datasets, by filtering data and configuring
    the chart in order to display the information more efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapters, we will explore Chart.js in greater detail, create
    all eight different types of charts, learn how to configure several other properties,
    and deal with more complex datasets.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Books and websites**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chart.js official documentation and samples: [https://www.chartjs.org/docs/latest/](https://www.chartjs.org/docs/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data sources**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Volumes of the World’s Oceans (based on ETOPO1): `Chapter03/Pages/BarChart1.html`
    and others. [https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html](https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Plastic waste: `Chapter03/Data/waste.csv`. Jambeck et al. *Plastic waste inputs
    from land into the ocean*. Science magazine. 13 February 2015'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
