- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Establishing the Development Workflow
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立开发工作流程
- en: While it is an extremely versatile and powerful tool for developing, running,
    and sharing a working 3D rendered scene, the **Babylon.js Playground** (**PG**)
    also has a place in the development workflow of a traditional web application.
    Effective software development is effectively enabled by the removal of friction.
    Friction in this sense is anything that presents an obstacle between writing code
    and executing the results and can take almost any form, from the mundane to the
    obscure. As an example, say it takes an hour between the time a change is made
    in code to the time that changed code is running in the developer’s web browser.
    The developer will then be compelled to include as much as possible in every new
    build, which then makes it more difficult to understand the effects of any one
    change on the application’s behavior. Focus is diluted and progress is incremental
    and not in proportion to the effort required in these situations, which is why
    small tweaks to a development workflow can yield large gains. We’re going to examine
    one out of many potential **Babylon.js** development workflows during the course
    of this chapter, and by the end of it, you will have the tools to rapidly and
    efficiently build games that can evolve as rapidly as you can think of designs!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然**Babylon.js游乐场**（**PG**）是一个非常灵活且强大的工具，用于开发、运行和共享3D渲染场景，但它也在传统Web应用程序的开发工作流程中占有一席之地。通过消除摩擦，有效地实现了有效的软件开发。这里的摩擦是指任何在编写代码和执行结果之间设置障碍的东西，它几乎可以采取任何形式，从平凡到神秘。例如，假设在代码更改后到更改的代码在开发者的Web浏览器中运行之间需要一个小时。那么开发者将被迫在每次新的构建中包含尽可能多的内容，这使得理解任何单个更改对应用程序行为的影响变得更加困难。在这种情况下，注意力会被稀释，进步是渐进的，并不与所需的努力成比例，这就是为什么对开发工作流程的小幅调整可以带来巨大的收益。在本章中，我们将探讨许多潜在**Babylon.js**开发工作流程中的一个，到本章结束时，您将拥有快速高效构建游戏所需的工具，这些游戏可以像您思考设计一样快速地发展！
- en: 'Everyone is going to have a different way of approaching the structure and
    process of development, and that’s OK. Each of these sections illustrates an aspect
    of the workflow that seeks to maximize developer efficiency and quality while
    minimizing tech debt and uncertainty:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都会有不同的方法来接近开发的结构和流程，这是完全可以接受的。以下每个部分都展示了工作流程的一个方面，旨在最大化开发效率和质量，同时最小化技术债务和不确定性：
- en: Setting up the Environment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置环境
- en: Crafting a Playground Snippet
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建游乐场片段
- en: Transitioning from the Playground to the Application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从游乐场过渡到应用程序
- en: Constructing the Landing Page
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建着陆页
- en: Technical Requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The base set of requirements for running the BJS PG are detailed in [*Chapter
    2*](B17266_02_Final_AM.xhtml#_idTextAnchor030), *Ramping up on Babylon.js*, but
    in addition to those requirements, there are some additional development tools
    that we’re going to be using.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 运行BJS PG的基本要求在[*第2章*](B17266_02_Final_AM.xhtml#_idTextAnchor030)“提高Babylon.js技能”中详细说明，但除了这些要求之外，还有一些我们将要使用的额外开发工具。
- en: Important Note
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Although the examples and such are all based on a Windows-based developer experience,
    there are no Operating System requirements to follow along with this book. All
    of the tools discussed are available on multiple platforms and any differences
    in syntax or usage will be highlighted or called out where feasible.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管示例等都是基于基于Windows的开发者体验，但遵循本书没有操作系统要求。所有讨论的工具都可在多个平台上使用，并且将在可行的地方突出显示或指出语法或用法的差异。
- en: The specific usages of each individual item will be covered during the accompanying
    chapter material, and it is assumed that you have some familiarity with the tools
    and/or usage. For information on setting up and configuring a given tool, please
    see the corresponding link to the tool’s documentation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每个单独项目的具体用法将在随附的章节材料中介绍，并假设您对工具及其用法有一定的了解。有关设置和配置特定工具的信息，请参阅该工具文档的相应链接。
- en: '**Visual Studio Code** is our IDE of choice, is available on all platforms,
    works wonderfully, and is free: [https://code.visualstudio.com](https://code.visualstudio.com)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**是我们首选的IDE，可在所有平台上使用，工作出色，且免费：[https://code.visualstudio.com](https://code.visualstudio.com)'
- en: '**Node.js v14.15.4 (LTS)** or greater: [https://docs.npmjs.com/](https://docs.npmjs.com/)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js v14.15.4 (LTS)**或更高版本：[https://docs.npmjs.com/](https://docs.npmjs.com/)'
- en: '**Node Package Manager (npm) CLI v6.x (LTS Release)** or greater, installed
    via a node version manager listed at [https://docs.npmjs.com/cli/v6/configuring-npm/install](https://docs.npmjs.com/cli/v6/configuring-npm/install)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node 包管理器 (npm) CLI v6.x（LTS 版本）** 或更高版本，通过在 [https://docs.npmjs.com/cli/v6/configuring-npm/install](https://docs.npmjs.com/cli/v6/configuring-npm/install)
    列出的节点版本管理器安装。'
- en: '**Git** SCM client. Also, to be able to submit **Pull Requests**, file **issues**,
    or participate in **Discussions**, a valid GitHub account is required: [https://github.com](https://github.com)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git** 版本控制客户端。此外，为了能够提交 **Pull Requests**、提交 **问题** 或参与 **讨论**，需要一个有效的 GitHub
    账户：[https://github.com](https://github.com)'
- en: A Note for TypeScript Users
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TypeScript 用户注意事项
- en: 'Should you prefer to do all your coding in **TypeScript** as opposed to straight-JavaScript,
    that’s great! Babylon.js itself is written in **TypeScript** and is fully supported
    for developing in BJS. Following along with the code in this book is possible,
    and any differences in syntax and structure aren’t always going to be explained
    or called out. That said, the code should be largely compatible between the two
    languages, keeping in mind the following two primary changes:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢使用 **TypeScript** 而不是纯 JavaScript 进行所有编码，那很好！Babylon.js 本身是用 **TypeScript**
    编写的，并且完全支持在 BJS 中开发。跟随这本书中的代码是可能的，并且语法和结构的不同并不总是会被解释或指出。话虽如此，考虑到以下两个主要变化，代码在这两种语言之间应该具有很大的兼容性：
- en: Playground snippets should use TypeScript mode. This has a slightly different
    template. Start at [https://www.babylonjs-playground.com/ts.xhtml#](https://www.babylonjs-playground.com/ts.xhtml#)
    and click `createScene` method is encapsulated as a `Playground`. Declare new
    classes and use them in the `createScene` method similar to how you would in regular
    JavaScript.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 游戏场代码片段应使用 TypeScript 模式。这有一个稍微不同的模板。从 [https://www.babylonjs-playground.com/ts.xhtml#](https://www.babylonjs-playground.com/ts.xhtml#)
    开始，点击 `createScene` 方法被封装为 `Playground`。声明新的类并在 `createScene` 方法中使用它们，就像在常规 JavaScript
    中使用一样。
- en: When integrating classes written in the PG, it’s important to add the `export
    class Foo { //… }`). Since you will be using the **tsc** (**TypeScript Compiler**)
    to output JavaScript, there are times when you’ll need to **import** certain Babylon.js
    modules for their **side effects**. Please see [https://doc.babylonjs.com/divingDeeper/developWithBjs/npmSupport#typescript-support](https://doc.babylonjs.com/divingDeeper/developWithBjs/npmSupport#typescript-support)
    for more on how to configure **TypeScript** for use with Babylon.js
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当将使用 PG 编写的类进行集成时，非常重要的一点是要添加 `export class Foo { //… }`)。由于您将使用 **tsc**（**TypeScript
    编译器**）来输出 JavaScript，有时您将需要 **导入**某些 Babylon.js 模块以利用它们的 **副作用**。有关如何为 Babylon.js
    配置 **TypeScript** 的更多信息，请参阅 [https://doc.babylonjs.com/divingDeeper/developWithBjs/npmSupport#typescript-support](https://doc.babylonjs.com/divingDeeper/developWithBjs/npmSupport#typescript-support)。
- en: Setting up the Environment
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: Effective software development relies on being able to confidently introduce
    changes to an application’s construction. Confidence in introducing, changing,
    or removing code comes from a) being able to run the code using the new changes,
    and b) through not being in a position where undoing changes imposes risks of
    its own. Let’s park that thought for a moment to back up and start from the beginning.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的软件开发依赖于能够自信地向应用程序的结构中引入更改。引入、更改或删除代码的信心来自于 a) 能够使用新的更改运行代码，以及 b) 不处于撤销更改会带来自身风险的境地。让我们暂时放下这个想法，回过头来从头开始。
- en: Preparatory Steps
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备步骤
- en: 'The *a priori* assumption going into this step is that you have **G****it**,
    **VSCode**, **Node.js**, and **NPM** all set up and ready to go. A linting tool
    such as **ESLint** is also recommended. If you know what you’re doing, go ahead
    and get those tools set up and configured now. No rush, it’s just the rest of
    the book that’s waiting is all – this has been speculated to go faster if you
    work while humming *The Girl from Ipanema* to yourself. **VSCode** has a rich
    ecosystem of extensions that can make your life easier. Here is a list of some
    of the ones you’ll want to install (or their equivalents). Go to the **Extensions**
    panel in **VSCode**, then search for the appropriate item’s **Marketplace ID**:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 进入这一步的 *先验* 假设是您已经设置了 **Git**、**VSCode**、**Node.js** 和 **NPM**，并且它们都准备就绪。还建议使用像
    **ESLint** 这样的代码检查工具。如果您知道自己在做什么，现在就可以开始设置和配置这些工具。不用着急，这只是这本书的其余部分在等待——如果你在哼唱
    *伊帕内玛的女孩* 的同时工作，这可能会更快。**VSCode** 拥有一个丰富的扩展生态系统，可以使您的生活更加轻松。以下是一些您可能想要安装的扩展（或它们的等效项）的列表。转到
    **VSCode** 中的 **扩展** 面板，然后搜索适当项目的 **Marketplace ID**：
- en: '![Figure 3.1 – List of useful VSCode extensions'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.1 – 有用的 VSCode 扩展列表'
- en: '](img/Figure_3.01_B17866.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.01_B17866.jpg)'
- en: Figure 3.1 – List of useful VSCode extensions
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 有用的 VSCode 扩展列表
- en: If you’re not quite there yet when it comes to knowing where and how to do this
    sort of thing, here’s what you can do. Ignore the elevator muzak, tie a bandana
    around your forehead, and dive straight into an 80s movie montage sequence. You
    will probably want to set a bookmark on this page first – the montage features
    a series of vignettes of you flipping to the *Further Reading* section at the
    end of this chapter, reading and following the links, culminating in a triumphantly
    successful installation… and then flipping back to your bookmark, ready to continue
    the journey.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有完全了解在哪里以及如何做这类事情，这里有一些你可以做的事情。忽略电梯音乐，在额头绑上头巾，然后直接进入 80 年代电影蒙太奇序列。你可能首先想要在这个页面上设置一个书签——蒙太奇包括一系列的特写镜头，你将翻到本章末尾的
    *进一步阅读* 部分，阅读并跟随链接，最终成功安装……然后翻回你的书签，准备继续旅程。
- en: Initialize All the Things
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化所有事物
- en: 'There are a number of unflashy tasks that go on here – things such as creating
    a new Git repository in GitHub and cloning it locally, which would take up too
    much space to go through in detail. Instead, here’s a rough checklist of what
    to expect to do as part of this step:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些不起眼的任务在进行中——比如在 GitHub 中创建一个新的 Git 仓库并在本地克隆它，这些细节过于详细，不适合在此展开。相反，这里是一个粗略的清单，列出在这个步骤中你预期要执行的任务：
- en: Create a new **Git** repository. If created in **GitHub**, you may need to **clone**
    the repos locally.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 **Git** 仓库。如果在 **GitHub** 中创建，可能需要本地 **克隆** 仓库。
- en: Add a `.gitignore` file to the repos – the only contents it really needs at
    this point are entries for the output `dist/` folder and for the `node_modules/`
    folders.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仓库中添加一个 `.gitignore` 文件——目前真正需要的只是输出 `dist/` 文件夹和 `node_modules/` 文件夹的条目。
- en: Create some folders – `src`, `dist`, `public`, and `assets` – to hold the source
    code, the packed output, and game assets, respectively.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一些文件夹——`src`、`dist`、`public` 和 `assets`——分别用于存放源代码、打包输出和游戏资源。
- en: Run `npm init` to create a `package.json` for the application.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `npm init` 以创建应用的 `package.json` 文件。
- en: 'Install webpack and core Babylon.js libraries and dependencies as developer
    dependencies with this command:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用此命令将 webpack 和核心 Babylon.js 库及其依赖项作为开发者依赖项安装：
- en: '[PRE0]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install additional Babylon.js modules that we’ll be using:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装我们将要使用的额外 Babylon.js 模块：
- en: '[PRE1]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With the package dependencies squared away, it’s time to add a few more foundational
    pieces to our nascent application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决好包依赖项之后，是时候为我们的新应用程序添加一些基础组件了。
- en: Scripts and ESLint Configuration
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本和 ESLint 配置
- en: At some point in the very near future, we’re going to want to be able to add
    some automation around our application’s build and deployment tasks. The key to
    making this as frictionless as possible is to leverage as much of the (and similar)
    application infrastructure as possible. Keeping it simple and focusing scripts
    on a single task will allow for easier automation in the future.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在不久的将来，我们将想要能够围绕我们的应用程序的构建和部署任务添加一些自动化。使这个过程尽可能无摩擦的关键是尽可能利用（和类似）的应用程序基础设施。保持简单，将脚本集中在单个任务上，将有助于未来更容易实现自动化。
- en: package.json Scripts
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: package.json 脚本
- en: 'There are three basic commands that we want to start out adding to our `package.json`
    file. These are simple scripts that will allow both local and production builds
    and linting of source. We’ll address dev versus production builds in an upcoming
    section, but for now, add these scripts to the `package.json` file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望首先添加到 `package.json` 文件中的有三个基本命令。这些是简单的脚本，将允许本地和生产的构建以及源代码的代码检查。我们将在下一节中讨论开发与生产构建的区别，但就目前而言，将这些脚本添加到
    `package.json` 文件中：
- en: '`start`: The webpack dev server and related packing processes for local development.
    Command: `npx webpack serve --mode development`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start`：webpack 开发服务器和相关打包过程，用于本地开发。命令：`npx webpack serve --mode development`'
- en: '`build`: Runs webpack in production configuration. Command: `npx webpack --mode
    production`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build`：以生产配置运行 webpack。命令：`npx webpack --mode production`'
- en: '`lint`: Makes sure our code doesn’t have any big “whoopsies!”. Command: `npx
    eslint`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lint`：确保我们的代码没有任何大的“糟糕！”。命令：`npx eslint`'
- en: Check your work for typos, and make sure that you save and commit both your
    `package.json` and your `package.lock.json` files. At this point, we’re still
    a couple of items short on our checklist to set up the application, so let’s get
    them knocked out so we can press forward on our journey!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 检查您的工作中的错别字，并确保保存并提交您的`package.json`和`package.lock.json`文件。到目前为止，我们在设置应用程序的清单中仍然缺少几个项目，所以让我们把它们完成，以便我们可以在我们的旅程上继续前进！
- en: Important Note
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: While it is possible to simply reference and load the entire Babylon.js library
    into the application, it is incredibly inefficient to do so – because BJS does
    so much, there’s a lot to the libraries, meaning they’re quite large in size and
    complexity. Clients are forced to download the full bundle of JS before the application
    can become responsive to input, reducing a user’s perception of an application’s
    performance. One of the most modern and effective ways to reduce an application’s
    footprint is by leveraging a feature of **ES6** called **tree shaking**. The process
    of tree shaking results in code output that includes only dependencies that are
    actually used in the code, resulting in smaller, faster, and more efficient JavaScript
    modules.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然将整个Babylon.js库简单地引用并加载到应用程序中是可能的，但这样做效率极低——因为BJS做了很多，库中有很多内容，这意味着它们在大小和复杂性上相当大。客户端被迫在应用程序能够对输入做出响应之前下载完整的JS包，这降低了用户对应用程序性能的感知。减少应用程序足迹的最现代和有效的方法之一是利用**ES6**的一个功能，称为**tree
    shaking**。tree shaking的过程会产生只包含代码中实际使用的依赖项的代码输出，从而产生更小、更快、更高效的JavaScript模块。
- en: 'What’s the downside? As you’ll see, every imported type must have its own `import`
    statement, but in addition, the full path of the type must be specified – not
    just the containing package. Still, the benefits can be substantial – as I commented
    in this pull request: [https://github.com/jelster/space-truckers/pull/15](https://github.com/jelster/space-truckers/pull/15).
    The start scene was reduced in size from 8.91 MB to 3.11 MB, a more than 50% reduction!'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有什么缺点吗？正如您将看到的，每个导入的类型都必须有自己的`import`语句，但除此之外，还必须指定类型的完整路径——而不仅仅是包含的包。尽管如此，好处可能非常显著——正如我在这个pull
    request中评论的那样：[https://github.com/jelster/space-truckers/pull/15](https://github.com/jelster/space-truckers/pull/15)。起始场景的大小从8.91
    MB减少到3.11 MB，减少了超过50%！
- en: Babylon.js has been around longer than ES6 modules have been supported, and
    the team has made a firm commitment to support backward compatibility in the engine.
    That’s why you’ll notice there are some places where compromises in that vein
    result in the need to import modules purely for side effects – the **MeshBuilder
    CreateXXXX** APIs are a prominent example of this. The BJS docs have more information
    located at [https://doc.babylonjs.com/divingDeeper/developWithBjs/treeShaking](https://doc.babylonjs.com/divingDeeper/developWithBjs/treeShaking)
    that can explain more about why and what modules behave in this fashion.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Babylon.js存在的时间比ES6模块支持的时间更长，团队已经承诺在引擎中支持向后兼容性。这就是为什么您会注意到在某些地方，这种妥协导致需要仅为了副作用而导入模块——**MeshBuilder
    CreateXXXX** API是这一点的突出例子。BJS文档中有更多信息位于[https://doc.babylonjs.com/divingDeeper/developWithBjs/treeShaking](https://doc.babylonjs.com/divingDeeper/developWithBjs/treeShaking)，可以解释更多关于为什么以及哪些模块以这种方式行为的原因。
- en: The PG examples we’ve looked at previously haven’t required anything special
    in the way of building, but that’s because the PG is built towards a different
    goal than what we’re looking to accomplish. We’re building a complete application
    that needs to not be dependent on the same luxuries (such as a CDN for grabbing
    the Babylon.js libraries) as the PG. To do that, we will sacrifice the flexible
    but inefficient load-everything approach of the PG for the compactness and efficiency
    of a webpacked application.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前查看的PG示例在构建方面并没有要求特殊处理，但这是因为PG的目标与我们要实现的目标不同。我们正在构建一个完整的应用程序，它不能依赖于PG相同的奢侈（例如，使用CDN获取Babylon.js库）。为了做到这一点，我们将牺牲PG灵活但低效的加载所有内容的方法，以换取webpacked应用程序的紧凑性和效率。
- en: Adding Configuration for ESLint
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加ESLint配置
- en: 'Add a new file using VSCode to the root folder of your repository, named `.eslintignore`.
    This is a text file that we’ll use to exclude certain directories from being checked
    by the lint tool, improving responsiveness and reliability. We don’t want our
    `node_modules` directory to be checked since we’re not working on those libraries.
    Neither do we care about JavaScript that’s already been packaged and output –
    anything in our `dist/` folder. Add the following lines to the `.eslintignore`
    file you’ve just created:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 VSCode 在你的仓库根目录中添加一个新文件，命名为 `.eslintignore`。这是一个文本文件，我们将用它来排除某些目录被 lint 工具检查，从而提高响应性和可靠性。我们不希望检查
    `node_modules` 目录，因为我们没有在这些库上工作。同样，我们也不关心已经打包并输出的 JavaScript 代码——`dist/` 文件夹中的任何内容。将以下行添加到刚刚创建的
    `.eslintignore` 文件中：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save and close the file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并关闭文件。
- en: Configuring Webpack
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Webpack
- en: Add another new file to the root directory and name it `webpack.common.js`,
    then create another two named `webpack.dev.js` and `webpack.prod.js`. We’ll put
    the base webpack config in the `webpack.common.js` file and merge environment-specific
    config at script runtime using `webpack-merge`. At the same time, create a new
    empty file in `src` and name it `index.js` along with an empty `index.xhtml` in
    the `public/` directory. This will serve as a placeholder for future work while
    allowing us to test and validate our current config.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在根目录中添加另一个新文件，命名为 `webpack.common.js`，然后创建另外两个分别命名为 `webpack.dev.js` 和 `webpack.prod.js`
    的文件。我们将基础 Webpack 配置放在 `webpack.common.js` 文件中，并在脚本运行时使用 `webpack-merge` 合并特定环境的配置。同时，在
    `src` 中创建一个新的空文件，命名为 `index.js`，在 `public/` 目录中创建一个空的 `index.xhtml` 文件。这将作为未来工作的占位符，同时允许我们测试和验证当前的配置。
- en: Note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`dist/` folder. Other related assets may also be affected in ways ranging from
    generating correct URL paths to rendering markup templates into output directories
    and more. Check out the **Webpack** repos along with the docs at [https://github.com/webpack/webpack](https://github.com/webpack/webpack)
    to learn more about configuration and plugin options.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`dist/` 文件夹。其他相关资产也可能受到影响，从生成正确的 URL 路径到将标记模板渲染到输出目录等。查看 **Webpack** 仓库以及 [https://github.com/webpack/webpack](https://github.com/webpack/webpack)
    上的文档，了解更多关于配置和插件选项的信息。'
- en: Development versus Production Modes
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发模式与生产模式
- en: When running in a production build context, there are really only two things
    we need to happen. First, Webpack does its thing, bundling and packaging up all
    the `.js` scripts in the `src/` folder, outputting the results to the `dist/`
    folder. Second, a script reference to the application’s entry point – `index.js`
    – is injected into an `index.xhtml` file that is what gets served to web browsers.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产构建上下文中运行时，实际上只有两件事需要发生。首先，Webpack 执行其任务，将 `src/` 文件夹中的所有 `.js` 脚本打包并打包，将结果输出到
    `dist/` 文件夹。其次，将应用程序的入口点——`index.js`——的脚本引用注入到 `index.xhtml` 文件中，这是提供给网络浏览器的文件。
- en: Local development has a slightly different set of needs than a production build.
    We want to be able to make changes to our code and see the results of those changes
    as quickly as possible, which rules out the potentially lengthy process of re-bundling
    everything from scratch upon a change. Instead, the **webpack development server**
    is smart enough to both cache build output and selectively rebuild only what’s
    been changed. A **WebSocket** connection to the browser is used to automatically
    refresh the page when a new bundle is compiled, helping further to close any gaps
    in iteration. We also want to emit JavaScript **source maps** to aid in debugging
    as well as to specify content paths for non-bundled content served by our development
    server.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本地开发与生产构建的需求略有不同。我们希望能够尽快看到对代码所做的更改的结果，这排除了在更改后从头开始重新打包所有内容的可能耗时过程。相反，**webpack
    开发服务器**足够智能，既能缓存构建输出，又能选择性地仅重新构建已更改的部分。通过到浏览器的 **WebSocket** 连接，当新包被编译时，会自动刷新页面，从而进一步缩小迭代过程中的差距。我们还想发出
    JavaScript **源映射**，以帮助调试以及为开发服务器提供非打包内容的路径。
- en: Common Webpack Config
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常见 Webpack 配置
- en: Regardless of whether webpack is being run for development or production usage,
    we always want to make sure that our destination directory is cleaned of any old
    or potentially stale source files. We’ll use the `CleanWebpackPlugin` for that
    purpose, and the `HtmlWebpackPlugin` to inject the proper script references into
    our `index.xhtml` template.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 无论 Webpack 是用于开发还是生产使用，我们总是想确保我们的目标目录被清理掉任何旧的或可能过时的源文件。我们将使用 `CleanWebpackPlugin`
    来实现这个目的，并使用 `HtmlWebpackPlugin` 将适当的脚本引用注入到我们的 `index.xhtml` 模板中。
- en: 'Back to the `webpack.common.js` file, let’s add some `import` statements and
    define the `module.exports` stub function:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 `webpack.common.js` 文件，让我们添加一些 `import` 语句并定义 `module.exports` 桩函数：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You may notice that unlike the rest of our application, our webpack configuration
    isn’t using `entry` object that designates the script that will serve to launch
    our application on the client; it will be injected into a `<script>` tag in the
    site’s default `index.xhtml` landing page.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，与我们的应用程序的其他部分不同，我们的 Webpack 配置没有使用指定在客户端启动应用程序的脚本的 `entry` 对象；它将被注入到网站的默认
    `index.xhtml` 登录页面的 `<script>` 标签中。
- en: Important Note
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: File and folder paths can be tricky to navigate when working in a cross-platform
    environment. The `__dirname` webpack-provided variable is a good way to avoid
    problems in the first place because it will correctly and consistently represent
    the equivalent of `fs.cwd()`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在跨平台环境中工作时，文件和文件夹路径可能会很复杂。`__dirname` Webpack 提供的变量是一个很好的方法来避免问题，因为它将正确且一致地表示
    `fs.cwd()` 的等效值。
- en: The `entry` item and potentially other config elements will need to know what
    base paths to use when reading and writing files, so we designate and compute
    that value. While we’re at it, we might as well add the output entry to our config.
    This object specifies where to emit the packed results, and to help identify it
    among potential other scripts we name it `babylonBundle.js`. Finally, we instantiate
    new instances of our `CleanWebpackPlugin` and `HtmlWebpackPlugin` modules.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`entry` 项目和可能的其他配置元素在读取和写入文件时需要知道要使用的基本路径，因此我们指定并计算这个值。在此同时，我们也可以将输出条目添加到我们的配置中。该对象指定了打包结果要输出的位置，为了帮助识别潜在的其它脚本，我们将其命名为
    `babylonBundle.js`。最后，我们实例化新的 `CleanWebpackPlugin` 和 `HtmlWebpackPlugin` 模块。'
- en: Important Note
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The order that plugins are added to the plugins array is important! Make sure
    that your `CleanWebpackPlugin` is always at the top of the plugin list so that
    it runs first.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到插件数组中的插件顺序很重要！请确保你的 `CleanWebpackPlugin` 总是位于插件列表的顶部，以便它首先运行。
- en: 'The `HtmlWebpackPlugin` is given the path to our publicly served HTML `index.xhtml`
    page and told to inject the proper script tags for the bundle into the document.
    Once that is done, we’ll test our config quickly before completing the common
    (and also the biggest) configuration setup:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`HtmlWebpackPlugin` 被赋予了我们的公开服务 HTML `index.xhtml` 页面的路径，并被告知将正确的脚本标签注入到文档中。一旦完成，我们将在完成常见的（也是最大的）配置设置之前快速测试我们的配置：'
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'By specifying an `assetModuleFilename` pattern, we are instructing `assets`
    subfolder with the original file name, extension, and any query string parameters.
    To test out our configuration, make sure you’ve saved everything and enter the
    following command in a terminal window (make sure your working directory is the
    same as the root of the repository):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定一个 `assetModuleFilename` 模式，我们正在指示 `assets` 子文件夹使用原始文件名、扩展名和任何查询字符串参数。为了测试我们的配置，请确保你已经保存了所有内容，并在终端窗口中输入以下命令（确保你的工作目录与存储库的根目录相同）：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If everything goes well, you should see a bunch of text in your command window,
    some green text, and no errors. That’s great, but there’s not much of anything
    going on so we can’t take a break quite yet – we’re very close to finishing this
    section!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该在命令窗口中看到一些文本，一些绿色文本，并且没有错误。那太好了，但还没有太多的事情发生，所以我们还不能休息——我们离完成这一部分非常接近了！
- en: Resolver and Loader Configuration
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解析器和加载器配置
- en: As part of processing your source code, Webpack will compile a list of all the
    various **import** (or require for CommonJS modules) and invoke a processing pipeline
    that uses matching rules to select the appropriate logic to resolve the location
    for the request.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 作为处理源代码的一部分，Webpack 将编译一个包含所有各种 **导入**（或对 CommonJS 模块使用 require）的列表，并调用一个使用匹配规则来选择适当逻辑以解析请求位置的处理管道。
- en: Note
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This is an area where **TypeScript** users will see significant differences
    between their implementations and this ES6 (-ish) one. **Raanan Weber** of the
    BJS team has made a TypeScript starter repository available at [https://github.com/RaananW/babylonjs-webpack-es6](https://github.com/RaananW/babylonjs-webpack-es6).
    The TypeScript Webpack code listed here is modeled to be as similar as possible
    to Raanan’s starter template to make transitioning between reading this text and
    your code easier.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个**TypeScript**用户将看到他们的实现与这个ES6（类似）实现之间有显著差异的领域。BJS团队的**Raanan Weber**已经将一个TypeScript启动存储库发布在[https://github.com/RaananW/babylonjs-webpack-es6](https://github.com/RaananW/babylonjs-webpack-es6)。这里列出的TypeScript
    Webpack代码被设计得尽可能接近Raanan的启动模板，以便在阅读本文和你的代码之间过渡更容易。
- en: 'To avoid the need to have to code for environmental differences in static asset
    URLs, we use `source-map-loader` helps to match symbols from runtime code with
    locations in the source code. Before that though, our config needs a `resolve`
    object that specifies an array of `extensions` to enable searching through. Add
    this as a property of the returned config, just below the `output` property. Here’s
    what that part of the config might look like:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在静态资产URL中编码环境差异的需要，我们使用`source-map-loader`帮助匹配运行时代码中的符号与源代码中的位置。在此之前，我们的配置需要一个`resolve`对象，该对象指定了一个`extensions`数组以启用搜索。将此作为返回的配置的属性添加，位于`output`属性下方。这部分配置可能看起来像这样：
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The list of `rules` in the `modules` property define what constitutes a separate
    module in the eyes of `test` to perform to see whether the given loader will handle
    the request. The long regular expression for the asset/resource module type is
    essentially a list of all the different file extensions that we want to be considered
    as assets, which are copied without further processing into the output directory.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在`modules`属性的`rules`列表中定义了`test`在执行以查看给定的加载器是否能够处理请求时，什么构成了一个独立的模块。对于资产/资源模块类型的长的正则表达式本质上是一个列表，列出了我们希望被视为资产的、不需要进一步处理就复制到输出目录的所有不同文件扩展名。
- en: Webpack Development and Production Configurations
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Webpack 开发和生产配置
- en: In our `webpack.dev.js`, we’re going to make use of the `webpack-merge` add-on
    to webpack. This handy utility will merge two webpack config objects together,
    returning the combined result. Why is this handy? Because we’ll be able to have
    separate development and production configurations without needing to hardcode
    their names into the `webpack.common.js` or the `package.json` scripts. If we
    want to add another environment configuration, all we need to do is add the new
    webpack config file, merge our common config, and then point our `npx webpack
    --config` parameter at the appropriate file.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`webpack.dev.js`中，我们将利用`webpack-merge`插件来扩展webpack。这个方便的实用工具会将两个webpack配置对象合并在一起，并返回合并后的结果。为什么这很方便呢？因为我们将能够拥有独立的开发和生产配置，而无需将它们的名称硬编码到`webpack.common.js`或`package.json`脚本中。如果我们想添加另一个环境配置，我们只需要添加新的webpack配置文件，合并我们的通用配置，然后将我们的`npx
    webpack --config`参数指向适当的文件。
- en: 'There are really only two things we need from our dev config that we don’t
    have in common. First, configuration for the web server launched with `npx webpack
    serve`. Second, we specify that we want our source maps to be sent inline with
    our scripts. The top-level mode of “development” ensures that various production-suited
    optimization paths are not taken by webpack. This is what our `webpack.dev.js`
    looks like when we’re done:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上只需要从我们的开发配置中获取两样东西，这些在通用配置中是没有的。首先，使用`npx webpack serve`启动的web服务器的配置。其次，我们指定我们希望我们的源映射与脚本一起内联发送。顶层模式“开发”确保webpack不会采取适合生产的各种优化路径。这就是我们完成后的`webpack.dev.js`的样子：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Creating `webpack.prod.js` is even simpler since we don’t need the dev server
    configuration, and it shares the same set of top-level `require` statements as
    our dev configuration. To reduce the size of our script packages, we will choose
    not to emit source maps, and other than setting the mode to **production**, that’s
    the only difference:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`webpack.prod.js`甚至更简单，因为我们不需要开发服务器配置，并且它与我们的开发配置共享相同的顶层`require`语句集合。为了减小我们的脚本包的大小，我们将选择不输出源映射，并且除了将模式设置为**生产**之外，这就是唯一的区别：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Before we shift our focus a bit, let’s get some markup into our `public/index.xhtml`
    file. We don’t need much right now, so let’s start with this simple markup:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们稍微转移一下焦点之前，让我们将一些标记放入`public/index.xhtml`文件中。现在我们不需要太多，所以让我们从以下简单的标记开始：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is enough for us to check our progress by making sure all files have been
    saved before running `npm run start`. Success is indicated by the launching of
    your web browser and a console output similar to this screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这就足够我们通过确保在运行`npm run start`之前所有文件都已保存来检查我们的进度。成功将通过启动你的网络浏览器和类似以下截图的控制台输出指示：
- en: '![Figure 3.2 – Webpack output after successful bundle](img/Figure_3.02_B17866.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图3.2 – 成功打包后的Webpack输出](img/Figure_3.02_B17866.jpg)'
- en: Figure 3.2 – Webpack output after successful bundle
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 – 成功打包后的Webpack输出
- en: While the webpack development server is running, any changes you make to your
    source code will automatically refresh your browser. Leave the dev server running,
    because we’re going to start making use of it!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当Webpack开发服务器运行时，你对源代码所做的任何更改都将自动刷新你的浏览器。请保持开发服务器运行，因为我们将要开始利用它！
- en: Crafting a PG Snippet
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作PG代码片段
- en: Before we can use our PG code in our application, we’re going to need to do
    some light refactoring. A little bit of preparation can save a lot of time later!
    The things we’re going to change are select pieces of code that could vary between
    the PG and local environments, such as texture paths and URLs, along with some
    minor structural modifications. For your convenience, here’s a link to the refactored
    snippet. If you are just joining us here in the journey, use the link below. If
    you’ve been following along, substitute your own snippet URL for the following
    one. Start by opening your favorite browser and navigating to either your own
    snippet or to [https://playground.babylonjs.com/#0UYAPE#42](https://playground.babylonjs.com/%230UYAPE%2342).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够在我们的应用程序中使用我们的PG代码之前，我们需要做一些轻微的重构。一点准备可以节省以后大量的时间！我们将要更改的是可能在不同PG和本地环境中变化的代码片段，例如纹理路径和URL，以及一些小的结构修改。为了方便起见，这里有一个链接到重构后的代码片段。如果你是刚刚加入我们的旅程，请使用下面的链接。如果你一直在跟随，请用你自己的代码片段URL替换以下一个。首先，打开你喜欢的浏览器，导航到你的代码片段或到[https://playground.babylonjs.com/#0UYAPE#42](https://playground.babylonjs.com/%230UYAPE%2342)。
- en: Cleaning up the BABYLON Namespace Prefix
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理BABYLON命名空间前缀
- en: 'One of the things that you may have found annoying about coding in the PG is
    how in the PG it’s necessary to always prefix BJS types with the `BABYLON` namespace.
    This is not ideal, but we can get rid of the need for them by adding an alias
    to all the various types we’re using to the top of our snippet. The alias in our
    PG snippet will be defined as a `const` assembled from the various BJS types used:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在PG中编码时，你可能发现了一件令人烦恼的事情，那就是在PG中总是需要在BJS类型前加上`BABYLON`命名空间。这并不理想，但我们可以通过在我们的代码片段顶部添加所有各种类型的别名来消除对这些命名空间的需求。在我们的PG代码片段中，别名将被定义为从各种BJS类型组成的`const`：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can then do a Find and Replace (*Ctrl + F* or *Command + F*) for the string
    `BABYLON.` (don’t forget the period!) and that will complete our work on this
    section. To preview where this is headed, when we move this into our VSCode environment,
    we’ll convert this to an `import` statement. Doing this refactoring after the
    fact, like we are in this case, isn’t ideal; in the future, we will start our
    snippets out with this construct and build it over time. That way, it won’t be
    nearly as much effort!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以进行查找和替换（*Ctrl + F* 或 *Command + F*）字符串`BABYLON.`（不要忘记句号！）来完成本节的修改工作。为了预览这一进展，当我们将其移动到我们的VSCode环境中时，我们将将其转换为`import`语句。像我们现在这样事后进行重构并不是最佳做法；在未来，我们将从这种结构开始编写代码片段，并随着时间的推移逐步构建。这样，它将不会花费太多的精力！
- en: Extracting Magic Strings
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提取魔法字符串
- en: 'There are three separate textures (not including the procedural one) in use
    in our snippet, and we want to make it easier to change the specific URL or file
    path. We begin that by defining a set of `const` strings in the PG to contain
    the PG-specific paths:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码片段中使用了三个单独的纹理（不包括程序化纹理），我们希望使其更容易更改特定的URL或文件路径。我们首先通过在PG中定义一组`const`字符串来包含PG特定的路径：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can then go into the `createStar` and `createPlanet` functions and replace
    the hardcoded paths with our constant expressions:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以进入`createStar`和`createPlanet`函数，并将硬编码的路径替换为我们的常量表达式：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Once you’ve replaced all of the hardcoded string values, click **Save** and
    refresh the page to make sure the snippet still runs OK, paying attention to any
    missing textures, and fixing any missing references that may pop up. With these
    changes in place, it will be a smooth transition from running this in the PG to
    using it in our application.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦替换了所有硬编码的字符串值，点击**保存**并刷新页面，以确保片段仍然可以正常运行，注意任何缺失的纹理，并修复可能出现的任何缺失引用。有了这些更改，从在PG中运行到在我们的应用程序中使用它将是一个平稳的过渡。
- en: Transitioning from the PG to the Application
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从PG过渡到应用程序
- en: The PG is a rich, robust, and extensible way to quickly get started writing
    and running code, but our application has different needs from the PG that we
    will need to account for and fulfill. We want to make sure that our code is both
    easy to change and easy to understand, but fortunately, there are small steps
    we can take that will make a large difference later on.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: PG是一个丰富、健壮且可扩展的方式，可以快速开始编写和运行代码，但我们的应用程序与PG有不同的需求，我们需要考虑并满足这些需求。我们希望确保我们的代码既易于更改又易于理解，但幸运的是，我们可以采取一些小步骤，这些步骤将在以后产生重大影响。
- en: Creating the Engine Instance
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建引擎实例
- en: 'Now, the immediate question is this: how do we take our plucky snippet here
    and plug it into our application without turning it into an exercise in both masochism
    and self-discipline? The secret lies in preparation. When we built our PG snippet,
    we structured logic as atomically as possible into various discrete `index.js`
    that will take the place of the PG’s `engine` initialization. Add this to the
    file below the part where we created the `canvas` element:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，最直接的问题就是：我们如何将这里的勇敢片段插入到我们的应用程序中，而不会让它变成一种既是自虐又是自律的练习？秘密在于准备。当我们构建PG片段时，我们将逻辑尽可能原子化地结构到各种离散的`index.js`中，这些文件将取代PG的`engine`初始化。将以下内容添加到创建`canvas`元素的部分下方：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This is a pretty bog-standard Babylon.js `Engine` initialization. The `Engine`
    constructor has a number of interesting different parameters and configuration
    options that we’ll explore further on down the road. For now, we are mostly using
    the engine defaults except for enabling `createStartScene` in anticipation of
    its imminent arrival.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当标准的Babylon.js `Engine`初始化。`Engine`构造函数有许多有趣的参数和配置选项，我们将在稍后进一步探讨。现在，我们主要使用引擎的默认设置，除了为了期待其即将到来而启用`createStartScene`。
- en: Adding and Importing the StartScene
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加和导入起始场景
- en: Create a new file in your project’s `src` folder and name it `startscene.js`.
    Copy and paste everything from the PG snippet into this new file *except* the
    `createScene` function. A couple of minor modifications are all that’s needed
    thanks to the groundwork we previously laid down!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的项目“src”文件夹中创建一个新文件，命名为`startscene.js`。将PG片段中的所有内容复制并粘贴到这个新文件中，*除了* `createScene`
    函数。由于我们之前已经打下了基础，所以只需要进行一些小的修改！
- en: 'Change the `const` to `import`, also replacing the `=` with `from` `“@babylonjs/core”`
    as the name to source imports. The `StarfieldProceduralTexture` isn’t a part of
    the core BJS framework, so we’ll also need to pull that entry out of the import
    list and give it its own entry: `import { StarfieldProceduralTexture } from “@babylonjs/procedural-textures”;`.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将`const`改为`import`，也将`=`替换为`from` `“@babylonjs/core”`作为源导入的名称。`StarfieldProceduralTexture`不是核心BJS框架的一部分，因此我们还需要将此条目从导入列表中拉出，并为其提供一个单独的条目：`import
    { StarfieldProceduralTexture } from “@babylonjs/procedural-textures”`;。
- en: The final change is to replace our `const` texture paths with `import` statements
    pointing to the appropriate texture in our `/assets/textures` folder.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的修改是将我们的`const`纹理路径替换为指向`/assets/textures`文件夹中适当纹理的`import`语句。
- en: Important Note
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you don’t already have the three textures downloaded and in the asset directory,
    now would be a good time to do it. The URL prefix for textures is just [https://www.babylonjs-playground.com/textures/](https://www.babylonjs-playground.com/textures/),
    followed by the name of the texture with the extension, (e.g., `rock.png`). We
    want to be able to use consistent paths to refer to assets throughout the application,
    so we are using `import` statement.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有下载三个纹理并将它们放在资产目录中，现在是一个好时机。纹理的URL前缀是[https://www.babylonjs-playground.com/textures/](https://www.babylonjs-playground.com/textures/)，后面跟着纹理的名称和扩展名（例如，`rock.png`）。我们希望能够在整个应用程序中使用一致的路径来引用资源，因此我们使用`import`语句。
- en: Why don’t we just use the online version of the resource instead of duplicating
    it locally? Good question. Later on in the book, we’ll cover how to make Space-Truckers
    into a **Progressive Web Application** (**PWA**), and how to make assets available
    for offline use.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们不直接使用资源的在线版本，而不是在本地复制它？这是个好问题。在本书的后面部分，我们将介绍如何将Space-Truckers变成一个**渐进式Web应用**（**PWA**），以及如何使资产可用于离线使用。
- en: 'When the `import` statements will be included in the build output. In addition,
    the asset is assigned a unique filename that helps bust aggressive caches when
    assets are modified:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当`import`语句包含在构建输出中时。此外，资产被分配了一个唯一的文件名，这有助于在修改资产时打破激进的缓存：
- en: '[PRE14]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Exporting and Importing the Start Scene
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出和导入起始场景
- en: 'One last item to add to our `startscene.js` and we’ll be ready to finish wiring
    it into the game! If we reflect back on the overall design of our snippet’s functions,
    we can readily see that the only “public” function need be the `createStartScene`
    function. Let’s make that function available to consumers by adding `export default`
    to the function declaration:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`startscene.js`中添加最后一项，我们就可以准备好将其连接到游戏中了！如果我们回顾一下我们代码片段函数的整体设计，我们可以很容易地看出，唯一需要的“公共”函数就是`createStartScene`函数。让我们通过在函数声明中添加`export
    default`来使这个函数对消费者可用：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Save the file and switch back to your `index.js`. Since we’ve already added
    the invocation of the `createStartScene` and the following `import` to the top
    of the file’s import list: `import createStartScene from “./startscene”;`. Save
    the file and check that the **Webpack output** doesn’t contain any errors. When
    your browser refreshes, you should see a familiar scene being rendered. Go ahead
    and give yourself a pat on the back – you’ve completed pulling in our main application
    background scene! There’s something still missing, however, and that’s something
    for visitors to see when they first arrive at the web page but before they launch
    the game. It would be sort of rude to just take over a visitor’s browser and start
    downloading MBs of content without asking first, so we are going to put out a
    welcome mat in the form of the landing HTML page.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并切换回你的`index.js`。由于我们已经在文件导入列表的顶部添加了对`createStartScene`的调用和随后的`import`：`import
    createStartScene from “./startscene”;`。保存文件并检查**Webpack输出**是否包含任何错误。当你的浏览器刷新时，你应该会看到一个熟悉的场景被渲染出来。向前迈进，给自己鼓掌吧——你已经完成了将我们的主要应用程序背景场景引入进来！然而，还有一些东西仍然缺失，那就是当访客首次到达网页但尚未启动游戏时可以看到的东西。如果我们不先询问就接管访客的浏览器并开始下载MBs的内容，那就有些失礼了，所以我们将推出一个欢迎垫，即着陆HTML页面。
- en: Constructing the Landing Page
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建着陆页
- en: 'Although it is web-based and hosted by a web server, there is a critical principle
    at play for Space-Truckers: the game that we haven’t done much but hint at previously.
    That principle is that we want to, by all means necessary, avoid using the HTML
    DOM in the game. Now, to be fair, it’s not a total blanket ban on using HTML or
    CSS anywhere, just anywhere important. The reason for this is we want to give
    our future selves a gift that makes it seamless to target Space-Truckers to Babylon
    Native; code that uses the HTML DOM isn’t compatible with BJS Native. That said,
    there is still the need to do a little bit of HTML and CSS work to make the landing
    page a little bit more hospitable to visitors.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它是基于Web并由Web服务器托管，但Space-Truckers中有一个关键原则在起作用：这是我们之前没有做很多但只是暗示过的游戏。这个原则是我们无论如何都要避免在游戏中使用HTML
    DOM。现在，为了公平起见，这并不是对在任何地方使用HTML或CSS的完全禁止，只是在任何重要的地方。这样做的原因是我们想给未来的自己一个礼物，使得将Space-Truckers定位到Babylon
    Native变得无缝；使用HTML DOM的代码与BJS Native不兼容。话虽如此，我们仍然需要做一些HTML和CSS的工作，使着陆页对访客更加友好。
- en: The Concept (Art)
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概念（艺术）
- en: 'When Space-Truckers was just in the process of being conceived as an idea,
    early concept sketches were useful in helping to establish various different aspects
    of the look, feel, and setting of the game. The following figure depicts what
    we want our landing page to look like:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当Space-Truckers还处于构思阶段时，早期的概念草图有助于确立游戏的外观、感觉和设置的各种不同方面。以下图展示了我们希望我们的着陆页看起来像什么：
- en: '![Figure 3.3 – HTML landing page design'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.3 – HTML着陆页设计'
- en: '](img/Figure_3.03_B17866.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.03_B17866.jpg)'
- en: Figure 3.3 – HTML landing page design
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – HTML着陆页设计
- en: When a user navigates to the Space-Truckers website, they’ll be presented with
    a centered image that functions in the same way that a book cover attempts to
    convey some sense of the book’s content. A Call-to-Action button to Launch the
    game sits prominently and visibly in the center of the viewport, enticing the
    visitor to click the button and play the game. Lastly, we have a small site footer
    with the standard privacy, support, repository, license, copyright notices, and
    so on.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户导航到Space-Truckers网站时，他们会看到一个居中的图片，其功能类似于书籍封面试图传达书籍内容的方式。一个用于启动游戏的行动号召按钮显著且清晰地位于视口的中心，吸引访客点击按钮并玩游戏。最后，我们还有一个包含标准隐私政策、支持、仓库、许可、版权声明等的小型网站页脚。
- en: Note
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will want to structure our markup such that it will display appropriately
    on-screen dimensions ranging from the high dpi (but small screen size) of a smartphone
    or tablet to the much larger but lower resolutions offered by large-screen TVs
    and display monitors. Aspect ratios are important too!
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的标记结构能够在从高dpi（但屏幕尺寸小）的手机或平板电脑到大屏幕电视和显示器提供的更大但分辨率较低的屏幕尺寸范围内适当地显示。纵横比也同样重要！
- en: Sticking the Landing
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 稳稳着陆
- en: If all goes well, we’ll end up with something similar to this for our landing
    page. We’re not going to worry about fonts or background images right now as much
    as we want to get more of a sense of how we want to lay out and design various
    elements.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们的着陆页面将类似于这个。我们现在不会太在意字体或背景图片，我们更想了解我们想要如何布局和设计各种元素。
- en: '![Figure 3.4 – The Space-Truckers landing page. Behind the foreground content
    are the animated orbiting planets created in Chapter 2, Ramping up on Babylon.js'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.4 – Space-Truckers着陆页面。前景内容之后是第2章中创建的动画绕行行星，这些行星是在《在Babylon.js中提升》这一章节中制作的'
- en: '](img/Figure_3.04_B17866.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_3.04_B17866.jpg](img/Figure_3.04_B17866.jpg)'
- en: Figure 3.4 – The Space-Truckers landing page. Behind the foreground content
    are the animated orbiting planets created in Chapter 2, Ramping up on Babylon.js
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – Space-Truckers着陆页面。前景内容之后是第2章中创建的动画绕行行星，这些行星是在《在Babylon.js中提升》这一章节中制作的。
- en: 'To achieve this, there’s some HTML markup along with CSS styles that need to
    be added to the `/public/index.xhtml` page. There’s an additional small change
    we’ll need to make to the `index.js` file that will add a class of `background-canvas`
    to the newly created HTML Canvas that is appended to the document with `canvas.classList.add(“background-canvas”);`,
    so get that change out of the way and open up the `public/index.xhtml` file in
    VSCode. There’s enough that needs to be added that it would take up a prohibitive
    amount of page space, so at this point, you have a couple of options:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，需要在`/public/index.xhtml`页面添加一些HTML标记和CSS样式。我们还需要对`index.js`文件进行一些额外的修改，将`background-canvas`类添加到新创建的HTML
    Canvas中，该Canvas是通过`canvas.classList.add(“background-canvas”);`附加到文档的，所以先完成这个修改，然后在VSCode中打开`public/index.xhtml`文件。需要添加的内容很多，可能会占用过多的页面空间，所以在这个阶段，你有几个选择：
- en: Take the homework assignment and build out the HTML/CSS to get to the preceding
    screenshot
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成家庭作业，构建HTML/CSS以获得前面的截图
- en: Grab the finished files (there will be two or so in total, in addition to the
    `index.js` change) from [https://github.com/jelster/space-truckers/tree/ch3-final](https://github.com/jelster/space-truckers/tree/ch3-final)
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[https://github.com/jelster/space-truckers/tree/ch3-final](https://github.com/jelster/space-truckers/tree/ch3-final)获取完成的文件（总共有两三个，包括对`index.js`的修改）
- en: There isn’t any right or wrong answer; it’s whatever you will enjoy and learn
    from the most in the amount of time you have available that means the most and
    you’re the only one who can decide what that is! Each chapter in this book has
    an accompanying branch (and tag) in Git. The purpose of leaving the entire branch
    with its commit history in place is to give you the opportunity to see how the
    code evolves, commit by commit, while avoiding adding too much noise to the main
    branch’s commit history.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 没有正确或错误答案；最重要的是你能在你拥有的时间内享受并从中学到最多的东西！这本书的每一章在Git中都有一个相应的分支（和标签）。保留整个分支及其提交历史的目的，是给你一个机会看到代码是如何逐个提交地演变的，同时避免向主分支的提交历史中添加过多的噪音。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In a whirlwind of Webpack, ES6 Imports, and CSS shenanigans, we’ve completed
    a key process that started with a simple PG snippet and finished with an animated
    landing page. Along the way, we set up our local development scripts so we can
    take advantage of modern JavaScript features such as tree-shaking to optimize
    our package bundle sizes, while still being able to quickly integrate and view
    changes into the application.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在Webpack、ES6导入和CSS恶作剧的狂潮中，我们完成了一个关键过程，它从简单的PG片段开始，以一个动画着陆页结束。在这个过程中，我们设置了我们的本地开发脚本，以便我们可以利用现代JavaScript功能，如tree-shaking来优化我们的包捆绑大小，同时仍然能够快速集成和查看应用程序中的更改。
- en: What’s next from here should be fairly obvious to anyone who has ever stood
    in front of a Big Red Button labeled “Launch”. It’s time to Push the Button, and
    make it do interesting things! Yes, we will be implementing our application’s
    Launch-time experience, which involves establishing some mechanics of state in
    the application. Don’t worry if you’re not through with this section yet, there’s
    more to be done!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里接下来应该对任何曾经站在标有“启动”字样的大红按钮前的人来说相当明显。是时候按按钮了，让它做些有趣的事情！是的，我们将实现我们的应用程序的启动时体验，这涉及到在应用程序中建立一些状态机制。如果你还没有完成这一部分，别担心，还有更多要做！
- en: Extended Topics
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展主题
- en: 'For the person looking to make the launch page their own or who wants to dive
    deeper into the potential possibilities opened up by this chapter, here are some
    things you might consider doing:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对于想要将启动页面个性化或想要深入了解本章开启的潜在可能性的个人，以下是一些你可能考虑做的事情：
- en: Add a cool hover-in/out effect to the launch button so that when the cursor
    hovers over it, a color and/or animated effect is applied. Do the same for clicking
    the button.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为启动按钮添加一个酷炫的悬停进/出效果，当光标悬停在它上面时，应用颜色和/或动画效果。点击按钮时也做同样的事情。
- en: Improve the landing page’s navigational structure with links to the GitHub repos,
    and so on.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过链接到GitHub仓库等，改善着陆页的导航结构。
- en: Make the central hero area into an image carousel that can be populated with
    additional concept art, screenshots, gameplay videos, and so on.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将中心英雄区域变成一个可以填充额外概念艺术、截图、游戏视频等的图片轮播。
- en: Use CSS to blend the canvas animation with the hero image in an interesting
    fashion. You can do different types of blending, such as difference, exclusion,
    screen, and so on, along with other cool transformations.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CSS以有趣的方式将画布动画与英雄图像混合。你可以做不同类型的混合，如差异、排除、屏幕等，以及其他酷炫的转换。
