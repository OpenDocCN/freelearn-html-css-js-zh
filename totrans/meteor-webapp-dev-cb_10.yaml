- en: Chapter 10. Working with Accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing OAuth accounts packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the accounts login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing two-factor authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Critical to nearly every application we build is some type of authentication
    and user identification. Usually, we will spend days and weeks developing an accounts
    system, when we could spend that time programming our app. Meteor solves this
    problem, and solves it well. From integrations with major OAuth providers (Twitter,
    Google, Facebook, etc.) to a simple, secure password-based system, adding accounts
    and authentication inside of your Meteor app is quick and painless. The recipes
    in this chapter will cover the most important aspects of Meteor's `accounts` packages,
    enabling you to easily take care of user accounts and move on to other things.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing OAuth accounts packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, there are so many popular authentication services available, with such
    large user bases, that it's kind of silly not to take advantage of those services.
    If you use the accounts system of a major service, like Twitter or GitHub, you
    instantly tap into an enormous user base which can increase the use of your app.
    This recipe will show you how to implement an OAuth accounts system in a Meteor
    app, using the Twitter accounts service as an example.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to focus almost exclusively on the accounts and authentication
    piece of our application, and as such, we only need a very simple, baseline application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal window, create your root project by entering the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That's all it takes. Everything else will be done inside our recipe, so let's
    get going!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add the appropriate `accounts` packages, and configure our Twitter
    login service. Proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new terminal window (keep your application running), navigate to the root
    folder of your project, and enter the following two commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add several dependent packages, so you don't have to. How thoughtful
    and gentlemanly of Meteor to do that for us!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can just as easily use another authentication service by replacing `accounts-twitter`
    used in this step with any of the following: `accounts-facebook`, `accounts-github`,
    `accounts-google`, `accounts-meetup`, `account-weibo`, or `accounts-meteor-developer.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `[project root]/client/twitter-login.html` and add the following template
    inclusion just after the starting `<body>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save this change, and navigate to your app in a browser (usually `http://localhost:3000/`).
    At the top-left of your screen you will see a red button that says **Configure
    Twitter Login**, as shown in the following screenshot:![How to do it...](img/image00409.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Configure Twitter Login** button, and a set of instructions for configuring
    your Twitter app will appear. Follow those instructions *exactly*, entering your
    `consumerkey` (API key) and consumer `secret` key(API secret) where appropriate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: For this recipe, the value you enter in the website field is going to be `http://127.0.0.1:3000`
    rather than `http://localhost:3000`. Twitter doesn't allow the use of `localhost`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With your service configured, you are ready to log in. Click on the blue (formerly
    red) button labeled **Sign In** with Twitter, and a new window should pop up,
    asking you to authorize your app, as shown in the following screenshot:![How to
    do it...](img/image00410.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you authorize the app, you should be logged in, indicated by a status change
    in the login button, as shown in the following screenshot:![How to do it...](img/image00411.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is pretty packaged up, so there's not a lot of code involved. That
    said, we can dissect what's going on, so that we can understand where to tweak
    this recipe when needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do a deep dive into how the authentication piece is working. `accounts-twitter`
    relies on the `accounts-base`, `accounts-oauth` and `twitter` packages. If we
    crack open each of those packages, we can see just how much legwork has been done
    for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00412.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Put as simply as possible, `accounts-ui` and `accounts-twitter` give you a responsive
    UI, and make calls to `accounts-base`, which handles all of the account administration.
    `accounts-oauth` helps `accounts-base` by handling the OAuth-specific events and
    calls. `accounts-oauth` is configured by the `twitter` package, which provides
    specific URLs and parameters needed to use Twitter's OAuth service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a more detailed explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: The `accounts-base` package is a generic accounts package that accepts different
    types of login methods, provides helper methods for account administration, and
    helps maintain the `users` collection. The `users` collection is where we store
    logged-in state, preferences, and profile information.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the exposed methods in `accounts-base` is `Accounts.registerLoginHandler()`,
    which can be used by more specific login packages (such as `accounts-oauth` or
    `accounts-password`) to register handlers for login information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00413.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When `accounts-base` gets a request for a login, that request has a certain
    `type`, and has certain `service` parameters. `accounts-base` runs the information
    through all the login handlers that were registered, and lets each of those handlers
    respond with either `undefined` ("this is not my login method"), `error` ("the
    credentials were wrong"), or `serviceData` object ("login was accepted"), including
    a token for reconnecting easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `accounts-oauth` package builds off of the `accounts-base` by registering
    a login handler of type: `''oauth''`, and exposing some helpers of its own. The
    `accounts-oauth` helpers allow us to configure a specific OAuth service. Each
    OAuth service requires customized URLs and parameters. We chose the Twitter OAuth
    service, and therefore used the `twitter` and `accounts-twitter` packages to configure
    those URLs and parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `accounts-oauth` packages is also responsible for handling the message/callback
    from the OAuth service, via the popup authentication form. That is, when the popup
    authentication from Twitter was complete, it redirected to `http://localhost:3000/_oauth/twitter`
    and had an OAuth token to pass to our app. The `accounts-oauth` package evaluates
    that particular URL (because we configured it with the `twitter` package), snatches
    up the token, and then attempts a login, using the `Accounts.callLoginMethod()`
    with some JSON that looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The login handler that `accounts-oauth` registered receives this JSON, and confirms
    with the (Twitter) OAuth service that the token is valid. If it is valid, a `user`
    profile is created/updated in the `users` collection, and `serviceData` (containing
    a login token, among other things) is passed to the client via a callback function.
    Because of the callback, and because the client is subscribing to the `users`
    collection, the client sees that there is a logged-in user, and acts accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `twitter` and `accounts-twitter` packages contain convenience methods that
    work on top of `accounts-base` and `accounts-oauth`. For example, the `twitter`
    package has a server file (`twitter_server.js`) that declares the specific Twitter
    URLs, registers the `twitter` service through the `OAuth.registerService()` method,
    and even creates a Twitter-specific credential call, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `accounts-twitter` packages creates the `Meteor.loginWithTwitter()` method,
    and declares which profile fields are visible on the client, using `Accounts.addAutoPublishFields()`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, seeing how the user and configuration information is stored can
    be helpful in understanding what''s going on under the hood. We can do this using
    the `meteor mongo` command in a terminal window. Open a new terminal window (keep
    your application running), navigate to your project root, and enter the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You will now have command line access to the collections that store user information
    and login service configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the Twitter configuration settings, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the configuration for your Twitter login service, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you would like to reconfigure your Twitter login service, you can remove
    the entry using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Once you do this, you can follow the instructions on the screen and re-enter
    your Twitter credentials as you did in the preceding recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the different states of a logged in user, run and re-run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Go ahead and experiment with this, running it when the user is logged out, when
    the user is logged in, and when the user doesn't exist yet. Pay special attention
    to the `services` section and you'll be able to see how logins are handled by
    both the `twitter` and `resume` login services.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Customizing the accounts login* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building custom server methods* and *Handling asynchronous events* recipes
    in [Chapter 11](part0083.xhtml#aid-2F4UM1 "Chapter 11. Leveraging Advanced Features"),
    *Leveraging Advanced Features*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the accounts login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Packaged accounts logins are great and all, but they don't always go with the
    design of the rest of our page, or they provide too much functionality when all
    we need is a little functionality. This recipe will show you how to customize
    Meteor's accounts packages using the Twitter OAuth service as an example.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will essentially be using the *Implementing OAuth accounts packages* recipe
    found in this chapter as our baseline, but we aren't going to add the `accounts-ui`
    package, and therefore will not be configuring the Twitter service through the
    UI, so we need to roll our own.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal window, create your root project by entering the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a new terminal window (keep your app running) and add the `accounts-twitter`
    and the `service-configuration` packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to configure our login service manually, using the API key and
    API secret from our existing Twitter service (the one we created with the *Implementing
    OAuth accounts packages* recipe). Create a file named `[project root]/server/auth-init.js`
    and add the following code, replacing the appropriate sections with your key and
    secret:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you copy your keys from the Twitter Apps page, there's usually an extra
    space character on the end. Make sure you remove that character (e.g. `"key123
    "` needs to be `"key123"`) or your authentication will fail!
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to build our own customized login.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To build our own login, we'll need a couple of buttons, and some type of indicator
    that we're logged in. Easy peasy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `[project root]/client/twitter-custom.html` and add the following template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now want to call our template. Make the following changes inside the `<body>`
    tag, and save the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new file named `[project root]/client/templatehelpers.js`, and add
    the following `customLogin` template helpers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s hook up our login and logout buttons. In the same `templatehelpers.js`
    file, add the following events declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes, and navigate to your app in a browser (usually `http://localhost:3000`).
    You should see a login button, as shown in following screenshot:![How to do it...](img/image00414.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you click the **Log in** button and authorize the Twitter app when prompted
    by the popup window, you will be authenticated and your Twitter avatar will appear,
    next to a **Log out** button, as shown in the following screenshot:![How to do
    it...](img/image00415.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Starting in the `customLogin` template, we make use of the `{{#if currentUser}}`
    helper, which checks to see whether `Meteor.user()` is `null` or not. In other
    words, if a user is logged in, `currentUser` returns `true`.
  prefs: []
  type: TYPE_NORMAL
- en: If `currentUser` is `true`, we add a **Log out** button, and an `<img>` tag,
    with the `src` attribute set to a property found on the user profile. Specifically,
    `profPic` returns the `services.twitter.profile_image_url` property if a user
    is logged in.
  prefs: []
  type: TYPE_NORMAL
- en: For the login and logout events, we simply call the `Meteor.loginWithTwitter()`
    (provided by the `accounts-twitter` package) and the `Meteor.logout()` methods.
    Meteor takes care of the rest for us.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The accounts interface itself is quite customizable, with many packages available
    at [https://atmospherejs.com/?q=accounts-ui](https://atmospherejs.com/?q=accounts-ui).
  prefs: []
  type: TYPE_NORMAL
- en: We suggest installing the `accounts-ui-unstyled` package and experimenting with
    CSS/styling. You can get a great overview of what options and DOM elements are
    available by checking out the raw repository available at [https://github.com/meteor/meteor/tree/devel/packages/accounts-ui-unstyled](https://github.com/meteor/meteor/tree/devel/packages/accounts-ui-unstyled).
  prefs: []
  type: TYPE_NORMAL
- en: Pay particular attention to the `login_buttons.html` and `login_buttons.js`
    files, as they'll give you some pointers on what's possible.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Implementing OAuth accounts packages* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing two-factor authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can make any application more secure (and safer from bots or hack attempts)
    by providing two-factor authentication. Two-factor authentication requires an
    individual to verify their identity using two separate methods. One such method,
    SMS text verification, has become quite popular, due to its convenience and difficulty
    in mimicking. This recipe will show you how to create two-factor authentication
    in a Meteor app, using the Twitter OAuth and Twilio SMS services.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *Customizing the accounts login* recipe found in this chapter, we
    already have an application that authenticates against Twitter. We will expand
    that recipe, and add the Twilio SMS service to send a 6-digit verification code
    for our second authentication challenge. So that we can focus on the authentication
    part of the recipe, we will set up the Twilio service here rather than in the
    main recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our baseline application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please follow the *Customizing the accounts login* recipe found in this chapter,
    and recreate that project, changing the name from `twitter-custom` to `two-factor`.
  prefs: []
  type: TYPE_NORMAL
- en: Signing up for the Twilio SMS service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Navigate to [https://www.twilio.com/try-twilio](https://www.twilio.com/try-twilio)
    in a browser, or visit the home page at [https://www.twilio.com/](https://www.twilio.com/),
    and click on the **SIGN UP** link on the top right.
  prefs: []
  type: TYPE_NORMAL
- en: Enter the necessary information to create an account, and click **Get Started**.
  prefs: []
  type: TYPE_NORMAL
- en: Verify that you're human by entering your phone number and clicking on **Text
    Me**. Shortly thereafter, you will receive a text message (if not, you can retry).
    Enter the code from that message into the verify section, and click on the **Verify**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: You will now have a phone number generated for you. Accept the default number,
    or choose one for yourself (the default one is free), and click on the **Go To
    Your Account** button.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make a note of your assigned phone number, as you will need it later in this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you're all set up with a trial account from Twilio!
  prefs: []
  type: TYPE_NORMAL
- en: Creating an SMS service on Twilio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While logged in to Twilio, click on your name in the top right corner of the
    page. Select the **Account** option to go to the **Account** **Settings** page.
    There you will be presented with two sets of API keys. You can use either of those
    for testing, but would obviously want to use the Live credentials for a production
    application. Your screen should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an SMS service on Twilio](img/image00416.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Decide which credentials you'll be using, and make note of both the **AccountSID**
    and the **AuthToken**.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the twilio-node npm package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Stop your application (*Ctrl* + *C*) in the terminal, and enter the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Run your application again by entering the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You will receive a message letting you know that `meteorhacks:npm` has been
    initialized, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Before starting our app again, we will need to declare that we are going to
    use the `twilio-node` npm package. Open the newly-created `[project root]/packages.json`
    file, and add the following declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now, start your application back up again in the terminal, using the `meteor`
    command, as shown in the preceding examples.
  prefs: []
  type: TYPE_NORMAL
- en: With the `twilio-node` npm package installed, all that's left to do is create
    a Twilio messaging method and test it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and testing the sendTwilio() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a new file named `[project root]/server/twilio.js` and add the following
    code, replacing the `AccountSID`, `AuthToken`, and `Twilio Phone Number` as appropriate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: A good chunk of time could be spent explaining what all the preceding code does,
    but sufficeth to say, the `Twilio.sendMessage()` method gets called using `Meteor.wrapAsync()`
    with a callback, because Twilio is an npm module and therefore requires the wrapper.
    You should now be able to send messages to your phone, which you can test by opening
    a new terminal window (keep your app running), navigating to your root folder,
    and using the `meteor shell` command to test.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your mobile number were `555.867.5309`, you would enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is set up properly, you will get a text message on your phone,
    similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating and testing the sendTwilio() method](img/image00417.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If something went wrong, the console will spit out an error message, and you
    can trace down the source of your error.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully everything went right, and we are now ready to complete our two-factor
    authentication recipe!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll start by getting everything running smoothly on the server side, incorporating
    a new login state called `verified`. Once the server side is complete, we'll then
    build out the different user states in our UI.
  prefs: []
  type: TYPE_NORMAL
- en: We will need to generate a 6-digit code to be sent to the user, and we can leverage
    an existing Meteor package to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new terminal window (keep your app running), in the project root, enter
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a file named `[project root]/both/helpers.js` and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We've just extended the random package to spit out simple codes of any length
    we choose. You can test this if you would like by entering `Random.digits(6)`
    in the web console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `[project root]/server/auth-init.js` and append the following declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, to make sure that the `services.twofactor.verified` property exists on
    each account, we will initialize it both when an account is created, and when
    a user logs in successfully. Append the following code to `auth-init.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Everything is in place for us to now create the SMS authentication challenge.
    Create a new file named `[project root]/server/auth-methods.js` and add the following
    `Meteor.methods` declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With everything on the server set, we now need to update our templates and
    events on the client side. Let''s first create some kind of visual sign that we''ve
    successfully authenticated. Open [`project root]/client/two-factor.html` and modify
    the `<button>` element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now open `two-factor.js` in the same folder and make the following addition
    to the `Template.hello.helpers` declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, make the following changes to the `''click button''` event handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Everything else is done. We now only need to provide a way to make our server
    calls. Open `[project root]/client/two-factor.html` and make the following changes
    to the `customLogin` template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to create the `secondLogin` template, with conditionals based on
    whether the user is verified or not. Append the following template to the bottom
    of `two-factor.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have the tiniest bit of CSS to add to make our profile pic behave. Open
    the file named `[project root]/client/two-factor.css` and add the following CSS
    declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `[project root]/client/templatehelpers.js` and add the following helpers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Last of all, we need to add the event handlers for the buttons to send SMS
    texts and to verify the code found in the SMS messages. Append the following code
    to `templatehelpers.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all your changes, and go ahead and test your new UI. Upon authenticating
    via Twitter, you will receive two text prompts and two buttons, as shown in the
    following screenshots:![How to do it...](img/image00418.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The button on the left will send a randomized code to the phone number you
    specify (or the saved phone number, if one exists). The button on the right will
    submit a verification code. If you entered the correct code (found in the text
    message sent to your phone), you will be verified, and your screen will look similar
    to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00419.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Congratulations, you've just implemented two-factor authentication in your Meteor
    app!
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Several things had to be accomplished in order for two-factor authentication
    to work. First, we had to extend the users collection with a new service named
    `twofactor`. Some of the `services.twofactor` properties needed to be exposed
    for use on the client, and we had to set `services.twofactor.verified` to `false`
    whenever a new user was created, or when a user logs in using Twitter OAuth. Inside
    of our `auth-init.js` file, we accomplished both of these tasks, first by calling
    the `Accounts.addAutopublishFields()` method, and then by listening and updating
    via the `Accounts.onCreateUser()` and the `Accounts.onLogin()` event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We added two server methods to helps us with verifying the user. The first,
    `sendChallenge()`, generates a new 6 digit random code, updates the `services.twofactor.code`
    property, and then sends the code to the specified phone number via the Twilio
    service. The second, `verifyCode()`, receives manual input from the user, checks
    the manually entered code against the `services.twofactor.code` property, and
    updates `services.twofactor.verified` to `true` if they match:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'With the addition of the `verified` property, and the server methods used to
    change the `verified` property from `false` to `true`, we can now use `verified`
    in our UI. We created a helper method, `Template.secondLogin.verified`, that checks
    to see if the `services.twofactor.verified` property is set to `true`. We then
    use this helper in our `secondLogin` template to show that the user is logged
    in and verified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The rest of the event handlers and helpers on the UI are used for convenience,
    or to make calls to the server methods previously outlined.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplified version is this: we extended the `users` collection, adding
    a `verified` property. We used the SMS text and verification to change the value
    of the `verified` property. We disallow any activity in the client UI unless `verified==true`.
    This check, as a complement to checking if there is a logged in user, allows us
    to require two-factor authentication in our UI.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This model of extending the `users` collection with new `services` properties
    can be used for pretty much anything, and is not just limited to SMS text challenges.
    By adding and exposing new `services` properties, you can control what features
    are available, depending on the user status. Imagine being able to limit some
    features of the UI, based on the subscription plan a user has purchased. Or imagine
    remembering layout and view preferences based on the saved preferences of the
    user. All of this, and more, is possible by extending the `users` collection.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building a smooth interface with Bootstrap* recipe in [Chapter 3](part0036.xhtml#aid-12AK81
    "Chapter 3. Building Great User Interfaces"), *Building Great User Interfaces*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using npm packages directly* recipe in [Chapter 8](part0069.xhtml#aid-21PMQ1
    "Chapter 8. Integrating Third-party Libraries"), *Integrating Third-party Libraries*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Customizing the accounts login* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using asynchronous functions* recipe in [Chapter 11](part0083.xhtml#aid-2F4UM1
    "Chapter 11. Leveraging Advanced Features"), *Leveraging Advanced Features*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
