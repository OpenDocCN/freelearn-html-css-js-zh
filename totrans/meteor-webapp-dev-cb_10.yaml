- en: Chapter 10. Working with Accounts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。使用账户
- en: 'In this chapter, you will learn the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个章节中，你将学习以下主题：
- en: Implementing OAuth accounts packages
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现OAuth账户包
- en: Customizing the accounts login
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义账户登录
- en: Performing two-factor authentication
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行双因素认证
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Critical to nearly every application we build is some type of authentication
    and user identification. Usually, we will spend days and weeks developing an accounts
    system, when we could spend that time programming our app. Meteor solves this
    problem, and solves it well. From integrations with major OAuth providers (Twitter,
    Google, Facebook, etc.) to a simple, secure password-based system, adding accounts
    and authentication inside of your Meteor app is quick and painless. The recipes
    in this chapter will cover the most important aspects of Meteor's `accounts` packages,
    enabling you to easily take care of user accounts and move on to other things.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎对我们构建的每个应用程序来说，某种类型的认证和用户识别都是至关重要的。通常，我们会花费几天甚至几周的时间来开发账户系统，而我们可以用这些时间来编写我们的应用程序。Meteor解决了这个问题，并且做得很好。从与主要OAuth提供者的集成（如Twitter、Google、Facebook等）到简单、安全的基于密码的系统，在Meteor应用程序中添加账户和认证既快又简单。本章中的配方将涵盖Meteor的`accounts`包最重要的方面，使你能够轻松处理用户账户并继续其他工作。
- en: Implementing OAuth accounts packages
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现OAuth账户包
- en: Today, there are so many popular authentication services available, with such
    large user bases, that it's kind of silly not to take advantage of those services.
    If you use the accounts system of a major service, like Twitter or GitHub, you
    instantly tap into an enormous user base which can increase the use of your app.
    This recipe will show you how to implement an OAuth accounts system in a Meteor
    app, using the Twitter accounts service as an example.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，有如此多的流行认证服务可供选择，用户基数如此庞大，不利用这些服务似乎有点愚蠢。如果你使用像Twitter或GitHub这样的主要服务的账户系统，你立刻就能接触到庞大的用户群，这可以增加你应用程序的使用率。这个配方将向你展示如何在Meteor应用程序中实现OAuth账户系统，以Twitter账户服务为例。
- en: Getting ready
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are going to focus almost exclusively on the accounts and authentication
    piece of our application, and as such, we only need a very simple, baseline application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将几乎完全专注于我们应用程序的账户和认证部分，因此我们只需要一个非常简单的基础应用程序。
- en: 'In a terminal window, create your root project by entering the following commands:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端窗口中，通过输入以下命令创建你的根项目：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That's all it takes. Everything else will be done inside our recipe, so let's
    get going!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了。其他所有事情都将在我们配方内部完成，所以让我们开始吧！
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will add the appropriate `accounts` packages, and configure our Twitter
    login service. Proceed with the following steps:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加适当的 `accounts` 包，并配置我们的Twitter登录服务。按照以下步骤进行：
- en: 'In a new terminal window (keep your application running), navigate to the root
    folder of your project, and enter the following two commands:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新的终端窗口（保持你的应用程序运行），导航到你的项目根目录，并输入以下两个命令：
- en: '[PRE1]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will add several dependent packages, so you don't have to. How thoughtful
    and gentlemanly of Meteor to do that for us!
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将添加几个依赖包，所以你不必这样做。Meteor为我们做这件事是多么周到和绅士啊！
- en: Tip
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'You can just as easily use another authentication service by replacing `accounts-twitter`
    used in this step with any of the following: `accounts-facebook`, `accounts-github`,
    `accounts-google`, `accounts-meetup`, `account-weibo`, or `accounts-meteor-developer.`'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以轻松地使用其他认证服务，只需将此步骤中使用的 `accounts-twitter` 替换为以下任何一个：`accounts-facebook`、`accounts-github`、`accounts-google`、`accounts-meetup`、`account-weibo`
    或 `accounts-meteor-developer`。
- en: 'Open `[project root]/client/twitter-login.html` and add the following template
    inclusion just after the starting `<body>` tag:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `[项目根目录]/client/twitter-login.html` 并在起始 `<body>` 标签之后添加以下模板包含：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save this change, and navigate to your app in a browser (usually `http://localhost:3000/`).
    At the top-left of your screen you will see a red button that says **Configure
    Twitter Login**, as shown in the following screenshot:![How to do it...](img/image00409.jpeg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存此更改，并在浏览器中导航到你的应用程序（通常是 `http://localhost:3000/`）。在你的屏幕左上角，你会看到一个写着**配置Twitter登录**的红色按钮，如下面的截图所示：![如何操作...](img/image00409.jpeg)
- en: Click on **Configure Twitter Login** button, and a set of instructions for configuring
    your Twitter app will appear. Follow those instructions *exactly*, entering your
    `consumerkey` (API key) and consumer `secret` key(API secret) where appropriate.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**配置Twitter登录**按钮，将出现配置你的Twitter应用程序的指令。严格按照这些指令操作，在适当的位置输入你的`consumerkey`（API密钥）和消费者`secret`密钥（API密钥）。
- en: Tip
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For this recipe, the value you enter in the website field is going to be `http://127.0.0.1:3000`
    rather than `http://localhost:3000`. Twitter doesn't allow the use of `localhost`.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于这个配方，你在网站字段中输入的值将是 `http://127.0.0.1:3000` 而不是 `http://localhost:3000`。Twitter不允许使用
    `localhost`。
- en: With your service configured, you are ready to log in. Click on the blue (formerly
    red) button labeled **Sign In** with Twitter, and a new window should pop up,
    asking you to authorize your app, as shown in the following screenshot:![How to
    do it...](img/image00410.jpeg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置好服务后，你就可以登录了。点击蓝色的（以前是红色的）带有**使用Twitter登录**标签的按钮，应该会弹出一个新窗口，要求你授权你的应用程序，如下面的截图所示：![如何操作...](img/image00410.jpeg)
- en: Once you authorize the app, you should be logged in, indicated by a status change
    in the login button, as shown in the following screenshot:![How to do it...](img/image00411.jpeg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你授权了应用程序，你应该已经登录，这可以通过登录按钮中的状态变化来表示，如下面的截图所示：![如何操作...](img/image00411.jpeg)
- en: How it works...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: This recipe is pretty packaged up, so there's not a lot of code involved. That
    said, we can dissect what's going on, so that we can understand where to tweak
    this recipe when needed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方相当简洁，所以涉及的代码不多。但我们可以分析一下正在发生的事情，这样我们就可以在需要时了解如何调整这个配方。
- en: 'Let''s do a deep dive into how the authentication piece is working. `accounts-twitter`
    relies on the `accounts-base`, `accounts-oauth` and `twitter` packages. If we
    crack open each of those packages, we can see just how much legwork has been done
    for us:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨一下认证部分是如何工作的。`accounts-twitter` 依赖于 `accounts-base`、`accounts-oauth`
    和 `twitter` 包。如果我们逐一打开这些包，就能看到为我们做了多少前期工作：
- en: '![How it works...](img/image00412.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image00412.jpeg)'
- en: Put as simply as possible, `accounts-ui` and `accounts-twitter` give you a responsive
    UI, and make calls to `accounts-base`, which handles all of the account administration.
    `accounts-oauth` helps `accounts-base` by handling the OAuth-specific events and
    calls. `accounts-oauth` is configured by the `twitter` package, which provides
    specific URLs and parameters needed to use Twitter's OAuth service.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能简单地说，`accounts-ui` 和 `accounts-twitter` 为你提供了一个响应式用户界面，并调用 `accounts-base`，它处理所有的账户管理。`accounts-oauth`
    通过处理OAuth特定的事件和调用帮助 `accounts-base`。`accounts-oauth` 由 `twitter` 包配置，该包提供了使用Twitter
    OAuth服务所需的特定URL和参数。
- en: 'Here''s a more detailed explanation:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个更详细的解释：
- en: The `accounts-base` package is a generic accounts package that accepts different
    types of login methods, provides helper methods for account administration, and
    helps maintain the `users` collection. The `users` collection is where we store
    logged-in state, preferences, and profile information.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`accounts-base` 包是一个通用的账户包，接受不同类型的登录方法，提供账户管理的辅助方法，并帮助维护`users`集合。`users`集合是我们存储登录状态、首选项和配置文件信息的地方。'
- en: 'One of the exposed methods in `accounts-base` is `Accounts.registerLoginHandler()`,
    which can be used by more specific login packages (such as `accounts-oauth` or
    `accounts-password`) to register handlers for login information:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`accounts-base` 中暴露的一个方法是 `Accounts.registerLoginHandler()`，它可以被更具体的登录包（如 `accounts-oauth`
    或 `accounts-password`）用来注册登录信息的处理程序：'
- en: '![How it works...](img/image00413.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image00413.jpeg)'
- en: When `accounts-base` gets a request for a login, that request has a certain
    `type`, and has certain `service` parameters. `accounts-base` runs the information
    through all the login handlers that were registered, and lets each of those handlers
    respond with either `undefined` ("this is not my login method"), `error` ("the
    credentials were wrong"), or `serviceData` object ("login was accepted"), including
    a token for reconnecting easily.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `accounts-base` 收到登录请求时，该请求有一个特定的 `type`，并包含某些 `service` 参数。`accounts-base`
    将信息通过所有已注册的登录处理程序运行，并让每个处理程序响应，可以是 `undefined` ("这不是我的登录方法")、`error` ("凭证错误")
    或 `serviceData` 对象 ("登录被接受")，包括用于轻松重连的令牌。
- en: 'The `accounts-oauth` package builds off of the `accounts-base` by registering
    a login handler of type: `''oauth''`, and exposing some helpers of its own. The
    `accounts-oauth` helpers allow us to configure a specific OAuth service. Each
    OAuth service requires customized URLs and parameters. We chose the Twitter OAuth
    service, and therefore used the `twitter` and `accounts-twitter` packages to configure
    those URLs and parameters.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`accounts-oauth` 包通过注册类型为 `''oauth''` 的登录处理程序并在其上公开一些自己的助手来构建在 `accounts-base`
    之上。`accounts-oauth` 助手允许我们配置特定的 OAuth 服务。每个 OAuth 服务都需要定制的 URL 和参数。我们选择了 Twitter
    OAuth 服务，因此使用了 `twitter` 和 `accounts-twitter` 包来配置这些 URL 和参数。'
- en: 'The `accounts-oauth` packages is also responsible for handling the message/callback
    from the OAuth service, via the popup authentication form. That is, when the popup
    authentication from Twitter was complete, it redirected to `http://localhost:3000/_oauth/twitter`
    and had an OAuth token to pass to our app. The `accounts-oauth` package evaluates
    that particular URL (because we configured it with the `twitter` package), snatches
    up the token, and then attempts a login, using the `Accounts.callLoginMethod()`
    with some JSON that looks similar to the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`accounts-oauth` 包也负责通过弹出式身份验证表单处理来自 OAuth 服务的消息/回调。也就是说，当 Twitter 的弹出式身份验证完成时，它重定向到
    `http://localhost:3000/_oauth/twitter` 并有一个 OAuth 令牌传递给我们的应用程序。`accounts-oauth`
    包评估该特定 URL（因为我们使用 `twitter` 包配置了它），抓取令牌，然后尝试使用类似以下内容的 JSON 通过 `Accounts.callLoginMethod()`
    进行登录：'
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The login handler that `accounts-oauth` registered receives this JSON, and confirms
    with the (Twitter) OAuth service that the token is valid. If it is valid, a `user`
    profile is created/updated in the `users` collection, and `serviceData` (containing
    a login token, among other things) is passed to the client via a callback function.
    Because of the callback, and because the client is subscribing to the `users`
    collection, the client sees that there is a logged-in user, and acts accordingly.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`accounts-oauth` 注册的登录处理程序接收此 JSON，并与（Twitter）OAuth 服务确认令牌是否有效。如果有效，将在 `users`
    集合中创建/更新 `user` 配置文件，并通过回调函数将包含登录令牌等内容的 `serviceData` 传递给客户端。由于回调，并且客户端正在订阅 `users`
    集合，客户端会看到有已登录用户，并相应地采取行动。'
- en: 'The `twitter` and `accounts-twitter` packages contain convenience methods that
    work on top of `accounts-base` and `accounts-oauth`. For example, the `twitter`
    package has a server file (`twitter_server.js`) that declares the specific Twitter
    URLs, registers the `twitter` service through the `OAuth.registerService()` method,
    and even creates a Twitter-specific credential call, as shown in the following
    code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`twitter` 和 `accounts-twitter` 包包含在 `accounts-base` 和 `accounts-oauth` 之上工作的便捷方法。例如，`twitter`
    包有一个服务器文件（`twitter_server.js`），它声明了特定的 Twitter URL，通过 `OAuth.registerService()`
    方法注册了 `twitter` 服务，甚至创建了一个针对 Twitter 的特定凭证调用，如下面的代码所示：'
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `accounts-twitter` packages creates the `Meteor.loginWithTwitter()` method,
    and declares which profile fields are visible on the client, using `Accounts.addAutoPublishFields()`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`accounts-twitter` 包创建了 `Meteor.loginWithTwitter()` 方法，并使用 `Accounts.addAutoPublishFields()`
    声明了哪些配置文件字段在客户端可见。'
- en: There's more…
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Sometimes, seeing how the user and configuration information is stored can
    be helpful in understanding what''s going on under the hood. We can do this using
    the `meteor mongo` command in a terminal window. Open a new terminal window (keep
    your application running), navigate to your project root, and enter the following
    command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，查看用户和配置信息是如何存储的，有助于理解底层发生了什么。我们可以通过在终端窗口中使用 `meteor mongo` 命令来完成这项操作。打开一个新的终端窗口（保持应用程序运行），导航到您的项目根目录，并输入以下命令：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You will now have command line access to the collections that store user information
    and login service configurations.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将能够通过命令行访问存储用户信息和登录服务配置的集合。
- en: 'To view the Twitter configuration settings, enter the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 Twitter 配置设置，请输入以下命令：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You will see the configuration for your Twitter login service, as shown in
    the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到您的 Twitter 登录服务的配置，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you would like to reconfigure your Twitter login service, you can remove
    the entry using the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想重新配置您的 Twitter 登录服务，可以使用以下命令删除条目：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once you do this, you can follow the instructions on the screen and re-enter
    your Twitter credentials as you did in the preceding recipe.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，您可以按照屏幕上的说明操作，并重新输入您在先前的配方中使用的 Twitter 凭据。
- en: 'To view the different states of a logged in user, run and re-run the following
    command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看登录用户的不同的状态，运行并重新运行以下命令：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Go ahead and experiment with this, running it when the user is logged out, when
    the user is logged in, and when the user doesn't exist yet. Pay special attention
    to the `services` section and you'll be able to see how logins are handled by
    both the `twitter` and `resume` login services.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行它，当用户注销时，当用户登录时，以及当用户尚未存在时。特别关注 `services` 部分，你将能够看到 `twitter` 和 `resume`
    登录服务如何处理登录。
- en: See also
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Customizing the accounts login* recipe in this chapter
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *定制账户登录* 菜单
- en: The *Building custom server methods* and *Handling asynchronous events* recipes
    in [Chapter 11](part0083.xhtml#aid-2F4UM1 "Chapter 11. Leveraging Advanced Features"),
    *Leveraging Advanced Features*
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第11章的 *构建自定义服务器方法* 和 *处理异步事件* 菜单中，*利用高级功能*，[第11章](part0083.xhtml#aid-2F4UM1
    "第11章。利用高级功能")
- en: Customizing the accounts login
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定制账户登录
- en: Packaged accounts logins are great and all, but they don't always go with the
    design of the rest of our page, or they provide too much functionality when all
    we need is a little functionality. This recipe will show you how to customize
    Meteor's accounts packages using the Twitter OAuth service as an example.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 打包的账户登录很棒，但它们并不总是与页面的设计相匹配，或者它们提供了过多的功能，而我们只需要一点功能。这个菜谱将向你展示如何使用Twitter OAuth服务作为示例来定制Meteor的账户包。
- en: Getting ready
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will essentially be using the *Implementing OAuth accounts packages* recipe
    found in this chapter as our baseline, but we aren't going to add the `accounts-ui`
    package, and therefore will not be configuring the Twitter service through the
    UI, so we need to roll our own.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将基本上使用本章中找到的 *实现OAuth账户包* 菜谱作为我们的基线，但我们不会添加 `accounts-ui` 包，因此我们不会通过UI配置Twitter服务，所以我们需要自己动手。
- en: 'In a terminal window, create your root project by entering the following commands:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端窗口中，通过输入以下命令创建你的根项目：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Open a new terminal window (keep your app running) and add the `accounts-twitter`
    and the `service-configuration` packages:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口（保持你的应用运行）并添加 `accounts-twitter` 和 `service-configuration` 包：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We now need to configure our login service manually, using the API key and
    API secret from our existing Twitter service (the one we created with the *Implementing
    OAuth accounts packages* recipe). Create a file named `[project root]/server/auth-init.js`
    and add the following code, replacing the appropriate sections with your key and
    secret:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要手动配置我们的登录服务，使用我们现有的Twitter服务（使用 *实现OAuth账户包* 菜谱创建的）中的API密钥和API密钥。创建一个名为
    `[项目根目录]/server/auth-init.js` 的文件，并添加以下代码，用你的密钥和密钥替换相应的部分：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When you copy your keys from the Twitter Apps page, there's usually an extra
    space character on the end. Make sure you remove that character (e.g. `"key123
    "` needs to be `"key123"`) or your authentication will fail!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从Twitter应用页面复制密钥时，通常会在末尾有一个额外的空格字符。确保你删除该字符（例如，`"key123 "` 需要改为 `"key123"`），否则你的认证将失败！
- en: We are now ready to build our own customized login.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好构建我们自己的定制登录。
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: To build our own login, we'll need a couple of buttons, and some type of indicator
    that we're logged in. Easy peasy.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建我们自己的登录系统，我们需要几个按钮和一些表示我们已登录的指示器。简单得很。
- en: 'Open `[project root]/client/twitter-custom.html` and add the following template:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `[项目根目录]/client/twitter-custom.html` 并添加以下模板：
- en: '[PRE13]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We now want to call our template. Make the following changes inside the `<body>`
    tag, and save the file:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在想调用我们的模板。在 `<body>` 标签内进行以下更改，并保存文件：
- en: '[PRE14]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a new file named `[project root]/client/templatehelpers.js`, and add
    the following `customLogin` template helpers:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `[项目根目录]/client/templatehelpers.js` 的新文件，并添加以下 `customLogin` 模板辅助函数：
- en: '[PRE15]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, let''s hook up our login and logout buttons. In the same `templatehelpers.js`
    file, add the following events declarations:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们连接我们的登录和注销按钮。在同一个 `templatehelpers.js` 文件中，添加以下事件声明：
- en: '[PRE16]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save your changes, and navigate to your app in a browser (usually `http://localhost:3000`).
    You should see a login button, as shown in following screenshot:![How to do it...](img/image00414.jpeg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的更改，并在浏览器中导航到你的应用（通常是 `http://localhost:3000`）。你应该能看到一个登录按钮，如下面的截图所示：![如何操作...](img/image00414.jpeg)
- en: If you click the **Log in** button and authorize the Twitter app when prompted
    by the popup window, you will be authenticated and your Twitter avatar will appear,
    next to a **Log out** button, as shown in the following screenshot:![How to do
    it...](img/image00415.jpeg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您点击 **登录** 按钮，并在弹出窗口中授权 Twitter 应用程序，您将获得认证，您的 Twitter 头像将出现在 **注销** 按钮旁边，如下面的截图所示：![如何操作...](img/image00415.jpeg)
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Starting in the `customLogin` template, we make use of the `{{#if currentUser}}`
    helper, which checks to see whether `Meteor.user()` is `null` or not. In other
    words, if a user is logged in, `currentUser` returns `true`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `customLogin` 模板开始，我们使用 `{{#if currentUser}}` 辅助函数，该函数检查 `Meteor.user()` 是否为
    `null`。换句话说，如果用户已登录，`currentUser` 返回 `true`。
- en: If `currentUser` is `true`, we add a **Log out** button, and an `<img>` tag,
    with the `src` attribute set to a property found on the user profile. Specifically,
    `profPic` returns the `services.twitter.profile_image_url` property if a user
    is logged in.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `currentUser` 是 `true`，我们添加一个 **注销** 按钮，以及一个 `<img>` 标签，其 `src` 属性设置为用户资料上找到的属性。具体来说，如果用户已登录，`profPic`
    返回 `services.twitter.profile_image_url` 属性。
- en: For the login and logout events, we simply call the `Meteor.loginWithTwitter()`
    (provided by the `accounts-twitter` package) and the `Meteor.logout()` methods.
    Meteor takes care of the rest for us.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于登录和注销事件，我们只需调用由 `accounts-twitter` 包提供的 `Meteor.loginWithTwitter()` 和 `Meteor.logout()`
    方法。Meteor 会为我们处理其余部分。
- en: There's more…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The accounts interface itself is quite customizable, with many packages available
    at [https://atmospherejs.com/?q=accounts-ui](https://atmospherejs.com/?q=accounts-ui).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 账户界面本身非常可定制，在 [https://atmospherejs.com/?q=accounts-ui](https://atmospherejs.com/?q=accounts-ui)
    提供了许多可用的包。
- en: We suggest installing the `accounts-ui-unstyled` package and experimenting with
    CSS/styling. You can get a great overview of what options and DOM elements are
    available by checking out the raw repository available at [https://github.com/meteor/meteor/tree/devel/packages/accounts-ui-unstyled](https://github.com/meteor/meteor/tree/devel/packages/accounts-ui-unstyled).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议安装 `accounts-ui-unstyled` 包，并尝试使用 CSS/样式。您可以通过查看在 [https://github.com/meteor/meteor/tree/devel/packages/accounts-ui-unstyled](https://github.com/meteor/meteor/tree/devel/packages/accounts-ui-unstyled)
    可用的原始存储库来获得有关可用选项和 DOM 元素的极佳概述。
- en: Pay particular attention to the `login_buttons.html` and `login_buttons.js`
    files, as they'll give you some pointers on what's possible.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请特别注意 `login_buttons.html` 和 `login_buttons.js` 文件，因为它们会为您提供一些可能的提示。
- en: See also
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Implementing OAuth accounts packages* recipe in this chapter
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的 *实现 OAuth 账户包* 菜谱
- en: Performing two-factor authentication
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行双因素认证
- en: We can make any application more secure (and safer from bots or hack attempts)
    by providing two-factor authentication. Two-factor authentication requires an
    individual to verify their identity using two separate methods. One such method,
    SMS text verification, has become quite popular, due to its convenience and difficulty
    in mimicking. This recipe will show you how to create two-factor authentication
    in a Meteor app, using the Twitter OAuth and Twilio SMS services.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供双因素认证，我们可以使任何应用程序更加安全（并且更安全地免受机器人或黑客攻击）。双因素认证要求个人使用两种不同的方法来验证其身份。其中一种方法，即短信文本验证，因其便利性和难以模仿而变得相当流行。本菜谱将向您展示如何在
    Meteor 应用程序中创建双因素认证，使用 Twitter OAuth 和 Twilio SMS 服务。
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the *Customizing the accounts login* recipe found in this chapter, we
    already have an application that authenticates against Twitter. We will expand
    that recipe, and add the Twilio SMS service to send a 6-digit verification code
    for our second authentication challenge. So that we can focus on the authentication
    part of the recipe, we will set up the Twilio service here rather than in the
    main recipe.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本章中提供的 *自定义账户登录* 菜谱，我们已经有了一个针对 Twitter 进行认证的应用程序。我们将扩展该菜谱，并添加 Twilio SMS 服务以发送用于第二次认证挑战的
    6 位验证码。为了我们可以专注于认证部分，我们将在这里设置 Twilio 服务，而不是在主菜谱中。
- en: Creating our baseline application
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建我们的基线应用程序
- en: Please follow the *Customizing the accounts login* recipe found in this chapter,
    and recreate that project, changing the name from `twitter-custom` to `two-factor`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请遵循本章中找到的 *自定义账户登录* 菜谱，并重新创建该项目，将名称从 `twitter-custom` 更改为 `two-factor`。
- en: Signing up for the Twilio SMS service
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 Twilio SMS 服务注册
- en: Navigate to [https://www.twilio.com/try-twilio](https://www.twilio.com/try-twilio)
    in a browser, or visit the home page at [https://www.twilio.com/](https://www.twilio.com/),
    and click on the **SIGN UP** link on the top right.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中导航到 [https://www.twilio.com/try-twilio](https://www.twilio.com/try-twilio)，或者访问主页
    [https://www.twilio.com/](https://www.twilio.com/)，然后点击右上角的 **SIGN UP** 链接。
- en: Enter the necessary information to create an account, and click **Get Started**.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 输入创建账户所需的信息，然后点击 **Get Started**。
- en: Verify that you're human by entering your phone number and clicking on **Text
    Me**. Shortly thereafter, you will receive a text message (if not, you can retry).
    Enter the code from that message into the verify section, and click on the **Verify**
    button.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入你的电话号码并点击 **Text Me** 来验证你是一个人类。不久之后，你将收到一条短信（如果没有收到，可以重试）。将短信中的代码输入到验证部分，然后点击
    **Verify** 按钮。
- en: You will now have a phone number generated for you. Accept the default number,
    or choose one for yourself (the default one is free), and click on the **Go To
    Your Account** button.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将为你生成一个电话号码。接受默认号码，或者选择一个自己的号码（默认号码是免费的），然后点击 **Go To Your Account** 按钮。
- en: Tip
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Make a note of your assigned phone number, as you will need it later in this
    recipe.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 记下分配给你的电话号码，因为你稍后需要用到它。
- en: Congratulations, you're all set up with a trial account from Twilio!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，你已经通过 Twilio 设置了一个试用账户！
- en: Creating an SMS service on Twilio
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Twilio 上创建 SMS 服务
- en: 'While logged in to Twilio, click on your name in the top right corner of the
    page. Select the **Account** option to go to the **Account** **Settings** page.
    There you will be presented with two sets of API keys. You can use either of those
    for testing, but would obviously want to use the Live credentials for a production
    application. Your screen should look like the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在登录到 Twilio 后，点击页面右上角的你的名字。选择 **Account** 选项以转到 **Account** **Settings** 页面。在那里，你会看到两组
    API 密钥。你可以使用其中任何一个进行测试，但显然你希望在生产应用中使用实时凭证。你的屏幕应该看起来像以下截图：
- en: '![Creating an SMS service on Twilio](img/image00416.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![在 Twilio 上创建 SMS 服务](img/image00416.jpeg)'
- en: Decide which credentials you'll be using, and make note of both the **AccountSID**
    and the **AuthToken**.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 决定你将使用哪些凭证，并记下 **AccountSID** 和 **AuthToken**。
- en: Installing the twilio-node npm package
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 twilio-node npm 包
- en: 'Stop your application (*Ctrl* + *C*) in the terminal, and enter the following
    command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中停止你的应用（*Ctrl* + *C*），然后输入以下命令：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Run your application again by entering the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用，输入以下命令：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You will receive a message letting you know that `meteorhacks:npm` has been
    initialized, as shown in the following example:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你将收到一条消息，告诉你 `meteorhacks:npm` 已经初始化，如下例所示：
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Before starting our app again, we will need to declare that we are going to
    use the `twilio-node` npm package. Open the newly-created `[project root]/packages.json`
    file, and add the following declaration:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们再次启动应用之前，我们需要声明我们将使用 `twilio-node` npm 包。打开新创建的 `[project root]/packages.json`
    文件，并添加以下声明：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, start your application back up again in the terminal, using the `meteor`
    command, as shown in the preceding examples.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在终端中再次启动你的应用，使用 `meteor` 命令，如前例所示。
- en: With the `twilio-node` npm package installed, all that's left to do is create
    a Twilio messaging method and test it.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了 `twilio-node` npm 包之后，剩下的就是创建一个 Twilio 消息方法并测试它。
- en: Creating and testing the sendTwilio() method
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建和测试 sendTwilio() 方法
- en: 'Create a new file named `[project root]/server/twilio.js` and add the following
    code, replacing the `AccountSID`, `AuthToken`, and `Twilio Phone Number` as appropriate:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `[project root]/server` 目录下创建一个名为 `twilio.js` 的新文件，并添加以下代码，根据需要替换 `AccountSID`、`AuthToken`
    和 `Twilio Phone Number`：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: A good chunk of time could be spent explaining what all the preceding code does,
    but sufficeth to say, the `Twilio.sendMessage()` method gets called using `Meteor.wrapAsync()`
    with a callback, because Twilio is an npm module and therefore requires the wrapper.
    You should now be able to send messages to your phone, which you can test by opening
    a new terminal window (keep your app running), navigating to your root folder,
    and using the `meteor shell` command to test.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一部分时间可以用来解释前面所有代码的功能，但简单来说，`Twilio.sendMessage()` 方法通过 `Meteor.wrapAsync()`
    和回调函数被调用，因为 Twilio 是一个 npm 模块，因此需要这个包装器。你现在应该能够向你的手机发送消息了，你可以通过打开一个新的终端窗口（保持你的应用运行），导航到你的根目录，并使用
    `meteor shell` 命令来测试。
- en: 'If your mobile number were `555.867.5309`, you would enter the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的手机号码是 `555.867.5309`，你应该输入以下内容：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If everything is set up properly, you will get a text message on your phone,
    similar to the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切设置正确，你会在手机上收到一条文本消息，类似于以下截图：
- en: '![Creating and testing the sendTwilio() method](img/image00417.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![创建和测试 sendTwilio() 方法](img/image00417.jpeg)'
- en: If something went wrong, the console will spit out an error message, and you
    can trace down the source of your error.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现问题，控制台将输出错误信息，你可以追踪到错误的来源。
- en: Hopefully everything went right, and we are now ready to complete our two-factor
    authentication recipe!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 希望一切顺利，我们现在已经准备好完成我们的双因素认证流程！
- en: How to do it...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We'll start by getting everything running smoothly on the server side, incorporating
    a new login state called `verified`. Once the server side is complete, we'll then
    build out the different user states in our UI.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先确保服务器端的运行顺畅，并引入一个新的登录状态称为 `verified`。一旦服务器端完成，我们将在我们的 UI 中构建不同的用户状态。
- en: We will need to generate a 6-digit code to be sent to the user, and we can leverage
    an existing Meteor package to do so.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要生成一个6位数的代码发送给用户，我们可以利用现有的Meteor包来完成这个任务。
- en: 'In a new terminal window (keep your app running), in the project root, enter
    the following command:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新的终端窗口中（保持你的应用运行），在项目根目录下，输入以下命令：
- en: '[PRE23]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, create a file named `[project root]/both/helpers.js` and add the following
    code:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个名为 `[项目根目录]/both/helpers.js` 的文件，并添加以下代码：
- en: '[PRE24]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We've just extended the random package to spit out simple codes of any length
    we choose. You can test this if you would like by entering `Random.digits(6)`
    in the web console.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们刚刚扩展了随机包，使其能够输出我们选择的任何长度的简单代码。如果你想测试，可以在网页控制台中输入 `Random.digits(6)`。
- en: 'Open `[project root]/server/auth-init.js` and append the following declaration:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `[项目根目录]/server/auth-init.js` 并追加以下声明：
- en: '[PRE25]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, to make sure that the `services.twofactor.verified` property exists on
    each account, we will initialize it both when an account is created, and when
    a user logs in successfully. Append the following code to `auth-init.js`:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了确保 `services.twofactor.verified` 属性存在于每个账户上，我们将在账户创建时以及用户成功登录时初始化它。将以下代码追加到
    `auth-init.js`：
- en: '[PRE26]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Everything is in place for us to now create the SMS authentication challenge.
    Create a new file named `[project root]/server/auth-methods.js` and add the following
    `Meteor.methods` declarations:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好创建短信认证挑战。创建一个名为 `[项目根目录]/server/auth-methods.js` 的新文件，并添加以下 `Meteor.methods`
    声明：
- en: '[PRE27]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'With everything on the server set, we now need to update our templates and
    events on the client side. Let''s first create some kind of visual sign that we''ve
    successfully authenticated. Open [`project root]/client/two-factor.html` and modify
    the `<button>` element as follows:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端设置好一切之后，我们现在需要更新客户端的模板和事件。让我们首先创建一种视觉信号来表示我们已经成功认证。打开 `[项目根目录]/client/two-factor.html`
    并修改 `<button>` 元素如下：
- en: '[PRE28]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now open `two-factor.js` in the same folder and make the following addition
    to the `Template.hello.helpers` declaration:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开同一文件夹中的 `two-factor.js`，并在 `Template.hello.helpers` 声明中添加以下内容：
- en: '[PRE29]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, make the following changes to the `''click button''` event handler:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，对 `'click button'` 事件处理程序进行以下修改：
- en: '[PRE30]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Everything else is done. We now only need to provide a way to make our server
    calls. Open `[project root]/client/two-factor.html` and make the following changes
    to the `customLogin` template:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有的其他工作都已经完成。我们现在只需要提供一个方法来调用我们的服务器。打开 `[项目根目录]/client/two-factor.html` 并对 `customLogin`
    模板进行以下修改：
- en: '[PRE31]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We now need to create the `secondLogin` template, with conditionals based on
    whether the user is verified or not. Append the following template to the bottom
    of `two-factor.html`:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要创建一个 `secondLogin` 模板，根据用户是否已验证来设置条件。将以下模板追加到 `two-factor.html` 的底部：
- en: '[PRE32]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We have the tiniest bit of CSS to add to make our profile pic behave. Open
    the file named `[project root]/client/two-factor.css` and add the following CSS
    declarations:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要添加一点CSS来使我们的个人资料图片表现正常。打开名为 `[项目根目录]/client/two-factor.css` 的文件，并添加以下CSS声明：
- en: '[PRE33]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Open `[project root]/client/templatehelpers.js` and add the following helpers:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `[项目根目录]/client/templatehelpers.js` 并添加以下辅助函数：
- en: '[PRE34]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Last of all, we need to add the event handlers for the buttons to send SMS
    texts and to verify the code found in the SMS messages. Append the following code
    to `templatehelpers.js`:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要添加按钮的事件处理程序来发送短信文本以及验证短信消息中找到的代码。将以下代码追加到 `templatehelpers.js`：
- en: '[PRE35]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Save all your changes, and go ahead and test your new UI. Upon authenticating
    via Twitter, you will receive two text prompts and two buttons, as shown in the
    following screenshots:![How to do it...](img/image00418.jpeg)
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有更改，然后测试您的新 UI。通过 Twitter 进行认证后，您将收到两个文本提示和两个按钮，如下面的截图所示：![如何操作...](img/image00418.jpeg)
- en: 'The button on the left will send a randomized code to the phone number you
    specify (or the saved phone number, if one exists). The button on the right will
    submit a verification code. If you entered the correct code (found in the text
    message sent to your phone), you will be verified, and your screen will look similar
    to the following screenshot:'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 左侧的按钮会将随机生成的代码发送到您指定的电话号码（如果存在已保存的电话号码，则发送到该号码）。右侧的按钮将提交验证代码。如果您输入了正确的代码（在发送到您手机的短信中找到的代码），您将得到验证，并且您的屏幕将类似于以下截图：
- en: '![How to do it...](img/image00419.jpeg)'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00419.jpeg)'
- en: Congratulations, you've just implemented two-factor authentication in your Meteor
    app!
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，你已经在你的 Meteor 应用中实现了双因素认证！
- en: How it works...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Several things had to be accomplished in order for two-factor authentication
    to work. First, we had to extend the users collection with a new service named
    `twofactor`. Some of the `services.twofactor` properties needed to be exposed
    for use on the client, and we had to set `services.twofactor.verified` to `false`
    whenever a new user was created, or when a user logs in using Twitter OAuth. Inside
    of our `auth-init.js` file, we accomplished both of these tasks, first by calling
    the `Accounts.addAutopublishFields()` method, and then by listening and updating
    via the `Accounts.onCreateUser()` and the `Accounts.onLogin()` event handlers:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现双因素认证，必须完成几件事情。首先，我们需要通过一个名为 `twofactor` 的新服务扩展用户集合。一些 `services.twofactor`
    属性需要暴露给客户端使用，并且每当创建新用户或用户使用 Twitter OAuth 登录时，我们必须将 `services.twofactor.verified`
    设置为 `false`。在我们的 `auth-init.js` 文件中，我们通过调用 `Accounts.addAutopublishFields()` 方法，然后通过监听并更新
    `Accounts.onCreateUser()` 和 `Accounts.onLogin()` 事件处理器来完成这两项任务：
- en: '[PRE36]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We added two server methods to helps us with verifying the user. The first,
    `sendChallenge()`, generates a new 6 digit random code, updates the `services.twofactor.code`
    property, and then sends the code to the specified phone number via the Twilio
    service. The second, `verifyCode()`, receives manual input from the user, checks
    the manually entered code against the `services.twofactor.code` property, and
    updates `services.twofactor.verified` to `true` if they match:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了两个服务器方法来帮助我们验证用户。第一个，`sendChallenge()`，生成一个新的6位随机代码，更新 `services.twofactor.code`
    属性，然后通过 Twilio 服务将代码发送到指定的电话号码。第二个，`verifyCode()`，接收用户的手动输入，将手动输入的代码与 `services.twofactor.code`
    属性进行比较，如果匹配则将 `services.twofactor.verified` 更新为 `true`：
- en: '[PRE37]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'With the addition of the `verified` property, and the server methods used to
    change the `verified` property from `false` to `true`, we can now use `verified`
    in our UI. We created a helper method, `Template.secondLogin.verified`, that checks
    to see if the `services.twofactor.verified` property is set to `true`. We then
    use this helper in our `secondLogin` template to show that the user is logged
    in and verified:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加 `verified` 属性和用于将 `verified` 属性从 `false` 更改为 `true` 的服务器方法，我们现在可以在我们的 UI
    中使用 `verified`。我们创建了一个辅助方法 `Template.secondLogin.verified`，用于检查 `services.twofactor.verified`
    属性是否设置为 `true`。然后我们在 `secondLogin` 模板中使用这个辅助方法来显示用户已登录并得到验证：
- en: '[PRE38]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The rest of the event handlers and helpers on the UI are used for convenience,
    or to make calls to the server methods previously outlined.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: UI 上的其余事件处理器和辅助工具用于方便起见，或者用于调用之前概述的服务器方法。
- en: 'The simplified version is this: we extended the `users` collection, adding
    a `verified` property. We used the SMS text and verification to change the value
    of the `verified` property. We disallow any activity in the client UI unless `verified==true`.
    This check, as a complement to checking if there is a logged in user, allows us
    to require two-factor authentication in our UI.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之：我们扩展了 `users` 集合，添加了一个 `verified` 属性。我们使用短信文本和验证来改变 `verified` 属性的值。我们不允许客户端
    UI 进行任何活动，除非 `verified==true`。这个检查作为检查是否有已登录用户的补充，使我们能够在我们的 UI 中要求双因素认证。
- en: There's more…
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This model of extending the `users` collection with new `services` properties
    can be used for pretty much anything, and is not just limited to SMS text challenges.
    By adding and exposing new `services` properties, you can control what features
    are available, depending on the user status. Imagine being able to limit some
    features of the UI, based on the subscription plan a user has purchased. Or imagine
    remembering layout and view preferences based on the saved preferences of the
    user. All of this, and more, is possible by extending the `users` collection.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这种通过添加新的 `services` 属性来扩展 `users` 集合的模型可以用于几乎所有事情，而不仅仅局限于 SMS 文本挑战。通过添加和公开新的
    `services` 属性，你可以控制哪些功能可用，这取决于用户的状态。想象一下，能够根据用户购买的订阅计划限制一些 UI 功能。或者想象一下，根据用户保存的首选项记住布局和视图偏好。所有这些，以及更多，都可以通过扩展
    `users` 集合来实现。
- en: See also
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Building a smooth interface with Bootstrap* recipe in [Chapter 3](part0036.xhtml#aid-12AK81
    "Chapter 3. Building Great User Interfaces"), *Building Great User Interfaces*
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Bootstrap 构建平滑界面](https://part0036.xhtml#aid-12AK81 "第 3 章。构建出色的用户界面")中的
    *构建平滑界面* 菜单，*构建出色的用户界面*'
- en: The *Using npm packages directly* recipe in [Chapter 8](part0069.xhtml#aid-21PMQ1
    "Chapter 8. Integrating Third-party Libraries"), *Integrating Third-party Libraries*
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[直接使用 npm 包](https://part0069.xhtml#aid-21PMQ1 "第 8 章。集成第三方库")中的 *使用 npm 包直接*
    菜单，*集成第三方库*'
- en: The *Customizing the accounts login* recipe in this chapter
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中 *自定义账户登录* 的菜谱
- en: The *Using asynchronous functions* recipe in [Chapter 11](part0083.xhtml#aid-2F4UM1
    "Chapter 11. Leveraging Advanced Features"), *Leveraging Advanced Features*
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用异步函数](https://part0083.xhtml#aid-2F4UM1 "第 11 章。利用高级功能")中的 *使用异步函数* 菜单，*利用高级功能*'
