["```js\nmodule Main exposing (main)\n\nimport HTML exposing (HTML, text)\n\nmain : HTML msg\nmain =\n    text \"Hello, World!\"\n```", "```js\nmodule Main exposing (..)\n\nimport HTML exposing (..)\n\n-- main : HTML msg\nmain =\n    text \"Hello, World!\"\n```", "```js\n-- MODEL\n\ntype alias Model = \n    Int\n```", "```js\n-- VIEW\n\nview model =\n    div [] [ h1 [] [ text (\"Fruit to eat: \" ++ (toString model)) ] ] \n```", "```js\n<div>\n    <h1>Fruit to eat: 5</h1>\n</div>\n```", "```js\n-- MESSAGE\n\ntype Msg = \n    Decrement\n```", "```js\n-- UPDATE\n\nupdate msg model =\n    model - 1\n```", "```js\n-- main : HTML msg\nmain =\n    text \"Hello, World!\"\n```", "```js\n-- main : HTML msg\nmain =\n  beginnerProgram { model = 5, view = view, update = update }\n```", "```js\nmodule Main exposing (..)\nimport HTML exposing (..)\n\n-- main : HTML msg\nmain =\n  beginnerProgram { model = 5, view = view, update = update }\n\n-- MODEL\ntype alias Model = \n    Int\n\n-- VIEW\nview model =\n    div [] [ h1 [] [ text (\"Fruit to eat: \" ++ (toString model)) ] ]   \n\n-- MESSAGE\ntype Msg = \n    Decrement\n\n-- UPDATE\nupdate msg model =\n    model - 1\n```", "```js\n-- VIEW\nview model =\n    div [] \n        [ h1 [] [ text (\"Fruit to eat: \" ++ (toString model)) ] \n        , button [ onClick Decrement ] [ text \"Eat fruit\" ]\n        ]   \n```", "```js\nNAMING ERROR\nLine 23, Column 20\nCannot find variable onClick\n```", "```js\nmodule Main exposing (..)\n\nimport HTML exposing (..)\nimport HTML.Events exposing (onClick)\n```", "```js\n-- UPDATE\nupdate msg model =\n    model - 1\n```", "```js\n-- UPDATE\nupdate msg model =\n    if model > 0 then model - 1 else model == 5\n```", "```js\nTYPE MISMATCH\nLine 39, Column 5\nThe branches of this if produce different types of values.\n\nThe then branch has type:\n\nnumber\nBut the else branch is:\n\nBool\nHint: These need to match so that no matter which branch we take, we always get back the same type of value.\n```", "```js\n-- UPDATE\nupdate msg model =\n    if model > 0 then model - 1 else model + 5\n```", "```js\nmain =\n    HTML.beginnerProgram\n        { model = 5\n        , update = update\n        , view = view\n        }\n```", "```js\nmodule Main exposing (..)\n\nimport HTML exposing (..)\nimport HTML.Events exposing (onClick)\n\n-- main : HTML msg\nmain =\n    HTML.beginnerProgram\n        { model = 5\n        , update = update\n        , view = view\n        }\n\n-- MODEL\ntype alias Model = \n    Int\n\n-- VIEW\nview model =\n    div [] \n        [ h1 [] [ text (\"Fruit to eat: \" ++ (toString model)) ] \n        , button [ onClick Decrement ] [ text \"Eat fruit\" ]\n        ]   \n\n-- MESSAGE\ntype Msg = \n    Decrement\n\n-- UPDATE\nupdate msg model =\n    if model > 0 then model - 1 else model + 5\n```", "```js\n'a'\n```", "```js\n'a' : Char\n```", "```js\n\"a\"\n```", "```js\n\"a\" : String\n```", "```js\n\"\"\" \\\n| This \n| is \n| a \n| multi-line\n| string\n| \"\"\"\n\" \\n This \\n is \\n a \\n multi-line  \\n string \\n \" : String\n```", "```js\n> 5\n5 : number\n```", "```js\n> 3.6\n3.6 : Float\n```", "```js\n> truncate 3.14\n3 : Int\n```", "```js\n> True\nTrue : Bool\n> False\nFalse : Bool\n```", "```js\n> true\n-- NAMING ERROR ---------------------------------------------- repl-temp-000.elm\n\nCannot find variable `true`\n\n3| true\n ^^^^\nMaybe you want one of the following?\n\n List.take\n String.trim\n```", "```js\n[ 1, 2, 3, 4 ]\n```", "```js\n[1,2,3,4] : List number\n```", "```js\n[ 0.1, 0.2, 0.3, 0.4 ]\n```", "```js\n[0.1,0.2,0.3,0.4] : List Float\n```", "```js\n[ 'a', 'b', 'c' ]\n```", "```js\n['a','b','c'] : List Char\n```", "```js\n> [ 1, 2, 3, 'c' ]\n-- TYPE MISMATCH --------------------------------------------- repl-temp-000.elm\n\nThe 3rd and 4th entries in this list are different types of values.\n\n3| [ 1, 2, 3, 'c' ]\n ^^^\nThe 3rd entry has this type:\n\n number\n\nBut the 4th is:\n\n Char\n\nHint: Every entry in a list needs to be the same type of value. This way you\nnever run into unexpected values partway through. To mix different types in a\nsingle list, create a \"union type\" as described in:\n<http://guide.elm-lang.org/types/union_types.HTML>\n\n```", "```js\n> [ \"just\", \"a\", \"bunch\", \"of\", \"strings\" ]\n[\"just\",\"a\",\"bunch\",\"of\",\"strings\"] : List String\n```", "```js\n> []\n[] : List a\n```", "```js\n( \"abc\", True )\n```", "```js\n(\"abc\",True) : ( String, Bool )\n```", "```js\n[ ( 'a', 'b' ), ( 'c', 'd' ) ]\n```", "```js\n[('a','b'),('c','d')] : List ( Char, Char )\n```", "```js\n[ ( 'a', 'b' ), ( 'c' ) ]\n```", "```js\n-- TYPE MISMATCH --------------------------------------------- repl-temp-000.elm\n\nThe 1st and 2nd entries in this list are different types of values.\n\n3| [ ( 'a', 'b' ), ( 'c' ) ]\n ^^^\nThe 1st entry has this type:\n\n ( Char, Char )\n\nBut the 2nd is:\n\n Char\n```", "```js\n('1','2','3','4','5','6','7','8','9','0')\n```", "```js\nelm-make: Could not find `_Tuple10` when solving type constraints.\n```", "```js\n{ color=\"blue\", quantity=17 }\n```", "```js\n{ color = \"blue\", quantity = 17 } : { color : String, quantity : number }\n```", "```js\n-- main : HTML msg\nmain =\n  beginnerProgram { model = 5, view = view, update = update }\n```", "```js\n{ model = 5, view = view, update = update }\n```", "```js\n-- NAMING ERROR ---------------------------------------------- repl-temp-000.elm\n\nCannot find variable `update`\n\n3| { model = 5, view = view, update = update }\n ^^^^\n```", "```js\n> view = \"view info\"\n\"view info\" : String\n> update = \"update info\"\n\"update info\" : String\n> { model = 5, view = view, update = update }\n{ model = 5, view = \"view info\", update = \"update info\" }\n : { model : number, update : String, view : String }\n```", "```js\nmodule Main exposing (main)\n\nimport HTML exposing (HTML, text)\nimport Set\n\nset = Set.fromList [1,1,1,2]\n\nmain : HTML msg\nmain =\n    text (toString set)\n```", "```js\nmodule Main exposing (main)\n\nimport HTML exposing (HTML, text)\nimport Array\n\narray = Array.fromList [1,1,1,2]\narray2 = Array.get 0 array\n\nmain : HTML msg\nmain =\n    text ((toString array) ++ \" \" ++ (toString array2))\n```", "```js\nmodule Main exposing (main)\n\nimport HTML exposing (HTML, text)\nimport Dict\n\ndict = \n    Dict.fromList \n    [ (\"keyOne\", \"valueOne\")\n    , (\"keyTwo\", \"valueTwo\") \n    ]\n\nmain : HTML msg\nmain =\n    text (toString dict)\n```", "```js\nDict.fromList [(\"keyOne\",\"valueOne\"),(\"keyTwo\",\"valueTwo\")]\n```", "```js\nmultiplyBy5 num = 5 * num\n```", "```js\n<function> : number -> number\n```", "```js\nappendSuffix n = n ++ \"ing\"\n```", "```js\n<function> : String -> String\n```", "```js\n> time = 24\n24 : number\n> if time < 12 then \"morning\" else \"afternoon\"\n\"afternoon\" : String\n```", "```js\nimport HTML exposing (HTML, button, div, text)\nimport HTML.Events exposing (onClick)\n\nmain =\n  HTML.beginnerProgram { model = model, view = view, update = update }\n\n-- MODEL\ntype alias Model = Int\nmodel : Model\nmodel =\n  0\n\n-- UPDATE\ntype Msg = Increment | Decrement\nupdate : Msg -> Model -> Model\nupdate msg model =\n  case msg of\n    Increment ->\n      model + 1\n\n    Decrement ->\n      model - 1\n\n-- VIEW\nview : Model -> HTML Msg\nview model =\n  div []\n    [ button [ onClick Decrement ] [ text \"-\" ]\n    , div [] [ text (toString model) ]\n    , button [ onClick Increment ] [ text \"+\" ]\n    ]\n```", "```js\n-- MESSAGE\n\ntype Msg = \n    Decrement\n```", "```js\n-- UPDATE\n\ntype Msg = Increment | Decrement\n```", "```js\ntype Vehicle = Car | Bike | Boat | Helicopter\n```", "```js\n> friendsRide = Helicopter\nHelicopter : Repl.Vehicle\n```", "```js\ntype Msg = Increment | Decrement\n```", "```js\nupdate msg model =\n  case msg of\n    Increment ->\n      model + 1\n\n    Decrement ->\n      model - 1\n```", "```js\nupdate whatever model =\n  case whatever of\n    Increment ->\n      model + 1\n\n    Decrement ->\n      model - 1\n```", "```js\nPattern -> Expression to evaluate\n```", "```js\nIncrement ->\n      model + 1\n```", "```js\nmodule Main exposing (..)\n\nimport HTML exposing (..)\nimport HTML.Events exposing (onClick)\n\n-- main : HTML msg\nmain =\n    HTML.beginnerProgram\n        { model = 5\n        , update = update\n        , view = view\n        }\n\n-- MODEL\ntype alias Model = \n    Int\n\n-- VIEW\nview model =\n    div [] \n        [ h1 [] [ text (\"Fruit to eat: \" ++ (toString model)) ] \n        , button [ onClick Decrement ] [ text \"Eat fruit\" ]\n        , button [ onClick Reset ] [ text \"Reset counter\" ]\n        ]   \n\n-- MESSAGE\ntype Msg = Decrement | Reset\n\n-- UPDATE\nupdate msg model =\n    case msg of\n        Decrement -> \n            if model >= 1 then \n                model - 1\n            else\n                5\n        Reset -> \n            5\n```", "```js\n12 % 10\n```", "```js\n2 : Int\n```", "```js\n10 % 9\n```", "```js\n1 : Int\n```", "```js\n19 % 9\n```", "```js\n3 % 3\n```", "```js\n0 : Int\n```", "```js\n> 5 % 5\n0 : Int\n> 15 % 15\n0 : Int\n```", "```js\nmodule Main exposing (main)\n\nimport HTML exposing (text)\n\nfizzBuzz = \"FizzBuzz\"\nfizz = \"Fizz\"\nbuzz = \"Buzz\"\n\nfizzBuzzInput value = \n    if value % 15 == 0 then\n        fizzBuzz\n    else if value % 3 == 0 then\n        fizz\n    else if value % 5 == 0 then\n        buzz\n    else (toString value)\n\nmain =\n    text (fizzBuzzInput 34567)\n```", "```js\nmain =\n    fizzBuzzInput 34567\n    |> text  \n```"]