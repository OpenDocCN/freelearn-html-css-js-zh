- en: Chapter 7. Working with Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Finding coordinates for an address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding addresses on a map with a click
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting elevations on a map with a click
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a distance matrix for the given locations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting directions for the given locations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Street View to your maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focuses on the various services offered by the Google Maps JavaScript
    API. These services add significant functionality that largely differentiates
    Google Maps from its competitors. The reliability and the quality of the underlying
    data makes these services even more appreciated, as this allows applications making
    use of Google Maps to provide added functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: These services generally follow an asynchronous pattern in which a request is
    sent to an external server and a callback method is provided to process the responses.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These services are not available all over the world; there are restrictions
    or quotas—even if it is available—to prevent the abuse of these services. Detailed
    information will be given on these services in related recipes.
  prefs: []
  type: TYPE_NORMAL
- en: The good part of these services is, as they are part of the Google Maps JavaScript
    API, they are fully compatible with the classes and objects of the API.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, you can find directions between two addresses using the Google
    Maps API Directions Service. Firstly, you make the request supplying the necessary
    parameters. Then, by using your callback function, you will get the directions
    if everything goes on track. But, for a time lapse, you may have to think of ways
    to overlay these directions on the base maps. Luckily, the API provides the infrastructure
    for this so that with one line of additional code, you can observe your requested
    directions on top of your base maps.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will describe each of the service types in detail, including geocoding,
    directions, elevation, distance matrix, and Street View, with each recipe consisting
    of a related scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Finding coordinates for an address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Locating an address or place on the map has always been a tedious task, and
    the Google Maps JavaScript API eases this task with the geocoding service. Geocoding,
    in its simplest definition, is to associate geographic coordinates with the address
    information, be it only a street name, the detailed building number and zip code,
    or only a locality name.
  prefs: []
  type: TYPE_NORMAL
- en: By having the coordinates of your respective addresses, you can easily overlay
    them in your map applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will succeed in entering your holiday places and addresses
    and then map them as markers on top of your base maps in your application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will make use of the concepts related to adding vector layers, particularly
    markers, introduced in the *Adding markers to maps* recipe in [Chapter 3](ch03.html
    "Chapter 3. Adding Vector Layers"), *Adding Vector Layers*. It is advised to go
    through this recipe to have a general understanding of vector layers and their
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can locate your addresses by following the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create HTML markup so that you can enter your addresses and search for them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the global `geocoder` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the `geocoder` object in your `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the `listAddressBtn` button element and add a `click` event listener:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for listing addresses on the `addressList` element and send
    the geocoding request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for geocoding the addresses entered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Place a marker on the map and attach an `InfoWindow` object to display its
    details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will have your addresses pinned on your map as shown in the following screenshot:![How
    to do it…](img/ch07_recipe01_img01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Making a geocoding request is in fact quite simple. Firstly, you create a `Geocoder`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you call the `geocode()` method from the `geocoder` object, supplying
    its address parameter with an address, place, or locality name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This method takes the address, sends it to the Google servers to be geocoded,
    and by a callback function, gets back the results in the form of the `GeocoderResult`
    object array.
  prefs: []
  type: TYPE_NORMAL
- en: 'The responses come in an array in order of the most relevant matches. For instance,
    when you search for `Colosseum`, the `formatted_address` property of the first
    `GeocoderResult` object is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The second is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can quickly grasp that the ancient and highly touristic Colosseum in Rome
    is more popular than the second result. You can, of course, bias results through
    the restriction of map boundaries and country codes (we will review this in detail
    in the upcoming sections). However, without any intervention, you will see the
    geocoded results of high popularity at the top through various countries and continents.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `GeocoderResult` object has its `geometry` property so that you can view
    it via a marker overlay on top of base maps. In our recipe, the `pinpointResult()`function
    makes use of this, where it takes the `GeocoderResult` object named `result` as
    its only parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The geocoding service request and response has an extensive set of options
    and properties. Let''s start with the request first. In addition to the `address`
    parameter, which is the primary and required parameter of the `GeocodeRequest`
    object (supplied as the first parameter for the `geocode()` method of the `Geocoder`
    object), there is a `bounds` property that you can use to specify the returning
    geocoded results, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: When you supply the `bounds` property, such as the one used in the preceding
    code covering Europe, and then when you search for Sun Street, the first result
    is the UK. This is because the `bounds` property biases the geocoding results
    present inside the `LatLngBounds` object supplied. When you delete the `bounds`
    property, the first result from the same search comes from the USA.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you can bias the results by using the `region` parameter, in which
    an IANA language region subtag is accepted.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete listing for IANA language region subtags can be found at [http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry](http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
  prefs: []
  type: TYPE_NORMAL
- en: Detailed information on the `GeocodeRequest` object can be found at [https://developers.google.com/maps/documentation/javascript/reference#GeocoderRequest](https://developers.google.com/maps/documentation/javascript/reference#GeocoderRequest).
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, supplying the `region` parameter with `''ve''` for Venezuela
    as shown in the following code and searching for `''Valencia''` returns the city
    of `''Valencia'' in Venezuela` in the first place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Without the `region` parameter, this would return the city of `'Valencia' in
    Spain` in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Passing the returned results and their properties to the `GeocoderResult` object,
    this object carries an accuracy indicator since certain geocoding processes are
    about interpolation and matching and not about one-to-one equality.
  prefs: []
  type: TYPE_NORMAL
- en: 'The value of the result is stored in the `geometry` property of the `GeocoderResult`
    object, which contains the `location_type` property. These values are in the order
    of their highest to lowest accuracies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`google.maps.GeocoderLocationType.ROOFTOP`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.GeocoderLocationType.RANGE_INTERPOLATED`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.GeocoderLocationType.GEOMETRIC CENTER`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.GeocoderLocationType.APPROXIMATE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the preceding code, the `ROOFTOP` value represents the exact address, `RANGE_INTERPOLATED`
    represents that there is an interpolation between certain sections of the road,
    `GEOMETRIC_CENTER` represents the geometric center of the road or region, and
    finally `APPROXIMATE` tells us that the returned result's location is an approximation.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, when we search for `''William Village`'', the first result''s
    `formatted_address` is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `location_type` property of the geometry of the result is `APPROXIMATE`.
    This generally happens when there is no direct linkage between the search phrase
    and the returned result, as it is in our case.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the accuracy of the geocoding process, we can get the type of the
    `GeocoderResult` object through its `types` property. The `types` property is
    an array that is of the category to which the returned result belongs.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, for the Colosseum in Rome, the `types` property is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'While for Via del Corso, Rome, it is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For Uffizi Gallery, Florence, it is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The complete listing for the possible values of the `types` property of the
    `GeocoderResult` object can be found at [https://developers.google.com/maps/documentation/javascript/geocoding
    #GeocodingAddressTypes](https://developers.google.com/maps/documentation/javascript/geocoding
    #GeocodingAddressTypes).'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to note that the callback function through which we get our
    results of the geocoding request requires another parameter, which is about the
    status of the request. The most prominent possible values for this parameter are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`google.maps.GeocoderStatus.OK`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.GeocoderStatus.ZERO_RESULTS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.GeocoderStatus.OVER_QUERY_LIMIT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.GeocoderStatus.REQUEST_DENIED`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.GeocoderStatus.INVALID_REQUEST`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The values except `GeocoderStatus.OK` point to a problem. Among all, `GeocoderStatus.OVER_QUERY_LIMIT`
    requires special attention. In the introduction of this chapter, we have mentioned
    that all of these Google Maps services are subject to limited use in terms of
    geography and request rates. And, this status code is fired when you go beyond
    the limit of the usage of the geocoding services.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A detailed explanation of the `OVER_QUERY_LIMIT` status code can be found at
    [https://developers.google.com/maps/documentation/business/articles/usage_limits#limitexceeded](https://developers.google.com/maps/documentation/business/articles/usage_limits#limitexceeded).
  prefs: []
  type: TYPE_NORMAL
- en: The complete listing for the possible values of the `GeocoderStatus` object
    can be found at [https://developers.google.com/maps/documentation/javascript/geocoding#GeocodingStatusCodes](https://developers.google.com/maps/documentation/javascript/geocoding#GeocodingStatusCodes).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding markers to maps* recipe in [Chapter 3](ch03.html "Chapter 3. Adding
    Vector Layers"), *Adding Vector Layers*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding addresses on a map with a click
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we had the address in our hand and our aim was to find
    the map location; in other terms, the coordinates of the address on earth. But,
    what happens if we have the exact coordinates and try to find the address that
    matches these exact coordinates?
  prefs: []
  type: TYPE_NORMAL
- en: This process is known as reverse geocoding, and it is the process of converting
    coordinates to human-readable addresses.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will make use of the reverse geocoding capabilities of the
    Google Maps JavaScript API. When the user clicks on the map, we will find the
    address where the user clicked and imminently display it to him/her.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reviewing the recipe *Drawing shapes on the map* in [Chapter 6](ch06.html "Chapter 6. Google
    Maps JavaScript Libraries"), *Google Maps JavaScript Libraries*, will ease your
    work because greater detail on drawing shapes and their background is required
    for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to allow your user to click on the map and find the address
    of the place that he/she clicked on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the `geocoder` object as global:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `popup` object as global:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the `geocoder` and `popup` objects, inside the `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `drawingManager` object inside `initMap()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the drawing functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an event listener for the completion of the user-drawn marker, perform
    the reverse geocoding task, and find the address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for displaying the address on the `InfoWindow` object of
    the marker drawn:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can now click on and get the address information in the info window as shown
    in the following screenshot:![How to do it…](img/ch07_recipe02_img01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have looked at the *Finding coordinates for an address* recipe in this
    chapter, you may have realized that we are again using the same `geocoder` object
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this time we are supplying the coordinate pairs in the form of the
    `LatLng` object instead of the address text for the familiar `geocode()` method
    of the `geocoder` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In fact, there was another property that the `geocode()` method has which we
    have not discussed in the previous recipe; that is, the `latlng` property that
    accepts the `LatLng` object.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the `geocode()` method of the `geocoder` object can be used bi-directionally,
    both for geocoding and reverse geocoding. For geocoding, we must use the `address`
    property to fill in the address for which we want to have the location. For reverse
    geocoding, we must use the `latlng` property to fill in the `LatLng` object for
    which we want the address information.
  prefs: []
  type: TYPE_NORMAL
- en: 'We get the `LatLng` object of the marker that the user draws by using the `getPosition()`
    method of the marker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In our callback function, which we have to supply for our reverse geocoding
    request, we have two parameters that get their values when we get the replies
    of our request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is an array of the `GeocoderResult` objects, and the second
    one is an array of the `GeocoderStatus` object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can review the available for the `GeocoderStatus` object as a well-detailed
    breakdown on the `GeocoderResult` object in the *Finding coordinates for an address*
    recipe of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'After testing the service status, we can work with our array of the `GeocoderResult`
    objects if everything is OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We have picked the first object because it is the most precise one. For instance,
    for the marker position in our recipe, the complete array of address information
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: You can observe that iterating from the start of the array to the end, we end
    up in `"United States"`, the least precise address information for our reverse
    geocoding request.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Finding coordinates for an address* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Drawing shapes on the map* recipe in [Chapter 6](ch06.html "Chapter 6. Google
    Maps JavaScript Libraries"), *Google Maps JavaScript Libraries*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting elevations on a map with a click
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API provides information on elevation data, returning
    positive values on the terrain relative to the sea surface. It also gives information
    on the depth of ocean floors in negative values.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `ElevationService` object, we can get elevation information on individual
    locations as well as paths.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, firstly we will show how to get an elevation data from a single
    point that the user selects, and then we will go over the same scenario with the
    paths.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is a good idea to have a quick glance at the *Drawing shapes on the map*
    recipe in [Chapter 6](ch06.html "Chapter 6. Google Maps JavaScript Libraries"),
    *Google Maps JavaScript Libraries*, as the recipe covers every detail on how to
    draw a shape using the Google Maps JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can view the elevation data of a location of your choice if you follow
    the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the `elevator` object as global:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `popup` object as global:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the `elevator` and `popup` objects, inside the `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `drawingManager` object inside `initMap()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the drawing functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an event listener for the completion of the user-drawn marker, send the
    request using the `elevator` object, and find the elevation data for the location
    of the marker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for displaying the elevation data on the `InfoWindow` object
    of the marker drawn:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will now get the elevation of the point that you have clicked on, as shown
    in the following screenshot:![How to do it…](img/ch07_recipe03_img01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We get the elevation data using the `ElevationService` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The `elevator` object has the `getElevationForLocations()` method that takes
    an array of `LatLng` objects to return the elevation data for each position that
    the specific `LatLng` object is standing for. In other words, if you allocate
    three `LatLng` objects in your array, you get three `ElevationResult` objects
    as an array in your callback function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: However, bear in mind that the accuracy of the elevation is lowered when the
    number of the `LatLng` objects are embedded in the array. Therefore, if you want
    to have high accuracy, you must opt for the `LatLng` array containing a single
    element, as seen in our case.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `LatLng` object array is given for the locations property of the `getElevationForLocations()`
    method. However, we have one `marker` object in hand to handle the `markercomplete`
    event when it is fired upon the drawing of the marker by the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Therefore, we are converting the single marker position to an array containing
    only one element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In the callback function, we get the status of the service together with the
    `ElevationResult` object array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The `status` parameter is of the type `ElevationStatus`, and it is very similar
    to the `GeocoderStatus` object in terms of its constants, which are listed as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`google.maps.ElevationStatus.OK`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.ElevationStatus.UNKNOWN_ERROR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.ElevationStatus.OVER_QUERY_LIMIT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.ElevationStatus.REQUEST_DENIED`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.ElevationStatus.INVALID_REQUEST`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from `ElevationStatus.OK`, all the status values point to a problem. Other
    values are self-explanatory within their names.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete listing and details for the possible values of the `ElevationStatus`
    object can be found at [https://developers.google.com/maps/documentation/javascript/reference#
    ElevationStatus](https://developers.google.com/maps/documentation/javascript/reference#
    ElevationStatus).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `results` parameter is of the type `ElevationResult`. The `ElevationResult`
    object has three properties called `elevation`, `location`, and `resolution`.
    We are making use of the `elevation` property in our `showElevationOfResult()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The elevation data is the positive number for the terrain and the negative number
    for the ocean floor.
  prefs: []
  type: TYPE_NORMAL
- en: The location property is the `LatLng` object of `ElevationResult`, and the resolution
    property is the distance in meters between the sample points that is used to generate/interpolate
    this elevation data. The higher the resolution, the less accurate the elevation
    data.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Drawing shapes on the map* recipe in [Chapter 6](ch06.html "Chapter 6. Google
    Maps JavaScript Libraries"), *Google Maps JavaScript Libraries*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a distance matrix for the given locations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API carries some interesting and particularly helpful
    properties, one of them being the Distance Matrix Service. Using this service,
    you can compute the travel time and distance between multiple origins and destination
    locations.
  prefs: []
  type: TYPE_NORMAL
- en: This is especially useful when you want to have a one-to-one report of your
    travel nodes, be it a delivery business or only a summertime holiday. This service
    gives you the travel time and distances within your choice of travel mode (driving,
    walking, and cycling); you can see the results oriented for each origin and destination.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that the output of this service cannot be mapped onto the
    base maps; you can have the information about the travel time and duration, but
    for the directions, you have to use the Directions service, explained in detail
    in the *Getting a direction for the given locations* recipe later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will locate the origin and destination locations and get
    the distance matrix result for our locations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will make use of the drawing library; therefore, it is advisable
    to go through the *Drawing shapes on the map* recipe in [Chapter 6](ch06.html
    "Chapter 6. Google Maps JavaScript Libraries"), *Google Maps JavaScript Libraries*,
    and gain some understanding on the subject matter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can draw your origin and destination points and then request for a distance
    matrix by clicking on the button. You can see how to do this by following the
    given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the HTML `input` element of the `button` type to kick off the distance
    matrix request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the global variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the global variables in the `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the `button` element and add a `click` event handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the `distanceMatrixService` object in the `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `drawingManager` object inside `initMap()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the drawing functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an event listener for the completion of the user-drawn marker, set the
    marker icons based upon the positions they are pointing towards, whether origin
    or destination, and limit the total number of markers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for preparing the request properties and sending the request
    for the `distanceMatrixService` object by using the `getDistanceMatrix()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a callback function named `getDistanceMatrixResult` for the `getDistanceMatrix()`
    method call of the `distanceMatrixService` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function to be called by the callback function listed earlier to write
    the results to the `matrixResultDiv` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for converting counts to letters; the aim is to match the
    counts with the marker icons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will now have the distance matrix between the points of your selection,
    as shown in the following screenshot:![How to do it…](img/ch07_recipe04_img01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our recipe, we are allowing the users to point the markers downward at the
    location of their choice. However, we are just following a scheme such that the
    first marker will point to the first origin, the second will point to the first
    destination, the third will point to the second origin, the fourth will point
    to the second destination location, and so on. In addition, we are limiting the
    number of markers that have to be drawn to 10.
  prefs: []
  type: TYPE_NORMAL
- en: 'This was about drawing markers. Then, we will prepare the origin and destination
    locations to be supplied to the `distanceMatrixService` object. The object is
    initialized as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The user pressed the input button element and we fire the request via the `getDistanceMatrix()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we supply `originLatLngs` to the `origins` property, where `originLatLngs`
    is an array of the `LatLng` objects collected out of user-drawn markers—the odd-numbered
    ones—in the `markercomplete` event listener for the `drawingManager` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The `destinations` property is set for the `destimationLatLngs` array in the
    same logic.
  prefs: []
  type: TYPE_NORMAL
- en: As a quick reminder, the `destinations` and `origins` properties can take an
    array of address strings as well as an array of `LatLng` objects, as in our case.
  prefs: []
  type: TYPE_NORMAL
- en: 'The third property that we have used in our request is the `travelMode` property,
    which is used to set the mode of travel. The options other than `TravelMode.DRIVING`
    available for this property are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TravelMode.WALKING`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TravelMode.BICYCLING`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to the `DistanceMatrixRequest` object carrying the `origins`, `destinations`,
    and `travelMode` properties, we are supplying a callback function named `getDistanceMatrixResult`
    for the `getDistanceMatrix()` method call. The `getDistanceMatrixResult` function
    has two parameters: one is for the response of the service and the other one is
    for the status of the service. It is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'In this function, firstly we check whether the service is working properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete listing and details for the possible values of the `DistanceMatrixStatus`
    object can be found at [https://developers.google.com/maps/documentation/javascript/reference#
    DistanceMatrixStatus](https://developers.google.com/maps/documentation/javascript/reference#
    DistanceMatrixStatus).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we process the results of the type `DistanceMatrixResponse` object, which
    carries the `originAddresses` and `destinationAddresses` arrays of strings and
    a `DistanceMatrixResponseRow` array called `rows`. Firstly, we get the `originAddresses`
    and `destinationAddresses` arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The `rows` array consists of another array called `elements`, in which its
    children are of the type `DistanceMatrixResponseElement`. Therefore, we have to
    have two loops to iterate through the `DistanceMatrixResponseElement` objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The `DistanceMatrixResponseElement` object has two prominent properties that
    we have used in our recipe: one is distance and the other is duration. They are
    elaborated in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: By using these properties, we reach the particular distance and duration properties
    of the corresponding origin address and destination address.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Drawing shapes on the map* recipe in [Chapter 6](ch06.html "Chapter 6. Google
    Maps JavaScript Libraries"), *Google Maps JavaScript Libraries*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting directions for the given locations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having directions between two or more locations has always been a favorite among
    users, car drivers, tourists, and so on. The need for navigation products either
    for driving, walking, or any other transit options is qualified by the sales of
    these products.
  prefs: []
  type: TYPE_NORMAL
- en: A good Directions service would need comprehensive road data with several attributes
    filled in such as the direction of traffic flow, turn restrictions, bridges, and
    underground tunnels. Hopefully, Google Maps has this data in the background; therefore,
    it is very natural for Google to include this functionality in Google Maps.
  prefs: []
  type: TYPE_NORMAL
- en: In Google Maps, directions is perhaps one of the most used features. It is also
    included in the Google Maps JavaScript API, giving developers the ability to generate
    directions programmatically between locations of their choice with a broad range
    of options.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, firstly we will have the user enter an address or any location
    of a place, map them using the Geocoder service, and then provide the directions
    between them in the order of their entrance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will make use of concepts related to the Geocoder service introduced
    in the *Finding coordinates for an address* recipe at the beginning of this chapter.
    It is highly advisable to go through this recipe to have a general understanding
    of Geocoder and its usage.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can enter your addresses and get directions between them by executing the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert a `ContainerDiv` element of HTML that will be placed on the right-hand
    side of the `div` element of the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the global variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the global variables in the `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Give the instructions on `directionsRenderer` so that it will draw the directions
    on the map and will list the directions on the right-hand side of the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for listing the addresses the user has entered and calling
    the function that does the geocoding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function that does the real geocoding task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for placing a marker for the geocoding result of the user-entered
    address information and attaching an `InfoWindow` object to display its details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At last, the real directions can be called upon by using the `getDirectionsBtn`
    button handler. Create a function for sending the request to the `directionsService`
    object, ensuring that the results are drawn and listed on the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will now have the directions mapped between the points of your selection,
    as shown in the following screenshot:![How to do it…](img/ch07_recipe05_img01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we are making use of both `GeocoderService` and `DirectionsService`.
    However, in order to avoid redundancy (it is strongly recommended to go through
    the *Finding coordinates for an address* recipe of this chapter), we will mostly
    concentrate on `DirectionsService`, preparing the request properties, sending
    and getting back the results to draw on the map, and also its step-by-step textual
    descriptions.
  prefs: []
  type: TYPE_NORMAL
- en: 'At first, we are waiting for the user to enter addresses to be geocoded and
    shown on the map. These are the places that we will generate directions for. We
    are collecting all the markers that are the results of the user''s geocoding requests
    so that we can use them for directions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'As soon as the numbers of the geocoded addresses are more than 1, the button
    labeled **Get Directions** gets enabled so that users can request for directions
    between their geocoded addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, everything is ready for generating directions provided that we
    have prepared the infrastructure, so use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The `DirectionsService` object is responsible for sending the `DirectionsRequest`
    object to the service servers at Google, while the `DirectionsRenderer` object,
    as its name implies, renders the `DirectionsResult` object onto the map and its
    textual description.
  prefs: []
  type: TYPE_NORMAL
- en: An origin and a destination are compulsory for `DirectionsRequest` logically;
    however, there may be waypoints in between the origin and the destination. If
    the user geocodes two addresses and presses the **Get Directions** button, there
    is no place for waypoints, and the first address becomes the origin, while the
    second becomes the destination.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there are more than two addresses on the list of the geocoded addresses,
    the first will be the origin and the last will be the destination again. In addition
    to this, the waypoints will be present in between the addresses. We are preparing
    the `DirectionsRequest` parameters considering these factors, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'You may have realized that we are supplying the `LatLng` objects for the `origin`
    and `destination` properties of the `directionsRequest` object. This does not
    have to be the case: you can also provide addresses as strings for the `origin`
    and `destination` properties, as well as the `location` property of the `DirectionsWaypoint`
    object that we are adding to our `waypnts` array. Also, there is a `stopover`
    property for the `DirectionsWaypoint` object. It specifies that the waypoint is
    actually a stop and splits the route. Another property for the `DirectionsRequest`
    object is `travelMode,` where we have opted for `DRIVING`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete listing and details for the possible values of the `TravelMode`
    object can be found at [https://developers.google.com/maps/documentation/javascript/reference#TravelMode](https://developers.google.com/maps/documentation/javascript/reference#TravelMode).
  prefs: []
  type: TYPE_NORMAL
- en: We have included a few properties that are mostly required; however, the `DirectionsRequest`
    object has a lot more.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete listing of the properties of the `DirectionsRequest` object can
    be found at [https://developers.google.com/maps/documentation/javascript/reference#DirectionsRequest](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRequest).
  prefs: []
  type: TYPE_NORMAL
- en: 'After preparing our `directionsRequest` object, we can send the request using
    our `directionsService` object through its `route()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'The `route()` method takes two parameters: one is the `DirectionsRequest` object
    and the other is the callback function that has the `DirectionsResult` and `DirectionsStatus`
    objects as parameters in return.'
  prefs: []
  type: TYPE_NORMAL
- en: We test whether everything is on track using our `status` object, which is of
    the type `DirectionsStatus`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete listing of constants of the DirectionsStatus object can be found
    at [https://developers.google.com/maps/documentation/javascript/reference#DirectionsStatus](https://developers.google.com/maps/documentation/javascript/reference#DirectionsStatus).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we map the results and have textual descriptions on a `div` element using
    our old `directionsRenderer` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'But how did the `directionsRenderer` object know where to map the results,
    or which `div` to write the step-by-step instructions to? Hopefully, we have given
    the instructions earlier to the `DirectionsRenderer` object in our `initMap()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: The `setMap()` method of the `DirectionsRenderer` object maps the `DirectionsResult`
    object to the selected map object. And, similarly, the `setPanel()` method is
    used for selecting an HTML `div` element to have the step-by-step instructions
    written on it. This is so that we can have both our directions mapped in our map
    instance. The map imminently gets zoomed out to show the entire route, and we
    can see the order of our journey with the help of additional markers with letters
    on each.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Finding coordinates for an address* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Street View to your maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Maps already has good map data updated continuously with the ultimate
    cartographic quality. In addition, there comes the up-to-date satellite imagery.
    Although these were sufficient for Google Maps to be so popular and successful,
    there is another view that takes much interest—Street View.
  prefs: []
  type: TYPE_NORMAL
- en: Street View is the 360-degree panorama view from the roads that are covered
    under this service.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete listing of countries and cities where Street View is available
    can be found at [http://maps.google.com/intl/ALL/maps/about/behind-the-scenes/streetview/](http://maps.google.com/intl/ALL/maps/about/behind-the-scenes/streetview/).
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will go over how to add Street View panoramas to the current
    view, switch between the map view and Street View, and set the panorama properties.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will make use of the concepts related to the geocoding service
    introduced in the *Finding coordinates for an address recipe* in this chapter.
    It is highly advisable to read this recipe to have a general understanding of
    Geocoder and its usage.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will enable your geocoded addresses to be seen on Street
    View:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, use the HTML markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the global objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the global objects in the `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for listing addresses on the `addressList` element and for
    calling the geocoding function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for geocoding the addresses:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for placing the marker in the map for the geocoded addresses:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for setting the Street View panorama properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for displaying the familiar map view, which is called by
    the HTML click button labeled **Show Map**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for displaying the Street View panorama taking the location
    as the map''s center location, which is called by the HTML click button labeled
    **Show StreetView**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will now have the geocoded addresses with Street View, as shown in the following
    screenshot:![How to do it…](img/ch07_recipe06_img01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our recipe, our aim is to perform the ordinary task of geocoding addresses,
    in addition to providing the availability of the Street View feature of the Google
    Maps JavaScript API in the same map''s `div` element. To do this, we need the
    `StreetViewPanorama` object available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: This object enables us to display the Street View either within our map's `div`
    element or within a separate `div` element of our will.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete description of properties and methods of the `StreetViewPanorama`
    class can be found at [https://developers.google.com/maps/documentation/javascript/reference#StreetViewPanorama](https://developers.google.com/maps/documentation/javascript/reference#StreetViewPanorama).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can display the Street View when the button labeled **Show Street
    View** is clicked, providing the `map` object''s center location as the `LatLng`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we set the properties of the `StreetViewPanorama` object by specifying
    the position and setting the point of view of the `streetView object`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: The `setPosition()` method takes the `LatLng` object as its parameter, and we
    are providing either the map center or the geocoded address' location. By using
    the `setPov()` method, we are arranging the camera view of the Street View. To
    have a camera view, the object must have an angle towards both true north and
    the street view origin—the street vehicle mostly.
  prefs: []
  type: TYPE_NORMAL
- en: The `heading` property of the `StreetViewPov` object is for the angle in reference
    to true north, where 0 degrees is true north, 90 degrees is east, 180 degrees
    is south, and 270 degrees is west. In our recipe, we have set the `heading` property
    to 0 degrees.
  prefs: []
  type: TYPE_NORMAL
- en: The `pitch` property is for the angle in reference to the Street View vehicle.
    This means that 90 degrees is totally upwards, viewing the sky or clouds, whereas
    -90 degrees is totally downwards, viewing the road ground in most cases.
  prefs: []
  type: TYPE_NORMAL
