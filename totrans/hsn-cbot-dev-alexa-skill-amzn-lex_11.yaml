- en: Appendix B
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Trying to figure out why your code isn''t working can be a very frustrating
    process and there can be loads of different sources of the issues. Throughout
    this book, we have three main sources of problems: Lambdas, Alexa Skill setup,
    and Lex setup.'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging Alexa Skills
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If your skill hasn''t worked, then there are a few things that you need to
    check:'
  prefs: []
  type: TYPE_NORMAL
- en: You're using the correct utterances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your model has been saved and built
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your endpoint is set correctly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You've added Alexa as a trigger for your Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your Lambda is working properly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the utterances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If Alexa is replying with "Sorry, I don't know that one," make sure that you
    are saying or typing the correct phrase. It should be "Alexa, tell *your skill
    invocation* *your intent utterance,*" so it might be, "Alexa, tell my skill hello"
    or "Alexa, ask car helper what car I should get." Check that you've correctly
    set your skill invocation and intent utterances. You can add more utterances to
    your intent so that it works with a larger variety of phrases.
  prefs: []
  type: TYPE_NORMAL
- en: You can also add console logs to your handlers to make sure that they are getting
    triggered when you expect them to.
  prefs: []
  type: TYPE_NORMAL
- en: Save and build your model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Check that you've saved and built your model; the Save Model and Build Model
    buttons should be gray, not blue. There is no harm in re-saving and rebuilding
    your model to make sure that everything is up to date.
  prefs: []
  type: TYPE_NORMAL
- en: Check your Endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last thing to check in the Alexa Skill Kit is that the Endpoint is correctly
    set. Make sure that there is a long ARN code in the Default Region box. If this
    isn't there, then open your Lambda console and find the Lambda that you want to
    be dealing with this skill. Copy the ARN number from the top right of the screen
    and paste it into the Default Region box in the Alexa Skill Kit. It should have
    the format `arn:aws:lambda:your-region:123456789012:function:your-lambda-name`.
  prefs: []
  type: TYPE_NORMAL
- en: Added Alexa as a trigger for your Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If your skill still isn''t working, then there is probably a problem with your
    Lambda. In the Lambda editor, make sure that Alexa is on the design diagram exactly
    as shown next. If Alexa Skill Kit is not in that diagram, select it from the list
    of triggers on the left and follow the setup steps explained earlier in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2934c059-6b4a-4170-8458-0f62fd85e91c.png)'
  prefs: []
  type: TYPE_IMG
- en: Alexa trigger
  prefs: []
  type: TYPE_NORMAL
- en: If the Alexa Skill Kit is shown but there is a message to complete configuration
    or something similar, then you need to do that. Click on the Alexa Skill Kit symbol
    and complete the configuration, as explained earlier in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging Lex chatbots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with Alexa skills, there are a few different places that can cause errors
    in your chatbot. Here are a few things you need to check:'
  prefs: []
  type: TYPE_NORMAL
- en: You are using the correct utterances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your intent has a text response or is triggering the correct Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your intent has been saved and the chatbot built and deployed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your connected platform is properly configured (Facebook, Slack, API)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your Lambdas are working
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check your utterances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If Lex is saying that it couldn''t understand what you said, then it couldn''t
    match your utterance to an intent. There are two ways this can happen: you don''t
    have any sample utterances close enough to the utterance you used, or there are
    two sample utterances on different intents that match well. Having different intents
    with similar sample utterances can often cause issues.'
  prefs: []
  type: TYPE_NORMAL
- en: Check the intent response
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your intent may be getting hit, but it isn't returning a response. In the intent,
    scroll down to Fulfillment and make sure that either a Lambda is being invoked
    or you are replying with a text response. If you are invoking a Lambda, check
    the Lambda logs to see whether the Lambda is being run when you trigger that intent.
    If not, you may just need to save, build the chatbot, and deploy it again.
  prefs: []
  type: TYPE_NORMAL
- en: Save intents, build, and deploy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If all of your sample utterances and fulfillments are correct, then you should
    make sure every intent is saved, build your chatbot, and deploy it to the same
    alias as before. It is very easy to forget this step and wonder why all of your
    changes haven't made any difference.
  prefs: []
  type: TYPE_NORMAL
- en: Check your connected platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are trying to connect your chatbot to a platform such as Facebook, Slack,
    or your API, make sure that they are set up properly. If you can successfully
    test your chatbot in the Lex console, then go back through the setup processes
    for the platform and make sure that you haven't missed a step.
  prefs: []
  type: TYPE_NORMAL
- en: Check your Lambdas are working
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use the Lambda debugging tips to ensure that your Lambdas are responding with
    the correct responses.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging Lambdas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have found that the problem is not with your Alexa skill or Lex chatbot,
    there might be a problem with your Lambda. Before you start changing things in
    your code, it is often a good idea to create a test in the Lambda console. This
    should represent the request that is being sent by Alexa or Lex. Use this test
    to see whether it is your Lambda that is at fault or it works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: If your test is unsuccessful, look in the logs for the error messages. This
    can often point you to the root of the problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some things to check when trying to debug a Lambda:'
  prefs: []
  type: TYPE_NORMAL
- en: Your Lambda has all of the required packages installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your permissions are correct
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of your variables are correctly defined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your Lambda code is correct
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everything your Lambda calls is working
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install all of the required packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your Lambda isn't working, you need to check that all the packages are installed.
    Go to your `Lambdas` folder and navigate to your problem Lambda. In it, there
    should be an `archive.zip` zipped file. If there isn't, run the build script again
    and an `archive.zip` file should appear â€“ your Lambda should now work.
  prefs: []
  type: TYPE_NORMAL
- en: If there is an `archive.zip` file, open it and see what it contains. There should
    be an `index.js` file, a `package.json` or `package-lock.json` file, and a `node_modules`
    folder. If any of these things are missing, then rerun the build script and make
    sure that it succeeds.
  prefs: []
  type: TYPE_NORMAL
- en: If all of that is correct, then check inside `package.json` or `package-lock.json`
    that there are dependencies for all of the packages that you are requiring in
    your Lambda code. Check that there is also a folder for each of the packages inside
    `node_modules`. If there isn't, you will need to run `npm install --save *PACKAGE-NAME*`
    to add it to the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: Check your permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go into your Lambda, scroll down to the Execution role, and see which role you
    have selected. Now, go to the IAM service and select the role that you have used.
    Look through the policies that you have added to that role and make sure that
    you have all the permissions that you need. Add any policies that you need for
    the role.
  prefs: []
  type: TYPE_NORMAL
- en: Correct your Lambda code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You also need to check that the code in your Lambda is correct. As your Lambdas
    become more complex, it becomes harder to get them working the first time. Run
    the tests that you've created, and look for the error message.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't know what the error message means or how to fix it, search online
    as there will have been other people who have encountered this error before. Make
    sure you read the replies on how to fix the error and understand why that solution
    works before using it in your code. It helps you become a better developer and
    allows you to fix it if there is an error with it in the future.
  prefs: []
  type: TYPE_NORMAL
- en: If the bug isn't obvious from the error message, you can use `console.log('Some
    information')` to log out whenever your code gets to each stage. Use this to work
    out how far your code is getting and what values are available at that point.
    It can often be that variables or responses from other services are not in the
    format that you expected them to be in. Being able to see all of your data just
    before the error is really useful in finding out why your code isn't working.
  prefs: []
  type: TYPE_NORMAL
- en: Check external services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with external services, there is always the possibility that those
    services stop working or change their response. Every time you deal with an external
    service, you should handle it, if it is returning an error. If the services appear
    to be working but your code is not working, then `console.log` out the response
    to check the format.
  prefs: []
  type: TYPE_NORMAL
