- en: Chapter 2. Introducing Bootstrap 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we learned how to create a simple Rails project, and how
    to change its default CSS styles. The styling process becomes more difficult if
    the developer is a newbie and has minimal knowledge of CSS. Bootstrap helps to
    solve this issue. It gives you access to some of the popular, ready-to-use reusable
    components such as stylish navigation bars, image containers, popovers, and so
    on. All you have to do is copy and customize the markup of the component you want
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will understand what Bootstrap is, and how it is important
    for a Rails developer. We will see how to download and use Bootstrap in our Rails
    projects. We will again create the same Todo application in this chapter and apply
    Bootstrap styles to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Bootstrap?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Bootstrap in a Rails project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Bootstrap?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap is a complete frontend framework that helps in developing web applications
    without having to worry about its frontend. If you are a developer and your main
    focus is to showcase the power of your application without putting any efforts
    on CSS designing, then Bootstrap is for you. It allows developers to select from
    a range of popular reusable HTML components that are previously developed and
    styled by Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: '![What is Bootstrap?](img/7269OS_2_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's imagine a situation. Thomas is a Rails developer. He creates a powerful
    e-commerce shopping system using Rails. The system has many features which are
    normally expected from a shopping website. Thomas puts his extra effort on securing
    the application, and he made the system ready to use. Then comes the time when
    Thomas has to finally represent this application to venture capitalists to get
    some funding in order to start his project. But wait, Thomas did nothing to make
    his application presentable. His application contains only basic HTML markup with
    almost negligible CSS styling in it. Will his application make an impact?
  prefs: []
  type: TYPE_NORMAL
- en: The answer is, definitely not. Though Thomas was able to create a robust Rails
    application, it lacked presentation ability. His lack of proper CSS knowledge
    was the main reason that debarred him from creating a powerful impact for his
    project.
  prefs: []
  type: TYPE_NORMAL
- en: It is always important to balance both the frontend and backend capability for
    every developer. If you can't represent your application in a presentable manner,
    then it is definitely of no use. There might be some developers who will go forward
    after learning a lesson from a similar event, as described in the preceding example.
    They will try hard and learn web designing using CSS irrespective of whether they
    have interest in that area. By doing this, they are forgetting that designing
    is a completely different field from what they were previously doing. It is the
    work of UX/UI developers.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap developers have written many CSS definitions that can be directly
    plugged into our projects to represent it. It is also an open source project which
    is licensed under MIT. This gives you freedom to use it on any type of projects
    without worrying about the licensing issues. Why should we reinvent the wheel,
    when someone has already done the job for us? Developers who are focused on rapid
    application development should consider using Bootstrap in their every project.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap is not limited to just providing better CSS components to the developers.
    It is a **mobile first** framework. This means that anything you write in your
    application using Bootstrap will be compatible even on smaller mobile devices.
    Bootstrap-powered applications can scale beautifully from extremely small devices
    like iPhones to larger displays like Retina displays. It helps you to write a
    single codebase and use it everywhere. With the advancement of technology, even
    native iOS and Android applications can be written using HTML, CSS, and JavaScript
    today. They are called **Hybrid applications** that are ported into the native
    platforms using tools like PhoneGap. Imagine that your Rails application is being
    used in all types of devices like mobiles, smart TVs, tablets, and even desktop
    screens. Awesome! Isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Installing Bootstrap in a Rails project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap is simply a package of CSS, JavaScript, and font files. You must be
    confused why we used the term installing with Bootstrap here. Well, there are
    two different ways of using Bootstrap in Rails. The first one is to directly copy
    the Bootstrap files at proper places in the Rails project. The second one is the
    *Bootstrap Sass way*. It is because of the second way that we used the term installing.
    It also comes as a gemset that can be bundle installed in any Rails project. We
    will explore both the ways in detail in this section.
  prefs: []
  type: TYPE_NORMAL
- en: There's also a third way, using Bootstrap files from CDN, which is the simplest
    of all. We will explore this at the end.
  prefs: []
  type: TYPE_NORMAL
- en: Placing Bootstrap files in a Rails project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the first method of using Bootstrap in Rails. Many Rails developers
    get this method wrong. Placing the Bootstrap files properly is very important
    to activate Bootstrap. Follow these steps to place Bootstrap files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new Rails project. This time we will name it as the `Rails_Bootstrap_Project`
    command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As usual, the preceding code will run various other commands and will take some
    time to complete. We will not discuss about various folders that are created inside
    this Rails project, as this was already covered in the previous chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s create a new model in Rails called `todos` using the scaffolding command,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s also make this change in the database by using the migrate command,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should get a successful migration message. It's time to start the server
    and check out the Todo application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can now visit `http://localhost:3000/todos` and click on **New Todo**.
    The application should work, and you will get a screenshot, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Placing Bootstrap files in a Rails project](img/7269OS_2_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the installation is complete, we will get a folder called `Rails_Bootstrap_Project`
    with lots of files inside it. If you are a Rails developer, you will definitely
    be tempted to jump directly into it. Let''s keep this project as it is for the
    time being and proceed to download Bootstrap from its official website. The steps
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://getbootstrap.com](http://getbootstrap.com) and click on the **Download
    Bootstrap** button. It will take you to another page with three different options
    available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the first button which simply says **Download Bootstrap**. A zipped package
    will start downloading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the downloading is over, extract all the files. You can see three different
    folders present inside the default Bootstrap package, `css`, `js`, and `fonts`.
    We need to get all these files properly in our Rails project in order to make
    Bootstrap work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Every Bootstrap package comes with a standard set of files. The `css` folder
    contains four different CSS files. The first two CSS files are: `bootstrap.css`
    and `bootstrap.min.css`. Both of these files are exactly the same, except the
    way they are created. Here, `bootstrap.css` is a document version whereas `bootstrap.min.css`
    is a minified version. You will not find any comments or proper indentation in
    the minified version. A minified version is good for using in projects that are
    ready for production, as it is smaller in size.'
  prefs: []
  type: TYPE_NORMAL
- en: The next two files, `bootstrap.theme.css` and `bootstrap.theme.min.css`, are
    theme files from Bootstrap. Bootstrap has created its own theme file to override
    its own default style on various components. They are completely optional. Personally,
    I have never used them. These two theme files are also exactly the same. The first
    one is a documented version while the second is a minified version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving on to the `js` folder of the Bootstrap package, we will find two different
    JavaScript files: `bootstrap.js` and `bootstrap.min.js`. Again, these two files
    are exactly similar in nature. The former is a documented version while the latter
    is a minified version. This is the main Bootstrap JavaScript file. There are many
    components like navigation bar which depend on this file to function properly.
    Bootstrap''s JavaScript components depend on jQuery. We do not get jQuery, out
    of the box, in the Bootstrap''s package. But, it is necessary to include in our
    application. Generally, all the Rails projects include jQuery in them. Hence,
    we don''t have to include it separately.'
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap comes with a set of icons that can be used in our Rails application.
    These icons are called **Glyphicons**. Unlike other icons which are images, these
    icons are fonts. All the icons are present in various font files inside the `fonts`
    folder of the Bootstrap package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have taken a walkthrough of all the files in the Bootstrap package,
    let''s start importing them in our Rails application using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's move the CSS file first. Copy `bootstrap.min.css` from the CSS folder
    and place it in the `stylesheets` folder of the Rails application by navigating
    to `vendor/assets/stylesheets`:![Placing Bootstrap files in a Rails project](img/7269OS_2_3.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, copy `bootstrap.min.js` from the `js` folder and paste it in the `javascripts`
    folder of the Rails application by navigating to `vendor/assets/javascripts`:![Placing
    Bootstrap files in a Rails project](img/7269OS_2_4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the complete `fonts` folder and place it in the `assets` file under `vendor`
    folder:![Placing Bootstrap files in a Rails project](img/7269OS_2_5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have all the Bootstrap files in the `vendors/assets` folder now. It's time
    to link them from the default Rails CSS and JavaScript files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the file `application.css` in the `stylesheets` folder by navigating to
    `app/assets/stylesheets`:![Placing Bootstrap files in a Rails project](img/7269OS_2_6.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Put the following line into the application of `.css` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will include `bootstrap.min.css` from the `vendor/assets/stylesheets` directory.
    Bootstrap has written some CSS properties inside `bootstrap.min.css`, which provides
    the path to the font files. This path won't work here. We need to override it
    inside the `application.css` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Paste the following lines into `application.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are done with linking the Bootstrap's CSS files. Next, we need to link the
    Bootstrap's JavaScript file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `application.js` file from `app/assets/javascripts` directory:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Placing Bootstrap files in a Rails project](img/7269OS_2_7.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Put the following line into the application of the`.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will link the `bootstrap.min.js` file from the `javascripts` folder by
    navigating to `vendor/assets/javascripts`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now it's done! Yes, we have successfully implemented Bootstrap in our Rails
    application. Restart the server and open the Todo application that we have created.
    You will see some minor changes to the application's appearances:![Placing Bootstrap
    files in a Rails project](img/7269OS_2_8.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new screenshot has a bolder and clean font. Bootstrap uses browser reset
    which clears all the default browser styles. Hence, there's no gap between the
    elements and the browser window. This helps to properly define the CSS and also
    assures that your design looks the same in all kinds of browsers.
  prefs: []
  type: TYPE_NORMAL
- en: This was all about injecting Bootstrap's static files directly into a Rails
    project. Let's take a look at some other methods.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap – the Sass way
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bootstrap also supports Sass. It comes as a gemfile that can be directly installed
    in the Rails application. We will first install Bootstrap as a gem and then try
    to understand why it is better this way:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create another project called `Rails_Bootstrap_Sass_Project`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the installation is complete, open `Gemfile` which is present inside the
    home directory of the application folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can see lots of gem dependencies mentioned in this file. We need to add
    another gem dependency which is `bootstrap-sass`. Add the following line in this
    file too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The above command will install Bootstrap 3.1.1, which is the latest version
    at the time of writing this book. You can also specify other versions, as per
    availability.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It''s time to bundle install this project again. Go to the terminal and navigate
    to the `Rails_Bootstrap_Sass_Project` folder in it. Then, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will fetch the `gem bootstrap-sass`, and include it in the project. Let''s
    create a model called `todos` using the scaffolding command, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also complete the database migration using the rake command, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once the migration is done, we will link the Bootstrap's `css` and `js` file
    from Rails' default `css` and `javascript` files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `todos.css.scss` file which is present inside the `stylesheets` folder
    by navigating to the `app/assets/stylesheets` folder. Place the following line
    in it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, open the `application.js` file in the `javascripts` folder by navigating
    to `app/assets/javascripts`. Insert the following line in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are done! Simple, wasn't it?
  prefs: []
  type: TYPE_NORMAL
- en: If you run this project, you can see Bootstrap's fonts and resets have been
    applied to the default application.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap through CDN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Content delivery network** (**CDN**) is a way of hosting popular libraries
    in the cloud and allows developers to directly access these files whenever needed.
    There are some of the popular CDN service providers like Google Hosted Libraries
    ([https://developers.google.com/speed/libraries/devguide](https://developers.google.com/speed/libraries/devguide)),
    cdnjs ([http://cdnjs.com/](http://cdnjs.com/)), CloudFlare ([http://www.cloudflare.com/](http://www.cloudflare.com/)),
    and others.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bootstrap also comes with a CDN support. They have hosted both the CSS and
    JavaScript file in their own cloud servers. Let''s try to use CDN in a Rails project
    this time, using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Rails project called `Rails_Bootstrap_CDN_project`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the project is created, make a new model called todos using scaffolding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Do the database migration using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once all the above steps are successfully completed, go to the newly created
    folder `Rails_Bootstrap_CDN_project`. Go to `app/assets/stylesheets` and open
    the `application.css` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to import Bootstrap''s CSS file from its CDN in this file. Hence, paste
    the following lines in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we have to include Bootstrap's JavaScript file from its CDN into our main
    view. Go to `app/views/layouts` and open the `application.html.erb` file. Paste
    the following line either just above the `</head>` tag or inside the body just
    above the `</body>` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It's done! You have successfully imported all the Bootstrap files into your
    Rails package. Go ahead, run the server and check out the app. It should have
    Bootstrap's styles applied to it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Out of all the methods of importing/installing Bootstrap in a Rails project,
    I would definitely suggest you to go with the Sass way. Developers familiar with
    Sass should definitely go for it.
  prefs: []
  type: TYPE_NORMAL
- en: Sass allows developers to completely customize Bootstrap's default styles and
    behavior. As we will progress with this book, we will see how to customize Bootstrap
    through Sass. Sass brings modularity to the CSS world. It brings the programming
    capability in it. You can use variables, functions, inheritance, and so on using
    Sass.
  prefs: []
  type: TYPE_NORMAL
- en: CDN is another better alternative but is very risky. CDN is generally blocked
    in many secure networks. In such cases, your application will load without any
    Bootstrap files. CDN also reduces the performance of the web app by sending an
    extra request to a different network. Hope you have got a fair idea of what Bootstrap
    is through this chapter. It is an extremely useful framework that enforces rapid
    development by the use of its HTML and CSS components. In the coming chapters,
    we will see how to use some of the popular Bootstrap components in the Rails applications.
    We will see how easy it is to create a highly responsive Rails application using
    Bootstrap.
  prefs: []
  type: TYPE_NORMAL
