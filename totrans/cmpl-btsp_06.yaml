- en: Chapter 6. Extending Bootstrap with JavaScript Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to dive deeper into Bootstrap components by learning
    how to extend the framework using JavaScript plugins. You may remember that back
    in the first chapter we included `bootstrap.min.js` in our template. This file
    contains a number of JavaScript components that come with Bootstrap. In this chapter,
    we''ll go over how to use some of these components, including: Modals, Tooltips,
    Popovers, Collapse, and Carousel. Let''s get right to it by learning how to create
    a Modal in Bootstrap 4.'
  prefs: []
  type: TYPE_NORMAL
- en: Coding a Modal dialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Modals go by a number of different names; you may also know them as dialogs,
    popups, overlays, or alerts. In the case of Bootstrap, this component is referred
    to as a Modal and that is how I''ll be referring to it throughout the book. A
    Modal is made up of two required pieces of code. The first is a button, and here''s
    the basic code required to render it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this is a basic Button component with a few attributes added
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: The first is the `data-toggle` data attribute, which needs to be set to `modal`.
    This tells the browser that this `<button>` is attached to a Modal component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second is the `data-target` attribute, which should be an ID. It doesn't
    really matter what you name this, I've called it `#firstModal`. It's important
    to note this ID name as it will be tied in later. Also make sure that the ID name
    is unique.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you''ve coded this up, it should look like a regular button in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding a Modal dialog](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Coding the Modal dialog
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The second part of the Modal component is the dialog. This is the part that
    will pop up in the browser once you click the button. Let''s take a look at some
    basic code for creating the dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a bigger piece of code and there are a few things going on here that
    I need to explain to you:'
  prefs: []
  type: TYPE_NORMAL
- en: The entire dialog is wrapped in a `<div>` with a required class of `.modal`.
    There's also an optional `.fade` class there, which will fade the dialog in. Note
    the ID on this `<div>` because it's important. The ID value needs to match the
    `data-target` attribute you set on the button. This is how we tell the browser
    to link that button with this dialog. Finally, there are a couple of other attributes
    that are required by Bootstrap including `tabindex`, `role`, and `aria-hidden`.
    Make sure you include those with their corresponding values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the first `<div>` we have a second one with a class of `.modal-dialog`
    on it; make sure you include that.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, the interior of the Modal is split into three parts: header, body, and
    footer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside our `.modal-dialog`, add another `<div>` with a class of `.modal-header`
    on it. Within this section you'll notice another button. This button is the **Close**
    or **X** icon for the Modal; although not required, it's a good idea to include
    this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the button you need to include a header tag, in this case a `<h4>`, with
    a CSS class of `.modal-title` on it. Here you should enter the title for your
    Modal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next section is another `<div>` for our body and it has a class of `.modal-body`
    on it. Within this section you should enter the body copy for your Modal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we have the footer section, which is another `<div>` with a class of
    `.modal-footer` on it. Inside this section you'll find two buttons that you need
    to include. The first is the white button labeled **Close** which when clicked
    will close the Modal. Note that the `<button>` tag has a data attribute called
    `data-dismiss` on it and its value is `modal`. This will close the Modal. The
    second button is a primary button that would be used as a Save button if you were
    hooking in the actual functionality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After coding all that up, go to the browser and click on your button. You should
    then see a Modal that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding the Modal dialog](img/00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, our Modal has popped up over the button. You can read the Modal
    title and body and see the footer buttons as well as the **Close** or **X** button
    in the top-right corner. You may have noticed that you didn't actually have to
    write any JavaScript to make this Modal work. That is the power of the Bootstrap
    framework; all of the JavaScript is already written for you and you can simply
    call the Modal functionality by using the HTML data attributes, which makes things
    much easier. That concludes the lesson on Modals; next let's move on to learning
    how to use Tooltips.
  prefs: []
  type: TYPE_NORMAL
- en: Coding Tooltips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Tooltip is a marker that will appear over a link when you hover over it in
    the browser. They are pretty easy to add with data attributes in Bootstrap, but
    we do need to make some updates to get them working. In Bootstrap 4 they have
    started using a third-party JavaScript library for Tooltips called Tether. Before
    we go any further, head over to the Tether website below and download the library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://github.hubspot.com/tether/](http://github.hubspot.com/tether/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve downloaded the library, unzip it and open the main directory where
    you''ll see a number of files. Navigate to the `/dist/js` directory and find the
    file named `tether.min.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: Now copy `tether.min.js` into the `/js` directory of our blog project. This
    is the only file you need from Tether's directory, so you can keep the rest of
    the files or delete them. Once the file is in our project directory we need to
    update our template.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the project layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have the Tether file in our project directory we need to update
    our `_layout.ejs` template to include it when the page is compiled. From the root
    of our project directory, open up `_layout.ejs` and insert the following line
    of code near the bottom after jQuery. It''s critical that the Tether file is loaded
    after jQuery, but before `bootstrap.min.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and make sure you recompile your project so that this is imported
    into all of your HTML files. Once that's done, you will now be able to use Tooltips
    on any page that is included in our project.
  prefs: []
  type: TYPE_NORMAL
- en: How to use Tooltips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we''ve included the Tether library, we can learn how to actually use
    Tooltips in Bootstrap. Let''s try them out on one of our project files. Open up
    `index.ejs` in your text editor and find a section of code that is just text,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''ve found that section of code, let''s wrap an `<a>` tag around the
    first three words with the following attributes on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the basic markup needed to render a Tooltip. Let''s breakdown what
    is happening here:'
  prefs: []
  type: TYPE_NORMAL
- en: The `data-toggle` attribute is required to tell the browser that this is a Tooltip.
    The value should be set to `tooltip`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `title` attribute is also required and the value will be the text that appears
    in your Tooltip. In this case, I have set it to `This is a tooltip!`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before we can test this out in the browser, we need to add something else to
    our `_layout.ejs` template. Open that file in your text editor and insert the
    following code after the Tether library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In Bootstrap 4, Tooltips need to be initialized before you can use them. Therefore,
    I''m using a little jQuery here to say that all `a` tags should be initialized
    to use the Tooltip method, which will activate all link tags for use with a Tooltip.
    This is a little trick you can use so you don''t have to use an ID to indicate
    every Tooltip you want to initialize. Once you''ve completed this step, save all
    your files, recompile them, and then view your project in the browser; it should
    look like this when you rollover the link anchor text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use Tooltips](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to position Tooltips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, in Bootstrap the position for Tooltips is above the anchor text.
    However, using the `data-placement` attribute will allow you to place the tip
    above, below, left, or right of the anchor text. Let''s take a look at the code
    required to render the different versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, I''ve added the `data-placement` attribute to each link tag.
    The following values will control the position of the Tooltip when you hover over
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Top: `data-placement="top"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bottom: `data-placement="bottom"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Right: `data-placement="right"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left: `data-placement="left"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Tooltips to buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s also quite easy to add a Tooltip to a button by using the same data attributes
    as links. Let''s take a look at how to code a simple button with a Tooltip above
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here you''ll see a basic button component, but with the Tooltip data attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: I've added the `data-toggle` attribute with a value of `tooltip`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can optionally include the `data-placement` attribute; if you leave it out
    it will default to top
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to include the `data-original-title` attribute and the value will be
    the Tooltip message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the layout for buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get Tooltips on buttons working, you need to initialize them the same way
    you did the links in the previous section. Open up `_layout.ejs` again in your
    text editor and include the following line of code. The entire section of JavaScript
    should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Like we did with the link tags, we''ll initialize all button tags to use the
    Tooltip component if called in the HTML template. Let''s take a look at how our
    Tooltip on a button should look in the browser when it''s done correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating the layout for buttons](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Avoiding collisions with our components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now we've only used the Tooltip JavaScript component so our code is solid.
    However, in the next section, we will introduce a different component called Popovers.
    We need to do some clean up of our JavaScript code so that the two don't collide
    with each other and give us unwanted results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this is the case, we should go back to `_layout.ejs` and edit the code
    by providing a specific ID for each Tooltip that you want to use in your project.
    Our script should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that I removed the `a` and `button` selectors and replaced them with IDs
    named `#tooltip-link` and `#tooltip-button`. Now we also need to update our link
    and button code on the index template to include these IDs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, I've included the ID for each element in the preceding code.
    Now we are safe to start introducing new components without any worry of collisions
    occurring in the JavaScript. Let's move on to the component in question; Popovers.
  prefs: []
  type: TYPE_NORMAL
- en: Using Popover components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Popover components are similar to Tooltips but allow for more content to be
    included. Popovers are also revealed on a click action, not a hover action like
    Tooltips. Let''s take a look at the basic code to render a Popover. First, let''s
    make sure we add this Popover to our project, so open up `index.ejs` again and
    find another filler line of code to add this new component. When you do, enter
    the following code into the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there are a few new things we need to go over here:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, you'll notice I've given the link tag this ID; `popover-link`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this case, `data-toggle` is set to `popover`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `title` attribute is required and will be the title for your Popover.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we have a new attribute named `data-content`. The value for this should
    be the copy you want to appear on the Popover.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like we did with Tooltips, we also need to update the JavaScript for this new
    component. Open up `_layout.ejs` again and insert the following line of code after
    the Tooltip JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will initialize a Popover component on the element with the `#popover-link`
    ID on it. Once you''ve completed that, save both files and go to your browser.
    Find the link you created for the Popover and click it. This is what you should
    see in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating the JavaScript](img/00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the Popover component has more to it than the Tooltip. It includes
    a title and content. You should use this component if you need to give more context
    than can be achieved through the use of a regular Tooltip.
  prefs: []
  type: TYPE_NORMAL
- en: Positioning Popover components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Again, like Tooltips, it is possible to control the position of a Popover component.
    This is done in the same way by using the `data-placement` attribute on the link
    tag. Here''s the code for each variation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Since this works in exactly the same way as for Tooltips, I won't bother breaking
    it down any further. Simply include the `data-placement` attribute and give it
    one of the four positioning values to control where the Popover appears when clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Popover to a button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Popover component can also be easily added to a button. Open up the index
    template again and insert the following button code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this markup is very similar to the Tooltip button. Let''s break
    it down again:'
  prefs: []
  type: TYPE_NORMAL
- en: The button tag needs an ID of `popover-button` to be added
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As with the link, set the `data-toggle` attribute to `popover`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include a value for `title` and the `data-content` attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As with the previous examples, don't forget to update the JavaScript!
  prefs: []
  type: TYPE_NORMAL
- en: Adding our Popover button in JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last thing we need to do is update the JavaScript to initialize our new
    Popover button. Open up `_layout.ejs` and insert the following line of code after
    the Popover link JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Once that is complete, save both files and open up the index page in your browser.
    Locate the button you inserted and click it. Your Popover should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding our Popover button in JavaScript](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, you now have a button with a Popover component attached to it.
    This can be useful for calling out something important with a button, and then
    once it has been clicked it reveals a message to your users. I have a couple more
    JavaScript components I would like to review with you; the next one is the Collapse
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Collapse component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I find that the Collapse component''s name is a bit confusing. What it really
    means is a collapsable section that can be shown or hidden on a click action.
    Let''s start by creating a simple collapsable section of text on the `index.ejs`
    template. Open that template and insert the following code wherever you like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The Collapse component is broken into two parts. The first is the trigger to
    show or hide the collapsable content. The second is the actual content you want
    to show or hide. Let''s review it in more detail to show how to code this up:'
  prefs: []
  type: TYPE_NORMAL
- en: The first part is the trigger for the collapsable content, and I have chosen
    to use a link that has some button classes on it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The link requires the `data-toggle` attribute with a value of `collapse` on
    it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `href` for the link needs to be a unique ID name, in this case, `#collapse-link`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we set the `aria-expanded` value to `false` because we want the collapsable
    content to be hidden on page load
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On page load, your new component should just appear like a regular button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Collapse component](img/00111.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Coding the collapsable content container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that the trigger for the Collapse is set up, we need to code the content
    container. After the link tag, insert the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s how to assemble this section of code:'
  prefs: []
  type: TYPE_NORMAL
- en: We start with a `<div>` that needs to have a CSS class of `collapse` on it.
    You also need to include an ID here. This should match the ID you set as the `href`
    in the trigger link; in this case, `#collapse-link`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within the `<div>` you can include any content you want. This content will be
    the hidden, collapsable content that you will show or hide when the trigger is
    clicked. To make the example really obvious, I've wrapped a warning Alert around
    some text to make it stand out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After you''ve coded this up and saved your file, head to the browser, find
    the button, and click it. You should see the following in your window once you
    click the trigger link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding the collapsable content container](img/00112.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is only a simple example of how you can code up the Collapse component.
    Using additional code and setup, you can use this component to create an Accordion.
  prefs: []
  type: TYPE_NORMAL
- en: Coding an Accordion with the Collapse component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, I taught you a pretty simple way to use the Collapse
    component. The same component can be used to create a more complex version, which
    is the Accordion. Let''s take a look at the basic code to create an Accordion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that might look like a ton of code, but it''s actually a repeating pattern
    that is pretty easy to put together once you understand it. Let me breakdown everything
    that is happening here:'
  prefs: []
  type: TYPE_NORMAL
- en: The entire component is wrapped in a `<div>` with an ID on it. In this case,
    I'm using `#accordion`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each section of the Accordion is a `<div>` with a class of `.panel` on it. I've
    also included the `.panel-default` class to just do the most basic styling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each panel is made up of a heading and a body or section. Let's cover the header
    first. Create another `<div>` with a class of `.panel-heading` on it. Also include
    the `role` attribute with a value of `tab` and you need to give your header a
    unique ID, in this case, `#headerOne`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the header include a header tag, in this case, a `<h4>`, with a class
    of `.panel-title`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, nested inside the header tag, code a link that has a few attributes
    that you need to include:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.collapsed` is required for the Accordion component.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-toggle` is also required.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-parent` should be the same ID that you set on the first `<div>` for the
    accordion.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`href` will be a link to the body of the section that will be collapsable.
    In this case, it is called `sectionOne`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aria-expanded` should be set to `true` because we want this section to be
    open on page load. The other links should be set to `false`, unless you want them
    to be open on page load.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aria-controls` should also match the ID name of the corresponding section.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that the header has been broken down, let's cover the body of the panel.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After the header, insert another `<div>` with an ID of `#sectionOne` on it.
    It should also have a class of `.panel-collapse` and `.collapse` on it. Include
    the attribute role with a value of `tabpanel` on it. Finally, include `aria-labelled`
    by attribute with the value of `sectionOne`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside this `<div>` include the content of the section that you want to display.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the next sections, you need to repeat what you did for the first panel.
    Simply copy and paste and then you need to change a few things:'
  prefs: []
  type: TYPE_NORMAL
- en: Change `headerOne` to `headerTwo`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change `sectionOne` to `sectionTwo`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change up the header title and content of the body for the second section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Do the same for the third section, and then the Accordion component is done.
    Once you''re done, this is what it should look like in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding an Accordion with the Collapse component](img/00113.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That completes the Collapse and Accordion components. We have one more to go,
    which is the Carousel component.
  prefs: []
  type: TYPE_NORMAL
- en: Coding a Bootstrap Carousel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Carousel is a popular component used on many different types of websites. We''re
    going to build a Carousel in the Blog Post template of our project. Let''s start
    by opening up `blog-post.ejs` from the project directory in your text editor.
    After the page title block of code, insert the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a larger component like the Accordion so let''s go through it section
    by section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Carousel component starts with a `<div>` and it needs a unique ID. In this
    case, `#carouselOne`. Also include the following classes: `.carousel` and `.slide`.
    Finally, you need to add the attribute `data-ride` with a value of `carousel`.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Carousel bullet navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing we need to add to the Carousel is the bullet or indicator navigation.
    It''s made up of an ordered list. Here''s the code, then we''ll break it down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s how the Carousel navigation works:'
  prefs: []
  type: TYPE_NORMAL
- en: On the `<ol>` tag allocate a class of `.carousel-indicators`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each `<li>` in the list needs to have a few things:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `data-target` needs to be the same ID that you gave to your root Carousel
    `<div>`, in this case, `#carouselOne`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Include the `data-slide-to` attribute and the first value should be 0\. Increase
    it by one for each list item after the first.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Including Carousel slides
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next step is to include the actual Carousel slides. I''m not going to include
    images in the code, that will be up to you to insert, but don''t worry, I''ll
    show you where to put them. Here''s the code for the section that wraps the slides:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Give that `<div>` a class of `.carousel-inner` and add the `role` attribute
    with a value of `listbox`. Inside this `<div>` you''re going to add another section
    for each image slide in the Carousel. Here''s the code for one slide in the Carousel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s breakdown what''s happening here in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, insert a `<div>` tag with the classes `.carousel-item` and `.active`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note you should only include the `.active` class on the first slide. This is
    where the Carousel will start on page load.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `<div>`, insert an `img` tag with the following attributes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert the `src` attribute and the value should be the path to the image file
    for the slide
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, include an `alt` attribute with a value for the image
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Carousel arrow navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last thing we need to add to the Carousel is the arrow navigation. Here''s
    the code for rendering the arrows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let me explain how the arrow navigation works:'
  prefs: []
  type: TYPE_NORMAL
- en: The left and right arrow navigation is based on `href` tags.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first will be the left arrow; code a link with the following classes on
    it: `.left` and `.carousel-control`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `href` for the link should be set to the main ID for the Carousel, in this
    case, `#carouselOne`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the `role` attribute to `button`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, set the `data-slide` attribute to `prev`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within the link, add a `<span>` with a class of `.icon-prev` on it. This will
    render the arrow icon. Include the `aria-hidden` attribute and set it to `true`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, you can include another optional `<span>` for accessibility reasons.
    If you want to include it, give it a class of `.sr-only`. Within the `<span>`
    include the text `Previous`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now let''s go over the differences for the right arrow:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code another link tag and switch the `.left` class to `.right`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the `data-slide` attribute value to `next`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the first `<span>` tag change the class value to `.icon-next`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you included the accessibility `<span>` tag change the text to `Next`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That completes the setup of the Carousel component. Fire up the project server
    and view the Blog Post page in the browser, and it should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Carousel arrow navigation](img/00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'That concludes the chapter on JavaScript components in Bootstrap. In this chapter,
    I taught you how to code up the following components: Modals, Tooltips, Popovers,
    Collapse, Accordion, and the Carousel. In the next chapter, I''ll teach you how
    to use **Sass** in Bootstrap.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have covered all components in Bootstrap that rely on JavaScript.
    This included: Modals, Tooltips, Popovers, Collapse, and Carousel.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how in Bootstrap 4 the framework has moved
    from Less to Sass as its CSS preprocessor. We will cover the basics of using Sass
    in a Bootstrap theme. I'll also explain how you can customize or use existing
    variables, or write your own.
  prefs: []
  type: TYPE_NORMAL
- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which among the following can also be called as modals?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dialogs
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Popups
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Overlays
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following data attributes needs to be set to modal?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`data-target`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`data-toggle`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`data-type`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`data-value`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following values is assigned to `data-target` attribute of a
    button for displaying a modal?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modal ID
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Modal type
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Modal class
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Modal name
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following is a required class for modal?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.modal-header`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.modal-footer`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.modal-body`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.modal`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following data attributes is used to position a Tooltip?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`data-target`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`data-placement`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`data-value`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`data-toggle`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
