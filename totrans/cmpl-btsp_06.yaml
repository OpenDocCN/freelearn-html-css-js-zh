- en: Chapter 6. Extending Bootstrap with JavaScript Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 使用JavaScript插件扩展Bootstrap
- en: 'In this chapter, we''re going to dive deeper into Bootstrap components by learning
    how to extend the framework using JavaScript plugins. You may remember that back
    in the first chapter we included `bootstrap.min.js` in our template. This file
    contains a number of JavaScript components that come with Bootstrap. In this chapter,
    we''ll go over how to use some of these components, including: Modals, Tooltips,
    Popovers, Collapse, and Carousel. Let''s get right to it by learning how to create
    a Modal in Bootstrap 4.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过学习如何使用JavaScript插件扩展框架来更深入地了解Bootstrap组件。您可能还记得，在第一章中，我们在模板中包含了`bootstrap.min.js`。这个文件包含了一些与Bootstrap一起提供的JavaScript组件。在本章中，我们将介绍如何使用其中的一些组件，包括：模态框、工具提示、弹出框、折叠和轮播。让我们直接学习如何在Bootstrap
    4中创建一个模态框。
- en: Coding a Modal dialog
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写模态对话框
- en: 'Modals go by a number of different names; you may also know them as dialogs,
    popups, overlays, or alerts. In the case of Bootstrap, this component is referred
    to as a Modal and that is how I''ll be referring to it throughout the book. A
    Modal is made up of two required pieces of code. The first is a button, and here''s
    the basic code required to render it:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 模态框有多个不同的名称；您可能也知道它们是对话框、弹出窗口、覆盖层或警报。在Bootstrap的情况下，这个组件被称为模态框，这也是我在整本书中会使用的称呼。一个模态框由两段必需的代码组成。第一段是按钮，以下是渲染它的基本代码：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see, this is a basic Button component with a few attributes added
    to it:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这是一个基本的按钮组件，其中添加了一些属性：
- en: The first is the `data-toggle` data attribute, which needs to be set to `modal`.
    This tells the browser that this `<button>` is attached to a Modal component.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一部分是`data-toggle`数据属性，它需要设置为`modal`。这告诉浏览器这个`<button>`与一个模态框组件相关联。
- en: The second is the `data-target` attribute, which should be an ID. It doesn't
    really matter what you name this, I've called it `#firstModal`. It's important
    to note this ID name as it will be tied in later. Also make sure that the ID name
    is unique.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个是`data-target`属性，它应该是一个ID。这实际上并不重要，我将其命名为`#firstModal`。重要的是要注意这个ID名称，因为它将在稍后与之关联。同时，请确保ID名称是唯一的。
- en: 'Once you''ve coded this up, it should look like a regular button in the browser:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编写好这段代码，它应该看起来像浏览器中的一个普通按钮：
- en: '![Coding a Modal dialog](img/00105.jpeg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![编写模态对话框](img/00105.jpeg)'
- en: Coding the Modal dialog
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写模态对话框
- en: 'The second part of the Modal component is the dialog. This is the part that
    will pop up in the browser once you click the button. Let''s take a look at some
    basic code for creating the dialog:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 模态框组件的第二部分是对话框。这是当您点击按钮时在浏览器中弹出的部分。让我们看看创建对话框的一些基本代码：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is a bigger piece of code and there are a few things going on here that
    I need to explain to you:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一段更大的代码，这里有几个需要向您解释的地方：
- en: The entire dialog is wrapped in a `<div>` with a required class of `.modal`.
    There's also an optional `.fade` class there, which will fade the dialog in. Note
    the ID on this `<div>` because it's important. The ID value needs to match the
    `data-target` attribute you set on the button. This is how we tell the browser
    to link that button with this dialog. Finally, there are a couple of other attributes
    that are required by Bootstrap including `tabindex`, `role`, and `aria-hidden`.
    Make sure you include those with their corresponding values.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个对话框都被一个必需的`.modal`类的`<div>`包裹。还有一个可选的`.fade`类，它将对对话框进行淡入。注意这个`<div>`上的ID，因为它很重要。ID值需要与按钮上设置的`data-target`属性匹配。这就是我们告诉浏览器将这个按钮与这个对话框关联起来的方式。最后，还有一些Bootstrap需要的其他属性，包括`tabindex`、`role`和`aria-hidden`。确保您包含这些属性及其相应的值。
- en: Inside the first `<div>` we have a second one with a class of `.modal-dialog`
    on it; make sure you include that.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一个`<div>`内部，我们有一个带有`.modal-dialog`类的第二个`<div>`；确保您包含它。
- en: 'Next, the interior of the Modal is split into three parts: header, body, and
    footer.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，模态框的内部被分为三个部分：头部、主体和底部。
- en: Inside our `.modal-dialog`, add another `<div>` with a class of `.modal-header`
    on it. Within this section you'll notice another button. This button is the **Close**
    or **X** icon for the Modal; although not required, it's a good idea to include
    this.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的`.modal-dialog`内部，添加另一个带有`.modal-header`类的`<div>`。在这个部分中，您会注意到另一个按钮。这个按钮是模态框的**关闭**或**X**图标；虽然不是必需的，但包含它是好主意。
- en: After the button you need to include a header tag, in this case a `<h4>`, with
    a CSS class of `.modal-title` on it. Here you should enter the title for your
    Modal.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在按钮之后，你需要包含一个标题标签，在这个例子中是一个带有`.modal-title`CSS类的`<h4>`。在这里，你应该输入你的模态框标题。
- en: The next section is another `<div>` for our body and it has a class of `.modal-body`
    on it. Within this section you should enter the body copy for your Modal.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个部分是另一个用于正文的`<div>`，它有一个`.modal-body`类。在这个部分中，你应该输入你的模态框正文内容。
- en: Finally, we have the footer section, which is another `<div>` with a class of
    `.modal-footer` on it. Inside this section you'll find two buttons that you need
    to include. The first is the white button labeled **Close** which when clicked
    will close the Modal. Note that the `<button>` tag has a data attribute called
    `data-dismiss` on it and its value is `modal`. This will close the Modal. The
    second button is a primary button that would be used as a Save button if you were
    hooking in the actual functionality.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们有页脚部分，它是一个带有`.modal-footer`类的另一个`<div>`。在这个部分中，你会找到两个需要包含的按钮。第一个是标有**关闭**的白色按钮，点击它将关闭模态框。请注意，`<button>`标签上有一个名为`data-dismiss`的数据属性，其值为`modal`。这将关闭模态框。第二个按钮是一个主要按钮，如果你要连接实际的功能，它将用作保存按钮。
- en: 'After coding all that up, go to the browser and click on your button. You should
    then see a Modal that looks like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写完所有代码后，转到浏览器并点击你的按钮。你应该会看到一个看起来像这样的模态框：
- en: '![Coding the Modal dialog](img/00106.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![编码模态对话框](img/00106.jpeg)'
- en: As you can see, our Modal has popped up over the button. You can read the Modal
    title and body and see the footer buttons as well as the **Close** or **X** button
    in the top-right corner. You may have noticed that you didn't actually have to
    write any JavaScript to make this Modal work. That is the power of the Bootstrap
    framework; all of the JavaScript is already written for you and you can simply
    call the Modal functionality by using the HTML data attributes, which makes things
    much easier. That concludes the lesson on Modals; next let's move on to learning
    how to use Tooltips.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们的模态框已经弹出了按钮上方。你可以阅读模态框的标题和正文，并查看页脚按钮以及右上角的**关闭**或**X**按钮。你可能已经注意到，实际上你不必编写任何JavaScript代码就能使这个模态框工作。这就是Bootstrap框架的力量；所有的JavaScript代码都已经为你准备好了，你只需通过使用HTML数据属性来调用模态框功能，这使得事情变得容易得多。这就结束了关于模态框的课程；接下来，让我们继续学习如何使用工具提示。
- en: Coding Tooltips
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编码工具提示
- en: 'A Tooltip is a marker that will appear over a link when you hover over it in
    the browser. They are pretty easy to add with data attributes in Bootstrap, but
    we do need to make some updates to get them working. In Bootstrap 4 they have
    started using a third-party JavaScript library for Tooltips called Tether. Before
    we go any further, head over to the Tether website below and download the library:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 工具提示（Tooltip）是一个标记，当你在浏览器中悬停在链接上时，它将出现在链接上方。在Bootstrap中，通过使用数据属性添加工具提示非常简单，但我们确实需要对其进行一些更新才能使其正常工作。在Bootstrap
    4中，他们开始使用一个名为Tether的第三方JavaScript库来实现工具提示。在我们继续之前，请访问下面的Tether网站并下载库：
- en: '[http://github.hubspot.com/tether/](http://github.hubspot.com/tether/)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://github.hubspot.com/tether/](http://github.hubspot.com/tether/)'
- en: 'Once you''ve downloaded the library, unzip it and open the main directory where
    you''ll see a number of files. Navigate to the `/dist/js` directory and find the
    file named `tether.min.js`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下载库后，解压它并打开主目录，在那里你会看到许多文件。导航到`/dist/js`目录，并找到名为`tether.min.js`的文件：
- en: Now copy `tether.min.js` into the `/js` directory of our blog project. This
    is the only file you need from Tether's directory, so you can keep the rest of
    the files or delete them. Once the file is in our project directory we need to
    update our template.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将`tether.min.js`复制到我们的博客项目的`/js`目录中。这是你从Tether目录中需要的唯一文件，因此你可以保留其余的文件或删除它们。一旦文件在我们的项目目录中，我们需要更新我们的模板。
- en: Updating the project layout
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新项目布局
- en: 'Now that we have the Tether file in our project directory we need to update
    our `_layout.ejs` template to include it when the page is compiled. From the root
    of our project directory, open up `_layout.ejs` and insert the following line
    of code near the bottom after jQuery. It''s critical that the Tether file is loaded
    after jQuery, but before `bootstrap.min.js`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将Tether文件放入我们的项目目录中，我们需要更新我们的`_layout.ejs`模板，以便在页面编译时包含它。从我们的项目目录的根目录，打开`_layout.ejs`并在jQuery附近插入以下代码行。确保Tether文件在jQuery之后、`bootstrap.min.js`之前加载：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save the file and make sure you recompile your project so that this is imported
    into all of your HTML files. Once that's done, you will now be able to use Tooltips
    on any page that is included in our project.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并确保你重新编译你的项目，以便将此导入到所有 HTML 文件中。完成此操作后，你现在将能够在包含在我们的项目中的任何页面上使用 Tooltips。
- en: How to use Tooltips
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用 Tooltips
- en: 'Now that we''ve included the Tether library, we can learn how to actually use
    Tooltips in Bootstrap. Let''s try them out on one of our project files. Open up
    `index.ejs` in your text editor and find a section of code that is just text,
    like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经包含了 Tether 库，我们可以学习如何在 Bootstrap 中实际使用 Tooltips。让我们在我们的项目文件之一上尝试它们。在你的文本编辑器中打开
    `index.ejs` 并找到一段纯文本代码，如下所示：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once you''ve found that section of code, let''s wrap an `<a>` tag around the
    first three words with the following attributes on it:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到这段代码，让我们用以下属性将 `<a>` 标签包裹在前面三个词周围：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is the basic markup needed to render a Tooltip. Let''s breakdown what
    is happening here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染 Tooltips 所需的基本标记。让我们分析一下这里发生了什么：
- en: The `data-toggle` attribute is required to tell the browser that this is a Tooltip.
    The value should be set to `tooltip`.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-toggle` 属性是必需的，用于告诉浏览器这是一个 Tooltips。其值应设置为 `tooltip`。'
- en: The `title` attribute is also required and the value will be the text that appears
    in your Tooltip. In this case, I have set it to `This is a tooltip!`.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title` 属性也是必需的，其值将是 Tooltips 中显示的文本。在这种情况下，我将其设置为 `This is a tooltip!`。'
- en: 'Before we can test this out in the browser, we need to add something else to
    our `_layout.ejs` template. Open that file in your text editor and insert the
    following code after the Tether library:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以在浏览器中测试之前，我们需要在我们的 `_layout.ejs` 模板中添加一些其他内容。在你的文本编辑器中打开该文件，并在 Tether 库之后插入以下代码：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In Bootstrap 4, Tooltips need to be initialized before you can use them. Therefore,
    I''m using a little jQuery here to say that all `a` tags should be initialized
    to use the Tooltip method, which will activate all link tags for use with a Tooltip.
    This is a little trick you can use so you don''t have to use an ID to indicate
    every Tooltip you want to initialize. Once you''ve completed this step, save all
    your files, recompile them, and then view your project in the browser; it should
    look like this when you rollover the link anchor text:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Bootstrap 4 中，在使用 Tooltips 之前需要先对其进行初始化。因此，我在这里使用了一点点 jQuery 来说明所有 `a` 标签都应该初始化以使用
    Tooltips 方法，这将激活所有链接标签以便与 Tooltips 一起使用。这是一个你可以使用的技巧，这样你就不必为每个想要初始化的 Tooltips
    使用 ID 来标识了。完成这一步后，保存所有文件，重新编译它们，然后在浏览器中查看你的项目；当你悬停在链接锚文本上时，它应该看起来像这样：
- en: '![How to use Tooltips](img/00107.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![如何使用 Tooltips](img/00107.jpeg)'
- en: How to position Tooltips
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何定位 Tooltips
- en: 'By default, in Bootstrap the position for Tooltips is above the anchor text.
    However, using the `data-placement` attribute will allow you to place the tip
    above, below, left, or right of the anchor text. Let''s take a look at the code
    required to render the different versions:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在 Bootstrap 中，ToolTips 的位置在锚文本上方。但是，使用 `data-placement` 属性将允许你将提示放置在锚文本的上方、下方、左侧或右侧。让我们看看渲染不同版本所需的代码：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see, I''ve added the `data-placement` attribute to each link tag.
    The following values will control the position of the Tooltip when you hover over
    it:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我已经将 `data-placement` 属性添加到每个链接标签中。以下值将控制当你悬停时 Tooltips 的位置：
- en: 'Top: `data-placement="top"`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部：`data-placement="top"`
- en: 'Bottom: `data-placement="bottom"`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底部：`data-placement="bottom"`
- en: 'Right: `data-placement="right"`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右侧：`data-placement="right"`
- en: 'Left: `data-placement="left"`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左侧：`data-placement="left"`
- en: Adding Tooltips to buttons
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Tooltips 添加到按钮上
- en: 'It''s also quite easy to add a Tooltip to a button by using the same data attributes
    as links. Let''s take a look at how to code a simple button with a Tooltip above
    it:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用与链接相同的数据属性，也很容易将 Tooltips 添加到按钮上。让我们看看如何编写一个带有上方 Tooltips 的简单按钮代码：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here you''ll see a basic button component, but with the Tooltip data attributes:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你会看到一个基本的按钮组件，但它带有 Tooltips 数据属性：
- en: I've added the `data-toggle` attribute with a value of `tooltip`
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我添加了 `data-toggle` 属性，其值为 `tooltip`
- en: You can optionally include the `data-placement` attribute; if you leave it out
    it will default to top
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以可选地包含 `data-placement` 属性；如果你省略它，它将默认为顶部
- en: You need to include the `data-original-title` attribute and the value will be
    the Tooltip message
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要包含 `data-original-title` 属性，其值将是 Tooltips 消息
- en: Updating the layout for buttons
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新按钮布局
- en: 'To get Tooltips on buttons working, you need to initialize them the same way
    you did the links in the previous section. Open up `_layout.ejs` again in your
    text editor and include the following line of code. The entire section of JavaScript
    should now look like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要使按钮上的工具提示工作，你需要以与上一节中链接相同的方式初始化它们。再次在文本编辑器中打开 `_layout.ejs` 并包含以下代码行。现在整个JavaScript部分应该看起来像这样：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Like we did with the link tags, we''ll initialize all button tags to use the
    Tooltip component if called in the HTML template. Let''s take a look at how our
    Tooltip on a button should look in the browser when it''s done correctly:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们对链接标签所做的那样，我们将初始化所有按钮标签以使用工具提示组件，如果它们在HTML模板中被调用。让我们看看当它正确完成时，按钮上的工具提示在浏览器中应该看起来什么样：
- en: '![Updating the layout for buttons](img/00108.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![更新按钮布局](img/00108.jpeg)'
- en: Avoiding collisions with our components
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免与我们的组件发生冲突
- en: Until now we've only used the Tooltip JavaScript component so our code is solid.
    However, in the next section, we will introduce a different component called Popovers.
    We need to do some clean up of our JavaScript code so that the two don't collide
    with each other and give us unwanted results.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只使用了工具提示JavaScript组件，所以我们的代码是稳定的。然而，在下一节中，我们将介绍一个名为弹出框（Popovers）的不同组件。我们需要清理我们的JavaScript代码，以确保这两个组件不会相互冲突并产生不期望的结果。
- en: 'Since this is the case, we should go back to `_layout.ejs` and edit the code
    by providing a specific ID for each Tooltip that you want to use in your project.
    Our script should now look like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这种情况，我们应该回到 `_layout.ejs` 并通过为项目中要使用的每个工具提示提供特定的ID来编辑代码。我们的脚本现在应该看起来像这样：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that I removed the `a` and `button` selectors and replaced them with IDs
    named `#tooltip-link` and `#tooltip-button`. Now we also need to update our link
    and button code on the index template to include these IDs.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我已经移除了 `a` 和 `button` 选择器，并用名为 `#tooltip-link` 和 `#tooltip-button` 的ID替换了它们。现在我们也需要更新索引模板上的链接和按钮代码，以包含这些ID。
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, I've included the ID for each element in the preceding code.
    Now we are safe to start introducing new components without any worry of collisions
    occurring in the JavaScript. Let's move on to the component in question; Popovers.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我在前面的代码中为每个元素都包含了ID。现在我们可以放心地引入新的组件，无需担心JavaScript中会发生冲突。让我们继续讨论下一个组件；弹出框（Popovers）。
- en: Using Popover components
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用弹出框组件
- en: 'Popover components are similar to Tooltips but allow for more content to be
    included. Popovers are also revealed on a click action, not a hover action like
    Tooltips. Let''s take a look at the basic code to render a Popover. First, let''s
    make sure we add this Popover to our project, so open up `index.ejs` again and
    find another filler line of code to add this new component. When you do, enter
    the following code into the template:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出框组件与工具提示（Tooltips）类似，但允许包含更多内容。弹出框也是通过点击动作来显示的，而不是像工具提示那样通过悬停动作。让我们看看渲染弹出框的基本代码。首先，让我们确保将这个弹出框添加到我们的项目中，所以再次打开
    `index.ejs` 并找到另一行填充代码来添加这个新组件。当你这样做时，将以下代码输入到模板中：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As you can see, there are a few new things we need to go over here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，这里有一些新内容需要我们讨论：
- en: First of all, you'll notice I've given the link tag this ID; `popover-link`.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，你会注意到我给链接标签分配了这个ID； `popover-link`。
- en: In this case, `data-toggle` is set to `popover`.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这种情况下，`data-toggle` 被设置为 `popover`。
- en: The `title` attribute is required and will be the title for your Popover.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title` 属性是必需的，它将是你的弹出框的标题。'
- en: Finally, we have a new attribute named `data-content`. The value for this should
    be the copy you want to appear on the Popover.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们有一个新的属性名为 `data-content`。这个属性的值应该是你希望在弹出框上显示的文本。
- en: Updating the JavaScript
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新JavaScript
- en: 'Like we did with Tooltips, we also need to update the JavaScript for this new
    component. Open up `_layout.ejs` again and insert the following line of code after
    the Tooltip JavaScript:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们对工具提示所做的那样，我们还需要更新这个新组件的JavaScript。再次打开 `_layout.ejs` 并在工具提示JavaScript之后插入以下代码行：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This code will initialize a Popover component on the element with the `#popover-link`
    ID on it. Once you''ve completed that, save both files and go to your browser.
    Find the link you created for the Popover and click it. This is what you should
    see in the browser:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将在具有 `#popover-link` ID的元素上初始化一个弹出框组件。一旦完成，保存两个文件，然后转到你的浏览器。找到你为弹出框创建的链接并点击它。这是你在浏览器中应该看到的：
- en: '![Updating the JavaScript](img/00109.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![更新JavaScript](img/00109.jpeg)'
- en: As you can see, the Popover component has more to it than the Tooltip. It includes
    a title and content. You should use this component if you need to give more context
    than can be achieved through the use of a regular Tooltip.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Popover 组件比 Tooltip 更丰富。它包括标题和内容。如果您需要提供比常规 Tooltip 更多的上下文，应使用此组件。
- en: Positioning Popover components
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定位 Popover 组件
- en: 'Again, like Tooltips, it is possible to control the position of a Popover component.
    This is done in the same way by using the `data-placement` attribute on the link
    tag. Here''s the code for each variation:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，像 Tooltips 一样，可以控制 Popover 组件的位置。这是通过在链接标签上使用 `data-placement` 属性以相同的方式完成的。以下是每个变体的代码：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Since this works in exactly the same way as for Tooltips, I won't bother breaking
    it down any further. Simply include the `data-placement` attribute and give it
    one of the four positioning values to control where the Popover appears when clicked.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这与 Tooltips 的工作方式完全相同，我不会进一步分解。只需包含 `data-placement` 属性，并给它一个四个定位值之一，以控制点击时
    Popover 出现的位置。
- en: Adding a Popover to a button
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Popover 添加到按钮
- en: 'A Popover component can also be easily added to a button. Open up the index
    template again and insert the following button code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Popover 组件也可以轻松地添加到按钮中。再次打开 index 模板，并插入以下按钮代码：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As you can see, this markup is very similar to the Tooltip button. Let''s break
    it down again:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这个标记与 Tooltip 按钮非常相似。让我们再次分解：
- en: The button tag needs an ID of `popover-button` to be added
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮标签需要添加一个 ID 为 `popover-button`
- en: As with the link, set the `data-toggle` attribute to `popover`
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与链接一样，将 `data-toggle` 属性设置为 `popover`
- en: Include a value for `title` and the `data-content` attribute
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含 `title` 和 `data-content` 属性的值
- en: As with the previous examples, don't forget to update the JavaScript!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的示例一样，别忘了更新 JavaScript！
- en: Adding our Popover button in JavaScript
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 JavaScript 中添加我们的 Popover 按钮
- en: 'The last thing we need to do is update the JavaScript to initialize our new
    Popover button. Open up `_layout.ejs` and insert the following line of code after
    the Popover link JavaScript:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后需要做的是更新 JavaScript 以初始化我们新的 Popover 按钮。打开 `_layout.ejs` 并在 Popover 链接 JavaScript
    之后插入以下代码行：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once that is complete, save both files and open up the index page in your browser.
    Locate the button you inserted and click it. Your Popover should look like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，保存两个文件，并在浏览器中打开 index 页面。定位您插入的按钮并点击它。您的 Popover 应该看起来像这样：
- en: '![Adding our Popover button in JavaScript](img/00110.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![在 JavaScript 中添加我们的 Popover 按钮](img/00110.jpeg)'
- en: As you can see, you now have a button with a Popover component attached to it.
    This can be useful for calling out something important with a button, and then
    once it has been clicked it reveals a message to your users. I have a couple more
    JavaScript components I would like to review with you; the next one is the Collapse
    component.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您现在有一个按钮，上面附加了 Popover 组件。这可以用于通过按钮突出显示某些重要内容，一旦点击，就会向用户显示一条消息。我还有一些 JavaScript
    组件想和您一起回顾；下一个是 Collapse 组件。
- en: Using the Collapse component
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Collapse 组件
- en: 'I find that the Collapse component''s name is a bit confusing. What it really
    means is a collapsable section that can be shown or hidden on a click action.
    Let''s start by creating a simple collapsable section of text on the `index.ejs`
    template. Open that template and insert the following code wherever you like:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得 Collapse 组件的名称有点令人困惑。它实际上意味着一个可折叠的部分，可以通过点击操作显示或隐藏。让我们首先在 `index.ejs` 模板上创建一个简单的可折叠文本部分。打开该模板，并将以下代码插入您喜欢的任何位置：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The Collapse component is broken into two parts. The first is the trigger to
    show or hide the collapsable content. The second is the actual content you want
    to show or hide. Let''s review it in more detail to show how to code this up:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Collapse 组件分为两部分。第一部分是显示或隐藏可折叠内容的触发器。第二部分是您想要显示或隐藏的实际内容。让我们更详细地回顾一下，以展示如何编写代码：
- en: The first part is the trigger for the collapsable content, and I have chosen
    to use a link that has some button classes on it
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一部分是可折叠内容的触发器，我选择使用带有一些按钮类的链接
- en: The link requires the `data-toggle` attribute with a value of `collapse` on
    it
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接需要带有值为 `collapse` 的 `data-toggle` 属性
- en: The `href` for the link needs to be a unique ID name, in this case, `#collapse-link`
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接的 `href` 需要一个唯一的 ID 名称，在这种情况下，`#collapse-link`
- en: Finally, we set the `aria-expanded` value to `false` because we want the collapsable
    content to be hidden on page load
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将 `aria-expanded` 的值设置为 `false`，因为我们希望在页面加载时隐藏可折叠内容
- en: 'On page load, your new component should just appear like a regular button:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 页面加载时，你的新组件应该就像一个普通的按钮一样出现：
- en: '![Using the Collapse component](img/00111.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![使用Collapse组件](img/00111.jpeg)'
- en: Coding the collapsable content container
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写可折叠内容容器
- en: 'Now that the trigger for the Collapse is set up, we need to code the content
    container. After the link tag, insert the following code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Collapse的触发器已经设置好了，我们需要编写内容容器。在链接标签之后，插入以下代码：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here''s how to assemble this section of code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何组装这段代码的：
- en: We start with a `<div>` that needs to have a CSS class of `collapse` on it.
    You also need to include an ID here. This should match the ID you set as the `href`
    in the trigger link; in this case, `#collapse-link`.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们从一个需要具有`collapse`CSS类的`<div>`开始。你还需要在这里包含一个ID。这个ID应该与你在触发链接中设置的`href`相匹配；在这个例子中，是`#collapse-link`。
- en: Within the `<div>` you can include any content you want. This content will be
    the hidden, collapsable content that you will show or hide when the trigger is
    clicked. To make the example really obvious, I've wrapped a warning Alert around
    some text to make it stand out.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`<div>`内部，你可以包含任何你想要的内容。这些内容将是隐藏的可折叠内容，当点击触发器时，你可以显示或隐藏这些内容。为了使示例更加明显，我在一些文本周围包裹了一个警告Alert，使其突出。
- en: 'After you''ve coded this up and saved your file, head to the browser, find
    the button, and click it. You should see the following in your window once you
    click the trigger link:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在你编写完代码并保存文件后，前往浏览器，找到按钮，然后点击它。一旦你点击触发链接，你应该在你的窗口中看到以下内容：
- en: '![Coding the collapsable content container](img/00112.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![编写可折叠内容容器](img/00112.jpeg)'
- en: This is only a simple example of how you can code up the Collapse component.
    Using additional code and setup, you can use this component to create an Accordion.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个简单的例子，说明了如何编写Collapse组件的代码。通过使用额外的代码和设置，你可以使用这个组件来创建可折叠面板。
- en: Coding an Accordion with the Collapse component
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Collapse组件编写可折叠面板
- en: 'In the previous section, I taught you a pretty simple way to use the Collapse
    component. The same component can be used to create a more complex version, which
    is the Accordion. Let''s take a look at the basic code to create an Accordion:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我教了你一个相当简单的方法来使用Collapse组件。同一个组件也可以用来创建一个更复杂的版本，即可折叠面板。让我们看看创建可折叠面板的基本代码：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that might look like a ton of code, but it''s actually a repeating pattern
    that is pretty easy to put together once you understand it. Let me breakdown everything
    that is happening here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这看起来可能像很多代码，但实际上这是一个重复的模式，一旦你理解了它，就很容易组合起来。让我来分解这里发生的一切：
- en: The entire component is wrapped in a `<div>` with an ID on it. In this case,
    I'm using `#accordion`.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个组件被一个带有ID的`<div>`包裹。在这个例子中，我使用的是`#accordion`。
- en: Each section of the Accordion is a `<div>` with a class of `.panel` on it. I've
    also included the `.panel-default` class to just do the most basic styling.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可折叠面板的每个部分都是一个带有`.panel`类的`<div>`。我还包括了`.panel-default`类，以进行最基本的样式设置。
- en: Each panel is made up of a heading and a body or section. Let's cover the header
    first. Create another `<div>` with a class of `.panel-heading` on it. Also include
    the `role` attribute with a value of `tab` and you need to give your header a
    unique ID, in this case, `#headerOne`.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个面板由一个标题和一个主体或部分组成。让我们先谈谈标题。创建另一个带有`.panel-heading`类的`<div>`。还要包括一个值为`tab`的`role`属性，并且你需要给你的标题一个唯一的ID，在这个例子中，是`#headerOne`。
- en: Inside the header include a header tag, in this case, a `<h4>`, with a class
    of `.panel-title`.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在标题内部包含一个标题标签，在这个例子中，是一个带有`.panel-title`类的`<h4>`。
- en: 'Finally, nested inside the header tag, code a link that has a few attributes
    that you need to include:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，在标题标签内部，编写一个具有几个你需要包含的属性的链接：
- en: '`.collapsed` is required for the Accordion component.'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.collapsed`对于可折叠组件是必需的。'
- en: '`data-toggle` is also required.'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-toggle`也是必需的。'
- en: '`data-parent` should be the same ID that you set on the first `<div>` for the
    accordion.'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-parent`应该是你为第一个`<div>`设置的相同ID。'
- en: '`href` will be a link to the body of the section that will be collapsable.
    In this case, it is called `sectionOne`.'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`href`将是链接到可折叠部分的主体。在这个例子中，它被称为`sectionOne`。'
- en: '`aria-expanded` should be set to `true` because we want this section to be
    open on page load. The other links should be set to `false`, unless you want them
    to be open on page load.'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aria-expanded`应该设置为`true`，因为我们希望这个部分在页面加载时是打开的。其他链接应该设置为`false`，除非你希望它们在页面加载时打开。'
- en: '`aria-controls` should also match the ID name of the corresponding section.'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aria-controls`也应该与相应部分的ID名称匹配。'
- en: Now that the header has been broken down, let's cover the body of the panel.
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在标题已经分解，让我们来谈谈面板的主体。
- en: After the header, insert another `<div>` with an ID of `#sectionOne` on it.
    It should also have a class of `.panel-collapse` and `.collapse` on it. Include
    the attribute role with a value of `tabpanel` on it. Finally, include `aria-labelled`
    by attribute with the value of `sectionOne`.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在标题之后，插入另一个带有 `#sectionOne` ID 的 `<div>`。它也应该有 `.panel-collapse` 和 `.collapse`
    类，并包含一个 `role` 属性，其值为 `tabpanel`。最后，包含 `aria-labelledby` 属性，其值为 `sectionOne`。
- en: Inside this `<div>` include the content of the section that you want to display.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个 `<div>` 内部包含你想要显示的章节内容。
- en: 'For the next sections, you need to repeat what you did for the first panel.
    Simply copy and paste and then you need to change a few things:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于接下来的部分，你需要重复你在第一个面板中做的事情。只需复制粘贴，然后你需要更改一些内容：
- en: Change `headerOne` to `headerTwo`
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `headerOne` 改为 `headerTwo`
- en: Change `sectionOne` to `sectionTwo`
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `sectionOne` 改为 `sectionTwo`
- en: Change up the header title and content of the body for the second section
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改第二个部分的标题和正文内容
- en: 'Do the same for the third section, and then the Accordion component is done.
    Once you''re done, this is what it should look like in the browser:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对第三个部分做同样的处理，然后 Accordion 组件就完成了。一旦完成，浏览器中的样子应该是这样的：
- en: '![Coding an Accordion with the Collapse component](img/00113.jpeg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Collapse 组件编写可折叠面板](img/00113.jpeg)'
- en: That completes the Collapse and Accordion components. We have one more to go,
    which is the Carousel component.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了 Collapse 和 Accordion 组件。我们还有一个组件要完成，那就是 Carousel 组件。
- en: Coding a Bootstrap Carousel
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 Bootstrap Carousel
- en: 'Carousel is a popular component used on many different types of websites. We''re
    going to build a Carousel in the Blog Post template of our project. Let''s start
    by opening up `blog-post.ejs` from the project directory in your text editor.
    After the page title block of code, insert the following markup:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Carousel 是在许多不同类型的网站上广泛使用的流行组件。我们将在项目的博客文章模板中构建一个 Carousel。让我们首先在文本编辑器中打开项目目录中的
    `blog-post.ejs` 文件。在页面标题代码块之后，插入以下标记：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This is a larger component like the Accordion so let''s go through it section
    by section:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个像 Accordion 一样的大组件，让我们逐节分析：
- en: 'The Carousel component starts with a `<div>` and it needs a unique ID. In this
    case, `#carouselOne`. Also include the following classes: `.carousel` and `.slide`.
    Finally, you need to add the attribute `data-ride` with a value of `carousel`.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Carousel 组件从一个 `<div>` 开始，需要一个唯一的 ID。在这种情况下，`#carouselOne`。还包括以下类：`.carousel`
    和 `.slide`。最后，你需要添加一个 `data-ride` 属性，其值为 `carousel`。
- en: Adding the Carousel bullet navigation
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 Carousel 子弹导航
- en: 'The first thing we need to add to the Carousel is the bullet or indicator navigation.
    It''s made up of an ordered list. Here''s the code, then we''ll break it down:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加到 Carousel 中的第一件事是子弹或指示导航。它由一个有序列表组成。以下是代码，然后我们将对其进行分解：
- en: '[PRE20]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here''s how the Carousel navigation works:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Carousel 导航的工作方式如下：
- en: On the `<ol>` tag allocate a class of `.carousel-indicators`.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<ol>` 标签上分配一个 `.carousel-indicators` 类。
- en: 'Each `<li>` in the list needs to have a few things:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表中的每个 `<li>` 都需要一些东西：
- en: The `data-target` needs to be the same ID that you gave to your root Carousel
    `<div>`, in this case, `#carouselOne`.
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-target` 需要与你为根 Carousel `<div>` 给出的相同 ID，在这种情况下，`#carouselOne`。'
- en: Include the `data-slide-to` attribute and the first value should be 0\. Increase
    it by one for each list item after the first.
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含 `data-slide-to` 属性，第一个值应该是 0。对于第一个列表项之后的每个列表项，增加 1。
- en: Including Carousel slides
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含 Carousel 幻灯片
- en: 'The next step is to include the actual Carousel slides. I''m not going to include
    images in the code, that will be up to you to insert, but don''t worry, I''ll
    show you where to put them. Here''s the code for the section that wraps the slides:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是包含实际的 Carousel 幻灯片。我不会在代码中包含图片，这将由你插入，但不用担心，我会告诉你在哪里放置它们。以下是包装幻灯片的代码段：
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Give that `<div>` a class of `.carousel-inner` and add the `role` attribute
    with a value of `listbox`. Inside this `<div>` you''re going to add another section
    for each image slide in the Carousel. Here''s the code for one slide in the Carousel:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 给 `<div>` 添加一个 `.carousel-inner` 类，并添加一个 `role` 属性，其值为 `listbox`。在这个 `<div>`
    内部，你将为 Carousel 中的每个图像幻灯片添加另一个部分。以下是 Carousel 中一个幻灯片的代码：
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s breakdown what''s happening here in the code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下代码中发生的事情：
- en: In this case, insert a `<div>` tag with the classes `.carousel-item` and `.active`
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这种情况下，插入一个具有 `.carousel-item` 和 `.active` 类的 `<div>` 标签。
- en: Note
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note you should only include the `.active` class on the first slide. This is
    where the Carousel will start on page load.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 注意你只应该在第一张幻灯片上包含 `.active` 类。这是轮播图在页面加载时开始的地方。
- en: 'Inside the `<div>`, insert an `img` tag with the following attributes:'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<div>` 内插入一个具有以下属性的 `img` 标签：
- en: Insert the `src` attribute and the value should be the path to the image file
    for the slide
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入 `src` 属性，其值应该是幻灯片图像文件的路径
- en: Optionally, include an `alt` attribute with a value for the image
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选地，为图像包含一个带有值的 `alt` 属性
- en: Adding Carousel arrow navigation
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加轮播图箭头导航
- en: 'The last thing we need to add to the Carousel is the arrow navigation. Here''s
    the code for rendering the arrows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加到轮播图中的最后一件事是箭头导航。以下是渲染箭头的代码：
- en: '[PRE23]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let me explain how the arrow navigation works:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 让我解释箭头导航是如何工作的：
- en: The left and right arrow navigation is based on `href` tags.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左右箭头导航基于 `href` 标签。
- en: 'The first will be the left arrow; code a link with the following classes on
    it: `.left` and `.carousel-control`.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一项将是左箭头；编写一个带有以下类的链接：`.left` 和 `.carousel-control`。
- en: The `href` for the link should be set to the main ID for the Carousel, in this
    case, `#carouselOne`.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接的 `href` 应该设置为轮播图的主要 ID，在这种情况下，`#carouselOne`。
- en: Set the `role` attribute to `button`.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `role` 属性设置为 `button`。
- en: Finally, set the `data-slide` attribute to `prev`.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，将 `data-slide` 属性设置为 `prev`。
- en: Within the link, add a `<span>` with a class of `.icon-prev` on it. This will
    render the arrow icon. Include the `aria-hidden` attribute and set it to `true`.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在链接内，添加一个带有 `.icon-prev` 类的 `<span>`。这将渲染箭头图标。包含 `aria-hidden` 属性并将其设置为 `true`。
- en: Lastly, you can include another optional `<span>` for accessibility reasons.
    If you want to include it, give it a class of `.sr-only`. Within the `<span>`
    include the text `Previous`.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，你可以包含另一个可选的 `<span>` 以便进行无障碍访问。如果你想包含它，给它一个 `.sr-only` 类。在 `<span>` 中包含文本
    `Previous`。
- en: 'Now let''s go over the differences for the right arrow:'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在我们来了解一下右箭头的区别：
- en: Code another link tag and switch the `.left` class to `.right`.
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写另一个链接标签，并将 `.left` 类更改为 `.right`。
- en: Change the `data-slide` attribute value to `next`.
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `data-slide` 属性值更改为 `next`。
- en: In the first `<span>` tag change the class value to `.icon-next`.
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一个 `<span>` 标签中，将类值更改为 `.icon-next`。
- en: If you included the accessibility `<span>` tag change the text to `Next`.
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你包含了无障碍 `<span>` 标签，将文本更改为 `Next`。
- en: 'That completes the setup of the Carousel component. Fire up the project server
    and view the Blog Post page in the browser, and it should look like this:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了轮播组件的设置。启动项目服务器，并在浏览器中查看博客文章页面，它应该看起来像这样：
- en: '![Adding Carousel arrow navigation](img/00114.jpeg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![添加轮播图箭头导航](img/00114.jpeg)'
- en: 'That concludes the chapter on JavaScript components in Bootstrap. In this chapter,
    I taught you how to code up the following components: Modals, Tooltips, Popovers,
    Collapse, Accordion, and the Carousel. In the next chapter, I''ll teach you how
    to use **Sass** in Bootstrap.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就结束了 Bootstrap 中 JavaScript 组件的章节。在本章中，我教了你如何编写以下组件的代码：模态框、工具提示、弹出框、折叠、手风琴和轮播图。在下一章中，我将教你如何在
    Bootstrap 中使用 **Sass**。
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we have covered all components in Bootstrap that rely on JavaScript.
    This included: Modals, Tooltips, Popovers, Collapse, and Carousel.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了所有依赖于 JavaScript 的 Bootstrap 组件。这包括：模态框、工具提示、弹出框、折叠和轮播图。
- en: In the next chapter, we will see how in Bootstrap 4 the framework has moved
    from Less to Sass as its CSS preprocessor. We will cover the basics of using Sass
    in a Bootstrap theme. I'll also explain how you can customize or use existing
    variables, or write your own.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到在 Bootstrap 4 中，框架如何从 Less 转变为 Sass 作为其 CSS 预处理器。我们将介绍在 Bootstrap
    主题中使用 Sass 的基础知识。我还会解释如何自定义或使用现有的变量，或者编写你自己的。
- en: Assessments
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Which among the following can also be called as modals?
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个也可以称为模态框？
- en: Dialogs
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对话框
- en: Popups
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弹出窗口
- en: Overlays
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遮罩
- en: All of the above
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有这些
- en: Which among the following data attributes needs to be set to modal?
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个数据属性需要设置为模态框？
- en: '`data-target`'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`data-target`'
- en: '`data-toggle`'
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`data-toggle`'
- en: '`data-type`'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`data-type`'
- en: '`data-value`'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`data-value`'
- en: Which among the following values is assigned to `data-target` attribute of a
    button for displaying a modal?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个值被分配给按钮的 `data-target` 属性以显示模态框？
- en: Modal ID
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模态框 ID
- en: Modal type
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模态框类型
- en: Modal class
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模态框类
- en: Modal name
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模态框名称
- en: Which among the following is a required class for modal?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个是模态框的必需类？
- en: '`.modal-header`'
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.modal-header`'
- en: '`.modal-footer`'
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.modal-footer`'
- en: '`.modal-body`'
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.modal-body`'
- en: '`.modal`'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.modal`'
- en: Which among the following data attributes is used to position a Tooltip?
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个数据属性用于定位工具提示？
- en: '`data-target`'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`data-target`'
- en: '`data-placement`'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`data-placement`'
- en: '`data-value`'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`data-value`'
- en: '`data-toggle`'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`data-toggle`'
