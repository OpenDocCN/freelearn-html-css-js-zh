- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Superhero Landing – Setting Up Flexible Navigation Options
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超级英雄着陆 – 设置灵活的导航选项
- en: The city our superhero framework lands in is always changing and they often
    don’t know what they are up against when on patrol. Our next step is to make the
    landing page URL more flexible. We will need to be able to switch from testing
    in the QA environment to staging. At the same time, they should be robust enough
    to be able to handle small differences. In this chapter, we’ll look at handling
    elements that exist in one release or environment but not in another. In addition,
    we will enhance the log wrapper to include colors.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们超级英雄框架着陆的城市总是在变化，他们在巡逻时往往不知道他们面临的是什么。我们的下一步是使着陆页URL更加灵活。我们需要能够从QA环境切换到预发布环境。同时，它们应该足够健壮，能够处理小的差异。在本章中，我们将探讨处理存在于一个发布或环境中的元素，但在另一个环境中不存在的元素。此外，我们还将增强日志包装器，以包含颜色。
- en: 'We’ll cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主要主题：
- en: Using system variables
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用系统变量
- en: Adding data configuration files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加数据配置文件
- en: Configuration allure reporting
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 allure 报告
- en: Quick tip
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 快速提示
- en: Avoid testing in the development environment because there will constantly be
    changes . Stay focused on the QA and staging environments. Promising to keep tests
    in a running state in dev will generate more maintenance time. More maintenance
    means less time creating new tests and analyzing existing results, which means
    more bugs slip into production, increasing the chance we have money leaving the
    bottom line. If the powers that be insist, make it clear a small subset of 4-10
    tests can be provided just to give the developers a “warm fuzzy” about the state
    of their environment. We do want to shift left, but spreading our team too thin
    will be counterproductive.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在开发环境中进行测试，因为那里会不断发生变化。集中精力在QA和预发布环境中。承诺在开发环境中保持测试运行状态将产生更多的维护时间。更多的维护意味着更少的时间来创建新的测试和分析现有结果，这意味着更多的错误会滑入生产环境，增加了我们资金流失的风险。如果当权者坚持，请明确指出可以提供4-10个测试的小子集，仅为了给开发者一个关于其环境状态的“温暖舒适”感。我们确实希望左移，但过度分散我们的团队将适得其反。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All test examples can be found in this GitHub repository: [https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO](https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试示例都可以在这个GitHub仓库中找到：[https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO](https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO)。
- en: Using system variables
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用系统变量
- en: 'When running our tests from the command line, we can set up user variables
    easily to indicate which test environment to use or run. This can be done with
    an environment `{``process.env.ENV}` variable:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当从命令行运行我们的测试时，我们可以轻松设置用户变量来指示要使用或运行的测试环境。这可以通过环境变量 `{``process.env.ENV}` 来完成：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This variable can then be read inside our framework and redirect our login
    method to the proper environment, like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变量可以在我们的框架内部读取，并将我们的登录方法重定向到正确的环境，如下所示：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Quick tip
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 快速提示
- en: Be extra vigilant when testing in production. Discuss with leadership the potential
    impact it can have. Slowing down the production database with inefficient SQL
    calls that return a million results will overshadow any bugs that are found. Set
    up your job runs with a marker that indicates your production environment’s safe
    test cases.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中测试时要格外警惕。与领导讨论它可能产生的影响。使用低效的SQL调用减慢生产数据库，返回一百万结果将会掩盖任何发现的错误。设置你的作业运行时，使用标记来指示你的生产环境的安全测试用例。
- en: Adding data configuration files
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加数据配置文件
- en: Legend has it that data files were created by a brilliant and enigmatic scientist
    whose name is whispered only in hushed tones by those who know of its existence.
    They are said to contain ancient knowledge, sacred algorithms, and hidden codes
    that can unravel the mysteries of the application under test.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 传说中，数据文件是由一位聪明而神秘的科学家创建的，他的名字只有知道其存在的人才会低声耳语。据说它们包含着古老的知识、神圣的算法和隐藏的代码，可以解开被测试应用程序的奥秘。
- en: Where data is stored for test use
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试使用的数据存储位置
- en: Adding data files to your test code with TypeScript is exactly like how you
    do it for JavaScript, but with TypeScript, you have the added benefit of leveraging
    TypeScript’s static typing and modules that will help you catch type-related errors
    early, making your tests more robust and maintainable.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TypeScript将数据文件添加到你的测试代码中，与JavaScript的做法完全一样，但使用TypeScript，你可以利用TypeScript的静态类型和模块，这有助于你提前捕获类型相关的错误，使你的测试更加健壮和易于维护。
- en: Organizing test data
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组织测试数据
- en: First, create a directory to store your test data files. You can name it something
    such as `test-data` or `shared-data`. Place your data files (e.g., JSON, CSV,
    etc.) in this directory.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个目录来存储您的测试数据文件。您可以将其命名为`test-data`或`shared-data`。将您的数据文件（例如JSON、CSV等）放在此目录中。
- en: Setting up TypeScript configuration
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置TypeScript配置
- en: 'Ensure that your TypeScript configuration (`tsconfig.json`) includes the appropriate
    settings for test files and modules. Take the following example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的TypeScript配置（`tsconfig.json`）包括测试文件和模块的适当设置。以下是一个示例：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Include the `test-data` directory and the `tests` directory in the `include`
    section of the `tsconfig` file.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在`tsconfig`文件的`include`部分包含`test-data`目录和`tests`目录。
- en: Reading data from files
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从文件中读取数据
- en: 'Here, we use the `fs` module to read data from the files:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`fs`模块从文件中读取数据：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once we have a file system object, we can begin to build data-driven tests
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了文件系统对象，我们就可以开始构建数据驱动的测试
- en: Using test data in tests
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在测试中使用测试数据
- en: 'In your test files, you can import the necessary data and use it in your test
    cases, like so:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的测试文件中，您可以导入必要的数据并在测试用例中使用它，如下所示：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding example, we are pulling some data from the `data.json` file
    in the shared-data directory. The input data is then compared to the actual result
    and asserting the values are matching.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们从共享数据目录中的`data.json`文件中拉取了一些数据。然后，将这些输入数据与实际结果进行比较，断言这些值是否匹配。
- en: Beyond masking – making confidential data invisible
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不仅仅是掩码 – 使机密数据不可见
- en: As mentioned earlier, superheroes often go to great lengths to protect their
    identity, such as by wearing masks or donning a pair of glasses. But if they truly
    want to be stealthy, nothing beats a vault of secrets.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，超级英雄们通常会采取各种措施来保护他们的身份，例如戴口罩或戴上一副眼镜。但如果是真的想保持低调，没有什么比一个秘密库更有效了。
- en: The use of data files to keep confidential information such as usernames and
    access keys is very commonplace today. For security reasons, these should *never*
    be uploaded into your code repository. A good DevSecOps team will parse GitHub
    and GitLab repos for terms such as “password” and flag your team for being out
    of compliance with **System and Organization Controls 2** (**SOC II**) if they
    find any matches.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据文件来存储诸如用户名和访问密钥之类的机密信息在今天非常普遍。出于安全原因，这些信息**决不**应上传到您的代码仓库。一个优秀的DevSecOps团队会解析GitHub和GitLab仓库，寻找诸如“password”之类的术语，并在找到任何匹配项时标记您的团队，指出其不符合**系统与组织控制2**（**SOC
    II**）的要求。
- en: 'Create a `.env` file at the base of your project to store all your confidential
    data, then add `dotenv` to your dependencies once done. This will give `process.env`
    access to all the data in the `.``env` file:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的基础目录中创建一个`.env`文件来存储所有您的机密数据，完成后将`dotenv`添加到您的依赖项中。这将使`process.env`能够访问`.env`文件中的所有数据：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For this, we need another node package called `dotenv`. This package allows
    developers to store configuration data in a plain text file named `.env`. Each
    line in the `.env` file typically represents an environment variable in the form
    of `KEY=VALUE`, such as `API_KEY=your_api_key_here`. Installing it is simple enough:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要另一个名为`dotenv`的node包。这个包允许开发者将配置数据存储在名为`.env`的纯文本文件中。`.env`文件中的每一行通常代表一个形式为`KEY=VALUE`的环境变量，例如`API_KEY=your_api_key_here`。安装它很简单：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we place this at the top of `wdio.config` file just below the `import`
    statements:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将此放在`wdio.config`文件中`import`语句的下方：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this case, we are creating a system variable to hold `LT_USERNAME` and `LT_ACCESS_KEY`.
    This is how we pass sensitive data without storing our credentials in our repo.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们创建一个系统变量来保存`LT_USERNAME`和`LT_ACCESS_KEY`。这就是我们传递敏感数据而不在仓库中存储我们的凭证的方式。
- en: Spec and Allure – cub reporter versus star journalist
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spec和Allure – 立方记者与明星记者
- en: In many comic books, there are several reporters documenting the big events
    and crimes in the city. The cub reporter gives inside knowledge for our superhero
    to save the day and the star journalist provides flashy front-page headlines.
    Spec and Allure reporters are similar reporting mechanisms in WebdriverIO. They
    serve different functions and provide different levels of detail. The Spec reporter
    is best for SDETs to use to debug failing test runs on the fly. It tells you if
    the test passed or failed, shows the name of the test, and reports the time it
    took to run. If a test fails, the Spec reporter provides the error message and
    stack trace in the console. This provides you with an immediate understanding
    of what has happened, but it’s up to you to help provide in-depth contextual data
    about the test run.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多漫画书中，有几位记者记录了城市中的重大事件和犯罪。新手记者为我们的超级英雄提供内部知识以拯救世界，而明星记者则提供引人注目的头版标题。Spec和Allure报告器是WebdriverIO中的类似报告机制。它们具有不同的功能并提供不同级别的详细信息。Spec报告器最适合SDETs在测试过程中即时调试失败的测试运行。它告诉你测试是否通过或失败，显示测试的名称，并报告运行时间。如果测试失败，Spec报告器在控制台中提供错误消息和堆栈跟踪。这为你提供了对所发生情况的即时理解，但需要你自己提供关于测试运行的深入上下文数据。
- en: 'Allure provides flashy historical graphs that are better suited for showing
    results to project managers and senior executives. It goes beyond the basics to
    give you a more complete picture. It produces a stylish and informative report
    with a lot of additional information, such as the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Allure提供了适合向项目经理和高级管理人员展示结果的炫目历史图表。它超越了基础功能，为你提供更全面的视角。它生成一份时尚且信息丰富的报告，包含大量附加信息，例如以下内容：
- en: Test and suite descriptions
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试和套件描述
- en: Attach screenshots on failure
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在失败时附加截图
- en: Attach text/plain context to the test report
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文本/plain上下文附加到测试报告中
- en: Mark your tests with BDD labels and severity
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用BDD标签和严重性标记你的测试
- en: Test case categorization for tests of a common application area
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对常见应用程序区域的测试进行测试用例分类
- en: Trend history and failure analysis
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 趋势历史和故障分析
- en: Environment information
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境信息
- en: So, the Allure reporter provides a much richer, more detailed report than the
    Spec reporter. It allows for a better understanding of what is happening during
    testing and offers a more holistic view of your test suite. You can think of it
    as the difference between a simple headline (Spec reporter) and a full news article
    complete with photos, analysis, and context (Allure reporter).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Allure报告器提供的报告比Spec报告器更丰富、更详细。它允许更好地理解测试过程中发生的事情，并提供对你测试套件的更全面视图。你可以将其视为简单标题（Spec报告器）与包含照片、分析和背景的完整新闻文章（Allure报告器）之间的区别。
- en: 'The first step is to add Allure to our project:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将Allure添加到我们的项目中：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, inside the `wdio.conf.ts` file, we will add the configuration:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`wdio.conf.ts`文件中，我们将添加以下配置：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This section directs where the reporting detail will be stored and includes
    two options that can be enabled or disabled. Both options are enabled by default
    (`false`), allowing Allure to provide detailed step-by-step reporting and include
    relevant screenshots to enhance the visibility and understandability of your test
    results. The only reason to disable these options would be to save disk space,
    which is not recommended. Excluding Webdriver steps reporting and screenshots
    reporting from the generated report only makes our analysis job harder.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 本节指导了报告细节的存储位置，并包括两个可启用或禁用的选项。默认情况下（`false`），这两个选项都是启用的，允许Allure提供详细的逐步报告，并包含相关的截图，以增强测试结果的可视性和可理解性。禁用这些选项的唯一原因可能是为了节省磁盘空间，这并不推荐。从生成的报告中排除Webdriver步骤报告和截图报告只会使我们的分析工作更难。
- en: Configuring Allure reporting
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Allure报告
- en: 'If you did not set `Allure` as a reporter previously, it can be done manually.
    This is a two-step process: `Allure`, skip to *step 2*:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前没有将`Allure`设置为报告器，可以手动完成。这是一个两步过程：`Allure`，跳转到*步骤2*：
- en: 'To install Allure, type the following:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装Allure，请输入以下命令：
- en: '[PRE10]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will install Allure as a `devDependancies`. We can verify the package is
    added to the `package.json` file.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将安装Allure作为`devDependancies`。我们可以验证该包是否已添加到`package.json`文件中。
- en: '![Figure 12.1 – Allure reporter dependency is added to package.json](img/B19395_Figure_2.17.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – Allure报告器依赖项添加到package.json](img/B19395_Figure_2.17.jpg)'
- en: Figure 12.1 – Allure reporter dependency is added to package.json
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – Allure报告器依赖项添加到package.json
- en: 'The Allure package is added to the dev dependencies. Next, the output directories
    for the HTML report and screen captures must be configured in `wdio.config.ts`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Allure 包被添加到开发依赖中。接下来，必须在 `wdio.config.ts` 中配置 HTML 报告和屏幕截图的输出目录：
- en: '![Figure 12.2 – Adding Allure configuration to the wdio.config.ts file](img/B19395_12_2.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.2 – 将 Allure 配置添加到 wdio.config.ts 文件中](img/B19395_12_2.jpg)'
- en: Figure 12.2 – Adding Allure configuration to the wdio.config.ts file
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2 – 将 Allure 配置添加到 wdio.config.ts 文件中
- en: 'In the `wdio.config.ts` file, `outputDir` directs where the HTML files and
    screen captures are to be stored. Let’s use `allure-results`. Now run the test
    again:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `wdio.config.ts` 文件中，`outputDir` 指定了 HTML 文件和屏幕截图的存储位置。让我们使用 `allure-results`。现在再次运行测试：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will launch the `example.e2e.ts` test. It also generates results in the
    `allure-results` folder for Allure to build a dashboard.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动 `example.e2e.ts` 测试。它还会在 `allure-results` 文件夹中生成结果，供 Allure 构建仪表板。
- en: '![Figure 12.3 – New support files created by Allure to create the HTML report
    page](img/B19395_12_3.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.3 – Allure 创建 HTML 报告页面的新支持文件](img/B19395_12_3.jpg)'
- en: Figure 12.3 – New support files created by Allure to create the HTML report
    page
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3 – Allure 创建 HTML 报告页面的新支持文件
- en: 'To display the results, type the following:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要显示结果，请输入以下命令：
- en: '[PRE12]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The Bash terminal can also execute combined statements like this:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Bash 终端也可以执行这样的组合语句：
- en: '[PRE13]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We have installed and configured both WebdriverIO and the Allure dashboard service
    to display pretty result graphs for our stakeholders. But there is one constant
    in test automation, and that is change. We need to keep the versions of all our
    support packages up to date. If there are conflicts, there is bound to be trouble.
    Fortunately, there is an easy solution for that.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经安装并配置了 WebdriverIO 和 Allure 仪表板服务，以便为我们的利益相关者展示美观的结果图表。但在测试自动化中，有一个恒定不变的因素，那就是变化。我们需要保持所有支持包的版本更新。如果有冲突，肯定会有麻烦。幸运的是，有一个简单的解决方案。
- en: 'This information does not need to be stored in the repository, so we will add
    it to our `.``gitignore` file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息不需要存储在仓库中，所以我们将将其添加到我们的 `.gitignore` 文件中：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'At the top of each test, we should be consistent with an Allure reporting tag
    to help organize and categorize our test cases in the report. This includes tags
    for test owners (authors), features, stories, and descriptions. Advanced reporting
    can include links back to Jira tickets using TMS links. Let us begin with the
    `Owner` tag:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个测试的顶部，我们应该保持一致地使用 Allure 报告标签，以帮助在报告中组织和分类我们的测试用例。这包括测试所有者（作者）、功能、故事和描述的标签。高级报告可以包括使用
    TMS 链接回 Jira 任务的链接。让我们从 `Owner` 标签开始：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The first question any caped crusader wants answered is, “Who did it?” In earlier
    chapters, we noted that code can be quickly traced back to its owner in VS Code
    with GitLens. Since the original author of the test knows the tests they wrote
    best, your team members should be in the habit of adding their names to each test
    they write. Next, we need to organize our tests by feature:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 任何超级英雄最想回答的第一个问题是，“是谁干的？”在早期章节中，我们提到代码可以快速通过 GitLens 追踪到其所有者。由于测试的原作者最了解他们所编写的测试，因此团队成员应该养成在所编写的每个测试中添加他们名字的习惯。接下来，我们需要按功能组织我们的测试：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![Figure 12.4 – Allure report displaying one passing test under the “Automation
    Hello World“ feature'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.4 – 在“Automation Hello World”功能下显示的一个通过测试的 Allure 报告]'
- en: '](img/B19395_12_4.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B19395_12_4.jpg)'
- en: Figure 12.4 – Allure report displaying one passing test under the “Automation
    Hello World“ feature
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.4 – 在“Automation Hello World”功能下显示的一个通过测试的 Allure 报告
- en: A `Feature` tag describes what area of the application is being tested by this
    and other tests. Test cases can be grouped for more efficient execution. This
    could be a small subset of tests that relate to only one area. This would eliminate
    separating tests by smoke and regression suites. Tests also need some detail regarding
    the functionality of the test itself.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `Feature` 标签描述了应用程序的哪个区域正在被这个和其他测试所测试。测试用例可以被分组以更有效地执行。这可以是一个只与一个区域相关的测试的小子集。这将消除通过冒烟测试和回归测试套件分离测试的需要。测试还需要有关测试本身功能的一些细节。
- en: 'This is the command for adding a descriptive tag name to the test in the report:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是向报告中测试添加描述性标签名称的命令：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This description can be seen in the following screenshot, highlighted in blue.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个描述可以在以下屏幕截图中看到，用蓝色突出显示。
- en: '![Figure 12.5 – Description indicating the test will assert the login functionality'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.5 – 描述表明测试将断言登录功能]'
- en: '](img/B19395_12_5.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B19395_12_5.jpg)'
- en: Figure 12.5 – Description indicating the test will assert the login functionality
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5 – 描述表明测试将断言登录功能
- en: The `Description` tag is the summary of the validation performed by the test
    itself. This is generally copied word for word from the title of a ticket in an
    issue-tracking tool referencing an existing manual test. It could also be the
    title of a ticket in a separate automation project that links across to the manual
    test in a separate project. Those ticket numbers should be matched with a `Story`
    traceability tag.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`Description`标签是测试本身执行的验证的摘要。这通常是从问题跟踪工具中引用现有手动测试的条目标题逐字复制。它也可能是另一个自动化项目的条目标题，该条目链接到另一个项目中单独的手动测试。这些条目编号应与`Story`可追溯性标签匹配。'
- en: 'This is how we add a story description to a test report:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们将故事描述添加到测试报告中的方法：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This information is then attached as the name of the test.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将这些信息附加为测试的名称。
- en: '![Figure 12.6 – The ”TA-001” story added with a Jira ticker reference'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.6 – 添加了Jira条目引用的“TA-001”故事'
- en: '](img/B19395_12_6.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19395_12_6.jpg)'
- en: Figure 12.6 – The ”TA-001” story added with a Jira ticker reference
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6 – 添加了Jira条目引用的“TA-001”故事
- en: Tests need traceability to individual story detail information. There is little
    point in duplicating the text in the actual story ticket, so just providing the
    ticket number can be sufficient. It can be appended to a saved URL in a browser
    for a quick lookup.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 测试需要与个别故事详细信息进行可追溯性。在故事条目中重复文本几乎没有意义，因此只需提供条目编号就足够了。它可以被附加到浏览器中保存的URL上，以便快速查找。
- en: Adding custom comments to the Allure report
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加自定义注释到Allure报告中
- en: 'In [*Chapter 8*](B19395_08.xhtml#_idTextAnchor165), we discussed creating a
    wrapper for `Expect`. We can add custom reporting with the `addattachment()` function:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第8章*](B19395_08.xhtml#_idTextAnchor165)中，我们讨论了为`Expect`创建包装器。我们可以使用`addattachment()`函数添加自定义报告：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this example, we intentionally fail with an invalid assertion verb, `equa`.
    `expectAdv` reports a detailed error to the Allure report describing the cause.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们故意使用一个无效的断言动词`equa`来失败。`expectAdv`向Allure报告详细错误，描述了原因。
- en: '![Figure 12.7 – The problem string “equa” is reported as an error'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.7 – 报告错误的问题字符串“equa”'
- en: '](img/B19395_12_7.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19395_12_7.jpg)'
- en: Figure 12.7 – The problem string “equa” is reported as an error
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7 – 报告错误的问题字符串“equa”
- en: 'The best advice is to be as efficient as possible. Traceability could be combined
    with a single description:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的建议是尽可能高效。可追溯性可以与单个描述结合：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Within the `Log` wrapper, we can provide details to both reporters. But not
    everything. That would cause a high signal-to-noise ratio. So, let us just log
    errors and warnings:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Log`包装器内部，我们可以向两个报告者提供详细信息。但不是所有内容。那会导致信号与噪声比很高。所以，我们只记录错误和警告：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In addition, the Spec reporter can be made a little more flashy with some color.
    Let’s say we want any text that indicates a result passed to be displayed in the
    console in green, while a test that failed is displayed in red. The `Log` wrapper
    can be amended to watch for the `PASS:` and `FAIL:` text. These strings can be
    surrounded by lines with ANSI color markers.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Spec报告者可以通过一些颜色变得更加引人注目。假设我们希望任何表示结果通过的文字在控制台中显示为绿色，而失败的测试显示为红色。`Log`包装器可以修改为监视`PASS:`和`FAIL:`文本。这些字符串可以由带有ANSI颜色标记的行包围。
- en: 'First, let’s add `Allure` to our project:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们将`Allure`添加到我们的项目中：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, let’s identify the basic colors at the top of our helper file starting
    with green:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们确定我们的辅助文件顶部的基本颜色，从绿色开始：
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The color escape sequence is broken down here:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色转义序列在此分解：
- en: '`\x1b` is the escape character, which starts the sequence.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\x1b`是转义字符，它启动了序列。'
- en: '`[` is the **Control Sequence Introducer** (**CSI**), which tells the terminal
    to interpret the following characters as a command.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[`是**控制序列引入符**（**CSI**），它告诉终端将以下字符解释为命令。'
- en: '`38` is the `foreground` text to a custom ANSI color. `48` sets the background
    color. Use 30–37 to set the color to one of the eight default foreground colors
    and 40–47 for the eight default background colors.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`38`是自定义ANSI颜色的`前景`文本。`48`设置背景颜色。使用30-37设置颜色为八种默认前景颜色之一，使用40-47设置八种默认背景颜色之一。'
- en: '`2` specifies that the color will be faint set using RGB values. Other options
    include `3` for italics, `5` and `6` for blinking text, `7` for inverse text,
    and `9` for crossed-out text.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2`指定颜色将使用RGB值设置为浅色。其他选项包括`3`用于斜体，`5`和`6`用于闪烁文本，`7`用于反色文本，以及`9`用于删除线文本。'
- en: '`140;225;50` are the red, green, and blue values, respectively, for the color
    to be set. In this case, they define a shade of green.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`140;225;50` 分别是红色、绿色和蓝色的值，用于设置颜色。在这种情况下，它们定义了一种绿色。'
- en: '`m` is the final character, which marks the end of the escape sequence.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m` 是最后一个字符，它标志着转义序列的结束。'
- en: 'As you can see, we can get quite creative with the color and formatting of
    the text. Next, we add red for failing messages and yellow for warning messages:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们可以在文本的颜色和格式上非常具有创意。接下来，我们为失败的消息添加红色，为警告消息添加黄色：
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'When we output locators, they should have their own color as well:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们输出定位器时，它们也应该有自己的颜色：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Any text encased in single quotes could be auto-formatted to its own color
    as well:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 任何用单引号括起来的文本也可以自动格式化为自己的颜色：
- en: '[PRE26]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Finally, we want to reset any color settings back to the default so we can
    distinguish between messaging from our framework from that of WebdriverIO:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望将任何颜色设置重置为默认值，以便我们可以区分来自我们的框架和 WebdriverIO 的消息：
- en: '[PRE27]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'These colors may not be perfect for everyone. You can find a palette of ANSI
    RGB color combinations to customize to your liking here: [https://github.com/hinell/palette-print.bash](https://github.com/hinell/palette-print.bash).'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这些颜色可能并不适合每个人。您可以在以下位置找到一组 ANSI RGB 颜色组合，以便根据您的喜好进行自定义：[https://github.com/hinell/palette-print.bash](https://github.com/hinell/palette-print.bash)。
- en: 'Now let’s enhance the log wrapper to get some color:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们增强日志包装器以获取一些颜色：
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When we output out strings using accent marks, we can uniquely identify them
    and colorize them:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用重音符号输出字符串时，我们可以唯一地识别它们并将它们着色：
- en: '[PRE29]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We could embed color for our xPath locators from the log method too:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从日志方法中嵌入我们的 xPath 定位器的颜色：
- en: '[PRE30]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The same goes for CSS locators:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的，CSS 定位器也是如此：
- en: '[PRE31]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, when passing a result, it could be displayed at runtime in color based
    on the content:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当传递结果时，它可以根据内容在运行时以颜色显示：
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: But it would be more reliable to do this from the `Click`, `Select`, `Enter`,
    and `Expect` method wrappers instead.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 但从 `Click`、`Select`、`Enter` 和 `Expect` 方法包装器中这样做会更可靠。
- en: 'Finally, we can redirect any error logging to an Allure report like this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以将任何错误日志重定向到 Allure 报告，如下所示：
- en: '[PRE33]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Webhooks and screen captures
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Webhooks 和屏幕截图
- en: 'Our final step is to add a screen capture at the end of our test cases. It
    is your decision whether you want to take a screen capture only on failing test
    cases. However, based on our experience, we think taking a screen capture regardless
    will give you the opportunity to see what the difference between a passing versus
    a failing test is when you’re looking at a historical run saved in Jenkins:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一步是在测试用例的末尾添加屏幕截图。您可以选择是否只在失败的测试用例上捕获屏幕截图。然而，根据我们的经验，我们认为无论是否失败都捕获屏幕截图将给您提供机会，在查看
    Jenkins 中保存的历史运行时，了解通过和失败之间的差异：
- en: '[PRE34]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This is accomplished by adding the preceding lines of code to the `afterTest`
    hook of the `WDIO.config` file.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过将前面的代码行添加到 `WDIO.config` 文件的 `afterTest` 钩子中实现的。
- en: Note
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `onPrepare`, `onWorkerStart`, `onWorkerEnd`, and `onComplete` hooks are
    executed in a different process and therefore cannot share any global data with
    the other hooks that live in the worker process.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`onPrepare`、`onWorkerStart`、`onWorkerEnd` 和 `onComplete` 钩子在不同的进程中执行，因此不能与其他钩子共享任何全局数据，这些钩子位于工作进程中。'
- en: Summary
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we embarked on a heroic journey akin to traversing the dynamic
    realms of a superhero multiverse. We mastered the art of directing our test scenarios
    to various domains of operation—be it QA, stage, or, when the situation demands
    it, dev and even production. Alongside this, we infused our console log with a
    spectrum of hues, akin to a caped crusader’s vibrant costume. Our Allure reports,
    much like a meticulously organized utility belt, now display information with
    precision and clarity. We also unlocked the power of data files, safeguarding
    the keys to our digital city—sensitive credentials—from the prying eyes of nefarious
    adversaries.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们踏上了类似穿越超级英雄多元宇宙动态领域的英勇之旅。我们掌握了将测试场景引导到各种操作域的艺术——无论是 QA、预发布，还是当情况需要时，开发甚至生产。与此同时，我们向控制台日志中注入了一道彩虹般的色彩，就像一位斗篷骑士的鲜艳服装。我们的
    Allure 报告，就像一个精心组织的工具带，现在以精确和清晰的方式显示信息。我们还解锁了数据文件的力量，保护了我们数字城市的钥匙——敏感凭证——免受邪恶敌人的窥视。
- en: Navigating through these diverse environments mirrors the complex task of a
    guardian navigating through parallel universes—each familiar in contour but unique
    in content. As we prepare to soar into the next chapter, we will fortify our tests
    with the resilience of a superhero’s shield, ensuring they withstand the trials
    of missing elements that may have vanished into the ether. Furthermore, we will
    broaden our horizons into the vast expanse of cross-browser testing, ensuring
    our digital endeavors are as versatile as a shape-shifting hero’s array of abilities.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些多样化的环境中导航，如同守护者穿越平行宇宙的复杂任务——每个环境在轮廓上都很熟悉，但在内容上却独一无二。随着我们准备进入下一章节，我们将用超级英雄盾牌的韧性加固我们的测试，确保它们能够经受住可能已消失在虚空的缺失元素的考验。此外，我们将拓宽我们的视野，进入广阔的跨浏览器测试领域，确保我们的数字努力像变形英雄的能力一样多变。
