["```js\nvar myCallback = function() { // callback\n  console.log(\"foo\");\n}\n\nfunction bar(cb: () => void) { // higher order function\n  console.log(\"bar\");\n  cb();\n}\n\nbar(myCallback); // prints \"bar\" then prints \"foo\"\n```", "```js\nbar(() => {\n  console.log(\"foo\");\n}); // prints \"bar\" then prints \"foo\"\n```", "```js\nclass Person {\n    private _name: string;\n    constructor(name: string) {\n        this._name = name;\n    }\n    public greet() {\n        console.log('Hi! My name is ${this._name}');\n    }\n}\n\nlet person = new Person(\"Remo\");\nperson.greet(); // \"Hi! My name is Remo\"\n```", "```js\nclass Person {\n    private _name: string;\n    constructor(name: string) {\n        this._name = name;\n    }\n\n    public greet() {\n        alert('Hi! My name is ${this._name}');\n    }\n\n    public greetDelay(time: number) {\n        setTimeout(function() {\n            alert('Hi! My name is ${this._name}'); // Error\n        }, time);\n    }\n\n}\n\nlet person = new Person(\"Remo\");\nperson.greetDelay(1000); // Error\n```", "```js\nclass Person {\n\n    private _name: string;\n\n    constructor(name: string) {\n        this._name = name;\n    }\n\n    public greet() {\n        alert('Hi! My name is ${this._name}');\n    }\n\n    public greetDelay(time: number) {\n        setTimeout(() => {\n            alert('Hi! My name is ${this._name}'); // OK\n        }, time);\n    }\n\n}\n\nlet person = new Person(\"Remo\");\nperson.greet(); // \"Hi! My name is Remo\"\nperson.greetDelay(1000); // \"Hi! My name is Remo\"\n```", "```js\nPerson.prototype.greetDelay = function (time) {\n  var _this = this;\n  setTimeout(function () {\n    alert(\"Hi! My name is \" + _this._name);\n  }, time);\n};\n```", "```js\nfunction doSomethingAsync(\n    arr: number[],\n    success: (arr: number[]) => void,\n    error: (e: Error) => void\n) {\n    setTimeout(() => {\n        try {\n            let n = Math.ceil(Math.random() * 100 + 1);\n            if (n < 25) {\n                throw new Error(\"n is < 25\");\n            }\n            success([...arr, n]);\n        } catch (e) {\n            error(e);\n        }\n    }, 1000);\n}\n```", "```js\nfunction doSomethingElseAsync(\n    arr: number[],\n    success: (arr: number[]) => void,\n    error: (e: Error) => void\n) {\n    // ... Same implementation here...\n}\n\nfunction doSomethingMoreAsync(\n    arr: number[],\n    success: (arr: number[]) => void,\n    error: (e: Error) => void\n) {\n    // Same imlementation here...\n}\n```", "```js\ndoSomethingAsync([], (arr1) => {\n    doSomethingElseAsync(arr1, (arr2) => {\n        doSomethingMoreAsync(arr2, (arr3) => {\n            console.log(\n                '\n                doSomethingAsync: ${arr3[0]}\n                doSomethingElseAsync: ${arr3[1]}\n                doSomethingMoreAsync: ${arr3[2]}\n                '\n            );\n        }, (e) => console.log(e));\n    }, (e) => console.log(e));\n}, (e) => console.log(e));\n```", "```js\nfunction foo() {\n    return new Promise<string>((fulfill, reject) => {\n        try {\n            // do something\n            fulfill(\"SomeValue\");\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\n\nfoo().then((value) => {\n    console.log(value);\n}).catch((e) => {\n    console.log(e);\n});\n```", "```js\n\"lib\": [\n     \"es2015.promise\",\n     \"dom\",\n     \"es5\",\n     \"es2015.generator\", // new\n     \"es2015.iterable\" // new\n ]\n```", "```js\nfunction doSomethingAsync(arr: number[]) {\n    return new Promise<number[]>((resolve, reject) => {\n        setTimeout(() => {\n            try {\n                let n = Math.ceil(Math.random() * 100 + 1);\n                if (n < 25) {\n                    throw new Error(\"n is < 25\");\n                }\n                resolve([...arr, n]);\n            } catch (e) {\n                reject(e);\n            }\n        }, 1000);\n    });\n}\n```", "```js\nfunction doSomethingElseAsync(arr: number[]) {\n    // Same implementation here...\n}\n\nfunction doSomethingMoreAsync(arr: number[]) {\n    // Same implementation here...\n}\n```", "```js\ndoSomethingAsync([]).then((arr1) => {\n    doSomethingElseAsync(arr1).then((arr2) => {\n        doSomethingMoreAsync(arr2).then((arr3) => {\n            console.log(\n                '\n                doSomethingAsync: ${arr3[0]}\n                doSomethingElseAsync: ${arr3[1]}\n                doSomethingMoreAsync: ${arr3[2]}\n                '\n            );\n        });\n    });\n}).catch((e) => console.log(e));\n```", "```js\ndoSomethingAsync([])\n    .then(doSomethingElseAsync)\n    .then(doSomethingMoreAsync)\n    .then((arr3) => {\n        console.log(\n            '\n            doSomethingAsync: ${arr3[0]}\n            doSomethingElseAsync: ${arr3[1]}\n            doSomethingMoreAsync: ${arr3[2]}\n            '\n        );\n    }).catch((e) => console.log(e));\n```", "```js\nPromise.all([\n    new Promise<number>((resolve) => {\n        setTimeout(() => resolve(1), 1000);\n    }),\n    new Promise<number>((resolve) => {\n        setTimeout(() => resolve(2), 1000);\n    }),\n    new Promise<number>((resolve) => {\n        setTimeout(() => resolve(3), 1000);\n    })\n]).then((values) => {\n    console.log(values); // [ 1 ,2, 3]\n});\n```", "```js\nPromise.race([\n    new Promise<number>((resolve) => {\n        setTimeout(() => resolve(1), 3000);\n    }),\n    new Promise<number>((resolve) => {\n        setTimeout(() => resolve(2), 2000);\n    }),\n    new Promise<number>((resolve) => {\n        setTimeout(() => resolve(3), 1000);\n    })\n]).then((fastest) => {\n    console.log(fastest); // 3\n});\n```", "```js\ndeclare function someFunc(\n    callback: (\n    nestedCallback: (error: number, result: any) => void\n    ) => void\n): void;\n\nsomeFunc(\n    (\n        nestedCallback: (e: number) => void // Error\n    ) => {\n        nestedCallback(1);\n    }\n);\n```", "```js\nsomeFunc(\n    (\n        nestedCallback: (e: number, result: any) => void // OK\n    ) => {\n        nestedCallback(1, 1);\n    }\n);\n```", "```js\nlet p: Promise<number> = new Promise((res, rej) => {\n    res(\"error\"); // Error\n});\n```", "```js\ninterface Iterator<T> {\n  next(value?: any): IteratorResult<T>;\n  return?(value?: any): IteratorResult<T>;\n  throw?(e?: any): IteratorResult<T>;\n}\n```", "```js\nfunction *foo() {\n    yield 1;\n    yield 2;\n    yield 3;\n    yield 4;\n    return 5;\n}\n\nlet bar = foo();\nbar.next(); // Object {value: 1, done: false}\nbar.next(); // Object {value: 2, done: false}\nbar.next(); // Object {value: 3, done: false}\nbar.next(); // Object {value: 4, done: false}\nbar.next(); // Object {value: 5, done: true}\nbar.next(); // Object { done: true }\n```", "```js\n\"lib\": [\n     \"es2015.promise\",\n     \"dom\",\n     \"es5\",\n     \"es2015.generator\", // new\n     \"es2015.iterable\" // new\n ]\n```", "```js\nfunction* foo() {\n    let i = 1;\n    while (true) { // Infinite loop!\n        yield i++;\n    }\n}\n\nlet bar = foo();\nbar.next(); // Object {value: 1, done: false}\nbar.next(); // Object {value: 2, done: false}\nbar.next(); // Object {value: 3, done: false}\nbar.next(); // Object {value: 4, done: false}\nbar.next(); // Object {value: 5, done: false}\nbar.next(); // Object {value: 6, done: false}\nbar.next(); // Object {value: 7, done: false}\n```", "```js\nlet p = Promise.resolve(3);\n\nasync function fn(): Promise<number> {\n    var i = await p; // 3\n    return 1 + i; // 4\n}\n\nfn().then((r) => console.log(r)); // 4\n```", "```js\nasync function invokeTaskAsync() {\n    let arr1 = await doSomethingAsync([]);\n    let arr2 = await doSomethingElseAsync(arr1);\n    return await doSomethingMoreAsync(arr2);\n}\n```", "```js\ninvokeTaskAsync().then((result) => {\n    console.log(\n        '\n        doSomethingAsync: ${result[0]}\n        doSomethingElseAsync: ${result[1]}\n        doSomethingMoreAsync: ${result[2]}\n        '\n    );\n}).catch((e) => {\n    console.log(e);\n});\n```", "```js\n(async () => {\n    try {\n        let arr1 = await doSomethingAsync([]);\n        let arr2 = await doSomethingElseAsync(arr1);\n        let arr3 = await doSomethingMoreAsync(arr2);\n        console.log(\n            '\n            doSomethingAsync: ${arr3[0]}\n            doSomethingElseAsync: ${arr3[1]}\n            doSomethingMoreAsync: ${arr3[2]}\n            '\n        );\n    } catch (e) {\n        console.log(e);\n    }\n})();\n```", "```js\n(async () => {\n    await someAsyncFunction();\n})();\n```", "```js\ninterface Iterator<T> {\n  next(value?: any): IteratorResult<T>;\n  return?(value?: any): IteratorResult<T>;\n  throw?(e?: any): IteratorResult<T>;\n}\n```", "```js\ninterface AsyncIterator<T> {\n  next(value?: any): Promise<IteratorResult<T>>;\n  return?(value?: any): Promise<IteratorResult<T>>;\n  throw?(e?: any): Promise<IteratorResult<T>>;\n}\n```", "```js\nlet counter = 0;\n\nfunction doSomethingAsync() {\n    return new Promise<number>((r) => {\n        setTimeout(() => {\n            counter += 1;\n            r(counter);\n        }, 1000);\n    });\n}\n\nasync function* g1() {\n    yield await doSomethingAsync();\n    yield await doSomethingAsync();\n    yield await doSomethingAsync();\n}\n\nlet i: AsyncIterableIterator<number> = g1();\ni.next().then((n) => console.log(n)); // 1\ni.next().then((n) => console.log(n)); // 2\ni.next().then((n) => console.log(n)); // 3\n```", "```js\n\"lib\": [\n     \"es2015.promise\",\n     \"dom\",\n     \"es5\",\n     \"es2015.generator\",\n     \"es2015.iterable\",\n     \"esnext.asynciterable\" // new\n ]\n```", "```js\nfunction* g1() {\n    yield 2;\n    yield 3;\n    yield 4;\n}\n\nasync function func() {\n    for await (const x of g1()) {\n        console.log(x);\n    }\n}\n\n(async () => {\n    await func();\n})();\n```", "```js\nfunction* g1() {\n    yield 2;\n    yield 3;\n    yield 4;\n}\n\nfunction* g2() {\n    yield 1;\n    yield* g1();\n    yield 5;\n}\n\nvar iterator1 = g2();\n\nconsole.log(iterator1.next()); // {value: 1, done: false}\nconsole.log(iterator1.next()); // {value: 2, done: false}\nconsole.log(iterator1.next()); // {value: 3, done: false}\nconsole.log(iterator1.next()); // {value: 4, done: false}\nconsole.log(iterator1.next()); // {value: 5, done: false}\nconsole.log(iterator1.next()); // {value: undefined, done: true}\n```", "```js\nfunction* g2() {\n    yield 1;\n    yield* [2, 3, 4];\n    yield 5;\n}\n\nvar iterator = g2();\n\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: 4, done: false}\nconsole.log(iterator.next()); // {value: 5, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n```"]