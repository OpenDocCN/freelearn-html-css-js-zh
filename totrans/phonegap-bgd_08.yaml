- en: Chapter 8. Advanced PhoneGap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Enter globalization and localization if you want your application to reach
    users of multiple countries and cultures. Your application should be able to support
    multiple languages/locales and this can be achieved by using the Globalization
    API and libraries related to localization. Think of support for multiple gestures
    if you want the application to be more advanced and user-friendly.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to use the Globalization API to support the locale of the mobile app
    user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to localize the application by showing the content in multiple languages
    based on the user's choice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get an overview of the libraries providing gesture support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to implement multiple touch gestures to enhance the user experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to remove the 300 ms delay introduced during click events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Globalization API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In computing, globalization, internationalization, and localization are means
    of adapting computer software to different languages, regional differences, and
    the technical requirements of a target market. Let's see these in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The term **localization** refers to all the activities needed before your app
    can be deployed in different languages and according to local cultural conventions.
    Before starting to localize an app, you have to **internationalize** your code
    by removing any language and cultural dependencies and design your code in order
    for it to be adapted to various languages without engineering changes. You can
    then localize your app, translate client-facing content and labels, and otherwise
    adapt it so that it works well in a particular locale.
  prefs: []
  type: TYPE_NORMAL
- en: The term **locale** refers to a collection of settings or preferences to be
    used in localization. A locale is often described as a language and country pair
    such as en-US, de-AT, it-IT, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The term **globalization** stands for the combination of internationalization
    and localization.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some odd-looking abbreviations in which a number is used to indicate
    the number of letters between the first and last letters used to refer to internationalization,
    localization, and globalization:'
  prefs: []
  type: TYPE_NORMAL
- en: '`i18n`: This stands for internationalization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l10n`: This stands for localization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`g11n`: This stands for globalization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Software internationalization is a huge topic because it covers plurals, dates,
    special characters, and so on. Discussing all of them is beyond the scope of this
    book. If you are interested in learning more about internationalization, take
    a look at the GNU project gettext ([http://www.gnu.org/software/gettext/manual/](http://www.gnu.org/software/gettext/manual/)),
    the globalize project ([https://github.com/jquery/globalize](https://github.com/jquery/globalize)),
    or the Jed project ([http://slexaxton.github.io/Jed/](http://slexaxton.github.io/Jed/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'PhoneGap offers great support for localization through the Globalization API
    that is accessible through the `globalization` object. You can install the plugin
    to your project as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `globalization` object is a child of the `navigator` object, and therefore
    has global scope. In order to access the `globalization` object, it''s enough
    to type the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `globalization` object exposes several asynchronous methods that have a
    similar signature. In fact, usually most methods accept an argument, a success
    and a failure handler, and optionally an `options` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Not all the methods accept an argument and the `options` object; some of them
    accept only a success and a failure handler. The failure handler receives a `GlobalizationError`
    object as an argument. There are two properties defined on this object: `message`
    and `code`. The first one contains a string describing the error details; the
    second one contains an integer equal to one of the following pseudo constants
    defined in the `GlobalizationError` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GlobalizationError.UNKNOWN_ERROR` (return value `0`): This means a generic
    error occurred'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GlobalizationError.FORMATTING_ERROR` (return value `1`): This means an error
    occurred during a formatting operation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GlobalizationError.PARSING_ERROR` (return value `2`): This means an error
    occurred during a parsing operation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GlobalizationError.PATTERN_ERROR` (return value `3`): This means an error
    occurred while recovering a currency, date, or number pattern'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Globalization API exposes the following methods defined in the `navigator.globalization`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getPreferredLanguage`: This returns the string identifier for the device''s
    current language; the string is stored in the `value` property of the object received
    as an argument in the success handler (for example, `{value: ‘English''}`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getLocaleName`: This returns the locale identifier according to the device''s
    current language; the string is stored in the `value` property of the object received
    as an argument in the success handler (for example, `{value: ‘en''}`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dateToString`: This returns a date formatted as a string according to the
    client''s locale and time zone; the method accepts a `Date` object as the first
    argument and an optional `options` object as the last argument:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The returned result is stored in the `value` property of the object received
    as an argument in the success handler (for example, `{value: ‘06/14/2013 12:49
    PM''}`).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`stringToDate`: This parses a date formatted as a string, and depending on
    the device''s preferences and calendar, returns the corresponding `Date` object
    as an argument in the success handler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getDatePattern`: This returns an object received as an argument in the success
    handler containing the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pattern string to format and parse dates according to the device's preferences
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The time zone of the device
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference in seconds between the device's time zone and the universal time
    and the offset in seconds between the device's non-daylight saving time zone
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The client''s daylight saving time zone (for example, `{pattern: ‘dd/MM/yyyy
    HH:mm'', timezone: ‘CEST'', utc_offset: 3600, dst_offset: 3600}`)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This method accepts an optional `options` object through which it's possible
    to specify the format length (that is, `short`, `medium`, `long`, or `full`) and
    the data to be returned (that is, `date`, `time`, or `date and time`)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`getDateNames`: This returns an array of names of the months or days of the
    week, depending on the device''s settings; the array is stored in the `value`
    property of the object received as an argument in the success handler (that is,
    `{value: Array[12]}`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isDayLightSavingsTime`: This returns a Boolean stating whether daylight saving
    time is in effect for a given `Date` object passed as the first argument using
    the device''s time zone and calendar; the value is stored in the `dst` property
    of the object received as an argument in the success handler (for example, `{dst:
    true}`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getFirstDayOfWeek`: This returns the first day of the week as a number, depending
    on the device''s user preferences and calendar, assuming that the days of the
    week are numbered starting from `1` (= Sunday); the string is stored in the `value`
    property of the object received as an argument in the success handler (for example,
    `{value: 1}`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numberToString`: This returns the number passed as the first argument formatted
    as a string according to the client''s locale and preferences; the number is stored
    in the `value` property of the object received as an argument in the success handler
    (for example, `{value: ‘12,456,246''}`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stringToNumber`: This returns the string passed as the first argument formatted
    as a number according to the client''s locale and preferences; the number is stored
    in the `value` property of the object received as an argument in the success handler
    (for example, `{value: 1250.04}`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getNumberPattern`: This returns an object received as an argument in the success
    handler containing the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pattern string to format and parse numbers according to the device's preferences
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The number of fractional digits to use when parsing and formatting numbers,
    the rounding increment to use when parsing and formatting, and so on (for example,
    `{decimal: ‘.'', fraction: 0, grouping: ‘,'', negative: ‘-'', pattern: ‘#,##0.###'',
    positive: ‘'', rounding: 0, symbol: ‘.''}`)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getCurrencyPattern`: This returns an object received as an argument in the
    success handler containing a pattern string to format and parse currencies according
    to the currency code passed as the first argument, the device''s preferences,
    the number of fractional digits to use when parsing and formatting numbers, the
    rounding increment to use when parsing and formatting, the ISO 4217 currency code
    for the pattern, and so on (for example, `{code: ‘EUR'', decimal: ‘.'', fraction:
    2, grouping: ‘,'', pattern: ‘$#,##0.00;(¤#,##0.00)'', rounding: 0}`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Both the `numberToString` and `stringToNumber` methods accept an optional `options`
    object; through the `type` property of this object, you can specify the format
    of the number (for example, `decimal`, `percent`, or `currency`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Through the combination of the data provided by the methods of the `globalization`
    object, it's possible to handle very complex scenarios and provide a highly localized
    app to the end user. The Globalization API is a very powerful tool that allows
    you to work in conjunction with other JavaScript libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Localizing your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From a development perspective, the common practice is to place the text in
    resource strings that are loaded at the execution time depending on the user settings.
    There are several techniques you can use to globalize your app such as storing
    the translations in **portable object** (**PO**) files, creating a JSON object
    containing all of them, or loading the localization files dynamically when the
    app starts. The goal is to deploy an app that is able to select the relevant language
    resource file at runtime and to handle culture-aware number and date parsing and
    formatting, plurals, currencies, special characters, validation, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we will learn how to load different language strings
    in the application using a simple JavaScript library.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – rendering localized messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Refer to the following steps to render different messages in your app according
    to the device''s language settings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command-line tool and create a new PhoneGap project called `Globalization`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Globalization API plugin using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the command-line tool, add the platform you want to use for this test
    (Android, Blackberry, iOS, or Windows Phone 8):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download and save the `l10n.js` file available at [https://github.com/marcelklehr/html10n.js](https://github.com/marcelklehr/html10n.js)
    in the `www/js` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the `www` folder and create the JSON file named `langs.json` to store
    all the required language strings as shown here. A JSON file format is a simple
    way of storing data like XML. The file will have the same literals repeated for
    each language:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `www` directory, edit the `index.html` file and add the following code
    line in the `head` section to load the JavaScript file to work with multiple languages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the `langs.json` file with the appropriate type as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `onload` function for the `body` tag to load the document initially
    with correct language values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create some HTML elements to try working with multiple languages. For this
    example, we will create two buttons, an alert box, and a heading tag. When the
    language is changed, all the string values will be changed too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function to be used to initialize the language settings. The `localize`
    method is used to load the application with the provided language. Initially,
    we load the page with the English language using the `index` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create two functions to load the English and French languages when users click
    on the button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the function to show an alert window with the translated string when
    the **Test Alert** button is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apart from these, you can define your `deviceready` event function for other
    PhoneGap/Cordova-related activities. For this example, it''s left empty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the command-line tool, go to the `Globalization` folder, and build and
    run the app on a real device or an emulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The complete source code of the example is provided here for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You developed an app that is able to render different text messages based on
    the language required by the user. When the user clicks on the **French**/**English**
    button, all other texts in the application will change automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Adding multitouch gesture support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For any hybrid mobile apps, touch gestures is an important feature that makes
    the app great in the hands of the users.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the list of JavaScript libraries that can enable multitouch
    gesture handling in your apps. Each library has its own merits and limitations.
    Some have dependencies with other libraries and some do not. You have to be careful
    when choosing the libraries as it might introduce new dependencies to your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Library name | Dependency | URL |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ZeptoJS | No | [http://zeptojs.com/](http://zeptojs.com/) |'
  prefs: []
  type: TYPE_TB
- en: '| EventJS | No | [https://github.com/mudcube/Event.js](https://github.com/mudcube/Event.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| QuoJS | No | [http://quojs.tapquo.com/](http://quojs.tapquo.com/) |'
  prefs: []
  type: TYPE_TB
- en: '| Hammer | No | [http://hammerjs.github.io/](http://hammerjs.github.io/) |'
  prefs: []
  type: TYPE_TB
- en: '| ThumbsJS | No | [http://mwbrooks.github.io/thumbs.js/](http://mwbrooks.github.io/thumbs.js/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| jGestures | jQuery | [http://jgestures.codeplex.com/](http://jgestures.codeplex.com/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| DoubleTab | jQuery | [https://github.com/technoweenie/jquery.doubletap](https://github.com/technoweenie/jquery.doubletap)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Touchable | jQuery | [https://github.com/dotmaster/Touchable-jQuery-Plugin](https://github.com/dotmaster/Touchable-jQuery-Plugin)
    |'
  prefs: []
  type: TYPE_TB
- en: '| TouchyJS | jQuery | [https://github.com/HotStudio/touchy](https://github.com/HotStudio/touchy)
    |'
  prefs: []
  type: TYPE_TB
- en: Although there are a few more libraries, Hammer is widely trusted for gestures
    support in mobile applications. Hammer is an open source library that can recognize
    gestures made by touch, mouse, and pointerEvents. It doesn't have any dependencies
    and the total minified size is less than 4 KB.
  prefs: []
  type: TYPE_NORMAL
- en: We will illustrate an example using Hammer to implement touch events in the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – implementing gesture support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Refer to the following steps to implement multitouch gestures in your app using
    the Hammer JavaScript library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command-line tool and create a new PhoneGap project called `hammer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the command-line tool, add the platform you want to use for this test
    (Android, Blackberry, iOS, or Windows Phone 8):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download the Hammer-related files from [https://github.com/hammerjs/hammer.js](https://github.com/hammerjs/hammer.js)
    and save it in the `www/js` folder. You can find both `hammer.min.js` and `hammer.js`
    files in the download bundle from GitHub. You can just keep the `hammer.min.js`
    file and delete the rest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the `hammer.min.js` file in your `index.html` file to start using Hammer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `div` element named `touch` to the page body. This element will be attached
    to all the touch events we are going to create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s create the event listeners for the “press” gesture and attach it
    to the `div` element we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the command-line tool, go to the project folder, and build and run the
    app on a real device or an emulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you try to apply a “press” action on the element, you will see that Hammer
    has detected your action and changed the text content of the element.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that the Hammer library is very flexible for the developers. You can handle
    multiple gestures in a single event handler. In the following example, we have
    handled pan, swipe, drag, and touch gestures in a single function. However, overusing
    them can damage your application performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The pinch and rotate recognizers are disabled by default because they might
    interfere with the application''s behavior. However, if you want to handle these
    two gestures in your application, you can enable them by calling them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also enable vertical or all directions for the pan and swipe recognizers
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more details on all gesture recognizers and customization options, refer
    to [http://hammerjs.github.io/getting-started/](http://hammerjs.github.io/getting-started/).
    Reading this documentation will help you to use Hammer with maximum efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: Handling click delays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen that a mobile application can support various touch gestures. With
    the introduction of new technologies, differences between web apps and native
    mobile apps are getting close to zero, but not actually zero. One such difference
    is how click events are handled in mobile apps.
  prefs: []
  type: TYPE_NORMAL
- en: When you click on a button, mobile browsers wait for 300 ms to actually trigger
    the click event for the button that you have clicked. The actual reason is that
    the mobile browser waits to see whether the user wants to perform a click or a
    double click. After the 300 ms delay, if there is no other tap, it's considered
    as a single click. However, if there are no event handlers for double clicks,
    the delay will be unnecessary. By overcoming these delays, you can make your app
    more responsible and less laggy.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to see an approach to avoid this 300 ms delay using the library
    called **FastClick** that is available at [https://github.com/ftlabs/fastclick](https://github.com/ftlabs/fastclick).
    The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Include `fastclick.js` in your JavaScript pack or add it to your HTML page
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `deviceready` event listener as you regularly do for other PhoneGap/Cordova
    functionalities:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, attach the FastClick functionality as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In some cases, you might need FastClick to ignore a few elements where double-click
    is possible. In those cases, you can add the `needsclick` class to the element
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For some more advanced discussions related to this topic, refer to FastClick's
    GitHub page. If you are looking at an alternative approach suggested by Google,
    take a look at [https://developers.google.com/mobile/articles/fast_buttons](https://developers.google.com/mobile/articles/fast_buttons).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create an app that supports the locale of
    the user using PhoneGap's Globalization API and to create a localized app that
    supports multiple user languages. More importantly, we saw how we can better handle
    multitouch gestures in the application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover the topics that will help you in making the
    application ready for public release.
  prefs: []
  type: TYPE_NORMAL
