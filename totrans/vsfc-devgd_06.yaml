- en: Chapter 6. Visualforce Charting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visualforce charting is one of the best features from the Winter '13 release.
    It is a collection of components which provides a simple way to create charts
    on our Visualforce pages and Visualforce custom components. This feature gives
    us the facility to customize charts that are based on our data sets from SOQL
    queries, and create custom charts (such as pie, bar, and line charts) on our Visualforce
    pages. We can create charts with Visualforce and Apex, and the charting component
    takes care of all of the JavaScript code for us. Visualforce charts are rendered
    by using JavaScript on the client side and it allows us to build animated and
    visually excited charts on the Visualforce pages.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, the standard Salesforce charts and dashboards may be insufficient
    to meet our requirements. This is where Visualforce charting comes into play.
    When we cannot fulfill our requirement with Visualforce charting we can use Google
    charts in Visualforce.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter explains Visualforce charting, which is a collection of components
    that provides a simple and intuitive way to create charts in your Visualforce
    pages and custom components. The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Limitations and considerations of Visualforce charting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does Visualforce charting work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A complex chart with Visualforce charting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's build some exciting Visualforce charts…
  prefs: []
  type: TYPE_NORMAL
- en: Limitations and considerations of Visualforce charting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When Force.com released the Visualforce charting feature, they announced a
    few known limitations and considerations for Visuaforce charting, which are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Visualforce charting can be rendered only in **Scalable Vector Graphics** (**SVG**)
    supported browsers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualforce charts cannot be displayed in pages rendered as PDFs because Visualforce
    charting uses JavaScript to draw the charts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualforce charting is not used in e-mail messages or e-mail templates because
    e-mail clients do not support JavaScript's execution in e-mail messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we develop a Visulforce page with Visualforce charting, we need to use
    a JavaScript debugging tool such as Firebug to track errors and messages returning
    from Visualforce charting to the JavaScript console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic Visualforce charting (Apex-generated) is still (as of Spring 2013) not
    supported by the Force.com platform. However, this feature is supposed to be released
    soon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does Visualforce charting work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visualforce charting relies on Apex, Visualforce, and JavaScript. When we create
    Visualforce charts, we need an Apex method to prepare or query data to use as
    the source of the chart. Then we need to define our chart by using Visualforce
    charting components. The chart data that is prepared in the Apex method is bound
    to the chart component and the JavaScript draws the chart in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: A Visualforce chart needs a chart container that has at least one data series
    component. We have the ability to add additional series, chart axes, and labeling
    components (such as legend, chart labels, and tool tips for data points).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example creates a simple pie chart that contains the number of
    items that are delivered to customers. In this example, we have hardcoded values
    for the chart data source. The following is the markup of a pie chart example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the associated custom controller, which prepares the data source for
    the chart. The chart container is defined by the `<apex:chart>` component and
    data binding is done by the `getChartData()` controller method. The `<apex:pieSeries>`
    component defines the label and data field from the returned data as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The resultant chart of the preceding example is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How does Visualforce charting work](img/9818_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The resultant pie chart
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding example illustrates the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PieChartData`: This is an inner class which has a set of properties to define
    the label (the `name` property) and the data (the `data` property) of the chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getChartData()`: This method returns a list of wrapper objects of `PieChartData`.
    These list elements create the data points for the chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:pieSeries>`: This component defines the label and data field from the
    returned data (objects of `PieChartData`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing chart data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the three different ways to provide data source to the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the controller method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a JavaScript function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a JavaScript array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the controller method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This technique has been illustrated in our simple pie chart example. This is
    a server-side technique and here we have used a controller method to return a
    list of objects. This object list can be our own Apex wrapper objects (as in our
    previous example), `AggregateResult` objects. or `sObjects`. The result of the
    method is serialized to JSON on the server side, and the result is directly used
    by the `<apex:chart>` component on the client side. Refer to the simple pie chart
    example for this technique.
  prefs: []
  type: TYPE_NORMAL
- en: Using a JavaScript function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is another way to provide data to the chart component that is via a JavaScript
    function. We can use the name of the JavaScript function in the `<apex:chart>`
    component. This JavaScript function is the data provider and it can be defined
    in the Visualforce page or linked to the Visualforce page. We can use this JavaScript
    function to manipulate the data before sending it to the `<apex:chart>` component.
    See the JavaScript Remoting for Apex Controllers section for more information
    about using JavaScript remoting in Visualforce. The following is a simple example
    of a JavaScript function with the `<apex:chart>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following class is the associated custom controller of the preceding page.
    We have defined the remote method with the `@RemoteAction` annotation. That remote
    method transforms the data into the chart component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using a JavaScript array
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another way of providing data is by using a JavaScript array. We can use Visualforce
    charting without using any custom controller by using a JavaScript array which
    can be Salesforce data or non-Salesforce data. We can query the Salesforce data
    in JavaScript code by using the Ajax Toolkit API which is a JavaScript wrapper
    around the API and we can build non-Salesforce data sources by using a JavaScript
    array in our own JavaScript code. Then we can use the array in the chart component
    by providing the name of the array to the `<apex:chart>` component. This method
    is useful when your data source relies only on the client side, and not on the
    server side. The following example illustrates how to define a Visualforce chart
    with a JavaScript array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Visualforce charts are more customizable. We can customize the look and feel
    of elements, markers, the opacity of fill colors/lines, and can combine various
    data sources.
  prefs: []
  type: TYPE_NORMAL
- en: A complex chart with Visualforce charting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use Visualforce charting to build complex charts that represent various
    data series in one chart. For example, we can build a chart with multiple data
    series. The following example shows the number of items sold in three different
    years. The code shows the custom controller the custom controller. The `getComplexChartData()`
    method prepares the data for the chart component. This controller also has a `@RemoteAction`
    method to get the data to the chart component. But this example hasn't used the
    JavaScript remoting. It illustrates the way of reusing the data generation method
    for both server-side and JavaScript remoting methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot represents a chart with three line series. This chart
    illustrates the number of items sold in three different years:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A complex chart with Visualforce charting](img/9818_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The output of the complex chart example
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The x and y axes need to be defined in line and bar charts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The markup of the complex chart example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we became familiar with Visualforce charting which allows us
    to build customized charts based on our data. We learned that Visualforce charting
    is a JavaScript-based feature. Therefore, we have learned about the limitations
    and considerations of Visualforce charting. We have also seen how to create simple
    and complex charts by using Visualforce charting components.
  prefs: []
  type: TYPE_NORMAL
