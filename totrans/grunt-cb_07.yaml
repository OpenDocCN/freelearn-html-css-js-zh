- en: Chapter 7. Deploying to the End User
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to Rackspace Cloud Files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying to AWS S3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying over FTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying over SFTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying to GitHub Pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invalidating an AWS CloudFront distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running commands over SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once our web application is built and its assets are optimized for optimal delivery
    and consumption, it's time to make it available to our intended audience. This
    primarily involves transferring the assets that make up the application to some
    form of file hosting system that is dedicated to the delivery of static content
    over the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: The primary points of focus in deploying the assets of a web application to
    the Internet are availability, speed, and service integration. Assets should always
    be available from anywhere in the world, be delivered as fast as possible, and
    the host system should allow us to easily upload and manage our content.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to Rackspace Cloud Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `cloudfiles (0.3.0)` plugin to upload
    files to a **Rackspace Cloud Files** container.
  prefs: []
  type: TYPE_NORMAL
- en: The Cloud Files service has the added benefit of providing a **Content Delivery
    Network** (**CDN**) service to all content hosted on it, by default.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure that we created
    in the *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: The following example will also require a **Rackspace Cloud** account with an
    API key defined. We'll also need to create a Cloud Files container named `myapp`
    and configure it to host a **static website**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Refer to the following URL for more information on configuring a Cloud Files
    container to host a static website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.rackspace.com/files/api/v1/cf-devguide/content/Create_Static_Website-dle4000.html](http://docs.rackspace.com/files/api/v1/cf-devguide/content/Create_Static_Website-dle4000.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps take us through creating a simple HTML document and a task
    that uploads it to a Cloud Files container:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `cloudfiles` plugin,
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we''ll create a simple HTML document called `index.html` in the project
    directory, and provide it with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we''ll add the following `cloudfiles` task to our configuration, which
    will indicate that we''d like to have the `index.html` file uploaded to the `myapp`
    Cloud Files container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `user` and `key` options are filled with placeholder values to indicate
    that you should make use of your own Rackspace Cloud account's username and API
    key.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You'll probably want to have the `user` and `key` options stored in a local
    file, as opposed to a shared repository. Refer to the *Importing external data*
    recipe of [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with
    Grunt"), *Getting Started with Grunt* for an example of how to import configurations
    from external files. Also, be sure to exclude files that contain access credentials
    from your project's code repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `region` option is used to indicate the geographical region of the hosted
    Cloud Files container. The desired region is indicated on creation of the container.
    For our example, we created a container in the `LON` region.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now run the task by using the `grunt cloudfiles` command, which should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can now ensure that the file has been uploaded to our container and is accessible
    via the Internet. To do this, we'll need to determine the target domain of the
    container from its settings and navigate to it in our browser. This should look
    something like the following:![How to do it...](img/image00274.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `cloudfiles` task provides us with several useful options that can be used
    in conjunction with its basic uploading feature. We'll be looking at uploading
    the contents of a directory to a destination directory.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading the contents of a directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case we'd like to upload the contents of a directory, we can make use of
    the standard globbing patterns supported by Grunt in the `src` option. We would,
    however, probably also want to make use of the `stripcomponents` option to remove
    the leading paths from the directory names of the destination files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example will upload the contents of the `www` directory to the
    `myapp` container, and strip the first path name from the target files when determining
    the destination file names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Uploading to a destination directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In case we''d like to upload files to a specific destination directory on our
    target container, we can indicate the target directory by using the `dest` option,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Deploying to AWS S3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `aws-s3 (0.12.3)` plugin to upload files
    to an **AWS S3 bucket**.
  prefs: []
  type: TYPE_NORMAL
- en: This service doesn't provide a CDN setup by default, but can be easily integrated
    with **AWS CloudFront** in order to speed up the distribution of the hosted files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure that we created
    in the *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the standard project setup, the following recipe will also require
    the setup of an **AWS user** with an **AWS access key**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Refer to the following URL for details on how to obtain your AWS security credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.aws.amazon.com/general/latest/gr/getting-aws-sec-creds.html](http://docs.aws.amazon.com/general/latest/gr/getting-aws-sec-creds.html)'
  prefs: []
  type: TYPE_NORMAL
- en: A bucket with a name in the `[name].myapp` format will also need to be created,
    with `[name]` being any unique name that you wish to use. The aforementioned user
    should also have full access granted to the created bucket using the **AWS IAM**
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Refer to the following URL for more information on how to grant a user account
    access to an S3 bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://blogs.aws.amazon.com/security/post/Tx3VRSWZ6B3SHAV/Writing-IAM-Policies-How-to-grant-access-to-an-Amazon-S3-bucket](http://blogs.aws.amazon.com/security/post/Tx3VRSWZ6B3SHAV/Writing-IAM-Policies-How-to-grant-access-to-an-Amazon-S3-bucket)'
  prefs: []
  type: TYPE_NORMAL
- en: In order for the bucket to behave as required, it should also be configured
    for **static website hosting**, and `index.html` should be defined as its **index
    document**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Refer to the following URL for more information on how to configure an AWS
    S3 bucket for static website hosting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.aws.amazon.com/AmazonS3/latest/dev/HowDoIWebsiteConfiguration.html](http://docs.aws.amazon.com/AmazonS3/latest/dev/HowDoIWebsiteConfiguration.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps take us through creating a sample HTML document and configuring
    a task that uploads it to an AWS S3 bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `aws-s3` plugin, as
    per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we''ll create a simple HTML document called `index.html` in the project
    directory, and provide it with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we''ll add the following `aws_s3` task to our configuration, which indicates
    that we''d like to upload the `index.html` file to the `gruntbook.myapp` bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `accessKeyId` and `secretAccessKey` options are filled with placeholder
    values to indicate that you should make use of your own AWS access credentials.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `accessKeyId` option should be set to an **access key ID**, generated for
    your user using the **AWS Identity and Access Management** (**IAM**) console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `secretAccessKey` option should be set to the **secret access key** that
    was generated for the specific access key ID that you specified in the `accessKeyId`
    option. Note that the secret access key is only displayed on creation of the access
    key ID, so you won't be able to find it in the IAM console if you didn't save
    it the first time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You'll probably want to have the `accessKeyId` and `secretAccessKey` options
    stored in a local file, as opposed to a shared repository. Refer to the *Importing
    external data* recipe of [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting
    Started with Grunt"), *Getting Started with Grunt* for an example of how to import
    configurations from external files. Also, be sure to exclude files that contain
    access credentials from your project's code repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `region` option is used to indicate the geographical region of the hosted
    bucket. The desired region is indicated on creation of the bucket. For our example,
    we created a container in the `eu-west-1` region.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note that the files configuration for this task supports all the standard Grunt
    options. You can read more about them at the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://gruntjs.com/configuring-tasks#files](http://gruntjs.com/configuring-tasks#files)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now run the task by using the `grunt aws_s3` command, which should produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can now ensure that the file has been uploaded to our container and is accessible
    via the Internet. To do this, we'll need to determine the endpoint of the bucket
    from its properties section and navigate to it in our browser. This should look
    something like the following:![How to do it...](img/image00275.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `aws_s3` task provides us with several useful options that can be used in
    conjunction with its uploading feature. We'll look at how to specify the accessibility
    of uploaded files and enable concurrent operations.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the accessibility of uploaded files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Every file uploaded to an AWS S3 bucket has a set of access permissions that
    indicate who has access to it. If we''d like to indicate a specific set of permissions,
    we can do so by using the `access` option. The following example sets the `access`
    option to `private`, indicating that all files uploaded should only be accessible
    to the user account that was used during the upload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A list of the possible values for the access option is in the documentation
    for the AWS `putObject` operation at the following URL (look under the ACL parameter):'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#putObject-property](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#putObject-property)'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling concurrent uploads
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The default behavior for the `aws_s3` task is to complete uploads, one after
    another. If we''d like to perform uploads in parallel, we can do so by making
    use of the `uploadConcurrency` option. In the following example, we indicate that
    we''d like to have a maximum of `3` files uploaded simultaneously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The previous example also demonstrates the configuration involved in recursively
    uploading the contents of an entire directory.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying over FTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will make use of the `ftp-push (0.3.2)` plugin to upload
    files to a hosting server, using the **File Transfer Protocol** (**FTP**).
  prefs: []
  type: TYPE_NORMAL
- en: FTP has been around since the early days of the Internet and is still in abundant
    use. As its name implies, it provides a way to transfer files over the Internet
    and as such, has been the staple for the deployment of resources to web servers
    since its inception.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure that we created
    in the *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the standard project setup, the following recipe will also require
    an existing user account on the targeted FTP-enabled server. Their credentials
    are usually provided by the hosting service or the systems administrator in charge
    of maintaining the server in question.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps take us through creating a simple HTML document and configuring
    a task that uploads it to a server using FTP:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `ftp-push` plugin, as
    per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we''ll create a simple HTML document called `index.html` in the project
    directory, and provide it with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we''ll add the following `ftp_push` task to our configuration and indicate
    that we''d like it to upload the `index.html` file to our hosting server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `username`, `password`, and `host` options are filled with placeholder values
    to indicate that you should make use of your own specific access credentials and
    hosting server address.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You'll probably want to have the `username` and `password` options stored in
    a local file, as opposed to a shared repository. Refer to the *Importing external
    data* recipe of [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started
    with Grunt"), *Getting Started with Grunt* for an example of how to import configurations
    from external files. Also, keep in mind that you should exclude files that contain
    access credentials from your project's code repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `host` option is used to specify the Internet address of the server that
    you'd like to upload files to. If you are not sure what this value should be,
    this type of information can usually be provided to you by the hosting provider
    or the systems administrator in charge of maintaining the server in question.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `dest` option is required to indicate the destination directory for the
    files that we'll be uploading. For our example, we'll indicate that files should
    be uploaded to the `www` directory on the hosting server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note that the files configuration for this task supports all the standard Grunt
    options. You can read more about them at the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://gruntjs.com/configuring-tasks#files](http://gruntjs.com/configuring-tasks#files)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now run the task by using the `grunt ftp_push` command, which should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `ftp_push` task cannot automatically create the destination directory,
    so the `www` directory needs to exist on the root of the FTP server before running
    this task.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Our `index.html` file should now be present on our hosting server and, if correctly
    configured, should be accessible via the Internet. Configuring a domain name to
    point to a site hosted in this fashion is beyond the scope of this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploying over SFTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `sftp` task, which is provided by the
    `ssh (0.12.2)` plugin to upload files to a hosting server, using the **SSH File
    Transfer Protocol** (**SFTP**).
  prefs: []
  type: TYPE_NORMAL
- en: The SFTP provides the same functionality as the regular FTP that was discussed
    in the previous recipe, but with benefits from an added layer of security by making
    use of the **Secure Shell** (**SSH**) network protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure that we created
    in the *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the standard project setup, the following recipe will also require
    an existing user account on the targeted SSH-enabled server. These credentials
    are usually provided by the hosting service or the systems administrator in charge
    of maintaining the targeted server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps take us through creating a simple HTML document and configuring
    a task that uploads it to the server using SFTP:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `ssh` plugin, as per
    the instructions provided in the `Installing a plugin` recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt").
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we''ll create a simple HTML document called `index.html` in the project
    directory, and providing it with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we''ll add the following `sftp` task to our configuration, which indicates
    that we''d like to have the `index.html` file uploaded to a specific host that
    supports SFTP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `username`, `password`, and `host` options are filled with placeholder values
    to indicate that you should make use of your own specific access credentials and
    hosting server address.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You'll probably want to have the `username` and `password` options stored in
    a local file, as opposed to a shared repository. Refer to the *Importing external
    data* recipe of [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started
    with Grunt"), *Getting Started with Grunt*, for an example of how to import configurations
    from external files. Also, keep in mind that you should exclude files that contain
    access credentials from your project's code repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `host` option is used to specify the Internet address of the server that
    you'd like to upload files to. If you are not sure what this value should be,
    this type of information can usually be provided to you by the hosting provider
    or the systems administrator in charge of maintaining the server in question.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `path` option is required to indicate the destination directory for the
    files that we'll be uploading. For our example, we'll indicate that files should
    be uploaded to the `www` directory on the hosting server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note that the files configuration for this task supports all the standard Grunt
    options. You can read more about them at the following URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://gruntjs.com/configuring-tasks#files](http://gruntjs.com/configuring-tasks#files)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now run the task by using the `grunt sftp` command, which should produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `sftp` task cannot automatically create the destination directory,
    so the `www` directory needs to exist on the root of the FTP server before running
    this task.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Our `index.html` file should now be present on our hosting server and, if correctly
    configured, should be accessible via the Internet. Configuring a domain name to
    point to a site hosted in this fashion is beyond the scope of this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `sftp` task provides us with several useful options that can be used in
    conjunction with its uploading feature. We'll look at how to use a private key
    and passphrase and using an SSH agent.
  prefs: []
  type: TYPE_NORMAL
- en: Using a private key and passphrase
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case we'd like to make use of a private key and passphrase to access our
    host server, we can do so by using the `privateKey` and `passphrase` options.
    In the following example, we will load our private key from the usual location
    by using the `grunt.file.load` function and provide the passphrase that was used
    to lock it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Using an SSH agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we often make use of SSH to access our servers, we're probably better off
    making use of an **SSH agent** to store our unencrypted private key after unlocking
    it the first time during our session. This will allow us to access all the services
    that make use of our **public key**, without having to enter the passphrase again
    for the duration of our user session.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most Unix-like (this includes OS X) operating systems should have an SSH agent
    installed and running by default, in which case the following example should work
    without any initial steps. A Windows user will have to manually install and configure
    an SSH agent.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example makes use of an SSH agent by indicating path to the socket
    file using the `agent` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most SSH agent programs that come packaged with operating systems follow the
    convention of providing the socket on which it runs by using the `SSH_AUTH_SOCK`
    environment variable. In our example, we use the standard Node.js `process.env`
    object to retrieve the value of this environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to GitHub Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `gh-pages (0.10.0)` plugin to publish
    our site to the **GitHub Pages** service.
  prefs: []
  type: TYPE_NORMAL
- en: The GitHub Pages service provides a simple way for GitHub users to host static
    sites related to themselves, their organizations, or their projects. At the core
    of this service lies the standard **GitHub** service that provides hosting for
    **Git**-based code repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure that we created
    in the *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the standard project setup, the following recipe will require
    a GitHub user account that has the appropriate public key (SSH) associated with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Please refer to the following URL for help to create and set up SSH keys for
    your GitHub account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://help.github.com/articles/generating-ssh-keys/](https://help.github.com/articles/generating-ssh-keys/)'
  prefs: []
  type: TYPE_NORMAL
- en: We'll also need to create a repository called `myapp` on GitHub, clone it, and
    use it as our project folder.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about how to create and clone a repository on GitHub at the
    following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://help.github.com/articles/creating-a-new-repository/](https://help.github.com/articles/creating-a-new-repository/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://help.github.com/articles/cloning-a-repository/](https://help.github.com/articles/cloning-a-repository/)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps take us through creating a simple HTML document and configuring
    a task that publishes it to the site of GitHub Pages for our project:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `gh-pages` plugin as
    per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we''ll create a simple HTML document called `index.html` in the `www`
    directory, and provide it with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we''ll add the following `gh-pages` task to our configuration and indicate
    that we''d like to have the contents of the `www` directory uploaded to our project''s
    repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `base` option is used to provide the directory that contains our site. In
    the case of our example, we'll use the `www` directory, as that is where we created
    our sample HTML file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `src` option is used to provide files in the base directory which should
    be transferred to the target repository. For our example, we set it to `**/*`
    to indicate that we'd like to have all files in the base directory transferred.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now run the task by using the `grunt gh-pages` command, which should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We should now be able to view our project site by navigating to the `[name].github.io/myapp`
    domain name that was automatically assigned to our project by GitHub. Doing so
    should look something like the following:![How to do it...](img/image00276.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Invalidating an AWS CloudFront distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we make use of the `invalidate-cloudfront (0.1.6)` plugin to
    invalidate a AWS CloudFront distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS CloudFront service provides us with an easy way to distribute the files
    of our websites and applications over a CDN with edge locations all over the world.
    This leads to faster response times for our intended audience, no matter where
    they may be in the world.
  prefs: []
  type: TYPE_NORMAL
- en: A side effect of having our file hosted on a CDN is that whenever they are updated
    at the source, the updates may take a while to reflect at the various edge locations,
    potentially keeping critical updates from our audience. AWS CloudFront does, however,
    allow us to indicate that we'd like to refresh the content that is stored on the
    CDN by invalidating a distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure that we created
    in the *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the standard project setup, the following recipe will also require
    the setup of an AWS user with an AWS access key.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Refer to the following URL for details of how to obtain your AWS access credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.aws.amazon.com/general/latest/gr/getting-aws-sec-creds.html](http://docs.aws.amazon.com/general/latest/gr/getting-aws-sec-creds.html)'
  prefs: []
  type: TYPE_NORMAL
- en: An AWS CloudFront distribution will also need to be created so that we can use
    it in our recipe. For our example, we'll have it distribute the files contained
    in the bucket that we created in the *Deploying to AWS S3* recipe, earlier in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Refer to the following URL for more information on how to create an AWS CloudFront
    distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-creating.html](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-creating.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps take us through creating and configuring a task that invalidates
    a specific AWS CloudFront distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `invalidate-cloudfront`
    plugin, as per the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we''ll add the following `invalidate_cloudfront` task to our configuration
    and indicate that we''d like to have each of the files that can be found in the
    `www` directory refreshed on the CloudFront CDN:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `key` and `secret` options are filled with placeholder values to indicate
    that you should make use of your own specific access credentials.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `key` option should be set to an **access key ID** that was generated for
    your user, using the AWS IAM console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `secret` option should be set to the secret access key that was generated
    for the specific access key ID, you specified in the `key` option. Note that the
    secret access key is only displayed on creation of the access key ID, so you won't
    be able to find it in the IAM console if you didn't save it the first time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You'll probably want to have the `key` and `secret` options stored in a local
    file, as opposed to a shared repository. Refer to the *Importing external data*
    recipe of [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with
    Grunt"), *Getting Started with Grunt* for an example of how to import configurations
    from external files. Also, keep in mind that you should exclude files that contain
    security credentials from your project's code repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now run the task by using the `grunt invalidate_cloudfront` command,
    which should produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The targeted CloudFront distribution should now be in the process of being invalidated.
    If there are any changes made to the underlying content, it should be reflected
    at all edge locations on the CloudFront CDN within a few minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running commands over SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `sshexec` task provided by the `ssh (0.12.2)`
    plugin to run commands on a remote server over the SSH network protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Running commands on a remote server can become a necessity during the deployment
    process, and when we run commands, we'd like be sure that it is being done securely.
    The SSH protocol is the de facto standard to run commands on remote servers, due
    in part to the improved security that it provides by encrypting all data that
    is sent over the network.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure that we created
    in the *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the standard project setup, the following recipe will also require
    an existing user account on the targeted SSH-enabled server. These credentials
    are usually provided by the hosting service or administrator who maintains the
    targeted server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps take us through creating and configuring a task that will
    run a command that prints the date and time on a remote server:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `ssh` plugin, as per
    the instructions provided in the *Installing a plugin* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we''ll add the following `sshexec` task to our configuration and set it
    up to print the date and time on our remote server by running the `date` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `username`, `password`, and `host` options are filled with placeholder values
    to indicate that you should make use of your own specific access credentials and
    hosting server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You'll probably want to have the `username` and `password` options stored in
    a local file, as opposed to a shared repository. Refer to the *Importing external
    data* recipe of [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started
    with Grunt"), *Getting Started with Grunt* for an example of how to import configurations
    from external files. Also, keep in mind that you should exclude files that contain
    access credentials from your project's code repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `host` option is used to specify the Internet address of the server that
    you'd like to upload files to. If you are not sure what this value should be,
    this type of information can usually be provided to you by the hosting provider
    or the systems administrator in charge of maintaining the server in question.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now run the task by using the `grunt sshexec` command, which should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we can see a date and time returned after running the command, we have successfully
    run a command on the remote server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `sshexec` task provides us with several useful options that can be used
    in conjunction with its uploading feature. We'll look at how to use a private
    key and passphrase and using an SSH agent.
  prefs: []
  type: TYPE_NORMAL
- en: Using a private key and passphrase
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case we'd like to make use of a private key and passphrase to access our
    host server, we can do so using the `privateKey` and `passphrase` options. In
    the following example, we will load our private key from the usual location by
    using the `grunt.file.load` function and provide the passphrase that was used
    to lock it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Using an SSH agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we often make use of SSH to access our servers, we're probably better off
    making use of an SSH agent to store our unencrypted private key after unlocking
    it the first time during our session. This will allow us to access all the services
    that make use of our public key, without having to enter the passphrase again
    for the duration of our user session.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most *nix (this includes OS X) operating systems should have an SSH agent installed
    and running by default, in which case the following example should work without
    any initial steps. A Windows user will have to manually install and configure
    an SSH agent.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example makes use of an SSH agent by indicating the socket that
    runs with the `agent` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most SSH agent programs that come packaged with operating systems follow the
    convention of providing the socket on which it runs, using the `SSH_AUTH_SOCK`
    environment variable. In our example, we made use of the standard Node.js `process.env`
    object to retrieve the value of this environment variable.
  prefs: []
  type: TYPE_NORMAL
