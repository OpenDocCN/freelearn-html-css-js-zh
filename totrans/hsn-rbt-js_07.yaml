- en: Using Servos for Measured Movement
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve looked at motors, let''s look at a more precise way to add
    to movement to our projects: the servo. We''ll dive into how to wire up one servo,
    then another, and how to code both a single servo and multiple ones.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Differences between motors and servos
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a servo working with Johnny-Five
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project – two servos and the REPL
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project – the continuous servo
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll need your Pi, Cobbler, PWM hat, 2 hobby servos, and the AA battery pack
    from [Chapter 6](4135cf2d-d967-49b3-bf2b-37f82e7f5f62.xhtml), *Using Motors to
    Move Your Project*. You'll also need a continuous servo. Finally, you'll need
    your light sensor. Optional, but helpful, is a Popsicle or other small stick and
    some tape for turning our servo into a meter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter is available at: [https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter07](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter07).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Differences between motors and servos
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The average hobby servo looks like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4fe97e2a-ac4e-4b33-8685-1737f2be8447.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: 'Also pictured are common accessories: some different arms, and mounting screws/washers.
    The wire ends terminate in a solid socket of three: perfect for attaching to our
    PWM hat.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: The motors we worked with last chapter have some very basic differences, and
    we should explore them before we start our servo project.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Calculated movements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike the motors we dealt with in the previous chapter, you can make precise
    and calculated movements with a servo. Name a degree between 0 and 180 on a regular
    servo, and it will go. Motors (excluding stepper motors, which aren't covered
    in this book) cannot make these precise movements. So if you're looking to make
    a wheel go and you don't care about accurate movements, use a motor. When you're
    looking to make the joint of a limb that needs to move precisely with other joints,
    time to use a servo.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Regular versus continuous servos
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two kinds of servos, and they look remarkably alike. The other kind
    is called a continuous servo. They work very similar to regular servos in Johnny-Five,
    as you can see in the documentation for *servo.continuous*, which is on the same
    page as the servo documentation. The main difference is that while a regular servo
    can only go 180 degrees, a continuous one can go full 360 and continue spinning
    in the same direction indefinitely. Some favor using these to move wheels in their
    vehicle projects, and that's just fine!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Powering servos and motors
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is where servos and motors are very similar: while one servo tends to
    take less power than a motor, many projects make use of more servos than they
    would motors, and that can mean a strain on your Pi. If you add a lot of servos,
    you''re going to want to provide external power to the PWM hat; many use 3-4 AA
    battery packs. I recommend using the one we used for motors in [Chapter 6](4135cf2d-d967-49b3-bf2b-37f82e7f5f62.xhtml),
    *Using Motors to Move Your Project*.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Powering your servos off of the Pi can have consequences that you wouldn't expect--
    if you're getting memory leak issues while running servo code, it can be because
    you're pulling too much power from the Pi!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: In general, if you're having weird issues with running servo code, make sure
    your servos are adequately powered by an external source.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Getting a servo working with Johnny-Five
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get a servo working with Johnny-Five, we'll look at the Johnny-Five servo
    object, talk about wiring the servo to our PWM hat, and write our first piece
    of code to get the servo to sweep back and forth.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: The Johnny-Five servo object
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Looking at the servo page in the API section of the Johnny-Five documentation,
    we will look first for our constructor. Because we''re still using the PCA9685
    PWM hat, our constructor will look like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As for moving the servo, there are a few method described in the docs to move
    the servo. The first move can be to a fixed position:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Or, another is to sweep back and forth, either as far back and forth as possible,
    or between a range:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also stop a moving servo:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we have a good grasp on coding our servo in Johnny-Five, let's wire
    up a servo and test our new knowledge.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Wiring the servo to our PWM hat
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wiring the servo to the PWM hat is relatively simple; you need to line up the
    3-pin socket of the servo to the column of pins you want. You also need to attach
    the power leads of the shield to AA battery pack from [Chapter 6](4135cf2d-d967-49b3-bf2b-37f82e7f5f62.xhtml), *Using
    Motors to Move Your Project*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc2a8e90-51b4-4a41-8a73-3332e0af8115.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: I find that figuring out which pin is ground, then making sure that socket is
    on the bottom, helps. Ground wires on servos are typically black or brown in color.
    Then, line up the socket and slide it onto the pins in the first column (pin 0).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca2ade60-1337-4608-b729-b5d48ca94565.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: We've hooked up our servo and given power to the PWM hat, so let's code up a
    servo.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Coding your first servo sweep
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a file called `single-servo.js`, we''re going to set up our board, the our
    servo, and when it''s ready, tell it to sweep back and forth:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Move the file into its own folder on the Pi, navigate to that folder in your
    Pi SSH session, and run the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You should see the servo move back and forth. Great! Now it's time to control
    two servos using the Johnny-Five Servos object and the command-line REPL.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Project – two servos and the REPL
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have one servo up and running, we're going to wire up a second one
    and use the REPL to explore the Johnny-Five Servos object, which is meant to help
    control several servos at once.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: First, let's wire up our second servo.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up a second servo
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take the second servo, figure out which side is ground, put that one on the
    bottom, and slide the three-pin socket over the pins in the second column (pin
    1):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2de508fb-45f0-441c-a334-f848908783c1.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: Now that we've wired up a second servo, let's start coding our Johnny-Five servos
    object!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Using the Johnny-Five servos object
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Johnny-Five servos object is meant to help you group servos in ways that
    make sense for projects with many servos, such as hexapods with six legs, each
    containing multiple servos.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a `Servos` object in a few different ways; the way we will use
    is to pass an array of constructed `servo` objects:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is where the magic happens—now that our `servo` objects are grouped in
    a `Servos` object, we can control them both independently and as a group:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And *all servo object functions are available on the Servos object.*
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Let's add this to our code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Servos object to our code
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the same folder as `single-servo.js`, create a new file, `servos-repl.js`,
    and copy the contents of `single-servo.js` into it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in the `board.on(''ready'')` handler, rename `servo` to `servoOne` and
    add a constructor for `servoTwo` on pin `1` of the PWM hat:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, we''ll construct a `Servos` object containing `servoOne` and `servoTwo`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now that our servos are coded, let's add Johnny-Five REPL functionality so we
    can control our servos from the command line.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Adding in REPL functionality
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, delete the `servo.sweep()` line from `servos-repl.js`, as it''ll cause
    an error now. Instead, place this code, which will allow us to access both of
    our servos and our servos group object from the command-line, on the Pi:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now we're ready to play with our servos!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Playing with our servos on the command line
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Load the folder onto the Pi, navigate to the folder in your Pi SSH session,
    and run the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once you see `Board Initialized`, the REPL is ready for commands. Try these
    out for starters:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Use the Johnny-Five documentation on servo to see what other fun things you
    can try with your servos from the command line!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Project – light meter with the servo
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's build a project where our servo servos as a light meter that sweeps between
    0 and 180 degrees based on the reading from the light sensor.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Adding in the light sensor
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we need to wire the light sensor to the board. Remember, I²C devices
    can share an SDA and SCL pin as long as they have different addresses (which the
    TSL2591, at 0x29, and the PWM hat, at 0x40, do).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de142e6a-1142-4f49-a35a-a2307c5ae823.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: Now that we've wired up the sensor, we'll take on the (optional) task of modifying
    our servo to look more like a meter.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Making the servo into a meter
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take the servo horn and, with the center of the horn facing away from you,
    move it as far to the left as possible (0 degrees). *Do not use a lot of force
    or you''ll strip the gears.* Then, use the tape to tape your stick to the servo
    horn to make it appear longer. then, you can tape it down to a desk or onto a
    wall, with your meter pointing left. You can see my attempt in the following diagram:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd241b33-a6bc-459b-81ad-f62539f44f77.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: Now that we have our light sensor wired up and our meter cobbled together, let's
    code our light meter.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Coding the project
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new file in your `project` folder called `light-meter.js`. Set up
    your normal scaffolding: requiring in Johnny-Five and Raspi-IO, setting up our
    `Board` object, and creating the `board.on(''ready'')` handler:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Inside the `board.on(''ready'')` handler, construct your `Servo` and `Light`
    objects:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, we need to build a `lightSensor.on(''change'')` handler. We''re going
    to use the `Sensor.scaleTo([min, max])` to scale the 0-255 input of the light
    sensor to the `0`-`180` output of the `servo`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: And that's it! Let's get it on the Pi and see it at work.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Running and using our light meter
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Load your `project` folder onto the Pi, navigate to the folder in your Pi SSH
    session, and run the following command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Then, cover the light sensor, or shine a light onto it—the servo should move
    back and forth accordingly.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've explored the servo as a means of communicating data as well as
    creating motion, let's take a look at the continuous servo.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Project – the continuous servo
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Continuous servos are a little like a motor combined with a regular servo:
    you lose the ability to go to specific degrees like a regular servo, but you can
    stop instantly instead of coasting to a stop like many motors. You can tell a
    continuous servo to move clockwise or counterclockwise at different speeds, and
    you can tell it to stop.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Let's wire up a continuous servo and play with its abilities via the Johnny-Five
    REPL.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up the servo
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The only difference in the wiring is continuous servos look different from regular
    servos in that nearly all have a disc instead of a horn. And most have red, white,
    and black power, signal, and ground wires, respectively.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37eb26e1-e496-42ef-8d94-5cb089f8b34a.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
- en: (Fritzing didn't have a continuous servo object, so we'll have to make due.)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Continuous servo constructor and methods
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The constructor for the continuous servo is reminiscent of the RGB LED constructor,
    in that it is a property of the `Servo` object. Otherwise, it looks very similar
    to the `Servo` constructor with our PWM hat:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'There are three methods we can use with the continuous servo:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that we know how to use it and have it wired up, let's write a quick program
    that lets us play with our continuous servo in the REPL.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Using the REPL with the continuous servo
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a file in your `project` folder called `continuous-servo-repl.js`, and
    start with your usual setup:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, in our `board.on(''ready'')` handler, construct the `Servo.Continuous`
    object:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在我们的`board.on('ready')`处理程序中，构造`Servo.Continuous`对象：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, after the constructor, inject the continuous servo into the REPL so
    we can use it:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在构造函数之后，将连续伺服电机注入到REPL中，这样我们就可以使用它了：
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now we can load it up and try it out!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以加载它并尝试一下！
- en: Playing with the continuous servo in the REPL
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在REPL中玩连续伺服电机
- en: 'Load your `project` folder onto the Pi, navigate to the folder in your Pi SSH
    session, and run the following command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的`project`文件夹加载到Pi上，在Pi的SSH会话中导航到该文件夹，并运行以下命令：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once you see `Board Initialized`, you can try controlling the continuous servo
    by entering commands into the Johnny-Five REPL:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你看到`Board Initialized`，你就可以通过在Johnny-Five REPL中输入命令来尝试控制连续伺服电机：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: It is because of the ability to change direction and stop quickly that some
    prefer continuous servos to motors for wheeled robots—it's always great to have
    options.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 正是因为能够快速改变方向和停止的能力，有些人更倾向于使用连续伺服电机而不是电机来为轮式机器人提供动力——总是有选择总是好的。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how servos differ from motors, and the difference
    between regular and continuous servos. We also learned about the constructor for
    the Johnny-Five servo object and its functions. Next, we built a project that
    taught us how to group servos with the servos object, and control them from the
    Pi's command line via REPL. Then, we built a project that showed the ability of
    the servo to convey information as well as create movement by building a light
    meter. Finally, we learned more about and played with continuous servos.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了伺服电机与电机的区别，以及定期伺服电机和连续伺服电机的区别。我们还学习了Johnny-Five伺服对象的构造函数及其功能。接下来，我们构建了一个项目，教我们如何使用伺服对象分组伺服电机，并通过REPL从Pi的命令行控制它们。然后，我们构建了一个项目，展示了伺服电机通过构建光电池传递信息以及通过创建运动的能力。最后，我们更多地了解了连续伺服电机，并与之互动。
- en: Questions
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the differences between servos and motors?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 伺服电机和电机的区别是什么？
- en: What is the difference between regular and continuous servos?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定期伺服电机和连续伺服电机的区别是什么？
- en: Why do servos require an external power source?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么伺服电机需要外部电源？
- en: When would you use servos over motors?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会在什么情况下使用伺服电机而不是电机？
- en: What are the benefits of the servos object?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 伺服对象有哪些好处？
