- en: Chapter 1. Instant RaphaelJS Starter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to *Instant RaphaelJS Starter*.
  prefs: []
  type: TYPE_NORMAL
- en: This book has especially been created to provide you with all the information
    that you need to set up RaphaelJS. You will learn the basics of RaphaelJS, get
    started with building your first script, and discover some tips and tricks for
    using RaphaelJS.
  prefs: []
  type: TYPE_NORMAL
- en: 'This document contains the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '*So what is RaphaelJS?* – Find out what RaphaelJS actually is, what you can
    do with it, and why it''s so great.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Installation* – Learn how to download and install RaphaelJS with minimum fuss
    and then set it up so that you can use it as soon as possible.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Quick start* – This section will show you how to perform one of the core tasks
    of RaphaelJS, that is, creating shapes. Follow the steps to create your own shape,
    which will be the basis of most of your work in RaphaelJS.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Top features you need to know about* – Here you will learn how to perform
    five tasks with the most important features of RaphaelJS.'
  prefs: []
  type: TYPE_NORMAL
- en: '*People and places you should get to know* – Every open source project is centered
    around a community. This section provides you with many useful links to the project
    page and forums, as well as a number of helpful articles, tutorials, blogs, and
    the Twitter feeds of RaphaelJS super contributors.'
  prefs: []
  type: TYPE_NORMAL
- en: So, what is RaphaelJS?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RaphaelJS is a vector graphics library, which is used to draw objects in the
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will see what RaphaelJS is, how it is different from other
    similar drawing libraries, and how it sets itself apart from **HTML5 Canvas**.
  prefs: []
  type: TYPE_NORMAL
- en: Two-headed and three-lettered
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Almost a decade ago, we had a great technology called **Scalable Vector Graphics**
    (**SVG**), which was derived from **Vector Markup Language** (**VML**) to draw
    simple to complex 2D graphics on browsers. SVG was a **World Wide Web Consortium**
    (**W3C**) specification and was there lingering in the minds of advanced developers
    for a decade or so. VML, on the other hand, was Microsoft's specification and
    existed even before SVG. Though SVG was inspired from VML, they were never fond
    of each other and never co-existed on the same browser. SVG ran on all browsers
    except Internet Explorer (IE 9 and above supports SVG) and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: A two-headed and three-lettered headache.
  prefs: []
  type: TYPE_NORMAL
- en: The marriage of two problems and the birth of RaphaelJS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SVG was a beautiful baby but no one wanted the labor pains—coding using SVG
    and VML for cross-browser consistency was so much of a serious pain that most
    developers simply used images. So we had two different technologies, both doing
    the same thing but they were both significantly different in their syntaxes and
    never ran on the same browser. It seemed like there was a problem in getting them
    to peacefully co-exist.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript – the binder of oddities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScript bound these two giants together and out of their marriage was born
    RaphaelJS, inheriting the best charms of both parents. It has the ability to scale
    almost any browser's turf and dance to any developer's tune.
  prefs: []
  type: TYPE_NORMAL
- en: The solution—RaphaelJS.
  prefs: []
  type: TYPE_NORMAL
- en: Browser support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most browsers support SVG and all versions of IE from IE 5.0 onwards support
    VML. Since RaphaelJS was developed to make the most of SVG and VML, it can practically
    run in almost any browser, making it more reliable.
  prefs: []
  type: TYPE_NORMAL
- en: RaphaelJS—the amphibian
  prefs: []
  type: TYPE_NORMAL
- en: What is RaphaelJS and what is not RaphaelJS?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now know what RaphaelJS is—it's a combination of SVG and VML using whichever
    of these two technologies the current browser supports, therefore it is versatile
    and reliable. But it's equally important to also know what is not RaphaelJS.
  prefs: []
  type: TYPE_NORMAL
- en: A little about vector and raster graphics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Just like the world is of two primary states water and land, graphics are of
    two primitive types—vector and raster. Vector graphics are drawn using geometrical
    primitives like lines, curves, ellipses, and so on. Various such primitives join
    together and form a graphic. Vector graphics are drawn on the screen mathematically.
    They are scalable without loss in quality. Raster graphics, on the other hand,
    are pixel-based and are not scalable. The main advantage with vector graphics
    is that they are scalable and are also real objects, meaning we can fiddle with
    them and manipulate them dynamically. The following diagram shows the difference
    between raster (bitmap) and vector graphics:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A little about vector and raster graphics](img/9857OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Difference between raster (bitmap) and vector graphics
  prefs: []
  type: TYPE_NORMAL
- en: RaphaelJS as a vector
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: RaphaelJS is a vector graphics library, therefore the drawings are real DOM
    objects. Thus they can be dynamically accessed, manipulated, resized, and practically
    hammered into anything you want in runtime. Best of all is that they can be assigned
    events like `click`, `mouseover`, `mouseleave`, and so on. The capabilities of
    RaphaelJS are just incredible.
  prefs: []
  type: TYPE_NORMAL
- en: Raphael uses vector graphics and HTML 5 Canvas uses raster graphics.
  prefs: []
  type: TYPE_NORMAL
- en: The x, y positioning that RaphaelJS uses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: RaphaelJS uses the x, y positioning system to draw. The top-left corner of the
    screen is 0,0 and the horizontal scale is the x axis and the vertical scale is
    the y axis.
  prefs: []
  type: TYPE_NORMAL
- en: So if the code says (15,20) then it means that the point will be at 15 points
    from the x axis (horizontal) and 20 points from the y axis (vertical).
  prefs: []
  type: TYPE_NORMAL
- en: RaphaelJS is a vector graphics-based library built to make it easier to draw
    on the screen. RaphaelJS uses either SVG or VML, whichever the current browser
    supports. The drawings created using RaphaelJS are DOM objects and can be manipulated
    dynamically making them more versatile, they can also be assigned events such
    as `click`, `mouseover`, and `mouseleave`. All these amazing properties make RaphaelJS
    exciting to learn and use.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: RaphaelJS and HTML 5 Canvas are two different things entirely. Though they both
    appear to do similar things (drawing), they are different in how they do it. RaphaelJS
    is based on vector graphics and HTML5 Canvas is raster-based.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing and setting up RaphaelJS is very simple, it's as simple as downloading
    the latest RaphaelJS file and including it in HTML.
  prefs: []
  type: TYPE_NORMAL
- en: In three easy steps, you can install RaphaelJS and get it set up.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 – What do I need?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you install RaphaelJS, you will need to check that you have all of the
    following required elements:'
  prefs: []
  type: TYPE_NORMAL
- en: A web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A text editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 2 – Downloading RaphaelJS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to download RaphaelJS is as a minified JS, from [https://raw.github.com/DmitryBaranovskiy/raphael/master/raphael-min.js](https://raw.github.com/DmitryBaranovskiy/raphael/master/raphael-min.js).
  prefs: []
  type: TYPE_NORMAL
- en: RaphaelJS, unlike most libraries, does not have any other dependencies, so it's
    just `raphael.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Since RaphaelJS is a JavaScript plugin, the download link will show a plain
    JavaScript file in the browser. You should copy the text and paste it into a new
    file named `raphael.js` (or any name you prefer), and save it to your JavaScript
    directory or to any location in your server.
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 – Downloading RaphaelJS](img/9857OS_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Minified RaphaelJS code shown in the browser
  prefs: []
  type: TYPE_NORMAL
- en: Step 3 – Adding it to the HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Include it in the bottom section of your HTML page using the `<script>` tag
    and point the `src` attribute to the path where the `raphael.js` file is located.
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 – Adding it to the HTML](img/9857OS_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Script included at the bottom
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The browser reads the HTML code in a linear fashion. If there is a script tag
    at the top, the browser will download the script and it will start executing it.
    During this stage, the browser displays a blank white screen, as the rest of the
    page is yet to be downloaded. Therefore, it is recommended to include the script
    at the bottom of the page, so that the browser will download all the HTML code
    and the user will have some content on the screen, while JavaScript is being downloaded
    in the background.
  prefs: []
  type: TYPE_NORMAL
- en: And that's it!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By this point, you should have a working installation of RaphaelJS and are free
    to play around and discover more about it.
  prefs: []
  type: TYPE_NORMAL
- en: Quick start – creating your first shape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we will create the first shape in Raphael in two simple steps.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 – Creating a canvas to draw on
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Initializing a Raphael object is as simple as munching a banana, and there are
    two ways to munch.
  prefs: []
  type: TYPE_NORMAL
- en: It can either be created directly in the browser's viewport (viewable area)
    or in an element. It's usually advisable to create the Raphael object in an element,
    probably a `Div` tag. It's important to keep in mind that the paper (drawing area)
    is the boundary of the x, y grid, not the browser's window.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a canvas in the browser's viewport
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax for creating the Raphael object, which is the base for all other
    Raphael methods and functions, is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The four parameters inside the Raphael function are nothing but x-position,
    y-position, width, and height of the canvas to be created.
  prefs: []
  type: TYPE_NORMAL
- en: Since it is created in the browser's viewport, the positioning of the canvas
    will be absolute; therefore, it will overlap any HTML element underneath.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Here the Raphael object is initialized and assigned to a variable called `paper`.
    This variable will be christened with all the powers of RaphaelJS. It will, henceforth,
    become the **Raphael Paper Object**.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an object in an element (recommended)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To initiate the Raphael object inside an element, we must add the element ID
    or the element itself in the place of the positioning coordinates (x, y).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: That's it; we now have the engine up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Vrooom vrooom.
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 – Drawing the circle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is now time to shift gears.
  prefs: []
  type: TYPE_NORMAL
- en: The moment we assigned the Raphael object to the variable `paper`, it transforms
    itself into a magic wand, allowing us to pull off tricks to the best of our imagination.
  prefs: []
  type: TYPE_NORMAL
- en: There are certain predefined methods to create basic geometrical shapes such
    as circles, rectangles, and ellipses. Now we are going to spell out a circle with
    our shiny new wand.
  prefs: []
  type: TYPE_NORMAL
- en: A circle can be drawn using the `circle()` method. This method takes three parameters,
    namely x, y, and radius. Assign it to a variable that allows us to use it later
    in the code, specifically, to access the vector object easily for animations,
    transformations, and other effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding code is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 – Drawing the circle](img/9857OS_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A circle created using RaphaelJS
  prefs: []
  type: TYPE_NORMAL
- en: The attr() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We now have a smooth circle. It's absolutely fantastic, but wouldn't it be much
    better if we could add some color and other styles to it? RaphaelJS gives us the
    option to add styles to the object. It's a fairly straightforward method.
  prefs: []
  type: TYPE_NORMAL
- en: Styles and other customizations to our new circle are done using the `attr()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: This method takes the properties as parameters. The properties are entered as
    a collection of objects in key-value pairs. If you are familiar with jQuery, then
    its syntax is identical to jQuery's `attr()` method. This format is known as **JavaScript
    Object Notation** (**JSON**), to further clarify.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for this method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding code snippet is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The attr() method](img/9857OS_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A circle with styles applied using the `attr()` method
  prefs: []
  type: TYPE_NORMAL
- en: Raphael's paper allows easy integration of vector graphics in an HTML layout,
    which makes it even more appealing.
  prefs: []
  type: TYPE_NORMAL
- en: Paper—the shiny new wand.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a ton of attributes available for each object and a list of all the
    objects can be found at the Raphael documentation. The URL can be found at the
    *People and places you should get to know* section, as an entire list of attributes
    is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Top features you need to know about
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you learn to use RaphaelJS, you will realize that there are a plethora of
    things you can do with it. This section will teach you all about the most commonly
    performed tasks and most commonly used features in RaphaelJS.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this section, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Raphael element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manipulate the style of the element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transform the element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform animations on the element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add JavaScript events to the element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Raphael element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a Raphael element is very easy. To make it better, there are predefined
    methods to create basic geometrical shapes.
  prefs: []
  type: TYPE_NORMAL
- en: Basic shape
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are three basic shapes in RaphaelJS, namely circle, ellipse, and rectangle.
    Since the circle is already covered in the *Quick start* section, we are going
    to skip drawing a circle.
  prefs: []
  type: TYPE_NORMAL
- en: Rectangle
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can create a rectangle using the `rect()` method. This method takes four
    required parameters and a fifth optional parameter, `border-radius`. The `border-radius`
    parameter will make the rectangle rounded (rounded corners) by the number of pixels
    specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for this method is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'A normal rectangle can be created using the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding code snippet is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rectangle](img/9857OS_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Plain rectangle
  prefs: []
  type: TYPE_NORMAL
- en: Rounded rectangle
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following code will create a basic rectangle with rounded corners:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding code snippet is a rectangle with rounded corners,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rounded rectangle](img/9857OS_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Rectangle with rounded corners
  prefs: []
  type: TYPE_NORMAL
- en: We can create other basic shapes in the same way. Let's create an ellipse with
    our magic wand.
  prefs: []
  type: TYPE_NORMAL
- en: Ellipse
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An ellipse is created using the `ellipse()` method and it takes four required
    parameters, namely x,y, horizontal radius, and vertical radius. The horizontal
    radius will be the width of the ellipse divided by two and the vertical radius
    will be the height of the ellipse divided by two.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for creating an ellipse is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s consider the following example for creating an ellipse:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will create an ellipse of width 170 x 2 and height 100 x
    2.
  prefs: []
  type: TYPE_NORMAL
- en: 'An ellipse created using the `ellipse()` method is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ellipse](img/9857OS_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An Ellipse
  prefs: []
  type: TYPE_NORMAL
- en: Complex shapes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's pretty easy to create basic shapes, but what about complex shapes such
    as stars, octagons, or any other shape which isn't a circle, rectangle, or an
    ellipse.
  prefs: []
  type: TYPE_NORMAL
- en: It's time for the next step of Raphael wizardry.
  prefs: []
  type: TYPE_NORMAL
- en: Complex shapes are created using the `path()` method which has only one parameter
    called `pathString`. Though the path string may look like a long genetic sequence
    with alphanumeric characters, it's actually very simple to read, understand, and
    draw with.
  prefs: []
  type: TYPE_NORMAL
- en: Before we get into path drawing, it's essential that we know how it's interpreted
    and the simple logic behind those complex shapes. Imagine that you are drawing
    on a piece of paper with a pencil. To draw something, you will place the pencil
    at a point in the paper and begin to draw a line or a curve and then move the
    pencil to another point on the paper and start drawing a line or curve again.
    After several such cycles, you will have a masterpiece—at least, you will call
    it a masterpiece.
  prefs: []
  type: TYPE_NORMAL
- en: Raphael uses a similar method to draw and it does so with a path string.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical path string may look like this: `M0,0L26,0L13,18L0,0`. Let''s zoom
    into this path string a bit.'
  prefs: []
  type: TYPE_NORMAL
- en: The first letter says `M` followed by `0,0`. That's right genius, you've guessed
    it correctly.
  prefs: []
  type: TYPE_NORMAL
- en: It says *move to* `0,0` position, the next letter `L` is *line to* `26,0`. RaphaelJS
    will move to `0,0` and from there draw a line to `26,0`. This is how the path
    string is understood by RaphaelJS and paths are drawn using these simple notations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a comprehensive list of commands and their respective meanings:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Meaning expansion | Attributes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `M` | move to | (x, y) |'
  prefs: []
  type: TYPE_TB
- en: '| `Z` | close path | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| `L` | line to | (x, y) |'
  prefs: []
  type: TYPE_TB
- en: '| `H` | horizontal line to | x |'
  prefs: []
  type: TYPE_TB
- en: '| `V` | vertical line to | y |'
  prefs: []
  type: TYPE_TB
- en: '| `C` | curve to | (x1, y1, x2, y2, x, y) |'
  prefs: []
  type: TYPE_TB
- en: '| `S` | smooth curve to | (x2, y2, x, y) |'
  prefs: []
  type: TYPE_TB
- en: '| `Q` | quadratic Bézier curve to | (x1, y1, x, y) |'
  prefs: []
  type: TYPE_TB
- en: '| `T` | smooth quadratic Bézier curve to | (x, y) |'
  prefs: []
  type: TYPE_TB
- en: '| `A` | elliptical arc | (rx, ry, x axis-rotation, large-arc-flag, sweep-flag,
    x, y) |'
  prefs: []
  type: TYPE_TB
- en: '| `R` | Catmull-Rom-curve to* | x1, y1 (x y) |'
  prefs: []
  type: TYPE_TB
- en: The uppercase commands are absolute (`M20, 20`); they are calculated from the
    `0,0` position of the drawing area (paper). The lowercase commands are relative
    (`m20, 20`); they are calculated from the last point where the pen left off.
  prefs: []
  type: TYPE_NORMAL
- en: There are so many commands, which might feel like too much to take in—don't
    worry; there is no need to remember every command and its format. Because we'll
    be using vector graphics editors to extract paths, it's essential that you understand
    the meaning of each and every command so that when someone asks you "hey genius,
    what does this mean?", you shouldn't be standing there clueless pretending to
    have not heard it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the `path()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All these commands ("`M0,0L26,0L13,18L0,0`") use uppercase letters. They are
    therefore absolute values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output for the previous example is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Complex shapes](img/9857OS_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A triangle shape drawn using the path string
  prefs: []
  type: TYPE_NORMAL
- en: Extracting and using paths from an editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Well, a triangle may be an easy shape to put into a path string. How about a
    complex shape such as a star? It's not that easy to guess and manually find the
    points. It's also impossible to create a fairly more complex shape like a simple
    flower or a 2D logo.
  prefs: []
  type: TYPE_NORMAL
- en: Here in this section, we'll see a simple but effective method of drawing complex
    shapes with minimal fuss and sharp accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: Vector graphics editors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The vector graphics editors are meant for creating complex shapes with ease
    and they have some powerful tools in their disposal to help us draw. For this
    example, we'll create a star shape using an open source editor called Inkscape,
    and then extract those paths and use Raphael to get out the shape! It is as simple
    as it sounds, and it can be done in four simple steps.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 – Creating the shape in the vector editor
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let's create some star shapes in Inkscape using the built-in shapes tool.
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 1 – Creating the shape in the vector editor](img/9857OS_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Star shapes created using the built-in shapes tool
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 – Saving the shape as SVG
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The paths used by SVG and RaphaelJS are similar. The trick is to use the paths
    generated by the vector graphics editor in RaphaelJS. For this purpose, the shape
    must be saved as an SVG file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 – Saving the shape as SVG](img/9857OS_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Saving the shape as an SVG file
  prefs: []
  type: TYPE_NORMAL
- en: Step 3 – Copying the SVG path string
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The next step is to copy the path from SVG and paste it into Raphael's `path()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: SVG is a markup language, and therefore it's nested in tags. The SVG path can
    be found in the `<path>` and `</path>` tags. After locating the path tag, look
    for the `d` attribute. This will contain a long path sequence. You've now hit
    the bullseye.
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 – Copying the SVG path string](img/9857OS_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The path string is highlighted
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 – Using the copied path as a Raphael path string
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After copying the path string from SVG, paste it into Raphael's `path()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: That's it! We have created a complex shape in RaphaelJS with absolute simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using this technique, we can only extract the path, not the styles. So the background
    color, shadow, or any other style in the SVG won't apply. We need to add our own
    styles to the path objects using the `attr()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot depicting the complex shapes created in RaphaelJS using the path
    string copied from an SVG file is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 – Using the copied path as a Raphael path string](img/9857OS_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Complex shapes created in RaphaelJS using path string
  prefs: []
  type: TYPE_NORMAL
- en: Creating text
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Text can be created using the `text()` method. Raphael gives us a way to add
    a battery of styles to the text object, right from changing colors to animating
    physical properties like position and size.
  prefs: []
  type: TYPE_NORMAL
- en: The `text()` method takes three required parameters, namely, x,y, and the text
    string.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the `text()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: I am pretty sure that the `text-anchor` property is a bit heavy to munch. Well,
    there is a saying that a picture is worth a thousand words. The following diagram
    clearly explains the `text-anchor` property and its usage.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating text](img/9857OS_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A brief explanation of text-anchor property
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot of the text rendered using the `text()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating text](img/9857OS_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Rendering text using the text() method
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating the style of the element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `attr()` method not only adds styles to an element, but it also modifies
    an existing style of an element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example explains the `attr()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Transforming an element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: RaphaelJS not only creates elements, but it also allows the manipulating or
    transforming of any element and its properties dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating a shape
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By the end of this section, you would know how to transform a shape.
  prefs: []
  type: TYPE_NORMAL
- en: There might be many scenarios wherein you might need to modify a shape dynamically.
    For example, when the user mouse-overs a circle, you might want to scale up that
    circle just to give a visual feedback to the user. Shapes can be manipulated in
    RaphaelJS using the `transform()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Transformation is done through the `transform()` method, and it is similar to
    the `path()` method where we add the path string to the method. `transform()`
    works in the same way, but instead of the path string, it's the transformation
    string. There is only a moderate difference between a transformation string and
    a path string.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four commands in the transformation string:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `T` | Translate |'
  prefs: []
  type: TYPE_TB
- en: '| `S` | Scale |'
  prefs: []
  type: TYPE_TB
- en: '| `R` | Rotate in degrees |'
  prefs: []
  type: TYPE_TB
- en: '| `M` | Matrix |'
  prefs: []
  type: TYPE_TB
- en: The fourth command, `M`, is of little importance and let's keep it out of the
    way, to avoid confusion.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The transformation string might look similar to a path string. In reality, they
    are different, not entirely but significantly, sharing little in common. The `M`
    in a path string means *move to*, whereas the same in a transformation string
    means *Matrix*. The path string is not to be confused with a transformation string.
  prefs: []
  type: TYPE_NORMAL
- en: As with the path string, the uppercase letters are for absolute transformations
    and the lowercase for relative transformation. If the transformation string reads
    `r90T100,0`, then the element will rotate 90 degrees and move 100 px in the x
    axis (left). If the same reads `r90t100,0`, then the element will rotate 90 degrees
    and since the translation is relative, it will actually move vertically down 100px,
    as the rotation has tilted its axis.
  prefs: []
  type: TYPE_NORMAL
- en: I am sure the previous point will confuse most, so let me break it up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine a rectangle with a head and now this head is at the right side of the
    rectangle. For the time being, let''s forget about absolute and relative transformation;
    our objective is to:'
  prefs: []
  type: TYPE_NORMAL
- en: Rotate the rectangle by 90 degrees.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the rectangle 100px on the x axis (that is, 100px to the right).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's critical to understand that the elements' original values don't change
    when we translate it, meaning its x and y values will remain the same, no matter
    how we rotate or move the element.
  prefs: []
  type: TYPE_NORMAL
- en: Now our first requirement is to rotate the rectangle by 90 degrees. The code
    for that would be `rect.transform("r90")` where `r` stands for rotation—fantastic,
    the rectangle is rotated by 90 degrees. Now pay attention to the next important
    step. We also need the rectangle to move 100px in the x axis and so we update
    our previous code to `rect.transform("r90t100,0")`, where `t` stands for translation.
    What happens next is interesting—the translation is done through a lowercase `t`,
    which means it's relative. One thing about relative translations is that they
    take into account any previous transformation applied to the element, whereas
    absolute translations simply reset any previous transformations before applying
    their own.
  prefs: []
  type: TYPE_NORMAL
- en: Remember the head of the rectangle on the right side? Well, the rectangle's
    x axis falls on the right side. So when we say, move 100px on the x axis, it is
    supposed to move 100px towards its right side, that is, in the direction where
    its head is pointing. Since we have rotated the rectangle by 90 degrees, its head
    is no longer on the right side but is facing the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: So when we apply the relative translation, the rectangle will still move 100px
    to its x axis, but the x axis is now pointing down because of the rotation. That's
    why the rectangle will move 100px down when you expect it to move to the right.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when we apply absolute translation is something that is entirely
    different from the previous one. When we again update our code for absolute translation
    to `rect.transform("r90T100,0")`, the axis of the rectangle is not taken into
    consideration. However, the axis of the paper is used, as absolute transformations
    don't take previous transformations into account, and they simply reset them before
    applying their own. Therefore, the rectangle will move 100px to the right after
    rotating 90 degrees, as intended.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Absolute transformations will ignore all the previous transformations on that
    element, but relative transformations won't.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a grip on this simple logic will save you a lot of frustration in the
    future while developing as well as while debugging.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot depicting relative translation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Manipulating a shape](img/9857OS_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using relative translation
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot depicting absolute translation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Manipulating a shape](img/9857OS_01_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using absolute translation
  prefs: []
  type: TYPE_NORMAL
- en: Notice the gap on top of the rotated rectangle; it's moved 100px on the one
    with relative translation and there is no such gap on top of the rectangle with
    absolute translation.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the transform method will append to any transformation already applied
    to the element. To reset all transformations, use `element.transform("")`. Adding
    an empty string to the transform method will reset all the previous transformations
    on that element.
  prefs: []
  type: TYPE_NORMAL
- en: It's also important to note that the element's original x,y position will not
    change when translated. The element will merely assume a temporary position but
    its original position will remain unchanged. Therefore after translation, if we
    call for the element's position programmatically, we will get the original x,y,
    not the translated one, just so we don't jump from our seats and call RaphaelJS
    dull!
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of scaling and rotating a triangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot depicts the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Manipulating a shape](img/9857OS_01_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Scaling and rotating a triangle
  prefs: []
  type: TYPE_NORMAL
- en: The triangle is transformed using relative translation (t). Now you know the
    reason why the triangle has moved down rather than moving to its right.
  prefs: []
  type: TYPE_NORMAL
- en: Animating a shape
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What good is a magic wand if it can't animate inanimate objects! RaphaelJS can
    animate as smooth as butter almost any property from color, opacity, width, height,
    and so on with little fuss.
  prefs: []
  type: TYPE_NORMAL
- en: Animation is done through the `animate()` method. This method takes two required
    parameters, namely `final values` and `milliseconds`, and two optional parameters,
    `easing` and `callback`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the `animate()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Easing is that special effect with which the animation is done, for example,
    if the easing is `bounce`, the animation will appear like a bouncing ball. The
    following are the several easing options available in RaphaelJS:'
  prefs: []
  type: TYPE_NORMAL
- en: '`linear`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<` or `easeIn` or `ease-in`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`>` or `easeOut` or `ease-out`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<>` or `easeInOut` or `ease-in-out`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backIn` or `back-in`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backOut` or `back-out`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elastic`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bounce`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Callbacks are functions that will execute when the animation is complete, allowing
    us to perform some tasks after the animation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the example of animating the width and height of a rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a rectangle before animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating a shape](img/9857OS_01_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Rectangle before animation
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot demonstrating the use of a callback function when the animation
    is complete is as follows. The text **Animation complete** will appear in the
    browser after completing the animation.
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating a shape](img/9857OS_01_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Use of a callback function
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code animates the background color and opacity of a rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here the rectangle is animated from blue to gray and with an opacity from 1
    to 0.7 over a duration of 300 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Opacity in RaphaelJS is the same as in CSS, where 1 is opaque and 0 is transparent.
  prefs: []
  type: TYPE_NORMAL
- en: Animating transformations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The transformations can be animated using the transformation string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot of a rectangle before animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating transformations](img/9857OS_01_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before animation
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the same rectangle after animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating transformations](img/9857OS_01_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After animation
  prefs: []
  type: TYPE_NORMAL
- en: Animation can be done on almost any property.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Animation is an awesome feature and it's really smooth. But it comes at a cost;
    it takes up precious browser resources. It won't drain the browser leaving it
    out of juice, but reckless use of animation will have a significant impact on
    the end performance. Therefore, the developer must use animations wisely, so that
    it adds value to the entire user experience rather than annoying the user.
  prefs: []
  type: TYPE_NORMAL
- en: Adding events to Raphael elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding events to elements is like injecting life into them. They take the drawings
    to the next level. Events can be added to elements using the various event handlers.
    In fact, all the normal JavaScript events are available for any Raphael element.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of `click` and `mouseover` events.
  prefs: []
  type: TYPE_NORMAL
- en: Click event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The mouse click event can be added using the `click()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot demonstrating the click event handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Click event](img/9857OS_01_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click event handler
  prefs: []
  type: TYPE_NORMAL
- en: Mouseover event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The mouseover event can be added using the `mouseover()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `mouseover()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Methods you'll want to know and use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section will cover only the most common and frequent methods, as an entire
    list of attributes and methods is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Element methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These methods can only be used with an element and not directly. For example,
    `rect.click()`.
  prefs: []
  type: TYPE_NORMAL
- en: animate()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `animate()` method is used to animate various properties of the element
    for a specified duration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for this method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of the `animate()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: attr()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `attr()` method is a very important method that is used to add attributes
    such as styles and other physical properties such as position, height, width,
    and so on to the element. It takes values in key value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for this method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of the `attr()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: click()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `click()` method is used to bind the `click` event to Raphael elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `click()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: dblclick()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `dblclick()` method adds the `double click` event to the element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `dblclick()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: mousedown()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `mousedown()` method binds the `mousedown` event to Raphael elements—it
    triggers when any mouse button is pressed down.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `mousedown()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: mouseup()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `mouseup()` event binds the `mouseup` event to Raphael elements—it triggers
    when any mouse button is released.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `mouseup()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: mousemove()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `mousemove()` method triggers when the mouse is moved over the element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `mousemove()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: mouseover()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `mouseover()` method triggers when the mouse enters the Raphael element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `mouseover()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: mouseout()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `mouseout()` method triggers when the mouse leaves the Raphael element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `mouseout()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: clone()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There will be situations where we will want to duplicate an element. Some might
    say, "Ah ! that''s easy, I just need to copy the element to a new variable like
    `var newrect=rect`". Well, it looks like you have made a copy, but that won''t
    work for sure. The variable acts as a reference to the object, in this case, the
    rectangle. So when we copy the variable, we are just copying the reference. In
    reality, the new variable still points to the same old object. Here is an example
    of the wrong way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The following screenshot demonstrates what happens when the variable is duplicated—there
    is no clone of the rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: '![clone()](img/9857OS_01_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Variable is duplicated
  prefs: []
  type: TYPE_NORMAL
- en: It's obvious that copying the variable didn't work, as it's evident that the
    background color has been applied to the same rectangle, and there is no second
    rectangle as there is supposed to be.
  prefs: []
  type: TYPE_NORMAL
- en: This problem can be addressed by the `clone()` method in a simple and elegant
    way.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `clone()` method instead of duplicating the variable will produce
    a clone of the rectangle, as depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![clone()](img/9857OS_01_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Producing a clone using the clone() method
  prefs: []
  type: TYPE_NORMAL
- en: Now, we see two rectangles and the background color of the second rectangle
    is now gray as intended.
  prefs: []
  type: TYPE_NORMAL
- en: data()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Raphael has an incredibly simple way to assign some data to each and every element
    and retrieve it on demand. It's as simple as assigning some data to an element
    while creating it and recalling that data whenever necessary. It's a simple and
    straightforward way.
  prefs: []
  type: TYPE_NORMAL
- en: Data can be added to an element using the `data()` method in key value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `data()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot depicting the data contents of the circle when
    clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![data()](img/9857OS_01_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Data contents of the circle when clicked
  prefs: []
  type: TYPE_NORMAL
- en: removedata()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `removedata()` method takes the key as a parameter. If the key isn't provided,
    it will remove all the associated data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for this method is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of the `removedata()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: getBBox()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `getBBox()` method returns the bounding box of the element. By default,
    the bounding will take into account any transformations on the element. To get
    the bounding box before any transformation is applied on the element, the `isWithoutTransform`
    parameter must be set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: '![getBBox()](img/9857OS_01_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is an example of the `getBBox()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `getBBox()` method returns an object with the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Value | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `X` | Number | Top-left corner''s x position |'
  prefs: []
  type: TYPE_TB
- en: '| `Y` | Number | Top-left corner''s y position |'
  prefs: []
  type: TYPE_TB
- en: '| `X2` | Number | Bottom-right corner''s x position |'
  prefs: []
  type: TYPE_TB
- en: '| `Y2` | Number | Bottom-right corner''s y position |'
  prefs: []
  type: TYPE_TB
- en: '| `Width` | Number | Width of the bounding box |'
  prefs: []
  type: TYPE_TB
- en: '| `Height` | Number | Height of the bounding box |'
  prefs: []
  type: TYPE_TB
- en: getPointAtLength()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `getPointAtLength()` method returns the coordinates of the point at a particular
    length of a path. The `getPointAtLength()` method takes two parameters, namely
    `path` and `length`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for this method is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The `path` must be a path string and the `length` a number.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `getPointAtLength()` method returns an object with the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Value | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `X` | Number | The x coordinate of the point |'
  prefs: []
  type: TYPE_TB
- en: '| `Y` | Number | The y coordinate of the point |'
  prefs: []
  type: TYPE_TB
- en: '| `Alpha` | Number | The angle of the derivative |'
  prefs: []
  type: TYPE_TB
- en: toFront()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `toFront()` method brings the element to the forefront on top of all other
    elements. Its function is similar to **CSS z-index**. It doesn't take any parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `toFront()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The following screenshot demonstrates the use of the `toFront()` method. The
    circle is brought to the front by using the `toFront()` method; therefore, it
    overlaps the rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: '![toFront()](img/9857OS_01_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Circle brought to the front using the toFront() method
  prefs: []
  type: TYPE_NORMAL
- en: toBack()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `toBack()` method is the exact opposite of the `toFront()` method, as it
    moves the element behind all the other elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `toBack()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: hide()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `hide()` method makes the element invisible. This method is the Raphael
    equivalent of `visibility:hidden` or `display:none` in CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `hide()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: show()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `show()` method makes the element visible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `show()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: transform()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `transform()` method adds a transformation to a given element. It takes
    only one parameter and it's the transformation string.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for this method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of the `transform()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: remove()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `remove()` method removes the element from the paper.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `remove()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Paper methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The paper methods can only be used with the Raphael paper object.
  prefs: []
  type: TYPE_NORMAL
- en: paper.circle()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `paper.circle()` method creates a circle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the syntax for this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Where `x` is the x position of the circle, `y` is the y position of the circle,
    and `radius` is the radius of the circle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `paper.circle()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: paper.ellipse()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `paper.ellipse()` method creates an ellipse.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the syntax for this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: where `x` is the x position of the circle, `y` is the y position of the circle,
    `rx` is the horizontal radius, and `ry` is the vertical radius.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `paper.ellipse()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: paper.rect()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `paper.rect()` method creates a simple rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a syntax for this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Where `x` is the x position of the circle, `y` is the y position of the circle,
    `width` is the width of the rectangle, and `height` is the height of the rectangle.
    It also has a last fifth parameter — the border radius of the rectangle, which
    will add a curved edge of the given radius to the rectangle. Rounded corners do
    look smooth. Though the method's name is `rect()`, it can be used to create a
    box of any shape. It is not restricted to create perfect rectangles.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `paper.rect()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: paper.clear()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `paper.clear()` method is used to clear the drawing canvas. This is the
    magical broom. The `paper.clear()` method doesn't take any parameters; it wipes
    it all.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `paper.clear()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: paper.image()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Raphael is good at drawing, and using Raphael we can replace some images with
    it. But that doesn't mean it's an image replacement solution; Raphael can only
    substitute. It's, therefore, wrong to consider it as a complete replacement for
    images. However, images can be manipulated in Raphael.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `paper.image()` method allows us to import images on to the paper. This
    method takes the following five parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `src` | The path of the image |'
  prefs: []
  type: TYPE_TB
- en: '| `X` | The x coordinate point where the image should be placed |'
  prefs: []
  type: TYPE_TB
- en: '| `Y` | The y coordinate point where the image should be placed |'
  prefs: []
  type: TYPE_TB
- en: '| `Width` | The width of the image |'
  prefs: []
  type: TYPE_TB
- en: '| `Height` | The height of the image |'
  prefs: []
  type: TYPE_TB
- en: 'The following is an example of the `paper.image()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: And now the imported image is converted into a Raphael object. All the usual
    transformations can be applied to that image object.
  prefs: []
  type: TYPE_NORMAL
- en: paper.setSize()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `paper.setSize()` method is a very handy method. This method allows the
    resizing of the Raphael paper object, so that you don't run out of space. This
    method takes two required parameters, namely, width and height—these will be the
    new width and height of the Raphael paper.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the syntax of this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of the `paper.setSize()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: paper.set()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `paper.set()` method groups several Raphael objects, and any action performed
    on this set will apply to all the elements. The `set()` method merely groups the
    elements, it doesn't create any copies of the elements. Deleting a set will have
    no effect on the elements.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning that sets in RaphaelJS are ordered. This varies from
    the set type in Python, which is a group of unordered objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the syntax for this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of the `paper.set()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The following is a screenshot demonstrating the use of the `paperset()` method
    in RaphaelJS.
  prefs: []
  type: TYPE_NORMAL
- en: '![paper.set()](img/9857OS_01_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the color of the set to red changes the color of all the elements in
    the set.
  prefs: []
  type: TYPE_NORMAL
- en: Set methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The set methods can only be used with the set object, created using the `set()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: set.clear()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `set.clear()` method removes all the elements from the set. The `set()`
    method only groups elements together, it doesn't duplicate any elements. Therefore,
    when a set is cleared, no elements are removed, they are just unbounded.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the syntax of this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of the `set.clear()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: set.exclude()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Clearing a set seems to be simple—a call to the clear method and kaboom, everything
    is gone. What about precision picking? RaphaelJS provides the `set.exclude()`
    method, which can be used to remove only a particular element from the set. This
    method takes only one required parameter, that is, the element to be removed.
    Want to remove a black sheep? No problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the syntax of this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of the `set.exclude()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: set.forEach()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `set.forEach()` method executes a function for every element of the set.
    The callback function takes only one parameter, which is a reference to the current
    element in the loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the syntax of this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of the `set.forEach()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: set.pop()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `set.pop()` method removes the last element from the set and returns it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the `set.pop()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: set.splice()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `set.splice()` method is used to delete and insert an element. This method
    takes three parameters, namely, `index`, `count`, and `element`, which are to
    be inserted. Index is where the element should be deleted, count is the number
    of elements to remove from the index position, and finally, the element to be
    inserted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the syntax of this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of the `set.splice()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: People and places you should get to know
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need help with RaphaelJS, here are some people and places that will prove
    invaluable.
  prefs: []
  type: TYPE_NORMAL
- en: Official sites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The official sites for all the official information regarding RaphaelJS are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Homepage**: [http://raphaeljs.com/](http://raphaeljs.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manual and documentation**: [http://raphaeljs.com/reference.html](http://raphaeljs.com/reference.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Twitter**: [http://twitter.com/RaphaelJS/](http://twitter.com/RaphaelJS/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source code**: [https://github.com/DmitryBaranovskiy/raphael/](https://github.com/DmitryBaranovskiy/raphael/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Articles and tutorials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A useful list of articles and tutorials for further reference and reading is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.alistapart.com/articles/using-svg-for-flexible-scalable-and-fun-backgrounds-part-i](http://www.alistapart.com/articles/using-svg-for-flexible-scalable-and-fun-backgrounds-part-i)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.alistapart.com/articles/cross-platform-scalable-vector-graphics-with-svgweb/](http://www.alistapart.com/articles/cross-platform-scalable-vector-graphics-with-svgweb/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://net.tutsplus.com/tutorials/javascript-ajax/an-introduction-to-the-raphael-js-library/](http://net.tutsplus.com/tutorials/javascript-ajax/an-introduction-to-the-raphael-js-library/):
    An introduction to the RaphaelJS Library, from net tuts+'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/SVG11/](http://www.w3.org/TR/SVG11/): W3C SVG specification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.irunmywebsite.com/raphael/additionalhelp.php#pagetop](http://www.irunmywebsite.com/raphael/additionalhelp.php#pagetop):
    An exhaustive list of RaphaelJS examples'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://inkscape.org/download/](http://inkscape.org/download/): A link for
    downloading Inkscape'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Official RaphaelJS communities and forums:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Official forums**: [https://groups.google.com/forum/?fromgroups#!forum/raphaeljs](https://groups.google.com/forum/?fromgroups#!forum/raphaeljs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User FAQ**: [http://raphaeljs.com/](http://raphaeljs.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blogs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Official RaphaelJS blog:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The blog of Dmitry Baranovskiy, the creator of RaphaelJS and various other
    libraries: [http://dmitry.baranovskiy.com/](http://dmitry.baranovskiy.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twitter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'RaphaelJS tweets:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow RaphaelJS on Twitter at [http://twitter.com/RaphaelJS/](http://twitter.com/RaphaelJS/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more open source information, follow Packt at [http://twitter.com/#!/packtopensource](http://twitter.com/#!/packtopensource)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RaphaelJS is a versatile and easy-to-use vector graphics library, allowing us
    to do tasks which were unthinkable a few years ago. Though HTML5 Canvas was inspired
    from vector graphics, it doesn't mean that it's a replacement for SVG, rather
    they compliment each other. Today's browsers have faster and better JavaScript
    engines that make rendering vector graphics even better.
  prefs: []
  type: TYPE_NORMAL
- en: From a user perspective, adding a little interactivity will make the site more
    interesting and engaging, and for this, vector graphics libraries like RaphaelJS
    are key. They make applications stand apart from the standard boxes and lines.
    RaphaelJS does add glitter to our applications and makes us completely rethink
    how we present our data. RaphaelJS is more versatile in the hands of the most
    creative, and that's what this book is all about—realizing the creative potential
    of RaphaelJS.
  prefs: []
  type: TYPE_NORMAL
