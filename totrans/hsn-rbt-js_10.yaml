- en: Using MQTT to Talk to Things on the Internet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IoT devices can communicate in many ways, and some ways have become standards.
    We're going to explore a few of the ways IoT devices communicate, then dive into
    depth with one standard, MQTT. We'll then build a small project that allows us
    to see and send MQTT events with AdafruitIO, a service that provides MQTT brokers
    online.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: IoT device communications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MQTT – an IoT PubSub protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up MQTT on the Pi with AdafruitIO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project – adding an LCD and button to see and show MQTT events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project – social media notification bot with IFTTT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this project, you'll need your LCD hooked up to your Pi (see [Chapter 9](17a3b756-743e-430d-a852-a78991b30012.xhtml), *Getting
    the Information You Need*), a pushbutton, and a 10K ohm resistor for hardware.
  prefs: []
  type: TYPE_NORMAL
- en: For other tools, you'll want to create a free-plan account at [https://adafruit.io](https://adafruit.io).
    You will also want an account with IFTTT (also free) to do the final project.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter is at [https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter10](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter10).
  prefs: []
  type: TYPE_NORMAL
- en: IoT device communications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in [Chapter 9](17a3b756-743e-430d-a852-a78991b30012.xhtml), *Getting
    the Information You Need*, our Pi can ask for information from the internet using
    HTTP requests. But what if we want regular data sent to the Pi in real-time? What
    if we want a swarm of devices chatting with each other, data sent back and forth
    as necessary? Let's take a look at a few ways this can be accomplished with web
    technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Long polling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Long polling involves asking for information via HTTP requests at certain intervals.
    If this sounds familiar, it's because that's precisely what we did in our weather
    dashboard project in [Chapter 9](17a3b756-743e-430d-a852-a78991b30012.xhtml),
    *Getting the information you need*; we poll the OpenWeather API every 60 seconds.
    This approach is best when there aren't other options; some REST APIs do not have
    a way to hold a connection open or establish two-way communication, and long polling
    is the way to go in these situations.
  prefs: []
  type: TYPE_NORMAL
- en: But there are newer ways of establishing two-way connections that can be left
    open, including the Websocket.
  prefs: []
  type: TYPE_NORMAL
- en: Websockets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Websockets are a powerful tool that allows us to establish a two-way data connection
    that stays open until you close it (barring error or loss of connection). You
    can send messages back and forth in real time, without having to set up a whole
    new connection each time. It also allows the server to communicate back with your
    Pi without it having to ask, which is great for real-time data.
  prefs: []
  type: TYPE_NORMAL
- en: While websockets are powerful, there are ways to fine-tune this connection for
    IoT projects. It can also be difficult to maintain an open socket and keep the
    data you are sending or receiving organized. With this in mind, we're going to
    talk about MQTT.
  prefs: []
  type: TYPE_NORMAL
- en: MQTT - an IoT PubSub protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Message Queuing Telemetry Transport** (**MQTT**) protocol (often pronounced
    **mosquitto**) is a protocol designed for low-bandwidth, high-latency environments,
    which makes it a great fit for IoT projects, especially ones running on limited
    hardware. It is not solely used for communication between machines: some projects
    use it to send data for storage purposes.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how MQTT works and how it implements a PubSub setup for
    our projects.
  prefs: []
  type: TYPE_NORMAL
- en: The basics of MQTT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go over a few terms, then link them together to define MQTT as a concept:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MQTT message**: An MQTT message consists of a topic and a message. The topic
    is what clients subscribe to, and they usually read the messages for data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MQTT client**: An MQTT client connects to an MQTT broker and can subscribe
    to and publish on topics once connected to the broker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MQTT broker**: An MQTT broker handles client connection and passes messages
    along to all clients subscribed to a topic when a client publishes a message on
    that topic. It can also publish messages to topics, which go to all clients subscribed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our project, we will set up our Pi as an MQTT client, connect it to a broker
    at AdafruitIO, and publish messages that the broker will send to the client (our
    Pi) and takes in messages it publishes.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up MQTT on the Pi with AdafruitIO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to set up MQTT, we'll need a broker. While the Pi can itself serve
    as a broker (see the *Further reading* section), we don't need broker functionality
    on the Pi. We can use AdafruitIO to create a broker that we can subscribe to topics
    with on our Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an account and a feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we''ll go to [https://io.adafruit.com/](https://io.adafruit.com/) and
    create a free account. Then, you''ll be taken to a dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75691a27-5240-495c-aa7b-2d76838c69d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll need to set up a feed and get our AIO key in order to get started on
    the Pi. To set up a feed, select Feeds in the left-hand menu. Then, click the
    Actions button in the upper left corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72996438-7a9a-4008-a229-46376a708f70.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, select Create New Feed from the dropdown. Name your feed (I named mine
    `hands-on-robotics-with-js` to make it easy to remember what I created it for).
    Then, you''ll be taken to your new feed''s page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5469cf46-c90d-49ba-9c66-8e97305e9f53.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we've created our feed, we can get all the information we need to get
    the Pi hooked up to it. First, let's get the Feed key to give to the MQTT module.
    Click Feed Information on the right-hand side and copy the value in MQTT by ID
    and place it somewhere it's easy to get to. Then, close the Feed Information window.
  prefs: []
  type: TYPE_NORMAL
- en: Next, click View AIO key in the left-hand menu. Copy the value in Active Key
    and place it somewhere it's easy to get to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to clear up some terminology before we proceed: the feed MQTT by ID name
    you took note of is going to be the topic of any messages our client (the Pi)
    sends to our broker (AdafruitIO), and vice versa.'
  prefs: []
  type: TYPE_NORMAL
- en: We now have everything we need to connect our Pi to the AdafruitIO broker.
  prefs: []
  type: TYPE_NORMAL
- en: Subscribing to the feed using the mqtt npm module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `project` folder for this project to be transferred to the Pi. Inside
    the folder, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will install the `mqtt npm` module, which will simplify our MQTT connection,
    and the `dotenv` module, which will allow you to use environmental variables in
    a separate file (great for making sure you don't commit your AIO key to GitHub!)
  prefs: []
  type: TYPE_NORMAL
- en: The mqtt module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `mqtt` module allows us to construct an MQTT client object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We will pass this method the AdafruitIO URL and our username and AIO key via
    the `options` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several event handlers available on the MQTT client object (see *Further
    reading*), but for this project we''ll be using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll want to be able to publish messages from our client to the
    broker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The dotenv module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `dotenv` module makes configuration of environment variables that you don''t
    want to, say, commit to GitHub, easy. You load it into your Node.js application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This loads a `.env` file in the same directory that the Node.js file is in,
    which is in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And it is then accessible in your application via the `process.env` global
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now that we know more about the libraries and services we're using, let's get
    a test connection program set up!
  prefs: []
  type: TYPE_NORMAL
- en: Testing our connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To test our connection, we'll get our Pi connected to the AdafruitIO broker,
    subscribe to our new feed, and publish a message. We'll know it works when we
    go to the feed dashboard on the AdafruitIO site and see that our message has been
    received.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we need to configure the `mqtt` client, set up a `connect` handler
    for the client, and use that handler to subscribe and publish our message. In
    a file called `mqtt-test.js` in the folder you set up earlier, write the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the same folder, create a file called `.env` (make sure it starts
    with the dot!), and place the following in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, transfer the folder over to the Pi. In the Pi session, navigate to the
    folder and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will make sure that all modules are installed correctly
    on the Pi. Then, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now go to your AdafruitIO feed dashboard. You should see a message there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/496e8203-1d9d-4762-b422-ca9f8054183d.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we know we can connect the Pi to AdafruitIO, let's add an LCD to see
    incoming messages, and a button to generate outgoing ones!
  prefs: []
  type: TYPE_NORMAL
- en: Project – adding an LCD and button to see and send MQTT events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use the AdafruitIO dashboard to post messages to our MQTT feed, and so
    we'll use an LCD to show what we've sent. We'll also wire up a button that will
    send an MQTT message when pushed.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring it all up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we''ll wire our LCD to the I2C pins, and our button to GPIO #5, also
    known as P1-29:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0cb3759e-994f-44ad-8e74-eeb15cbd7cc6.png)'
  prefs: []
  type: TYPE_IMG
- en: Coding it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a file in the same folder, create `mqtt-button-lcd.js`. Put in the usual
    Johnny-Five and Raspi-IO constructors, and in the board-ready handler:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the client constructor for AdafruitIO''s MQTT connection from `mqtt-test.js`.
    We''ll also set up our LCD and button objects here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we''re ready to code the sending of messages on the press of the
    button, and the printing of messages received on the LCD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, move the folder over to the Pi, go into your Pi session, navigate to the
    folder, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Then, run the program (be sure to use `sudo` !)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, press the button and you should see the message pop up in the AdafruitIO
    feed dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b24077f9-5dbf-4019-827c-41c224c55d77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And your LCD (remember, MQTT events are published to all, even the client that
    published them, if they are subscribed!):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/209271d7-5979-4bd5-bd88-c161818bd608.png)'
  prefs: []
  type: TYPE_IMG
- en: 'While we''re there, click Actions, then Add Data, and type `Hello from Adafruit!`
    in the data box, and hit Create. It should show up on your LCD:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08e39bd9-7283-486d-b75c-6586799f740f.png)'
  prefs: []
  type: TYPE_IMG
- en: And there you have it! You now have a bot that communicates with the internet
    via MQTT!
  prefs: []
  type: TYPE_NORMAL
- en: Project – social media notifier bot with IFTTT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having lots of tabs open in your browser, and clicking on each one to see notifications,
    can be a nuisance. Luckily, we can easily build a project that pulls in notifications
    from several sources to create a bot that notifies us on an LCD. We'll also learn
    more about If This, Then That (IFTTT), and its plugin that will allow us to route
    events to Adafruit IO and thereby our Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with IFTTT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IFTTT is a way to create graphical formulas (called applets) that consist of
    a trigger (such as a social media event) and an action (such as sending data to
    AdafruitIO). We're going to walk through linking AdafruitIO and our social media
    accounts to IFTTT, and creating Applets to send social media notification data
    to AdafruitIO.
  prefs: []
  type: TYPE_NORMAL
- en: First, sign in or create an account at [https://ifttt.com/](https://ifttt.com/),
    and we'll start linking our accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Linking IFTTT to Adafruit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To link your AdafruitIO account, click your username in the upper-right corner,
    select Services, then select the All Services link at the bottom of the page.
    Then, type `Adafruit` into the search bar, and click the black box marked Adafruit,
    which should bring you here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4341557c-a454-43fa-9355-87e518ebc867.png)'
  prefs: []
  type: TYPE_IMG
- en: After that, click Connect and enter your AdafruitIO credentials. You'll want
    to do this for any social media networks that you'd like notifications from as
    well. I added `Twitter` and `Twitch.tv` accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've linked our accounts, we should take a step back to Adafruit.IO
    and add feeds for our social media accounts so we can select them when we create
    our IFTTT applets.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up feeds for your social media MQTT messages in AdafruitIO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In your AdafruitIO dashboard, you should create a feed (this corresponds to
    an MQTT topic) for each social media service you want your bot to notify you on.
    Having clear and granular topics is important when building large MQTT systems
    with several bots listening for events.
  prefs: []
  type: TYPE_NORMAL
- en: 'I created a group for these feeds by selecting Actions on the Feeds page of
    the AdafruitIO dashboard and clicking Create a New Group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7336c10-9f08-4404-8067-89e909aeb002.png)'
  prefs: []
  type: TYPE_IMG
- en: I named mine as `Social-Media-Bot`. Once you've finished making the group, click
    the name of the group to be taken to that group's dashboard, which should have
    no feeds in it yet. Click Actions and select Create a New Feed from the dropdown.
    Then, enter the name of the social media service you will be using as the name
    of the feed. Repeat for any social media services you'd like to use.
  prefs: []
  type: TYPE_NORMAL
- en: The AdafruitIO Feed Group also serves as a handy namespacing tool. The twitter
    feed in the Social-Media-Bot group becomes Social-Media-Bot.twitter. This is extremely
    useful if you end up with multiple projects with Twitter data feeds.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our social media accounts linked to IFTTT, and AdafruitIO feeds
    ready to receive data, let's create some IFTTT Applets to collect the social media
    notifications.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our IFTTT Applets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the IFTTT home page, you create a new applet by selecting your username
    in the top-right corner and selecting New Applet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/246f08cf-cb15-4fd4-bf8e-f9247a1cc1b7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll be presented with the IFTTT Applet formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7da2288-fc28-4124-b053-59a355cb41e8.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the +this link to be taken to a list of services you can use to trigger
    your IFTTT applet. Fill out the name of the social media service you wish to use
    in the search bar, and select it as it pops up.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5aac1204-9409-4270-92b0-bb0c74cb7531.png)'
  prefs: []
  type: TYPE_IMG
- en: You'll then see a list of possible triggers from that service. Select which
    one you'd like to be notified for (I started with someone following my twitter
    account). Once you click your trigger, you'll be taken back to the formula page,
    and the +this will be replaced with the logo for the social media site you use
    as a trigger. Then, it's time to create our action by clicking +that.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d4c5a5d-842d-4a48-9143-c5ea117e4dd2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll be taken to a similar page to select a service for your action. Search
    for `AdafruitIO` and select it. You''ll be asked to fill out some information
    about which AdafruitIO feed you''d like to send to, and the message you''d like
    to send:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87618227-2346-4c92-8a5f-6c45a0a091e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the name of the feed that matches the social media site that triggers
    this applet. Under data to save, you can enter a message that we can display on
    the LCD. You can also click the Add ingredient button to add information from
    the social media event itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc4638c8-896a-4198-9ea9-cf51a78d186c.png)'
  prefs: []
  type: TYPE_IMG
- en: I selected FullName and ended up with the message `{{FullName}} followed you
    on Twitter`!
  prefs: []
  type: TYPE_NORMAL
- en: Repeat this for both the other triggers from the first social media site and
    the other social media sites and their triggers.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our IFTTT Applets are sending data to AdafruitIO, we can start wiring
    and coding our bot.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All you need for this project is the LCD; if you wired up the button for the
    last project, you can remove it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a4ccdea-53cd-432d-b802-936f9d715a70.png)'
  prefs: []
  type: TYPE_IMG
- en: Coding our social media notifications to show on the LCD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a file named `social-media-bot.js` in your `project` folder, and copy
    the contents of `mqtt-button-lcd` into it. We're going to modify this file to
    create our social media bot.
  prefs: []
  type: TYPE_NORMAL
- en: First, remove all references to the button variable and `Button` object, since
    we won't be using them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next. we''ll need to get the names of the feeds (topics) that we''ll be subscribing
    to. To do this, click each feed in the AdafruitIO Feeds page that you want to
    use for this bot. Then in the right column of the page, click Feed Information
    and copy the MQTT by key field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91bd643c-0673-47a9-8da5-4b21a127cec9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, in the `client.on(''connect'')` handler, we''re going to subscribe to
    multiple topics, and not use the callback feature. Then, we''ll add a `client.on(''message'')`
    handler to display the message from IFTTT on the LCD display:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've subscribed to our new feeds and set it to print to the LCD, we
    can run it!
  prefs: []
  type: TYPE_NORMAL
- en: Running your social media bot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the following command to see the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Soon, you should see a message pop up on your LCD when you get a social media
    notification.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed several ways that internet-connected devices can
    talk to each other. We dove into the MQTT protocol and discussed how its PubSub
    interface and abstractions made it a great choice for projects on our Pi. Then,
    we built a bot that communicated with the outside world using a button and let
    the outside world communicate with it via the AdafruitIO dashboard and IFTTT.
    Finally, we built a social media notification bot using AdafruitIO integration
    into IFTTT.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are two ways IoT devices interface with the internet that aren't specific
    to IoT?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does MQTT stand for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an MQTT client capable of?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an MQTT broker capable of?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why does our Pi get the messages it publishes to AdafruitIO?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**A great tutorial on MQTT**: [https://www.pubnub.com/blog/what-is-mqtt-use-cases/](https://www.pubnub.com/blog/what-is-mqtt-use-cases/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The MQTT protocol official site**: [http://mqtt.org/](http://mqtt.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AdafruitIO tutorials**: [https://learn.adafruit.com/category/adafruit-io](https://learn.adafruit.com/category/adafruit-io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The mqtt module page on npm**: [https://www.npmjs.com/package/mqtt](https://www.npmjs.com/package/mqtt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
