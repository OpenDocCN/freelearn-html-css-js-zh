- en: Using MQTT to Talk to Things on the Internet
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MQTT与互联网上的事物通信
- en: IoT devices can communicate in many ways, and some ways have become standards.
    We're going to explore a few of the ways IoT devices communicate, then dive into
    depth with one standard, MQTT. We'll then build a small project that allows us
    to see and send MQTT events with AdafruitIO, a service that provides MQTT brokers
    online.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网设备可以通过多种方式通信，其中一些方式已经成为了标准。我们将探讨物联网设备通信的几种方式，然后深入探讨一个标准，MQTT。然后我们将构建一个小项目，使我们能够通过AdafruitIO查看和发送MQTT事件，AdafruitIO是一个提供在线MQTT代理服务的平台。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: IoT device communications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网设备通信
- en: MQTT – an IoT PubSub protocol
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MQTT - 一个物联网发布/订阅协议
- en: Setting up MQTT on the Pi with AdafruitIO
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在树莓派上使用AdafruitIO设置MQTT
- en: Project – adding an LCD and button to see and show MQTT events
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目 - 添加LCD和按钮以查看和显示MQTT事件
- en: Project – social media notification bot with IFTTT
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目 - 使用IFTTT的社交媒体通知机器人
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this project, you'll need your LCD hooked up to your Pi (see [Chapter 9](17a3b756-743e-430d-a852-a78991b30012.xhtml), *Getting
    the Information You Need*), a pushbutton, and a 10K ohm resistor for hardware.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你需要将你的LCD连接到你的树莓派上（参见[第9章](17a3b756-743e-430d-a852-a78991b30012.xhtml)，*获取所需信息*），一个按钮和一个10K欧姆电阻作为硬件。
- en: For other tools, you'll want to create a free-plan account at [https://adafruit.io](https://adafruit.io).
    You will also want an account with IFTTT (also free) to do the final project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他工具，你需要在[https://adafruit.io](https://adafruit.io)创建一个免费账户。你还需要一个IFTTT账户（也是免费的）来完成最终项目。
- en: The code for this chapter is at [https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter10](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter10).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码位于[https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter10](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter10)。
- en: IoT device communications
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网设备通信
- en: As we saw in [Chapter 9](17a3b756-743e-430d-a852-a78991b30012.xhtml), *Getting
    the Information You Need*, our Pi can ask for information from the internet using
    HTTP requests. But what if we want regular data sent to the Pi in real-time? What
    if we want a swarm of devices chatting with each other, data sent back and forth
    as necessary? Let's take a look at a few ways this can be accomplished with web
    technologies.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第9章](17a3b756-743e-430d-a852-a78991b30012.xhtml)，*获取所需信息*中看到的，我们的树莓派可以使用HTTP请求从互联网上获取信息。但如果我们想实时将数据发送到树莓派呢？如果我们想一组设备相互聊天，根据需要来回发送数据呢？让我们看看使用Web技术可以如何实现这一点。
- en: Long polling
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 长轮询
- en: Long polling involves asking for information via HTTP requests at certain intervals.
    If this sounds familiar, it's because that's precisely what we did in our weather
    dashboard project in [Chapter 9](17a3b756-743e-430d-a852-a78991b30012.xhtml),
    *Getting the information you need*; we poll the OpenWeather API every 60 seconds.
    This approach is best when there aren't other options; some REST APIs do not have
    a way to hold a connection open or establish two-way communication, and long polling
    is the way to go in these situations.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 长轮询涉及在特定间隔通过HTTP请求获取信息。如果这听起来很熟悉，那是因为这正是我们在第9章的天气仪表板项目中做的；我们每60秒轮询一次OpenWeather
    API。当没有其他选择时，这种方法是最好的；一些REST API没有保持连接开启或建立双向通信的方法，在这些情况下，长轮询是最佳选择。
- en: But there are newer ways of establishing two-way connections that can be left
    open, including the Websocket.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在有更新的方法来建立可以保持开启的双向连接，包括WebSocket。
- en: Websockets
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSocket
- en: Websockets are a powerful tool that allows us to establish a two-way data connection
    that stays open until you close it (barring error or loss of connection). You
    can send messages back and forth in real time, without having to set up a whole
    new connection each time. It also allows the server to communicate back with your
    Pi without it having to ask, which is great for real-time data.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket是一个强大的工具，它允许我们建立一个保持开启的双向数据连接，直到你关闭它（除非出现错误或连接丢失）。你可以实时地来回发送消息，而不需要每次都设置一个新的连接。它还允许服务器在与你的树莓派通信时无需询问，这对于实时数据来说是非常好的。
- en: While websockets are powerful, there are ways to fine-tune this connection for
    IoT projects. It can also be difficult to maintain an open socket and keep the
    data you are sending or receiving organized. With this in mind, we're going to
    talk about MQTT.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然WebSockets功能强大，但有一些方法可以针对物联网项目微调此连接。同时，保持一个开放的套接字并保持发送或接收的数据组织起来可能也很困难。考虑到这一点，我们将讨论MQTT。
- en: MQTT - an IoT PubSub protocol
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MQTT - 一个物联网发布/订阅协议
- en: 'The **Message Queuing Telemetry Transport** (**MQTT**) protocol (often pronounced
    **mosquitto**) is a protocol designed for low-bandwidth, high-latency environments,
    which makes it a great fit for IoT projects, especially ones running on limited
    hardware. It is not solely used for communication between machines: some projects
    use it to send data for storage purposes.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**消息队列遥测传输**（**MQTT**）协议（通常发音为**mosquitto**）是为低带宽、高延迟环境设计的协议，这使得它非常适合物联网项目，尤其是那些在有限硬件上运行的项目。它不仅用于机器之间的通信：一些项目使用它来发送用于存储的数据。'
- en: Let's take a look at how MQTT works and how it implements a PubSub setup for
    our projects.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看MQTT是如何工作的，以及它是如何为我们的项目实现发布/订阅设置的。
- en: The basics of MQTT
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MQTT的基本知识
- en: 'Let''s go over a few terms, then link them together to define MQTT as a concept:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先概述几个术语，然后将它们联系起来，以定义MQTT作为一个概念：
- en: '**MQTT message**: An MQTT message consists of a topic and a message. The topic
    is what clients subscribe to, and they usually read the messages for data.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MQTT消息**: MQTT消息由主题和消息组成。主题是客户端订阅的，他们通常读取消息以获取数据。'
- en: '**MQTT client**: An MQTT client connects to an MQTT broker and can subscribe
    to and publish on topics once connected to the broker.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MQTT客户端**: MQTT客户端连接到MQTT代理，一旦连接到代理，就可以订阅和发布主题。'
- en: '**MQTT broker**: An MQTT broker handles client connection and passes messages
    along to all clients subscribed to a topic when a client publishes a message on
    that topic. It can also publish messages to topics, which go to all clients subscribed.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MQTT代理**: MQTT代理负责处理客户端连接，并在客户端在某个主题上发布消息时，将消息传递给所有订阅该主题的客户端。它还可以向主题发布消息，这些消息将发送给所有订阅的客户端。'
- en: In our project, we will set up our Pi as an MQTT client, connect it to a broker
    at AdafruitIO, and publish messages that the broker will send to the client (our
    Pi) and takes in messages it publishes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们将设置Pi作为MQTT客户端，将其连接到AdafruitIO的代理，并发布代理将发送给客户端（我们的Pi）的消息，并接收它发布的消息。
- en: Setting up MQTT on the Pi with AdafruitIO
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Pi上使用AdafruitIO设置MQTT
- en: In order to set up MQTT, we'll need a broker. While the Pi can itself serve
    as a broker (see the *Further reading* section), we don't need broker functionality
    on the Pi. We can use AdafruitIO to create a broker that we can subscribe to topics
    with on our Pi.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置MQTT，我们需要一个代理。虽然Pi本身可以充当代理（参见“进一步阅读”部分），但我们不需要在Pi上使用代理功能。我们可以使用AdafruitIO创建一个代理，我们可以在Pi上订阅主题。
- en: Creating an account and a feed
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建账户和数据源
- en: 'First, we''ll go to [https://io.adafruit.com/](https://io.adafruit.com/) and
    create a free account. Then, you''ll be taken to a dashboard:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将前往[https://io.adafruit.com/](https://io.adafruit.com/)并创建一个免费账户。然后，你将被带到仪表板：
- en: '![](img/75691a27-5240-495c-aa7b-2d76838c69d3.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75691a27-5240-495c-aa7b-2d76838c69d3.png)'
- en: 'We''ll need to set up a feed and get our AIO key in order to get started on
    the Pi. To set up a feed, select Feeds in the left-hand menu. Then, click the
    Actions button in the upper left corner:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置一个数据源并获取我们的AIO密钥，以便在Pi上开始设置。要设置数据源，请选择左侧菜单中的“数据源”。然后，点击左上角的“操作”按钮：
- en: '![](img/72996438-7a9a-4008-a229-46376a708f70.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72996438-7a9a-4008-a229-46376a708f70.png)'
- en: 'Next, select Create New Feed from the dropdown. Name your feed (I named mine
    `hands-on-robotics-with-js` to make it easy to remember what I created it for).
    Then, you''ll be taken to your new feed''s page:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从下拉菜单中选择“创建新数据源”。给你的数据源命名（我将其命名为`hands-on-robotics-with-js`，以便于记住我创建它的目的）。然后，你将被带到新数据源的页面：
- en: '![](img/5469cf46-c90d-49ba-9c66-8e97305e9f53.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5469cf46-c90d-49ba-9c66-8e97305e9f53.png)'
- en: Now that we've created our feed, we can get all the information we need to get
    the Pi hooked up to it. First, let's get the Feed key to give to the MQTT module.
    Click Feed Information on the right-hand side and copy the value in MQTT by ID
    and place it somewhere it's easy to get to. Then, close the Feed Information window.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的数据源，我们可以获取所有需要将Pi连接到它的信息。首先，让我们获取用于MQTT模块的Feed密钥。点击右侧的“Feed信息”，并复制MQTT
    ID下的值，将其放置在容易获取的地方。然后，关闭“Feed信息”窗口。
- en: Next, click View AIO key in the left-hand menu. Copy the value in Active Key
    and place it somewhere it's easy to get to.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在左侧菜单中点击“查看 AIO 密钥”。复制活动密钥并将其放置在容易访问的地方。
- en: 'Now, to clear up some terminology before we proceed: the feed MQTT by ID name
    you took note of is going to be the topic of any messages our client (the Pi)
    sends to our broker (AdafruitIO), and vice versa.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，先澄清一些术语：您注意到的以 ID 命名的 MQTT 资源将是我们客户端（树莓派）发送到我们的代理（AdafruitIO）的消息的主题，反之亦然。
- en: We now have everything we need to connect our Pi to the AdafruitIO broker.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在拥有了连接我们的树莓派到 AdafruitIO 代理所需的一切。
- en: Subscribing to the feed using the mqtt npm module
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 mqtt npm 模块订阅资源
- en: 'Create a `project` folder for this project to be transferred to the Pi. Inside
    the folder, run the following commands:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为此项目创建一个 `project` 文件夹，以便将其传输到树莓派。在文件夹内，运行以下命令：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will install the `mqtt npm` module, which will simplify our MQTT connection,
    and the `dotenv` module, which will allow you to use environmental variables in
    a separate file (great for making sure you don't commit your AIO key to GitHub!)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装 `mqtt npm` 模块，这将简化我们的 MQTT 连接，以及 `dotenv` 模块，它允许您在单独的文件中使用环境变量（非常适合确保您不会将
    AIO 密钥提交到 GitHub）！
- en: The mqtt module
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`mqtt` 模块'
- en: 'The `mqtt` module allows us to construct an MQTT client object:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`mqtt` 模块允许我们构建一个 MQTT 客户端对象：'
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will pass this method the AdafruitIO URL and our username and AIO key via
    the `options` object.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过 `options` 对象将 AdafruitIO URL、我们的用户名和 AIO 密钥传递给此方法。
- en: 'There are several event handlers available on the MQTT client object (see *Further
    reading*), but for this project we''ll be using the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MQTT 客户端对象上可用的几个事件处理器（见 *进一步阅读*），但在这个项目中我们将使用以下处理器：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we''ll want to be able to publish messages from our client to the
    broker:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望能够从我们的客户端向代理发布消息：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The dotenv module
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`dotenv` 模块'
- en: 'The `dotenv` module makes configuration of environment variables that you don''t
    want to, say, commit to GitHub, easy. You load it into your Node.js application:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotenv` 模块使得配置您不想提交到 GitHub 的环境变量变得简单。您将其加载到您的 Node.js 应用程序中：'
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This loads a `.env` file in the same directory that the Node.js file is in,
    which is in the following format:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 Node.js 文件所在的同一目录中加载一个 `.env` 文件，其格式如下：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And it is then accessible in your application via the `process.env` global
    variable:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它可以通过 `process.env` 全局变量在您的应用程序中访问：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now that we know more about the libraries and services we're using, let's get
    a test connection program set up!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对所使用的库和服务有了更多的了解，让我们设置一个测试连接程序！
- en: Testing our connection
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试我们的连接
- en: To test our connection, we'll get our Pi connected to the AdafruitIO broker,
    subscribe to our new feed, and publish a message. We'll know it works when we
    go to the feed dashboard on the AdafruitIO site and see that our message has been
    received.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试我们的连接，我们将让树莓派连接到 AdafruitIO 代理，订阅我们的新资源，并发布一条消息。当我们在 AdafruitIO 网站上的资源仪表板中看到我们的消息已被接收时，我们就知道它成功了。
- en: 'To do this, we need to configure the `mqtt` client, set up a `connect` handler
    for the client, and use that handler to subscribe and publish our message. In
    a file called `mqtt-test.js` in the folder you set up earlier, write the following
    code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们需要配置 `mqtt` 客户端，为客户端设置一个 `connect` 处理器，并使用该处理器来订阅和发布我们的消息。在您之前设置的文件夹中，创建一个名为
    `mqtt-test.js` 的文件，并写入以下代码：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, in the same folder, create a file called `.env` (make sure it starts
    with the dot!), and place the following in it:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在同一个文件夹中，创建一个名为 `.env` 的文件（确保它以点开头！），并在其中放置以下内容：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, transfer the folder over to the Pi. In the Pi session, navigate to the
    folder and run the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将文件夹传输到树莓派上。在树莓派会话中，导航到该文件夹并运行以下命令：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding command will make sure that all modules are installed correctly
    on the Pi. Then, use the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将确保所有模块都正确安装在树莓派上。然后，使用以下命令：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now go to your AdafruitIO feed dashboard. You should see a message there:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到您的 AdafruitIO 资源仪表板。您应该在那里看到一个消息：
- en: '![](img/496e8203-1d9d-4762-b422-ca9f8054183d.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/496e8203-1d9d-4762-b422-ca9f8054183d.png)'
- en: Now that we know we can connect the Pi to AdafruitIO, let's add an LCD to see
    incoming messages, and a button to generate outgoing ones!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道我们可以将树莓派连接到 AdafruitIO，让我们添加一个 LCD 来查看传入的消息，以及一个按钮来生成传出消息！
- en: Project – adding an LCD and button to see and send MQTT events
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目 – 添加 LCD 和按钮以查看和发送 MQTT 事件
- en: We can use the AdafruitIO dashboard to post messages to our MQTT feed, and so
    we'll use an LCD to show what we've sent. We'll also wire up a button that will
    send an MQTT message when pushed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 AdafruitIO 仪表板将消息发布到我们的 MQTT 馈送，因此我们将使用 LCD 来显示我们发送的内容。我们还将连接一个按钮，当按下时将发送
    MQTT 消息。
- en: Wiring it all up
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接所有部件
- en: 'First, we''ll wire our LCD to the I2C pins, and our button to GPIO #5, also
    known as P1-29:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，我们将我们的 LCD 连接到 I2C 引脚，并将按钮连接到 GPIO #5，也称为 P1-29：'
- en: '![](img/0cb3759e-994f-44ad-8e74-eeb15cbd7cc6.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0cb3759e-994f-44ad-8e74-eeb15cbd7cc6.png)'
- en: Coding it all together
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有代码整合在一起
- en: 'In a file in the same folder, create `mqtt-button-lcd.js`. Put in the usual
    Johnny-Five and Raspi-IO constructors, and in the board-ready handler:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一文件夹中的文件中创建 `mqtt-button-lcd.js`。放入常用的 Johnny-Five 和 Raspi-IO 构造函数，并在板就绪处理程序中：
- en: 'Then, add the client constructor for AdafruitIO''s MQTT connection from `mqtt-test.js`.
    We''ll also set up our LCD and button objects here:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从 `mqtt-test.js` 中添加 AdafruitIO 的 MQTT 连接客户端构造函数。我们还将在这里设置我们的 LCD 和按钮对象：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After that, we''re ready to code the sending of messages on the press of the
    button, and the printing of messages received on the LCD:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们就准备好编写在按钮按下时发送消息，以及在 LCD 上打印接收到的消息的代码：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, move the folder over to the Pi, go into your Pi session, navigate to the
    folder, run the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将文件夹移动到 Pi 上，进入 Pi 会话，导航到文件夹，运行以下命令：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then, run the program (be sure to use `sudo` !)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行程序（务必使用 `sudo`！）
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, press the button and you should see the message pop up in the AdafruitIO
    feed dashboard:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按下按钮，你应该会在 AdafruitIO 馈送仪表板上看到消息弹出：
- en: '![](img/b24077f9-5dbf-4019-827c-41c224c55d77.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b24077f9-5dbf-4019-827c-41c224c55d77.png)'
- en: 'And your LCD (remember, MQTT events are published to all, even the client that
    published them, if they are subscribed!):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以及你的 LCD（记住，MQTT 事件会发布给所有人，包括发布它们的客户端，如果它们已订阅的话！）
- en: '![](img/209271d7-5979-4bd5-bd88-c161818bd608.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/209271d7-5979-4bd5-bd88-c161818bd608.png)'
- en: 'While we''re there, click Actions, then Add Data, and type `Hello from Adafruit!`
    in the data box, and hit Create. It should show up on your LCD:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在这里时，点击“操作”，然后添加数据，在数据框中输入“来自 Adafruit 的问候！”并点击创建。它应该会显示在你的 LCD 上：
- en: '![](img/08e39bd9-7283-486d-b75c-6586799f740f.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08e39bd9-7283-486d-b75c-6586799f740f.png)'
- en: And there you have it! You now have a bot that communicates with the internet
    via MQTT!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经拥有了通过 MQTT 与互联网通信的机器人！
- en: Project – social media notifier bot with IFTTT
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目 – 使用 IFTTT 的社交媒体通知机器人
- en: Having lots of tabs open in your browser, and clicking on each one to see notifications,
    can be a nuisance. Luckily, we can easily build a project that pulls in notifications
    from several sources to create a bot that notifies us on an LCD. We'll also learn
    more about If This, Then That (IFTTT), and its plugin that will allow us to route
    events to Adafruit IO and thereby our Pi.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开很多标签页，并点击每个标签以查看通知，可能会很麻烦。幸运的是，我们可以轻松构建一个项目，从多个来源收集通知，创建一个在 LCD 上通知我们的机器人。我们还将了解更多关于
    If This, Then That (IFTTT) 及其插件，它将允许我们将事件路由到 Adafruit IO 以及我们的 Pi。
- en: Getting started with IFTTT
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 IFTTT
- en: IFTTT is a way to create graphical formulas (called applets) that consist of
    a trigger (such as a social media event) and an action (such as sending data to
    AdafruitIO). We're going to walk through linking AdafruitIO and our social media
    accounts to IFTTT, and creating Applets to send social media notification data
    to AdafruitIO.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: IFTTT 是创建图形公式（称为 applet）的一种方式，它由一个触发器（例如社交媒体事件）和一个动作（例如将数据发送到 AdafruitIO）组成。我们将通过将
    AdafruitIO 和我们的社交媒体账户链接到 IFTTT，并创建 Applet 将社交媒体通知数据发送到 AdafruitIO。
- en: First, sign in or create an account at [https://ifttt.com/](https://ifttt.com/),
    and we'll start linking our accounts.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 [https://ifttt.com/](https://ifttt.com/) 上登录或创建一个账户，然后我们将开始链接我们的账户。
- en: Linking IFTTT to Adafruit
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 IFTTT 连接到 Adafruit
- en: 'To link your AdafruitIO account, click your username in the upper-right corner,
    select Services, then select the All Services link at the bottom of the page.
    Then, type `Adafruit` into the search bar, and click the black box marked Adafruit,
    which should bring you here:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要链接你的 AdafruitIO 账户，点击右上角的用户名，选择服务，然后选择页面底部的所有服务链接。然后，在搜索栏中输入 `Adafruit`，并点击标记为
    Adafruit 的黑色框，应该会带你到这里：
- en: '![](img/4341557c-a454-43fa-9355-87e518ebc867.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4341557c-a454-43fa-9355-87e518ebc867.png)'
- en: After that, click Connect and enter your AdafruitIO credentials. You'll want
    to do this for any social media networks that you'd like notifications from as
    well. I added `Twitter` and `Twitch.tv` accounts.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击连接并输入你的AdafruitIO凭据。你希望从任何社交媒体网络接收通知，也应该这样做。我添加了`Twitter`和`Twitch.tv`账户。
- en: Now that we've linked our accounts, we should take a step back to Adafruit.IO
    and add feeds for our social media accounts so we can select them when we create
    our IFTTT applets.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将账户链接，我们应该退回到Adafruit.IO并添加我们的社交媒体账户的feed，这样我们就可以在创建我们的IFTTT applet时选择它们。
- en: Setting up feeds for your social media MQTT messages in AdafruitIO
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AdafruitIO中设置社交媒体MQTT消息的feed
- en: In your AdafruitIO dashboard, you should create a feed (this corresponds to
    an MQTT topic) for each social media service you want your bot to notify you on.
    Having clear and granular topics is important when building large MQTT systems
    with several bots listening for events.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的AdafruitIO仪表板上，你应该为每个你希望你的机器人通知你的社交媒体服务创建一个feed（这对应于一个MQTT主题）。当构建包含多个机器人监听事件的复杂MQTT系统时，拥有清晰且粒度化的主题非常重要。
- en: 'I created a group for these feeds by selecting Actions on the Feeds page of
    the AdafruitIO dashboard and clicking Create a New Group:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我通过在AdafruitIO仪表板的Feeds页面选择操作并点击创建新组来为这些feed创建了一个组：
- en: '![](img/d7336c10-9f08-4404-8067-89e909aeb002.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d7336c10-9f08-4404-8067-89e909aeb002.png)'
- en: I named mine as `Social-Media-Bot`. Once you've finished making the group, click
    the name of the group to be taken to that group's dashboard, which should have
    no feeds in it yet. Click Actions and select Create a New Feed from the dropdown.
    Then, enter the name of the social media service you will be using as the name
    of the feed. Repeat for any social media services you'd like to use.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我将其命名为`Social-Media-Bot`。一旦你完成创建组，点击组名进入该组的仪表板，它应该还没有feed。点击操作并从下拉菜单中选择创建新feed。然后，输入你将使用的社交媒体服务的名称作为feed的名称。对于你希望使用的任何社交媒体服务重复此操作。
- en: The AdafruitIO Feed Group also serves as a handy namespacing tool. The twitter
    feed in the Social-Media-Bot group becomes Social-Media-Bot.twitter. This is extremely
    useful if you end up with multiple projects with Twitter data feeds.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: AdafruitIO Feed Group还充当了一个方便的命名空间工具。Social-Media-Bot组中的twitter feed变成了Social-Media-Bot.twitter。如果你有多个包含Twitter数据feed的项目，这将非常有用。
- en: Now that we have our social media accounts linked to IFTTT, and AdafruitIO feeds
    ready to receive data, let's create some IFTTT Applets to collect the social media
    notifications.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将社交媒体账户链接到IFTTT，并且AdafruitIO feed已经准备好接收数据，让我们创建一些IFTTT Applets来收集社交媒体通知。
- en: Creating our IFTTT Applets
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的IFTTT Applets
- en: 'On the IFTTT home page, you create a new applet by selecting your username
    in the top-right corner and selecting New Applet:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在IFTTT主页上，你通过在右上角选择你的用户名并选择新Applet来创建一个新的applet：
- en: '![](img/246f08cf-cb15-4fd4-bf8e-f9247a1cc1b7.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/246f08cf-cb15-4fd4-bf8e-f9247a1cc1b7.png)'
- en: 'You''ll be presented with the IFTTT Applet formula:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到IFTTT Applet公式：
- en: '![](img/d7da2288-fc28-4124-b053-59a355cb41e8.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d7da2288-fc28-4124-b053-59a355cb41e8.png)'
- en: Click the +this link to be taken to a list of services you can use to trigger
    your IFTTT applet. Fill out the name of the social media service you wish to use
    in the search bar, and select it as it pops up.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 点击+this链接，进入你可以用来触发你的IFTTT applet的服务列表。在搜索栏中填写你希望使用的社交媒体服务的名称，并选择它。
- en: '![](img/5aac1204-9409-4270-92b0-bb0c74cb7531.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5aac1204-9409-4270-92b0-bb0c74cb7531.png)'
- en: You'll then see a list of possible triggers from that service. Select which
    one you'd like to be notified for (I started with someone following my twitter
    account). Once you click your trigger, you'll be taken back to the formula page,
    and the +this will be replaced with the logo for the social media site you use
    as a trigger. Then, it's time to create our action by clicking +that.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到该服务可能触发的列表。选择你希望被通知的触发器（我从有人关注我的twitter账户开始）。一旦你点击触发器，你将返回到公式页面，+this将被替换为你用作触发器的社交媒体网站的logo。然后，点击+that创建我们的操作。
- en: '![](img/7d4c5a5d-842d-4a48-9143-c5ea117e4dd2.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7d4c5a5d-842d-4a48-9143-c5ea117e4dd2.png)'
- en: 'You''ll be taken to a similar page to select a service for your action. Search
    for `AdafruitIO` and select it. You''ll be asked to fill out some information
    about which AdafruitIO feed you''d like to send to, and the message you''d like
    to send:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你将被带到类似页面以选择用于操作的服务。搜索`AdafruitIO`并选择它。你将被要求填写有关你希望发送到哪个AdafruitIO feed的信息，以及你希望发送的消息：
- en: '![](img/87618227-2346-4c92-8a5f-6c45a0a091e6.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/87618227-2346-4c92-8a5f-6c45a0a091e6.png)'
- en: 'Select the name of the feed that matches the social media site that triggers
    this applet. Under data to save, you can enter a message that we can display on
    the LCD. You can also click the Add ingredient button to add information from
    the social media event itself:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 选择与触发此小程序的社交媒体网站匹配的源名称。在要保存的数据中，你可以输入我们可以在 LCD 上显示的消息。你还可以点击添加成分按钮来添加社交媒体事件本身的信息：
- en: '![](img/fc4638c8-896a-4198-9ea9-cf51a78d186c.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc4638c8-896a-4198-9ea9-cf51a78d186c.png)'
- en: I selected FullName and ended up with the message `{{FullName}} followed you
    on Twitter`!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了FullName，最终收到了消息`{{FullName}}在Twitter上关注了你`！
- en: Repeat this for both the other triggers from the first social media site and
    the other social media sites and their triggers.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 对第一个社交媒体网站的其他触发器和其他社交媒体网站及其触发器重复此操作。
- en: Now that our IFTTT Applets are sending data to AdafruitIO, we can start wiring
    and coding our bot.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 IFTTT Applets 正在向 AdafruitIO 发送数据，我们可以开始为我们的机器人布线和编码。
- en: Wiring up our project
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接我们的项目
- en: 'All you need for this project is the LCD; if you wired up the button for the
    last project, you can remove it:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你只需要 LCD；如果你为上一个项目连接了按钮，你可以将其移除：
- en: '![](img/6a4ccdea-53cd-432d-b802-936f9d715a70.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a4ccdea-53cd-432d-b802-936f9d715a70.png)'
- en: Coding our social media notifications to show on the LCD
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的社交媒体通知编码到 LCD 上显示
- en: Create a file named `social-media-bot.js` in your `project` folder, and copy
    the contents of `mqtt-button-lcd` into it. We're going to modify this file to
    create our social media bot.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`project`文件夹中创建一个名为`social-media-bot.js`的文件，并将`mqtt-button-lcd`的内容复制进去。我们将修改此文件以创建我们的社交媒体机器人。
- en: First, remove all references to the button variable and `Button` object, since
    we won't be using them.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除所有关于按钮变量和`Button`对象的引用，因为我们不会使用它们。
- en: 'Next. we''ll need to get the names of the feeds (topics) that we''ll be subscribing
    to. To do this, click each feed in the AdafruitIO Feeds page that you want to
    use for this bot. Then in the right column of the page, click Feed Information
    and copy the MQTT by key field:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要获取我们将要订阅的源（主题）的名称。为此，点击 AdafruitIO 源页面中你想用于此机器人的每个源。然后在页面右侧，点击源信息并复制
    MQTT by key 字段：
- en: '![](img/91bd643c-0673-47a9-8da5-4b21a127cec9.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91bd643c-0673-47a9-8da5-4b21a127cec9.png)'
- en: 'Then, in the `client.on(''connect'')` handler, we''re going to subscribe to
    multiple topics, and not use the callback feature. Then, we''ll add a `client.on(''message'')`
    handler to display the message from IFTTT on the LCD display:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`client.on('connect')`处理程序中，我们将订阅多个主题，并且不使用回调功能。然后，我们将添加一个`client.on('message')`处理程序来在
    LCD 显示器上显示来自 IFTTT 的消息：
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now that we've subscribed to our new feeds and set it to print to the LCD, we
    can run it!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经订阅了新的源并将其设置为打印到 LCD，我们可以运行它！
- en: Running your social media bot
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行你的社交媒体机器人
- en: 'Run the following command to see the output:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以查看输出：
- en: '[PRE16]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Soon, you should see a message pop up on your LCD when you get a social media
    notification.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 很快，当你收到社交媒体通知时，你应该会在你的 LCD 上看到一个消息弹出。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed several ways that internet-connected devices can
    talk to each other. We dove into the MQTT protocol and discussed how its PubSub
    interface and abstractions made it a great choice for projects on our Pi. Then,
    we built a bot that communicated with the outside world using a button and let
    the outside world communicate with it via the AdafruitIO dashboard and IFTTT.
    Finally, we built a social media notification bot using AdafruitIO integration
    into IFTTT.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了几种互联网连接设备之间相互通信的方式。我们深入探讨了 MQTT 协议，并讨论了其 Pub/Sub 接口和抽象使其成为我们 Pi 上的项目的一个很好的选择。然后，我们构建了一个使用按钮与外界通信的机器人，并通过
    AdafruitIO 仪表板和 IFTTT 让外界与之通信。最后，我们使用 AdafruitIO 集成到 IFTTT 中构建了一个社交媒体通知机器人。
- en: Questions
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are two ways IoT devices interface with the internet that aren't specific
    to IoT?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有哪些两种方式物联网设备与互联网接口，但不是特定于物联网的？
- en: What does MQTT stand for?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MQTT 代表什么？
- en: What is an MQTT client capable of?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MQTT 客户端能做什么？
- en: What is an MQTT broker capable of?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MQTT 代理能做什么？
- en: Why does our Pi get the messages it publishes to AdafruitIO?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们的 Pi 会收到它发布到 AdafruitIO 的消息？
- en: Further reading
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**A great tutorial on MQTT**: [https://www.pubnub.com/blog/what-is-mqtt-use-cases/](https://www.pubnub.com/blog/what-is-mqtt-use-cases/)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关于 MQTT 的优秀教程**：[https://www.pubnub.com/blog/what-is-mqtt-use-cases/](https://www.pubnub.com/blog/what-is-mqtt-use-cases/)'
- en: '**The MQTT protocol official site**: [http://mqtt.org/](http://mqtt.org/)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MQTT 协议官方站点**：[http://mqtt.org/](http://mqtt.org/)'
- en: '**AdafruitIO tutorials**: [https://learn.adafruit.com/category/adafruit-io](https://learn.adafruit.com/category/adafruit-io)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AdafruitIO教程**: [https://learn.adafruit.com/category/adafruit-io](https://learn.adafruit.com/category/adafruit-io)'
- en: '**The mqtt module page on npm**: [https://www.npmjs.com/package/mqtt](https://www.npmjs.com/package/mqtt)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**npm上的mqtt模块页面**: [https://www.npmjs.com/package/mqtt](https://www.npmjs.com/package/mqtt)'
