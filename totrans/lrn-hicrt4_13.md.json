["```js\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" \n          content=\"text/html; charset=UTF-8\">\n    <title>Highcharts for Ext JS 5</title>\n    // At the time of writing, there is no CDN for ExtJs 5\n    // Download http://www.sencha.com/products/extjs/download/ext-js-5.0.0/3164\n    <link rel=\"stylesheet\" type=\"text/css\" \n          href=\"/extjs5/packages/ext-theme-classic/build/resources/ext-theme-classic-all.css\" />\n  </head>\n  <body></body>\n  <script type=\"text/javascript\" src=\"img/ext-all.js\"></script>\n  <script type='text/javascript'>\n          Ext.require('Ext.window.Window');\n          Ext.onReady(function() {\n               // application startup code goes here\n               ....\n          });\n  </script>\n</html>\n```", "```js\nvar win = Ext.create('Ext.window.Window', {\n       title: 'Ext JS Window',\n       layout: 'fit',\n       items: [{\n            xtype: 'textarea',\n            id: 'textbox',\n            value: 'Lorem ipsum dolor sit amet, ... '\n       }]\n});\n\nwin.show();\n```", "```js\nvar tb = Ext.getCmp('textbox');\n```", "```js\nvar tb = win.getComponent('textbox');\n```", "```js\nvar val =   \nwin.getComponent('panel').getComponent('textbox').getValue();\n```", "```js\nvar val = win.down('#textbox').getValue(); \n```", "```js\n    var viewport = Ext.create('Ext.container.Viewport', {\n      layout: 'border',\n      defaults: {\n         frame: true\n      },\n      items: [{\n          region: 'north',\n          html: '<h1>North</h1>'\n      }, {\n          region: 'east',\n          html: '<h1>East</h1>',\n          width: '15%'\n      }, {\n          region: 'south',\n          html: '<h1>South</h1>'\n      }, {\n          region: 'west',\n          html: '<h1>West</h1>',\n          width: '20%'\n      }, {\n          region: 'center',\n          html: '<h1>Center</h1>'\n      }]\n    });\n```", "```js\nitems:[{\n      xtype: 'tabpanel',\n      items: [{\n           title: 'Tab 1',\n           xtype: 'form',\n           items: [{\n                .....\n           }]\n      }, {\n          title: 'Tab 2',\n          ....\n      }]\n}]\n```", "```js\nExt.Ajax.request({\n     url: 'getData.php ',\n     params: { id: 1 },\n     success: function(response) {\n          // Decode JSON response from the server\n          var result = Ext.decode(response.responseText);\n          if (result && result.success) {\n              .... \n          } else {\n              ....\n          }\n     }\n});\n```", "```js\n{ \"data\": [\n       { \"host\" : \"192.168.200.145\", \"download\" : 126633683 },  \n       { \"host\" : \"192.168.200.99\" , \"download\" : 55840235 },\n       { \"host\" : \"192.168.200.148\", \"download\" : 54382673 },\n        ...\n] }\n```", "```js\nExt.onReady(function() {\n    Ext.define('NetworkData', {\n        extend: 'Ext.data.Model',\n        fields: [\n            {name: 'host',  type: 'string'},\n            {name: 'download', type: 'int'}        \n        ]\n    });\n});\n```", "```js\nvar netStore = Ext.create('Ext.data.JsonStore', {\n      autoLoad: true,\n      model: 'NetworkData',\n      proxy: {\n        type: 'ajax',\n        url: './getNetTraffic.php',\n        reader: {\n            type: 'json',\n            idProperty: 'host',\n            rootProperty: 'data'\n        }\n    }\n});\n```", "```js\nvar win = Ext.create('Ext.window.Window', {\n      title: 'Network Traffic',\n      layout: 'fit',\n      items: [{\n             xtype: 'grid',\n             height: 170,\n             width: 270,\n             store: netStore,\n             columns: [{\n                 header: 'IP Address',\n                 dataIndex: 'host',\n                 width: 150\n             }, {\n                 header: 'Download',\n                 dataIndex: 'download'\n             }]\n      }]\n}).show();\n```", "```js\nvar myConfig = {\n      chart: {\n            renderTo: 'container',\n            width: 350,\n            height: 300,\n            ....\n      },\n      series: [{\n          type: 'column',\n          data: [ 126633683, 55840235, .... ]\n      }],\n      xAxis: { \n          categories: [ \"192.168.200.145\", \n                        \"192.168.200.99\", ... ],\n          ....\n      },\n      yAxis: { .... },\n      title: { .... },\n      ....\n};\n```", "```js\nvar myNewConfig = {\n        width: 350,\n        height: 300\n};\n```", "```js\n// ExtJS component config for Highcharts extension\nvar myNewConfig = {\n        width: 450,\n        height: 350,\n        chartConfig: {\n              // Trimmed Highcharts configuration here\n              chart: { .... },\n              xAxis: { .... },\n              yAxis: { .... },\n              title: { .... },\n              ....\n        }\n};\n```", "```js\n        fields: [\n            { name: 'host', type: 'string' },\n            { name: 'download', type: 'int' }        \n        ]\n```", "```js\nvar myNewConfig = {\n        width: 450,\n        height: 350,\n        store: netStore,\n        series: [{\n              name: 'Network Traffic',\n              type: 'column',\n              // construct the series data out of the\n              // 'download' field from the return Json data\n              dataIndex: 'download'\n        }],\n        // construct the x-axis categories data from\n        // 'host' field from the return Json data\n        xField: 'host',\n        chartConfig: {\n             .... \n        }\n};\n```", "```js\nvar hcChart = Ext.create('Chart.ux.Highcharts', myNewConfig);\nvar win = Ext.create('widget.window', {\n      title: 'Network Traffic',\n      layout: 'fit',\n      items: [ hcChart ]\n}).show();\n```", "```js\nvar win = Ext.create('widget.window', {\n      title: 'Network Traffic',\n      layout: 'fit',\n      items: [{\n             xtype: 'highchart',\n             itemId: 'highchart',\n             height: 350,\n             width: 450,\n             store: netStore,\n             series: [{ .... }],\n             xField: 'host',\n             chartConfig: {\n                 chart: { .... },\n                 xAxis: { .... },\n                 yAxis: { .... },\n                 ....\n      }]\n}).show();\n```", "```js\n       .....\n       store: netStore,\n            series: [{\n                  name: 'Network Traffic',\n                  type: 'column',\n                  dataIndex: 'download',\n                  color: '#A47D7C'\n            }],\n```", "```js\n            series: [{\n                  name: 'Upload',\n                  type: 'column',\n                  yField: 'upload'\n            }, {\n                  name: 'Download',\n                  type: 'column',\n                  yField: 'download'\n           }],\n           // 'Monday', 'Tuesday', 'Wednesday' ....  \n           xField: 'day'\n```", "```js\n           series: [{\n                  name: 'Upload',\n                  type: 'line',\n                  yField: 'upload'\n            }, {\n                  name: 'Download',\n                  type: 'line',\n                  yField: 'download'\n           }], \n           // Time in UTC\n           xField: 'time'\n```", "```js\n           series: [{\n                  name: 'Upload',\n                  type: 'line',\n                  yField: 'upload',\n                  xField: 'upload_time'\n            }, {\n                  name: 'Download',\n                  type: 'line',\n                  yField: 'download',\n                  xField: 'download_time'\n           }]\n```", "```js\n  getData : function(record, index) {\n     var yField = this.yField || this.dataIndex, \n         xField = this.xField, \n         point = {\n             data : record.data,\n             y : record.data[yField]\n         };\n     if (xField)\n         point.x = record.data[xField];\n     return point;\n  },\n```", "```js\n{\"data\":[\n      {\"host\":\"192.168.200.145\",\"download\":126633683,\n       \"upload\":104069233},\n      {\"host\":\"192.168.200.99\",\"download\":55840235,\n       \"upload\":104069233},\n      {\"host\":\"192.168.200.148\",\"download\":54382673,\n       \"upload\":19565468},\n       ....\n```", "```js\n    fields: [\n        {name: 'host',  type: 'string'},\n        {name: 'download', type: 'int'}, \n        {name: 'upload', type: 'int'}        \n    ]\n```", "```js\n   series: [{\n       name: 'Total Usage',\n       type: 'column',\n       getData: function(record, index) {\n           return {\n               data: record.data,\n               y: record.data.upload + \n                  record.data.download\n           };\n       } \n   }],\n   xField: 'host',\n   ....\n```", "```js\n    series: [{\n        type: 'pie',\n        categorieField: 'host',\n        dataField: 'upload'\n    }]\n```", "```js\n{ \"data\": [\n       { \"host\" : \"192.168.200.145\", \"bytes\" : 126633683,\n         \"direction\" : \"download\"},  \n       { \"host\" : \"192.168.200.145\", \"bytes\" : 104069233,\n         \"direction\" : \"upload\"},  \n       { \"host\" : \"192.168.200.99\", \"bytes\" : 55840235,\n         \"direction\" : \"download\"},  \n       { \"host\" : \"192.168.200.99\", \"bytes\" : 104069233, \n         \"direction\" : \"upload\"},  \n       ....\n] }\n```", "```js\n             series: [{\n                   // Inner pie\n                   type: 'pie',\n                   categorieField: 'host',\n                   dataField: 'bytes',\n                   totalDataField: true,\n                   size: '60%',\n                   ....\n             }, {\n                   // Outer pie\n                   type: 'pie',\n                   categorieField: 'direction',\n                   dataField: 'bytes',\n                   innerSize: '60%',\n                   ....\n             }]\n```", "```js\nwin.down('#highchart').chart.getSVG({ ... });\n```", "```js\naddSeries : function(Array series, [Boolean append]) \n```", "```js\nExt.getComponent('highchart').addSeries([{\n       name: 'Upload',\n       yField: 'upload'\n}], true);\n\nExt.getComponent('highchart').addSeries([{\n       name: 'Random',\n       type: 'column',\n       data: [ 524524435, 434324423, 43436454, 47376432 ]\n}], true);\n```", "```js\nremoveSerie : function(Number idx, [Boolean redraw])\nremoveAllSeries : function()\n```", "```js\nsetSubTitle : function(String title)\nsetTitle: function(String title)\n```", "```js\ndraw: function()\n```", "```js\n    toggleHandler: function(item, pressed) {\n        // Retrieve the chart extension component\n        var chart = Ext.getCmp('chart1').chart;\n        if (pressed && chart.series.length == 1) {\n            Ext.getCmp('chart1').addSeries([{\n                name: 'Yesterday',\n                yField: 'yesterday'\n            }], true);\n            // Display yesterday column in the grid panel\n            .... \n        } else if (!pressed && chart.series.length == 2) {\n            Ext.getCmp('chart1').removeSerie(1);\n            // Hide yesterday column in the grid panel\n            ....\n        }\n     }\n```", "```js\n  toggleHandler: function(item, pressed) {\n       var chart2 = Ext.getCmp('chart2');    \n           chart2.chartConfig.plotOptions.column.stacking = \n              (pressed) ? 'normal' : null;\n           chart2.draw();\n  }\n```", "```js\n     chartConfig: {\n         .... ,                  \n         plotOptions: {\n             column: { stacking: null }\n         },\n         ......\n```", "```js\n{\"data\": [\n      {\"date\": \"Mon 13/08\", \"type\": \"wan\", \n       \"bytes\": 92959786, \"color\": \"#8187ff\" },\n      {\"date\": \"Mon 13/08\", \"type\": \"lan\", \n       \"bytes\": 438238992, \"color\": \"#E066A3\" },\n      {\"date\": \"Tue 14/08\", \"type\": \"wan\", \n       \"bytes\": 241585530, \"color\": \"#8187ff\" },\n      {\"date\":\"Tue 14/08\", \"type\": \"lan\", \n       \"bytes\": 773479723, \"color\": \"#E066A3\" },\n      .....\n```", "```js\n           items:[{              \n                 xtype: 'highchart',\n                 id: 'chart3',\n                 store: summStore,\n                 series: [{ \n                     type: 'pie',\n                     name: 'Total',\n                     categorieField: 'date',\n                     dataField: 'bytes', \n                     totalDataField: true,\n                     size: '60%',  \n                     showInLegend: true,\n                     dataLabels: { enabled: true }\n                 }],\n                 chartConfig: {\n                     chart: {...},\n                     title: {  text: null },\n                     legend: { enabled: false }\n                 }\n           }]\n```", "```js\n     toggleHandler: function(item, pressed) {\n         var config = Ext.getCmp('chart3').chartConfig;\n         if (pressed) {\n             Ext.getCmp('chart3').addSeries([{\n                 type: 'pie',\n                 center: [ '50%', '45%' ],\n                 categorieField: 'type',\n                 dataField: 'bytes',\n                 colorField: 'color',\n                 innerSize: '50%',\n                 dataLabels: {\n                     distance: 20,\n                     formatter: function() {\n                       if (this.point.x <= 1) {\n                         return this.point.name.toUpperCase();\n                       }\n                       return null;\n                     }\n                 },\n                 size: '60%'\n             }], true);\n\n             config.legend.enabled = true;\n             config.series[0].dataLabels.enabled = false;\n             config.series[0].size = '50%';\n             config.series[0].center = [ '50%', '45%' ];\n         } else {\n             Ext.getCmp('chart3').removeSerie(1);\n             config.legend.enabled = false;\n             config.series[0].dataLabels.enabled = true;\n             config.series[0].size = '60%';\n             config.series[0].center = [ '50%', '50%' ];\n         }\n         Ext.getCmp('chart3').draw();\n     }\n```", "```js\npoint: {\n  events: {\n    click: function(evt) {\n      var menu = \n        Ext.create('Ext.menu.Menu', {\n          items: [{\n            text: 'Compare to Average Usage',\n            scope: this,\n            handler: function() {\n              var series = this.series, \n                  yVal = this, avg = 0, msg = '';\n\n              Ext.each(this.series.data, function(point) {\n                avg += point.y;\n              });\n              avg /= this.series.data.length;\n\n              if (yVal > avg) {\n                msg = \n                  Highcharts.numberFormat(yVal - avg) + \n                  \" above average (\" +               \n                  Highcharts.numberFormat(avg) + \")\";\n              } else {\n                msg = \n                  Highcharts.numberFormat(avg - yVal) + \n                  \" below average (\" +  \n                  Highcharts.numberFormat(avg) + \")\";\n              }\n\n              Ext.Msg.alert('Info', msg);\n            }\n          }]  // items:\n        });\n\n        menu.showAt(evt.point.pageX, evt.point.pageY);\n      }\n    }\n  }\n```"]