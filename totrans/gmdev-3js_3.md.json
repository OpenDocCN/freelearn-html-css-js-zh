["```js\nfunction KeyboardControls(object, options) {\n  this.object = object;\n  options = options || {};\n  this.domElement = options.domElement || document;\n  this.moveSpeed = options.moveSpeed || 1;\n\n  this.domElement.addEventListener('keydown', this.onKeyDown.bind(this), false);\n  this.domElement.addEventListener('keyup', this.onKeyUp.bind(this), false);\n}\n\nKeyboardControls.prototype = {\n  update: function() {\n    if (this.moveForward)  this.object.translateZ(-this.moveSpeed);\n    if (this.moveBackward) this.object.translateZ( this.moveSpeed);\n    if (this.moveLeft)     this.object.translateX(-this.moveSpeed);\n    if (this.moveRight)    this.object.translateX( this.moveSpeed);\n  },\n  onKeyDown: function (event) {\n    switch (event.keyCode) {\n      case 38: /*up*/\n      case 87: /*W*/ this.moveForward = true; break;\n\n      case 37: /*left*/\n      case 65: /*A*/ this.moveLeft = true; break;\n\n      case 40: /*down*/\n      case 83: /*S*/ this.moveBackward = true; break;\n\n      case 39: /*right*/\n      case 68: /*D*/ this.moveRight = true; break;\n    }\n  },\n  onKeyUp: function (event) {\n    switch(event.keyCode) {\n      case 38: /*up*/\n      case 87: /*W*/ this.moveForward = false; break;\n\n      case 37: /*left*/\n      case 65: /*A*/ this.moveLeft = false; break;\n\n      case 40: /*down*/\n      case 83: /*S*/ this.moveBackward = false; break;\n\n      case 39: /*right*/\n      case 68: /*D*/ this.moveRight = false; break;\n    }\n  }\n};\n```", "```js\n<script src=\"img/FirstPersonControls.js\"></script>\n```", "```js\nvar controls, clock;\n```", "```js\nclock = new THREE.Clock();\ncontrols = new THREE.FirstPersonControls(camera);\ncontrols.movementSpeed = 100;\ncontrols.lookSpeed = 0.1;\n```", "```js\nrequestAnimationFrame(function animate() {\n  renderer.render(scene, camera);\n controls.update(clock.getDelta());\n  requestAnimationFrame(animate);\n});\n```", "```js\nprojector = new THREE.Projector();\n```", "```js\nrenderer.domElement.addEventListener('mousedown', function(event) {\n  var vector = new THREE.Vector3(\n     renderer.devicePixelRatio * (event.pageX - this.offsetLeft) / this.width * 2 - 1,\n    -renderer.devicePixelRatio * (event.pageY - this.offsetTop) / this.height * 2 + 1,\n    0\n    );\n  projector.unprojectVector(vector, camera);\n\n  var raycaster = new THREE.Raycaster(\n    camera.position,\n    vector.sub(camera.position).normalize()\n  );\n  var intersects = raycaster.intersectObjects(OBJECTS);\n  if (intersects.length) {\n    // intersects[0] describes the clicked object\n  }\n}, false);\n```", "```js\nvar raycaster = projector.pickingRay(vector, camera);\n```", "```js\nvar widthHalf  = 0.5 * renderer.domElement.width  / renderer.devicePixelRatio,\n  heightHalf = 0.5 * renderer.domElement.height / renderer.devicePixelRatio;\n\nvar vector = mesh.position.clone(); // or an arbitrary point\nprojector.projectVector(vector, camera);\n\nvector.x =  vector.x * widthHalf  + widthHalf;\nvector.y = -vector.y * heightHalf + heightHalf;\n```", "```js\n* {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n```", "```js\n// Globals\nINV_MAX_FPS = 1 / 60;\nframeDelta = 0;\nclock = new THREE.Clock();\n\n// In the animation loop (the requestAnimationFrame callback)â€¦\nframeDelta += clock.getDelta();\nwhile (frameDelta >= INV_MAX_FPS) {\n  update(INV_MAX_FPS); // calculate physics\n  frameDelta -= INV_MAX_FPS;\n}\n```", "```js\n<html>\n  <head>\n    <!-- ... -->\n <link rel=\"stylesheet\" href=\"main.css\" />\n  </head>\n  <body>\n    <div id=\"start\"><div id=\"instructions\">\n      Click to start\n    </div></div>\n    <div id=\"hud\" class=\"hidden\">\n      <!-- ... -->\n      <div id=\"hurt\" class=\"hidden\"></div>\n    </div>\n    <script src=\"img/three.min.js\"></script>\n <script src=\"img/main.js\"></script>\n  </body>\n</html>\n```", "```js\nvar map = \"XXXXXXX  \\n\" +\n          \"X     X  \\n\" +\n          \"X  S  X  \\n\" +\n          \"X     X  \\n\" +\n          \"X   S XXX\\n\" +\n          \"XXX     X\\n\" +\n          \"  XX  S X\\n\" +\n          \"   X    X\\n\" +\n          \"   XXXXXX\";\nmap = map.split(\"\\n\");\nvar HORIZONTAL_UNIT = 100,\n    VERTICAL_UNIT   = 100,\n    ZSIZE = map.length * HORIZONTAL_UNIT,\n    XSIZE = map[0].length * HORIZONTAL_UNIT;\n```", "```js\nfor (var i = 0, rows = map.length; i < rows; i++) {\n  for (var j = 0, cols = map[i].length; j < cols; j++) {\n    addVoxel(map[i].charAt(j), i, j);\n  }\n}\n```", "```js\nfunction addVoxel(type, row, col) {\n  var z = (row+1) * HORIZONTAL_UNIT - ZSIZE * 0.5,\n      x = (col+1) * HORIZONTAL_UNIT - XSIZE * 0.5;\n  switch(type) {\n    case ' ': break;\n    case 'S':\n      spawnPoints.push(new THREE.Vector3(x, 0, z));\n      break;\n    case 'X':\n      var geo = new THREE.CubeGeometry(HORIZONTAL_UNIT, VERTICAL_UNIT, HORIZONTAL_UNIT);\n      var material = new THREE.MeshPhongMaterial({\n        color: Math.random() * 0xffffff\n      });\n      var mesh = new THREE.Mesh(geo, material);\n      mesh.position.set(x, VERTICAL_UNIT*0.5, z);\n      scene.add(mesh);\n      break;\n  }\n}\n```", "```js\nfunction Player() {\n  THREE.Mesh.apply(this, arguments);\n  this.rotation.order = 'YXZ';\n  this._aggregateRotation = new THREE.Vector3();\n  this.cameraHeight = 40;\n  this.velocity = new THREE.Vector3();\n  this.acceleration = new THREE.Vector3(0, -150, 0);\n  this.ambientFriction = new THREE.Vector3(-10, 0, -10);\n  this.moveDirection = {\n    FORWARD: false,\n    BACKWARD: false,\n    LEFT: false,\n    RIGHT: false\n  };\n}\nPlayer.prototype = Object.create(THREE.Mesh.prototype);\nPlayer.prototype.constructor = Player;\n```", "```js\ndocument.getElementById('start').addEventListener('click', function() {\n  if (BigScreen.enabled) {\n    var instructions = this;\n    BigScreen.request(document.body, function() {\n      PL.requestPointerLock(document.body, function() {\n        instructions.className = 'hidden';\n        startAnimating();\n      }, function() {\n        stopAnimating();\n      });\n    }, function() {\n      instructions.className = 'exited';\n      stopAnimating();\n    });\n  }\n});\n```", "```js\ndocument.addEventListener('mousemove', function(event) {\n  player.rotate(event.movementY, event.movementX, 0);\n}, false);\n```", "```js\nplayer = new Player();\nplayer.add(camera);\nscene.add(player);\n```", "```js\n// When the mesh is instantiated\nmesh.velocity = new THREE.Vector3(0, 0, 0);\nmesh.acceleration = new THREE.Vector3(0, 0, 0);\n\n// Called in the animation loop\nfunction update(delta) {\n  // Apply acceleration\n  mesh.velocity.add(mesh.acceleration().clone().multiplyScalar(delta));\n  // Apply velocity\n  mesh.position.add(mesh.velocity.clone().multiplyScalar(delta));\n}\n```", "```js\n  var halfAccel = mesh.acceleration.clone().multiplyScalar(delta * 0.5);\n  // Apply half acceleration (first half of midpoint formula)\n  mesh.velocity.add(halfAccel);\n  // Apply thrust\n  mesh.position.add(mesh.velocity.clone().multiplyScalar(delta));\n  // Apply half acceleration (second half of midpoint formula)\n  mesh.velocity.add(halfAccel);\n```", "```js\ndocument.addEventListener('keydown', function(event) {\n  switch (event.keyCode) {\n    case 38: // up\n    case 87: // w\n      player.moveDirection.FORWARD = true;\n      break;\n    case 37: // left\n    case 65: // a\n      player.moveDirection.LEFT = true;\n      break;\n    case 40: // down\n    case 83: // s\n      player.moveDirection.BACKWARD = true;\n      break;\n    case 39: // right\n    case 68: // d\n      player.moveDirection.RIGHT = true;\n      break;\n    case 32: // space\n      player.jump();\n      break;\n  }\n}, false);\n```", "```js\nPlayer.prototype.update = (function() {\n  var halfAccel = new THREE.Vector3();\n  var scaledVelocity = new THREE.Vector3();\n  return function(delta) {\n    var r = this._aggregateRotation\n      .multiplyScalar(delta)\n      .add(this.rotation);\n    r.x = Math.max(Math.PI * -0.5, Math.min(Math.PI * 0.5, r.x));\n    this.rotation.x = 0;\n\n    if (this.moveDirection.FORWARD) this.velocity.z -= Player.SPEED;\n    if (this.moveDirection.LEFT) this.velocity.x -= Player.SPEED;\n    if (this.moveDirection.BACKWARD) this.velocity.z += Player.SPEED;\n    if (this.moveDirection.RIGHT) this.velocity.x += Player.SPEED;\n\n    halfAccel.copy(this.acceleration).multiplyScalar(delta * 0.5);\n    this.velocity.add(halfAccel);\n    var squaredVelocity = this.velocity.x*this.velocity.x + this.velocity.z*this.velocity.z;\n    if (squaredVelocity > Player.SPEED*Player.SPEED) {\n      var scalar = Player.SPEED / Math.sqrt(squaredVelocity);\n      this.velocity.x *= scalar;\n      this.velocity.z *= scalar;\n    }\n    scaledVelocity.copy(this.velocity).multiplyScalar(delta);\n    this.translateX(scaledVelocity.x);\n    this.translateZ(scaledVelocity.z);\n    this.position.y += scaledVelocity.y;\n    this.velocity.add(halfAccel);\n\n    this.velocity.add(scaledVelocity.multiply(\n      this.ambientFriction\n    ));\n\n    this.rotation.set(r.x, r.y, r.z);\n    this._aggregateRotation.set(0, 0, 0);\n  };\n})();\n```", "```js\nfunction checkPlayerCollision(player) {\n  player.collideFloor(floor.position.y);\n  var cell = mapCellFromPosition(player.position);\n  switch (cell.char) {\n    case ' ':\n    case 'S':\n      break;\n    case 'X':\n      moveOutside(cell, player);\n      break;\n  }\n}\n```", "```js\nvar XOFFSET = (map.length+1) * 0.5 * HORIZONTAL_UNIT,\n    ZOFFSET = (map[0].length+1) * 0.5 * HORIZONTAL_UNIT,\n    col = Math.floor((position.x+XOFFSET) / HORIZONTAL_UNIT) - 1,\n    row = Math.floor((position.z+ZOFFSET) / HORIZONTAL_UNIT) - 1,\n    char = map[mapRow].charAt(mapCol);\n```", "```js\nbot.rotation.y = Math.random() * Math.PI * 2;\nbot.moveDirection.FORWARD = Math.random() < 0.8;\n```", "```js\nBullet.prototype.update = (function() {\n  var scaledDirection = new THREE.Vector3();\n  return function(delta) {\n    scaledDirection.copy(this.direction).multiplyScalar(this.speed*delta);\n    this.position.add(scaledDirection);\n  };\n})();\n```", "```js\nvar shoot = (function() {\n  var negativeZ = new THREE.Vector3(0, 0, -1);\n  return function(from, to) {\n    bullet = new Bullet();\n    bullet.position.copy(from.position);\n    if (to) {\n      bullet.direction = to.position.clone().sub(from.position).normalize();\n    }\n    else {\n      bullet.direction = negativeZ.clone().applyEuler(from.rotation);\n    }\n    bullets.push(bullet);\n    scene.add(bullet);\n  };\n})();\n```", "```js\nfunction update(delta) {\n  player.update(delta);\n  checkPlayerCollision(player);\n\n  for (var i = bullets.length - 1; i >= 0; i--) {\n    bullets[i].update(delta);\n    checkBulletCollision(bullets[i], i);\n  }\n\n  for (var j = 0; j < enemies.length; j++) {\n    var enemy = enemies[j];\n    enemy.update(delta);\n    checkPlayerCollision(enemy);\n    if (enemy.health <= 0) {\n      spawn(enemy);\n    }\n    shoot(enemy, player);\n    move(enemy);\n  }\n\n  if (player.health <= 0) {\n    spawn(player);\n  }\n}\n```"]