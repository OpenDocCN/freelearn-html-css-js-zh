- en: Chapter 9. Looking at General Usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Taking immediate control of the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with slow responses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relaying messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a service worker as a proxy middleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a service worker with a live flowchart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look into some of the scenarios where the service worker
    can become useful. These scenarios may fall into the general-use category. The
    examples we will look at here can be used as the foundation to build other service
    worker features.
  prefs: []
  type: TYPE_NORMAL
- en: Taking immediate control of the page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This simple recipe will demonstrate how to have the service worker immediately
    take control of the page without having to wait for a navigation event.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the *Setting up service workers* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the *Setting up GitHub pages for
    SSL* recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service Worker Basics"),
    *Learning Service Worker Basics*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, and `style.css` files
    from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/09/01/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/09/01/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_09_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh the page. The status of the service worker will be displayed on the
    screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our `index.html` file, we will add a section to display the service worker
    status.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: At the beginning of the `index.js` file, we will inspect the registration status
    and print it to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next, in the `service-worker.js` file, we will call `skipWaiting()` to enable
    an updated service worker to be immediately active when there is an existing service
    worker that differs from the updated version.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Working with slow responses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Slow updates from the service worker are a good way to mock slow response times
    from the servers. In this recipe, we are going to use a timeout to mock slow responses.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes in [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, `manifest.json`, `server.js`,
    `package.json`, and `style.css` files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/09/02/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/09/02/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a browser and go to index.html.![How to do it...](img/B05381_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Developer Toolbars (*Cmd* + *Alt* + *I* or *F12*). Now refresh the
    page and look at the messages in the console. You will see the service worker
    life cycle methods are logged out into the console.![How to do it...](img/B05381_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh the page. A message from the service worker will be displayed on the
    screen.![How to do it...](img/B05381_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `index.js` file, we will append the console message to the screen at
    the point of service worker registration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, in the `service-worker.js` file we will create a function to delay any
    new promise we receive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The usual lifecycle methods will call the `wait` function in order to delay
    the `install`, `activate`, and `fetch` statuses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Relaying messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Service workers can be used to build a small chat message feature into your
    browser. This recipe demonstrates how to communicate between a page and the service
    worker by relaying messages between pages we are going to use to build our little
    chat app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the *Setting up service workers* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the *Setting up GitHub pages for
    SSL* recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service Worker Basics"),
    *Learning Service Worker Basics*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, `manifest.json`, `package.json`,
    and `style.css` files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/09/03/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/09/03/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_09_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open another browser and go to `index.html`. Type something in the text
    area.![How to do it...](img/B05381_09_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open another browser and go to `index.html`. Type something in the text
    area.![How to do it...](img/B05381_09_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the beginning of the `index.js` file, we query the DOM nodes for the UI.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We then listen to any service worker messages. When a message is received, we
    specify a DOM element to display it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When a page is force-reloaded, for example, the service worker will not send
    any messages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `service-worker.js` file has the event handler for the message.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: An immediate claim will make sure that the user doesn't have to refresh the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the `index.html` file, we add a div, a text area, and a paragraph tag for
    the messages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Using a service worker as a proxy middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A proxy is an intermediary between a web browser and the Internet. In this recipe,
    you will learn how to use a service worker as a proxy middleware.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes in [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download all the files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/09/04/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/09/04/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_09_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the first link to navigate to the `/hello` link.![How to do it...](img/B05381_09_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open DevTools (*Cmd* + *Alt* + *I* or *F12*) to see the log messages on
    the **Console** tab.![How to do it...](img/B05381_09_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the first link to navigate to the `/hello/world` link.![How to
    do it...](img/B05381_09_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will add two links to the `index.html` file where we are planning to create
    a proxy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We will create a proxy for requests to the local URLs inside the `service-worker.js`
    file containing a `hello` string as well as `hello/world`. The client will recognize
    this as a local resource.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We will pass these handlers into the fetch event listener as callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using a service worker with a live flowchart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to use a service worker by demonstrating
    the workflow and logging the steps so we can follow the flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'The features we are going to implement are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A button to register a service worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A button to reload the document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A button to unregister the service worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The buttons can be pressed in any order. You can also specify the service worker
    script URL and scope to simulate different test cases.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the *Setting up service workers* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the *Setting up GitHub pages for
    SSL* recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service Worker Basics"),
    *Learning Service Worker Basics*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/08/05/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/08/05/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_09_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open DevTools (*Cmd* + *Alt* + *I* or *F12*) to see the log messages on
    the **Console** tab.![How to do it...](img/B05381_09_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **REGISTER SPECIFIED SW** button.![How to do it...](img/B05381_09_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open DevTools (*Cmd* + *Alt* + *I* or *F12*) to see the log messages on
    the **Console** tab.![How to do it...](img/B05381_09_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **RELOAD DOCUMENT** button.![How to do it...](img/B05381_09_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open up DevTools (*Cmd* + *Alt* + *I* or *F12*) to see the log messages
    on the **Console** tab.![How to do it...](img/B05381_09_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **UNREGISTER ACTIVE SW** button.![How to do it...](img/B05381_09_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open up DevTools (*Cmd* + *Alt* + *I* or *F12*) to see the log messages
    on the **Console** tab.![How to do it...](img/B05381_09_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the beginning of the `app.js` file, we initiate a helper for the service
    worker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To register a service worker, we perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Then, we check if the service worker is supported.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Next, we check if the service worker is in control.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now we try to register the service worker in order to enable features.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We will disable the possibility of the user unregistering the service worker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: So the application gets started.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the `service-worker.js` file, we receive the payload and add an event listener
    for registering the push event.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the `index.html` file, we will add a section to display the buttons and the
    console.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
