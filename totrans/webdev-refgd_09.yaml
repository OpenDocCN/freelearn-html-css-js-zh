- en: Chapter 9. JavaScript Expressions, Operators, Statements, and Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript is the most commonly used web programming language and is very popular
    among developers around the world. This chapter will cover most of the expressions,
    operators, statements, and arrays used in this language.
  prefs: []
  type: TYPE_NORMAL
- en: Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A valid unit of code required to resolve a value is known as an **expression**.
    It is a set of literals, operators, variables, and expressions required to evaluate
    a value. This value can be a string or any logical value. An expression results
    in a value that can be written wherever a value is expected. There are two types
    of expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: An expression that assigns a value to a variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An expression that has a value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, a value is assigned to variable `A`, and for assigning
    that value to the variable, we use an assignment operator. Now consider another
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this example, no value is assigned to a variable; however, it evaluates the
    result of `2+3` as `5`. The operator used in this expression is known as an **addition
    operator**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Expressions in JavaScript can be broadly classified into three types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Arithmetic**: These evaluate numbers. This means that these expressions perform
    mathematical calculations between values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logical**: These are used to evaluate and give the result in the form of
    `true` or `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**String**: These are used to evaluate strings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is another type of expression known as a **conditional expression**.
    These expressions are usually used in the `if-else` and `loop` conditions. These
    conditional expressions evaluate the result in the form of `true` or `false` and
    have only two values `True` and `False`. If the first condition is `true`, then
    it will evaluate first, otherwise it will evaluate second, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Primary expressions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In JavaScript, primary expressions are basic keywords and they are special objects,
    identifiers, and literals, which do not need any further evaluation to resolve
    their value. They may also be the result of another expression that is surrounded
    by brackets.
  prefs: []
  type: TYPE_NORMAL
- en: For example, `this` and `function` are keywords and these are primary expressions
    in JavaScript. The `this` keyword always returns a value whenever it enters an
    execution context. Identifiers are also primary expressions, and they refer to
    a function or an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four types of literals, as primary expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Boolean literals**: These contain `1`/`0` or `true`/`false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Null literals**: These contain a `null` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Undefined literals**: These contain any type of data type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**String literals**: These contain a string of characters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object initializer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In JavaScript, an object initializer is used to initialize an object. It is
    an expression known as an **object initializer**. Every object in JavaScript is
    an entity that has a type. Every object has some property associated with it.
    There are functions associated with objects and these functions are called **methods**.
    Objects properties are basically JavaScript variables. A property associated with
    an object tells you about the object's characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Object properties can belong to primitive data types such as `int` or other
    data types such as `char`. An object can have an empty property as well. We can
    create an object with an empty property, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In these curly brackets, you can easily and quickly create objects. These are
    comma-separated name-value pairs. The object initializer is basically used to
    create a new object. These object initializers are called **object literals**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In JavaScript, the property name and object name are case sensitive, so when
    you create an object, this should be kept in mind.
  prefs: []
  type: TYPE_NORMAL
- en: 'An object initializer creates an object with a literal notation, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is covered in more detail in [Chapter 8](ch08.html "Chapter 8. JavaScript
    Implementations, Syntax Basics, and Variable Types"), *JavaScript Object-Oriented
    Programming*.
  prefs: []
  type: TYPE_NORMAL
- en: The function definition expression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Functions in JavaScript are defined with a function keyword. Expressions are
    defined on these functions. They are used to declare a function or function expression.
    You can define a function anywhere in your script. Functions use expressions to
    define their prototype.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many ways to define a function in JavaScript, for example, we have
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The function declaration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function expression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function declaration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When a browser thinks of executing a script, a function declaration is a pre-executed
    stage. A function can be declared anywhere in your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The function expression
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a function takes the form of an expression, it is called a **function expression**.
    This expression can be a large expression, meaning that the function declaration
    requires several expressions. The function that is assigned with a function expression
    can be named or can be without a name. This is commonly referred to as an anonymous
    function. It is a first-class value, which means that it allows passing values
    in the function as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A function value can also be assigned to another function parameter. In this
    way, a function value is passed to another function parameter as a pass-by-value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: A function in JavaScript is also a regular value. If you do not want your variables
    to be set in the global scope, then put these variables into a function. We do
    this because it's not always a good choice to set a global variable, as it can
    be accessed by any function anywhere in the program, which may alter the value
    of the variable and overwrite the original value that was supposed to be used.
    Functions are generally written inside brackets because JavaScript allows expressions
    to be all in the same space.
  prefs: []
  type: TYPE_NORMAL
- en: The property access expression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In JavaScript, to access a value of an object or value of an array element,
    we use the property access operation. There are two ways of writing the property
    access expression to access values from these expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: Bracket notation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dot notation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bracket notation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A bracket notation is also known as an array notation. The syntax for writing
    a bracket notation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The dot notation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A dot notation is also known as an object notation. The syntax for writing
    a dot notation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The invocation expression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In JavaScript, an invocation expression is used to execute or invoke a function
    or an expression. When a function invocation starts, it first evaluates its expression
    and then its arguments. Here are the two targets on an invocation expression:'
  prefs: []
  type: TYPE_NORMAL
- en: The invocation target
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The optional argument list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invocation target
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An invocation target followed by an open bracket then a target list and then
    a closing bracket target list must be classified as a method or object. There
    are two types of argument lists:'
  prefs: []
  type: TYPE_NORMAL
- en: Positional arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Named arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Positional arguments are expressions and named arguments are identifiers. Here
    is an example of an invocation expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Named arguments are the arguments that are passed with its name.
  prefs: []
  type: TYPE_NORMAL
- en: The optional argument list
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Variable is assigned a value that is passed as a parameter to the function.
    If the value is not passed, a default value is assigned to the variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The object creation expression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In JavaScript, this expression is used to create an object using the constructor
    method. This method is used to initialize an object''s properties. This method
    first creates new objects and then initializes the objects using object initializer
    methods in JavaScript. The constructors that are used to initialize the object
    do not return any value, and this value becomes the value of the object. Consider
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Evaluation expression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The evaluation expression is used to evaluate a string. This is a property of
    the global object in JavaScript. When it evaluates a string, it gives a value
    as the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Eval()` function is used in JavaScript to get a value. In this function,
    we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: As the input, we pass one argument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it does not return a value, then it means that there is an error in the code,
    and it will send an exception
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'There are two ways you can invoke an eval() function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Direct: Calls a function directly named ''eval''. Direct eval() executes code
    in its local scope. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Indirect: By calling it through call() function, method of window or by storing
    it with a different name and calling from there, etc. Indirect eval() executes
    code in its global scope. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In programming languages, operators are operations to be performed on operands.
    Basically, operators are symbols used to perform various operations. Consider
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, `9` and `11` are operands and `+` is the additional
    operator.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like other languages, in JavaScript, there are several operators to perform
    an operation, such as addition, multiplication, subtraction, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In JavaScript, there are different operators such as:'
  prefs: []
  type: TYPE_NORMAL
- en: The logical operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bitwise operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The conditional operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The arithmetic operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The assignment operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binary operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As the name suggests, binary operators require two operands; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, `A` and `B` are operands and `+` is the operator to perform addition between
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Unary operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In programming languages, unary operators have just one operand and operator
    with them, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This can also be written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`A++` is a post increment operator. It will first evaluate `A` and then increment
    it; whereas,`++A` is a pre-increment operator. It increments the value of `A`
    and then evaluates the expression.'
  prefs: []
  type: TYPE_NORMAL
- en: Ternary operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The ternary operators require three operands to perform different operations;
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding statement, `?` is the ternary operator.
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In programming languages, arithmetic operators are use to perform arithmetic
    operations on values and variables. The basic arithmetic operations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`+`: Addition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-`: Subtraction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*`: Multiplication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/`: Division'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%`: Modulus operator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`++`: Increment operator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--`: Decrement operator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These operators perform operations on numeric operands and return a result as
    a numeric value.
  prefs: []
  type: TYPE_NORMAL
- en: 'In JavaScript, operators are the same as those in other programming languages;
    for example, if you want to perform division between variables, then you will
    write the expression as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In JavaScript, arithmetic operators are the most useful and powerful operators.
  prefs: []
  type: TYPE_NORMAL
- en: The + operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `+` operator performs an addition of two or more numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `+` operator returns the addition of the numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `+` operator does not have any parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `+` operator is used to add two numbers or two variables in which numbers
    are stored.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This operator can also be used to append or concat two strings; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The - operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `-` operator performs a subtraction between two numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The result of the `-` operator returns subtraction between two numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `-` operator has no parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `-` operator is used to subtract two numbers or two variables in which numbers
    are stored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The * operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `*` operator performs a multiplication between two or more numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The result of the multiplication between the numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are no parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This operator is used to multiply two or more numbers or two or more variables
    in which numbers are stored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The / operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `/` operator performs a division between two numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The result of the division between the numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are no parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is also called the **remainder operator**, since the value returned is
    not an absolute value (in that, it retains the sign of the first operand, not
    the second).
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The % operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `%` modulus operator is used to calculate the remainder.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The result of the multiplication between the numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are no parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This operator is used to multiply two or more numbers or two or more variables
    in which numbers are stored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The ++ Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `++` operator is used to increment a value.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The result is the incremented value.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are no parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Increment. the value and stores the value in itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The -- Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `--` operator is used to decrement a value.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The result is the decremented value.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are no parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `--` operator decrements the value and stores the value in itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Logical operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In programming languages, logical operators are Boolean operators. These operators
    work on Boolean logic. Like other languages, JavaScript works on Boolean evaluation.
    These Boolean operators always return a Boolean value. There are two possible
    results of any logical operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '`True`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the logical operators used in programming languages as well
    as JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: Logical AND (`&&`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical OR(`||`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical NOT(`!`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Arithmetic operators get priority over logical operators.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say, if there is an expression and there are logical and arithmetic operators
    in it, then the arithmetic operators will be evaluated first because of their
    higher priority. Logical operators work from left to right.
  prefs: []
  type: TYPE_NORMAL
- en: Logical operations are applicable on everything. A non-Boolean value can result
    in a Boolean value after evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: The && Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `&&` operator is the translation of the English word "and". For example,
    if we have to write apples and oranges, we write *apples && oranges*.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the most specific value on an operand; if a non-Boolean value is
    used, then a non-Boolean value is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We normally write an expression or a condition that is to be evaluated separated
    by the '`&&'` sign.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is called the **AND** operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of the `&&` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The || Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This operator is the translation of the English word "or". For example, if we
    have to write apples or oranges, we write *apples || oranges*.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the most specific value on an operand; if a non-Boolean value is
    used, then a non-Boolean value is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We normally write an expression or a condition that is to be evaluated separated
    by the '`||'` sign.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is called the **OR** operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of the `||` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The ! Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the `NOT` operator. NOT operator evaluates if the values are not equal
    to each other. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Boolean value.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`null`'
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is called as the **NOT** operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of the `!` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In JavaScript, these logical operators are used in conditional statements and
    in the `while` loop.
  prefs: []
  type: TYPE_NORMAL
- en: Assignment operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In JavaScript, assignment operators are used to assign values to variables.
    The assignment operator `=` assigns the value of the operand on it right to the
    operand on its left. For instance, `abc = xyz`, here `xyz` is right operand whose
    value is being assigned to `abc`, which is the left operand. An assignment operator
    can assign the value of a single variable to multiple variables. In the following
    sections, we will discuss the assignment operators in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: The = operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `=` operator is used to assign the value to a variable.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are no parameters but it is used between two or more operands.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are no parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the simplest of all assignment operators and is used commonly. It assigns
    the value of the right side operand to the left side operand.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The += operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This operator is known as addition assignment operator.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This adds the value to the variable and returns the result of the addition.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are no parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The addition assignment operator is used to add a value to a variable and assign
    the value to another or the same variable in the same operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This is short hand of writing `abc = abc + 10`.
  prefs: []
  type: TYPE_NORMAL
- en: The -= operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This operator is known as subtraction assignment operator.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This operator subtracts the given value from the variable and returns the result
    of the subtraction.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are no parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `-=` operator is used to subtract a value from a variable and assign the
    given value to another or the same variable in the same operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: This is short hand of writing `abc = abc - 2`.
  prefs: []
  type: TYPE_NORMAL
- en: The *= Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This operator is known as multiplication assignment operator.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This multiplies the variable and the value and returns the result of the multiplication.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are no parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This operator is used to multiply a value with a variable and assign the value
    to another or the same variable in the same operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: This is short hand of writing `abc = abc * 5`.
  prefs: []
  type: TYPE_NORMAL
- en: The /= Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This operator is known as division assignment operator.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It divides the variable with the value of right operand and assign it to the
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are no parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This operator is used to divide a variable with the value and assign the result
    to the variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: This is short hand of writing `abc = abc / 5`.
  prefs: []
  type: TYPE_NORMAL
- en: The %= Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `%=` operator is also called remainder assignment operator.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `%=` operator takes a null parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `%=` operator returns the remainder.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It divides the variable with the value of right operand and assigns the remainder
    value it to the variable. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: This is short hand of writing `abc = abc % 3`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is an experimental technology, part of the ECMAScript 2016 (ES7) proposal.
  prefs: []
  type: TYPE_NORMAL
- en: Exponentiation assignment (**=)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This operator returns the result of raising power of left operand to the value
    of second operand.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: This is short hand of writing `abc = abc ** 2`.
  prefs: []
  type: TYPE_NORMAL
- en: Relational operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In programming languages, relational operators are also known as comparison
    operators. These operators show the relative order of two values. These comparison
    operators are covered in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: The < operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `<` (Less Than) operator operator is used to compare the values on both
    sides of the expression and check whether the value of the left-hand side is less
    than the value on the right-hand side of the operator.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the preceding condition is true, then expression returns `true` else `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Here, both the operands must be numbers or both must be strings.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is also known as the **less than** operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple example of the usage of this operator is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The <= Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `<=` operator is used to compare the values on both sides of the expression
    and check whether the value on the left-hand side is less than or equal to the
    value on the right-hand side of the operator.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the preceding condition is true, then it returns the Boolean value `true`,
    otherwise it returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Here, both the operands must be numbers or both must be strings.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is also known as the **less than or equal to** operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple example of the usage of this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The > Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `>` operator is used to compare the values on both sides of the expression
    and check whether the value on the left-hand side is greater than the value on
    the right-hand side of the operator.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the preceding condition is true, then it returns the Boolean value `true`,
    otherwise it returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Here, both the operands must be numbers or both must be strings.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is also known as the **greater than** operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple example of the usage of this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The >= Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `>=` operator is used to compare the values on both the sides of the expression
    and check whether the value on the left-hand side is greater than or equal to
    the value on the right-hand side of the operator.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the preceding condition is true, then it returns the Boolean value `true`,
    otherwise it returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Here, both the operands must be numbers or both must be strings.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is also known as the **greater than or equal to** operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple example of the usage of this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The != Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `!=` operator is used to compare the values on both the sides of the expression
    and check whether the value on the left-hand side is not equal to the value on
    the right-hand side of the operator.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the preceding condition is true, then it returns the Boolean value `true`,
    otherwise it returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Here, both the operands must be numbers or both must be strings.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is also known as the **not equal to** operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple example of the usage of this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The == Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `==` operator is used to compare the values on both sides of the expression
    and check whether the value of the left-hand side is equal to the value on the
    right-hand side of the operator.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the preceding condition is true, then it returns the Boolean value `true`,
    otherwise it returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Here, both the operands must be numbers or both must be strings.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is also known as the **Equal To** operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple example of the usage of this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The === Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `===` operator is used to compare the values on both sides of the expression
    and see if the value of the left is equal to the value on the right of the operator
    and to also check if both the operands are of the same datatype.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the preceding condition is true, then it returns the Boolean value `true`,
    otherwise it returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `===` operator takes parameter `null`.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is also known as the **equal value and equal type** operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple example of the usage of this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JavaScript works on sets of statements. These statements have an appropriate
    syntax where the syntax depends on what the statements contain. A statement can
    have multiple lines in it. Basically, a statement is a set of instructions given
    to a computer browser to execute JavaScript code. A statement can return a value
    that is terminated with a semicolon. A statement can be a call for a certain action,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The preceding statement calls the in-built `Write()` function and prints the
    message **hello world** on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can write multiple statements in one line separated by a semicolon; for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'A statement can also be terminated with a line break, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Each statement in JavaScript runs one by one in order of the given instructions
    in the JavaScript program.
  prefs: []
  type: TYPE_NORMAL
- en: Expression statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In JavaScript, there is a difference between a statement and an expression.
    Whenever a value is expected in your script or code, an expression produces that
    value using a statement.
  prefs: []
  type: TYPE_NORMAL
- en: An expression is made of literals, variables, operators, and methods. The data
    type of the returned value depends on the variable used in the expression. We
    can create a compound expression from a smaller expression's group depending on
    their data type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Statements are basically actions performed in scripts, for example, loops and
    `if-else` are statements in JavaScript. Wherever JavaScript expects a statement
    and you can also write an expression, is called an expression statement. It fulfills
    purpose of both statement and expression. But this can not be reversed. We can
    not write a statement where JavaScript is expecting an expression. For instance,
    if statement can not be used as an argument to a function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To prevent this from happening JavaScript doesn''t allow us to use function
    expressions and object literals as statements, that is, **expression statement**
    should not start with:'
  prefs: []
  type: TYPE_NORMAL
- en: Curly brace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyword function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compound empty statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A compound statement is a set of statements written in curly brackets and all
    these statements are separated by a semicolon. It combines multiple statements
    in a program into a single statement. A compound statement is also known as a
    **block statement**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This type of statement is usually used with conditional statements such as
    `if`, `else`, `for`, `while` loop, and so on. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'An empty statement is the opposite of a compound statement. There is no statement
    in an empty statement but just a semicolon. This semicolon means that no statement
    will be executed. Usually, empty statements are used when you need to put comments
    in your code. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Declaration statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This statement is use to declare a variable or a function in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In JavaScript, the `function` keyword is used to declare a function in a program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example where the `myFunction` function is declared:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: var
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In JavaScript, to declare a variable, we use the `var` keyword. We need to declare
    a variable before using it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of both `var` and `function`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Conditional statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In JavaScript, when we want to perform different actions for different statements,
    we use a conditional statement. These are a set of commands to perform different
    actions on different conditions. In JavaScript, there are three types of conditional
    statements, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`if`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`else`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`switch`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basically, these statements show the flow of your code. Conditional statements
    control the flow of your program, that is, which action will be perform on which
    condition.
  prefs: []
  type: TYPE_NORMAL
- en: Consider an example where you have an e-commerce website and you want to display
    an offer label on a product when there is special offer on it. In such a scenario,
    you can place the appropriate code inside conditional statements.
  prefs: []
  type: TYPE_NORMAL
- en: If statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In programming languages, the `if` statement is a control statement. An `if`
    statement has two important parts:'
  prefs: []
  type: TYPE_NORMAL
- en: A condition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A code to perform the action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In JavaScript and other languages, the `if` statement makes decisions based
    on the variable and type of data. For example, if you write a script asking to
    be notified on your birthday, then when the time arrives, the message "**It's
    your birthday today**" will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The `if` statement is only executed when the condition is `true`. If the expression
    is `false`, then it will not execute.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the syntax for an `if` statement in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For example, in JavaScript, we can write an `if` statement code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Else if statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In JavaScript, there may be some situations when we require to make a decision
    based on different possibilities. The `else if` statement will only be executed
    when the previous statement is `false` and its condition is `true`. There are
    two major points of the `else if` statement, they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: There should be an `if` statement before any `else if` statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may use as many `else if` statements as desired, but at the end, you must
    have an `else` statement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the syntax for a simple `if` statement in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding syntax, two conditions can be checked for their validity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the syntax for a slightly more complex `else if` statement in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding syntax, three conditions can be checked for their validity.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For example, if you have a web page and you want to check who is accessing
    that web page. You will put two custom messages in your script inside the `Else
    if` statement. You will write these as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The `Else if` statement is one of the most advanced forms of statements in JavaScript.
    It makes a decision after checking all the `if` conditions. It is just a type
    of complex statement where every `if` is a part of an `else` statement. All conditions
    must be `true` within the parenthesis following the `else if` keyword. If any
    of the conditions are `false`, then the `else` part will be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Switch statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In programming languages, the `switch` statement execution depends only on the
    value of the expression. There are lists of cases against which checks are done.
    The checks are done sequentially; JavaScript interpreter checks the first case
    and its condition to check whether it is `true` or not. Similarly, checks are
    done for all case statements to check whether their conditions are `true` and
    to find a break statement. When the interpreter encounters the break statement,
    it exits the `switch` loop. The break statement is meant to ensure that the `switch`
    statement returns control to the calling function once one case is executed, interpreter
    does not forward the control to the next applicable case.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the syntax for a simple `switch` statement in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Following is an example of a valid `switch` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: If the preceding code does not find a matching case then it executes the default
    statement. Basically a `switch` statement is an expression which evaluates different
    statements in order to execute some code based on some conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In programming languages, loops are used to execute a block of code a number
    of times, depending on a condition. For example, if you have a statement and you
    want to execute it over and over, you just put it in a loop. Loops are basically
    used for repetitive tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Another specific example of a loop is that if you want to traverse an array
    to find a specific number, you have to iterate through array elements. Each iteration
    will get the next array index.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four types of loops in JavaScript, they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`for`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`while`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do-WHILE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for-in`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For repetitive tasks we put a set of instructions in a loop. To control the
    number of times a loop executes, we use control variables in a loop for incrementing
    or decrementing value of an iterator or counter variable, which will repeat the
    block of code. You can also use the `break` and `continuous` statements in a loop.
  prefs: []
  type: TYPE_NORMAL
- en: For loop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `for` loops are used to loop through or execute a block of code, until a
    condition returns a `false` result. In a `for` loop, we mention how many times
    the script should perform. For example, you might want to execute your script
    12 times.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A `for` loop in JavaScript is the same as in other languages, such as C, C++,
    and Python. The `for` loop syntax has three important parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initialization**: This is where loop initializes the counter variable. This
    is the first statement when a loop starts its execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Condition**: This is an expression to be evaluated before every loop iteration.
    If the condition is satisfied and is `true`, we enter the loop; otherwise, if
    the condition is not satisfied and the condition returns `false`, then we exit
    the `for` loop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increment/Decrement**: This is used for iteration and for increasing or decreasing
    the counter variable value. This is an update statement where increment or decrement
    is executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Consider the following example of a basic counter code in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: While loop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is also a commonly used loop in JavaScript. The `while` loop executes a
    block of statements repeatedly as long as its condition is `true`. The loop exits
    when the condition becomes `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the syntax for a `while` loop in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two parts of a `while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: The condition statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `while` loop code written in curly brackets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `while` loop conditions have to be met in order for the loop to work. If
    the condition breaks, then the loop breaks.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is an example of the `while` loop, which will print numbers from `1` to
    `4`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Do while loop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `do while` loop is also known as a **post-test loop** because it first executes
    the statement and then checks the condition. If the condition is `true`, then
    it will enter the loop, and if the condition is `false`, it will break out from
    the loop.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the syntax for the `do` `while` loop in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two important parts of the `do while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A condition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `do while` loop is similar to the `while` loop, but it checks the condition
    at the end of the loop. The `do while` loop executes the specified statement at
    least once before checking the condition.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is an example of the `do while` loop that prints the values `1` to `5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `do while` loop can be used where we need to execute the loop at least once,
    irrespective of whether or not the condition is met.
  prefs: []
  type: TYPE_NORMAL
- en: For in loop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is another type on loop used in JavaScript that is known as the `for in`
    loop. This loop is used for object properties in JavaScript. In this loop, one
    property of the object is assigned to a variable name.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is a syntax for the `for in` loop in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is an example of the `for in` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Jumps and labeled statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In JavaScript, the `jump` statements are used to force the flow of execution
    to jump to another condition in the script. Basically, it is used to terminate
    iterative statements. There are two types of `jump` statements in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Break`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Continue`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These statements are used when you immediately leave a loop or when you want
    to jump to another condition due to a condition in a code.
  prefs: []
  type: TYPE_NORMAL
- en: Break statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In JavaScript, a `break` statement is used with a `switch` statement. It is
    used to exit a loop or a condition earlier than planned. Break statements are
    also used in the `for` loop and the `while` loop.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the syntax for the `break` statement in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Consider the following simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Continue statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The keyword `continue` will skip the current iteration.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the syntax for the `continue` statement in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Consider the following simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Return statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In JavaScript, a `return` statement is used to return a value from a function.
    After returning the value, it stops the function execution. Every function and
    statement returns a value. If no return statement is provided, undefined value
    is returned instead.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the syntax for the `return` statement in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Consider the following simple example showing the working of a `return` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Throw statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `throw` statement is used to create a user-defined error condition for the
    `try` and `catch` block. These errors are also called **exceptions**. We can create
    our own exceptions in a code script.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the syntax for the `throw` statement in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Try catch finally statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a `try` statement we write the code that needs error testing when it is being
    executed. In a `catch` block, you write code to handle errors occurring in the
    `try` block. When you write code inside the `try` block, you must write a `catch`
    block to handle any error that might occur in the the `try` block. The `finally`
    statement executes when the `try` and `catch` statements are executed successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The syntax for a `try`, `catch`, and `finally` block is as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Arrays are use to store ordered collections of data. If we have multiple items,
    then we can use arrays to store these values. Array prototype methods are used
    to perform mutation operations in JavaScript. There is no fixed length of an array.
    An array can contain multiple value types and the number of items can be mutated
    at any point after initialization.
  prefs: []
  type: TYPE_NORMAL
- en: Array types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two array types in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nominal type**: This type of array has a unique identity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Structure type**: This array type looks like an interface; it is also known
    as duck type. It uses a specific implementation of a behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Sparse array**'
  prefs: []
  type: TYPE_NORMAL
- en: In programming languages, a sparse array denotes an array that has the same
    values such as `0` or `null`. There is a large number of zeroes in an array storage,
    which occurs in a sparse array. In a sparse array, indexes do not start from `0`.
    In a sparse array, lengths of the elements are less than the length of the property.
  prefs: []
  type: TYPE_NORMAL
- en: 'In JavaScript, the length property is not the actual amount of elements in
    the array, it is last *index+1*. So, in case of a sparse array, this is crucial
    to deal with the blank indexes. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Array type object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some objects in JavaScript look like an array, but in reality, they are not
    arrays. They are known as **array-like** objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'An array-like object:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Has**: This tells you the number of elements an object has'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Does not have**: These are array methods such as `indexOf`, `push`, and `forEach`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Strings as an array**'
  prefs: []
  type: TYPE_NORMAL
- en: There are some strings in JavaScript that behave like an array. If we make a
    string like an array, then it will only be treated as an array. There are some
    methods in arrays such as `push()`, `reverse()`, and so on, which do not work
    on strings.
  prefs: []
  type: TYPE_NORMAL
- en: Creating arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In JavaScript, there are two ways to create arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: Using an array initializer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an array constructor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use either of these two methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a comma-separated string in brackets in an array initializer; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'In JavaScript, you can also create an array using an array constructor using
    a new keyword, which creates an array and assigns values to it; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The array initializer method is a quick and good way of initializing an array
    because its execution speed is higher than that of the constructor method. If
    you do not pass any argument in an array constructor, then it will set its length
    to zero.
  prefs: []
  type: TYPE_NORMAL
- en: Array initializer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Arrays are used to store ordered collections of data in a single variable. It
    means that when you want to store a list of items then you should use an array.
    Before using an array in your program you need to first initialize it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In an array initializer, there are comma separated lists of items stored in
    a variable, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you initialize an array using an array initializer, the type does not have
    to be the same for all items. Also, arrays can have zero length.
  prefs: []
  type: TYPE_NORMAL
- en: Array constructor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are three different ways in which you can use an array constructor. Their
    syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: If you call an array constructor without argument it will set its length to
    zero.
  prefs: []
  type: TYPE_NORMAL
- en: If an array constructor has only one argument then this argument will initialize
    its new length.
  prefs: []
  type: TYPE_NORMAL
- en: If you call an array with two or more elements, the the argument will initialize
    an array with size equal to the number of parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Reading and writing array elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To read and write elements from an array we use square brackets `[]`. It works
    as accessing object properties. Inside the brackets there should be a non-negative
    number. The syntax for both reading and writing in an array is the same. Values
    are also indexed in an array. You read values index by index. The array's reference
    should be on left side of bracket.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Multidimensional arrays in JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like other programming languages, you can also create multidimensional arrays
    in JavaScript. Their syntax is same as in other languages. In multidimensional
    arrays you create arrays within arrays of nested array loops.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create an array by adding more arrays for each dimension you need.
    Creating a multidimensional array is useful when you need to cover the whole storage
    with information. If most of your data is sparse, meaning if array is empty, then
    a better technique to store the information is using an associative array. Here
    is an example of creating a multidimensional array in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Properties in an array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An array has a prototype, length, and a constructor as its properties.
  prefs: []
  type: TYPE_NORMAL
- en: Length
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In JavaScript, the array length property returns the number of elements in an
    array.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns an integer value of 32 bit.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can also use an array length property when we want to empty an array at any
    time. When you increase the length of any array, it will not increase the number
    of elements in it. We can set or return the length of any array using the array
    length property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Constructor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An array contractor is used to initialize an array. An array can contain zero
    or more elements and has the following syntax where array elements are separated
    by a comma inside square brackets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Prototype
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All array instances inherit from `Array.prototype`. The prototype constructor
    of an array allows to add new methods and properties to the `Array()` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: You can find detailed information on how to make these changes at MDN ([https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype)).
  prefs: []
  type: TYPE_NORMAL
- en: Array methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several methods that can be performed on arrays to obtain different
    results. Some of these methods are defined in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: concat()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `concat()` method performs concatenation between two arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `concat()` method returns the concatenated array.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `concat()` method takes a string to concatenate with.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This takes two arrays and joins them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: every()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `every()` method tests a function for every array element.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `every()` method returns a Boolean `true` or `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A call back function to be applied on every element of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If every element in an array provides the testing function, then it returns
    `true`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: foreach()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `foreach()` method executes a function passed as a parameter for every element
    of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The output of each function.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A call back function to be called for every element of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `foreach()` method calls the functions of each element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: join()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This joins all elements into a string.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A joined string.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Null` or a separator to place between array elements.'
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It joins all elements into a string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: pop()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `pop()` method removes the last element of an array, just like a stack.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `pop()` method returns a `null` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `pop()` method takes the `null` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It removes the last element of an array, just like a stack.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: push()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It adds elements on the last index on an array.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`null`.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`null`.'
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This adds elements at the last index on an array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: indexOf()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `indexOf()` method returns the first index of an array.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `indexOf()` method returns an index.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `indexOf()` method takes an array element as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It returns the first index of an array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: lastIndexOf()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `lastIndexOf()` method returns the last index at which a given element is
    found inside an array.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It returns the last index of an array.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An array element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: reverse()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `reverse()` method reverses the order of all the elements in an array.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The array.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`null`.'
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `reverse()` method reverses the order of the elements in an array. The first
    element becomes the last element and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: shift()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In an array, the `shift()` method removes the very first element and returns
    that element.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`null`.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`null`.'
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In an array, it removes the very first element and returns the removed element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: unshift()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method adds a new element at the beginning of the array and returns the
    new array length.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The new length of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The element(s) to add in the array.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This method adds a new element at the beginning of the array and returns the
    new array length:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: slice()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `slice()` method slices an array into a new array.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The new sliced array.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The indices of elements to slice.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This method slices an array into a new array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: splice()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `splice()` method is also used to add new elements to an array by removing
    existing elements.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The new spliced array.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The indices of elements to remove and the elements to add.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This method is also used to add new elements to an array by removing existing
    elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: sort()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This sorts an array alphabetically.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`null`.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`null`.'
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Called as an array method, this sorts an array alphabetically (unicode characters)
    and will not work well with numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: toString()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `toString()` method converts the object into a string.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `toString()` method returns a `string`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `toString()` method takes a `null` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Converts the array object into a string with its elements separated by commas
    character.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: ECMA5 Array methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New array methods were added into the ECMA5 script, which is also known as **arrays
    extras**. These are nine new methods. These methods perform common operations
    working with arrays. These new methods are covered in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: array.prototype.map()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `map()` method creates a new array on the result values from each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A modified array.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It loops through an array, running a function, and creates a new array based
    on the return values from each iteration. It takes the same arguments as the `forEach()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'The roots are now as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: array.prototype.filter()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `filter()` function creates a new or modified array that consist of values
    that are processed by the function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A modified array.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It creates a new array of only those elements that returned `true` to their
    callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: array.prototype.reduce()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `reduce()` function simultaneously applies a function to two values of the
    array to reduce them to a single value. The direction of selection of values is
    from left to right.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A modified array.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `array.prototype.reduce()` method is used to accumulate all values in an
    array to a single value by the operations performed in the callback function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'The callbacks are executed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | previousValue | currentValue | index | array | return value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **First call** | `0` | `1` | `1` | `[0, 1, 2, 3, 4]` | `1` |'
  prefs: []
  type: TYPE_TB
- en: '| **Second call** | `1` | `2` | `2` | `[0, 1, 2, 3, 4]` | `3` |'
  prefs: []
  type: TYPE_TB
- en: '| **Third call** | `3` | `3` | `3` | `[0, 1, 2, 3, 4]` | `6` |'
  prefs: []
  type: TYPE_TB
- en: '| **Fourth call** | `6` | `4` | `4` | `[0, 1, 2, 3, 4]` | `10` |'
  prefs: []
  type: TYPE_TB
- en: array.prototype.forEach()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `array.prototype.forEach()` method executes a function passed as a parameter
    for every element of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The output of each function.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A callback function to be called for every element of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `array.prototype.forEach()` method calls functions of each element. Here
    is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: array.prototype.indexOf()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `array.prototype.indexOf()` method returns the first index of an array.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An index.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An array element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `array.prototype.indexOf()` method returns the first index of an array.
    Here is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: array.prototype.lastIndexOf()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `array.prototype.lastIndexOf()` method returns the last index at which a
    given element is found inside an array.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It returns the last index of an array.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An array element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As stated in the preceding descriptions, the `array.prototype.lastIndexOf()`
    function will return the last index of the specified element if found within the
    array. Here is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: array.prototype.every()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `array.prototype.every()` method tests a function for every array element.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A Boolean `true` or `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A callback function to be applied on every element of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If every element in an array provides the testing function, then it returns
    `true`. Here is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: array.prototype.some()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method tests if any element passes the test implemented by the provided
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A Boolean `True` or `False`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `array.prototype.some()` method is similar to `Array.prototype.every()`,
    but here the condition is that at least one callback should return `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: array.prototype.reduceRight()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `array.prototype.reduceRight()` method applies a function simultaneously
    against two values of the array (from right to left) so as to reduce them to a
    single value.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A modified array.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is exactly the same as reduce, but it starts from right and moves toward
    the left while accumulating the values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: This returns the sum as `6`.
  prefs: []
  type: TYPE_NORMAL
