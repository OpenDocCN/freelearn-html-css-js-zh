- en: Chapter 13. Combining D3.js and AngularJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final topic in this book will demonstrate using multiple D3.js visuals on
    a single web page. These examples will also demonstrate constructing D3.js visuals
    in a modular manner, which allows their reuse through simple HTML tags, and at
    the same time abstracting the data from the code that renders the visual. This
    will enable the creation of more generic D3.js visuals, which can be placed on
    a page using a single HTML tag and are also loosely coupled with the source of
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: To implement these features, we will utilize **AngularJS**, a JavaScript framework
    used to create dynamic and modular web applications. The examples will demonstrate
    how to integrate both AngularJS (v1.4) and D3.js to make reusable and interoperable
    visualizations. An introductory knowledge of AngularJS is expected for this chapter,
    but the focus will be on how to use the features of AngularJS to create reusable
    and extensible D3.js controls; therefore, even someone new to AngularJS will be
    able to follow along.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will accomplish this by going through the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of composite visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a bar chart using an AngularJS application, controller, and directive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a second directive to add a donut graph to the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a detail view and interactivity between the visuals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the graphs upon modification of details in the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of composite visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before jumping into the examples, let''s start by examining the end result
    to help conceptualize several of the goals that we will attempt to accomplish
    using AngularJS combined with D3.js. The following figure represents a static
    image of the resulting interactive and composite graphs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An overview of composite visualization](img/B04320_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Each component of the page—the bar graph, the donut graph, and the input form—will
    initially be built independently and will be able to function on its own. To do
    this, the examples will use features from AngularJS to facilitate the following
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: Each visual should be expressed in HTML as a simple HTML tag instead of copying
    the code for each onto the page. This is performed using AngularJS directives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead of loading the data once within the code for each visual, we will leverage
    a common application-level data model shared across each element. In AngularJS,
    this is done by creating a JavaScript data model and injecting it into the controllers
    for each directive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bar graph will provide a means of exposing notifications of updates to a
    currently selected item, upon which the detail model can update its data. This
    will be implemented through a `selectedItem` property in the model that the details
    directive can monitor for updates using AngularJS template bindings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, when the application model is updated in the details directive, the bar
    and donut graphs will be notified by AngularJS to be updated to represent the
    modifications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A note of difference in this chapter from the previous is that the code is not
    available online on bl.ock.org or JSBIN.COM and must be retrieved from the Packt
    website. This is because the examples utilize AngularJS, which doesn't play as
    well with bl.ock.org and JSBIN.COM. The code must therefore be run locally from
    a web server. You can simply unzip the code and place it in the root of a web
    server or start a web server of your choice in the root folder of the content.
    Each example is implemented as a different HTML file in the root of the folder,
    and each of these refers to multiple other files in various subdirectories.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bar graph using AngularJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first example will create a reusable bar chart component to demonstrate
    creating an AngularJS directive with an underlying controller. This is implemented
    within an HTML file, `01_just_bars.html`, which consists of the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The AngularJS application object:** This functions as an entry point for
    AngularJS code in the page (that is, in `app.js`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An AngularJS controller (in `controllers/basic_dashboard.js`): This creates
    the data and sends it to the directive that renders the HTML code for the graph'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The directive: This renders the D3.js bar chart in `directives/bars.js`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The web page and application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The AngularJS application is presented to the user via a web page, which begins
    by loading the AngularJS and D3.js libraries (this is common in all the examples
    in this chapter). Take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The page then loads the implementations of the AngularJS application object,
    directive, and controller. Now, execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of these will be examined in a moment. Before we look at these,
    the remainder of the HTML code in this file creates the AngularJS application
    and the controller for our directive using a `<div>` tag with the `ng-app` and
    `ng-controller` properties. Add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The use of the `ng-app` attribute tells AngularJS where to find the implementation,
    which is a module (that is, a piece of AngularJS JavaScript referable) named `dashboardApp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, this module is declared in `app.js` (this is the same for
    each example):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This example does not actually declare any code for the application module and
    is simply a place for the HTML markup to reach into AngularJS and start locating
    various objects. In a more elaborate application, this would be a good place to
    inject other dependent modules and do some application-level initialization.
  prefs: []
  type: TYPE_NORMAL
- en: The tag within this `<div>` tag defines a construct known as an AngularJS directive.
    This renders the data represented in the controller. Before we get to the implementation
    of the directive, let's take a look at the controller that provides the data to
    the directive.
  prefs: []
  type: TYPE_NORMAL
- en: The controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ng-controller` attribute on the `<div>` tag specifies a name of a controller
    that is used to provide data to the AngularJS directives that are specified as
    the child elements of this `<div>` tag. AngularJS searches for a controller with
    the specified name within one of the modules specified by `ng-app`. In this example,
    this controller is declared in `controllers/basic_dashboard.js`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates an AngularJS controller using `.controller()` with the name `dashboardController`,
    which is a part of the application''s `dashboardApp` module. Take a look at the
    following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The second parameter of `.controller()` is an array that specifies the variables
    to be injected into the method implementing the controller and then the function
    that implements the controller.
  prefs: []
  type: TYPE_NORMAL
- en: Now, this informs AngularJS that we would like the AngularJS variable `$scope`,
    which represents the data of the controller and will be injected into the directives
    of the control to be passed into this function that is to be initialized.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last statement in the following command declares the data that is to be
    provided to the view by adding an item''s property to the scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The directive for a bar graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An angular directive is a custom HTML tag that instructs AngularJS on how to
    create HTML based on the data provided by the controller. In the HTML code of
    the example is a tag declared that is named `<bars-view>`. When loading the page,
    AngularJS examines all the tags in HTML, and if a tag is not recognized as a standard
    HTML tag, AngularJS searches for a directive that you declared as part of the
    application to provide an implementation for this tag.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, it converts the hyphenated name of the tag, `<bars-view>`, to
    a camel case version, `barsView`, and looks for a directive within a module that
    was declared with this name. If found, AngularJS executes the code that is provided
    for the directive to generate the HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, AngularJS finds the `<bars-view>` tag implemented in the `directives/bars.js`
    file. This file starts by informing AngularJS that we want to declare a directive
    named `barsView` in the `dashboardApp` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The second parameter to `.directive()` is a function that informs AngularJS
    how to apply and construct the view. In this example, there are three instructions
    specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '`restrict: ''E''`: This informs AngularJS that this directive applies to HTML
    elements only and not to their attributes or CSS class names.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scope: { data: "="}`: This tells AngularJS that we want to have **two-way
    binding** between the data in the scope and the elements in the view. If data
    changes in the controller, AngularJS will update the view and vice versa.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`link: renderView`: This property informs AngularJS which function will be
    called when the view is created. This function will then generate DOM constructs
    to represent the view. This is where we will put our D3.js code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `renderView` function is declared as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: When AngularJS calls this function to render a tag for a directive, it passes
    the scope object represented by the related controller as the `$scope` parameter.
    The second parameter, `$elements`, is passed an AngularJS object that can be used
    to identify the top-level DOM element where the directive should append new elements.
    The last parameter, `$attrs`, is passed any custom attribute defined in the root
    DOM element in the prior parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code to implement the bar graph is not significantly different from our
    earlier bar graph examples. The first thing it does that is different because
    of AngularJS gets the data from the scope that was passed into the function, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `<bars-view>` directive is assigned a scope object by AngularJS. The data
    from the controller is actually a property of the `parent` scope property of this
    object. This object has the `items` property that we defined in the controller
    and its associated data as the `items` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The width and height of the element, as specified in the HTML code, can be
    retrieved using the `width` and `height` attributes of the `$attrs` parameter.
    Take a look at the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After obtaining the width and height, we can create the main SVG element of
    the graph. This will be appended to `$element[0]`, which represents the root DOM
    element for this directive (The `$element` object is actually an AngularJS one
    wrapping the root element, which is access using the `[0]` indexer), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The remainder of the code is similar to the examples covered in previous chapters
    to create a bar graph with overlaid text. It begins by setting the size of the
    SVG element and setting up various variables required to calculate the size and
    positions of the bars, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The bars are then created and set to animate to their maximum respective sizes.
    Take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, all the existing D3.js elements are selected in an update scenario, which
    transitions the size of any existing bar to the new size. Take a look at this
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the cases to create both the entering labels on the bars and change the
    text on the bars if the data values change are implemented, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'When opening this page in the browser, the following graph is presented:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The directive for a bar graph](img/B04320_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a second directive for a donut
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next example adds a second D3.js visualization to represent a donut graph
    of the values in the data. This implementation requires creating a new directive
    and adding this directive to the web page. It reuses the implementation of the
    controller and also the data that it creates.
  prefs: []
  type: TYPE_NORMAL
- en: The web page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The web page for this example is available in `02_bars_and_donut.html`. The
    web page is slightly different from the previous one in that it includes one additional
    view for the donut. Take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The declaration of the content for the page now becomes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This adds an additional directive for `donut-view`. There is also a style added
    to the directives to make them float next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: The directive for the donut graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The implementation of the donut directive begins by declaring that that this
    directive will be added to the `dashboardApp` module and that its name will be
    `donutView` (hence we use <`donut-view>` in the HTML code). As with the bar graph
    directive, it also instructs AngularJS that this code should be applied only to
    DOM elements, have two-way data binding, and be implemented by a function named
    `renderView`; take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This version of `renderView` follows a similar pattern to the implementation
    for `bars-view`. It begins by getting the data from the scope, including the width
    and height of the visual, and also calculates the radius for the donut. The following
    code is executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The rendering of the donut is then started using a pie layout, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The arcs fill between `10` and `70` pixels from the outside of the boundary
    of the SVG element, which is based on the calculated radius. Take a look at the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the visual is started to be constructed by appending the main SVG element
    to `$elements[0]`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the visual elements for the donut graph are constructed using a color
    scale and path generator for each entering datum, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon loading this page in the browser, it presents the following visual, which
    now has two D3.js visuals on a single web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The directive for the donut graph](img/B04320_13_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a detail view and interactivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next example adds a details directive to the page and also interactivity
    such that when a bar is clicked, the details directive will display the appropriate
    data for the selected bar.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this interactivity, the bar graph directive is modified so that it
    produces an action that can be monitored by other parts of the AngularJS application.
    This action will be to set a `selectedItem` property on the model, which other
    controllers or directives can watch for changes and then take action.
  prefs: []
  type: TYPE_NORMAL
- en: The web page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The web page for this example is contained in `03_with_detail.html`. The content
    included differs slightly, in that we will include a new implementation of our
    `<bars-view>` directive in `directives/bars_with_click.js` and the controller
    in `controllers/enhanced_controller.js` and a reference to a new directive representing
    the detail view in `directives/detail.js`. Take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The declaration of the main `<div>` tag changes slightly to the following by
    adding a directive for `details-view`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note that this new directive uses an attribute named data and sets its value
    to `selectedItem`. This is a special AngularJS attribute/binding that specifies
    that the model data for this directive will be located in the `selectedItem` property
    of the nearest scope object upward in the DOM hierarchy. In this case, it is the
    scope defined on the div tag, and whenever this property on the scope is changed,
    this directive will update its data and visualization automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying an initial selectedItem in the controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The details view controller expects to have access to a `selectedItem` property
    of the model to use as its data, and it will, therefore, need to set an initial
    value to this property. The following adds a single line to accomplish this task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The modified bars view directive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `<bars-view>` directive then adds a click handler to set the value of the
    selected item whenever a bar is clicked, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This click handler performs one action: it updates the value of the selected
    item in the parent scope to the value of the data item underlying the clicked
    visual. It does not send messages to other components, nor should it. Other directives,
    if interested in this update, will be able to take this action by looking for
    changes in the model.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is wrapped in a call to the AngularJS `$timeout` function, which will have
    the browser update the UI, based on the change of this property. If this is not
    performed, any interested element will not by notified by AngularJS.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the details view directive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The details view is a fairly simple piece of code that starts with a directive
    declaration. Take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'A difference in this declaration from our other directives is that the code
    does not specify a `link` property but a `templateUrl` property and an associated
    value. This tells AngularJS that this directive will not be implemented by a call
    to a JavaScript function but should use content from the `templates/static_item.html`
    file. The contents of this file are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This HTML code will be injected into DOM by AngularJS. The HTML contains embedded
    **handlebars** syntax that AngularJS will notice and substitute the content of.
    In this case, the values of the `Name` and `Value` properties of the object specified
    by the data attribute of the directive will be used, where data is the bound value
    of `selectedItem` from the model, which is the currently selected bar. Whenever
    this property is updated, AngularJS will automatically update DOM correctly on
    our behalf without any additional coding.
  prefs: []
  type: TYPE_NORMAL
- en: The resulting interactive page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following image is an example of a possible display rendered by this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The resulting interactive page](img/B04320_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this image, the second bar was clicked on, and so the details view displays
    the data for this bar. As you click on the different bars, the values in the details
    change to match.
  prefs: []
  type: TYPE_NORMAL
- en: Updating graphs upon the modification of details data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final example will make the update of the data bidirectional between the
    details view and bar and donut graphs. The previous example only updates the detail
    view upon clicking on a bar. The content of the details view is static text, and
    hence, the user cannot modify the data. This is changed by modifying the template
    to utilize text input fields. There is no change to the controller, so it will
    not be discussed.
  prefs: []
  type: TYPE_NORMAL
- en: The web page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The web page for this example, `04_dynamic.html`, contains several small changes
    from the previous example to reference new implementations for the bars, donut,
    and details directives. The `<div>` tag remains the same. Take a look at the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The revised bar-view directive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The new <`bar-view>` directive has one behavioral change along with a small
    structural change. This behavioral change is to watch for changes to the `selectedItem`
    property of the scope that is supplied to it. To do this, the following statement
    is added near the top of the code for `renderView()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This informs AngularJS that we want it to watch for changes in the bound scope
    object's `selectedItem` property. When this property or any property of this object
    changes (as specified by `true` as the third parameter), AngularJS will call the
    `render()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this watch process does not have to be performed in the details view
    controller as the use of a template and handlebars sets this up automatically.
  prefs: []
  type: TYPE_NORMAL
- en: The structural change to the code is made after the call to select the `svg`
    element and the setting of its size. The code to create the visual is now wrapped
    in the new `render()` function, which is called the first time the directive is
    loaded and then each time the value of `selectedItem` is changed. When the latter
    happens, the bar graph is updated, it animates the bars to new sizes, and it also
    modifies the text labels.
  prefs: []
  type: TYPE_NORMAL
- en: The revised donut-view directive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similarly to the updates to the `bar-view` directive, this directive is changed
    by adding a call to watch the `selectedItem` property of the scope as well as
    wrapping the rendering code in an `updatePath()` function, which can be called
    when the value of this property changes, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The `updatePath()` function only needs to regenerate the path for each of the
    arc segments, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The detail-view directive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The new `<detail-view>` directive has one modification, which is to use a different
    template. Take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The contents of this template specify input boxes instead of text fields, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Note that for input fields to update handlebars, notations cannot be utilized.
    For this to work, you need to use the AngularJS `ng-model` attribute and point
    it to the bound data object and respective property.
  prefs: []
  type: TYPE_NORMAL
- en: The results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following screenshot shows this example in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The results](img/B04320_13_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this demonstration, the third bar was clicked on, and `details-view` now
    provides edit controls to allow us to change the values. The value for **Mikael**
    was then changed to **25**, and the bar and donut graphs were animated to represent
    the change in values.
  prefs: []
  type: TYPE_NORMAL
- en: One of the really nice things going on here is that literally, key stroke by
    key stroke on both of these input fields, AngularJS will update these properties
    and both the bar and donut charts will be updated on each key stroke!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The examples in this chapter demonstrated how to use AngularJS to make modular
    and composite D3.js visualizations. They started by showing how to place data
    within an AngularJS controller and share it with multiple D3.js visuals. Next,
    we demonstrated how to share data from a single controller to multiple directives.
    The final two examples demonstrated how to use a shared property for two-way communication
    and implement a details view to allow the editing of data.
  prefs: []
  type: TYPE_NORMAL
- en: This wraps up this book on using D3.js through examples. The book started with
    the basic concepts of D3.js and using its constructs to bind data and generate
    SVG from it. From this foundation, we progressed through adding features to the
    examples, each of which demonstrated progressive extensions of the previous examples
    within the same chapter as well as with incrementally complex constructs from
    chapter to chapter. In the end, the examples covered many of the concepts in D3.js
    that can take you from a novice to being able to construct rich, interactive,
    and composite visualizations, all through examples.
  prefs: []
  type: TYPE_NORMAL
