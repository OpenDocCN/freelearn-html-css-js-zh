- en: Chapter 13. Combining D3.js and AngularJS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章. 结合D3.js和AngularJS
- en: The final topic in this book will demonstrate using multiple D3.js visuals on
    a single web page. These examples will also demonstrate constructing D3.js visuals
    in a modular manner, which allows their reuse through simple HTML tags, and at
    the same time abstracting the data from the code that renders the visual. This
    will enable the creation of more generic D3.js visuals, which can be placed on
    a page using a single HTML tag and are also loosely coupled with the source of
    the data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书最后一章将演示在单个网页上使用多个D3.js视觉元素。这些示例还将展示以模块化方式构建D3.js视觉元素，这允许通过简单的HTML标签进行重用，同时将数据从渲染视觉的代码中抽象出来。这将使创建更通用的D3.js视觉元素成为可能，这些元素可以通过单个HTML标签放置在页面上，并且与数据源松散耦合。
- en: To implement these features, we will utilize **AngularJS**, a JavaScript framework
    used to create dynamic and modular web applications. The examples will demonstrate
    how to integrate both AngularJS (v1.4) and D3.js to make reusable and interoperable
    visualizations. An introductory knowledge of AngularJS is expected for this chapter,
    but the focus will be on how to use the features of AngularJS to create reusable
    and extensible D3.js controls; therefore, even someone new to AngularJS will be
    able to follow along.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这些功能，我们将利用**AngularJS**，这是一个用于创建动态和模块化Web应用的JavaScript框架。示例将展示如何集成AngularJS（v1.4）和D3.js以创建可重用和互操作的视觉元素。对本章来说，预期读者对AngularJS有初步了解，但重点将放在如何使用AngularJS的功能来创建可重用和可扩展的D3.js控件上；因此，即使是AngularJS的新手也能跟上。
- en: 'In this chapter, we will accomplish this by going through the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过以下主题来实现这一目标：
- en: An overview of composite visualization
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合可视化概述
- en: Creating a bar chart using an AngularJS application, controller, and directive
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AngularJS应用、控制器和指令创建条形图
- en: Adding a second directive to add a donut graph to the page
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个指令到页面上添加饼图
- en: Adding a detail view and interactivity between the visuals
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视觉元素之间添加详细视图和交互性
- en: Updating the graphs upon modification of details in the data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据细节修改时更新图表
- en: An overview of composite visualization
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合可视化概述
- en: 'Before jumping into the examples, let''s start by examining the end result
    to help conceptualize several of the goals that we will attempt to accomplish
    using AngularJS combined with D3.js. The following figure represents a static
    image of the resulting interactive and composite graphs:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入示例之前，让我们先检查最终结果，以帮助理解我们将使用AngularJS结合D3.js尝试实现的一些目标。以下图表示了最终交互式和组合图表的静态图像：
- en: '![An overview of composite visualization](img/B04320_13_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![组合可视化概述](img/B04320_13_01.jpg)'
- en: 'Each component of the page—the bar graph, the donut graph, and the input form—will
    initially be built independently and will be able to function on its own. To do
    this, the examples will use features from AngularJS to facilitate the following
    features:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 页面的每个组件——条形图、饼图和输入表单——最初将独立构建，并且能够独立运行。为此，示例将使用AngularJS的功能来促进以下功能：
- en: Each visual should be expressed in HTML as a simple HTML tag instead of copying
    the code for each onto the page. This is performed using AngularJS directives.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个视觉元素都应该用HTML标签简单地表示，而不是将每个代码复制到页面上。这是通过AngularJS指令完成的。
- en: Instead of loading the data once within the code for each visual, we will leverage
    a common application-level data model shared across each element. In AngularJS,
    this is done by creating a JavaScript data model and injecting it into the controllers
    for each directive.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不会在每个视觉元素中一次性在代码中加载数据，而是利用一个跨每个元素共享的应用级数据模型。在AngularJS中，这是通过创建一个JavaScript数据模型并将其注入到每个指令的控制器中实现的。
- en: The bar graph will provide a means of exposing notifications of updates to a
    currently selected item, upon which the detail model can update its data. This
    will be implemented through a `selectedItem` property in the model that the details
    directive can monitor for updates using AngularJS template bindings.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条形图将提供一个方式来暴露当前选中项的更新通知，这样详细模型就可以更新其数据。这将通过模型中的`selectedItem`属性实现，该属性允许详细指令通过AngularJS模板绑定来监视更新。
- en: Also, when the application model is updated in the details directive, the bar
    and donut graphs will be notified by AngularJS to be updated to represent the
    modifications.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，当应用模型在详细指令中更新时，条形图和饼图将通过AngularJS通知更新，以表示修改。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A note of difference in this chapter from the previous is that the code is not
    available online on bl.ock.org or JSBIN.COM and must be retrieved from the Packt
    website. This is because the examples utilize AngularJS, which doesn't play as
    well with bl.ock.org and JSBIN.COM. The code must therefore be run locally from
    a web server. You can simply unzip the code and place it in the root of a web
    server or start a web server of your choice in the root folder of the content.
    Each example is implemented as a different HTML file in the root of the folder,
    and each of these refers to multiple other files in various subdirectories.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章与之前章节的一个不同之处在于，代码不在bl.ock.org或JSBIN.COM上在线提供，必须从Packt网站获取。这是因为示例使用了AngularJS，它与bl.ock.org和JSBIN.COM的兼容性不是很好。因此，代码必须从本地通过Web服务器运行。你可以简单地解压代码并将其放置在Web服务器的根目录中，或者在你的内容根目录下启动你选择的Web服务器。每个示例都作为文件夹根目录中的一个不同的HTML文件实现，并且每个文件都引用了各种子目录中的多个其他文件。
- en: Creating a bar graph using AngularJS
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AngularJS创建条形图
- en: 'The first example will create a reusable bar chart component to demonstrate
    creating an AngularJS directive with an underlying controller. This is implemented
    within an HTML file, `01_just_bars.html`, which consists of the following components:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例将创建一个可重用的条形图组件来演示如何使用底层控制器创建AngularJS指令。这是在HTML文件`01_just_bars.html`中实现的，它包含以下组件：
- en: '**The AngularJS application object:** This functions as an entry point for
    AngularJS code in the page (that is, in `app.js`)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AngularJS应用对象**：这个对象在页面中（即在`app.js`中）作为AngularJS代码的入口点。'
- en: 'An AngularJS controller (in `controllers/basic_dashboard.js`): This creates
    the data and sends it to the directive that renders the HTML code for the graph'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个AngularJS控制器（在`controllers/basic_dashboard.js`中）：这个控制器创建数据并将其发送到渲染图形HTML代码的指令
- en: 'The directive: This renders the D3.js bar chart in `directives/bars.js`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指令：这个指令在`directives/bars.js`中渲染D3.js条形图。
- en: The web page and application
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网页和应用
- en: 'The AngularJS application is presented to the user via a web page, which begins
    by loading the AngularJS and D3.js libraries (this is common in all the examples
    in this chapter). Take a look at the following code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS应用通过网页呈现给用户，网页首先加载AngularJS和D3.js库（这在本章的所有示例中都很常见）。看看下面的代码：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The page then loads the implementations of the AngularJS application object,
    directive, and controller. Now, execute the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，页面加载AngularJS应用对象、指令和控制器实现。现在，执行以下代码：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The details of these will be examined in a moment. Before we look at these,
    the remainder of the HTML code in this file creates the AngularJS application
    and the controller for our directive using a `<div>` tag with the `ng-app` and
    `ng-controller` properties. Add the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些细节将在稍后进行考察。在我们查看这些之前，这个文件中剩余的HTML代码使用一个带有`ng-app`和`ng-controller`属性的`<div>`标签创建AngularJS应用和我们的指令控制器。添加以下代码：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The use of the `ng-app` attribute tells AngularJS where to find the implementation,
    which is a module (that is, a piece of AngularJS JavaScript referable) named `dashboardApp`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ng-app`属性告诉AngularJS在哪里找到实现，这是一个名为`dashboardApp`的模块（即AngularJS可引用的JavaScript片段）。
- en: 'In this example, this module is declared in `app.js` (this is the same for
    each example):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，这个模块在`app.js`中声明（每个示例都是这样）：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This example does not actually declare any code for the application module and
    is simply a place for the HTML markup to reach into AngularJS and start locating
    various objects. In a more elaborate application, this would be a good place to
    inject other dependent modules and do some application-level initialization.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例实际上并没有为应用模块声明任何代码，它仅仅是一个HTML标记可以进入AngularJS并开始定位各种对象的地方。在一个更复杂的应用中，这将是注入其他依赖模块和进行一些应用级初始化的好地方。
- en: The tag within this `<div>` tag defines a construct known as an AngularJS directive.
    This renders the data represented in the controller. Before we get to the implementation
    of the directive, let's take a look at the controller that provides the data to
    the directive.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`<div>`标签内的标签定义了一个称为AngularJS指令的结构。这个指令渲染控制器中代表的数据。在我们查看指令的实现之前，让我们看看提供数据给指令的控制器。
- en: The controller
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: 'The `ng-controller` attribute on the `<div>` tag specifies a name of a controller
    that is used to provide data to the AngularJS directives that are specified as
    the child elements of this `<div>` tag. AngularJS searches for a controller with
    the specified name within one of the modules specified by `ng-app`. In this example,
    this controller is declared in `controllers/basic_dashboard.js`, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`<div>` 标签上的 `ng-controller` 属性指定了一个用于向此 `<div>` 标签的子元素指定的 AngularJS 指令提供数据的控制器名称。AngularJS
    在 `ng-app` 指定的模块中搜索具有指定名称的控制器。在这个例子中，这个控制器在 `controllers/basic_dashboard.js` 中声明，如下所示：'
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This creates an AngularJS controller using `.controller()` with the name `dashboardController`,
    which is a part of the application''s `dashboardApp` module. Take a look at the
    following script:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用 `.controller()` 创建了一个名为 `dashboardController` 的 AngularJS 控制器，它是应用程序的 `dashboardApp`
    模块的一部分。看看下面的脚本：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The second parameter of `.controller()` is an array that specifies the variables
    to be injected into the method implementing the controller and then the function
    that implements the controller.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`.controller()` 的第二个参数是一个数组，指定了要注入到实现控制器的函数中的变量以及实现控制器的函数。'
- en: Now, this informs AngularJS that we would like the AngularJS variable `$scope`,
    which represents the data of the controller and will be injected into the directives
    of the control to be passed into this function that is to be initialized.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这告诉 AngularJS 我们希望将代表控制器数据和将被注入到控制指令中的 AngularJS 变量 `$scope` 传递给这个要初始化的函数。
- en: 'The last statement in the following command declares the data that is to be
    provided to the view by adding an item''s property to the scope:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下命令的最后一个语句中，通过向作用域中添加一个项目的属性来声明要提供给视图的数据：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The directive for a bar graph
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 柱状图的指令
- en: An angular directive is a custom HTML tag that instructs AngularJS on how to
    create HTML based on the data provided by the controller. In the HTML code of
    the example is a tag declared that is named `<bars-view>`. When loading the page,
    AngularJS examines all the tags in HTML, and if a tag is not recognized as a standard
    HTML tag, AngularJS searches for a directive that you declared as part of the
    application to provide an implementation for this tag.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS 指令是一个自定义的 HTML 标签，它指导 AngularJS 如何根据控制器提供的数据创建 HTML。在示例的 HTML 代码中，有一个名为
    `<bars-view>` 的标签被声明。当页面加载时，AngularJS 会检查 HTML 中的所有标签，如果某个标签不被识别为标准 HTML 标签，AngularJS
    会搜索你作为应用程序的一部分声明的指令，以提供这个标签的实现。
- en: In this case, it converts the hyphenated name of the tag, `<bars-view>`, to
    a camel case version, `barsView`, and looks for a directive within a module that
    was declared with this name. If found, AngularJS executes the code that is provided
    for the directive to generate the HTML code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，它将标签的连字符名称 `<bars-view>` 转换为驼峰式版本 `barsView`，并在具有此名称声明的模块中查找指令。如果找到，AngularJS
    将执行为指令提供的代码以生成 HTML 代码。
- en: 'In this example, AngularJS finds the `<bars-view>` tag implemented in the `directives/bars.js`
    file. This file starts by informing AngularJS that we want to declare a directive
    named `barsView` in the `dashboardApp` module:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，AngularJS 找到了在 `directives/bars.js` 文件中实现的 `<bars-view>` 标签。此文件首先通知 AngularJS
    我们希望在 `dashboardApp` 模块中声明一个名为 `barsView` 的指令：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The second parameter to `.directive()` is a function that informs AngularJS
    how to apply and construct the view. In this example, there are three instructions
    specified:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`.directive()` 的第二个参数是一个函数，它告诉 AngularJS 如何应用和构建视图。在这个例子中，指定了三个指令：'
- en: '`restrict: ''E''`: This informs AngularJS that this directive applies to HTML
    elements only and not to their attributes or CSS class names.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`restrict: ''E''`：这告诉 AngularJS 此指令仅适用于 HTML 元素，而不适用于它们的属性或 CSS 类名。'
- en: '`scope: { data: "="}`: This tells AngularJS that we want to have **two-way
    binding** between the data in the scope and the elements in the view. If data
    changes in the controller, AngularJS will update the view and vice versa.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope: { data: "="}`：这告诉 AngularJS 我们希望在作用域中的数据和视图中的元素之间建立**双向绑定**。如果控制器中的数据发生变化，AngularJS
    将更新视图，反之亦然。'
- en: '`link: renderView`: This property informs AngularJS which function will be
    called when the view is created. This function will then generate DOM constructs
    to represent the view. This is where we will put our D3.js code.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`link: renderView`：这个属性告诉 AngularJS 当视图创建时将调用哪个函数。然后这个函数将生成 DOM 构造来表示视图。这就是我们将放置我们的
    D3.js 代码的地方。'
- en: 'The `renderView` function is declared as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`renderView` 函数声明如下：'
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When AngularJS calls this function to render a tag for a directive, it passes
    the scope object represented by the related controller as the `$scope` parameter.
    The second parameter, `$elements`, is passed an AngularJS object that can be used
    to identify the top-level DOM element where the directive should append new elements.
    The last parameter, `$attrs`, is passed any custom attribute defined in the root
    DOM element in the prior parameter.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当AngularJS调用此函数来渲染指令的标签时，它将表示相关控制器的范围对象作为`$scope`参数传递。第二个参数`$elements`传递一个AngularJS对象，可以用来识别指令应附加新元素的顶层DOM元素。最后一个参数`$attrs`传递任何在先前参数的根DOM元素中定义的自定义属性。
- en: 'The code to implement the bar graph is not significantly different from our
    earlier bar graph examples. The first thing it does that is different because
    of AngularJS gets the data from the scope that was passed into the function, as
    follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 实现条形图的代码与我们的早期条形图示例没有显著不同。它所做的第一件事与AngularJS不同，因为它从函数中传递的范围获取数据，如下所示：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `<bars-view>` directive is assigned a scope object by AngularJS. The data
    from the controller is actually a property of the `parent` scope property of this
    object. This object has the `items` property that we defined in the controller
    and its associated data as the `items` property.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`<bars-view>`指令由AngularJS分配一个范围对象。控制器的数据实际上是此对象的`parent`范围属性的属性。此对象具有我们定义在控制器中的`items`属性及其相关数据作为`items`属性。'
- en: 'The width and height of the element, as specified in the HTML code, can be
    retrieved using the `width` and `height` attributes of the `$attrs` parameter.
    Take a look at the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的宽度和高度，如HTML代码中指定的，可以使用`$attrs`参数的`width`和`height`属性检索。看看以下命令：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After obtaining the width and height, we can create the main SVG element of
    the graph. This will be appended to `$element[0]`, which represents the root DOM
    element for this directive (The `$element` object is actually an AngularJS one
    wrapping the root element, which is access using the `[0]` indexer), as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取宽度和高度后，我们可以创建图表的主要SVG元素。这将附加到`$element[0]`，它代表此指令的根DOM元素（`$element`对象实际上是AngularJS的一个包装根元素的实例，使用`[0]`索引器访问），如下所示：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The remainder of the code is similar to the examples covered in previous chapters
    to create a bar graph with overlaid text. It begins by setting the size of the
    SVG element and setting up various variables required to calculate the size and
    positions of the bars, as shown in the following code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的其余部分与前面章节中涵盖的示例类似，用于创建带有叠加文本的条形图。它首先设置SVG元素的大小，并设置计算条形大小和位置所需的各种变量，如下所示代码：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The bars are then created and set to animate to their maximum respective sizes.
    Take a look at the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建条形，并设置为动画到它们各自的最大大小。看看以下：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, all the existing D3.js elements are selected in an update scenario, which
    transitions the size of any existing bar to the new size. Take a look at this
    code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在更新场景中，所有现有的D3.js元素都被选中，这会将任何现有条形的大小过渡到新的大小。看看以下代码：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, the cases to create both the entering labels on the bars and change the
    text on the bars if the data values change are implemented, as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，实现创建条形上的进入标签以及在数据值更改时更改条形上的文本的情况，如下所示：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When opening this page in the browser, the following graph is presented:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开此页面时，显示以下图表：
- en: '![The directive for a bar graph](img/B04320_13_02.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![条形图的指令](img/B04320_13_02.jpg)'
- en: Adding a second directive for a donut
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为甜甜圈添加第二个指令
- en: The next example adds a second D3.js visualization to represent a donut graph
    of the values in the data. This implementation requires creating a new directive
    and adding this directive to the web page. It reuses the implementation of the
    controller and also the data that it creates.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例添加第二个D3.js可视化来表示数据中的甜甜圈图。此实现需要创建一个新的指令并将其添加到网页上。它重用了控制器实现以及它创建的数据。
- en: The web page
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网页
- en: 'The web page for this example is available in `02_bars_and_donut.html`. The
    web page is slightly different from the previous one in that it includes one additional
    view for the donut. Take a look at the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的网页可在`02_bars_and_donut.html`中找到。与之前的网页相比，它包含一个额外的甜甜圈视图。看看以下：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The declaration of the content for the page now becomes the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 页面内容的声明现在变为以下内容：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This adds an additional directive for `donut-view`. There is also a style added
    to the directives to make them float next to each other.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这为 `donut-view` 添加了一个额外的指令。还向指令添加了样式，使它们并排浮动。
- en: The directive for the donut graph
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 甜甜圈图的指令
- en: 'The implementation of the donut directive begins by declaring that that this
    directive will be added to the `dashboardApp` module and that its name will be
    `donutView` (hence we use <`donut-view>` in the HTML code). As with the bar graph
    directive, it also instructs AngularJS that this code should be applied only to
    DOM elements, have two-way data binding, and be implemented by a function named
    `renderView`; take a look at the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 甜甜圈指令的实现首先声明这个指令将被添加到 `dashboardApp` 模块中，并且它的名字将是 `donutView`（因此我们在 HTML 代码中使用
    `<donut-view>`）。与条形图指令一样，它还指示 AngularJS 仅将此代码应用于 DOM 元素，具有双向数据绑定，并由名为 `renderView`
    的函数实现；请看以下代码：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This version of `renderView` follows a similar pattern to the implementation
    for `bars-view`. It begins by getting the data from the scope, including the width
    and height of the visual, and also calculates the radius for the donut. The following
    code is executed:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`renderView` 的这个版本遵循与 `bars-view` 实现相似的图案。它首先从作用域中获取数据，包括视觉的宽度和高度，并计算甜甜圈的半径。以下代码被执行：'
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The rendering of the donut is then started using a pie layout, as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用饼图布局开始渲染甜甜圈，如下所示：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The arcs fill between `10` and `70` pixels from the outside of the boundary
    of the SVG element, which is based on the calculated radius. Take a look at the
    following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 弧线填充在 SVG 元素边界外 `10` 到 `70` 像素之间，这是基于计算出的半径。请看以下代码：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, the visual is started to be constructed by appending the main SVG element
    to `$elements[0]`, as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过以下方式将主 SVG 元素附加到 `$elements[0]` 上，开始构建视觉：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, the visual elements for the donut graph are constructed using a color
    scale and path generator for each entering datum, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用颜色尺度和每个进入数据的路径生成器构建甜甜圈图的视觉元素，如下所示：
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Upon loading this page in the browser, it presents the following visual, which
    now has two D3.js visuals on a single web page:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中加载此页面时，它呈现以下视觉效果，现在在单个网页上显示了两个 D3.js 视觉效果：
- en: '![The directive for the donut graph](img/B04320_13_03.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![甜甜圈图的指令](img/B04320_13_03.jpg)'
- en: Adding a detail view and interactivity
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加细节视图和交互性
- en: The next example adds a details directive to the page and also interactivity
    such that when a bar is clicked, the details directive will display the appropriate
    data for the selected bar.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例向页面添加了一个细节指令，并增加了交互性，使得当点击一个条形时，细节指令将显示所选条形的适当数据。
- en: To achieve this interactivity, the bar graph directive is modified so that it
    produces an action that can be monitored by other parts of the AngularJS application.
    This action will be to set a `selectedItem` property on the model, which other
    controllers or directives can watch for changes and then take action.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这种交互性，条形图指令被修改，以便产生一个可以被 AngularJS 应用程序的其他部分监控的动作。这个动作将是设置模型上的 `selectedItem`
    属性，其他控制器或指令可以监视这个属性的变化，然后采取行动。
- en: The web page
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网页
- en: 'The web page for this example is contained in `03_with_detail.html`. The content
    included differs slightly, in that we will include a new implementation of our
    `<bars-view>` directive in `directives/bars_with_click.js` and the controller
    in `controllers/enhanced_controller.js` and a reference to a new directive representing
    the detail view in `directives/detail.js`. Take a look at the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的网页包含在 `03_with_detail.html` 中。包含的内容略有不同，因为我们将在 `directives/bars_with_click.js`
    中包含我们 `<bars-view>` 指令的新实现，并在 `controllers/enhanced_controller.js` 中包含控制器，以及在
    `directives/detail.js` 中包含代表细节视图的新指令。请看以下内容：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The declaration of the main `<div>` tag changes slightly to the following by
    adding a directive for `details-view`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 主 `<div>` 标签的声明略有变化，如下所示，通过添加 `details-view` 指令：
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note that this new directive uses an attribute named data and sets its value
    to `selectedItem`. This is a special AngularJS attribute/binding that specifies
    that the model data for this directive will be located in the `selectedItem` property
    of the nearest scope object upward in the DOM hierarchy. In this case, it is the
    scope defined on the div tag, and whenever this property on the scope is changed,
    this directive will update its data and visualization automatically.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个新指令使用一个名为data的属性，并将其值设置为`selectedItem`。这是一个特殊的AngularJS属性/绑定，指定了此指令的模型数据位于DOM层次结构中最近的scope对象的`selectedItem`属性中。在这种情况下，它是div标签上定义的scope，并且每当此属性在scope中更改时，此指令将自动更新其数据和可视化。
- en: Specifying an initial selectedItem in the controller
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在控制器中指定初始的`selectedItem`
- en: 'The details view controller expects to have access to a `selectedItem` property
    of the model to use as its data, and it will, therefore, need to set an initial
    value to this property. The following adds a single line to accomplish this task:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 详细视图控制器期望能够访问模型中的`selectedItem`属性以用作其数据，因此它需要为此属性设置一个初始值。以下添加了一行代码来完成此任务：
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The modified bars view directive
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改后的条形图视图指令
- en: 'The `<bars-view>` directive then adds a click handler to set the value of the
    selected item whenever a bar is clicked, as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`<bars-view>`指令随后添加了一个点击处理程序，以便在点击条形图时设置选中项的值，如下所示：'
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This click handler performs one action: it updates the value of the selected
    item in the parent scope to the value of the data item underlying the clicked
    visual. It does not send messages to other components, nor should it. Other directives,
    if interested in this update, will be able to take this action by looking for
    changes in the model.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此点击处理程序执行一个动作：它将父作用域中选中项的值更新为点击的视觉元素下方的数据项的值。它不会向其他组件发送消息，也不应该这样做。如果其他指令对此更新感兴趣，它们可以通过查找模型中的更改来执行此操作。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is wrapped in a call to the AngularJS `$timeout` function, which will have
    the browser update the UI, based on the change of this property. If this is not
    performed, any interested element will not by notified by AngularJS.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这被包裹在调用AngularJS的`$timeout`函数中，该函数将根据此属性的更改更新浏览器上的UI。如果不执行此操作，任何感兴趣的元素都不会被AngularJS通知。
- en: Implementing the details view directive
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现详细视图指令
- en: 'The details view is a fairly simple piece of code that starts with a directive
    declaration. Take a look at the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 详细视图是一段相当简单的代码，从指令声明开始。看看以下内容：
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'A difference in this declaration from our other directives is that the code
    does not specify a `link` property but a `templateUrl` property and an associated
    value. This tells AngularJS that this directive will not be implemented by a call
    to a JavaScript function but should use content from the `templates/static_item.html`
    file. The contents of this file are the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的其他指令声明相比，这个声明中的不同之处在于代码没有指定`link`属性，而是指定了`templateUrl`属性及其相关值。这告诉AngularJS，这个指令将不会通过调用JavaScript函数来实现，而应该使用`templates/static_item.html`文件中的内容。该文件的内容如下：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This HTML code will be injected into DOM by AngularJS. The HTML contains embedded
    **handlebars** syntax that AngularJS will notice and substitute the content of.
    In this case, the values of the `Name` and `Value` properties of the object specified
    by the data attribute of the directive will be used, where data is the bound value
    of `selectedItem` from the model, which is the currently selected bar. Whenever
    this property is updated, AngularJS will automatically update DOM correctly on
    our behalf without any additional coding.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个HTML代码将由AngularJS注入到DOM中。该HTML包含嵌入的**handlebars**语法，AngularJS会注意到并替换其内容。在这种情况下，将使用由指令的数据属性指定的对象的`Name`和`Value`属性的值，其中数据是模型中`selectedItem`的绑定值，即当前选中的条形图。每当此属性更新时，AngularJS将自动代表我们正确更新DOM，而无需任何额外的编码。
- en: The resulting interactive page
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成的交互式页面
- en: 'The following image is an example of a possible display rendered by this page:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像是此页面可能生成的显示示例：
- en: '![The resulting interactive page](img/B04320_13_04.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![生成的交互式页面](img/B04320_13_04.jpg)'
- en: In this image, the second bar was clicked on, and so the details view displays
    the data for this bar. As you click on the different bars, the values in the details
    change to match.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在此图像中，点击了第二个条形图，因此详细视图显示了此条形图的数据。当你点击不同的条形图时，详细中的值会相应地更改。
- en: Updating graphs upon the modification of details data
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在详细数据修改时更新图表
- en: The final example will make the update of the data bidirectional between the
    details view and bar and donut graphs. The previous example only updates the detail
    view upon clicking on a bar. The content of the details view is static text, and
    hence, the user cannot modify the data. This is changed by modifying the template
    to utilize text input fields. There is no change to the controller, so it will
    not be discussed.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的示例将使详细视图与条形图和甜甜圈图之间的数据更新双向。上一个示例仅在点击条形图时更新详细视图。详细视图的内容是静态文本，因此用户无法修改数据。这是通过修改模板以利用文本输入字段来改变的。控制器没有变化，所以不会进行讨论。
- en: The web page
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网页
- en: 'The web page for this example, `04_dynamic.html`, contains several small changes
    from the previous example to reference new implementations for the bars, donut,
    and details directives. The `<div>` tag remains the same. Take a look at the following
    code:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的网页 `04_dynamic.html` 与上一个示例相比有几个小的变化，以引用新的条形图、甜甜圈和详细指令的实现。`<div>` 标签保持不变。请看以下代码：
- en: '[PRE30]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The revised bar-view directive
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修订后的条形图视图指令
- en: 'The new <`bar-view>` directive has one behavioral change along with a small
    structural change. This behavioral change is to watch for changes to the `selectedItem`
    property of the scope that is supplied to it. To do this, the following statement
    is added near the top of the code for `renderView()`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `<bar-view>` 指令有一个行为变化，同时还有一个小的结构变化。这个行为变化是监视传递给它的作用域中 `selectedItem` 属性的变化。为此，在
    `renderView()` 代码的顶部附近添加了以下语句：
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This informs AngularJS that we want it to watch for changes in the bound scope
    object's `selectedItem` property. When this property or any property of this object
    changes (as specified by `true` as the third parameter), AngularJS will call the
    `render()` function.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这通知 AngularJS 我们希望它监视绑定作用域对象中 `selectedItem` 属性的变化。当此属性或此对象的任何属性发生变化时（由第三个参数中的
    `true` 指定），AngularJS 将调用 `render()` 函数。
- en: Note
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this watch process does not have to be performed in the details view
    controller as the use of a template and handlebars sets this up automatically.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此监视过程不必在详细视图控制器中执行，因为模板和 handlebars 的使用会自动设置此操作。
- en: The structural change to the code is made after the call to select the `svg`
    element and the setting of its size. The code to create the visual is now wrapped
    in the new `render()` function, which is called the first time the directive is
    loaded and then each time the value of `selectedItem` is changed. When the latter
    happens, the bar graph is updated, it animates the bars to new sizes, and it also
    modifies the text labels.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择 `svg` 元素并设置其大小之后，对代码的结构变化进行了修改。现在创建视觉效果的代码被包裹在新的 `render()` 函数中，该函数在指令首次加载时调用，然后在
    `selectedItem` 的值每次发生变化时调用。当后者发生时，条形图被更新，条形动画到新的尺寸，并且它还修改了文本标签。
- en: The revised donut-view directive
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修订后的甜甜圈视图指令
- en: 'Similarly to the updates to the `bar-view` directive, this directive is changed
    by adding a call to watch the `selectedItem` property of the scope as well as
    wrapping the rendering code in an `updatePath()` function, which can be called
    when the value of this property changes, as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 与对 `bar-view` 指令的更新类似，此指令通过添加一个监视作用域中 `selectedItem` 属性的调用以及将渲染代码包裹在 `updatePath()`
    函数中来修改，当此属性的值发生变化时可以调用此函数，如下所示：
- en: '[PRE32]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `updatePath()` function only needs to regenerate the path for each of the
    arc segments, as shown in the following code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`updatePath()` 函数只需要为每个弧段重新生成路径，如下面的代码所示：'
- en: '[PRE33]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The detail-view directive
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 详细视图指令
- en: 'The new `<detail-view>` directive has one modification, which is to use a different
    template. Take a look at the following code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `<detail-view>` 指令有一个修改，即使用不同的模板。请看以下代码：
- en: '[PRE34]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The contents of this template specify input boxes instead of text fields, as
    follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板的内容指定输入框而不是文本字段，如下所示：
- en: '[PRE35]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note that for input fields to update handlebars, notations cannot be utilized.
    For this to work, you need to use the AngularJS `ng-model` attribute and point
    it to the bound data object and respective property.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对于更新 handlebars 的输入字段，不能使用这些符号。为了使这生效，您需要使用 AngularJS 的 `ng-model` 属性，并将其指向绑定数据对象及其相应的属性。
- en: The results
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结果
- en: 'The following screenshot shows this example in action:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了此示例的实际操作：
- en: '![The results](img/B04320_13_05.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![结果](img/B04320_13_05.jpg)'
- en: In this demonstration, the third bar was clicked on, and `details-view` now
    provides edit controls to allow us to change the values. The value for **Mikael**
    was then changed to **25**, and the bar and donut graphs were animated to represent
    the change in values.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，点击了第三个条形图，现在`details-view`提供了编辑控件，允许我们更改值。**Mikael**的值随后被更改为**25**，条形图和饼图动画显示值的变化。
- en: One of the really nice things going on here is that literally, key stroke by
    key stroke on both of these input fields, AngularJS will update these properties
    and both the bar and donut charts will be updated on each key stroke!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这里真正令人愉快的一点是，实际上，在两个输入字段中逐个按键，AngularJS会更新这些属性，并且条形图和饼图会在每个按键时更新！
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The examples in this chapter demonstrated how to use AngularJS to make modular
    and composite D3.js visualizations. They started by showing how to place data
    within an AngularJS controller and share it with multiple D3.js visuals. Next,
    we demonstrated how to share data from a single controller to multiple directives.
    The final two examples demonstrated how to use a shared property for two-way communication
    and implement a details view to allow the editing of data.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例展示了如何使用AngularJS制作模块化和复合的D3.js可视化。它们首先展示了如何在AngularJS控制器中放置数据并与多个D3.js可视化共享。接下来，我们演示了如何将单个控制器中的数据共享到多个指令中。最后的两个示例展示了如何使用共享属性进行双向通信，并实现一个详情视图以允许编辑数据。
- en: This wraps up this book on using D3.js through examples. The book started with
    the basic concepts of D3.js and using its constructs to bind data and generate
    SVG from it. From this foundation, we progressed through adding features to the
    examples, each of which demonstrated progressive extensions of the previous examples
    within the same chapter as well as with incrementally complex constructs from
    chapter to chapter. In the end, the examples covered many of the concepts in D3.js
    that can take you from a novice to being able to construct rich, interactive,
    and composite visualizations, all through examples.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书通过示例介绍了使用D3.js的方法。本书从D3.js的基本概念开始，讲解如何使用其结构绑定数据并从中生成SVG。在此基础上，我们通过向示例中添加功能，逐步展示了同一章节内以及章节之间逐渐复杂化的结构扩展。最终，这些示例涵盖了D3.js中的许多概念，可以帮助您从新手成长为能够构建丰富、交互式和复合可视化的人，这一切都是通过示例实现的。
