["```js\ndefine('moduleName', ['pathto/dependency'], dependency'], function(injectedModule) {\n  return //Some module code;\n});\n```", "```js\n<script type=\"text/javascript\" src=\"img/require-2.1.js\" data-main=\"/app/main\"></script>\n```", "```js\nrequire.config({\n  paths: {\n    'knockout': '/lib/knockout-3.2.0',\n    'bootstrap': '/lib/bootstrap-3.1.1',\n    'jquery': '/lib/jquery-2.1.1.min'\n  },\n  shim: {\n    'bootstrap': {\n      deps: ['jquery'],\n      exports: '$.fn.popover'\n    }\n  }\n});\n```", "```js\nrequire.config({\n  //config\n});\n\ndefine(['jquery', 'knockout', 'contactsPage', 'bootstrap'], function($, ko, ContactsPageViewmodel) {\n    $(document).ready(function() {\n      ko.applyBindings(new ContactsPageViewmodel());\n    });\n});\n```", "```js\nrequire.config({\n  paths: {\n    'text': '/lib/require-text-2.0.12',\n    'knockout': '/lib/knockout-3.2.0',\n    'bootstrap': '/lib/bootstrap-3.1.1',\n    'jquery': '/lib/jquery-2.1.1.min'\n  }\n});\n```", "```js\ndefine(['text!some.html'], function (htmlString) {\n\n});\n```", "```js\nko.components.register('contact-list, {\n  viewModel: function(params) { },\n  template: //template string or object\n});\n```", "```js\n<contact-list params=\"data: contacts\"><contact-list>\n<div data-bind=\"component: { name: 'contact-list', params: { data: contacts }\"></div>\n<!-- ko component: { name: 'contact-list', params: { data: contacts } --><!-- /ko -->\n```", "```js\n<contact-list params=\"contacts: displayContacts, \n  edit: editContact, \n  delete: deleteContact\">\n</contact-list>\n```", "```js\nko.components.register('contact-list', {\n  template: \n  '<ul class=\"list-unstyled\" data-bind=\"foreach: contacts\">'\n    +'<li>'\n      +'<h3>'\n        +'<span data-bind=\"text: displayName\"></span> <small data-bind=\"text: phoneNumber\"></small> '\n        +'<button class=\"btn btn-sm btn-default\" data-bind=\"click: $parent.edit\">Edit</button> '\n        +'<button class=\"btn btn-sm btn-danger\" data-bind=\"click: $parent.delete\">Delete</button>'\n      +'</h3>'\n    +'</li>'\n  +'</ul>'\n});\n```", "```js\n<!DOCTYPE html>\n<html>\n  <body>\n    <script>\n      document.createElement('my-custom-element');\n    </script>\n    <script src='require.js' data-main='app/startup'></script>\n\n    <my-custom-element></my-custom-element>\n  </body>\n</html>\n```", "```js\nko.components.register('component-name', {\n  template: [OPTION]\n});\n```", "```js\ntemplate: { element: 'component-template' }\n```", "```js\ntemplate: { element: instance }\n```", "```js\nvar template = document.getElementById('contact-list-template');\nko.components.register('contact-list', {\n  template: { element: template }\n});\n```", "```js\ntemplate: [nodes]\n```", "```js\nvar template = document.getElementById('contact-list-template')\nnodes = Array.prototype.slice.call(template.content.childNodes);\nko.components.register('contact-list', {\n  template: nodes\n});\n```", "```js\ntemplate: documentFragmentInstance\n```", "```js\nvar template = document.getElementById('contact-list-template');\nko.components.register('contact-list', {\n  template: template.content\n});\n```", "```js\ntemplate: { require: 'module/path' }\n```", "```js\nko.components.register('contact-list', {\n  template: { require: 'text!contact-list.html'}\n});\n```", "```js\nfunction ListViewmodel(params) {\n  this.contacts = params.contacts;\n  this.edit = params.edit;\n  this.delete = function(contact) {\n    console.log('Mock Deleting Contact', ko.toJS(contact));\n  };\n};\n```", "```js\nviewModel: Constructor\n```", "```js\nko.components.register('contact-list', {\n  template: { require: 'text!contact-list.html'},\n  viewModel: ListViewmodel //Defined above\n});\n```", "```js\nviewModel: { instance: singleton }\n```", "```js\nviewModel: { createViewModel: function(params, componentInfo) {} }\n```", "```js\nko.components.register('contact-list', {\n  template: { require: 'text!contact-list.html'},\n  viewModel: { createViewModel: function(params, componentInfo) {\n    console.log('Initializing component for', componentInfo.element);\n    return new ListViewmodel(params);\n  }}\n});\n```", "```js\nviewModel: { require: 'module-path' }\n```", "```js\nko.components.register('contact-list', { require: 'contact-list' });\n```", "```js\ndefine(['knockout', 'text!contact-list.html'], function(ko, templateString) {\n  function ListViewmodel(params) {\n    this.contacts = params.contacts;\n    this.edit = params.edit;\n    this.delete = function(contact) {\n      console.log('Mock Deleting Contact', ko.toJS(contact));\n    };\n  }\n\n  return { template: templateString, viewModel: ListViewmodel };\n});\n```", "```js\n    <component params=\"name: 'Timothy Moran'\"></component>\n    <component params=\"name: nonObservableProperty\"></component>\n    <component params=\"name: observableProperty\"></component>\n    <component params=\"name: viewModel.observableSubProperty\"></component>\n    ```", "```js\n    <component params=\"name: name() + '!'\"></component>\n    ```", "```js\n    <component params=\"name: isFormal() ? firstName : lastName\"></component>\n    ```", "```js\n<ul data-bind='foreach: allProducts'>\n  <product-details params='product: $data'></product-details>\n</ul>\n```", "```js\nko.components.register('contact-list', {\n  template: { fromUrl: 'contact-list.html', maxCacheAge: 100 },\n  viewModel: { require: 'contact-list'  }\n});\n```", "```js\nvar templateFromUrlLoader = {\n  loadTemplate: function(name, templateConfig, callback) {\n    if (templateConfig.fromUrl) {\n      // Uses jQuery's ajax facility to load the markup from a file\n      var fullUrl = '/app/' + templateConfig.fromUrl + '?cacheAge=' + templateConfig.maxCacheAge;\n      $.get(fullUrl, function(markupString) {\n        callback($.parseHTML(markupString));\n      });\n    } else {\n      // Unrecognized config format. Let another loader handle it.\n      callback(null);\n   }\n  }\n};\n```", "```js\nko.components.loaders.unshift(templateFromUrlLoader);\n```", "```js\nvar app = Sammy('#appHost', function() {\n  //Home route\n   this.get('#/', function() {\n    //Load home page\n  });\n  this.get('#/contacts/:id', function() {\n    var contactId = this.params.id;\n    //Load contact\n  });\n}).run('#/');\n```", "```js\ndefine(function() {\n  return {\n    navigate: function(path) {\n      window.location.hash = '#' + path;\n    }\n  };\n});\n```", "```js\ndefine(['knockout', 'text!contacts/edit.html', 'core/dataService', 'core/router', 'contacts/contact'], \nfunction(ko, templateString, dataService, router, Contact) {\n\n  function ContactEditViewmodel(params) {\n    self.entryContact = ko.observable(new Contact());\n    if (params && params.id) {\n      dataService.getContact(params.id, function(contact) {\n        if (contact)\n        self.entryContact(contact);\n      });\n    }\n\n    self.cancelEntry = function() {\n      router.navigate('/');\n    };\n    self.saveEntry = function() {\n\n      var action = self.entryContact().id() === 0 \n      ? dataService.createContact \n      : dataService.updateContact;\n\n      action(self.entryContact(), function() {\n        router.navigate('/');\n      });\n    };\n    self.dispose = function() {\n      self.entryContact(null);\n    };\n  }\n\n  return { \n    template: templateString, \n    viewModel: ContactEditViewmodel \n  };\n});\n```", "```js\ndefine(['knockout', 'text!contacts/list.html', 'core/dataService', 'core/router'], \nfunction(ko, templateString, dataService, router) {\n\n  function ContactsListViewmodel() {\n    var self = this;\n\n    self.contacts = ko.observableArray();\n\n    dataService.getContacts(function(contacts) {\n      self.contacts(contacts);\n    });\n    self.newEntry = function() { router.navigate('/contacts/new'); };\n    self.editContact = function(contact) { router.navigate('/contacts/' + contact.id()); };\n\n    self.deleteContact = function(contact) {\n      dataService.removeContact(contact.id(), function() {\n        self.contacts.remove(contact);\n       });\n    };\n\n    self.query = ko.observable('');\n    self.clearQuery = function() { self.query(''); };\n\n    self.displayContacts = ko.computed(function() {\n      //Same as before\n    });\n\n    self.dispose = function() {\n      self.contacts.removeAll();\n    };\n  }\n\n  return { \n    template: templateString, \n    viewModel: ContactsListViewmodel \n  };\n});\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    //Same as before\n  </head>\n  <body>\n    <!-- Navbar -->\n    <nav class=\"navbar navbar-default\" role=\"navigation\">\n      //Same as before\n    </nav>\n\n    <!-- Main Application Body -->\n    <div id=\"appHost\" class=\"container\" data-bind=\"if: name\">\n      <!-- ko component: { name: name, params: data } --><!-- /ko -->\n    </div>\n    <script type=\"text/javascript\" src=\"img/require-2.1.js\" data-main=\"/app/main\"></script>\n  </body>\n</html>\n```", "```js\ndefine(['jquery', 'knockout', 'sammy', 'bootstrap'], function($, ko, Sammy) {\n  var pageVm = {\n    name: ko.observable(),\n    data: ko.observable(),\n    setRoute: function(name, data) {\n      //Set data first, otherwise component will get old data\n      this.data(data);\n      this.name(name);\n    }\n  };\n\n  //Sammy Setup\n  Var sammyConfig = /* see below */\n\n  $(document).ready(function() {\n    sammyConfig.run('#/');\n    ko.applyBindings(pageVm);\n  });\n});\n```", "```js\nko.components.register('contact-edit', { require: 'contacts/edit' });\nself.get('#/contacts/:id', function() {\n  pageVm.setRoute('contact-edit', { id: this.params.id });\n});\n```", "```js\nvar sammyConfig = Sammy('#appHost', function() {\n  var self = this;\n  var pages = [\n    { route: ['/', '#/'], component: 'contact-list', \tmodule: 'contacts/list'}, { route: ['#/contacts/new', '#/contacts/:id'], component: 'contact-edit', \tmodule: 'contacts/edit' }, { route: '#/settings', component: 'settings-page', module: 'settings/page' }\n  ];\n\n  pages.forEach(function(page) {\n    //Register the component, only needs to happen\n    ko.components.register(page.component, { require: page.module });\n\n    //Force routes to be an array\n    if (!(page.route instanceof Array))\n    page.route = [page.route];\n\n    //Register routes with Sammy\n    page.route.forEach(function(route) {\n      self.get(route, function() {\n\n        //Collect the parameters, if present\n        var params = {};\n        ko.utils.objectForEach(this.params, function(name, value) {\n          params[name] = value;\n        });\n\n        //Set the page\n        pageVm.setRoute(page.component, params);\n      });\n    });\n  });\n});\n```"]