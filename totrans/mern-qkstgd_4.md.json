["```js\nconst EventEmitter = require('events') \nconst emitter = new EventEmitter() \nemitter.on('welcome', () => { \n    console.log('Welcome!') \n}) \n```", "```js\nemitter.emit('welcome') \n```", "```js\nemitter.on('welcome', () => { \n    console.log('Welcome') \n}) \nemitter.on('welcome', () => { \n    console.log('There!') \n}) \nemitter.emit('welcome') \n```", "```js\nnpm init\n```", "```js\n      const EventEmitter = require('events') \n```", "```js\n      const NS_PER_SEC = 1e9 \n      const NS_PER_MS = 1e6 \n```", "```js\n      class Timer extends EventEmitter { \n          start() { \n              this.startTime = process.hrtime() \n              this.emit('start') \n          } \n          stop() { \n              const diff = process.hrtime(this.startTime) \n              this.emit( \n                  'stop', \n                  (diff[0] * NS_PER_SEC + diff[1]) / NS_PER_MS, \n              ) \n          } \n      } \n```", "```js\n      const tasks = new Timer() \n```", "```js\n      tasks.on('start', () => { \n          let res = 1 \n          for (let i = 1; i < 100000; i++) { \n              res *= i \n          } \n          tasks.stop() \n      }) \n```", "```js\n      tasks.on('stop', (time) => { \n          console.log(`Task completed in ${time}ms`) \n      }) \n```", "```js\n      tasks.start() \n```", "```js\n node timer.js\n```", "```js\nconst EventEmitter = require('events') \nconst events = new EventEmitter() \nevents.on('print', () => console.log('1')) \nevents.on('print', () => console.log('2')) \nevents.on('print', () => console.log('3')) \nevents.emit('print') \n```", "```js\n1 \n2 \n3 \n```", "```js\nevents.on('print', () => console.log('1')) \nevents.on('print', async () => console.log( \n    await Promise.resolve('2')) \n) \nevents.on('print', () => console.log('3')) \nevents.emit('print')  \n```", "```js\n1 \n3 \n2 \n```", "```js\nconst EventEmitter = require('events') \nclass MyEvents extends EventEmitter { \n    start() { \n        return this.listeners('logme').reduce( \n            (promise, nextEvt) => promise.then(nextEvt), \n            Promise.resolve(), \n        ) \n    } \n} \nconst event = new MyEvents() \nevent.on('logme', () => console.log(1)) \nevent.on('logme', async () => console.log( \n    await Promise.resolve(2) \n)) \nevent.on('logme', () => console.log(3)) \nevent.start() \n```", "```js\n1 \n2 \n3 \n```", "```js\n      io.on('connection', (socket) => { \n          console.log('A new client is connected') \n      }) \n      // Which is the same as:\n       io.of('/').on('connection', (socket) => { \n          console.log('A new client is connected') \n      }) \n```", "```js\n      socket.on('disconnecting', (reason) => { \n          console.log('Disconnecting because', reason) \n      }) \n```", "```js\n      socket.on('disconnect', (reason) => { \n          console.log('Disconnected because', reason) \n      }) \n```", "```js\n      socket.on('error', (error) => { \n          console.log('Oh no!', error.message) \n      }) \n```", "```js\n      clientSocket.on('connect', () => { \n          console.log('Successfully connected to server') \n      }) \n```", "```js\n      clientSocket.on('connect_error', (error) => { \n          console.log('Connection error:', error) \n      }) \n```", "```js\n      clientSocket.on('connect_timeout', (timeout) => { \n          console.log('Connect attempt timed out after', timeout) \n      }) \n```", "```js\n      clientSocket.on('disconnect', (reason) => { \n          console.log('Disconnected because', reason) \n      }) \n```", "```js\n      clientSocket.on('reconnect', (n) => { \n          console.log('Reconnected after', n, 'attempt(s)') \n      }) \n```", "```js\n      clientSocket.on('reconnect_attempt', (n) => { \n          console.log('Trying to reconnect again', n, 'time(s)') \n      })  \n```", "```js\n      clientSocket.on('reconnect_error', (error) => { \n          console.log('Oh no, couldn't reconnect!', error) \n      })  \n```", "```js\n      clientSocket.on('reconnect_failed', (n) => { \n    console.log('Couldn'nt reconnected after', n, 'times') \n      }) \n```", "```js\n      clientSocket.on('ping', () => { \n          console.log('Checking if server is alive') \n      }) \n```", "```js\n      clientSocket.on('pong', (latency) => { \n          console.log('Server responded after', latency, 'ms') \n      }) \n```", "```js\n      clientSocket.on('error', (error) => { \n          console.log('Oh no!', error.message) \n      }) \n```", "```js\n{ \n  \"dependencies\": { \n    \"socket.io\": \"2.1.0\" \n  } \n} \n```", "```js\nnpm install \n```", "```js\n      const io = require('socket.io')() \n```", "```js\n      io.path('/socket.io') \n```", "```js\n      const root = io.of('/') \n```", "```js\n      root.on('connection', socket => { \n          let counter = 0 \n          socket.on('time', () => { \n              const currentTime = new Date().toTimeString() \n              counter += 1 \n              socket.emit('got time?', currentTime, counter) \n          }) \n      }) \n```", "```js\n      io.listen(1337) \n```", "```js\n      const io = require('socket.io-client') \n```", "```js\n      const clientSocket = io('http://localhost:1337', { \n          path: '/socket.io', \n      }) \n```", "```js\n      clientSocket.on('connect', () => { \n          for (let i = 1; i <= 5; i++) { \n              clientSocket.emit('time') \n          } \n      }) \n```", "```js\n      clientSocket.on('got time?', (time, counter) => { \n          console.log(counter, time) \n      }) \n```", "```js\n    node simple-io-server.js\n```", "```js\n    node simple-io-client.js\n```", "```js\n/home \n/users \n/users/profile \n```", "```js\nio.of('/en').on('connection', (socket) => { \n    socket.on('getWelcomeMsg', () => { \n        socket.emit('setWelcomeMsg', 'Hello World!') \n    }) \n}) \nio.of('/es').on('connection', (socket) => { \n    socket.on('getWelcomeMsg', () => { \n        socket.emit('setWelcomeMsg', 'Hola Mundo!') \n    }) \n}) \n```", "```js\n{ \n  \"dependencies\": { \n    \"socket.io\": \"2.1.0\" \n  } \n} \n```", "```js\nnpm install\n```", "```js\n      const http = require('http') \n      const fs = require('fs') \n      const path = require('path') \n      const io = require('socket.io')() \n```", "```js\n     const app = http.createServer((req, res) => { \n      if (req.url === '/') { \n               fs.readFile( \n               path.resolve(__dirname, 'nsp-client.html'), \n              (err, data) => { \n                  if (err) { \n                    res.writeHead(500) \n                    return void res.end() \n                   } \n                    res.writeHead(200) \n                    res.end(data) \n                } \n              ) \n          } else { \n              res.writeHead(403) \n             res.end() \n         } \n    }) \n```", "```js\n      io.path('/socket.io') \n```", "```js\n     io.of('/en').on('connection', (socket) => { \n        socket.on('getData', () => { \n            socket.emit('data', { \n               title: 'English Page', \n               msg: 'Welcome to my Website', \n           }) \n        }) \n   }) \n```", "```js\n      io.of('/es').on('connection', (socket) => { \n          socket.on('getData', () => { \n              socket.emit('data', { \n                  title: 'Página en Español', \n                  msg: 'Bienvenido a mi sitio Web', \n              }) \n          }) \n      }) \n```", "```js\n      io.attach(app.listen(1337, () => { \n          console.log( \n              'HTTP Server and Socket.IO running on port 1337' \n          ) \n      })) \n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Socket.IO Client</title> \n      </head> \n      <body> \n          <!-- code here --> \n      </body> \n      </html> \n```", "```js\n      <h1 id=\"title\"></h1> \n      <section id=\"msg\"></section> \n      <button id=\"toggleLang\">Get Content in Spanish</button> \n       <script src=\"img/socket.io.js\">  \n       </script> \n        <script src=\"img/babel.min.js\">\n      </script> \n```", "```js\n      <script type=\"text/babel\"> \n          // code here! \n      </script> \n```", "```js\n      const title = document.getElementById('title') \n      const msg = document.getElementById('msg') \n      const btn = document.getElementById('toggleLang') \n```", "```js\n      const manager = new io.Manager( \n          'http://localhost:1337', \n          { path: '/socket.io' }, \n      ) \n```", "```js\n      const socket = manager.socket('/en') \n```", "```js\n      manager.socket('/en') \n      manager.socket('/es') \n```", "```js\n      socket.on('connect', () => { \n          socket.emit('getData') \n      }) \n```", "```js\n      socket.on('data', (data) => { \n          title.textContent = data.title \n          msg.textContent = data.msg \n      }) \n```", "```js\n      btn.addEventListener('click', (event) => { \n          socket.nsp = socket.nsp === '/en' \n              ? '/es' \n              : '/en' \n          btn.textContent = socket.nsp === '/en' \n              ? 'Get Content in Spanish' \n              : 'Get Content in English' \n          socket.close() \n          socket.open() \n      }) \n```", "```js\n node nsp-server.js\n```", "```js\n http://localhost:1337/\n```", "```js\n      const socket = manager.socket('/en')\n```", "```js\n      manager.socket('/en')\n      manager.socket('/es')\n```", "```js\nconst first = manager.socket('/home')\nconst second = manager.socket('/home') // <- reuses first connection\n```", "```js\nmanager.socket('/en')\nmanager.socket('/es')\n```", "```js\nconst englishNamespace = manager.socket('/en')\nconst spanishNamespace = manager.socket('/es')\n// They listen to different events\nenglishNamespace.on('showMessage', (data) => {})\nspanishNamespace.on('mostrarMensaje', (data) => {})\n```", "```js\nconst manager = new io.Manager( \n    'http://localhost:1337', \n    { path: '/socket.io' }, \n) \n```", "```js\nconst socket = manager.socket('/en') \n```", "```js\nio.on('connection', (socket) => { \n    console.log(socket.id) // Outputs socket ID \n}) \n```", "```js\nio.on('connection', (socket) => { \n    socket.emit('say', 'hello') \n}) \n```", "```js\nio.on('connection', (socket) => { \n    socket.join(socket.id, (err) => { \n        if (err) { \n            return socket.emit('error', err) \n        } \n        io.to(socket.id).emit('say', 'hello') \n    }) \n}) \n```", "```js\n{ \n  \"dependencies\": { \n    \"socket.io\": \"2.1.0\" \n  } \n} \n```", "```js\nnpm install\n```", "```js\n      const http = require('http') \n      const fs = require('fs') \n      const path = require('path') \n      const io = require('socket.io')() \n      const app = http.createServer((req, res) => { \n          if (req.url === '/') { \n              fs.readFile( \n                  path.resolve(__dirname, 'rooms-client.html'), \n                  (err, data) => { \n                     if (err) { \n                          res.writeHead(500) \n                          return void res.end() \n                      } \n                      res.writeHead(200) \n                      res.end(data) \n                  } \n              ) \n          } else { \n              res.writeHead(403) \n              res.end() \n          } \n      }) \n```", "```js\n      io.path('/socket.io') \n```", "```js\n      const root = io.of('/') \n```", "```js\n      const notifyClients = () => { \n          root.clients((error, clients) => { \n              if (error) throw error \n              root.to('commonRoom').emit( \n                  'updateClientCount', \n                  clients.length, \n              ) \n          }) \n      } \n```", "```js\n      root.on('connection', socket => { \n          socket.join('commonRoom') \n          socket.emit('welcome', `Welcome client: ${socket.id}`) \n          socket.on('disconnect', notifyClients) \n          notifyClients() \n      }) \n```", "```js\n      io.attach(app.listen(1337, () => { \n          console.log( \n              'HTTP Server and Socket.IO running on port 1337' \n          ) \n      })) \n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Socket.IO Client</title> \n      </head> \n      <body> \n          <h1 id=\"title\"> \n              Connected clients: \n              <span id=\"n\"></span> \n          </h1> \n          <p id=\"welcome\"></p> \n          <script src=\"img/socket.io.js\">\n          </script> \n          <script \n          src=\"img/babel.min.js\">\n          </script> \n          <script type=\"text/babel\"> \n      // Code here \n          </script> \n      </body> \n      </html> \n```", "```js\n      const welcome = document.getElementById('welcome') \n      const n = document.getElementById('n') \n```", "```js\n      const manager = new io.Manager( \n          'http://localhost:1337', \n          { path: '/socket.io' }, \n      ) \n```", "```js\n      const socket = manager.socket('/') \n```", "```js\n      socket.on('welcome', msg => { \n          welcome.textContent = msg \n      }) \n```", "```js\n      socket.on('updateClientCount', clientsCount => { \n          n.textContent = clientsCount \n      }) \n```", "```js\n node rooms-server.js\n```", "```js\nhttp://localhost:1337/\n```", "```js\nhttp://localhost:1337/\n```", "```js\nsocket.to('commonRoom').emit('updateClientCount', data) \n```", "```js\n      namespace.use((socket, next) => { ... }) \n```", "```js\n      socket.use((packet, next) => { ... }) \n```", "```js\n{ \n  \"dependencies\": { \n    \"socket.io\": \"2.1.0\" \n  } \n} \n```", "```js\n    npm install\n```", "```js\n      const http = require('http') \n      const fs = require('fs') \n      const path = require('path') \n      const io = require('socket.io')() \n      const app = http.createServer((req, res) => { \n          if (req.url === '/') { \n              fs.readFile( \n                  path.resolve(__dirname, 'middleware-cli.html'), \n                  (err, data) => { \n                      if (err) { \n                          res.writeHead(500) \n                          return void res.end() \n                      } \n                      res.writeHead(200) \n                      res.end(data) \n                  } \n              ) \n          } else { \n              res.writeHead(403) \n              res.end() \n          } \n      }) \n```", "```js\n      io.path('/socket.io') \n```", "```js\n      const users = [ \n          { username: 'huangjx', password: 'cfgybhji' }, \n          { username: 'johnstm', password: 'mkonjiuh' }, \n          { username: 'jackson', password: 'qscwdvb' }, \n      ] \n```", "```js\n      const userMatch = (username, password) => ( \n          users.find(user => ( \n              user.username === username && \n              user.password === password \n          )) \n      ) \n```", "```js\n      const isUserLoggedIn = (socket, next) => { \n          const { session } = socket.request \n          if (session && session.isLogged) { \n              next() \n          } \n      } \n```", "```js\n      const namespace = { \n          home: io.of('/home').use(isUserLoggedIn), \n          login: io.of('/login'), \n      } \n```", "```js\n      namespace.login.on('connection', socket => { \n          socket.use((packet, next) => { \n              const [evtName, data] = packet \n              const user = data \n              if (evtName === 'tryLogin' \n                  && user.username === 'johnstm') { \n                  socket.emit('loginError', { \n                      message: 'Banned user!', \n                  }) \n              } else { \n                  next() \n              } \n          }) \n          socket.on('tryLogin', userData => { \n              const { username, password } = userData \n              const request = socket.request \n              if (userMatch(username, password)) { \n                  request.session = { \n                      isLogged: true, \n                      username, \n                  } \n                  socket.emit('loginSuccess') \n              } else { \n                  socket.emit('loginError', { \n                      message: 'invalid credentials', \n                  }) \n              } \n          }) \n      }) \n```", "```js\n      io.attach(app.listen(1337, () => { \n          console.log( \n              'HTTP Server and Socket.IO running on port 1337' \n          ) \n      })) \n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Socket.IO Client</title> \n          <script src=\"img/socket.io.js\">\n          </script> \n          <script \n          src=\"img/babel.min.js\">\n          </script> \n      </head> \n      <body> \n          <h1 id=\"title\"></h1> \n          <form id=\"loginFrm\" disabled> \n            <input type=\"text\" name=\"username\" placeholder=\"username\"/> \n              <input type=\"password\" name=\"password\" \n                placeholder=\"password\" /> \n              <input type=\"submit\" value=\"LogIn\" /> \n              <output name=\"logs\"></output> \n          </form> \n          <script type=\"text/babel\"> \n              // Code here \n          </script> \n      </body> \n      </html> \n```", "```js\n      const title = document.getElementById('home') \n      const error = document.getElementsByName('logErrors')[0] \n      const loginForm = document.getElementById('loginForm') \n```", "```js\n      const manager = new io.Manager( \n          'http://localhost:1337', \n          { path: '/socket.io' }, \n      ) \n```", "```js\n      const namespace = { \n          home: manager.socket('/home'), \n          login: manager.socket('/login'), \n      } \n```", "```js\n      namespace.home.on('connect', () => { \n          title.textContent = 'Great! you are connected to /home' \n          error.textContent = '' \n      }) \n```", "```js\n      namespace.login.on('loginSuccess', () => { \n          namespace.home.connect() \n      }) \n```", "```js\n      namespace.login.on('loginError', (err) => { \n          logs.textContent = err.message \n      }) \n```", "```js\n      form.addEventListener('submit', (event) => { \n          const body = new FormData(form) \n          namespace.login.emit('tryLogin', { \n              username: body.get('username'), \n              password: body.get('password'), \n          }) \n          event.preventDefault() \n      }) \n```", "```js\n node middleware-server.js\n```", "```js\n http://localhost:1337\n```", "```js\n      invalid credentials \n```", "```js\n      Banned user! \n```", "```js\n      Connected to /home \n```", "```js\n{ \n  \"dependencies\": { \n    \"express\": \"4.16.3\", \n    \"socket.io\": \"2.1.0\" \n  } \n} \n```", "```js\nnpm install\n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Socket.IO Client</title> \n          <script src=\"img/socket.io.js\">\n          </script> \n          <script \n           src=\"img/babel.min.js\">\n          </script> \n      </head> \n      <body> \n          <h1 id=\"welcome\"></h1> \n          <script type=\"text/babel\"> \n              const welcome = document.getElementById('welcome') \n              const manager = new io.Manager( \n                  'http://localhost:1337', \n                  { path: '/socket.io' }, \n              ) \n              const root = manager.socket('/') \n              root.on('welcome', (msg) => { \n                  welcome.textContent = msg \n              }) \n          </script> \n      </body> \n      </html> \n```", "```js\n      const path = require('path') \n      const express = require('express') \n      const io = require('socket.io')() \n      const app = express() \n```", "```js\n      io.path('/socket.io') \n```", "```js\n      app.get('/', (req, res) => { \n          res.sendFile(path.resolve( \n              __dirname, \n              'io-express-view.html', \n          )) \n      }) \n```", "```js\n      io.of('/').on('connection', (socket) => { \n          socket.emit('welcome', 'Hello from Server!') \n      }) \n```", "```js\n      io.attach(app.listen(1337, () => { \n          console.log( \n              'HTTP Server and Socket.IO running on port 1337' \n          ) \n      })) \n```", "```js\n node io-express-server.js\n```", "```js\nhttp://localhost:1337/\n```", "```js\nconst express = require('express') \nconst io = require('socket.io')() \nconst app = express() \nio.path('/socket.io')\n app.get('/socket.io', (req, res) => { \n    res.status(200).send('Hey there!') \n}) \nio.of('/').on('connection', socket => { \n    socket.emit('someEvent', 'Data from Server!') \n}) \nio.attach(app.listen(1337)) \n```", "```js\nio.path('/socket.io')\n app.get('/socket.io/:msg', (req, res) => { \n    res.status(200).send(req.params.msg) \n}) \n```", "```js\n{\"code\":0,\"message\":\"Transport unknown\"} \n```", "```js\nio.serveClient(false) \n```", "```js\nnamespace.use((socket, next) => { \n    const req = socket.request \n    const res = socket.request.res \n    next() \n}) \n```", "```js\nconst expressMiddleware = (request, response, next) => { \n    next() \n} \n```", "```js\nroot.use((socket, next) => { \n    const req = socket.request \n    const res = socket.request.res \n    expressMiddleware(req, res, next) \n}) \n```", "```js\n{ \n  \"dependencies\": { \n    \"express\": \"4.16.3\", \n    \"express-session\": \"1.15.6\", \n    \"socket.io\": \"2.1.0\" \n  } \n} \n```", "```js\nnpm install\n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Socket.IO Client</title> \n          <script src=\"img/socket.io.js\">  \n          </script> \n          <script \n           src=\"img/babel.min.js\">\n          </script> \n      </head> \n      <body> \n          <h1 id=\"title\"></h1> \n          <form id=\"loginForm\"> \n            <input type=\"text\" name=\"username\" placeholder=\"username\"/> \n              <input type=\"password\" name=\"password\" \n                placeholder=\"password\" /> \n              <input type=\"submit\" value=\"LogIn\" /> \n              <output name=\"logErrors\"></output> \n          </form> \n          <script type=\"text/babel\"> \n              // Code here \n          </script> \n      </body> \n      </html> \n```", "```js\n      const title = document.getElementById('title') \n      const error = document.getElementsByName('logErrors')[0] \n      const loginForm = document.getElementById('loginForm') \n```", "```js\n      const manager = new io.Manager( \n          'http://localhost:1337', \n          { path: '/socket.io' }, \n      ) \n```", "```js\n      const namespace = { \n          home: manager.socket('/home'), \n          login: manager.socket('/login'), \n      } \n```", "```js\n      namespace.home.on('welcome', (msg) => { \n          title.textContent = msg \n          error.textContent = '' \n      }) \n```", "```js\n      namespace.login.on('loginSuccess', () => { \n          namespace.home.connect() \n      }) \n```", "```js\n      namespace.login.on('loginError', err => { \n          error.textContent = err.message \n      }) \n```", "```js\n      loginForm.addEventListener('submit', event => { \n          const body = new FormData(loginForm) \n          namespace.login.emit('enter', { \n              username: body.get('username'), \n              password: body.get('password'), \n          }) \n          event.preventDefault() \n      }) \n```", "```js\n      const path = require('path') \n      const express = require('express') \n      const io = require('socket.io')() \n      const expressSession = require('express-session') \n      const app = express() \n```", "```js\n      io.path('/socket.io') \n```", "```js\n      const session = expressSession({ \n          secret: 'MERN Cookbook Secret', \n          resave: true, \n          saveUninitialized: true, \n      }) \n```", "```js\n      const ioSession = (socket, next) => { \n          const req = socket.request \n          const res = socket.request.res \n          session(req, res, (err) => { \n              next(err) \n              req.session.save() \n          }) \n      } \n```", "```js\n      const home = io.of('/home') \n      const login = io.of('/login') \n```", "```js\n      const users = [ \n          { username: 'huangjx', password: 'cfgybhji' }, \n          { username: 'johnstm', password: 'mkonjiuh' }, \n          { username: 'jackson', password: 'qscwdvb' }, \n      ] \n```", "```js\n      app.use(session) \n```", "```js\n      app.get('/home', (req, res) => { \n          res.sendFile(path.resolve( \n              __dirname, \n              'io-express-cli.html', \n          )) \n      }) \n```", "```js\n      home.use(ioSession) \n      home.use((socket, next) => { \n          const { session } = socket.request \n          if (session.isLogged) { \n              next() \n          } \n      }) \n```", "```js\n      home.on('connection', (socket) => { \n          const { username } = socket.request.session \n          socket.emit( \n              'welcome', \n              `Welcome ${username}!, you are logged in!`, \n          ) \n      }) \n```", "```js\n      login.use(ioSession) \n      login.on('connection', (socket) => { \n          socket.on('enter', (data) => { \n              const { username, password } = data \n              const { session } = socket.request \n              const found = users.find((user) => ( \n                  user.username === username && \n                  user.password === password \n              )) \n              if (found) { \n                  session.isLogged = true \n                  session.username = username \n                  socket.emit('loginSuccess') \n              } else { \n                  socket.emit('loginError', { \n                      message: 'Invalid Credentials', \n                  }) \n              } \n          }) \n      }) \n```", "```js\n      io.attach(app.listen(1337, () => { \n          console.log( \n              'HTTP Server and Socket.IO running on port 1337' \n          ) \n      })) \n```", "```js\n node io-express-srv.js  \n```", "```js\n http://localhost:1337/home\n```", "```js\n      * Username: johntm\n      * Password: mkonjiuh\n```"]