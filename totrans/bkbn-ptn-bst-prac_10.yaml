- en: Appendix B. Precompiling Templates on the Server Side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 2](ch02.html "Chapter 2. Working with Views"), *Working with Views*,
    we learned the advantages of using precompiled templates in your application.
    In addition, we saw a number of options to store your templates as inline in the
    `index.html` file or as separate template files. We also saw how we can use a
    template manager to precompile and cache templates to avoid compilation overhead
    every time. However, this precompilation process will run anyway when you start
    your application, which will surely take a certain period of time. Wait! Aren't
    these templates static resources? Then the compiled versions of the templates
    without data will also be static resources. Right? Then why not keep a separate
    file with all of the precompiled templates ready and use it as soon as your application
    starts? If you get a file with all of your templates already precompiled and minified,
    it will certainly boost your application's performance. This is what we will try
    here—we will develop a script to precompile the templates on the server side,
    which will traverse all of the template files and create a single template manager
    file. We use Node.js here, but you can use any server-side technology to get the
    same result. The complete working code is given in our code samples.
  prefs: []
  type: TYPE_NORMAL
- en: 'To precompile, we need a template engine with precompilation support. We will
    use Underscore.js here, but you are free to use your desired template engine to
    achieve the result. The following Node.js example shows you how to achieve this
    functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is pretty self-explanatory. We created a complete JavaScript
    snippet as a string that will be returned to the frontend. Here are the steps
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we browse through each template file in the `templates` directory and
    retrieve their contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We already have an object `Templates.cachedTemplates` defined and we need to
    store each template file's contents in this object with the template filename
    as a property and the template string as its value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Underscore''s `_.template()` method, in general, returns a function. It also
    provides a property called `source` that gives the textual representation of that
    particular function. The following line will give you the function source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We place all of the function strings inside `Templates.cachedTemplates` one
    by one, and once the loop is over, we write the entire contents to another JavaScript
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now assume that the client side is asking for the `templates.js` file that
    contains the complete template content of the project. On the server side, we
    can write the following code that will send the `compiled.js` file content to
    the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'So, a request to the `template.js` file on the client side will display content
    similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The final output is the `TemplateManager` object with the template's filename
    as its property and the compiled version of the template as the value of that
    property. This way, all of your template files will get added to the `TemplateManager`
    object. However, for this piece of code, you need to make sure that each template's
    filename is different. Otherwise, the template of the files with the same name
    will get overwritten by another.
  prefs: []
  type: TYPE_NORMAL
- en: 'You do not need to understand this compiled template function definition, as
    this will be used internally by the library. Be assured that once you call this
    function with the data object, you will get the proper HTML output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This solution for precompiling JavaScript templates is very effective and you
    can use the same concept freely in your projects. We have used this concept in
    multiple projects successfully.
  prefs: []
  type: TYPE_NORMAL
