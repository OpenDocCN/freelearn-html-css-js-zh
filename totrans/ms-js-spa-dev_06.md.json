["```js\nvar myApp = angular.module('myApp', []); \nmyApp.controller('UserController', function UserController($scope) { \n    $scope.user = { \n        firstName: 'Peebo', \n        lastName: 'Sanderson' \n    }; \n}); \n\n```", "```js\n<body ng-app=\"myApp\"> \n    <div ng-controller=\"UserController\"> \n        <p> \n            <strong>First Name:</strong> {{user.firstName}}<br> \n            <strong>Last Name:</strong> {{user.lastName}} \n        </p> \n    </div> \n</body> \n\n```", "```js\n<body ng-app=\"myApp\"> \n    <div ng-controller=\"UserController\"> \n        <p> \n            <strong>First Name:</strong> \n            <span ng-bind=\"user.firstName\"></span><br> \n            <strong>Last Name:</strong> \n            <span ng-bind=\"user.lastName\"></span> \n        </p> \n    </div> \n</body> \n\n```", "```js\n<body ng-app=\"myApp\"> \n    <div ng-controller=\"UserController\"> \n        <p> \n            <strong>First Name:</strong> {{user.firstName}}<br> \n            <strong>Last Name:</strong> {{user.lastName}} \n        </p> \n        <p> \n            <label> \n                <input type=\"text\" ng-model=\"user.firstName\"> \n            </label><br> \n            <label> \n                <input type=\"text\" ng-model=\"user.lastName\"> \n            </label> \n        </p> \n    </div> \n</body> \n\n```", "```js\n$scope.$watch(watchExpression, listener); \n\n```", "```js\n$scope.user = { \n    firstName: 'Peebo', \n    lastName: 'Sanderson', \n    age: 54 \n}; \n\n```", "```js\n$scope.$watch('user.firstName', listener); \n$scope.user.firstName = 'Udis'; \n\n```", "```js\n$scope.$watch('user', listener); \n$scope.user.lastName = 'Petroyka'; \n// The entire value of $scope.user has not changed \n\n```", "```js\n$scope.user = { \n    firstName: 'Udis', \n    lastName: 'Petroyka, \n    age: 82 \n}; \n// The entire value of $scope.user has changed \n\n```", "```js\n$scope.$watchCollection(obj, listener); \n\n```", "```js\n$scope.$watchCollection('user', listener); \n$scope.user.firstName = 'Jarmond'; \n// A property of the object has changed \n\n```", "```js\n$scope.$watch(watchExpression, listener, true); \n\n```", "```js\nvar User = Ember.Object.extend({ \n    firstName: null, \n    lastName: null, \n    fullName: Ember.computed('firstName', 'lastName', function() { \n        return `${this.get('firstName')} ${this.get('lastName')}`; \n    }) \n}); \n\n```", "```js\nvar currentUser = User.create({ \n    firstName: 'Chappy', \n    lastName: 'Scrumdinger' \n}); \n\n```", "```js\ncurrentUser.get('fullName'); // returns \"Chappy Scrumdinger\" \n\n```", "```js\nvar User = Ember.Object.create({ \n    firstName: null, \n    lastName: null, \n    nickName: Ember.computed.oneWay('firstName') \n}); \n\n```", "```js\nvar currentUser = User.create({ \n    firstName: 'Peebo', \n    lastName: 'Sanderson' \n}); \n\n```", "```js\ncurrentUser.get('nickName'); // returns \"Peebo\" \n\n```", "```js\ncurrentUser.set('nickName', 'Chappy'); \ncurrentUser.get('firstName'); // returns \"Peebo\" \n\n```", "```js\nvar User = Ember.Object.extend({ \n    firstName: null, \n    lastName: null, \n    nickName: Ember.computed.alias('firstName') \n}); \n\n```", "```js\nvar currentUser = User.create({ \n    firstName: 'Udis', \n    lastName: 'Petroyka' \n}); \n\n```", "```js\ncurrentUser.get('nickName'); // returns \"Udis\" \ncurrentUser.set('nickName', 'Peebo'); \ncurrentUser.get('firstName'); // returns \"Peebo\" \n\n```", "```js\nvar dog = { \n    name: 'Belladonna', \n    favoriteThing: 'Snacks!' \n}; \n\n```", "```js\n<h1 rv-text=\"dog.name\"></h1> \n<p> \n    My favorite thing is:  \n    <span rv-text=\"dog.favoriteThing\"></span> \n</p> \n\n```", "```js\n<h1>{ dog.name }</h1> \n<p>My favorite thing is: { dog.favoriteThing }</p> \n\n```", "```js\n<h1>Belladonna</h1> \n<p>My favorite thing is: Snacks!</p \n\n```", "```js\ndog.name = 'Zoe'; // binder in View is updated \ndog.favoriteThing = 'Barking!'; // binder in View is updated \n\n```", "```js\n<h1>Zoe</h1> \n<p>My favorite thing is: Barking!</p> \n\n```", "```js\nrivets.binders.size = function(el, val) { \n    el.style.fontSize = val; \n}; \n\n```", "```js\nvar dog = { \n    name: 'Belladonna', \n    favoriteThing: 'Snacks!', \n    size: '2rem' \n}; \n\n```", "```js\n<h1>{ dog.name }</h1> \n<p> \n    My favorite thing is: \n    <span rv-size=\"dog.size\">{ dog.favoriteThing }</span> \n</p> \n\n```", "```js\n<input type=\"text\" rv-value=\"dog.name\"> \n\n```", "```js\nrivets.binders.validate = { \n    bind: function(el) { \n        adapter = this.config.adapters[this.key.interface]; \n        model = this.model; \n        keypath = this.keypath; \n\n        this.callback = function() { \n            value = adapter.read(model, keypath); \n            adapter.publish(model, keypath, !value); \n        } \n\n        $(el).on('focus', this.callback); \n    }, \n\n    unbind: function(el) { \n        $(el).off('blur', this.callback); \n    }, \n\n    routine: function(el, value) { \n        $(el)[value ? 'removeClass' : 'addClass']('invalid'); \n    } \n}; \n\n```", "```js\nvar firstName = 'Udis'; \nvar user = { \n    get firstName() { \n        return firstName; \n    }, \n    set firstName(val) { \n        firstName = val; \n    } \n}; \n\n```", "```js\nconsole.log(user.firstName); // Returns \"Udis\" \nuser.firstName = 'Jarmond'; \nconsole.log(user.firstName); // Returns \"Jarmond\" \nconsole.log(firstName); // Returns \"Jarmond\" \n\n```", "```js\nvar user = {}; \nObject.defineProperty(user, 'firstName', { \n    get: function() { \n        return firstName; \n    } \n    set: function(val) { \n        firstName = val; \n    }, \n    configurable: true, \n    enumerable: true \n}); \n\n```", "```js\n<input type=\"text\" name=\"firstName\" value=\"Jarmond\"> \n\n```", "```js\nvar firstName = document.querySelector('input[name=\"firstName\"]'); \nvar user = {}; \nObject.defineProperty(user, 'firstName', { \n    get: function() { \n        return firstName.value; \n    }, \n    set: function(val) { \n       firstName.value = val; \n    }, \n    configurable: true, \n    enumerable: true \n}); \n\n```", "```js\nuser.firstName = 'Chappy'; \n\n```", "```js\nfirstName.oninput = function() { \n    user.firstName = user.firstName; \n}; \n\n```", "```js\n<p> \n    <label> \n        First name:  \n        <input type=\"text\" name=\"firstName\" value=\"Udis\"> \n    </label> \n</p> \n\n```", "```js\nvar firstName = document.querySelector('input[name=\"firstName\"]'); \nvar user = {}; \nObject.defineProperty(user, 'firstName', { \n    get: function() { \n        return firstName.value; \n    }, \n    set: function(val) { \n        var list = document.querySelectorAll( \n            '[data-bind=\"firstName\"]' \n        ), i; \n        for (i = 0; i < list.length; i++) { \n            list[i].innerHTML = val; \n        } \n        firstName.value = val; \n    }, \n    configurable: true, \n    enumerable: true \n}); \nuser.firstName = user.firstName; \nfirstName.oninput = function() { \n    user.firstName = user.firstName; \n}; \n\n```", "```js\nuser.firstName = 'Peebo'; \n\n```", "```js\nfunction dataBind(obj, prop) { \n    var input = document.querySelector('[name=\"' + prop + '\"]'); \n    input.value = obj[prop] || input.value; \n    Object.defineProperty(obj, prop, { \n        get: function() { \n            return input.value; \n        }, \n        set: function(val) { \n            var list = document.querySelectorAll( \n                '[data-bind=\"' + prop + '\"]' \n            ), i; \n            for (i = 0; i < list.length; i++) { \n                list[i].innerHTML = val; \n            } \n            input.value = val; \n        }, \n        configurable: true, \n        enumerable: true \n    }); \n    obj[prop] = obj[prop]; \n    input.oninput = function() { \n        obj[prop] = obj[prop]; \n    }; \n} \n\n```", "```js\n// For the input \nvar input = document.querySelector('[name=\"' + prop + '\"]'); \n// For other elements \nvar list = document.querySelectorAll('[data-bind=\"' + prop + '\"]'); \n\n```", "```js\nvar user = {}; \nuser.firstName = 'Peebo'; \ndataBind(user, 'firstName'); \n\n```", "```js\nvar user = {}; \nuser.firstName = 'Peebo'; \ndataBind(user, 'firstName'); \n\n```", "```js\n<input type=\"text\" name=\"firstName\" value=\"Jarmond\"> \n\nconsole.log(user.firstName); // returns \"Jarmond\" \n\n```", "```js\ndocument.querySelector('strong[data-bind=\"firstName\"]') \n    .innerHTML = 'Udis'; \n\n```", "```js\nconsole.log(user.firstName); // returns \"Jarmond\" \n\n```", "```js\nvar observer = new MutationObserver(function(mutations) { \n  mutations.forEach(function(mutation) { \n    console.log(mutation); \n  });     \n});  \n\n```", "```js\n    var config = { \n        attributes: true, \n        childList: true, \n        characterData: true \n    }; \n\n```", "```js\nvar elem = document.querySelector('[data-bind=\"firstName\"]'); \nobserver.observe(elem, config); \n\n```", "```js\nfunction dataBind(obj, prop) { \n    var input = document.querySelector('[name=\"' + prop + '\"]'); \n    var observer = new MutationObserver(function(mutations) { \n        mutations.forEach(function(mutation) { \n            var val = mutation.target.innerHTML; \n            if (obj[prop] !== val) { \n                console.log( \n                    'Inequality detected: \"' +  \n                    obj[prop] + '\" !== \"' + val + '\"' \n                ); \n                obj[prop] = mutation.target.innerHTML; \n            } \n        }); \n    }); \n    var config = { \n        attributes: true, \n        childList: true, \n        characterData: true \n    }; \n    var list = document.querySelectorAll( \n        '[data-bind=\"' + prop + '\"]' \n    ), i; \n    for (i = 0; i < list.length; i++) { \n        observer.observe(list[i], config); \n    } \n    input.value = obj[prop] || input.value; \n    Object.defineProperty(obj, prop, { \n        get: function() { \n            return input.value; \n        }, \n        set: function(val) { \n            var list = document.querySelectorAll( \n                '[data-bind=\"' + prop + '\"]' \n            ), i; \n            for (i = 0; i < list.length; i++) { \n                list[i].innerHTML = val; \n            } \n            input.value = val; \n        }, \n        configurable: true, \n        enumerable: true \n    }); \n    obj[prop] = obj[prop]; \n    input.oninput = function() { \n        obj[prop] = obj[prop]; \n    }; \n} \n\n```", "```js\nvar observer = new MutationObserver(function(mutations) { \n    mutations.forEach(function(mutation) { \n        var val = mutation.target.innerHTML; \n        if (obj[prop] !== val) { \n            console.log( \n                'Inequality detected: \"' +  \n                obj[prop] + '\" !== \"' + val + '\"' \n            ); \n            obj[prop] = mutation.target.innerHTML; \n        } \n    }); \n}); \n\n```", "```js\n<input type=\"text\" name=\"firstName\" value=\"Chappy\"> \n\nconsole.log(user.firstName); // returns \"Chappy\" \n\n```", "```js\nuser.firstName = 'Peebo'; \n\n```", "```js\ndocument.querySelector('strong[data-bind=\"firstName\"]') \n    .innerHTML = 'Udis'; \n\n```", "```js\nconsole.log(user.firstName); // returns \"Udis\" \n\n```"]