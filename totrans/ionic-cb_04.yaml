- en: Validating Forms and Making HTTP Requests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证表单和执行 HTTP 请求
- en: 'In this chapter, we will cover the following tasks related to creating form
    input validation, mocked API calls, and payment pages using Stripe:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖与创建表单输入验证、模拟 API 调用和使用 Stripe 的支付页面相关的以下任务：
- en: Creating a complex form with input validation
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建具有输入验证的复杂表单
- en: Creating reactive forms in Ionic
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Ionic 中创建响应式表单
- en: Retrieving data via a mocked API using a static JSON file
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用静态 JSON 文件模拟的 API 获取数据
- en: Integrating with Stripe for online payment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Stripe 集成进行在线支付
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: All mobile apps require taking user input and sending it to a backend server.
    A simple example is filling out a form, such as a user registration or contact
    form. The information is validated against a set of rules before being sent to
    the backend. Also, there are many other scenarios where the information is captured
    based on user behavior from the app, such as where they touch or how much time
    they spend on a certain page. Regardless, you will run into many sending- and
    retrieving-data scenarios.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所有移动应用程序都需要获取用户输入并将其发送到后端服务器。一个简单的例子是填写表单，如用户注册表或联系表。在发送到后端之前，信息将与一组规则进行验证。此外，还有许多其他场景，信息是基于用户在应用程序中的行为捕获的，例如他们在某个页面上的触摸或停留时间。无论如何，你都会遇到许多发送和检索数据的情况。
- en: 'This chapter will cover the following three basic examples:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下三个基本示例：
- en: How to validate user inputs, such as text, number, and required versus not required,
    and communicate data to another page
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何验证用户输入，例如文本、数字以及必填与非必填，并将数据传递到另一页面
- en: How to render data without having an actual backend
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在没有实际后端的情况下渲染数据
- en: How to process payments using Stripe
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Stripe 处理支付
- en: All of these are actually available natively in Angular 2\. However, since Angular
    2 has a lot of changes compared to Angular 1 in terms of processing data and working
    with the backend server, it's worth covering these topics in detail.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些实际上在 Angular 2 中都是原生可用的。然而，由于 Angular 2 在处理数据和与后端服务器交互方面与 Angular 1 相比有很多变化，因此详细讨论这些主题是值得的。
- en: Creating a complex form with input validation
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建具有输入验证的复杂表单
- en: 'In this section, you will build an app to demonstrate form validation using
    `ngForm` and `ngControl`. Here is a screenshot of the form:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将构建一个应用程序来演示使用 `ngForm` 和 `ngControl` 进行表单验证。以下是表单的截图：
- en: '![](img/d130605a-958a-46df-81ad-4f2d1038631f.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d130605a-958a-46df-81ad-4f2d1038631f.png)'
- en: 'If the user tries to submit without providing valid information, the form will
    show the following error:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户尝试提交而没有提供有效信息，表单将显示以下错误：
- en: '![](img/3d86a3f3-2630-4b02-b3a9-e792997c37e5.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d86a3f3-2630-4b02-b3a9-e792997c37e5.png)'
- en: Basically, the Name field is required. The Phone field is the number type, but
    is optional. The Comment field is required and the user must enter at least four
    characters. Of course, this is just for demonstration of the input length. The
    user, finally, must agree to the terms and conditions via the toggle input.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，姓名字段是必需的。电话字段是数字类型，但为可选。评论字段是必需的，用户必须输入至少四个字符。当然，这只是为了演示输入长度。最后，用户必须通过切换输入同意条款和条件。
- en: 'After a successful validation, the user will be taken to the second screen
    with a summary of the previous screen, as illustrated in the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 验证成功后，用户将被带到第二个屏幕，其中包含上一个屏幕的摘要，如下面的截图所示：
- en: '![](img/4c255437-1338-4b90-aefa-e4a2b0162d86.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c255437-1338-4b90-aefa-e4a2b0162d86.png)'
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This app example could work either in a browser or on a physical device. However,
    you can optionally connect your physical device to verify the Phone field for
    number keypad.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序示例可以在浏览器或物理设备上运行。然而，你可以选择将物理设备连接到验证电话字段的数字键盘。
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Create a new `MyFormValidation` app using the `blank` template, as shown, and
    go to the `MyFormValidation` folder:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照示例，使用 `blank` 模板创建一个新的 `MyFormValidation` 应用程序，然后进入 `MyFormValidation` 文件夹：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open the `./src/app/app.module.ts` file and replace the content with the following
    code:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/app/app.module.ts` 文件，并将其内容替换为以下代码：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You may realize that there is a common service to be used in the app, called
    `MyFormService` here. This example also has a second page, called `ThankyouPage`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会意识到应用程序中有一个共同的服务要使用，这里称为 `MyFormService`。此示例还有一个第二页，称为 `ThankyouPage`。
- en: 'Now, let''s create the service by first creating a directory, as shown:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们首先创建一个目录来创建服务，如下所示：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Create the `myform.ts` file in the component's directory that you just created,
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你刚刚创建的组件目录中创建 `myform.ts` 文件，
- en: 'as follows:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下所示：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This example will keep the service component simple for demonstration purposes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子将服务组件保持简单，以供演示目的。
- en: 'Open and edit the `./src/pages/home/home.html` template, as shown:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑 `./src/pages/home/home.html` 模板，如下所示：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is probably the most complicated part of the form validation process because
    there are many places where you have to embed validation logic for the input.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是表单验证过程中最复杂的一部分，因为有很多地方你必须嵌入输入的验证逻辑。
- en: 'Open and replace the content of the `./src/pages/home/home.scss` file with
    the following code:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并替换 `./src/pages/home/home.scss` 文件的内容，如下所示：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open `./src/pages/home/home.ts` for editing with the following code:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/pages/home/home.ts` 文件进行编辑，如下所示：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You may note that there isn't much validation code in the JavaScript part. This
    means that the template takes care of a lot of the validations. There is also
    an `import` command for a `thankyou` page, which you will have to create next.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到 JavaScript 部分中并没有太多的验证代码。这意味着模板处理了大部分验证。还有一个用于 `thankyou` 页面的 `import`
    命令，你将不得不在下一步创建它。
- en: 'Now, let''s create the `thankyou` folder, as follows:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建 `thankyou` 文件夹，如下所示：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a `thankyou.ts` file in the `Component`''s directory that you just created,
    as shown:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你刚刚创建的 `Component` 目录中创建一个 `thankyou.ts` 文件，如图所示：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This page just renders the data from the `MyFormService` service, so you can
    keep it very simple.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面只是渲染 `MyFormService` 服务的数据，所以你可以让它非常简单。
- en: 'Create `thankyou.html` in the `./src/pages/thankyou` folder, as illustrated:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `./src/pages/thankyou` 文件夹中创建 `thankyou.html`，如图所示：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create `thankyou.scss` in the `./src/pages/thankyou` folder, as shown:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `./src/pages/thankyou` 文件夹中创建 `thankyou.scss`，如下所示：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Go to your Terminal and run the app with the following command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往你的终端，使用以下命令运行应用程序：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's start with the `home.html` file, where most of the validation code is
    located. If you look at the structure of this page, it's very typical. You have
    `<ion-navbar>` with `<ion-title>`. The `<form>` element must be inside the `<ion-content>`
    area.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从包含大部分验证代码的 `home.html` 文件开始。如果你看看这个页面的结构，它非常典型。你有一个 `<ion-navbar>`，里面有一个
    `<ion-title>`。`<form>` 元素必须位于 `<ion-content>` 区域内。
- en: It's a requirement to use the `<form>` element for Angular validation to work.
    Otherwise, there will be no `submit` event and you cannot catch errors for each
    input.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `<form>` 元素是 Angular 验证的一个要求。否则，将没有 `submit` 事件，你无法捕获每个输入的错误。
- en: '`form` has the following attributes:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`form` 具有以下属性：'
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To assign a local variable on the fly, you use the `#` sign. This means that
    you want the `f` variable to refer to `ngForm`, which is automatically created
    by Angular. This is a special object that contains everything related to the current
    form. You are advised to use `novalidate` to bypass the default HTML5 validation
    because you are using Angular for validation instead. Otherwise, the `form` will
    acquire conflicts. The `(ngSubmit)` is pretty much an event to trigger the `onSubmit(f)`
    function whenever the `button` with `type=submit` is touched or clicked. When
    you submit the form, it will pass the `f` variable along so that you can process
    the object inside the `onSubmit` method.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要即时分配一个局部变量，你使用 `#` 符号。这意味着你希望 `f` 变量引用 `ngForm`，这是 Angular 自动创建的。这是一个包含与当前表单相关的所有内容的特殊对象。建议使用
    `novalidate` 来绕过默认的 HTML5 验证，因为你正在使用 Angular 进行验证。否则，`form` 将会冲突。`(ngSubmit)`
    几乎是一个事件，当 `type=submit` 的 `button` 被触摸或点击时，会触发 `onSubmit(f)` 函数。当你提交表单时，它将传递 `f`
    变量，这样你就可以在 `onSubmit` 方法中处理该对象内部的对象。
- en: 'The `form` template consists of just `<ion-list>` and `<ion-item>`. You just
    need to know how to validate each input and display the error. Let''s use the
    `Name` field as the first example. This is the `<ion-input>` for `Name`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`form` 模板仅由 `<ion-list>` 和 `<ion-item>` 组成。你只需要知道如何验证每个输入并显示错误。让我们以 `Name`
    字段作为第一个例子。这是 `Name` 的 `<ion-input>`：'
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following is the error displayed:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的错误显示如下：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To validate, you must assign `name` a local variable name. This is to refer
    to that input using `f.controls.name` in other areas. Recall that the `f` variable
    has been declared previously as the `ngForm` object. Here is a view of how the
    `ngForm` is structured:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证，你必须将 `name` 分配给一个局部变量名。这是为了在其他地方使用 `f.controls.name` 来引用该输入。回想一下，`f` 变量已经被声明为
    `ngForm` 对象。以下是 `ngForm` 的结构视图：
- en: '![](img/e37a2771-75c9-4454-a907-e70d34054853.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e37a2771-75c9-4454-a907-e70d34054853.png)'
- en: You can view this using the Chrome Developer console because the code actually
    gives this output when you submit the form.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过Chrome开发者控制台查看这一点，因为代码在提交表单时实际上会给出这个输出。
- en: 'The error message `Name is required` will be hidden when either of the following
    conditions takes place:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当以下任一条件成立时，错误信息`Name is required`将被隐藏：
- en: The form has not been submitted yet. Otherwise, people will see the error message
    right away before they even type in something. This is not a good user experience.
    To check for this, you have to use a temporary Boolean, called `isSubmitted`.
    The `f.controls.name.pristine` variable means that the input has not been modified.
    The opposite of this would be `f.controls.name.dirty`.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单尚未提交。否则，人们在输入任何内容之前就会立即看到错误信息。这不是一个好的用户体验。为了检查这一点，你必须使用一个临时的布尔值，称为`isSubmitted`。`f.controls.name.pristine`变量表示输入尚未被修改。其相反的是`f.controls.name.dirty`。
- en: The `f.controls.name.valid` variable is `true`. However, you cannot check this
    right away because, if the input is empty, the `name` object does not exist yet.
    That's why you need to check for the existence of `f.controls.name` before checking
    for the `valid` Boolean.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f.controls.name.valid`变量为`true`。然而，你不能立即检查这一点，因为如果输入为空，`name`对象尚不存在。这就是为什么在检查`valid`布尔值之前需要检查`f.controls.name`的存在。'
- en: 'There is no need to check the phone requirement; so, you just need to assign
    `name` and a model, as shown:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要检查电话要求；因此，你只需要分配`name`和一个模型，如下所示：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For the `comment` field, you need to validate using both `required` and `minlength=4`,
    as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`comment`字段，你需要使用`required`和`minlength=4`进行验证，如下所示：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You may think `required` is unnecessary because, if the length is zero, Angular
    will trigger an error flag. However, that is not true. When the user doesn't enter
    anything in the input, the input will have no length because the variable doesn't
    exist. That's why you need to check for both scenarios.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为`required`是不必要的，因为如果长度为零，Angular将触发一个错误标志。然而，这并不正确。当用户在输入框中没有输入任何内容时，输入将没有长度，因为变量不存在。这就是为什么你需要检查这两种情况。
- en: 'The error message for the `comment` field is quite interesting because it shows
    the number of characters the user needs to enter, as shown in the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`comment`字段的错误信息非常有趣，因为它显示了用户需要输入的字符数，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The main idea here is that you only want to show this `div` when the form is
    submitted and it's pristine via `f.controls.comment.pristine`. This means that
    the user has not entered anything in the form. You also want to show the message
    when the form is dirty and has errors via `f.controls.comment.errors`. If you
    inspect the console, you can see a list of many detailed errors under the `f.controls.comment.errors`
    object. In order to tell the user how many characters they have left to enter,
    you have to first check `f.controls.comment.errors.minlength` because, if that
    variable doesn't exist, there is no error or the `comment` input is empty. If
    you do not check for this, you will get a parse error later on.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的主要思想是，你只想在表单提交且通过`f.controls.comment.pristine`保持原始状态时显示这个`div`。这意味着用户在表单中未输入任何内容。你同样希望在表单被修改且有错误通过`f.controls.comment.errors`显示消息。如果你检查控制台，你可以在`f.controls.comment.errors`对象下看到许多详细的错误列表。为了告诉用户他们还剩下多少字符可以输入，你必须首先检查`f.controls.comment.errors.minlength`，因为如果该变量不存在，则没有错误或`comment`输入为空。如果你不检查这一点，你将在稍后得到解析错误。
- en: 'In your `home.ts` file, the `onSubmit` method must toggle the `isSubmitted`
    Boolean to `true`, as shown in the following code snippet:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`home.ts`文件中，`onSubmit`方法必须将`isSubmitted`布尔值切换为`true`，如下面的代码片段所示：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Then, you have to do a general check for `myForm.valid` and `myForm.value.tos`.
    You may wonder why we are checking for `tos` here instead of validating it inside
    the template. The reason is that there is no way to validate a toggle button in
    Angular since it doesn't make sense to do so as it cannot be `required`. Therefore,
    you have to do a custom validation here to make sure it's `true` in the form.
    This means that the user has checked the Agree to terms and conditions toggle.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你必须对`myForm.valid`和`myForm.value.tos`进行一般性检查。你可能想知道为什么我们在这里检查`tos`而不是在模板内进行验证。原因是由于在Angular中没有验证切换按钮的意义，因为它不能被`required`，所以你必须在自定义验证中确保它在表单中为`true`。这意味着用户已经检查了同意条款和条件的切换按钮。
- en: Refer to the W3 website, at [https://www.w3.org/TR/2011/WD-html5-20110525/the-button-element.html](https://www.w3.org/TR/2011/WD-html5-20110525/the-button-element.html)
    , for information about the default behavior of the [`button`](https://www.w3.org/TR/2011/WD-html5-20110525/the-button-element.html)
    element.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 参考W3网站，在 [https://www.w3.org/TR/2011/WD-html5-20110525/the-button-element.html](https://www.w3.org/TR/2011/WD-html5-20110525/the-button-element.html)
    ，了解 `button` 元素的默认行为。
- en: The `thankyou` page is very self-explanatory because you just parse the `formData`
    object in the template by getting the data from the `MyFormService` service.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`thankyou` 页面非常直观，因为你只需通过从 `MyFormService` 服务获取数据来在模板中解析 `formData` 对象。'
- en: See also
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Check out the following links for more information:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接以获取更多信息：
- en: For more information about `form` from the Angular 2 documentation, you can
    visit [https://angular.io/docs/ts/latest/guide/forms.html](https://angular.io/docs/ts/latest/guide/forms.html)
    and [https://angular.io/docs/ts/latest/api/forms/index/NgForm-directive.html](https://angular.io/docs/ts/latest/api/forms/index/NgForm-directive.html)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 Angular 2 文档中 `form` 的更多信息，你可以访问 [https://angular.io/docs/ts/latest/guide/forms.html](https://angular.io/docs/ts/latest/guide/forms.html)
    和 [https://angular.io/docs/ts/latest/api/forms/index/NgForm-directive.html](https://angular.io/docs/ts/latest/api/forms/index/NgForm-directive.html)。
- en: The Ionic documentation has its own page specifically for Ionic input components,
    which is at [https://ionicframework.com/docs/v2/resources/forms/](https://ionicframework.com/docs/v2/resources/forms/)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ionic 文档有一个专门针对 Ionic 输入组件的页面，位于 [https://ionicframework.com/docs/v2/resources/forms/](https://ionicframework.com/docs/v2/resources/forms/)
- en: It also has a good list of HTML5 input types that you can use for validation
    or keyboard enforcement, which you can find at [http://ionicframework.com/html5-input-types/](http://ionicframework.com/html5-input-types/)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它还列出了你可以用于验证或键盘强制的 HTML5 输入类型，你可以在 [http://ionicframework.com/html5-input-types/](http://ionicframework.com/html5-input-types/)
    找到。
- en: Creating reactive forms in Ionic
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Ionic 中创建响应式表单
- en: In the previous example, we have created a complex form with validations. If
    you notice carefully, we used angular validations inside our template file, particularly
    in `home.html`. These type of forms are called as template driven form, where
    most of the work is done on template side. This is something very similar to what
    we had in AngularJS.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们已经创建了一个具有验证的复杂表单。如果你仔细观察，我们已经在模板文件中使用了 angular 验证，特别是在 `home.html`
    中。这类表单被称为模板驱动表单，其中大部分工作都是在模板端完成的。这与我们在 AngularJS 中所做的是非常相似的。
- en: 'There is another type of form in Angular, called the reactive form. The difference
    is, in reactive forms, we used validations and other configuration inside the
    class of the component, instead of in the template. The following is the definition
    from Angular Docs:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 中还有另一种类型的表单，称为响应式表单。区别在于，在响应式表单中，我们在组件类中使用了验证和其他配置，而不是在模板中。以下是从 Angular
    文档中的定义：
- en: '"With *reactive* forms, you create a tree of Angular form control objects in
    the component class and bind them to native form control elements in the component
    template."'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: “使用 *reactive* 表单，你在组件类中创建一个 Angular 表单控件对象的树，并将它们绑定到组件模板中的原生表单控件元素。”
- en: 'We will create a registration form, which looks like the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个注册表单，其外观如下：
- en: '![](img/a027786a-3c9e-45c4-9891-82b01d23fe43.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a027786a-3c9e-45c4-9891-82b01d23fe43.png)'
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Since we are using forms, we only require a web browser to run this recipe.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用表单，我们只需要一个网络浏览器来运行这个食谱。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open Terminal (or Command Prompt) and create a new app named `ReactiveForm`
    based on `blank` template and go into the folder as follows:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端（或命令提示符）并创建一个基于 `blank` 模板的新应用，命名为 `ReactiveForm`，然后按照以下步骤进入文件夹：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open `home.html` and replace the file with following content:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `home.html` 并将其替换为以下内容：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the `home.scss` file and replace the content with the following:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `home.scss` 文件并将其内容替换为以下内容：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Open the `home.ts` file and replace the content with the following:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `home.ts` 文件并将其内容替换为以下内容：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Since, in our example, we have the registration form with the password and confirm
    password fields, we will be creating a custom validator for making sure that both
    fields have some values.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在我们的示例中，我们有一个包含密码和确认密码字段的注册表单，我们将创建一个自定义验证器以确保这两个字段都有一些值。
- en: 'Create a file named `confirmPassword.ts` in `/app` folder. Then add the following
    content inside it:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/app` 文件夹中创建一个名为 `confirmPassword.ts` 的文件。然后在其内部添加以下内容：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Make sure your `app.module.ts` has the following content:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的 `app.module.ts` 包含以下内容：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Open the Terminal and run the following command :'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并运行以下命令：
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Since this recipe uses reactive forms, let's first take a look at `home.ts`,
    which initializes and sets up our form.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个配方使用了响应式表单，让我们首先看看 `home.ts`，它初始化并设置我们的表单。
- en: 'In the `HomePage` class, we have `registerForm:FormGroup` property, which is
    the collection of `FormControl`. Each `FormControl` is bound to the native `FormControl`
    in our template. In order to create `FormGroup`, we can do something like the
    following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `HomePage` 类中，我们有 `registerForm:FormGroup` 属性，这是 `FormControl` 的集合。每个 `FormControl`
    都绑定到模板中的原生 `FormControl`。为了创建 `FormGroup`，我们可以做如下操作：
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the preceding example, we are creating a `FormGroup` named `myForm`. The
    `FormGroup` constructor takes an object as input, which is the collection of `FormControl`.
    Each key in this object refers to some native `FormControl` in the template. The
    value in the key pair is a `FormControl` object. The `FormControl` constructor
    takes the initial value and a validator or array of validators as input. The template
    will look something like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们创建了一个名为 `myForm` 的 `FormGroup`。`FormGroup` 构造函数接受一个对象作为输入，这是 `FormControl`
    的集合。这个对象中的每个键都指向模板中的某个原生 `FormControl`。键值对中的值是一个 `FormControl` 对象。`FormControl`
    构造函数接受初始值和一个验证器或验证器数组作为输入。模板看起来可能如下所示：
- en: '[PRE27]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here, `formControlName` is set to the key of `FormControl`; for example, `first`.
    `formGroup` is set to the name of the group; in this example, it is `myForm`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`formControlName` 设置为 `FormControl` 的键；例如，`first`。`formGroup` 设置为组的名称；在这个例子中，它是
    `myForm`。
- en: 'However, this method becomes complicated if we have nested `FormGroup`. To
    ease this process, Angular provides a better API via `FormBuilder`. `FormBuilder`
    is class, which allow us to create `FormGroup` via a really nice API. Take a look:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们有嵌套的 `FormGroup`，这个方法就会变得复杂。为了简化这个过程，Angular 通过 `FormBuilder` 提供了一个更好的
    API。`FormBuilder` 是一个类，它允许我们通过一个非常好的 API 创建 `FormGroup`。看看这个例子：
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`this.fb` is an instance of `FormBuilder` and has a `group` method to create
    `FormGroup`. It takes an object with a key-value pair. The key is used with `formControlName`
    to bind to the native element in the template and the value is an array with the
    initial value of the native element and a list of validators. For example, `username`
    has `required` and `minLength(10)` validators; similarly, other fields have validations
    too. You may notice that there is no `FormControl` constructor here. This is the
    abstraction provided by `FormBuilder`.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.fb` 是 `FormBuilder` 的一个实例，并且有一个 `group` 方法来创建 `FormGroup`。它接受一个包含键值对的对象。键与
    `formControlName` 一起使用，以绑定到模板中的原生元素，而值是一个数组，包含原生元素的初始值和验证器列表。例如，`username` 有 `required`
    和 `minLength(10)` 验证器；同样，其他字段也有验证。你可能注意到这里没有 `FormControl` 构造函数。这是 `FormBuilder`
    提供的抽象。'
- en: You can also pass group-level validator as a second input to the `group` method
    of `FormBuilder`. In the preceding example, we are using a custom `confirmPassword`
    validator with inputs `pass` and `repass`. These are keys inside the first object
    and refer to input fields; the validator makes sure that they are equal.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将组级验证器作为第二个输入传递给 `FormBuilder` 的 `group` 方法。在先前的例子中，我们使用了一个自定义的 `confirmPassword`
    验证器，输入为 `pass` 和 `repass`。这些是第一个对象中的键，并指向输入字段；验证器确保它们相等。
- en: 'Our custom validator is created in the `confirmPassword.ts` file, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的自定义验证器是在 `confirmPassword.ts` 文件中创建的，如下所示：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: It is just a function that takes two string type arguments. These are the names
    of the two fields that we want to compare. It compares the values in both fields
    and sets the validation on the `repass` (a.k.a confirm password) field accordingly.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个只接受两个字符串类型参数的函数。这两个参数是我们想要比较的两个字段的名称。它比较两个字段中的值，并根据需要设置 `repass`（即确认密码）字段的验证。
- en: 'In `home.html`, we have form element which looks like following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `home.html` 中，我们有如下外观的表单元素：
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`[formGroup]` is set to `registerForm`, and when the user clicks on the submit
    button, it fires the `onSubmit` method.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`[formGroup]` 设置为 `registerForm`，当用户点击提交按钮时，它会触发 `onSubmit` 方法。'
- en: 'Each input is configured as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 每个输入都配置如下：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We also show error messages, since we use validators in our form. Here is how
    we show validation error messages. We check whether the field is `dirty` or `invalid`
    and then show the appropriate error. `formName.controls[''controlName'']` is the
    syntax to get control. Here, `formName` is the name of `formGroup` and `controlName`
    is the name of the control:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还展示了错误消息，因为我们使用了表单验证器。以下是显示验证错误消息的方式。我们检查字段是否为 `dirty` 或 `invalid`，然后显示相应的错误。`formName.controls['controlName']`
    是获取控制器的语法。在这里，`formName` 是 `formGroup` 的名称，而 `controlName` 是控制器的名称：
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Errors look something like this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 错误看起来像这样：
- en: '![](img/ab4bd704-40d7-4e6a-88b0-886abfbd5fd3.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab4bd704-40d7-4e6a-88b0-886abfbd5fd3.png)'
- en: 'At last, we have Register button, which has following code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有了注册按钮，其代码如下：
- en: '[PRE33]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We disable the button when the form is invalid. When the user clicks on it,
    it calls the `onSubmit` method and we show an alert box with the user''s input,
    as shown in the following code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单无效时，我们禁用按钮。当用户点击它时，它会调用 `onSubmit` 方法，并显示一个包含用户输入的警告框，如下面的代码所示：
- en: '[PRE34]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The alert message looks like the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 警告消息看起来如下所示：
- en: '![](img/e8a04494-3f7f-4eec-bccc-f01d9f9fcb4b.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8a04494-3f7f-4eec-bccc-f01d9f9fcb4b.png)'
- en: See also
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: For further reading about reactive forms, go to Angular's Guide on reactive
    forms at [https://angular.io/guide/reactive-forms](https://angular.io/guide/reactive-forms)
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想要了解更多关于响应式表单的信息，请访问 Angular 的响应式表单指南，链接为 [https://angular.io/guide/reactive-forms](https://angular.io/guide/reactive-forms)
- en: There is an excellent article written by Todd Moto on reactive forms at [https://toddmotto.com/angular-2-forms-reactive](https://toddmotto.com/angular-2-forms-reactive)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托德·莫托（Todd Moto）撰写了一篇关于响应式表单的优秀文章，链接为 [https://toddmotto.com/angular-2-forms-reactive](https://toddmotto.com/angular-2-forms-reactive)
- en: Retrieving data via a mocked API using a static JSON file
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过使用静态 JSON 文件模拟 API 获取数据
- en: As a frontend and app developer, you are often working with a team where someone
    else is responsible for the backend APIs. However, it's not always possible to
    have the backend available when you are developing the frontend. You have to simulate
    the backend in scenarios where the final backend APIs are not ready.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 作为前端和应用程序开发者，你通常在一个团队中工作，其中另一个人负责后端 API。然而，在开发前端时，并不总是有可能有后端可用。在最终后端 API 准备好的情况下，你必须模拟后端。
- en: 'In this recipe, you will learn how to call a REST API using the `HttpClient`
    service. The API endpoint will be just a static JSON located on your local machine.
    You will also learn how to leverage placeholder images to meet design requirements.
    The app will show a list of image feeds and a description, as shown in the following
    screenshot:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何使用 `HttpClient` 服务调用 REST API。API 端点将只是位于你本地机器上的静态 JSON。你还将学习如何利用占位符图像来满足设计要求。应用将显示图像源列表和描述，如下面的截图所示：
- en: '![](img/85cbfe58-7f0c-4ca2-96a8-78bb23f08494.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85cbfe58-7f0c-4ca2-96a8-78bb23f08494.png)'
- en: Getting ready
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This app example would work either in a browser or on a physical device. However,
    the fake backend server must be running on your local computer.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用示例可以在浏览器或物理设备上运行。然而，模拟的后端服务器必须在你的本地计算机上运行。
- en: How to do it...
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: First, let's quickly create the fake backend server. You must install `http-server`
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们快速创建一个模拟的后端服务器。你必须安装 `http-server`
- en: 'for this:'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于以下内容：
- en: '[PRE35]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a folder to store your `.json` file. Let''s call it `MockRest`, as shown:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文件夹来存储你的 `.json` 文件。让我们称它为 `MockRest`，如下所示：
- en: '[PRE36]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Create the `test.json` file and fill in the following content for the REST
    response:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `test.json` 文件，并填写以下内容作为 REST 响应：
- en: '[PRE37]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Basically, whenever you send a REST request, you should receive the preceding
    content as the response. As your backend developer updates the REST response,
    you can always change the content of the `test.json` file accordingly.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，每次你发送 REST 请求时，你应该收到前面的内容作为响应。随着你的后端开发者更新 REST 响应，你总是可以相应地更改 `test.json`
    文件的内容。
- en: 'Start your backend server by calling `http-server` from the Terminal in the
    `MockRest` folder, as shown:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在 `MockRest` 文件夹中的终端调用 `http-server` 来启动你的后端服务器，如下所示：
- en: '[PRE38]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Go to your browser and visit `http://localhost:8080/test.json` to verify that
    you can see the JSON content. If not, you probably have a port conflict with another
    web server. You need to ensure that there is no other application using port `8080`.
    After completing your backend, open another Terminal window, create a new `MyRestBackend`
    app using the `blank` template, and go to the `MyRestBackend` folder, as shown:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 前往您的浏览器并访问`http://localhost:8080/test.json`以验证您是否可以看到JSON内容。如果不行，您可能与其他Web服务器存在端口冲突。您需要确保没有其他应用程序正在使用端口`8080`。在完成您的后端后，打开另一个终端窗口，使用`blank`模板创建一个新的`MyRestBackend`应用程序，并进入`MyRestBackend`文件夹，如下所示：
- en: '[PRE39]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: You must not stop the backend server or create an Ionic project inside the `MockRest`
    folder. They are two independent project folders
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您不得停止后端服务器或在`MockRest`文件夹内创建Ionic项目。它们是两个独立的项目文件夹
- en: 'Open the `home.html` file and replace the content with the following code:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`home.html`文件，并用以下代码替换内容：
- en: '[PRE40]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This example uses free photos from [https://source.unsplash.com/](https://source.unsplash.com/)
    because you can easily query to get random photos that meet your need.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用来自[https://source.unsplash.com/](https://source.unsplash.com/)的免费照片，因为您可以轻松查询以获取满足您需求的随机照片。
- en: 'Open `home.ts` and edit it with the following code:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`home.ts`并使用以下代码进行编辑：
- en: '[PRE41]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: You have not created the `QuoteService` service yet. However, you probably know
    that this service will call the fake backend server to get the JSON content using
    the `getQuotes()` method.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您尚未创建`QuoteService`服务。然而，您可能知道这个服务将使用`getQuotes()`方法调用模拟后端服务器以获取JSON内容。
- en: 'Do a small modification of the stylesheet `home.scss`, as follows:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对样式表`home.scss`进行以下小修改：
- en: '[PRE42]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create the `./src/services` folder with the following command:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建`./src/services`文件夹：
- en: '[PRE43]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create the `quote.ts` file in the `services` folder and copy the following
    code:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`services`文件夹中创建`quote.ts`文件，并复制以下代码：
- en: '[PRE44]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Open and edit `./src/app/app.module.ts` to declare `QuoteService`, as shown:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑`./src/app/app.module.ts`以声明`QuoteService`，如下所示：
- en: '[PRE45]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Go to your Terminal and run the app, as illustrated:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您的终端并运行应用程序，如图所示：
- en: '[PRE46]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You will note that the page is empty and the Console shows the following error:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到页面为空，控制台显示以下错误：
- en: '![](img/470ac180-d007-45a7-8617-d5770614fb03.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/470ac180-d007-45a7-8617-d5770614fb03.png)'
- en: 'This means that your browser (in this case, Chrome) does not allow calling
    REST API from `http://localhost:8100` to `http://localhost:8080`. You need to
    install the Allow-**Control-Allow-Origin** (**CORS**) plugin, such as [https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en](https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en),
    for Chrome. After that, turn on CORS, as shown in the following screenshot:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您的浏览器（在这种情况下，Chrome）不允许从`http://localhost:8100`调用REST API到`http://localhost:8080`。您需要安装允许控制允许源（**CORS**）插件，例如[https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en](https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en)，用于Chrome。之后，打开CORS，如图所示：
- en: '![](img/cf08655c-c9d4-4922-88ad-9ee0bddf9bc4.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cf08655c-c9d4-4922-88ad-9ee0bddf9bc4.png)'
- en: Refresh your browser to see the updated app.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新您的浏览器以查看更新后的应用程序。
- en: How it works...
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Your fake backend simply returns any file in the current `MockRest` folder.
    As you get more sample responses from the backend developer, you can copy them
    into this folder to provide additional backend endpoints.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您的模拟后端简单地返回当前`MockRest`文件夹中的任何文件。随着您从后端开发者那里获得更多样本响应，您可以将其复制到该文件夹中，以提供额外的后端端点。
- en: This section does not provide examples of how to handle POST and complex scenarios
    where the responses depend on request parameters. You may want to keep the code
    to handle temporary cases as simple as possible since they are not production
    code. The recommendation is to return the same content for each POST request as
    well.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 本节不提供如何处理POST请求和复杂场景的示例，其中响应取决于请求参数。由于它们不是生产代码，您可能希望将处理临时情况的代码保持尽可能简单。建议为每个POST请求返回相同的内容。
- en: 'Let''s take a look at `quote.ts`, because it''s the main place where the `Http`
    request is made. First, you need to import `Injectable` and `Http`, which you
    can do as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`quote.ts`文件，因为它是发起`Http`请求的主要地方。首先，您需要导入`Injectable`和`Http`，您可以按照以下方式操作：
- en: '[PRE47]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The `@Injectable` decorator is used to allow other pages and components to
    use `QuoteService` as a dependency. The `Http` service (or class) is provided
    by Angular (not Ionic) and this is similar to the `$http` provider in Angular
    1\. However, instead of returning a promise, `Http` will return an **observable**
    object so that you can *subscribe* to it. The `getQuotes()` method, shown as follows,
    is the most important part of this file:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Injectable` 装饰器用于允许其他页面和组件将 `QuoteService` 作为依赖项使用。`Http` 服务（或类）由 Angular（而非
    Ionic）提供，这与 Angular 1 中的 `$http` 提供者类似。然而，`Http` 将返回一个 **可观察** 对象，以便您可以 *订阅* 它。以下所示
    `getQuotes()` 方法是此文件最重要的部分：'
- en: '[PRE48]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The `this.http` object must be injected from the constructor. Then, it will
    trigger GET via `this.http.get()`, just like the `$http` provider. However, there
    is no `.then()` function but in Angular 2; you have to `subscribe` to the object.
    A new feature of ES6 is the arrow function, as you see via `res => {}`. This is
    similar to the lambda function in other languages (for example, Python). There
    is no need to declare the name of the function and you don't have to type function
    each time. In addition, it automatically passes the parameter (`res` in this case)
    and the `this` context inside the function.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.http` 对象必须从构造函数中注入。然后，它将通过 `this.http.get()` 触发 GET 请求，就像 `$http` 提供者一样。然而，在
    Angular 2 中没有 `.then()` 函数；您必须 `订阅` 对象。ES6 的新特性是箭头函数，正如您通过 `res => {}` 看到的。这与其他语言的
    lambda 函数类似（例如 Python）。您不需要声明函数的名称，也不必每次都键入 `function`。此外，它自动传递参数（在这种情况下是 `res`）和函数内部的
    `this` 上下文。'
- en: You can read more about the arrow function from TypeScript documentation at
    [https://www.typescriptlang.org/docs/handbook/functions.html](https://www.typescriptlang.org/docs/handbook/functions.html).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 TypeScript 文档中了解更多关于箭头函数的信息，请访问 [https://www.typescriptlang.org/docs/handbook/functions.html](https://www.typescriptlang.org/docs/handbook/functions.html)。
- en: 'The REST response from your fake backend will be assigned to `this.data` of
    the `QuoteService` service, as shown:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您的模拟后端的 REST 响应将被分配给 `QuoteService` 服务的 `this.data`，如下所示：
- en: '[PRE49]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If you see the browser console, it will look similar to the following screenshot:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看浏览器控制台，它将类似于以下截图：
- en: '![](img/7616ddb3-4526-463d-a982-3d15804eaf8b.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7616ddb3-4526-463d-a982-3d15804eaf8b.png)'
- en: 'Another nice trick in the `home.html` template is to display a gray placeholder
    for the photos instead of pushing down the content when the photos are downloaded
    and rendered, as shown in the following code snippet:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `home.html` 模板中，另一个不错的技巧是在图片下载和渲染时显示灰色占位符，而不是将内容向下推，如下面的代码片段所示：
- en: '[PRE50]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The following screenshot shows a quick example before the photos are loaded:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在照片加载之前的快速示例：
- en: '![](img/fe50cf51-c15f-4370-9f36-8cdfd53829f6.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe50cf51-c15f-4370-9f36-8cdfd53829f6.png)'
- en: In order to tell the `<img>` tag to have an exact size, you have to do a height
    calculation using `[height]="myCard.clientWidth * 390 / 600"`. This is because
    the photo is 600 x 390\. The `myCard` object is a local object created from `ion-card`.
    This `myCard` object will have access to all properties of the `ion-card` DOM,
    including the width via `clientWidth`. You have probably noted that this is just
    pure JavaScript and has nothing to do with Ionic or Angular itself.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 `<img>` 标签具有确切的大小，您必须使用 `[height]="myCard.clientWidth * 390 / 600"` 进行高度计算。这是因为照片的大小是
    600 x 390。`myCard` 对象是从 `ion-card` 创建的本地对象。这个 `myCard` 对象将能够访问 `ion-card` DOM
    的所有属性，包括通过 `clientWidth` 的宽度。您可能已经注意到，这完全是纯 JavaScript，与 Ionic 或 Angular 本身无关。
- en: See also
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: For more information about the Angular `Http` provider, you can visit the official
    documentation at [https://angular.io/docs/ts/latest/api/http/index/HttpModule-class.html](https://angular.io/docs/ts/latest/api/http/index/HttpModule-class.html).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Angular `Http` 提供者的更多信息，您可以访问官方文档 [https://angular.io/docs/ts/latest/api/http/index/HttpModule-class.html](https://angular.io/docs/ts/latest/api/http/index/HttpModule-class.html)。
- en: Integrating with Stripe for online payment
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Stripe 集成进行在线支付
- en: In this section, you will learn how to integrate with a real backend service
    for the payment process. Earning revenue is an important aspect of creating an
    app. While there are many other methods of collecting payment, Stripe is a common
    payment system and can integrate very well with Ionic. In addition, there is no
    need to provide a high level of security and compliance (that is, PCI) since you
    will not be storing the credit card information.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何与真实的后端服务集成以进行支付流程。赚取收入是创建应用的重要方面。虽然有许多其他收集支付的方法，但Stripe是一个常见的支付系统，并且可以很好地与Ionic集成。此外，您不需要提供高级别的安全性和合规性（即PCI），因为您不会存储信用卡信息。
- en: 'Your app will not process via a real payment method because you can use a public
    test key from Stripe. The app will ask for a few fields to create a token. Observe
    the following screenshot of the app:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用不会通过真实支付方式处理，因为您可以使用Stripe的公共测试密钥。应用将要求输入一些字段以创建令牌。观察以下应用截图：
- en: '![](img/063bcdc2-b4c8-4870-97e5-74689d0dc6f8.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/063bcdc2-b4c8-4870-97e5-74689d0dc6f8.png)'
- en: 'If you touch the Pay button, it will take you to the next screen where you
    will get the payment token, as shown in the following screenshot:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击支付按钮，它将带您进入下一个屏幕，在那里您将获得支付令牌，如下面的截图所示：
- en: '![](img/5e7e6a47-89b8-4b7e-95e1-a9041758e50a.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5e7e6a47-89b8-4b7e-95e1-a9041758e50a.png)'
- en: Actually, there are additional steps for your backend to call Stripe to authorize
    and process the transaction. However, it's not within the scope of this section.
    The Stripe document has a good tutorial page on Node.js at [https://stripe.com/docs/api/node#authentication](https://stripe.com/docs/api/node#authentication).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您的后端调用Stripe进行授权和处理交易的步骤还有额外的步骤。然而，这不在本节范围内。Stripe文档在Node.js方面有一个很好的教程页面，网址为[https://stripe.com/docs/api/node#authentication](https://stripe.com/docs/api/node#authentication)。
- en: Getting ready
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: There is no need to test in a physical device because Ionic and Stripe will
    work just fine in the web browser.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要在物理设备上进行测试，因为Ionic和Stripe在网页浏览器中运行得很好。
- en: How to do it...
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: If you don't have a Stripe account, you need to register on [https://stripe.com.](https://stripe.com)
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有Stripe账户，您需要在[https://stripe.com.](https://stripe.com)上注册。
- en: Log in and go to [https://dashboard.stripe.com/account/apikeys](https://dashboard.stripe.com/account/apikeys).
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录并转到[https://dashboard.stripe.com/account/apikeys](https://dashboard.stripe.com/account/apikeys)。
- en: 'Copy your Publishable Key, shown as follows, somewhere because you need to
    use it for your JavaScript code later:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下显示的发布密钥复制到某个地方，因为您稍后需要将其用于JavaScript代码：
- en: '![](img/359cbf19-91ae-493b-982f-a441c8b9d2b5.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/359cbf19-91ae-493b-982f-a441c8b9d2b5.png)'
- en: 'Now, go back to the Terminal and create a new `StripePayment` app using the
    `blank` template, as follows, and go into the `StripePayment` folder:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到终端，使用`blank`模板创建一个新的`StripePayment`应用，如下所示，并进入`StripePayment`文件夹：
- en: '[PRE51]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Open the `./src/index.html` file and insert the line shown somewhere in the
    `<body>` tab as follows:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/index.html`文件，并在`<body>`标签中插入以下所示行：
- en: '[PRE52]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This is to load the `Stripe` object globally in your app. This is not the recommended
    method with Angular because anything that is used within a component must be imported
    via the `import` instruction. However, at the time of writing this book, angular-stripe
    is unavailable for Angular. So, there is no way to do this properly. The preceding
    method will work just fine.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了在您的应用中全局加载`Stripe`对象。这不是Angular推荐的方法，因为组件内部使用的任何内容都必须通过`import`指令导入。然而，在撰写本书时，angular-stripe对Angular不可用。因此，没有正确执行此操作的方法。前面的方法将完全正常工作。
- en: 'Open the `./src/pages/home/home.html` file and modify the content with the
    following code:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/pages/home/home.html`文件，并使用以下代码修改内容：
- en: '[PRE53]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Stripe only needs the credit card number, CVC, and expiration to create a token
    for charging. The customer name and address are optional; so, you don't need to
    include them here.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Stripe只需要信用卡号、CVC和到期日期来创建用于收费的令牌。客户姓名和地址是可选的；因此，您不需要在此处包含它们。
- en: 'Then, replace the content of `./src/pages/home/home.ts` with the following
    code:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将`./src/pages/home/home.ts`的内容替换为以下代码：
- en: '[PRE54]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: You need to change your `Test Publishable Key` here by replacing `YOUR STRIPE
    PUBLIC KEY HERE` in `Stripe` Constructor with your own key that you copied earlier.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在此处更改您的`Test Publishable Key`，将`Stripe`构造函数中的`YOUR STRIPE PUBLIC KEY HERE`替换为您之前复制的自己的密钥。
- en: 'Edit `./src/pages/home/home.scss` with the following code:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码编辑`./src/pages/home/home.scss`：
- en: '[PRE55]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Create the `thankyou` page that shows the token ID by making a new folder,
    called `./src/pages/thankyou`, as shown:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建一个名为 `./src/pages/thankyou` 的新文件夹来创建显示令牌 ID 的 `thankyou` 页面，如图所示：
- en: '[PRE56]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Create the `thankyou.html` file in the `thankyou` folder and copy the following
    code:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `thankyou` 文件夹中创建 `thankyou.html` 文件并复制以下代码：
- en: '[PRE57]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: In reality, there is no need to show the token ID to the user. This is just
    an example to get the token ID to charge.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实中，没有必要向用户显示令牌 ID。这只是一个示例，用于获取令牌 ID 以进行收费。
- en: 'Create the `thankyou.ts` file in the `thankyou` folder and copy the following
    code:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `thankyou` 文件夹中创建 `thankyou.ts` 文件并复制以下代码：
- en: '[PRE58]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Create the `thankyou.scss` file to modify the theme using the following code:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `thankyou.scss` 文件，使用以下代码修改主题：
- en: '[PRE59]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Open and edit `./src/app/app.module.ts` to declare `ThankyouPage` as follows:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑 `./src/app/app.module.ts` 声明 `ThankyouPage` 如下：
- en: '[PRE60]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Go to your Terminal and run the app:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往你的终端并运行应用：
- en: '[PRE61]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: For the purpose of testing, you can use `4242424242424242` as the credit card
    number, `123` as `cvc`, and `12/2017` as the expiration.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试目的，你可以使用 `4242424242424242` 作为信用卡号，`123` 作为 `cvc`，以及 `12/2017` 作为到期日期。
- en: How it works...
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This is the Stripe charging process:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Stripe 收费流程：
- en: The user fills in the payment form and clicks on the Submit button.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户填写支付表单并点击提交按钮。
- en: The frontend (your Ionic app) will call API to Stripe using the `Stripe` object
    and send along all the payment information.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前端（你的 Ionic 应用）将使用 `Stripe` 对象调用 API 并发送所有支付信息。
- en: Stripe will return a token ID, which is basically a way to confirm that everything
    is correct and you can charge the card now.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Stripe 将返回一个令牌 ID，这基本上是一种确认一切正确并且你现在可以收费的方式。
- en: The frontend will use the token ID to send to its backend (without the credit
    card information) to authorize the charge.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前端将使用令牌 ID 发送到其后端（不包含信用卡信息）以授权收费。
- en: The backend will call another Stripe API to say *I'm going to charge now*. Stripe
    will return the `success` event to the backend at this point.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 后端将调用另一个 Stripe API 来表示“我现在要收费”。此时，Stripe 将向后端返回 `success` 事件。
- en: The backend will then return the `success` event to the frontend.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，后端将 `success` 事件返回到前端。
- en: The frontend should render a new page, such as the `thankyou` page.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前端应该渲染一个新页面，例如 `thankyou` 页面。
- en: As discussed previously, this chapter will not cover the backend portion of
    this app because it doesn't focus on Ionic. You can build the backend using any
    language, such as Node.js, PHP, or Python.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，本章不会涵盖此应用的后端部分，因为它不关注 Ionic。你可以使用任何语言构建后端，例如 Node.js、PHP 或 Python。
- en: 'Let''s take a look at `home.ts` because the majority of Stripe API processing
    is located there. First, you need to do a `declare`, as illustrated, because `Stripe`
    is a global object that was included in the `index.html`:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `home.ts`，因为 Stripe API 处理的大部分内容都位于此处。首先，你需要进行一个 `declare`，如图所示，因为 `Stripe`
    是一个全局对象，它被包含在 `index.html` 中：
- en: '[PRE62]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: If you don't do a `declare`, the app will still run but you will get an error
    from TypeScript.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有进行 `declare`，应用仍然可以运行，但你将收到 TypeScript 的错误。
- en: 'We are using Stripe Elements, which is pre-built set of UI Elements for payment.
    When our `home.ts` page is loaded, we initialize our Payment form using `ngOnInit`
    LikeCycle hook. Take a look at following code, inside `ngOnInt`:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用 Stripe Elements，这是一个预构建的支付 UI 元素集。当我们的 `home.ts` 页面加载时，我们使用 `ngOnInit`
    LikeCycle 钩子初始化我们的支付表单。看看以下代码，在 `ngOnInit` 中：
- en: '[PRE63]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: We are creating a Stripe element card with a given style and then mounting that
    card to HTML element inside template using `this.card.mount`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个具有给定样式的 Stripe 元素卡，然后使用 `this.card.mount` 将该卡挂载到模板内的 HTML 元素上。
- en: 'If you take a look at `home.html`, you will see something like this:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看 `home.html`，你会看到类似以下的内容：
- en: '[PRE64]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: We created a `div` in `home.html` with `#cardElement` local variable, and in
    `home.ts` we used `@ViewChild` decorator to get hold of it, and then mounted the
    `Stripe Element` UI on it. Mounting means creating an input field for card number,
    date of expiry, and CVV. `Stripe Element` also comes with its own validations
    and error messages.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `home.html` 中创建了一个 `div`，并使用 `#cardElement` 本地变量，然后在 `home.ts` 中使用 `@ViewChild`
    装饰器获取它，并将其上的 `Stripe Element` UI 挂载。挂载意味着创建用于卡号、到期日期和 CVV 的输入字段。`Stripe Element`
    还自带其自身的验证和错误信息。
- en: 'When the user submits the form, it will trigger the following method:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提交表单时，将触发以下方法：
- en: '[PRE65]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'When you call `Stripe.card.createToken`, the Stripe object will trigger an
    API call in the background to [https://stripe.com/](https://stripe.com/) with
    the information filled by the user via form. This functionality is accomplished
    by the following code in your `home.html`:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用`Stripe.card.createToken`时，Stripe对象将在后台触发一个API调用到[https://stripe.com/](https://stripe.com/)，该调用包含用户通过表单填写的信息。这个功能是通过你在`home.html`中的以下代码实现的：
- en: '[PRE66]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Once Stripe returns your token ID, it will call the `this.stripeResponseHandler(response)`
    function:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Stripe返回你的令牌ID，它将调用`this.stripeResponseHandler(response)`函数：
- en: '[PRE67]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The `response.token.id` will have your token ID from Stripe. Otherwise, you
    can handle the error using `response.error.message`. In this example, since it
    only passes the token ID to the next page, you can simply send it as a parameter
    `{token: this.token}`:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`response.token.id`将包含来自Stripe的令牌ID。否则，你可以使用`response.error.message`来处理错误。在这个例子中，因为它只将令牌ID传递到下一页，所以你可以简单地作为参数发送它：`{token:
    this.token}`：'
- en: '[PRE68]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'In your `thankyou.ts`, you can access the parameter `token` using the following
    code:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`thankyou.ts`文件中，你可以使用以下代码访问参数`token`：
- en: '[PRE69]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: See also
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见：
- en: To understand more about Stripe API, you can check out the official documentation
    at [https://stripe.com/docs/stripe.js](https://stripe.com/docs/stripe.js)
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多的Stripe API信息，你可以查看官方文档[https://stripe.com/docs/stripe.js](https://stripe.com/docs/stripe.js)。
- en: To know more about Strip elements, you can take a look at [https://stripe.com/elements](https://stripe.com/elements)
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于Stripe元素的信息，你可以查看[https://stripe.com/elements](https://stripe.com/elements)。
- en: There are more examples from other languages that you can experiment with at
    [https://stripe.com/docs/examples](https://stripe.com/docs/examples)
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在[https://stripe.com/docs/examples](https://stripe.com/docs/examples)找到更多其他语言的示例进行实验。
