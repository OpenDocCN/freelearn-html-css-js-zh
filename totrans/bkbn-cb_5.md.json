["```js\n    object1 = {};\n    ```", "```js\n    _.extend(object1, Backbone.Events);\n    ```", "```js\n    var hello = function(msg) {\n      alert(\"Hello\"+ msg);     \n    }\n    ```", "```js\n    object1.on(\"handshake\", hello);\n    ```", "```js\n    object1.once(\"handshake\", hello);\n    ```", "```js\n    object1.trigger(\"handshake\", \"world!\");\n    ```", "```js\nobject1.off(\"handshake\", hello);\n```", "```js\nobject1.off(\"handshake\");\n```", "```js\nobject1.off(null, hello);\n```", "```js\nobject1.off();\n```", "```js\nobject2.listenTo(object1, 'handshake', object2.hello);\n```", "```js\nobject2.stopListening(object1);\n```", "```js\nobject2.stopListening();\n```", "```js\n      var model = new Backbone.Model({\n        firstName: 'John',\n        lastName: 'Doe',\n        age: 20,\n      });\n    ```", "```js\n      model.on('change', function(model) {\n\n      }\n    ```", "```js\n        model.hasChanged(\"age\"); // true\n        model.hasChanged(\"firstName\"); // false\n    ```", "```js\n        model.changedAttributes(); // Object {age: 21}\n    ```", "```js\n        model.previous('age'); // 20\n    ```", "```js\n        model.previousAttributes();\n          // Object {firstName: \"John\", lastName: \"Doe\", age: 20}\n    ```", "```js\n        model.set('age', 21);\n    ```", "```js\nmodel.set('age', 22, {silent: true});\n```", "```js\nmodel.set({ age: 25 }, {silent: true});\n```", "```js\n      var InvoiceItemModel = Backbone.Model.extend({\n\n      });\n    ```", "```js\n      var InvoiceItemView = Backbone.View.extend({\n\n        // HTML element name, where to render a view.\n        el: 'body',\n\n        // Render view.\n        render: function() {\n          var html = 'Description: ' + \n            this.model.get('description') + '. ' +\n            'Price: ' + this.model.get('price') + '. ' +\n            'Quantity: ' + this.model.get('quantity') + '.';\n          // Set html for the view element using jQuery.\n          $(this.el).html(html);\n        }\n      });\n    ```", "```js\n        initialize: function() {\n          this.listenTo(this.model, 'change', this.render, this);\n        }\n    ```", "```js\n        var invoiceItemModel = new InvoiceItemModel({\n          description: 'Farmer Figure',\n          price: 8,\n          quantity: 1\n        });\n    ```", "```js\n        var invoiceItemView = new InvoiceItemView({\n\n          // Pass model as a parameter to a view.\n          model: invoiceItemModel\n        });\n    ```", "```js\n        invoiceItemView.render();\n    ```", "```js\n    window.invoiceItemModel = invoiceItemModel;\n    ```", "```js\n      var InvoiceItemModel = Backbone.Model.extend({\n\n      });\n\n      var InvoiceItemCollection = Backbone.Collection.extend({\n        model: InvoiceItemModel\n      });\n    ```", "```js\n      // Define new view to render a model.\n      var InvoiceItemView = Backbone.View.extend({\n\n        // Define element tag name.\n        tagName: 'tr',\n\n        // Render view.\n        render: function() {\n\n          // Add cells to the table row.\n          $(this.el).html(_.map([\n            this.model.get('quantity'),\n            this.model.get('description'),\n            this.model.get('price'), this.model.calculateAmount(),\n          ], function(val, key){\n            return '<td>' + val + '</td>'\n          }));\n\n          return this;\n        }\n      });\n    ```", "```js\n        initialize: function() {\n          this.listenTo(this.model, 'destroy', this.destroy, this);\n        }\n    ```", "```js\n        destroy: function() {\n          this.remove();\n        }\n    ```", "```js\n      // Define new view to render a collection.\n      var InvoiceItemListView = Backbone.View.extend({\n\n        // Define element tag name.\n        tagName: 'table',\n\n        // Define element class name.\n        className: 'invoice-item-view',\n\n        // Render view.\n        render: function() {\n\n          $(this.el).empty();\n\n          // Append table with a table header.\n          $(this.el).append($('<tr></tr>').html(\n            _.map(['Quantity', 'Description', 'Price', 'Total'], \n              function(val, key){\n                return '<th>' + val + '</th>'\n              }\n            )\n          ));\n\n          // Append table  with a row.\n          _.each(this.collection.models, function(model, key) {\n            this.append(model);\n          }, this);\n\n          return this;\n        },\n\n        // Add invoice item row to the table.\n        append: function(model) {\n          $(this.el).append(\n            new InvoiceItemView({ model: model }).render().el\n          );\n        }\n      });\n    ```", "```js\n        initialize: function() {\n          this.listenTo(\n            this.collection, 'add', this.append, this\n          );\n        },\n    ```", "```js\n      var InvoiceItemListControlsView = Backbone.View.extend({\n        render: function() {\n          var html = \n            '<br><input id=\"add\" type=\"button\"' value=\"Add\" id>' +\n            ' <input id=\"remove\" type=\"button\" value=\"Remove\">';\n\n          $(this.el).html(html);\n\n          return this;\n        },\n\n        // Handle HTML events.\n        events: {\n          'click #add': 'addNewInvoiceItem',\n          'click #remove': 'removeInvoiceItem',\n        },\n\n        // Add button handler.\n        addNewInvoiceItem: function() {\n          var description = prompt('Enter item description', '');\n          var price = prompt('Enter item price', '0');\n          var quantity = prompt('Enter item quantity', '1');\n\n          this.collection.add([{\n            description: description,\n            price: price,\n            quantity: quantity\n          }]);\n        },\n\n        // Remove button handler.\n        removeInvoiceItem: function() {\n          var position =\n            prompt('Enter position of item to remove', '');\n\n          model = this.collection.at(position);\n          model.destroy();\n        }\n      }); \n    ```", "```js\n      var InvoiceItemListPageView = Backbone.View.extend({\n\n        // Render whole page view.\n        render: function() {\n          $(this.el).html(new InvoiceItemListView({\n            collection: this.collection\n          }).render().el);\n\n          $(this.el).append(new InvoiceItemListControlsView({\n            collection: this.collection\n          }).render().el);\n        }\n      });\n    ```", "```js\n    var invoiceItemCollection = new InvoiceItemCollection([\n      { description: 'Wooden Toy House', price: 22, quantity: 3 },\n      { description: 'Farm Animal Set', price: 17, quantity: 1 }\n    ]);\n    ```", "```js\n        new InvoiceItemListPageView({\n          collection: invoiceItemCollection,\n          el: 'body'\n        }).render();\n    ```", "```js\n      var InvoiceItemModel = Backbone.Model.extend({\n\n      });\n    ```", "```js\n      var InvoiceItemFormView = Backbone.View.extend({\n\n        // Define class name of view element.\n        className: 'invoice-item-form-view',\n      });\n    ```", "```js\n        bindings: {\n          '#description': 'description',\n          '#price': 'price',\n          '#quantity': 'quantity'\n        }\n    ```", "```js\n        bindings: {\n          '#description': { observe: 'description' },\n          '#price': { observe: 'price' },\n          '#quantity': { observe: 'quantity' }\n        }\n    ```", "```js\n        render: function() {\n          var html = '<label>Description:</label>' + \n            '<input type=\"text\" id=\"description\"></input><br>' +\n            '<label>Price:</label>' +\n            '<input type=\"text\" id=\"price\"></input><br>' +\n            '<label>Quantity:</label>' +\n            '<input type=\"text\" id=\"quantity\"></input><br>';\n\n          // Set html for the view element using jQuery.\n          $(this.el).html(html);\n\n          // Here binding occurs.\n          this.stickit();\n\n          return this;\n        }\n    ```", "```js\n      var InvoiceItemView = Backbone.View.extend({\n\n        // Define class name of view element.\n        className: 'invoice-item-view',\n\n        // Bind HTML elements to the view model.\n        bindings: {\n          '#description': 'description',\n          '#price': 'price',\n          '#quantity': 'quantity'\n        },\n\n        // Render view.\n        render: function() {\n          var html = 'Description:' +\n            '<span id=\"description\"></span>, ' +\n            'Price:  <span id=\"price\"></span>, ' +\n            'Quantity:  <span id=\"quantity\"></span>.';\n\n          // Set html for the view element using jQuery.\n          $(this.el).html(html);\n\n          // Here binding occurs.\n          this.stickit();\n\n          return this;\n        },\n      });\n    ```", "```js\n        var invoiceItemModel = new InvoiceItemModel({\n          description: 'Farmer Figure',\n          price: 8,\n          quantity: 1\n        });\n    ```", "```js\n        $('body').append(new InvoiceItemView({\n          model: invoiceItemModel\n        }).render().el);\n        $('body').append(new InvoiceItemFormView({\n          model: invoiceItemModel\n        }).render().el);\n    ```", "```js\n    bindings: {\n      '#price': {\n        observe: 'price',\n        onGet: 'priceGetter',\n        onGet: 'priceSetter'\n      }\n    },\n    priceGetter: function(val, options) { \n      return '$ ' + val; \n    },\n    priceSetter: function(val, options) { \n      return Number(val.replace(/[^0-9\\.]+/g, ''));\n    }\n```", "```js\n    bindings: {\n      '#price': {\n        observe: 'price',\n        update: function($el, val, model, options) { \n          $el.val(val);\n        }\n        afterUpdate: 'highlight',\n      },\n      },\n      highlight: function($el, val, options) { \n        $el.animate({ backgroundColor: \"#ff9999\" }, \"fast\")\n          .animate({ backgroundColor: \"#ffffff\" }, \"fast\");\n      } \n    }\n```", "```js\n    bindings: {\n      '#price': {\n        observe: 'price',\n        updateMethod: 'html',\n        escape: true\n      }\n    }\n```", "```js\n    bindings: {\n      '#price': {\n        observe: 'price',\n        events: ['blur'],\n      },\n    }\n```", "```js\n      var InvoiceModel = Backbone.Model.extend({\n\n      });\n    ```", "```js\n      var InvoiceView = Backbone.View.extend({\n\n        // Define class name of view element.\n        className: 'invoice-item-view',\n\n        },\n\n        // Render view.\n        render: function() {\n          var html = 'Status: <select id=\"items\"></select>';\n\n          // Set html for the view element using jQuery.\n          $(this.el).html(html);\n\n          // Here binding occurs.\n          this.stickit();\n\n          return this;\n        },\n      });\n    ```", "```js\n        // Bind HTML elements to the view model.\n        bindings: {\n          'select#items': {\n            observe: 'status',\n\n            // Define additional options for select element.\n            selectOptions: {\n\n              // You can return regular Backbone collection or\n              // an array of objects.\n              collection: function() {\n                return [\n                  {name: null, label: '- Status-'},\n                  {name: 'in_progress', label: 'In Progress'},\n                  {name: 'complete', label: 'Complete'}\n                ]\n              },\n\n              // Set the path to the label value for select\n              // options within the collection of objects.\n              labelPath: 'label',\n\n              // Define the path to the values for select options\n              // within the collection of objects. \n              valuePath: 'name'\n            }\n          }\n    ```", "```js\n        var invoiceModel = new InvoiceModel({ \n          status: 'in_progress' \n        });\n    ```", "```js\n    $('body').append(new InvoiceView({\n      model: invoiceModel\n    }).render().el);\n    ```", "```js\n    keyboardEvents: {\n      'shift+n': 'addNewInvoiceItem',\n      'shift+d': 'removeInvoiceItem',\n    },\n```", "```js\n<textarea name=\"message\" class=\"mousetrap\"></textarea>\n```", "```js\n        initialize: function() {  \n          Backbone.history.on('route', this.routeTracker);\n        },\n    ```", "```js\n        routeTracker: function(router, route, params) {\n          console.log(\n           'Route: ' + route + '. Params: ' + params + '.'\n          );\n        },\n    ```", "```js\n  var Workspace = Backbone.Router.extend({\n    routes: {\n      '': 'invoiceList',\n      'invoice': 'invoiceList',\n      'invoice/:id': 'invoicePage',\n    },\n\n    initialize: function() {\n       this.on('route:invoicePage', this.invoicePageEvent);\n    },\n\n    invoicePageEvent: function(param1, param2) {\n      console.log(param1);\n    },\n});\n```"]