["```js\nclass MathAPI { \n    public static pow(base: number, exponent: number) { \n        let result = base; \n        for (var i = 1; i < exponent; i++) { \n            result = result * base; \n        } \n        return result; \n    } \n} \n```", "```js\nconst actual1 = MathApi.pow(3, 5);\nconst expected1 = 243;\nconst asertion1 = actual1 === expected1;\n\nif (asertion1 === false) {\n    throw new Error(\n        `Expected 'actual1' to be ${expected1} ` +\n        `but got ${actual1}!`\n    );\n}\n```", "```js\nconst actual2 = MathApi.pow(5, 3);\nconst expected2 = 125;\nconst asertion2 = actual2 === expected2;\n\nif (asertion2 === false) {\n    throw new Error(\n        `Expected 'actual2' to be ${expected2} ` +\n        `but got ${actual2}!`\n    );\n}\n```", "```js\nnpm init  \n```", "```js\nnpm install --save-dev mocha @types/mocha  \n```", "```js\nnpm install --save-dev chai @types/chai  \n```", "```js\nnpm install --save-dev sinon @types/sinon  \n```", "```js\nnpm install --save-dev nyc  \n```", "```js\nnpm install --save-dev webpack css-loader extract-text-webpack-plugin node-sass sass-loader style-loader  \n```", "```js\nnpm install --save-dev enzyme enzyme-adapter-react-16 @types/enzyme @types/ enzyme-adapter-react-16  \n```", "```js\nnpm install supertest @types/supertest\n```", "```js\nnpm install pm2\n```", "```js\nnpm install chromedriver nightwatch @types/nightwatch\n```", "```js\n\"scripts\": { \n  \"all\": \"npm run clean && npm install && npm run lint && npm run build && npm test\", \n  \"clean\": \"rimraf ./dist ./public\", \n  \"start\": \"./node_modules/.bin/pm2 start ./dist/src/backend/main.js\", \n  \"kill\": \"./node_modules/.bin/pm2 kill\", \n  \"lint\": \"tslint --project tsconfig.json -c tslint.json ./src/**/*.ts ./test/**/*.ts\", \n  \"build\": \"npm run build-frontend && npm run build-e2e\", \n  \"build-frontend\": \"webpack\", \n  \"build-e2e\": \"tsc -p tsconfig.e2e.json\", \n  \"test\": \"npm run nyc && npm run e2e\", \n  \"nyc\": \"nyc --clean --all -x webpack.config.js -x test/*.e2e.ts -x public -x dist -x globals.js --require ./jsdom.js --require isomorphic-fetch --require ts-node/register --extension .ts -- mocha --timeout 5000 **/*.test.ts **/*.test.tsx\", \n  \"e2e\": \"npm run start && npm run nw && npm run kill\", \n  \"nw\": \"nightwatch --config nightwatch.json\", \n  \"coverage\": \"nyc report --reporter=text --reporter=lcov\" \n}, \n```", "```js\npublic pow(base: number, exponent: number) { \n\n  let result = base; \n  for (let i = 1; i < exponent; i++) { \n    result = result * base; \n  } \n  return result; \n} \n```", "```js\nit(\"Should return the correct numeric value for pow\", () => { \n  const math = new MathDemo(); \n  const result = math.pow(2, 3); \n  const expected = 8; \n  expect(result).to.be.a(\"number\"); \n  expect(result).to.equal(expected); \n}); \n```", "```js\nnpm run nyc \n```", "```js\nnyc report --reporter=text --reporter=lcov \n```", "```js\npublic powAsync(base: number, exponent: number) { \n  return new Promise<number>((resolve) => { \n    setTimeout( \n      () => { \n        const result = this.pow(base, exponent); \n        resolve(result); \n      }, \n      0 \n    ); \n  }); \n} \n```", "```js\nit(\"Should return the correct numeric value for pow\", (done) => { \n  const math = new MathDemo(); \n  math.powAsync(2, 3).then((result: number) => { \n    const expected = 8; \n    expect(result).to.be.a(\"number\"); \n    expect(result).to.equal(expected); \n    done(); \n  }); \n}); \n```", "```js\nit(\"Should return the correct numeric value for pow\", async () => { \n    const math = new MathDemo(); \n    const result = await math.powAsync(2, 3); \n    const expected = 8; \n    expect(result).to.be.a(\"number\"); \n    expect(result).to.equal(expected); \n}); \n```", "```js\nconst expected = 8; \nexpect(result).to.be.a(\"number\"); \nexpect(result).to.equal(expected); \n```", "```js\npublic bad(foo: any) { \n  if (foo === null) { \n    throw new Error(\"Error!\"); \n  } else { \n    return this.pow(5, 5); \n  } \n} \n```", "```js\nit(\"Should throw an exception when no parameters passed\", () => { \n  const math = new MathDemo(); \n  expect(math.bad).to.throw(Error); \n}); \n```", "```js\nimport * as express from \"express\"; \nimport * as path from \"path\"; \nimport { MathDemo } from \"./math_demo\"; \n\nexport function getApp() { \n\n    const app = express(); \n\n    // ...     \n\n    app.get(\"/api/math/pow/:base/:exponent\", (req, res) => { \n        const mathDemo = new MathDemo(); \n        const base = parseInt(req.params.base, 10); \n        const exponent = parseInt(req.params.exponent, 10); \n        const result = mathDemo.pow(base, exponent); \n        res.json({ result }); \n    }); \n\n    return app; \n\n} \n```", "```js\nimport { getApp } from \"./server\"; \n\nconst app = getApp(); \nconst port = 3000; \n\napp.listen(port, () => { \n    console.log(`App listening at http://localhost:${port}`); // tslint:disable-line \n}); \n```", "```js\nimport { expect } from \"chai\"; \nimport * as request from \"supertest\"; \nimport { getApp } from \"../src/backend/server\"; \n\ndescribe(\"Math Service\", function() { \n    it(\"HTTP GET /api/math/pow/:base/:exponent\", async () => { \n        const app = getApp(); \n        return request(app).get(\"/api/math/pow/2/3\") \n                    .set(\"Accept\", \"application/json\") \n                    .expect(\"Content-Type\", /json/) \n                    .expect(200) \n                    .then((response) => \n                        expect(response.body.result).eql(8) \n                    ); \n    }); \n}); \n```", "```js\ndescribe(\"My test suite\", () => { \n\n  before(() => { \n    // Invoked once before ALL tests \n  }); \n\n  after(() => { \n    // Invoked once after ALL tests \n  }); \n\n  beforeEach(() => { \n    // Invoked once before EACH test \n  }); \n\n  afterEach(() => { \n    // Invoked once before EACH test \n  }); \n\n  it(() => { \n    // Test case \n  }); \n\n}); \n```", "```js\nimport { expect } from \"chai\"; \nimport * as express from \"express\"; \nimport * as request from \"supertest\"; \nimport { getApp } from \"../src/backend/server\"; \n\ndescribe(\"Math Service\", function() { \n\n    let app: express.Application | null; \n\n    before(() => { \n        app = getApp(); \n    }); \n\n    after(() => { \n        app = null; \n    }); \n\n    it(\"HTTP GET /api/math/pow/:base/:exponent\", async () => \n        request(app).get(\"/api/math/pow/2/3\") \n                .set(\"Accept\", \"application/json\") \n                .expect(\"Content-Type\", /json/) \n                .expect(200) \n                .then((response) => \n                    expect(response.body.result).eql(8) \n                ) \n    ); \n\n}); \n```", "```js\nimport { expect } from \"chai\";\nimport { stub } from \"sinon\"; \nimport { MathClient } from \"../src/frontend/math_client\"; \n\ndescribe(\"MathDemo\", () => { \n    it(\"Should return result of pow calculation\", async () => { \n\n        const expectedResult = \"8\"; \n\n        const response = { \n            json: () => Promise.resolve({ \n                result: expectedResult  \n            }) \n        }; \n\n        const stubedFetch = stub(global, \"fetch\" as any); \n        stubedFetch.returns(Promise.resolve(response)); \n\n        const mathClient = new MathClient(); \n        const actualResult = await mathClient.pow(2, 3); \n        expect(expectedResult).to.eq(actualResult); \n        expect(stubedFetch.callCount).to.eq(1); \n\n      }); \n}); \n```", "```js\nconst { JSDOM } = require(\"jsdom\" ); \nconst jsdom = new JSDOM(\" <!doctype html><html><body></body></html>\" ); \nconst { window } = jsdom; \n\nfunction copyProps(src, target) { \n  const props = Object.getOwnPropertyNames(src) \n    .filter(prop => typeof target[prop] === \" undefined\" ) \n    .reduce((result, prop) => ({ \n      ...result, \n      [prop]: Object.getOwnPropertyDescriptor(src, prop), \n    }), {}); \n  Object.defineProperties(target, props); \n} \n\nglobal.window = window; \nglobal.document = window.document; \nglobal.navigator = { \n  userAgent: \" node.js\", \n}; \n\ncopyProps(window, global); \n```", "```js\nimport * as React from \"react\"; \nimport { MathClient } from \"./math_client\"; \nimport { NumericInput } from \"./numeric_input_component\"; \n\nconst ids = { \n  base: \"#base\", \n  exponent: \"#exponent\", \n  result: \"#result\", \n  submit: \"#submit\" \n}; \n\ninterface CalculatorProps { \n  client: MathClient; \n} \n\ninterface CalculatorState { \n  base: string; \n  exponent: string; \n  result: string; \n} \n\nexport class Calculator extends React.Component<CalculatorProps, CalculatorState> { \n\n  public constructor(props: CalculatorProps) { \n    super(props); \n    this.state = { \n      base: \"1\", \n      exponent: \"1\", \n      result: \"1\" \n    }; \n  } \n\n  public render() { \n    return ( \n      <div className=\"well\"> \n        <div className=\"row\"> \n          <div className=\"col\"> \n            <NumericInput \n              id=\"base\" \n              name=\"Base\" \n              value={this.state.base} \n              onChangeHandler={(v) => this.setState({ base: v })} \n            /> \n          </div> \n          <div className=\"col\"> \n            <NumericInput \n              id=\"exponent\" \n              name=\"Exponent\" \n              value={this.state.exponent} \n              onChangeHandler={(v) => this.setState({ \n                  exponent: v \n              })} \n            /> \n          </div> \n          <div className=\"col\"> \n            <div className=\"form-group\"> \n                  <label>Result</label> \n                  <div id=\"result\">{this.state.result}</div> \n              </div> \n          </div> \n          <div className=\"col\"> \n            <button \n              id=\"submit_btn\" \n              type=\"Submit\" \n              className=\"btn btn-primary\" \n              onClick={() => this._onSubmit()} \n            > \n              Submit \n            </button> \n          </div> \n        </div> \n      </div> \n    ); \n  } \n\n  private _onSubmit() { \n    (async () => { \n      const result = await this.props.client.pow( \n        parseFloat(this.state.base), \n        parseFloat(this.state.exponent) \n      ); \n      this.setState({ result }); \n    })(); \n  } \n\n} \n```", "```js\nimport { expect } from \"chai\"; \nimport * as Enzyme from \"enzyme\"; \nimport * as Adapter from \"enzyme-adapter-react-16\"; \nimport * as React from \"react\"; \nimport { stub } from \"sinon\"; \nimport { Calculator } from \"../src/frontend/calculator_component\"; \nimport { MathClient } from \"../src/frontend/math_client\"; \n\nEnzyme.configure({ adapter: new Adapter() }); \n\ndescribe(\"Calculator Component\", () => { \n\n  it(\"Should invoke client #submit is clicked\", (done) => { \n\n    const mathClient = new MathClient(); \n\n    const mathClientStub = stub(mathClient, \"pow\"); \n    mathClientStub.returns(Promise.resolve(8)); \n\n    mathClientStub.callsFake((base: number, exponent: number) => { \n      expect(base).to.equal(2); \n      expect(exponent).to.equal(3); \n      done(); \n    }); \n\n    const wrapper = Enzyme.mount(<Calculator client={mathClient} />); \n\n    expect(wrapper.find(\"input#base\")).to.have.length(1); \n    expect(wrapper.find(\"input#exponent\")).to.have.length(1); \n    expect(wrapper.find(\"button#submit_btn\")).to.have.length(1); \n\n    wrapper.find(\"input#base\").simulate(\"change\", { target: { value: \"2\" } }); \n    wrapper.find(\"input#exponent\").simulate(\"change\", { target: { value: \"3\" } }); \n    wrapper.find(\"button#submit_btn\").simulate(\"click\"); \n\n  }); \n\n}); \n```", "```js\nimport {TestBed, ComponentFixture, inject, async} from \"@angular/core/testing\"; \nimport {LoginComponent, User} from \"./login.component\"; \nimport {Component, DebugElement} from \"@angular/core\"; \nimport {By} from \"@angular/platform-browser\"; \n\n// Refine the test module by declaring the test component \nTestBed.configureTestingModule({ \n    declarations: [LoginComponent] \n}); \n\n// Access the component \nlet fixture: ComponentFixture<LoginComponent> = TestBed.createComponent(LoginComponent); \nlet component: LoginComponent = fixture.componentInstance; \n\n// Access an element \nlet submitEl: DebugElement = fixture.debugElement.query(By.css(\"button\")); \nsubmitEl.triggerEventHandler(\"click\", null); \n```", "```js\nimport { NightwatchBrowser } from \"nightwatch\"; \n\nconst test = { \n  \"Calculator pow e2e test example\": (browser: NightwatchBrowser) => { \n    browser \n      .url(\"http://localhost:3000/\") \n      .waitForElementVisible(\"body\", 1000) \n      .assert.title(\"Calculator\") \n      .assert.visible(\"#base\") \n      .assert.visible(\"#exponent\") \n      .clearValue(\"#base\") \n      .setValue(\"#base\", \"2\") \n      .clearValue(\"#exponent\") \n      .setValue(\"#exponent\", \"3\") \n      .click(\"#submit_btn\") \n      .pause(500) \n      .assert.containsText(\"#result\", \"8\") \n      .end(); \n  } \n}; \n\nexport = test; \n```", "```js\nconst chromedriver = require(\"chromedriver\"); \n\nmodule.exports = { \n    before: (done) => { \n        chromedriver.start(); \n        done(); \n    }, \n    after: (done) => { \n        chromedriver.stop(); \n        done(); \n    }, \n    reporter: function(results) { \n        if ( \n            (typeof(results.failed) === \"undefined\" || results.failed === 0) && \n            (typeof(results.error) === \"undefined\" || results.error === 0) \n        ) { \n            process.exit(0); \n        } else { \n            process.exit(1); \n        } \n    } \n}; \n```", "```js\n{ \n    \"src_folders\": [ \n        \"dist/test\" \n    ], \n    \"output_folder\": \"reports\", \n    \"custom_commands_path\": \"\", \n    \"custom_assertions_path\": \"\", \n    \"page_objects_path\": \"\", \n    \"globals_path\": \"./globals.js\", \n    \"selenium\": { \n        \"start_process\": false \n    }, \n    \"test_settings\": { \n        \"default\": { \n            \"selenium_port\": 9515, \n            \"selenium_host\": \"localhost\", \n            \"default_path_prefix\": \"\", \n            \"desiredCapabilities\": { \n                \"browserName\": \"chrome\", \n                \"chromeOptions\": { \n                    \"args\": [ \n                        \"--no-sandbox\" \n                    ] \n                }, \n                \"acceptSslCerts\": true \n            } \n        }, \n        \"chrome\": { \n            \"desiredCapabilities\": { \n                \"browserName\": \"chrome\" \n            } \n        } \n    } \n} \n```", "```js\n{ \n  \"compilerOptions\": { \n    \"outDir\": \"./dist/\" \n  }, \n  \"extends\": \"./tsconfig\", \n  \"include\": [ \n    \"test/*.e2e.ts\", \n    \"src/backend/*.ts\" \n  ], \n  \"exclude\": [ \n    \"node_modules\" \n  ] \n} \n```"]