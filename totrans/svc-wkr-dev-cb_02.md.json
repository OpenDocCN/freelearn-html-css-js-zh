["```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Custom Offline Page</title>\n    </head>\n    <body>\n      <p>Registration status: <strong id=\"status\"></strong></p>\n\n      <script>\n        var scope = {\n          scope: './'\n        };\n\n        if ('serviceWorker' in navigator) {\n          navigator.serviceWorker.register('service-worker.js', scope)\n          .then(\n            function(serviceWorker) {\n            document.getElementById('status').innerHTML = 'successful';\n          }).catch(function(error) {\n            document.getElementById('status').innerHTML = error;\n          });\n        } else {\n            document.getElementById('status').innerHTML = 'unavailable';\n          }\n      </script>\n    </body>\n    </html>\n    ```", "```js\n    'use strict';\n\n    var version = 1;\n    var currentCache = {\n      offline: 'offline-cache' + version\n    };\n\n    var offlineUrl = 'offline.html';\n\n    self.addEventListener('install', function(event) {\n      event.waitUntil(\n        caches.open(currentCache.offline).then(function(cache) {\n          return cache.addAll([\n            offlineUrl\n          ]);\n        })\n      );\n    });\n\n    self.addEventListener('fetch', function(event) {\n      var request = event.request,\n        isRequestMethodGET = request.method === 'GET';\n\n      if (request.mode === 'navigate' || isRequestMethodGET) {\n        event.respondWith(\n          fetch(createRequestWithCacheBusting(request.url)).catch(function(error) {\n            console.log('OFFLINE: Returning offline page.', error);\n            return caches.match(offlineUrl);\n          })\n        );\n      } else {\n        event.respondWith(caches.match(request)\n            .then(function (response) {\n            return response || fetch(request);\n          })\n        );\n      }\n    });\n    function createRequestWithCacheBusting(url) {\n      var request,\n        cacheBustingUrl;\n\n      request = new Request(url,\n        {cache: 'reload'}\n      );\n\n      if ('cache' in request) {\n        return request;\n      }\n\n      cacheBustingUrl = new URL(url, self.location.href);\n      cacheBustingUrl.search += (cacheBustingUrl.search ? '&' : '') + 'cachebust=' + Date.now();\n\n      return new Request(cacheBustingUrl);\n    }\n    ```", "```js\n    <!DOCTYPE html>\n    <html>\n     <head>\n      <meta charset=\"UTF-8\">\n      <title>Offline</title>\n      <style>\n        #container {\n          text-align: center;\n          margin-top: 40px;\n        }\n        #container img {\n          width: 80px;\n          height: 80px;\n        }\n      </style>\n     </head>\n     <body>\n       <div id=\"container\">\n         <svg  width=\"25\" height=\"25\" viewBox=\"0 0 25 25\">\n           <path d=\"M16 0l-3 9h9l-1.866 2h-14.4L16 0zm2.267 13h-14.4L2 15h9l-3 9 10.267-11z\" fill=\"#04b8b8\"/>\n         </svg>\n         <p>Whoops, something went wrong...!</p>\n         <p>Your internet connection is not working.</p>\n         <p>Please check your internet connection and try again.</p>\n       <div>\n      </body>\n    </html>\n    ```", "```js\nnavigator.serviceWorker.register(\n      'service-worker.js',\n      { scope: './' }\n   ).then(function(serviceWorker) {\n      document.getElementById('status').innerHTML = \n          'successful';\n   }).catch(function(error) {\n      document.getElementById('status').innerHTML = error;\n   });\n```", "```js\nvar version = 1;\nvar currentCache = {\n  offline: 'offline-cache' + version\n};\n```", "```js\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(currentCache.offline)\n    .then(function(cache) {\n         return cache.addAll([\n            offlineUrl\n         ]);\n    })\n  );\n});\n```", "```js\nself.addEventListener('fetch', function(event) {\n  var request = event.request,\n    isRequestMethodGET = request.method === 'GET';\n\n  if (request.mode === 'navigate' || isRequestMethodGET) {\n    event.respondWith(\n      fetch(createRequestWithCacheBusting(request.url)).catch(function(error) {\n        console.log('OFFLINE: Returning offline page.', error);\n        return caches.match(offlineUrl);\n      })\n    );\n  } else {\n    event.respondWith(caches.match(request)\n        .then(function (response) {\n        return response || fetch(request);\n      })\n    );\n  }\n}); \n```", "```js\ncaches.open(currentCache.offline)\n.then(function(cache) {\n    return cache.addAll([\n        'offline.html',\n        '/assets/css/style.css',\n        '/assets/js/index.js'\n    ]);\n  })\n);\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Offline Images</title>\n    </head>\n    <body>\n      <main>\n        <p>Registration status: <strong id=\"status\"></strong></p>\n        <img src=\"img/packt-logo.png\" alt=\"logo\">\n      <main>\n      <script src=\"img/index.js\"></script>\n    </body>\n    </html>\n    ```", "```js\n    'use strict';\n\n    var version = 1;\n    var cacheName = 'static-' + version;\n\n    self.addEventListener('install', installHandler);\n    self.addEventListener('fetch', fetchHandler);\n\n    function installHandler(event) {\n        event.waitUntil(\n            caches.open(cacheName).then(function(cache) {\n                return cache.addAll([\n                  'index.html',\n                  'packt-logo.png'\n                ]);\n            })\n        );\n    }\n\n    event.respondWith(\n      fetch(event.request).catch(function() {\n        return caches.match(event.request);\n      })\n    );\n    ```", "```js\n    'use strict';\n\n    var scope = {\n      scope: './'\n    };\n\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register('service-worker.js', scope\n      ).then( function(serviceWorker) {\n        printStatus('successful');\n      }).catch(function(error) {\n        printStatus(error);\n      });\n    } else {\n      printStatus('unavailable');\n    }\n\n    function printStatus(status) {\n      document.getElementById('status').innerHTML = status;\n    }\n    ```", "```js\n<body>\n  <p>Registration status: <strong id=\"status\"></strong></p>\n  <img src=\"img/packt-logo.png\" alt=\"logo\">\n  <script src=\"img/index.js\"></script>\n</body>\n```", "```js\nvar version = 1;\nvar cacheName = 'static-' + version;\n```", "```js\nself.addEventListener('install', function(event) {\n    event.waitUntil(\n        caches.open(cacheName).then(function(cache) {\n            return cache.addAll([\n                'index.html',\n                'packt-logo.png'\n            ]);\n        })\n    );\n});\n```", "```js\nself.addEventListener('fetch', function(event) {\n    event.respondWith(caches.match(event.request));\n});    \n```", "```js\n<img src=\"img/image-src.png\" srcset=\"image-src.png 1x, image-2x.png 2x\" />\n```", "```js\n<img src=\"img/image-src.png\" sizes=\"50vw\"\nsrcset=\"image-src.png 1x, image-2x.png 2x 400w\">\n```", "```js\n<picture>\n  <img src=\"img/image-src.png\" sizes=\"50vw\"srcset=\"image-src.png 1x, image-2x.png 2x 400w\">\n</picture>\n```", "```js\n<img src=\"img/image-src.png\" srcset=\"image-src.png 1x, image-2x.png 2x\" />\n```", "```js\n<img src=\"img/image-src.png\" srcset=\"image-src.png 1x, image-2x.png 2x\"\nstyle=\"width:400px; height: 400px;\" />\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Offline CSS</title>\n      <link rel=\"stylesheet\" href=\"style-2.css\">\n      <link rel=\"stylesheet\" href=\"style-1.css\">\n    </head> \n    <body>\n      <p>Registration status: <strong id=\"status\"></strong></p>\n\n      <script>\n          var scope = {\n          scope: './'\n        };\n\n        if ('serviceWorker' in navigator) {\n          navigator.serviceWorker.register('service-worker.js', scope)\n          .then(\n            function(serviceWorker) {\n            printStatus('successful');\n          }).catch(function(error) {\n            printStatus(error);\n          });\n        } else {\n          printStatus('unavailable');\n        }\n\n        function printStatus(status) {\n          document.getElementById('status').innerHTML = status;\n        }  </script>\n    </body>\n    </html>\n    ```", "```js\n    var version = 1;\n    var cacheName = 'static-' + version;\n\n    self.addEventListener('install', installHandler);\n    self.addEventListener('fetch', fetchHandler);\n\n    function installHandler(event) {\n        event.waitUntil(\n            caches.open(cacheName).then(function(cache) {\n                return cache.addAll([\n                  'index.html',\n                  'style-2.css'\n                ]);\n            })\n        );\n    }\n\n    function fetchHandler(event) {\n      if (/index/.test(event.request.url) || /style-2/.test(event.request.url)) {\n        event.respondWith(caches.match(event.request));\n      }\n    }\n    ```", "```js\n    body {\n        background-color: lightgreen;\n    }\n    ```", "```js\n    body {\n        background-color: red;\n    }\n    ```", "```js\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Offline CSS</title>\n  <link rel=\"stylesheet\" href=\"style-2.css\">\n  <link rel=\"stylesheet\" href=\"style-1.css\">\n</head>\n```", "```js\nbody {\n    background-color: lightgreen;\n}\n```", "```js\nvar version = 1;\nvar cacheName = 'static-' + version;\n```", "```js\nfunction installHandler(event) {\n    event.waitUntil(\n        caches.open(cacheName).then(function(cache) {\n            return cache.addAll([\n              'index.html',\n              'style-2.css'\n            ]);\n        })\n    );\n}\n```", "```js\nself.addEventListener('fetch', function(event) {\n    event.respondWith(caches.match(event.request));\n});\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Offline Fonts</title>\n      <style>\n        @font-face{\n          font-family: 'MyWebFont';\n          src: url('webfont-serif.woff') format('woff');\n        }\n        p { font-family: 'MyWebFont', Arial, sans-serif; }\n      </style>\n    </head>\n    <body>\n      <p>Registration status: <strong id=\"status\"></strong></p>\n\n      <script>\n          var scope = {\n          scope: './'\n        };\n\n        if ('serviceWorker' in navigator) {\n          navigator.serviceWorker.register('service-worker.js', scope)\n          .then(\n            function(serviceWorker) {\n            printStatus('successful');\n          }).catch(function(error) {\n            printStatus(error);\n          });\n        } else {\n          printStatus('unavailable');\n        }\n\n        function printStatus(status) {\n          document.getElementById('status').innerHTML = status;\n        }  </script>\n    </body>\n    </html>\n    ```", "```js\n    'use strict';\n\n    var version = 1;\n    var cacheName = 'static-' + version;\n\n    self.addEventListener('install', installHandler);\n    self.addEventListener('fetch', fetchHandler);\n\n    function installHandler(event) {\n        event.waitUntil(\n            caches.open(cacheName).then(function(cache) {\n                return cache.addAll([\n                    'index.html',\n                    'webfont-serif.woff'\n                ]);\n            })\n        );\n    }\n\n    function fetchHandler(event) {\n        event.respondWith(caches.match(event.request));\n    }\n    ```", "```js\n<style>\n   @font-face{\n     font-family: 'MyWebFont';\n     src: url('webfont-serif.woff') format('woff');\n   }\n\n   p { font-family: 'MyWebFont', Arial, sans-serif; }\n</style>\n```", "```js\np { font-family: 'MyWebFont', Arial, sans-serif; }\n```", "```js\nvar version = 1;\nvar cacheName = 'static-' + version;\n```", "```js\nself.addEventListener('install', function(event) {\n    event.waitUntil(\n        caches.open(cacheName).then(function(cache) {\n            return cache.addAll([\n                'index.html',\n                'webfont-serif.woff'\n            ]);\n        })\n    );\n});\n```", "```js\nself.addEventListener('fetch', function(event) {\n    event.respondWith(caches.match(event.request));\n});    \n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Multiple Fetch</title>\n    </head>\n    <body>\n      <p>Registration status: <strong id=\"status\"></strong></p>\n\n      <script>\n        if ('serviceWorker' in navigator) {\n          navigator.serviceWorker.register(\n            'service-worker.js',\n            { scope: './' }\n          ).then( function(serviceWorker) {\n            document.getElementById('status').innerHTML = 'successful';\n          }).catch(function(error) {\n            document.getElementById('status').innerHTML = error;\n          });\n        } else {\n          document.getElementById('status').innerHTML = 'unavailable';\n        }\n      </script>\n    </body>\n    </html>\n    ```", "```js\n    var cookFetchHandler = function(event) {\n      console.log('DEBUG: Inside the /cook handler.');\n      if (event.request.url.indexOf('/cook/') > 0) {\n        event.respondWith(new Response('Fetch handler for /cook'));\n      }\n    };\n\n    var cookBookFetchHandler = function(event) {\n      console.log('DEBUG: Inside the /cook/book handler.');\n      if (event.request.url.endsWith('/cook/book')) {\n        event.respondWith(new Response('Fetch handler for /cook/book'));\n      }\n    };\n\n    var fetchHandlers = [cookBookFetchHandler, cookFetchHandler];\n\n    fetchHandlers.forEach(function(fetchHandler) {\n      self.addEventListener('fetch', fetchHandler);\n    });\n    ```", "```js\nvar cookFetchHandler = function(event) {\n  console.log('DEBUG: Inside the /cook handler.');\n  if (event.request.url.indexOf('/cook/') > 0) {\n    event.respondWith(new Response('Fetch handler for /cook'));\n  }\n};\n\nvar cookBookFetchHandler = function(event) {\n  console.log('DEBUG: Inside the /cook/book handler.');\n  if (event.request.url.endsWith('/cook/book')) {\n    event.respondWith(new Response('Fetch handler for /cook/book'));\n  }\n};\n```", "```js\nvar fetchHandlers = [cookBookFetchHandler, cookFetchHandler];\n\nfetchHandlers.forEach(function(fetchHandler) {\n  self.addEventListener('fetch', fetchHandler);\n});\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <title>Fetching Offline Resources</title>\n      <style>\n          .error {\n            color: #FF0000;\n          }\n          .success {\n            color: #00FF00;\n          }\n        </style>\n      </head>\n      <body>\n        <section>\n          <h1>Images</h1>\n          <div id=\"https-acao-image\"></div>\n          <div id=\"https-image\"></div>\n          <div id=\"http-image\"></div>\n        </section>\n\n        <section>\n          <h1>HTTPS Fetch</h1>\n          <div id=\"https-cors\">\n            <strong>https-cors</strong>\n          </div>\n          <div id=\"https-no-cors\">\n            <strong>https-no-cors</strong>\n          </div>\n          <div id=\"https-acao-cors\">\n            <strong>https-acao-cors</strong>\n          </div>\n          <div id=\"https-acao-no-cors\">\n            <strong>https-acao-no-cors</strong>\n          </div>\n          <div id=\"service-https-cors\">\n            <strong>service-https-cors</strong>\n          </div>\n          <div id=\"service-http-cors\">\n            <strong>service-http-cors</strong>\n          </div>\n          <div id=\"service-http-no-cors\">\n            <strong>service-http-no-cors</strong>\n          </div>\n        </section>\n\n        <section>\n          <h1>HTTP Fetch</h1>\n          <div id=\"http-cors\">\n            <strong>http-cors</strong>\n          </div>\n          <div id=\"http-no-cors\">\n            <strong>http-no-cors</strong>\n          </div>\n        </section>\n\n        <script src=\"img/index.js\"></script>\n      </body>\n    </html>\n    ```", "```js\n    'use strict';\n\n    var protocols = {\n    'https': \n    'https://dz13w8afd47il.cloudfront.net/sites/all/themes/packt_v4/images/packtlib-logo-dark.png',\n\n      'https-acao': \n    'https://i942.photobucket.com/albums/ad261/szaranger/Packt/packt-logo.png',\n\n      'http': \n    'http://seanamarasinghe.com/wp-content/uploads/2015/06/icon-128x128.jpg'\n    };\n\n    navigator.serviceWorker.getRegistration()\n    .then(function(registration) {\n      var fetchModes = ['cors', 'no-cors'];\n\n      if (!registration || !navigator.serviceWorker.controller) {\n        navigator.serviceWorker.register(\n        './service-worker.js').then(function() {\n            console.log('Service worker registered, \n            reloading the page');\n            window.location.reload();\n        });\n      } else {\n        console.log('Client is under service worker\\s control');\n\n        for (var protocol in protocols) {\n          if (protocols.hasOwnProperty(protocol)) {\n            buildImage(protocol, protocols[protocol]);\n\n            for (var index = 0; index < fetchModes.length; index++) {\n              var fetchMode = fetchModes[index],\n                init = { method: 'GET',\n                         mode: fetchMode,\n                         cache: 'default' };\n\n              fireRequest(fetchMode, protocol, init)();\n            }\n          }\n        }\n      }\n    });\n\n    function buildImage(protocol, url) {\n      var element = protocol + '-image',\n        image = document.createElement('img');\n\n      image.src = url;\n      document.getElementById(element).appendChild(image);\n    }\n\n    function fireRequest(fetchMode, protocol, init) {\n      return function() {\n        var section = protocol + '-' + fetchMode,\n          url = protocols[protocol];\n\n        fetch(url, init).then(function(response) {\n          printSuccess(response, url, section);\n        }).catch(function(error) {\n          printError(error, url, section);\n        });\n\n        fetch('./proxy/' + url, init).then(function(response) {\n          url = './proxy/' + url;\n          printSuccess(response, url, section);\n        }).catch(function(error) {\n          section = 'service-' + section;\n\n          console.log(section, 'ERROR: ', url, error);\n          log(section, 'ERROR: ' + error, 'error');\n        });\n      };\n    }\n\n    function printSuccess(response, url, section) {\n      if (response.ok) {\n        console.log(section, 'SUCCESS: ', url, response);\n        log(section, 'SUCCESS');\n      } else {\n        console.log(section, 'FAIL:', url, response);\n        log(section, 'FAIL: response type: ' + response.type +\n                     ', response status: ' + \n                     response.status, 'error');\n      }\n    }\n\n    function printError(error, url, section) {\n      console.log(section, 'ERROR: ', url, error);\n      log(section, 'ERROR: ' + error, 'error');\n    }\n\n    function log(id, message, type) {\n      var sectionElement = document.getElementById(id),\n        logElement = document.createElement('p');\n\n      if (type) {\n        logElement.classList.add(type);\n      }\n      logElement.textContent = message;\n      sectionElement.appendChild(logElement);\n    }\n    ```", "```js\n    self.onfetch = function(event) {\n      if (event.request.url.indexOf('proxy') > -1) {\n        var init = { method: 'GET',\n                     mode: event.request.mode,\n                     cache: 'default' };\n        var url = event.request.url.split('proxy/')[1];\n        console.log('DEBUG: proxying', url);\n        event.respondWith(fetch(url, init));\n      } else {\n        event.respondWith(fetch(event.request));\n      }\n    };\n    ```", "```js\nvar protocols = {\n  'https-acao':  \n    'https://i942.photobucket.com/albums/ad261/szaranger/Packt/packt-logo.png',\n  'https': \n    'https://dz13w8afd47il.cloudfront.net/sites/all/themes/packt_v4/images/packtlib-logo-dark.png',\n  'http': \n    'http://seanamarasinghe.com/wp-content/uploads/2015/06/icon-128x128.jpg'\n};\n```", "```js\nvar fetchModes = ['cors', 'no-cors'];\n```", "```js\n  navigator.serviceWorker.register(\n'./service-worker.js').then(function() {\n      console.log('Service worker registered, reloading the page');\n      window.location.reload();\n    });\n```", "```js\nfor (var protocol in protocols) {\n      if (protocols.hasOwnProperty(protocol)) {\n        buildImage(protocol, protocols[protocol]);\n\n        for (var i = 0; i < fetchModes.length; i++) {\n          var fetchMode = fetchModes[i],\n            init = { \n                 method: 'GET',\n                 mode: fetchMode,\n                 cache: 'default' \n            };\n\n          fireRequest(fetchMode, protocol, init)();\n        }\n      }\n}\n```", "```js\nfunction buildImage(protocol, url) {\n  var element = protocol + '-image',\n    image = document.createElement('img');\n\n  image.src = url;\n  document.getElementById(element).appendChild(image);\n}\n```", "```js\n fetch(url, init).then(function(response) {\n    printSuccess(response, url, section);\n }).catch(function(error) {\n    printError(error, url, section);\n });\n```", "```js\nfetch('./proxy/' + url, init).then(function(response) {\n    url = './proxy/' + url;\n    printSuccess(response, url, section);\n  }).catch(function(error) {\n    section = 'service-' + section;\n\n     console.log(section, 'ERROR: ', url, error);\n    log(section, 'ERROR: ' + error, 'error');\n   });\n```", "```js\nfunction printSuccess(response, url, section) {\n  if (response.ok) {\n    console.log(section, 'SUCCESS: ', url, response);\n    log(section, 'SUCCESS');\n  } else {\n    console.log(section, 'FAIL:', url, response);\n    log(section, 'FAIL: response type: ' + response.type +\n                 ', response status: ' + response.status, 'error');\n  }\n}\n\nfunction printError(error, url, section) {\n  console.log(section, 'ERROR: ', url, error);\n  log(section, 'ERROR: ' + error, 'error');\n}\n```", "```js\nfunction log(id, message, type) {\n  var type = type || 'success',\n    sectionElement = document.getElementById(id),\n    logElement = document.createElement('p');\n\n  if (type) {\n    logElement.classList.add(type);\n  }\n  logElement.textContent = message;\n  sectionElement.appendChild(logElement);\n}\n```", "```js\n<style>\n.error {\n     color: #FF0000;\n   }\n   .success {\n     color: #00FF00;\n   }\n</style>\n```", "```js\nvar url = event.request.url.split('proxy/')[1];\nconsole.log('DEBUG: proxying', url);\nevent.respondWith(fetch(url, init));\n```", "```js\n} else {\n    event.respondWith(fetch(event.request));\n}\n```", "```js\nfetch(url, {\n  credentials: 'include'\n});\n```", "```js\ncache.addAll(urlsToPrefetch.map(function(urlToPrefetch) {\n  return new Request(urlToPrefetch, { mode: 'no-cors' });\n})).then(function() {\n  console.log('All resources have been fetched and cached.');\n});\n```"]