["```js\nvar a = 12; //accessible globally\n\nfunction myFunction()\n{\n  console.log(a);\n\n  var b = 13; //accessible throughout function\n\n  if(true)\n  {\n    var c = 14; //accessible throughout function\n    console.log(b);\n  }\n\n  console.log(c);\n}\n\nmyFunction();\n```", "```js\n12\n13\n14\n```", "```js\nlet a = 12; //accessible globally\n\nfunction myFunction()\n{\n  console.log(a);\n\n  let b = 13; //accessible throughout function\n\n  if(true)\n  {\n    let c = 14; //accessible throughout the \"if\" statement\n    console.log(b);\n  }\n\n  console.log(c);\n}\n\nmyFunction();\n```", "```js\n12\n13\nReference Error Exception\n```", "```js\nvar a = 0;\nvar a = 1;\n\nconsole.log(a);\n\nfunction myFunction()\n{\n  var b = 2;\n  var b = 3;\n\n  console.log(b);\n}\n\nmyFunction();\n```", "```js\n1\n3\n```", "```js\nlet a = 0;\nlet a = 1; //TypeError\n\nfunction myFunction()\n{\n  let b = 2;\n  let b = 3; //TypeError\n\n  if(true)\n  {\n    let c = 4;\n    let c = 5; //TypeError\n  }\n}\n\nmyFunction();\n```", "```js\nvar a = 1;\nlet b = 2;\n\nfunction myFunction()\n{\n  var a = 3; //different variable\n  let b = 4; //different variable\n\n  if(true)\n  {\n    var a = 5; //overwritten\n    let b = 6; //different variable\n\n    console.log(a);\n    console.log(b);\n  }\n\n  console.log(a);\n  console.log(b);\n}\n\nmyFunction();\n\nconsole.log(a);\nconsole.log(b);\n```", "```js\n5\n6\n5\n4\n1\n2\n```", "```js\nvar const_pi = 3.141;\nvar r = 2;\nconsole.log(const_pi * r * r); //Output \"12.564\"\n```", "```js\nconst pi = 3.141;\nvar r = 2;\n\nconsole.log(pi * r * r); //Output \"12.564\"\n\npi = 12; //throws read-only exception\n```", "```js\nconst a = 12; //accessible globally\n\nfunction myFunction()\n{\n  console.log(a);\n\n  const b = 13; //accessible throughout function\n\n  if(true)\n  {\n    const c = 14; //accessible throughout the \"if\" statement\n    console.log(b);\n  }\n\n  console.log(c);\n}\n\nmyFunction();\n```", "```js\n12\n13\nReferenceError Exception\n```", "```js\nconst a = {\n  \"name\" : \"John\"\n};\n\nconsole.log(a.name);\n\na.name = \"Eden\";\n\nconsole.log(a.name);\n\na = {}; //throws read-only exception\n```", "```js\nJohn\nEden\na is read only: Exception\n```", "```js\nfunction myFunction(x, y, z)\n{\n  x = x === undefined ? 1 : x;\n  y = y === undefined ? 2 : y;\n  z = z === undefined ? 3 : z;\n\n  console.log(x, y, z); //Output \"6 7 3\"\n}\nmyFunction(6, 7);\n```", "```js\nfunction myFunction(x = 1, y = 2, z = 3)\n{\n  console.log(x, y, z); // Output \"6 7 3\"\n}\n\nmyFunction(6,7);\n```", "```js\nfunction myFunction(x = 1, y = 2, z = 3)\n{\n  console.log(x, y, z); // Output \"1 7 9\"\n}\n\nmyFunction(undefined,7,9);\n```", "```js\nfunction myFunction(x = 1, y = 2, z = 3 + 5)\n{\n  console.log(x, y, z); // Output \"6 7 8\"\n}\n\nmyFunction(6,7);\n```", "```js\nfunction myFunction(a, b)\n{\n  return a + b;\n}\n\nvar data = [1, 4];\nvar result = myFunction.apply(null, data);\n\nconsole.log(result); //Output \"5\"\n```", "```js\nfunction myFunction(a, b)\n{\n return a + b;\n}\n\nlet data = [1, 4];\nlet result = myFunction(...data);\nconsole.log(result); //Output \"5\"\n```", "```js\nlet result = myFunction(...data);\n```", "```js\nlet result = myFunction(1,4);\n```", "```js\nlet array1 = [2,3,4];\nlet array2 = [1, ...array1, 5, 6, 7];\n\nconsole.log(array2); //Output \"1, 2, 3, 4, 5, 6, 7\"\n```", "```js\nlet array2 = [1, ...array1, 5, 6, 7];\n```", "```js\nlet array2 = [1, 2, 3, 4, 5, 6, 7];\n```", "```js\nvar array1 = [2,3,4];\nvar array2 = [1];\n\nArray.prototype.push.apply(array2, array1);\n\nconsole.log(array2); //Output \"1, 2, 3, 4\"\n```", "```js\nlet array1 = [2,3,4];\nlet array2 = [1];\n\narray2.push(...array1);\n\nconsole.log(array2); //Output \"1, 2, 3, 4\"\n```", "```js\narray2.push(...array1);\n```", "```js\narray2.push(2, 3, 4);\n```", "```js\nlet array1 = [1];\nlet array2 = [2];\nlet array3 = [...array1, ...array2, ...[3, 4]];//multi array spread\nlet array4 = [5];\n\nfunction myFunction(a, b, c, d, e)\n{\n  return a+b+c+d+e;\n}\n\nlet result = myFunction(...array3, ...array4); //multi array spread\n\nconsole.log(result); //Output \"15\"\n```", "```js\nfunction myFunction(a, b)\n{\n  var args = Array.prototype.slice.call(arguments, myFunction.length);\n\n  console.log(args);\n}\n\nmyFunction(1, 2, 3, 4, 5); //Output \"3, 4, 5\"\n```", "```js\nfunction myFunction(a, b, ...args)\n{\n  console.log(args); //Output \"3, 4, 5\"\n}\n\nmyFunction(1, 2, 3, 4, 5);\n```", "```js\nvar myArray = [1, 2, 3];\nvar a = myArray[0];\nvar b = myArray[1];\nvar c = myArray[2];\n```", "```js\nlet myArray = [1, 2, 3];\nlet a, b, c;\n\n[a, b, c] = myArray; //array destructuring assignment syntax\n```", "```js\nlet [a, b, c] = [1, 2, 3];\n```", "```js\nlet [a, , b] = [1, 2, 3];\n\nconsole.log(a);\nconsole.log(b);\n```", "```js\n1\n3\n```", "```js\nlet [a, ...b] = [1, 2, 3, 4, 5, 6];\n\nconsole.log(a);\nconsole.log(Array.isArray(b));\nconsole.log(b);\n```", "```js\n1\ntrue\n2,3,4,5,6\n```", "```js\nlet [a, , ,...b] = [1, 2, 3, 4, 5, 6];\n\nconsole.log(a);\nconsole.log(b);\n```", "```js\n1\n4,5,6\n```", "```js\nlet [a, b, c = 3] = [1, 2];\nconsole.log(c); //Output \"3\"\n```", "```js\nlet [a, b, [c, d]] = [1, 2, [3, 4]];\n```", "```js\nfunction myFunction([a, b, c = 3])\n{\n  console.log(a, b, c); //Output \"1 2 3\"\n}\n\nmyFunction([1, 2]);\n```", "```js\nfunction myFunction([a, b, c = 3] = [1, 2, 3])\n{\n  console.log(a, b, c);  //Output \"1 2 3\"\n}\n\nmyFunction(undefined);\n```", "```js\nvar object = {\"name\" : \"John\", \"age\" : 23};\nvar name = object.name;\nvar age = object.age;\n```", "```js\nlet object = {\"name\" : \"John\", \"age\" : 23};\nlet name, age;\n\n({name, age} = object); //object destructuring assignment syntax\n```", "```js\nlet object = {\"name\" : \"John\", \"age\" : 23};\nlet x, y;\n\n({name: x, age: y} = object);\n```", "```js\nlet {name: x, age: y} = {\"name\" : \"John\", \"age\" : 23};\n```", "```js\nlet {a, b, c = 3} = {a: \"1\", b: \"2\"};\nconsole.log(c); //Output \"3\"\n```", "```js\nlet {[\"first\"+\"Name\"]: x} = { firstName: \"Eden\" };\nconsole.log(x); //Output \"Eden\"\n```", "```js\nvar {name, otherInfo: {age}} = {name: \"Eden\", otherInfo: {age: 23}};\nconsole.log(name, age); //Eden 23\n```", "```js\nfunctionmyFunction({name = 'Eden', age = 23, profession = \"Designer\"} = {})\n{\n  console.log(name, age, profession); //Output \"John 23 Designer\"\n}\n\nmyFunction({name: \"John\", age: 23});\n```", "```js\nlet circleArea = (pi, r) => {\n  let area = pi * r * r;\n  return area;\n}\n\nlet result = circleArea(3.14, 3);\n\nconsole.log(result); //Output \"28.26\"\n```", "```js\nVar circleArea = function(pi, r) {\n  var area = pi * r * r;\n  return area;\n}\n\nvar result = circleArea(3.14, 3);\n\nconsole.log(result); //Output \"28.26\"\n```", "```js\nlet circleArea = (pi, r) => pi * r * r;\nlet result = circleArea(3.14, 3);\n\nconsole.log(result); //Output \"28.26\"\n```", "```js\nvar object = {\n  f1: function(){\n    console.log(this);\n    var f2 = function(){ console.log(this); }\n    f2();\n    setTimeout(f2, 1000);\n  }\n}\n\nobject.f1();\n```", "```js\nObject\nWindow\nWindow\n```", "```js\nvar object = {\n  f1: () => {\n    console.log(this);\n    var f2 = () => { console.log(this); }\n    f2();\n    setTimeout(f2, 1000);\n  }\n}\n\nobject.f1();\n```", "```js\nWindow\nWindow\nWindow\n```", "```js\nvar x = 1, y = 2;\nvar object = {\n  x: x,\n  y: y\n};\n\nconsole.log(object.x); //output \"1\"\n```", "```js\nlet x = 1, y = 2;\nlet object = { x, y };\n\nconsole.log(object.x); //output \"1\"\n```", "```js\nlet object = {\n  myFunction(){\n    console.log(\"Hello World!!!\"); //Output \"Hello World!!!\"\n  }\n}\n\nobject.myFunction();\n```", "```js\nvar object = {};\n\nobject[\"first\"+\"Name\"] = \"Eden\";//\"firstName\" is the property name\n\n//extract\nconsole.log(object[\"first\"+\"Name\"]); //Output \"Eden\"\n```", "```js\nlet object = {\n  [\"first\" + \"Name\"]: \"Eden\",\n};\n\n//extract\nconsole.log(object[\"first\" + \"Name\"]); //Output \"Eden\"\n```"]