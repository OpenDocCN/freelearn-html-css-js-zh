- en: '[CHAPTER 6](toc.xhtml#c06)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第6章](toc.xhtml#c06)'
- en: '[REST API for Project and Task Modules](toc.xhtml#c06)'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[项目与任务模块的REST API](toc.xhtml#c06)'
- en: '[Introduction](toc.xhtml#s172a)'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[简介](toc.xhtml#s172a)'
- en: In project management systems (PMS), a “*project module*” typically refers to
    a specific component or core module. These modules are designed to streamline
    various aspects of project planning, execution, and monitoring, making it easier
    for project managers and teams to manage complex projects efficiently.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目管理系统中（PMS），“*项目模块*”通常指的是一个特定的组件或核心模块。这些模块旨在简化项目规划、执行和监控的各个方面，使项目经理和团队能够更有效地管理复杂项目。
- en: Each project module typically focuses on a specific area, such as task management,
    resource allocation, time tracking, or reporting, providing dedicated tools and
    features to support those functions. These modules are an essential part of PMS,
    enabling users to customize their project management approach based on the specific
    needs of their projects. The task module plays a crucial role in project management
    by providing a centralized and organized approach for managing and executing tasks
    within a project. It enhances collaboration, improves visibility into task progress,
    and helps ensure that projects are completed on time and within scope.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目模块通常专注于特定领域，例如任务管理、资源分配、时间跟踪或报告，提供专门的工具和功能来支持这些功能。这些模块是PMS的重要组成部分，使用户能够根据其项目的具体需求定制项目管理方法。任务模块在项目管理中发挥着关键作用，它提供了一种集中和有序的方法来管理和执行项目中的任务。它增强了协作，提高了对任务进度的可见性，并有助于确保项目按时按范围完成。
- en: '[Structure](toc.xhtml#s173a)'
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[结构](toc.xhtml#s173a)'
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Project Management with Input Validation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带输入验证的项目管理
- en: Project Creation API with Assigned User
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带分配用户的创建项目API
- en: Project Update, List, Details of Project, and Delete APIs
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目更新、列表、项目详情和删除API
- en: Task Management with Input Validation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带输入验证的任务管理
- en: Task Creation API with Assigned User to Task
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带分配用户的创建任务API
- en: Task Update, List, Details of Task, and Delete APIs
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务更新、列表、任务详情和删除API
- en: '[Project Management](toc.xhtml#s174a)'
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[项目管理](toc.xhtml#s174a)'
- en: The project module serves as a centralized platform that empowers project managers
    and teams to efficiently plan, execute, and complete projects while maintaining
    control, transparency, and collaboration.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 项目模块作为一个集中平台，使项目经理和团队能够高效地规划、执行和完成项目，同时保持控制、透明度和协作。
- en: '[Project Service](toc.xhtml#s175a)'
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[项目服务](toc.xhtml#s175a)'
- en: 'We have previously defined the entity for the project in *[Chapter 4, Planning
    the App](c04.xhtml)*, so let’s start by first creating the Project Service as
    `**projects_service.ts**` in the project directory with the following code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前在*[第4章，规划应用](c04.xhtml)*中定义了项目实体，因此让我们首先在项目目录中创建名为`**projects_service.ts**`的`Project
    Service`，以下为相关代码：
- en: '`import { Repository } from ''typeorm'';`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { Repository } from ''typeorm'';`'
- en: '`import { BaseService } from ''../../utils/base_service'';`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { BaseService } from ''../../utils/base_service'';`'
- en: '`import { DatabaseUtil } from ''../../utils/db'';`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { DatabaseUtil } from ''../../utils/db'';`'
- en: '`import { Projects } from ''./projects_entity'';`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { Projects } from ''./projects_entity'';`'
- en: '`export class ProjectsService extends BaseService<Projects> {`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`export class ProjectsService extends BaseService<Projects> {`'
- en: '`constructor() {`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`constructor() {`'
- en: '`let projectRepository: Repository<Projects> | null = null;`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`let projectRepository: Repository<Projects> | null = null;`'
- en: '`projectRepository = new DatabaseUtil().getRepository(Projects);`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`projectRepository = new DatabaseUtil().getRepository(Projects);`'
- en: '`super(projectRepository);`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`super(projectRepository);`'
- en: '`}`'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: The ``**`ProjectsService`**`` class extends a `**BaseService**` and uses TypeORM
    to work with the Projects entity in the database. The repository for this entity
    is obtained from the `**DatabaseUtil**` class. The service is structured to facilitate
    database operations on the `**Projects**` entity, such as creating, retrieving,
    updating, and deleting records.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`**`ProjectsService`**`类继承自`**BaseService**`，并使用TypeORM与数据库中的`**Projects**`实体一起工作。该实体的存储库是从`**DatabaseUtil**`类中获得的。该服务结构旨在简化对`**Projects**`实体的数据库操作，例如创建、检索、更新和删除记录。'
- en: 'We will develop the REST API for the project as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按以下方式开发项目的REST API：
- en: '`**Add**` Project'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**添加**` 项目'
- en: '`**GetAll**` Project'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**获取所有**` 项目'
- en: '`**GetOne**` Project'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**获取单个**` 项目'
- en: '`**Update**` Project'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**更新**` 项目'
- en: '`**Delete**` Project'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**删除**` 项目'
- en: '[Input Validation](toc.xhtml#s176a)'
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[输入验证](toc.xhtml#s176a)'
- en: Input validation in a project module plays a critical role in ensuring the integrity
    and reliability of data used within a project management system. It involves examining
    and verifying user inputs or data received from various sources to ensure that
    it adheres to predefined criteria and meets the required standards.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目模块中进行的输入验证在确保项目管理系统中使用的数据的完整性和可靠性方面发挥着关键作用。它涉及检查和验证来自各种来源的用户输入或接收到的数据，以确保其符合预定义的标准并满足所需的标准。
- en: 'Add the following function, `**checkValidDate**`, in the `**common.ts**` file
    in the utils directory to validate a date:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在utils目录下的`**common.ts**`文件中添加以下函数，`**checkValidDate**`，用于验证日期：
- en: '`export const **checkValidDate** = function (value) {`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`export const **checkValidDate** = function (value) {`'
- en: '`if (!moment(value, ''YYYY-MM-DD HH:mm:ss'', true).isValid()) {`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`if (!moment(value, ''YYYY-MM-DD HH:mm:ss'', true).isValid()) {`'
- en: '`return false;`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`return false;`'
- en: '`}`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`return true;`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`return true;`'
- en: '`};`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`};`'
- en: 'Now, add `**validProjectInput**` in the `**projects_routes.ts**` file with
    the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`**projects_routes.ts**`文件中添加`**validProjectInput**`，代码如下：
- en: '`import { Express } from ''express'';`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { Express } from ''express'';`'
- en: '`import { ProjectController } from ''./projects_controller'';`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { ProjectController } from ''./projects_controller'';`'
- en: '`import { body } from ''express-validator'';`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { body } from ''express-validator'';`'
- en: '`import { validate } from ''../../utils/validator'';`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { validate } from ''../../utils/validator'';`'
- en: '`import moment from ''moment'';`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`import moment from ''moment'';`'
- en: '`import { authorize } from ''../../utils/auth_util'';`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { authorize } from ''../../utils/auth_util'';`'
- en: '`import { checkValidDate } from ''../../utils/common''`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { checkValidDate } from ''../../utils/common''`'
- en: '`const **validProjectInput** = [`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`const **validProjectInput** = [`'
- en: '`body(''name'').trim().notEmpty().withMessage(''It should be required''),`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`body(''name'').trim().notEmpty().withMessage(''It should be required''),`'
- en: '`body(''user_ids'').isArray().withMessage(''It should be ids of users array''),`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`body(''user_ids'').isArray().withMessage(''It should be ids of users array''),`'
- en: '`body(''start_time'').custom((value) => {`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`body(''start_time'').custom((value) => {`'
- en: '`if (!**checkValidDate**(value)) {`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`if (!**checkValidDate**(value)) {`'
- en: '`throw new Error(''Invalid date format YYYY-MM-DD HH:mm:ss'');`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`throw new Error(''Invalid date format YYYY-MM-DD HH:mm:ss'');`'
- en: '`}`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`const startTime = new Date(value);`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`const startTime = new Date(value);`'
- en: '`const currentTime = new Date();`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`const currentTime = new Date();`'
- en: '`if (startTime <= currentTime) {`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`if (startTime <= currentTime) {`'
- en: '`throw new Error(''Start time must be greater than the current time'');`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`throw new Error(''Start time must be greater than the current time'');`'
- en: '`}`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`return true;`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`return true;`'
- en: '`}),`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`}),`'
- en: '`body(''end_time'').custom((value, { req }) => {`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`body(''end_time'').custom((value, { req }) => {`'
- en: '`if (!**checkValidDate**(value)) {`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`if (!**checkValidDate**(value)) {`'
- en: '`throw new Error(''Invalid date format YYYY-MM-DD HH:mm:ss'');`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`throw new Error(''Invalid date format YYYY-MM-DD HH:mm:ss'');`'
- en: '`}`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`const startTime = new Date(req.body.start_time);`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`const startTime = new Date(req.body.start_time);`'
- en: '`const endTime = new Date(value);`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`const endTime = new Date(value);`'
- en: '`if (endTime <= startTime) {`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`if (endTime <= startTime) {`'
- en: '`throw new Error(''End time must be greater than the start time'');`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`throw new Error(''End time must be greater than the start time'');`'
- en: '`}`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`return true;`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`return true;`'
- en: '`})`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`})`'
- en: '`];`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`];`'
- en: 'Here are the details of the key parts of the preceding code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是前面代码关键部分的详细信息：
- en: '`**validProjectInput**` **Array**: This array contains a series of validation
    checks for each input field expected in a project. Each element of this array
    is a validator function that checks a specific aspect of the data.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**validProjectInput**` **数组**：此数组包含对项目中预期每个输入字段的一系列验证检查。数组的每个元素都是一个验证函数，用于检查数据的特定方面。'
- en: '`**body(''name'').trim().notEmpty().withMessage(''It should be required'')**`:
    This validates the name field in the request `**body. .trim()**` removes any leading
    or trailing whitespace from the input; `**.notEmpty()**` checks that the field
    is not empty; `**.withMessage(''It should be required'')**` provides a custom
    error message if the validation fails, indicating that the `**''name''**` field
    is required.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**body(''name'').trim().notEmpty().withMessage(''It should be required'')**`：此验证请求体中的名称字段，`**.trim()**`从输入中删除任何前导或尾随空白字符；`**.notEmpty()**`检查该字段是否不为空；`**.withMessage(''It
    should be required'')**`在验证失败时提供自定义错误消息，指出`**''name''**`字段是必需的。'
- en: '`**body(''user_ids'').isArray().withMessage(''It should be ids of users array'')**`:
    This validates the `**user_ids**` field in the request `**body. .isArray()**`
    checks that the field is an array; .`**withMessage(''It should be ids of users
    array'')**` provides a custom error message if the validation fails, specifying
    that the ''`**user_ids**`'' field should be an array of user IDs.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**body(''user_ids'').isArray().withMessage(''It should be ids of users array'')**`：此验证请求体中的`**user_ids**`字段，`**.isArray()**`检查该字段是否为数组；`**.withMessage(''It
    should be ids of users array'')**`在验证失败时提供自定义错误消息，指定`**user_ids**`字段应该是用户ID的数组。'
- en: '`**body(''start_time'').custom((value) => { /* … */ })**`: This validates the
    start_time field in the request body using a custom validation function. The custom
    validation function checks if the value (the ''`**start_time**`'' value) is in
    a valid date format (`**YYYY-MM-DD HH:mm:ss**`). It then compares the ''`**start_time**`''
    with the current time, ensuring that the ''`**start_time**`'' is greater than
    the current time. If any of these checks fail, it throws an error with a custom
    message.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**body(''start_time'').custom((value) => { /* … */ })**`: 这使用自定义验证函数验证请求体中的
    start_time 字段。自定义验证函数检查值（即 ''`**start_time**`'' 的值）是否在有效的日期格式（`**YYYY-MM-DD HH:mm:ss**`）中。然后它将
    ''`**start_time**`'' 与当前时间进行比较，确保 ''`**start_time**`'' 大于当前时间。如果这些检查中的任何一个失败，它将抛出一个带有自定义消息的错误。'
- en: '`**body(''end_time'').custom((value, { req }) => { /* … */ })**`: This validates
    the `**end_time**` field in the request body using another custom validation function.
    Similar to the previous custom function, it checks if value (the ''`**end_time**`''
    value) is in a valid date format (`**YYYY-MM-DD HH:mm:ss**`). It also accesses
    `**req.body.start_time**` to compare the ''`**end_time**`'' with the ''`**start_time**`''
    to ensure that ''`**end_time**`'' is greater than ''`**start_time**`''. If any
    of these checks fail, it throws an error with a custom message'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**body(''end_time'').custom((value, { req }) => { /* … */ })**`: 这使用另一个自定义验证函数验证请求体中的
    `**end_time**` 字段。类似于之前的自定义函数，它检查值（即 ''`**end_time**`'' 的值）是否在有效的日期格式（`**YYYY-MM-DD
    HH:mm:ss**`）中。它还访问 `**req.body.start_time**` 来比较 ''`**end_time**`'' 与 ''`**start_time**`''，以确保
    ''`**end_time**`'' 大于 ''`**start_time**`''。如果这些检查中的任何一个失败，它将抛出一个带有自定义消息的错误'
- en: '[Add Project](toc.xhtml#s177a)'
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[添加项目](toc.xhtml#s177a)'
- en: When utilizing the REST API to add a project, you typically furnish the required
    data within the request body, encompassing details such as the project’s name,
    description, and any associated attributes. The designated API endpoint for this
    task is purpose-built to accept and validate this data in accordance with predefined
    criteria, culminating in the creation of a new project rooted in the supplied
    information.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 REST API 添加项目时，你通常在请求体中提供所需的数据，包括项目名称、描述以及任何相关属性。为此任务指定的 API 端点专门设计用于接受并验证这些数据，根据预定义的标准，最终基于提供的信息创建一个新项目。
- en: 'We have previously created `**projects_controller.ts**` as a skeleton class.
    Now, let’s change it with an extended Base Controller and use base service to
    perform database operations with the following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经创建了一个作为骨架类的 `**projects_controller.ts**`。现在，让我们使用扩展的基控制器来更改它，并使用基础服务执行以下代码进行数据库操作：
- en: '`import { Response, Request } from ''express'';`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { Response, Request } from ''express'';`'
- en: '`import { hasPermission } from ''../../utils/auth_util'';`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { hasPermission } from ''../../utils/auth_util'';`'
- en: '`import { ProjectsService } from ''./projects_service'';`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { ProjectsService } from ''./projects_service'';`'
- en: '`import { UsersUtil } from ''../users/users_controller'';`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { UsersUtil } from ''../users/users_controller'';`'
- en: '`export class ProjectController extends BaseController {`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`export class ProjectController extends BaseController {`'
- en: '`/**`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`/**`'
- en: '`* Handles the addition of a new user.`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`* 处理新用户的添加。`'
- en: '`* @param {object} req - The request object.`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`* @param {object} req - 请求对象。`'
- en: '`* @param {object} res - The response object.`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`* @param {object} res - 响应对象。`'
- en: '`*/`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`*/`'
- en: '`public async addHandler(req: Request, res: Response): Promise<void> {`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`public async addHandler(req: Request, res: Response): Promise<void> {`'
- en: '`if (!hasPermission(req.user.rights, ''add_project'')) {`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`if (!hasPermission(req.user.rights, ''add_project'')) {`'
- en: '`res.status(403).json({ statusCode: 403, status: ''error'', message: ''Unauthorised''
    });`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.status(403).json({ statusCode: 403, status: ''error'', message: ''未授权''
    });`'
- en: '`return;`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`return;`'
- en: '`}`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`try {`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`try {`'
- en: '`// Create an instance of the ProjectService`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 创建 ProjectService 的实例`'
- en: '`const service = new ProjectsService();`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`const service = new ProjectsService();`'
- en: '`// Extract project data from the request body`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 从请求体中提取项目数据`'
- en: '`const project = req.body;`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`const project = req.body;`'
- en: '`// Check if the provided user_ids are valid`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 检查提供的 user_ids 是否有效`'
- en: '`const isValidUsers = await UsersUtil.checkValidUserIds`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`const isValidUsers = await UsersUtil.checkValidUserIds`'
- en: '`(project.user_ids);`'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`(project.user_ids);`'
- en: '`if (!isValidUsers) {`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`if (!isValidUsers) {`'
- en: '`// If user_ids are invalid, send an error response`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 如果 user_ids 无效，发送错误响应`'
- en: '`res.status(400).json({ statusCode: 400, status: ''error'', message: ''Invalid
    user_ids'' });`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.status(400).json({ statusCode: 400, status: ''error'', message: ''无效的用户
    IDs'' });`'
- en: '`return;`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`return;`'
- en: '`}`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`// If user_ids are valid, create the user`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 如果 user_ids 有效，创建用户`'
- en: '`const createdProject = await service.create(project);`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`const createdProject = await service.create(project);`'
- en: '`res.status(201).json(createdProject);`'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.status(201).json(createdProject);`'
- en: '`} catch (error) {`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`} catch (error) {`'
- en: '`// Handle errors and send an appropriate response`'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 处理错误并发送适当的响应`'
- en: '``console.error(`Error while addUser => ${error.message}`);``'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '``console.error(`添加用户时出错 => ${error.message}`);``'
- en: '`res.status(500).json({ statusCode: 500, status: ''error'', message: ''Internal
    server error'' });`'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.status(500).json({ statusCode: 500, status: ''error'', message: ''内部服务器错误''
    });`'
- en: '`}`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '[PRE0]` `public async getAllHandler(req: Request, res: Response) {}`    `public
    async getOneHandler(req: Request, res: Response) {}`    `public async updateHandler(req:
    Request, res: Response) {}`    `public async deleteHandler(req: Request, res:
    Response) {}`    `}`    Add `**checkValidUserIds function**` in `**UserUtil**`
    Class with following code that checks if given `**userIds**` are valid and exist
    in the database or not:    `public static async checkValidUserIds(user_ids: string[])
    {`    `const userService = new UsersService();`    `// Query the database to check
    if all user_ids are valid`    `const users = await userService.findByIds(user_ids);`    `//
    Check if all user_ids are found in the database`    `return users.data.length
    === user_ids.length;`    `}`    In this context, the `**addHandler**` method acquires
    the data supplied in the incoming request body. It then proceeds to transmit this
    data to the base service by invoking the create method, which is tasked with incorporating
    this information into the database. Furthermore, we are including the addition
    of users to the project, associating users with the project during the project
    creation process.    Now, let’s call `**addHandler**` in project routes with change
    in the `**projects_router.ts**` file as follows:    `export class ProjectRoutes
    {`    `private baseEndPoint = ''/api/projects'';`    `constructor(app: Express)
    {`    `const controller = new ProjectController();`    `**app.route(this.baseEndPoint)**`    `**.all(authorize)**`    `**.post(validate(validProjectInput),
    controller.addHandler);**`    `}`    `}`    We have established routes for adding
    project and incorporated middleware to validate requests before inserting data
    into the database.    Once the API is successfully triggered, the following data
    will be added in PostgreSQL Database:  ![](img/6.1.jpg)  **Figure 6.1:** Postgres
    Added Project Output    **REST API Add Project**    **Request**    `URL : http://127.0.0.1:3000/api/projects`    `Method:
    POST`    `body :`    `{`    `"name":"Project Management",`    `"description":"This
    Project is about for Management",`    `"User_ids": ["b930d02c-43af-4875-b7e9-546c9f4c23dd",`    `"611b346e-be39-4a7e-96d1-e7421193bd5a",
    "d166945a-f85d-485c-bdac-0c8056b3188a"],`    `"start_time":"2023-09-25 00:00:00",`    `"end_time":"2023-12-15
    00:00:00"`    `}`    **Response**    `{`    `"statusCode": 201,`    `"status":
    "success",`    `"data": {`    `"project_id": "c2e9b17b-0af2-453b-b0c9-43ea2d304dca",`    `"name":
    "Project Management",`    `"description": "This Project is about for Management",`    `"user_ids":
    [`    `"b930d02c-43af-4875-b7e9-546c9f4c23dd",`    `"611b346e-be39-4a7e-96d1-e7421193bd5a",`    `"d166945a-f85d-485c-bdac-0c8056b3188a"`    `],`    `"start_time":
    "2023-09-25 00:00:00",`    `"end_time": "2023-12-15 00:00:00",`    `"created_at":
    "2023-09-23T17:23:36.061Z",`    `"updated_at": "2023-09-23T17:23:36.061Z"`    `}`    `}`  ![](img/6.2.jpg)  **Figure
    6.2:** Postman Response of Add Project Data 201    In the case of a unique project
    name, trying again with the same request gives an error as a `**409**` conflict
    code:    `{`    `"statusCode": 409,`    `"status": "error",`    `"message": "Key
    (name)=(Project Management) already exists."`    `}`  ![](img/6.3.jpg)  **Figure
    6.3:** Postman Response of Already Exists Project 409    In another case, if you
    change in `**start_time**` less than current time, then it gives an error for
    a Bad Request with a `**400**` status code as follows:    `{`    `"statusCode":
    400,`    `"status": "error",`    `"errors": [`    `{`    `"rights": "Start time
    must be greater than the current time"`    `}`    `]`    `}`  ![](img/6.4.jpg)  **Figure
    6.4:** Postman Response of Invalid Date Given to Project 400    # [GetAll Project](toc.xhtml#s178a)    After
    successfully adding a project to the database, the next step involves retrieving
    the newly inserted project from the database. To achieve this, update the `**getAllHandler**`
    method in the `**projects_controller.ts**` file with the following code:    `public
    async **getAllHandler**(req: Request, res: Response): Promise<void> {`    `if
    (!hasPermission(req.user.rights, ''get_all_projects'')) {`    `res.status(403).json({
    statusCode: 403, status: ''error'', message: ''Unauthorised'' });`    `return;`    `}`   [PRE1]
    `const service = new ProjectsService();`    `const result = await service.findAll(req.query);`    `for
    (const project of result.data) {`    `project[''users''] = await UsersUtil.getUsernamesById(project.user_ids);`    `delete
    project.user_ids;`    `}`    `res.status(result.statusCode).json(result);`    `}`    In
    the preceding code, we send the username along with the `**user_id**` of associated
    users in the project. So, we have created a method in the user utils that gives
    the username from `**user_id**` with the following code:    `public static async
    **getUsernamesById**(user_ids: string[]) {`    `const userService = new UsersService();`    `//
    Query the database to check if all user_ids are valid`    `const queryResult =
    await userService.findByIds(user_ids);`    `if (queryResult.statusCode === 200)
    {`    `const users = queryResult.data;`    `const usernames = users.map((i) =>
    {`    `return {`    `''username'': i.username,`    `''user_id'': i.user_id`    `};`    `});`    `return
    usernames;`    `}`    `return [];`    `}`    The [PRE2]js**TasksService`**`` class
    inherits from a base service class, allowing it to interact with a database repository
    for managing tasks. The constructor initializes the database repository for tasks,
    facilitating database operations for tasks-related functionality in the application.    We
    will develop the REST API for the project as follows:    *   `**Add**` Task *   `**GetAll**`
    Task *   `**GetOne**` Task *   `**Update**` Task *   `**Delete**` Task    # [Input
    Validation](toc.xhtml#s186a)    Task input validation is the process of ensuring
    that data provided as input for tasks in a software application conforms to predefined
    criteria and constraints.    Now, let’s add `**validTaskInput**` in the `**tasks_routes.ts**`
    file with the following code:    `import { Express } from ''express'';`    `import
    { TaskController } from ''./tasks_controller'';`    `import { body } from ''express-validator'';`    `import
    { checkValidDate } from ''../../utils/common'';`    `import { validate } from
    ''../../utils/validator'';`    `import { authorize } from ''../../utils/auth_util'';`   [PRE3]
    [PRE4] [PRE5]'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0]` `public async getAllHandler(req: Request, res: Response) {}`    `public
    async getOneHandler(req: Request, res: Response) {}`    `public async updateHandler(req:
    Request, res: Response) {}`    `public async deleteHandler(req: Request, res:
    Response) {}`    `}`    在`**UserUtil**`类中添加`**checkValidUserIds function**`，以下代码用于检查给定的`**userIds**`是否有效且存在于数据库中：    `public
    static async checkValidUserIds(user_ids: string[]) {`    `const userService =
    new UsersService();`    `// 查询数据库以检查所有user_ids是否有效`    `const users = await userService.findByIds(user_ids);`    `//
    检查所有user_ids是否在数据库中找到`    `return users.data.length === user_ids.length;`    `}`    在此上下文中，`**addHandler**`方法获取传入请求体中的数据。然后通过调用创建方法将此数据传输到基础服务，该创建方法负责将此信息纳入数据库。此外，我们还包括在项目创建过程中将用户添加到项目中的功能，将用户与项目关联。    现在，让我们在`**projects_router.ts**`文件中调用`**addHandler**`，如下所示：    `export
    class ProjectRoutes {`    `private baseEndPoint = ''/api/projects'';`    `constructor(app:
    Express) {`    `const controller = new ProjectController();`    `**app.route(this.baseEndPoint)**`    `**.all(authorize)**`    `**.post(validate(validProjectInput),
    controller.addHandler);**`    `}`    `}`    我们已经为添加项目建立了路由，并在将数据插入数据库之前添加了中间件来验证请求。    一旦API成功触发，以下数据将被添加到PostgreSQL数据库中：  ![](img/6.1.jpg)  **图6.1：Postgres添加项目输出**    **REST
    API添加项目**    **请求**    `URL : http://127.0.0.1:3000/api/projects`    `方法: POST`    `body
    :`    `{`    `"name":"项目管理",`    `"description":"此项目是关于管理的",`    `"User_ids":
    ["b930d02c-43af-4875-b7e9-546c9f4c23dd",`    `"611b346e-be39-4a7e-96d1-e7421193bd5a",
    "d166945a-f85d-485c-bdac-0c8056b3188a"],`    `"start_time":"2023-09-25 00:00:00",`    `"end_time":"2023-12-15
    00:00:00"`    `}`    **响应**    `{`    `"statusCode": 201,`    `"status": "success",`    `"data":
    {`    `"project_id": "c2e9b17b-0af2-453b-b0c9-43ea2d304dca",`    `"name": "项目管理",`    `"description":
    "此项目是关于管理的",`    `"user_ids": [`    `"b930d02c-43af-4875-b7e9-546c9f4c23dd",`    `"611b346e-be39-4a7e-96d1-e7421193bd5a",`    `"d166945a-f85d-485c-bdac-0c8056b3188a"`    `],`    `"start_time":
    "2023-09-25 00:00:00",`    `"end_time": "2023-12-15 00:00:00",`    `"created_at":
    "2023-09-23T17:23:36.061Z",`    `"updated_at": "2023-09-23T17:23:36.061Z"`    `}`    `}`    `}`  ![](img/6.2.jpg)  **图6.2：Postman添加项目数据的响应201**    如果尝试使用相同的请求添加具有唯一项目名称的项目，则会收到一个`**409**`冲突代码的错误：    `{`    `"statusCode":
    409,`    `"status": "error",`    `"message": "键（name）=(项目管理)已存在。"`    `}`  ![](img/6.3.jpg)  **图6.3：Postman已存在项目响应409**    在另一种情况下，如果您将`**start_time**`更改为早于当前时间，则会收到一个`**400**`状态码的Bad
    Request错误，如下所示：    `{`    `"statusCode": 400,`    `"status": "error",`    `"errors":
    [`    `{`    `"rights": "开始时间必须晚于当前时间"`    `}`    `]`    `}`  ![](img/6.4.jpg)  **图6.4：Postman给项目提供无效日期的响应400**    #
    [GetAll Project](toc.xhtml#s178a)    在成功将项目添加到数据库后，下一步是从数据库中检索新插入的项目。为此，更新`**projects_controller.ts**`文件中的`**getAllHandler**`方法，如下所示：    `public
    async **getAllHandler**(req: Request, res: Response): Promise<void> {`    `if
    (!hasPermission(req.user.rights, ''get_all_projects'')) {`    `res.status(403).json({
    statusCode: 403, status: ''error'', message: ''未授权'' });`    `return;`    `}`   [PRE1]
    `const service = new ProjectsService();`    `const result = await service.findAll(req.query);`    `for
    (const project of result.data) {`    `project[''users''] = await UsersUtil.getUsernamesById(project.user_ids);`    `delete
    project.user_ids;`    `}`    `res.status(result.statusCode).json(result);`    `}`    在前面的代码中，我们发送了与项目关联用户的`**user_id**`以及用户名。因此，我们在用户工具中创建了一个方法，从`**user_id**`获取用户名，如下所示：    `public
    static async **getUsernamesById**(user_ids: string[]) {`    `const userService
    = new UsersService();`    `// 查询数据库以检查所有user_ids是否有效`    `const queryResult =
    await userService.findByIds(user_ids);`    `if (queryResult.statusCode === 200)
    {`    `const users = queryResult.data;`    `const usernames = users.map((i) =>
    {`    `return {`    `''username'': i.username,`    `''user_id'': i.user_id`    `};`    `});`    `return
    usernames;`    `}`    `return [];`    `}`    `The [PRE2]js**TasksService**``类从基类继承，允许它与数据库存储库交互，以管理任务。构造函数初始化任务数据库存储库，便于应用程序中与任务相关的功能进行数据库操作。    我们将按以下方式开发项目的REST
    API：    *   `**添加**`任务    *   `**获取所有**`任务    *   `**获取一个**`任务    *   `**更新**`任务    *   `**删除**`任务    #
    [Input Validation](toc.xhtml#s186a)    任务输入验证是确保作为软件应用程序中任务输入提供的数据符合预定义标准和约束的过程。    现在，让我们在`**tasks_routes.ts**`文件中添加`**validTaskInput**`，如下所示：    `import
    { Express } from ''express'';`    `import { TaskController } from ''./tasks_controller'';`    `import
    { body } from ''express-validator'';`    `import { checkValidDate } from ''../../utils/common'';`    `import
    { validate } from ''../../utils/validator'';`    `import { authorize } from ''../../utils/auth_util'';`   [PRE3]
    [PRE4] [PRE5]'
