- en: '[CHAPTER 6](toc.xhtml#c06)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[REST API for Project and Task Modules](toc.xhtml#c06)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Introduction](toc.xhtml#s172a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In project management systems (PMS), a “*project module*” typically refers to
    a specific component or core module. These modules are designed to streamline
    various aspects of project planning, execution, and monitoring, making it easier
    for project managers and teams to manage complex projects efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Each project module typically focuses on a specific area, such as task management,
    resource allocation, time tracking, or reporting, providing dedicated tools and
    features to support those functions. These modules are an essential part of PMS,
    enabling users to customize their project management approach based on the specific
    needs of their projects. The task module plays a crucial role in project management
    by providing a centralized and organized approach for managing and executing tasks
    within a project. It enhances collaboration, improves visibility into task progress,
    and helps ensure that projects are completed on time and within scope.
  prefs: []
  type: TYPE_NORMAL
- en: '[Structure](toc.xhtml#s173a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Project Management with Input Validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project Creation API with Assigned User
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Project Update, List, Details of Project, and Delete APIs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Task Management with Input Validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Task Creation API with Assigned User to Task
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Task Update, List, Details of Task, and Delete APIs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Project Management](toc.xhtml#s174a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The project module serves as a centralized platform that empowers project managers
    and teams to efficiently plan, execute, and complete projects while maintaining
    control, transparency, and collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: '[Project Service](toc.xhtml#s175a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have previously defined the entity for the project in *[Chapter 4, Planning
    the App](c04.xhtml)*, so let’s start by first creating the Project Service as
    `**projects_service.ts**` in the project directory with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Repository } from ''typeorm'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { BaseService } from ''../../utils/base_service'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { DatabaseUtil } from ''../../utils/db'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Projects } from ''./projects_entity'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`export class ProjectsService extends BaseService<Projects> {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`constructor() {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`let projectRepository: Repository<Projects> | null = null;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`projectRepository = new DatabaseUtil().getRepository(Projects);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`super(projectRepository);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: The ``**`ProjectsService`**`` class extends a `**BaseService**` and uses TypeORM
    to work with the Projects entity in the database. The repository for this entity
    is obtained from the `**DatabaseUtil**` class. The service is structured to facilitate
    database operations on the `**Projects**` entity, such as creating, retrieving,
    updating, and deleting records.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will develop the REST API for the project as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**Add**` Project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**GetAll**` Project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**GetOne**` Project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**Update**` Project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**Delete**` Project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Input Validation](toc.xhtml#s176a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Input validation in a project module plays a critical role in ensuring the integrity
    and reliability of data used within a project management system. It involves examining
    and verifying user inputs or data received from various sources to ensure that
    it adheres to predefined criteria and meets the required standards.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following function, `**checkValidDate**`, in the `**common.ts**` file
    in the utils directory to validate a date:'
  prefs: []
  type: TYPE_NORMAL
- en: '`export const **checkValidDate** = function (value) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`if (!moment(value, ''YYYY-MM-DD HH:mm:ss'', true).isValid()) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`return false;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`return true;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`};`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add `**validProjectInput**` in the `**projects_routes.ts**` file with
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Express } from ''express'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { ProjectController } from ''./projects_controller'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { body } from ''express-validator'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { validate } from ''../../utils/validator'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import moment from ''moment'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { authorize } from ''../../utils/auth_util'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { checkValidDate } from ''../../utils/common''`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const **validProjectInput** = [`'
  prefs: []
  type: TYPE_NORMAL
- en: '`body(''name'').trim().notEmpty().withMessage(''It should be required''),`'
  prefs: []
  type: TYPE_NORMAL
- en: '`body(''user_ids'').isArray().withMessage(''It should be ids of users array''),`'
  prefs: []
  type: TYPE_NORMAL
- en: '`body(''start_time'').custom((value) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`if (!**checkValidDate**(value)) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`throw new Error(''Invalid date format YYYY-MM-DD HH:mm:ss'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const startTime = new Date(value);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const currentTime = new Date();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`if (startTime <= currentTime) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`throw new Error(''Start time must be greater than the current time'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`return true;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}),`'
  prefs: []
  type: TYPE_NORMAL
- en: '`body(''end_time'').custom((value, { req }) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`if (!**checkValidDate**(value)) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`throw new Error(''Invalid date format YYYY-MM-DD HH:mm:ss'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const startTime = new Date(req.body.start_time);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const endTime = new Date(value);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`if (endTime <= startTime) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`throw new Error(''End time must be greater than the start time'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`return true;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`})`'
  prefs: []
  type: TYPE_NORMAL
- en: '`];`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the details of the key parts of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**validProjectInput**` **Array**: This array contains a series of validation
    checks for each input field expected in a project. Each element of this array
    is a validator function that checks a specific aspect of the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**body(''name'').trim().notEmpty().withMessage(''It should be required'')**`:
    This validates the name field in the request `**body. .trim()**` removes any leading
    or trailing whitespace from the input; `**.notEmpty()**` checks that the field
    is not empty; `**.withMessage(''It should be required'')**` provides a custom
    error message if the validation fails, indicating that the `**''name''**` field
    is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**body(''user_ids'').isArray().withMessage(''It should be ids of users array'')**`:
    This validates the `**user_ids**` field in the request `**body. .isArray()**`
    checks that the field is an array; .`**withMessage(''It should be ids of users
    array'')**` provides a custom error message if the validation fails, specifying
    that the ''`**user_ids**`'' field should be an array of user IDs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**body(''start_time'').custom((value) => { /* … */ })**`: This validates the
    start_time field in the request body using a custom validation function. The custom
    validation function checks if the value (the ''`**start_time**`'' value) is in
    a valid date format (`**YYYY-MM-DD HH:mm:ss**`). It then compares the ''`**start_time**`''
    with the current time, ensuring that the ''`**start_time**`'' is greater than
    the current time. If any of these checks fail, it throws an error with a custom
    message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**body(''end_time'').custom((value, { req }) => { /* … */ })**`: This validates
    the `**end_time**` field in the request body using another custom validation function.
    Similar to the previous custom function, it checks if value (the ''`**end_time**`''
    value) is in a valid date format (`**YYYY-MM-DD HH:mm:ss**`). It also accesses
    `**req.body.start_time**` to compare the ''`**end_time**`'' with the ''`**start_time**`''
    to ensure that ''`**end_time**`'' is greater than ''`**start_time**`''. If any
    of these checks fail, it throws an error with a custom message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Add Project](toc.xhtml#s177a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When utilizing the REST API to add a project, you typically furnish the required
    data within the request body, encompassing details such as the project’s name,
    description, and any associated attributes. The designated API endpoint for this
    task is purpose-built to accept and validate this data in accordance with predefined
    criteria, culminating in the creation of a new project rooted in the supplied
    information.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have previously created `**projects_controller.ts**` as a skeleton class.
    Now, let’s change it with an extended Base Controller and use base service to
    perform database operations with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Response, Request } from ''express'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { hasPermission } from ''../../utils/auth_util'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { ProjectsService } from ''./projects_service'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { UsersUtil } from ''../users/users_controller'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`export class ProjectController extends BaseController {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`/**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`* Handles the addition of a new user.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`* @param {object} req - The request object.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`* @param {object} res - The response object.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`*/`'
  prefs: []
  type: TYPE_NORMAL
- en: '`public async addHandler(req: Request, res: Response): Promise<void> {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`if (!hasPermission(req.user.rights, ''add_project'')) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`res.status(403).json({ statusCode: 403, status: ''error'', message: ''Unauthorised''
    });`'
  prefs: []
  type: TYPE_NORMAL
- en: '`return;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`try {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Create an instance of the ProjectService`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const service = new ProjectsService();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Extract project data from the request body`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const project = req.body;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Check if the provided user_ids are valid`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const isValidUsers = await UsersUtil.checkValidUserIds`'
  prefs: []
  type: TYPE_NORMAL
- en: '`(project.user_ids);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`if (!isValidUsers) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// If user_ids are invalid, send an error response`'
  prefs: []
  type: TYPE_NORMAL
- en: '`res.status(400).json({ statusCode: 400, status: ''error'', message: ''Invalid
    user_ids'' });`'
  prefs: []
  type: TYPE_NORMAL
- en: '`return;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// If user_ids are valid, create the user`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const createdProject = await service.create(project);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`res.status(201).json(createdProject);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`} catch (error) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Handle errors and send an appropriate response`'
  prefs: []
  type: TYPE_NORMAL
- en: '``console.error(`Error while addUser => ${error.message}`);``'
  prefs: []
  type: TYPE_NORMAL
- en: '`res.status(500).json({ statusCode: 500, status: ''error'', message: ''Internal
    server error'' });`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]` `public async getAllHandler(req: Request, res: Response) {}`    `public
    async getOneHandler(req: Request, res: Response) {}`    `public async updateHandler(req:
    Request, res: Response) {}`    `public async deleteHandler(req: Request, res:
    Response) {}`    `}`    Add `**checkValidUserIds function**` in `**UserUtil**`
    Class with following code that checks if given `**userIds**` are valid and exist
    in the database or not:    `public static async checkValidUserIds(user_ids: string[])
    {`    `const userService = new UsersService();`    `// Query the database to check
    if all user_ids are valid`    `const users = await userService.findByIds(user_ids);`    `//
    Check if all user_ids are found in the database`    `return users.data.length
    === user_ids.length;`    `}`    In this context, the `**addHandler**` method acquires
    the data supplied in the incoming request body. It then proceeds to transmit this
    data to the base service by invoking the create method, which is tasked with incorporating
    this information into the database. Furthermore, we are including the addition
    of users to the project, associating users with the project during the project
    creation process.    Now, let’s call `**addHandler**` in project routes with change
    in the `**projects_router.ts**` file as follows:    `export class ProjectRoutes
    {`    `private baseEndPoint = ''/api/projects'';`    `constructor(app: Express)
    {`    `const controller = new ProjectController();`    `**app.route(this.baseEndPoint)**`    `**.all(authorize)**`    `**.post(validate(validProjectInput),
    controller.addHandler);**`    `}`    `}`    We have established routes for adding
    project and incorporated middleware to validate requests before inserting data
    into the database.    Once the API is successfully triggered, the following data
    will be added in PostgreSQL Database:  ![](img/6.1.jpg)  **Figure 6.1:** Postgres
    Added Project Output    **REST API Add Project**    **Request**    `URL : http://127.0.0.1:3000/api/projects`    `Method:
    POST`    `body :`    `{`    `"name":"Project Management",`    `"description":"This
    Project is about for Management",`    `"User_ids": ["b930d02c-43af-4875-b7e9-546c9f4c23dd",`    `"611b346e-be39-4a7e-96d1-e7421193bd5a",
    "d166945a-f85d-485c-bdac-0c8056b3188a"],`    `"start_time":"2023-09-25 00:00:00",`    `"end_time":"2023-12-15
    00:00:00"`    `}`    **Response**    `{`    `"statusCode": 201,`    `"status":
    "success",`    `"data": {`    `"project_id": "c2e9b17b-0af2-453b-b0c9-43ea2d304dca",`    `"name":
    "Project Management",`    `"description": "This Project is about for Management",`    `"user_ids":
    [`    `"b930d02c-43af-4875-b7e9-546c9f4c23dd",`    `"611b346e-be39-4a7e-96d1-e7421193bd5a",`    `"d166945a-f85d-485c-bdac-0c8056b3188a"`    `],`    `"start_time":
    "2023-09-25 00:00:00",`    `"end_time": "2023-12-15 00:00:00",`    `"created_at":
    "2023-09-23T17:23:36.061Z",`    `"updated_at": "2023-09-23T17:23:36.061Z"`    `}`    `}`  ![](img/6.2.jpg)  **Figure
    6.2:** Postman Response of Add Project Data 201    In the case of a unique project
    name, trying again with the same request gives an error as a `**409**` conflict
    code:    `{`    `"statusCode": 409,`    `"status": "error",`    `"message": "Key
    (name)=(Project Management) already exists."`    `}`  ![](img/6.3.jpg)  **Figure
    6.3:** Postman Response of Already Exists Project 409    In another case, if you
    change in `**start_time**` less than current time, then it gives an error for
    a Bad Request with a `**400**` status code as follows:    `{`    `"statusCode":
    400,`    `"status": "error",`    `"errors": [`    `{`    `"rights": "Start time
    must be greater than the current time"`    `}`    `]`    `}`  ![](img/6.4.jpg)  **Figure
    6.4:** Postman Response of Invalid Date Given to Project 400    # [GetAll Project](toc.xhtml#s178a)    After
    successfully adding a project to the database, the next step involves retrieving
    the newly inserted project from the database. To achieve this, update the `**getAllHandler**`
    method in the `**projects_controller.ts**` file with the following code:    `public
    async **getAllHandler**(req: Request, res: Response): Promise<void> {`    `if
    (!hasPermission(req.user.rights, ''get_all_projects'')) {`    `res.status(403).json({
    statusCode: 403, status: ''error'', message: ''Unauthorised'' });`    `return;`    `}`   [PRE1]
    `const service = new ProjectsService();`    `const result = await service.findAll(req.query);`    `for
    (const project of result.data) {`    `project[''users''] = await UsersUtil.getUsernamesById(project.user_ids);`    `delete
    project.user_ids;`    `}`    `res.status(result.statusCode).json(result);`    `}`    In
    the preceding code, we send the username along with the `**user_id**` of associated
    users in the project. So, we have created a method in the user utils that gives
    the username from `**user_id**` with the following code:    `public static async
    **getUsernamesById**(user_ids: string[]) {`    `const userService = new UsersService();`    `//
    Query the database to check if all user_ids are valid`    `const queryResult =
    await userService.findByIds(user_ids);`    `if (queryResult.statusCode === 200)
    {`    `const users = queryResult.data;`    `const usernames = users.map((i) =>
    {`    `return {`    `''username'': i.username,`    `''user_id'': i.user_id`    `};`    `});`    `return
    usernames;`    `}`    `return [];`    `}`    The [PRE2]js**TasksService`**`` class
    inherits from a base service class, allowing it to interact with a database repository
    for managing tasks. The constructor initializes the database repository for tasks,
    facilitating database operations for tasks-related functionality in the application.    We
    will develop the REST API for the project as follows:    *   `**Add**` Task *   `**GetAll**`
    Task *   `**GetOne**` Task *   `**Update**` Task *   `**Delete**` Task    # [Input
    Validation](toc.xhtml#s186a)    Task input validation is the process of ensuring
    that data provided as input for tasks in a software application conforms to predefined
    criteria and constraints.    Now, let’s add `**validTaskInput**` in the `**tasks_routes.ts**`
    file with the following code:    `import { Express } from ''express'';`    `import
    { TaskController } from ''./tasks_controller'';`    `import { body } from ''express-validator'';`    `import
    { checkValidDate } from ''../../utils/common'';`    `import { validate } from
    ''../../utils/validator'';`    `import { authorize } from ''../../utils/auth_util'';`   [PRE3]
    [PRE4] [PRE5]'
  prefs: []
  type: TYPE_NORMAL
