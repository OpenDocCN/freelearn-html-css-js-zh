["```js\n    npm install -g -s gridfs-stream\n```", "```js\nconst mongoose = require('mongoose')\nconst Grid = require('gridfs-stream');\n\nmongoose.connect('mongodb://localhost/catalog');\nvar connection = mongoose.connection;\nvar gfs = Grid(connection.db, mongoose.mongo);   \n```", "```js\nexports.saveImage = function(gfs, request, response) {\n\n    var writeStream = gfs.createWriteStream({\n            filename : request.params.itemId,\n            mode : 'w'\n        });\n\n        writeStream.on('error', function(error) {\n            response.send('500', 'Internal Server Error');\n            console.log(error);\n            return;\n        })\n\n        writeStream.on('close', function() {\n            readImage(gfs, request, response);\n        });\n\n    request.pipe(writeStream);\n}\n```", "```js\nfunction readImage(gfs, request, response) {\n\n  var imageStream = gfs.createReadStream({\n      filename : request.params.itemId,\n      mode : 'r'\n  });\n\n  imageStream.on('error', function(error) {\n    console.log(error);\n    response.send('404', 'Not found');\n    return;\n  });\n\n  response.setHeader('Content-Type', 'image/jpeg');\n  imageStream.pipe(response);\n}\n```", "```js\nexports.getImage = function(gfs, itemId, response) {\n     readImage(gfs, itemId, response);\n};\n```", "```js\nexports.deleteImage = function(gfs, mongodb, itemId, response) {\n  console.log('Deleting image for itemId:' + itemId);\n\n    var options = {\n            filename : itemId,\n    };\n\n    var chunks = mongodb.collection('fs.files.chunks');\n    chunks.remove(options, function (error, image) {\n        if (error) {\n            console.log(error);\n            response.send('500', 'Internal Server Error');\n            return;\n       } else {\n           console.log('Successfully deleted image for item: ' + itemId);\n       }\n    });\n\n    var files = mongodb.collection('fs.files');\n    files.remove(options, function (error, image) {\n        if (error) {\n            console.log(error);\n            response.send('500', 'Internal Server Error');\n            return;\n        }\n\n        if (image === null) {\n            response.send('404', 'Not found');\n            return;\n        } else {\n           console.log('Successfully deleted image for primary item: ' + itemId);\n           response.json({'deleted': true});\n        }\n    });\n}\n\n```", "```js\nrouter.get('/v2/item/:itemId/image',\n  function(request, response){\n    var gfs = Grid(model.connection.db, mongoose.mongo);\n    catalogV2.getImage(gfs, request, response);\n});\n\nrouter.get('/item/:itemId/image',\n  function(request, response){\n    var gfs = Grid(model.connection.db, mongoose.mongo);\n    catalogV2.getImage(gfs, request, response);\n});\n\nrouter.post('/v2/item/:itemId/image',\n  function(request, response){\n    var gfs = Grid(model.connection.db, mongoose.mongo);\n    catalogV2.saveImage(gfs, request, response);\n});\n\nrouter.post('/item/:itemId/image',\n  function(request, response){\n    var gfs = Grid(model.connection.db, mongoose.mongo);\n    catalogV2.saveImage(gfs, request.params.itemId, response);\n});\n\nrouter.put('/v2/item/:itemId/image',\n  function(request, response){\n    var gfs = Grid(model.connection.db, mongoose.mongo);\n    catalogV2.saveImage (gfs, request.params.itemId, response);\n});\n\nrouter.put('/item/:itemId/image',\nfunction(request, response){\n  var gfs = Grid(model.connection.db, mongoose.mongo);\n  catalogV2.saveImage(gfs, request.params.itemId, response);\n});\n\nrouter.delete('/v2/item/:itemId/image',\nfunction(request, response){\n  var gfs = Grid(model.connection.db, mongoose.mongo);\n  catalogV2.deleteImage(gfs, model.connection,\n  request.params.itemId, response);\n});\n\nrouter.delete('/item/:itemId/image',\nfunction(request, response){\n  var gfs = Grid(model.connection.db, mongoose.mongo);\n  catalogV2.deleteImage(gfs, model.connection,  request.params.itemId, response);\n});\n```", "```js\nexports.findItemById = function (gfs, request, response) {\n    CatalogItem.findOne({itemId: request.params.itemId}, function(error, result) {\n        if (error) {\n            console.error(error);\n            response.writeHead(500,    contentTypePlainText);\n            return;\n        } else {\n            if (!result) {\n                if (response != null) {\n                    response.writeHead(404, contentTypePlainText);\n                    response.end('Not Found');\n                }\n                return;\n            }\n\n            var options = {\n                filename : result.itemId,\n            };\n            gfs.exist(options, function(error, found) {\n                if (found) {\n                    response.setHeader('Content-Type', 'application/json');\n                    var imageUrl = request.protocol + '://' + request.get('host') + request.baseUrl + request.path + '/image';\n                    response.setHeader('Image-Url', imageUrl);\n                    response.send(result);\n                } else {\n                    response.json(result);\n                }\n            });\n        }\n    });\n}\n```", "```js\nfunction readImage(gfs, request, response) {\n\n  var imageStream = gfs.createReadStream({\n      filename : request.params.itemId,\n      mode : 'r'\n  });\n\n  imageStream.on('error', function(error) {\n    console.log(error);\n    response.send('404', 'Not found');\n    return;\n  });\n\n  var itemImageUrl = request.protocol + '://' + request.get('host') + request.baseUrl+ request.path;\n  var itemUrl = itemImageUrl.substring(0, itemImageUrl.indexOf('/image'));\n  response.setHeader('Content-Type', 'image/jpeg');\n  response.setHeader('Item-Url', itemUrl);\n\n  imageStream.pipe(response);\n}\n```", "```js\nGET http://localhost:3000/catalog/v2/item/3/image HTTP/1.1 \nAccept-Encoding: gzip,deflate \nHost: localhost:3000 \n\nHTTP/1.1 200 OK \nX-Powered-By: Express \nContent-Type: application/json; charset=utf-8 \nImage-Url: http://localhost:3000/catalog/v2/item/3/image \nContent-Length: 137 \nDate: Tue, 03 Apr 2018 19:47:41 GMT \nConnection: keep-alive \n\n{\n   \"_id\": \"5ab827f65d61450e40d7d984\",\n   \"itemId\": \"3\",\n   \"itemName\": \"Sports Watch 11\",\n   \"price\": 99,\n   \"currency\": \"USD\",\n   \"__v\": 0,\n   \"categories\": [\"Watches\"]\n}\n```", "```js\nGET http://localhost:3000/catalog/v2/item/3/image HTTP/1.1 \nHost: localhost:3000 \nConnection: Keep-Alive \n\nHTTP/1.1 200 OK \nX-Powered-By: Express \nContent-Type: image/jpeg \nItem-Url: http://localhost:3000/catalog/v2/item/3 \nConnection: keep-alive \nTransfer-Encoding: chunked \n\n<BINARY DATA>\n```", "```js\nnpm install -g -s express-paginate\nnpm install -g -s mongoose-paginate\n```", "```js\n\nexpressPaginate = require('express-paginate'); \n```", "```js\napp.use(expressPaginate.middleware(limit, maxLimit); \n```", "```js\nvar mongoose = require('mongoose');\nvar mongoosePaginate = require('mongoose-paginate');\nvar Schema = mongoose.Schema;\n\nmongoose.connect('mongodb://localhost/catalog');\n\nvar itemSchema = new Schema ({\n    \"itemId\" : {type: String, index: {unique: true}},\n    \"itemName\": String,\n    \"price\": Number,\n    \"currency\" : String,\n    \"categories\": [String]\n});\nconsole.log('paginate');\nitemSchema.plugin(mongoosePaginate);\nvar CatalogItem = mongoose.model('Item', itemSchema);\n\nmodule.exports = {CatalogItem : CatalogItem, connection : mongoose.connection};\n```", "```js\n\nCatalogItem.paginate({}, {page:request.query.page, limit:request.query.limit},\n    function (error, result){\n        if(error) {\n            console.log(error);\n            response.writeHead('500',\n               {'Content-Type' : 'text/plain'});\n            response.end('Internal Server Error');\n         } else {\n           response.json(result);\n         }\n});\n```", "```js\nexports.paginate = function(model, request, response) {\n    var pageSize = request.query.limit;\n    var page = request.query.page;\n    if (pageSize === undefined) {\n        pageSize = 100;\n    }\n    if (page === undefined) {\n        page = 1;\n    }\n\n    model.paginate({}, {page:page, limit:pageSize},\n            function (error, result){\n                if(error) {\n                    console.log(error);\n                    response.writeHead('500',\n                        {'Content-Type' : 'text/plain'});\n                    response.end('Internal Server Error');\n                }\n                else {\n                    response.json(result);\n                }\n            });\n}\n```", "```js\n{\n  \"docs\": [\n    {\n      \"_id\": \"5a4c004b0eed73835833cc9a\",\n      \"itemId\": \"1\",\n      \"itemName\": \"Sports Watch 1\",\n      \"price\": 100,\n      \"currency\": \"EUR\",\n      \"__v\": 0,\n      \"categories\": [\n        \"Watches\",\n        \"Sports Watches\"\n      ]\n    },\n    {\n      \"_id\": \"5a4c0b7aad0ebbce584593ee\",\n      \"itemId\": \"2\",\n      \"itemName\": \"Sports Watch 2\",\n      \"price\": 100,\n      \"currency\": \"USD\",\n      \"__v\": 0,\n      \"categories\": [\n        \"Sports Watches\"\n      ]\n    },\n    {\n      \"_id\": \"5a64d7ecfa1b585142008017\",\n      \"itemId\": \"3\",\n      \"itemName\": \"Sports Watch 3\",\n      \"price\": 100,\n      \"currency\": \"USD\",\n      \"__v\": 0,\n      \"categories\": [\n        \"Watches\",\n        \"Sports Watches\"\n      ]\n    },\n    {\n      \"_id\": \"5a64d9a59f4dc4e34329b80f\",\n      \"itemId\": \"8\",\n      \"itemName\": \"Sports Watch 4\",\n      \"price\": 100,\n      \"currency\": \"EUR\",\n      \"__v\": 0,\n      \"categories\": [\n        \"Watches\",\n        \"Sports Watches\"\n      ]\n    },\n    {\n      \"_id\": \"5a64da377d25d96e44c9c273\",\n      \"itemId\": \"9\",\n      \"itemName\": \"Sports Watch 5\",\n      \"price\": 100,\n      \"currency\": \"USD\",\n      \"__v\": 0,\n      \"categories\": [\n        \"Watches\",\n        \"Sports Watches\"\n      ]\n    }\n  ],\n  \"total\": 11,\n  \"limit\": \"5\",\n  \"page\": \"1\",\n  \"pages\": 3\n}\n```", "```js\n  router.get('/v2/', function(request, response) {\n    var getParams = url.parse(request.url, true).query;\n    if (getParams['page'] !=null) {\n      catalogV2.paginate(model.CatalogItem, request, response);\n    } else {\n      var key = Object.keys(getParams)[0];\n      var value = getParams[key];\n      catalogV2.findItemsByAttribute(key, value, response);\n    }\n});\n```", "```js\nrouter.get('/', function(request, response) {\n  console.log('Redirecting to v2');\n  response.writeHead(302, {'Location' : '/catalog/v2/'});\n  response.end('Version 2 is is available at /catalog/v2/: ');\n});\n```", "```js\n    npm install -g -s express-cache-control\n```", "```js\n      CacheControl = require(\"express-cache-control\") \n```", "```js\n var cache = new CacheControl().middleware;\n```", "```js\nrouter.get('/v2/', cache('minutes', 1), function(request, response) {\n    var getParams = url.parse(request.url, true).query;\n    if (getParams['page'] !=null || getParams['limit'] != null) {\n      catalogV2.paginate(model.CatalogItem, request, response);\n    } else {\n      var key = Object.keys(getParams)[0];\n      var value = getParams[key];\n      catalogV2.findItemsByAttribute(key, value, response);\n    }\n});\n```"]