["```js\nnameOfTheFunction();\nfunctionThatTakesInput(\"the input\", 5, true); \n```", "```js\nfunction nameOfTheFunction() {\n    //content of the function\n} \n```", "```js\nnameOfTheFunction(); \n```", "```js\nfunction sayHello() {\n  let you = prompt(\"What's your name? \");\n  console.log(\"Hello\", you + \"!\");\n} \n```", "```js\nsayHello(); \n```", "```js\nWhat's your name? > \n```", "```js\nHello Maaike! \n```", "```js\nlet varContainingFunction = function() {\n    let varInFunction = \"I'm in a function.\";\n    console.log(\"hi there!\", varInFunction);\n};\nvarContainingFunction(); \n```", "```js\nfunction tester(para1, para2){\n    return para1 + \" \" + para2;\n}\nconst arg1 = \"argument 1\";\nconst arg2 = \"argument 2\";\ntester(arg1, arg2); \n```", "```js\nfunction myFunc(param1, param2) {\n  // code of the function;\n} \n```", "```js\nfunction addTwoNumbers(x, y) {\n  console.log(x + y);\n} \n```", "```js\nmyFunc(\"arg1\", \"arg2\"); \n```", "```js\nconsole.log(\"this is an argument\");\nprompt(\"argument here too\");\nlet arr = [];\narr.push(\"argument\"); \n```", "```js\naddTwoNumbers(3, 4);\naddTwoNumbers(12,-90); \n```", "```js\n7\n-78 \n```", "```js\naddTwoNumbers(); \n```", "```js\nNaN \n```", "```js\nfunction addTwoNumbers(x = 2, y = 3) {\n  console.log(x + y);\n} \n```", "```js\naddTwoNumbers();\naddTwoNumbers(6, 6);\naddTwoNumbers(10); \n```", "```js\n5\n12\n13 \n```", "```js\naddTwoNumbers(1,2,3,4); \n```", "```js\n3 \n```", "```js\n(param1, param2) => body of the function; \n```", "```js\n() => body of the function; \n```", "```js\nparam => body of the function; \n```", "```js\n(param1, param2) => {\n  // line 1;\n  // any number of lines;\n}; \n```", "```js\nfunction doingStuff(x) {\n  console.log(x);\n} \n```", "```js\nlet doingArrowStuff = x => console.log(x); \n```", "```js\ndoingArrowStuff(\"Great!\"); \n```", "```js\nlet addTwoNumbers = (x, y) => console.log(x + y); \n```", "```js\naddTwoNumbers(5, 3); \n```", "```js\nlet sayHi = () => console.log(\"hi\"); \n```", "```js\nconst arr = [\"squirrel\", \"alpaca\", \"buddy\"];\narr.forEach(e => console.log(e)); \n```", "```js\nsquirrel\nalpaca\nbuddy \n```", "```js\nlet spread = [\"so\", \"much\", \"fun\"];\nlet message = [\"JavaScript\", \"is\", ...spread, \"and\", \"very\",\"powerful\"]; \n```", "```js\n['JavaScript', 'is', 'so', 'much', 'fun', 'and', 'very', 'powerful'] \n```", "```js\nfunction addTwoNumbers(x, y) {\n  console.log(x + y); \n} \nlet arr = [5, 9];\naddTwoNumbers(...arr); \n```", "```js\naddTwoNumbers(5, 9); \n```", "```js\nfunction addFourNumbers(x, y, z, a) { \n  console.log(x + y + z + a); \n} \nlet arr = [5, 9];\nlet arr2 = [6, 7];\naddFourNumbers(...arr, ...arr2); \n```", "```js\naddFourNumbers(5, 9, 6, 7); \n```", "```js\nfunction someFunction(param1, param2) {\n  console.log(param1, param2);\n}\nsomeFunction(\"hi\", \"there!\", \"How are you?\"); \n```", "```js\nfunction someFunction(param1, ...param2) {\n  console.log(param1, param2);\n}\nsomeFunction(\"hi\", \"there!\", \"How are you?\"); \n```", "```js\nhi [ 'there!', 'How are you?' ] \n```", "```js\nlet favoriteSubject = prompt(\"What is your favorite subject?\"); \n```", "```js\nlet result = addTwoNumbers(4, 5);\nconsole.log(result); \n```", "```js\n9\nundefined \n```", "```js\nfunction addTwoNumbers(x, y) {\n  return x + y;\n} \n```", "```js\nlet result = addTwoNumbers(4, 5);\nconsole.log(result); \n```", "```js\n9 to the terminal.\n```", "```js\nlet resultsArr = [];\nfor(let i = 0; i < 10; i ++){\n  let result = addTwoNumbers(i, 2*i);\n  resultsArr.push(result);\n}\nconsole.log(resultsArr); \n```", "```js\n[\n   0,  3,  6,  9, 12,\n  15, 18, 21, 24, 27\n] \n```", "```js\nlet addTwoNumbers = (x, y) => x + y; \n```", "```js\nlet result = addTwoNumbers(12, 15);\nconsole.log(result); \n```", "```js\nlet addTwoNumbers = (x, y) => {\n  console.log(\"Adding...\");\n  return x + y;\n} \n```", "```js\nfunction testAvailability(x) {\n  console.log(\"Available here:\", x);\n}\ntestAvailability(\"Hi!\");\nconsole.log(\"Not available here:\", x); \n```", "```js\nAvailable here: Hi!\nReferenceError: x is not defined \n```", "```js\nfunction testAvailability() {\n  let y = \"Local variable!\";\n  console.log(\"Available here:\", y);\n}\ntestAvailability();\nconsole.log(\"Not available here:\", y); \n```", "```js\nAvailable here: Local variable!\nReferenceError: y is not defined \n```", "```js\nfunction testAvailability() {\n  let y = \"I'll return\";\n  console.log(\"Available here:\", y);\n  return y;\n}\nlet z = testAvailability();\nconsole.log(\"Outside the function:\", z);\nconsole.log(\"Not available here:\", y); \n```", "```js\nAvailable here: I'll return\nOutside the function: I'll return\nReferenceError: y is not defined \n```", "```js\nfunction doingStuff() {\n  if (true) {\n    var x = \"local\";\n  }\n  console.log(x);\n}\ndoingStuff(); \n```", "```js\nlocal \n```", "```js\nfunction doingStuff() {\n  if (true) {\n    let x = \"local\";\n  }\n  console.log(x);\n}\ndoingStuff(); \n```", "```js\nReferenceError: x is not defined \n```", "```js\nfunction doingStuff() { \n  if (true) { \n    console.log(x);\n    let x = \"local\"; \n  } \n}\ndoingStuff(); \n```", "```js\nfunction doingStuff() { \n  if (true) { \n    console.log(x);\n    var x = \"local\";\n  }\n}\ndoingStuff(); \n```", "```js\nfunction doingStuff() {\n  if (true) {\n    const X = \"local\";\n  }\n  console.log(X);\n}\ndoingStuff(); \n```", "```js\nReferenceError: X is not defined \n```", "```js\nlet globalVar = \"Accessible everywhere!\";\nconsole.log(\"Outside function:\", globalVar);\nfunction creatingNewScope(x) {\n  console.log(\"Access to global vars inside function.\" , globalVar);\n}\ncreatingNewScope(\"some parameter\");\nconsole.log(\"Still available:\", globalVar); \n```", "```js\nOutside function: Accessible everywhere!\nAccess to global vars inside function. Accessible everywhere!\nStill available: Accessible everywhere! \n```", "```js\nlet x = \"global\";\nfunction doingStuff() {\n  let x = \"local\";\n  console.log(x);\n}\ndoingStuff();\nconsole.log(x); \n```", "```js\nlocal\nglobal \n```", "```js\nlet x = \"global\";\n\nfunction doingStuff(x) {\n  console.log(x); \n} \n\ndoingStuff(\"param\"); \n```", "```js\nfunction confuseReader() {\n  x = \"Guess my scope...\";\n  console.log(\"Inside the function:\", x);\n}\nconfuseReader();\nconsole.log(\"Outside of function:\", x); \n```", "```js\nInside the function: Guess my scope...\nOutside of function: Guess my scope... \n```", "```js\n(function () {\n  console.log(\"IIFE!\");\n})(); \n```", "```js\n(()=>{\n    console.log(\"run right away\");\n})(); \n```", "```js\nfunction getRecursive(nr) {\n  console.log(nr);\n  getRecursive(--nr);\n}\ngetRecursive(3); \n```", "```js\nfunction getRecursive(nr) {\n  console.log(nr);\n  if (nr > 0) {\n    getRecursive(--nr);\n  }\n}\ngetRecursive(3); \n```", "```js\nfunction logRecursive(nr) {\n  console.log(\"Started function:\", nr);\n  if (nr > 0) {\n    logRecursive(nr - 1);\n  } else {\n      console.log(\"done with recursion\");\n  }\n  console.log(\"Ended function:\", nr);\n}\nlogRecursive(3); \n```", "```js\nStarted function: 3\nStarted function: 2\nStarted function: 1\nStarted function: 0\ndone with recursion\nEnded function: 0\nEnded function: 1\nEnded function: 2\nEnded function: 3 \n```", "```js\nfunction doOuterFunctionStuff(nr) {\n  console.log(\"Outer function\");\n  doInnerFunctionStuff(nr);\n  function doInnerFunctionStuff(x) {\n    console.log(x + 7);\n    console.log(\"I can access outer variables:\", nr);\n  }\n}\ndoOuterFunctionStuff(2); \n```", "```js\nOuter function\n9\nI can access outer variables: 2 \n```", "```js\nfunction doOuterFunctionStuff(nr) {\n  doInnerFunctionStuff(nr);\n  function doInnerFunctionStuff(x) {\n    let z = 10;\n  }\n  console.log(\"Not accessible:\", z);\n}\ndoOuterFunctionStuff(2); \n```", "```js\nfunction doOuterFunctionStuff(nr) {\n  doInnerFunctionStuff(nr);\n  function doInnerFunctionStuff(x) {\n    let z = 10;\n  }\n}\ndoInnerFunctionStuff(3); \n```", "```js\nfunction doingStuffAnonymously() {\n  console.log(\"Not so secret though.\");\n} \n```", "```js\nfunction () {\n  console.log(\"Not so secret though.\");\n}; \n```", "```js\nlet functionVariable = function () {\n  console.log(\"Not so secret though.\");\n}; \n```", "```js\nfunctionVariable(); \n```", "```js\nfunction doFlexibleStuff(executeStuff) {\n  executeStuff();\n  console.log(\"Inside doFlexibleStuffFunction.\");\n} \n```", "```js\ndoFlexibleStuff(functionVariable); \n```", "```js\nNot so secret though.\nInside doFlexibleStuffFunction. \n```", "```js\nlet anotherFunctionVariable = function() {\n  console.log(\"Another anonymous function implementation.\");\n}\ndoFlexibleStuff(anotherFunctionVariable); \n```", "```js\nAnother anonymous function implementation.\nInside doFlexibleStuffFunction. \n```", "```js\nlet youGotThis = function () {\n  console.log(\"You're doing really well, keep coding!\");\n};\nsetTimeout(youGotThis, 1000); \n```", "```js\nYou're doing really well, keep coding! \n```", "```js\nsetInterval(youGotThis, 1000); \n```", "```js\nFour\nThree\nOne\nTwo\nOne \n```", "```js\n    let val = 10;\n    function tester(val){\n        val += 10;\n        if(val < 100){\n            return tester(val);\n        }\n        return val;\n    }\n    tester(val);\n    console.log(val); \n    ```", "```js\n    let testFunction = function(){\n        console.log(\"Hello\");\n    }(); \n    ```", "```js\n    (function () {\n        console.log(\"Welcome\");\n    })();\n    (function () {\n        let firstName = \"Laurence\";\n    })();\n    let result = (function () {\n        let firstName = \"Laurence\";\n        return firstName;\n    })();\n    console.log(result);\n    (function (firstName) {\n        console.log(\"My Name is \" + firstName);\n    })(\"Laurence\"); \n    ```", "```js\n    let test2 = (num) => num + 5;\n    console.log(test2(14)); \n    ```", "```js\n    var addFive1 = function addFive1(num) {\n    return num + 2;\n    };\n    let addFive2 = (num) => num + 2;\n    console.log(addFive1(14)); \n    ```"]