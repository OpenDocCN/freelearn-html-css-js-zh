- en: Configuring Styles and Interactivity
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置样式和交互性
- en: In this chapter, you will learn how to configure the look and feel of a chart
    so it will reflect a desired layout or style, follow good practices of chart design,
    and tune its interactive and responsive behavior. This includes configuring colors,
    gradients, patterns and fonts, setting margins, padding, borders, fills, backgrounds,
    line widths, dashes, positioning titles and legends, and configuring the behavior
    of transitions and animations. Some of these properties are easily configured
    using Chart.js configuration options, but others require plugins and extensions,
    which will also be introduced in this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何配置图表的外观和感觉，使其反映所需的布局或风格，遵循图表设计的良好实践，并调整其交互和响应行为。这包括配置颜色、渐变、图案和字体，设置边距、填充、边框、填充、背景、线宽、虚线，定位标题和图例，以及配置过渡和动画的行为。其中一些属性可以通过Chart.js配置选项轻松配置，但其他属性则需要插件和扩展，这些内容也将在本章中介绍。
- en: 'In this chapter, you will learn the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: Default configuration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认配置
- en: Fonts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字体
- en: Colors, gradients, patterns, and shadows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色、渐变、图案和阴影
- en: Adding text elements and labels
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加文本元素和标签
- en: Interactions, data updates, and animation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交互、数据更新和动画
- en: Default configuration
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认配置
- en: Every chart created in Chart.js comes previously configured with default properties.
    You can always override these properties in the `options` object when creating
    a new Chart instance, but you can also override them for all or for many of your
    charts, by setting the properties directly in the `Chart.defaults` object.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Chart.js中创建的每个图表都预先配置了默认属性。在创建新的图表实例时，你始终可以在`options`对象中覆盖这些属性，但你也可以通过直接在`Chart.defaults`对象中设置属性来覆盖所有或许多图表的属性。
- en: 'For example, the default line tension is `0.4` for any kind of chart. If you
    want all your charts to use only straight lines and have scales beginning at zero,
    you can make all pages load a `defaults.js` file that declares the following defaults:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，任何类型的图表的默认线张力是`0.4`。如果你想所有图表都只使用直线，并且刻度从零开始，你可以让所有页面加载一个`defaults.js`文件，该文件声明以下默认值：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you want to have only curved lines in the radar charts, you can override
    the property for all radar charts (but not any other kind of chart) using the
    following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想在雷达图中使用曲线线，你可以使用以下方式覆盖所有雷达图表的属性（但不是任何其他类型的图表）：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, if you have a specific line chart where you would prefer to use curved
    lines, you can again override the property when you create the chart instance,
    using its `options` configuration object:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果你有一个特定的折线图，你更愿意使用曲线线，你可以在创建图表实例时再次覆盖属性，使用其`options`配置对象：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Some options can even be configured for a specific dataset within a chart,
    which is the case with line tension. If you use `lineTension: 0.3` for a specific
    dataset in the `datasets` array, only the line corresponding to that dataset will
    exhibit the new tension:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '一些选项甚至可以配置为图表中的特定数据集，例如线张力。如果你在`datasets`数组中的特定数据集使用`lineTension: 0.3`，则只有对应该数据集的线将显示新的张力：'
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The order is significant, and so is the hierarchy. Properties set in a more
    specific context will almost always override the values set in a more general
    context. And any global properties should be set *before* instantiating a chart.
    In the next sections, we will explore options that can be defined at different
    configuration levels, their object structure, and their default values.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 顺序很重要，层次结构也是如此。在更具体的环境中设置的属性将几乎总是覆盖在更一般环境中设置的值。并且任何全局属性都应该在实例化图表之前设置。在下一节中，我们将探讨可以在不同配置级别定义的选项，它们的对象结构和它们的默认值。
- en: Global defaults
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局默认值
- en: 'Properties in `Chart.defaults.global` contain configuration options for all
    types of charts, including graphical elements, titles and captions, layout properties,
    animation, tooltips, events, and plugins. But it doesn''t include grids and scales,
    which are configured in the `Chart.defaults.scale` object. The options available
    in `Chart.defaults.global` are listed as follows. All these properties, except
    the default font and color settings, are also available as properties in the options
    configuration object of any chart instance:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chart.defaults.global`中的属性包含所有类型图表的配置选项，包括图形元素、标题和副标题、布局属性、动画、工具提示、事件和插件。但它不包括网格和刻度，这些在`Chart.defaults.scale`对象中配置。`Chart.defaults.global`中可用的选项如下。所有这些属性（除默认字体和颜色设置外）也作为任何图表实例的选项配置对象中的属性：'
- en: '| **Object** | **Value** | **Description** |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| **对象** | **值** | **描述** |'
- en: '| `defaultColor` | CSS color | The default color for all chart elements. This
    property is overriden in several chart elements, so it''s not really very useful.
    The default is `''rgba(0,0,0,0.1)''`. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `defaultColor` | CSS颜色 | 所有图表元素的默认颜色。此属性在多个图表元素中被覆盖，因此实际上并不太有用。默认值为 `''rgba(0,0,0,0.1)''`。
    |'
- en: '| `defaultFontColor` | CSS color (examples: `''lightblue''`, `''#9cf''`, `''#ff0000''`,
    `''rgb(100%,50%,25%)''`, `''hsl(60,100%,50%)''`, `''rgba(100%,50%,25%,0.6)''`,
    `''hsla(60,100%,50%,0.1)''`) | The default color for all text (unless overridden
    with a more specific font color property). The default is `''#666''`. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `defaultFontColor` | CSS颜色（例如：`''lightblue''`，`''#9cf''`，`''#ff0000''`，`''rgb(100%,50%,25%)''`，`''hsl(60,100%,50%)''`，`''rgba(100%,50%,25%,0.6)''`，`''hsla(60,100%,50%,0.1)''`）
    | 所有文本的默认颜色（除非用更具体的字体颜色属性覆盖）。默认值为 `''#666''`。 |'
- en: '| `defaultFontFamily` | CSS font-family name or list (example: `''Helvetica`,
    `"Helvetica Neue"`, `sans-serif''`) | The default family for all text (unless
    overridden with a more specific font color property). The default is `''Helvetica
    Neue''`, `''Helvetica''`, `''Arial''`, `sans-serif`. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `defaultFontFamily` | CSS字体家族名称或列表（例如：`''Helvetica''`，`"Helvetica Neue"`，`sans-serif''`）
    | 所有文本的默认家族（除非用更具体的字体颜色属性覆盖）。默认值为 `''Helvetica Neue''`，`''Helvetica''`，`''Arial''`，`sans-serif''`。
    |'
- en: '| `defaultFontSize` | Font size in pixels | The default size in pixels for
    all text (unless overridden with a more specific font size property). The default
    is 12. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `defaultFontSize` | 像素字体大小 | 所有文本的默认像素大小（除非用更具体的字体大小属性覆盖）。默认值为 12。 |'
- en: '| `defaultFontStyle` | CSS font-style (ex: `''bold''`, `''italic''`, `''normal''`)
    or any style available with the font that is being used (ex: `''condensed bold''`,
    `''light''`, and so on) | The default style for all text (unless overridden with
    a more specific font style property). The default is `''normal''`. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `defaultFontStyle` | CSS字体样式（例如：`''bold''`，`''italic''`，`''normal''`）或正在使用的字体中可用的任何样式（例如：`''condensed
    bold''`，`''light''`，等等） | 所有文本的默认样式（除非用更具体的字体样式属性覆盖）。默认值为 `''normal''`。 |'
- en: '| `layout.padding` | The number or object with numerical properties for `top`,
    `left`, `right`, `bottom` | If the value is a number, the padding in pixels is
    applied to all sides of a chart. If it''s an object, the individual values can
    be applied to different sides of the chart. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `layout.padding` | 用于 `top`，`left`，`right`，`bottom` 的数字或具有数值属性的对象 | 如果值是数字，则在图表的所有边上应用像素大小的填充。如果是对象，则可以分别应用于图表的不同边。
    |'
- en: '| `maintainAspectRatio` | `true` or `false` | Maintains the aspect ratio of
    the canvas element. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `maintainAspectRatio` | `true` 或 `false` | 保持画布元素的宽高比。 |'
- en: '| `responsive` | `true` or `false` | Resizes the chart when the canvas is resized.
    The default is `true`. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `responsive` | `true` 或 `false` | 当画布大小改变时，调整图表大小。默认值为 `true`。 |'
- en: '| `showLines` | `true` or `false` | If `true`, shows lines between point values.
    Default is `true`, but is overridden to `false` in scatter charts. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `showLines` | `true` 或 `false` | 如果为 `true`，则在点值之间显示线条。默认值为 `true`，但在散点图中会被覆盖为
    `false`。 |'
- en: '| `title` | Object | See the *Legends and labels* section in this chapter.
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `title` | 对象 | 请参阅本章的*图例和标签*部分。 |'
- en: '| `legend` | Object | See the *Legends and labels* section in this chapter.
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `legend` | 对象 | 请参阅本章的*图例和标签*部分。 |'
- en: '| `tooltips` | Object | See[Chapter 7](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml),
    *Advanced Chart.js*. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `tooltips` | 对象 | 请参阅[第7章](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml)，*高级Chart.js*。
    |'
- en: '| `hover` | Object | See [Chapter 7](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml)*, Advanced
    Chart.js*. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `hover` | 对象 | 请参阅[第7章](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml)*，*高级Chart.js*。
    |'
- en: '| `elements` | Object | See the *Chart elements* section in this chapter. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `elements` | 对象 | 请参阅本章的*图表元素*部分。 |'
- en: '| `events` | Object | See the *Animation* section in this chapter. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `events` | 对象 | 请参阅本章的*动画*部分。 |'
- en: '| `plugins` | Object | See [Chapter 7](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml),
    *Advanced Chart.js*. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `plugins` | 对象 | 请参阅[第7章](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml)，*高级Chart.js*。
    |'
- en: '| `animation` | Object | See the *Animation* section in this chapter. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `animation` | 对象 | 请参阅本章的*动画*部分。 |'
- en: Configurable options in Charts.defaults.global that can be configured for all
    charts. Callbacks are not listed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Charts.defaults.global中可配置的选项，可用于所有图表。回调函数未列出。
- en: 'For example, the following configuration will turn off-line rendering between
    value points for any charts. Since this property is not overridden in line or
    radar charts, if you create a line chart, it won''t have any lines. Only the points
    will be visible:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下配置将关闭任何图表之间的线渲染。由于此属性在折线图或雷达图中没有被覆盖，如果你创建一个折线图，它将没有线条。只有点将可见：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This other configuration will turn off the legends for all charts (very useful
    for single-dataset charts):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置将关闭所有图表的图例（对于单数据集图表非常有用）：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Scale defaults
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 刻度默认值
- en: 'Scales and grids can be globally configured in the `Charts.defaults.scale`
    object. The following table lists the top-level properties and some of the default
    properties of this object. Some of these defaults are overridden in specific charts.
    In these cases, changing them in this context may not have any effect:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 `Charts.defaults.scale` 对象中全局配置刻度和网格。以下表格列出了该对象的高级属性和一些默认属性。其中一些默认属性在特定图表中被重写。在这些情况下，在此上下文中更改它们可能没有任何效果：
- en: '| **Object** | **Description** | **Default properties** |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| **对象** | **描述** | **默认属性** |'
- en: '| `display` | Displays (`true`) or not (`false`) the scales for this chart.
    | The default is `true`. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `display` | 显示（`true`）或隐藏（`false`）此图表的刻度。默认为 `true`。 |'
- en: '| `offset` | Adds extra space to left and right edges of the chart. | The default
    is `false` (overridden to `true` in bar charts). |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `offset` | 向图表的左右边缘添加额外空间。默认为 `false`（在柱状图中被重写为 `true`）。 |'
- en: '| `gridLines` | Default properties and callbacks for all scales (some are overridden
    in specific chart types). See [Chapter 5](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml),
    *Scales and Grid Configuration*. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `gridLines` | 所有刻度（某些在特定图表类型中被重写）的默认属性和回调函数。见[第5章](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml)，*刻度和网格配置*。
    |'
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `scaleLabel` | The default properties and callbacks for all scales (some
    are overridden in specific chart types). See [Chapter 5](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml)*,
    Scales and Grid Configuration,* for details. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `scaleLabel` | 所有刻度的默认属性和回调函数（某些在特定图表类型中被重写）。有关详细信息，请参阅[第5章](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml)*，刻度和网格配置*。
    |'
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `ticks` | The default properties and callbacks for all scales (some are overriden
    in specific chart types). See [Chapter 5](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml)*,
    Scales and Grid Configuration,* for details. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `ticks` | 所有刻度的默认属性和回调函数（某些在特定图表类型中被重写）。有关详细信息，请参阅[第5章](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml)*，刻度和网格配置*。
    |'
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '|'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Options in Charts.defaults.scales that can be configured for scales of all charts.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Charts.defaults.scales 中可以配置的选项，用于配置所有图表的刻度。
- en: 'For example, the following code will place the same labels on all axes in any
    charts that use Cartesian axes (`bar`, `horizontalBar`, `line`, `scatter`, `bubble`):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码将在使用笛卡尔坐标轴的任何图表的所有轴上放置相同的标签（`bar`、`horizontalBar`、`line`、`scatter`、`bubble`）：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `display` property is available in all scale components. With `display:
    false`, you can globally remove ticks, labels, gridlines, and other non-chart
    information from your default charts, overriding these properties in specific
    charts only when necessary. This is a good practice and will maximize the data-to-ink
    ratio of your charts.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`display` 属性在所有刻度组件中可用。使用 `display: false`，您可以全局移除刻度、标签、网格线和其他非图表信息，仅在必要时在特定图表中重写这些属性。这是一个好习惯，并将最大化您图表的数据到墨水比率。'
- en: The code fragments in this section are from `Config/defaults-1-global-config.html`,
    in the GitHub repository for this chapter.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的代码片段来自 `Config/defaults-1-global-config.html`，位于本章的 GitHub 仓库中。
- en: Graphical elements
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形元素
- en: '**Graphical elements** are the primitives used to render visualizations of
    datasets in different types of charts. You can define defaults for them configuring
    the four objects in the `Chart.defaults.global.elements` context, listed as follows.
    Some of these properties are overridden in the defaults for certain charts, so
    changing them at this level may not cause any effect:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**图形元素**是用于在不同类型的图表中渲染数据集的可视化的基本元素。您可以通过配置 `Chart.defaults.global.elements`
    上下文中的四个对象来为它们定义默认值，如下所示。其中一些属性在特定图表的默认值中被重写，因此在此级别更改它们可能不会产生任何效果：'
- en: '| **Object** | **Description** | **Default properties** |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| **对象** | **描述** | **默认属性** |'
- en: '| `arc` | The default properties for Canvas arcs, which are used in pie, doughnut,
    and polar area charts. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `arc` | Canvas 弧的默认属性，用于饼图、环形图和极坐标面积图。 |'
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `line` | The default properties for Canvas lines, which are used in line
    and radar charts. See [Chapter 2](25edc904-3528-40cc-8865-75ccf1fc78eb.xhtml),
    *Technology* *Fundamentals,* for Canvas properties used in `borderCapStyle` and
    `borderJoinStyle`. See [Chapter 4](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml), C*reating
    Charts*, for `fill` strategies. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `line` | 用于线图和雷达图的 Canvas 线的默认属性。在 `borderCapStyle` 和 `borderJoinStyle` 中使用了
    Canvas 属性。有关在 `fill` 策略中使用的 Canvas 属性，请参阅[第 2 章](25edc904-3528-40cc-8865-75ccf1fc78eb.xhtml)，*技术基础*。有关
    `fill` 策略，请参阅[第 4 章](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml)，*创建图表*。'
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Point` | Value points are actually circles drawn with Canvas arcs. This
    object contains default properties for points in line, radar, scatter, or bubble
    charts. See [Chapter 4](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml),* Creating
    Charts,* for more point styles. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `Point` | 值点实际上是使用 Canvas 弧线绘制的圆。此对象包含线、雷达、散点或气泡图中点的默认属性。有关更多点样式，请参阅[第 4
    章](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml)，*创建图表*。'
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Rectangle` | The default properties for Canvas rectangles used in bar and
    `horizontalBar` charts. One of the borders is not drawn (skipped). |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `Rectangle` | 用于柱状图和 `horizontalBar` 图的 Canvas 矩形的默认属性。其中一个边框未绘制（跳过）。'
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Options in Charts.defaults.global.elements that apply to elements in all charts
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Charts.defaults.global.elements 中适用于所有图表元素的可选设置
- en: 'The following code will make all line and radar charts use red dashed 5-pixel
    lines as the default, unless they are overridden in their default configuration
    or `options` object. See `Config/defaults-2-global-elements.html`, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将使所有线图和雷达图使用红色虚线 5 像素线作为默认值，除非在它们的默认配置或 `options` 对象中覆盖。请参阅 `Config/defaults-2-global-elements.html`，如下所示：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Chart defaults
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图表默认值
- en: 'The `Chart.default` context contains an object for each chart type supported
    in Chart.js. The types are in the following table, which also lists some of the
    properties previously configured in each one. These properties may override the
    global defaults for chart styles and elements (`Chart.default.global`) and the
    default properties for scales (`Chart.default.scales`). You can define new defaults
    by changing these properties in the `Chart.default` context, or locally inside
    an options object:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chart.default` 上下文中包含一个对象，用于 Chart.js 支持的每种图表类型。类型如下表所示，其中还列出了一些之前在每个图表中配置的属性。这些属性可以覆盖全局默认的图表样式和元素（`Chart.default.global`）以及刻度默认属性（`Chart.default.scales`）。您可以通过在
    `Chart.default` 上下文中更改这些属性或局部在选项对象内部来定义新的默认值：'
- en: '| **Object** | **Description** | **Default properties (selection)** |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| **对象** | **描述** | **默认属性（选择）** |'
- en: '| `bar` | The default properties for bar charts |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `bar` | 柱状图默认属性 |'
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `horizontalBar` | The default properties for horizontal bar charts |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `horizontalBar` | 水平柱状图默认属性 |'
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '|'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `pie` | The default properties and callbacks for pie charts |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `pie` | 饼图默认属性和回调函数 |'
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '|'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `doughnut` | The default properties and callbacks for doughnut charts |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `doughnut` | 饼图默认属性和回调函数 |'
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `line` | The default properties and callbacks for line charts |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `line` | 线图默认属性和回调函数 |'
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '|'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `radar` | The default properties for radar charts |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `radar` | 雷达图默认属性 |'
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '|'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `polarArea` | The default properties for polar area charts |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `polarArea` | 极坐标图默认属性 |'
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '|'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `scatter` | The default properties for scatter charts |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `scatter` | 散点图默认属性 |'
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '|'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `bubble` | The default properties for bubble charts |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `bubble` | 气泡图默认属性 |'
- en: '[PRE23]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '|'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Default options in Charts.defaults for different types of charts
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Charts.defaults 中不同类型图表的默认选项
- en: 'You can check the current values of your default properties by printing them
    to your JavaScript console and inspecting the object tree, with `console.log()`.
    The following code will print the context root:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将它们打印到 JavaScript 控制台并检查对象树来查看当前默认属性的值，使用 `console.log()`。以下代码将打印上下文根：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can also inspect (and modify the properties of) the chart instance. In
    this case, you need to assign the new chart to a variable handle (see `Config/defaults-1-global-config.html`):'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以检查（并修改）图表实例的属性。在这种情况下，您需要将新图表分配给一个变量句柄（请参阅 `Config/defaults-1-global-config.html`）：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Fonts
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体
- en: 'Chart.js uses Canvas to select and display local and installed fonts. The font
    configuration involves setting up to four font properties: family, size, style,
    and color. A `fontFamily` is a string containing a list of font-family names,
    a `fontStyle` contains a string with the name of a style supported by the corresponding
    font-family, a `fontColor` is any valid CSS-compatible color string, and the `fontSize`
    is a number that represents the size in pixels. You can configure font attributes
    in any object that includes text: titles, tick captions, legend labels, or tooltips,
    or you can set global defaults that will be inherited by text elements that don''t
    explicitly set font attributes.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Selecting standard fonts
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The basic font properties are named `fontFamily`, `fontSize`, `fontStyle`,
    and `fontColor`. Some objects have prefixed versions of these same properties.
    These objects are listed as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '| **Object containing text element** | **Description** | **Font properties**
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.global` | Global defaults | `defaultFontFamily`, `defaultFontSize`, `defaultFontStyle,
    defaultFontColor` |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.global.title` | Chart title | `fontFamily`, `fontSize`,'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '`fontStyle`,'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '`fontColor` |'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '| `Chart.defaults.scale.ticks` | Axis label |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.scale.ticks.minor` | Minor tick label |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.scale.ticks.major` | Major tick label |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.global.legend` | Legend label |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.global.tooltips` | Tooltip header | `titleFontFamily`, `titleFontSize`, `titleFontStyle`, `titleFontColor`
    |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.global.tooltips` | Tooltip body | `bodyFontFamily`, `bodyFontSize`, `bodyFontStyle`, `bodyFontColor`
    |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.global.tooltips` | Tooltip footer | `footerFontFamily`, `footerFontSize,
    footerFontStyle`, `footerFontColor` |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
- en: Objects that have font configuration properties
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'Since it''s usually good practice to avoid using more than one font family
    for the whole chart, global options are the best place to configure this property.
    You can also set other font defaults:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can always choose to override specific properties where appropriate, such
    as the font size of a chart title:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And you can override it again, setting a different value in the chart instance,
    if necessary:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Using Web fonts
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chart.js can use any fonts that are available for your website. Besides the
    standard fonts supported by all browsers (*serif*, *sans-serif*, *monospace*),
    you can also use online fonts loaded by a style sheet.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we are using a free web font (OFL license), called
    *Yanone* Kaffeesatz*,* obtained from Google Fonts. To install it, simply load
    the CSS by adding the following link to the `<head>` of your HTML page:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now you can use the Yanone Kaffeesatz font family in CSS and HTML. Canvas can
    set it as the context font, using the `font` property. The simplest way to use
    it in Chart.js is to declare it as the default global font. You can also configure
    any font styles if this feature is available:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the following example, we changed several font properties (`family`, `color`,
    `size`, and `style`), using global options from one of the pie/doughnut charts
    that were created in the last chapter:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们更改了几个字体属性（`family`、`color`、`size`和`style`），使用了上一章中创建的一个饼图/环形图的全球选项：
- en: '[PRE31]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The result is shown in the following diagram. The code is available in `Fonts/fonts-1.html`
    and requires the installing of the Yanone Kaffesatz font (or any other font, if
    you edit the code):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 结果在以下图表中显示。代码位于`Fonts/fonts-1.html`，并需要安装Yanone Kaffesatz字体（或任何其他字体，如果你编辑代码）：
- en: '![](img/7ec029b4-5357-401c-9c23-90ca210ef25f.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ec029b4-5357-401c-9c23-90ca210ef25f.png)'
- en: 'A doughnut chart using a web font for titles and labels. Code: *Fonts/fonts-1.html.*'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用网络字体进行标题和标签的环形图。代码：*Fonts/fonts-1.html.*
- en: Colors, gradients, patterns, and shadows
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 颜色、渐变、图案和阴影
- en: Choosing an effective color scheme for data visualization is no easy task. Colors
    aren't simply used to make a chart look nicer. Besides distinguishing and suggesting
    associations between sets of data, they may also communicate information through
    aspects such as hue, contrast, saturation, or lightness. They can even influence
    the mood of the viewer. The choice of colors is never neutral. It may attract
    or repel the viewer from relevant information.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 选择有效的数据可视化配色方案并非易事。颜色不仅仅用于使图表看起来更美观。除了区分和暗示数据集之间的关联外，它们还可能通过色调、对比度、饱和度或亮度等属性传达信息。它们甚至可以影响观看者的情绪。颜色的选择永远不会是中立的。它可能会吸引或排斥观看者对相关信息。
- en: Other aspects may be important, depending on your audience. You may want to
    use gradients, bevels, and shadows for purely aesthetic reasons, but if your audience
    requires maximum accessibility, you may also need to consider the use of color-blind-safe
    palettes or patterns.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 其他方面可能也很重要，具体取决于你的受众。你可能希望出于纯粹的美学原因使用渐变、斜面和阴影，但如果你的受众需要最大程度的可访问性，你也可能需要考虑使用色盲安全调色板或图案。
- en: Configuring colors
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置颜色
- en: Chart.js supports standard HTML/CSS color names and codes (see [Chapter 2](25edc904-3528-40cc-8865-75ccf1fc78eb.xhtml),
    *Technology Fundamentals*), which are assigned to properties that control fonts,
    strokes (lines, and borders), and fills. You can select a color by its name (for
    example, red), hexadecimal code (`#f00`, `#ff0000`), or three-argument generator
    functions that receive RGB or HSL components (`rgb(255,0,0)`, or `hsl(0,100%,50%)`).
    CSS color generator functions also include a four-argument version that controls
    transparency with the alpha component (`'rgba(255,0,0,1)'`, or `'hsla(0,100%,50%,1)'`).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Chart.js支持标准的HTML/CSS颜色名称和代码（见[第2章](25edc904-3528-40cc-8865-75ccf1fc78eb.xhtml)，*技术基础*），这些名称和代码被分配给控制字体、线条（和边框）、填充的属性。你可以通过名称（例如，red）选择颜色，十六进制代码（`#f00`，`#ff0000`），或者接收RGB或HSL组件的三参数生成函数（`rgb(255,0,0)`，或者`hsl(0,100%,50%)`）。CSS颜色生成函数还包括一个四参数版本，它使用alpha组件控制透明度（`'rgba(255,0,0,1)'`，或者`'hsla(0,100%,50%,1)'`）。
- en: The `Chart.defaults.global.defaultColor` property sets a default color for all
    the chart components, but it is mostly overridden by the default configurations
    for fonts, scales, graphical elements, and charts that default to monochromatic
    tones. These properties occur in different chart elements. They have different
    names, but they all end with the `Color` suffix. The basic configuration properties
    (used in `Chart.defaults.global` or the `options` object) contain a single color,
    but they may also be an array of colors when applied to a single dataset.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chart.defaults.global.defaultColor`属性为所有图表组件设置默认颜色，但它通常被字体、刻度、图形元素和默认为单色调的图表的默认配置所覆盖。这些属性出现在不同的图表元素中。它们有不同的名称，但它们都以`Color`后缀结尾。基本配置属性（在`Chart.defaults.global`或`options`对象中使用）包含一个颜色，但应用到一个单一数据集时，它们也可以是一个颜色数组。'
- en: Color schemes and palettes
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配色方案和调色板
- en: Chart.js does not include a native color palette generator. In our examples
    so far, we have either assigned explicit colors, created color palettes with no
    more than six colors, or used random color-generator functions. But colors are
    an important means of communicating information in a chart, and should be chosen
    carefully. If not used with care, your chart may suggest nonexistent relationships
    among data, deceiving the viewer. Colors that vary in lightness and saturation
    suggest a sequential relationship (stronger/weaker or hotter/colder). Opposing
    data can be better represented using divergent color palettes, where extremes
    are represented by complementary colors. If your data represents different categories,
    it will be better visualized with a qualitative color scheme. Depending on your
    audience and the purpose of your chart, you may also need to consider accessibility
    issues, such as color blindness or rendering in color-limited devices, when selecting
    colors. All these tasks are facilitated by the use of a specially-designed color
    palette or scheme.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Chart.js 不包含原生的调色板生成器。在我们之前的例子中，我们要么指定了显式颜色，要么创建了不超过六色的调色板，或者使用了随机颜色生成函数。但颜色是图表中传达信息的重要手段，应该仔细选择。如果不小心使用，您的图表可能会暗示数据之间不存在的关联，欺骗观众。明暗和饱和度不同的颜色暗示着顺序关系（更强/更弱或更热/更冷）。对立的数据可以使用发散调色板更好地表示，其中极端值由互补颜色表示。如果您的数据代表不同的类别，则使用定性颜色方案将更好地可视化。根据您的受众和图表的目的，您在选择颜色时还可能需要考虑可访问性问题，例如色盲或颜色受限设备的渲染。所有这些任务都可以通过使用专门设计的调色板或方案来简化。
- en: A color palette is a fixed-size sequence of colors and is usually represented
    as an array in JavaScript. A **scheme** represents a collection of color palettes
    and is usually a function (or an object) in JavaScript. You can use a scheme to
    generate a palette containing an arbitrary sequence of colors.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 调色板是一系列固定大小的颜色，通常在 JavaScript 中表示为数组。一个 **方案** 代表一系列调色板，通常在 JavaScript 中是一个函数（或一个对象）。您可以使用方案生成包含任意颜色序列的调色板。
- en: You can write your own palettes, schemes, and color generators, but it's much
    easier to generate carefully-selected palettes and schemes using popular services
    and JavaScript libraries.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以编写自己的调色板、方案和颜色生成器，但使用流行的服务和 JavaScript 库生成精心选择的调色板和方案要容易得多。
- en: 'ColorBrewer, by Cynthia Brewer, is a website where you can generate an array
    string containing a palette of colors carefully designed to not only look nice
    on your page, but to also consider the type of data you are using (qualitative,
    diverging, and sequential) and its accessibility (color blindness, display/print,
    and grayscale). You can select and view the effects in real time, configure accessibility
    and data properties, and generate a color string in different formats (including
    JavaScript arrays and CSS):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: ColorBrewer 是由 Cynthia Brewer 创建的网站，您可以在其中生成一个包含精心设计的调色板的数组字符串，这些调色板不仅看起来很漂亮，而且还考虑了您使用的数据类型（定性、发散和顺序）及其可访问性（色盲、显示/打印和灰度）。您可以选择并实时查看效果，配置可访问性和数据属性，并以不同格式（包括
    JavaScript 数组和 CSS）生成颜色字符串：
- en: '![](img/e0680ce4-5cb7-45f8-992c-1ed4513ac502.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0680ce4-5cb7-45f8-992c-1ed4513ac502.png)'
- en: Using ColorBrewer to select and generate a small color-blind-safe palette
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ColorBrewer 选择和生成一个颜色盲安全的小调色板
- en: 'Let''s try it out with a simple bar chart containing a single dataset listed
    in the code, as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个简单的条形图来试试，该条形图包含代码中列出的单个数据集，如下所示：
- en: '[PRE32]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: When you load the page, it should display a monochromatic bar chart, where all
    the bars share the same tone of gray.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当您加载页面时，它应该显示一个单色条形图，其中所有条形共享相同的灰色调。
- en: 'Using the *ColorBrewer* site, choose a six-color palette, configure any properties
    you wish, and then copy the JavaScript array to your clipboard. Paste it as the
    `backGroundColor` property for the dataset:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *ColorBrewer* 网站，选择一个六色调色板，配置您想要的任何属性，然后将 JavaScript 数组复制到您的剪贴板。将其粘贴为数据集的
    `backGroundColor` 属性：
- en: '[PRE33]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then load your chart and see the result. It should be similar to the following
    bar chart. The full code is in `Colors/colors-1-brewer.html`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 然后加载您的图表并查看结果。它应该类似于以下条形图。完整代码在 `Colors/colors-1-brewer.html`：
- en: '![](img/ebed7c63-3e10-495e-864b-fd6e887e5dea.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebed7c63-3e10-495e-864b-fd6e887e5dea.png)'
- en: 'Chart using colors from a ColorBrewer six-color diverging palette. Code: *Colors/colors-1-brewer.html.*'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ColorBrewer 六色发散调色板的颜色进行图表。代码：*Colors/colors-1-brewer.html.*
- en: The *ColorBrewer* palettes are limited to nine colors (or even fewer, depending
    on the settings you choose). If you need more colors, you can choose them from
    *Paul Tol's schemes page*, which is also very popular, or use other generators
    (there are many).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*ColorBrewer* 调色板限制为九种颜色（或根据您选择的设置更少），如果您需要更多颜色，可以从 *保罗·托尔的方案页面* 中选择，该页面也非常受欢迎，或者使用其他生成器（有很多）。'
- en: 'Another option is to use the Google `palette.js` library, which contains color
    palette-generating functions. It supports all schemes from ColorBrewer and *Paul
    Tol''s color schemes page*, and includes additional generators for HSV, RGB, and
    Solarized schemes. To use it, you need to include the `palette.js` file on your
    page. You can download it from the GitHub site or use a CDN:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是使用 Google `palette.js` 库，它包含颜色调色板生成函数。它支持 ColorBrewer 和 *保罗·托尔色彩方案页面*
    中的所有方案，并包括 HSV、RGB 和 Solarized 方案的附加生成器。要使用它，您需要在页面上包含 `palette.js` 文件。您可以从 GitHub
    网站下载它或使用 CDN：
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now you can generate palettes by calling one of the color scheme functions
    listed in the demo page located at `google.github.io/palette.js`, shown as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以通过调用位于 `google.github.io/palette.js` 的演示页面中列出的某个颜色方案函数来生成调色板，如下所示：
- en: '![](img/bbbd9882-3b6d-4ca6-9e70-0db6ad989fbd.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bbbd9882-3b6d-4ca6-9e70-0db6ad989fbd.png)'
- en: Page with a list of color schemes supported by the palette.js generator (see
    the full demo page at google.github.io/palette.js)
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 包含 palette.js 生成器支持的色彩方案的页面列表（请参阅完整的演示页面 google.github.io/palette.js）
- en: 'The demo page allows you to experiment with different schemes, check how many
    colors you can include in a palette, and simulate different levels of color blindness.
    The following code will generate a palette for our bar chart containing six colors
    from Paul Tol''s qualitative color scheme:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 演示页面允许您尝试不同的方案，检查您可以在调色板中包含多少颜色，并模拟不同级别的色盲。以下代码将生成包含保罗·托尔定性色彩方案的六个颜色的调色板，用于我们的条形图：
- en: '[PRE35]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The colors array contains the hexadecimal codes of the colors, but Canvas (and
    Chart.js) will not show the colors unless there is a hash character before the
    number. The following code fixes this:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色数组包含颜色的十六进制代码，但 Canvas（和 Chart.js）不会显示颜色，除非数字前有一个哈希字符。以下代码修复了这个问题：
- en: '[PRE36]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now just set the `backgroundColor` property as the colors array:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只需将 `backgroundColor` 属性设置为颜色数组：
- en: '[PRE37]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The result is shown as follows. The code is in `Colors/colors-2-palettejs.html`:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示。代码在 `Colors/colors-2-palettejs.html` 中：
- en: '![](img/b67e3af8-314b-4b52-9a35-52c585cf3421.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b67e3af8-314b-4b52-9a35-52c585cf3421.png)'
- en: 'Chart using colors from a generated palette. Code: *Colors/colors-2-palettejs.html*'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用生成调色板中的颜色创建的图表。代码：*Colors/colors-2-palettejs.html*
- en: Gradients
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渐变
- en: There is no native support in Chart.js for gradients, but they are fairly easy
    to generate with Canvas. The problem is that a gradient has an absolute position
    in a Canvas object, while your chart may be responsive. If the chart is resized,
    the gradient has to be recalculated and the chart updated.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Chart.js 没有对渐变的原生支持，但它们使用 Canvas 生成相当容易。问题是梯度在 Canvas 对象中有一个绝对位置，而您的图表可能是响应式的。如果图表被调整大小，梯度必须重新计算，并且图表需要更新。
- en: One way to deal with this is to call a gradient function as soon as the chart
    is created and every time the window is resized, feeding the Canvas gradient function
    with the dimensions of the area where the gradient will be applied. We can do
    this with a callback and the Chart.js `update()` function.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这个问题的一种方法是在图表创建时以及每次窗口调整大小时调用一个渐变函数，将渐变将应用于的区域尺寸传递给 Canvas 渐变函数。我们可以使用回调和
    Chart.js 的 `update()` 函数来完成此操作。
- en: 'A gradient in Canvas is created with the following function:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Canvas 中创建渐变的函数如下：
- en: '[PRE38]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The gradient contains the equation of a perpendicular line. To create a linear
    gradient that varies along the *y *axis, we need to draw the line from the bottom
    of the chart to the top. That means that `x0` = `x1` = `0`, `y1` is the bottom
    of the chart, and `y0` is the top. If we write a function that receives a chart
    instance, we can retrieve that information from `scales["y-axis-0"].top` and `scales["y-axis-0"].bottom`.
    Here is a function for drawing gradients for the background colors and a line
    chart with two datasets (`Colors/colors-3-gradient.html`):'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 梯度包含一条垂线的方程。要创建沿 *y* 轴变化的线性梯度，我们需要从图表的底部画到顶部。这意味着 `x0` = `x1` = `0`，`y1` 是图表的底部，而
    `y0` 是顶部。如果我们编写一个接收图表实例的函数，我们可以从 `scales["y-axis-0"].top` 和 `scales["y-axis-0"].bottom`
    中检索这些信息。以下是一个用于绘制背景颜色和包含两个数据集的折线图的梯度函数（`Colors/colors-3-gradient.html`）：
- en: '[PRE39]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You have to call that function as soon as the chart is created and then invoke
    `update()` to redraw the chart. After each resize, call it again. This can be
    done automatically using the `onComplete()` animation callback, as shown in the
    following code:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须在图表创建后立即调用该函数，然后调用 `update()` 重新绘制图表。每次调整大小后，都要再次调用它。这可以通过 `onComplete()`
    动画回调自动完成，如下面的代码所示：
- en: '[PRE40]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The final result is shown in the following screenshot:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果如下所示：
- en: '![](img/597d2447-ec50-41c1-9152-f741e920b687.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/597d2447-ec50-41c1-9152-f741e920b687.png)'
- en: 'Line chart using gradients as backgroundColor for each dataset. Code: *Colors/colors-3-gradient.html.*'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用渐变作为每个数据集的背景颜色的折线图。代码：*Colors/colors-3-gradient.html.*
- en: Patterns
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图案
- en: Patterns are a great way to create charts that don't depend on color-coding,
    and they can be used in color or monochromatic devices or print media. And they
    are, of course, color-blind safe. You can create patterns using HTML Canvas commands
    somewhat similar to the ones used for gradients, but it's much easier to use a
    plugin, such as the Patternomaly plugin, listed in the Chart.js official documentation.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图案是创建不依赖于颜色编码的图表的绝佳方式，并且它们可以在彩色或单色设备或印刷媒体中使用。当然，它们也是色盲安全的。你可以使用类似于用于渐变的 HTML
    Canvas 命令来创建图案，但使用插件，如 Chart.js 官方文档中列出的 Patternomaly 插件，要容易得多。
- en: 'You can obtain Patternomaly by downloading the JavaScript library from its
    GitHub repository ([github.com/ashiguruma/patternomaly](http://github.com/ashiguruma/patternomaly))
    or by using a CDN link:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过从其 GitHub 仓库 ([github.com/ashiguruma/patternomaly](http://github.com/ashiguruma/patternomaly))
    下载 JavaScript 库或使用 CDN 链接来获取 Patternomaly：
- en: '[PRE41]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'To generate a pattern, all you have to do is choose a color and call `pattern.generate()`,
    which will randomly select 1 of the 21 patterns available:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个图案，你只需选择一个颜色并调用 `pattern.generate()`，它将随机选择 21 个可用图案中的 1 个：
- en: '[PRE42]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You can also choose a specific pattern as the first argument of `pattern.draw()`:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将特定图案作为 `pattern.draw()` 的第一个参数选择：
- en: '[PRE43]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'A list of the supported patterns is shown as follows (`Colors/colors-4-patternomaly.html`):'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的图案列表如下所示 (`Colors/colors-4-patternomaly.html`)：
- en: '![](img/9ecaa54d-2018-4ed4-8079-033dfb3f3e60.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ecaa54d-2018-4ed4-8079-033dfb3f3e60.png)'
- en: 'Patterns available in the patternomaly.js plugin. Code: *Colors/colors-4-patternomaly.html.*'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: patternomaly.js 插件中可用的图案。代码：*Colors/colors-4-patternomaly.html.*
- en: 'The `generate()` function also accepts an array of colors as an argument. You
    can include the palette obtained for the Color Brewer example and generate patterns
    based on them:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`generate()` 函数也接受一个颜色数组作为参数。你可以包含为 Color Brewer 示例获取的调色板，并基于它们生成图案：'
- en: '[PRE44]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Let''s use patterns to color our bar chart. For this example (`Colors/colors-5-pattern.html`),
    we will pass a call to the `pallete()` function from the `palette.js` library
    (which returns an array of colors) as the parameter for `generate()`, and assign
    it to the `backgroundColor` property for the bars:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用图案来为条形图着色。在这个例子 (`Colors/colors-5-pattern.html`) 中，我们将从 `palette.js` 库（它返回一个颜色数组）的
    `pallete()` 函数调用传递给 `generate()` 作为参数，并将其分配给条形的 `backgroundColor` 属性：
- en: '[PRE45]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The result is shown as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![](img/9425654e-25ad-4945-b8ea-5ed38dd58542.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9425654e-25ad-4945-b8ea-5ed38dd58542.png)'
- en: 'A color-blind-safe chart using generated patterns and colors. Code: *Colors/colors-5-pattern.html.*'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 使用生成的图案和颜色创建的无色盲图表。代码：*Colors/colors-5-pattern.html.*
- en: Shadows and bevels
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阴影和斜面
- en: 'There are several third-party plugins listed in the official Chart.js documentation,
    and one of them, called `chartjs-plugin-style`, adds a few styling options for
    charts; these options include bevels, shadows, and glows. To use it, you can install
    the plugin via `npm` or download the JavaScript file from `nagix.github.io/chartjs-plugin-style`
    that can be imported on to your page:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方 Chart.js 文档中列出了几个第三方插件，其中之一名为 `chartjs-plugin-style`，为图表添加了一些样式选项；这些选项包括斜面、阴影和发光效果。要使用它，你可以通过
    `npm` 安装插件或从 `nagix.github.io/chartjs-plugin-style` 下载 JavaScript 文件，并将其导入到你的页面中：
- en: '[PRE46]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now you can use new properties in your datasets to add bevels, shadows, and
    glows. The following example configures bevels and adds shadows to a simple bar
    chart. The names of the properties should be self-explanatory:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在你的数据集中使用新的属性来添加斜面、阴影和发光效果。以下示例配置了斜面并为简单的条形图添加了阴影。属性的名称应该是自解释的：
- en: '[PRE47]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The final result is shown next. You can also mix it with generated colors,
    palette functions, and patterns. Try it out with different types of charts! The
    code is in `Colors/colors-6-shadows.html`:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果将在下面展示。您还可以将其与生成的颜色、调色板函数和图案混合。尝试使用不同类型的图表！代码位于 `Colors/colors-6-shadows.html`：
- en: '![](img/10df36f7-a8c6-40ba-bc70-1bd811a37e99.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10df36f7-a8c6-40ba-bc70-1bd811a37e99.png)'
- en: 'A bar chart enhanced with bevels and shadows. Code: *Colors/colors-6-shadows.html.*'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有斜面和阴影的条形图。代码：*Colors/colors-6-shadows.html.*
- en: Adding text elements and labels
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加文本元素和标签
- en: You can always add captions and titles outside your chart, using plain HTML
    or JavaScript. However, Chart.js also includes properties that draw and configure
    text elements inside the canvas as part of the chart. If the properties don't
    give you enough flexibility, you can use callbacks to filter or generate labels.
    If tooltips, titles, and legends aren't enough, you can also use plugins to add
    labels to bars, slices, and lines. You can even draw over the chart using plain
    HTML Canvas. This section will explore some of these techniques.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 您始终可以在图表外部添加标题和副标题，使用纯HTML或JavaScript。然而，Chart.js 还包括绘制和配置图表内部文本元素的属性，作为图表的一部分。如果属性不足以提供足够的灵活性，您可以使用回调来过滤或生成标签。如果工具提示、标题和图例还不够，您还可以使用插件向条形图、切片和线条添加标签。您甚至可以使用纯HTML
    Canvas在图表上绘制。本节将探讨一些这些技术。
- en: Legends and labels
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图例和标签
- en: 'Legends are displayed by default in bar, line, pie and doughnut charts. They
    appear as a list of labeled, colored boxes that relate to the color of the lines,
    bars, or slices represented by a dataset, and they are rendered on the screen
    even when there is a single dataset. In such cases, you may wish to hide them.
    You can also tune several other properties and callbacks. The most important properties
    are listed as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，图例在条形图、折线图、饼图和环形图中显示。它们显示为与数据集表示的线条、条形或切片颜色相关的标签化、彩色框列表，即使在只有一个数据集的情况下也会在屏幕上渲染。在这种情况下，您可能希望隐藏它们。您还可以调整其他几个属性和回调。最重要的属性如下列所示：
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **值** | **描述** |'
- en: '| `Display` | `true` or `false` | Shows or hides the legend of the chart. The
    default is `true`. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `显示` | `true` 或 `false` | 显示或隐藏图表的图例。默认为 `true`。 |'
- en: '| `Position` | `''top''`, `''bottom''`, `''left''`, `''right''` | Selects the
    position of the label in relation to the chart. The default is `''top''`. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `位置` | `''top''`, `''bottom''`, `''left''`, `''right''` | 选择标签相对于图表的位置。默认为
    `''top''`。 |'
- en: '| `Reverse` | `true` or `false` | Reverses the order of the labels in the legend.
    The default is `false`. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `反转` | `true` 或 `false` | 反转图例中标签的顺序。默认为 `false`。 |'
- en: '| `Labels` | Object | Configures the text and the colored box for each label.
    |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `标签` | 对象 | 配置每个标签的文本和彩色框。 |'
- en: Main properties of the legend object
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图例对象的主要属性
- en: 'There are also two callbacks you can attach to legends:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将两个回调附加到图例上：
- en: '| **Property** | **Parameters** | **Description** |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **参数** | **描述** |'
- en: '| `onClick` | (event,label): the `label.text` property contains the text of
    the label; the `label.datasetIndex` contains the index of the array. | Reacts
    to a `''click''` event. The default implementation toggles the label and associated
    dataset on and off. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| `onClick` | (event,label)：`label.text` 属性包含标签的文本；`label.datasetIndex` 包含数组的索引。
    | 对 `''click''` 事件做出反应。默认实现切换标签和相关数据集的显示与隐藏。 |'
- en: '| `onHover` | (event,label): the `label.text` property contains the text of
    the label; the `label.datasetIndex` contains the index of the array. | Reacts
    to a `''hover''` event. This callback is not implemented by default. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| `onHover` | (event,label)：`label.text` 属性包含标签的文本；`label.datasetIndex` 包含数组的索引。
    | 对 `''hover''` 事件做出反应。默认情况下没有实现此回调。 |'
- en: Callbacks for the legends object
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图例对象的回调函数
- en: 'The following example contains a simple three-dataset line chart. Instead of
    hiding the dataset, the `onClick` callback for the legends was overridden to change
    the color of the selected dataset to gray. Note that the dataset index is obtained
    from the callback parameters, but the dataset properties are changed in the object
    tree for the current chart (`this.chart.data.datasets`):'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例包含一个简单的三数据集折线图。不是隐藏数据集，而是覆盖了图例的 `onClick` 回调，将所选数据集的颜色更改为灰色。请注意，数据集索引是从回调参数中获得的，但数据集属性是在当前图表的对象树中更改的（`this.chart.data.datasets`）：
- en: '[PRE48]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The following screenshots show the chart before and after clicking on a dataset.
    See the full code in `Text/text-1-legend-callback.html`:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了点击数据集前后的图表。请参阅完整的代码 `Text/text-1-legend-callback.html`：
- en: '![](img/2de4b741-68e9-4e8c-98d2-24daab945b03.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2de4b741-68e9-4e8c-98d2-24daab945b03.png)'
- en: 'Implementing an onClick callback to change the color of a dataset. Code: *Text/text-1-legend-callback.html.*'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 实现一个 `onClick` 回调以更改数据集的颜色。代码：*Text/text-1-legend-callback.html.*
- en: 'The `legend.labels` property is used to configure the appearance of the individual
    legend labels. The following table shows the properties you are most likely to
    use:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`legend.labels` 属性用于配置单个图例标签的显示外观。以下表格显示了您最可能使用的属性：'
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **值** | **描述** |'
- en: '| `fontSize`, `fontStyle`, `fontColor`, `fontFamily` | Number and string |
    Font properties inherit global font. |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| `fontSize`, `fontStyle`, `fontColor`, `fontFamily` | 数字和字符串 | 字体属性继承全局字体设置。
    |'
- en: '| `boxWidth` | Number | The width of the colored box. The default is 40. |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| `boxWidth` | 数字 | 彩色框的宽度。默认值为 40。 |'
- en: '| `Padding` | Number | The padding between rows of colored boxes. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| `Padding` | 数字 | 彩色框行之间的填充。 |'
- en: Main properties of the legend.labels object
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图例.labels 对象的主要属性
- en: 'There is no property to set the color of the colored box. It will normally
    inherit from the global `defaultColor` if no colors are assigned to the datasets.
    You can change this behavior with the `generateLabels` callback property. You
    can also filter out unwanted labels by assigning a function to the filter `callback`
    property. These are listed as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 没有属性可以设置彩色框的颜色。如果没有为数据集分配颜色，它通常会继承全局的 `defaultColor`。您可以使用 `generateLabels`
    回调属性更改此行为。您还可以通过将函数分配给 `filter` `callback` 属性来过滤掉不需要的标签。以下列出了这些属性：
- en: '| **Property** | **Parameters** | **Description** |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **参数** | **描述** |'
- en: '| `generateLabels` | `(chart)`: The current chart. This is the same as `this.chart`.
    | The default implementation returns the dataset label as text and a rectangular
    colored box that matches the dataset''s colors. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `generateLabels` | `(chart)`: 当前图表。这与 `this.chart` 相同。 | 默认实现返回数据集标签作为文本和一个与数据集颜色匹配的矩形彩色框。
    |'
- en: '| `filter` | `(label, item)`: `label.text` contains the text of the label;
    `label.datasetIndex` contains the index of the array; `item.datasets` contains
    the dataset array; and `item.labels` contains the *x* axis labels or pie slice
    labels. | This contains a filtering function that returns `true` for labels that
    should be displayed. The default implementation returns `true`. This property
    only filters out labels, not datasets (the lines or slices will still be displayed).
    |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| `filter` | `(label, item)`: `label.text` 包含标签的文本；`label.datasetIndex` 包含数组索引；`item.datasets`
    包含数据集数组；`item.labels` 包含 *x* 轴标签或饼图切片标签。 | 这包含一个过滤函数，用于返回应显示的标签。默认实现返回 `true`。此属性仅过滤标签，不过滤数据集（线条或切片仍会显示）。
    |'
- en: Callback properties for the legend.labels object
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图例.labels 对象的回调属性
- en: 'Label styles can be configured inside the `options` object, in each chart instance,
    or for all charts using the `Global.defaults.legend` object, for example:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 标签样式可以在 `options` 对象内部配置，在每个图表实例中配置，或者使用 `Global.defaults.legend` 对象为所有图表配置，例如：
- en: '[PRE49]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The following filter configuration will only show the labels for datasets that
    have a maximum value below `20`. All three datasets will be shown, but only two
    labels will be displayed (`Text/text-2-legend-label.html`):'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 以下过滤配置将仅显示最大值低于 `20` 的数据集的标签。所有三个数据集都将显示，但只有两个标签将显示（`Text/text-2-legend-label.html`）：
- en: '[PRE50]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The `generateLabels` callback should only be implemented if you want to create
    your own legend. If you have a very complex legend, you can generate an HTML legend
    implementing a callback function for the `Chart.defaults.global.legendCallback`
    property or in each chart using the `legendCallback` property in options. This
    will be explored in [Chapter 7](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml)*,* *Advanced
    Chart.js*.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`generateLabels` 回调应该仅在您想创建自己的图例时实现。如果您有一个非常复杂的图例，可以通过实现 `Chart.defaults.global.legendCallback`
    属性的回调函数或在每个图表中使用 `options` 中的 `legendCallback` 属性来生成 HTML 图例。这将在 [第 7 章](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml)*,*
    高级 Chart.js* 中探讨。'
- en: Titles
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标题
- en: 'The default in Chart.js is to have the title turned off, since you can also
    create your title with greater flexibility in HTML. If you still want to have
    a title in your chart, you need to set at least set two properties: `display`
    (with the value `true`) and `text` (with the text of your title). Other properties
    you might want to configure are listed as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: Chart.js 的默认设置是不开启标题，因为您也可以在 HTML 中以更大的灵活性创建自己的标题。如果您仍然想在图表中添加标题，您至少需要设置两个属性：`display`（值为
    `true`）和 `text`（标题文本）。您可能还想配置的其他属性如下：
- en: '| **Property** | **Value** | **Description** |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **值** | **描述** |'
- en: '| `display` | `true` or `false` | Displays the title. The default is `false`.
    |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| `display` | `true` 或 `false` | 显示标题。默认为 `false`。 |'
- en: '| `text` | `String` or `String[]` | A string containing the text of the title
    or an array of strings, for a multi-line title. |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| `text` | `String` 或 `String[]` | 包含标题文本的字符串或字符串数组，用于多行标题。 |'
- en: '| `fontStyle,` `fontFamily`, `fontSize`, `fontColor` | `String` and `Number`
    | Font attributes. The default `fontStyle` is bold, but the others are inherited.
    |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| `fontStyle`、`fontFamily`、`fontSize`、`fontColor` | `String` 和 `Number` | 字体属性。默认
    `fontStyle` 为粗体，但其他属性继承。 |'
- en: '| `lineHeight` | `Number` | The default line height is 1.2. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| `lineHeight` | `Number` | 默认行高为 1.2。 |'
- en: '| `padding` | `Number` | The default padding is 10. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| `padding` | `Number` | 默认填充为 10。 |'
- en: '| `position` | `''top''`, `''bottom''`, `''left''` or `''right''` | This is
    where the title should be placed. The default is `''top''`. The titles'' places
    on the sides will be rotated 90 degrees counterclockwise. |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| `position` | `''top''`、`''bottom''`、`''left''` 或 `''right''` | 这是标题应该放置的位置。默认为
    `''top''`。标题在侧面的位置将逆时针旋转 90 度。 |'
- en: '[Main properties of the options.title object]'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '[options.title 对象的主要属性]'
- en: You can configure the title using `Chart.defaults.global.title` for all charts,
    or in the `options` object for a new chart instance. You can also change the title
    at any time after updating a chart or responding to events.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `Chart.defaults.global.title` 为所有图表配置标题，或在新的图表实例的 `options` 对象中配置。您也可以在更新图表或响应事件后随时更改标题。
- en: Adding labels to lines, bars, and slices
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向线条、条形和切片添加标签
- en: In [Chapter 4](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml), *Creating Charts*,
    we used a simple plugin to add labels to pie slices. In this section, we will
    show you two others that allow a lot more customization. They are listed in the
    official documentation for Chart.js but are developed by third parties and should
    be installed or downloaded from their own repositories.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 4 章](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml) *创建图表* 中，我们使用了一个简单的插件向饼图切片添加标签。在本节中，我们将向您展示另外两个允许更多定制的插件。它们列在
    Chart.js 的官方文档中，但由第三方开发，应从它们自己的仓库安装或下载。
- en: 'The `chart-plugin-datalabels` plugin offers the highly customizable labeling
    of values in all types of charts, with support for scripting and event handling.
    You can see several samples in `chartjs-plugin-datalabels.netlify.com/samples/`,
    where there is also a link to the documentation and the GitHub repository. The
    easiest way install it is with a CDN. Include the following code in your page:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`chart-plugin-datalabels` 插件提供了对所有类型图表中值的高自定义标签功能，支持脚本和事件处理。您可以在 `chartjs-plugin-datalabels.netlify.com/samples/`
    中看到几个示例，那里也有文档链接和 GitHub 仓库链接。安装它的最简单方法是使用 CDN。在您的页面中包含以下代码：'
- en: '[PRE51]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Configurations can be made per dataset, per chart, or globally, using one of
    the three contexts as follows:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下三种上下文中的一种来按数据集、按图表或全局进行配置：
- en: 'In datasets: `dataset.datalabels.*`'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据集中：`dataset.datalabels.*`
- en: In a chart instance: `options.plugins.datalabels.*`
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图表实例中：`options.plugins.datalabels.*`
- en: Globally, for all charts: `Chart.defaults.global.plugins.datalabels.*`
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局，对所有图表：`Chart.defaults.global.plugins.datalabels.*`
- en: 'The local settings override the global ones. Details are beyond the scope of
    this chapter, but the plugin is very well documented. The following is a simple
    example, using the line chart we used in the previous sections. All the configuration
    was done in the `options.plugins.datalabels` object, which adds nice labels inside
    rounded rectangles over the data points (see `Text/text-4-datalabels.html`):'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 本地设置会覆盖全局设置。详细内容超出了本章范围，但该插件有很好的文档记录。以下是一个简单示例，使用我们在上一节中使用的折线图。所有配置都是在 `options.plugins.datalabels`
    对象中完成的，该对象在数据点上方添加了漂亮的标签（见 `Text/text-4-datalabels.html`）：
- en: '[PRE52]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The result is shown in the following screenshot:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下截图所示：
- en: '![](img/9a4a3283-094d-4652-aa5b-d9056ccd08c0.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a4a3283-094d-4652-aa5b-d9056ccd08c0.png)'
- en: 'Using the chartjs-datalabels plugin to add value labeling to a line chart.
    Code: The code is in *Text/text-4-datalabels.html.*'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 chartjs-datalabels 插件向折线图添加值标签。代码：代码位于 *Text/text-4-datalabels.html*。
- en: There's a lot more that can be done with this plugin. Try it on other charts
    and check out the samples.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此插件还有更多可以做的事情。在其他图表上尝试它并查看示例。
- en: 'A second labeling plugin is `chart-plugin-outlabels`*.* It allows for better
    visualization of the data values in pie and doughnut charts, displaying the labels
    outside the slices. You can see a sample in `piechart-outlabels.netlify.com/sample/`,
    where you will also find a link to the documentation and the GitHub repository.
    To use it on your page, include the following:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个标签插件是 `chart-plugin-outlabels`*.* 它允许在饼图和环形图中更好地可视化数据值，将标签显示在切片外部。您可以在 `piechart-outlabels.netlify.com/sample/`
    中看到一个示例，在那里您还可以找到文档和GitHub仓库的链接。要在您的页面上使用它，请包含以下内容：
- en: '[PRE53]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'As in many other plugins, configurations can be made per dataset, per chart,
    or globally, using one of the three contexts as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 如许多其他插件一样，可以通过以下三种上下文中的一种来按数据集、按图表或全局进行配置：
- en: 'In datasets: `dataset.outlabels.*`'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据集中：`dataset.outlabels.*`
- en: In a chart instance: `options.plugins.outlabels.*`
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图表实例中：`options.plugins.outlabels.*`
- en: Globally, for all charts: `Chart.defaults.global.plugins.outlabels.*`
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有图表全局：`Chart.defaults.global.plugins.outlabels.*`
- en: 'The plugin also introduces a new chart type: `outlabeledPie`. It can be used
    in place of `pie` or `doughnut` and is simpler to configure.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件还引入了一种新的图表类型：`outlabeledPie`。它可以替代 `pie` 或 `doughnut`，并且配置起来更简单。
- en: 'The following is a simple example of the doughnut chart we used in previous
    examples, using an `outlabeledPie` (see `Text/text-5-outlabels.html` for the full
    code):'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们之前示例中使用的 doughnut 图表的简单示例，使用 `outlabeledPie`（完整代码请见 `Text/text-5-outlabels.html`）：
- en: '[PRE54]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The result is shown in the following screenshot:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![](img/bba25ea9-854f-4161-9f5f-f58d68402450.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bba25ea9-854f-4161-9f5f-f58d68402450.png)'
- en: 'A pie chart with values labeled by the chartjs-outlabels plugin. Code: *Text/text-5-outlabels.html.*'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 chartjs-outlabels 插件标记值的饼图。代码：*Text/text-5-outlabels.html*。
- en: Check the documentation for more options, and try to use this plugin in other
    charts.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 查看文档以获取更多选项，并尝试在其他图表中使用此插件。
- en: Interactions, data updates, and animations
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互、数据更新和动画
- en: Unless configuration options are changed, all charts come pre-configured with
    default behaviors and transitions, which are animated. Animations are triggered
    by events, such as window resizing, data updates, or user interaction. The default
    pre-configured chart interactions include hovering the mouse over or near value
    points (used to trigger the appearance of tooltips containing details) and clicking
    or touching legends. This provides basic interactivity with smooth data transitions,
    but you may still want to fine-tune it by writing callbacks for different events
    or animation stages, changing animation properties such as duration or ease algorithms,
    or even turn the animations off completely. If you need more control, you can
    extend much of this functionality using plugins or standard JavaScript.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 除非更改配置选项，否则所有图表都预先配置了默认行为和过渡效果，这些效果是动画化的。动画由事件触发，例如窗口调整大小、数据更新或用户交互。默认预配置的图表交互包括将鼠标悬停在或靠近值点上（用于触发包含详细信息的工具提示的出现）以及点击或触摸图例。这提供了基本的交互性以及平滑的数据过渡，但您可能仍然希望通过编写不同事件或动画阶段的回调函数、更改动画属性（如持续时间或缓动算法）或甚至完全关闭动画来对其进行微调。如果您需要更多控制，您可以使用插件或标准JavaScript扩展大部分此功能。
- en: Data updates
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据更新
- en: 'An interactive chart may display data that is changing periodically. A web
    page might contain an algorithm that changes data automatically; it may download
    new data files with new data, or it may allow the user to enter or request changes
    in the source-data values. In any of these cases, as soon as the new data is available,
    the chart should be updated. Data updates can occur automatically inside callback
    functions or can be explicitly called using the `update()` command. To use it,
    you will need to save a variable handle to the chart object:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 一个交互式图表可能显示周期性变化的数据。一个网页可能包含一个自动更改数据的算法；它可能下载包含新数据的新数据文件，或者它可能允许用户输入或请求更改源数据值。在任何这些情况下，一旦新数据可用，图表都应该更新。数据更新可以在回调函数内部自动发生，也可以使用
    `update()` 命令显式调用。要使用它，您需要保存对图表对象的变量引用：
- en: '[PRE55]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'When using callbacks, you can usually refer to the current instance of the
    chart, using the `this` keyword:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用回调时，通常可以使用`this`关键字引用图表的当前实例：
- en: '[PRE56]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Changes usually involve properties in datasets and options of a chart instance.
    Let''s see an example. In the following code, the `square()` function will square
    all the data values in a chart and change the *x* axis to a *logarithmic* scale.
    The `squareRoot()` function does the opposite. After updating the grid (with the
    undocumented `scaleMerge()` function), the chart is updated:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 变更通常涉及图表实例的`datasets`和`options`属性。让我们看一个例子。在以下代码中，`square()`函数将平方图表中的所有数据值并将*x*轴更改为对数刻度。`squareRoot()`函数执行相反的操作。在更新网格（使用未记录的`scaleMerge()`函数）后，图表被更新：
- en: '[PRE57]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The HTML button is registered as an event listener that calls one of the two
    functions, depending on the current *y* axis type, and updates the chart:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: HTML按钮注册为事件监听器，根据当前*y*轴类型调用两个函数之一，并更新图表：
- en: '[PRE58]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Try it out. The full code is in `Animation/animation-1-update.html`, and the
    following screenshots show the chart in the two different states:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试一下。完整代码在`Animation/animation-1-update.html`中，以下截图显示了图表的两个不同状态：
- en: '![](img/1842e841-245a-41d0-a652-316b2654e102.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1842e841-245a-41d0-a652-316b2654e102.png)'
- en: 'Updating a chart after changing values and scales. Code: *Animation/animation-1-update.html.*'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 更改值和刻度后更新图表。代码：*Animation/animation-1-update.html.*
- en: Events
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'You can select which events your chart will respond to by locally configuring
    the `options.events` property, or globally using `Chart.defaults.global.events`.
    The default configuration includes an array with six event names:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过局部配置`options.events`属性或全局使用`Chart.defaults.global.events`来选择你的图表将响应哪些事件。默认配置包括一个包含六个事件名称的数组：
- en: '[PRE59]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'These are the events the browser will listen to when the cursor is within the
    canvas context. They control the behavior of clickable items such as legend labels
    and tooltips. If you are writing your own handlers, you may wish to turn off some
    events by redefining the property to include an array containing fewer events.
    For example, if you want to disable hovering and touch events in a chart, allowing
    only the `click` event, you can add the following to your options configuration:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是当光标位于画布上下文内时浏览器将监听的事件。它们控制可点击项（如图例标签和工具提示）的行为。如果你正在编写自己的处理程序，你可能希望通过重新定义属性来包含包含较少事件的数组来关闭某些事件。例如，如果你想在一个图表中禁用悬停和触摸事件，只允许`click`事件，你可以在你的选项配置中添加以下内容：
- en: '[PRE60]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Configuring animations
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置动画
- en: You should have noted that when you click the button, the lines don't move to
    their new positions immediately. The chart transitions smoothly, and it takes
    about a second. Transitions triggered by calling `update()` will automatically
    use standard animation configurations.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经注意到，当你点击按钮时，线条不会立即移动到它们的新位置。图表平滑过渡，大约需要一秒钟。通过调用`update()`触发的过渡将自动使用标准动画配置。
- en: 'There are two animation properties you can easily change. They are listed as
    follows:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个动画属性你可以轻松更改。它们如下列出：
- en: '| **Property** | **Values** | **Description** |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **值** | **描述** |'
- en: '| Duration | `Number` | The duration of the animation in milliseconds. The
    default is 1,000 (one second). |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| 持续时间 | `Number` | 动画持续的时间（以毫秒为单位）。默认为1,000（一秒）。 |'
- en: '| Easing | `''linear''`, `''easeInQuad''`, `''easeOutQuad'', ''easeInOutQuad''`,
    `''easeInCubic''`, `''easeOutCubic''`, `''easeInOutCubic''`, `''easeInQuart''`,
    `''easeOutQuart''`, `''easeInOutQuart''`, `''easeInQuint''`, `''easeOutQuint''`,
    `''easeInOutQuint''`, `''easeInSine''`, `''easeOutSine''`, `''easeInOutSine''`,
    `''easeInExpo''`, `''easeOutExpo''`, `''easeInOutExpo''`, `''easeInCirc''`, `''easeOutCirc''`,
    `''easeInOutCirc''`, `''easeInElastic''`, `''easeOutElastic''`, `''easeInOutElastic''`,
    `''easeInBack''`, `''easeOutBack''`, `''easeInOutBack''`, `''easeInBounce''`,
    `''easeOutBounce''`, `''easeInOutBounce''` | The easing function to use for the
    animation. These are based on *Robert Penner''s Easing Functions* ([robertpenner.com/easing](http://robertpenner.com/easing)).
    They are easier to choose if you look at a graphical representation of each one,
    which is available at [http://easings.net](http://easings.net). |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| 缓动 | `''linear''`, `''easeInQuad''`, `''easeOutQuad'', ''easeInOutQuad''`,
    `''easeInCubic''`, `''easeOutCubic''`, `''easeInOutCubic''`, `''easeInQuart''`,
    `''easeOutQuart''`, `''easeInOutQuart''`, `''easeInQuint''`, `''easeOutQuint''`,
    `''easeInOutQuint''`, `''easeInSine''`, `''easeOutSine''`, `''easeInOutSine''`,
    `''easeInExpo''`, `''easeOutExpo''`, `''easeInOutExpo''`, `''easeInCirc''`, `''easeOutCirc''`,
    `''easeInOutCirc''`, `''easeInElastic''`, `''easeOutElastic''`, `''easeInOutElastic''`,
    `''easeInBack''`, `''easeOutBack''`, `''easeInOutBack''`, `''easeInBounce''`,
    `''easeOutBounce''`, `''easeInOutBounce''` | 用于动画的缓动函数。这些基于*Robert Penner的缓动函数*（[robertpenner.com/easing](http://robertpenner.com/easing)）。如果你查看每个缓动函数的图形表示，选择起来会更简单，这些图形表示可在[http://easings.net](http://easings.net)找到。
    |'
- en: Properties for the options.animation object
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 选项.animation对象的属性
- en: 'To make an instant transition to the new values (without any animations), you
    should include an object containing `duration:0`:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 要立即过渡到新值（不进行任何动画），你应该包含一个包含`duration:0`的对象：
- en: '[PRE61]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Now the change will happen instantly.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 现在变化将立即发生。
- en: Properties can be configured per chart, in the options object, or globally in
    `Chart.defaults.global`.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 属性可以在每个图表的选项对象中配置，或在`Chart.defaults.global`中全局配置。
- en: 'There are two `callback` properties for configuring animations, listed as follows.
    One allows you to hook on to each step of the animation, and the other allows
    you to run code after the animation is complete:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个用于配置动画的`callback`属性，如下列出。一个允许你挂钩到动画的每个步骤，另一个允许动画完成后运行代码：
- en: '| **Property** | **Parameters** | **Description** |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **参数** | **描述** |'
- en: '| `onProgress` | (`animation`): The main properties are `animation.chart` (the
    current chart), `animation.currentStep`, and `animation.numSteps` (`currentStep`/`numSteps`
    returns a percentage of the animation so far) | Called after each step of an animation.
    |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| `onProgress` | (`animation`): 主要属性有`animation.chart`（当前图表）、`animation.currentStep`和`animation.numSteps`（`currentStep`/`numSteps`返回动画到目前为止的百分比）
    | 在动画的每个步骤后调用。 |'
- en: '| `onComplete` | (`animation`): The main properties are `animation.chart` (the
    current chart), `animation.currentStep`, and `animation.numSteps` (`currentStep`/`numSteps`
    returns a percentage of the animation so far) | Called at the end of an animation.
    Any changes to be applied after the chart is rendered (such as a Canvas overlay)
    should be called in this context. |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| `onComplete` | (`animation`): 主要属性有`animation.chart`（当前图表）、`animation.currentStep`和`animation.numSteps`（`currentStep`/`numSteps`返回动画到目前为止的百分比）
    | 在动画结束时调用。任何在图表渲染后要应用的变化（如Canvas覆盖）应在此上下文中调用。 |'
- en: Callback properties for options.animation
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 选项.animation的回调属性
- en: 'We added an HTML progress bar to the web page of the previous example and configured
    the line chart animation to last five seconds in the following code. At each step,
    the progress bar is updated by the `onProgress` callback function. Each callback
    also prints the current step to the JavaScript console each time it is called:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面示例的网页中添加了一个HTML进度条，并在以下代码中将折线图动画设置为持续五秒。在每一步，进度条通过`onProgress`回调函数更新。每次回调都会在每次调用时将当前步骤打印到JavaScript控制台：
- en: '[PRE62]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The full code is in `Animation/animation-2.html`. Here is a screenshot showing
    the animation halfway through:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码在`Animation/animation-2.html`中。以下是动画进行到一半时的截图：
- en: '![](img/3c0745ed-f7b5-47e2-b9b1-f845be453449.png)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c0745ed-f7b5-47e2-b9b1-f845be453449.png)'
- en: 'Using a progress bar during a five-second animation, after updating the chart.
    Code: *Animation/animation-2.html.*'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新图表后的五秒动画期间使用进度条。代码：*Animation/animation-2.html*。
- en: In this example, the `onComplete` callback is simply printing to the console,
    but it is one of the most important callbacks if you need to update or change
    anything after the chart is rendered on the screen. If you draw something to a
    Canvas outside a callback, Chart.js will erase it. In [Chapter 4](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml),
    *Creating Charts*, we used it to draw text, using the Canvas API over a doughnut
    chart. In this chapter, we added a gradient color to the chart, after every resizing
    event.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`onComplete` 回调只是简单地打印到控制台，但如果在图表渲染到屏幕后需要更新或更改任何内容，它是最重要的回调之一。如果你在回调之外将某个东西绘制到
    Canvas 上，Chart.js 将会擦除它。在[第4章](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml)“创建图表”中，我们使用它通过
    Canvas API 在饼图上绘制文本。在本章中，我们在每次调整大小事件后给图表添加了渐变色。
- en: Summary
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored several ways to configure the look and feel of
    interactive charts created with Chart.js, using native properties, as well as
    some extensions and plugins.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了使用 Chart.js 创建交互式图表的多种配置外观和感觉的方法，包括使用原生属性，以及一些扩展和插件。
- en: We first learned how to set global defaults, which can be inherited by multiple
    charts and used to set a consistent theme across different charts, sharing basic
    layout, fonts, and color schemes. We also explored some online services, tools,
    extensions, and plugins for styling charts and adding labels. Then we configured
    the behavior of a chart after updates and user interactions, tinkering with animation
    algorithms and callbacks.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先学习了如何设置全局默认值，这些默认值可以被多个图表继承，并用于在不同图表之间设置一致的主题，共享基本的布局、字体和配色方案。我们还探索了一些在线服务、工具、扩展和插件，用于样式化图表和添加标签。然后我们配置了图表在更新和用户交互后的行为，调整动画算法和回调。
- en: You already know enough Chart.js to create any chart. In the next chapter, we
    will dive deeper into some of these topics, configure tooltips, learn how to program
    the Chart.js API, and you will learn how to create your own plugins.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经掌握了足够的 Chart.js 知识来创建任何图表。在下一章中，我们将更深入地探讨一些这些主题，配置工具提示，学习如何编程 Chart.js API，你还将学习如何创建自己的插件。
- en: References
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '**Books and websites**:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '**书籍和网站**：'
- en: 'Chart.js official documentation and samples: [https://www.chartjs.org/docs/latest/](https://www.chartjs.org/docs/latest/)'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chart.js 官方文档和示例：[https://www.chartjs.org/docs/latest/](https://www.chartjs.org/docs/latest/)
- en: '**Data sources**:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据来源**：'
- en: 'Volumes of the World’s Oceans (based on ETOPO1): `Chapter03/Pages/BarChart1.html`
    and others. [https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html](https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html)'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 世界海洋的体积（基于 ETOPO1）：`Chapter03/Pages/BarChart1.html` 以及其他。[https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html](https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html)
- en: 'World population: `Chapter04/WPP2017_UN.csv`. *United Nations World Population
    Prospects 2017*. [https://www.un.org](https://www.un.org)'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 世界人口：`Chapter04/WPP2017_UN.csv`。*联合国2017年世界人口展望*。[https://www.un.org](https://www.un.org)
