- en: Configuring Styles and Interactivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to configure the look and feel of a chart
    so it will reflect a desired layout or style, follow good practices of chart design,
    and tune its interactive and responsive behavior. This includes configuring colors,
    gradients, patterns and fonts, setting margins, padding, borders, fills, backgrounds,
    line widths, dashes, positioning titles and legends, and configuring the behavior
    of transitions and animations. Some of these properties are easily configured
    using Chart.js configuration options, but others require plugins and extensions,
    which will also be introduced in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Default configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fonts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Colors, gradients, patterns, and shadows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding text elements and labels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interactions, data updates, and animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every chart created in Chart.js comes previously configured with default properties.
    You can always override these properties in the `options` object when creating
    a new Chart instance, but you can also override them for all or for many of your
    charts, by setting the properties directly in the `Chart.defaults` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the default line tension is `0.4` for any kind of chart. If you
    want all your charts to use only straight lines and have scales beginning at zero,
    you can make all pages load a `defaults.js` file that declares the following defaults:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to have only curved lines in the radar charts, you can override
    the property for all radar charts (but not any other kind of chart) using the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, if you have a specific line chart where you would prefer to use curved
    lines, you can again override the property when you create the chart instance,
    using its `options` configuration object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Some options can even be configured for a specific dataset within a chart,
    which is the case with line tension. If you use `lineTension: 0.3` for a specific
    dataset in the `datasets` array, only the line corresponding to that dataset will
    exhibit the new tension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The order is significant, and so is the hierarchy. Properties set in a more
    specific context will almost always override the values set in a more general
    context. And any global properties should be set *before* instantiating a chart.
    In the next sections, we will explore options that can be defined at different
    configuration levels, their object structure, and their default values.
  prefs: []
  type: TYPE_NORMAL
- en: Global defaults
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Properties in `Chart.defaults.global` contain configuration options for all
    types of charts, including graphical elements, titles and captions, layout properties,
    animation, tooltips, events, and plugins. But it doesn''t include grids and scales,
    which are configured in the `Chart.defaults.scale` object. The options available
    in `Chart.defaults.global` are listed as follows. All these properties, except
    the default font and color settings, are also available as properties in the options
    configuration object of any chart instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Object** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `defaultColor` | CSS color | The default color for all chart elements. This
    property is overriden in several chart elements, so it''s not really very useful.
    The default is `''rgba(0,0,0,0.1)''`. |'
  prefs: []
  type: TYPE_TB
- en: '| `defaultFontColor` | CSS color (examples: `''lightblue''`, `''#9cf''`, `''#ff0000''`,
    `''rgb(100%,50%,25%)''`, `''hsl(60,100%,50%)''`, `''rgba(100%,50%,25%,0.6)''`,
    `''hsla(60,100%,50%,0.1)''`) | The default color for all text (unless overridden
    with a more specific font color property). The default is `''#666''`. |'
  prefs: []
  type: TYPE_TB
- en: '| `defaultFontFamily` | CSS font-family name or list (example: `''Helvetica`,
    `"Helvetica Neue"`, `sans-serif''`) | The default family for all text (unless
    overridden with a more specific font color property). The default is `''Helvetica
    Neue''`, `''Helvetica''`, `''Arial''`, `sans-serif`. |'
  prefs: []
  type: TYPE_TB
- en: '| `defaultFontSize` | Font size in pixels | The default size in pixels for
    all text (unless overridden with a more specific font size property). The default
    is 12. |'
  prefs: []
  type: TYPE_TB
- en: '| `defaultFontStyle` | CSS font-style (ex: `''bold''`, `''italic''`, `''normal''`)
    or any style available with the font that is being used (ex: `''condensed bold''`,
    `''light''`, and so on) | The default style for all text (unless overridden with
    a more specific font style property). The default is `''normal''`. |'
  prefs: []
  type: TYPE_TB
- en: '| `layout.padding` | The number or object with numerical properties for `top`,
    `left`, `right`, `bottom` | If the value is a number, the padding in pixels is
    applied to all sides of a chart. If it''s an object, the individual values can
    be applied to different sides of the chart. |'
  prefs: []
  type: TYPE_TB
- en: '| `maintainAspectRatio` | `true` or `false` | Maintains the aspect ratio of
    the canvas element. |'
  prefs: []
  type: TYPE_TB
- en: '| `responsive` | `true` or `false` | Resizes the chart when the canvas is resized.
    The default is `true`. |'
  prefs: []
  type: TYPE_TB
- en: '| `showLines` | `true` or `false` | If `true`, shows lines between point values.
    Default is `true`, but is overridden to `false` in scatter charts. |'
  prefs: []
  type: TYPE_TB
- en: '| `title` | Object | See the *Legends and labels* section in this chapter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `legend` | Object | See the *Legends and labels* section in this chapter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `tooltips` | Object | See[Chapter 7](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml),
    *Advanced Chart.js*. |'
  prefs: []
  type: TYPE_TB
- en: '| `hover` | Object | See [Chapter 7](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml)*, Advanced
    Chart.js*. |'
  prefs: []
  type: TYPE_TB
- en: '| `elements` | Object | See the *Chart elements* section in this chapter. |'
  prefs: []
  type: TYPE_TB
- en: '| `events` | Object | See the *Animation* section in this chapter. |'
  prefs: []
  type: TYPE_TB
- en: '| `plugins` | Object | See [Chapter 7](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml),
    *Advanced Chart.js*. |'
  prefs: []
  type: TYPE_TB
- en: '| `animation` | Object | See the *Animation* section in this chapter. |'
  prefs: []
  type: TYPE_TB
- en: Configurable options in Charts.defaults.global that can be configured for all
    charts. Callbacks are not listed.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following configuration will turn off-line rendering between
    value points for any charts. Since this property is not overridden in line or
    radar charts, if you create a line chart, it won''t have any lines. Only the points
    will be visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This other configuration will turn off the legends for all charts (very useful
    for single-dataset charts):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Scale defaults
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Scales and grids can be globally configured in the `Charts.defaults.scale`
    object. The following table lists the top-level properties and some of the default
    properties of this object. Some of these defaults are overridden in specific charts.
    In these cases, changing them in this context may not have any effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Object** | **Description** | **Default properties** |'
  prefs: []
  type: TYPE_TB
- en: '| `display` | Displays (`true`) or not (`false`) the scales for this chart.
    | The default is `true`. |'
  prefs: []
  type: TYPE_TB
- en: '| `offset` | Adds extra space to left and right edges of the chart. | The default
    is `false` (overridden to `true` in bar charts). |'
  prefs: []
  type: TYPE_TB
- en: '| `gridLines` | Default properties and callbacks for all scales (some are overridden
    in specific chart types). See [Chapter 5](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml),
    *Scales and Grid Configuration*. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `scaleLabel` | The default properties and callbacks for all scales (some
    are overridden in specific chart types). See [Chapter 5](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml)*,
    Scales and Grid Configuration,* for details. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `ticks` | The default properties and callbacks for all scales (some are overriden
    in specific chart types). See [Chapter 5](f3bca5ff-1e17-4cb4-bbb9-6d71b8847ed0.xhtml)*,
    Scales and Grid Configuration,* for details. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Options in Charts.defaults.scales that can be configured for scales of all charts.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code will place the same labels on all axes in any
    charts that use Cartesian axes (`bar`, `horizontalBar`, `line`, `scatter`, `bubble`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `display` property is available in all scale components. With `display:
    false`, you can globally remove ticks, labels, gridlines, and other non-chart
    information from your default charts, overriding these properties in specific
    charts only when necessary. This is a good practice and will maximize the data-to-ink
    ratio of your charts.'
  prefs: []
  type: TYPE_NORMAL
- en: The code fragments in this section are from `Config/defaults-1-global-config.html`,
    in the GitHub repository for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Graphical elements** are the primitives used to render visualizations of
    datasets in different types of charts. You can define defaults for them configuring
    the four objects in the `Chart.defaults.global.elements` context, listed as follows.
    Some of these properties are overridden in the defaults for certain charts, so
    changing them at this level may not cause any effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Object** | **Description** | **Default properties** |'
  prefs: []
  type: TYPE_TB
- en: '| `arc` | The default properties for Canvas arcs, which are used in pie, doughnut,
    and polar area charts. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `line` | The default properties for Canvas lines, which are used in line
    and radar charts. See [Chapter 2](25edc904-3528-40cc-8865-75ccf1fc78eb.xhtml),
    *Technology* *Fundamentals,* for Canvas properties used in `borderCapStyle` and
    `borderJoinStyle`. See [Chapter 4](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml), C*reating
    Charts*, for `fill` strategies. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Point` | Value points are actually circles drawn with Canvas arcs. This
    object contains default properties for points in line, radar, scatter, or bubble
    charts. See [Chapter 4](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml),* Creating
    Charts,* for more point styles. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Rectangle` | The default properties for Canvas rectangles used in bar and
    `horizontalBar` charts. One of the borders is not drawn (skipped). |'
  prefs: []
  type: TYPE_TB
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Options in Charts.defaults.global.elements that apply to elements in all charts
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will make all line and radar charts use red dashed 5-pixel
    lines as the default, unless they are overridden in their default configuration
    or `options` object. See `Config/defaults-2-global-elements.html`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Chart defaults
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Chart.default` context contains an object for each chart type supported
    in Chart.js. The types are in the following table, which also lists some of the
    properties previously configured in each one. These properties may override the
    global defaults for chart styles and elements (`Chart.default.global`) and the
    default properties for scales (`Chart.default.scales`). You can define new defaults
    by changing these properties in the `Chart.default` context, or locally inside
    an options object:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Object** | **Description** | **Default properties (selection)** |'
  prefs: []
  type: TYPE_TB
- en: '| `bar` | The default properties for bar charts |'
  prefs: []
  type: TYPE_TB
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `horizontalBar` | The default properties for horizontal bar charts |'
  prefs: []
  type: TYPE_TB
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `pie` | The default properties and callbacks for pie charts |'
  prefs: []
  type: TYPE_TB
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `doughnut` | The default properties and callbacks for doughnut charts |'
  prefs: []
  type: TYPE_TB
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `line` | The default properties and callbacks for line charts |'
  prefs: []
  type: TYPE_TB
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `radar` | The default properties for radar charts |'
  prefs: []
  type: TYPE_TB
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `polarArea` | The default properties for polar area charts |'
  prefs: []
  type: TYPE_TB
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `scatter` | The default properties for scatter charts |'
  prefs: []
  type: TYPE_TB
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `bubble` | The default properties for bubble charts |'
  prefs: []
  type: TYPE_TB
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Default options in Charts.defaults for different types of charts
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check the current values of your default properties by printing them
    to your JavaScript console and inspecting the object tree, with `console.log()`.
    The following code will print the context root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also inspect (and modify the properties of) the chart instance. In
    this case, you need to assign the new chart to a variable handle (see `Config/defaults-1-global-config.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Chart.js uses Canvas to select and display local and installed fonts. The font
    configuration involves setting up to four font properties: family, size, style,
    and color. A `fontFamily` is a string containing a list of font-family names,
    a `fontStyle` contains a string with the name of a style supported by the corresponding
    font-family, a `fontColor` is any valid CSS-compatible color string, and the `fontSize`
    is a number that represents the size in pixels. You can configure font attributes
    in any object that includes text: titles, tick captions, legend labels, or tooltips,
    or you can set global defaults that will be inherited by text elements that don''t
    explicitly set font attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting standard fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The basic font properties are named `fontFamily`, `fontSize`, `fontStyle`,
    and `fontColor`. Some objects have prefixed versions of these same properties.
    These objects are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Object containing text element** | **Description** | **Font properties**
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.global` | Global defaults | `defaultFontFamily`, `defaultFontSize`, `defaultFontStyle,
    defaultFontColor` |'
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.global.title` | Chart title | `fontFamily`, `fontSize`,'
  prefs: []
  type: TYPE_NORMAL
- en: '`fontStyle`,'
  prefs: []
  type: TYPE_NORMAL
- en: '`fontColor` |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Chart.defaults.scale.ticks` | Axis label |'
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.scale.ticks.minor` | Minor tick label |'
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.scale.ticks.major` | Major tick label |'
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.global.legend` | Legend label |'
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.global.tooltips` | Tooltip header | `titleFontFamily`, `titleFontSize`, `titleFontStyle`, `titleFontColor`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.global.tooltips` | Tooltip body | `bodyFontFamily`, `bodyFontSize`, `bodyFontStyle`, `bodyFontColor`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Chart.defaults.global.tooltips` | Tooltip footer | `footerFontFamily`, `footerFontSize,
    footerFontStyle`, `footerFontColor` |'
  prefs: []
  type: TYPE_TB
- en: Objects that have font configuration properties
  prefs: []
  type: TYPE_NORMAL
- en: 'Since it''s usually good practice to avoid using more than one font family
    for the whole chart, global options are the best place to configure this property.
    You can also set other font defaults:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You can always choose to override specific properties where appropriate, such
    as the font size of a chart title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'And you can override it again, setting a different value in the chart instance,
    if necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Using Web fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chart.js can use any fonts that are available for your website. Besides the
    standard fonts supported by all browsers (*serif*, *sans-serif*, *monospace*),
    you can also use online fonts loaded by a style sheet.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we are using a free web font (OFL license), called
    *Yanone* Kaffeesatz*,* obtained from Google Fonts. To install it, simply load
    the CSS by adding the following link to the `<head>` of your HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can use the Yanone Kaffeesatz font family in CSS and HTML. Canvas can
    set it as the context font, using the `font` property. The simplest way to use
    it in Chart.js is to declare it as the default global font. You can also configure
    any font styles if this feature is available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following example, we changed several font properties (`family`, `color`,
    `size`, and `style`), using global options from one of the pie/doughnut charts
    that were created in the last chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown in the following diagram. The code is available in `Fonts/fonts-1.html`
    and requires the installing of the Yanone Kaffesatz font (or any other font, if
    you edit the code):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ec029b4-5357-401c-9c23-90ca210ef25f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A doughnut chart using a web font for titles and labels. Code: *Fonts/fonts-1.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Colors, gradients, patterns, and shadows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Choosing an effective color scheme for data visualization is no easy task. Colors
    aren't simply used to make a chart look nicer. Besides distinguishing and suggesting
    associations between sets of data, they may also communicate information through
    aspects such as hue, contrast, saturation, or lightness. They can even influence
    the mood of the viewer. The choice of colors is never neutral. It may attract
    or repel the viewer from relevant information.
  prefs: []
  type: TYPE_NORMAL
- en: Other aspects may be important, depending on your audience. You may want to
    use gradients, bevels, and shadows for purely aesthetic reasons, but if your audience
    requires maximum accessibility, you may also need to consider the use of color-blind-safe
    palettes or patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chart.js supports standard HTML/CSS color names and codes (see [Chapter 2](25edc904-3528-40cc-8865-75ccf1fc78eb.xhtml),
    *Technology Fundamentals*), which are assigned to properties that control fonts,
    strokes (lines, and borders), and fills. You can select a color by its name (for
    example, red), hexadecimal code (`#f00`, `#ff0000`), or three-argument generator
    functions that receive RGB or HSL components (`rgb(255,0,0)`, or `hsl(0,100%,50%)`).
    CSS color generator functions also include a four-argument version that controls
    transparency with the alpha component (`'rgba(255,0,0,1)'`, or `'hsla(0,100%,50%,1)'`).
  prefs: []
  type: TYPE_NORMAL
- en: The `Chart.defaults.global.defaultColor` property sets a default color for all
    the chart components, but it is mostly overridden by the default configurations
    for fonts, scales, graphical elements, and charts that default to monochromatic
    tones. These properties occur in different chart elements. They have different
    names, but they all end with the `Color` suffix. The basic configuration properties
    (used in `Chart.defaults.global` or the `options` object) contain a single color,
    but they may also be an array of colors when applied to a single dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Color schemes and palettes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chart.js does not include a native color palette generator. In our examples
    so far, we have either assigned explicit colors, created color palettes with no
    more than six colors, or used random color-generator functions. But colors are
    an important means of communicating information in a chart, and should be chosen
    carefully. If not used with care, your chart may suggest nonexistent relationships
    among data, deceiving the viewer. Colors that vary in lightness and saturation
    suggest a sequential relationship (stronger/weaker or hotter/colder). Opposing
    data can be better represented using divergent color palettes, where extremes
    are represented by complementary colors. If your data represents different categories,
    it will be better visualized with a qualitative color scheme. Depending on your
    audience and the purpose of your chart, you may also need to consider accessibility
    issues, such as color blindness or rendering in color-limited devices, when selecting
    colors. All these tasks are facilitated by the use of a specially-designed color
    palette or scheme.
  prefs: []
  type: TYPE_NORMAL
- en: A color palette is a fixed-size sequence of colors and is usually represented
    as an array in JavaScript. A **scheme** represents a collection of color palettes
    and is usually a function (or an object) in JavaScript. You can use a scheme to
    generate a palette containing an arbitrary sequence of colors.
  prefs: []
  type: TYPE_NORMAL
- en: You can write your own palettes, schemes, and color generators, but it's much
    easier to generate carefully-selected palettes and schemes using popular services
    and JavaScript libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'ColorBrewer, by Cynthia Brewer, is a website where you can generate an array
    string containing a palette of colors carefully designed to not only look nice
    on your page, but to also consider the type of data you are using (qualitative,
    diverging, and sequential) and its accessibility (color blindness, display/print,
    and grayscale). You can select and view the effects in real time, configure accessibility
    and data properties, and generate a color string in different formats (including
    JavaScript arrays and CSS):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0680ce4-5cb7-45f8-992c-1ed4513ac502.png)'
  prefs: []
  type: TYPE_IMG
- en: Using ColorBrewer to select and generate a small color-blind-safe palette
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try it out with a simple bar chart containing a single dataset listed
    in the code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: When you load the page, it should display a monochromatic bar chart, where all
    the bars share the same tone of gray.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the *ColorBrewer* site, choose a six-color palette, configure any properties
    you wish, and then copy the JavaScript array to your clipboard. Paste it as the
    `backGroundColor` property for the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Then load your chart and see the result. It should be similar to the following
    bar chart. The full code is in `Colors/colors-1-brewer.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ebed7c63-3e10-495e-864b-fd6e887e5dea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Chart using colors from a ColorBrewer six-color diverging palette. Code: *Colors/colors-1-brewer.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: The *ColorBrewer* palettes are limited to nine colors (or even fewer, depending
    on the settings you choose). If you need more colors, you can choose them from
    *Paul Tol's schemes page*, which is also very popular, or use other generators
    (there are many).
  prefs: []
  type: TYPE_NORMAL
- en: 'Another option is to use the Google `palette.js` library, which contains color
    palette-generating functions. It supports all schemes from ColorBrewer and *Paul
    Tol''s color schemes page*, and includes additional generators for HSV, RGB, and
    Solarized schemes. To use it, you need to include the `palette.js` file on your
    page. You can download it from the GitHub site or use a CDN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can generate palettes by calling one of the color scheme functions
    listed in the demo page located at `google.github.io/palette.js`, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bbbd9882-3b6d-4ca6-9e70-0db6ad989fbd.png)'
  prefs: []
  type: TYPE_IMG
- en: Page with a list of color schemes supported by the palette.js generator (see
    the full demo page at google.github.io/palette.js)
  prefs: []
  type: TYPE_NORMAL
- en: 'The demo page allows you to experiment with different schemes, check how many
    colors you can include in a palette, and simulate different levels of color blindness.
    The following code will generate a palette for our bar chart containing six colors
    from Paul Tol''s qualitative color scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The colors array contains the hexadecimal codes of the colors, but Canvas (and
    Chart.js) will not show the colors unless there is a hash character before the
    number. The following code fixes this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now just set the `backgroundColor` property as the colors array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown as follows. The code is in `Colors/colors-2-palettejs.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b67e3af8-314b-4b52-9a35-52c585cf3421.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Chart using colors from a generated palette. Code: *Colors/colors-2-palettejs.html*'
  prefs: []
  type: TYPE_NORMAL
- en: Gradients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no native support in Chart.js for gradients, but they are fairly easy
    to generate with Canvas. The problem is that a gradient has an absolute position
    in a Canvas object, while your chart may be responsive. If the chart is resized,
    the gradient has to be recalculated and the chart updated.
  prefs: []
  type: TYPE_NORMAL
- en: One way to deal with this is to call a gradient function as soon as the chart
    is created and every time the window is resized, feeding the Canvas gradient function
    with the dimensions of the area where the gradient will be applied. We can do
    this with a callback and the Chart.js `update()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'A gradient in Canvas is created with the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The gradient contains the equation of a perpendicular line. To create a linear
    gradient that varies along the *y *axis, we need to draw the line from the bottom
    of the chart to the top. That means that `x0` = `x1` = `0`, `y1` is the bottom
    of the chart, and `y0` is the top. If we write a function that receives a chart
    instance, we can retrieve that information from `scales["y-axis-0"].top` and `scales["y-axis-0"].bottom`.
    Here is a function for drawing gradients for the background colors and a line
    chart with two datasets (`Colors/colors-3-gradient.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You have to call that function as soon as the chart is created and then invoke
    `update()` to redraw the chart. After each resize, call it again. This can be
    done automatically using the `onComplete()` animation callback, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The final result is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/597d2447-ec50-41c1-9152-f741e920b687.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Line chart using gradients as backgroundColor for each dataset. Code: *Colors/colors-3-gradient.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Patterns are a great way to create charts that don't depend on color-coding,
    and they can be used in color or monochromatic devices or print media. And they
    are, of course, color-blind safe. You can create patterns using HTML Canvas commands
    somewhat similar to the ones used for gradients, but it's much easier to use a
    plugin, such as the Patternomaly plugin, listed in the Chart.js official documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can obtain Patternomaly by downloading the JavaScript library from its
    GitHub repository ([github.com/ashiguruma/patternomaly](http://github.com/ashiguruma/patternomaly))
    or by using a CDN link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'To generate a pattern, all you have to do is choose a color and call `pattern.generate()`,
    which will randomly select 1 of the 21 patterns available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also choose a specific pattern as the first argument of `pattern.draw()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'A list of the supported patterns is shown as follows (`Colors/colors-4-patternomaly.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ecaa54d-2018-4ed4-8079-033dfb3f3e60.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Patterns available in the patternomaly.js plugin. Code: *Colors/colors-4-patternomaly.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `generate()` function also accepts an array of colors as an argument. You
    can include the palette obtained for the Color Brewer example and generate patterns
    based on them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use patterns to color our bar chart. For this example (`Colors/colors-5-pattern.html`),
    we will pass a call to the `pallete()` function from the `palette.js` library
    (which returns an array of colors) as the parameter for `generate()`, and assign
    it to the `backgroundColor` property for the bars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9425654e-25ad-4945-b8ea-5ed38dd58542.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A color-blind-safe chart using generated patterns and colors. Code: *Colors/colors-5-pattern.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Shadows and bevels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several third-party plugins listed in the official Chart.js documentation,
    and one of them, called `chartjs-plugin-style`, adds a few styling options for
    charts; these options include bevels, shadows, and glows. To use it, you can install
    the plugin via `npm` or download the JavaScript file from `nagix.github.io/chartjs-plugin-style`
    that can be imported on to your page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can use new properties in your datasets to add bevels, shadows, and
    glows. The following example configures bevels and adds shadows to a simple bar
    chart. The names of the properties should be self-explanatory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The final result is shown next. You can also mix it with generated colors,
    palette functions, and patterns. Try it out with different types of charts! The
    code is in `Colors/colors-6-shadows.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10df36f7-a8c6-40ba-bc70-1bd811a37e99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A bar chart enhanced with bevels and shadows. Code: *Colors/colors-6-shadows.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Adding text elements and labels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can always add captions and titles outside your chart, using plain HTML
    or JavaScript. However, Chart.js also includes properties that draw and configure
    text elements inside the canvas as part of the chart. If the properties don't
    give you enough flexibility, you can use callbacks to filter or generate labels.
    If tooltips, titles, and legends aren't enough, you can also use plugins to add
    labels to bars, slices, and lines. You can even draw over the chart using plain
    HTML Canvas. This section will explore some of these techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Legends and labels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Legends are displayed by default in bar, line, pie and doughnut charts. They
    appear as a list of labeled, colored boxes that relate to the color of the lines,
    bars, or slices represented by a dataset, and they are rendered on the screen
    even when there is a single dataset. In such cases, you may wish to hide them.
    You can also tune several other properties and callbacks. The most important properties
    are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Display` | `true` or `false` | Shows or hides the legend of the chart. The
    default is `true`. |'
  prefs: []
  type: TYPE_TB
- en: '| `Position` | `''top''`, `''bottom''`, `''left''`, `''right''` | Selects the
    position of the label in relation to the chart. The default is `''top''`. |'
  prefs: []
  type: TYPE_TB
- en: '| `Reverse` | `true` or `false` | Reverses the order of the labels in the legend.
    The default is `false`. |'
  prefs: []
  type: TYPE_TB
- en: '| `Labels` | Object | Configures the text and the colored box for each label.
    |'
  prefs: []
  type: TYPE_TB
- en: Main properties of the legend object
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also two callbacks you can attach to legends:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `onClick` | (event,label): the `label.text` property contains the text of
    the label; the `label.datasetIndex` contains the index of the array. | Reacts
    to a `''click''` event. The default implementation toggles the label and associated
    dataset on and off. |'
  prefs: []
  type: TYPE_TB
- en: '| `onHover` | (event,label): the `label.text` property contains the text of
    the label; the `label.datasetIndex` contains the index of the array. | Reacts
    to a `''hover''` event. This callback is not implemented by default. |'
  prefs: []
  type: TYPE_TB
- en: Callbacks for the legends object
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example contains a simple three-dataset line chart. Instead of
    hiding the dataset, the `onClick` callback for the legends was overridden to change
    the color of the selected dataset to gray. Note that the dataset index is obtained
    from the callback parameters, but the dataset properties are changed in the object
    tree for the current chart (`this.chart.data.datasets`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshots show the chart before and after clicking on a dataset.
    See the full code in `Text/text-1-legend-callback.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2de4b741-68e9-4e8c-98d2-24daab945b03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Implementing an onClick callback to change the color of a dataset. Code: *Text/text-1-legend-callback.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `legend.labels` property is used to configure the appearance of the individual
    legend labels. The following table shows the properties you are most likely to
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `fontSize`, `fontStyle`, `fontColor`, `fontFamily` | Number and string |
    Font properties inherit global font. |'
  prefs: []
  type: TYPE_TB
- en: '| `boxWidth` | Number | The width of the colored box. The default is 40. |'
  prefs: []
  type: TYPE_TB
- en: '| `Padding` | Number | The padding between rows of colored boxes. |'
  prefs: []
  type: TYPE_TB
- en: Main properties of the legend.labels object
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no property to set the color of the colored box. It will normally
    inherit from the global `defaultColor` if no colors are assigned to the datasets.
    You can change this behavior with the `generateLabels` callback property. You
    can also filter out unwanted labels by assigning a function to the filter `callback`
    property. These are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `generateLabels` | `(chart)`: The current chart. This is the same as `this.chart`.
    | The default implementation returns the dataset label as text and a rectangular
    colored box that matches the dataset''s colors. |'
  prefs: []
  type: TYPE_TB
- en: '| `filter` | `(label, item)`: `label.text` contains the text of the label;
    `label.datasetIndex` contains the index of the array; `item.datasets` contains
    the dataset array; and `item.labels` contains the *x* axis labels or pie slice
    labels. | This contains a filtering function that returns `true` for labels that
    should be displayed. The default implementation returns `true`. This property
    only filters out labels, not datasets (the lines or slices will still be displayed).
    |'
  prefs: []
  type: TYPE_TB
- en: Callback properties for the legend.labels object
  prefs: []
  type: TYPE_NORMAL
- en: 'Label styles can be configured inside the `options` object, in each chart instance,
    or for all charts using the `Global.defaults.legend` object, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The following filter configuration will only show the labels for datasets that
    have a maximum value below `20`. All three datasets will be shown, but only two
    labels will be displayed (`Text/text-2-legend-label.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The `generateLabels` callback should only be implemented if you want to create
    your own legend. If you have a very complex legend, you can generate an HTML legend
    implementing a callback function for the `Chart.defaults.global.legendCallback`
    property or in each chart using the `legendCallback` property in options. This
    will be explored in [Chapter 7](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml)*,* *Advanced
    Chart.js*.
  prefs: []
  type: TYPE_NORMAL
- en: Titles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The default in Chart.js is to have the title turned off, since you can also
    create your title with greater flexibility in HTML. If you still want to have
    a title in your chart, you need to set at least set two properties: `display`
    (with the value `true`) and `text` (with the text of your title). Other properties
    you might want to configure are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `display` | `true` or `false` | Displays the title. The default is `false`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `text` | `String` or `String[]` | A string containing the text of the title
    or an array of strings, for a multi-line title. |'
  prefs: []
  type: TYPE_TB
- en: '| `fontStyle,` `fontFamily`, `fontSize`, `fontColor` | `String` and `Number`
    | Font attributes. The default `fontStyle` is bold, but the others are inherited.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `lineHeight` | `Number` | The default line height is 1.2. |'
  prefs: []
  type: TYPE_TB
- en: '| `padding` | `Number` | The default padding is 10. |'
  prefs: []
  type: TYPE_TB
- en: '| `position` | `''top''`, `''bottom''`, `''left''` or `''right''` | This is
    where the title should be placed. The default is `''top''`. The titles'' places
    on the sides will be rotated 90 degrees counterclockwise. |'
  prefs: []
  type: TYPE_TB
- en: '[Main properties of the options.title object]'
  prefs: []
  type: TYPE_NORMAL
- en: You can configure the title using `Chart.defaults.global.title` for all charts,
    or in the `options` object for a new chart instance. You can also change the title
    at any time after updating a chart or responding to events.
  prefs: []
  type: TYPE_NORMAL
- en: Adding labels to lines, bars, and slices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml), *Creating Charts*,
    we used a simple plugin to add labels to pie slices. In this section, we will
    show you two others that allow a lot more customization. They are listed in the
    official documentation for Chart.js but are developed by third parties and should
    be installed or downloaded from their own repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `chart-plugin-datalabels` plugin offers the highly customizable labeling
    of values in all types of charts, with support for scripting and event handling.
    You can see several samples in `chartjs-plugin-datalabels.netlify.com/samples/`,
    where there is also a link to the documentation and the GitHub repository. The
    easiest way install it is with a CDN. Include the following code in your page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Configurations can be made per dataset, per chart, or globally, using one of
    the three contexts as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In datasets: `dataset.datalabels.*`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a chart instance: `options.plugins.datalabels.*`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Globally, for all charts: `Chart.defaults.global.plugins.datalabels.*`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The local settings override the global ones. Details are beyond the scope of
    this chapter, but the plugin is very well documented. The following is a simple
    example, using the line chart we used in the previous sections. All the configuration
    was done in the `options.plugins.datalabels` object, which adds nice labels inside
    rounded rectangles over the data points (see `Text/text-4-datalabels.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a4a3283-094d-4652-aa5b-d9056ccd08c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the chartjs-datalabels plugin to add value labeling to a line chart.
    Code: The code is in *Text/text-4-datalabels.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: There's a lot more that can be done with this plugin. Try it on other charts
    and check out the samples.
  prefs: []
  type: TYPE_NORMAL
- en: 'A second labeling plugin is `chart-plugin-outlabels`*.* It allows for better
    visualization of the data values in pie and doughnut charts, displaying the labels
    outside the slices. You can see a sample in `piechart-outlabels.netlify.com/sample/`,
    where you will also find a link to the documentation and the GitHub repository.
    To use it on your page, include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'As in many other plugins, configurations can be made per dataset, per chart,
    or globally, using one of the three contexts as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In datasets: `dataset.outlabels.*`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a chart instance: `options.plugins.outlabels.*`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Globally, for all charts: `Chart.defaults.global.plugins.outlabels.*`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The plugin also introduces a new chart type: `outlabeledPie`. It can be used
    in place of `pie` or `doughnut` and is simpler to configure.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a simple example of the doughnut chart we used in previous
    examples, using an `outlabeledPie` (see `Text/text-5-outlabels.html` for the full
    code):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bba25ea9-854f-4161-9f5f-f58d68402450.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A pie chart with values labeled by the chartjs-outlabels plugin. Code: *Text/text-5-outlabels.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Check the documentation for more options, and try to use this plugin in other
    charts.
  prefs: []
  type: TYPE_NORMAL
- en: Interactions, data updates, and animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unless configuration options are changed, all charts come pre-configured with
    default behaviors and transitions, which are animated. Animations are triggered
    by events, such as window resizing, data updates, or user interaction. The default
    pre-configured chart interactions include hovering the mouse over or near value
    points (used to trigger the appearance of tooltips containing details) and clicking
    or touching legends. This provides basic interactivity with smooth data transitions,
    but you may still want to fine-tune it by writing callbacks for different events
    or animation stages, changing animation properties such as duration or ease algorithms,
    or even turn the animations off completely. If you need more control, you can
    extend much of this functionality using plugins or standard JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Data updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An interactive chart may display data that is changing periodically. A web
    page might contain an algorithm that changes data automatically; it may download
    new data files with new data, or it may allow the user to enter or request changes
    in the source-data values. In any of these cases, as soon as the new data is available,
    the chart should be updated. Data updates can occur automatically inside callback
    functions or can be explicitly called using the `update()` command. To use it,
    you will need to save a variable handle to the chart object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'When using callbacks, you can usually refer to the current instance of the
    chart, using the `this` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Changes usually involve properties in datasets and options of a chart instance.
    Let''s see an example. In the following code, the `square()` function will square
    all the data values in a chart and change the *x* axis to a *logarithmic* scale.
    The `squareRoot()` function does the opposite. After updating the grid (with the
    undocumented `scaleMerge()` function), the chart is updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The HTML button is registered as an event listener that calls one of the two
    functions, depending on the current *y* axis type, and updates the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Try it out. The full code is in `Animation/animation-1-update.html`, and the
    following screenshots show the chart in the two different states:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1842e841-245a-41d0-a652-316b2654e102.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Updating a chart after changing values and scales. Code: *Animation/animation-1-update.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can select which events your chart will respond to by locally configuring
    the `options.events` property, or globally using `Chart.defaults.global.events`.
    The default configuration includes an array with six event names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the events the browser will listen to when the cursor is within the
    canvas context. They control the behavior of clickable items such as legend labels
    and tooltips. If you are writing your own handlers, you may wish to turn off some
    events by redefining the property to include an array containing fewer events.
    For example, if you want to disable hovering and touch events in a chart, allowing
    only the `click` event, you can add the following to your options configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Configuring animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have noted that when you click the button, the lines don't move to
    their new positions immediately. The chart transitions smoothly, and it takes
    about a second. Transitions triggered by calling `update()` will automatically
    use standard animation configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two animation properties you can easily change. They are listed as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Values** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Duration | `Number` | The duration of the animation in milliseconds. The
    default is 1,000 (one second). |'
  prefs: []
  type: TYPE_TB
- en: '| Easing | `''linear''`, `''easeInQuad''`, `''easeOutQuad'', ''easeInOutQuad''`,
    `''easeInCubic''`, `''easeOutCubic''`, `''easeInOutCubic''`, `''easeInQuart''`,
    `''easeOutQuart''`, `''easeInOutQuart''`, `''easeInQuint''`, `''easeOutQuint''`,
    `''easeInOutQuint''`, `''easeInSine''`, `''easeOutSine''`, `''easeInOutSine''`,
    `''easeInExpo''`, `''easeOutExpo''`, `''easeInOutExpo''`, `''easeInCirc''`, `''easeOutCirc''`,
    `''easeInOutCirc''`, `''easeInElastic''`, `''easeOutElastic''`, `''easeInOutElastic''`,
    `''easeInBack''`, `''easeOutBack''`, `''easeInOutBack''`, `''easeInBounce''`,
    `''easeOutBounce''`, `''easeInOutBounce''` | The easing function to use for the
    animation. These are based on *Robert Penner''s Easing Functions* ([robertpenner.com/easing](http://robertpenner.com/easing)).
    They are easier to choose if you look at a graphical representation of each one,
    which is available at [http://easings.net](http://easings.net). |'
  prefs: []
  type: TYPE_TB
- en: Properties for the options.animation object
  prefs: []
  type: TYPE_NORMAL
- en: 'To make an instant transition to the new values (without any animations), you
    should include an object containing `duration:0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Now the change will happen instantly.
  prefs: []
  type: TYPE_NORMAL
- en: Properties can be configured per chart, in the options object, or globally in
    `Chart.defaults.global`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two `callback` properties for configuring animations, listed as follows.
    One allows you to hook on to each step of the animation, and the other allows
    you to run code after the animation is complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `onProgress` | (`animation`): The main properties are `animation.chart` (the
    current chart), `animation.currentStep`, and `animation.numSteps` (`currentStep`/`numSteps`
    returns a percentage of the animation so far) | Called after each step of an animation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `onComplete` | (`animation`): The main properties are `animation.chart` (the
    current chart), `animation.currentStep`, and `animation.numSteps` (`currentStep`/`numSteps`
    returns a percentage of the animation so far) | Called at the end of an animation.
    Any changes to be applied after the chart is rendered (such as a Canvas overlay)
    should be called in this context. |'
  prefs: []
  type: TYPE_TB
- en: Callback properties for options.animation
  prefs: []
  type: TYPE_NORMAL
- en: 'We added an HTML progress bar to the web page of the previous example and configured
    the line chart animation to last five seconds in the following code. At each step,
    the progress bar is updated by the `onProgress` callback function. Each callback
    also prints the current step to the JavaScript console each time it is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The full code is in `Animation/animation-2.html`. Here is a screenshot showing
    the animation halfway through:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c0745ed-f7b5-47e2-b9b1-f845be453449.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using a progress bar during a five-second animation, after updating the chart.
    Code: *Animation/animation-2.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the `onComplete` callback is simply printing to the console,
    but it is one of the most important callbacks if you need to update or change
    anything after the chart is rendered on the screen. If you draw something to a
    Canvas outside a callback, Chart.js will erase it. In [Chapter 4](9c3dd8a3-6dde-42ba-9e93-ae1e2884cc57.xhtml),
    *Creating Charts*, we used it to draw text, using the Canvas API over a doughnut
    chart. In this chapter, we added a gradient color to the chart, after every resizing
    event.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored several ways to configure the look and feel of
    interactive charts created with Chart.js, using native properties, as well as
    some extensions and plugins.
  prefs: []
  type: TYPE_NORMAL
- en: We first learned how to set global defaults, which can be inherited by multiple
    charts and used to set a consistent theme across different charts, sharing basic
    layout, fonts, and color schemes. We also explored some online services, tools,
    extensions, and plugins for styling charts and adding labels. Then we configured
    the behavior of a chart after updates and user interactions, tinkering with animation
    algorithms and callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: You already know enough Chart.js to create any chart. In the next chapter, we
    will dive deeper into some of these topics, configure tooltips, learn how to program
    the Chart.js API, and you will learn how to create your own plugins.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Books and websites**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chart.js official documentation and samples: [https://www.chartjs.org/docs/latest/](https://www.chartjs.org/docs/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data sources**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Volumes of the World’s Oceans (based on ETOPO1): `Chapter03/Pages/BarChart1.html`
    and others. [https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html](https://www.ngdc.noaa.gov/mgg/global/etopo1_ocean_volumes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'World population: `Chapter04/WPP2017_UN.csv`. *United Nations World Population
    Prospects 2017*. [https://www.un.org](https://www.un.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
