- en: Building a Single Page App using Web Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been using Web Components as an individual entity. But Web Components
    can be used to make something even more complicated. In this chapter, we will
    be making a single page web app, solely with the help of Web Components.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding project requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Figuring out reusable Web Components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring starter project and APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding project requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to a single-page web app, it can be anything from one page to
    a thousand pages that you can show on the web app. But for the simplicity of this
    web app, we will keep it to a maximum of three pages. And the project that we
    will be trying to create is a GIF collection web app.
  prefs: []
  type: TYPE_NORMAL
- en: We all have been on the internet, and seen how memes and GIFs circulate. In
    this web app, we will be building something like a GIF repository. The purpose
    of this web app is to let the user see a list of trending GIFs, search for a specific
    topic, or maybe see a random GIF.
  prefs: []
  type: TYPE_NORMAL
- en: What we are also going to do is use the GIPHY API to get the GIFs. This way,
    we won't have to worry about manually scanning the web for GIFs.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a basic understanding of our web app and the purpose behind
    it, let's take a look at how we can convert this requirement into a set of reusable
    Web Components.
  prefs: []
  type: TYPE_NORMAL
- en: Figuring out reusable Web Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main page of the web app we''re aiming to create might look something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87b5895f-061c-49f0-b00d-0f97962a9ea7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This page shows that there is a header on top, an input field and a button
    that can be used to search a string, and a set of results. When we break this
    page into a set of components, the component list looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Header component**: A header that can be used on all pages. It needs to be
    sticky on the top, and clicking on the links should change the URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GIF cover component**: A component that takes a URL as an attribute and shows
    it. It can also have a height limit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search bar component**: A component that is responsible for getting input
    from a user and searching for a string with the help of APIs. And when the search
    is complete, it returns the results with the help of a custom event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search container**: A component that will have a Search bar component inside
    it, and will show GIF cover components based on the result obtained by the Search
    bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at the trending page. What this page is supposed to do,
    just like the search page, is show a collection of GIFs, but instead of making
    the user search for a specific string, it needs to show the trending GIFs. You
    should be able to find something similar on the Giphy site: [https://giphy.com/trending-gifs](https://giphy.com/trending-gifs).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what it will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88992eb6-5012-49cc-9d71-433662a668eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, it doesn''t look that much different from the search page.
    Let''s break down the page into Web Components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Header component**: Same as previously'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GIF cover**: The same component that we used on the last page to show GIFs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show Trending component**: The container component that will make the call
    to the API to get trending GIFs and create a collection of GIF Cover components'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In all, we will be using just three components for this page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the last page. This page is responsible for showing a
    randomly generated GIF, and this is what it will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e9e198e-da21-4a71-92b6-cd30a84f8dd7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, there is a header at the top, a random GIF, and a button to
    get another random GIF. Let''s break it down into Web Components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Header component**: Same as previously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GIF cover**: Same as the last one, but we won''t be seeing a lot of them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show Random component**: A component that is responsible for making the API
    call to get a random GIF. It also needs to have a button that needs to trigger
    the API again when it is clicked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we know what Web Components are required for this project, let's start
    working on it.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Starter Project and APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A starter project is the most minimalistic project that is configured for a
    single page web app. You can download it from the `Starter Project` directory
    and put it anywhere on your computer via the following link: [https://github.com/PacktPublishing/Getting-Started-with-Web-Components/tree/master/Chapter06](https://github.com/PacktPublishing/Getting-Started-with-Web-Components/tree/master/Chapter06)'
  prefs: []
  type: TYPE_NORMAL
- en: Pre-requisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you start using this project, make sure that you have Node.js installed
    on your computer. You can install it from the Node.js website ([https://nodejs.org/en/](https://nodejs.org/en/))
    or, if you want, you can use Homebrew ([https://brew.sh/](https://brew.sh/)) to
    install it.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you are done installing Node.js, you will need to install certain packages
    that would make the project work without doing a lot of manual configurations
    at our end. All the packages are already specified in the `package.json` file.
    If you want, feel free to look at the contents of this file. The most important
    package is `webpack`, which is going to be used for bundling our code so that
    it can be served on a server. Another important package is `node-sass`. It will
    help us write our code in SCSS.
  prefs: []
  type: TYPE_NORMAL
- en: I am assuming that you know a little bit of SCSS. It is mostly CSS, but if you
    get confused, feel free to take a look at the SCSS documentation ([https://sass-lang.com/documentation/synta](https://sass-lang.com/documentation/syntax)[x](https://sass-lang.com/documentation/syntax)).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install the packages involved by typing the following steps in the
    Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will install all the packages that will be required for this project. It
    might take a few minutes though, based on the speed of your internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Starter Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have installed all our dependencies, it is time to run the Starter
    Project and see what it looks like.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the project, run the following command in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will show you the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This means that webpack is done creating a `bundle.js` file from the six listed
    files. And, you can simply go to a browser and open the following URL: `http://localhost:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: This will show our starter project with the text My App.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-requisite for API calls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You, as a user, will need to register for an API key and this can be done by
    following the steps as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the following URL and register for a free account: [https://developers.giphy.com](https://developers.giphy.com)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you are done creating an account, create an app by clicking on the Create
    New App button at the top, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae35e90b-8157-4e3a-96c5-ffb0a8f75e8c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you are done creating the app, you will be dropped onto a dashboard page
    where you can see your registered apps along with the API key required, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6270799a-1f18-4356-9ad5-9788b821f758.png)'
  prefs: []
  type: TYPE_IMG
- en: If you have a moment, feel free to take a look at the API docs: [https://developers.giphy.com/docs/](https://developers.giphy.com/docs/).
  prefs: []
  type: TYPE_NORMAL
- en: But you don't have to worry about the APIs too much; we will be talking about
    this when we talk about components.
  prefs: []
  type: TYPE_NORMAL
- en: App components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we take a look at the `<my-app>` component, let''s take a look at what
    happens when you go to `localhost:3000`. The `index.html` file runs. The contents
    of `index.html` look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it is trying to render the `<my-app>` component. But it tries
    to get the definition of `MyApp` from the `bundle.js` file. This `bundle.js` file,
    as discussed earlier, is a collection of all the components that are required
    on the page and will be required by the `<my-app>` component. This `bundle.js`
    file is created with the help of webpack. And the configuration of the `bundle.js`
    file can be found in the `webpack.config.js` file, which looks something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The entry file that is chosen is the `/src/index.js` file. But then again,
    where does the `bundle.js` part come from? If you look at the bottom in the `webpack.config.js`
    file, you will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are making sure that everything that is inside the entry file, `/src/index.js`,
    gets written to the `bundle.js` file. You can definitely modify this file if you
    have experience with webpack. But for the sake of simplicity, we are going to
    leave it as is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `/src/index.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: What we are seeing here is that, it is importing a `styles.scss` file, which
    can be used to store our global styles, and then it is importing our `MyApp` class
    from the `/components/my-app` folder. And then, it defines the custom element.
    This is something that we have already looked into in [Chapter 1](a40f739f-c213-4862-a256-a7e76eff4370.xhtml),
    *Web Components Essentials and Specifications*.
  prefs: []
  type: TYPE_NORMAL
- en: If we look into the `MyApp` class, we will find that there is nothing different
    than what we have already learned in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `constructor()` method is no different:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `render()` method is pretty simple as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `getStyle()` and `getTemplate()` methods are the same as well; no different
    from what we have learned previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: With the help of the code here, we can understand how the app component works
    and how it is the most important Web Component in order to make our single page
    web app work.
  prefs: []
  type: TYPE_NORMAL
- en: Functional components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know what the `<my-app>` component looks like and what it needs
    to work, let's start writing the components that we discussed in the beginning
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The <gif-cover> Web Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed earlier, the purpose of this web component is to show a GIF. And,
    from the screenshots, we can see that it is one of the most reusable components
    of the project. So, let''s start writing its code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `constructor()`, we are using `this.url` to grab the URL from the attribute.
    We will be using this URL as a source for the image, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need styles for this component; we can achieve this by adding
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the only limitation that we are putting on this component is
    the image height. You can definitely remove it if you don't like it.
  prefs: []
  type: TYPE_NORMAL
- en: Once our `<gif-cover>` web component is done, we can move on to another web
    component.
  prefs: []
  type: TYPE_NORMAL
- en: The <search-bar> Web Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we take a look at the Search page, we will see that there is a search bar.
    The input field and the Search button are a part of this `<search-bar>` component
    and are responsible for making API calls.
  prefs: []
  type: TYPE_NORMAL
- en: The API call that we will be using here is the GIPHY Search Endpoint API, `https://api.giphy.com/v1/gifs/search`.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding link is an API link. You cannot access it directly, but you can
    use it to grab data if you have a key.
  prefs: []
  type: TYPE_NORMAL
- en: You will need to provide it with your key, which can be obtained from your dashboard.
    And, you may want to take a look at the docs here: [https://developers.giphy.com/docs/#operation--gifs-search-get](https://developers.giphy.com/docs/#operation--gifs-search-get).
  prefs: []
  type: TYPE_NORMAL
- en: When you make a call to this API, it is going to return an array of objects,
    each representing a GIF and its metadata.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know what API to use, let''s take a look at the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `constructor()` method contains your key (which you will get from the GIPHY
    dashboard), the search URL, which is the API URL, and the limit or the amount
    to show in one call. Let''s take a look at the `render()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'It is nothing unusual. We just have a text field and a button. And the styles
    look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Along with basic rendering, we will also need to add a click event for the
    button, so that it can make a call to the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This way, when a user clicks on the button, it is going to trigger the `handleSearch()`
    method, which looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, in the `handleSearch()` function, we are first getting the value of the
    input field. This is the value that the user entered. Then, we are making a call
    to the API by concatenating the API URL. The URL looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This will get the URL from the `searchUrl` variable, and the key from the `key`
    variable. The `value` is obtained from the input field. And the limit is obtained
    from the `showlimit` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the call is made, and the promise resolves, it will call the `dispatchDataInEvent()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This `dispatchDataInEvent()` method will be responsible for notifying the parent
    Web Component of the new data that is obtained after the call.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have created Web Components that can be reused in the `<search-container>`
    component, let's take a look at `<search-container>`.
  prefs: []
  type: TYPE_NORMAL
- en: The <search-container> Web Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since the `<search-container>` component is going to use the `<gif-cover>`
    and `<search-bar>` components, the outline of our component will look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We are simply importing the classes of the Web Components that are going to
    be used in this component. This is pretty much the exact same thing that we have
    used in our `index.html` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `constructor()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have a `registerOtherComponents()` method that we are calling before
    the `render()` method. This is also the first time we are registering a custom
    element inside another custom element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are first checking if the component has already been registered or
    not. If it has not been registered yet, then it registers it. Usually, a browser
    spits out an error message if it tries to register a custom element twice. This
    check is to fix that problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we are done registering the Web Components, it''s time to render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are rendering the `<search-bar>` component, but we do not see the
    `<gif-cover>` component. This is because the `<gif-cover>` components are to be
    shown only when data is retrieved from the `<search-bar>` component, and that
    is done when the `<search-bar>` component dispatches a `search-complete` event.
    Let''s take a look at the `connectedCallback()` callback to add this event handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are looking for the `<search-bar>` element and adding an event listener.
    When that event occurs, it is going to trigger the `handleSearchData()` method
    and pass the associated data into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Just like the student list example in the previous chapters, here we are creating
    an HTML collection of `<gif-cover>` Web Components with the URL obtained from
    the `data` array, and then appending this HTML to the `search-container__images`
    `div`. This will also make sure to replace the `<gif-cover>` with new data when
    the user searches for something else.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, the `getStyles()` method is important. This is what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our `<search-container>` Web Component all set, let''s add
    it to the `<my-app>` component, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, don''t forget to register the component, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This way, we can make sure that `SearchContainer` is initialized only once.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to run the code and see if you are able to see a search bar; clicking
    on the search button will return some results.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the `<show-trending>` component.
  prefs: []
  type: TYPE_NORMAL
- en: The <show-trending> Web Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of the `<show-trending>` Web Component is to first make a call to
    the API and then show the most trending GIFs. For this component, the API that
    we will be using is, `https://api.giphy.com/v1/gifs/trending`.
  prefs: []
  type: TYPE_NORMAL
- en: Like the previous API, this also returns an array of objects that contains the
    URL and other metadata. To take a look at the documentation for this API, visit
    this link: [https://developers.giphy.com/docs/#operation--gifs-trending-get](https://developers.giphy.com/docs/#operation--gifs-trending-get).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know how the API works, lets take a look at the code for the `<show-trending>`
    Web Component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Here, just like the `<search-bar>` components, we have a `key` variable for
    `YOUR_KEY`, the URL to store the API call, and the `showlimit` variable to set
    the max amount of data that can come from the API call.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already seen how our `registerOtherComponents()` method should work,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, don''t forget to import the `GifCover` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the `render()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Here, we just have a `show-trending__images` div that will have `<gif-cover>`
    Web Components once the API call is made.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `getStyles()` method looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the component set up, it is time to make sure that the component
    makes the API call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'What we are doing is simply making the call when the component is connected
    and DOM is added to the page. Once we have the data from the `fetch` call, we
    pass this data to the `handleTrendingData()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this `handleTrendingData()` method is responsible for creating
    `<gif-cover>` Web Components, giving them GIF URLs, and adding them to the `show-trending__images`
    div.
  prefs: []
  type: TYPE_NORMAL
- en: Just like the `<search-container>` component, you can test the `<show-trending>`
    component inside the `<my-app>` component.
  prefs: []
  type: TYPE_NORMAL
- en: The <show-random> Web Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like the `<show-trending>` Web Component, this is a container Web Component.
    That means it will be using other components in a nested way. The component that
    it will be using is `<gif-cover>`. Let''s see what the outline looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'And, the `constructor()` method looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Here, the API that we are using is, `https://api.giphy.com/v1/gifs/random`.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the previous APIs, this one spits out only one object at a time. This
    object will have the URL and other metadata associated with a GIF. If you need
    more information on it, feel free to refer to the documentation: [https://developers.giphy.com/docs/#operation--gifs-random-get](https://developers.giphy.com/docs/#operation--gifs-random-get)
  prefs: []
  type: TYPE_NORMAL
- en: 'The `registerOtherComponents()` method looks exactly the same as the previous
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, the `render()` method looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we see that we have a div, `show-random__images`, to show the random
    image. And, there is a button right below it. The `getStyle()` method looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the component is set up, let''s make the API call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This `handleRandom()` function is responsible for making the API call, and
    when the data is retrieved, it passes it to the `handleTrendingData()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to make sure that the image refreshes when the button is clicked.
    So, we can add this event listener inside the `connectedCallback()` method to
    make it work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This way, whenever the button is clicked, it will trigger the `handleRandom()`
    method again.
  prefs: []
  type: TYPE_NORMAL
- en: The <my-app> component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like the `<show-trending>` and `<search-container>` components, you can
    test the `<show-random>` Web Component by adding the `<show-random>` component
    inside the `<my-app>` component. But if you want to integrate it all, I have a
    better option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `<my-app>` component. If we want all these three
    components, we will need to include it first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have these components imported, lets register these custom elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also add a `showSection` variable to keep track of what component to
    show at what time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: We are initially setting it to a value of `1`, so that it can show `<search-container>`
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'And, to make it work, we will modify the `getTemplate()` method a little bit
    to look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: This way, you can test the pages manually by changing the value of `showSection`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have created a way where we can show different page level components
    by changing the value of the variable `showSections`, we can now concentrate on
    the routing aspect of these page level components. Rather than manually changing
    the page numbers, it is time to automate this page change concept with the implementation
    of routing.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we have been manually changing the code to see different pages of
    our single-page web app. Also, we have not talked about the header component yet.
    In this section, we will take a look at the header component, update the URLs
    based on the link, and make sure our page view changes based on the link clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s take a look at the `<custom-header>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The `constructor()` method is straightforward. Let''s take a look at the `render()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have three links: **Search**, **Trending**, and **Random**.
    Clicking on these links also changes the URL hash:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The styles are pretty simple as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the event handlers for the click. For routing, we will
    need to notify the `<my-app>` Web Component (where this `<custom-header>` component
    is going to be used) about the click event or what link the user clicked on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are simply binding a click event to all the links and making sure
    that the `handleClick()` method is triggered, along with the `index` of the link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: This `handleClick()` method simply passes this index value to the parent component
    trying to listen to the `custom-header-clicked` event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `<my-app>` component, the definition will update as well. For example,
    we will need to import the `CustomHeader` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to update the `registerOtherComponents()` method by adding
    the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'This will also update the `getTemplate()` method, and make it look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are simply adding the `<custom-header>` element. We will also need
    to capture the event emitter by this element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We are adding an event listener to the `custom-header` element and making sure
    that the last value of `showSection` is not equal to the newer one. If it is not,
    then update the value and call the `reRenderAppSection()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: This `reRenderAppSection()` method simply update the view based on the `showSection`
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can go ahead and test it on the browser by clicking on the header links,
    and watch the pages change. You can also see the URL changing in the address bar.
    Even though this all sounds complete, I would like to add one more feature to
    the routing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the URL that you see in the address bar. If you send the URL with trending
    in the hash to someone, would it open the trending page? The answer is no. The
    same applies for the URL with random in the hash. It won''t work. We need to have
    an extra piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: You can call this `handleURL()` method in the `constructor()` method, and see
    it working. It updates the value of the `showSection` variable and, this way,
    the `getSection()` method in `getTemplate()` knows what page to render.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the app is built, let's try adding some extra features that will make
    our single page web app more useful.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Analytics play an important role in understanding what users are visiting your
    site and how long they have been on a particular page. In this section, we will
    be using Google Analytics to track user interactions on the site. This is one
    of those really easy things that you can do even outside of Web Components.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to start using Analytics, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://analytics.google.com/](https://analytics.google.com/), then click
    on the admin button and create a new property. You will be dropped on to New Property
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can then start filling out the forms on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5fbae596-c80d-480a-b1bd-ecc485562a0f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have filled in the details, and clicked on the Get Tracking ID button,
    you will be dropped onto the next page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/88d298bb-a77a-43a8-82ca-55c472c1cf30.png)'
  prefs: []
  type: TYPE_IMG
- en: You can use the code from the text area and put it in your `index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it. Now, you can simply go to the following URL and see how users are
    visiting your site: [https://analytics.google.com](https://analytics.google.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will be dropped onto a page where you can see how users have visited your
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/206f683e-ce9b-4772-8c3a-e9d2269f811d.png)'
  prefs: []
  type: TYPE_IMG
- en: And, you can then use this data to understand what users do on your page, and
    how much time they stay on the site.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created a single page web app using just Web Components.
    We learned how to break down a page into atomic and container Web Components.
    We learned how to include atomic components in a strategic way, so that they can
    be reused in an efficient way. We even looked into routing and how it can be used
    to keep track of what page the user is on. Lastly, we discussed how to integrate
    analytics into our single page web app, and how it can be used to understand different
    types of users. You should now be able to create any single page web application
    based on the concepts above without any problems.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look into Polymer and Stencil JS, which are libraries
    that use Web Components, and how the code differs from what we have learned so
    far.
  prefs: []
  type: TYPE_NORMAL
