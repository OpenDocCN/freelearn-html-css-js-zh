["```js\n<div data-bind=\"component: \"like\"''\"></div>\n```", "```js\n<div data-bind=\"component:\n{name: 'like-widget',params:{ approve: like} }\"></div>\n```", "```js\n<script>\nViewModel = function(){\n  self = this;\n  self.like = ko.observable(true);\n}\n;\n// insert custom component here\nvm = new ViewModel();\nko.applyBindings(vm);\n</script>\n```", "```js\nko.components.register('like-widget', {\n  viewModel: function(params) {\n    this.approve = params.approve;\n    // Behaviors:\n    this.toggle = function(){ \n      this.approve(!this.approve()); \n    }.bind(this);\n  },\n  template:\n    '<div class=\"approve\">\\\n      <button data-bind=\"click: toggle\">\\\n        <span data-bind=\"visible: approve\" class=\"glyphicon  glyphicon-thumbs-up\"></span>\\\n        <span data-bind=\"visible:! approve()\" class=\"glyphicon  glyphicon-thumbs-down\"></span>\\\n      </button>\\\n    </div>'\n});\n```", "```js\n<div data-bind=\"component: {name: 'like-widget', params:{ approve: like} }\"></div>\n<span data-bind=\"text: like\"></span>\n```", "```js\n<div data-bind=\"component: { name: widgetName, params: widgetParams }\"></div>\n<span data-bind=\"text:widgetParams.approve\"></span>\n```", "```js\n  self.widgetName = ko.observable(\"like-widget\");\n  self.widgetParams = {\n    approve: ko.observable(true)\n  };\n```", "```js\nself.like2 = ko.observable(false);\n```", "```js\n<like-widget params=\"approve: like2\"></like-widget>\n<span data-bind=\"text: like2\"></span>\n```", "```js\n<like-widget params=\"approve: like3\"></like-widget>\n<span data-bind=\"text: like3\"></span>\n```", "```js\nself.like3 = ko.observable(true);\n```", "```js\n<script src=\"img/knockout.komponents.js\"></script>\n```", "```js\n<kom-like approve=\"tagLike\"></kom-like>\n<span data-bind=\"text: tagLike\"></span>\n```", "```js\nself.tagLike = ko.observable(true);\n```", "```js\n// <kom-like /> tag\nko.components.register('kom-like', {\n  viewModel: function(params) {\n    // Data: value must but true to approve\n    this.approve = params.approve;\n    // Behaviors:\n    this.toggle = function(){ \n      this.approve(!this.approve()); \n    }.bind(this);\n  },\n  template:\n    '<div class=\"approve\">\\\n      <button data-bind=\"click: toggle\">\\\n        <span data-bind=\"visible: approve\" class=\"glyphicon glyphicon-thumbs-up\"></span>\\\n        <span data-bind=\"visible:! approve()\" class=\"glyphicon glyphicon-thumbs-down\"></span>\\\n      </button>\\\n    </div>'\n});\n```", "```js\n<script src=\"img/knockout.komponents.bs.js\"></script>\n```", "```js\nvar listItem = function(display, students){\n  this.display = ko.observable(display);\n  this.students = ko.observable(students);\n  this.type = ko.computed(function(){\n    switch(Math.ceil(this.students()/5)){\n      case 1:\n      case 2:\n        return 'danger';\n        break;\n      case 3:\n        return 'warning';\n        break;\n      case 4:\n        return 'info';\n        break;\n      default:\n        return 'success';\n    }\n  },this);\n};\n```", "```js\nself.listData = ko.observableArray([\n  new listItem(\"HTML5\",12),\n  new listItem(\"CSS\",8),\n  new listItem(\"JavaScript\",19),\n  new listItem(\"jQuery\",48),\n  new listItem(\"Knockout\",33)\n]);\n```", "```js\n<kom-listgroup data=\"listData\" badgeField=\"'students'\" typeField=\"'type'\"></kom-listgroup>\n```", "```js\nvm.listData()[3].display()\n\n```", "```js\nvm.listData()[3].students(9)\n\n```", "```js\nthis.type = ko.computed(function(){\n  switch(Math.ceil(this.students()/5)){\n    case 1:\n    case 2:\n      return 'danger';\n      break;\n    case 3:\n      return 'warning';\n      break;\n    case 4:\n      return 'info';\n      break;\n    default:\n      return 'success';\n  }\n},this);\n```", "```js\n<kom-modal id=\"'komModal'\" title=\"komModal.title()\" body=\"komModal.body()\"></kom-modal>\n```", "```js\nself.komModal = {\n  title: ko.observable('Modal KOMponent'),\n  body: ko.observable('This is the body of the <strong>modal KOMponent</strong>.')\n};\n```", "```js\n<button type=\"button\" data-toggle=\"modal\" data- target=\"#komModal\">Open Modal KOmponent</button>\n```", "```js\nvm.komModal.body(\"Wow, live data binding!\")\n\n```", "```js\n// require.js settings\nvar require = {\n    baseUrl: \".\",\n    paths: {\n        \"bootstrap\":        \"/share/js/bootstrap.min\",\n        \"jquery\":           \"/share/js/jquery.min\",\n        \"knockout\":         \"/share/js/knockout\",\n        \"text\":             \"/share/js/text\"\n    },\n    shim: {\n        \"bootstrap\": { deps: [\"jquery\"] },\n        \"knockout\": { deps: [\"jquery\"] },\n    }\n};\n```", "```js\n<script src=\"img/knockout.js\"></script>\n<script src=\"img/amd.config.js\"></script>\n<script src=\"img/require.js\"></script>\n```", "```js\n<script>\nko.components.register('pick', {\n  viewModel: { require: 'pick' },\n  template: { require: 'text!pick.html' }\n});\nviewModel = function(){\n  this.choice = ko.observable();\n}\nvm = new viewModel();\nko.applyBindings(vm);\n</script>\n```", "```js\ndefine(['knockout'], function(ko) {\n    function LikeWidgetViewModel(params) {\n        this.chosenValue = params.value;\n        this.land = Math.round(Math.random()) ? 'heads' : 'tails';\n    }\n    LikeWidgetViewModel.prototype.heads = function() {\n        this.chosenValue('heads');\n    };\n    LikeWidgetViewModel.prototype.tails = function() {\n        this.chosenValue('tails');\n    };\n    return LikeWidgetViewModel;\n});\n```", "```js\n<div class=\"like-or-dislike\" data-bind=\"visible: !chosenValue()\">\n<button data-bind=\"click: heads\">Heads</button>\n<button data-bind=\"click: tails\">Tails</button>\n</div>\n<div class=\"result\" data-bind=\"visible: chosenValue\">\n    You picked <strong data-bind=\"text: chosenValue\"></strong>\n    The correct value was <strong data-bind=\"text: land\"></strong>\n</div>\n```", "```js\n<h2>One Choice</h2>\n<pick params=\"value: choice\"></pick><br>\n<pick params=\"value: choice\"></pick><br>\n<pick params=\"value: choice\"></pick>\n```", "```js\n<h2>Home</h2>\n<p data-bind=: message'\"html\"></p>\n```", "```js\ndefine([\"knockout\", \"text!./view.html\"], function(ko, homeTemplate) {\n  function myViewModel(route) {\n    this.message = ko.observable('This is dynamic content presented on the home page.');\n  console.log(vmSPA);\n  }\n  return { viewModel: myViewModel, template: homeTemplate };\n});\n```", "```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <title>SPA Guide</title>\n  <link href=\"/share/css/bootstrap.min.css\" rel=\"stylesheet\">\n  <link href=\"css/styles.css\" rel=\"stylesheet\">\n  <script src=\"img/require.config.js\"></script>\n  <script data-main=\"app/startup\" src=\"img/require.js\"></script>\n</head>\n<body>\n  <div id=\"page\" class=\"container\" data-bind=\"component: { name: route().page, params: route }\"></div>\n</body>\n</html>\n```", "```js\n// require.js looks for the following global when initializing\nvar require = {\n    baseUrl: \".\",\n    paths: {\n        \"bootstrap\":            \"/share/js/bootstrap.min\",\n        \"crossroads\":           \"/share/js/crossroads.min\",\n        \"hasher\":               \"/share/js/hasher.min\",\n        \"jquery\":               \"/share/js/jquery.min\",\n        \"knockout\":             \"/share/js/knockout\",\n        \"knockout-projections\": \"/share/js/knockout-projections.min\",\n        \"signals\":              \"/share/js/signals.min\",\n        \"text\":                 \"/share/js/text\"\n    },\n    shim: {\n        \"bootstrap\": { deps: [\"jquery\"] }\n    }\n};\n```", "```js\n<div id=\"page\" class=\"container\" data-bind=\"component: { name: route().page, params: route }\"></div>\n```", "```js\n<script data-main=\"app/startup\" src=\"img/require.js\"></script>\n```", "```js\ndefine(['jquery', 'knockout', './router', 'bootstrap', 'knockout- projections'], function($, ko, router) {\n  // General Components (can be packaged as AMD modules):\n  // dynamic page components\n  ko.components.register('home-page', { require: 'page/home/home' });\n  // static page components\n  // Start the application\n  vmSPA = function() { \n    this.route = router.currentRoute;\n  };\n  vm = new vmSPA();\n  ko.applyBindings(vm);});\n```", "```js\ndefine([\"knockout\", \"crossroads\", \"hasher\"], function(ko, crossroads, hasher) {\n\n  return new Router({\n    routes: [\n      { url: '', params: { page: 'home-page' } }\n    ]\n  });\n  function Router(config) {\n    var currentRoute = this.currentRoute = ko.observable({});\n    ko.utils.arrayForEach(config.routes, function(route) {\n      crossroads.addRoute(route.url, function(requestParams) {\n      currentRoute(ko.utils.extend(requestParams, route.params));\n    });\n  });\n  activateCrossroads();\n  }\n  function activateCrossroads() {\n          function parseHash(newHash, oldHash) { \n                crossroads.parse(newHash); \n          }\n    crossroads.normalizeFn = crossroads.NORM_AS_OBJECT;\n    hasher.initialized.add(parseHash);\n    hasher.changed.add(parseHash);\n    hasher.init();\n  }\n});\n```", "```js\n  ko.components.register('nav-bar', { require: 'components/nav-bar/nav-bar' });\n```", "```js\n<nav-bar params=\"route: route\"></nav-bar>\n```", "```js\n#page {\n  margin-top: 80px;\n}\n```", "```js\n  ko.components.register('about-page', {\n    template: { require: 'text!page/about/about.html' }\n  });\n```", "```js\n<li data-bind=\"css: { active: route().page === 'about-page' }\">\n<a href=\"#about\">About</a>\n</li>\n```", "```js\n{ url: 'about',     params: { page: 'about-page' } }\n```", "```js\nko.components.register('bootstrap-page', { require: 'page/bootstrap/bootstrap' });\n```", "```js\n<li data-bind=\"css: { active: route().page === 'bootstrap-page' }\">\n<a href=\"#bootstrap\">Bootstrap</a>\n</li>\n```", "```js\n{ url: 'bootstrap', params: { page: 'bootstrap-page' } },\n```", "```js\n<h2>Bootstrap</h2>\n<p data-bind='html: message'></p>\n```", "```js\ndefine([\"knockout\", \"text!./view.html\"], function(ko, bootstrapTemplate) {\n  function myViewModel(route) {\n    this.message = ko.observable('Welcome to Bootstrap Page.');\n  }\n  return { viewModel: myViewModel, template: bootstrapTemplate };\n});\n```", "```js\n<link id=\"page_style\" href=\"/share/css/bootstrap.min.css\" rel=\"stylesheet\">\n```", "```js\nvar self = this;\nself.message = ko.observable('Hello from the bootstrap component! \\\nOn this page we will be letting you choose from different <a target=\"_blank\" href=\"http://bootswatch.com/\">Bootswatch</a> themes.');\n  self.theme = ko.observable('none');\n  self.themes = ko.observableArray([]);\n  self.themesVisible = ko.observable(true);\n```", "```js\n{\n  \"theme\": [\n    { \"name\": \"cerulean\", \"bg\":\"light\"},\n    { \"name\": \"cosmo\", \"bg\":\"light\"},\n    { \"name\": \"cyborg\", \"bg\":\"dark\"},\n    { \"name\": \"darkly\", \"bg\":\"dark\"},\n    { \"name\": \"flatly\", \"bg\":\"light\"},\n    { \"name\": \"journal\", \"bg\":\"light\"},\n    { \"name\": \"lumen\", \"bg\":\"light\"},\n    { \"name\": \"paper\", \"bg\":\"light\"},\n    { \"name\": \"readable\", \"bg\":\"light\"},\n    { \"name\": \"sandstone\", \"bg\":\"light\"},\n    { \"name\": \"simplex\", \"bg\":\"light\"},\n    { \"name\": \"slate\", \"bg\":\"dark\"\t},\n    { \"name\": \"spacelab\", \"bg\":\"light\"},\n    { \"name\": \"superhero\", \"bg\":\"dark\"},\n    { \"name\": \"united\", \"bg\":\"light\"},\n    { \"name\": \"yeti\", \"bg\":\"light\" }\n  ]\n}\n```", "```js\nmyViewModel.prototype.loadThemes = function() {\n  jQuery.getJSON(\"page/bootstrap/data.json\")\n.done(function(data){\n    self.themes(data.theme);\n    self.themesVisible(false);\n  }).fail(function(data){\n    alert('fail data pull for Bootstrap page');\n  });\n};\n```", "```js\nmyViewModel.prototype.changeTheme = function(data,event) {\n  var style = '/share/css/bootswatch/'+data.name+'/bootstrap.min.css';\n  jQuery('#page_style').attr('href',style);\n  vm.bg(data.bg);\n};\n```", "```js\nvmSPA = function(){ \n  this.route = router.currentRoute;\n  this.bg = ko.obervable(\"light\");\n};\n```", "```js\n<button data-bind=\"click: loadThemes, visible: themesVisible'\">Load Themes</button>\n<div class=\"row\" data-bind=\"foreach: themes\">\n<div class=\"col-xs-6 col-md-3\" style=\"text-align: center;\">\n  <img class=\"img-responsive img-thumbnail\" data-bind=\"attr:{ 'src':'/share/css/bootswatch/'+$data.name+'/thumbnail.png'}, click: $parent.changeTheme\"></img>\n  <br/><br/>\n</div>\n</div>\n```", "```js\n\"knockout\": \"/share/js/knockout.3_3_alpha:\n```", "```js\nko.components.register('jquery-page', \n{ require: 'page/jquery/jquery' });\n```", "```js\n<li data-bind=\"css: { active: route().page === 'jquery-page' }\">\n  <a href=\"#jquery\">jQuery</a>\n</li>\n```", "```js\nreturn new Router({\n  routes: [\n    { url: '',          params: {page: 'home-page' } },\n    { url: 'about',     params: {page: 'about-page' } },\n    { url: 'bootstrap', params: {page: 'bootstrap-page' } },\n    { url: 'jquery',     params:{ page: 'jquery-page' } }\n  ]\n});\n```", "```js\ndefine(['knockout', 'text!./view.html'], function(ko, templateMarkup) {\n  function myViewModel(params) {\n    var self = this;\n    self.message = ko.observable('Hello from the jQuery component!');\n    self.project = ko.observableArray();\n  jQuery.getJSON('page/jquery/data.json').done(function(data){\n      self.project(data.project);\n    }).fail(function(){\n      alert(\"AJAX error on jQuery Page View.\");\n    });\n  }\n  myViewModel.prototype.logo = function(data,event) {\n    var url = 'page/jquery/logos/'+data.base+'-mark- '+vm.bg()+'.gif';\n    return url;\n  };\n  // This runs when the component is torn down. Put here any logic necessary to clean up,\n  // for example cancelling setTimeouts or disposing Knockout subscriptions/computeds.\n  myViewModel.prototype.dispose = function() { };\n  return { viewModel: myViewModel, template: templateMarkup };\n});\n```", "```js\n<h2>jQuery</h2>\n<p data-bind=\"text: message'\"></p>\n<div class=\"row\" data-bind=\"foreach: project\">\n  <div class=\"col-md-4\">\n    <img class=\"img-responsive img-thumbnail\" data-bind=\"attr:{ 'src':$ component.logo($data)}\">\n  </div>\n  <div class=\"col-md-8\">\n    <h3 data-bind=\"text:$ data.name\"></h3>\n    <span data-bind=\"html:$ data.description\"></span>\n  </div>\n  <div class=\"clearfix\"></div>\n</div>\n```"]