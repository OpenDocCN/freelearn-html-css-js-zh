- en: Chapter 8. JavaScript Implementations, Syntax Basics, and Variable Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：JavaScript实现、语法基础和变量类型
- en: JavaScript (JS) is a programming language mostly used to produce dynamic and
    user-interactive webpages. A huge number of websites and all the latest Internet
    browsers (clients) use and support JavaScript. It is a part of the stack of technologies
    that every web developer must learn; these include HTML (the content), CSS (the
    presentation of content), and JS (behavior of the content when a user interacts
    with the webpage).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript（JS）是一种主要用于生成动态和用户交互式网页的编程语言。大量网站和所有最新的互联网浏览器（客户端）都使用并支持JavaScript。它是每个网络开发者必须学习的技术堆栈的一部分；这些包括HTML（内容）、CSS（内容的呈现）和JS（当用户与网页交互时内容的动作）。
- en: Previously, the use of JavaScript was just limited to input validations. For
    example, it can produce an error message if the user enters invalid information
    or tries to submit a form with missing information. Now, JS is acknowledged as
    a fully-fledged programming language that is capable of manipulating with complex
    calculations and deals with all aspects of a client window. JS enhances the webpage
    by making it more interactive. For instance, a page with scattered thumbnails
    can be converted into a pretty stylish image gallery, content of the website can
    be loaded without forcing the client to reload it over and over, different sorts
    of error handling can be done in a nice way, user polls can be created and their
    results can be viewed on a website, and playing with HTML elements on the go and
    much more is made possible by the power of JavaScript.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，JavaScript的使用仅限于输入验证。例如，如果用户输入无效信息或尝试提交缺少信息的表单，它会产生一个错误消息。现在，JS被认可为一种完整的编程语言，能够处理复杂的计算，并处理客户端窗口的所有方面。JS通过使其更具交互性来增强网页。例如，可以将散布的缩略图页面转换为漂亮的图片库，可以在不强制客户端反复重新加载的情况下加载网站内容，可以以优雅的方式处理各种错误处理，可以创建用户投票并在网站上查看结果，以及通过JavaScript的力量在移动中与HTML元素互动等等。
- en: JavaScript is quick—real quick. It responds instantly to user actions, such
    as clicking, double-clicking, resizing, dragging, scrolling, and so on. JavaScript
    has a syntax that is similar to that of the Java language. The name *JavaScript*
    causes confusion for many people. Only the syntax of JS resembles the syntax of
    the Java language. Otherwise, it has nothing to do with the Java programming language
    at all.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript非常快——真的非常快。它对用户操作，如点击、双击、调整大小、拖动、滚动等，能立即做出响应。JavaScript的语法与Java语言类似。*JavaScript*这个名字让很多人感到困惑。只有JS的语法与Java语言的语法相似。否则，它与Java编程语言根本没有任何关系。
- en: 'The following are some of the key differences between Java (programming language)
    and JS (scripting language):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些Java（编程语言）和JS（脚本语言）之间的关键区别：
- en: JavaScript is embedded into HTML and runs in a browser, while Java requires
    a **Java Virtual Machine** (**JVM**) for its execution; however, Java applets
    can run in browsers.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript嵌入到HTML中，并在浏览器中运行，而Java需要**Java虚拟机**（**JVM**）来执行；然而，Java小程序可以在浏览器中运行。
- en: JavaScript is known as a client-side language as it runs in the browser on the
    client end, but now, Node.js is the gateway of JS to the server end. On the other
    hand, Java runs on the web server, for example, **Apache Tomcat**.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript被称为客户端语言，因为它在客户端的浏览器中运行，但现在，Node.js是JS进入服务器端的大门。另一方面，Java在Web服务器上运行，例如，**Apache
    Tomcat**。
- en: JavaScript is usually interpreted by the client, while Java is compiled and
    then executed by a JVM.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript通常由客户端解释，而Java则由JVM编译然后执行。
- en: JavaScript was created by **Netscape** (now Mozilla) while Java was developed
    by **Sun Microsystems** (now Oracle).
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript是由**Netscape**（现在是Mozilla）创建的，而Java是由**Sun Microsystems**（现在是Oracle）开发的。
- en: History of JavaScript
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript的历史
- en: Brendan Eich of Netscape (now Mozilla) developed JavaScript in 1995\. Originally,
    it was named as **Mocha**, later its name was changed to **Livescript**, and finally
    it was renamed to JavaScript. After its launch, Microsoft introduced **Jscript**—their
    own version of JavaScript that was included in Internet Explorer. Netscape submitted
    JavaScript to **European** **Computer Manufacturers Association**(**ECMA**) for
    standardization and specification. The standardized version was named **ECMAScript**.
    ECMAScript is a trademarked scripting language specification standardized by ECMA
    International.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Netscape（现在为 Mozilla）的 Brendan Eich 在 1995 年开发了 JavaScript。最初，它被命名为 **Mocha**，后来其名称改为
    **Livescript**，最终更名为 JavaScript。在发布后，Microsoft 引入了 **Jscript**——他们自己的 JavaScript
    版本，包含在 Internet Explorer 中。Netscape 将 JavaScript 提交给 **欧洲** **计算机制造商协会**（**ECMA**）进行标准化和规范。标准化版本被命名为
    **ECMAScript**。ECMAScript 是由 ECMA 国际标准化的脚本语言规范。
- en: The ECMAScript V5 introduced a new mode called the **strict mode**; this brought
    forward better and thorough error checking to avoid constructs that cause errors.
    Many ambiguities from the third version were removed and real-world implementations
    were added.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript V5 引入了一种新的模式，称为 **严格模式**；这引入了更好的、彻底的错误检查，以避免导致错误的构造。许多来自第三版本的不确定性都被移除，并添加了现实世界的实现。
- en: The ECMAScriptV6 added plenty of new syntax for writing complex programs. It
    introduced classes and modules extending the semantics from V5\. Iterators were
    also added in this version along with many Python-styled semantics, including
    proxies, arrow functions, generators and generator expressions, maps, sets, and
    so on.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScriptV6 添加了许多新的语法来编写复杂的程序。它引入了类和模块，扩展了 V5 的语义。迭代器也在此版本中添加，以及许多类似 Python
    的语义，包括代理、箭头函数、生成器和生成器表达式、映射、集合等。
- en: Evolution of JavaScript
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript的演变
- en: After the standardization of JavaScript as ECMAScript, the next step was to
    have complete control over **Document Object Model** (**DOM**).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 JavaScript 标准化为 ECMAScript 之后，下一步是实现对 **文档对象模型**（**DOM**）的完全控制。
- en: The HTML is parsed into DOM by the web browser's DOM API. DOM is the client
    understanding of the webpage. All the elements/nodes are converted into a tree-like
    structure known as **DOM Tree**. The members of this tree can be manipulated on
    the fly using different methods such as `getElementById()` and `getElementsByName()`.
    The HTML source we see in developer tools, such as **Inspect Element**, **Fire
    Bug**, and so on are DOM View. These development tools also help a lot to modify
    our DOM instantly.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 网页浏览器通过 DOM API 将 HTML 解析为 DOM。DOM 是客户端对网页的理解。所有元素/节点都被转换为称为 **DOM 树**的树状结构。可以使用不同的方法（如
    `getElementById()` 和 `getElementsByName()`）实时操作此树的结构成员。我们在开发者工具中看到的 HTML 源代码，如
    **Inspect Element**、**Fire Bug** 等，都是 DOM 视图。这些开发工具也极大地帮助我们在瞬间修改我们的 DOM。
- en: Later, **Asynchronous JavaScript and XML** (**AJAX**) was introduced to make
    asynchronous applications. The data was sent to and received from the web server
    without reloading or refreshing the whole DOM Tree (asynchronously).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，**异步JavaScript和XML**（**AJAX**）被引入以实现异步应用程序。数据被发送到并从网络服务器接收，而不需要重新加载或刷新整个
    DOM 树（异步）。
- en: As JavaScript advanced, different JS libraries were developed to ease DOM manipulation.
    Some of the popular libraries are jQuery, Prototype, and Mootools. The primary
    feature of these libraries is to handle DOM manipulations, animations, and AJAX.
    The most famous and widely used JS library is jQuery. Furthermore, a server-side
    version of JavaScript was developed and named **Node.js**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 随着JavaScript的发展，开发了不同的 JS 库以简化 DOM 操作。其中一些流行的库是 jQuery、Prototype 和 Mootools。这些库的主要功能是处理
    DOM 操作、动画和 AJAX。最著名且广泛使用的 JS 库是 jQuery。此外，还开发了一个名为 **Node.js** 的服务器端 JavaScript
    版本。
- en: In this book, you will learn about JavaScript, its history, and its evolution.
    You will learn about its implementations and syntax. Function references and complete
    examples for how to use it in different cases are also provided.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，你将了解 JavaScript、其历史和演变。你将学习其实现和语法。还提供了函数引用和如何在不同情况下使用的完整示例。
- en: JavaScript implementations
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 实现
- en: 'As JavaScript and ECMA Script are used in similar context, JavaScript has much
    more to offer than ECMAScript. It is implemented in the following three parts:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 JavaScript 和 ECMAScript 在类似的应用场景中被使用，JavaScript 比 ECMAScript 提供了更多功能。它由以下三个部分实现：
- en: Core JavaScript (ECMAScript)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心JavaScript（ECMAScript）
- en: Document Object Model (DOM)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档对象模型（DOM）
- en: Browser Object Model (BOM)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器对象模型（BOM）
- en: Core JavaScript (ECMAScript)
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 核心JavaScript（ECMAScript）
- en: JavaScript supports mobile devices as well as desktop computers; this feature
    makes it a cross-platform scripting language. However, it is not much useful if
    used alone, which is why it is used along with server-side languages to make powerful
    and interactive applications. It can be easily integrated within a web browser
    environment, enabling users to have complete control over the browser's objects
    and events.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 支持移动设备和桌面计算机；这一特性使其成为一种跨平台脚本语言。然而，如果单独使用，它并不太有用，这就是为什么它通常与服务器端语言一起使用，以创建强大且交互式应用程序。它可以轻松地集成到网络浏览器环境中，使用户能够完全控制浏览器对象和事件。
- en: 'The core capabilities of JavaScript are also called ECMAScript. ECMAScript
    is not actually browser-dependent or environment-dependent. It is a set of core
    language elements that are used in different environments such as **ScriptEase**
    and **Flash** **Action Script**. Hence, we can say that ECMA Script contains definitions
    for the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 的核心功能也称为 ECMAScript。ECMAScript 实际上不依赖于浏览器或环境。它是一组核心语言元素，用于不同的环境，例如
    **ScriptEase** 和 **Flash** **动作脚本**。因此，我们可以说 ECMA Script 包含以下内容的定义：
- en: Language syntax
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言语法
- en: Keywords/reserved words
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字/保留字
- en: Data types
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类型
- en: Statements
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语句
- en: Operators
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运算符
- en: Control structures
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制结构
- en: Objects (for example, array, date, math and so on)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象（例如，数组、日期、数学等）
- en: Therefore, ECMAScript defines all of the functions, methods, properties, and
    objects of a scripting language. Other scripting languages such as JavaScript
    are implementations of ECMAScript.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，ECMAScript 定义了脚本语言的所有函数、方法、属性和对象。其他脚本语言，如 JavaScript，是 ECMAScript 的实现。
- en: ECMAScript is implemented differently in various browsers, after which DOM and
    BOM are included.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 在不同的浏览器中有不同的实现，之后 DOM 和 BOM 才被包含。
- en: Document object model (DOM)
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档对象模型 (DOM)
- en: DOM is an **Application** **Programming Interface**(**API**) for HTML and XML
    documents. It is a logical structure of the web document. It is a hierarchical
    tree view of the nodes that are present in the document. The browser translates
    the document into DOM and only understands it. DOM enables developers to take
    control over the nodes and to make changes to the document on the fly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: DOM 是 HTML 和 XML 文档的 **应用程序** **编程接口** (**API**)。它是网络文档的逻辑结构。它是文档中存在的节点的高层次树视图。浏览器将文档转换为
    DOM，并且只理解它。DOM 允许开发者控制节点，并实时更改文档。
- en: 'For instance, this is a simple webpage:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是一个简单的网页：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Browser object model (BOM)
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器对象模型 (BOM)
- en: While DOM deals with the document, **Browser Object Model** (**BOM**) deals
    with the browser window. BOM enables programmers to perform several actions on
    the browser window, which is not directly related to and has no impact on the
    HTML document itself. BOM also deals with the browser objects, such as history,
    screen, navigator, and location.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当 DOM 处理文档时，**浏览器对象模型** (**BOM**) 处理浏览器窗口。BOM 允许程序员在浏览器窗口上执行多个操作，这些操作与 HTML
    文档本身没有直接关系，也没有影响。BOM 还处理浏览器对象，例如历史记录、屏幕、导航器和位置。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: BOM is implemented differently in different clients.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: BOM 在不同的客户端中有不同的实现。
- en: Client-side JavaScript
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端 JavaScript
- en: JavaScript is primarily known as a client-side scripting language. Any language
    that is used to write programs or scripts that are executed in a client (any web
    browser such as Internet Explorer, Safari, Google Chrome, Mozilla Firefox, Opera,
    and so on) is called a **client-side scripting language**. These scripts make
    your HTML look interactive and dynamic. JavaScript enables user to interact with
    the web page's content and the client window itself.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 主要被认知为一种客户端脚本语言。任何用于编写在客户端（任何网络浏览器，如 Internet Explorer、Safari、Google
    Chrome、Mozilla Firefox、Opera 等）上执行程序或脚本的编程语言都称为 **客户端脚本语言**。这些脚本使你的 HTML 看起来交互式和动态。JavaScript
    允许用户与网页内容以及客户端窗口本身进行交互。
- en: Adding JavaScript into a web page
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 JavaScript 添加到网页中
- en: Mostly, JavaScript code is embedded into the HTML within the `<script>` tags
    and can be viewed by viewing the source of the page. A good practice to embed
    JavaScript into your page is to place all the scripts in a separate file (a JavaScript
    file having the `.js` file extension). Then, this file can be included on the
    page. When the page is interpreted, it will be treated the same as if it was embedded
    on the same page.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，JavaScript代码被嵌入到HTML中的`<script>`标签内，可以通过查看页面源代码来查看。将JavaScript嵌入到页面中的良好实践是将所有脚本放在一个单独的文件中（一个具有`.js`扩展名的JavaScript文件）。然后，此文件可以包含在页面中。当页面被解释时，它将被视为与在同一页面上嵌入的相同。
- en: Tip
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The JavaScript files must be of a `.js` extension.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript文件必须具有`.js`扩展名。
- en: 'Since, the client is expecting HTML all the time, anything else such as styles
    or scripts have to be enclosed in their specific tags; for example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于客户端始终期望HTML，因此任何其他内容，如样式或脚本，都必须包含在其特定的标签内；例如：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The JavaScript interpreter is evoked as soon as the browser's rendering engine
    discovers any `<script>` tag.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器的渲染引擎发现任何`<script>`标签时，JavaScript解释器就会被调用。
- en: 'Most of the time, JavaScript lies within the `<head>` tags of the web document:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，JavaScript位于网络文档的`<head>`标签内：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `type` attribute specifies that the code enclosed within these `<script>`
    tags is plain code written in JavaScript. It is not compulsory to mention the
    `type` attribute. The preceding code can be written without it as well and will
    work exactly the same.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`type`属性指定这些`<script>`标签内封装的代码是纯JavaScript代码。不强制提及`type`属性。前面的代码也可以不使用它来编写，并且将按完全相同的方式工作。'
- en: Although `<script>` tags can be placed anywhere within an HTML document, another
    good practice is to place it at the end of the document before closing the `</body>`
    tag so that all the pages are loaded before any script executes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以在HTML文档的任何位置放置`<script>`标签，但另一个良好的实践是在文档末尾关闭`</body>`标签之前将其放置，以确保在执行任何脚本之前所有页面都已加载。
- en: Loading external JavaScript files
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载外部JavaScript文件
- en: 'Just like external CSS files are included into the web page, JavaScript can
    also be included into the webpage from external JavaScript files. Let''s take
    a look at the following HTML code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 就像外部CSS文件被包含到网页中一样，JavaScript也可以从外部JavaScript文件中包含到网页中。让我们看看以下HTML代码：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `src` attribute is very similar to that used in the image `<img>` tags.
    It just mentions the reference path to the external JavaScript files, which are
    later included into the page. Do not add any other JavaScript code into the `<script>`
    tags, which import external JS files. If needed, place another `<script>` tag.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`src`属性与用于图像`<img>`标签的属性非常相似。它只是提到了外部JavaScript文件的引用路径，这些文件稍后将被包含到页面中。不要在导入外部JS文件的`<script>`标签中添加任何其他JavaScript代码。如果需要，请放置另一个`<script>`标签。'
- en: 'Multiple external JS files can also be included, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以包含多个外部JS文件，如下所示：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In cases where external JavaScript libraries, such as jQuery and MooTools are
    used, the order in which the files are included has to be taken care of.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用外部JavaScript库（如jQuery和MooTools）的情况下，必须注意文件包含的顺序。
- en: Writing our first program in JavaScript
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在JavaScript中编写我们的第一个程序
- en: Don't worry; it is not at all an alien language. It is a high-level language
    and can be understood very easily as its statements, keywords, and other syntax
    is based on basic English. The simplest way to learn any programming language
    is to jump into it and play with its code. To get your feet wet in JavaScript,
    we will write a very basic JavaScript program.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 别担心，这绝对不是一门陌生的语言。它是一种高级语言，由于其语句、关键字和其他语法基于基本英语，因此可以很容易地理解。学习任何编程语言的最简单方法是跳进去并玩其代码。为了在JavaScript中入门，我们将编写一个非常基础的JavaScript程序。
- en: Prerequisites
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'The following are the prerequisites that are required to write our first JavaScript
    program:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们编写第一个JavaScript程序所需的前提条件：
- en: A web browser
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个网络浏览器
- en: A text/code editor
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个文本/代码编辑器
- en: A web document
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个网络文档
- en: How to do it
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'Create a `index.html` file in any code editor you are comfortable with. Copy
    and paste the following code into your document. It is a simple HTML code:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您舒适的任何代码编辑器中创建一个`index.html`文件。将以下代码复制并粘贴到您的文档中。这是一个简单的HTML代码：
- en: '[PRE5]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a `<script>` tag after a `<title>` tag before closing the `</head>`
    tag in the head section:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在头部部分在关闭`</head>`标签之前创建一个`<script>`标签：
- en: '[PRE6]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Insert `alert("hello world"); document.write('<h2>This text has been added by
    JavaScript!</h2>');` within the script tags.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本标签内插入`alert("hello world"); document.write('<h2>This text has been added
    by JavaScript!</h2>');`。
- en: The `alert` attribute is a JavaScript function that creates a popup with the
    message written inside the quotes and parentheses. The message is treated as a
    string passed to the alert function. Similarly, `document.write` is a JavaScript
    function that outputs the given string on the webpage.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`alert`属性是一个JavaScript函数，它创建一个带有内部引号和括号中消息的弹出窗口。该消息被视为传递给警告函数的字符串。同样，`document.write`是一个JavaScript函数，它将给定的字符串输出到网页上。'
- en: '[PRE7]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Double-click on the `index.html` file to execute and open it in the browser.
    A popup will appear with an alert message.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击`index.html`文件以执行并在浏览器中打开。将出现一个带有警告信息的弹出窗口。
- en: Click on **OK** to close the alert box and the webpage will be displayed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确定**以关闭警告框，网页将显示。
- en: This was your first step into the world of JavaScript, although it was very
    basic and did not show the real power of JavaScript. We will be practicing advanced
    JavaScript code in the chapters that follow.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你进入JavaScript世界的第一步，尽管它非常基础，并没有展示JavaScript的真实力量。我们将在接下来的章节中练习高级JavaScript代码。
- en: Server-side JavaScript
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器端JavaScript
- en: The server is responsible for serving web pages in programming languages. The
    client sends a request to the server with a command, and the server responds to
    that client request. Server-side programming is the name given to programs that
    run on the server. We will study this in further detail in [Chapter 11](ch11.html
    "Chapter 11. Extending JavaScript and ECMAScript 6"), *Extending JavaScript and
    ECMA Script 6*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器负责以编程语言提供网页。客户端向服务器发送带有命令的请求，服务器响应该客户端请求。服务器端编程是指运行在服务器上的程序。我们将在[第11章](ch11.html
    "第11章。扩展JavaScript和ECMAScript 6")中进一步详细研究，*扩展JavaScript和ECMA Script 6*。
- en: The term *server-side* means that the control over webpages is handled by web
    servers rather than web pages. Web crossing runs that script and sends information
    in the form of HTML to each user's browsers.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 术语*服务器端*意味着网页的控制由Web服务器而不是网页处理。Web crossing运行该脚本，并以HTML的形式将信息发送到每个用户的浏览器。
- en: '**Rhino** and **Node** are both commonly used to create servers. Server-side
    scripting is not downloaded to client''s browser.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**Rhino**和**Node**都常用于创建服务器。服务器端脚本不会下载到客户端浏览器。'
- en: Server side
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务器端
- en: Server side refers to operations that are performed by the server in a client–server
    relationship in a computer networking. The term *server side* can also be understood
    as anything outside of the browser.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端指的是在客户端-服务器关系中的计算机网络中由服务器执行的操作。术语*服务器端*也可以理解为浏览器之外的一切。
- en: Client side
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户端
- en: Anything that is at *client side* means that it is running inside the web browser.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 任何在*客户端*运行的东西意味着它在Web浏览器内部运行。
- en: Scripting with Rhino
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Rhino进行脚本编写
- en: Rhino is a JavaScript engine/interpreter developed and written in the Java language
    and managed by the Mozilla foundation ([http://www.mozilla.org/rhino](http://www.mozilla.org/rhino))
    as open source software. It enables and allows JavaScript program elements to
    access the complete Java API.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Rhino是一个用Java语言开发和编写的JavaScript引擎/解释器，由Mozilla基金会管理，作为开源软件([http://www.mozilla.org/rhino](http://www.mozilla.org/rhino))。它使JavaScript程序元素能够访问完整的Java
    API。
- en: Description
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: Rhino is a JavaScript open source implementation written in pure Java. Rhino
    is used to provide scripting to end users. Basically, Rhino converts JavaScript
    scripts into classes. It is used for server-side programming in JavaScript.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Rhino是用纯Java编写的JavaScript开源实现。Rhino用于为最终用户提供脚本。基本上，Rhino将JavaScript脚本转换为类。它用于JavaScript的服务器端编程。
- en: 'MDN mentions the following: "Scripting Java has many uses. It allows us to
    write powerful scripts quickly by making use of the many Java libraries available."
    More information on things such as the `this` statement would extend the general
    statement and give some insight into the `this` statement''s implementation and
    its purpose.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: MDN提到以下内容：“使用Java脚本有许多用途。它允许我们通过利用许多可用的Java库来快速编写强大的脚本。”关于`this`语句等内容的更多信息将扩展一般性陈述，并给出`this`语句实现和目的的见解。
- en: We can use Rhino scripting as a shell for acting like a debugger. This shell
    runs code in a batch mode. Batch mode refers to batch processing, which means
    automated processing without human intervention. Batch is the opposite of interactive.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将 Rhino 脚本用作类似于调试器的壳。这个壳以批处理模式运行代码。批处理模式指的是批处理，意味着无需人工干预的自动化处理。批处理是交互式的对立面。
- en: Note
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Being open source, Rhino is a free program provided by Mozilla and can be downloaded
    from [http://www.mozilla.org/rhino](http://www.mozilla.org/rhino). Rhino is distributed
    as a JAR file. To start it with a command line, you can execute the Rhino JAR
    on a file from the command-line interface:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于是开源的，Rhino 是由 Mozilla 提供的免费程序，可以从 [http://www.mozilla.org/rhino](http://www.mozilla.org/rhino)
    下载。Rhino 以 JAR 文件的形式分发。要使用命令行启动它，您可以在命令行界面中执行 Rhino JAR 文件：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The 1.7R2 version of Rhino uses ECMAScript 3, while the 1.7R3 version of Rhino
    partially uses ECMAScript 5\. The latest stable release of Rhino is 1.7R5, which
    was released on January 29, 2015.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Rhino 1.7R2 版本使用 ECMAScript 3，而 1.7R3 版本的 Rhino 部分使用 ECMAScript 5。Rhino 的最新稳定版本是
    1.7R5，该版本于 2015 年 1 月 29 日发布。
- en: 'Here are a few functions with their usage and description:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些函数及其用法和描述：
- en: '| Function | Usage | Description |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 用法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `print` | `print(x)` | This is a global print function that prints to the
    console |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `print` | `print(x)` | 这是一个全局的打印函数，用于在控制台打印 |'
- en: '| `version` | `version(170)` | This is used to tell Rhino that we want the
    JS 1.7 features |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `version` | `version(170)` | 这用于告诉 Rhino 我们想要 JS 1.7 的功能 |'
- en: '| `load` | `load(file1,file2…)` | This loads and executes one or more files
    of JavaScript code |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `load` | `load(file1,file2…)` | 这将加载并执行一个或多个 JavaScript 代码文件 |'
- en: '| `readFile` | `readFile(file)` | This reads a text file and returns its contents
    as a string |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `readFile` | `readFile(file)` | 这将读取一个文本文件，并返回其内容作为字符串 |'
- en: '| `readUrl` | `readUrl(url)` | This reads the textual contents of a URL and
    returns the output as a string |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `readUrl` | `readUrl(url)` | 这将读取 URL 的文本内容，并将输出作为字符串返回 |'
- en: '| `spawn` | `spawn(f)` | This runs `f()` or `load` and executes the `f` file
    in a new thread |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `spawn` | `spawn(f)` | 这将运行 `f()` 或 `load` 并在新线程中执行 `f` 文件 |'
- en: '| `runCommand` | `runCommand(cmd,[args..])` | This runs a system command with
    zero or more command-line args |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `runCommand` | `runCommand(cmd,[args..])` | 这将运行一个系统命令，带有零个或多个命令行参数 |'
- en: '| `quit` | `quit()` | This makes Rhino exit |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `quit` | `quit()` | 这将使 Rhino 退出 |'
- en: 'Here is a simple example that displays the message in the `strNote` string:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个简单的示例，它显示 `strNote` 字符串中的消息：
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can find some more useful scripts at [http://www.rhinoscript.org/](http://www.rhinoscript.org/).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [http://www.rhinoscript.org/](http://www.rhinoscript.org/) 找到一些有用的脚本。
- en: Node.js
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Node.js
- en: Node.js is an implementation of JavaScript that allows JavaScript to run outside
    the browser and perform OS-based and network-based tasks. It is a runtime interface
    for JavaScript.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 是 JavaScript 的一个实现，允许 JavaScript 在浏览器之外运行并执行基于 OS 和网络的任务。它是一个 JavaScript
    的运行时接口。
- en: 'Node uses Google V8, which implements ECMAScript 5 standards, meaning that
    there is not much difference between the syntax of JavaScript and Node. For example,
    if you want to print out "Hello World" in the console, you will write the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Node 使用 Google V8，它实现了 ECMAScript 5 标准，这意味着 JavaScript 和 Node 的语法之间没有太大差异。例如，如果您想在控制台打印出
    "Hello World"，您将编写以下代码：
- en: '[PRE10]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Description
  id: totrans-119
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: Node.js is a super fast interface that runs on the Google Chrome V8 engine.
    Node.js is easy to use, fast, and scalable. Like JavaScript client-side programming,
    Node.js provides abstraction. So, by this abstraction, Node.js can handle a huge
    amount of code.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 是一个运行在 Google Chrome V8 引擎上的超级快速接口。Node.js 易于使用，快速且可扩展。像 JavaScript
    客户端编程一样，Node.js 提供了抽象。因此，通过这种抽象，Node.js 可以处理大量的代码。
- en: 'Here is an example or server-side coding in Node.js:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个 Node.js 的服务器端编码示例：
- en: '[PRE11]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The language syntax
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语言语法
- en: The language syntax is basically a means of communication. In a programming
    language, it's a formal way of communicating with algorithms, from both algorithms
    to programmer and programmer to machine. This is because a machine works on given
    instructions.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 语言语法基本上是一种通信手段。在编程语言中，这是一种与算法正式通信的方式，无论是从算法到程序员还是从程序员到机器。这是因为机器根据给定的指令工作。
- en: These instructions are meant to be written in a specific format, so that a machine
    could understand and compile it properly. That specific format is defined by some
    general rules of a programming language, known as language syntax.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指令旨在以特定格式编写，以便机器能够正确理解并编译它。这种特定格式由编程语言的某些一般规则定义，称为语言语法。
- en: 'A computer contains a list of instructions to be executed. Every computer language
    has different syntax and rules. To use different languages, we must have knowledge
    of their language syntax, such as the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机包含要执行的指令列表。每种计算机语言都有不同的语法和规则。要使用不同的语言，我们必须了解它们的语言语法，如下所示：
- en: Syntax (a set of symbols and rules)
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法（一组符号和规则）
- en: Semantics (for transforming term to term)
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语义学（用于术语到术语的转换）
- en: Pragmatics (the particular construct of a language)
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语义学（语言的具体结构）
- en: Similarly, other languages in JavaScript have a unique syntax. JavaScript is
    not a language of Java; these are two different languages and the syntaxes for
    both languages are different. JavaScript is a powerful and expressive language.
    JavaScript's statements are separated by a semicolon at the end.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，JavaScript中的其他语言也有独特的语法。JavaScript不是Java语言；这两个是不同的语言，两种语言的语法也不同。JavaScript是一种强大且表达性强的语言。JavaScript的语句以分号结尾进行分隔。
- en: The JavaScript language syntax is much easy for beginners who have an idea of
    object-oriented programming. JavaScript is contained between the `<scripts>…</script>`
    tags. These are treated as HTML tags in any web browser.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有面向对象编程概念的初学者来说，JavaScript的语言语法非常容易。JavaScript包含在`<scripts>…</script>`标签之间。在任何网络浏览器中，这些都被视为HTML标签。
- en: 'You can place your JavaScript code anywhere on your webpage, but I prefer the
    way of defining your script using the `<head>` tag. So, the structure of your
    script will be as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将你的JavaScript代码放置在网页的任何位置，但我更喜欢使用`<head>`标签来定义你的脚本。因此，你的脚本结构如下所示：
- en: '[PRE12]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Basically, the `<script>` tag when written writing `<head>` tag, tells the browser
    that this scripts need to be executed first when the web page loads. Although,
    its a good practice to include javaScript is to place it at the bottom of a web
    page. There are two important attributes of this `script` tag.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，当在`<head>`标签中写入`<script>`标签时，它告诉浏览器在网页加载时需要首先执行这些脚本。尽管如此，将JavaScript放在网页底部是一个好的实践。这个`script`标签有两个重要的属性。
- en: Language
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语言
- en: The `language` attribute will tell which language attribute you are using; typically,
    it's JavaScript. It is the default value if the attribute is absent.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`language`属性将告诉您正在使用哪种语言属性；通常，它是JavaScript。如果该属性不存在，则默认值为JavaScript。'
- en: Type
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型
- en: The `type` attribute is the same as the preceding explanation. This is not a
    required attribute. Its value is set as `text/javascript`, which shows that this
    scripting language is in use.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`type`属性与前面的解释相同。这不是一个必需的属性。其值设置为`text/javascript`，这表明正在使用这种脚本语言。'
- en: '[PRE13]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The character set
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符集
- en: A character set is basically a list of characters recognized by computer hardware
    and software. It is represented by a number. Earlier ASCII was used as standard
    character set encoding for web pages. There were lots of character encoding problems
    that were almost solved after the arrival of HTML5 and XML. JavaScript provides
    support for different types of languages and their characters. The character set
    attribute shows the character encoding in external files. For HTML5, there is
    a default character set encoding is UTF-8.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 字符集基本上是一组由计算机硬件和软件识别的字符。它用一个数字表示。早期ASCII被用作网页的标准字符集编码。在HTML5和XML出现之后，解决了许多字符编码问题。JavaScript为不同类型的语言及其字符提供支持。字符集属性显示外部文件中的字符编码。对于HTML5，默认字符集编码是UTF-8。
- en: 'There are some common values of character set encoding such as the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 字符集编码有一些常见的值，如下所示：
- en: '**ISO-8859-1**: This is used to encode the Latin alphabet'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ISO-8859-1**：这是用于编码拉丁字母'
- en: '**UTF-8**: This is used for Unicode encoding that is compatible with ASCII'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UTF-8**：这是用于与ASCII兼容的Unicode编码'
- en: 'For example, if your frontend page is in Spanish, and you do not use the character
    set property in your page, then it will not show some special characters in Spanish
    clearly. For this, you must declare a character set property in the top `<head>`
    tag of your page, as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你的前端页面是西班牙语，而你未在页面中使用字符集属性，那么它将无法清楚地显示一些特殊的西班牙语字符。为此，你必须在页面的顶部`<head>`标签中声明一个字符集属性，如下所示：
- en: '[PRE14]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For this, you can also change your web server's configuration to serve as UTF-8\.
    Alternatively, we can send a content-type header to our server-side script.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这一点，您也可以更改您的网络服务器配置以作为 UTF-8 服务。或者，我们可以向服务器端脚本发送内容类型头。
- en: In JavaScript, the `charset` property returns the character encoding of the
    current document. The syntax for reading the `characterSet` property from the
    document is `document.characterSet;`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，`charset` 属性返回当前文档的字符编码。从文档中读取 `characterSet` 属性的语法是 `document.characterSet;`。
- en: 'We can define the `characterSet` attribute in the `<script>` tag in the parent
    page of our website, as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在我们网站的父页面的 `<script>` 标签中定义 `characterSet` 属性，如下所示：
- en: '[PRE15]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Another way is to add the UTF-8 character set into the server configuration
    file (`.htaccess`), as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是将 UTF-8 字符集添加到服务器配置文件（`.htaccess`）中，如下所示：
- en: '[PRE16]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: So, character set encoding will apply to all JavaScript pages in your application.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，字符集编码将应用于您应用程序中的所有 JavaScript 页面。
- en: Case sensitivity
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大小写敏感性
- en: HTML is not a case-sensitive language, but XML and JavaScript are case sensitive
    languages.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 不是大小写敏感的语言，但 XML 和 JavaScript 是大小写敏感的语言。
- en: Description
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: JavaScript is a case-sensitive language. Case sensitivity in JavaScript does
    not only apply to variable names but also to JavaScript keywords and JavaScript's
    event handlers. For example, if you have the `firstname` and `firstName` variables,
    then these will be two different variables. In JavaScript, while calling a function,
    you must write its name exactly the same way as it was defined, matching the letter
    case.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是大小写敏感的语言。JavaScript 中的大小写敏感性不仅适用于变量名，还适用于 JavaScript 关键字和 JavaScript
    的事件处理器。例如，如果您有 `firstname` 和 `firstName` 变量，那么这些将是两个不同的变量。在 JavaScript 中，在调用函数时，您必须按照定义时的确切方式写出其名称，匹配字母大小写。
- en: A popular convention also used in JavaScript's primitive methods is to use camel
    case, in which a phrase is written with the first letter of the first word in
    lowercase and every successive word has an uppercase first letter, which makes
    it easier to read.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 的原始方法中常用的一个流行约定是使用驼峰式命名法，其中短语以第一个单词的首字母小写开始，每个后续单词的首字母大写，这使得阅读更加容易。
- en: 'Examples of some functions are as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一些函数的示例如下：
- en: '`toUpper();`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toUpper();`'
- en: '`toArray();`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toArray();`'
- en: Note
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Keywords in JavaScript are all in lowercase such as `while`, `for`, `if`, and
    so on.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的关键字都是小写的，例如 `while`、`for`、`if` 等等。
- en: 'JavaScript has functions that are built into the language; they take strings
    and transform them to the uppercase or lowercase. This can make handling strings
    easier to manipulate when the input has varying cases. The following are the two
    parameters the functions can take:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 有一些内置的函数；它们接受字符串并将它们转换为大写或小写。这可以在输入具有不同大小写时使字符串的处理更容易操作。以下是可以由这些函数接受的两个参数：
- en: '`.toUpperCase()`'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.toUpperCase()`'
- en: '`.toLowerCase()`'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.toLowerCase()`'
- en: The `.toUppercase()` function will convert letters into uppercase and the `.toLowerCase()`
    function will convert letters into lowercase. These are the built-in and case-sensitive
    functions of JavaScript.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`.toUppercase()` 函数将字母转换为大写，而 `.toLowerCase()` 函数将字母转换为小写。这些都是 JavaScript 的内置且大小写敏感的函数。'
- en: Whitespaces and line breaks
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空白和换行符
- en: Whitespaces and line breaks are used to format and indent code in a neat and
    consistent manner so that the code becomes readable and easy to understand.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 空白和换行符用于以整洁和一致的方式格式化和缩进代码，以便代码易于阅读和理解。
- en: Description
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Spaces, Tabs, New lines which are not a part of a string are called whitespaces.
    JavaScript removes whitespaces and line breaks between tokens in the programs,
    Spaces and Line breaks that are a part of a string are not removed when script
    is executed.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 空格、制表符、不是字符串一部分的换行符称为空白。JavaScript 在程序中的标记之间删除空白和换行符，当脚本执行时，字符串中的空格和换行符不会被删除。
- en: In any text, there are three types of line breaks:`\r\n` or as `\r` or `\n`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何文本中，都有三种类型的换行符：`\r\n` 或 `\r` 或 `\n`。
- en: 'These line breaks occur in different types of operating systems:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这些换行符在不同的操作系统中出现：
- en: '`\r\n` is usually created on Windows'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\r\n` 通常在 Windows 上创建'
- en: '`\n` is usually created on OS X'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\n` 通常在 OS X 上创建'
- en: If you want to remove line breaks from any text, then we must deal with all
    types of line breaks because the text could be from these three sources Windows,
    Linux, and Mac.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想从任何文本中删除换行符，那么我们必须处理所有类型的换行符，因为文本可能来自这三个来源：Windows、Linux 和 Mac。
- en: 'We have several methods to remove line breaks from any text. For example, we
    have the following:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有几种方法可以去除任何文本中的换行符。例如，我们有以下方法：
- en: '[PRE17]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this code, we have used a regular expression for removing line breaks from
    our text. This will remove line breaks `\r\n`, then `\n`, and finally `\r`. We
    used the suffix `gm` at the end of the regular expression because `m` shows that
    line breaks should be removed from all the text and `g` shows that it should be
    done more than once.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，我们使用了正则表达式来从我们的文本中去除换行符。这将去除换行符 `\r\n`，然后是 `\n`，最后是 `\r`。我们在正则表达式的末尾使用了后缀
    `gm`，因为 `m` 表示应该从所有文本中去除换行符，而 `g` 表示应该多次执行此操作。
- en: Regular expressions are discussed in detail in [Chapter 8](ch08.html "Chapter 8. JavaScript
    Implementations, Syntax Basics, and Variable Types"), *JavaScript Expressions,
    Operators, Statements, and Arrays*.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式在 [第 8 章](ch08.html "第 8 章。JavaScript 实现、语法基础和变量类型") 中详细讨论，*JavaScript
    表达式、运算符、语句和数组*。
- en: 'Now, there are some spaces between texts; you can remove these whitespaces
    using JavaScript. There are different functions of JavaScript for removing all
    leading spaces from a string; you can use the following:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，文本之间存在一些空格；您可以使用 JavaScript 来去除这些空格。JavaScript 有不同的函数可以用来从字符串中去除所有前导空格；您可以使用以下函数：
- en: '[PRE18]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This piece of code uses a regular expression, which checks multiple occurrences
    of white spaces at beginning and end of string.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用正则表达式，检查字符串开头和结尾的多个空格。
- en: 'The `g` in this regular expression shows that the global search should be performed
    while checking the text. There are more methods, such as the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个正则表达式中，`g` 表示在检查文本时应执行全局搜索。还有更多方法，例如以下方法：
- en: The `string.replace()` function is used to replace all leading whitespaces with
    an empty string
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string.replace()` 函数用于将所有前导空格替换为空字符串'
- en: The `str.trim()` function is used to remove spaces from both sides of a string
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`str.trim()` 函数用于从字符串的两端去除空格'
- en: The Unicode escape sequence
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unicode 转义序列
- en: 'Every Unicode escape sequence consists of six characters with a much defined
    syntax: four characters following `\u`. Smaller code is accompanied by leading
    zeroes but the length of the sequence is maintained. For example, `\u00a9` has
    two leading zeros. Similarly, the copyright symbol can be represented as `\u00A9`.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Unicode转义序列由六个字符组成，具有明确的语法：四个字符跟在 `\u` 之后。较小的代码点前面有前导零，但序列的长度保持不变。例如，`\u00a9`
    有两个前导零。同样，版权符号可以表示为 `\u00A9`。
- en: Any character with a code point that is less than 65536 can be escaped using
    the hexadecimal value of its code point, prefixed with `\u`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 任何小于 65536 的代码点的字符都可以使用其代码点的十六进制值进行转义，前面加上 `\u`。
- en: Note
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A code point (also known as **character code**) is a numerical representation
    of a specific Unicode character.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 代码点（也称为 **字符代码**）是特定 Unicode 字符的数值表示。
- en: Description
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The JavaScript Unicode escape sequence allows you to place special characters
    in a string. Browsers that support JavaScript can use the escape function.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript Unicode 转义序列允许您在字符串中放置特殊字符。支持 JavaScript 的浏览器可以使用 escape 函数。
- en: 'To add the next line within the same string, we can use `\n`. Let''s take a
    look at the following code:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要在同一个字符串中添加下一行，我们可以使用 `\n`。让我们看看以下代码：
- en: '[PRE19]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To add quotes within a string, we can use something like this:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要在字符串中添加引号，我们可以使用如下方式：
- en: '[PRE20]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This Unicode escape sequence starts with a backslash (`\`) followed by characters.
    This backslash is the escape sequence character. To insert a backslash itself,
    just add another backslash "`\`" before the next one. Also called double backslash
    (`\\`).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Unicode 转义序列以反斜杠 (`\`) 开头，后跟字符。这个反斜杠是转义序列字符。要插入一个反斜杠本身，只需在下一个反斜杠之前添加另一个反斜杠
    "`\`"。也称为双反斜杠 (`\\`)。
- en: You can specify a Unicode character by `\uaaaa`, where `aaaa` is a hexadecimal
    number. So a Unicode escape character can represent a 16-bit character.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过 `\uaaaa` 指定一个 Unicode 字符，其中 `aaaa` 是一个十六进制数。因此，Unicode 转义字符可以表示一个 16 位字符。
- en: 'A Unicode escape sequence represents a Unicode sequence, as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode 转义序列表示一个 Unicode 序列，如下所示：
- en: A backslash (`\`)
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反斜杠 (`\`)
- en: A character (`u`)
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符 (`u`)
- en: A hexadecimal number (`0-9`)(`a-f`)
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十六进制数 (`0-9`)(`a-f`)
- en: For example, the word cat will be represented as `\u732b`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，单词 cat 将表示为 `\u732b`。
- en: 'A Unicode escape sequence can also be used in comments and literals. Consider
    the following example:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode 转义序列也可以用于注释和字面量。考虑以下示例：
- en: '[PRE21]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The hexadecimal part of this kind of a character escape is case-insensitive,
    which means `\u041a` and `\u041A` are equivalent.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这种字符转义序列的十六进制部分不区分大小写，这意味着 `\u041a` 和 `\u041A` 是等效的。
- en: 'You can also represent an escape sequence to represent a Unicode character
    ["`\u03b1`"] as ["`a`"].The Unicode escape for the character `é`, for example,
    is `\u00E9`, and the following two JavaScript strings are identical:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以表示一个转义序列来表示一个 Unicode 字符 ["`\u03b1`"] 作为 ["`a`"]。例如，字符 `é` 的 Unicode 转义是
    `\u00E9`，以下两个 JavaScript 字符串是相同的：
- en: '[PRE22]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `==` operator tries to convert the values to the same type before testing
    if they're the same; whereas, `===` does not do this. It requires objects to be
    of the same type to be equal.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`==` 操作符在测试它们是否相同之前会尝试将值转换为相同的类型；而 `===` 则不会这样做。它要求对象类型相同才能相等。'
- en: 'Here are some examples of the escape sequence for some characters:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些字符转义序列的示例：
- en: '| Unicode | Escape sequence | Meaning |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| Unicode | 转义序列 | 含义 |'
- en: '| --- | --- | --- |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `\u000B` | `\v` | Vertical tab |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `\u000B` | `\v` | 垂直制表符 |'
- en: '| `\u000A` | `\n` | New line |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `\u000A` | `\n` | 换行 |'
- en: '| `\u0009` | `\t` | White spaces |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `\u0009` | `\t` | 空白字符 |'
- en: '| `\u000C` | `\f` | Form field |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `\u000C` | `\f` | 表单字段 |'
- en: '| `\u000D` | `\r` | Line terminator |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `\u000D` | `\r` | 行终止符 |'
- en: '| `\u0020` |   | Whitespace |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| `\u0020` |   | 空白字符 |'
- en: Normalization
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规范化
- en: The Unicode standard (which can be found at [http://unicode.org/standard/standard.html](http://unicode.org/standard/standard.html))
    defines the most acceptable pattern of encoding characters and the normalization
    method. Javascript presupposes that the code it is reading and interpreting has
    all the Unicode representations normalized. ECMAScript V6 has a string prototype
    function (`string.prototype.normalize()`) to fix any unaddressed encodings.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode 标准（可在 [http://unicode.org/standard/standard.html](http://unicode.org/standard/standard.html)
    找到）定义了编码字符的最可接受模式以及规范化方法。JavaScript 假设它读取和解释的代码具有所有 Unicode 表示的规范化。ECMAScript
    V6 有一个字符串原型函数 (`string.prototype.normalize()`) 来修复任何未处理的编码。
- en: Note
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: ECMAScript 6 introduces `String.prototype.normalize()`, which takes care of
    Unicode normalization.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 6 引入了 `String.prototype.normalize()` 方法，负责处理 Unicode 规范化。
- en: Identifiers
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标识符
- en: Identifiers are used to give names to functions and variables. There are certain
    rules for these identifiers and these rules are the same for all programming languages.
    Identifiers can contain letters and a digest of the complete Unicode character
    set. These JavaScript identifiers include variables, objects, functions, properties,
    methods, events, and so on.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 标识符用于给函数和变量命名。这些标识符有一些规则，并且这些规则对所有编程语言都是相同的。标识符可以包含字母和完整的 Unicode 字符集的摘要。这些
    JavaScript 标识符包括变量、对象、函数、属性、方法、事件等。
- en: 'Here are the rules for identifiers:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是标识符的规则：
- en: Identifiers cannot start with a number
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符不能以数字开头
- en: Identifiers can contain numbers, letters, underscore, and the dollar sign (`$`)
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符可以包含数字、字母、下划线和美元符号 (`$`)
- en: It can be of any length
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以是任何长度
- en: These are case-sensitive
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些是区分大小写的
- en: We must not use reserved words for identifiers
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能使用保留词作为标识符
- en: Tip
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We can also use Unicode characters as identifiers. Unicode escape sequences
    such as `\uaaaa`, can also be used as identifiers. We must avoid using global
    methods or properties as identifiers.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 Unicode 字符作为标识符。例如，Unicode 转义序列 `\uaaaa` 也可以用作标识符。我们必须避免使用全局方法或属性作为标识符。
- en: 'A best practice while writing identifiers is to use one word and use camel
    case. Consider the following example:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写标识符时，一个最佳实践是使用一个单词并使用驼峰式命名法。考虑以下示例：
- en: myNote
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: myNote
- en: myNewNotebook
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: myNewNotebook
- en: $sum
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: $sum
- en: The `var` variable is a valid identifier name, but it is an invalid identifier
    because of the reserved word. If you use a valid identifier, then your browser
    will handle it correctly; however, if you use an invalid identifier, your browser
    will show a warning recognizing it as a bug.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`var` 变量是一个有效的标识符名称，但由于它是保留词，因此不是一个有效的标识符。如果你使用一个有效的标识符，那么你的浏览器将正确处理它；然而，如果你使用一个无效的标识符，你的浏览器将显示警告，将其识别为错误。'
- en: Reserved keywords
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保留关键字
- en: Reserved words are keywords in JavaScript. There are some words that cannot
    be used as a function or a variable name. These reserved words are also identifiers.
    These reserved words are reserved for JavaScript engine. If you use these reserved
    words as a function, variable, or a method name, then your browser will show a
    warning and your script may fail.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 保留字是JavaScript中的关键字。有一些字不能用作函数或变量名。这些保留字也是标识符。这些保留字是为JavaScript引擎保留的。如果你将这些保留字用作函数、变量或方法名，那么你的浏览器将显示警告，并且你的脚本可能会失败。
- en: Reserved words are basically keywords that have special meaning in JavaScript,
    for example, `break`, `case`, `do`, `delete`, `else`, and so on.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 保留字基本上是具有特殊意义的JavaScript关键字，例如`break`、`case`、`do`、`delete`、`else`等等。
- en: 'There are three types of reserved words:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种类型的保留字：
- en: Protected reserved words
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受保护的保留字
- en: New reserved word
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新保留字
- en: Future reserved words
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未来保留字
- en: Protected reserved words
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 受保护的保留字
- en: 'Protected reserved words cannot be used as a variable or a function name. If
    we use these, then there will be a compilation error in it. Here are a few protected
    reserved words:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 受保护的保留字不能用作变量或函数名。如果我们使用这些字，那么在编译时将会出现错误。以下是一些受保护的保留字的例子：
- en: '| `Break` | `case` | `catch` |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `Break` | `case` | `catch` |'
- en: '| `class` | `const` | `Continue` |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `class` | `const` | `Continue` |'
- en: '| `Debugger` | `Default` | `Delete` |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| `Debugger` | `Default` | `Delete` |'
- en: '| `do` | `Else` | `Export` |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| `do` | `Else` | `Export` |'
- en: '| `Extends` | `False` | `If` |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `Extends` | `False` | `If` |'
- en: '| `Import` | `in` | `var` |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `Import` | `in` | `var` |'
- en: New reserved words
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新保留字
- en: 'JavaScript also released new keywords, and these reserved words have a special
    meaning for the current version of JavaScript. These reserved keywords can also
    be used as identifiers. Once you declare it as an identifier, then it will forget
    that it was a keyword. Here are some examples of new reserved keywords:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript还发布了新的关键字，这些保留字在当前版本的JavaScript中具有特殊意义。这些保留字也可以用作标识符。一旦你将其声明为标识符，那么它就会忘记它曾经是一个关键字。以下是一些新保留字的例子：
- en: '| `Abstract` | `Boolean` | `byte` |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| `Abstract` | `Boolean` | `byte` |'
- en: '| `char` | `enum` | `final` |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| `char` | `enum` | `final` |'
- en: '| `doubke` | `implements` | `int` |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| `doubke` | `implements` | `int` |'
- en: '| `interface` | `internal` | `long` |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| `interface` | `internal` | `long` |'
- en: '| `set` | `short` | `static` |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| `set` | `short` | `static` |'
- en: '| `uint` | `ulong` | `ushort` |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| `uint` | `ulong` | `ushort` |'
- en: Future reserved words
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 未来保留字
- en: 'Future reserved words are proposed for future extensions of JavaScript. These
    are also used as an identifier in the current version of JavaScript. When you
    choose a word as an identifier, it is also important to note whether it is already
    the name of JavaScript reserved keyword. Here are some examples of future reserved
    words:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 未来保留字是为JavaScript未来的扩展而提出的。这些字在当前版本的JavaScript中也被用作标识符。当你选择一个字作为标识符时，也很重要的是要注意它是否已经是JavaScript保留字的名字。以下是一些未来保留字的例子：
- en: '| `asset` | `event` |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| `asset` | `event` |'
- en: '| `namespace` | `require` |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| `namespace` | `require` |'
- en: '| `transient` | `violate` |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| `transient` | `violate` |'
- en: '| `ensure` | `goto` |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| `ensure` | `goto` |'
- en: '| `native` | `synchronized` |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| `native` | `synchronized` |'
- en: '| `use` | `Invariant` |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| `use` | `Invariant` |'
- en: Comments
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释
- en: In any programming language, comments are used to make your code readable. In
    JavaScript, comments are used to explain JavaScript code.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何编程语言中，注释都用于使你的代码可读。在JavaScript中，注释用于解释JavaScript代码。
- en: Another use of comments is to write them to add hints, suggestions, and warnings
    into our JavaScript code, so if someone other than the developer wants to change
    or modify your script, they can easily modify it. Use of comments in a script
    is considered as a best practice. Comments are also used to disable the execution
    of some parts of code. In debugging, comments are very helpful, so it is a valuable
    debugging tool for developers.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 注释的另一个用途是写入它们，以在我们的JavaScript代码中添加提示、建议和警告，这样如果除了开发者之外的其他人想要更改或修改你的脚本，他们可以很容易地进行修改。在脚本中使用注释被认为是最佳实践。注释还用于禁用代码的一些部分执行。在调试中，注释非常有帮助，因此它是开发者的宝贵调试工具。
- en: 'There are three different types of comments you can put into your JavaScript
    script:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的JavaScript脚本中放入三种不同类型的注释：
- en: Multiple-line comments
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多行注释
- en: One-line comments
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单行注释
- en: The HTML comment opening sequence
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML注释的起始序列
- en: Multiple-line comments
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多行注释
- en: 'We can write multiple lines between the comment boundaries; this block of code
    will not be executed:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在注释边界之间写多行；这段代码将不会被执行：
- en: '[PRE23]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: One-line comments
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单行注释
- en: 'Adding two forward slashes in the beginning of the line comments it. The text
    between `//` and the end of the line is commented and will not be compiled. Double
    forward slash is used to comment one line at a time:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在行首添加两个正斜杠来注释它。`//`和行尾之间的文本将被注释，并且不会编译。双正斜杠用于一次注释一行：
- en: '[PRE24]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The HTML comment opening sequence
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTML注释的开头序列
- en: JavaScript treats the HTML comment's opening sequence, that is, `<!-- as //
    comment`. It does not recognize the closing sequence of HTML comment, that is,
    `-->` HTML styled comments are not usually used within JavaScript code blocks
    as `//` is much handy. It is recommended not to use HTML comments in JS as that
    was an old practice. They were used to hide incompatible JavaScript code from
    old browsers.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript将HTML注释的开头序列，即`<!--`视为`//`注释。它不识别HTML注释的结尾序列，即`-->`。HTML样式的注释通常不在JavaScript代码块中使用，因为`//`更为方便。建议不要在JS中使用HTML注释，因为这已经是一种旧习惯了。它们被用来隐藏与旧浏览器不兼容的JavaScript代码。
- en: Literals
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字面量
- en: 'Literals are used to represent values for the different data structures in
    JavaScript; for example:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 字面量用于表示JavaScript中不同数据结构的值；例如：
- en: '`3.14`'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3.14`'
- en: '`to be or not to be`'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to be or not to be`'
- en: In the following sections, we will cover the literal types for JavaScript.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍JavaScript的字面量类型。
- en: Object literals
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象字面量
- en: An object literal is used to hold values in an object.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 对象字面量用于在对象中保存值。
- en: Description
  id: totrans-295
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: An object literal holds pairs of comma-separated lists of property names and
    associated values, and they are enclosed within `{}`. It is possible for an object
    literal to have no values as well. In an object literal, each `name:value` pair
    is separated by a comma.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 对象字面量包含逗号分隔的属性名和关联值的列表对，并且它们被括在`{}`内。对象字面量也可以没有值。在对象字面量中，每个`name:value`对由逗号分隔。
- en: 'Here is an example of an object literal:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个对象字面量的例子：
- en: '[PRE25]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Array literals
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组字面量
- en: An array literal contains a list of expressions that represent an array element.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 数组字面量包含表示数组元素的列表表达式。
- en: Description
  id: totrans-301
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'Array literals contain values inside an array. They are placed inside array
    brackets `[]` and each element is separated by a comma (`,`). Just like an object
    literal, an array can be empty and contain `0` elements. When you create an array
    literal it is specified values as its element and its length is specified as a
    number of arguments of this array. Here is an example of an array literal:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 数组字面量包含数组内的值。它们放在数组括号`[]`内，每个元素由逗号（`,`）分隔。就像对象字面量一样，数组可以是空的，包含`0`个元素。当你创建一个数组字面量时，它指定了值作为其元素，并且其长度由这个数组的参数数量指定。下面是一个数组字面量的例子：
- en: '[PRE26]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Boolean literals
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布尔字面量
- en: As the name suggests, a Boolean literal has Boolean values, so its value is
    either `true` or `false`.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，布尔字面量具有布尔值，因此其值要么是`true`要么是`false`。
- en: Integers
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整数
- en: Integer literals must contain values that are only integers.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 整数字面量必须包含仅限于整数的值。
- en: Description
  id: totrans-308
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: In JavaScript, an integer literal must contain a digit from 0 to 9\. Commas
    and brackets are not allowed in integer literals. Integers can be negative or
    positive. If there is no sign present then it is consider as positive.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，整数字面量必须包含从0到9的数字。整数字面量不允许使用逗号和括号。整数可以是负数或正数。如果没有符号，则默认为正数。
- en: Floating point literals
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浮点字面量
- en: A floating point literal is used to contain floating numbers—numbers that have
    a decimal point, fraction, or exponent.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点字面量用于包含浮点数——具有小数点、分数或指数的数字。
- en: Description
  id: totrans-312
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'Examples of floating point literals are as follows:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点字面量的例子如下：
- en: '[PRE27]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: String literals
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串字面量
- en: String literals, as the name suggests, hold only string values, that is, values
    placed inside a pair of quotation marks.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串字面量，正如其名所示，只包含字符串值，即放在一对引号内的值。
- en: Description
  id: totrans-317
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: A string literal contains characters placed inside quotation marks. You can
    also create a null string to not contain anything. Two or more strings can be
    joined together using the `+` sign. Special characters can be inserted in the
    string. A few special characters are `\n`, `\r`, `\b`, `\t`, to name a few.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串字面量包含放在引号内的字符。您还可以创建一个空字符串，不包含任何内容。可以使用`+`符号将两个或多个字符串连接在一起。可以在字符串中插入特殊字符。一些特殊字符包括`\n`、`\r`、`\b`、`\t`等。
- en: 'A few examples of string examples are as follows:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 一些字符串字面量的例子如下：
- en: '[PRE28]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Statements
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语句
- en: JavaScript also supports a set of statements used to identify a set of instructions
    and carry out tasks. There are different types of statements in JavaScript such
    as `if`, `for`, `while`, and so on. The basic purpose of using these statements
    is to evaluate or check whether certain conditions are being met. These statements
    are common for all programming languages.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript还支持一组用于识别一组指令并执行任务的语句。JavaScript中有不同类型的语句，如`if`、`for`、`while`等。使用这些语句的基本目的是评估或检查是否满足某些条件。这些语句对所有编程语言都是通用的。
- en: Conditional statements
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 条件语句
- en: As the name suggests, conditional statements are based on conditions and the
    `if` and `then` rule. For example, "if you work hard, you will get rewarded".
    Here, working hard is the condition of getting rewarded.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，条件语句基于条件和`if`以及`then`规则。例如，“如果你努力工作，你会得到回报”。在这里，努力工作是得到回报的条件。
- en: 'Consider the following example:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE29]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The loop statement
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 循环语句
- en: 'In a loop statement, a condition is provided within a set of parentheses. If
    the condition evaluates to `true`, then the loop will continue working, and if
    the condition equates to `false`, the program will jump to the next line after
    the loop. An exception is the `do while` loop, which will always execute at least
    once. There are different types of loops in programming languages; they are as
    follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环语句中，在括号内提供一个条件。如果条件评估为`true`，则循环将继续工作；如果条件等于`false`，程序将跳转到循环之后的下一行。一个例外是`do
    while`循环，它将始终至少执行一次。编程语言中有不同类型的循环；它们如下：
- en: The for loops
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for`循环'
- en: The `for`/`in` loops
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for`/`in`循环'
- en: The `while` loops
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`while`循环'
- en: The `do/while` loops
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do/while`循环'
- en: 'Here is an example that shows how the `while` loop is used:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例，展示了如何使用`while`循环：
- en: '[PRE30]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Loops are covered in more detail in [Chapter 8](ch08.html "Chapter 8. JavaScript
    Implementations, Syntax Basics, and Variable Types"), *JavaScript Expressions,
    Operators, Statements, and Arrays*.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 循环在[第8章](ch08.html "第8章。JavaScript实现、语法基础和变量类型")中详细介绍，*JavaScript表达式、运算符、语句和数组*。
- en: Object manipulation statements
  id: totrans-336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象操作语句
- en: Object manipulation statements in JavaScript are used to access the object's
    properties and methods at runtime to perform certain functions. JavaScript uses
    the `for…in` and `with` statements to manipulate objects.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的对象操作语句用于在运行时访问对象的属性和方法以执行特定功能。JavaScript使用`for...in`和`with`语句来操作对象。
- en: 'Here is an example that shows how the object car can be manipulated:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例，展示了如何操作对象`car`：
- en: '[PRE31]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Output:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE32]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Exception handling statements
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 异常处理语句
- en: 'The `try`, `catch`, `throw`, and `finally` statements are used in JavaScript
    exception handling. Let''s take a look at the following description:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`try`、`catch`、`throw`和`finally`语句用于JavaScript异常处理。让我们看看以下描述：'
- en: The `try` statement tests code for errors.
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`try`语句用于测试代码中的错误。'
- en: The `catch` statement usually follows the `try` statement and catches and handles
    the error found in the `try` block.
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catch`语句通常跟在`try`语句后面，捕获并处理`try`块中找到的错误。'
- en: The `throw` statement creates custom errors or alerts.
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`throw`语句创建自定义错误或警报。'
- en: The `finally` statement executes code after `try` and `catch`, regardless of
    the result. Usually, this block of code is used to clean up and release resources.
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`finally`语句在`try`和`catch`之后执行代码，无论结果如何。通常，这个代码块用于清理和释放资源。'
- en: 'Here is an example showing how exceptions are handled using the `try` and `catch`
    block:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例，展示了如何使用`try`和`catch`块来处理异常：
- en: '[PRE33]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Optional semicolon
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可选分号
- en: Semicolons in JavaScript are used to separate statements from each other. Let's
    say, if you have two different statements and you just write them, then it will
    not be understandable. So, JavaScript uses semicolons to separate statements.
    It will make your code clear and meaningful. If you do not use semicolon in JavaScript,
    then it will make your statements complex, meaning that the end of one of your
    statements could be the start of your statement.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的分号用于分隔语句。比如说，如果你有两个不同的语句，你只是把它们写下来，那么它们将不会容易理解。所以，JavaScript使用分号来分隔语句。这将使你的代码更清晰、更有意义。如果你在JavaScript中不使用分号，那么它会使你的语句变得复杂，意味着你语句的结尾可能是你语句的开始。
- en: Note
  id: totrans-352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Placing semicolons in your code can help you prevent a lot of errors. Absence
    of semicolons, from your code block will treat it as a single line of code when
    compiled resulting in several errors.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的代码中放置分号可以帮助你防止许多错误。代码块中缺少分号，在编译时将视为单行代码，从而导致多个错误。
- en: 'JavaScript does not consider a line break as a semicolon. Here is an example
    of the use of semicolons in JavaScript:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 不将换行符视为分号。以下是在 JavaScript 中使用分号的示例：
- en: '[PRE34]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A semicolon in JavaScript is not a terminator; these are just separators used
    to separate statements.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的分号不是一个终止符；这些只是用于分隔语句的分隔符。
- en: JavaScript automatically inserts a semicolon at the end of your statement. You
    should not put a semicolon after the closing curly bracket. Similarly, at times,
    putting a semicolon after round brackets `()` is also a bad idea, and importantly,
    the code will not run.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 会自动在语句的末尾插入分号。你不应该在闭合的大括号后加分号。同样，有时在圆括号 `()` 后加分号也是一个坏主意，更重要的是，代码将无法运行。
- en: 'If there is a `for` loop in your script, then put a semicolon after the first
    and second statements and don''t put a semicolon after third statement. It will
    produce a syntax error. For example, if you have a `for` loop like this:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的脚本中有一个 `for` 循环，那么在第一个和第二个语句后加上分号，在第三个语句后不要加分号。这将产生语法错误。例如，如果你有一个这样的 `for`
    循环：
- en: '[PRE35]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The preceding code will give you a syntax error. The right way of doing this
    is as follows:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将导致语法错误。正确的方法如下：
- en: '[PRE36]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Here are some rules for semicolons:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于分号的规则：
- en: Insert a semicolon when an assignment operator is used
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用赋值运算符时插入分号
- en: Insert a semicolon after rite operand of assignment operator
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在赋值运算符的右侧操作数后插入分号
- en: Insert a semicolon after a closing round bracket of a function
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在函数的闭合圆括号后插入分号
- en: Insert a semicolon after keywords
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在关键字后插入分号
- en: When you declare a variable insert a semicolon
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你声明一个变量时插入分号
- en: Data type
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据类型
- en: A computer works on a set of given instructions; it cannot differentiate between
    a number and a character. For example, if you write some numbers, such as `12345`,
    and some character, `abcsd`, it cannot tell integers from characters. So, data
    types are used for this. The datatype tells which type of data is being used or
    referenced in a statement.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机根据一组给定的指令工作；它不能区分数字和字符。例如，如果你写了一些数字，如 `12345`，和一些字符，如 `abcsd`，它不能区分整数和字符。所以，数据类型被用来做这个。数据类型告诉在语句中使用或引用的数据类型。
- en: In all programming languages (C, C++, Java, JavaScript), data types are used.
    Every data type has a specific function of storing data. Many classical computer
    programming languages require you to specify the data type when you declare a
    data object. JavaScript does not have this requirement. Similarly, some databases
    require declaration of the data types for storing data.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有编程语言（C、C++、Java、JavaScript）中，都使用数据类型。每个数据类型都有存储数据的具体功能。许多经典的计算机编程语言要求你在声明数据对象时指定数据类型。JavaScript
    没有这样的要求。同样，一些数据库要求声明存储数据的数据类型。
- en: 'JavaScript is a dynamic language. This means that if you declare an object,
    then its data type can be changed dynamically, for example:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种动态语言。这意味着如果你声明了一个对象，那么它的数据类型可以动态地改变，例如：
- en: '[PRE37]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In the first statement, the data type is an integer; in the second statement,
    the data type is a character; and in third statement, the data type is a Boolean.
    So, in JavaScript, the data type dynamically changes while the program is being
    processed.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个语句中，数据类型是整数；在第二个语句中，数据类型是字符；在第三个语句中，数据类型是布尔值。所以，在 JavaScript 中，数据类型在程序处理过程中会动态改变。
- en: There are six major data types defined in ECMAScript standard.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 标准中定义了六种主要的数据类型。
- en: '`Null`'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Null`'
- en: '`Undefined`'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Undefined`'
- en: '`Boolean`'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Boolean`'
- en: '`String`'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String`'
- en: '`Symbol`'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Symbol`'
- en: '`Number`'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number`'
- en: Note
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: JavaScript considers integer values and floating point values to be the same.
    It doesn't distinguish between the two. All numbers in JavaScript are represented
    as floating point type values.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 将整数和浮点数视为相同。它不区分这两者。JavaScript 中的所有数字都表示为浮点类型值。
- en: Here, `Null` and `undefined` are trivial data types in JavaScript because each
    of these defines single values. JavaScript also supports a composite data type,
    which is known as the object. Objects in JavaScript are treated as an associative
    array.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`Null` 和 `undefined` 是 JavaScript 中的简单数据类型，因为每个都定义了单个值。JavaScript 还支持一种复合数据类型，称为对象。JavaScript
    中的对象被视为关联数组。
- en: Functions in JavaScript are also treated as objects. So, functions can also
    be stored as a variable.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的函数也被视为对象。因此，函数也可以作为变量存储。
- en: The typeof operator
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`typeof operator`'
- en: 'Operators are used to find the type of a JavaScript variable. For example,
    you have two numbers variables, as follows:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符用于查找 JavaScript 变量的类型。例如，你有两个数字变量，如下所示：
- en: '[PRE38]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Here, `5` and `1` `are` operands and `+` is an operator.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`5` 和 `1` 是操作数，`+` 是运算符。
- en: 'The syntax of this operator is as follows:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 该运算符的语法如下：
- en: '[PRE39]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Description
  id: totrans-392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `Typeof` operator is a unary operator; it returns a string that indicates
    the typeof expressions. The `typeof` operator returns information as a string.
    There are six possible values that can be returned as a string. They are `string`,
    `number`, `object`, `function`, `Boolean`, and `undefined`.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`Typeof` 运算符是一个一元运算符；它返回一个字符串，指示 typeof 表达式的类型。`typeof` 运算符以字符串的形式返回信息。它可以返回六个可能的字符串值。它们是
    `string`、`number`、`object`、`function`、`Boolean` 和 `undefined`。'
- en: 'Here are some examples of the `typeof` operator:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些 `typeof` 运算符的示例：
- en: '`typeof("5"+"1")`: This will return a string'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`typeof("5"+"1")`: 这将返回一个字符串'
- en: '`typeof(5+1)`: This will return a number'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`typeof(5+1)`: 这将返回一个数字'
- en: '`typeof(5+"1")`: This will return a string'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`typeof(5+"1")`: 这将返回一个字符串'
- en: '`typeof(5*"1")`: This will return a number'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`typeof(5*"1")`: 这将返回一个数字'
- en: Note
  id: totrans-399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `typeof` operator is not a function. Operands are written in round brackets,
    so it looks like a function, but these are not functions. When you use the `typeofnull`
    operator, it returns an object.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`typeof` 运算符不是一个函数。操作数用圆括号括起来，所以看起来像是一个函数，但它们不是函数。当你使用 `typeofnull` 运算符时，它返回一个对象。'
- en: The undefined type
  id: totrans-401
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`The undefined type`'
- en: 'In JavaScript, an empty variable or a variable without values has an undefined
    value. And, `typeof` is also undefined. If you want to empty a variable, you can
    assign it an undefined value; for example:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，一个空变量或没有值的变量有一个未定义的值。并且，`typeof` 也是未定义的。如果你想清空一个变量，你可以给它赋予一个未定义的值；例如：
- en: '[PRE40]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Description
  id: totrans-404
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: In JavaScript, `undefined` is a property of the `global` object. This means
    that the value is undefined and we declare it in the global scope of the browser.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，`undefined` 是 `global` 对象的一个属性。这意味着值是未定义的，我们在浏览器的全局范围内声明它。
- en: 'There are basically three `property` attributes of `undefined`:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`undefined` 的基本有三个 `property` 属性：'
- en: '`Writeable`'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Writeable`'
- en: '`Enumerable`'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Enumerable`'
- en: '`Configurable`'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Configurable`'
- en: These three `property` attributes show that, for modern browsers, these properties
    are not writeable, enumerable, and configurable. And, we should avoid overriding
    these properties. The `undefined` type is a primitive type in JavaScript.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个 `property` 属性表明，对于现代浏览器，这些属性是不可写的、可枚举的和可配置的。因此，我们应该避免覆盖这些属性。`undefined`
    类型是 JavaScript 中的一个原始类型。
- en: Note
  id: totrans-411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `Undefined` type shows that a variable has not been assigned a value. All
    browsers, such as Firefox, Google Chrome, Opera, and Safari, support the `undefined`
    property according to ECMAScript.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '`Undefined` 类型表示一个变量尚未被赋予值。所有浏览器，如 Firefox、Google Chrome、Opera 和 Safari，都根据
    ECMAScript 支持该 `undefined` 属性。'
- en: Undefined is a built-in type in the JavaScript library. Every type of function
    for which the value is not defined is consider as an `undefined` type. For example,
    if you have a function without the `return` statement, the result of that function
    will be considered as undefined.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '`Undefined` 是 JavaScript 库中的一个内置类型。对于任何值未定义的函数类型，都被视为 `undefined` 类型。例如，如果你有一个没有
    `return` 语句的函数，该函数的结果将被视为未定义。'
- en: Being a property of a global object, its value is initially undefined. We can
    access it as a global variable, although it's a global property. A simple idea
    of an undefined type is when a variable is not defined in your script, but it
    does exist and you are considering it as a global variable.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 作为全局对象的属性，它的值最初是未定义的。我们可以将其作为全局变量访问，尽管它是一个全局属性。一个简单的 `undefined` 类型想法是，当你的脚本中没有定义变量，但它确实存在，并且你将其视为全局变量时。
- en: 'Whenever a function executes in a script, and it finishes executing without
    returning a value, then it returns the `undefined` type, for example:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 每当函数在脚本中执行，并且执行完毕没有返回值时，它将返回 `undefined` 类型，例如：
- en: '[PRE41]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Here, in this example, the variable `abc` is defined but no value has been assigned
    to it. Notice that `undefined` type is a primitive property of a object declared
    in a global scope. Here, defining it as a global object does not mean that it
    cannot be redefined. It can be redefined according to ECMAScript. So, `undefined`
    is not a reserved word; it can be used as a variable name in other scopes outside
    of its global scope.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，变量 `abc` 被定义了，但没有给它赋值。请注意，`undefined` 类型是全局作用域中声明对象的原生属性。在这里，将其定义为全局对象并不意味着它不能被重新定义。它可以按照
    ECMAScript 的规则被重新定义。因此，`undefined` 不是一个保留字；它可以在其全局作用域之外的其他作用域中用作变量名。
- en: When you use comparison operators, you can also declare the `undefined` type
    there to know whether a variable has a value or not.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用比较操作符时，你还可以在那里声明 `undefined` 类型，以了解变量是否有值。
- en: The null type
  id: totrans-419
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空类型
- en: In JavaScript, `null` shows an empty value.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，`null` 表示一个空值。
- en: 'Here is the syntax:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是语法：
- en: '[PRE42]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Description
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The data type of `null` is an object in JavaScript. `Null` shows that value
    does not exist in the script. When you want to empty a value, you declare it as
    a `null`. `Null` can be expected in places where we are expecting some values,
    but we find nothing.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，`null` 的数据类型是对象。`Null` 表示在脚本中该值不存在。当你想要清空一个值时，你可以将其声明为 `null`。在期望某些值的地方，但发现什么也没有时，可以预期会出现
    `null`。
- en: Note
  id: totrans-425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is a big difference between the `null` and `undefined` type. The data
    type of `null` is an object and the data type of `undefined` is undefined. In
    the `identity` operator, `null` cannot be undefined, but in the `equality` operator,
    `null` can be undefined. This is because the `equality` operator will cast the
    value on the left to the same type before making a comparison.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '`null` 和 `undefined` 类型之间有很大的区别。`null` 的数据类型是对象，而 `undefined` 的数据类型是 `undefined`。在
    `identity` 操作符中，`null` 不能是 `undefined`，但在 `equality` 操作符中，`null` 可以是 `undefined`。这是因为
    `equality` 操作符在比较之前会将左侧的值转换为相同的类型。'
- en: 'Undefined means a variable is declared but values is not assigned. For instance,
    `var abc`:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '`undefined` 表示变量已声明但未赋值。例如，`var abc`：'
- en: '[PRE43]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Consider the following example:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE44]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '*"You may wonder why the typeof operator returns object for a value that is
    null. This was actually an error in the original JavaScript implementation that
    was then copied in ECMAScript. Today, it is rationalized that null is considered
    a placeholder for an object, even though, technically, it is a primitive value."*'
  id: totrans-431
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"你可能想知道为什么 typeof 操作符对于值为 null 的值返回 object。这实际上是原始 JavaScript 实现中的一个错误，后来被
    ECMAScript 复制。今天，人们认为 null 被视为对象的占位符，尽管技术上它是一个原始值。"*'
- en: ''
  id: totrans-432
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*- Professional JS For Web Developers, Wrox Press*'
  id: totrans-433
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*- 专业 JavaScript 网页开发者指南，Wrox 出版社*'
- en: The number type
  id: totrans-434
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值类型
- en: There is only one type of number in JavaScript. Numbers can be written with
    or without decimals. Much larger or smaller numbers can be written with scientific
    notation.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中只有一种数字类型。数字可以带小数或不带小数书写。可以用科学记数法书写更大的或更小的数字。
- en: Description
  id: totrans-436
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'Unlike other programming languages where we have several numeric data types
    like integer, float, double, and so on. JavaScript has a Number data type for
    all numeric values. JavaScript has three symbolic values for this type: infinity,
    and NaN (not a valid number). NaN defined in the number type in JavaScript shows
    that it is a reserved word, and its value is not a number in reality.'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他编程语言不同，我们有许多数值数据类型，如整数、浮点数、双精度浮点数等。JavaScript 有一个名为 Number 的数据类型来表示所有数值。JavaScript
    为此类型提供了三个符号值：无穷大、NaN（不是一个有效的数字）。在 JavaScript 的数值类型中定义的 NaN 显示它是一个保留字，实际上它的值在现实中不是一个数字。
- en: Note
  id: totrans-438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is no difference between an integer and a floating point value in JavaScript.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，整数和浮点值之间没有区别。
- en: 'Integer values can be positive numbers, 0, or negative numbers. They can be
    of any base number like base 10, 16, or 8\. But mostly, in JavaScript, numbers
    are written to base 10\. To check the largest or smallest number representable
    or available in JavaScript, you can use constants of maximum and minimum values:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 整数可以是正数、0 或负数。它们可以是任何基数，如十进制、十六进制或八进制。但在 JavaScript 中，数字通常以十进制书写。要检查 JavaScript
    中可表示或可用的最大或最小数字，可以使用最大和最小值常量：
- en: '[PRE45]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Note
  id: totrans-442
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In Firefox or Chrome, it is `Number.MAX_VALUE`.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Firefox 或 Chrome 中，它是 `Number.MAX_VALUE`。
- en: 'In the number type, you only check a number that has two representations, for
    example, if you have the number 0, then it has two representations—one is -0 and
    the other is +0\. JavaScript numbers can be written with or without a decimal
    point; for example:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字类型中，你只需检查具有两种表示形式的数字，例如，如果你有数字0，那么它有两种表示形式——一个是-0，另一个是+0。JavaScript数字可以带小数点或不带小数点书写；例如：
- en: '[PRE46]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'If the number is too large or too short, then we use a scientific notation''s
    exponent for it. Consider the following example:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数字太大或太小，我们则使用科学记数法的指数来表示它。考虑以下示例：
- en: '[PRE47]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The limit is `1e+21` (the console displays a scientific notation from the power
    of 10).
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 限制为`1e+21`（控制台从10的幂次方显示科学记数法）。
- en: Note
  id: totrans-449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In other programming languages, we can define numbers as `float`, `integer`,
    `long`, and `short`. But, in JavaScript, there is only one data type for numbers,
    that is, `numbers`. These numbers follow the IEEE standard and also these numbers
    are double-point precision.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他编程语言中，我们可以将数字定义为`float`、`integer`、`long`和`short`。但在JavaScript中，数字只有一个数据类型，即`numbers`。这些数字遵循IEEE标准，并且这些数字是双精度。
- en: The Boolean type
  id: totrans-451
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Boolean`类型'
- en: In programming languages, the `Boolean` type works on the Boolean logic in which
    variables return results as `true` or `false`. These `true` and `false` are basically
    literals. The Boolean logic is used usually in comparison operators, for example,
    lesser or greater than, and so on.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言中，`Boolean`类型基于布尔逻辑工作，其中变量返回`true`或`false`的结果。这些`true`和`false`基本上是字面量。布尔逻辑通常用于比较运算符，例如小于或大于等。
- en: Any variable can be assigned a `Boolean` value written as `true` or `false`
    in lower case.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 任何变量都可以被赋予一个以小写`true`或`false`书写的`Boolean`值。
- en: Description
  id: totrans-454
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'In JavaScript, when you declare a `Boolean` data type to a variable, then the
    variable should not have any quote. Here is how you should use boolean assignment:
    `var abc = "true"; //string assignment` and `var abc = true; //boolean assignment`.
    The `Boolean` variables are also used in the `if`, `if` then `else`, and `while`
    loop.'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，当你将`Boolean`数据类型声明给一个变量时，该变量不应有任何引号。以下是如何使用布尔赋值：`var abc = "true";
    //字符串赋值`和`var abc = true; //布尔赋值`。`Boolean`变量也用于`if`、`if...else`和`while`循环中。
- en: 'Here is an example showing how Boolean variables are used:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个展示如何使用布尔变量的示例：
- en: '[PRE48]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The `Boolean` operators are also used when there is a lack of or presence of
    a value. For example, if we have a checkbox in our script, then its value is present
    or not depending on whether it is checked or not.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 当存在或不存在值时，也会使用`Boolean`运算符。例如，如果我们脚本中有一个复选框，那么它的值取决于它是否被选中。
- en: In other data types, there is an unlimited number of values a variable can take,
    but for the `Boolean` data types, there are only two—`true` and `false`. This
    data type is usually used when we have a controlled structure such as a comparison,
    the `if else` loop, and the `while` loop. These are controlled structures. The
    `If` and `else` statement performs one action if the value is `true`; otherwise,
    it will perform another action, that is, `false`.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他数据类型中，变量的值可以有无限多种，但对于`Boolean`数据类型，只有两种——`true`和`false`。这种数据类型通常用于我们有一个受控结构，如比较、`if...else`循环和`while`循环。这些都是受控结构。`If`和`else`语句在值为`true`时执行一个动作；否则，将执行另一个动作，即`false`。
- en: 'You can also use the `Boolean` data type as a comparative expression. A comparative
    expression is an expression that evaluates `0`, `null`, and `undefined` as `false`
    and other values as `true`. Consider the following example:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将`Boolean`数据类型用作比较表达式。比较表达式是一个评估`0`、`null`和`undefined`为`false`，其他值为`true`的表达式。考虑以下示例：
- en: '[PRE49]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In this example, the result of `A+B` is stored in `C` first and then this expression
    is evaluated. If you want to check that the `C` value is equal to `A+B`, then
    you must use the comparison operator for this, as follows:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`A+B`的结果首先存储在`C`中，然后评估这个表达式。如果你想检查`C`的值是否等于`A+B`，你必须使用比较运算符来完成，如下所示：
- en: '[PRE50]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The string type
  id: totrans-464
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串类型
- en: In JavaScript, anything that is written between quotes is treated as a string.
    Double or single quotes can be used.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，任何在引号之间书写的都被视为字符串。可以使用双引号或单引号。
- en: Strings literals can be defined in two ways. One way is to write a string in
    double quotes and the other way is to write a string in single quotes.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串字面量可以通过两种方式定义。一种方式是使用双引号编写字符串，另一种方式是使用单引号编写字符串。
- en: Note
  id: totrans-467
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is no special type of representation of a single character in JavaScript.
    If you want to represent a single character in JavaScript, then you must define
    a single character string, for example, the character `a`. An empty string is
    a zero length string, for example "".
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，没有特殊类型来表示单个字符。如果你想用JavaScript表示单个字符，你必须定义一个单字符字符串，例如，字符`a`。空字符串是一个零长度的字符串，例如""。
- en: Description
  id: totrans-469
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: In JavaScript, the text data is represented in the form of the `string` data
    type. In programming languages, string is a combination of characters and numbers.
    A JavaScript string is an ordered sequence of zero or more characters.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，文本数据以`string`数据类型的形式表示。在编程语言中，字符串是字符和数字的组合。JavaScript字符串是零个或多个字符的有序序列。
- en: 'The restriction for writing these strings is that you must use the same quotation
    mark at the beginning and end. This means that a string that starts with a single
    quote must end with a single quote, and the same rule applies for double quotation
    marks. Consider the following example:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 编写这些字符串的限制是，你必须使用相同的引号在开头和结尾。这意味着以单引号开始的字符串必须以单引号结束，双引号也是如此。考虑以下示例：
- en: '[PRE51]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: If there is a problem in a string and it cannot show some characters. For a
    representation of these characters, there is a technique in JavaScript—we define
    the escape sequence for this. This means that the character which we cannot write
    directly is written using an escape sequence. For example, if we want to insert
    a quotation mark within a string, we can do it by preceding quotation mark with
    a backslash. It is known as escaping the quotation mark. Similarly, string literals
    are unable to represent nonprinting characters such as tab, new line, and so on.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字符串中存在问题，它无法显示某些字符。对于这些字符的表示，JavaScript中有一个技术——我们定义转义序列来表示。这意味着我们无法直接写入的字符，可以使用转义序列来表示。例如，如果我们想在字符串中插入一个引号，我们可以通过在引号前加上反斜杠来实现。这被称为转义引号。同样，字符串字面量无法表示非打印字符，如制表符、换行符等。
- en: 'An escape sequence is a combination of characters starting with a backslash.
    Some escape sequences are as follows:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 转义序列是以反斜杠开始的字符组合。以下是一些转义序列：
- en: '\b: BackspaceDeletes the previous character and moves cursor one space backwards.'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '\b: 退格删除前一个字符并将光标向后移动一个空格。'
- en: '\n: New lineEnds the current line and moves the cursor to a new line. If used
    in the middle of a string it will move the text after `\n` to new line.'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '\n: 换行符结束当前行并将光标移动到新行。如果在字符串中间使用，它将把`\n`后面的文本移动到新行。'
- en: '\f: Form feedIt is a page-break ASCII control character. It tells printer to
    continue printing on new page.'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '\f: 表格馈送它是一个页面换行ASCII控制字符。它告诉打印机在新页面上继续打印。'
- en: '\v: Vertical tabIt was used to control the vertical movement on page. It is
    rarely used now.'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '\v: 垂直制表符它曾用于控制页面上的垂直移动。现在很少使用。'
- en: '\t: Horizontal tab control the insertion of text horizontally on page. It is
    inserted usually using the *Tab* key on the keyboard.'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '\t: 水平制表符控制页面上的文本水平插入。通常使用键盘上的*Tab*键插入。'
- en: '\" : Double QuotesA double quotes is preceded with a backslash to insert it
    within a string.'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '\" : 双引号双引号前面需要加上反斜杠才能在字符串中插入。'
- en: '\'' : Single QuotesA single quotes is preceded with a backslash to insert it
    within a string.'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '\'' : 单引号单引号前面需要加上反斜杠才能在字符串中插入。'
- en: '\\: Backslash to insert a backslash within a string we escape it with another
    backslash.'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '\\: 反斜杠在字符串中插入反斜杠时，我们用另一个反斜杠来转义它。'
- en: 'Here is an example of this:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是这个示例：
- en: '[PRE52]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Its output will be as follows:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 其输出将如下所示：
- en: '[PRE53]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The object type
  id: totrans-487
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象类型
- en: Object is a sequence of primitive and, sometimes, reference data types stored
    as name-value pairs.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 对象是原始数据类型和有时是引用数据类型的序列，存储为名称-值对。
- en: 'The syntax is as follows:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE54]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Description
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'In JavaScript, objects are written into curly brackets. Each item of an object
    is called a **property**. Property values can be defined as any valid data type
    as well as functions or methods. Consider the following example:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，对象是用花括号书写的。对象中的每个项目被称为**属性**。属性值可以是任何有效的数据类型，也可以是函数或方法。考虑以下示例：
- en: '[PRE55]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'We can say that the object is a list of items, and each item in the list has
    some method and function stored as its name-value pair:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说对象是项的列表，列表中的每个项都存储了一些作为其名称-值对的函数和方法：
- en: 'In JavaScript, everything is like an object, for example:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，一切都是对象，例如：
- en: Regular expressions are objects
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式是对象
- en: Numbers are objects
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字是对象
- en: Strings are objects
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串是对象
- en: Mathematical notations are objects
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数学符号是对象
- en: Arrays and functions are objects
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组和函数是对象
- en: Objects are objects
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象就是对象
- en: 'The property name of any item can be a string or number. When a property is
    a number, then the way of writing this property is different; we will write it
    as follows:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 任何项的属性名可以是字符串或数字。当一个属性是数字时，写这个属性的方式就不同；我们将这样写：
- en: '[PRE56]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: In JavaScript, objects are used to store data and for writing your own custom
    methods and functions. Primitive values are, for example, `null`, `undefined`,
    `true`, and `false else`.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，对象用于存储数据和编写自定义方法和函数。原始值例如 `null`、`undefined`、`true` 和 `false`。
- en: 'Object properties are basically variables that are used in methods and function
    internally. They can also be global variables for the whole page. There is a difference
    between a method and a function. A function is a standalone unit of an object,
    but a method is attached to an object and it is used with `this` keyword:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 对象属性基本上是用于方法和函数内部的变量。它们也可以是整个页面的全局变量。方法和函数之间有一个区别。函数是对象的一个独立单元，而方法则附加到对象上，并使用
    `this` 关键字：
- en: '[PRE57]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Variable, scope, and memory
  id: totrans-507
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量、作用域和内存
- en: 'When we describe a variable in JavaScript, there is no limit to how much data
    this variable holds. The maximum is described by the browser''s capacity depending
    on how much data it can hold. Let''s take a look the following code:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 JavaScript 中描述一个变量时，这个变量可以存储的数据量没有限制。最大值由浏览器的容量决定，这取决于它可以存储多少数据。让我们看看以下代码：
- en: '[PRE58]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: We can define a variable in JavaScript using the `var` keyword. We can define
    the value of a variable immediately or later. A variable that we define outside
    the boundary of a function is a global variable.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `var` 关键字在 JavaScript 中定义一个变量。我们可以立即定义变量的值，或者稍后定义。我们定义在函数边界之外的变量是全局变量。
- en: Tip
  id: totrans-511
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Creating too many global variables in JavaScript is a very bad approach. The
    major reason why global variables are discouraged in JavaScript is because in
    JavaScript, all the code shares a single global namespace, also JavaScript has
    implied global variables, that is, variables that are not explicitly declared
    in local scope are automatically included with global namespaces. Relying too
    much on global variables can result in conflicts between various scripts on the
    same page.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中创建过多的全局变量是一个非常糟糕的方法。JavaScript 中不建议使用全局变量的主要原因是因为在 JavaScript
    中，所有代码共享一个单一的全球命名空间，而且 JavaScript 有隐式全局变量，即未在局部作用域中显式声明的变量会自动包含在全局命名空间中。过度依赖全局变量可能导致同一页面上的各种脚本之间发生冲突。
- en: 'Every function in a script can access a global variable. When you define a
    variable in a function, then its scope is inside that function. Let''s take a
    look at the following code snippet:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本中的每个函数都可以访问全局变量。当你在函数中定义一个变量时，其作用域就在该函数内部。让我们看看以下代码片段：
- en: '[PRE59]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Note
  id: totrans-515
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The scope of a global variable never stops during the execution of the whole
    page even it is not needed.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 全局变量的作用域在整个页面的执行过程中永远不会停止，即使它不再需要。
- en: If you fail to write `var` inside the function, then this variable is considered
    as a global variable. If you define a variable with the same global variable name,
    then it will be considered as a global variable.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有在函数内部写 `var`，那么这个变量被认为是全局变量。如果你用相同的全局变量名定义了一个变量，那么它将被认为是全局变量。
- en: JavaScript dynamically allocates memory to variables. When the scope of these
    variables is dereferenced or finished, it is automatically removed from the memory
    by the garbage collector. So, its disadvantage is that the unwanted variables
    remain in the memory.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 动态为变量分配内存。当这些变量的作用域被取消引用或完成时，垃圾回收器会自动将其从内存中移除。因此，其缺点是不需要的变量仍然留在内存中。
- en: 'There are two ways to save memory:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 保存内存有两种方法：
- en: Using the function scope
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用函数作用域
- en: Dereferencing these variables manually
  id: totrans-521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动取消引用这些变量
- en: 'The use of the function scope is more appropriate as variables get dereferenced
    when the function ends, thus saving memory:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 使用函数作用域更为合适，因为当函数结束时，变量会被取消引用，从而节省内存：
- en: '[PRE60]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Variable declaration
  id: totrans-524
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量声明
- en: JavaScript variables can be identified by unique names. These unique names are
    known as **identifiers**. Variables in JavaScript are used to store information.
    Identifiers can be of any length and size, for example, `a`, `b`, `myName`.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 变量可以通过唯一名称识别。这些唯一名称被称为 **标识符**。JavaScript 中的变量用于存储信息。标识符可以是任何长度和大小，例如，`a`、`b`、`myName`。
- en: When you declare a variable in JavaScript, the machine will save it in the memory
    so that you can store or retrieve data from memory when needed. Variable names
    should be unique in the script.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在JavaScript中声明一个变量时，机器会将其保存在内存中，以便你可以在需要时从内存中存储或检索数据。变量名在脚本中应该是唯一的。
- en: The rules to declare variable names in JavaScript are the same as those for
    identifiers, as discussed previously.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中声明变量名的规则与之前讨论的标识符规则相同。
- en: 'When a code starts its execution, it first processes the variable declaration.
    These variables can be declared globally as well as within a function. We can
    declare multiple comma-separated variables, for example:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码开始执行时，它首先处理变量声明。这些变量可以全局声明，也可以在函数内部声明。我们可以声明多个以逗号分隔的变量，例如：
- en: '[PRE61]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'When we store data into a variable, this process is called **variable initialization**.
    We can initialize a variable at the time of its creation or later when we want
    to use it, for example:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将数据存储到变量中时，这个过程称为**变量初始化**。我们可以在创建变量时或稍后当我们想要使用它时初始化变量，例如：
- en: '[PRE62]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Here, in this example, the variable `a` stores the value `1`, and `b` stores
    `2`, and then we create the variable `c` and define its value later.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，变量`a`存储了值`1`，而`b`存储了`2`，然后我们创建了变量`c`并在稍后定义其值。
- en: The variable scope
  id: totrans-533
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量作用域
- en: A variable scope is a frame where a variable exists in a program. We can define
    a scope of a variable in a program. Basically, the scope is a set of methods,
    functions, and objects that we have access to.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 变量作用域是变量在程序中存在的框架。我们可以在程序中定义变量的作用域。基本上，作用域是我们能够访问的方法、函数和对象集合。
- en: 'There are two scopes of variables in JavaScript:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，变量有两种作用域：
- en: Local scope variables
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 局部作用域变量
- en: Global scope variables
  id: totrans-537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局作用域变量
- en: Local scope variables
  id: totrans-538
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 局部作用域变量
- en: A variable when defined inside a function is called a local scope variable,
    as this variable can only be accessed into this function. Function variables will
    be local to this variable.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数内部定义的变量称为局部作用域变量，因为这个变量只能在这个函数内部访问。函数变量将只对这个变量是局部的。
- en: Description
  id: totrans-540
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'For a variable, which is defined in the local scope, a variable of the same
    name can be used in a different function. When a function starts, the local variable
    is created and when the function ends, the local variable is deleted. In JavaScript,
    always declare variables before using them; failing to do this will throw some
    exceptions. In a function, if you have a local and a global variable with the
    same name, then the local variable will get priority over the global variable.
    So, avoid using the same variable name. Let''s take a look at the following code
    snippet:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在局部作用域中定义的变量，可以在不同的函数中使用具有相同名称的变量。当函数开始时，局部变量被创建，当函数结束时，局部变量被删除。在JavaScript中，始终在使用变量之前声明它们；未能这样做将抛出一些异常。在一个函数中，如果你有一个与全局变量具有相同名称的局部变量，那么局部变量将具有优先权。因此，避免使用相同的变量名。让我们看一下以下代码片段：
- en: '[PRE63]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Global scope variables
  id: totrans-543
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全局作用域变量
- en: A global variable can be declared anywhere in a JavaScript program. They can
    be accessed from everywhere. A global scope variable remains in the memory throughout
    the execution of scripts on the page. This results in memory depletion.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 全局变量可以在JavaScript程序的任何地方声明。它们可以从任何地方访问。全局作用域变量在整个页面上脚本执行期间都保留在内存中。这会导致内存耗尽。
- en: Description
  id: totrans-545
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: Basically, global variables are window objects. Global variables are generally
    defined outside of the function and all functions in a webpage can access this
    global variable. If you give some value to a variable which is not declared, then
    this variable will be considered as a global variable. When you close a web page,
    the global variable will be deleted. For frontend developers in HTML, the window
    object is a global variable.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，全局变量是窗口对象。全局变量通常在函数外部定义，并且网页中的所有函数都可以访问这个全局变量。如果你给一个未声明的变量赋值，那么这个变量将被视为全局变量。当你关闭网页时，全局变量将被删除。对于HTML的前端开发者来说，窗口对象是一个全局变量。
- en: '[PRE64]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Primitive and reference values
  id: totrans-548
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始类型值和引用类型值
- en: 'There are two types of values a variable can have:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 变量可以有两种类型的值：
- en: Primitive type values
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始类型值
- en: Reference type values
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用类型值
- en: Primitive type values
  id: totrans-552
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原始类型值
- en: Generally objects are aggregated from properties and those properties can be
    used to reference the object. Primitive (value, data type) is not an object and
    has no methods associated to it.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 通常对象是从属性中聚合的，这些属性可以用来引用对象。原始类型（值，数据类型）不是对象，并且没有与之关联的方法。
- en: Description
  id: totrans-554
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: 'In JavaScript, there are five types of the primitive type: `string`, `number`,
    `null`, `undefined`, and `Boolean`. A primitive value is stored directly in the
    stack. These values are stored in the same location from which they are accessed.
    Because of its fixed size, it can be easily manipulated.'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，有五种原始类型：`string`、`number`、`null`、`undefined` 和 `Boolean`。原始值直接存储在栈上。这些值存储在它们被访问的相同位置。由于其固定大小，它可以很容易地进行操作。
- en: Reference type values
  id: totrans-556
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引用类型值
- en: Reference type values are specialized objects similar to arrays and functions
    stored in a heap. A pointer is used to locate their location into the memory.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 引用类型值是类似于数组和函数的特殊对象，存储在堆中。使用指针来定位它们在内存中的位置。
- en: Description
  id: totrans-558
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: In JavaScript, a variable holding a reference type value is stored in the heap
    memory. These objects cannot be easily manipulated because they contain arbitrary
    elements and properties. When a reference value is passed to a function, the function
    modifies its values or contents, and that change can be seen by the object, which
    calls the function and other functions that have references to the object.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，存储引用类型值的变量存储在堆内存中。这些对象不能轻易操作，因为它们包含任意元素和属性。当引用值传递给函数时，函数会修改其值或内容，这种变化可以通过调用函数的对象以及有对象引用的其他函数看到。
- en: The execution context and scope
  id: totrans-560
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行上下文和范围
- en: The scope and context are not the same things. Every function in JavaScript
    has a scope and a context. When we declare a function in JavaScript, this function
    can be accessed in different and various contexts and scopes. JavaScript follows
    design patterns for scopes and context.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 范围和上下文不是同一件事。JavaScript 中的每个函数都有一个范围和上下文。当我们用 JavaScript 声明一个函数时，这个函数可以在不同的上下文和范围内被访问。JavaScript
    遵循范围和上下文的设计模式。
- en: The main difference between a scope and context is that scope is function based
    and context is object based. The scope is used to access a function when it is
    invoked. Whereas the context is used with the `this` keyword, so it is basically
    a reference type.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 范围和上下文之间的主要区别在于，范围是基于函数的，而上下文是基于对象的。范围用于在调用时访问函数。而上下文与 `this` 关键字一起使用，因此它基本上是一个引用类型。
- en: 'The scope is associated with the execution context when the execution context
    starts. There is a chain of scope with it, for example:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 范围与执行上下文在执行上下文开始时相关联。与之相关联的是一个范围链，例如：
- en: '[PRE65]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'In JavaScript, the environment in which the code is executed is classified
    into the following:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，代码执行的 环境 被分类为以下几种：
- en: Global code
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局代码
- en: Function code
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数代码
- en: Eval code
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eval` 代码'
- en: The global code
  id: totrans-569
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全局代码
- en: The global code is a default environment where the code is executed for the
    first time, that is, the external `.js` files and local inline code are loaded.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 全局代码是一个默认环境，代码首次执行时，即外部 `.js` 文件和本地内联代码被加载。
- en: The function code
  id: totrans-571
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数代码
- en: The function code is the environment in which flow control enters the function
    body during the code execution. Every return from the function exits the current
    execution context.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 函数代码是代码执行期间流程控制进入函数体的环境。每次函数返回都会退出当前执行上下文。
- en: The eval code
  id: totrans-573
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`eval` 代码'
- en: The code is supplied to built-in `eval` functions. The `eval` code calls the
    context and creates an execution context.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 代码被提供给内置的 `eval` 函数。`eval` 代码调用上下文并创建一个执行上下文。
- en: 'For example:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE66]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: In this example you call the function with the context you want and run `eval`
    within that function.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你使用你想要的上下文调用函数，并在该函数内部运行 `eval`。
- en: Garbage collection
  id: totrans-578
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 垃圾回收
- en: There is no separate memory management in JavaScript. A browser decides when
    a cleanup is needed. Garbage collection is basically knowing if the variables
    are still being used or will be used in future throughout the program execution
    and if not collect and remove them. In simple words, the track of reference made
    to an object is kept in background. once it becomes idle or reaches zero it can
    be collected by the GC.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中没有单独的内存管理。浏览器决定何时需要清理。垃圾回收基本上是知道变量在整个程序执行过程中是否仍在使用或将来会被使用，如果不使用则收集并删除它们。简单来说，对对象的引用跟踪是在后台进行的。一旦它变得空闲或达到零，就可以由
    GC 收集。
- en: We can clean memory manually, but in some cases, there is no need for manual
    memory cleaning. We cannot force JavaScript to clean memory because this task
    is done on runtime by the garbage collector. Some heavy applications, such as
    computer games, require a lot of memory and slowdown your system; so, in this
    case, it only depends on your code and how you structured your application code
    for use of computer memory.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以手动清理内存，但在某些情况下，没有必要手动清理内存。我们无法强制JavaScript清理内存，因为这项任务是由垃圾回收器在运行时完成的。一些重型应用程序，如计算机游戏，需要大量内存并减慢你的系统；因此，在这种情况下，这完全取决于你的代码以及你如何结构化你的应用程序代码以使用计算机内存。
- en: 'You can structure your code by following these steps:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下步骤来结构化你的代码：
- en: Objects
  id: totrans-582
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象
- en: When you declare an object, try to reuse that object by deleting its properties
    and restoring it to an empty object such as `{}`. This process is known as recycling
    the objects. When an object is created for the first time (`new foo();`), memory
    is allocated to it. So, if an object is already declared, we can reuse it in our
    script.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 当你声明一个对象时，尝试通过删除其属性并将其恢复为空对象（如`{}`）来重用该对象。这个过程被称为对象的回收。当对象第一次创建时（`new foo();`），会为其分配内存。因此，如果已经声明了一个对象，我们可以在脚本中重用它。
- en: Arrays
  id: totrans-584
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组
- en: When you use an array in your script, clear that array after using it. Assigning
    `[]` to an array is often used as a shorthand to clear it, but it actually creates
    a new empty array and garbages the old one. You can set the array length to `0`,
    (`arr.length = 0;`); this will also clear the array but while reusing the same
    array object.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在脚本中使用数组时，使用完毕后请清除该数组。将`[]`分配给数组通常用作清除它的快捷方式，但实际上它会创建一个新的空数组并废弃旧的数组。你可以将数组长度设置为`0`（`arr.length
    = 0;`），这将清除数组，同时重用相同的数组对象。
- en: Functions
  id: totrans-586
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数
- en: When you need to call a function more than one time, then you can optimize our
    code by assigning a permanent variable to the function rather than calling it
    again and again.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要多次调用一个函数时，你可以通过将一个永久变量分配给该函数而不是反复调用它来优化我们的代码。
